void sub_100005C38(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = +[NSDistributedNotificationCenter defaultCenter];
  [v2 addObserver:*(void *)(a1 + 32) selector:"handleMFDNotification:" name:@"com.apple.stockholm.se.mfd" object:0];

  v3 = SESDefaultLogObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "SESKey registered to receive MFD notifications", v4, 2u);
  }
}

id sub_100005CD8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _dumpState];
}

id sub_100005D68(uint64_t a1)
{
  v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Received MFD notification, clearing instance representations", v4, 2u);
  }

  return [*(id *)(a1 + 32) setInstanceRepresentations:0];
}

id sub_100005F74(id a1, KeySlot *a2)
{
  return [(KeySlot *)a2 description];
}

void sub_1000061E0(void *a1)
{
  v2 = (void *)a1[4];
  if (v2)
  {
    v3 = sub_1000535D8((uint64_t)SEProxyAdapter, v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = (void *)a1[5];
  v5 = (void *)a1[6];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000062C8;
  v7[3] = &unk_10040B938;
  v6 = (void *)a1[8];
  v7[4] = a1[7];
  id v8 = v6;
  sub_10005812C((uint64_t)SecureElementManager, v3, v4, v5, v7);
  if (v2) {
}
  }

void sub_1000062C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v7 = [*(id *)(a1 + 32) messageQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1000063B8;
  v11[3] = &unk_10040B910;
  id v12 = v6;
  id v8 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v8;
  uint64_t v13 = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, v11);
}

void sub_1000063B8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v2();
  }
  else
  {
    uint64_t v3 = [*(id *)(a1 + 40) initializeRAMRepresentation:*(void *)(a1 + 48)];
    if (v3) {
      uint64_t v4 = 0;
    }
    else {
      uint64_t v4 = *(void *)(a1 + 48);
    }
    id v5 = (id)v3;
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v4);
  }
}

void sub_100006678(void *a1)
{
  v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = sub_1000535D8((uint64_t)SEProxyAdapter, v2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100006760;
  v6[3] = &unk_10040B938;
  uint64_t v4 = (void *)a1[5];
  id v5 = (void *)a1[7];
  v6[4] = a1[6];
  id v7 = v5;
  sub_10005812C((uint64_t)SecureElementManager, v3, 0, v4, v6);
  if (v2) {
}
  }

void sub_100006760(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) messageQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_100006850;
  v11[3] = &unk_10040B910;
  id v12 = v6;
  id v8 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v8;
  uint64_t v13 = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, v11);
}

void sub_100006850(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v2();
  }
  else
  {
    id v3 = [*(id *)(a1 + 40) initializeRAMRepresentation:*(void *)(a1 + 48)];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100006A70(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v12 = a1[6];
    id v10 = SESEnsureError();
    v11 = *(void (**)(void))(v12 + 16);
  }
  else
  {
    id v8 = (void *)a1[4];
    uint64_t v9 = a1[5];
    id v13 = 0;
    id v10 = [v8 getKeyHandle:v5 key:v9 error:&v13];
    id v7 = v13;
    v11 = *(void (**)(void))(a1[6] + 16);
  }
  v11();
}

id sub_100006E3C(uint64_t a1, void *a2)
{
  id v3 = [a2 AID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_100006E80(id a1, KeySlot *a2)
{
  return [(KeySlot *)a2 state] == 1;
}

BOOL sub_100006EA4(id a1, KeySlot *a2)
{
  v2 = a2;
  BOOL v3 = [(KeySlot *)v2 state] == 2 && [(KeySlot *)v2 designation] == 0;

  return v3;
}

id sub_100007150(uint64_t a1, void *a2)
{
  BOOL v3 = [a2 AID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_100007194(id a1, KeySlot *a2)
{
  return [(KeySlot *)a2 state] == 5;
}

BOOL sub_1000072B4(id a1, InstanceRepresentation *a2)
{
  v2 = [(InstanceRepresentation *)a2 AID];
  unsigned __int8 v3 = [v2 isEqualToString:@"A000000704C0000000000002"];

  return v3;
}

NSNumber *__cdecl sub_1000072F8(id a1, KeySlot *a2)
{
  v2 = a2;
  if ([(KeySlot *)v2 state] == 6)
  {
    unsigned __int8 v3 = +[NSNumber numberWithUnsignedShort:[(KeySlot *)v2 number]];
  }
  else
  {
    unsigned __int8 v3 = 0;
  }

  return (NSNumber *)v3;
}

id sub_100007B70(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 AID];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_100007BB4(uint64_t a1, void *a2)
{
  unsigned __int8 v3 = [a2 keyIdentifier];
  id v4 = [*(id *)(a1 + 32) keyIdentifier];
  id v5 = [v3 isEqualToData:v4];

  return v5;
}

BOOL sub_100007C18(uint64_t a1, void *a2)
{
  unsigned int v3 = [a2 keyNumber];
  return v3 == [*(id *)(a1 + 32) keyNumber];
}

void sub_100007DE8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v13 = a1[8];
    id v14 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v14);
  }
  else
  {
    id v8 = (void *)a1[4];
    id v27 = 0;
    uint64_t v9 = [v8 getUsableLegacyKeySlot:@"A000000704C0000000000002" outError:&v27];
    id v10 = v27;
    if (v10)
    {
      id v7 = v10;
      uint64_t v11 = a1[8];
      uint64_t v12 = SESEnsureError();
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);
    }
    else
    {
      id v15 = SESDefaultLogObject();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        unsigned int v16 = [v9 number];
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Creating key in slot %u", buf, 8u);
      }

      v17 = [@"A000000704C0000000000002" hexStringAsData];
      v18 = (void *)a1[5];
      v19 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [v9 number]);
      v20 = (void *)a1[6];
      v21 = (void *)a1[7];
      id v26 = 0;
      uint64_t v12 = sub_100032280(v5, v17, v18, v19, v20, v21, &v26);
      id v7 = v26;

      if (v7)
      {
        (*(void (**)(void, void, id))(a1[8] + 16))(a1[8], 0, v7);
      }
      else
      {
        [v9 setState:6];
        v22 = SESDefaultLogObject();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v23 = [v12 publicKeyData];
          v24 = [v23 asHexString];
          unsigned int v25 = [v9 number];
          *(_DWORD *)buf = 138412546;
          v29 = v24;
          __int16 v30 = 1024;
          unsigned int v31 = v25;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Created legacy key %@ in slot %u", buf, 0x12u);
        }
        (*(void (**)(void, void *, void))(a1[8] + 16))(a1[8], v12, 0);
      }
    }
  }
}

void sub_1000081EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

LABEL_7:
    goto LABEL_8;
  }
  if ([*(id *)(a1 + 32) unsignedIntValue] >= 2
    && [*(id *)(a1 + 32) unsignedIntValue] < 0x10)
  {
    uint64_t v13 = [@"A000000704C0000000000002" hexStringAsData];
    id v7 = sub_100034168(v5, v13, [*(id *)(a1 + 32) unsignedShortValue]);

    if (v7)
    {
      id v14 = SESDefaultLogObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        unsigned int v15 = [*(id *)(a1 + 32) unsignedIntValue];
        *(_DWORD *)buf = 67109120;
        unsigned int v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Unable to delete legacy key in slot %u", buf, 8u);
      }
    }
    else
    {
      unsigned int v16 = [*(id *)(a1 + 40) instanceRepresentations];
      id v7 = [v16 find:&stru_10040BB48];

      v17 = [v7 keys];
      v18 = [v17 objectAtIndexedSubscript:[*(id *)(a1 + 32) unsignedIntValue]];
      [v18 resetLegacyToAvailable];

      id v14 = SESDefaultLogObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        unsigned int v19 = [*(id *)(a1 + 32) unsignedIntValue];
        *(_DWORD *)buf = 67109378;
        unsigned int v21 = v19;
        __int16 v22 = 2112;
        uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Deleted legacy key in slot %u with error %@", buf, 0x12u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = SESDefaultLogObject();
  [*(id *)(a1 + 32) unsignedIntValue];
  id v10 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);

LABEL_8:
}

BOOL sub_1000084B0(id a1, InstanceRepresentation *a2)
{
  v2 = [(InstanceRepresentation *)a2 AID];
  unsigned __int8 v3 = [v2 isEqualToString:@"A000000704C0000000000002"];

  return v3;
}

void sub_1000086A8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v14 = a1[8];
    unsigned int v15 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v15);
  }
  else
  {
    uint64_t v8 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v9 = (void *)a1[4];
    id v10 = (void *)a1[5];
    uint64_t v11 = (void *)a1[6];
    uint64_t v12 = (void *)a1[7];
    id v16 = 0;
    uint64_t v13 = sub_100032A8C(v5, v8, v9, v10, v11, v12, &v16);
    id v7 = v16;

    (*(void (**)(void))(a1[8] + 16))();
  }
}

void sub_100008950(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    unsigned int v15 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v15);
  }
  else
  {
    uint64_t v8 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v9 = *(void **)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void **)(a1 + 48);
    unsigned int v12 = [*(id *)(a1 + 56) unsignedIntValue];
    id v16 = 0;
    uint64_t v13 = sub_100033090(v5, v8, v9, v10, v11, v12, &v16);
    id v7 = v16;

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

void sub_100008B74(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v6 = *(void **)(a1 + 32);
    id v8 = 0;
    id v7 = [v6 getOccupiedLegacyKeySlots:&v8];
    id v5 = v8;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100008D18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v13 = SESEnsureError();
    uint64_t v14 = *(void (**)(void))(v15 + 16);
  }
  else
  {
    id v8 = [*(id *)(a1 + 32) DERItem];
    unsigned int v10 = +[KeySlot _acl:containsOperation:](KeySlot, "_acl:containsOperation:", v8, v9, "os");
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v11 = *(void **)(a1 + 40);
    if (!v10)
    {
      id v19 = 0;
      uint64_t v13 = [v11 _createKey:v5 acl:v12 error:&v19];
      id v7 = v19;
      uint64_t v16 = *(void *)(a1 + 48);
      v17 = [v13 key];
      v18 = [v17 keyData];
      (*(void (**)(uint64_t, void *, id))(v16 + 16))(v16, v18, v7);

      goto LABEL_8;
    }
    id v20 = 0;
    uint64_t v13 = [v11 _createSynchronizableKey:v5 extractedACLs:v12 error:&v20];
    id v7 = v20;
    uint64_t v14 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
  }
  v14();
LABEL_8:
}

void sub_100009320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_100009360(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100009370(uint64_t a1)
{
}

void sub_100009378(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = (void *)a1[4];
  id v7 = [@"A000000704C0000000000002" hexStringAsData];
  id v8 = (void *)a1[5];
  uint64_t v9 = (void *)a1[6];
  unsigned int v10 = +[NSData dataWithBytes:a2 length:a3];
  uint64_t v11 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v11 + 40);
  uint64_t v12 = sub_100037D98(v6, v7, v8, v9, v10, &obj);
  objc_storeStrong((id *)(v11 + 40), obj);
  uint64_t v13 = *(void *)(a1[7] + 8);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
}

void sub_10000958C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v14);
  }
  else
  {
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = [@"A000000704C0000000000002" hexStringAsData];
    id v15 = 0;
    [v11 _deleteLoadedKey:v7 instanceAID:v12 loadedKey:v8 error:&v15];
    id v10 = v15;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

void sub_100009844(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v20 = a1[7];
    unsigned int v21 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v21);
  }
  else
  {
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      unsigned int v24 = v13;
      __int16 v25 = 1024;
      unsigned int v26 = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sign with slot %u key 0x%x", buf, 0xEu);
    }
    id v15 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v16 = (void *)a1[4];
    v17 = (void *)a1[5];
    v18 = (void *)a1[6];
    id v22 = 0;
    id v19 = sub_10003431C(v7, v15, v16, v8, v17, v18, &v22);
    id v10 = v22;

    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_100009BD4(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v20 = a1[7];
    unsigned int v21 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v21);
  }
  else
  {
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      unsigned int v24 = v13;
      __int16 v25 = 1024;
      unsigned int v26 = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sign precomputed with slot %u key 0x%x", buf, 0xEu);
    }
    id v15 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v16 = (void *)a1[4];
    v17 = (void *)a1[5];
    v18 = (void *)a1[6];
    id v22 = 0;
    id v19 = sub_100034984(v7, v15, v16, v8, v17, v18, &v22);
    id v10 = v22;

    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_100009FA4(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v20 = a1[7];
    unsigned int v21 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v21);
  }
  else
  {
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      unsigned int v24 = v13;
      __int16 v25 = 1024;
      unsigned int v26 = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sign with slot # %u key 0x%x", buf, 0xEu);
    }
    id v15 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v16 = (void *)a1[4];
    v17 = (void *)a1[5];
    v18 = (void *)a1[6];
    id v22 = 0;
    id v19 = sub_100034B4C(v7, v15, v16, v8, v17, v18, &v22);
    id v10 = v22;

    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_10000A3CC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v26 = a1[10];
    id v27 = SESEnsureError();
    (*(void (**)(uint64_t, void, void, void *))(v26 + 16))(v26, 0, 0, v27);
  }
  else
  {
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      unsigned int v30 = v13;
      __int16 v31 = 1024;
      unsigned int v32 = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Encrypt with slot # %u key 0x%x", buf, 0xEu);
    }
    id v15 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v16 = (void *)a1[4];
    v17 = (void *)a1[5];
    v18 = (void *)a1[6];
    id v19 = (void *)a1[7];
    uint64_t v20 = (void *)a1[8];
    unsigned int v21 = (void *)a1[9];
    id v28 = 0;
    id v22 = sub_1000350F4(v7, v15, v16, v8, v17, v18, v19, v20, v21, &v28);
    id v10 = v28;

    uint64_t v23 = a1[10];
    unsigned int v24 = [v22 cipherText];
    __int16 v25 = [v22 authenticationTag];
    (*(void (**)(uint64_t, void *, void *, id))(v23 + 16))(v23, v24, v25, v10);
  }
}

void sub_10000A88C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v24 = a1[11];
    __int16 v25 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v25);
  }
  else
  {
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      unsigned int v28 = v13;
      __int16 v29 = 1024;
      unsigned int v30 = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Decrypt with slot # %u key 0x%x", buf, 0xEu);
    }
    id v15 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v16 = (void *)a1[4];
    v17 = (void *)a1[5];
    v18 = (void *)a1[6];
    id v19 = (void *)a1[7];
    uint64_t v20 = (void *)a1[8];
    unsigned int v21 = (void *)a1[9];
    id v22 = (void *)a1[10];
    id v26 = 0;
    uint64_t v23 = sub_100035814(v7, v15, v16, v8, v17, v18, v19, v20, v21, v22, &v26);
    id v10 = v26;

    (*(void (**)(void))(a1[11] + 16))();
  }
}

void sub_10000ADE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v29 = *(void *)(a1 + 120);
    unsigned int v30 = SESEnsureError();
    (*(void (**)(uint64_t, void, void, void *))(v29 + 16))(v29, 0, 0, v30);
  }
  else
  {
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      unsigned int v33 = v13;
      __int16 v34 = 1024;
      unsigned int v35 = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Transcode with slot %u key 0x%x", buf, 0xEu);
    }
    id v15 = [@"A000000704C0000000000002" hexStringAsData];
    uint64_t v16 = *(void **)(a1 + 32);
    v17 = *(void **)(a1 + 40);
    v18 = *(void **)(a1 + 48);
    id v19 = *(void **)(a1 + 56);
    uint64_t v20 = *(void **)(a1 + 64);
    long long v21 = *(_OWORD *)(a1 + 72);
    long long v22 = *(_OWORD *)(a1 + 88);
    uint64_t v23 = *(void **)(a1 + 104);
    uint64_t v24 = *(void **)(a1 + 112);
    id v31 = 0;
    __int16 v25 = sub_100035F44(v7, v15, v16, v8, v17, v18, v19, v20, (void *)v21, *((void **)&v21 + 1), (void *)v22, *((void **)&v22 + 1), v23, v24, &v31);
    id v10 = v31;

    uint64_t v26 = *(void *)(a1 + 120);
    id v27 = [v25 cipherText];
    unsigned int v28 = [v25 authenticationTag];
    (*(void (**)(uint64_t, void *, void *, id))(v26 + 16))(v26, v27, v28, v10);
  }
}

void sub_10000B27C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v30 = *(void *)(a1 + 56);
    v17 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v30 + 16))(v30, 0, v17);
  }
  else
  {
    unsigned int v32 = v7;
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [v8 slot];
      unsigned int v13 = [v12 number];
      uint64_t v14 = [v8 key];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v43 = v13;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = [v14 keyNumber];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "PT Attest with slot %u key 0x%x", buf, 0xEu);
    }
    id v31 = v8;

    id v15 = SESDefaultLogObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      *(void *)v43 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "OIDs %@", buf, 0xCu);
    }

    v17 = +[NSMutableData data];
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v18 = *(id *)(a1 + 32);
    id v19 = [v18 countByEnumeratingWithState:&v37 objects:v41 count:16];
    if (v19)
    {
      id v20 = v19;
      uint64_t v21 = *(void *)v38;
      do
      {
        for (i = 0; i != v20; i = (char *)i + 1)
        {
          if (*(void *)v38 != v21) {
            objc_enumerationMutation(v18);
          }
          uint64_t v23 = *(void **)(*((void *)&v37 + 1) + 8 * i);
          if ([v23 isEqualToString:@"1.2.840.113635.100.6.65.16"])
          {
            char v36 = 16;
            uint64_t v24 = &v36;
          }
          else if ([v23 isEqualToString:@"1.2.840.113635.100.6.65.17"])
          {
            char v35 = 17;
            uint64_t v24 = &v35;
          }
          else
          {
            if (![v23 isEqualToString:@"1.2.840.113635.100.6.65.19"]) {
              continue;
            }
            char v34 = 19;
            uint64_t v24 = &v34;
          }
          __int16 v25 = +[NSData dataWithBytes:v24 length:1];
          [v17 appendData:v25];
        }
        id v20 = [v18 countByEnumeratingWithState:&v37 objects:v41 count:16];
      }
      while (v20);
    }

    uint64_t v26 = [@"A000000704C0000000000002" hexStringAsData];
    id v8 = v31;
    id v27 = *(void **)(a1 + 40);
    unsigned int v28 = *(void **)(a1 + 48);
    id v33 = 0;
    id v7 = v32;
    uint64_t v29 = sub_100036B38(v32, v26, v31, v27, v17, v28, &v33);
    id v10 = v33;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10000B7C8(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a2 || a3)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    SESEnsureError();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0, v10);
  }
  else
  {
    id v4 = sub_100056FD0(a2, (const char *)a2);
    id v5 = [v4 casdCertificate];
    DERDecodeData(v5);
    id v10 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v6 = *(void *)(a1 + 32);
    if (v10)
    {
      (*(void (**)(uint64_t, id, void))(v6 + 16))(v6, v10, 0);
    }
    else
    {
      id v8 = SESDefaultLogObject();
      id v9 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v9);
    }
  }
}

void sub_10000BAF8(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = v7;
  if (!a2 || v7)
  {
    uint64_t v17 = a1[9];
    uint64_t v14 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v14);
  }
  else
  {
    id v9 = (void *)a1[4];
    uint64_t v10 = a1[5];
    uint64_t v11 = a1[6];
    uint64_t v12 = a1[7];
    uint64_t v13 = a1[8];
    id v18 = 0;
    uint64_t v14 = [v9 _getBAACertificatesForKey:a2 key:a3 subjectIdentifier:v10 nonce:v11 OIDs:v12 validityInterval:v13 error:&v18];
    id v8 = v18;
    uint64_t v15 = a1[9];
    uint64_t v16 = sub_100014F20((uint64_t)v14);
    (*(void (**)(uint64_t, void *, id))(v15 + 16))(v15, v16, v8);
  }
}

void sub_10000C094(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (!v13 || v5)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v10);
    goto LABEL_6;
  }
  uint64_t v6 = [@"A000000704C0000000000002" hexStringAsData];
  int v7 = sub_100033DBC(v13, v6);

  if ((v7 - 1) >= 3)
  {
    if (v7 == 4)
    {
      id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
      goto LABEL_11;
    }
    if (v7) {
      goto LABEL_12;
    }
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v10 = SESDefaultLogObject();
    uint64_t v12 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v12);

LABEL_6:
    goto LABEL_12;
  }
  id v8 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_11:
  v8();
LABEL_12:
}

void sub_10000C544(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v30 = *(void *)(a1 + 96);
    id v31 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v30 + 16))(v30, 0, v31);
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v44 = 0;
    uint64_t v10 = [v8 getKeyHandle:v5 key:v9 error:&v44];
    id v7 = v44;
    if (v7 || !v10)
    {
      uint64_t v32 = *(void *)(a1 + 96);
      id v13 = SESDefaultLogObject();
      uint64_t v14 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v32 + 16))(v32, 0, v14);
    }
    else
    {
      uint64_t v11 = *(void **)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 48);
      id v43 = 0;
      id v13 = [v11 getKeyHandle:v5 key:v12 error:&v43];
      id v7 = v43;
      if (!v7 && v13)
      {
        char v35 = v10;
        char v36 = v5;
        uint64_t v14 = +[NSMutableData data];
        long long v39 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        uint64_t v34 = a1;
        id v15 = *(id *)(a1 + 56);
        id v16 = [v15 countByEnumeratingWithState:&v39 objects:v47 count:16];
        if (!v16) {
          goto LABEL_21;
        }
        id v17 = v16;
        uint64_t v18 = *(void *)v40;
        while (1)
        {
          for (i = 0; i != v17; i = (char *)i + 1)
          {
            if (*(void *)v40 != v18) {
              objc_enumerationMutation(v15);
            }
            id v20 = *(void **)(*((void *)&v39 + 1) + 8 * i);
            char v21 = 16;
            char v38 = 16;
            if ([v20 isEqualToString:@"1.2.840.113635.100.6.65.16"]) {
              goto LABEL_15;
            }
            if ([v20 isEqualToString:@"1.2.840.113635.100.6.65.17"])
            {
              char v21 = 17;
LABEL_15:
              char v38 = v21;
              [v14 appendBytes:&v38 length:1];
              continue;
            }
            long long v22 = SESDefaultLogObject();
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              v46 = v20;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Ignoring unknown OID %@", buf, 0xCu);
            }
          }
          id v17 = [v15 countByEnumeratingWithState:&v39 objects:v47 count:16];
          if (!v17)
          {
LABEL_21:

            uint64_t v23 = [@"A000000704C0000000000002" hexStringAsData];
            uint64_t v24 = *(void **)(a1 + 64);
            __int16 v25 = *(void **)(a1 + 72);
            uint64_t v26 = *(void **)(a1 + 80);
            id v27 = *(void **)(a1 + 88);
            id v37 = 0;
            uint64_t v10 = v35;
            id v5 = v36;
            unsigned int v28 = sub_10003757C(v36, v23, v24, v35, v13, v25, v26, v14, v27, &v37);
            id v7 = v37;

            uint64_t v29 = *(void (**)(void))(*(void *)(v34 + 96) + 16);
            goto LABEL_25;
          }
        }
      }
      uint64_t v33 = *(void *)(a1 + 96);
      uint64_t v14 = SESDefaultLogObject();
      unsigned int v28 = SESCreateAndLogError();
      uint64_t v29 = *(void (**)(void))(v33 + 16);
LABEL_25:
      v29();
    }
  }
}

void sub_10000CA90(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!v7 || v9)
  {
    uint64_t v28 = a1[6];
    uint64_t v29 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v28 + 16))(v28, 0, v29);
  }
  else
  {
    id v32 = 0;
    uint64_t v11 = +[SESKeyDesignationStorageCoordinator getAndReturnError:&v32];
    id v10 = v32;
    if (v10 || !v11)
    {
      uint64_t v30 = a1[6];
      id v20 = SESEnsureError();
      id v27 = *(void (**)(void))(v30 + 16);
    }
    else
    {
      uint64_t v12 = SESDefaultLogObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = [v8 slot];
        unsigned int v14 = [v13 number];
        id v15 = [v8 key];
        unsigned int v16 = [v15 keyNumber];
        *(_DWORD *)buf = 67109376;
        unsigned int v34 = v14;
        __int16 v35 = 1024;
        unsigned int v36 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Update ACL for Key in slot %u key 0x%x", buf, 0xEu);
      }
      id v17 = [@"A000000704C0000000000002" hexStringAsData];
      uint64_t v18 = (void *)a1[4];
      id v19 = (void *)a1[5];
      id v31 = 0;
      id v20 = sub_1000381F8(v7, v17, v18, v8, v19, &v31);
      id v10 = v31;

      char v21 = SESDefaultLogObject();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        long long v22 = [v8 slot];
        unsigned int v23 = [v22 number];
        *(_DWORD *)buf = 67109120;
        unsigned int v34 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Settings slot %u to unoccupied due to implicit ptc_UpdateACL", buf, 8u);
      }
      uint64_t v24 = [v8 slot];
      [v24 resetToEmpty];

      __int16 v25 = [v8 key];
      uint64_t v26 = [v25 keyIdentifier];
      [v11 removeDesignationWithKeyIdentifier:v26];

      id v27 = *(void (**)(void))(a1[6] + 16);
    }
    v27();
  }
}

void sub_10000CEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

intptr_t sub_10000CEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    BOOL v4 = a4 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = v4;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000D0CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (v8 && v7 && !v9)
  {
    id v39 = 0;
    uint64_t v11 = +[SESKeyDesignationStorageCoordinator getAndReturnError:&v39];
    id v10 = v39;
    if (v10 || !v11)
    {
      uint64_t v29 = *(void *)(a1 + 32);
      uint64_t v30 = SESEnsureError();
      (*(void (**)(uint64_t, void *))(v29 + 16))(v29, v30);
    }
    else
    {
      uint64_t v12 = SESDefaultLogObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v33 = *(void *)(a1 + 40);
        id v37 = [v8 key];
        __int16 v35 = [v37 publicKey];
        id v13 = [v35 base64];
        unsigned int v14 = [v8 key];
        id v15 = [v14 assetACL];
        unsigned int v16 = [v15 base64];
        *(_DWORD *)buf = 67109890;
        int v41 = v33;
        __int16 v42 = 2112;
        id v43 = v8;
        __int16 v44 = 2112;
        v45 = v13;
        __int16 v46 = 2112;
        v47 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Setting designation %d for key %@ (%@) (%@)", buf, 0x26u);
      }
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = [v8 slot];
      [v18 setDesignation:v17];

      if (*(void *)(a1 + 40))
      {
        id v19 = [@"A000000704C0000000000002" hexStringAsData];
        unsigned int v34 = [v8 slot];
        uint64_t v31 = [v34 number];
        unsigned int v36 = [v8 key];
        [v36 keyIdentifier];
        id v20 = v38 = v11;
        id v32 = [v8 key];
        char v21 = [v32 assetACL];
        long long v22 = [v8 key];
        unsigned int v23 = [v22 assetACLAttestation];
        __int16 v25 = sub_100056FD0(v7, v24);
        if ((unint64_t)[v25 type] <= 3) {
          uint64_t v26 = 1;
        }
        else {
          uint64_t v26 = 2;
        }
        [v38 designateKeyWithAid:v19 slotNumber:v31 keyIdentifier:v20 assetACL:v21 assetACLAttestation:v23 operationApprovalVersion:v26 designation:*(void *)(a1 + 40)];

        id v27 = v34;
        uint64_t v11 = v38;
      }
      else
      {
        id v19 = [v8 key];
        id v27 = [v19 keyIdentifier];
        [v11 removeDesignationWithKeyIdentifier:v27];
      }

      [v11 commit];
      (*(void (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), 0);
    }
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v11 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v11);
  }
}

void sub_10000D608(uint64_t a1)
{
  id v30 = 0;
  v2 = +[SESKeyDesignationStorageCoordinator getAndReturnError:&v30];
  id v3 = v30;
  BOOL v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    id v20 = v3;
    [v2 removeWithDesignation:*(void *)(a1 + 48)];
    char v21 = v2;
    [v2 commit];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v8 = [*(id *)(a1 + 32) instanceRepresentations];
    id v9 = [v8 countByEnumeratingWithState:&v26 objects:v32 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v27;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v27 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v26 + 1) + 8 * i);
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          unsigned int v14 = [v13 keys];
          id v15 = [v14 countByEnumeratingWithState:&v22 objects:v31 count:16];
          if (v15)
          {
            id v16 = v15;
            uint64_t v17 = *(void *)v23;
            do
            {
              for (j = 0; j != v16; j = (char *)j + 1)
              {
                if (*(void *)v23 != v17) {
                  objc_enumerationMutation(v14);
                }
                id v19 = *(void **)(*((void *)&v22 + 1) + 8 * (void)j);
                if ([v19 designation] == *(id *)(a1 + 48)) {
                  [v19 setDesignation:0];
                }
              }
              id v16 = [v14 countByEnumeratingWithState:&v22 objects:v31 count:16];
            }
            while (v16);
          }
        }
        id v10 = [v8 countByEnumeratingWithState:&v26 objects:v32 count:16];
      }
      while (v10);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    BOOL v4 = v20;
    v2 = v21;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_10000DB2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v19 = *(void **)(a1 + 32);
    id v20 = +[SEFidoEvents serviceError];
    [v19 reportCAEvent:v20];

    uint64_t v21 = *(void *)(a1 + 72);
    long long v22 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v22);
  }
  else
  {
    uint64_t v97 = 0;
    v98 = (id *)&v97;
    uint64_t v99 = 0x3032000000;
    v100 = sub_100009360;
    v101 = sub_100009370;
    id v102 = 0;
    id v8 = +[SEKeySyncManager singleton];
    id v9 = [v8 ptcViewName];
    id v10 = [v8 getAvailableTLKForViewName:v9 secureElement:v5];

    if (v10)
    {
      uint64_t v11 = [*(id *)(a1 + 40) _extractedACLForFidoKey];
      uint64_t v12 = *(void **)(a1 + 40);
      id v13 = v98;
      id v96 = v98[5];
      unsigned int v14 = [v12 _createKey:v5 acl:v11 error:&v96];
      objc_storeStrong(v13 + 5, v96);
      if (v14 && !v98[5])
      {
        v95 = 0;
        if (ACMContextCreate((uint64_t *)&v95) || (long long v26 = v95) == 0)
        {
          id v37 = *(void **)(a1 + 32);
          char v38 = +[SEFidoEvents unspecifiedError];
          [v37 reportCAEvent:v38];

          uint64_t v39 = *(void *)(a1 + 72);
          long long v40 = SESDefaultLogObject();
          int v41 = SESCreateAndLogError();
          (*(void (**)(uint64_t, void, void *))(v39 + 16))(v39, 0, v41);
        }
        else
        {
          uint64_t v89 = 0;
          v90 = &v89;
          uint64_t v91 = 0x3032000000;
          v92 = sub_100009360;
          v93 = sub_100009370;
          id v94 = 0;
          v83[0] = _NSConcreteStackBlock;
          v83[1] = 3221225472;
          v83[2] = sub_10000E4D4;
          v83[3] = &unk_10040BB98;
          v87 = &v89;
          id v77 = v5;
          id v84 = v77;
          id v79 = v14;
          id v85 = v79;
          id v86 = v10;
          v88 = &v97;
          ACMContextGetExternalForm(v26, (uint64_t)v83);
          ACMContextDelete(v95, 1);
          v95 = 0;
          if (v90[5] && !v98[5])
          {
            __int16 v42 = *(void **)(a1 + 32);
            id v43 = [@"A000000704C0000000000002" hexStringAsData];
            uint64_t v44 = *(void *)(a1 + 48);
            uint64_t v45 = *(void *)(a1 + 56);
            uint64_t v46 = *(void *)(a1 + 64);
            v47 = v98;
            id obj = v98[5];
            v80 = [v42 createFidoAttestationWithSecureElement:v77 instanceAID:v43 fidoKey:v79 relyingParty:v44 relyingPartyAccountHash:v45 challenge:v46 error:&obj];
            objc_storeStrong(v47 + 5, obj);

            if (v80 && !v98[5])
            {
              v57 = *(void **)(a1 + 32);
              uint64_t v72 = *(void *)(a1 + 56);
              uint64_t v73 = *(void *)(a1 + 48);
              v75 = [v79 key];
              v74 = [v75 publicKey];
              v58 = [v74 ses_sha256];
              uint64_t v59 = v90[5];
              v60 = v98;
              id v81 = v98[5];
              LODWORD(v57) = [v57 storeKeyWithRelyingParty:v73 relyingPartyAccountHash:v72 fidoKeyHash:v58 keyData:v59 error:&v81];
              objc_storeStrong(v60 + 5, v81);

              if (v57 && !v98[5])
              {
                uint64_t v76 = *(void *)(a1 + 56);
                uint64_t v78 = *(void *)(a1 + 48);
                v70 = [v79 key];
                v71 = [v70 publicKey];
                unsigned int v36 = +[SEFidoKey withRelyingParty:v78 relyingPartyAccountHash:v76 fidoPublicKey:v71 fidoAttestation:v80];

                (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
              }
              else
              {
                v61 = *(void **)(a1 + 32);
                v62 = +[SEFidoEvents keychainAddError];
                [v61 reportCAEvent:v62];

                v63 = SESDefaultLogObject();
                if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
                {
                  v64 = [v79 slot];
                  unsigned int v65 = [v64 number];
                  id v66 = v98[5];
                  *(_DWORD *)buf = 67109378;
                  unsigned int v104 = v65;
                  __int16 v105 = 2112;
                  id v106 = v66;
                  _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "Failed to storeKeyWithRelyingParty deleting keys in %d : %@", buf, 0x12u);
                }
                v67 = *(void **)(a1 + 40);
                v68 = [@"A000000704C0000000000002" hexStringAsData];
                [v67 _deleteLoadedKey:v77 instanceAID:v68 loadedKey:v79 error:0];

                uint64_t v69 = *(void *)(a1 + 72);
                unsigned int v36 = SESEnsureError();
                (*(void (**)(uint64_t, void, void *))(v69 + 16))(v69, 0, v36);
              }
            }
            else
            {
              v48 = *(void **)(a1 + 32);
              v49 = +[SEFidoEvents keyAttestationError];
              [v48 reportCAEvent:v49];

              v50 = SESDefaultLogObject();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
              {
                v51 = [v79 slot];
                unsigned int v52 = [v51 number];
                id v53 = v98[5];
                *(_DWORD *)buf = 67109378;
                unsigned int v104 = v52;
                __int16 v105 = 2112;
                id v106 = v53;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Failed to get createFidoAttestationWithSecureElement deleting keys in %d : %@", buf, 0x12u);
              }
              v54 = *(void **)(a1 + 40);
              v55 = [@"A000000704C0000000000002" hexStringAsData];
              [v54 _deleteLoadedKey:v77 instanceAID:v55 loadedKey:v79 error:0];

              uint64_t v56 = *(void *)(a1 + 72);
              unsigned int v36 = SESEnsureError();
              (*(void (**)(uint64_t, void, void *))(v56 + 16))(v56, 0, v36);
            }
          }
          else
          {
            long long v27 = *(void **)(a1 + 32);
            long long v28 = +[SEFidoEvents keyExportError];
            [v27 reportCAEvent:v28];

            long long v29 = SESDefaultLogObject();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
            {
              id v30 = [v79 slot];
              unsigned int v31 = [v30 number];
              id v32 = v98[5];
              *(_DWORD *)buf = 67109378;
              unsigned int v104 = v31;
              __int16 v105 = 2112;
              id v106 = v32;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to export fidoKey, deleting it from slot %d (%@)", buf, 0x12u);
            }
            uint64_t v33 = *(void **)(a1 + 40);
            unsigned int v34 = [@"A000000704C0000000000002" hexStringAsData];
            [v33 _deleteLoadedKey:v77 instanceAID:v34 loadedKey:v79 error:0];

            uint64_t v35 = *(void *)(a1 + 72);
            v80 = SESDefaultLogObject();
            unsigned int v36 = SESCreateAndLogError();
            (*(void (**)(uint64_t, void, void *))(v35 + 16))(v35, 0, v36);
          }

          _Block_object_dispose(&v89, 8);
        }
      }
      else
      {
        id v15 = *(void **)(a1 + 32);
        id v16 = +[SEFidoEvents keyCreationError];
        [v15 reportCAEvent:v16];

        uint64_t v17 = *(void *)(a1 + 72);
        uint64_t v18 = SESEnsureError();
        (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v18);
      }
    }
    else
    {
      long long v23 = *(void **)(a1 + 32);
      long long v24 = +[SEFidoEvents viewNotSyncedError];
      [v23 reportCAEvent:v24];

      uint64_t v25 = *(void *)(a1 + 72);
      uint64_t v11 = SESDefaultLogObject();
      unsigned int v14 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0, v14);
    }

    _Block_object_dispose(&v97, 8);
  }
}

void sub_10000E46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_10000E4D4(void *a1, uint64_t a2, uint64_t a3)
{
  id v6 = (void *)a1[4];
  id v7 = [@"A000000704C0000000000002" hexStringAsData];
  id v8 = (void *)a1[5];
  id v9 = (void *)a1[6];
  id v10 = +[NSData dataWithBytes:a2 length:a3];
  uint64_t v11 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v11 + 40);
  uint64_t v12 = sub_100037D98(v6, v7, v8, v9, v10, &obj);
  objc_storeStrong((id *)(v11 + 40), obj);
  uint64_t v13 = *(void *)(a1[7] + 8);
  unsigned int v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;
}

void sub_10000EE6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  id v30 = v5;
  if (!v5 || v6)
  {
    long long v23 = *(void **)(a1 + 32);
    long long v24 = +[SEFidoEvents serviceError];
    [v23 reportCAEvent:v24];

    uint64_t v25 = *(void *)(a1 + 48);
    long long v26 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0, v26);
  }
  else
  {
    id v29 = [objc_alloc((Class)NSMutableArray) initWithCapacity:objc_msgSend(*(id *)(a1 + 40), "count")];
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    id obj = *(id *)(a1 + 40);
    id v8 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v28 = *(void *)v33;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v33 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void **)(*((void *)&v32 + 1) + 8 * i);
          uint64_t v12 = *(void **)(a1 + 32);
          uint64_t v13 = [v11 relyingParty];
          unsigned int v14 = [v11 relyingPartyAccountHash];
          id v15 = [v11 fidoKeyHash];
          id v31 = 0;
          id v16 = [v12 findKeyForRelyingParty:v13 relyingPartyAccountHash:v14 fidoKeyHash:v15 secureElement:v30 error:&v31];
          id v17 = v31;

          uint64_t v18 = *(void **)(a1 + 32);
          if (v16) {
            +[SEFidoEvents fidoKeyFound];
          }
          else {
          id v19 = +[SEFidoEvents fidoKeyNotFound];
          }
          [v18 reportCAEvent:v19];

          id v20 = SESDefaultLogObject();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412546;
            BOOL v21 = v16 != 0;
            id v37 = v11;
            __int16 v38 = 1024;
            BOOL v39 = v16 != 0;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Search Params %@ --> %d", buf, 0x12u);
          }
          else
          {
            BOOL v21 = v16 != 0;
          }

          long long v22 = +[NSNumber numberWithInt:v21];
          [v29 addObject:v22];
        }
        id v9 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v9);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    id v7 = 0;
  }
}

void sub_10000F518(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  v57 = v5;
  if (!v5 || v6)
  {
    uint64_t v44 = *(void **)(a1 + 32);
    uint64_t v45 = +[SEFidoEvents serviceError];
    [v44 reportCAEvent:v45];

    uint64_t v46 = *(void *)(a1 + 80);
    v47 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0, v47);
  }
  else
  {
    id v56 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[*(id *)(a1 + 40) count]];
    v55 = (char *)[*(id *)(a1 + 40) count];
    if (v55)
    {
      for (i = 0; i != v55; ++i)
      {
        id v9 = [*(id *)(a1 + 40) objectAtIndexedSubscript:i];
        v58 = [*(id *)(a1 + 48) objectAtIndexedSubscript:i];
        id v10 = *(void **)(a1 + 32);
        uint64_t v11 = [v9 relyingParty];
        uint64_t v12 = [v9 relyingPartyAccountHash];
        uint64_t v13 = [v9 fidoKeyHash];
        id v62 = 0;
        unsigned int v14 = [v10 findKeyForRelyingParty:v11 relyingPartyAccountHash:v12 fidoKeyHash:v13 secureElement:v57 error:&v62];
        id v15 = v62;

        if (v14) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 0;
        }
        if (v16)
        {
          id v61 = 0;
          id v17 = +[PTClassicKey withData:v14 error:&v61];
          id v18 = v61;
          id v15 = v18;
          if (!v17 || v18)
          {
            long long v27 = *(void **)(a1 + 32);
            uint64_t v28 = +[SEFidoEvents keyDecodeError];
            [v27 reportCAEvent:v28];

            id v20 = SESEnsureError();
            [v56 addObject:v20];
          }
          else
          {
            id v19 = *(void **)(a1 + 56);
            id v60 = 0;
            id v20 = [v19 getKeyHandle:v57 key:v17 error:&v60];
            id v21 = v60;
            id v15 = v21;
            long long v22 = *(void **)(a1 + 32);
            if (!v20 || v21)
            {
              id v29 = +[SEFidoEvents unspecifiedError];
              [v22 reportCAEvent:v29];

              id v30 = SESEnsureError();
              [v56 addObject:v30];
            }
            else
            {
              uint64_t v23 = [@"A000000704C0000000000002" hexStringAsData];
              id v53 = [v9 relyingParty];
              long long v24 = [v9 relyingPartyAccountHash];
              uint64_t v25 = *(void *)(a1 + 64);
              if (v25)
              {
                v51 = [*(id *)(a1 + 64) objectAtIndexedSubscript:i];
                long long v26 = v51;
              }
              else
              {
                long long v26 = 0;
              }
              uint64_t v31 = *(void *)(a1 + 72);
              id v59 = 0;
              unsigned int v52 = (void *)v23;
              id v30 = [v22 performFidoSignatureWithSecureElement:v57 instanceAID:v23 loadedKey:v20 relyingParty:v53 relyingPartyAccountHash:v24 challenge:v58 ptaEndPointIdentifierForExtension:v26 externalizedAuth:v31 error:&v59];
              id v15 = v59;
              if (v25) {

              }
              v54 = v30;
              if (!v30 || v15)
              {
                long long v35 = *(void **)(a1 + 32);
                unsigned int v36 = +[SEFidoEvents signatureError];
                [v35 reportCAEvent:v36];

                id v37 = SESDefaultLogObject();
                if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412290;
                  id v64 = v15;
                  _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to perform signature for assertion %@", buf, 0xCu);
                }

                __int16 v38 = SESEnsureError();
                [v56 addObject:v38];

                BOOL v39 = [@"A000000704C0000000000002" hexStringAsData];
                long long v40 = [v20 slot];
                uint64_t v41 = sub_100034168(v57, v39, [v40 number]);

                long long v34 = (void *)v41;
                __int16 v42 = [v20 slot];
                [v42 resetToEmpty];

                id v43 = SESDefaultLogObject();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412546;
                  id v64 = v20;
                  __int16 v65 = 2112;
                  uint64_t v66 = v41;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "Cleaned up failed signature on %@ : %@", buf, 0x16u);
                }

                id v30 = v54;
              }
              else
              {
                v50 = [v9 relyingParty];
                v48 = [v9 relyingPartyAccountHash];
                v49 = [v17 publicKey];
                long long v32 = [v49 ses_sha256];
                uint64_t v33 = +[SEFidoKeySignResult withRelyingParty:v50 relyingPartyAccountHash:v48 fidoKeyHash:v32 fidoAssertion:v30];

                long long v34 = (void *)v33;
                [v56 addObject:v33];
              }
            }
          }
        }
        else
        {
          id v17 = SESEnsureError();
          [v56 addObject:v17];
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 80) + 16))();

    id v7 = 0;
  }
}

void sub_10000FDF8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  id v8 = *(void **)(a1 + 32);
  if (!v5 || v6)
  {
    id v21 = +[SEFidoEvents serviceError];
    [v8 reportCAEvent:v21];

    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = SESDefaultLogObject();
    long long v24 = SESCreateAndLogError();
    (*(void (**)(uint64_t, _UNKNOWN **, void *))(v22 + 16))(v22, &off_10042DD20, v24);
  }
  else
  {
    id v9 = [*(id *)(a1 + 40) relyingParty];
    id v10 = [*(id *)(a1 + 40) relyingPartyAccountHash];
    uint64_t v11 = [*(id *)(a1 + 40) fidoKeyHash];
    id v37 = 0;
    uint64_t v12 = [v8 findKeyForRelyingParty:v9 relyingPartyAccountHash:v10 fidoKeyHash:v11 secureElement:v5 error:&v37];
    id v7 = v37;

    if (!v12 || v7)
    {
      uint64_t v25 = *(void **)(a1 + 32);
      long long v26 = +[SEFidoEvents fidoKeyNotFound];
      [v25 reportCAEvent:v26];

      uint64_t v27 = *(void *)(a1 + 56);
      uint64_t v13 = SESDefaultLogObject();
      uint64_t v28 = SESCreateAndLogError();
      (*(void (**)(uint64_t, _UNKNOWN **, void *))(v27 + 16))(v27, &off_10042DD20, v28);
    }
    else
    {
      id v36 = 0;
      uint64_t v13 = +[PTClassicKey withData:v12 error:&v36];
      id v14 = v36;
      id v7 = v14;
      id v15 = *(void **)(a1 + 32);
      if (!v13 || v14)
      {
        id v29 = +[SEFidoEvents keyDecodeError];
        [v15 reportCAEvent:v29];

        uint64_t v30 = *(void *)(a1 + 56);
        uint64_t v28 = SESDefaultLogObject();
        uint64_t v31 = SESCreateAndLogError();
        (*(void (**)(uint64_t, _UNKNOWN **, void *))(v30 + 16))(v30, &off_10042DD20, v31);
      }
      else
      {
        BOOL v16 = [v13 publicKey];
        uint64_t v17 = *(void *)(a1 + 48);
        id v35 = 0;
        id v18 = [v15 performFidoVerificationWithPublicKey:v16 signedChallenge:v17 error:&v35];
        id v7 = v35;
        id v19 = [v18 BOOLValue];

        id v20 = *(void **)(a1 + 32);
        if (v19) {
          +[SEFidoEvents fidoVerificationSucceeded];
        }
        else {
        long long v32 = +[SEFidoEvents fidoVerificationFailed];
        }
        [v20 reportCAEvent:v32];

        uint64_t v33 = SESDefaultLogObject();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109378;
          int v39 = (int)v19;
          __int16 v40 = 2112;
          id v41 = v7;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "FIDO verification successful %d error %@", buf, 0x12u);
        }

        uint64_t v34 = *(void *)(a1 + 56);
        uint64_t v28 = +[NSNumber numberWithBool:v19];
        (*(void (**)(uint64_t, void *, id))(v34 + 16))(v34, v28, v7);
      }
    }
  }
}

void sub_1000103F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
  }
  else
  {
    id v8 = objc_opt_new();
    id v9 = [*(id *)(a1 + 32) relyingParty];
    id v10 = [*(id *)(a1 + 32) relyingPartyAccountHash];
    uint64_t v11 = [*(id *)(a1 + 32) fidoKeyHash];
    id v21 = 0;
    uint64_t v12 = [v8 findKeyForRelyingParty:v9 relyingPartyAccountHash:v10 fidoKeyHash:v11 secureElement:v5 error:&v21];
    id v7 = v21;

    if (v7 || !v12)
    {
      uint64_t v18 = *(void *)(a1 + 40);
      id v19 = SESEnsureError();
      (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);
    }
    else
    {
      uint64_t v13 = [*(id *)(a1 + 32) relyingParty];
      id v14 = [*(id *)(a1 + 32) relyingPartyAccountHash];
      id v15 = [*(id *)(a1 + 32) fidoKeyHash];
      id v20 = 0;
      [v8 deleteKeyWithRelyingParty:v13 relyingPartyAccountHash:v14 fidoKeyHash:v15 error:&v20];
      id v7 = v20;

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_100010E5C(id a1)
{
  uint64_t v1 = objc_opt_new();
  v2 = (void *)qword_10045CC68;
  qword_10045CC68 = v1;
}

id sub_100011030(uint64_t a1)
{
  return [*(id *)(a1 + 32) dumpState];
}

void sub_1000110D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  BOOL v4 = +[ACAccountStore defaultStore];
  id v5 = [v4 aa_primaryAppleAccount];
  id v6 = [v5 aa_altDSID];

  if (v6)
  {
    id v7 = objc_alloc_init((Class)OTConfigurationContext);
    [v7 setContext:OTDefaultContext];
    [v7 setAltDSID:v6];
    id v8 = objc_opt_new();
    [v8 setUseCachedAccountStatus:1];
    id v9 = *(void **)(a1 + 32);
    id v10 = [v6 asAsciiData];
    uint64_t v11 = [v9 otCliqueForAltDSID:v10];
    id v21 = 0;
    uint64_t v12 = (char *)[v11 fetchCliqueStatus:v8 error:&v21];
    id v13 = v21;

    if (v13 || v12 == (char *)-1)
    {
      uint64_t v17 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    else
    {
      if ((unint64_t)(v12 - 3) >= 2 && v12 != (char *)1)
      {
        if (v12)
        {
          uint64_t v18 = *(void *)(a1 + 40);
          id v19 = SESDefaultLogObject();
          id v20 = SESCreateAndLogError();
          (*(void (**)(uint64_t, void, void, void *))(v18 + 16))(v18, 0, 0, v20);
        }
        else
        {
          objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), v6);
          uint64_t v14 = *(void *)(a1 + 40);
          id v15 = [v6 asAsciiData];
          (*(void (**)(uint64_t, uint64_t, void *, void))(v14 + 16))(v14, 1, v15, 0);
        }
        goto LABEL_14;
      }
      uint64_t v17 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    }
    v17();
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v16 = SESDefaultLogObject();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "No aa_primaryAppletAccount", buf, 2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
LABEL_15:
}

void sub_100011430(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = 0;

  id v6 = [*(id *)(a1 + 32) otCliqueForAltDSID:*(void *)(a1 + 40)];
  id v27 = 0;
  id v7 = [v6 fetchTrustedSecureElementIdentities:&v27];
  id v8 = v27;

  if (v8 || !v7)
  {
    uint64_t v26 = *(void *)(a1 + 48);
    uint64_t v11 = SESDefaultLogObject();
    SESCreateAndLogError();
    id v22 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, void, id))(v26 + 16))(v26, 0, 0, v22);
  }
  else
  {
    id v9 = [v7 localPeerIdentity];
    id v10 = [v9 peerIdentifier];

    uint64_t v11 = [v7 trustedPeerSecureElementIdentities];
    uint64_t v12 = [v11 ses_map:&stru_10040BEC0];
    id v13 = (void *)v12;
    uint64_t v14 = &__NSArray0__struct;
    if (v12) {
      uint64_t v14 = (void *)v12;
    }
    id v15 = v14;

    uint64_t v16 = SESDefaultLogObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)id v29 = v10;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Got local peer identity %@", buf, 0xCu);
    }

    uint64_t v17 = SESDefaultLogObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      unsigned int v18 = [v11 count];
      unsigned int v19 = [v15 count];
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)id v29 = v11 != 0;
      *(_WORD *)&v29[4] = 1024;
      *(_DWORD *)&v29[6] = v18;
      __int16 v30 = 1024;
      unsigned int v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Got %d/%d/%d trusted peers", buf, 0x14u);
    }

    uint64_t v20 = *(void *)(a1 + 32);
    id v21 = *(void **)(v20 + 32);
    *(void *)(v20 + 32) = v10;
    id v22 = v10;

    uint64_t v23 = *(void *)(a1 + 32);
    long long v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v15;
    id v25 = v15;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

SESPeerIdentity *__cdecl sub_1000116F0(id a1, OTSecureElementPeerIdentity *a2)
{
  return (SESPeerIdentity *)+[SESPeerIdentity withOTPeerIdentity:a2];
}

void sub_1000117E4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) otCliqueForAltDSID:*(void *)(a1 + 40)];
  id v3 = [*(id *)(a1 + 48) asOTPeerIdentity];
  id v8 = 0;
  unsigned int v4 = [v2 setLocalSecureElementIdentity:v3 error:&v8];
  id v5 = v8;

  uint64_t v6 = *(void *)(a1 + 56);
  if (v4)
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  else
  {
    id v7 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_100011998(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) otCliqueForAltDSID:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  id v8 = 0;
  unsigned int v4 = [v2 removeLocalSecureElementIdentityPeerID:v3 error:&v8];
  id v5 = v8;

  uint64_t v6 = *(void *)(a1 + 56);
  if (v4)
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
  else
  {
    id v7 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
  }
}

void sub_100011B18(uint64_t a1)
{
  id v17 = 0;
  uint64_t v2 = +[CKKSControl CKKSControlObject:0 error:&v17];
  id v3 = v17;
  unsigned int v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    [*(id *)(*(void *)(a1 + 32) + 24) removeObjectForKey:*(void *)(a1 + 40)];
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100011C88;
    v12[3] = &unk_10040BF90;
    uint64_t v9 = *(void *)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    id v10 = *(id *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 32);
    id v13 = v10;
    uint64_t v14 = v11;
    id v15 = v2;
    [v15 fetchSEViewKeyHierarchy:v9 forceFetch:0 reply:v12];

    id v7 = v16;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    id v7 = SESDefaultLogObject();
    id v8 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v8);
  }
}

void sub_100011C88(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    id v13 = SESDefaultLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      int v26 = 138412290;
      id v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Error from fetchSEViewKeyHierarchy -- %@", (uint8_t *)&v26, 0xCu);
    }

    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = +[SESTLKRecord withCKKSExternalKey:v9];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = [v10 filterMap:&stru_10040BF28];
    id v16 = (void *)v15;
    if (v15) {
      id v17 = (void *)v15;
    }
    else {
      id v17 = &__NSArray0__struct;
    }
    id v18 = v17;

    uint64_t v19 = [v11 filterMap:&stru_10040BF68];
    uint64_t v20 = (void *)v19;
    if (v19) {
      id v21 = (void *)v19;
    }
    else {
      id v21 = &__NSArray0__struct;
    }
    id v22 = v21;

    uint64_t v23 = +[SESViewInformation withViewName:a1[4] currentTLK:v14 tlkShares:v22 previousTLKs:v18];
    long long v24 = SESDefaultLogObject();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      id v25 = (void *)a1[4];
      int v26 = 138412546;
      id v27 = v25;
      __int16 v28 = 2112;
      id v29 = v23;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "View %@ has cached content %@", (uint8_t *)&v26, 0x16u);
    }

    [*(id *)(a1[5] + 24) setObject:v23 forKeyedSubscript:a1[4]];
    (*(void (**)(void))(a1[7] + 16))();
  }
}

SESTLKRecord *__cdecl sub_100011EE8(id a1, CKKSExternalKey *a2)
{
  return (SESTLKRecord *)+[SESTLKRecord withCKKSExternalKey:a2];
}

SESTLKShare *__cdecl sub_100011EF8(id a1, CKKSExternalTLKShare *a2)
{
  return (SESTLKShare *)+[SESTLKShare withCKKSExternalShare:a2];
}

void sub_100012018(uint64_t a1)
{
  id v13 = 0;
  uint64_t v2 = +[CKKSControl CKKSControlObject:0 error:&v13];
  id v3 = v13;
  unsigned int v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    id v7 = [*(id *)(a1 + 32) ses_map:&stru_10040BFF8];
    id v8 = [*(id *)(a1 + 40) ses_map:&stru_10040C018];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000121A8;
    v10[3] = &unk_10040C040;
    uint64_t v9 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    id v11 = v2;
    [v11 modifyTLKSharesForSEView:v9 adding:v7 deleting:v8 reply:v10];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = SESDefaultLogObject();
    id v8 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
  }
}

CKKSExternalTLKShare *__cdecl sub_100012198(id a1, SESTLKShare *a2)
{
  return (CKKSExternalTLKShare *)[(SESTLKShare *)a2 asCKKSExternalShare];
}

CKKSExternalTLKShare *__cdecl sub_1000121A0(id a1, SESTLKShare *a2)
{
  return (CKKSExternalTLKShare *)[(SESTLKShare *)a2 asCKKSExternalShare];
}

uint64_t sub_1000121A8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1000122C8(uint64_t a1)
{
  id v16 = 0;
  uint64_t v2 = +[CKKSControl CKKSControlObject:0 error:&v16];
  id v3 = v16;
  unsigned int v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = [*(id *)(a1 + 40) asCKKSExternalKey];
    id v11 = [*(id *)(a1 + 48) asCKKSExternalShare];
    id v17 = v11;
    id v12 = +[NSArray arrayWithObjects:&v17 count:1];
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100012498;
    v13[3] = &unk_10040C040;
    id v15 = *(id *)(a1 + 56);
    id v14 = v2;
    [v14 proposeTLKForSEView:v9 proposedTLK:v10 wrappedOldTLK:0 tlkShares:v12 reply:v13];

    id v7 = v15;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    id v7 = SESDefaultLogObject();
    id v8 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
  }
}

uint64_t sub_100012498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10001256C(uint64_t a1)
{
  id v14 = 0;
  uint64_t v2 = +[CKKSControl CKKSControlObject:0 error:&v14];
  id v3 = v14;
  unsigned int v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000126CC;
    v10[3] = &unk_10040C090;
    id v11 = v9;
    id v13 = *(id *)(a1 + 40);
    id v12 = v2;
    [v12 fetchSEViewKeyHierarchy:v11 forceFetch:1 reply:v10];

    id v7 = v11;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = SESDefaultLogObject();
    id v8 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
  }
}

void sub_1000126CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6 = a5;
  id v7 = SESDefaultLogObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Sync of view %@ completed with error %@", (uint8_t *)&v9, 0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000128E8(uint64_t a1)
{
  id v15 = 0;
  uint64_t v2 = +[CKKSControl CKKSControlObject:0 error:&v15];
  id v3 = v15;
  unsigned int v4 = v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    int v9 = *(void **)(a1 + 32);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100012A4C;
    v10[3] = &unk_10040C0E0;
    id v11 = v9;
    id v12 = 0;
    id v14 = *(id *)(a1 + 40);
    id v13 = v2;
    [v13 deleteSEView:v11 reply:v10];

    id v7 = v11;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v7 = SESDefaultLogObject();
    uint64_t v8 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v8);
  }
}

void sub_100012A4C(void *a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = SESDefaultLogObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Deletion of SE view %@ completed with error %@", (uint8_t *)&v7, 0x16u);
  }

  (*(void (**)(void))(a1[7] + 16))();
}

void sub_100012BC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  SESDefaultLogObject();
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v2 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v2);
}

void sub_1000131FC(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) addItem:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  if (v2)
  {
    SESDefaultLogObject();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    unsigned int v4 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    uint64_t v5 = *(void (**)(uint64_t, void))(v3 + 16);
    v5(v3, 0);
  }
}

void sub_1000133A4(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v6 = 0;
  id v7 = 0;
  [v2 copyItemData:v3 outData:&v7 updateToApplePayView:*(unsigned __int8 *)(a1 + 56) error:&v6];
  id v4 = v7;
  id v5 = v6;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1000134EC(void *a1)
{
  unsigned int v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v6 = 0;
  id v7 = 0;
  [v2 copyMultipleItemData:v3 outDatas:&v7 error:&v6];
  id v4 = v7;
  id v5 = v6;
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100013630(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) deleteItem:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 48);
  if (v2)
  {
    SESDefaultLogObject();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v4 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }
  else
  {
    id v5 = *(void (**)(uint64_t, void))(v3 + 16);
    v5(v3, 0);
  }
}

void sub_1000137D0(void *a1)
{
  unsigned int v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  id v5 = 0;
  [v2 updateToApplePayView:v3 error:&v5];
  id v4 = v5;
  (*(void (**)(void))(a1[6] + 16))();
}

id sub_1000139EC(id a1, SESPeerIdentity *a2)
{
  return [(SESPeerIdentity *)a2 dumpState];
}

id sub_1000139F4(id a1, SESViewInformation *a2)
{
  return [(SESViewInformation *)a2 dumpState];
}

void sub_100013C18(id a1)
{
  uint64_t v1 = objc_opt_new();
  unsigned int v2 = (void *)qword_10045CC78;
  qword_10045CC78 = v1;
}

void sub_10001406C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000140B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000140C0(uint64_t a1)
{
}

void sub_1000140C8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 40) + 8) + 32));
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a4);
    if (v7 && v12 && !*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      uint64_t v9 = sub_1000141D8((uint64_t)SEABAAResponse, v12, v7);
      uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v9;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(*(void *)(a1 + 40) + 8) + 32));
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_1000141D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  self;
  uint64_t v7 = objc_opt_new();
  id v8 = (id *)v7;
  if (v7)
  {
    objc_storeStrong((id *)(v7 + 8), a2);
    objc_storeStrong(v8 + 2, a3);
  }

  return v8;
}

void sub_100014270(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v61 = a6;
  id v62 = a7;
  if (a1)
  {
    uint64_t v57 = a1;
    id v17 = SESDefaultLogObject();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "", buf, 2u);
    }

    v72[0] = @"1.2.840.113635.100.10.1";
    v72[1] = @"1.2.840.113635.100.8.2";
    v72[2] = @"1.2.840.113635.100.8.3";
    v72[3] = @"1.2.840.113635.100.8.4";
    v72[4] = @"1.2.840.113635.100.8.7";
    v72[5] = @"1.2.840.113635.100.8.5";
    v72[6] = @"1.2.840.113635.100.10.1";
    id v18 = +[NSArray arrayWithObjects:v72 count:7];
    if (SESInternalVariant())
    {
      id v19 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
      uint64_t v20 = [v19 objectForKey:@"SEABAASServerURL"];
      id v21 = v20;
      id v22 = v14;
      if (v20) {
        id v60 = v20;
      }
      else {
        id v60 = @"https://humb.apple.com/humbug/seabaas";
      }
      uint64_t v23 = SESDefaultLogObject();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v60;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "SEABAASServerURL : '%@'", buf, 0xCu);
      }
    }
    else
    {
      id v22 = v14;
      id v60 = @"https://humb.apple.com/humbug/seabaas";
    }
    id v59 = v15;
    long long v24 = +[NSMutableArray array];
    if ([v16 count])
    {
      uint64_t v25 = 0;
      char v26 = 0;
      while (1)
      {
        id v27 = [v16 objectAtIndex:v25];
        unsigned __int8 v28 = [@"1.2.840.113635.100.8.2" isEqualToString:v27];

        if (v28) {
          goto LABEL_17;
        }
        uint64_t v29 = [v16 objectAtIndex:v25];
        unsigned int v30 = [v18 containsObject:v29];

        if (v30) {
          break;
        }
LABEL_18:
        if ((unint64_t)[v16 count] <= ++v25) {
          goto LABEL_21;
        }
      }
      unsigned int v31 = [v16 objectAtIndex:v25];
      [v24 addObject:v31];

LABEL_17:
      char v26 = 1;
      goto LABEL_18;
    }
    char v26 = 0;
LABEL_21:
    long long v32 = objc_opt_new();
    id v14 = v22;
    [v32 setObject:v22 forKeyedSubscript:@"CASDCertificate"];
    id v70 = v13;
    uint64_t v33 = +[NSArray arrayWithObjects:&v70 count:1];
    [v32 setObject:v33 forKeyedSubscript:@"SEAttestations"];

    id v58 = v13;
    if (v26)
    {
      uint64_t v34 = SESDefaultLogObject();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Certificate require BAA request", buf, 2u);
      }

      *(void *)buf = 0;
      id v35 = +[NSMutableDictionary dictionary];
      id v36 = v35;
      id v15 = v59;
      if (v59)
      {
        [v35 setObject:v59 forKeyedSubscript:kMAOptionsBAANonce];
        [v24 addObject:kMAOptionsBAAOIDNonce];
      }
      if ([v24 count]) {
        [v36 setObject:v24 forKeyedSubscript:kMAOptionsBAAOIDSToInclude];
      }
      [v36 setObject:&__kCFBooleanTrue forKeyedSubscript:kMAOptionsBAASCRTAttestation];
      v67[1] = 0;
      id v37 = DeviceIdentityCreateClientCertificateRequest();
      id v38 = 0;
      if (v38 || !*(void *)buf)
      {
        id v41 = SESDefaultLogObject();
        __int16 v42 = SESCreateAndLogError();
        (*((void (**)(id, void, void, void *))v62 + 2))(v62, 0, 0, v42);

        id v14 = v56;
        goto LABEL_45;
      }
      CFRelease(*(CFTypeRef *)buf);
      int v39 = [v37 HTTPBody];
      v67[0] = 0;
      __int16 v40 = +[NSPropertyListSerialization propertyListWithData:v39 options:0 format:0 error:v67];
      id v38 = v67[0];

      if (v38)
      {
        (*((void (**)(id, void, void, id))v62 + 2))(v62, 0, 0, v38);

        id v14 = v56;
        id v15 = v59;
LABEL_45:

        id v13 = v58;
        goto LABEL_46;
      }
      [v32 setObject:v40 forKeyedSubscript:@"BAARequest"];

      id v14 = v56;
    }
    if (v61)
    {
      [v61 doubleValue];
      uint64_t v44 = (v43 / 60.0);
    }
    else
    {
      uint64_t v44 = 10000;
    }
    v68[0] = @"Validity";
    uint64_t v45 = +[NSNumber numberWithUnsignedInt:v44];
    v68[1] = @"IssuerDNs";
    v69[0] = v45;
    v69[1] = &off_10042D988;
    uint64_t v46 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:2];
    [v32 setObject:v46 forKeyedSubscript:@"Properties"];

    id v66 = 0;
    v47 = +[NSPropertyListSerialization dataWithPropertyList:v32 format:100 options:0 error:&v66];
    id v38 = v66;
    v48 = SESDefaultLogObject();
    v49 = v48;
    if (!v47 || v38)
    {
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Could not serialize SEABAAS request : %@", buf, 0xCu);
      }
    }
    else
    {
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        v50 = [v47 asHexString];
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "SEABAAS request : %@", buf, 0xCu);
      }
      id v51 = objc_alloc((Class)NSMutableURLRequest);
      unsigned int v52 = +[NSURL URLWithString:v60];
      id v53 = [v51 initWithURL:v52];

      [v53 setHTTPMethod:@"POST"];
      [v53 setHTTPBody:v47];
      [v53 setValue:@"application/json; charset=utf-8" forHTTPHeaderField:@"Content-Type"];
      [v53 setValue:@"iOS (18.2) - SecureElementService-52.12" forHTTPHeaderField:@"User-Agent"];
      [v53 setTimeoutInterval:30.0];
      v54 = +[NSURLSession sharedSession];
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472;
      v63[2] = sub_100014B00;
      v63[3] = &unk_10040C220;
      v63[4] = v57;
      id v64 = v53;
      id v65 = v62;
      v49 = v53;
      v55 = [v54 dataTaskWithRequest:v49 completionHandler:v63];
      [v55 resume];
    }
    id v15 = v59;

    goto LABEL_45;
  }
LABEL_46:
}

void sub_100014B00(uint64_t a1, void *a2, void *a3, void *a4)
{
}

void sub_100014B20(uint64_t a1, void *a2, void *a3, void *a4, void *a5, unsigned int a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a7;
  if (a1)
  {
    id v18 = v15;
    if ([v18 statusCode] == (id)429)
    {
      id v19 = SESDefaultLogObject();
      uint64_t v20 = SESCreateAndLogError();
      (*((void (**)(id, void, void, void *))v17 + 2))(v17, 0, 0, v20);
    }
    if (v16)
    {
      if (a6 < 9)
      {
        uint64_t v25 = SESDefaultLogObject();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109376;
          unsigned int v35 = a6;
          __int16 v36 = 1024;
          int v37 = 8;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Retrying connection error (%u/%u)", buf, 0xEu);
        }

        char v26 = +[NSURLSession sharedSession];
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_100014EF0;
        v30[3] = &unk_10040C248;
        v30[4] = a1;
        id v31 = v13;
        unsigned int v33 = a6;
        id v32 = v17;
        id v27 = [v26 dataTaskWithRequest:v31 completionHandler:v30];
        [v27 resume];
      }
      else
      {
        (*((void (**)(id, void, void, id))v17 + 2))(v17, 0, 0, v16);
      }
      goto LABEL_18;
    }
    id v29 = 0;
    id v21 = +[NSPropertyListSerialization propertyListWithData:v14 options:0 format:0 error:&v29];
    id v22 = v29;
    if ([v18 statusCode] == (id)200)
    {
      uint64_t v23 = [v21 objectForKeyedSubscript:@"SEABAASCertificate"];
      long long v24 = [v21 objectForKeyedSubscript:@"SEABAASGENERATEDX509Certificates"];
      if (v23)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if ([v24 count])
          {
            unsigned __int8 v28 = [v24 objectAtIndexedSubscript:0];
            (*((void (**)(id, void *, void *, void))v17 + 2))(v17, v23, v28, 0);

LABEL_17:
LABEL_18:

            goto LABEL_19;
          }
        }
      }
    }
    uint64_t v23 = SESDefaultLogObject();
    [v18 statusCode];
    long long v24 = SESCreateAndLogError();
    (*((void (**)(id, void, void, void *))v17 + 2))(v17, 0, 0, v24);
    goto LABEL_17;
  }
LABEL_19:
}

uint64_t sub_100014EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100014B20(*(void *)(a1 + 32), *(void *)(a1 + 40), a2, a3, a4, (*(_DWORD *)(a1 + 56) + 1), *(void *)(a1 + 48));
}

uint64_t sub_100014F14(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100014F20(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_100015468(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESSession endSession", v4, 2u);
  }

  [*(id *)(a1 + 32) endSessionInternal:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

id sub_10001558C(void *a1, uint64_t a2)
{
  if (a1)
  {
    a1 = sub_1000155C0(a1, a2, 0);
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_1000155C0(id a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    uint64_t v12 = 0;
    id v13 = &v12;
    uint64_t v14 = 0x3032000000;
    id v15 = sub_1000156FC;
    id v16 = sub_10001570C;
    id v17 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100015714;
    v8[3] = &unk_10040C270;
    uint64_t v10 = &v12;
    v8[4] = a1;
    id v9 = v5;
    uint64_t v11 = a2;
    [a1 sync:v8];
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_1000156E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000156FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001570C(uint64_t a1)
{
}

void sub_100015714(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [@"A000000151435253" hexStringAsData];
  uint64_t v4 = sub_100056638(v2, v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
  {
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = [@"80F00100024F00" hexStringAsData];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    id obj = *(id *)(v9 + 40);
    id v10 = sub_100056104(v7, v8, &obj);
    objc_storeStrong((id *)(v9 + 40), obj);

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = +[NSString stringWithUTF8String:*(void *)(a1 + 56)];
      if (v11) {
        +[SLAMObjC PerformScriptWithName:v12 sefwPath:*(void *)(a1 + 40) seHandle:*(void *)(a1 + 32) logSink:*(void *)(a1 + 32)];
      }
      else {
      id v13 = +[SLAMObjC PerformScriptWithName:v12 seHandle:*(void *)(a1 + 32) logSink:*(void *)(a1 + 32)];
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), v13);

      sub_100056B94(*(id *)(a1 + 32));
    }
  }
}

id sub_100015878(void *a1, uint64_t a2, unsigned char *a3, void *a4)
{
  id v64 = a4;
  if (!a1) {
    goto LABEL_13;
  }
  *a3 = 0;
  if ((sub_10001624C(a1, v7) & 1) == 0)
  {
    uint64_t v11 = SESDefaultLogObject();
    uint64_t v12 = SESCreateAndLogError();

    goto LABEL_90;
  }
  if (!a2)
  {
LABEL_13:
    uint64_t v12 = 0;
    goto LABEL_90;
  }
  v63 = +[NSMutableArray arrayWithCapacity:3];
  uint64_t v8 = objc_opt_new();
  uint64_t v9 = (void *)v8;
  if (v8)
  {
    *(void *)(v8 + 8) = 1;
    sub_1000162FC(v8, @"A000000704D011500000000001000000");
    v9[3] = "SLAMLoadCopernicus_2_2_8";
    v9[4] = "SLAMLoadCopernicus_2_2_8";
  }
  else
  {
    sub_1000162FC(0, @"A000000704D011500000000001000000");
  }
  id v10 = v63;
  id v62 = v9;
  [v63 addObject:v9];
  if ((a2 & 8) != 0)
  {
    uint64_t v13 = objc_opt_new();
    uint64_t v14 = (void *)v13;
    if (v13)
    {
      *(void *)(v13 + 8) = 0;
      sub_1000162FC(v13, @"A000000809434343444B417631");
      v14[3] = "SLAMInstallCopernicus_CCC_2_2_8";
      v14[4] = "SLAMInstallCopernicus_CCC_2_2_8";
    }
    else
    {
      sub_1000162FC(0, @"A000000809434343444B417631");
    }
    [v63 addObject:v14];

    if ((a2 & 2) == 0)
    {
LABEL_8:
      if ((a2 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((a2 & 2) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v15 = objc_opt_new();
  id v16 = (void *)v15;
  if (v15)
  {
    *(void *)(v15 + 8) = 0;
    sub_1000162FC(v15, @"A00000085801010100000001");
    v16[3] = "SLAMInstallCopernicus_Home_2_2_8";
    v16[4] = "SLAMInstallCopernicus_Home_2_2_8";
  }
  else
  {
    sub_1000162FC(0, @"A00000085801010100000001");
  }
  [v63 addObject:v16];

  if ((a2 & 4) == 0)
  {
LABEL_9:
    if ((a2 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_23:
    uint64_t v19 = objc_opt_new();
    uint64_t v20 = (void *)v19;
    if (v19)
    {
      *(void *)(v19 + 8) = 0;
      sub_1000162FC(v19, @"A000000909ACCE5501");
      v20[3] = "SLAMInstallCopernicus_Lyon_2_2_8";
      v20[4] = "SLAMInstallCopernicus_Lyon_2_2_8";
    }
    else
    {
      sub_1000162FC(0, @"A000000909ACCE5501");
    }
    [v63 addObject:v20];

    if ((a2 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_26;
  }
LABEL_20:
  uint64_t v17 = objc_opt_new();
  id v18 = (void *)v17;
  if (v17)
  {
    *(void *)(v17 + 8) = 0;
    sub_1000162FC(v17, @"A00000085802010100000001");
    v18[3] = "SLAMInstallCopernicus_Hydra_2_2_8";
    v18[4] = "SLAMInstallCopernicus_Hydra_2_2_8";
  }
  else
  {
    sub_1000162FC(0, @"A00000085802010100000001");
  }
  [v63 addObject:v18];

  if ((a2 & 0x10) != 0) {
    goto LABEL_23;
  }
LABEL_10:
  if (a2)
  {
LABEL_26:
    uint64_t v21 = objc_opt_new();
    id v22 = (void *)v21;
    if (v21)
    {
      *(void *)(v21 + 8) = 0;
      sub_1000162FC(v21, @"A000000704E000000000");
      v22[3] = "SLAMLoadAndInstallSunsprite_2_1_7";
      v22[4] = "SLAMLoadAndInstallSunsprite_2_1_7";
    }
    else
    {
      sub_1000162FC(0, @"A000000704E000000000");
    }
    [v63 addObject:v22];
  }
LABEL_29:
  if (sub_10001630C(a1))
  {
    id v23 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
    if (!SESInternalVariant()
      || ([v23 BOOLForKey:@"debug.skip.applet.downgrade.check"] & 1) == 0)
    {
      long long v24 = SESDefaultLogObject();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "PTA is newer than iOS -- deleting applets", buf, 2u);
      }

      uint64_t v25 = sub_10001558C(a1, (uint64_t)"SLAMDeleteCopernicusAndSunsprite");
      if (v25)
      {
        char v26 = SESDefaultLogObject();
        uint64_t v12 = SESCreateAndLogError();

        goto LABEL_89;
      }
    }

    id v10 = v63;
  }
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v27 = v10;
  id v28 = [v27 countByEnumeratingWithState:&v70 objects:v80 count:16];
  if (v28)
  {
    uint64_t v29 = *(void *)v71;
LABEL_39:
    uint64_t v30 = 0;
    while (1)
    {
      if (*(void *)v71 != v29) {
        objc_enumerationMutation(v27);
      }
      uint64_t v31 = *(void *)(*((void *)&v70 + 1) + 8 * v30);
      if (v31)
      {
        uint64_t v32 = *(void *)(v31 + 8);
        if (v32 == 1)
        {
          uint64_t v66 = 0;
          v67 = &v66;
          uint64_t v68 = 0x2020000000;
          char v69 = 0;
          *(void *)buf = 0;
          *(void *)&buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000;
          id v77 = sub_1000156FC;
          uint64_t v78 = sub_10001570C;
          id v39 = *(id *)(v31 + 16);
          id v79 = [v39 hexStringAsData];

          v65[0] = _NSConcreteStackBlock;
          v65[1] = 3221225472;
          v65[2] = sub_100016508;
          v65[3] = &unk_10040C298;
          v65[4] = buf;
          v65[5] = &v66;
          __int16 v40 = sub_100016580(a1, v65);
          if (v40)
          {
            id v56 = SESDefaultLogObject();
            uint64_t v12 = SESCreateAndLogError();

            _Block_object_dispose(buf, 8);
            _Block_object_dispose(&v66, 8);

            goto LABEL_89;
          }
          if (*((unsigned char *)v67 + 24))
          {
            id v41 = SESDefaultLogObject();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              uint64_t v42 = *(void *)(v31 + 16);
              *(_DWORD *)v74 = 138412290;
              uint64_t v75 = v42;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Module %@ already present", v74, 0xCu);
            }

            _Block_object_dispose(buf, 8);
            _Block_object_dispose(&v66, 8);
            goto LABEL_74;
          }
          _Block_object_dispose(buf, 8);

          _Block_object_dispose(&v66, 8);
          goto LABEL_61;
        }
        if (v32)
        {
          double v43 = SESDefaultLogObject();
          if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
          {
            uint64_t v44 = *(void *)(v31 + 8);
            uint64_t v45 = *(void *)(v31 + 16);
            *(_DWORD *)buf = 134218242;
            *(void *)&uint8_t buf[4] = v44;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v45;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "SLAMInfo unsupported type %lu for %@", buf, 0x16u);
          }

          goto LABEL_61;
        }
        unsigned int v33 = *(void **)(v31 + 16);
      }
      else
      {
        unsigned int v33 = 0;
      }
      uint64_t v34 = [v33 hexStringAsData];
      BOOL v35 = sub_100056C08(a1, v34);

      if (v35)
      {
        int v37 = SESDefaultLogObject();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          if (v31) {
            uint64_t v38 = *(void *)(v31 + 16);
          }
          else {
            uint64_t v38 = 0;
          }
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Applet %@ already present", buf, 0xCu);
        }

        goto LABEL_74;
      }
LABEL_61:
      uint64_t v46 = sub_100056FD0(a1, v36);
      unsigned int v47 = [v46 isProd];
      if (v31)
      {
        uint64_t v48 = 24;
        if (v47) {
          uint64_t v48 = 32;
        }
        uint64_t v49 = *(void *)(v31 + v48);
      }
      else
      {
        uint64_t v49 = 0;
      }

      v50 = SESDefaultLogObject();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        if (v31) {
          uint64_t v51 = *(void *)(v31 + 16);
        }
        else {
          uint64_t v51 = 0;
        }
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v51;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v49;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_INFO, "Installing %@ using script %s", buf, 0x16u);
      }

      *a3 = 1;
      uint64_t v12 = sub_10001558C(a1, v49);
      if (v12)
      {

        goto LABEL_89;
      }
      if (v31)
      {
        if (*(void *)(v31 + 8)) {
          goto LABEL_74;
        }
        unsigned int v52 = *(void **)(v31 + 16);
      }
      else
      {
        unsigned int v52 = 0;
      }
      id v53 = [v52 hexStringAsData];
      BOOL v54 = sub_100056C08(a1, v53);

      if (!v54)
      {
        uint64_t v57 = SESDefaultLogObject();
        if (v31) {
          id v58 = *(void **)(v31 + 16);
        }
        else {
          id v58 = 0;
        }
        id v59 = v58;
        id v61 = [v59 hexStringAsData];
        uint64_t v12 = SESCreateAndLogError();

        if (!v12) {
          goto LABEL_83;
        }
        goto LABEL_89;
      }
LABEL_74:
      if (v28 == (id)++v30)
      {
        id v55 = [v27 countByEnumeratingWithState:&v70 objects:v80 count:16];
        id v28 = v55;
        if (v55) {
          goto LABEL_39;
        }
        break;
      }
    }
  }

LABEL_83:
  uint64_t v12 = sub_100016A04(a1, v64);
LABEL_89:

LABEL_90:

  return v12;
}

void sub_100016210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t sub_10001624C(void *a1, const char *a2)
{
  uint64_t v2 = (uint64_t)a1;
  if (a1)
  {
    uint64_t v3 = sub_100056FD0(a1, a2);
    id v4 = [v3 type];

    if (v4 == (id)1)
    {
      return 0;
    }
    else
    {
      if (v4 == (id)3)
      {
        id v6 = sub_100056FD0((id)v2, v5);
        BOOL v7 = (unint64_t)[v6 csn] > 0x648;
      }
      else
      {
        if (v4 != (id)2) {
          return 1;
        }
        id v6 = sub_100056FD0((id)v2, v5);
        BOOL v7 = (unint64_t)[v6 csn] > 0x50E;
      }
      uint64_t v2 = v7;
    }
  }
  return v2;
}

void sub_1000162FC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

BOOL sub_10001630C(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v12 = 0;
  uint64_t v1 = sub_10001759C(a1, &v12);
  id v3 = v12;
  if (v3)
  {
    id v4 = SESDefaultLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v14 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to get PTA package: %@", buf, 0xCu);
    }
  }
  else
  {
    if (!v1) {
      goto LABEL_6;
    }
    if ((unint64_t)objc_msgSend(objc_getProperty(v1, v2, 8, 1), "length") > 0xE)
    {
      unsigned int v10 = [objc_getProperty(v1, v7, 8, 1) u16BE:13];
      uint64_t v11 = SESDefaultLogObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412546;
        id v14 = v1;
        __int16 v15 = 1024;
        unsigned int v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "PTA Package %@ Raw Version 0x%X", buf, 0x12u);
      }

      BOOL v5 = v10 > 0x202;
      goto LABEL_7;
    }
    id v4 = SESDefaultLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = [[objc_getProperty(v1, v8, 8, 1) asHexString];
      *(_DWORD *)buf = 138412290;
      id v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "PTA Package AID %@ too short?", buf, 0xCu);
    }
  }

LABEL_6:
  BOOL v5 = 0;
LABEL_7:

  return v5;
}

void sub_100016508(uint64_t a1, void *a2)
{
  id Property = a2;
  id v5 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v4, 16, 1);
  }
  if ([Property containsObject:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)])*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1; {
}
  }

id sub_100016580(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [@"A000000151000000" hexStringAsData];
    id v5 = sub_100056638(a1, v4);

    if (v5)
    {
      id v6 = v5;
      BOOL v7 = v6;
    }
    else
    {
      uint64_t v8 = [@"80AF10020000064F005C024F840000" hexStringAsData];
      unsigned int v47 = [@"80AF10030000064F005C024F840000" hexStringAsData];
      uint64_t v9 = 0;
      id v43 = v8;
      unsigned int v10 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
      uint64_t v11 = v43;
      while (1)
      {
        id v12 = v9;
        id v57 = 0;
        uint64_t v48 = v11;
        sub_100056104(a1, v11, &v57);
        uint64_t v9 = (id *)objc_claimAutoreleasedReturnValue();
        id v13 = v57;

        if (v13) {
          break;
        }
        long long v55 = 0u;
        long long v56 = 0u;
        long long v53 = 0u;
        long long v54 = 0u;
        id v14 = v10[332];
        __int16 v15 = sub_10005D558(v9);
        unsigned int v16 = [v14 TLVsWithData:v15];

        id v44 = [v16 countByEnumeratingWithState:&v53 objects:v59 count:16];
        if (v44)
        {
          uint64_t v17 = *(void *)v54;
          uint64_t v45 = v16;
          uint64_t v46 = v3;
          uint64_t v42 = *(void *)v54;
          do
          {
            for (i = 0; i != v44; i = (char *)i + 1)
            {
              if (*(void *)v54 != v17) {
                objc_enumerationMutation(v16);
              }
              uint64_t v19 = *(void **)(*((void *)&v53 + 1) + 8 * i);
              uint64_t v20 = objc_opt_new();
              id v22 = objc_opt_new();
              if (v20) {
                objc_setProperty_atomic(v20, v21, v22, 16);
              }

              long long v51 = 0u;
              long long v52 = 0u;
              long long v49 = 0u;
              long long v50 = 0u;
              id v23 = [v19 children];
              id v24 = [v23 countByEnumeratingWithState:&v49 objects:v58 count:16];
              if (v24)
              {
                id v25 = v24;
                uint64_t v26 = *(void *)v50;
                do
                {
                  id v27 = 0;
                  do
                  {
                    if (*(void *)v50 != v26) {
                      objc_enumerationMutation(v23);
                    }
                    id v28 = *(void **)(*((void *)&v49 + 1) + 8 * (void)v27);
                    unsigned int v29 = [v28 tag];
                    if (v29 == 132)
                    {
                      if (v20) {
                        id Property = objc_getProperty(v20, v30, 16, 1);
                      }
                      else {
                        id Property = 0;
                      }
                      id v34 = Property;
                      uint64_t v32 = [v28 value];
                      [v34 addObject:v32];
                    }
                    else
                    {
                      if (v29 != 79)
                      {
                        uint64_t v38 = SESDefaultLogObject();
                        [v28 tag];
                        id v39 = sub_10005D558(v9);
                        id v41 = [v39 asHexString];
                        BOOL v7 = SESCreateAndLogError();

                        id v6 = 0;
                        id v3 = v46;
                        goto LABEL_34;
                      }
                      uint64_t v32 = [v28 value];
                      if (v20) {
                        objc_setProperty_atomic(v20, v31, v32, 8);
                      }
                    }

                    id v27 = (char *)v27 + 1;
                  }
                  while (v25 != v27);
                  id v35 = [v23 countByEnumeratingWithState:&v49 objects:v58 count:16];
                  id v25 = v35;
                }
                while (v35);
              }

              id v3 = v46;
              v46[2](v46, v20);

              unsigned int v16 = v45;
              uint64_t v17 = v42;
            }
            id v44 = [v45 countByEnumeratingWithState:&v53 objects:v59 count:16];
          }
          while (v44);
        }

        id v36 = v47;
        int v37 = sub_10005D5A8((uint64_t)v9);
        uint64_t v11 = v36;
        unsigned int v10 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
        if (v37 != 25360)
        {
          id v6 = 0;
          BOOL v7 = 0;
          uint64_t v48 = v36;
          goto LABEL_34;
        }
      }
      id v6 = v13;
      BOOL v7 = v6;
LABEL_34:
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

id sub_100016A04(void *a1, void *a2)
{
  id v4 = a2;
  if (!a1)
  {
    BOOL v7 = 0;
    goto LABEL_104;
  }
  if ((sub_10001624C(a1, v3) & 1) == 0)
  {
    SESDefaultLogObject();
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    BOOL v7 = SESCreateAndLogError();
    goto LABEL_103;
  }
  id v5 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  if (SESInternalVariant()
    && [v5 BOOLForKey:@"debug.skip.applet.personalization"])
  {
    id v6 = SESDefaultLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping applet personalization due to debug setting", buf, 2u);
    }
    BOOL v7 = 0;
    goto LABEL_102;
  }
  id v66 = v5;
  uint64_t v8 = +[NSMutableArray arrayWithCapacity:4];
  uint64_t v9 = objc_opt_new();
  sub_100017360((uint64_t)v9, @"A000000809434343444B417631");
  unsigned int v10 = [@"80CA00EF" hexStringAsData];
  sub_100017370((uint64_t)v9, v10);

  if (v9)
  {
    v9[1] = 0x380000003;
    v9[5] = "SLAMPersonalizeCCC";
    v9[6] = "SLAMPersonalizeCCC";
  }
  [v8 addObject:v9];

  uint64_t v11 = objc_opt_new();
  sub_100017360((uint64_t)v11, @"A00000085801010100000001");
  id v12 = [@"80CA00EF" hexStringAsData];
  sub_100017370((uint64_t)v11, v12);

  if (v11)
  {
    v11[1] = 0x280000002;
    v11[5] = "SLAMPersonalizeHome";
    v11[6] = "SLAMPersonalizeHome";
  }
  [v8 addObject:v11];

  id v13 = objc_opt_new();
  sub_100017360((uint64_t)v13, @"A00000085802010100000001");
  id v14 = [@"80CA00EF" hexStringAsData];
  sub_100017370((uint64_t)v13, v14);

  if (v13)
  {
    v13[1] = 0x480000004;
    v13[5] = "SLAMPersonalizeHydra";
    v13[6] = "SLAMPersonalizeHydra";
  }
  [v8 addObject:v13];

  __int16 v15 = objc_opt_new();
  sub_100017360((uint64_t)v15, @"A000000909ACCE5501");
  unsigned int v16 = [@"80CA00EF" hexStringAsData];
  sub_100017370((uint64_t)v15, v16);

  if (v15)
  {
    v15[1] = 0x180000001;
    v15[5] = "SLAMPersonalizeLyon";
    v15[6] = "SLAMPersonalizeLyon";
  }
  [v8 addObject:v15];

  uint64_t v17 = sub_100018F18(a1, 0);
  id v18 = (int8x8_t *)objc_opt_new();
  sub_100017360((uint64_t)v18, @"A000000704E000000000");
  uint64_t v19 = [@"80CA00EC" hexStringAsData];
  sub_100017370((uint64_t)v18, v19);

  if (v18)
  {
    uint64_t v20 = "SLAMPersonalizeSunsprite_1_X_Internal";
    if (v17 == 2) {
      uint64_t v20 = "SLAMPersonalizeSunsprite_Internal";
    }
    v18[1] = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v17 == 2), 0x1FuLL)), (int8x8_t)0x6C0000006, (int8x8_t)0x4C0000003);
    uint64_t v21 = "SLAMPersonalizeSunsprite";
    if (v17 != 2) {
      uint64_t v21 = "SLAMPersonalizeSunsprite_1_X";
    }
    v18[5] = (int8x8_t)v21;
    v18[6] = (int8x8_t)v21;
    if (v17 == 2) {
      int v22 = -2147483642;
    }
    else {
      int v22 = -2147483644;
    }
    v18[2].i32[0] = v22;
    v18[7] = (int8x8_t)v20;
  }
  [v8 addObject:v18];

  id v24 = sub_100056FD0(a1, v23);
  unsigned __int8 v70 = [v24 isProd];

  id v67 = v4;
  unsigned __int8 v68 = [v4 isProduction];
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  id v6 = v8;
  id v25 = [v6 countByEnumeratingWithState:&v74 objects:v81 count:16];
  if (!v25) {
    goto LABEL_98;
  }
  id v26 = v25;
  uint64_t v27 = *(void *)v75;
  char v69 = v6;
  uint64_t v71 = *(void *)v75;
  do
  {
    id v28 = 0;
    do
    {
      if (*(void *)v75 != v27) {
        objc_enumerationMutation(v6);
      }
      uint64_t v29 = *(void *)(*((void *)&v74 + 1) + 8 * (void)v28);
      uint64_t v30 = SESDefaultLogObject();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        if (v29) {
          uint64_t v31 = *(void *)(v29 + 24);
        }
        else {
          uint64_t v31 = 0;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)id v79 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Personalizing %@", buf, 0xCu);
      }

      if (v29) {
        uint64_t v32 = *(void **)(v29 + 24);
      }
      else {
        uint64_t v32 = 0;
      }
      unsigned int v33 = [v32 hexStringAsData];
      BOOL v34 = sub_100056C08(a1, v33);

      if (!v34)
      {
        id v41 = SESDefaultLogObject();
        if (!os_log_type_enabled(v41, OS_LOG_TYPE_INFO)) {
          goto LABEL_84;
        }
        if (v29) {
          uint64_t v44 = *(void *)(v29 + 24);
        }
        else {
          uint64_t v44 = 0;
        }
        *(_DWORD *)buf = 138412290;
        *(void *)id v79 = v44;
        uint64_t v45 = v41;
        uint64_t v46 = "%@ not present; skipping personalization";
        goto LABEL_52;
      }
      if (v29) {
        id v35 = *(void **)(v29 + 24);
      }
      else {
        id v35 = 0;
      }
      id v36 = v35;
      int v37 = [v36 hexStringAsData];
      if (v29) {
        uint64_t v38 = *(void **)(v29 + 32);
      }
      else {
        uint64_t v38 = 0;
      }
      id v73 = 0;
      id v39 = v38;
      unsigned int v40 = sub_100017380(a1, v37, v39, &v73);
      id v41 = v73;

      if (v41)
      {
        uint64_t v42 = SESDefaultLogObject();
        uint64_t v27 = v71;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          if (v29) {
            uint64_t v43 = *(void *)(v29 + 24);
          }
          else {
            uint64_t v43 = 0;
          }
          *(_DWORD *)buf = 138412546;
          *(void *)id v79 = v43;
          *(_WORD *)&v79[8] = 2112;
          v80 = v41;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Failed to retrieve perso ID for %@ %@", buf, 0x16u);
        }

        goto LABEL_84;
      }
      if ((v70 & 1) == 0)
      {
        if (!v29) {
          goto LABEL_92;
        }
        uint64_t v47 = 8;
        uint64_t v48 = 40;
LABEL_63:
        long long v50 = 0;
        int v49 = *(_DWORD *)(v29 + v47);
        goto LABEL_64;
      }
      if ((v68 & 1) == 0)
      {
        if (!v29) {
          goto LABEL_92;
        }
        int v49 = *(_DWORD *)(v29 + 16);
        if (!v49)
        {
LABEL_62:
          uint64_t v47 = 12;
          uint64_t v48 = 48;
          goto LABEL_63;
        }
        uint64_t v48 = 56;
        long long v50 = @"/usr/local/SLAM/SLAMInternal.sefw";
LABEL_64:
        uint64_t v51 = *(void *)(v29 + v48);
        goto LABEL_65;
      }
      if (v29) {
        goto LABEL_62;
      }
LABEL_92:
      uint64_t v51 = 0;
      int v49 = 0;
      long long v50 = 0;
LABEL_65:
      long long v52 = SESDefaultLogObject();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)id v79 = v40;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v49;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "Current perso ID 0x%08X target perso ID 0x%08X", buf, 0xEu);
      }

      if (v40 == v49)
      {
        id v41 = SESDefaultLogObject();
        id v6 = v69;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          uint64_t v27 = v71;
          if (v29) {
            uint64_t v53 = *(void *)(v29 + 24);
          }
          else {
            uint64_t v53 = 0;
          }
          *(_DWORD *)buf = 138412290;
          *(void *)id v79 = v53;
          uint64_t v45 = v41;
          uint64_t v46 = "%@ configuration is up-to-date";
LABEL_52:
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, v46, buf, 0xCu);
          goto LABEL_84;
        }
        uint64_t v27 = v71;
      }
      else
      {
        uint64_t v54 = sub_1000155C0(a1, v51, v50);
        if (v54)
        {
          id v41 = v54;
          id v62 = SESDefaultLogObject();
LABEL_100:
          BOOL v7 = SESCreateAndLogError();

          id v5 = v66;
          id v4 = v67;
          id v6 = v69;
          goto LABEL_101;
        }
        if (v29) {
          long long v55 = *(void **)(v29 + 24);
        }
        else {
          long long v55 = 0;
        }
        id v56 = v55;
        id v57 = [v56 hexStringAsData];
        if (v29) {
          id v58 = *(void **)(v29 + 32);
        }
        else {
          id v58 = 0;
        }
        id v72 = 0;
        id v59 = v58;
        unsigned int v60 = sub_100017380(a1, v57, v59, &v72);
        id v41 = v72;

        id v61 = SESDefaultLogObject();
        id v62 = v61;
        if (v60 != v49) {
          goto LABEL_100;
        }
        uint64_t v27 = v71;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
        {
          if (v29) {
            uint64_t v63 = *(void *)(v29 + 24);
          }
          else {
            uint64_t v63 = 0;
          }
          *(_DWORD *)buf = 138412546;
          *(void *)id v79 = v63;
          *(_WORD *)&v79[8] = 1024;
          LODWORD(v80) = v49;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "%@ configuration updated to ID 0x%08X", buf, 0x12u);
        }

        id v6 = v69;
      }
LABEL_84:

      id v28 = (char *)v28 + 1;
    }
    while (v26 != v28);
    id v64 = [v6 countByEnumeratingWithState:&v74 objects:v81 count:16];
    id v26 = v64;
  }
  while (v64);
LABEL_98:
  BOOL v7 = 0;
  id v5 = v66;
  id v4 = v67;
LABEL_101:

LABEL_102:
LABEL_103:

LABEL_104:

  return v7;
}

void sub_100017360(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_100017370(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

id sub_100017380(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = v8;
  if (a1)
  {
    if (v7 && v8)
    {
      unsigned int v10 = sub_100056638(a1, v7);
      if (v10)
      {
        id v11 = v10;
        if (a4)
        {
          id v11 = v10;
          id v12 = 0;
          *a4 = v11;
        }
        else
        {
          id v12 = 0;
        }
        goto LABEL_20;
      }
      id v23 = 0;
      id v14 = sub_100056104(a1, v9, &v23);
      id v15 = v23;
      id v11 = v15;
      if (v15)
      {
        if (a4)
        {
          id v12 = 0;
          *a4 = v15;
LABEL_19:

LABEL_20:
          goto LABEL_21;
        }
      }
      else
      {
        unsigned int v16 = sub_10005D558((id *)v14);
        id v17 = [v16 length];

        if ((unint64_t)v17 > 3)
        {
          uint64_t v20 = sub_10005D558((id *)v14);
          id v12 = [v20 u32BE:0];

          goto LABEL_19;
        }
        if (a4)
        {
          id v18 = SESDefaultLogObject();
          uint64_t v19 = sub_10005D558((id *)v14);
          int v22 = [v19 asHexString];
          SESCreateAndLogError();
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      id v12 = 0;
      goto LABEL_19;
    }
    if (a4)
    {
      id v13 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  id v12 = 0;
LABEL_21:

  return v12;
}

id sub_10001759C(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    [@"A000000704D011500000000001000000" hexStringAsData];
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000;
    id v14 = sub_1000156FC;
    id v15 = sub_10001570C;
    id v16 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100017708;
    v8[3] = &unk_10040C2C0;
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    id v9 = v4;
    unsigned int v10 = &v11;
    id v5 = sub_100016580(v2, v8);
    id v6 = v5;
    if (v5)
    {
      id v2 = 0;
      if (a2) {
        *a2 = v5;
      }
    }
    else
    {
      id v2 = (id)v12[5];
    }

    _Block_object_dispose(&v11, 8);
  }

  return v2;
}

void sub_1000176F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100017708(uint64_t a1, void *a2)
{
  id Property = a2;
  id v6 = Property;
  if (Property) {
    id Property = objc_getProperty(Property, v5, 16, 1);
  }
  if ([Property containsObject:*(void *)(a1 + 32)]) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  }
}

id sub_100017868(id a1, NSData *a2)
{
  return [(NSData *)a2 asHexString];
}

id sub_1000178B4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if ([v6 length] == (id)4
    && [v7 length]
    && (unint64_t)[v7 length] < 0xF1)
  {
    uint64_t v11 = [@"A000000704E000000000" hexStringAsData];
    id v12 = sub_100056638(v5, v11);

    if (v12)
    {
      id v13 = v12;
      id v9 = v13;
    }
    else
    {
      v21[1] = [v6 DERItem];
      v21[2] = v14;
      v21[3] = [v7 DERItem];
      v21[4] = v15;
      id v16 = encodeSequenceSpec();
      if (v16)
      {
        v21[0] = 0;
        id v17 = sub_100056348(v5, 128, 65, 0, 0, v16, 0, v21);
        id v13 = v21[0];
        id v9 = v13;
      }
      else
      {
        id v18 = SESDefaultLogObject();
        uint64_t v19 = [v6 asHexString];
        uint64_t v20 = [v7 asHexString];
        id v9 = SESCreateAndLogError();

        id v13 = 0;
      }
    }
  }
  else
  {
    id v8 = SESDefaultLogObject();
    [v6 length];
    [v7 length];
    id v9 = SESCreateAndLogError();
  }

  return v9;
}

id sub_100017AEC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if ([v6 length] == (id)4)
  {
    id v7 = [@"A000000704E000000000" hexStringAsData];
    sub_100056638(v5, v7);
    id v8 = (id)objc_claimAutoreleasedReturnValue();

    if (v8)
    {
      if (a3)
      {
        id v8 = v8;
        id v9 = 0;
        *a3 = v8;
      }
      else
      {
        id v9 = 0;
      }
      goto LABEL_17;
    }
    v17[1] = [v6 DERItem];
    v17[2] = v11;
    id v12 = encodeSequenceSpec();
    if (v12)
    {
      v17[0] = 0;
      sub_100056348(v5, 128, 64, 0, 0, v12, 0, v17);
      id v13 = (id *)objc_claimAutoreleasedReturnValue();
      id v14 = v17[0];
      id v8 = v14;
      if (a3) {
        *a3 = v14;
      }
      id v9 = sub_10005D558(v13);
    }
    else
    {
      if (!a3)
      {
        id v8 = 0;
        id v9 = 0;
        goto LABEL_16;
      }
      SESDefaultLogObject();
      id v13 = (id *)objc_claimAutoreleasedReturnValue();
      id v16 = [v6 asHexString];
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      id v8 = 0;
      id v9 = 0;
    }

LABEL_16:
LABEL_17:

    goto LABEL_18;
  }
  if (a3)
  {
    unsigned int v10 = SESDefaultLogObject();
    [v6 length];
    SESCreateAndLogError();
    *a3 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v9 = 0;
LABEL_18:

  return v9;
}

id sub_100017D1C(void *a1, char a2, void *a3)
{
  id v5 = a1;
  id v6 = a3;
  if ((a2 & 1) == 0
    && (+[SESBootUUID isFirstLaunchAfterBootForKey:@"sunsprite.sepdata.last.check.uuid"] & 1) == 0)
  {
    id v16 = SESDefaultLogObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Sunsprite provisioning already checked for this boot", buf, 2u);
    }

    goto LABEL_15;
  }
  id v7 = [@"A000000704E000000000" hexStringAsData];
  BOOL v8 = sub_100056C08(v5, v7);

  if (!v8)
  {
    id v15 = SESDefaultLogObject();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Sunsprite not present; skipping provisioning",
        buf,
        2u);
    }

    +[SESBootUUID setFirstLaunchAfterBootDoneForKey:@"sunsprite.sepdata.last.check.uuid"];
LABEL_15:
    id v17 = 0;
    goto LABEL_79;
  }
  id v9 = [v6 getType];
  if (!v9)
  {
    id v18 = SESDefaultLogObject();
    id v17 = SESCreateAndLogError();

    goto LABEL_79;
  }
  id v10 = v9;
  id v75 = 0;
  sub_100018700(@"rcrt", &v75);
  CFDataRef v11 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  id v12 = v75;
  id v13 = v12;
  if (v11 && !v12)
  {
    if (v10 == (id)1)
    {
      id v74 = 0;
      sub_100018700(@"rMCl", &v74);
      CFDataRef v14 = (const __CFData *)objc_claimAutoreleasedReturnValue();
      id v19 = v74;
      id v13 = v19;
      if (!v14 || v19)
      {
        uint64_t v20 = SESDefaultLogObject();
        id v17 = SESCreateAndLogError();
LABEL_77:

        goto LABEL_78;
      }
      id v73 = 0;
      uint64_t v20 = sub_100018700(@"rSCl", &v73);
      id v21 = v73;
      id v13 = v21;
      if (!v20 || v21)
      {
        uint64_t v30 = SESDefaultLogObject();
        id v17 = SESCreateAndLogError();
LABEL_76:

        goto LABEL_77;
      }
      id v67 = (__CFData *)v20;
    }
    else
    {
      id v67 = 0;
      CFDataRef v14 = 0;
    }
    int v22 = +[MSUDataAccessor sharedDataAccessor];
    *(void *)md = 0;
    id v23 = [v22 copyPathForPersonalizedData:0 error:md];
    id v24 = *(id *)md;

    if (v24 || !v23)
    {
      id v25 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v29 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v30 = 0;
    }
    else
    {
      id v25 = [v23 stringByAppendingString:@"/Rose/ftab.bin"];
      id v26 = SESDefaultLogObject();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Resolved rose firmware path %@\n", buf, 0xCu);
      }

      *(void *)buf = 0;
      uint64_t v27 = +[NSData dataWithContentsOfFile:v25 options:1 error:buf];
      id v24 = *(id *)buf;
      id v65 = v27;
      if (v24
        || (unint64_t)[v27 length] <= 0x17
        || (id v64 = v27,
            int v49 = [v64 bytes],
            int v50 = v49[4],
            int v51 = v49[5],
            __CFADD__(v50, v51))
        || (long long v52 = v49, (unint64_t)[v64 length] < (v50 + v51)))
      {
        id v28 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v29 = (id)objc_claimAutoreleasedReturnValue();

        uint64_t v30 = 0;
      }
      else
      {
        uint64_t v30 = [v64 subdataWithRange:v52[4], v52[5]];
        id v29 = 0;
      }
    }
    id v31 = v29;
    id v13 = v31;
    if (!v30 || v31)
    {
      int v37 = SESDefaultLogObject();
      id v17 = SESCreateAndLogError();
      uint64_t v20 = v67;
    }
    else
    {
      sub_100056FD0(v5, v32);
      v34 = CFDataRef v33 = (const __CFData *)v30;
      CFDataRef v35 = [v34 seid];
      *(void *)buf = 0;
      CFDataRef v63 = v33;
      CFDataRef v66 = v14;
      uint64_t v20 = v67;
      uint64_t v36 = SSEGetRosePairingInfo(v35, v11, v14, v67, v33, (const __CFData **)buf);
      int v37 = *(void **)buf;
      if (!*(void *)buf)
      {
        uint64_t v38 = v36;
        id v39 = SESDefaultLogObject();
        uint64_t v61 = v38;
        SESCreateAndLogError();
        id v13 = (id)objc_claimAutoreleasedReturnValue();

        uint64_t v20 = v67;
      }
      id v13 = v13;

      if (!v37 || v13)
      {
        uint64_t v47 = SESDefaultLogObject();
        id v17 = SESCreateAndLogError();
      }
      else
      {
        *(_OWORD *)buf = 0u;
        long long v81 = 0u;
        v72[1] = [v37 DERItem];
        v72[2] = v40;
        if (!DERParseSequenceSpec() && *(void *)&buf[8])
        {
          *(_OWORD *)md = 0u;
          long long v79 = 0u;
          CC_SHA256(*(const void **)buf, *(CC_LONG *)&buf[8], md);
          v72[0] = 0;
          id v41 = sub_100018800(v5, v72);
          id v42 = v72[0];
          uint64_t v43 = v42;
          if (!v41 || v42)
          {
            uint64_t v44 = v37;
            uint64_t v45 = SESDefaultLogObject();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long v76 = 138412290;
              id v77 = v43;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Couldn't get config hash, proceeding anyway: %@", v76, 0xCu);
            }

            int v37 = v44;
          }
          CFDataRef v14 = v66;
          if (objc_msgSend(v41, "ses_isEqualToBytes:length:", md, 32, v61))
          {
            uint64_t v46 = SESDefaultLogObject();
            if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long v76 = 0;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "Sunsprite provisioning data is up-to-date", v76, 2u);
            }

            +[SESBootUUID setFirstLaunchAfterBootDoneForKey:@"sunsprite.sepdata.last.check.uuid"];
            id v13 = 0;
            id v17 = 0;
            uint64_t v30 = v63;
          }
          else
          {
            id v71 = 0;
            sub_100018908(v11, &v71);
            uint64_t v53 = (__CFData *)objc_claimAutoreleasedReturnValue();
            id v54 = v71;
            id v13 = v54;
            unsigned __int8 v68 = v53;
            if (v53)
            {
              id v70 = v54;
              id v62 = sub_100018B04(v53, &v70);
              id v55 = v70;

              if (v55)
              {
                id v13 = v55;
              }
              else
              {
                id v56 = SESDefaultLogObject();
                if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long v76 = 138412290;
                  id v77 = v62;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "Using rcrt intermediate %@", v76, 0xCu);
                }

                id v69 = 0;
                id v57 = sub_100018BE8(v62, &v69);
                id v58 = v69;
                if (!v58)
                {
                  sub_100018CE8(v5, v68, v57, v37, v10 != (id)1);
                  id v58 = (id)objc_claimAutoreleasedReturnValue();
                  if (!v58) {
                    +[SESBootUUID setFirstLaunchAfterBootDoneForKey:@"sunsprite.sepdata.last.check.uuid"];
                  }
                  id v59 = SESDefaultLogObject();
                  if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)long long v76 = 138412290;
                    id v77 = v58;
                    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "Sunsprite provisioned with error %@", v76, 0xCu);
                  }
                }
                id v13 = v58;
              }
              id v17 = v13;
            }
            else
            {
              id v17 = 0;
            }
            uint64_t v30 = v63;
          }
          goto LABEL_75;
        }
        uint64_t v48 = SESDefaultLogObject();
        id v17 = SESCreateAndLogError();

        id v13 = 0;
      }
      uint64_t v30 = v63;
      CFDataRef v14 = v66;
    }
LABEL_75:

    goto LABEL_76;
  }
  SESDefaultLogObject();
  CFDataRef v14 = (const __CFData *)objc_claimAutoreleasedReturnValue();
  id v17 = SESCreateAndLogError();
LABEL_78:

LABEL_79:

  return v17;
}

id sub_100018700(uint64_t a1, void *a2)
{
  v6[0] = @"VerifyData";
  v6[1] = @"StripImg4";
  v7[0] = &__kCFBooleanFalse;
  v7[1] = &__kCFBooleanFalse;
  v6[2] = @"GetCombined";
  v7[2] = &__kCFBooleanTrue;
  id v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:3];
  id v4 = (void *)AMFDRSealingMapCopyLocalDataForClass();
  if (a2) {
    *a2 = 0;
  }

  return v4;
}

id sub_100018800(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = [@"A000000704E000000000" hexStringAsData];
  id v5 = sub_100056638(v3, v4);

  if (v5)
  {
    id v6 = 0;
    if (a2) {
      *a2 = v5;
    }
  }
  else
  {
    char v11 = 0;
    int v10 = -352269696;
    id v7 = +[NSData dataWithBytesNoCopy:&v10 length:5 freeWhenDone:0];
    sub_100056104(v3, v7, a2);
    BOOL v8 = (id *)objc_claimAutoreleasedReturnValue();
    id v6 = sub_10005D558(v8);
  }

  return v6;
}

id sub_100018908(void *a1, void *a2)
{
  id v3 = a1;
  [v3 bytes];
  [v3 length];

  AMFDRDecodeCombined();
  if (a2)
  {
    id v4 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a2 = (id)objc_claimAutoreleasedReturnValue();
  }

  return 0;
}

void *sub_100018B04(void *a1, void *a2)
{
  CFDataRef v3 = a1;
  SecCertificateRef v4 = SecCertificateCreateWithData(0, v3);
  if (v4)
  {
    a2 = (void *)SecCertificateCopyIssuerSummary();
  }
  else if (a2)
  {
    id v5 = SESDefaultLogObject();
    id v7 = [(__CFData *)v3 base64];
    SESCreateAndLogError();
    *a2 = (id)objc_claimAutoreleasedReturnValue();

    a2 = 0;
  }

  return a2;
}

void *sub_100018BE8(void *a1, void *a2)
{
  id v3 = a1;
  if ([v3 isEqualToString:@"SEP-CA-E1"])
  {
    SecCertificateRef v4 = &unk_1003762E0;
    uint64_t v5 = 534;
LABEL_5:
    a2 = +[NSData dataWithBytesNoCopy:v4 length:v5 freeWhenDone:0];
    goto LABEL_6;
  }
  if ([v3 isEqualToString:@"SEP-CA-E2"])
  {
    SecCertificateRef v4 = &unk_1003764F6;
    uint64_t v5 = 571;
    goto LABEL_5;
  }
  if (a2)
  {
    id v7 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a2 = (id)objc_claimAutoreleasedReturnValue();

    a2 = 0;
  }
LABEL_6:

  return a2;
}

id sub_100018CE8(void *a1, void *a2, void *a3, void *a4, char a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  v30[1] = [a3 DERItem];
  v30[2] = v12;
  v30[3] = [v10 DERItem];
  v30[4] = v13;
  void v30[5] = [v11 DERItem];
  v30[6] = v14;
  id v15 = encodeSequenceContentSpec();
  id v16 = v15;
  if (!v15)
  {
    SESDefaultLogObject();
    id v23 = (id)objc_claimAutoreleasedReturnValue();
    SESCreateAndLogError();
    id v25 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_11;
  }
  if (![v15 length])
  {
LABEL_9:
    id v29 = 0;
    id v24 = sub_100056348(v9, 128, 33, 0, a5, 0, 0, &v29);
    id v25 = v29;
    id v23 = v25;
LABEL_11:
    id v26 = v25;
    goto LABEL_12;
  }
  uint64_t v17 = 0;
  unsigned int v18 = 0;
  while (1)
  {
    id v19 = (char *)[v16 length];
    uint64_t v20 = (unint64_t)&v19[-v17] >= 0xFA ? 250 : (uint64_t)&v19[-v17];
    id v21 = [v16 subdataWithRange:v17, v20];
    v30[0] = 0;
    id v22 = sub_100056348(v9, 128, 32, SBYTE1(v18), v18, v21, 0, v30);
    id v23 = v30[0];

    if (v23) {
      break;
    }
    v18 += v20;
    uint64_t v17 = v18;
    if ([v16 length] == (id)v18) {
      goto LABEL_9;
    }
  }
  id v28 = SESDefaultLogObject();
  id v26 = SESCreateAndLogError();

LABEL_12:

  return v26;
}

uint64_t sub_100018F18(void *a1, void *a2)
{
  id v3 = a1;
  SecCertificateRef v4 = [@"A000000704E000000000" hexStringAsData];
  sub_100056638(v3, v4);
  id v5 = (id)objc_claimAutoreleasedReturnValue();

  if (v5)
  {
    if (a2)
    {
      id v5 = v5;
      uint64_t v6 = 0;
      *a2 = v5;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  else
  {
    id v16 = 0;
    sub_100056348(v3, 128, 202, 0, 234, 0, 0, &v16);
    id v7 = (id *)objc_claimAutoreleasedReturnValue();
    id v5 = v16;
    BOOL v8 = sub_10005D558(v7);
    id v9 = [v8 length];

    if ((unint64_t)v9 > 1)
    {
      id v12 = sub_10005D558(v7);
      unsigned int v13 = [v12 u16BE:0];

      if (v13 <= 0x1FF) {
        uint64_t v6 = 1;
      }
      else {
        uint64_t v6 = 2;
      }
    }
    else
    {
      if (a2)
      {
        id v10 = SESDefaultLogObject();
        id v11 = sub_10005D558(v7);
        id v15 = [v11 asHexString];
        SESCreateAndLogError();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v6 = 0;
    }
  }
  return v6;
}

_DWORD *sub_1000190DC(uint64_t a1, uint64_t a2)
{
  id v2 = +[NSPropertyListSerialization dataWithPropertyList:a2 format:200 options:0 error:0];
  id v3 = malloc_type_calloc(1uLL, (size_t)[v2 length] + 200, 0x374DEA9AuLL);
  _DWORD *v3 = 1;
  v3[1] = [v2 length];
  __strlcpy_chk();
  id v4 = v2;
  memcpy(v3 + 50, [v4 bytes], (size_t)[v4 length]);

  return v3;
}

id *sub_1000191A4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = a2;
  self;
  uint64_t v6 = sub_100019220((id *)[SESDatabase alloc], v5, v4);

  return v6;
}

id *sub_100019220(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)SESDatabase;
    BOOL v8 = [(id *)[super init];
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 4, a3);
      *(_WORD *)((char *)a1 + 25) = 0;
      objc_storeStrong(a1 + 1, a2);
      id v9 = +[NSDistributedNotificationCenter defaultCenter];
      [v9 addObserver:a1 selector:"handleMFDNotification:" name:@"com.apple.stockholm.se.mfd" object:0];

      id v10 = SESDefaultLogObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "SESDatabase registered to receive MFD notifications", (uint8_t *)buf, 2u);
      }

      objc_initWeak(buf, a1);
      CFDataRef v14 = _NSConcreteStackBlock;
      uint64_t v15 = 3221225472;
      id v16 = sub_100019418;
      uint64_t v17 = &unk_10040C398;
      objc_copyWeak(&v18, buf);
      os_state_add_handler();
      id v11 = SESDefaultLogObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        __int16 v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "SESDatabase registered to receive os_state_handle notifications", (uint8_t *)&v13, 2u);
      }

      objc_destroyWeak(&v18);
      objc_destroyWeak(buf);
    }
  }

  return a1;
}

void sub_1000193FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_DWORD *sub_100019418(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = sub_100019450((uint64_t)WeakRetained);

  return v2;
}

_DWORD *sub_100019450(uint64_t a1)
{
  uint64_t v1 = (_DWORD *)a1;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    if (*((unsigned char *)v1 + 25))
    {
      BOOL v34 = objc_opt_new();
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      sub_1000404C0((uint64_t)v1, 0);
      id obj = (id)objc_claimAutoreleasedReturnValue();
      id v2 = [obj countByEnumeratingWithState:&v41 objects:v48 count:16];
      if (!v2)
      {
        id v4 = 0;
        goto LABEL_23;
      }
      id v3 = v2;
      id v4 = 0;
      uint64_t v5 = 0;
      uint64_t v6 = *(void *)v42;
      while (1)
      {
        id v7 = 0;
        do
        {
          if (*(void *)v42 != v6) {
            objc_enumerationMutation(obj);
          }
          BOOL v8 = *(void **)(*((void *)&v41 + 1) + 8 * (void)v7);
          id v40 = v4;
          id v9 = sub_100040964((uint64_t)v1, v8, &v40);
          id v10 = v40;

          id v11 = [v8 identifier];
          if (v11)
          {
            id v12 = [v8 identifier];
          }
          else
          {
            id v12 = +[NSString stringWithFormat:@"<revoked in consolidation>-%u", v5];
            uint64_t v5 = (v5 + 1);
          }
          id v4 = v10;

          if (v9)
          {
            uint64_t v13 = [v9 dumpState];
LABEL_15:
            CFDataRef v14 = (__CFString *)v13;
            goto LABEL_16;
          }
          if (v10)
          {
            uint64_t v13 = [v10 description];
            goto LABEL_15;
          }
          CFDataRef v14 = @"Unknown error";
LABEL_16:
          [v34 setObject:v14 forKeyedSubscript:v12];

          id v7 = (char *)v7 + 1;
        }
        while (v3 != v7);
        id v15 = [obj countByEnumeratingWithState:&v41 objects:v48 count:16];
        id v3 = v15;
        if (!v15)
        {
LABEL_23:

          id obja = (id)objc_opt_new();
          long long v36 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v39 = 0u;
          sub_100046240((uint64_t)v1, 0);
          id v31 = (id)objc_claimAutoreleasedReturnValue();
          id v16 = [v31 countByEnumeratingWithState:&v36 objects:v47 count:16];
          if (!v16) {
            goto LABEL_40;
          }
          id v17 = v16;
          uint64_t v18 = 0;
          uint64_t v19 = *(void *)v37;
          while (1)
          {
            objc_super v20 = 0;
            do
            {
              if (*(void *)v37 != v19) {
                objc_enumerationMutation(v31);
              }
              id v21 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v20);
              id v35 = v4;
              id v22 = sub_10004663C((uint64_t)v1, v21, &v35);
              id v23 = v35;

              id v24 = [v21 identifier];
              if (v24)
              {
                id v25 = [v21 identifier];
              }
              else
              {
                id v25 = +[NSString stringWithFormat:@"<revoked in consolidation>-%u", v18];
                uint64_t v18 = (v18 + 1);
              }
              id v4 = v23;

              if (v22)
              {
                uint64_t v26 = [v22 dumpState];
LABEL_35:
                uint64_t v27 = (__CFString *)v26;
                goto LABEL_36;
              }
              if (v23)
              {
                uint64_t v26 = [v23 description];
                goto LABEL_35;
              }
              uint64_t v27 = @"Unknown error";
LABEL_36:
              [obja setObject:v27 forKeyedSubscript:v25];

              objc_super v20 = (char *)v20 + 1;
            }
            while (v17 != v20);
            id v28 = [v31 countByEnumeratingWithState:&v36 objects:v47 count:16];
            id v17 = v28;
            if (!v28)
            {
LABEL_40:

              v45[0] = @"EndPoints";
              v45[1] = @"EndPointCAs";
              v46[0] = v34;
              v46[1] = obja;
              id v29 = +[NSDictionary dictionaryWithObjects:v46 forKeys:v45 count:2];
              uint64_t v1 = sub_1000190DC((uint64_t)"database.state", (uint64_t)v29);

              return v1;
            }
          }
        }
      }
    }
    return 0;
  }
  return v1;
}

id sub_100019850(uint64_t a1)
{
  if (a1 && (dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32)), !*(unsigned char *)(a1 + 25)))
  {
    id v3 = sub_1000198C8((dispatch_queue_t *)a1);
    id v2 = v3;
    if (v3) {
      id v4 = v3;
    }
    else {
      *(unsigned char *)(a1 + 25) = 1;
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id *sub_1000198C8(dispatch_queue_t *a1)
{
  uint64_t v1 = (id *)a1;
  if (a1)
  {
    dispatch_assert_queue_V2(a1[4]);
    if (v1[2])
    {
      uint64_t v1 = 0;
    }
    else
    {
      id v2 = +[NSURL URLWithString:@"/System/Library/SESStorage/SESModel.momd"];
      id v3 = [objc_alloc((Class)NSManagedObjectModel) initWithContentsOfURL:v2];
      if (v3)
      {
        id v4 = +[NSFileManager defaultManager];
        id v5 = v1[1];
        id v27 = 0;
        [v4 createDirectoryAtPath:v5 withIntermediateDirectories:1 attributes:0 error:&v27];
        id v6 = v27;

        if (v6)
        {
          id v7 = SESDefaultLogObject();
          SESCreateAndLogError();
          uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v7 = [v1[1] stringByAppendingPathComponent:@"SESStorageV001.sqlite"];
          id v9 = +[NSURL fileURLWithPath:v7];
          id v10 = +[NSFileManager defaultManager];
          unsigned int v11 = [v10 fileExistsAtPath:v7];

          id v12 = +[NSFileManager defaultManager];
          unsigned int v13 = [v12 isReadableFileAtPath:v7];

          CFDataRef v14 = +[NSFileManager defaultManager];
          unsigned int v15 = [v14 isWritableFileAtPath:v7];

          int v16 = MKBDeviceUnlockedSinceBoot();
          id v17 = SESDefaultLogObject();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138413314;
            id v31 = v9;
            __int16 v32 = 1024;
            unsigned int v33 = v11;
            __int16 v34 = 1024;
            unsigned int v35 = v13;
            __int16 v36 = 1024;
            unsigned int v37 = v15;
            __int16 v38 = 1024;
            int v39 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "SESStorage URL: %@ exists %d R_OK %d W_OK %d USB %d", buf, 0x24u);
          }

          id v18 = [objc_alloc((Class)NSPersistentStoreCoordinator) initWithManagedObjectModel:v3];
          if (v18)
          {
            v28[0] = NSMigratePersistentStoresAutomaticallyOption;
            v28[1] = NSInferMappingModelAutomaticallyOption;
            v29[0] = &__kCFBooleanTrue;
            v29[1] = &__kCFBooleanTrue;
            uint64_t v19 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
            id v26 = 0;
            objc_super v20 = [v18 addPersistentStoreWithType:NSSQLiteStoreType configuration:0 URL:v9 options:v19 error:&v26];
            id v21 = v26;
            id v6 = v21;
            if (!v20 || v21)
            {
              id v24 = SESDefaultLogObject();
              SESCreateAndLogError();
              uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              id v22 = [objc_alloc((Class)NSManagedObjectContext) initWithConcurrencyType:1];
              id v23 = v1[2];
              v1[2] = v22;

              [v1[2] setPersistentStoreCoordinator:v18];
              uint64_t v1 = 0;
            }
          }
          else
          {
            uint64_t v19 = SESDefaultLogObject();
            SESCreateAndLogError();
            uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue();
            id v6 = 0;
          }
        }
      }
      else
      {
        BOOL v8 = SESDefaultLogObject();
        SESCreateAndLogError();
        uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue();
      }
    }
  }

  return v1;
}

id sub_100019CF4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_5;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
  if (!a3)
  {
    if (!*(unsigned char *)(a1 + 26)) {
      goto LABEL_6;
    }
LABEL_5:
    id v6 = 0;
    goto LABEL_13;
  }
  *(unsigned char *)(a1 + 26) = 0;
LABEL_6:
  id v7 = SESDefaultLogObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    v10[0] = 67109120;
    v10[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Begin initializing DB (forced %d)", (uint8_t *)v10, 8u);
  }

  id v6 = sub_100019850(a1);
  if (!v6)
  {
    id v6 = sub_10005DE24((void *)a1, (void *)a1, v5);
    if (!v6)
    {
      BOOL v8 = SESDefaultLogObject();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v10[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "DB successfully reconciled", (uint8_t *)v10, 2u);
      }

      id v6 = 0;
      *(unsigned char *)(a1 + 26) = 1;
    }
  }
LABEL_13:

  return v6;
}

void sub_100019F2C(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Processing MFD notification", buf, 2u);
  }

  uint64_t v3 = sub_1000198C8(*(dispatch_queue_t **)(a1 + 32));
  if (v3)
  {
    id v4 = (id)v3;
    id v5 = SESDefaultLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to initialize the DB context %@", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v14 = 0;
    id v5 = sub_100046240(v6, &v14);
    id v4 = v14;
    if (v4)
    {
      id v7 = SESDefaultLogObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v4;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to list CA entities %@", buf, 0xCu);
      }
    }
    else
    {
      id v8 = [v5 count];
      uint64_t v9 = *(void *)(a1 + 32);
      if (v8)
      {
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472;
        v11[2] = sub_10001A13C;
        v11[3] = &unk_10040C3C0;
        id v5 = v5;
        uint64_t v10 = *(void *)(a1 + 32);
        id v12 = v5;
        uint64_t v13 = v10;
        sub_10001A33C(v9, v11);
        *(unsigned char *)(*(void *)(a1 + 32) + 26) = 0;
      }
      else
      {
        *(unsigned char *)(v9 + 26) = 0;
      }
    }
  }
}

void sub_10001A13C(uint64_t a1, void *a2)
{
  uint64_t v13 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v9 = SESDefaultLogObject();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = [v8 identifier];
          *(_DWORD *)buf = 138412290;
          uint64_t v19 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Deleting CA %@", buf, 0xCu);
        }
        [*(id *)(*(void *)(a1 + 40) + 16) deleteObject:v8];
      }
      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v5);
  }

  unsigned int v11 = sub_100030AE4((uint64_t)v13);
  if (v11)
  {
    id v12 = SESDefaultLogObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to commit changes %@", buf, 0xCu);
    }

    sub_100030B78(v13);
  }
}

void sub_10001A33C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    *(unsigned char *)(a1 + 24) = 1;
    id v4 = *(void **)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10001A434;
    v5[3] = &unk_10040C0B8;
    v5[4] = a1;
    id v6 = v3;
    [v4 performBlockAndWait:v5];
    *(unsigned char *)(a1 + 24) = 0;
  }
}

dispatch_queue_t *sub_10001A3F4(dispatch_queue_t *result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    dispatch_assert_queue_V2(result[4]);
    return (dispatch_queue_t *)sub_100019850(v1);
  }
  return result;
}

void sub_10001A434(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  sub_10003096C((uint64_t)SESDatabaseTransaction, *(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 16));
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10001A4A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 32));
    id v4 = *(void **)(a1 + 16);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10001A54C;
    v5[3] = &unk_10040C0B8;
    v5[4] = a1;
    id v6 = v3;
    [v4 performBlockAndWait:v5];
  }
}

uint64_t sub_10001A54C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(*(void *)(a1 + 32) + 16));
}

uint64_t sub_10001A564(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 25) & 1;
  }
  return result;
}

uint64_t sub_10001A574(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 26) & 1;
  }
  return result;
}

uint64_t sub_10001A584(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void sub_10001A648(id a1)
{
  uint64_t v1 = objc_opt_new();
  id v2 = (void *)qword_10045CC88;
  qword_10045CC88 = v1;
}

void sub_10001A944(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A960(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10001A974(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 8);
  os_unfair_lock_lock(v5);
  if (([*(id *)(a1 + 32) done] & 1) == 0)
  {
    if (!v4)
    {
      id v6 = SESDefaultLogObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to retrieve proximity chip information; defaulting to production",
          buf,
          2u);
      }

      +[SESTapToRadar requestTapToRadar:@"Failure retrieving proximity chip information" client:@"FailedProximityChipQuery"];
    }
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 16), a2);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001AAD4;
  v9[3] = &unk_10040C0B8;
  id v7 = *(NSObject **)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  v9[4] = *(void *)(a1 + 32);
  id v10 = v8;
  dispatch_async(v7, v9);

  os_unfair_lock_unlock(v5);
}

void sub_10001AABC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10001AAD4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10001AB78(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id sub_10001AC34(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3032000000;
    long long v15 = sub_10001ADAC;
    long long v16 = sub_10001ADBC;
    id v17 = 0;
    uint64_t v6 = 0;
    id v7 = &v6;
    uint64_t v8 = 0x3032000000;
    uint64_t v9 = sub_10001ADAC;
    id v10 = sub_10001ADBC;
    id v11 = 0;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10001ADC4;
    v5[3] = &unk_10040C430;
    v5[4] = &v6;
    void v5[5] = &v12;
    sub_10001A4A0(a1, v5);
    if (a2) {
      *a2 = (id) v13[5];
    }
    id v3 = (id)v7[5];
    _Block_object_dispose(&v6, 8);

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10001AD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001ADAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001ADBC(uint64_t a1)
{
}

void sub_10001ADC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[Invitation fetchRequest];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v3 executeFetchRequest:v4 error:&obj];

  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_10001AE6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v6 = sub_10001AC34(a1, a3);
    if (*a3)
    {
      uint64_t v7 = 0;
    }
    else
    {
      id v10 = v5;
      uint64_t v8 = Filter();

      uint64_t v7 = Transform();

      uint64_t v6 = (void *)v8;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_10001AF7C(uint64_t a1, void *a2)
{
  id v3 = [a2 clientName];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10001AFC0(id a1, Invitation *a2)
{
  return [(Invitation *)a2 data];
}

id sub_10001AFC8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    uint64_t v9 = sub_10001AC34(a1, a4);
    if (*a4)
    {
      id v10 = 0;
    }
    else
    {
      id v14 = v8;
      id v15 = v7;
      id v11 = Find();
      uint64_t v12 = v11;
      if (v11)
      {
        id v10 = [v11 data:_NSConcreteStackBlock, 3221225472, sub_10001B100, &unk_10040C4C0, v14, v15];
      }
      else
      {
        id v10 = 0;
      }
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id sub_10001B100(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 clientName];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = [v3 identifier];
    id v6 = [v5 isEqualToString:*(void *)(a1 + 40)];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_10001B17C(id a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v28 = 0;
    id v29 = &v28;
    uint64_t v30 = 0x3032000000;
    id v31 = sub_10001ADAC;
    __int16 v32 = sub_10001ADBC;
    id v33 = 0;
    id v27 = 0;
    id v10 = sub_10001AC34((uint64_t)a1, &v27);
    objc_storeStrong(&v33, v27);
    id v11 = (void *)v29[5];
    if (v11)
    {
      a1 = v11;
    }
    else
    {
      v25[0] = 0;
      v25[1] = v25;
      v25[2] = 0x3032000000;
      v25[3] = sub_10001ADAC;
      v25[4] = sub_10001ADBC;
      uint64_t v19 = _NSConcreteStackBlock;
      uint64_t v20 = 3221225472;
      id v21 = sub_10001B42C;
      id v22 = &unk_10040C4C0;
      id v23 = v9;
      id v24 = v7;
      Find();
      id v26 = (id)objc_claimAutoreleasedReturnValue();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_10001B4A8;
      v13[3] = &unk_10040C4E8;
      id v17 = v25;
      id v14 = v24;
      id v15 = v8;
      id v16 = v23;
      id v18 = &v28;
      sub_10001A33C((uint64_t)a1, v13);
      a1 = (id)v29[5];

      _Block_object_dispose(v25, 8);
    }

    _Block_object_dispose(&v28, 8);
  }

  return a1;
}

void sub_10001B3FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 144), 8);
  _Unwind_Resume(a1);
}

id sub_10001B42C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 clientName];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = [v3 identifier];
    id v6 = [v5 isEqualToString:*(void *)(a1 + 40)];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_10001B4A8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1[7] + 8) + 40);
  if (v4)
  {
    [v4 setData:a1[5]];
  }
  else
  {
    uint64_t v5 = sub_100030AD8((uint64_t)v3);
    uint64_t v6 = +[NSEntityDescription insertNewObjectForEntityForName:@"Invitation" inManagedObjectContext:v5];
    uint64_t v7 = *(void *)(a1[7] + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    [*(id *)(*(void *)(a1[7] + 8) + 40) setIdentifier:a1[4]];
    [*(id *)(*(void *)(a1[7] + 8) + 40) setData:a1[5]];
    [*(id *)(*(void *)(a1[7] + 8) + 40) setClientName:a1[6]];
    id v9 = *(void **)(*(void *)(a1[7] + 8) + 40);
    uint64_t v10 = *(void *)(a1[8] + 8);
    id obj = *(id *)(v10 + 40);
    LOBYTE(v5) = [v9 validateForInsert:&obj];
    objc_storeStrong((id *)(v10 + 40), obj);
    if ((v5 & 1) == 0)
    {
      sub_100030B78(v3);
      goto LABEL_6;
    }
  }
  uint64_t v11 = sub_100030AE4((uint64_t)v3);
  uint64_t v12 = *(void *)(a1[8] + 8);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

LABEL_6:
}

id sub_10001B5E0(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v22 = 0;
    id v23 = &v22;
    uint64_t v24 = 0x3032000000;
    id v25 = sub_10001ADAC;
    id v26 = sub_10001ADBC;
    id v27 = 0;
    id obj = 0;
    uint64_t v7 = sub_10001AC34((uint64_t)a1, &obj);
    objc_storeStrong(&v27, obj);
    id v8 = (void *)v23[5];
    if (v8)
    {
      a1 = v8;
    }
    else
    {
      id v15 = _NSConcreteStackBlock;
      uint64_t v16 = 3221225472;
      id v17 = sub_10001B7F4;
      id v18 = &unk_10040C4C0;
      id v19 = v6;
      id v20 = v5;
      id v9 = Find();
      uint64_t v10 = v9;
      if (v9)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10001B870;
        v12[3] = &unk_10040C510;
        id v13 = v9;
        id v14 = &v22;
        sub_10001A33C((uint64_t)a1, v12);
        a1 = (id)v23[5];
      }
      else
      {
        a1 = 0;
      }
    }
    _Block_object_dispose(&v22, 8);
  }

  return a1;
}

void sub_10001B7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10001B7F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 clientName];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = [v3 identifier];
    id v6 = [v5 isEqualToString:*(void *)(a1 + 40)];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_10001B870(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100030AD8((uint64_t)v3);
  [v4 deleteObject:*(void *)(a1 + 32)];

  uint64_t v5 = sub_100030AE4((uint64_t)v3);

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10001BA34(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) messageQueue];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10001BB24;
  v11[3] = &unk_10040B910;
  id v12 = v6;
  id v8 = *(id *)(a1 + 40);
  id v14 = v5;
  id v15 = v8;
  uint64_t v13 = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, v11);
}

void sub_10001BB24(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v2();
  }
  else
  {
    id v3 = [*(id *)(a1 + 40) database];
    sub_100019CF4((uint64_t)v3, *(void **)(a1 + 48), 0);
    id v7 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v4 = *(void *)(a1 + 56);
    if (v7)
    {
      (*(void (**)(void, void, void))(v4 + 16))(*(void *)(a1 + 56), 0, 0);
    }
    else
    {
      uint64_t v5 = *(void *)(a1 + 48);
      id v6 = [*(id *)(a1 + 40) database];
      (*(void (**)(uint64_t, uint64_t, void *, void))(v4 + 16))(v4, v5, v6, 0);
    }
  }
}

void sub_10001BDB0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) database];
  char v3 = sub_10001A564((uint64_t)v2);

  if ((v3 & 1) != 0
    || ([*(id *)(a1 + 32) database],
        uint64_t v4 = objc_claimAutoreleasedReturnValue(),
        sub_100019850((uint64_t)v4),
        id v8 = (id)objc_claimAutoreleasedReturnValue(),
        v4,
        !v8))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = [*(id *)(a1 + 32) database];
    uint64_t v5 = *(void (**)(void))(v6 + 16);
    id v8 = (id)v7;
  }
  else
  {
    uint64_t v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v5();
}

void sub_10001BE7C(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    char v3 = [*(id *)(a1 + 32) database];
    *(_DWORD *)buf = 67109120;
    int v14 = sub_10001A574((uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "%d", buf, 8u);
  }
  uint64_t v4 = [*(id *)(a1 + 32) database];
  int v5 = sub_10001A574((uint64_t)v4);

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = [*(id *)(a1 + 32) database];
    (*(void (**)(uint64_t, void *, void))(v6 + 16))(v6, v7, 0);
  }
  else
  {
    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10001C000;
    v11[3] = &unk_10040C538;
    uint64_t v10 = *(void *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    [v8 endPointServiceAvailableWithProxy:v9 reason:v10 reply:v11];
    uint64_t v7 = v12;
  }
}

uint64_t sub_10001C000(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10001C118(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) messageQueue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10001C200;
  block[3] = &unk_10040C560;
  id v12 = v6;
  id v8 = *(id *)(a1 + 40);
  id v13 = v5;
  id v14 = v8;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);
}

void sub_10001C200(void *a1)
{
  uint64_t v1 = a1[6];
  if (a1[4])
  {
    SESDefaultLogObject();
    id v6 = (id)objc_claimAutoreleasedReturnValue();
    id v2 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v1 + 16))(v1, 0, v2);
  }
  else
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, void))(v1 + 16);
    uint64_t v5 = a1[6];
    v4(v5, v3, 0);
  }
}

void sub_10001C47C(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    uint64_t v11 = (void *)a1[4];
    uint64_t v12 = a1[5];
    uint64_t v13 = a1[6];
    id v16 = 0;
    id v17 = 0;
    id v10 = [v11 _getEndPointAndValidateAccess:v8 identifier:v12 clientInfo:v13 outEndPointEntity:&v17 outEndPoint:&v16];
    id v14 = v17;
    id v15 = v16;
    (*(void (**)(void))(a1[7] + 16))();
  }
}

void sub_10001C6F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    (*(void (**)(void))(a1[7] + 16))();
  }
  else
  {
    id v8 = (void *)a1[4];
    uint64_t v9 = a1[5];
    uint64_t v10 = a1[6];
    id v13 = 0;
    id v14 = 0;
    id v7 = [v8 _getEndPointAndValidateAccess:v5 identifier:v9 clientInfo:v10 outEndPointEntity:&v14 outEndPoint:&v13];
    id v11 = v14;
    id v12 = v13;
    (*(void (**)(void))(a1[7] + 16))();
  }
}

uint64_t sub_10001CA14(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100040964(a1[4], v3, 0);
  id v5 = [v4 identifier];
  id v6 = a1 + 5;
  id v7 = [v5 isEqualToString:a1[5]];

  if (v7 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT)) {
    sub_1003655F4(a1 + 5, (uint64_t)a1);
  }
  id v8 = [v4 identifier];
  unsigned __int8 v9 = [v8 isEqualToString:*v6];
  if ((v9 & 1) == 0)
  {
    id v7 = [v4 publicKeyIdentifier];
    id v6 = +[NSData dataWithHexString:*v6];
    if ([v7 isEqualToData:v6])
    {
      uint64_t v13 = a1[6];
      uint64_t v10 = (id *)(a1 + 6);
      if ((sub_1000394B4(v13) & 1) == 0)
      {
LABEL_10:
        id v14 = [v3 clientName];
        id v16 = sub_100039480(*v10, v15);
        uint64_t v12 = (uint64_t)[v14 isEqualToString:v16];

        if (v9) {
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      uint64_t v12 = 1;
    }
    else
    {
      uint64_t v12 = 0;
    }
LABEL_13:

    goto LABEL_14;
  }
  uint64_t v11 = a1[6];
  uint64_t v10 = (id *)(a1 + 6);
  if ((sub_1000394B4(v11) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v12 = 1;
LABEL_14:

  return v12;
}

void sub_10001CD7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) preWarm:reply:]_block_invoke");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10001CE80;
  v9[3] = &unk_10040C620;
  id v14 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  id v10 = v3;
  uint64_t v11 = v6;
  id v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v8 = v3;
  [v4 endPointServiceAvailable:v5 reply:v9];
}

void sub_10001CE80(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (!v7)
  {
    unsigned int v12 = [*(id *)(a1 + 32) isSupported];
    id v13 = SESDefaultLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Sunsprite is to be SLAM'd %d", buf, 8u);
    }

    buf[0] = 0;
    uint64_t v14 = sub_100015878(v6, v12 | 8, buf, *(void **)(a1 + 32));
    if (!v14)
    {
      if (buf[0])
      {
        id v16 = [*(id *)(a1 + 40) database];
        sub_100019CF4((uint64_t)v16, v6, 1);
        id v8 = (id)objc_claimAutoreleasedReturnValue();

        if (v8) {
          goto LABEL_7;
        }
      }
      uint64_t v14 = sub_1000525A8(v6);
      if (!v14)
      {
        if (!v12)
        {
LABEL_16:
          id v8 = *(id *)(a1 + 48);
          if (!v8)
          {
            id v15 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
            goto LABEL_8;
          }
          id v19 = *(void **)(a1 + 40);
          id v20 = sub_100039480(*(id *)(a1 + 56), v17);
          id v21 = [*(id *)(a1 + 40) database];
          id v23 = 0;
          id v22 = [v19 _ensureCAExistsAndValid:v8 clientName:v20 secureElement:v6 database:v21 forEndPointType:1 error:&v23];
          id v8 = v23;

LABEL_7:
          id v15 = *(void (**)(void))(*(void *)(a1 + 64) + 16);
LABEL_8:
          v15();
          goto LABEL_9;
        }
        uint64_t v14 = sub_100017D1C(v6, 1, *(void **)(a1 + 32));
        if (!v14)
        {
          id v18 = +[DSK queue];
          dispatch_async(v18, &stru_10040C5F8);

          goto LABEL_16;
        }
      }
    }
    id v8 = (id)v14;
    goto LABEL_7;
  }
  id v8 = v7;
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = SESDefaultLogObject();
  [v8 code];
  uint64_t v11 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v11);

LABEL_9:
}

void sub_10001D10C(id a1)
{
  id v1 = +[DSK shared];
  [v1 startWithModule:0];
}

void sub_10001D320(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v13 = 0;
    id v8 = sub_100046240((uint64_t)v5, &v13);
    id v7 = v13;
    if (v7)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      if ((sub_1000394B4(*(void *)(a1 + 32)) & 1) == 0)
      {
        id v12 = *(id *)(a1 + 32);
        uint64_t v9 = Filter();

        id v8 = (void *)v9;
      }
      id v11 = v5;
      id v10 = TransformIf();
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

id sub_10001D4DC(uint64_t a1, void *a2)
{
  id v3 = [a2 clientName];
  id v5 = sub_100039480(*(id *)(a1 + 32), v4);
  id v6 = [v3 isEqualToString:v5];

  return v6;
}

id sub_10001D540(uint64_t a1, void *a2)
{
  return sub_10004663C(*(void *)(a1 + 32), a2, 0);
}

void sub_10001DBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001DC34(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10001DC44(uint64_t a1)
{
}

void sub_10001DC4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  uint64_t v7 = *(void *)(*(void *)(a1 + 80) + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v8 = sub_100046AA0((uint64_t)v3, v4, v5, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)) {
    goto LABEL_3;
  }
  id v11 = *(void **)(a1 + 56);
  id v12 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) instance];
  id v13 = [v12 identifier];
  uint64_t v14 = [v13 hexStringAsData];
  id v15 = *(void **)(a1 + 32);
  id v16 = *(void **)(a1 + 64);
  uint64_t v17 = *(void *)(*(void *)(a1 + 80) + 8);
  id v49 = *(id *)(v17 + 40);
  uint64_t v18 = sub_100048EC4(v11, v14, v15, v16, &v49);
  objc_storeStrong((id *)(v17 + 40), v49);
  uint64_t v19 = *(void *)(*(void *)(a1 + 88) + 8);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;

  if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)) {
    goto LABEL_3;
  }
  if ((unint64_t)(*(void *)(a1 + 96) - 3) > 1)
  {
    unsigned int v25 = +[SEABAAManager sharedManager];
    id v26 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) secureElementAttestation];
    uint64_t v28 = sub_100056FD0(*(id *)(a1 + 56), v27);
    id v29 = [v28 casdCertificate];
    uint64_t v30 = *(void *)(*(void *)(a1 + 80) + 8);
    id v47 = *(id *)(v30 + 40);
    id v31 = [v25 PerformSEABAAWithAttestation:v26 casdCertificate:v29 nonce:0 OIDs:0 validityInterval:0 error:&v47];
    objc_storeStrong((id *)(v30 + 40), v47);

    if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
    {
      uint64_t v32 = *(void *)(a1 + 96);
      if (v32 == 5 || v32 == 2)
      {
        id v33 = sub_100014F14((uint64_t)v31);
        v51[0] = v33;
        __int16 v34 = sub_100014F20((uint64_t)v31);
        v51[1] = v34;
        unsigned int v35 = +[NSArray arrayWithObjects:v51 count:2];
        [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setCertificates:v35];
      }
      else
      {
        if (v32 != 1)
        {
          long long v42 = SESDefaultLogObject();
          uint64_t v43 = SESCreateAndLogError();
          uint64_t v44 = *(void *)(*(void *)(a1 + 80) + 8);
          uint64_t v45 = *(void **)(v44 + 40);
          *(void *)(v44 + 40) = v43;

          goto LABEL_17;
        }
        id v33 = sub_100014F20((uint64_t)v31);
        long long v52 = v33;
        __int16 v34 = +[NSArray arrayWithObjects:&v52 count:1];
        [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setCertificates:v34];
      }

      __int16 v36 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      uint64_t v37 = *(void *)(*(void *)(a1 + 80) + 8);
      id v46 = *(id *)(v37 + 40);
      __int16 v38 = [v36 encodeWithError:&v46];
      objc_storeStrong((id *)(v37 + 40), v46);
      [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setEndPointCAData:v38];

      if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
      {
        uint64_t v39 = sub_100030AE4((uint64_t)v3);
        uint64_t v40 = *(void *)(*(void *)(a1 + 80) + 8);
        long long v41 = *(void **)(v40 + 40);
        *(void *)(v40 + 40) = v39;

LABEL_18:
        goto LABEL_4;
      }
    }
LABEL_17:
    sub_100030B78(v3);
    goto LABEL_18;
  }
  [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setCertificates:&__NSArray0__struct];
  id v21 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
  uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8);
  id v48 = *(id *)(v22 + 40);
  id v23 = [v21 encodeWithError:&v48];
  objc_storeStrong((id *)(v22 + 40), v48);
  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setEndPointCAData:v23];

  if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40))
  {
    id v24 = sub_100030AE4((uint64_t)v3);
    goto LABEL_4;
  }
LABEL_3:
  sub_100030B78(v3);
LABEL_4:
}

void sub_10001E2F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v11 = v9;
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
  else
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = sub_100039480(*(id *)(a1 + 40), v10);
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    id v20 = 0;
    id v16 = [v12 _createEndPointCA:v7 database:v8 clientName:v13 identifier:v14 subjectIdentifier:v15 forEndPointType:1 error:&v20];
    id v11 = v20;

    if (v11)
    {
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
    else
    {
      uint64_t v17 = [*(id *)(a1 + 32) database];
      id v19 = 0;
      uint64_t v18 = sub_10004663C((uint64_t)v17, v16, &v19);
      id v11 = v19;

      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
}

void sub_10001E66C(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    (*((void (**)(void))a1[6] + 2))();
  }
  else
  {
    v30[0] = 0;
    id v11 = sub_100046240((uint64_t)v8, v30);
    id v10 = v30[0];
    if (v10)
    {
      (*((void (**)(void))a1[6] + 2))();
    }
    else
    {
      id v24 = _NSConcreteStackBlock;
      uint64_t v25 = 3221225472;
      id v26 = sub_10001E8D4;
      id v27 = &unk_10040C710;
      id v28 = a1[4];
      id v29 = a1[5];
      id v12 = Find();
      id v13 = v12;
      if (v12)
      {
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_10001E984;
        v19[3] = &unk_10040C738;
        id v20 = v12;
        id v23 = a1[6];
        id v21 = v7;
        id v22 = a1[4];
        sub_10001A33C((uint64_t)v8, v19);

        uint64_t v14 = v20;
      }
      else
      {
        uint64_t v15 = (void (**)(id, void *))a1[6];
        uint64_t v14 = SESDefaultLogObject();
        uint64_t v18 = sub_100039480(a1[5], v16);
        uint64_t v17 = SESCreateAndLogError();
        v15[2](v15, v17);
      }
    }
  }
}

uint64_t sub_10001E8D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 identifier];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    if (sub_1000394B4(*(void *)(a1 + 40)))
    {
      uint64_t v5 = 1;
    }
    else
    {
      id v6 = [v3 clientName];
      id v8 = sub_100039480(*(id *)(a1 + 40), v7);
      uint64_t v5 = (uint64_t)[v6 isEqualToString:v8];
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_10001E984(uint64_t a1, void *a2)
{
  id v13 = a2;
  id v3 = [*(id *)(a1 + 32) endPoints];
  id v4 = [v3 count];

  if (v4)
  {
    sub_100030B78(v13);
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = SESDefaultLogObject();
    id v7 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v7);
  }
  else
  {
    id v8 = sub_100030AD8((uint64_t)v13);
    [v8 deleteObject:*(void *)(a1 + 32)];

    id v9 = *(void **)(a1 + 40);
    id v10 = [*(id *)(a1 + 32) instance];
    id v11 = [v10 identifier];
    id v12 = [v11 hexStringAsData];
    id v6 = sub_1000493BC(v9, v12, *(void **)(a1 + 48));

    if (v6)
    {
      sub_100030B78(v13);
    }
    else
    {
      id v6 = sub_100030AE4((uint64_t)v13);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10001EC94(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = v6;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v17 = 0;
    id v8 = sub_1000404C0((uint64_t)v5, &v17);
    id v7 = v17;
    if (v7)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      id v16 = *(id *)(a1 + 32);
      id v9 = Filter();
      id v15 = v5;
      id v10 = TransformIf();
      id v11 = SESDefaultLogObject();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v12 = [v8 count];
        unsigned int v13 = [v9 count];
        unsigned int v14 = [v10 count];
        *(_DWORD *)buf = 67109632;
        unsigned int v19 = v12;
        __int16 v20 = 1024;
        unsigned int v21 = v13;
        __int16 v22 = 1024;
        unsigned int v23 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Got %d entities, %d filtered, %d transformed", buf, 0x14u);
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

uint64_t sub_10001EF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (sub_1000394B4(*(void *)(a1 + 32)))
  {
    uint64_t v4 = 1;
  }
  else
  {
    id v5 = [v3 clientName];
    id v7 = sub_100039480(*(id *)(a1 + 32), v6);
    uint64_t v4 = (uint64_t)[v5 isEqualToString:v7];
  }
  return v4;
}

id sub_10001EF88(uint64_t a1, void *a2)
{
  return sub_100040964(*(void *)(a1 + 32), a2, 0);
}

void sub_10001F118(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    id v10 = v9;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v21 = 0;
    id v11 = sub_1000404C0((uint64_t)v8, &v21);
    id v10 = v21;
    if (v10 || !v11)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      id v17 = SESEnsureError();
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v17);
    }
    else
    {
      id v12 = [v11 count];
      unsigned int v13 = SESDefaultLogObject();
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_INFO);
      if (v12)
      {
        if (v14)
        {
          id v15 = [v11 count];
          *(_DWORD *)buf = 134217984;
          id v23 = v15;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%lu endpoints found, skipping cleanup", buf, 0xCu);
        }

        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
        id v10 = 0;
      }
      else
      {
        if (v14)
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "No endpoints found, deleting unused Applets", buf, 2u);
        }

        sub_10001558C(v7, (uint64_t)"SLAMDeleteCopernicusAndSunsprite");
        id v10 = (id)objc_claimAutoreleasedReturnValue();
        if (v10)
        {
          uint64_t v18 = SESDefaultLogObject();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v23 = v10;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to delete applets %@", buf, 0xCu);
          }
        }
        id v19 = sub_100019CF4((uint64_t)v8, v7, 1);
        __int16 v20 = sub_100063744();
        sub_100064738(v20, v7);

        (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      }
    }
  }
}

void sub_10001FDCC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    uint64_t v103 = 0;
    unsigned int v104 = (id *)&v103;
    uint64_t v105 = 0x3032000000;
    id v106 = sub_10001DC34;
    v107 = sub_10001DC44;
    id v108 = 0;
    id obj = 0;
    id v10 = sub_10005D7F8((uint64_t)v8, @"A000000809434343444B417631", &obj);
    objc_storeStrong(&v108, obj);
    id v11 = v104 + 5;
    if (v104[5]) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v10 == 0;
    }
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 160);
      SESDefaultLogObject();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void, id))(v13 + 16))(v13, 0, v14);
LABEL_51:

LABEL_52:
      _Block_object_dispose(&v103, 8);

      goto LABEL_53;
    }
    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    id v101 = 0;
    id v18 = [v15 _existsDuplicateInDatabase:v8 airInstanceEntity:v10 withIdentifier:v16 orReaderIdentifier:v17 outError:&v101];
    objc_storeStrong((id *)v11, v101);
    id v19 = v104[5];
    if (v19 || v18)
    {
      uint64_t v24 = *(void *)(a1 + 160);
      id v14 = v104[5];
      if (!v19)
      {
        SESDefaultLogObject();
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        id v14 = (id)objc_claimAutoreleasedReturnValue();
      }
      (*(void (**)(uint64_t, void, id))(v24 + 16))(v24, 0, v14);
      if (v19) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
    id v11 = *(id *)(a1 + 56);
    if (!v11)
    {
      id v21 = sub_100039480(*(id *)(a1 + 64), v20);
      BOOL v22 = (unint64_t)[v21 length] < 0x1F;

      sub_100039480(*(id *)(a1 + 64), v23);
      if (v22)
      {
        id v11 = (id)objc_claimAutoreleasedReturnValue();
      }
      else {
        uint64_t v25 = {;
      }
        id v27 = sub_100039480(*(id *)(a1 + 64), v26);
        id v28 = (char *)[v27 length];

        id v11 = [v25 substringFromIndex:v28 - 30];
      }
    }
    id v29 = SESDefaultLogObject();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      id v31 = sub_100039480(*(id *)(a1 + 64), v30);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Resolved authorityIdentifier %@ for client %@", buf, 0x16u);
    }
    uint64_t v32 = *(void **)(a1 + 32);
    __int16 v34 = sub_100039480(*(id *)(a1 + 64), v33);
    unsigned int v35 = v104;
    id v100 = v104[5];
    id v14 = [v32 _ensureCAExistsAndValid:v11 clientName:v34 secureElement:v7 database:v8 forEndPointType:1 error:&v100];
    objc_storeStrong(v35 + 5, v100);

    __int16 v36 = v104 + 5;
    if (v104[5])
    {
      uint64_t v37 = *(void *)(a1 + 160);
      SESDefaultLogObject();
      id v75 = (id)objc_claimAutoreleasedReturnValue();
      __int16 v38 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v37 + 16))(v37, 0, v38);
LABEL_49:

      goto LABEL_50;
    }
    id v99 = 0;
    sub_10004663C((uint64_t)v8, v14, &v99);
    id v75 = (id)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v36, v99);
    if (!v75 || v104[5])
    {
      (*(void (**)(void))(*(void *)(a1 + 160) + 16))();
LABEL_50:

      goto LABEL_51;
    }
    id v74 = objc_opt_new();
    uint64_t v39 = [v75 certificates];
    BOOL v40 = [v39 count] == (id)1;

    if (v40)
    {
      uint64_t v42 = *(void *)(a1 + 72);
      uint64_t v43 = sub_100056FD0(v7, v41);
      id v44 = [v43 isProd];
      uint64_t v45 = v104;
      id v98 = v104[5];
      id v72 = [v74 getExternalCACertificateFor:v11 environment:v42 prodSE:v44 error:&v98];
      objc_storeStrong(v45 + 5, v98);

      if (v104[5])
      {
        uint64_t v46 = *(void *)(a1 + 160);
        id v71 = SESDefaultLogObject();
        id v48 = sub_100056FD0(v7, v47);
        [v48 isProd];
        id v49 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0, v49);

LABEL_48:
        __int16 v38 = v74;
        goto LABEL_49;
      }
      v115[0] = v72;
      int v50 = [v75 certificates];
      int v51 = [v50 objectAtIndexedSubscript:0];
      v115[1] = v51;
      long long v52 = +[NSArray arrayWithObjects:v115 count:2];
      [v75 setCertificates:v52];

      uint64_t v53 = [*(id *)(a1 + 32) database];
      id v54 = sub_100046714(v53, v14, v75);

      if (v54)
      {
        uint64_t v55 = *(void *)(a1 + 160);
        id v56 = SESDefaultLogObject();
        id v57 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v55 + 16))(v55, 0, v57);

        goto LABEL_48;
      }
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    v112 = sub_10001DC34;
    v113 = sub_10001DC44;
    id v114 = 0;
    id v58 = [*(id *)(a1 + 32) database];
    v76[0] = _NSConcreteStackBlock;
    v76[1] = 3221225472;
    v76[2] = sub_100020904;
    v76[3] = &unk_10040C7D8;
    id v77 = *(id *)(a1 + 40);
    id v78 = v14;
    id v79 = *(id *)(a1 + 64);
    id v96 = &v103;
    id v59 = v74;
    id v80 = v59;
    id v81 = v11;
    id v82 = *(id *)(a1 + 72);
    id v83 = *(id *)(a1 + 80);
    uint64_t v97 = buf;
    id v60 = v7;
    id v84 = v60;
    id v75 = v75;
    id v85 = v75;
    id v86 = *(id *)(a1 + 88);
    id v87 = *(id *)(a1 + 96);
    id v88 = *(id *)(a1 + 48);
    id v89 = *(id *)(a1 + 104);
    id v90 = *(id *)(a1 + 112);
    id v91 = *(id *)(a1 + 120);
    id v92 = *(id *)(a1 + 128);
    id v93 = *(id *)(a1 + 136);
    id v94 = *(id *)(a1 + 144);
    id v95 = *(id *)(a1 + 152);
    sub_10001A33C((uint64_t)v58, v76);
    id v74 = v59;

    uint64_t v61 = *(void *)&buf[8];
    if (!v104[5]) {
      goto LABEL_56;
    }
    if (*(void *)(*(void *)&buf[8] + 40))
    {
      id v62 = SESDefaultLogObject();
      if (os_log_type_enabled(v62, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)v109 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "Failure after creating EP on SE, cleaning it up", v109, 2u);
      }

      CFDataRef v63 = v60;
      id v73 = [v10 identifier];
      id v64 = [v73 hexStringAsData];
      id v65 = [*(id *)(*(void *)&buf[8] + 40) publicKeyIdentifier];
      CFDataRef v66 = sub_100048B74(v63, v64, v65);

      if (v66)
      {
        id v67 = SESDefaultLogObject();
        if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v109 = 138412290;
          v110 = v66;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to clean up EP   : %@", v109, 0xCu);
        }
      }
      unsigned __int8 v68 = [*(id *)(*(void *)&buf[8] + 40) deleteEndPointLongTermPrivacyKey];

      if (v68)
      {
        id v69 = SESDefaultLogObject();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)v109 = 138412290;
          v110 = v68;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_ERROR, "Failed to delete long term privacy key %@", v109, 0xCu);
        }
      }
      id v70 = *(void **)(*(void *)&buf[8] + 40);
      *(void *)(*(void *)&buf[8] + 40) = 0;

      uint64_t v61 = *(void *)&buf[8];
      if (!v104[5])
      {
LABEL_56:
        if (*(void *)(v61 + 40)) {
          +[EndpointStore insertWithEndpoint:](_TtC10seserviced13EndpointStore, "insertWithEndpoint:");
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 160) + 16))();

    _Block_object_dispose(buf, 8);
    goto LABEL_48;
  }
  (*(void (**)(void))(*(void *)(a1 + 160) + 16))();
LABEL_53:
}

void sub_100020898(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Unwind_Resume(a1);
}

void sub_100020904(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v6 = [v5 instance];
  id v8 = sub_100039480(*(id *)(a1 + 48), v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 184) + 8);
  v91[0] = *(id *)(v9 + 40);
  id v10 = [v3 stageEndPointEntityWithIdentifier:v4 endPointCAEntity:v5 airInstanceEntity:v6 clientName:v8 error:v91];
  objc_storeStrong((id *)(v9 + 40), v91[0]);

  uint64_t v11 = *(void *)(*(void *)(a1 + 184) + 8);
  uint64_t v13 = *(void *)(v11 + 40);
  BOOL v12 = (id *)(v11 + 40);
  if (!v13)
  {
    id v14 = *(void **)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    uint64_t v16 = *(void *)(a1 + 72);
    uint64_t v17 = *(void *)(a1 + 80);
    id v90 = 0;
    id v18 = [v14 getEncryptionCertificateFor:v15 environment:v16 region:v17 error:&v90];
    objc_storeStrong(v12, v90);
    if (*(void *)(*(void *)(*(void *)(a1 + 184) + 8) + 40))
    {
      id v19 = SESDefaultLogObject();
      uint64_t v20 = SESCreateAndLogError();
      uint64_t v21 = *(void *)(*(void *)(a1 + 184) + 8);
      BOOL v22 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v20;

LABEL_5:
      sub_100030B78((id *)v3);
LABEL_12:

      goto LABEL_13;
    }
    id v23 = getCertificatePublicKey();
    [v10 setPrivacyEncryptionPK:v23];

    uint64_t v24 = [v10 privacyEncryptionPK];

    if (!v24)
    {
      id v19 = SESDefaultLogObject();
      id v81 = [v18 base64];
      uint64_t v35 = SESCreateAndLogError();
      uint64_t v36 = *(void *)(*(void *)(a1 + 184) + 8);
      uint64_t v37 = *(void **)(v36 + 40);
      *(void *)(v36 + 40) = v35;

      goto LABEL_5;
    }
    uint64_t v25 = *(void **)(a1 + 56);
    uint64_t v26 = *(void *)(a1 + 64);
    uint64_t v27 = *(void *)(a1 + 72);
    uint64_t v28 = *(void *)(a1 + 80);
    uint64_t v29 = *(void *)(*(void *)(a1 + 184) + 8);
    id v89 = *(id *)(v29 + 40);
    uint64_t v30 = [v25 getSignatureCertificateFor:v26 environment:v27 region:v28 error:&v89];
    objc_storeStrong((id *)(v29 + 40), v89);
    if (*(void *)(*(void *)(*(void *)(a1 + 184) + 8) + 40))
    {
      id v31 = SESDefaultLogObject();
      uint64_t v32 = SESCreateAndLogError();
      uint64_t v33 = *(void *)(*(void *)(a1 + 184) + 8);
      __int16 v34 = *(void **)(v33 + 40);
      *(void *)(v33 + 40) = v32;
    }
    else
    {
      __int16 v38 = getCertificatePublicKey();
      [v10 setSignatureVerificationPK:v38];

      uint64_t v39 = [v10 signatureVerificationPK];

      if (v39)
      {
        id v83 = v30;
        id v85 = *(void **)(a1 + 88);
        id v87 = [v10 instance];
        id v86 = [v87 identifier];
        BOOL v40 = [v86 hexStringAsData];
        long long v41 = [*(id *)(a1 + 96) subjectIdentifier];
        id v84 = *(void **)(a1 + 32);
        uint64_t v42 = *(void **)(a1 + 104);
        unsigned int v43 = [*(id *)(a1 + 112) opt1];
        unsigned int v44 = [*(id *)(a1 + 112) opt2];
        unsigned __int8 v45 = [*(id *)(a1 + 112) optA];
        long long v46 = *(_OWORD *)(a1 + 120);
        long long v47 = *(_OWORD *)(a1 + 136);
        long long v48 = *(_OWORD *)(a1 + 152);
        id v49 = *(void **)(a1 + 168);
        int v50 = *(void **)(a1 + 176);
        uint64_t v51 = *(void *)(*(void *)(a1 + 184) + 8);
        id v88 = *(id *)(v51 + 40);
        sub_100046D4C(v85, 1, v40, v41, v84, v42, v43, v44, v45, (void *)v46, *((void **)&v46 + 1), (void *)v47, *((void **)&v47 + 1), (void *)v48, *((void **)&v48 + 1), v49, v50, 0, 0,
          0,
          0,
          0,
        uint64_t v52 = &v88);
        objc_storeStrong((id *)(v51 + 40), v88);
        uint64_t v53 = *(void *)(*(void *)(a1 + 192) + 8);
        id v54 = *(void **)(v53 + 40);
        *(void *)(v53 + 40) = v52;

        if (*(void *)(*(void *)(*(void *)(a1 + 184) + 8) + 40)
          || !*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 40))
        {
          sub_100030B78((id *)v3);
          uint64_t v30 = v83;
          goto LABEL_11;
        }
        id v58 = [*(id *)(a1 + 112) nfcExpressOnlyInLPM];
        id v59 = [*(id *)(*(void *)(*(void *)(a1 + 192) + 8) + 40) configuration];
        [v59 setNfcExpressOnlyInLPM:v58];

        id v60 = [*(id *)(a1 + 112) terminationNotPersisted];
        uint64_t v61 = [*(id *)(*(void *)(*(void *)(a1 + 192) + 8) + 40) configuration];
        [v61 setTerminationNotPersisted:v60];

        if (SESInternalVariant())
        {
          id v62 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
          CFDataRef v63 = [v62 objectForKey:@"debug.ursk.ttl.override"];
          id v64 = v63;
          if (v63) {
            unsigned __int8 v65 = [v63 unsignedIntValue];
          }
          else {
            unsigned __int8 v65 = 11;
          }
          uint64_t v30 = v83;
        }
        else
        {
          unsigned __int8 v65 = 11;
          uint64_t v30 = v83;
        }
        CFDataRef v66 = *(void **)(a1 + 88);
        id v67 = [@"A000000809434343444B417631" hexStringAsData];
        unsigned __int8 v68 = [*(id *)(*(void *)(*(void *)(a1 + 192) + 8) + 40) publicKeyIdentifier];
        id v69 = +[NSNumber numberWithUnsignedChar:v65];
        uint64_t v70 = sub_100049D34(v66, v67, v68, 0, 0, 0, 0, 0, 0, 0, 0, v69, 0);
        uint64_t v71 = *(void *)(*(void *)(a1 + 184) + 8);
        id v72 = *(void **)(v71 + 40);
        *(void *)(v71 + 40) = v70;

        if (!*(void *)(*(void *)(*(void *)(a1 + 184) + 8) + 40))
        {
          [*(id *)(*(void *)(*(void *)(a1 + 192) + 8) + 40) setEnvironment:*(void *)(a1 + 72)];
          id v73 = *(void **)(*(void *)(*(void *)(a1 + 192) + 8) + 40);
          id v74 = [*(id *)(a1 + 96) certificates];
          [v73 prependCertificateChain:v74];

          uint64_t v75 = [v3 stageEndPointEntityUpdates:v10 fromEndPoint:*(void *)(*(void *)(*(void *)(a1 + 192) + 8) + 40)];
          uint64_t v76 = *(void *)(*(void *)(a1 + 184) + 8);
          id v77 = *(void **)(v76 + 40);
          *(void *)(v76 + 40) = v75;

          if (!*(void *)(*(void *)(*(void *)(a1 + 184) + 8) + 40))
          {
            uint64_t v78 = sub_100030AE4((uint64_t)v3);
            uint64_t v79 = *(void *)(*(void *)(a1 + 184) + 8);
            id v80 = *(void **)(v79 + 40);
            *(void *)(v79 + 40) = v78;

            goto LABEL_11;
          }
        }
LABEL_10:
        sub_100030B78((id *)v3);
LABEL_11:

        goto LABEL_12;
      }
      id v31 = SESDefaultLogObject();
      id v82 = [v30 base64];
      uint64_t v55 = SESCreateAndLogError();
      uint64_t v56 = *(void *)(*(void *)(a1 + 184) + 8);
      id v57 = *(void **)(v56 + 40);
      *(void *)(v56 + 40) = v55;
    }
    goto LABEL_10;
  }
  sub_100030B78((id *)v3);
LABEL_13:
}

void sub_1000216F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createHydraEndpointWithProxy:serverParams:reply:]_block_invoke");
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000218B0;
  v12[3] = &unk_10040C850;
  id v24 = *(id *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 32);
  id v13 = v3;
  uint64_t v14 = v7;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  id v20 = *(id *)(a1 + 88);
  id v21 = *(id *)(a1 + 96);
  id v22 = *(id *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 128);
  id v23 = *(id *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 144);
  *(void *)&long long v9 = v11;
  *((void *)&v9 + 1) = *(void *)(a1 + 136);
  long long v25 = v9;
  uint64_t v26 = v8;
  id v10 = v3;
  [v4 endPointServiceAvailableWithProxy:v5 reason:v6 reply:v12];
}

void sub_1000218B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
  }
  else
  {
    v58[0] = 0;
    uint64_t v52 = 0;
    uint64_t v53 = (id *)&v52;
    uint64_t v54 = 0x3032000000;
    uint64_t v55 = sub_10001DC34;
    uint64_t v56 = sub_10001DC44;
    sub_100015878(v7, 4, v58, *(void **)(a1 + 32));
    id v57 = (id)objc_claimAutoreleasedReturnValue();
    if (v53[5]) {
      goto LABEL_4;
    }
    if (!v58[0]) {
      goto LABEL_7;
    }
    id v10 = [*(id *)(a1 + 40) database];
    uint64_t v11 = sub_100019CF4((uint64_t)v10, v7, 1);
    id v12 = v53[5];
    v53[5] = (id)v11;

    if (v53[5])
    {
LABEL_4:
      (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
    }
    else
    {
LABEL_7:
      id v13 = v53;
      id v51 = v53[5];
      uint64_t v14 = sub_10005D7F8((uint64_t)v8, @"A00000085802010100000001", &v51);
      objc_storeStrong(v13 + 5, v51);
      if (v53[5] || !v14)
      {
        uint64_t v26 = *(void *)(a1 + 120);
        SESDefaultLogObject();
        id v20 = (id)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        id v22 = (id)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t, void, id))(v26 + 16))(v26, 0, v22);
      }
      else
      {
        id v16 = *(void **)(a1 + 40);
        uint64_t v17 = *(void *)(a1 + 48);
        id v18 = sub_100039480(*(id *)(a1 + 56), v15);
        id v19 = v53;
        id v50 = v53[5];
        id v20 = [v16 _ensureCAExistsAndValid:v17 clientName:v18 secureElement:v7 database:v8 forEndPointType:2 error:&v50];
        objc_storeStrong(v19 + 5, v50);

        id v21 = v53 + 5;
        if (!v20 || v53[5])
        {
          uint64_t v27 = *(void *)(a1 + 120);
          SESEnsureError();
          id v22 = (id)objc_claimAutoreleasedReturnValue();
          (*(void (**)(uint64_t, void, id))(v27 + 16))(v27, 0, v22);
        }
        else
        {
          id v49 = 0;
          sub_10004663C((uint64_t)v8, v20, &v49);
          id v22 = (id)objc_claimAutoreleasedReturnValue();
          objc_storeStrong(v21, v49);
          if (!v22 || v53[5])
          {
            (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
          }
          else
          {
            v47[0] = 0;
            v47[1] = v47;
            v47[2] = 0x3032000000;
            v47[3] = sub_10001DC34;
            v47[4] = sub_10001DC44;
            id v48 = 0;
            id v23 = [*(id *)(a1 + 40) database];
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472;
            void v29[2] = sub_100021DD8;
            v29[3] = &unk_10040C828;
            id v30 = *(id *)(a1 + 64);
            id v20 = v20;
            id v31 = v20;
            id v32 = *(id *)(a1 + 56);
            unsigned int v43 = &v52;
            unsigned int v44 = v47;
            id v33 = v7;
            __int16 v34 = @"A00000085802010100000001";
            id v35 = *(id *)(a1 + 48);
            id v36 = *(id *)(a1 + 72);
            id v37 = *(id *)(a1 + 80);
            id v38 = *(id *)(a1 + 88);
            id v39 = *(id *)(a1 + 96);
            id v40 = *(id *)(a1 + 104);
            uint64_t v28 = *(void *)(a1 + 128);
            id v41 = *(id *)(a1 + 112);
            uint64_t v24 = *(void *)(a1 + 144);
            *(void *)&long long v25 = v28;
            *((void *)&v25 + 1) = *(void *)(a1 + 136);
            long long v45 = v25;
            uint64_t v46 = v24;
            id v22 = v22;
            id v42 = v22;
            sub_10001A33C((uint64_t)v23, v29);

            (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
            _Block_object_dispose(v47, 8);
          }
        }
      }
    }
    _Block_object_dispose(&v52, 8);
  }
}

void sub_100021DA0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100021DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v5 instance];
  id v8 = sub_100039480(*(id *)(a1 + 48), v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 136) + 8);
  v82[0] = *(id *)(v9 + 40);
  id v10 = [v3 stageEndPointEntityWithIdentifier:v4 endPointCAEntity:v5 airInstanceEntity:v6 clientName:v8 error:v82];
  objc_storeStrong((id *)(v9 + 40), v82[0]);

  if (!*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
  {
    id v73 = *(void **)(a1 + 56);
    id v74 = v10;
    id v77 = [*(id *)(a1 + 64) hexStringAsData];
    uint64_t v71 = *(void **)(a1 + 72);
    id v72 = *(void **)(a1 + 32);
    unsigned int v70 = [*(id *)(a1 + 80) opt1];
    unsigned int v69 = [*(id *)(a1 + 80) opt2];
    unsigned __int8 v68 = [*(id *)(a1 + 80) optA];
    CFDataRef v66 = *(void **)(a1 + 96);
    id v67 = *(void **)(a1 + 88);
    uint64_t v76 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", [*(id *)(a1 + 104) UTF8String], [*(id *)(a1 + 104) length]);
    uint64_t v11 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", [*(id *)(a1 + 112) UTF8String], [*(id *)(a1 + 112) length]);
    int v12 = *(_DWORD *)(a1 + 152);
    if (v12)
    {
      id v13 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 152)];
    }
    else
    {
      id v13 = 0;
    }
    uint64_t v14 = *(unsigned int *)(a1 + 156);
    uint64_t v75 = v3;
    if (v14)
    {
      id v15 = +[NSNumber numberWithUnsignedInt:v14];
    }
    else
    {
      id v15 = 0;
    }
    id v16 = *(void **)(a1 + 120);
    uint64_t v17 = +[NSNumber numberWithInt:239];
    id v18 = +[NSNumber numberWithInt:239];
    uint64_t v19 = *(void *)(*(void *)(a1 + 136) + 8);
    id v81 = *(id *)(v19 + 40);
    sub_100046D4C(v73, 2, v77, v71, v72, v72, v70, v69, v68, v67, v66, v76, v11, 0, 0, v13, v15, v16, v17,
      v18,
      1,
      0x10u,
    uint64_t v20 = &v81);
    objc_storeStrong((id *)(v19 + 40), v81);
    uint64_t v21 = *(void *)(*(void *)(a1 + 144) + 8);
    id v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    if (v14) {
    id v3 = v75;
    }
    if (v12) {

    }
    if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)
      || !*(void *)(*(void *)(*(void *)(a1 + 144) + 8) + 40))
    {
      sub_100030B78(v75);
      id v10 = v74;
      goto LABEL_31;
    }
    id v23 = [*(id *)(a1 + 80) nfcExpressOnlyInLPM];
    uint64_t v24 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
    [v24 setNfcExpressOnlyInLPM:v23];

    id v25 = [*(id *)(a1 + 80) terminationNotPersisted];
    uint64_t v26 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
    [v26 setTerminationNotPersisted:v25];

    int v27 = *(_DWORD *)(a1 + 160);
    id v10 = v74;
    if (v27)
    {
      int v28 = *(_DWORD *)(a1 + 164);
      v80[0] = BYTE1(v28);
      v80[1] = v28;
      v80[2] = v27;
      uint64_t v29 = +[NSData dataWithBytes:v80 length:3];
      uint64_t v30 = *(unsigned __int16 *)(a1 + 160);
      id v31 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
      [v31 setLengthPrivateMailBox:v30];

      uint64_t v32 = *(unsigned __int16 *)(a1 + 164);
      id v33 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
      [v33 setOffsetPrivateMailBox:v32];
    }
    else
    {
      uint64_t v29 = 0;
    }
    int v34 = *(_DWORD *)(a1 + 168);
    if (v34)
    {
      int v35 = *(_DWORD *)(a1 + 172);
      v79[0] = BYTE1(v35);
      v79[1] = v35;
      v79[2] = v34;
      id v36 = +[NSData dataWithBytes:v79 length:3];
      uint64_t v37 = *(unsigned __int16 *)(a1 + 168);
      id v38 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
      [v38 setLengthConfidentialMailBox:v37];

      uint64_t v39 = *(unsigned __int16 *)(a1 + 172);
      id v40 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
      [v40 setOffsetConfidentialMailBox:v39];
    }
    else
    {
      id v36 = 0;
    }
    id v41 = *(void **)(a1 + 56);
    id v42 = [*(id *)(a1 + 64) hexStringAsData];
    unsigned int v43 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) publicKeyIdentifier];
    uint64_t v44 = sub_100049D34(v41, v42, v43, v29, v36, 0, 0, 0, 0, 0, 0, 0, 0);
    uint64_t v45 = *(void *)(*(void *)(a1 + 136) + 8);
    uint64_t v46 = *(void **)(v45 + 40);
    *(void *)(v45 + 40) = v44;

    if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
    {
      long long v47 = SESDefaultLogObject();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        id v48 = "Failed to set auth1 mailbox configuration on endpoint, cleanup endpoint from SE";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, v48, buf, 2u);
      }
    }
    else
    {
      id v49 = *(void **)(*(void *)(*(void *)(a1 + 144) + 8) + 40);
      id v50 = [*(id *)(a1 + 128) certificates];
      [v49 prependCertificateChain:v50];

      uint64_t v51 = [v75 stageEndPointEntityUpdates:v74 fromEndPoint:*(void *)(*(void *)(*(void *)(a1 + 144) + 8) + 40)];
      uint64_t v52 = *(void *)(*(void *)(a1 + 136) + 8);
      uint64_t v53 = *(void **)(v52 + 40);
      *(void *)(v52 + 40) = v51;

      if (!*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
      {
        uint64_t v58 = sub_100030AE4((uint64_t)v75);
        uint64_t v59 = *(void *)(*(void *)(a1 + 136) + 8);
        id v60 = *(void **)(v59 + 40);
        *(void *)(v59 + 40) = v58;

        if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
        {
          uint64_t v61 = SESDefaultLogObject();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "Failed to commit new endpoint in database, cleanup endpoint on SE", buf, 2u);
          }

          id v62 = *(void **)(a1 + 56);
          CFDataRef v63 = [*(id *)(a1 + 64) hexStringAsData];
          id v64 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) publicKeyIdentifier];
          id v65 = sub_100048B74(v62, v63, v64);
        }
        goto LABEL_30;
      }
      long long v47 = SESDefaultLogObject();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        id v48 = "Failed to update endpoint in database, cleanup endpoint on SE";
        goto LABEL_28;
      }
    }

    uint64_t v54 = *(void **)(a1 + 56);
    uint64_t v55 = [*(id *)(a1 + 64) hexStringAsData];
    uint64_t v56 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) publicKeyIdentifier];
    id v57 = sub_100048B74(v54, v55, v56);

    sub_100030B78(v75);
LABEL_30:

    goto LABEL_31;
  }
  sub_100030B78(v3);
LABEL_31:
}

void sub_1000227F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createLocalEndpointWithProxy:readerIdentifier:readerPublicKey:reply:]_block_invoke");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100022984;
  v9[3] = &unk_10040C8C8;
  id v20 = *(id *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = *(id *)(a1 + 96);
  id v19 = *(id *)(a1 + 104);
  id v8 = v3;
  [v4 endPointServiceAvailableWithProxy:v5 reason:v6 reply:v9];
}

void sub_100022984(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
  }
  else
  {
    v52[0] = 0;
    uint64_t v46 = 0;
    long long v47 = (id *)&v46;
    uint64_t v48 = 0x3032000000;
    id v49 = sub_10001DC34;
    id v50 = sub_10001DC44;
    sub_100015878(v7, 2, v52, *(void **)(a1 + 32));
    id v51 = (id)objc_claimAutoreleasedReturnValue();
    if (v47[5]) {
      goto LABEL_4;
    }
    if (!v52[0]) {
      goto LABEL_7;
    }
    id v10 = [*(id *)(a1 + 40) database];
    uint64_t v11 = sub_100019CF4((uint64_t)v10, v7, 1);
    id v12 = v47[5];
    void v47[5] = (id)v11;

    if (v47[5])
    {
LABEL_4:
      (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
    }
    else
    {
LABEL_7:
      id v13 = v47;
      id v45 = v47[5];
      id v14 = sub_10005D7F8((uint64_t)v8, @"A00000085801010100000001", &v45);
      objc_storeStrong(v13 + 5, v45);
      if (v47[5] || !v14)
      {
        uint64_t v24 = *(void *)(a1 + 112);
        SESDefaultLogObject();
        id v20 = (id)objc_claimAutoreleasedReturnValue();
        id v22 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v22);
      }
      else
      {
        id v16 = *(void **)(a1 + 40);
        uint64_t v17 = *(void *)(a1 + 48);
        id v18 = sub_100039480(*(id *)(a1 + 56), v15);
        id v19 = v47;
        id v44 = v47[5];
        id v20 = [v16 _ensureCAExistsAndValid:v17 clientName:v18 secureElement:v7 database:v8 forEndPointType:3 error:&v44];
        objc_storeStrong(v19 + 5, v44);

        uint64_t v21 = v47 + 5;
        if (!v20 || v47[5])
        {
          uint64_t v25 = *(void *)(a1 + 112);
          id v22 = SESEnsureError();
          (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0, v22);
        }
        else
        {
          id v43 = 0;
          id v22 = sub_10004663C((uint64_t)v8, v20, &v43);
          objc_storeStrong(v21, v43);
          if (!v22 || v47[5])
          {
            (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
          }
          else
          {
            v41[0] = 0;
            v41[1] = v41;
            v41[2] = 0x3032000000;
            v41[3] = sub_10001DC34;
            v41[4] = sub_10001DC44;
            id v42 = 0;
            id v23 = [*(id *)(a1 + 40) database];
            v26[0] = _NSConcreteStackBlock;
            v26[1] = 3221225472;
            v26[2] = sub_100022E70;
            v26[3] = &unk_10040C8A0;
            id v27 = *(id *)(a1 + 64);
            id v20 = v20;
            id v28 = v20;
            id v29 = *(id *)(a1 + 56);
            id v38 = &v46;
            uint64_t v39 = v41;
            uint64_t v40 = 3;
            id v30 = v7;
            id v31 = @"A00000085801010100000001";
            id v32 = *(id *)(a1 + 48);
            id v33 = *(id *)(a1 + 72);
            id v34 = *(id *)(a1 + 80);
            id v35 = *(id *)(a1 + 88);
            id v36 = *(id *)(a1 + 96);
            id v37 = *(id *)(a1 + 104);
            sub_10001A33C((uint64_t)v23, v26);

            (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
            _Block_object_dispose(v41, 8);
          }
        }
      }
    }
    _Block_object_dispose(&v46, 8);
  }
}

void sub_100022E38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100022E70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v5 instance];
  id v8 = sub_100039480(*(id *)(a1 + 48), v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 120) + 8);
  v50[0] = *(id *)(v9 + 40);
  id v10 = [v3 stageEndPointEntityWithIdentifier:v4 endPointCAEntity:v5 airInstanceEntity:v6 clientName:v8 error:v50];
  objc_storeStrong((id *)(v9 + 40), v50[0]);

  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40))
  {
LABEL_2:
    sub_100030B78((id *)v3);
    goto LABEL_5;
  }
  uint64_t v46 = *(void *)(a1 + 136);
  long long v47 = v10;
  id v45 = *(void **)(a1 + 56);
  uint64_t v11 = [*(id *)(a1 + 64) hexStringAsData];
  id v12 = *(void **)(a1 + 32);
  id v44 = *(void **)(a1 + 72);
  unsigned int v43 = [*(id *)(a1 + 80) opt1];
  unsigned int v42 = [*(id *)(a1 + 80) opt2];
  unsigned __int8 v13 = [*(id *)(a1 + 80) optA];
  id v14 = *(void **)(a1 + 88);
  id v15 = *(void **)(a1 + 96);
  id v16 = [NSData dataWithBytes:[*(id *)(a1 + 104) UTF8String] length:[*(id *)(a1 + 104) length]];
  uint64_t v17 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", [*(id *)(a1 + 112) UTF8String], [*(id *)(a1 + 112) length]);
  uint64_t v18 = *(void *)(*(void *)(a1 + 120) + 8);
  id v49 = *(id *)(v18 + 40);
  sub_100046D4C(v45, v46, v11, v44, v12, v12, v43, v42, v13, v14, v15, v16, v17, 0, 0, 0, 0, 0, 0,
    0,
    0,
    0x10u,
  uint64_t v19 = &v49);
  objc_storeStrong((id *)(v18 + 40), v49);
  uint64_t v20 = *(void *)(*(void *)(a1 + 128) + 8);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;

  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40)
    || !*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40))
  {
    sub_100030B78((id *)v3);
    id v10 = v47;
    goto LABEL_5;
  }
  id v22 = [*(id *)(a1 + 80) nfcExpressOnlyInLPM];
  id v23 = [*(id *)(*(void *)(*(void *)(a1 + 128) + 8) + 40) configuration];
  [v23 setNfcExpressOnlyInLPM:v22];

  id v24 = [*(id *)(a1 + 80) terminationNotPersisted];
  uint64_t v25 = [*(id *)(*(void *)(*(void *)(a1 + 128) + 8) + 40) configuration];
  [v25 setTerminationNotPersisted:v24];

  id v10 = v47;
  uint64_t v26 = [v3 stageEndPointEntityUpdates:v47 fromEndPoint:*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40)];
  uint64_t v27 = *(void *)(*(void *)(a1 + 120) + 8);
  id v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = v26;

  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40))
  {
    id v29 = SESDefaultLogObject();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Failed to update endpoint in database, cleanup endpoint on SE", buf, 2u);
    }

    id v30 = *(void **)(a1 + 56);
    id v31 = [*(id *)(a1 + 64) hexStringAsData];
    id v32 = [*(id *)(*(void *)(*(void *)(a1 + 128) + 8) + 40) publicKeyIdentifier];
    id v33 = sub_100048B74(v30, v31, v32);

    goto LABEL_2;
  }
  uint64_t v34 = sub_100030AE4((uint64_t)v3);
  uint64_t v35 = *(void *)(*(void *)(a1 + 120) + 8);
  id v36 = *(void **)(v35 + 40);
  *(void *)(v35 + 40) = v34;

  if (*(void *)(*(void *)(*(void *)(a1 + 120) + 8) + 40))
  {
    id v37 = SESDefaultLogObject();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Failed to commit endpoint in database, cleanup endpoint on SE", buf, 2u);
    }

    id v38 = *(void **)(a1 + 56);
    uint64_t v39 = [*(id *)(a1 + 64) hexStringAsData];
    uint64_t v40 = [*(id *)(*(void *)(*(void *)(a1 + 128) + 8) + 40) publicKeyIdentifier];
    id v41 = sub_100048B74(v38, v39, v40);
  }
LABEL_5:
}

void sub_100023638(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createLyonEndpointWithProxy:readerGroupIdentifier:readerPublicKey:homeUUID:privateMailboxSize:reply:]_block_invoke");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000237EC;
  v9[3] = &unk_10040C960;
  id v22 = *(id *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = *(id *)(a1 + 96);
  id v19 = *(id *)(a1 + 104);
  id v20 = *(id *)(a1 + 112);
  id v21 = *(id *)(a1 + 120);
  id v8 = v3;
  [v4 endPointServiceAvailableWithProxy:v5 reason:v6 reply:v9];
}

void sub_1000237EC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    unsigned int v10 = [*(id *)(a1 + 32) isSupported];
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sunsprite is to be SLAM'd %d", buf, 8u);
    }

    char v69 = 0;
    *(void *)buf = 0;
    id v73 = buf;
    uint64_t v74 = 0x3032000000;
    uint64_t v75 = sub_10001DC34;
    uint64_t v76 = sub_10001DC44;
    sub_100015878(v7, v10 | 0x10, &v69, *(void **)(a1 + 32));
    id v77 = (id)objc_claimAutoreleasedReturnValue();
    if (!*((void *)v73 + 5))
    {
      if (!v69) {
        goto LABEL_11;
      }
      id v12 = [*(id *)(a1 + 40) database];
      uint64_t v13 = sub_100019CF4((uint64_t)v12, v7, 1);
      id v14 = (void *)*((void *)v73 + 5);
      *((void *)v73 + 5) = v13;

      if (!*((void *)v73 + 5))
      {
LABEL_11:
        if (!v10) {
          goto LABEL_14;
        }
        uint64_t v15 = sub_100017D1C(v7, 1, *(void **)(a1 + 32));
        id v16 = (void *)*((void *)v73 + 5);
        *((void *)v73 + 5) = v15;

        if (!*((void *)v73 + 5))
        {
          id v17 = +[DSK queue];
          dispatch_async(v17, &stru_10040C910);

LABEL_14:
          id v18 = v73;
          id v68 = (id)*((void *)v73 + 5);
          id v19 = sub_10005D7F8((uint64_t)v8, @"A000000909ACCE5501", &v68);
          objc_storeStrong((id *)v18 + 5, v68);
          if (*((void *)v73 + 5) || !v19)
          {
            uint64_t v39 = *(void *)(a1 + 128);
            SESDefaultLogObject();
            id v25 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v27 = SESCreateAndLogError();
            (*(void (**)(uint64_t, void, void *))(v39 + 16))(v39, 0, v27);
          }
          else
          {
            id v21 = *(void **)(a1 + 40);
            uint64_t v22 = *(void *)(a1 + 48);
            id v23 = sub_100039480(*(id *)(a1 + 56), v20);
            id v24 = v73;
            id v67 = (id)*((void *)v73 + 5);
            id v25 = [v21 _ensureCAExistsAndValid:v22 clientName:v23 secureElement:v7 database:v8 forEndPointType:4 error:&v67];
            objc_storeStrong((id *)v24 + 5, v67);

            uint64_t v26 = (id *)(v73 + 40);
            if (!v25 || *((void *)v73 + 5))
            {
              uint64_t v40 = *(void *)(a1 + 128);
              uint64_t v27 = SESEnsureError();
              (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0, v27);
            }
            else
            {
              id obj = 0;
              uint64_t v27 = sub_10004663C((uint64_t)v8, v25, &obj);
              objc_storeStrong(v26, obj);
              if (!v27 || *((void *)v73 + 5))
              {
                (*(void (**)(void))(*(void *)(a1 + 128) + 16))();
              }
              else
              {
                uint64_t v60 = 0;
                uint64_t v61 = &v60;
                uint64_t v62 = 0x3032000000;
                CFDataRef v63 = sub_10001DC34;
                id v64 = sub_10001DC44;
                id v65 = 0;
                id v28 = [*(id *)(a1 + 40) database];
                v43[0] = _NSConcreteStackBlock;
                v43[1] = 3221225472;
                v43[2] = sub_100024028;
                v43[3] = &unk_10040C938;
                id v44 = *(id *)(a1 + 64);
                id v25 = v25;
                id v45 = v25;
                id v46 = *(id *)(a1 + 56);
                id v57 = buf;
                uint64_t v58 = &v60;
                id v29 = v7;
                uint64_t v59 = 4;
                id v47 = v29;
                uint64_t v48 = @"A000000909ACCE5501";
                id v49 = *(id *)(a1 + 48);
                id v50 = *(id *)(a1 + 72);
                id v51 = *(id *)(a1 + 80);
                id v52 = *(id *)(a1 + 88);
                id v53 = *(id *)(a1 + 96);
                id v54 = *(id *)(a1 + 104);
                id v55 = *(id *)(a1 + 112);
                id v56 = *(id *)(a1 + 120);
                sub_10001A33C((uint64_t)v28, v43);

                id v30 = v61;
                if (!*((void *)v73 + 5)) {
                  goto LABEL_42;
                }
                if (v61[5])
                {
                  id v31 = SESDefaultLogObject();
                  if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                  {
                    *(_WORD *)unsigned int v70 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Failure after creating EP on SE, cleaning it up", v70, 2u);
                  }

                  id v41 = v29;
                  id v32 = [v19 identifier];
                  id v33 = [v32 hexStringAsData];
                  uint64_t v34 = [(id)v61[5] publicKeyIdentifier];
                  unsigned int v42 = sub_100048B74(v41, v33, v34);

                  if (v42)
                  {
                    uint64_t v35 = SESDefaultLogObject();
                    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)unsigned int v70 = 138412290;
                      uint64_t v71 = v42;
                      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Failed to clean up EP   : %@", v70, 0xCu);
                    }
                  }
                  id v36 = [(id)v61[5] deleteEndPointLongTermPrivacyKey];

                  if (v36)
                  {
                    id v37 = SESDefaultLogObject();
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)unsigned int v70 = 138412290;
                      uint64_t v71 = v36;
                      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to delete long term privacy key %@", v70, 0xCu);
                    }
                  }
                  id v38 = (void *)v61[5];
                  v61[5] = 0;

                  id v30 = v61;
                  if (!*((void *)v73 + 5))
                  {
LABEL_42:
                    if (v30[5]) {
                      +[EndpointStore insertWithEndpoint:](_TtC10seserviced13EndpointStore, "insertWithEndpoint:");
                    }
                  }
                }
                (*(void (**)(void))(*(void *)(a1 + 128) + 16))();

                _Block_object_dispose(&v60, 8);
              }
            }
          }

          goto LABEL_7;
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 128) + 16))();
LABEL_7:
    _Block_object_dispose(buf, 8);

    goto LABEL_8;
  }
  (*(void (**)(void))(*(void *)(a1 + 128) + 16))();
LABEL_8:
}

void sub_100023F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 176), 8);
  _Unwind_Resume(a1);
}

void sub_100023FDC(id a1)
{
  id v1 = +[DSK shared];
  [v1 startWithModule:1];
}

void sub_100024028(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v5 instance];
  id v8 = sub_100039480(*(id *)(a1 + 48), v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 136) + 8);
  v59[0] = *(id *)(v9 + 40);
  unsigned int v10 = [v3 stageEndPointEntityWithIdentifier:v4 endPointCAEntity:v5 airInstanceEntity:v6 clientName:v8 error:v59];
  objc_storeStrong((id *)(v9 + 40), v59[0]);

  if (!*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
  {
    id v53 = v10;
    uint64_t v56 = *(void *)(a1 + 152);
    id v55 = *(void **)(a1 + 56);
    uint64_t v11 = [*(id *)(a1 + 64) hexStringAsData];
    id v12 = *(void **)(a1 + 32);
    id v54 = *(void **)(a1 + 72);
    unsigned __int8 v13 = [*(id *)(a1 + 80) optA];
    id v14 = *(void **)(a1 + 88);
    uint64_t v15 = *(void **)(a1 + 96);
    id v16 = [NSData dataWithBytes:[*(id *)(a1 + 104) UTF8String] length:[*(id *)(a1 + 104) length]];
    id v17 = [NSData dataWithBytes:[*(id *)(a1 + 112) UTF8String] length:[*(id *)(a1 + 112) length]];
    id v18 = *(void **)(a1 + 120);
    uint64_t v19 = *(void *)(*(void *)(a1 + 136) + 8);
    id v58 = *(id *)(v19 + 40);
    sub_100046D4C(v55, v56, v11, v54, v12, v12, 0, 0, v13, v14, v15, v16, v17, 0, 0, 0, v18, &off_10042DD50, 0,
      0,
      0,
      0x10u,
    uint64_t v20 = &v58);
    objc_storeStrong((id *)(v19 + 40), v58);
    uint64_t v21 = *(void *)(*(void *)(a1 + 144) + 8);
    uint64_t v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)
      || !*(void *)(*(void *)(*(void *)(a1 + 144) + 8) + 40))
    {
      sub_100030B78((id *)v3);
      unsigned int v10 = v53;
      goto LABEL_5;
    }
    id v23 = [*(id *)(a1 + 80) nfcExpressOnlyInLPM];
    id v24 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
    [v24 setNfcExpressOnlyInLPM:v23];

    id v25 = [*(id *)(a1 + 80) terminationNotPersisted];
    uint64_t v26 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) configuration];
    [v26 setTerminationNotPersisted:v25];

    uint64_t v27 = *(void **)(a1 + 128);
    if (v27)
    {
      id v28 = [v27 UUIDString];
      [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) setHomeUUIDString:v28];
    }
    unsigned int v10 = v53;
    uint64_t v29 = [v3 stageEndPointEntityUpdates:v53 fromEndPoint:*(void *)(*(void *)(*(void *)(a1 + 144) + 8) + 40)];
    uint64_t v30 = *(void *)(*(void *)(a1 + 136) + 8);
    uint64_t v31 = *(void **)(v30 + 40);
    *(void *)(v30 + 40) = v29;

    if (*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
    {
      id v32 = SESDefaultLogObject();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Failed to update endpoint in database, cleanup endpoint on SE", buf, 2u);
      }

      id v33 = *(void **)(a1 + 56);
      uint64_t v34 = [*(id *)(a1 + 64) hexStringAsData];
      uint64_t v35 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) publicKeyIdentifier];
      id v36 = sub_100048B74(v33, v34, v35);
    }
    else
    {
      if (SESInternalVariant())
      {
        id v37 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
        id v38 = [v37 objectForKey:@"debug.ursk.ttl.override"];
        uint64_t v39 = v38;
        if (v38) {
          unsigned __int8 v40 = [v38 unsignedIntValue];
        }
        else {
          unsigned __int8 v40 = 12;
        }
      }
      else
      {
        unsigned __int8 v40 = 12;
      }
      id v41 = *(void **)(a1 + 56);
      unsigned int v42 = [*(id *)(a1 + 64) hexStringAsData];
      unsigned int v43 = [*(id *)(*(void *)(*(void *)(a1 + 144) + 8) + 40) publicKeyIdentifier];
      id v44 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 80) enabledOnContactless]);
      id v45 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 80) enabledOnWire]);
      id v46 = +[NSNumber numberWithUnsignedChar:v40];
      uint64_t v47 = sub_100049D34(v41, v42, v43, 0, 0, v44, 0, v45, 0, 0, 0, v46, &off_10042DD68);
      uint64_t v48 = *(void *)(*(void *)(a1 + 136) + 8);
      id v49 = *(void **)(v48 + 40);
      *(void *)(v48 + 40) = v47;

      if (!*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
      {
        uint64_t v50 = sub_100030AE4((uint64_t)v3);
        uint64_t v51 = *(void *)(*(void *)(a1 + 136) + 8);
        id v52 = *(void **)(v51 + 40);
        *(void *)(v51 + 40) = v50;

        goto LABEL_5;
      }
    }
  }
  sub_100030B78((id *)v3);
LABEL_5:
}

void sub_100024BB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer(SEEndPointXPC) createLyonHydraEndpointWithProxy:serverParams:reply:]_block_invoke");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_100024D64;
  v9[3] = &unk_10040C9F8;
  id v21 = *(id *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 72);
  id v16 = *(id *)(a1 + 80);
  id v17 = *(id *)(a1 + 88);
  id v18 = *(id *)(a1 + 96);
  id v19 = *(id *)(a1 + 104);
  int v22 = *(_DWORD *)(a1 + 128);
  id v20 = *(id *)(a1 + 112);
  uint64_t v23 = *(void *)(a1 + 132);
  id v8 = v3;
  [v4 endPointServiceAvailableWithProxy:v5 reason:v6 reply:v9];
}

void sub_100024D64(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (!v9)
  {
    unsigned int v10 = [*(id *)(a1 + 32) isSupported];
    uint64_t v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sunsprite is to be SLAM'd %d", buf, 8u);
    }

    char v53 = 0;
    *(void *)buf = 0;
    id v55 = buf;
    uint64_t v56 = 0x3032000000;
    id v57 = sub_10001DC34;
    id v58 = sub_10001DC44;
    sub_100015878(v7, v10 | 0x10, &v53, *(void **)(a1 + 32));
    id v59 = (id)objc_claimAutoreleasedReturnValue();
    id v12 = v55;
    if (!*((void *)v55 + 5))
    {
      if (!v53) {
        goto LABEL_11;
      }
      id v13 = [*(id *)(a1 + 40) database];
      uint64_t v14 = sub_100019CF4((uint64_t)v13, v7, 1);
      id v15 = (void *)*((void *)v55 + 5);
      *((void *)v55 + 5) = v14;

      id v12 = v55;
      if (!*((void *)v55 + 5))
      {
LABEL_11:
        if (!v10) {
          goto LABEL_14;
        }
        uint64_t v16 = sub_100017D1C(v7, 1, *(void **)(a1 + 32));
        id v17 = (void *)*((void *)v55 + 5);
        *((void *)v55 + 5) = v16;

        if (!*((void *)v55 + 5))
        {
          id v18 = +[DSK queue];
          dispatch_async(v18, &stru_10040C9A8);

          id v12 = v55;
LABEL_14:
          id v52 = (id)*((void *)v12 + 5);
          id v19 = sub_10005D7F8((uint64_t)v8, @"A000000909ACCE5501", &v52);
          objc_storeStrong((id *)v12 + 5, v52);
          if (*((void *)v55 + 5) || !v19)
          {
            uint64_t v29 = *(void *)(a1 + 120);
            SESDefaultLogObject();
            id v25 = (id)objc_claimAutoreleasedReturnValue();
            SESCreateAndLogError();
            id v27 = (id)objc_claimAutoreleasedReturnValue();
            (*(void (**)(uint64_t, void, id))(v29 + 16))(v29, 0, v27);
          }
          else
          {
            id v21 = *(void **)(a1 + 40);
            uint64_t v22 = *(void *)(a1 + 48);
            uint64_t v23 = sub_100039480(*(id *)(a1 + 56), v20);
            id v24 = v55;
            id v51 = (id)*((void *)v55 + 5);
            id v25 = [v21 _ensureCAExistsAndValid:v22 clientName:v23 secureElement:v7 database:v8 forEndPointType:5 error:&v51];
            objc_storeStrong((id *)v24 + 5, v51);

            uint64_t v26 = (id *)(v55 + 40);
            if (!v25 || *((void *)v55 + 5))
            {
              uint64_t v30 = *(void *)(a1 + 120);
              SESEnsureError();
              id v27 = (id)objc_claimAutoreleasedReturnValue();
              (*(void (**)(uint64_t, void, id))(v30 + 16))(v30, 0, v27);
            }
            else
            {
              id v50 = 0;
              sub_10004663C((uint64_t)v8, v25, &v50);
              id v27 = (id)objc_claimAutoreleasedReturnValue();
              objc_storeStrong(v26, v50);
              if (!v27 || *((void *)v55 + 5))
              {
                (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
              }
              else
              {
                v48[0] = 0;
                v48[1] = v48;
                v48[2] = 0x3032000000;
                v48[3] = sub_10001DC34;
                v48[4] = sub_10001DC44;
                id v49 = 0;
                id v28 = [*(id *)(a1 + 40) database];
                v31[0] = _NSConcreteStackBlock;
                v31[1] = 3221225472;
                v31[2] = sub_1000253C4;
                v31[3] = &unk_10040C9D0;
                id v32 = *(id *)(a1 + 64);
                id v25 = v25;
                id v33 = v25;
                id v34 = *(id *)(a1 + 56);
                id v44 = buf;
                id v45 = v48;
                id v35 = v7;
                id v36 = *(id *)(a1 + 48);
                id v37 = *(id *)(a1 + 72);
                id v38 = *(id *)(a1 + 80);
                id v39 = *(id *)(a1 + 88);
                id v40 = *(id *)(a1 + 96);
                id v41 = *(id *)(a1 + 104);
                int v46 = *(_DWORD *)(a1 + 128);
                id v42 = *(id *)(a1 + 112);
                uint64_t v47 = *(void *)(a1 + 132);
                id v27 = v27;
                id v43 = v27;
                sub_10001A33C((uint64_t)v28, v31);

                (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
                _Block_object_dispose(v48, 8);
              }
            }
          }

          goto LABEL_7;
        }
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
LABEL_7:
    _Block_object_dispose(buf, 8);

    goto LABEL_8;
  }
  (*(void (**)(void))(*(void *)(a1 + 120) + 16))();
LABEL_8:
}

void sub_100025338(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_100025378(id a1)
{
  id v1 = +[DSK shared];
  [v1 startWithModule:1];
}

void sub_1000253C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = [v5 instance];
  id v8 = sub_100039480(*(id *)(a1 + 48), v7);
  uint64_t v9 = *(void *)(*(void *)(a1 + 128) + 8);
  v70[0] = *(id *)(v9 + 40);
  unsigned int v10 = [v3 stageEndPointEntityWithIdentifier:v4 endPointCAEntity:v5 airInstanceEntity:v6 clientName:v8 error:v70];
  objc_storeStrong((id *)(v9 + 40), v70[0]);

  if (!*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40))
  {
    uint64_t v62 = v10;
    id v65 = *(void **)(a1 + 56);
    CFDataRef v66 = v3;
    uint64_t v11 = [@"A000000909ACCE5501" hexStringAsData];
    id v12 = *(void **)(a1 + 32);
    id v64 = *(void **)(a1 + 64);
    unsigned __int8 v63 = [*(id *)(a1 + 72) optA];
    id v13 = *(void **)(a1 + 80);
    uint64_t v14 = *(void **)(a1 + 88);
    id v15 = [NSData dataWithBytes:[*(id *)(a1 + 96) UTF8String] length:[*(id *)(a1 + 96) length]];
    uint64_t v16 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", [*(id *)(a1 + 104) UTF8String], [*(id *)(a1 + 104) length]);
    int v17 = *(_DWORD *)(a1 + 144);
    if (v17)
    {
      id v18 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 144)];
    }
    else
    {
      id v18 = 0;
    }
    id v19 = *(void **)(a1 + 112);
    uint64_t v20 = *(void *)(*(void *)(a1 + 128) + 8);
    id v69 = *(id *)(v20 + 40);
    sub_100046D4C(v65, 5, v11, v64, v12, v12, 0, 0, v63, v13, v14, v15, v16, 0, 0, 0, v18, v19, 0,
      0,
      0,
      0x10u,
    uint64_t v21 = &v69);
    objc_storeStrong((id *)(v20 + 40), v69);
    uint64_t v22 = *(void *)(*(void *)(a1 + 136) + 8);
    uint64_t v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;

    if (v17) {
    id v3 = v66;
    }
    if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40)
      || !*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40))
    {
      sub_100030B78(v66);
      unsigned int v10 = v62;
      goto LABEL_23;
    }
    id v24 = [*(id *)(a1 + 72) nfcExpressOnlyInLPM];
    id v25 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) configuration];
    [v25 setNfcExpressOnlyInLPM:v24];

    id v26 = [*(id *)(a1 + 72) terminationNotPersisted];
    id v27 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) configuration];
    [v27 setTerminationNotPersisted:v26];

    int v28 = *(_DWORD *)(a1 + 148);
    if (v28)
    {
      int v29 = *(_DWORD *)(a1 + 152);
      v68[0] = BYTE1(v29);
      v68[1] = v29;
      void v68[2] = v28;
      uint64_t v30 = +[NSData dataWithBytes:v68 length:3];
      uint64_t v31 = *(unsigned __int16 *)(a1 + 148);
      id v32 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) configuration];
      [v32 setLengthPrivateMailBox:v31];

      uint64_t v33 = *(unsigned __int16 *)(a1 + 152);
      id v34 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) configuration];
      [v34 setOffsetPrivateMailBox:v33];
    }
    else
    {
      uint64_t v30 = 0;
    }
    unsigned int v10 = v62;
    id v35 = *(void **)(a1 + 56);
    id v36 = [@"A000000909ACCE5501" hexStringAsData];
    id v37 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) publicKeyIdentifier];
    id v38 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 72) enabledOnContactless]);
    id v39 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 72) enabledOnWire]);
    uint64_t v40 = sub_100049D34(v35, v36, v37, v30, 0, v38, 0, v39, 0, 0, 0, 0, 0);
    uint64_t v41 = *(void *)(*(void *)(a1 + 128) + 8);
    id v42 = *(void **)(v41 + 40);
    *(void *)(v41 + 40) = v40;

    if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40))
    {
      id v43 = SESDefaultLogObject();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        id v44 = "Failed to set auth1 mailbox configuration on endpoint, cleanup endpoint from SE";
LABEL_20:
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, v44, buf, 2u);
      }
    }
    else
    {
      id v45 = *(void **)(*(void *)(*(void *)(a1 + 136) + 8) + 40);
      int v46 = [*(id *)(a1 + 120) certificates];
      [v45 prependCertificateChain:v46];

      uint64_t v47 = [v66 stageEndPointEntityUpdates:v62 fromEndPoint:*(void *)(*(void *)(*(void *)(a1 + 136) + 8) + 40)];
      uint64_t v48 = *(void *)(*(void *)(a1 + 128) + 8);
      id v49 = *(void **)(v48 + 40);
      *(void *)(v48 + 40) = v47;

      if (!*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40))
      {
        uint64_t v54 = sub_100030AE4((uint64_t)v66);
        uint64_t v55 = *(void *)(*(void *)(a1 + 128) + 8);
        uint64_t v56 = *(void **)(v55 + 40);
        *(void *)(v55 + 40) = v54;

        if (*(void *)(*(void *)(*(void *)(a1 + 128) + 8) + 40))
        {
          id v57 = SESDefaultLogObject();
          if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "Failed to commit new endpoint in database, cleanup endpoint on SE", buf, 2u);
          }

          id v58 = *(void **)(a1 + 56);
          id v59 = [@"A000000909ACCE5501" hexStringAsData];
          uint64_t v60 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) publicKeyIdentifier];
          id v61 = sub_100048B74(v58, v59, v60);
        }
        goto LABEL_22;
      }
      id v43 = SESDefaultLogObject();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        id v44 = "Failed to update endpoint in database, cleanup endpoint on SE";
        goto LABEL_20;
      }
    }

    id v50 = *(void **)(a1 + 56);
    id v51 = [@"A000000909ACCE5501" hexStringAsData];
    id v52 = [*(id *)(*(void *)(*(void *)(a1 + 136) + 8) + 40) publicKeyIdentifier];
    id v53 = sub_100048B74(v50, v51, v52);

    sub_100030B78(v66);
LABEL_22:

    goto LABEL_23;
  }
  sub_100030B78(v3);
LABEL_23:
}

uint64_t sub_100025C0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100040964(*(void *)(a1 + 32), v3, 0);
  uint64_t v5 = [v4 revocationAttestation];
  if (v5)
  {
    uint64_t v6 = 0;
  }
  else
  {
    id v7 = [v3 instance];
    id v8 = [v7 identifier];
    uint64_t v9 = [*(id *)(a1 + 40) identifier];
    if ([v8 isEqualToString:v9])
    {
      unsigned int v10 = [v4 identifier];
      if ([v10 isEqualToString:*(void *)(a1 + 48)])
      {
        uint64_t v6 = 1;
      }
      else
      {
        uint64_t v11 = [v4 readerIdentifier];
        uint64_t v6 = (uint64_t)[v11 isEqualToData:*(void *)(a1 + 56)];
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  return v6;
}

void sub_100026284(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v22 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (v14) {
    goto LABEL_2;
  }
  if (v22 && v12 && v13)
  {
    uint64_t v16 = [v12 instance];
    int v17 = [v16 identifier];
    id v18 = [v17 hexStringAsData];
    id v19 = [v13 publicKeyIdentifier];
    id v15 = sub_100049D34(v22, v18, v19, *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64), *(void **)(a1 + 72), *(void **)(a1 + 80), *(void **)(a1 + 88), 0, 0);

    if (v15) {
      goto LABEL_3;
    }
    if (!*(void *)(a1 + 32) && *(_OWORD *)(a1 + 40) == 0 && !*(void *)(a1 + 64))
    {
      id v15 = 0;
      if (!*(void *)(a1 + 88)) {
        goto LABEL_3;
      }
    }
    [v13 configurePrivateData:confidentialData:contactlessPersistentVisibility:wiredPersistentVisibility:nfcExpressOnlyInLPM:];
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    if (!v14)
    {
      sub_100040D9C(v11, v12, v13);
      id v14 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_2:
    id v15 = v14;
LABEL_3:
    (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
    goto LABEL_4;
  }
  uint64_t v20 = *(void *)(a1 + 96);
  id v15 = SESDefaultLogObject();
  uint64_t v21 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v21);

LABEL_4:
}

void sub_100026EA4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = v8;
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v25 = 0;
    unsigned int v10 = sub_10005D7F8(a3, @"A000000909ACCE5501", &v25);
    id v11 = v25;
    if (v11) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v10 == 0;
    }
    if (v12)
    {
      uint64_t v9 = v11;
      uint64_t v13 = *(void *)(a1 + 40);
      id v14 = SESDefaultLogObject();
      id v15 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);
    }
    else
    {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 48) | (2 * *(unsigned __int8 *)(a1 + 49)) | 4u;
      int v17 = SESDefaultLogObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        int v20 = *(unsigned __int8 *)(a1 + 48);
        int v21 = *(unsigned __int8 *)(a1 + 49);
        *(_DWORD *)buf = 138413058;
        uint64_t v27 = v19;
        __int16 v28 = 1024;
        int v29 = v16;
        __int16 v30 = 1024;
        int v31 = v20;
        __int16 v32 = 1024;
        int v33 = v21;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Configuring identifier %@ with bitmap %d, accessDocumentPresent %d, revocationDocumentPresent %d ", buf, 0x1Eu);
      }

      id v22 = [@"A000000909ACCE5501" hexStringAsData];
      uint64_t v23 = [*(id *)(a1 + 32) hexStringAsData];
      id v24 = +[NSNumber numberWithUnsignedShort:v16];
      uint64_t v9 = sub_100049D34(v7, v22, v23, 0, 0, 0, 0, 0, 0, 0, 0, 0, v24);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_1000272EC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  uint64_t v16 = v15;
  if (!v11 || v15)
  {
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0, v23);
  }
  else
  {
    int v17 = [v14 revocationAttestation];

    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v19 = SESDefaultLogObject();
      int v20 = [v14 publicKeyIdentifier];
      id v43 = [v20 asHexString];
      int v21 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v21);
    }
    else
    {
      uint64_t v48 = v12;
      id v24 = [*(id *)(a1 + 32) getEncryptedCarOEMProprietaryData:v14 withEndpointEntity:v13 withSecureElement:v11];
      [v14 setCarOEMProprietaryData:v24];

      uint64_t v47 = [v14 readerInfo];
      id v25 = [v14 bleAddress];
      uint64_t v26 = 3;
      if (!v25) {
        uint64_t v26 = 1;
      }
      uint64_t v46 = v26;

      uint64_t v27 = [v13 instance];
      __int16 v28 = [v27 identifier];
      int v29 = [v28 hexStringAsData];
      __int16 v30 = [v14 publicKeyIdentifier];
      int v31 = *(void **)(a1 + 40);
      __int16 v32 = *(void **)(a1 + 48);
      id v49 = 0;
      uint64_t v33 = sub_10004C654(v11, v29, v30, v31, v32, &v49);
      id v34 = v49;

      id v35 = (void *)v33;
      if (v34 || !v33)
      {
        uint64_t v40 = *(void *)(a1 + 56);
        id v45 = SESDefaultLogObject();
        [v34 code];
        uint64_t v41 = [v14 publicKeyIdentifier];
        id v44 = [v41 asHexString];
        id v42 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0, v42);

        id v37 = v47;
        sub_10004F8C4((uint64_t)SESDAnalyticsLogger, 1, v47, v46, 3);
        id v12 = v48;
      }
      else
      {
        [v14 setRevocationAttestation:v33];
        id v12 = v48;
        sub_100040D9C(v48, v13, v14);
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        if (v34)
        {
          id v36 = SESDefaultLogObject();
          uint64_t v38 = v46;
          id v37 = v47;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v51 = v34;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "EndPoint revoked but could not update database : %@", buf, 0xCu);
          }

          uint64_t v39 = 4;
        }
        else
        {
          uint64_t v39 = 0;
          uint64_t v38 = v46;
          id v37 = v47;
        }
        +[EndpointStore removeWithEndpoint:v14];
        sub_10004F8C4((uint64_t)SESDAnalyticsLogger, 1, v37, v38, v39);
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
    }
  }
}

void sub_100027918(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10 = a2;
  id v11 = a5;
  id v12 = a6;
  id v13 = v12;
  if (!v10 || v12)
  {
    uint64_t v22 = a1[7];
    int v20 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0, v20);
  }
  else
  {
    id v14 = [a4 instance];
    id v15 = [v14 identifier];
    uint64_t v16 = [v15 hexStringAsData];
    int v17 = [v11 publicKeyIdentifier];
    uint64_t v18 = (void *)a1[4];
    uint64_t v19 = (void *)a1[5];
    id v25 = 0;
    int v20 = sub_10004B7A0(v10, v16, v17, v18, v19, &v25);
    id v13 = v25;

    uint64_t v21 = a1[7];
    if (v13 || !v20)
    {
      uint64_t v23 = SESDefaultLogObject();
      [v13 code];
      id v24 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v24);
    }
    else
    {
      (*(void (**)(void, void *, void))(v21 + 16))(a1[7], v20, 0);
    }
  }
}

void sub_100027CA8(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10 = a2;
  id v11 = a5;
  id v12 = a6;
  id v13 = v12;
  if (!v10 || v12)
  {
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v19 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v19);
  }
  else
  {
    id v14 = [a4 instance];
    id v15 = [v14 identifier];
    uint64_t v16 = [v15 hexStringAsData];
    int v17 = [v11 publicKeyIdentifier];
    uint64_t v18 = *(void **)(a1 + 32);
    id v24 = 0;
    uint64_t v19 = sub_10004C0E8(v10, v16, v17, v18, &v24);
    id v13 = v24;

    uint64_t v20 = *(void *)(a1 + 48);
    if (v13 || !v19)
    {
      uint64_t v22 = SESDefaultLogObject();
      [v13 code];
      uint64_t v23 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v23);
    }
    else
    {
      (*(void (**)(void, void *, void))(v20 + 16))(*(void *)(a1 + 48), v19, 0);
    }
  }
}

void sub_100028040(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v29 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (v14)
  {
    id v15 = v14;
LABEL_3:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    goto LABEL_10;
  }
  if (v29 && v12 && v13)
  {
    uint64_t v16 = [v13 privateMailBoxSize];
    int v17 = (char *)[v16 unsignedIntegerValue];
    uint64_t v18 = *(unsigned __int16 *)(a1 + 48);
    uint64_t v19 = (char *)[*(id *)(a1 + 32) length] + v18;

    if (v17 >= v19)
    {
      id v24 = [v12 instance];
      id v25 = [v24 identifier];
      uint64_t v26 = [v25 hexStringAsData];
      uint64_t v27 = [v13 publicKeyIdentifier];
      id v15 = sub_1000499B4(v29, v26, v27, *(void **)(a1 + 32), *(_WORD *)(a1 + 48));

      goto LABEL_3;
    }
    uint64_t v20 = *(void *)(a1 + 40);
    id v15 = SESDefaultLogObject();
    [*(id *)(a1 + 32) length];
    __int16 v28 = [v13 privateMailBoxSize];
    uint64_t v21 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v21);
  }
  else
  {
    uint64_t v22 = *(void *)(a1 + 40);
    id v15 = SESDefaultLogObject();
    uint64_t v23 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v23);
  }
LABEL_10:
}

void sub_1000284A4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = v12;
  if (v11 && v9 && v10 && !v12)
  {
    id v13 = sub_100040D9C(v9, v10, *(void **)(a1 + 32));
    if (!v13 && *(void *)(a1 + 32)) {
      +[EndpointStore updateWithEndpoint:](_TtC10seserviced13EndpointStore, "updateWithEndpoint:");
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    id v14 = SESDefaultLogObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v17[0] = 67109890;
      v17[1] = v9 != 0;
      __int16 v18 = 1024;
      BOOL v19 = v10 != 0;
      __int16 v20 = 1024;
      BOOL v21 = v11 != 0;
      __int16 v22 = 2112;
      uint64_t v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "updateEndpoint database %d endpointEntity %d endpoint %d error %@", (uint8_t *)v17, 0x1Eu);
    }

    uint64_t v15 = *(void *)(a1 + 40);
    uint64_t v16 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }
}

void sub_100028814(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (v15)
  {
    id v16 = v15;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_10:

    goto LABEL_11;
  }
  if (!v11 || !v13 || !v14)
  {
    uint64_t v23 = *(void *)(a1 + 32);
    SESDefaultLogObject();
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    id v24 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0, v24);

    goto LABEL_10;
  }
  int v17 = [v14 privateMailBoxSize];
  id v18 = [v17 unsignedIntegerValue];
  unint64_t v19 = *(unsigned __int16 *)(a1 + 42) + (unint64_t)*(unsigned __int16 *)(a1 + 40);

  if ((unint64_t)v18 >= v19)
  {
    __int16 v32 = [v13 instance];
    id v25 = [v32 identifier];
    uint64_t v26 = [v25 hexStringAsData];
    uint64_t v27 = [v14 publicKeyIdentifier];
    int v28 = *(unsigned __int16 *)(a1 + 40);
    int v29 = *(unsigned __int16 *)(a1 + 42);
    id v33 = 0;
    __int16 v30 = sub_1000496AC(v11, v26, v27, v28, v29, &v33);
    id v16 = v33;

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    goto LABEL_10;
  }
  uint64_t v20 = *(void *)(a1 + 32);
  BOOL v21 = SESDefaultLogObject();
  int v31 = [v14 privateMailBoxSize];
  __int16 v22 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v22);

LABEL_11:
}

void sub_100028C50(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v10 = a2;
  id v11 = a5;
  id v12 = a6;
  id v13 = v12;
  if (!v10 || v12)
  {
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v20);
  }
  else
  {
    id v14 = [a4 instance];
    id v15 = [v14 identifier];
    id v16 = [v15 hexStringAsData];
    int v17 = [v11 publicKeyIdentifier];
    id v21 = 0;
    id v18 = sub_10004A414(v10, v16, v17, &v21);
    id v13 = v21;

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_100028F10(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v23 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (v14)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v15 = *(void *)(a1 + 48);
    if (v23 && v12 && v13)
    {
      __int16 v22 = [v12 instance];
      id v16 = [v22 identifier];
      int v17 = [v16 hexStringAsData];
      id v18 = [v13 publicKeyIdentifier];
      uint64_t v19 = sub_10004A5DC(v23, v17, v18, *(void **)(a1 + 32), *(void **)(a1 + 40), *(_WORD *)(a1 + 56));
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v19);
    }
    else
    {
      uint64_t v20 = SESDefaultLogObject();
      id v21 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v21);
    }
  }
}

void sub_100029290(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (v15)
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_23;
  }
  if (!v11 || !v13 || !v14)
  {
    uint64_t v21 = *(void *)(a1 + 56);
    __int16 v22 = SESDefaultLogObject();
    uint64_t v23 = SESCreateAndLogError();
LABEL_12:
    id v24 = (void *)v23;
    (*(void (**)(uint64_t, uint64_t))(v21 + 16))(v21, v23);

    goto LABEL_23;
  }
  if ([v14 endPointType] != (id)2)
  {
    uint64_t v21 = *(void *)(a1 + 56);
    __int16 v22 = SESDefaultLogObject();
    [v14 endPointType];
    uint64_t v23 = SESCreateAndLogError();
    goto LABEL_12;
  }
  id v16 = [objc_alloc((Class)NSData) initWithBase64EncodedData:*(void *)(a1 + 32) options:0];
  int v17 = v16;
  if (v16)
  {
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v44 = 0x3032000000;
    id v45 = sub_10001DC34;
    uint64_t v46 = sub_10001DC44;
    id v47 = 0;
    v40[0] = [v16 DERItem];
    v40[1] = v18;
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472;
    v35[2] = sub_10002974C;
    v35[3] = &unk_10040CBD8;
    uint64_t v19 = *(void *)(a1 + 40);
    p_long long buf = &buf;
    v35[4] = v19;
    id v36 = v11;
    id v37 = v13;
    id v38 = *(id *)(a1 + 48);
    int v20 = DERDecodeSequenceWithBlock((uint64_t)v40, (uint64_t)v35);
    if (*(void *)(*((void *)&buf + 1) + 40) || !v20)
    {
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
    else
    {
      __int16 v30 = SESDefaultLogObject();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        int v31 = [*(id *)(a1 + 32) asHexString];
        *(_DWORD *)uint64_t v41 = 138412290;
        id v42 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Invalid content was %@", v41, 0xCu);
      }
      uint64_t v32 = *(void *)(a1 + 56);
      id v33 = SESDefaultLogObject();
      id v34 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v32 + 16))(v32, v34);
    }
    _Block_object_dispose(&buf, 8);
  }
  else
  {
    id v25 = SESDefaultLogObject();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = [0 asHexString];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to base64 decode %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v27 = *(void *)(a1 + 56);
    int v28 = SESDefaultLogObject();
    int v29 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v29);
  }
LABEL_23:
}

void sub_100029720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10002974C(uint64_t a1, void *a2, unsigned char *a3)
{
  if (*a2 == 0xE000000000000002)
  {
    id v11 = a2 + 1;
    id v12 = *(void **)(a1 + 32);
    uint64_t v13 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 48) instance];
    id v9 = [v8 identifier];
    uint64_t v10 = [v12 _applyConfidentialMailboxContents:v11 secureElement:v13 instanceAID:v9 keyIdentifier:*(void *)(a1 + 56)];
    goto LABEL_5;
  }
  if (*a2 == 0xE000000000000001)
  {
    uint64_t v5 = a2 + 1;
    uint64_t v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = [*(id *)(a1 + 48) instance];
    id v9 = [v8 identifier];
    uint64_t v10 = [v6 _applyPrivateMailboxContents:v5 secureElement:v7 instanceAID:v9 keyIdentifier:*(void *)(a1 + 56)];
LABEL_5:
    uint64_t v14 = *(void *)(*(void *)(a1 + 64) + 8);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v10;

    goto LABEL_7;
  }
  id v8 = SESDefaultLogObject();
  uint64_t v16 = SESCreateAndLogError();
  uint64_t v17 = *(void *)(*(void *)(a1 + 64) + 8);
  id v9 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = v16;
LABEL_7:

  if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
    return 0;
  }
  *a3 = 1;
  return 0xFFFFFFFFLL;
}

void sub_100029DFC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (!v11 || v15)
  {
    uint64_t v33 = *(void *)(a1 + 40);
    id v34 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v33 + 16))(v33, 0, v34);
  }
  else
  {
    uint64_t v17 = +[NSData randomData:16];
    uint64_t v18 = +[NSData dataWithBytes:&unk_100376765 length:1];
    uint64_t v19 = +[NSData dataWithBytes:&unk_100376766 length:1];
    id v43 = v18;
    v49[1] = [v18 DERItem];
    v49[2] = v20;
    uint64_t v44 = v17;
    v49[3] = [v17 DERItem];
    v49[4] = v21;
    __int16 v22 = [v14 publicKeyIdentifier];
    v49[5] = [v22 DERItem];
    v49[6] = v23;
    id v42 = v19;
    v49[7] = [v19 DERItem];
    v49[8] = v24;

    id v25 = encodeSequence();
    if (v25)
    {
      uint64_t v26 = [v14 appletIdentifier];
      uint64_t v27 = [v26 asHexString];
      int v28 = *(void **)(a1 + 32);
      v49[0] = 0;
      int v29 = sub_10005B9F4(v11, v27, v25, v28, v49);
      id v16 = v49[0];

      if (!v29 || v16)
      {
        uint64_t v37 = *(void *)(a1 + 40);
        id v38 = SESDefaultLogObject();
        uint64_t v39 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v37 + 16))(v37, 0, v39);
      }
      else
      {
        v48[0] = [v29 DERItem];
        v48[1] = v30;
        unint64_t v45 = 0;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        if (!DERDecodeItem((uint64_t)v48, &v45) && v45 == 0xE00000000000000ALL && v47 == 4)
        {
          int v31 = +[SEEndPointCreateAuthorizationIDResponse withAuthorizationID:v44 authorizationInterval:1 authorizationCount:(double)(bswap32(v46[1]) >> 16) + (double)(bswap32(*v46) >> 16) * 3600.0];
          uint64_t v32 = SESDefaultLogObject();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v51 = v31;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
          }

          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
        }
        else
        {
          uint64_t v40 = *(void *)(a1 + 40);
          int v31 = SESDefaultLogObject();
          uint64_t v41 = SESCreateAndLogError();
          (*(void (**)(uint64_t, void, void *))(v40 + 16))(v40, 0, v41);
        }
      }
    }
    else
    {
      uint64_t v35 = *(void *)(a1 + 40);
      int v29 = SESDefaultLogObject();
      id v36 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v35 + 16))(v35, 0, v36);

      id v16 = 0;
    }
  }
}

void sub_10002A354(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v8 = [@"A000000809434343444B417631" hexStringAsData];
    id v10 = 0;
    id v9 = sub_10004D898(v5, v8, &v10);
    id v7 = v10;

    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_10002A588(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v7 && !v5)
  {
    id v6 = [@"A000000809434343444B417631" hexStringAsData];
    sub_10004DF5C(v7, v6, *(void **)(a1 + 32));
    id v5 = (id)objc_claimAutoreleasedReturnValue();
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10002A830(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v14 = a2;
  id v9 = a6;
  if (a5 && v14 && !v9)
  {
    id v10 = [a5 appletIdentifier];
    id v11 = [*(id *)(a1 + 32) hexStringAsData];
    sub_10004A910(v14, v10, v11, *(void **)(a1 + 40));
    id v9 = (id)objc_claimAutoreleasedReturnValue();

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    id v13 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
  }
}

void sub_10002AC6C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (v11 && !v15)
  {
    if (*(_WORD *)(a1 + 104))
    {
      uint64_t v17 = [v14 confidentialMailBoxSize];
      id v18 = [v17 unsignedIntegerValue];
      unint64_t v19 = *(unsigned __int16 *)(a1 + 106) + (unint64_t)*(unsigned __int16 *)(a1 + 104);

      if ((unint64_t)v18 < v19)
      {
        uint64_t v20 = *(void *)(a1 + 96);
        SESDefaultLogObject();
        id v21 = (id)objc_claimAutoreleasedReturnValue();
        __int16 v22 = [v14 confidentialMailBoxSize];
        uint64_t v23 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v23);

LABEL_19:
LABEL_20:

        goto LABEL_21;
      }
    }
    uint64_t v26 = [v14 validateAuthorizedEndpointConfig:*(void *)(a1 + 32)];
    if (v26)
    {
      id v16 = (void *)v26;
      (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
      goto LABEL_9;
    }
    uint64_t v27 = *(void *)(a1 + 40);
    if (v27 && *(void *)(a1 + 48))
    {
      id v55 = 0;
      int v28 = sub_10004E0A4(v27, &v55);
      id v29 = v55;
      id v21 = v29;
      if (!v28 || v29)
      {
        uint64_t v47 = *(void *)(a1 + 96);
        uint64_t v48 = SESEnsureError();
        (*(void (**)(uint64_t, void, void *))(v47 + 16))(v47, 0, v48);
      }
      else
      {
        uint64_t v30 = [[*(id *)(a1 + 48) ses_sha256];
        unsigned __int8 v31 = [v30 isEqualToData:v28];

        if (v31)
        {

          goto LABEL_16;
        }
        uint64_t v49 = *(void *)(a1 + 96);
        uint64_t v48 = SESDefaultLogObject();
        id v53 = [*(id *)(a1 + 48) asHexString];
        id v51 = [v28 asHexString];
        id v50 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v49 + 16))(v49, 0, v50);
      }
      goto LABEL_20;
    }
LABEL_16:
    unsigned int v32 = *(unsigned __int8 *)(a1 + 108);
    uint64_t v33 = [v13 instance];
    id v34 = [v33 identifier];
    uint64_t v35 = [v34 hexStringAsData];
    id v36 = [v14 publicKeyIdentifier];
    uint64_t v37 = *(void **)(a1 + 56);
    id v38 = *(void **)(a1 + 64);
    uint64_t v39 = *(void **)(a1 + 32);
    uint64_t v40 = *(void **)(a1 + 40);
    HIDWORD(v41) = *(_DWORD *)(a1 + 104);
    LODWORD(v41) = HIDWORD(v41);
    id v42 = *(void **)(a1 + 72);
    id v43 = *(void **)(a1 + 80);
    uint64_t v44 = *(void **)(a1 + 88);
    id v54 = 0;
    uint64_t v52 = sub_10004AB18(v11, v32, v35, v36, v37, v38, v39, v42, v40, SBYTE6(v41), SHIBYTE(v41), (v41 >> 16) >> 16, v43, v44, &v54);
    id v21 = v54;

    unint64_t v45 = SESDefaultLogObject();
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v57 = v21;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Endpoint authorize error %@", buf, 0xCu);
    }

    uint64_t v46 = *(void (**)(void))(*(void *)(a1 + 96) + 16);
    __int16 v22 = (void *)v52;
    v46();
    goto LABEL_19;
  }
  uint64_t v24 = *(void *)(a1 + 96);
  id v25 = SESEnsureError();
  (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v25);

LABEL_9:
LABEL_21:
}

void sub_10002B280(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v7 = a4;
  CFDictionaryRef v8 = a5;
  if (v8)
  {
    CFDictionaryRef v9 = v8;
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v10 = [v7 privacyKeyIdentifier];

    if (v10)
    {
      v21[0] = kSecClassKey;
      v20[0] = kSecClass;
      v20[1] = kSecAttrApplicationTag;
      id v11 = [v7 privacyKeyIdentifier];
      v21[1] = v11;
      v21[2] = &__kCFBooleanTrue;
      v20[2] = kSecUseDataProtectionKeychain;
      v20[3] = kSecReturnRef;
      v21[3] = &__kCFBooleanTrue;
      CFDictionaryRef v9 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:4];

      CFTypeRef result = 0;
      OSStatus v12 = SecItemCopyMatching(v9, &result);
      id v13 = (void *)result;
      if (!v12 && result && (CFTypeID v14 = CFGetTypeID(result), v14 == SecKeyGetTypeID()))
      {
        id v15 = decryptPrivacyData();
        id v16 = 0;
        (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 48);
        id v15 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v16 = (id)objc_claimAutoreleasedReturnValue();
        (*(void (**)(uint64_t))(v17 + 16))(v17);
      }
    }
    else
    {
      uint64_t v18 = *(void *)(a1 + 48);
      SESDefaultLogObject();
      CFDictionaryRef v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      id v13 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v13);
    }
  }
}

void sub_10002B9E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    CFDictionaryRef v9 = [a3 privacyEncryptionPK];
    if (v9)
    {
      CFDictionaryRef v8 = encryptPrivacyData();
      id v10 = 0;
      id v11 = 0;
      uint64_t v12 = *(void *)(a1 + 48);
      if (v8)
      {
        (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v8);
      }
      else
      {
        id v16 = [v9 ses_sha256];
        uint64_t v17 = +[SEEndPointPrivacyEncryptResponse responseWithCipherText:v11 ephemeralPublicKeyData:v10 receiverPublicKeyHash:v16];
        (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v17, 0);
      }
    }
    else
    {
      uint64_t v13 = *(void *)(a1 + 48);
      CFTypeID v14 = SESDefaultLogObject();
      id v15 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0, v15);

      CFDictionaryRef v8 = 0;
    }
  }
}

void sub_10002C250(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = v15;
  if (!v11 || v15)
  {
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = SESDefaultLogObject();
    [v16 code];
    uint64_t v25 = SESCreateAndLogError();
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v17 = [v14 revocationAttestation];

    if (!v17)
    {
      uint64_t v34 = *(void *)(a1 + 48);
      id v16 = SESDefaultLogObject();
      uint64_t v24 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v34 + 16))(v34, v24);
      goto LABEL_9;
    }
  }
  uint64_t v18 = [v13 instance];
  unint64_t v19 = [v18 identifier];
  uint64_t v20 = [v19 hexStringAsData];
  id v21 = [v14 publicKeyIdentifier];
  id v16 = sub_100048B74(v11, v20, v21);

  if (v16)
  {
    id v22 = sub_100019CF4((uint64_t)v12, v11, 1);
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = SESDefaultLogObject();
    [v16 code];
    uint64_t v25 = SESCreateAndLogError();
LABEL_8:
    uint64_t v26 = (void *)v25;
    (*(void (**)(uint64_t, uint64_t))(v23 + 16))(v23, v25);

LABEL_9:
    goto LABEL_10;
  }
  id v27 = [v14 deleteEndPointLongTermPrivacyKey];
  uint64_t v38 = 0;
  uint64_t v39 = &v38;
  uint64_t v40 = 0x3032000000;
  unint64_t v41 = sub_10001DC34;
  id v42 = sub_10001DC44;
  id v43 = 0;
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472;
  v35[2] = sub_10002C668;
  v35[3] = &unk_10040C510;
  id v36 = v13;
  uint64_t v37 = &v38;
  sub_10001A33C((uint64_t)v12, v35);
  int v28 = SESDefaultLogObject();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
  {
    uint64_t v30 = *(void *)(a1 + 32);
    unsigned __int8 v31 = sub_100039480(*(id *)(a1 + 40), v29);
    uint64_t v32 = v39[5];
    *(_DWORD *)long long buf = 138412802;
    uint64_t v45 = v30;
    __int16 v46 = 2112;
    uint64_t v47 = v31;
    __int16 v48 = 2112;
    uint64_t v49 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Removed key %@ client %@ error %@", buf, 0x20u);
  }
  id v33 = sub_100019CF4((uint64_t)v12, v11, 1);
  +[EndpointStore removeWithEndpoint:v14];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

  _Block_object_dispose(&v38, 8);
LABEL_10:
}

void sub_10002C640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10002C668(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100030AD8((uint64_t)v3);
  [v4 deleteObject:*(void *)(a1 + 32)];

  uint64_t v5 = sub_100030AE4((uint64_t)v3);

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_10002C948(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v56 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  if (!v14)
  {
    if (!v11 || !v56 || !v12 || !v13)
    {
      uint64_t v21 = *(void *)(a1 + 72);
      uint64_t v20 = SESDefaultLogObject();
      id v22 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0, v22);

      goto LABEL_10;
    }
    uint64_t v18 = [v13 revocationAttestation];

    if (v18)
    {
      uint64_t v19 = *(void *)(a1 + 72);
      uint64_t v20 = [v13 revocationAttestation];
      (*(void (**)(uint64_t, void *, void))(v19 + 16))(v19, v20, 0);
LABEL_10:

      goto LABEL_11;
    }
    id v55 = v13;
    uint64_t v23 = objc_opt_new();
    uint64_t v24 = *(void **)(a1 + 40);
    id v54 = v12;
    if (v24)
    {
      uint64_t v25 = [v12 signatureVerificationPK];
      id v62 = 0;
      uint64_t v26 = sub_10004D084(v24, v25, &v62);
      id v27 = v62;

      if (!v26 || v27)
      {
        id v33 = v27;
        uint64_t v44 = SESDefaultLogObject();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Failed to verify remote termination request!", buf, 2u);
        }
        id v29 = v11;

        uint64_t v45 = SESDefaultLogObject();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          __int16 v46 = [*(id *)(a1 + 40) base64EncodedStringWithOptions:0];
          *(_DWORD *)long long buf = 138412290;
          id v65 = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "RTR %@", buf, 0xCu);
        }
        uint64_t v47 = SESDefaultLogObject();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          __int16 v48 = [v54 signatureVerificationPK];
          uint64_t v49 = [v48 asHexString];
          *(_DWORD *)long long buf = 138412290;
          id v65 = v49;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "PK %@", buf, 0xCu);
        }
        (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
        id v50 = [v55 readerInfo];
        id v51 = [v55 bleAddress];
        if (v51) {
          uint64_t v52 = 3;
        }
        else {
          uint64_t v52 = 1;
        }
        sub_10004F8C4((uint64_t)SESDAnalyticsLogger, 2, v50, v52, 1);

        uint64_t v34 = 0;
        goto LABEL_39;
      }
      [v23 addObjectsFromArray:v26];
    }
    else
    {
      int v28 = [*(id *)(a1 + 32) hexStringAsData];
      [v23 addObject:v28];
    }
    id v29 = v11;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v53 = v23;
    uint64_t v30 = +[NSSet setWithArray:v23];
    id v31 = [v30 countByEnumeratingWithState:&v58 objects:v63 count:16];
    if (v31)
    {
      id v32 = v31;
      id v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = *(void *)v59;
      do
      {
        id v36 = 0;
        uint64_t v37 = v34;
        do
        {
          if (*(void *)v59 != v35) {
            objc_enumerationMutation(v30);
          }
          uint64_t v38 = *(void *)(*((void *)&v58 + 1) + 8 * (void)v36);
          uint64_t v39 = *(void **)(a1 + 48);
          uint64_t v40 = *(void *)(a1 + 56);
          uint64_t v41 = *(void *)(a1 + 64);
          id v57 = 0;
          uint64_t v34 = [v39 revokeRemoteTerminationRequestEndPoints:v29 sesDatabase:v56 identifier:v38 taskID:v40 clientInfo:v41 outError:&v57];
          id v42 = v57;

          if (v42)
          {
            id v43 = v42;

            id v33 = v43;
          }

          id v36 = (char *)v36 + 1;
          uint64_t v37 = v34;
        }
        while (v32 != v36);
        id v32 = [v30 countByEnumeratingWithState:&v58 objects:v63 count:16];
      }
      while (v32);
    }
    else
    {
      id v33 = 0;
      uint64_t v34 = 0;
    }

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
    uint64_t v23 = v53;
LABEL_39:

    id v11 = v29;
    id v12 = v54;
    id v13 = v55;
    id v14 = 0;
    goto LABEL_11;
  }
  uint64_t v15 = *(void *)(a1 + 72);
  id v16 = SESDefaultLogObject();
  [v14 code];
  uint64_t v17 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v17);

LABEL_11:
}

void sub_10002D5A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = SESDefaultLogObject();
    id v11 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v11);
  }
  else
  {
    id v12 = sub_100039480(*(id *)(a1 + 32), v7);
    id v17 = 0;
    id v13 = sub_10001AE6C((uint64_t)v5, v12, &v17);
    id v8 = v17;

    uint64_t v14 = *(void *)(a1 + 40);
    if (v8)
    {
      uint64_t v15 = SESDefaultLogObject();
      id v16 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0, v16);
    }
    else
    {
      (*(void (**)(uint64_t, void *, void))(v14 + 16))(v14, v13, 0);
    }
  }
}

void sub_10002D8BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = SESDefaultLogObject();
    id v11 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v11);
  }
  else
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = sub_100039480(*(id *)(a1 + 40), v7);
    id v18 = 0;
    uint64_t v14 = sub_10001AFC8((uint64_t)v5, v12, v13, &v18);
    id v8 = v18;

    uint64_t v15 = *(void *)(a1 + 48);
    if (v8)
    {
      id v16 = SESDefaultLogObject();
      id v17 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v17);
    }
    else
    {
      (*(void (**)(void, void *, void))(v15 + 16))(*(void *)(a1 + 48), v14, 0);
    }
  }
}

void sub_10002DBFC(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = SESDefaultLogObject();
    id v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    id v13 = sub_100039480(*(id *)(a1 + 48), v6);
    id v7 = sub_10001B17C(v14, v11, v12, v13);

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10002DE9C(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = SESDefaultLogObject();
    id v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = sub_100039480(*(id *)(a1 + 40), v6);
    id v7 = sub_10001B5E0(v13, v11, v12);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10002E138(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v8 = v6;
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = SESDefaultLogObject();
    id v11 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v11);
  }
  else
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = sub_100039480(*(id *)(a1 + 40), v7);
    id v18 = 0;
    id v14 = sub_100051E28((uint64_t)v5, v12, v13, &v18);
    id v8 = v18;

    uint64_t v15 = *(void *)(a1 + 48);
    if (v8)
    {
      id v16 = SESDefaultLogObject();
      id v17 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v17);
    }
    else
    {
      (*(void (**)(uint64_t, void *, void))(v15 + 16))(v15, v14, 0);
    }
  }
}

void sub_10002E470(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = SESDefaultLogObject();
    id v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = *(void **)(a1 + 40);
    id v13 = sub_100039480(*(id *)(a1 + 48), v6);
    id v7 = sub_100051FCC(v14, v11, v12, v13);

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10002E710(uint64_t a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = SESDefaultLogObject();
    id v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);
  }
  else
  {
    id v11 = *(void **)(a1 + 32);
    id v12 = sub_100039480(*(id *)(a1 + 40), v6);
    id v7 = sub_10005229C(v13, v11, v12);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_10002EA38(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v11 = v9;
  if (v8 && v7 && !v9)
  {
    id v12 = *(void **)(a1 + 32);
    id v13 = sub_100039480(*(id *)(a1 + 40), v10);
    id v32 = 0;
    id v14 = sub_100046478((uint64_t)v8, v12, v13, &v32);
    id v11 = v32;

    if (v11)
    {
      uint64_t v15 = *(void *)(a1 + 56);
      id v16 = SESDefaultLogObject();
      id v17 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0, v17);
    }
    else
    {
      uint64_t v20 = [*(id *)(a1 + 48) database];
      id v31 = 0;
      id v16 = sub_10004663C((uint64_t)v20, v14, &v31);
      id v11 = v31;

      if (v11)
      {
        uint64_t v22 = *(void *)(a1 + 56);
        id v17 = SESDefaultLogObject();
        uint64_t v23 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void, void *))(v22 + 16))(v22, 0, v23);
      }
      else
      {
        uint64_t v24 = sub_100056FD0(v7, v21);
        uint64_t v25 = [v24 casdCertificate];
        id v17 = DERDecodeData(v25);

        id v27 = sub_100056FD0(v7, v26);
        int v28 = [v27 casdCertificateRSA];
        uint64_t v23 = DERDecodeData(v28);

        id v29 = [v16 secureElementAttestation];
        uint64_t v30 = +[SEEndPointBindingAttestationRequestItems withSubCAAttestation:v29 casdECDSACertificate:v17 casdRSACertificate:v23];

        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
    }
  }
  else
  {
    uint64_t v18 = *(void *)(a1 + 56);
    uint64_t v19 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0, v19);
  }
}

void sub_10002EEB8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (v8)
  {
    id v9 = v8;
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  else
  {
    id v33 = 0;
    id v10 = sub_10005D5C0(a3, &v33);
    id v11 = v33;
    id v9 = v11;
    if (!v10 || v11)
    {
      uint64_t v25 = *(void *)(a1 + 32);
      SESEnsureError();
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, void, id))(v25 + 16))(v25, 0, v12);
    }
    else
    {
      uint64_t v27 = a1;
      id v12 = [objc_alloc((Class)NSMutableArray) initWithCapacity:[v10 count]];
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v13 = v10;
      id v14 = [v13 countByEnumeratingWithState:&v29 objects:v38 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v30;
        while (2)
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(void *)v30 != v16) {
              objc_enumerationMutation(v13);
            }
            uint64_t v18 = [*(id *)(*((void *)&v29 + 1) + 8 * i) identifier];
            uint64_t v19 = [v18 hexStringAsData];

            id v28 = 0;
            BOOL v20 = sub_10004E1CC(v7, v19, &v28);
            id v21 = v28;
            if (v21)
            {
              id v9 = v21;
              uint64_t v26 = SESDefaultLogObject();
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138412546;
                uint64_t v35 = v19;
                __int16 v36 = 2112;
                uint64_t v37 = v9;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Error querying %@ is suspended : %@", buf, 0x16u);
              }

              (*(void (**)(void))(*(void *)(v27 + 32) + 16))();
              goto LABEL_20;
            }
            uint64_t v22 = +[SESEndPointContainerInfo withAppletAID:v19 isSuspended:v20];
            [v12 addObject:v22];
          }
          id v15 = [v13 countByEnumeratingWithState:&v29 objects:v38 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }

      uint64_t v23 = SESDefaultLogObject();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        unsigned int v24 = [v12 count];
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v35) = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Returning %d containers", buf, 8u);
      }

      (*(void (**)(void))(*(void *)(v27 + 32) + 16))();
      id v9 = 0;
    }
LABEL_20:
  }
}

void sub_10002F868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v4 = *(void (**)(uint64_t, void))(v3 + 16);
    uint64_t v5 = *(void *)(a1 + 32);
    v4(v5, 0);
  }
  else
  {
    CFStringRef v8 = @"weeksSinceInitialMADownloadAttempt";
    id v6 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", +[SESMobileAssetClient getWeeksTryingToDownload]);
    id v9 = v6;
    id v7 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
    (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v7, 0);
  }
}

void sub_10002FC5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  uint64_t v16 = v15;
  if (v14 && v13 && v12 && v11 && !v15)
  {
    if ([v14 endPointType] == (id)1)
    {
      id v17 = [v14 certificates];
      id v18 = [v17 count];

      if (v18 == (id)3)
      {
        uint64_t v19 = [v14 appletIdentifier];
        BOOL v20 = [*(id *)(a1 + 32) hexStringAsData];
        id v21 = *(void **)(a1 + 40);
        v64[0] = 0;
        uint64_t v22 = sub_10004E364(v11, v19, v20, v21, 1u, v64);
        id v23 = v64[0];

        if (v23)
        {
          (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
LABEL_22:

          goto LABEL_23;
        }
        long long v32 = getCertificatePublicKey();
        id v33 = [v14 publicKey];
        unsigned __int8 v34 = [v32 isEqual:v33];

        if (v34)
        {
          uint64_t v35 = [v14 certificates];
          id v36 = [v35 mutableCopy];

          [v36 setObject:v22 atIndexedSubscript:2];
          [v14 setCertificates:v36];
          uint64_t v37 = SecCertificateCreateWithData(0, (CFDataRef)v22);
          if (v37)
          {
            long long v62 = 0u;
            long long v63 = 0u;
            long long v60 = 0u;
            long long v61 = 0u;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v51 = 0u;
            memset(v50, 0, sizeof(v50));
            id v23 = +[SEEndPoint parsePTAExtension:@"1.3.6.1.4.1.41577.5.4" certificate:v37 specification:&off_10040CD10 output:v50];
            if (v23)
            {
              (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
            }
            else
            {
              +[SEEndPointConfiguration configurationWithOpt1:*(unsigned __int8 *)v51 opt2:*(unsigned __int8 *)v52];
              uint64_t v41 = v49 = v32;
              [v14 setConfiguration:v41];

              uint64_t v42 = *(void *)(a1 + 48);
              id v43 = sub_100040D9C(v12, v13, v14);
              uint64_t v44 = *(void (**)(uint64_t, void *))(v42 + 16);
              uint64_t v45 = v42;
              long long v32 = v49;
              v44(v45, v43);
            }
            goto LABEL_21;
          }
          uint64_t v48 = *(void *)(a1 + 48);
          uint64_t v47 = SESDefaultLogObject();
          __int16 v46 = [v22 base64];
          uint64_t v40 = SESCreateAndLogError();
          (*(void (**)(uint64_t, void *))(v48 + 16))(v48, v40);
        }
        else
        {
          uint64_t v38 = *(void *)(a1 + 48);
          SESDefaultLogObject();
          id v36 = (id)objc_claimAutoreleasedReturnValue();
          uint64_t v37 = [v22 base64];
          uint64_t v39 = SESCreateAndLogError();
          (*(void (**)(uint64_t, void *))(v38 + 16))(v38, v39);
        }
        id v23 = 0;
LABEL_21:

        goto LABEL_22;
      }
      uint64_t v29 = *(void *)(a1 + 48);
      uint64_t v27 = SESDefaultLogObject();
      long long v30 = [v14 certificates];
      [v30 count];
      long long v31 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v29 + 16))(v29, v31);
    }
    else
    {
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v27 = SESDefaultLogObject();
      [v14 endPointType];
      id v28 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v28);
    }
  }
  else
  {
    uint64_t v24 = *(void *)(a1 + 48);
    uint64_t v25 = SESEnsureError();
    (*(void (**)(uint64_t, void *))(v24 + 16))(v24, v25);
  }
LABEL_23:
}

id sub_10003096C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  uint64_t v6 = objc_opt_new();
  id v7 = *(void **)(v6 + 16);
  *(void *)(v6 + 16) = v4;
  id v8 = v4;

  id v9 = *(void **)(v6 + 24);
  *(void *)(v6 + 24) = v5;

  *(_DWORD *)(v6 + 8) = 1;

  return (id)v6;
}

uint64_t sub_100030AD8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

id sub_100030AE4(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 24) hasChanges])
    {
      id v2 = *(void **)(a1 + 24);
      id v6 = 0;
      id v3 = v2;
      [v3 save:&v6];
      id v4 = v6;
    }
    else
    {
      id v4 = 0;
    }
    *(_DWORD *)(a1 + 8) = 2;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

id *sub_100030B78(id *result)
{
  if (result)
  {
    id v1 = result;
    CFTypeRef result = (id *)[result[3] hasChanges];
    if (result) {
      CFTypeRef result = (id *)[v1[3] rollback];
    }
    *((_DWORD *)v1 + 2) = 3;
  }
  return result;
}

void sub_100030C54(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___SESSessionManagerInterface];
  id v2 = (void *)qword_10045CC98;
  qword_10045CC98 = v1;

  id v3 = (void *)qword_10045CC98;
  id v4 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___SESACWGSessionCallbackInterface];
  [v3 setInterface:v4 forSelector:"startSESACWGSession:completion:" argumentIndex:0 ofReply:0];

  id v5 = (void *)qword_10045CC98;
  id v6 = +[SESACWGSessionInterface interface];
  [v5 setInterface:v6 forSelector:"startSESACWGSession:completion:" argumentIndex:0 ofReply:1];

  id v7 = (void *)qword_10045CC98;
  id v8 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___SESDCKSessionCallbackInterface];
  [v7 setInterface:v8 forSelector:"startSESDCKSession:completion:" argumentIndex:0 ofReply:0];

  id v9 = (void *)qword_10045CC98;
  id v10 = +[SESDCKSessionInterface interface];
  [v9 setInterface:v10 forSelector:"startSESDCKSession:completion:" argumentIndex:0 ofReply:1];

  id v11 = (void *)qword_10045CC98;
  id v12 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___SESRKESessionCallbackInterface];
  [v11 setInterface:v12 forSelector:"startSESRKESession:options:completion:" argumentIndex:0 ofReply:0];

  id v13 = (void *)qword_10045CC98;
  id v14 = +[SESRKESessionInterface interface];
  [v13 setInterface:v14 forSelector:"startSESRKESession:options:completion:" argumentIndex:0 ofReply:1];

  id v15 = (void *)qword_10045CC98;
  uint64_t v16 = objc_opt_class();
  uint64_t v17 = objc_opt_class();
  uint64_t v18 = objc_opt_class();
  uint64_t v19 = objc_opt_class();
  uint64_t v20 = objc_opt_class();
  uint64_t v21 = objc_opt_class();
  uint64_t v22 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v16, v17, v18, v19, v20, v21, objc_opt_class(), 0);
  [v15 setClasses:v22 forSelector:"getVehicleReports:" argumentIndex:0 ofReply:1];

  id v23 = (void *)qword_10045CC98;
  uint64_t v24 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___SESAssertionCallbackInterface];
  [v23 setInterface:v24 forSelector:"startSESAssertion:withKeyIdentifier:withAppletIdentifier:withOptions:completion:" argumentIndex:0 ofReply:0];

  uint64_t v25 = (void *)qword_10045CC98;
  id v26 = +[SESAssertionInterface interface];
  [v25 setInterface:v26 forSelector:"startSESAssertion:withKeyIdentifier:withAppletIdentifier:withOptions:completion:" argumentIndex:0 ofReply:1];
}

void sub_100030FB0(id a1)
{
  uint64_t v1 = +[NSXPCInterface interfaceWithProtocol:&OBJC_PROTOCOL___SESSessionManagerCallbackInterface];
  id v2 = (void *)qword_10045CCA8;
  qword_10045CCA8 = v1;
}

BOOL sub_100030FF8(uint64_t a1, id *a2)
{
  self;
  long long v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v26[0] = [*a2 DERItem];
  v26[1] = v3;
  int v4 = DERParseSequence((uint64_t)v26, (unsigned __int16)DERNumSignedCertCrlItemSpecs, (uint64_t)&DERSignedCertCrlItemSpecs, (unint64_t)v27, 0x30uLL);
  if (v4)
  {
    int v5 = v4;
    id v6 = SESDefaultLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      id v7 = "Failed to decode certificate? %d";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, v7, buf, 8u);
    }
  }
  else
  {
    v25[0] = 0;
    v25[1] = 0;
    char v24 = 0;
    int v8 = DERParseBitString((uint64_t)&v28, v25, &v24);
    if (!v8)
    {
      *(_OWORD *)long long buf = 0u;
      long long v32 = 0u;
      int v12 = DERParseSequence((uint64_t)v25, *((unsigned __int16 *)&ECDSASigValueSpec + 4), ECDSASigValueSpec, (unint64_t)buf, 0x20uLL);
      if (v12)
      {
        int v13 = v12;
        id v14 = SESDefaultLogObject();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t v29 = 67109120;
          LODWORD(v30) = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to parse ECDSASigValue? %d", v29, 8u);
        }
        BOOL v10 = 0;
      }
      else
      {
        if (!sub_1000313F4((uint64_t)SESSignatureFixer, (unint64_t *)buf)) {
          return 0;
        }
        id v15 = +[NSMutableData dataWithLength:1];
        uint64_t v16 = encodeSequence();
        [v15 appendData:v16];

        id v14 = v15;
        *(void *)&long long v28 = [v14 mutableBytes];
        *((void *)&v28 + 1) = [v14 length];
        uint64_t v17 = encodeSequence();
        BOOL v10 = v17 != 0;
        uint64_t v18 = SESDefaultLogObject();
        uint64_t v19 = v18;
        if (v17)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Fixed incorrect DER encoding on attestation!", v29, 2u);
          }

          uint64_t v20 = SESDefaultLogObject();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v21 = [*a2 base64EncodedStringWithOptions:0];
            *(_DWORD *)uint64_t v29 = 138412290;
            long long v30 = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "%@", v29, 0xCu);
          }
          uint64_t v22 = SESDefaultLogObject();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            id v23 = [v17 base64EncodedStringWithOptions:0];
            *(_DWORD *)uint64_t v29 = 138412290;
            long long v30 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "%@", v29, 0xCu);
          }
          *a2 = v17;
        }
        else
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v29 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to encode SignedCert?", v29, 2u);
          }
        }
      }

      return v10;
    }
    int v9 = v8;
    id v6 = SESDefaultLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      id v7 = "Failed to DERParseBitString? %d";
      goto LABEL_7;
    }
  }

  return 0;
}

uint64_t sub_1000313F4(uint64_t a1, unint64_t *a2)
{
  self;
  int v3 = sub_1000316A4((uint64_t)SESSignatureFixer, a2);
  return v3 | sub_1000316A4((uint64_t)SESSignatureFixer, a2 + 2);
}

BOOL sub_100031444(uint64_t a1, id *a2)
{
  uint64_t v3 = self;
  v17[0] = [*a2 DERItem];
  v17[1] = v4;
  memset(v16, 0, sizeof(v16));
  int v5 = DERParseSequence((uint64_t)v17, *((unsigned __int16 *)&ECDSASigValueSpec + 4), ECDSASigValueSpec, (unint64_t)v16, 0x20uLL);
  BOOL v6 = v5 == 0;
  if (v5)
  {
    int v7 = v5;
    int v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v19) = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to parse ECDSASigValue? %d", buf, 8u);
    }
  }
  else
  {
    if (!sub_1000313F4(v3, (unint64_t *)v16)) {
      return 0;
    }
    int v9 = encodeSequence();
    BOOL v10 = SESDefaultLogObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Fixed incorrect DER encoding on signature!", buf, 2u);
    }

    id v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      int v12 = [*a2 base64EncodedStringWithOptions:0];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
    int v13 = SESDefaultLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      id v14 = [v9 base64EncodedStringWithOptions:0];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v19 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
    }
    int v8 = v9;
    *a2 = v8;
  }

  return v6;
}

uint64_t sub_1000316A4(uint64_t a1, unint64_t *a2)
{
  self;
  unint64_t v3 = a2[1];
  if (v3 < 2 || (char v4 = *(unsigned char *)*a2) != 0)
  {
    char v4 = 0;
  }
  else
  {
    unint64_t v6 = v3 - 1;
    int v7 = (unsigned __int8 *)(*a2 + 1);
    while (((char)*v7 & 0x80000000) == 0)
    {
      *a2 = (unint64_t)v7;
      a2[1] = v6;
      if (v6-- <= 1)
      {
        char v4 = 1;
        return v4 & 1;
      }
      int v9 = *v7++;
      char v4 = 1;
      if (v9) {
        return v4 & 1;
      }
    }
  }
  return v4 & 1;
}

void sub_100031770(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  attr = dispatch_queue_attr_make_with_qos_class(v1, QOS_CLASS_USER_INITIATED, 0);

  id v2 = [SESDarwinNotificationMonitor alloc];
  dispatch_queue_t v3 = dispatch_queue_create("com.apple.seserviced.sesdarwinnotification", attr);
  char v4 = [(SESDarwinNotificationMonitor *)v2 initWithQueue:v3];
  int v5 = (void *)qword_10045CCB8;
  qword_10045CCB8 = (uint64_t)v4;
}

id sub_10003192C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _handleEvent:a2];
}

void sub_100031CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100031CE0(void *a1)
{
  [*(id *)(a1[4] + 16) setObject:a1[5] forKey:a1[6]];
  id result = [*(id *)(a1[4] + 24) containsObject:a1[6]];
  if (result)
  {
    id result = [*(id *)(a1[4] + 24) removeObject:a1[6]];
    *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
  }
  return result;
}

CFDataRef sub_100031D94(uint64_t a1, void *a2, void *a3)
{
  CFDataRef v4 = a2;
  self;
  CFDataRef v9 = 0;
  int v5 = SSEGetSignedDeviceData(v4, &v9);

  if (v5 || (CFDataRef v6 = v9) == 0)
  {
    if (a3)
    {
      int v7 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    CFDataRef v6 = 0;
  }

  return v6;
}

void *sub_100031E58(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  int v7 = sub_10003219C(4098, 0, 0);
  if (v7)
  {
    id v28 = 0;
    int v8 = sub_100038A8C(v5, v6, v7, 1, &v28);
    id v9 = v28;
    if (v9)
    {
      if (a3)
      {
        BOOL v10 = SESDefaultLogObject();
        id v11 = [v7 asHexString];
LABEL_10:
        SESCreateAndLogError();
        *a3 = (id)objc_claimAutoreleasedReturnValue();

        a3 = 0;
      }
    }
    else
    {
      id v26 = [v8 DERItem];
      uint64_t v27 = v13;
      long long v24 = 0u;
      long long v25 = 0u;
      if (!DERParseSequenceSpec())
      {
        uint64_t v18 = 0;
        uint64_t v19 = &v18;
        uint64_t v20 = 0x3032000000;
        uint64_t v21 = sub_100032214;
        uint64_t v22 = sub_100032224;
        id v23 = (id)objc_opt_new();
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472;
        void v17[2] = sub_10003222C;
        id v17[3] = &unk_10040D010;
        v17[4] = &v18;
        if (DERDecodeSequenceWithBlock((uint64_t)&v25, (uint64_t)v17))
        {
          if (a3)
          {
            id v14 = SESDefaultLogObject();
            uint64_t v16 = [v8 asHexString];
            SESCreateAndLogError();
            *a3 = (id)objc_claimAutoreleasedReturnValue();

            a3 = 0;
          }
        }
        else
        {
          a3 = (id)v19[5];
        }
        _Block_object_dispose(&v18, 8);

        goto LABEL_16;
      }
      if (a3)
      {
        BOOL v10 = SESDefaultLogObject();
        id v11 = [v8 asHexString];
        goto LABEL_10;
      }
    }
LABEL_16:

    goto LABEL_17;
  }
  if (a3)
  {
    int v12 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a3 = (id)objc_claimAutoreleasedReturnValue();

    a3 = 0;
  }
LABEL_17:

  return a3;
}

void sub_100032184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10003219C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDataRef v4 = 0;
  if (a2 && a3 && (encodeSequenceSpec(), (CFDataRef v4 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v5 = 0;
  }
  else
  {
    id v5 = sub_100036AC8(a1, v4);
  }

  return v5;
}

uint64_t sub_100032214(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100032224(uint64_t a1)
{
}

uint64_t sub_10003222C(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  dispatch_queue_t v3 = +[NSData dataWithDERItem:a2 + 8];
  [v2 addObject:v3];

  return 0;
}

id sub_100032280(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v85 = a1;
  id v13 = a2;
  id v14 = a3;
  id v86 = a4;
  id v15 = a5;
  id v87 = a6;
  uint64_t v16 = [v14 dataUsingEncoding:4];
  if ([v16 length])
  {
    id v17 = [v16 length];
    if (a7 && (unint64_t)v17 > 0x20) {
      goto LABEL_4;
    }
  }
  else if (a7)
  {
LABEL_4:
    uint64_t v18 = SESDefaultLogObject();
    id v75 = v14;
    id v76 = [v16 length];
    SESCreateAndLogError();
    *a7 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v84 = v16;
  uint64_t v19 = +[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 24352, v16, v75, v76);
  v101[0] = v19;
  uint64_t v20 = +[SESTLV TLVWithTag:81 unsignedShort:256];
  v101[1] = v20;
  uint64_t v21 = +[SESTLV TLVWithTag:82 unsignedShort:257];
  v101[2] = v21;
  uint64_t v22 = +[NSArray arrayWithObjects:v101 count:3];
  id v23 = [v22 mutableCopy];

  long long v24 = v23;
  if ([v15 length])
  {
    long long v25 = +[SESTLV TLVWithTag:83 value:v15];
    [v23 addObject:v25];
  }
  id v26 = v87;
  if (v87)
  {
    uint64_t v27 = a7;
    id v28 = v23;
    id v29 = v15;
    long long v30 = +[NSMutableData dataWithCapacity:](NSMutableData, "dataWithCapacity:", [v87 count]);
    long long v94 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    id v31 = v87;
    id v32 = [v31 countByEnumeratingWithState:&v94 objects:v100 count:16];
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = *(void *)v95;
      do
      {
        for (i = 0; i != v33; i = (char *)i + 1)
        {
          if (*(void *)v95 != v34) {
            objc_enumerationMutation(v31);
          }
          [v30 appendU8:[v94 unsignedCharValue]];
        }
        id v33 = [v31 countByEnumeratingWithState:&v94 objects:v100 count:16];
      }
      while (v33);
    }

    id v36 = +[SESTLV TLVWithTag:85 value:v30];
    long long v24 = v28;
    [v28 addObject:v36];

    id v15 = v29;
    id v26 = v87;
    a7 = v27;
  }
  uint64_t v37 = v85;
  uint64_t v38 = v13;
  uint64_t v39 = sub_100056638(v85, v13);
  if (v39)
  {
    id v40 = v39;
    if (a7)
    {
      id v40 = v39;
      uint64_t v41 = 0;
      *a7 = v40;
    }
    else
    {
      uint64_t v41 = 0;
    }
    long long v63 = v84;
    goto LABEL_57;
  }
  char v42 = [v86 unsignedCharValue];
  id v83 = v24;
  id v43 = +[SESTLV TLVWithTag:32551 children:v24];
  uint64_t v44 = [v43 asData];
  id v93 = 0;
  sub_100056348(v85, 128, 193, 0, v42, v44, 0, &v93);
  uint64_t v45 = (id *)objc_claimAutoreleasedReturnValue();
  id v40 = v93;

  id v82 = v45;
  if (v40 || !v45)
  {
    long long v63 = v84;
    uint64_t v41 = 0;
    if (a7) {
      *a7 = v40;
    }
    long long v24 = v83;
    uint64_t v37 = v85;
    goto LABEL_56;
  }
  id v79 = v15;
  id v77 = a7;
  id v80 = v14;
  id v81 = v38;
  __int16 v46 = sub_10005D558(v45);
  uint64_t v47 = +[SESTLV TLVsWithData:v46];

  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id obj = v47;
  id v48 = [obj countByEnumeratingWithState:&v89 objects:v99 count:16];
  if (v48)
  {
    id v49 = v48;
    id v50 = 0;
    long long v51 = 0;
    id v52 = 0;
    id v53 = 0;
    uint64_t v54 = *(void *)v90;
    while (1)
    {
      for (j = 0; j != v49; j = (char *)j + 1)
      {
        if (*(void *)v90 != v54) {
          objc_enumerationMutation(obj);
        }
        long long v56 = *(void **)(*((void *)&v89 + 1) + 8 * (void)j);
        int v57 = [v56 tag];
        if (v57 > 24374)
        {
          if (v57 == 24375)
          {
            uint64_t v62 = [v56 value];
            long long v59 = v51;
            long long v51 = (void *)v62;
          }
          else
          {
            if (v57 != 32585) {
              continue;
            }
            id v60 = v56;
            long long v59 = v52;
            id v52 = v60;
          }
        }
        else if (v57 == 67)
        {
          id v61 = v56;
          long long v59 = v53;
          id v53 = v61;
        }
        else
        {
          if (v57 != 89) {
            continue;
          }
          uint64_t v58 = [v56 value];
          long long v59 = v50;
          id v50 = (void *)v58;
        }
      }
      id v49 = [obj countByEnumeratingWithState:&v89 objects:v99 count:16];
      if (!v49) {
        goto LABEL_47;
      }
    }
  }
  id v50 = 0;
  long long v51 = 0;
  id v52 = 0;
  id v53 = 0;
LABEL_47:

  if (v53 && v52 && v50 && v51)
  {
    id v64 = +[SESTLV TLVWithTag:65 unsignedChar:1];
    id v98 = v64;
    id v65 = +[NSArray arrayWithObjects:&v98 count:1];
    id v66 = [v65 mutableCopy];

    [v66 addObject:v53];
    [v66 addObjectsFromArray:v83];
    [v66 addObject:v52];
    id v67 = +[SESTLV TLVWithTag:0 children:v66];
    id v68 = [v67 value];
    id v69 = [v68 mutableCopy];

    [v69 appendData:v50];
    unsigned int v70 = +[NSData dataWithHexString:@"526CB83FB5C615FF3BA8EFE9671A35C4"];
    [v69 appendData:v70];

    id v78 = v52;
    uint64_t v71 = [v52 value];
    id v72 = +[SESTLV TLVWithData:](SESTLV, "TLVWithData:");
    id v73 = [v72 value];
    uint64_t v41 = +[SESLegacyKeyCreateResponse withPublicKeyData:v73 CASDSignature:v51 keySlot:v86 legacyKeyAttestation:v69];

    uint64_t v37 = v85;
    id v14 = v80;
    uint64_t v38 = v81;
  }
  else
  {
    id v14 = v80;
    uint64_t v38 = v81;
    if (!v77)
    {
      uint64_t v41 = 0;
      uint64_t v37 = v85;
      goto LABEL_55;
    }
    id v78 = v52;
    SESDefaultLogObject();
    id v66 = (id)objc_claimAutoreleasedReturnValue();
    sub_10005D558(v82);
    id v69 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v71 = [v69 base64];
    SESCreateAndLogError();
    uint64_t v41 = 0;
    *id v77 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v37 = v85;
  }

  id v52 = v78;
  id v40 = 0;
LABEL_55:

  id v15 = v79;
  id v26 = v87;
  long long v24 = v83;
  long long v63 = v84;
LABEL_56:

LABEL_57:

  return v41;
}

id sub_100032A8C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v66 = a1;
  id v65 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v64 = a6;
  id v61 = v12;
  id v15 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 196, [v12 unsignedCharValue]);
  v74[0] = v15;
  uint64_t v16 = +[SESTLV TLVWithTag:197 unsignedChar:0];
  v74[1] = v16;
  id v17 = +[SESTLV TLVWithTag:144 unsignedChar:0];
  v73[0] = v17;
  id v60 = v13;
  uint64_t v18 = +[SESTLV TLVWithTag:145 value:v13];
  v73[1] = v18;
  id v59 = v14;
  uint64_t v19 = +[SESTLV TLVWithTag:148 value:v14];
  v73[2] = v19;
  uint64_t v20 = +[NSArray arrayWithObjects:v73 count:3];
  uint64_t v21 = +[SESTLV TLVWithTag:32525 children:v20];
  v74[2] = v21;
  uint64_t v22 = +[NSArray arrayWithObjects:v74 count:3];

  id v23 = v66;
  long long v24 = v64;

  long long v25 = v65;
  id v26 = [v65 asHexString];
  uint64_t v27 = +[SESTLV TLVWithTag:0 children:v22];
  id v28 = [v27 value];
  id v71 = 0;
  uint64_t v29 = sub_10005B9F4(v66, v26, v28, v64, &v71);
  id v30 = v71;

  id v31 = v30;
  uint64_t v62 = (void *)v29;
  if (v30)
  {
    id v32 = 0;
    if (a7) {
      *a7 = v30;
    }
    id v48 = v60;
    uint64_t v47 = v61;
    id v49 = v59;
    goto LABEL_35;
  }
  uint64_t v58 = +[SESTLV TLVsWithData:v29];
  id v33 = [v58 find:&stru_10040D050];
  if (!v33)
  {
    id v48 = v60;
    uint64_t v47 = v61;
    id v49 = v59;
    uint64_t v38 = a7;
    if (a7)
    {
      long long v51 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a7 = (id)objc_claimAutoreleasedReturnValue();

      id v33 = 0;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v37 = 0;
    }
    id v32 = 0;
    goto LABEL_34;
  }
  long long v56 = v33;
  int v57 = v22;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v34 = [v33 children];
  id v35 = [v34 countByEnumeratingWithState:&v67 objects:v72 count:16];
  if (!v35)
  {

    uint64_t v38 = 0;
    uint64_t v37 = 0;
    id v48 = v60;
    uint64_t v47 = v61;
    id v49 = v59;
    id v50 = a7;
LABEL_28:
    if (v50)
    {
LABEL_29:
      id v53 = SESDefaultLogObject();
      long long v55 = [v62 base64];
      SESCreateAndLogError();
      *a7 = (id)objc_claimAutoreleasedReturnValue();

      id v23 = v66;
    }
    goto LABEL_30;
  }
  id v36 = v35;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = *(void *)v68;
  while (2)
  {
    for (i = 0; i != v36; i = (char *)i + 1)
    {
      if (*(void *)v68 != v39) {
        objc_enumerationMutation(v34);
      }
      uint64_t v41 = *(void **)(*((void *)&v67 + 1) + 8 * i);
      unsigned int v42 = [v41 tag];
      if (v42 == 24375)
      {
        [v41 value];
        uint64_t v38 = v45 = v38;
      }
      else
      {
        if (v42 != 151) {
          continue;
        }
        id v43 = [v41 value];
        id v44 = [v43 length];

        if (v44 != (id)1)
        {
          if (a7)
          {
            id v52 = SESDefaultLogObject();
            SESCreateAndLogError();
            *a7 = (id)objc_claimAutoreleasedReturnValue();
          }
          id v32 = 0;
          long long v25 = v65;
          id v23 = v66;
          id v48 = v60;
          uint64_t v47 = v61;
          id v49 = v59;
          long long v24 = v64;
          goto LABEL_31;
        }
        id v45 = [v41 value];
        uint64_t v46 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)[v45 bytes]);

        uint64_t v37 = (void *)v46;
      }
    }
    id v36 = [v34 countByEnumeratingWithState:&v67 objects:v72 count:16];
    if (v36) {
      continue;
    }
    break;
  }

  if (!v38)
  {
    long long v25 = v65;
    id v23 = v66;
    id v48 = v60;
    uint64_t v47 = v61;
    id v49 = v59;
    long long v24 = v64;
    if (a7) {
      goto LABEL_29;
    }
LABEL_30:
    id v32 = 0;
    goto LABEL_31;
  }
  long long v25 = v65;
  id v23 = v66;
  id v48 = v60;
  uint64_t v47 = v61;
  id v49 = v59;
  id v50 = a7;
  long long v24 = v64;
  if (!v37) {
    goto LABEL_28;
  }
  id v32 = +[SESLegacyKeySignResponse withSignature:v38 localValidationVerified:v37];
LABEL_31:
  id v33 = v56;
  uint64_t v22 = v57;
LABEL_34:

  id v31 = 0;
LABEL_35:

  return v32;
}

BOOL sub_10003306C(id a1, SESTLV *a2)
{
  return [(SESTLV *)a2 tag] == 234;
}

id sub_100033090(void *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v11 = a1;
  id v62 = a2;
  id v12 = a3;
  id v13 = a4;
  id v61 = a5;
  id v57 = v12;
  uint64_t v58 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 196, [v12 unsignedCharValue]);
  v70[0] = v58;
  id v14 = +[SESTLV TLVWithTag:197 unsignedChar:1];
  v70[1] = v14;
  id v15 = +[SESTLV TLVWithTag:144 unsignedChar:0];
  v69[0] = v15;
  uint64_t v16 = +[NSData randomData:8];
  id v17 = +[SESTLV TLVWithTag:145 value:v16];
  v69[1] = v17;
  id v56 = v13;
  uint64_t v18 = +[SESTLV TLVWithTag:148 value:v13];
  void v69[2] = v18;
  uint64_t v19 = +[NSArray arrayWithObjects:v69 count:3];
  uint64_t v20 = +[SESTLV TLVWithTag:32525 children:v19];
  id v70[2] = v20;
  uint64_t v21 = v11;
  uint64_t v22 = +[NSArray arrayWithObjects:v70 count:3];

  long long v24 = v61;
  id v23 = v62;

  long long v25 = [v62 asHexString];
  id v26 = +[SESTLV TLVWithTag:0 children:v22];
  uint64_t v27 = [v26 value];
  id v67 = 0;
  id v28 = sub_10005BA00(v21, v25, v27, v61, a6, &v67);
  id v29 = v67;

  if (v29)
  {
    id v30 = 0;
    if (a7) {
      *a7 = v29;
    }
    uint64_t v47 = v56;
    uint64_t v46 = v57;
    goto LABEL_35;
  }
  id v59 = +[SESTLV TLVsWithData:v28];
  id v31 = [v59 find:&stru_10040D070];
  if (!v31)
  {
    id v30 = a7;
    uint64_t v47 = v56;
    if (a7)
    {
      id v48 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a7 = (id)objc_claimAutoreleasedReturnValue();

      id v31 = 0;
      id v35 = 0;
      id v36 = 0;
      id v30 = 0;
    }
    else
    {
      id v35 = 0;
      id v36 = 0;
    }
    uint64_t v46 = v57;
    goto LABEL_34;
  }
  id v53 = v31;
  uint64_t v54 = v28;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  id v32 = [v31 children];
  id v33 = [v32 countByEnumeratingWithState:&v63 objects:v68 count:16];
  if (!v33)
  {

    id v36 = 0;
    id v35 = 0;
    uint64_t v47 = v56;
    uint64_t v46 = v57;
    id v45 = a7;
LABEL_28:
    if (v45)
    {
LABEL_29:
      id v50 = SESDefaultLogObject();
      SESCreateAndLogError();
      void *v45 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_30;
  }
  id v34 = v33;
  id v52 = v22;
  id v35 = 0;
  id v36 = 0;
  uint64_t v37 = *(void *)v64;
  while (2)
  {
    for (i = 0; i != v34; i = (char *)i + 1)
    {
      if (*(void *)v64 != v37) {
        objc_enumerationMutation(v32);
      }
      uint64_t v39 = *(void **)(*((void *)&v63 + 1) + 8 * i);
      unsigned int v40 = [v39 tag];
      if (v40 == 24375)
      {
        [v39 value];
        id v36 = v43 = v36;
      }
      else
      {
        if (v40 != 151) {
          continue;
        }
        uint64_t v41 = [v39 value];
        id v42 = [v41 length];

        if (v42 != (id)1)
        {
          if (a7)
          {
            id v49 = SESDefaultLogObject();
            SESCreateAndLogError();
            *a7 = (id)objc_claimAutoreleasedReturnValue();
          }
          id v30 = 0;
          uint64_t v22 = v52;
          long long v24 = v61;
          id v23 = v62;
          uint64_t v47 = v56;
          uint64_t v46 = v57;
          goto LABEL_31;
        }
        id v43 = [v39 value];
        uint64_t v44 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *(unsigned __int8 *)[v43 bytes]);

        id v35 = (void *)v44;
      }
    }
    id v34 = [v32 countByEnumeratingWithState:&v63 objects:v68 count:16];
    if (v34) {
      continue;
    }
    break;
  }

  id v45 = a7;
  if (!v36)
  {
    uint64_t v22 = v52;
    long long v24 = v61;
    id v23 = v62;
    uint64_t v47 = v56;
    uint64_t v46 = v57;
    if (a7) {
      goto LABEL_29;
    }
LABEL_30:
    id v30 = 0;
    goto LABEL_31;
  }
  uint64_t v22 = v52;
  long long v24 = v61;
  id v23 = v62;
  uint64_t v47 = v56;
  uint64_t v46 = v57;
  if (!v35) {
    goto LABEL_28;
  }
  id v30 = +[SESLegacyKeySignResponse withSignature:v36 localValidationVerified:v35];
LABEL_31:
  id v31 = v53;
  id v28 = v54;
LABEL_34:

  id v29 = 0;
LABEL_35:

  return v30;
}

BOOL sub_10003365C(id a1, SESTLV *a2)
{
  return [(SESTLV *)a2 tag] == 234;
}

id sub_100033680(void *a1, void *a2, uint64_t a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  CFDataRef v11 = a4;
  id v12 = SESDefaultLogObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "ptc_createKey %hx", (uint8_t *)&buf, 8u);
  }

  unsigned int v13 = sub_100033DBC(v9, v10);
  if (v13)
  {
    unsigned int v14 = v13;
    id v65 = 0;
    sub_100033EB8(v9, v10, &v65);
    CFDataRef v15 = (const __CFData *)objc_claimAutoreleasedReturnValue();
    id v16 = v65;
    if (v16)
    {
      id v18 = v16;
      if (a5)
      {
        uint64_t v19 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_7;
    }
    long long v63 = 0;
    long long v64 = 0;
    uint64_t v21 = sub_100056FD0(v9, v17);
    CFDataRef v22 = [v21 seid];
    int v23 = SSECreateSecureElementACLRequest(-1, v22, v11, v15, &v64, &v63);

    if (v23)
    {
      if (!a5)
      {
        id v18 = 0;
LABEL_7:
        uint64_t v20 = 0;
LABEL_46:

        goto LABEL_47;
      }
      long long v24 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v18 = 0;
      uint64_t v20 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_45:

      goto LABEL_46;
    }
    long long v24 = v64;
    uint64_t v54 = v63;
    long long v25 = SESDefaultLogObject();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      id v26 = [v24 asHexString];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "AssetACLRequest : %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v27 = SESDefaultLogObject();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      id v28 = [(__CFData *)v54 asHexString];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "assetACLRequestAttestation : %@", (uint8_t *)&buf, 0xCu);
    }
    __int16 v62 = 256;
    id v53 = +[NSData dataWithBytes:&v62 length:2];
    id v58 = [v53 DERItem];
    uint64_t v59 = v29;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    id v30 = encodeSequenceSpec();
    id v31 = v30;
    if (!v30)
    {
      if (a5)
      {
        id v42 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a5 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v18 = 0;
      uint64_t v20 = 0;
      id v43 = v53;
      goto LABEL_44;
    }
    char v57 = 1;
    __int16 v56 = __rev16(a3);
    *(void *)&long long buf = &v57;
    *((void *)&buf + 1) = 1;
    long long v69 = &v56;
    uint64_t v70 = 2;
    id v71 = [v30 DERItem];
    uint64_t v72 = v32;
    id v73 = [v24 DERItem];
    uint64_t v74 = v33;
    id v75 = [(__CFData *)v54 DERItem];
    uint64_t v76 = v34;
    id v35 = sub_10003219C(40960, (uint64_t)&buf, (uint64_t)&off_10040CD60);
    id v36 = v35;
    if (v35)
    {
      id v50 = v31;
      id v55 = 0;
      id v52 = v35;
      uint64_t v37 = sub_100038A8C(v9, v10, v35, 1, &v55);
      id v18 = v55;
      long long v51 = (void *)v37;
      if (v18 || !v37)
      {
        if (a5)
        {
          id v45 = SESDefaultLogObject();
          id v49 = [v52 asHexString];
          SESCreateAndLogError();
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }
        uint64_t v20 = 0;
        id v43 = v53;
        id v31 = v50;
        id v44 = v51;
        goto LABEL_42;
      }
      uint64_t v38 = SESDefaultLogObject();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        uint64_t v39 = [v52 asHexString];
        *(_DWORD *)long long v66 = 138412290;
        id v67 = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "KeyCommand Success: %@", v66, 0xCu);
      }
      id v31 = v50;
      if (v14 <= 2)
      {
        uint64_t v40 = sub_100034010(v51);
        if (!v40)
        {
          uint64_t v47 = SESDefaultLogObject();
          if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long v66 = 0;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "Key is invalid! Delete & recreating!", v66, 2u);
          }

          id v48 = sub_100034168(v9, v10, a3);
          id v18 = v48;
          if (!v48)
          {
            uint64_t v20 = sub_100033680(v9, v10, a3, v11, a5);
            goto LABEL_58;
          }
          if (a5)
          {
            id v18 = v48;
            uint64_t v20 = 0;
            *a5 = v18;
            goto LABEL_58;
          }
LABEL_30:
          uint64_t v20 = 0;
LABEL_58:
          id v43 = v53;
          id v44 = v51;
          goto LABEL_42;
        }
        if (v40 == 4279897)
        {
          if (a5)
          {
            uint64_t v41 = SESDefaultLogObject();
            SESCreateAndLogError();
            *a5 = (id)objc_claimAutoreleasedReturnValue();
          }
          id v18 = 0;
          goto LABEL_30;
        }
      }
      id v44 = v51;
      id v18 = 0;
      uint64_t v20 = v44;
    }
    else
    {
      if (!a5)
      {
        id v18 = 0;
        uint64_t v20 = 0;
        id v43 = v53;
        goto LABEL_43;
      }
      id v52 = 0;
      SESDefaultLogObject();
      id v44 = (id)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      id v18 = 0;
      uint64_t v20 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v43 = v53;
LABEL_42:

    id v36 = v52;
LABEL_43:

LABEL_44:
    goto LABEL_45;
  }
  if (!a5)
  {
    uint64_t v20 = 0;
    goto LABEL_48;
  }
  SESDefaultLogObject();
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  uint64_t v20 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_47:

LABEL_48:

  return v20;
}

uint64_t sub_100033DBC(void *a1, void *a2)
{
  id v3 = a1;
  CFDataRef v4 = v3;
  uint64_t v5 = dword_10045CCCC;
  if (!dword_10045CCCC)
  {
    uint64_t v6 = sub_100056638(v3, a2);
    if (v6)
    {
      int v7 = (void *)v6;
      uint64_t v5 = dword_10045CCCC;
    }
    else
    {
      int v8 = [@"80A0800000000B30090201010202000104000000" hexStringAsData];
      id v15 = 0;
      sub_100056104(v4, v8, &v15);
      id v9 = (id *)objc_claimAutoreleasedReturnValue();
      id v10 = v15;
      int v7 = v10;
      if (v9 && !v10)
      {
        dword_10045CCCC = 1;
        CFDataRef v11 = sub_10005D558(v9);
        v14[0] = (unint64_t)[v11 DERItem];
        v14[1] = v12;

        DERDecodeSequenceContentWithBlock(v14, (uint64_t)&stru_10040D0B0);
      }
      uint64_t v5 = dword_10045CCCC;
    }
  }

  return v5;
}

void *sub_100033EB8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a1;
  int v7 = SESDefaultLogObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  int v8 = sub_10003219C(0x2000, 0, 0);
  id v13 = 0;
  id v9 = sub_100038A8C(v6, v5, v8, 1, &v13);

  id v10 = v13;
  if (v10)
  {
    if (a3)
    {
      CFDataRef v11 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      a3 = 0;
    }
  }
  else
  {
    a3 = v9;
  }

  return a3;
}

uint64_t sub_100034010(void *a1)
{
  id v1 = a1;
  int v2 = DERParseSequenceSpec();
  if (v2)
  {
    int v3 = v2;
    CFDataRef v4 = SESDefaultLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [v1 asHexString];
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Failed to decode PTC Key output %d %@", buf, 0x12u);
    }
    uint64_t v6 = 4279897;
  }
  else
  {
    memset(buf, 0, 32);
    CC_SHA256(0, 0, buf);
    uint64_t v6 = (buf[0] + 94) <= 0xFDu && (buf[0] != 255 || buf[1] - 162 < 0xFFFFFFFE);
  }

  return v6;
}

id sub_100034168(void *a1, void *a2, unsigned int a3)
{
  id v5 = a1;
  id v6 = a2;
  int v7 = SESDefaultLogObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  char v19 = 1;
  __int16 v20 = __rev16(a3);
  *(void *)long long buf = &v19;
  uint64_t v16 = 1;
  id v17 = &v20;
  uint64_t v18 = 2;
  int v8 = sub_10003219C(40961, (uint64_t)buf, (uint64_t)&off_10040CDB0);
  if (v8)
  {
    id v14 = 0;
    id v9 = sub_100038A8C(v5, v6, v8, 1, &v14);
    id v10 = v14;
    if (v10)
    {
      CFDataRef v11 = SESDefaultLogObject();
      unint64_t v12 = SESCreateAndLogError();
    }
    else
    {
      unint64_t v12 = 0;
    }
  }
  else
  {
    SESDefaultLogObject();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    unint64_t v12 = SESCreateAndLogError();
  }

  return v12;
}

id sub_10003431C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  if ([v18 isEqualToString:kSecKeyAlgorithmECDSASignatureMessageX962SHA256])
  {
    char v19 = [@"0001" hexStringAsData];
    __int16 v20 = sub_10003447C(v13, v14, v15, v16, v17, v19, a7);
LABEL_5:

    goto LABEL_7;
  }
  if (a7)
  {
    char v19 = SESDefaultLogObject();
    SESCreateAndLogError();
    __int16 v20 = 0;
    *a7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_5;
  }
  __int16 v20 = 0;
LABEL_7:

  return v20;
}

id sub_10003447C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  char v19 = SESDefaultLogObject();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v14 && v15 && v16 && v17 && v18)
  {
    id v45 = v18;
    id v62 = 0;
    id v63 = 0;
    sub_10003509C(v13, v14, v16, v15, @"osgn", &v63, &v62);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    id v21 = v63;
    id v22 = v62;
    if (v20)
    {
      if (a7)
      {
        id v20 = v20;
        id v23 = 0;
        *a7 = v20;
      }
      else
      {
        id v23 = 0;
      }
      goto LABEL_33;
    }
    id v43 = v13;
    char v61 = 1;
    long long v24 = [v16 slot];
    __int16 v25 = __rev16([v24 number]);

    __int16 v60 = v25;
    *(void *)long long buf = &v61;
    uint64_t v49 = 1;
    id v50 = &v60;
    uint64_t v51 = 2;
    id v52 = [v17 DERItem];
    uint64_t v53 = v26;
    id v54 = [v45 DERItem];
    uint64_t v55 = v27;
    id v56 = [v21 DERItem];
    uint64_t v57 = v28;
    id v42 = v22;
    id v58 = [v22 DERItem];
    uint64_t v59 = v29;
    uint64_t v30 = sub_10003219C(49152, (uint64_t)buf, (uint64_t)&off_10040CDC0);
    id v44 = (void *)v30;
    if (v30)
    {
      id v31 = (void *)v30;
      uint64_t v32 = SESDefaultLogObject();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v33 = [v31 asHexString];
        LODWORD(v64) = 138412290;
        *(void *)((char *)&v64 + 4) = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "signCommandData : %@", (uint8_t *)&v64, 0xCu);
      }
      id v47 = 0;
      id v13 = v43;
      uint64_t v34 = sub_100038A8C(v43, v14, v31, 1, &v47);
      id v20 = v47;
      uint64_t v41 = v34;
      if (v20 || !v34)
      {
        if (a7)
        {
          uint64_t v37 = SESDefaultLogObject();
          uint64_t v38 = [v16 slot];
          [v38 number];
          SESCreateAndLogError();
          *a7 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        long long v64 = 0uLL;
        v46[1] = [v34 DERItem];
        void v46[2] = v35;
        if (!DERParseSequenceSpec())
        {
          id v36 = +[NSData dataWithDERItem:&v64];
          v46[0] = v36;
          sub_100031444((uint64_t)SESSignatureFixer, v46);
          id v23 = v46[0];
          goto LABEL_30;
        }
        if (a7)
        {
          id v36 = SESDefaultLogObject();
          uint64_t v40 = [v34 asHexString];
          SESCreateAndLogError();
          *a7 = (id)objc_claimAutoreleasedReturnValue();

          id v23 = 0;
LABEL_30:

          goto LABEL_31;
        }
      }
      id v23 = 0;
    }
    else
    {
      if (!a7)
      {
        id v20 = 0;
        id v23 = 0;
        id v13 = v43;
LABEL_32:

LABEL_33:
        id v18 = v45;
        goto LABEL_34;
      }
      uint64_t v41 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v20 = 0;
      id v23 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue();
      id v13 = v43;
    }
LABEL_31:
    id v22 = v42;

    goto LABEL_32;
  }
  if (!a7)
  {
    id v23 = 0;
    goto LABEL_35;
  }
  SESDefaultLogObject();
  id v21 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  id v23 = 0;
  *a7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_34:

LABEL_35:

  return v23;
}

id sub_100034984(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  if (([v18 isEqualToString:kSecKeyAlgorithmECDSASignatureMessageX962SHA256] & 1) != 0
    || [v18 isEqualToString:kSecKeyAlgorithmECDSASignatureDigestX962SHA256])
  {
    if ([v17 length] == (id)32)
    {
      char v19 = [@"0002" hexStringAsData];
      id v20 = sub_10003447C(v13, v14, v15, v16, v17, v19, a7);
LABEL_10:

      goto LABEL_12;
    }
    if (a7)
    {
      char v19 = SESDefaultLogObject();
      [v17 length];
LABEL_9:
      SESCreateAndLogError();
      id v20 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_10;
    }
  }
  else if (a7)
  {
    char v19 = SESDefaultLogObject();
    goto LABEL_9;
  }
  id v20 = 0;
LABEL_12:

  return v20;
}

id sub_100034B4C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  char v19 = SESDefaultLogObject();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v14)
  {
    if (v15)
    {
      id v20 = [v16 key];

      if (v18)
      {
        if (v17 && v20)
        {
          id v60 = 0;
          id v61 = 0;
          sub_10003509C(v13, v14, v16, v15, @"ock", &v61, &v60);
          id v21 = (id)objc_claimAutoreleasedReturnValue();
          id v22 = v61;
          id v23 = v60;
          uint64_t v46 = v23;
          if (v21)
          {
            if (a7)
            {
              id v21 = v21;
              long long v24 = 0;
              *a7 = v21;
            }
            else
            {
              long long v24 = 0;
            }
            goto LABEL_35;
          }
          id v45 = v13;
          char v59 = 1;
          __int16 v25 = v23;
          uint64_t v26 = [v16 slot];
          __int16 v27 = __rev16([v26 number]);

          __int16 v58 = v27;
          *(void *)long long buf = &v59;
          uint64_t v49 = 1;
          id v50 = &v58;
          uint64_t v51 = 2;
          id v52 = [v17 DERItem];
          uint64_t v53 = v28;
          id v54 = [v22 DERItem];
          uint64_t v55 = v29;
          id v56 = [v25 DERItem];
          uint64_t v57 = v30;
          if (([v18 isEqualToString:kSecKeyAlgorithmECDHKeyExchangeStandard] & 1) == 0)
          {
            if (!a7)
            {
              id v21 = 0;
              long long v24 = 0;
              id v13 = v45;
LABEL_35:

              goto LABEL_36;
            }
            uint64_t v37 = SESDefaultLogObject();
            SESCreateAndLogError();
            id v21 = 0;
            long long v24 = 0;
            *a7 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v38 = (void *)v37;
            id v13 = v45;
LABEL_34:

            goto LABEL_35;
          }
          uint64_t v31 = sub_10003219C(49156, (uint64_t)buf, (uint64_t)&off_10040CDE0);
          id v44 = (void *)v31;
          if (!v31)
          {
            id v13 = v45;
            if (a7)
            {
              id v43 = SESDefaultLogObject();
              SESCreateAndLogError();
              id v21 = 0;
              long long v24 = 0;
              *a7 = (id)objc_claimAutoreleasedReturnValue();
            }
            else
            {
              id v21 = 0;
              long long v24 = 0;
            }
            goto LABEL_33;
          }
          uint64_t v32 = (void *)v31;
          uint64_t v33 = SESDefaultLogObject();
          id v13 = v45;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v34 = [v32 asHexString];
            LODWORD(v62) = 138412290;
            *(void *)((char *)&v62 + 4) = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "echangeCommandData : %@", (uint8_t *)&v62, 0xCu);

            uint64_t v32 = v44;
          }

          id v47 = 0;
          id v35 = sub_100038A8C(v45, v14, v32, 1, &v47);
          id v21 = v47;
          id v42 = v35;
          if (v21)
          {
            if (a7)
            {
              id v36 = SESDefaultLogObject();
              uint64_t v41 = [v16 slot];
              [v41 number];
LABEL_30:
              SESCreateAndLogError();
              *a7 = (id)objc_claimAutoreleasedReturnValue();
            }
          }
          else
          {
            long long v62 = 0uLL;
            [v35 DERItem];
            if (!DERParseSequenceSpec())
            {
              long long v24 = +[NSData dataWithDERItem:&v62];
              goto LABEL_32;
            }
            if (a7)
            {
              uint64_t v40 = SESDefaultLogObject();
              uint64_t v41 = [v35 asHexString];
              id v36 = (void *)v40;
              goto LABEL_30;
            }
          }
          long long v24 = 0;
LABEL_32:

LABEL_33:
          uint64_t v38 = v44;
          goto LABEL_34;
        }
      }
    }
  }
  if (!a7)
  {
    long long v24 = 0;
    goto LABEL_37;
  }
  SESDefaultLogObject();
  id v22 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  long long v24 = 0;
  *a7 = (id)objc_claimAutoreleasedReturnValue();
LABEL_36:

LABEL_37:

  return v24;
}

id sub_10003509C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  CFDataRef v9 = 0;
  int v7 = sub_100038778(a1, a2, a3, a4, a5, a6, a7, &v9);

  return v7;
}

id sub_1000350F4(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v17 = a1;
  id v18 = a2;
  id v19 = a3;
  id v20 = a4;
  id v21 = a5;
  id v22 = a6;
  id v67 = a7;
  id v23 = a8;
  id v24 = a9;
  __int16 v25 = SESDefaultLogObject();
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
  }

  long long v66 = v24;
  if (v18 && v19 && v20 && v21 && v22 && v23)
  {
    id v71 = 0;
    id v72 = 0;
    id v65 = v17;
    sub_10003509C(v17, v18, v20, v19, @"oe", &v72, &v71);
    id v26 = (id)objc_claimAutoreleasedReturnValue();
    id v27 = v72;
    id v64 = v71;
    if (v26)
    {
      if (a10)
      {
        id v26 = v26;
        uint64_t v28 = 0;
        *a10 = v26;
      }
      else
      {
        uint64_t v28 = 0;
      }
      goto LABEL_52;
    }
    if ([v23 isEqualToString:@"kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC"])
    {
      uint64_t v29 = @"0001";
    }
    else
    {
      if (([v23 isEqualToString:kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM] & 1) == 0)
      {
        if (a10)
        {
          uint64_t v49 = SESDefaultLogObject();
          SESCreateAndLogError();
          *a10 = (id)objc_claimAutoreleasedReturnValue();
        }
        id v26 = 0;
        uint64_t v28 = 0;

        goto LABEL_52;
      }
      uint64_t v29 = @"1001";
    }
    id v61 = v27;
    uint64_t v30 = [(__CFString *)v29 hexStringAsData];
    uint64_t v31 = SESDefaultLogObject();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "algorithmData : %@", (uint8_t *)&buf, 0xCu);
    }

    char v70 = 1;
    uint64_t v32 = [v20 slot];
    uint64_t v33 = (void *)v30;
    __int16 v34 = __rev16([v32 number]);

    __int16 v69 = v34;
    *(void *)&long long buf = &v70;
    *((void *)&buf + 1) = 1;
    uint64_t v76 = &v69;
    uint64_t v77 = 2;
    id v78 = [v21 DERItem];
    uint64_t v79 = v35;
    id v80 = [v22 DERItem];
    uint64_t v81 = v36;
    id v82 = [v67 DERItem];
    uint64_t v83 = v37;
    id v63 = v33;
    id v84 = [v33 DERItem];
    uint64_t v85 = v38;
    id v27 = v61;
    id v86 = [v61 DERItem];
    uint64_t v87 = v39;
    id v88 = [v64 DERItem];
    uint64_t v89 = v40;
    id v90 = 0;
    uint64_t v91 = 0;
    if (v66)
    {
      [v66 length];
      [v66 bytes];
      id v60 = encodeItem();
      id v90 = [v60 DERItem];
      uint64_t v91 = v41;
    }
    else
    {
      id v60 = 0;
    }
    uint64_t v42 = sub_10003219C(49153, (uint64_t)&buf, (uint64_t)&off_10040CE30);
    long long v62 = (void *)v42;
    if (v42)
    {
      id v43 = (void *)v42;
      id v59 = v22;
      id v44 = SESDefaultLogObject();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
      {
        id v45 = [v43 asHexString];
        *(_DWORD *)id v73 = 138412290;
        *(void *)&v73[4] = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "encryptCommandData : %@", v73, 0xCu);

        id v43 = v62;
      }

      id v68 = 0;
      uint64_t v46 = sub_100038A8C(v65, v18, v43, 1, &v68);
      id v26 = v68;
      if (!v26 && v46)
      {
        *(_OWORD *)id v73 = 0u;
        long long v74 = 0u;
        uint64_t v57 = v46;
        [v46 DERItem];
        if (DERParseSequenceSpec() || !*(void *)&v73[8])
        {
          if (!a10)
          {
            uint64_t v28 = 0;
            id v52 = v60;
            goto LABEL_49;
          }
          id v56 = SESDefaultLogObject();
          uint64_t v53 = [v46 asHexString];
          SESCreateAndLogError();
          uint64_t v28 = 0;
          *a10 = (id)objc_claimAutoreleasedReturnValue();
          id v52 = v60;
        }
        else
        {
          uint64_t v47 = +[NSData dataWithDERItem:v73];
          if (*((void *)&v74 + 1))
          {
            uint64_t v48 = +[NSData dataWithBytes:(void)v74 + 2 length:*((void *)&v74 + 1) - 2];
          }
          else
          {
            uint64_t v48 = 0;
          }
          id v52 = v60;
          uint64_t v54 = v47;
          id v56 = (void *)v47;
          uint64_t v53 = (void *)v48;
          uint64_t v28 = +[AuthenticatedEncryptionResult withCipherText:v54 authenticationTag:v48];
        }

LABEL_49:
        uint64_t v46 = v57;
        goto LABEL_50;
      }
      if (a10)
      {
        __int16 v58 = v46;
        id v50 = SESDefaultLogObject();
        uint64_t v51 = [v20 slot];
        [v51 number];
        SESCreateAndLogError();
        *a10 = (id)objc_claimAutoreleasedReturnValue();

        uint64_t v46 = v58;
      }
      uint64_t v28 = 0;
    }
    else
    {
      if (!a10)
      {
        id v26 = 0;
        uint64_t v28 = 0;
        id v52 = v60;
LABEL_51:

LABEL_52:
        goto LABEL_53;
      }
      id v59 = v22;
      uint64_t v46 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v26 = 0;
      uint64_t v28 = 0;
      *a10 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v52 = v60;
LABEL_50:

    id v22 = v59;
    goto LABEL_51;
  }
  if (!a10)
  {
    uint64_t v28 = 0;
    goto LABEL_54;
  }
  id v65 = v17;
  SESDefaultLogObject();
  id v27 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  uint64_t v28 = 0;
  *a10 = (id)objc_claimAutoreleasedReturnValue();
LABEL_53:

  id v17 = v65;
LABEL_54:

  return v28;
}

id sub_100035814(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  id v18 = a1;
  id v19 = a2;
  id v20 = a3;
  id v21 = a4;
  id v22 = a5;
  id v23 = a6;
  id v66 = a7;
  id v24 = a8;
  id v65 = a9;
  id v25 = a10;
  id v26 = SESDefaultLogObject();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
  }

  if (v19 && v20 && v21 && v22 && v23 && v24)
  {
    id v63 = v25;
    id v70 = 0;
    id v71 = 0;
    id v27 = v18;
    sub_10003509C(v18, v19, v21, v20, @"od", &v71, &v70);
    id v28 = (id)objc_claimAutoreleasedReturnValue();
    id v60 = v71;
    id v62 = v70;
    id v64 = v23;
    if (v28)
    {
      if (a11)
      {
        id v28 = v28;
        uint64_t v29 = 0;
        *a11 = v28;
      }
      else
      {
        uint64_t v29 = 0;
      }
      uint64_t v30 = v60;
      goto LABEL_50;
    }
    if ([@"kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC" isEqualToString:v24])
    {
      uint64_t v31 = @"0001";
    }
    else
    {
      if (CFStringCompare(kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v24, 0))
      {
        if (a11)
        {
          uint64_t v32 = SESDefaultLogObject();
          SESCreateAndLogError();
          *a11 = (id)objc_claimAutoreleasedReturnValue();
        }
        id v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = v60;

        goto LABEL_50;
      }
      uint64_t v31 = @"1001";
    }
    uint64_t v33 = [(__CFString *)v31 hexStringAsData];
    __int16 v34 = SESDefaultLogObject();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "algorithmData : %@", (uint8_t *)&buf, 0xCu);
    }

    id v59 = (void *)v33;
    char v69 = 1;
    uint64_t v35 = [v21 slot];
    __int16 v36 = __rev16([v35 number]);

    __int16 v68 = v36;
    *(void *)&long long buf = &v69;
    *((void *)&buf + 1) = 1;
    long long v74 = &v68;
    uint64_t v75 = 2;
    id v76 = [v22 DERItem];
    uint64_t v77 = v37;
    id v78 = [v23 DERItem];
    uint64_t v79 = v38;
    id v80 = [v66 DERItem];
    uint64_t v81 = v39;
    id v82 = [v59 DERItem];
    uint64_t v83 = v40;
    id v84 = [v60 DERItem];
    uint64_t v85 = v41;
    id v86 = [v62 DERItem];
    uint64_t v87 = v42;
    long long v88 = 0u;
    long long v89 = 0u;
    if (v65)
    {
      [v65 length];
      [v65 bytes];
      id v43 = encodeItem();
      *(void *)&long long v88 = [v43 DERItem];
      *((void *)&v88 + 1) = v44;
    }
    else
    {
      id v43 = 0;
    }
    id v27 = v18;
    __int16 v58 = v43;
    if (v63)
    {
      [v63 length];
      [v63 bytes];
      uint64_t v57 = encodeItem();
      *(void *)&long long v89 = [v57 DERItem];
      *((void *)&v89 + 1) = v45;
    }
    else
    {
      uint64_t v57 = 0;
    }
    uint64_t v30 = v60;
    uint64_t v46 = sub_10003219C(49154, (uint64_t)&buf, (uint64_t)&off_10040CE50);
    id v61 = (void *)v46;
    if (!v46)
    {
      if (a11)
      {
        id v56 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v28 = 0;
        uint64_t v29 = 0;
        *a11 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v28 = 0;
        uint64_t v29 = 0;
      }
      goto LABEL_49;
    }
    uint64_t v47 = (void *)v46;
    uint64_t v48 = SESDefaultLogObject();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      [v47 asHexString];
      v50 = uint64_t v49 = v47;
      LODWORD(v72) = 138412290;
      *(void *)((char *)&v72 + 4) = v50;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "decryptCommandData : %@", (uint8_t *)&v72, 0xCu);

      uint64_t v47 = v49;
    }

    id v67 = 0;
    uint64_t v51 = sub_100038A8C(v27, v19, v47, 1, &v67);
    id v28 = v67;
    uint64_t v55 = v51;
    if (v28 || !v51)
    {
      uint64_t v29 = a11;
      if (!a11) {
        goto LABEL_48;
      }
      id v52 = SESDefaultLogObject();
      uint64_t v54 = [v21 slot];
      [v54 number];
      SESCreateAndLogError();
      *a11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      long long v72 = 0uLL;
      [v51 DERItem];
      if (!DERParseSequenceSpec() && *((void *)&v72 + 1))
      {
        uint64_t v29 = +[NSData dataWithDERItem:&v72];
LABEL_48:

LABEL_49:
LABEL_50:

        id v25 = v63;
        goto LABEL_51;
      }
      if (!a11)
      {
LABEL_47:
        uint64_t v29 = 0;
        goto LABEL_48;
      }
      id v52 = SESDefaultLogObject();
      uint64_t v54 = [v51 asHexString];
      SESCreateAndLogError();
      *a11 = (id)objc_claimAutoreleasedReturnValue();
    }

    goto LABEL_47;
  }
  id v27 = v18;
  if (!a11)
  {
    uint64_t v29 = 0;
    goto LABEL_52;
  }
  id v64 = v23;
  uint64_t v30 = SESDefaultLogObject();
  SESCreateAndLogError();
  uint64_t v29 = 0;
  *a11 = (id)objc_claimAutoreleasedReturnValue();
LABEL_51:

  id v23 = v64;
LABEL_52:

  return v29;
}

id sub_100035F44(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  id v79 = a1;
  id v22 = a2;
  id v23 = a3;
  id v24 = a4;
  id v86 = a5;
  id v25 = a6;
  id v85 = a7;
  id v84 = a8;
  id v83 = a9;
  id v26 = a10;
  id v82 = a11;
  id v27 = a12;
  id v28 = a13;
  id v80 = a14;
  uint64_t v29 = SESDefaultLogObject();
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  uint64_t v30 = v25;
  uint64_t v81 = v27;
  if (v22 && v23 && v24 && v86 && v25 && v26 && v28)
  {
    id v115 = 0;
    id v116 = 0;
    uint64_t v31 = v79;
    sub_10003509C(v79, v22, v24, v23, @"oect", &v116, &v115);
    id v32 = (id)objc_claimAutoreleasedReturnValue();
    id v77 = v116;
    id v78 = v115;
    if (v32)
    {
      if (a15)
      {
        id v32 = v32;
        uint64_t v33 = 0;
        *a15 = v32;
      }
      else
      {
        uint64_t v33 = 0;
      }
      __int16 v34 = v77;
      goto LABEL_67;
    }
    if ([@"kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC" isEqualToString:v26])
    {
      uint64_t v35 = @"0001";
    }
    else
    {
      if (CFStringCompare(kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v26, 0))
      {
        if (!a15)
        {
          id v32 = 0;
          uint64_t v33 = 0;
          __int16 v34 = v77;

LABEL_67:
          goto LABEL_68;
        }
        uint64_t v74 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v76 = 0;
        id v32 = 0;
        uint64_t v33 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue();
        __int16 v36 = (void *)v74;
        goto LABEL_30;
      }
      uint64_t v35 = @"1001";
    }
    id v76 = [(__CFString *)v35 hexStringAsData];
    if ([@"kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESCBC" isEqualToString:v28])
    {
      uint64_t v37 = @"0001";
      goto LABEL_32;
    }
    if (CFEqual(kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM, v28))
    {
      uint64_t v37 = @"1001";
LABEL_32:
      uint64_t v39 = [(__CFString *)v37 hexStringAsData];
      char v114 = 1;
      uint64_t v40 = [v24 slot];
      __int16 v41 = __rev16([v40 number]);

      __int16 v113 = v41;
      *(void *)long long buf = &v114;
      uint64_t v89 = 1;
      id v90 = &v113;
      uint64_t v91 = 2;
      id v92 = [v86 DERItem];
      uint64_t v93 = v42;
      uint64_t v30 = v25;
      id v94 = [v25 DERItem];
      uint64_t v95 = v43;
      id v96 = [v85 DERItem];
      uint64_t v97 = v44;
      id v98 = [v76 DERItem];
      uint64_t v99 = v45;
      id v100 = [v82 DERItem];
      uint64_t v101 = v46;
      uint64_t v75 = v39;
      id v102 = [v39 DERItem];
      uint64_t v103 = v47;
      id v104 = [v80 DERItem];
      uint64_t v105 = v48;
      id v106 = [v77 DERItem];
      uint64_t v107 = v49;
      id v108 = [v78 DERItem];
      uint64_t v109 = v50;
      long long v110 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      if (v84)
      {
        [v84 length];
        [v84 bytes];
        long long v72 = encodeItem();
        *(void *)&long long v110 = [v72 DERItem];
        *((void *)&v110 + 1) = v51;
      }
      else
      {
        long long v72 = 0;
      }
      uint64_t v31 = v79;
      if (v83)
      {
        [v83 length];
        [v83 bytes];
        id v71 = encodeItem();
        *(void *)&long long v111 = [v71 DERItem];
        *((void *)&v111 + 1) = v52;
      }
      else
      {
        id v71 = 0;
      }
      if (v81)
      {
        [v81 length];
        [v81 bytes];
        id v70 = encodeItem();
        *(void *)&long long v112 = [v70 DERItem];
        *((void *)&v112 + 1) = v53;
      }
      else
      {
        id v70 = 0;
      }
      uint64_t v54 = sub_10003219C(49155, (uint64_t)buf, (uint64_t)&off_10040CE70);
      id v73 = (void *)v54;
      if (v54)
      {
        uint64_t v55 = (void *)v54;
        char v69 = v28;
        id v56 = SESDefaultLogObject();
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v57 = [v55 asHexString];
          LODWORD(v117) = 138412290;
          *(void *)((char *)&v117 + 4) = v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "transcodeCommandData : %@", (uint8_t *)&v117, 0xCu);

          uint64_t v55 = v73;
        }

        id v87 = 0;
        __int16 v58 = sub_100038A8C(v79, v22, v55, 1, &v87);
        id v32 = v87;
        if (!v32 && v58)
        {
          long long v117 = 0u;
          long long v118 = 0u;
          id v67 = v58;
          [v58 DERItem];
          if (DERParseSequenceSpec())
          {
            __int16 v34 = v77;
            if (!a15)
            {
              uint64_t v33 = 0;
LABEL_63:
              __int16 v58 = v67;
              goto LABEL_64;
            }
            uint64_t v59 = SESDefaultLogObject();
            [v67 asHexString];
            v66 = id v65 = (void *)v59;
            SESCreateAndLogError();
            uint64_t v33 = 0;
            *a15 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            uint64_t v62 = +[NSData dataWithDERItem:&v117];
            if ((void)v118)
            {
              uint64_t v63 = +[NSData dataWithBytes:(void)v118 + 2 length:*((void *)&v118 + 1) - 2];
            }
            else
            {
              uint64_t v63 = 0;
            }
            uint64_t v30 = v25;
            id v65 = (void *)v62;
            id v66 = (void *)v63;
            uint64_t v33 = +[AuthenticatedEncryptionResult withCipherText:v62 authenticationTag:v63];
            __int16 v34 = v77;
          }

          goto LABEL_63;
        }
        if (a15)
        {
          __int16 v68 = v58;
          id v60 = SESDefaultLogObject();
          id v61 = [v24 slot];
          [v61 number];
          SESCreateAndLogError();
          *a15 = (id)objc_claimAutoreleasedReturnValue();

          __int16 v58 = v68;
        }
        uint64_t v33 = 0;
      }
      else
      {
        if (!a15)
        {
          id v32 = 0;
          uint64_t v33 = 0;
          __int16 v34 = v77;
LABEL_65:

          __int16 v36 = v75;
          goto LABEL_66;
        }
        char v69 = v28;
        __int16 v58 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v32 = 0;
        uint64_t v33 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue();
      }
      __int16 v34 = v77;
LABEL_64:

      id v28 = v69;
      goto LABEL_65;
    }
    if (a15)
    {
      uint64_t v38 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a15 = (id)objc_claimAutoreleasedReturnValue();
    }
    __int16 v36 = 0;
    id v32 = 0;
    uint64_t v33 = 0;
LABEL_30:
    __int16 v34 = v77;
LABEL_66:

    goto LABEL_67;
  }
  uint64_t v31 = v79;
  if (!a15)
  {
    uint64_t v33 = 0;
    goto LABEL_69;
  }
  __int16 v34 = SESDefaultLogObject();
  SESCreateAndLogError();
  uint64_t v33 = 0;
  *a15 = (id)objc_claimAutoreleasedReturnValue();
LABEL_68:

LABEL_69:

  return v33;
}

id sub_100036858(void *a1, void *a2)
{
  id v3 = a1;
  id v5 = a2;
  if ((byte_10045CCC8 & 1) != 0
    || (sub_100056FD0(v3, v4),
        id v6 = objc_claimAutoreleasedReturnValue(),
        id v7 = [v6 type],
        v6,
        (unint64_t)v7 < 4))
  {
    CFDataRef v9 = 0;
  }
  else
  {
    id v22 = 0;
    id v10 = sub_100056FD0(v3, v8);
    CFDataRef v11 = [v10 seid];
    int v12 = SSEGetSignedDeviceData(v11, (CFDataRef *)&v22);

    id v13 = v22;
    id v14 = SESDefaultLogObject();
    id v15 = v14;
    if (v12 || !v13)
    {
      CFDataRef v9 = SESCreateAndLogError();
    }
    else
    {
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v16 = [(NSData *)v13 asHexString];
        *(_DWORD *)long long buf = 138412290;
        id v24 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "SSE Returned -- %@", buf, 0xCu);
      }
      id v15 = DERDecodeData(v13, 0xC000000000000019);
      if (v15)
      {
        id v17 = sub_100036AC8(3, v15);
        uint64_t v21 = 0;
        id v18 = sub_100038A8C(v3, v5, v17, 1, &v21);
        CFDataRef v9 = 0;
        byte_10045CCC8 = 1;
      }
      else
      {
        id v17 = SESDefaultLogObject();
        id v20 = [(NSData *)v13 asHexString];
        CFDataRef v9 = SESCreateAndLogError();
      }
    }
  }

  return v9;
}

id sub_100036AC8(uint64_t a1, void *a2)
{
  [a2 DERItem];
  int v2 = encodeSequenceSpec();

  return v2;
}

id sub_100036B38(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v13 = a1;
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = SESDefaultLogObject();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  id v20 = sub_100036858(v13, v14);
  if (!v20)
  {
    char v76 = 1;
    id v23 = [v15 slot];
    __int16 v24 = __rev16([v23 number]);

    __int16 v75 = v24;
    id v73 = 0;
    id v74 = 0;
    sub_100037088(v13, v14, v15, &v74, &v73);
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    id v25 = v74;
    id v26 = v73;
    uint64_t v54 = v26;
    if (v21 || !v25 || (id v27 = v26) == 0)
    {
      if (a7)
      {
        SESEnsureError();
        id v22 = 0;
        *a7 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v22 = 0;
      }
      goto LABEL_42;
    }
    id v28 = [v16 dataUsingEncoding:4];
    *(void *)long long buf = &v76;
    uint64_t v60 = 1;
    id v61 = &v75;
    uint64_t v62 = 2;
    uint64_t v53 = v28;
    id v63 = [v28 DERItem];
    uint64_t v64 = v29;
    id v65 = 0;
    uint64_t v66 = 0;
    id v67 = [v25 DERItem];
    uint64_t v68 = v30;
    id v69 = [v27 DERItem];
    uint64_t v70 = v31;
    id v71 = 0;
    uint64_t v72 = 0;
    if (v17)
    {
      id v65 = [v17 DERItem];
      uint64_t v66 = v32;
    }
    if ([v18 length])
    {
      if ((unint64_t)[v18 length] >= 0x21)
      {
        if (!a7)
        {
          uint64_t v44 = 0;
          id v21 = 0;
          id v22 = 0;
          __int16 v41 = v53;
LABEL_41:

LABEL_42:
          goto LABEL_43;
        }
        uint64_t v33 = SESDefaultLogObject();
        [v18 length];
        SESCreateAndLogError();
        id v34 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v35 = (void *)v33;
        uint64_t v52 = 0;
        id v21 = 0;
        id v22 = 0;
        *a7 = v34;
        goto LABEL_34;
      }
      [v18 length];
      [v18 bytes];
      uint64_t v52 = encodeItem();
      id v71 = [v52 DERItem];
      uint64_t v72 = v36;
    }
    else
    {
      uint64_t v52 = 0;
    }
    uint64_t v37 = sub_10003219C(45056, (uint64_t)buf, (uint64_t)&off_10040CDF0);
    uint64_t v35 = v37;
    if (!v37)
    {
      if (!a7)
      {
        id v21 = 0;
        id v22 = 0;
LABEL_34:
        __int16 v41 = v53;
LABEL_40:

        uint64_t v44 = v52;
        goto LABEL_41;
      }
      uint64_t v51 = 0;
      uint64_t v48 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v21 = 0;
      id v22 = 0;
      *a7 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v39 = (void *)v48;
      __int16 v41 = v53;
LABEL_39:

      uint64_t v35 = v51;
      goto LABEL_40;
    }
    id v50 = v25;
    uint64_t v51 = v37;
    id v58 = 0;
    uint64_t v38 = sub_100038A8C(v13, v14, v37, 1, &v58);
    id v21 = v58;
    uint64_t v39 = v38;
    if (!v21 && v38)
    {
      id v56 = [v38 DERItem];
      uint64_t v57 = v40;
      long long v55 = 0u;
      if (DERParseSequenceSpec())
      {
        if (a7)
        {
          uint64_t v47 = SESDefaultLogObject();
          uint64_t v46 = [v38 asHexString];
          SESCreateAndLogError();
          *a7 = (id)objc_claimAutoreleasedReturnValue();

          uint64_t v39 = v38;
LABEL_31:
          id v22 = 0;
          __int16 v41 = v53;
LABEL_38:
          id v25 = v50;
          goto LABEL_39;
        }
        id v22 = 0;
      }
      else
      {
        id v22 = +[NSData dataWithDERItem:&v55];
      }
      __int16 v41 = v53;
      uint64_t v39 = v38;
      goto LABEL_38;
    }
    if (a7)
    {
      uint64_t v49 = v38;
      uint64_t v42 = SESDefaultLogObject();
      uint64_t v43 = [v15 slot];
      [v43 number];
      SESCreateAndLogError();
      *a7 = (id)objc_claimAutoreleasedReturnValue();

      uint64_t v39 = v49;
    }
    goto LABEL_31;
  }
  id v21 = v20;
  if (a7)
  {
    id v21 = v20;
    id v22 = 0;
    *a7 = v21;
  }
  else
  {
    id v22 = 0;
  }
LABEL_43:

  return v22;
}

id sub_100037088(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  unsigned int v12 = sub_100033DBC(v9, v10);
  id v13 = SESDefaultLogObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    id v14 = [v11 key];
    id v15 = [v11 slot];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%@ %@", buf, 0x16u);
  }
  id v16 = [v11 slot];
  unsigned int v17 = [v16 synchronizable];

  if (v17 && v12 > 1)
  {
    id v18 = sub_100056638(v9, v10);
    if (v18)
    {
      id v19 = v18;
      id v20 = v19;
    }
    else
    {
      char v41 = 1;
      id v22 = [v11 slot];
      __int16 v23 = __rev16([v22 number]);

      __int16 v40 = v23;
      v39[0] = &v41;
      v39[1] = 1;
      v39[2] = &v40;
      v39[3] = 2;
      __int16 v24 = sub_10003219C(4097, (uint64_t)v39, (uint64_t)&off_10040CEC0);
      if (v24)
      {
        id v38 = 0;
        id v25 = sub_100038A8C(v9, v10, v24, 1, &v38);
        id v26 = v38;
        id v19 = v26;
        if (!v25 || v26)
        {
          id v20 = SESEnsureError();
        }
        else
        {
          long long v36 = 0u;
          long long v37 = 0u;
          if (DERParseSequenceSpec()
            || (v44 = 0u, v45 = 0u, long long v43 = 0u, memset(buf, 0, sizeof(buf)), DERParseSequenceSpecContent()))
          {
            id v27 = SESDefaultLogObject();
            id v28 = [v25 base64];
            id v20 = SESCreateAndLogError();
          }
          else
          {
            memset(v35, 0, sizeof(v35));
            if (DERDecodeItem((uint64_t)&v45, v35))
            {
              uint64_t v30 = SESDefaultLogObject();
              id v31 = [v25 base64];
              id v32 = (id)v30;
              id v20 = SESCreateAndLogError();
            }
            else
            {
              DERDecodeAdvance();
              id v32 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v33 = DERDecodeAdvance();
              id v31 = (id)v33;
              if (v32 && v33)
              {
                id v32 = v32;
                *a4 = v32;
                id v31 = v31;
                id v20 = 0;
                *a5 = v31;
              }
              else
              {
                id v34 = SESDefaultLogObject();
                id v20 = SESCreateAndLogError();
              }
            }
          }
        }
      }
      else
      {
        id v25 = SESDefaultLogObject();
        id v20 = SESCreateAndLogError();
        id v19 = 0;
      }
    }
  }
  else
  {
    id v21 = [v11 key];
    *a4 = [v21 assetACL];

    id v19 = [v11 key];
    [v19 assetACLAttestation];
    id v20 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v20;
}

id sub_10003757C(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  id v17 = a1;
  id v18 = a2;
  id v19 = a4;
  id v20 = a5;
  id v64 = a6;
  id v21 = a7;
  id v63 = a8;
  id v22 = a9;
  id v23 = a3;
  __int16 v24 = SESDefaultLogObject();
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "ptc_KeyAttestKey %@ %@", buf, 0x16u);
  }

  id v69 = 0;
  id v70 = 0;
  sub_10003509C(v17, v18, v20, v23, @"oa", &v70, &v69);
  id v25 = (id)objc_claimAutoreleasedReturnValue();

  id v26 = v70;
  id v62 = v69;
  if (!v25)
  {
    id v28 = v22;
    char v68 = 1;
    [v19 slot];
    uint64_t v30 = v29 = v26;
    id v61 = v21;
    __int16 v31 = __rev16([v30 number]);

    __int16 v67 = v31;
    id v32 = [v20 slot];
    __int16 v33 = __rev16([v32 number]);

    __int16 v66 = v33;
    id v21 = v61;
    id v34 = [v64 dataUsingEncoding:4];
    uint64_t v35 = [v61 dataUsingEncoding:4];
    *(void *)long long buf = &v68;
    *(void *)&uint8_t buf[8] = 1;
    *(void *)&uint8_t buf[16] = &v67;
    uint64_t v74 = 2;
    __int16 v75 = &v66;
    uint64_t v76 = 2;
    uint64_t v57 = v34;
    id v77 = [v34 DERItem];
    uint64_t v78 = v36;
    uint64_t v59 = v35;
    id v79 = [v35 DERItem];
    uint64_t v80 = v37;
    id v81 = 0;
    uint64_t v82 = 0;
    id v38 = [v19 key];
    id v83 = [v38 assetACLItem];
    uint64_t v84 = v39;
    __int16 v40 = [v19 key];
    id v85 = [v40 assetACLAttestationItem];
    uint64_t v86 = v41;
    uint64_t v60 = v29;
    id v87 = [v29 DERItem];
    uint64_t v88 = v42;
    id v89 = [v62 DERItem];
    uint64_t v90 = v43;
    id v91 = 0;
    uint64_t v92 = 0;

    if (v63)
    {
      id v81 = [v63 DERItem];
      uint64_t v82 = v44;
    }
    id v22 = v28;
    if (v28)
    {
      [v28 length];
      [v28 bytes];
      long long v45 = encodeItem();
      id v91 = [v45 DERItem];
      uint64_t v92 = v46;
    }
    else
    {
      long long v45 = 0;
    }
    uint64_t v47 = sub_10003219C(45057, (uint64_t)buf, (uint64_t)&off_10040CE10);
    id v58 = v45;
    if (v47)
    {
      uint64_t v48 = SESDefaultLogObject();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v49 = [v47 asHexString];
        *(_DWORD *)id v71 = 138412290;
        *(void *)&v71[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "KeyAttestKeyCommandData : %@", v71, 0xCu);
      }
      id v65 = 0;
      id v50 = sub_100038A8C(v17, v18, v47, 1, &v65);
      id v25 = v65;
      if (v25 || !v50)
      {
        if (a10)
        {
          uint64_t v51 = SESDefaultLogObject();
          uint64_t v52 = [v19 slot];
          [v52 number];
          SESCreateAndLogError();
          *a10 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      else
      {
        [v50 DERItem];
        *(_OWORD *)id v71 = 0u;
        long long v72 = 0u;
        if (!DERParseSequenceSpec())
        {
          id v27 = +[NSData dataWithDERItem:&v72];
          goto LABEL_25;
        }
        if (a10)
        {
          id v56 = SESDefaultLogObject();
          long long v55 = [v50 asHexString];
          SESCreateAndLogError();
          *a10 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      id v27 = 0;
    }
    else
    {
      if (!a10)
      {
        id v25 = 0;
        id v27 = 0;
        uint64_t v53 = v57;
        goto LABEL_26;
      }
      id v50 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v25 = 0;
      id v27 = 0;
      *a10 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_25:
    uint64_t v53 = v57;

    id v21 = v61;
LABEL_26:

    id v26 = v60;
    goto LABEL_27;
  }
  if (a10)
  {
    id v25 = v25;
    id v27 = 0;
    *a10 = v25;
  }
  else
  {
    id v27 = 0;
  }
LABEL_27:

  return v27;
}

id sub_100037B64(void *a1, void *a2, void *a3, unsigned int a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = SESDefaultLogObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "ptc_LoadKey %@", (uint8_t *)&buf, 0xCu);
  }

  char v23 = 1;
  __int16 v22 = __rev16(a4);
  *(void *)&long long buf = &v23;
  *((void *)&buf + 1) = 1;
  id v25 = &v22;
  uint64_t v26 = 2;
  id v27 = [v9 keyBlobItem];
  uint64_t v28 = v11;
  id v29 = [v9 encryptedWrappedKeyBlobItem];
  uint64_t v30 = v12;
  id v31 = [v9 assetACLItem];
  uint64_t v32 = v13;
  id v33 = [v9 assetACLAttestationItem];
  uint64_t v34 = v14;
  id v15 = sub_10003219C(4096, (uint64_t)&buf, (uint64_t)&off_10040CD50);
  if (v15)
  {
    id v21 = 0;
    id v16 = sub_100038A8C(v7, v8, v15, 1, &v21);
    id v17 = v21;
    if (v17)
    {
      id v18 = SESDefaultLogObject();
      id v19 = SESCreateAndLogError();
    }
    else
    {
      id v19 = 0;
    }
  }
  else
  {
    SESDefaultLogObject();
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    id v19 = SESCreateAndLogError();
  }

  return v19;
}

id sub_100037D98(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = SESDefaultLogObject();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = [v13 key];
    id v18 = [v13 slot];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v17;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Exporting key %@ slot %@", buf, 0x16u);
  }
  id v32 = 0;
  id v33 = 0;
  id v19 = sub_10003509C(v11, v12, v13, v15, @"os", &v33, &v32);

  id v20 = v33;
  id v21 = v32;
  if (v19)
  {
    __int16 v22 = 0;
    if (a6) {
      *a6 = v19;
    }
  }
  else
  {
    char v23 = [v13 slot];
    __int16 v24 = __rev16([v23 number]);

    __int16 v31 = v24;
    *(void *)long long buf = &v31;
    *(void *)&uint8_t buf[8] = 2;
    *(void *)&uint8_t buf[16] = [v14 DERItem];
    uint64_t v35 = v25;
    id v36 = [v20 DERItem];
    uint64_t v37 = v26;
    id v38 = [v21 DERItem];
    uint64_t v39 = v27;
    uint64_t v28 = sub_10003219C(53249, (uint64_t)buf, (uint64_t)&off_10040CE90);
    if (v28)
    {
      __int16 v22 = sub_100038A8C(v11, v12, v28, 1, a6);
    }
    else
    {
      if (a6)
      {
        id v29 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a6 = (id)objc_claimAutoreleasedReturnValue();
      }
      __int16 v22 = 0;
    }
  }

  return v22;
}

BOOL sub_100038048(void *a1, void *a2, unsigned int a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a4;
  id v12 = SESDefaultLogObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "into slot 0x%x", buf, 8u);
  }

  __int16 v20 = __rev16(a3);
  *(void *)long long buf = &v20;
  uint64_t v22 = 2;
  id v13 = [v11 DERItem];
  uint64_t v15 = v14;

  id v23 = v13;
  uint64_t v24 = v15;
  id v16 = sub_10003219C(53250, (uint64_t)buf, (uint64_t)&off_10040CEA0);
  if (v16)
  {
    id v17 = sub_100038A8C(v9, v10, v16, 1, a5);
    BOOL v18 = v17 != 0;
  }
  else
  {
    if (!a5)
    {
      BOOL v18 = 0;
      goto LABEL_8;
    }
    id v17 = SESDefaultLogObject();
    SESCreateAndLogError();
    BOOL v18 = 0;
    *a5 = (id)objc_claimAutoreleasedReturnValue();
  }

LABEL_8:
  return v18;
}

id sub_1000381F8(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  CFDataRef v15 = a5;
  id v16 = SESDefaultLogObject();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "", (uint8_t *)&buf, 2u);
  }

  if (v12 && v13 && v14 && v15)
  {
    id v58 = 0;
    id v59 = 0;
    CFDataRef v57 = 0;
    sub_100038778(v11, v12, v14, v13, @"oacl", &v59, &v58, &v57);
    id v17 = (id)objc_claimAutoreleasedReturnValue();
    id v18 = v59;
    id v19 = v58;
    CFDataRef v20 = v57;
    CFDataRef v51 = v20;
    if (v17)
    {
      if (a6)
      {
        id v17 = v17;
        uint64_t v22 = 0;
        *a6 = v17;
      }
      else
      {
        uint64_t v22 = 0;
      }
      goto LABEL_36;
    }
    CFDataRef v23 = v20;
    id v50 = v19;
    long long v55 = 0;
    id v56 = 0;
    uint64_t v24 = sub_100056FD0(v11, v21);
    CFDataRef v25 = [v24 seid];
    LODWORD(v23) = SSECreateSecureElementACLRequest(-1, v25, v15, v23, &v56, &v55);

    if (v23)
    {
      if (!a6)
      {
        id v17 = 0;
        uint64_t v22 = 0;
        id v19 = v50;
LABEL_36:

        goto LABEL_37;
      }
      id v49 = v18;
      uint64_t v26 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v17 = 0;
      uint64_t v22 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      id v19 = v50;
LABEL_35:

      id v18 = v49;
      goto LABEL_36;
    }
    uint64_t v27 = v56;
    uint64_t v48 = v55;
    id v49 = v18;
    uint64_t v28 = SESDefaultLogObject();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      id v29 = [(__CFData *)v27 asHexString];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "AssetACLRequest : %@", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v47 = v27;

    uint64_t v30 = SESDefaultLogObject();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      __int16 v31 = [(__CFData *)v48 asHexString];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "assetACLRequestAttestation : %@", (uint8_t *)&buf, 0xCu);
    }
    char v54 = 1;
    id v32 = [v14 slot];
    __int16 v33 = __rev16([v32 number]);

    __int16 v53 = v33;
    *(void *)&long long buf = &v54;
    *((void *)&buf + 1) = 1;
    id v61 = &v53;
    uint64_t v62 = 2;
    id v63 = [(__CFData *)v47 DERItem];
    uint64_t v64 = v34;
    id v65 = [(__CFData *)v48 DERItem];
    uint64_t v66 = v35;
    id v67 = [v18 DERItem];
    uint64_t v68 = v36;
    id v19 = v50;
    id v69 = [v50 DERItem];
    uint64_t v70 = v37;
    id v38 = sub_10003219C(53251, (uint64_t)&buf, (uint64_t)&off_10040CEB0);
    if (v38)
    {
      id v52 = 0;
      uint64_t v39 = sub_100038A8C(v11, v12, v38, 0, &v52);
      id v17 = v52;
      id v40 = (id)v39;
      if (v17 || !v39)
      {
        if (a6)
        {
          uint64_t v46 = (void *)v39;
          uint64_t v44 = SESDefaultLogObject();
          uint64_t v41 = v38;
          uint64_t v43 = [v38 asHexString];
          id v19 = v50;
          SESCreateAndLogError();
          *a6 = (id)objc_claimAutoreleasedReturnValue();

          id v40 = v46;
        }
        else
        {
          uint64_t v41 = v38;
        }
        uint64_t v22 = 0;
      }
      else
      {
        uint64_t v41 = v38;
        id v40 = v40;
        uint64_t v22 = v40;
      }
    }
    else
    {
      uint64_t v41 = 0;
      if (!a6)
      {
        id v17 = 0;
        uint64_t v22 = 0;
LABEL_34:

        uint64_t v26 = v47;
        goto LABEL_35;
      }
      uint64_t v45 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v17 = 0;
      uint64_t v22 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      id v40 = (id)v45;
    }

    goto LABEL_34;
  }
  if (!a6)
  {
    uint64_t v22 = 0;
    goto LABEL_38;
  }
  SESDefaultLogObject();
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  uint64_t v22 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_37:

LABEL_38:

  return v22;
}

id sub_100038778(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, const __CFData **a8)
{
  id v15 = a1;
  id v16 = a2;
  CFDataRef v17 = a4;
  id v18 = a5;
  id v50 = 0;
  id v51 = 0;
  sub_100037088(v15, v16, a3, &v51, &v50);
  id v19 = (id)objc_claimAutoreleasedReturnValue();
  CFDataRef v20 = (const __CFData *)v51;
  CFDataRef v21 = (const __CFData *)v50;
  CFDataRef v22 = v21;
  if (!v19 && v20 && v21)
  {
    uint64_t v45 = a6;
    uint64_t v46 = a7;
    unsigned int v23 = sub_100033DBC(v15, v16);
    CFDataRef v25 = sub_100056FD0(v15, v24);
    id v26 = [v25 type];

    if (v26 == (id)4 && v23 <= 2)
    {
      uint64_t v27 = SESDefaultLogObject();
      uint64_t v28 = SESCreateAndLogError();

      goto LABEL_20;
    }
    id v49 = 0;
    id v29 = sub_100033EB8(v15, v16, &v49);
    id v19 = v49;
    if (v19 || !v29)
    {
      uint64_t v28 = SESEnsureError();
    }
    else
    {
      uint64_t v44 = v29;
      CFDataRef v30 = v29;
      *a8 = v30;
      id v32 = sub_100056FD0(v15, v31);
      id v33 = [v32 type];

      id v47 = 0;
      id v48 = 0;
      uint64_t v35 = sub_100056FD0(v15, v34);
      CFDataRef v36 = [v35 seid];
      if ((unint64_t)v33 <= 3) {
        unsigned int v37 = 1;
      }
      else {
        unsigned int v37 = 2;
      }
      int v38 = SSEEvaluateSecureElementACL(v17, -1, v36, v20, v22, v18, v30, v37, (const __CFData **)&v48, (const __CFData **)&v47);

      void *v45 = v48;
      void *v46 = v47;
      if (v38)
      {
        uint64_t v39 = SESDefaultLogObject();
        id v40 = [(__CFData *)v20 asHexString];
        uint64_t v43 = [(__CFData *)v22 asHexString];
        uint64_t v41 = (void *)v39;
        uint64_t v28 = SESCreateAndLogError();
      }
      else
      {
        uint64_t v28 = 0;
      }
      id v19 = 0;
      id v29 = v44;
    }
  }
  else
  {
    uint64_t v28 = SESEnsureError();
  }

LABEL_20:

  return v28;
}

id sub_100038A8C(void *a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = sub_100056638(v9, v10);
  if (!v12)
  {
    id v49 = v10;
    id v50 = a5;
    sub_100033DBC(v9, v10);
    id v47 = v9;
    id v51 = v9;
    id v48 = v11;
    id v15 = v11;
    id v16 = v15;
    if (a4) {
      unint64_t v17 = 700;
    }
    else {
      unint64_t v17 = 255;
    }
    id v18 = [v15 length];
    if (v18)
    {
      unint64_t v19 = (unint64_t)v18;
      CFDataRef v20 = 0;
      uint64_t v21 = 0;
      while (1)
      {
        unint64_t v22 = v19 >= v17 ? v17 : v19;
        if (v21 || (id)v22 != [v16 length])
        {
          [v16 subdataWithRange:v21, v22];
          id v23 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v23 = v16;
        }
        uint64_t v24 = v23;
        if (a4)
        {
          id v53 = 0;
          CFDataRef v25 = &v53;
          sub_100056504(v51, 128, 160, (v19 < 0x2BD) << 7, 0, v23, 0, &v53);
        }
        else
        {
          uint64_t v52 = 0;
          CFDataRef v25 = (id *)&v52;
          sub_100056348(v51, 128, 160, (v19 < 0x100) << 7, 0, v23, 0, &v52);
        }
        id v26 = (id)objc_claimAutoreleasedReturnValue();
        id v27 = *v25;

        if (v27 || v26 == 0) {
          break;
        }
        v21 += v22;
        v19 -= v22;

        CFDataRef v20 = v26;
        if (!v19) {
          goto LABEL_27;
        }
      }
      __int16 v31 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v29 = (id)objc_claimAutoreleasedReturnValue();

      CFDataRef v30 = 0;
    }
    else
    {
      id v26 = 0;
LABEL_27:
      id v26 = v26;
      id v29 = 0;
      CFDataRef v30 = v26;
    }

    id v13 = v29;
    if (v13 || !v30)
    {
      id v9 = v47;
      if (!v50)
      {
        id v14 = 0;
        id v11 = v48;
        id v10 = v49;
LABEL_53:

        goto LABEL_54;
      }
      SESDefaultLogObject();
      id v41 = (id)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      id v14 = 0;
      void *v50 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v32 = v51;
      id v33 = v30;
      uint64_t v34 = sub_10005D558(v33);
      id v35 = [v34 mutableCopy];

      for (int i = sub_10005D5A8((uint64_t)v33) & 0xFF00; ; int i = sub_10005D5A8((uint64_t)v33) & 0xFF00)
      {
        if (i != 25344)
        {
          id v41 = v35;
          id v42 = 0;
          goto LABEL_43;
        }
        unsigned int v37 = v33;
        id v53 = 0;
        sub_100056504(v32, 128, 176, 0, 0, 0, 0, &v53);
        id v33 = (id *)objc_claimAutoreleasedReturnValue();
        id v38 = v53;

        if (v38 || v33 == 0) {
          break;
        }
        id v40 = sub_10005D558(v33);
        [v35 appendData:v40];
      }
      uint64_t v43 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v42 = (id)objc_claimAutoreleasedReturnValue();

      id v41 = 0;
LABEL_43:
      id v9 = v47;

      id v13 = v42;
      if (v13) {
        BOOL v44 = 1;
      }
      else {
        BOOL v44 = v41 == 0;
      }
      if (v44)
      {
        id v11 = v48;
        id v10 = v49;
        if (v50)
        {
          uint64_t v45 = SESDefaultLogObject();
          SESCreateAndLogError();
          void *v50 = (id)objc_claimAutoreleasedReturnValue();
        }
        id v14 = 0;
        goto LABEL_52;
      }
      id v41 = v41;
      id v14 = v41;
    }
    id v11 = v48;
    id v10 = v49;
LABEL_52:

    goto LABEL_53;
  }
  id v13 = v12;
  if (a5)
  {
    id v13 = v12;
    id v14 = 0;
    *a5 = v13;
  }
  else
  {
    id v14 = 0;
  }
LABEL_54:

  return v14;
}

uint64_t sub_100038F1C(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a1;
  id v9 = +[NSNumber numberWithUnsignedShort:a3];
  id v17 = 0;
  id v10 = sub_100032280(v8, v7, @"ForceTransitionToPersonalized", v9, 0, 0, &v17);
  id v11 = v17;

  if (v10) {
    BOOL v12 = v11 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  uint64_t v13 = v12;
  id v14 = sub_100034168(v8, v7, a3);

  id v15 = SESDefaultLogObject();
  if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109634;
    int v19 = v13;
    __int16 v20 = 2112;
    id v21 = v11;
    __int16 v22 = 2112;
    id v23 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "result %d creationError %@ cleanupError %@", buf, 0x1Cu);
  }

  if (a4) {
    *a4 = v11;
  }

  return v13;
}

int sub_1000390AC(id a1, $82BA0F2068700BDE7EB192079FA08E63 *a2, BOOL *a3)
{
  if (a2->var0 == 0xA00000000000000ALL && a2->var1.var1 >= 4)
  {
    unsigned int v4 = *(_DWORD *)a2->var1.var0;
    unsigned int v5 = bswap32(v4);
    id v6 = SESDefaultLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v9[0] = 67109120;
      v9[1] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Got raw PTC Applet Version 0x%X", (uint8_t *)v9, 8u);
    }

    if (v4 == 0x4000000) {
      int v7 = 3;
    }
    else {
      int v7 = 4;
    }
    if (v4 == 50331648) {
      int v7 = 2;
    }
    if (v5 < 3) {
      int v7 = 1;
    }
    dword_10045CCCC = v7;
    *a3 = 1;
  }
  return 0;
}

id sub_10003929C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = objc_opt_new();
  unsigned int v4 = [v2 userInfo];
  unsigned int v5 = [v4 objectForKeyedSubscript:&off_10042DD98];
  id v6 = [v5 copy];
  int v7 = *(void **)(v3 + 24);
  *(void *)(v3 + 24) = v6;

  id v8 = [v2 valueForEntitlement:@"com.apple.seserviced.seendpoints"];
  *(unsigned char *)(v3 + 9) = v8 != 0;

  id v9 = [v2 valueForEntitlement:@"com.apple.seserviced.seendpoints.certificateauthorities"];
  *(unsigned char *)(v3 + 10) = v9 != 0;

  id v10 = [v2 valueForEntitlement:@"com.apple.seserviced.key"];
  *(unsigned char *)(v3 + 8) = v10 != 0;

  id v11 = [v2 valueForEntitlement:@"com.apple.seserviced.key.legacykey"];
  *(unsigned char *)(v3 + 13) = v11 != 0;

  BOOL v12 = [v2 valueForEntitlement:@"com.apple.internal.seserviced.all.endpoints.and.cas"];
  *(unsigned char *)(v3 + 11) = v12 != 0;

  uint64_t v13 = [v2 valueForEntitlement:@"com.apple.seserviced.key"];
  *(unsigned char *)(v3 + 12) = v13 != 0;

  id v14 = [v2 valueForEntitlement:@"com.apple.internal.seserviced.ptattestation"];
  *(unsigned char *)(v3 + 14) = v14 != 0;

  id v15 = [v2 valueForEntitlement:@"com.apple.internal.seserviced.fido"];
  *(unsigned char *)(v3 + 15) = v15 != 0;

  id v16 = [v2 valueForEntitlement:@"com.apple.private.seserviced.sesprivacykey"];

  *(unsigned char *)(v3 + 16) = v16 != 0;

  return (id)v3;
}

id sub_100039480(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 24, 1);
  }
  return result;
}

uint64_t sub_100039494(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 9) & 1;
  }
  return result;
}

uint64_t sub_1000394A4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 10) & 1;
  }
  return result;
}

uint64_t sub_1000394B4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 11) & 1;
  }
  return result;
}

uint64_t sub_1000394C4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 12) & 1;
  }
  return result;
}

uint64_t sub_1000394D4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 13) & 1;
  }
  return result;
}

uint64_t sub_1000394E4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 14) & 1;
  }
  return result;
}

uint64_t sub_1000394F4(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 15) & 1;
  }
  return result;
}

uint64_t sub_100039504(uint64_t result)
{
  if (result) {
    return *(unsigned char *)(result + 16) & 1;
  }
  return result;
}

void *sub_100039564(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)SESServer;
    id v6 = [super initWithMachServiceName:a2];
    int v7 = v6;
    if (v6)
    {
      [v6 setDelegate:v6];
      id v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      id v9 = dispatch_queue_attr_make_with_qos_class(v8, QOS_CLASS_DEFAULT, 0);

      dispatch_queue_t v10 = dispatch_queue_create("com.apple.seserviced.messagequeue", v9);
      id v11 = (void *)v7[2];
      v7[2] = v10;

      BOOL v12 = [v7 messageQueue];
      uint64_t v13 = sub_1000191A4((uint64_t)SESDatabase, v5, v12);
      id v14 = (void *)v7[3];
      void v7[3] = v13;
    }
  }
  else
  {
    int v7 = 0;
  }

  return v7;
}

void sub_100039FD8(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = *(_DWORD *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    v5[0] = 67109378;
    v5[1] = v3;
    __int16 v6 = 2112;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Connection to PID %d (%@) has been invalidated", (uint8_t *)v5, 0x12u);
  }
}

void sub_10003A090(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    int v3 = *(_DWORD *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32);
    v5[0] = 67109378;
    v5[1] = v3;
    __int16 v6 = 2112;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Connection to PID %d (%@) has been interrupted", (uint8_t *)v5, 0x12u);
  }
}

void sub_10003A2E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) database];
  sub_10001A3F4(v2);

  int v3 = [*(id *)(a1 + 32) database];
  id v18 = 0;
  uint64_t v4 = sub_100040A3C((uint64_t)v3, &v18);
  id v5 = v18;

  if (v5)
  {
    __int16 v6 = SESDefaultLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to retrieve endpoints", buf, 2u);
    }
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v7 = v4;
  id v8 = [v7 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v14;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v7);
        }
        +[EndpointStore insertWithEndpoint:](_TtC10seserviced13EndpointStore, "insertWithEndpoint:", *(void *)(*((void *)&v13 + 1) + 8 * (void)v11), (void)v13);
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v9);
  }

  BOOL v12 = [*(id *)(a1 + 32) messageQueue];
  sub_10003BBC4((uint64_t)SESAppletLockStateMonitor, v12, *(void **)(*(void *)(a1 + 32) + 8));

  sub_1000637D8();
  sub_10003A4C8(*(uint64_t **)(a1 + 32));
}

void sub_10003A4C8(uint64_t *a1)
{
  if (a1)
  {
    id v2 = [a1 messageQueue];
    dispatch_assert_queue_V2(v2);

    id v3 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
    if (([v3 BOOLForKey:@"SignatureCertificatePKsHaveBeenFixed"] & 1) == 0)
    {
      uint64_t v4 = SESDefaultLogObject();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Fixing signature certificate PKs", buf, 2u);
      }

      *(void *)long long buf = 0;
      uint64_t v24 = buf;
      uint64_t v25 = 0x3032000000;
      id v26 = sub_10003AD28;
      id v27 = sub_10003AD38;
      sub_100019850(a1[3]);
      id v28 = (id)objc_claimAutoreleasedReturnValue();
      id v5 = (id *)(v24 + 40);
      if (!*((void *)v24 + 5))
      {
        uint64_t v6 = a1[3];
        id obj = 0;
        id v7 = sub_10005D7F8(v6, @"A000000809434343444B417631", &obj);
        objc_storeStrong(v5, obj);
        if (*((void *)v24 + 5))
        {
          id v8 = SESDefaultLogObject();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *((void *)v24 + 5);
            *(_DWORD *)id v29 = 138412290;
            uint64_t v30 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get instance entity %@", v29, 0xCu);
          }
        }
        else
        {
          uint64_t v10 = objc_opt_new();
          id v11 = [v7 endPoints];
          uint64_t v12 = a1[3];
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          void v17[2] = sub_10003AD40;
          id v17[3] = &unk_10040D218;
          id v13 = v11;
          id v18 = v13;
          int v19 = a1;
          id v8 = v10;
          __int16 v20 = v8;
          id v21 = buf;
          sub_10001A33C(v12, v17);
          if (*((void *)v24 + 5))
          {
            long long v14 = SESDefaultLogObject();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              uint64_t v15 = *((void *)v24 + 5);
              *(_DWORD *)id v29 = 138412290;
              uint64_t v30 = v15;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to fix signature certificate PKs %@", v29, 0xCu);
            }
          }
          else
          {
            long long v16 = SESDefaultLogObject();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)id v29 = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Signature certificate PKs have been fixed", v29, 2u);
            }

            [v3 setBool:1 forKey:@"SignatureCertificatePKsHaveBeenFixed"];
          }
        }
      }
      _Block_object_dispose(buf, 8);
    }
  }
}

void sub_10003A834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003A868(id a1)
{
}

void sub_10003A874(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "-[SESServer onFirstUnlock]_block_invoke_2");
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10003A944;
  void v6[3] = &unk_10040D1C8;
  v6[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v5 = v3;
  sub_100058540((uint64_t)SecureElementManager, v4, v6);
}

void sub_10003A944(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!a3)
  {
    uint64_t v6 = [*(id *)(a1 + 32) messageQueue];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10003AA10;
    void v7[3] = &unk_10040D1A0;
    id v8 = v5;
    id v9 = *(id *)(a1 + 40);
    dispatch_async(v6, v7);
  }
}

void sub_10003AA10(uint64_t a1)
{
  uint64_t v2 = sub_100016A04(*(void **)(a1 + 32), *(void **)(a1 + 40));
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = SESDefaultLogObject();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
LABEL_5:

LABEL_6:
      return;
    }
    *(_DWORD *)long long buf = 138412290;
    long long v16 = v3;
    id v5 = "Not starting DSK due to failed applet personalization %@";
LABEL_4:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v5, buf, 0xCu);
    goto LABEL_5;
  }
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = [@"A000000704E000000000" hexStringAsData];
  LOBYTE(v6) = sub_100056C08(v6, v7);

  if ((v6 & 1) == 0)
  {
    id v3 = SESDefaultLogObject();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Not starting DSK due to missing Sunsprite", buf, 2u);
    }
    goto LABEL_6;
  }
  uint64_t v8 = sub_100017D1C(*(void **)(a1 + 32), 0, *(void **)(a1 + 40));
  if (v8)
  {
    id v3 = v8;
    uint64_t v4 = SESDefaultLogObject();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      goto LABEL_5;
    }
    *(_DWORD *)long long buf = 138412290;
    long long v16 = v3;
    id v5 = "Not starting DSK due to failed Sunsprite provisioning %@";
    goto LABEL_4;
  }
  unsigned __int8 v9 = +[EndpointStore containsWithFilter:&stru_10040D138];
  unsigned int v10 = +[EndpointStore containsWithFilter:&stru_10040D158];
  char v11 = v10;
  if ((v9 & 1) != 0 || v10)
  {
    id v3 = +[DSK queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10003AC88;
    block[3] = &unk_10040D178;
    unsigned __int8 v13 = v9;
    char v14 = v11;
    dispatch_async(v3, block);
    goto LABEL_6;
  }
}

BOOL sub_10003AC40(id a1, SEEndPoint *a2)
{
  return [(SEEndPoint *)a2 endPointType] == (id)1;
}

BOOL sub_10003AC64(id a1, SEEndPoint *a2)
{
  return [(SEEndPoint *)a2 endPointType] == (id)4;
}

void sub_10003AC88(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = +[DSK shared];
    [v2 startWithModule:0];
  }
  if (*(unsigned char *)(a1 + 33))
  {
    id v3 = +[DSK shared];
    [v3 startWithModule:1];
  }
}

uint64_t sub_10003AD28(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10003AD38(uint64_t a1)
{
}

void sub_10003AD40(uint64_t a1, void *a2)
{
  id v37 = a2;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v42 = [v3 countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v42)
  {
    uint64_t v4 = *(void *)v46;
    id v5 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
    uint64_t v38 = a1;
    uint64_t v39 = *(void *)v46;
    id v40 = v3;
    do
    {
      for (int i = 0; i != v42; int i = (char *)i + 1)
      {
        if (*(void *)v46 != v4) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        uint64_t v8 = *(void *)(*(void *)(a1 + 40) + *((int *)v5 + 890));
        id v44 = 0;
        unsigned __int8 v9 = sub_100040964(v8, v7, &v44);
        id v10 = v44;
        char v11 = SESDefaultLogObject();
        uint64_t v12 = v11;
        if (!v10)
        {
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v15 = [v9 publicKeyIdentifier];
            long long v16 = [v15 asHexString];
            *(_DWORD *)long long buf = 138412290;
            id v50 = v16;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Fixing endpoint %@", buf, 0xCu);
          }
          id v17 = objc_alloc((Class)KmlRoutingInformation);
          id v18 = [v9 readerInfo];
          uint64_t v12 = [v17 initWithReaderInformation:v18];

          int v19 = [v12 regionString];
          if ([v19 length] != (id)3)
          {
            __int16 v20 = SESDefaultLogObject();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v50 = v19;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Invalid region %@", buf, 0xCu);
            }
            id v10 = 0;
            goto LABEL_31;
          }
          __int16 v20 = [v19 substringWithRange:2, 1];
          uint64_t v21 = [v19 substringToIndex:2];

          __int16 v22 = *(void **)(a1 + 48);
          id v23 = [v12 manufacturer];
          id v43 = 0;
          uint64_t v24 = [v22 getSignatureCertificateFor:v23 environment:v20 region:v21 error:&v43];
          id v10 = v43;

          id v41 = (void *)v24;
          if (v10)
          {
            uint64_t v25 = SESDefaultLogObject();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 138412290;
              id v50 = v10;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to retrieve signature certificate %@", buf, 0xCu);
            }
            id v3 = v40;
LABEL_30:

            int v19 = (void *)v21;
            uint64_t v4 = v39;
LABEL_31:

            id v5 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
            goto LABEL_32;
          }
          uint64_t v25 = getCertificatePublicKey();
          if (v25)
          {
            id v26 = [v7 signatureVerificationPK];
            unsigned int v27 = [v25 isEqualToData:v26];

            if (v27)
            {
              id v28 = SESDefaultLogObject();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                id v29 = [v9 publicKeyIdentifier];
                uint64_t v30 = [v29 asHexString];
                *(_DWORD *)long long buf = 138412290;
                id v50 = v30;
                __int16 v31 = v28;
                id v32 = "Nothing to fix for %@";
                goto LABEL_27;
              }
            }
            else
            {
              [v7 setSignatureVerificationPK:v25];
              id v28 = SESDefaultLogObject();
              if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
              {
                id v29 = [v9 publicKeyIdentifier];
                uint64_t v30 = [v29 asHexString];
                *(_DWORD *)long long buf = 138412290;
                id v50 = v30;
                __int16 v31 = v28;
                id v32 = "Fixed signature certificate PK for %@";
LABEL_27:
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, v32, buf, 0xCu);
              }
            }
            a1 = v38;
          }
          else
          {
            id v28 = SESDefaultLogObject();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
            {
              id v33 = [v41 base64];
              *(_DWORD *)long long buf = 138412290;
              id v50 = v33;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to retrieve PK %@", buf, 0xCu);
            }
          }
          id v3 = v40;

          goto LABEL_30;
        }
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          unsigned __int8 v13 = [v9 publicKeyIdentifier];
          char v14 = [v13 asHexString];
          *(_DWORD *)long long buf = 138412546;
          id v50 = v14;
          __int16 v51 = 2112;
          id v52 = v10;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Failed to get endpoint %@ %@", buf, 0x16u);
        }
LABEL_32:
      }
      id v42 = [v3 countByEnumeratingWithState:&v45 objects:v53 count:16];
    }
    while (v42);
  }

  uint64_t v34 = sub_100030AE4((uint64_t)v37);
  uint64_t v35 = *(void *)(*(void *)(a1 + 56) + 8);
  CFDataRef v36 = *(void **)(v35 + 40);
  *(void *)(v35 + 40) = v34;
}

void sub_10003B4AC(uint64_t a1)
{
  if (MKBDeviceUnlockedSinceBoot())
  {
    uint64_t v2 = *(void *)(a1 + 32);
    -[FirstUnlockHandler onDarwinNotification:]_0(v2);
  }
}

void sub_10003B4F4()
{
  v0 = SESDefaultLogObject();
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Kicking off first unlock actions", buf, 2u);
  }

  [(id)qword_10045CCE8 onFirstUnlock];
  +[SEKeySyncManager kickOff];
  id v4 = 0;
  +[SESAssetManager kickOffAndReturnError:&v4];
  id v1 = v4;
  if (v1)
  {
    uint64_t v2 = SESDefaultLogObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v6 = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to start asset manager %@", buf, 0xCu);
    }
  }
  [(id)qword_10045CCD0 handleFirstUnlock];
  [(id)qword_10045CCF0 start];
  PLLogRegisteredEvent();
  +[SECNotificationListener kickOff];
  +[SECReportManager kickOff];
  if (SESInternalVariant())
  {
    *(_DWORD *)long long buf = 0;
    id v3 = dispatch_get_global_queue(21, 0);
    notify_register_dispatch("seserviced.debug.request.ttr", (int *)buf, v3, &stru_10040D258);
  }
  +[SecureElementVersionTTR kickoff];
}

uint64_t start()
{
  id v1 = SESDefaultLogObject();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    LOWORD(v28[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Starting ... ", (uint8_t *)v28, 2u);
  }

  for (uint64_t i = 0; i != 4; ++i)
  {
    uintptr_t v3 = dword_100377630[i];
    signal(dword_100377630[i], (void (__cdecl *)(int))1);
    dispatch_source_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v3, 0, 0);
    dispatch_source_t v5 = qword_10045CD10[i];
    qword_10045CD10[i] = v4;

    dispatch_set_context(qword_10045CD10[i], (void *)v3);
    dispatch_source_set_event_handler_f(qword_10045CD10[i], (dispatch_function_t)sub_10003BA0C);
    dispatch_resume(qword_10045CD10[i]);
  }
  +[SESDarwinNotificationMonitor kickoff];
  +[SESAlarm kickoff];
  +[SESXPCEventListener kickoff];
  +[SESDarwinNotificationMonitor kickoff];
  +[JPKIXPCServer kickOff];
  uint64_t v6 = +[SESServer server];
  id v7 = (void *)qword_10045CCE8;
  qword_10045CCE8 = v6;

  uint64_t v8 = +[_SESSessionManager sessionManager];
  unsigned __int8 v9 = (void *)qword_10045CCF0;
  qword_10045CCF0 = v8;

  uint64_t v10 = +[KeyManagementLibrary sharedLibrary];
  char v11 = (void *)qword_10045CCD0;
  qword_10045CCD0 = v10;

  [(id)qword_10045CCE8 setSESServerDelegate:qword_10045CCD0];
  [(id)qword_10045CCE8 start];
  [(id)qword_10045CCD0 startService];
  uint64_t v12 = objc_opt_new();
  unsigned __int8 v13 = (void *)qword_10045CCD8;
  qword_10045CCD8 = v12;

  [(id)qword_10045CCD8 resume];
  uint64_t v14 = objc_opt_new();
  uint64_t v15 = (void *)qword_10045CCE0;
  qword_10045CCE0 = v14;

  [(id)qword_10045CCE0 resume];
  uint64_t v16 = objc_opt_new();
  id v17 = (void *)qword_10045CCF8;
  qword_10045CCF8 = v16;

  [(id)qword_10045CCF8 resume];
  if (MKBDeviceUnlockedSinceBoot())
  {
    sub_10003B4F4();
  }
  else
  {
    uint64_t v18 = objc_opt_new();
    int v19 = (void *)qword_10045CD08;
    qword_10045CD08 = v18;
  }
  if (SESInternalVariant())
  {
    id v20 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
    [v20 doubleForKey:@"debug.boost.log.interval.sec"];
    if (v21 > 0.0)
    {
      double v22 = v21;
      id v23 = [SESTimer alloc];
      uint64_t v24 = [(id)qword_10045CCE8 messageQueue];
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      void v28[2] = sub_10003BAC4;
      v28[3] = &unk_10040D278;
      *(double *)&v28[4] = v22;
      uint64_t v25 = sub_100052804((NSObject **)v23, v24, v28);
      id v26 = (void *)qword_10045CD00;
      qword_10045CD00 = (uint64_t)v25;

      sub_1000529D8(qword_10045CD00, v22);
    }
  }
  CFRunLoopRun();
  return 0;
}

void sub_10003B9F4(id a1, int a2)
{
}

void sub_10003BA0C(int a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Received signal: %d", (uint8_t *)v4, 8u);
  }

  [(id)qword_10045CCD0 stopService];
  Main = CFRunLoopGetMain();
  CFRunLoopStop(Main);
}

void sub_10003BAC4(uint64_t a1)
{
  uint64_t v8 = 0;
  memset(buffer, 0, sizeof(buffer));
  pid_t v2 = getpid();
  unsigned int v3 = proc_pidinfo(v2, 3, 0, buffer, 136);
  dispatch_source_t v4 = SESDefaultLogObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = (LODWORD(buffer[0]) >> 21) & 1;
    if (v3 <= 0x87) {
      int v5 = -1;
    }
    v6[0] = 67109120;
    v6[1] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Boosted %d", (uint8_t *)v6, 8u);
  }

  sub_1000529D8(qword_10045CD00, *(double *)(a1 + 32));
}

void sub_10003BBC4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_10003BCA4;
  v9[3] = &unk_10040D1A0;
  id v10 = v4;
  id v11 = v5;
  uint64_t v6 = qword_10045CD38;
  id v7 = v5;
  id v8 = v4;
  if (v6 != -1) {
    dispatch_once(&qword_10045CD38, v9);
  }
}

void sub_10003BCA4(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  unsigned int v3 = (void *)qword_10045CD30;
  qword_10045CD30 = v2;

  objc_storeStrong((id *)(qword_10045CD30 + 8), *(id *)(a1 + 32));
  objc_storeStrong((id *)(qword_10045CD30 + 16), *(id *)(a1 + 40));
  *(void *)(qword_10045CD30 + 24) = 4279897;
  uint64_t v4 = [@"A000000809434343444B417631" hexStringAsData];
  id v5 = *(void **)(qword_10045CD30 + 32);
  *(void *)(qword_10045CD30 + 32) = v4;

  id v6 = +[SESXPCEventListener registerOnStream:@"com.apple.seld.xpc.events" forEvent:@"appletChanged" handler:qword_10045CD30];
  id v7 = *(NSObject **)(a1 + 32);

  dispatch_async(v7, &stru_10040D298);
}

void sub_10003BD74(id a1)
{
}

void sub_10003BD80(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v2 = SESDefaultLogObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "", buf, 2u);
    }

    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10003BE5C;
    v3[3] = &unk_10040D2E8;
    v3[4] = a1;
    sub_100058540((uint64_t)SecureElementManager, @"Check PTA lock state", v3);
  }
}

void sub_10003BE5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10003BF28;
  block[3] = &unk_10040D2C0;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_10003BF28(void *a1)
{
  if (a1[4])
  {
    uint64_t v2 = SESDefaultLogObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = a1[4];
      int v6 = 138412290;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Couldn't get SE to check lock state, %@", (uint8_t *)&v6, 0xCu);
    }

    *(void *)(a1[5] + 24) = 4279897;
  }
  else
  {
    uint64_t v4 = a1[5];
    id v5 = (void *)a1[6];
    sub_10003C024(v4, v5);
  }
}

void sub_10003C024(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = *(NSObject **)(a1 + 8);
    id v4 = a2;
    dispatch_assert_queue_V2(v3);
    id v5 = *(void **)(a1 + 32);
    id v12 = 0;
    BOOL v6 = sub_10004E1CC(v4, v5, &v12);

    id v7 = v12;
    id v8 = SESDefaultLogObject();
    id v9 = v8;
    if (v7)
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)id v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get PTA suspend status : %@", buf, 0xCu);
      }

      *(void *)(a1 + 24) = 4279897;
    }
    else
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v10 = *(void *)(a1 + 24);
        *(_DWORD *)long long buf = 67109634;
        *(_DWORD *)id v14 = v6;
        *(_WORD *)&v14[4] = 1024;
        *(_DWORD *)&v14[6] = v10;
        __int16 v15 = 2112;
        uint64_t v16 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "New %d last %x delegate %@", buf, 0x18u);
      }

      if (*(void *)(a1 + 24) != v6)
      {
        *(void *)(a1 + 24) = v6;
        [*(id *)(a1 + 16) appletLockStateDidChange:v6];
      }
    }
  }
}

void sub_10003C278(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:@"com.apple.seld.xpc.events"])
  {
    string = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 40), _xpc_event_key_name);
    uint64_t v3 = string;
    if (string && !strcmp(string, "appletChanged"))
    {
      id v4 = xpc_dictionary_get_string(*(xpc_object_t *)(a1 + 40), "appletChanged");
      if ((objc_msgSend(*(id *)(*(void *)(a1 + 48) + 32), "ses_isEqualToHexCString:", v4) & 1) == 0)
      {
        id v5 = SESDefaultLogObject();
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
          goto LABEL_11;
        }
        int v8 = 136315138;
        id v9 = v4;
        BOOL v6 = "Don't care about AID %s";
        goto LABEL_10;
      }
      sub_10003BD80(*(void *)(a1 + 48));
    }
    id v5 = SESDefaultLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v8 = 136315138;
      id v9 = v3;
      BOOL v6 = "Ignoring eventName %s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v8, 0xCu);
    }
  }
  else
  {
    id v5 = SESDefaultLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v7 = *(const char **)(a1 + 32);
      int v8 = 138412290;
      id v9 = v7;
      BOOL v6 = "Ignoring stream %@";
      goto LABEL_10;
    }
  }
LABEL_11:
}

void sub_10003C534(uint64_t a1)
{
  id v1 = [[_SESSessionManager alloc] init:*(void *)(a1 + 32)];
  uint64_t v2 = (void *)qword_10045CD40;
  qword_10045CD40 = (uint64_t)v1;
}

id sub_10003C714(uint64_t a1)
{
  return [*(id *)(a1 + 32) dumpState];
}

void sub_10003CB48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003CB68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10003CB78(uint64_t a1)
{
}

id sub_10003CB80(uint64_t a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Connection invalidated", v4, 2u);
  }

  return [*(id *)(a1 + 32) didCloseConnection:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

id sub_10003CBFC(uint64_t a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Connection interrupted", v4, 2u);
  }

  return [*(id *)(a1 + 32) didCloseConnection:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
}

void sub_10003CD18(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  uint64_t v3 = [v2 objectForKeyedSubscript:&off_10042DDF8];

  id v4 = SESDefaultLogObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    unsigned int v5 = [*(id *)(a1 + 32) processIdentifier];
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)uint64_t v39 = v5;
    *(_WORD *)&void v39[4] = 2112;
    *(void *)&v39[6] = v3;
    *(_WORD *)&v39[14] = 2112;
    *(void *)&v39[16] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Connection closed PID %d (%@) %@", buf, 0x1Cu);
  }

  [*(id *)(*(void *)(a1 + 40) + 40) unregisterForAppStateChanges:*(void *)(a1 + 32)];
  uint64_t v26 = a1;
  id v7 = [*(id *)(a1 + 32) userInfo];
  int v8 = [v7 objectForKeyedSubscript:&off_10042DE10];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v25 = v8;
  id v9 = [v8 copy];
  id v10 = [v9 countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v32 + 1) + 8 * i);
        __int16 v15 = SESDefaultLogObject();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)uint64_t v39 = v14;
          *(_WORD *)&v39[8] = 2112;
          *(void *)&v39[10] = v3;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Removing session %@ for %@", buf, 0x16u);
        }

        [v14 endSessionInternal:0];
      }
      id v11 = [v9 countByEnumeratingWithState:&v32 objects:v37 count:16];
    }
    while (v11);
  }

  uint64_t v16 = [*(id *)(v26 + 32) userInfo];
  id v17 = [v16 objectForKeyedSubscript:&off_10042DE28];

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  unsigned int v27 = v17;
  id v18 = [v17 copy];
  id v19 = [v18 countByEnumeratingWithState:&v28 objects:v36 count:16];
  if (v19)
  {
    id v20 = v19;
    uint64_t v21 = *(void *)v29;
    do
    {
      for (j = 0; j != v20; j = (char *)j + 1)
      {
        if (*(void *)v29 != v21) {
          objc_enumerationMutation(v18);
        }
        id v23 = *(void **)(*((void *)&v28 + 1) + 8 * (void)j);
        uint64_t v24 = SESDefaultLogObject();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)uint64_t v39 = v23;
          *(_WORD *)&v39[8] = 2112;
          *(void *)&v39[10] = v3;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Removing assertion %@ for %@", buf, 0x16u);
        }

        [v23 invalidateInternal];
      }
      id v20 = [v18 countByEnumeratingWithState:&v28 objects:v36 count:16];
    }
    while (v20);
  }
}

void sub_10003D538(uint64_t a1)
{
  uint64_t v2 = [[_SESACWGSession alloc] initWithRemoteObject:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 40) + 16)];
  uint64_t v3 = v2;
  if (v2)
  {
    [(_SESSession *)v2 setConnection:*(void *)(a1 + 48)];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10003D700;
    v8[3] = &unk_10040D338;
    void v8[4] = *(void *)(a1 + 40);
    [(_SESACWGSession *)v3 setDidEndCallback:v8];
    [*(id *)(a1 + 40) addSession:v3 forConnection:*(void *)(a1 + 48)];
    id v4 = SESDefaultLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting SESACWGSession %@", buf, 0xCu);
    }

    [(_SESACWGSession *)v3 start];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = SESDefaultLogObject();
    id v7 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v7);
  }
}

void sub_10003D700(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003D7A4;
  void v7[3] = &unk_10040D1A0;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_10003D7A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeSession:*(void *)(a1 + 40)];
}

void sub_10003D928(uint64_t a1)
{
  uint64_t v2 = [[_SESDCKSession alloc] initWithRemoteObject:*(void *)(a1 + 32) queue:*(void *)(*(void *)(a1 + 40) + 16)];
  id v3 = v2;
  if (v2)
  {
    [(_SESSession *)v2 setConnection:*(void *)(a1 + 48)];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10003DAF0;
    v8[3] = &unk_10040D338;
    void v8[4] = *(void *)(a1 + 40);
    [(_SESDCKSession *)v3 setDidEndCallback:v8];
    [*(id *)(a1 + 40) addSession:v3 forConnection:*(void *)(a1 + 48)];
    uint64_t v4 = SESDefaultLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Starting SESDCKSession %@", buf, 0xCu);
    }

    [(_SESDCKSession *)v3 start];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = SESDefaultLogObject();
    id v7 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v7);
  }
}

void sub_10003DAF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003DB94;
  void v7[3] = &unk_10040D1A0;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_10003DB94(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeSession:*(void *)(a1 + 40)];
}

void sub_10003DD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003DDAC(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) userInfo];
  id v3 = [v2 objectForKeyedSubscript:&off_10042DDF8];

  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v28 = a1;
  uint64_t v4 = (_SESRKESession *)*(id *)(*(void *)(a1 + 40) + 48);
  id v5 = [(_SESRKESession *)v4 countByEnumeratingWithState:&v32 objects:v38 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v33;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v33 != v7) {
        objc_enumerationMutation(v4);
      }
      id v9 = [*(id *)(*((void *)&v32 + 1) + 8 * v8) connection];
      id v10 = [v9 userInfo];
      id v11 = [v10 objectForKeyedSubscript:&off_10042DDF8];
      unsigned int v12 = [v3 isEqualToString:v11];

      if (v12) {
        goto LABEL_14;
      }
      if (v6 == (id)++v8)
      {
        id v6 = [(_SESRKESession *)v4 countByEnumeratingWithState:&v32 objects:v38 count:16];
        if (v6) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  [*(id *)(*(void *)(v28 + 40) + 40) registerForAppStateChanges:*(void *)(v28 + 32)];
  uint64_t v13 = *(void **)(v28 + 48);
  if (v13)
  {
    id v14 = [v13 objectForKeyedSubscript:@"rangeStart"];
    uint64_t v15 = [*(id *)(v28 + 48) objectForKeyedSubscript:@"rangeEnd"];
    uint64_t v16 = (void *)v15;
    uint64_t v17 = 0xFFFFLL;
    uint64_t v18 = 0xFFFFLL;
    if (v14 && v15)
    {
      uint64_t v18 = (uint64_t)[v14 unsignedIntegerValue];
      id v19 = [v16 unsignedIntegerValue];
      uint64_t v17 = v19 - (unsigned char *)[v14 unsignedIntegerValue];
    }
  }
  else
  {
    uint64_t v17 = 0xFFFFLL;
    uint64_t v18 = 0xFFFFLL;
  }
  uint64_t v4 = -[_SESRKESession initWithRemoteObject:subscriptionRange:queue:]([_SESRKESession alloc], "initWithRemoteObject:subscriptionRange:queue:", *(void *)(v28 + 56), v18, v17, *(void *)(*(void *)(v28 + 40) + 16));
  if (!v4)
  {
LABEL_14:
    uint64_t v20 = *(void *)(v28 + 64);
    SESDefaultLogObject();
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    double v22 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v22);
    goto LABEL_15;
  }
  id v21 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  double v22 = [v21 stringForKey:@"debug.rke.session.bundleid"];
  if (v22)
  {
    [(_SESRKESession *)v4 setClientBundleIdentifier:v22];
  }
  else
  {
    uint64_t v24 = *(void **)(v28 + 32);
    if (v24) {
      [v24 auditToken];
    }
    else {
      memset(v31, 0, sizeof(v31));
    }
    uint64_t v25 = *(void *)(*(void *)(v28 + 72) + 8);
    id obj = *(id *)(v25 + 40);
    uint64_t v26 = +[LSBundleRecord bundleRecordForAuditToken:v31 error:&obj];
    objc_storeStrong((id *)(v25 + 40), obj);
    if (*(void *)(*(void *)(*(void *)(v28 + 72) + 8) + 40))
    {
      (*(void (**)(void))(*(void *)(v28 + 64) + 16))();

      goto LABEL_15;
    }
    unsigned int v27 = [v26 bundleIdentifier];
    [(_SESRKESession *)v4 setClientBundleIdentifier:v27];
  }
  [(_SESSession *)v4 setConnection:*(void *)(v28 + 32)];
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 3221225472;
  void v29[2] = sub_10003E264;
  v29[3] = &unk_10040D338;
  uint8_t v29[4] = *(void *)(v28 + 40);
  [(_SESRKESession *)v4 setDidEndCallback:v29];
  [*(id *)(v28 + 40) addSession:v4 forConnection:*(void *)(v28 + 32)];
  id v23 = SESDefaultLogObject();
  if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Starting SESRKESession %@", buf, 0xCu);
  }

  [(_SESRKESession *)v4 start];
  (*(void (**)(void, _SESRKESession *, void))(*(void *)(v28 + 64) + 16))(*(void *)(v28 + 64), v4, 0);
LABEL_15:
}

void sub_10003E264(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(NSObject **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10003E308;
  void v7[3] = &unk_10040D1A0;
  void v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_10003E308(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeSession:*(void *)(a1 + 40)];
}

void sub_10003E3E0(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 8));
  id v2 = [*(id *)(a1[4] + 48) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 8));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          [v8 sendEvent:a1[5] keyIdentifier:a1[6]];
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

BOOL sub_10003E5F8(id a1, _SESSession *a2)
{
  id v2 = a2;
  if ([(_SESSession *)v2 isActive])
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

BOOL sub_10003E6D4(id a1, _SESSession *a2)
{
  id v2 = a2;
  if ([(_SESSession *)v2 isActive])
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

BOOL sub_10003E7B0(id a1, _SESSession *a2)
{
  id v2 = a2;
  if ([(_SESSession *)v2 isActive])
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_10003E8A8(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          [v8 didCreateKey:*(void *)(a1 + 40) v9];
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_10003EAC8(void *a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 8));
  id v2 = [*(id *)(a1[4] + 48) copy];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 8));
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        objc_opt_class();
        if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass())) {
          [v8 didReceivePassthroughMessage:a1[5] keyIdentifier:a1[6]];
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_10003ED80(uint64_t a1)
{
  id v2 = +[AlishaExternal shared];
  id v3 = [v2 getReportsWithIsInternalClient:1];

  id v4 = SESDefaultLogObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    id v5 = [v3 allValues];
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Vehicle report %@", (uint8_t *)&v6, 0xCu);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10003F0C0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 56) invalidateInternal];
  id v2 = [[_SESAssertion alloc] initWithRemoteObject:*(void *)(a1 + 40) keyIdentifier:*(void *)(a1 + 48) appletIdentifier:*(void *)(a1 + 56) options:*(void *)(a1 + 64) queue:*(void *)(*(void *)(a1 + 32) + 16)];
  id v3 = v2;
  if (!v2)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    id v4 = SESDefaultLogObject();
    int v6 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v6);
LABEL_8:

    goto LABEL_9;
  }
  id v4 = [(_SESAssertion *)v2 start];
  if (!v4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_10003F308;
    v9[3] = &unk_10040D430;
    void v9[4] = *(void *)(a1 + 32);
    [(_SESAssertion *)v3 setDidEndCallback:v9];
    [(_SESAssertion *)v3 setConnection:*(void *)(a1 + 72)];
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 56), v3);
    uint64_t v7 = [*(id *)(a1 + 72) userInfo];
    int v6 = [v7 objectForKeyedSubscript:&off_10042DE28];

    [v6 addObject:v3];
    id v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      long long v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Started SESAssertion %@", buf, 0xCu);
    }

    (*(void (**)(void, _SESAssertion *, void))(*(void *)(a1 + 80) + 16))(*(void *)(a1 + 80), v3, 0);
    goto LABEL_8;
  }
  (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
LABEL_9:
}

void sub_10003F308(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = SESDefaultLogObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v10 = 138412290;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Removing assertion %@", (uint8_t *)&v10, 0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  int v6 = *(void **)(v5 + 56);
  *(void *)(v5 + 56) = 0;

  uint64_t v7 = [v3 connection];
  id v8 = [v7 userInfo];
  long long v9 = [v8 objectForKeyedSubscript:&off_10042DE28];

  [v9 removeObject:v3];
}

void sub_10003F684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003F6A4(uint64_t a1)
{
  [*(id *)(a1 + 32) doubleValue];
  if (v2 >= 1.0)
  {
    if ([*(id *)(a1 + 40) isEqual:@"A000000909ACCE5501"])
    {
      id v4 = +[LyonExternal shared];
      uint64_t v5 = *(void *)(a1 + 48);
      [*(id *)(a1 + 32) doubleValue];
      uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8);
      id obj = *(id *)(v6 + 40);
      [v4 blockRangingForReaderIdentifierWithReaderIdentifier:v5 timeout:&obj];
      objc_storeStrong((id *)(v6 + 40), obj);

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      return;
    }
    uint64_t v3 = *(void *)(a1 + 56);
    SESDefaultLogObject();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 56);
    SESDefaultLogObject();
    id v8 = (id)objc_claimAutoreleasedReturnValue();
    [*(id *)(a1 + 32) doubleValue];
  }
  uint64_t v7 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v7);
}

void sub_10003FA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10003FA6C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqual:@"A000000909ACCE5501"])
  {
    double v2 = +[LyonExternal shared];
    uint64_t v3 = *(void *)(a1 + 40);
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8);
    id obj = *(id *)(v4 + 40);
    [v2 unblockRangingForReaderIdentifierWithReaderIdentifier:v3 error:&obj];
    objc_storeStrong((id *)(v4 + 40), obj);

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 48);
    SESDefaultLogObject();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v6 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

id sub_1000404C0(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x3032000000;
    uint64_t v15 = sub_100040638;
    uint64_t v16 = sub_100040648;
    id v17 = 0;
    uint64_t v6 = 0;
    id v7 = &v6;
    uint64_t v8 = 0x3032000000;
    long long v9 = sub_100040638;
    int v10 = sub_100040648;
    id v11 = 0;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_100040650;
    v5[3] = &unk_10040C430;
    v5[4] = &v6;
    void v5[5] = &v12;
    sub_10001A4A0(a1, v5);
    if (a2) {
      *a2 = (id) v13[5];
    }
    id v3 = (id)v7[5];
    _Block_object_dispose(&v6, 8);

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_100040614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100040638(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100040648(uint64_t a1)
{
}

void sub_100040650(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SEEndPointEntity fetchRequest];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v3 executeFetchRequest:v4 error:&obj];

  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_1000406F8(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a2;
    uint64_t v6 = sub_1000404C0(a1, a3);
    uint64_t v7 = Filter();
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

void *sub_100040778(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  long long v9 = v8;
  if (!a1)
  {
LABEL_9:
    a4 = 0;
    goto LABEL_13;
  }
  if (!v7 || !v8 || !a4)
  {
    if (!a4) {
      goto LABEL_13;
    }
    uint64_t v12 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a4 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_9;
  }
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472;
  uint64_t v16 = sub_1000408E8;
  id v17 = &unk_10040D4D0;
  id v18 = v7;
  id v19 = v9;
  int v10 = sub_1000406F8(a1, &v14, a4);
  id v11 = v10;
  if (*a4 || !objc_msgSend(v10, "count", v14, v15, v16, v17, v18))
  {
    a4 = 0;
  }
  else
  {
    a4 = [v11 objectAtIndexedSubscript:0];
  }

LABEL_13:

  return a4;
}

id sub_1000408E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 identifier];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = [v3 clientName];
    id v6 = [v5 isEqualToString:*(void *)(a1 + 40)];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_100040964(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = [v5 endPointData];
      id v8 = +[SEEndPoint decodeWithData:v7 error:a3];
LABEL_6:

      goto LABEL_7;
    }
    if (a3)
    {
      id v7 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v8 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  id v8 = 0;
LABEL_7:

  return v8;
}

id sub_100040A3C(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = sub_10001A584(a1);
    dispatch_assert_queue_V2(v4);

    uint64_t v5 = sub_100019850(a1);
    if (v5)
    {
      id v6 = (id)v5;
      if (a2)
      {
        id v7 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a2 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v28 = 0;
      goto LABEL_33;
    }
    id v38 = 0;
    id v8 = sub_10005D5C0(a1, &v38);
    id v9 = v38;
    if (v9)
    {
      id v6 = v9;
      if (!a2)
      {
        id v28 = 0;
LABEL_32:

LABEL_33:
        goto LABEL_34;
      }
      int v10 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v28 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v28 = (id)objc_opt_new();
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id obj = v8;
      id v26 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
      if (v26)
      {
        id v23 = v8;
        id v6 = 0;
        uint64_t v25 = *(void *)v35;
        do
        {
          uint64_t v11 = 0;
          do
          {
            if (*(void *)v35 != v25) {
              objc_enumerationMutation(obj);
            }
            uint64_t v27 = v11;
            uint64_t v12 = [*(id *)(*((void *)&v34 + 1) + 8 * v11) endPoints:v22];
            long long v30 = 0u;
            long long v31 = 0u;
            long long v32 = 0u;
            long long v33 = 0u;
            id v13 = [v12 countByEnumeratingWithState:&v30 objects:v39 count:16];
            if (v13)
            {
              id v14 = v13;
              uint64_t v15 = *(void *)v31;
              do
              {
                for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
                {
                  id v17 = v6;
                  if (*(void *)v31 != v15) {
                    objc_enumerationMutation(v12);
                  }
                  id v18 = *(void **)(*((void *)&v30 + 1) + 8 * i);
                  id v29 = v6;
                  id v19 = sub_100040964(a1, v18, &v29);
                  id v6 = v29;

                  if (v6)
                  {
                    if (a2)
                    {
                      uint64_t v20 = SESDefaultLogObject();
                      double v22 = v18;
                      SESCreateAndLogError();
                      *a2 = (id)objc_claimAutoreleasedReturnValue();
                    }
                  }
                  else
                  {
                    [v28 addObject:v19];
                  }
                }
                id v14 = [v12 countByEnumeratingWithState:&v30 objects:v39 count:16];
              }
              while (v14);
            }

            uint64_t v11 = v27 + 1;
          }
          while ((id)(v27 + 1) != v26);
          id v26 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
        }
        while (v26);
        id v8 = v23;
      }
      else
      {
        id v6 = 0;
      }
      int v10 = obj;
    }

    goto LABEL_32;
  }
  id v28 = 0;
LABEL_34:

  return v28;
}

id sub_100040D9C(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5 && v6)
    {
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x3032000000;
      id v17 = sub_100040638;
      id v18 = sub_100040648;
      id v19 = 0;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      _DWORD v10[2] = sub_100040F34;
      v10[3] = &unk_10040D4F8;
      id v11 = v6;
      id v13 = &v14;
      id v12 = v5;
      sub_10001A33C((uint64_t)a1, v10);
      a1 = (id)v15[5];

      _Block_object_dispose(&v14, 8);
    }
    else
    {
      id v8 = SESDefaultLogObject();
      SESCreateAndLogError();
      a1 = (id)objc_claimAutoreleasedReturnValue();
    }
  }

  return a1;
}

void sub_100040F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100040F34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v5 + 40);
  id v6 = [v4 encodeWithError:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = v6 == 0;
  }
  if (v7)
  {
    id v13 = SESDefaultLogObject();
    uint64_t v8 = SESCreateAndLogError();
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    int v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
  else
  {
    [*(id *)(a1 + 40) setEndPointData:v6];
    uint64_t v11 = sub_100030AE4((uint64_t)v3);
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

id sub_10004195C(id a1, SEEndPoint *a2)
{
  double v2 = a2;
  id v3 = [(SEEndPoint *)v2 bleUUID];
  if (v3)
  {
    uint64_t v4 = [(SEEndPoint *)v2 revocationAttestation];
    if (v4)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = [(SEEndPoint *)v2 readerIdentifier];
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id sub_100041E58(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = [v3 uniqueID];
  LODWORD(v4) = [v4 containsObject:v5];

  if (v4)
  {
    id v6 = [v3 secureElementPass];
    if ([v6 isCarKeyPass])
    {
      BOOL v7 = [v3 secureElementPass];
    }
    else
    {
      BOOL v7 = 0;
    }
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

id sub_100042488(uint64_t a1, void *a2)
{
  id v3 = [a2 keyIdentifier];
  uint64_t v4 = [*(id *)(a1 + 32) publicKeyIdentifier];
  id v5 = [v3 isEqualToData:v4];

  return v5;
}

uint64_t sub_1000425A0(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession endSession %@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) endSessionInternal:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10004273C(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v16 = v3;
    __int16 v17 = 2112;
    uint64_t v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ isPassiveEntryAvailable readerIdentifier %@", buf, 0x16u);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    int v5 = *(void **)(*(void *)(a1 + 32) + 56);
    uint64_t v6 = [*(id *)(a1 + 40) hexStringAsData];
    LOBYTE(v5) = [v5 containsObject:v6];

    if (v5)
    {
      BOOL v7 = +[AlishaExternal shared];
      uint64_t v8 = [*(id *)(a1 + 40) hexStringAsData];
      [v7 isPassiveEntryAvailableFor:v8];

      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 48);
      id v13 = SESDefaultLogObject();
      uint64_t v14 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v14);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = SESDefaultLogObject();
    uint64_t v11 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0, v11);
  }
}

void sub_100042A80(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    BOOL v7 = *(void *)(a1 + 48) != 0;
    int v8 = *(unsigned __int8 *)(a1 + 80);
    int v9 = *(unsigned __int8 *)(a1 + 81);
    *(_DWORD *)long long buf = 138413826;
    uint64_t v39 = v5;
    __int16 v40 = 1024;
    int v41 = v3;
    __int16 v42 = 1024;
    int v43 = v4;
    __int16 v44 = 2112;
    uint64_t v45 = v6;
    __int16 v46 = 1024;
    BOOL v47 = v7;
    __int16 v48 = 1024;
    int v49 = v8;
    __int16 v50 = 1024;
    int v51 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ sendRKEFunction 0x%X action 0x%X readerIdentifier %@ authorization %d isEnduring %d isHandlingExternal %d", buf, 0x34u);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) == 0)
  {
    uint64_t v23 = *(void *)(a1 + 56);
    uint64_t v14 = SESDefaultLogObject();
    __int16 v17 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0, v17);
    goto LABEL_24;
  }
  int v10 = *(void **)(*(void *)(a1 + 32) + 56);
  uint64_t v11 = [*(id *)(a1 + 40) hexStringAsData];
  LOBYTE(v10) = [v10 containsObject:v11];

  if ((v10 & 1) == 0)
  {
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v14 = SESDefaultLogObject();
    __int16 v17 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v24 + 16))(v24, 0, v17);
    goto LABEL_24;
  }
  uint64_t v12 = +[AlishaExternal shared];
  id v13 = [*(id *)(a1 + 40) hexStringAsData];
  uint64_t v14 = [v12 getEndpointWithReaderIdentifier:v13];

  uint64_t v15 = [v14 bleUUID];
  LODWORD(v12) = v15 == 0;

  if (v12)
  {
    uint64_t v31 = *(void *)(a1 + 56);
    __int16 v17 = SESDefaultLogObject();
    long long v32 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v31 + 16))(v31, 0, v32);

    goto LABEL_24;
  }
  uint64_t v16 = [v14 bleUUID];
  __int16 v17 = +[NSUUID ses_withUUIDString:v16];

  uint64_t v18 = *(void *)(a1 + 32);
  id v19 = *(void **)(v18 + 72);
  if (v19)
  {
    if ([v19 isEqual:v17]) {
      goto LABEL_11;
    }
    uint64_t v18 = *(void *)(a1 + 32);
    if (*(void *)(v18 + 72))
    {
      uint64_t v20 = +[AlishaExternal shared];
      [v20 removeHighPriorityRequestFor:*(void *)(*(void *)(a1 + 32) + 72) client:*(void *)(*(void *)(a1 + 32) + 80)];

      uint64_t v18 = *(void *)(a1 + 32);
    }
  }
  objc_storeStrong((id *)(v18 + 72), v17);
  uint64_t v16 = +[AlishaExternal shared];
  [v16 addHighPriorityRequestFor:*(void *)(*(void *)(a1 + 32) + 72) client:*(void *)(*(void *)(a1 + 32) + 80)];

LABEL_11:
  objc_initWeak((id *)buf, *(id *)(a1 + 32));
  if (*(unsigned char *)(a1 + 80) && *(unsigned char *)(a1 + 81))
  {
    long long v33 = _NSConcreteStackBlock;
    uint64_t v34 = 3221225472;
    long long v35 = sub_100042F48;
    long long v36 = &unk_10040D5E8;
    uint64_t v16 = &v37;
    objc_copyWeak(&v37, (id *)buf);
    id v21 = &v33;
    int v22 = 1;
  }
  else
  {
    int v22 = 0;
    id v21 = 0;
  }
  uint64_t v25 = objc_retainBlock(v21);
  id v26 = +[AlishaExternal shared];
  uint64_t v28 = *(void *)(a1 + 64);
  uint64_t v27 = *(void *)(a1 + 72);
  id v29 = [v14 publicKeyIdentifier];
  if (*(unsigned char *)(a1 + 80)) {
    uint64_t v30 = 2;
  }
  else {
    uint64_t v30 = 1;
  }
  [v26 sendRKERequestWithFunctionIdentifier:(unsigned __int16)v28 actionIdentifier:v27 keyIdentifier:v29 requestType:v30 enduringRequestHandler:v25 authorization:*(void *)(a1 + 48) completion:*(void *)(a1 + 56) v33:v34 v35:v35 v36:v36];

  if (v22) {
    objc_destroyWeak(v16);
  }
  objc_destroyWeak((id *)buf);
LABEL_24:
}

void sub_100042F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  if (v16) {
    objc_destroyWeak(v15);
  }
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100042F48(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ([WeakRetained isActive])
  {
    uint64_t v14 = [WeakRetained queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100043088;
    block[3] = &unk_10040D5C0;
    id v16 = WeakRetained;
    id v17 = v9;
    id v18 = v10;
    id v19 = v11;
    id v20 = v12;
    dispatch_async(v14, block);
  }
}

id sub_100043088(uint64_t a1)
{
  return _[*(id *)(a1 + 32) didReceiveContinuationRequestFor:*(void *)(a1 + 40) actionIdentifier:*(void *)(a1 + 48) arbitraryData:*(void *)(a1 + 56) keyIdentifier:*(void *)(a1 + 64)];
}

void sub_100043180(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412802;
    uint64_t v21 = v4;
    __int16 v22 = 1024;
    int v23 = v3;
    __int16 v24 = 2112;
    uint64_t v25 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ cancelRKEFunction 0x%X for readerIdentifier %@", buf, 0x1Cu);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 56);
    BOOL v7 = [*(id *)(a1 + 40) hexStringAsData];
    LOBYTE(v6) = [v6 containsObject:v7];

    if (v6)
    {
      int v8 = +[AlishaExternal shared];
      id v9 = [*(id *)(a1 + 40) hexStringAsData];
      id v10 = [v8 getEndpointWithReaderIdentifier:v9];

      id v11 = [v10 bleUUID];

      if (v11)
      {
        id v12 = +[AlishaExternal shared];
        uint64_t v13 = *(unsigned __int16 *)(a1 + 56);
        uint64_t v14 = [v10 publicKeyIdentifier];
        uint64_t v15 = [v12 cancelRKERequestWithFunctionIdentifier:v13 keyIdentifier:v14];

        (*(void (**)(void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48));
      }
      else
      {
        uint64_t v18 = *(void *)(a1 + 48);
        uint64_t v15 = SESDefaultLogObject();
        id v19 = SESCreateAndLogError();
        (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v19);
      }
    }
    else
    {
      uint64_t v17 = *(void *)(a1 + 48);
      id v10 = SESDefaultLogObject();
      uint64_t v15 = SESCreateAndLogError();
      (*(void (**)(uint64_t))(v17 + 16))(v17);
    }
  }
  else
  {
    uint64_t v16 = *(void *)(a1 + 48);
    id v10 = SESDefaultLogObject();
    uint64_t v15 = SESCreateAndLogError();
    (*(void (**)(uint64_t))(v16 + 16))(v16);
  }
}

void sub_100043560(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = *(void *)(a1 + 40) != 0;
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138413314;
    uint64_t v25 = v5;
    __int16 v26 = 1024;
    int v27 = v3;
    __int16 v28 = 1024;
    int v29 = v4;
    __int16 v30 = 1024;
    BOOL v31 = v6;
    __int16 v32 = 2112;
    uint64_t v33 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ continueExecutingFunction 0x%X action 0x%X arbitraryData %d readerIdentifier %@", buf, 0x28u);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    int v8 = *(void **)(*(void *)(a1 + 32) + 56);
    id v9 = [*(id *)(a1 + 48) hexStringAsData];
    LOBYTE(v8) = [v8 containsObject:v9];

    if ((v8 & 1) == 0)
    {
      uint64_t v10 = *(void *)(a1 + 56);
      id v11 = SESDefaultLogObject();
      goto LABEL_9;
    }
    if ((unint64_t)[*(id *)(a1 + 40) length] >= 0x41)
    {
      uint64_t v10 = *(void *)(a1 + 56);
      id v11 = SESDefaultLogObject();
      [*(id *)(a1 + 40) length];
LABEL_9:
      uint64_t v13 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v13);
      goto LABEL_10;
    }
    uint64_t v14 = +[AlishaExternal shared];
    uint64_t v15 = [*(id *)(a1 + 48) hexStringAsData];
    id v11 = [v14 getEndpointWithReaderIdentifier:v15];

    uint64_t v16 = [v11 bleUUID];

    if (v16)
    {
      uint64_t v17 = +[AlishaExternal shared];
      uint64_t v18 = *(unsigned __int16 *)(a1 + 64);
      uint64_t v19 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = [v11 publicKeyIdentifier];
      uint64_t v13 = [v17 continueExecutingRKERequestWithFunctionIdentifier:v18 actionIdentifier:v19 arbitraryData:v20 keyIdentifier:v21];

      (*(void (**)(void, void *))(*(void *)(a1 + 56) + 16))(*(void *)(a1 + 56), v13);
    }
    else
    {
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v13 = SESDefaultLogObject();
      int v23 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v22 + 16))(v22, v23);
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 56);
    id v11 = SESDefaultLogObject();
    uint64_t v13 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
  }
LABEL_10:
}

void sub_1000439B8(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v28 = v3;
    __int16 v29 = 2112;
    uint64_t v30 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ sendPassthroughMessage readerIdentifier %@", buf, 0x16u);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    uint64_t v5 = *(void **)(*(void *)(a1 + 32) + 56);
    BOOL v6 = [*(id *)(a1 + 40) hexStringAsData];
    LOBYTE(v5) = [v5 containsObject:v6];

    if ((v5 & 1) == 0)
    {
      uint64_t v20 = *(void *)(a1 + 56);
      id v9 = SESDefaultLogObject();
      uint64_t v12 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v12);
      goto LABEL_24;
    }
    uint64_t v7 = +[AlishaExternal shared];
    int v8 = [*(id *)(a1 + 40) hexStringAsData];
    id v9 = [v7 getEndpointWithReaderIdentifier:v8];

    uint64_t v10 = [v9 bleUUID];

    if (!v10)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v12 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v22 = (id)objc_claimAutoreleasedReturnValue();
      (*(void (**)(uint64_t, id))(v21 + 16))(v21, v22);
LABEL_23:

      goto LABEL_24;
    }
    id v11 = [v9 bleUUID];
    uint64_t v12 = +[NSUUID ses_withUUIDString:v11];

    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void **)(v13 + 72);
    if (v14)
    {
      if ([v14 isEqual:v12]) {
        goto LABEL_11;
      }
      uint64_t v13 = *(void *)(a1 + 32);
      if (*(void *)(v13 + 72))
      {
        uint64_t v15 = +[AlishaExternal shared];
        [v15 removeHighPriorityRequestFor:*(void *)(*(void *)(a1 + 32) + 72) client:*(void *)(*(void *)(a1 + 32) + 80)];

        uint64_t v13 = *(void *)(a1 + 32);
      }
    }
    objc_storeStrong((id *)(v13 + 72), v12);
    uint64_t v16 = +[AlishaExternal shared];
    [v16 addHighPriorityRequestFor:*(void *)(*(void *)(a1 + 32) + 72) client:*(void *)(*(void *)(a1 + 32) + 80)];

LABEL_11:
    if (*(unsigned char *)(*(void *)(a1 + 32) + 64))
    {
LABEL_22:
      id v23 = objc_alloc((Class)NSUUID);
      __int16 v24 = [v9 bleUUID];
      id v22 = [v23 initWithUUIDString:v24];

      uint64_t v25 = +[AlishaExternal shared];
      __int16 v26 = [v25 sendPassthroughWithMessage:*(void *)(a1 + 48) clientUUID:v22];

      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      goto LABEL_23;
    }
    id v17 = [v9 getEndpointUser];
    if (v17)
    {
      if (v17 != (id)1)
      {
LABEL_21:
        *(unsigned char *)(*(void *)(a1 + 32) + 64) = 1;
        goto LABEL_22;
      }
      uint64_t v18 = @"friendPassthroughCount";
    }
    else
    {
      uint64_t v18 = @"ownerPassthroughCount";
    }
    sub_100050018((uint64_t)SESDAnalyticsLogger, v18);
    goto LABEL_21;
  }
  uint64_t v19 = *(void *)(a1 + 56);
  id v9 = SESDefaultLogObject();
  uint64_t v12 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v19 + 16))(v19, v12);
LABEL_24:
}

void sub_100043E68(uint64_t a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void **)(a1 + 32);
    *(_DWORD *)long long buf = 138412290;
    uint64_t v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ getVehicleReports", buf, 0xCu);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    uint64_t v4 = +[AlishaExternal shared];
    uint64_t v5 = [v4 getReportsWithIsInternalClient:0];

    BOOL v6 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", [v5 count]);
    id v11 = _NSConcreteStackBlock;
    uint64_t v12 = 3221225472;
    uint64_t v13 = sub_1000440BC;
    uint64_t v14 = &unk_10040D688;
    uint64_t v15 = *(void *)(a1 + 32);
    id v7 = v6;
    id v16 = v7;
    [v5 enumerateKeysAndObjectsUsingBlock:&v11];
    int v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = [v7 allValues:v11, v12, v13, v14, v15];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Vehicle report %@", buf, 0xCu);
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v5 = SESDefaultLogObject();
    SESCreateAndLogError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0, v7);
  }
}

void sub_1000440BC(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  BOOL v6 = *(void **)(*(void *)(a1 + 32) + 56);
  id v7 = [v5 readerIdentifier];
  int v8 = [v7 hexStringAsData];
  LODWORD(v6) = [v6 containsObject:v8];

  if (v6) {
    [*(id *)(a1 + 40) setObject:v5 forKeyedSubscript:v9];
  }
}

void sub_100044274(id *a1)
{
  double v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    id v3 = a1[4];
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESRKESession %@ sign", (uint8_t *)&buf, 0xCu);
  }

  if (([a1[4] isActive] & 1) != 0 && !objc_msgSend(a1[4], "isBackgrounded"))
  {
    if ([*((id *)a1[4] + 7) containsObject:a1[5]])
    {
      id v7 = +[AlishaExternal shared];
      id v5 = [v7 getEndpointWithReaderIdentifier:a1[5]];

      if (v5)
      {
        int v8 = [a1[4] clientBundleIdentifier];
        BOOL v9 = v8 == 0;

        if (v9)
        {
          uint64_t v20 = (void (**)(id, void, void *))a1[7];
          BOOL v6 = SESDefaultLogObject();
          id v11 = SESCreateAndLogError();
          v20[2](v20, 0, v11);
        }
        else
        {
          uint64_t v10 = [a1[4] clientBundleIdentifier];
          BOOL v6 = [v10 dataUsingEncoding:4];

          if (v6)
          {
            id v11 = +[NSData randomData:8];
            *(void *)&long long buf = [v6 DERItem];
            *((void *)&buf + 1) = v12;
            id v34 = [a1[6] DERItem];
            uint64_t v35 = v13;
            id v36 = [v11 DERItem];
            uint64_t v37 = v14;
            uint64_t v15 = encodeSequenceContentSpec();
            if (v15)
            {
              objc_initWeak(&location, a1[4]);
              v26[0] = _NSConcreteStackBlock;
              v26[1] = 3221225472;
              void v26[2] = sub_1000447F8;
              v26[3] = &unk_10040D6D8;
              id v30 = a1[7];
              objc_copyWeak(&v31, &location);
              id v27 = v5;
              id v28 = v15;
              id v29 = v11;
              sub_10005812C((uint64_t)SecureElementManager, 0, 0, @"Sign OEM App Data", v26);

              objc_destroyWeak(&v31);
              objc_destroyWeak(&location);
            }
            else
            {
              id v23 = (void (**)(id, void, void *))a1[7];
              __int16 v24 = SESDefaultLogObject();
              uint64_t v25 = SESCreateAndLogError();
              v23[2](v23, 0, v25);
            }
          }
          else
          {
            uint64_t v21 = (void (**)(id, void, void *))a1[7];
            id v11 = SESDefaultLogObject();
            id v22 = SESCreateAndLogError();
            v21[2](v21, 0, v22);
          }
        }
      }
      else
      {
        uint64_t v18 = (void (**)(id, void, void *))a1[7];
        BOOL v6 = SESDefaultLogObject();
        id v11 = [a1[5] asHexString];
        uint64_t v19 = SESCreateAndLogError();
        v18[2](v18, 0, v19);
      }
    }
    else
    {
      id v16 = (void (**)(id, void, void *))a1[7];
      id v5 = SESDefaultLogObject();
      BOOL v6 = [a1[5] asHexString];
      id v17 = SESCreateAndLogError();
      v16[2](v16, 0, v17);
    }
  }
  else
  {
    uint64_t v4 = (void (**)(id, void, void *))a1[7];
    id v5 = SESDefaultLogObject();
    BOOL v6 = SESCreateAndLogError();
    v4[2](v4, 0, v6);
  }
}

void sub_1000447D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000447F8(id *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a3)
  {
    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    id WeakRetained = objc_loadWeakRetained(a1 + 8);
    id v7 = WeakRetained;
    if (WeakRetained)
    {
      int v8 = [WeakRetained queue];
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10004499C;
      v12[3] = &unk_10040D6B0;
      id v13 = v5;
      id v14 = a1[4];
      id v15 = a1[5];
      id v18 = a1[7];
      id v16 = v7;
      id v17 = a1[6];
      dispatch_async(v8, v12);
    }
    else
    {
      BOOL v9 = (void (**)(id, void, void *))a1[7];
      uint64_t v10 = SESDefaultLogObject();
      id v11 = SESCreateAndLogError();
      v9[2](v9, 0, v11);
    }
  }
}

void sub_10004499C(uint64_t a1)
{
  double v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) appletIdentifier];
  uint64_t v4 = [*(id *)(a1 + 40) publicKeyIdentifier];
  id v5 = [*(id *)(a1 + 48) ses_sha256];
  id v19 = 0;
  BOOL v6 = sub_10004B7A0(v2, v3, v4, v5, 0, &v19);
  id v7 = v19;

  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 72);
    SESDefaultLogObject();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 16))(v8, 0, v10);

    id v7 = (id)v10;
  }
  else
  {
    id v11 = objc_alloc((Class)SESDataAttestation);
    id v18 = [*(id *)(a1 + 56) clientBundleIdentifier];
    id v12 = [v18 copy];
    id v13 = [*(id *)(a1 + 64) copy];
    id v14 = [v6 signedData];
    id v15 = [v14 copy];
    id v16 = [v6 signature];
    id v17 = [v16 copy];
    id v9 = [v11 initWithAppBundleID:v12 nonce:v13 signedData:v15 signature:v17];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_100044CC4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100045410(id a1)
{
  id v1 = (void *)qword_10045CD50;
  qword_10045CD50 = (uint64_t)&off_10042D9D0;
}

void sub_100045B28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100045C04;
  block[3] = &unk_10040D2C0;
  id v11 = v6;
  id v12 = v5;
  uint64_t v13 = *(void *)(a1 + 32);
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void sub_100045C04(id *a1)
{
  if (a1[4] || !a1[5])
  {
    double v2 = SESDefaultLogObject();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      id v3 = [a1[6] clientBundleIdentifier];
      uint64_t v4 = [a1[4] localizedDescription];
      *(_DWORD *)long long buf = 138412546;
      id v32 = v3;
      __int16 v33 = 2112;
      id v34 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Failed to wake up client with bundleID %@ %@", buf, 0x16u);
    }
  }
  else
  {
    id v5 = a1[6];
    if (v5[11])
    {
      sub_100052B14(v5[12]);
      uint64_t v6 = *((void *)a1[6] + 12);
      sub_1000529D8(v6, 1.0);
    }
    else
    {
      id v7 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.seserviced" name:@"RKESessionBackground"];
      id v8 = objc_alloc((Class)RBSAssertion);
      id v9 = [a1[6] clientBundleIdentifier];
      uint64_t v10 = +[NSString stringWithFormat:@"RKESession background assertion for %@", v9];
      id v11 = +[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", [a1[5] pid]);
      id v30 = v7;
      id v12 = +[NSArray arrayWithObjects:&v30 count:1];
      id v13 = [v8 initWithExplanation:v10 target:v11 attributes:v12];
      id v14 = (void *)*((void *)a1[6] + 11);
      *((void *)a1[6] + 11) = v13;

      id v15 = (void *)*((void *)a1[6] + 11);
      id v29 = 0;
      LOBYTE(v8) = [v15 acquireWithError:&v29];
      id v16 = v29;
      id v17 = SESDefaultLogObject();
      id v18 = v17;
      if (v8)
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          id v19 = [a1[6] clientBundleIdentifier];
          *(_DWORD *)long long buf = 138412290;
          id v32 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Acquired RBSAssertion for %@", buf, 0xCu);
        }
        objc_initWeak((id *)buf, a1[6]);
        uint64_t v20 = [SESTimer alloc];
        uint64_t v21 = [a1[6] queue];
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472;
        _OWORD v27[2] = sub_100046060;
        v27[3] = &unk_10040D720;
        objc_copyWeak(&v28, (id *)buf);
        id v22 = sub_100052804((NSObject **)v20, v21, v27);
        id v23 = a1[6];
        __int16 v24 = (void *)v23[12];
        v23[12] = v22;

        sub_1000529D8(*((void *)a1[6] + 12), 1.0);
        objc_destroyWeak(&v28);
        objc_destroyWeak((id *)buf);
      }
      else
      {
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v32 = v16;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to acquire RBSAssertion %@", buf, 0xCu);
        }

        uint64_t v25 = a1[6];
        __int16 v26 = (void *)v25[11];
        v25[11] = 0;
      }
    }
  }
}

void sub_100046024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100046060(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  double v2 = WeakRetained;
  if (WeakRetained)
  {
    [*((id *)WeakRetained + 11) invalidate];
    id v3 = (void *)v2[11];
    v2[11] = 0;

    uint64_t v4 = (void *)v2[12];
    v2[12] = 0;

    id v5 = SESDefaultLogObject();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = v2[13];
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Invalidated RBSAssertion for %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

id sub_100046240(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v12 = 0;
    id v13 = &v12;
    uint64_t v14 = 0x3032000000;
    id v15 = sub_1000463B8;
    id v16 = sub_1000463C8;
    id v17 = 0;
    uint64_t v6 = 0;
    int v7 = &v6;
    uint64_t v8 = 0x3032000000;
    id v9 = sub_1000463B8;
    uint64_t v10 = sub_1000463C8;
    id v11 = 0;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_1000463D0;
    v5[3] = &unk_10040C430;
    v5[4] = &v6;
    void v5[5] = &v12;
    sub_10001A4A0(a1, v5);
    if (a2) {
      *a2 = (id) v13[5];
    }
    id v3 = (id)v7[5];
    _Block_object_dispose(&v6, 8);

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_100046394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000463B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000463C8(uint64_t a1)
{
}

void sub_1000463D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[SEEndPointCAEntity fetchRequest];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v3 executeFetchRequest:v4 error:&obj];

  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_100046478(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = v8;
  if (!a1)
  {
LABEL_9:
    id v13 = 0;
    goto LABEL_13;
  }
  if (!v7 || !v8)
  {
    if (a4)
    {
      uint64_t v14 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_9;
  }
  id v17 = 0;
  uint64_t v10 = sub_100046240(a1, &v17);
  id v11 = v17;
  uint64_t v12 = v11;
  if (!v10 || v11)
  {
    id v13 = 0;
    if (a4) {
      *a4 = v11;
    }
  }
  else
  {
    id v16 = v7;
    id v13 = Find();
  }
LABEL_13:

  return v13;
}

id sub_1000465F8(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10004663C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = [v5 endPointCAData];
      id v8 = +[SEEndPointCA decodeWithData:v7 error:a3];
LABEL_6:

      goto LABEL_7;
    }
    if (a3)
    {
      id v7 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v8 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
  }
  id v8 = 0;
LABEL_7:

  return v8;
}

id sub_100046714(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v12 = 0;
    id v13 = &v12;
    uint64_t v14 = 0x3032000000;
    id v15 = sub_1000463B8;
    id v16 = sub_1000463C8;
    id v17 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100046860;
    v8[3] = &unk_10040D770;
    id v9 = v5;
    id v10 = v6;
    id v11 = &v12;
    sub_10001A33C((uint64_t)a1, v8);
    a1 = (id)v13[5];

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_100046848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100046860(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  id obj = *(id *)(v5 + 40);
  id v6 = [v4 encodeWithError:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
  [*(id *)(a1 + 32) setEndPointCAData:v6];

  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)
    || ([*(id *)(a1 + 32) endPointCAData],
        id v11 = objc_claimAutoreleasedReturnValue(),
        v11,
        !v11))
  {
    id v7 = SESDefaultLogObject();
    uint64_t v8 = SESCreateAndLogError();
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    sub_100030B78(v3);
  }
  else
  {
    uint64_t v12 = sub_100030AE4((uint64_t)v3);
    uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

void *sub_100046978(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return 0;
  }
  IsValid = a3;
  id v4 = sub_10004663C(a1, a2, a3);
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = [v4 certificates];
    CFDataRef v7 = [v6 lastObject];

    SecCertificateRef v8 = SecCertificateCreateWithData(0, v7);
    if (v8)
    {
      SecCertificateRef v9 = v8;
      CFAbsoluteTimeGetCurrent();
      IsValid = (void *)SecCertificateIsValid();
      CFRelease(v9);
    }
    else if (IsValid)
    {
      id v10 = SESDefaultLogObject();
      uint64_t v12 = [(__CFData *)v7 asHexString];
      SESCreateAndLogError();
      void *IsValid = (id)objc_claimAutoreleasedReturnValue();

      IsValid = 0;
    }
  }
  else
  {
    IsValid = 0;
  }

  return IsValid;
}

id sub_100046AA0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v12 = v11;
  if (a1)
  {
    if (v10 && v9 && v11)
    {
      uint64_t v13 = sub_100030AD8(a1);
      id v14 = +[NSEntityDescription insertNewObjectForEntityForName:@"SEEndPointCAEntity" inManagedObjectContext:v13];

      [v14 setIdentifier:v9];
      [v14 setClientName:v12];
      [v14 setInstance:v10];
      if ([v14 validateForInsert:a5])
      {
        id v14 = v14;
        id v15 = v14;
      }
      else
      {
        id v15 = 0;
      }
      goto LABEL_10;
    }
    if (a5)
    {
      SESDefaultLogObject();
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      id v15 = 0;
      *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_10:

      goto LABEL_11;
    }
  }
  id v15 = 0;
LABEL_11:

  return v15;
}

__CFString *sub_100046C00(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  if (a2 >= 6)
  {
    if (a3) {
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  switch(a2)
  {
    case 3:
      id v6 = @"A00000085801010100000001";
      break;
    case 2:
      id v6 = @"A00000085802010100000001";
      break;
    case 1:
      id v6 = @"A000000809434343444B417631";
      break;
    default:
      if ((a2 & 0xFFFFFFFFFFFFFFFELL) != 4) {
        goto LABEL_13;
      }
      id v6 = @"A000000909ACCE5501";
      break;
  }
  CFDataRef v7 = [(__CFString *)v6 hexStringAsData];
  BOOL v8 = sub_100056C08(v5, v7);

  if (!v8)
  {
LABEL_13:
    if (a3)
    {
LABEL_14:
      id v9 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_15:
    id v6 = 0;
  }

  return v6;
}

id sub_100046D4C(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,char a21,unsigned __int8 a22,void *a23)
{
  id v27 = a1;
  id v28 = a3;
  id v29 = a4;
  id v30 = a5;
  id v31 = a6;
  id v32 = a10;
  __int16 v33 = v32;
  id v123 = a11;
  id v122 = a12;
  id v120 = a13;
  id v114 = a14;
  id v115 = a15;
  id v116 = a16;
  id v117 = a17;
  id v121 = a18;
  id v119 = a19;
  id v118 = a20;
  id v34 = SESDefaultLogObject();
  if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412802;
    id v135 = v28;
    __int16 v136 = 2112;
    id v137 = v30;
    __int16 v138 = 2112;
    id v139 = v31;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%@ %@ %@", buf, 0x20u);
  }

  uint64_t v35 = SESDefaultLogObject();
  if (os_signpost_enabled(v35))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINT", "", buf, 2u);
  }

  if (!v29 || !v27 || !v30)
  {
    if (a23)
    {
      id v38 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v39 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  id v36 = [@"A000000909ACCE5501" hexStringAsData];
  unsigned int v37 = [v28 isEqualToData:v36];

  if (!v37)
  {
    if ([v32 length] == (id)8) {
      goto LABEL_16;
    }
    if (a23) {
      goto LABEL_11;
    }
LABEL_23:
    id v40 = 0;
    goto LABEL_26;
  }
  if ([v32 length] == (id)16)
  {
LABEL_16:
    int v41 = [v31 asAsciiData];
    id v38 = v41;
    if (!v41 || ![v41 length] || (unint64_t)objc_msgSend(v38, "length") >= 0x1F)
    {
      if (!a23)
      {
        id v40 = 0;
        goto LABEL_25;
      }
      id v100 = SESDefaultLogObject();
      [v31 length];
      SESCreateAndLogError();
      id v40 = 0;
      *a23 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_21;
    }
    id v100 = [v29 asAsciiData];
    if (!v100 || ![v100 length] || (unint64_t)objc_msgSend(v100, "length") >= 0x1F)
    {
      if (a23)
      {
        uint64_t v44 = SESDefaultLogObject();
        [v29 length];
        SESCreateAndLogError();
        id v110 = (id)v44;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
LABEL_36:
        id v40 = 0;
        *a23 = v45;
LABEL_37:

LABEL_21:
        goto LABEL_25;
      }
      goto LABEL_71;
    }
    if ([v123 length] != (id)65)
    {
      if (a23)
      {
        uint64_t v47 = SESDefaultLogObject();
        [v123 length];
        SESCreateAndLogError();
        id v110 = (id)v47;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_36;
      }
      goto LABEL_71;
    }
    if ([v122 length] != (id)15 && objc_msgSend(v122, "length") != (id)13)
    {
      if (a23)
      {
        uint64_t v49 = SESDefaultLogObject();
        [v122 length];
        SESCreateAndLogError();
        id v110 = (id)v49;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_36;
      }
      goto LABEL_71;
    }
    if ([v120 length] != (id)15 && objc_msgSend(v120, "length") != (id)13)
    {
      if (a23)
      {
        uint64_t v50 = SESDefaultLogObject();
        [v120 length];
        SESCreateAndLogError();
        id v110 = (id)v50;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_36;
      }
      goto LABEL_71;
    }
    if (v121
      && (([v121 intValue] & 0x80000000) != 0 || (int)objc_msgSend(v121, "intValue") >= 2))
    {
      if (a23)
      {
        uint64_t v46 = SESDefaultLogObject();
        [v121 intValue];
        SESCreateAndLogError();
        id v110 = (id)v46;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_36;
      }
LABEL_71:
      id v40 = 0;
      goto LABEL_21;
    }
    if (v119
      && (([v119 intValue] & 0x80000000) != 0 || (int)objc_msgSend(v119, "intValue") >= 256))
    {
      if (a23)
      {
        uint64_t v48 = SESDefaultLogObject();
        [v119 intValue];
        SESCreateAndLogError();
        id v110 = (id)v48;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_36;
      }
      goto LABEL_71;
    }
    if (v118
      && (([v118 intValue] & 0x80000000) != 0 || (int)objc_msgSend(v118, "intValue") >= 256))
    {
      if (a23)
      {
        uint64_t v51 = SESDefaultLogObject();
        [v118 intValue];
        SESCreateAndLogError();
        id v110 = (id)v51;
        id v45 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_36;
      }
      goto LABEL_71;
    }
    if (a22 >= 0x11u)
    {
      if (!a23) {
        goto LABEL_71;
      }
LABEL_66:
      uint64_t v52 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v110 = (id)v52;
      id v45 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    if (a9 >= 4u)
    {
      if (!a23) {
        goto LABEL_71;
      }
      goto LABEL_66;
    }
    id v53 = [@"A000000909ACCE5501" hexStringAsData];
    unsigned int v54 = [v28 isEqualToData:v53];

    id v98 = +[SESTLV TLVWithTag:77 value:v33];
    if (v54)
    {
      v133[0] = v98;
      id v96 = +[SESTLV TLVWithTag:24352 value:v38];
      v133[1] = v96;
      uint64_t v95 = +[SESTLV TLVWithTag:66 value:v100];
      v133[2] = v95;
      uint64_t v107 = +[SESTLV TLVWithTag:70 unsignedChar:a7];
      v133[3] = v107;
      id v94 = +[SESTLV TLVWithTag:71 unsignedChar:a8];
      v133[4] = v94;
      uint64_t v93 = +[SESTLV TLVWithTag:91 value:v123];
      v133[5] = v93;
      uint64_t v92 = +[SESTLV TLVWithTag:81 value:v122];
      v133[6] = v92;
      id v91 = +[SESTLV TLVWithTag:82 value:v120];
      v133[7] = v91;
      uint64_t v90 = +[NSArray arrayWithObjects:v133 count:8];
      id v110 = [v90 mutableCopy];
    }
    else
    {
      v132[0] = v98;
      id v96 = +[SESTLV TLVWithTag:24352 value:v38];
      v132[1] = v96;
      uint64_t v95 = +[SESTLV TLVWithTag:66 value:v100];
      v132[2] = v95;
      uint64_t v107 = +[SESTLV TLVWithTag:70 unsignedChar:a7];
      v132[3] = v107;
      id v94 = +[SESTLV TLVWithTag:71 unsignedChar:a8];
      v132[4] = v94;
      uint64_t v93 = [@"0100" hexStringAsData];
      uint64_t v92 = +[SESTLV TLVWithTag:92 value:v93];
      v132[5] = v92;
      id v91 = +[SESTLV TLVWithTag:91 value:v123];
      v132[6] = v91;
      uint64_t v90 = +[SESTLV TLVWithTag:81 value:v122];
      v132[7] = v90;
      long long v55 = +[SESTLV TLVWithTag:82 value:v120];
      v132[8] = v55;
      id v56 = +[NSArray arrayWithObjects:v132 count:9];
      id v110 = [v56 mutableCopy];
    }
    id v108 = v27;
    uint64_t v99 = v33;
    if ([v115 count])
    {
      CFDataRef v57 = objc_opt_new();
      long long v129 = 0u;
      long long v130 = 0u;
      long long v127 = 0u;
      long long v128 = 0u;
      id v58 = v115;
      id v59 = [v58 countByEnumeratingWithState:&v127 objects:v131 count:16];
      if (v59)
      {
        uint64_t v60 = *(void *)v128;
        do
        {
          for (uint64_t i = 0; i != v59; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v128 != v60) {
              objc_enumerationMutation(v58);
            }
            [v57 appendData:*(void *)(*((void *)&v127 + 1) + 8 * i)];
          }
          id v59 = [v58 countByEnumeratingWithState:&v127 objects:v131 count:16];
        }
        while (v59);
      }

      id v27 = v108;
      __int16 v33 = v99;
      uint64_t v62 = +[SESTLV TLVWithTag:73 value:v57];
      [v110 addObject:v62];
    }
    if ([v116 unsignedShortValue])
    {
      id v63 = +[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 74, __rev16([v116 unsignedShortValue]));
      [v110 addObject:v63];
    }
    if ([v117 unsignedShortValue])
    {
      uint64_t v64 = +[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 75, __rev16([v117 unsignedShortValue]));
      [v110 addObject:v64];
    }
    if ([v114 length])
    {
      id v65 = +[SESTLV TLVWithTag:78 value:v114];
      [v110 addObject:v65];
    }
    id v126 = 0;
    unint64_t v66 = sub_1000482CC(v27, v28, &v126);
    id v67 = v126;
    if (v66 <= 1)
    {
      if (a23)
      {
        __int16 v113 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v40 = 0;
        *a23 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v40 = 0;
      }
      goto LABEL_143;
    }
    if (v121)
    {
      uint64_t v68 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 90, [v121 unsignedIntValue]);
      [v110 addObject:v68];
    }
    if (v119)
    {
      id v69 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 134, [v119 unsignedIntValue]);
      [v110 addObject:v69];
    }
    if (v118)
    {
      uint64_t v70 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 135, [v118 unsignedIntValue]);
      [v110 addObject:v70];
    }
    if (a21)
    {
      id v71 = +[SESTLV TLVWithTag:136 value:0];
      [v110 addObject:v71];
    }
    if (a22)
    {
      long long v72 = +[SESTLV TLVWithTag:137 unsignedChar:a22];
      [v110 addObject:v72];
    }
    if (a9)
    {
      id v73 = +[SESTLV TLVWithTag:202 unsignedChar:a9];
      [v110 addObject:v73];
    }
    long long v112 = +[SESTLV TLVWithTag:32551 children:v110];
    if (!v112)
    {
      if (!a23)
      {
        id v40 = 0;
        id v27 = v108;
        __int16 v33 = v99;
LABEL_142:

LABEL_143:
        goto LABEL_37;
      }
      long long v111 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v40 = 0;
      *a23 = (id)objc_claimAutoreleasedReturnValue();
LABEL_141:

      id v27 = v108;
      __int16 v33 = v99;
      goto LABEL_142;
    }
    uint64_t v74 = [v112 asData];
    id v125 = v67;
    long long v111 = sub_100048478(v108, v28, v74, 112, 0, 0, 0, &v125);
    id v75 = v125;

    if (v75)
    {
      uint64_t v76 = SESDefaultLogObject();
      if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      {
        id v77 = [v112 asData];
        uint64_t v78 = [v77 base64];
        *(_DWORD *)long long buf = 138412290;
        id v135 = v78;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "CreateEndPoint buffer %@", buf, 0xCu);
      }
      if (a23)
      {
        id v104 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v40 = 0;
        *a23 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v40 = 0;
      }
      goto LABEL_140;
    }
    if (a2 == 1)
    {
      CFStringRef v79 = @"0100";
    }
    else
    {
      if (a2 == 4) {
        goto LABEL_127;
      }
      CFStringRef v79 = @"02000100";
    }
    uint64_t v105 = +[NSData dataWithHexString:v79];
    uint64_t v97 = +[SESTLV TLVWithTag:148 value:v105];
    uint64_t v80 = [v97 asData];
    sub_1000489E4(v108, v28, v80);
    id v75 = (id)objc_claimAutoreleasedReturnValue();

    if (v75)
    {
      id v102 = getCertificatePublicKey();
      id v81 = [v102 ses_sha1];
      uint64_t v82 = sub_100048B74(v108, v28, v81);

      if (v82)
      {
        id v83 = SESDefaultLogObject();
        if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 138412290;
          id v135 = v82;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "During cleanup: %@", buf, 0xCu);
        }
      }
      if (a23)
      {
        uint64_t v84 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a23 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_137;
    }

LABEL_127:
    id v124 = 0;
    uint64_t v105 = +[SEEndPoint endPointWithType:a2 appletIdentifier:v28 identifier:v30 certificateData:v111 error:&v124];
    id v75 = v124;
    if (!v75)
    {
      id v40 = v105;
      uint64_t v105 = v40;
      goto LABEL_139;
    }
    id v85 = SESDefaultLogObject();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "After creating endPoint, couldn't create SEEndPoint object, cleaning up before returning", buf, 2u);
    }

    uint64_t v103 = getCertificatePublicKey();
    uint64_t v86 = [v103 ses_sha1];
    id v87 = sub_100048B74(v108, v28, v86);

    if (v87)
    {
      uint64_t v88 = SESDefaultLogObject();
      if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v135 = v87;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "During cleanup: %@", buf, 0xCu);
      }
    }
    if (a23)
    {
      id v89 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a23 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_137:
    id v40 = 0;
LABEL_139:

LABEL_140:
    id v67 = v75;
    goto LABEL_141;
  }
  if (!a23) {
    goto LABEL_23;
  }
LABEL_11:
  id v38 = SESDefaultLogObject();
  [v32 length];
  SESCreateAndLogError();
  id v39 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:
  id v40 = 0;
  *a23 = v39;
LABEL_25:

LABEL_26:
  __int16 v42 = SESDefaultLogObject();
  if (os_signpost_enabled(v42))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINT", "", buf, 2u);
  }

  return v40;
}

void sub_10004823C(_Unwind_Exception *a1)
{
  double v2 = SESDefaultLogObject();
  sub_1003656A0(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_1000482CC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = sub_100056638(v5, a2);
  if (v6)
  {
    id v7 = v6;
    if (a3)
    {
      id v7 = v6;
      uint64_t v8 = 0;
      *a3 = v7;
    }
    else
    {
      uint64_t v8 = 0;
    }
  }
  else
  {
    id v20 = 0;
    sub_100056348(v5, 128, 202, 0, 0, 0, 0, &v20);
    id v9 = (id *)objc_claimAutoreleasedReturnValue();
    id v7 = v20;
    id v10 = sub_10005D558(v9);
    id v11 = [v10 length];

    if ((unint64_t)v11 > 1)
    {
      id v14 = sub_10005D558(v9);
      unsigned int v15 = [v14 u16BE:0];

      uint64_t v16 = 3;
      uint64_t v17 = 1;
      if (v15 == 261) {
        uint64_t v17 = 2;
      }
      if (v15 <= 0x105) {
        uint64_t v16 = v17;
      }
      if (v15 <= 0x200) {
        uint64_t v8 = v16;
      }
      else {
        uint64_t v8 = 4;
      }
    }
    else
    {
      if (a3)
      {
        uint64_t v12 = SESDefaultLogObject();
        uint64_t v13 = sub_10005D558(v9);
        id v19 = [v13 asHexString];
        SESCreateAndLogError();
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      uint64_t v8 = 0;
    }
  }
  return v8;
}

id sub_100048478(void *a1, void *a2, void *a3, char a4, char a5, char a6, void *a7, void *a8)
{
  id v15 = a1;
  id v16 = a2;
  id v17 = a3;
  id v18 = a7;
  if (v15 && v16)
  {
    char v51 = a5;
    uint64_t v19 = sub_100056638(v15, v16);
    if (v19)
    {
      id v20 = (id)v19;
      if (!a8)
      {
LABEL_7:
        id v22 = 0;
LABEL_8:
        id v23 = 0;
LABEL_9:

        goto LABEL_13;
      }
      uint64_t v21 = SESDefaultLogObject();
LABEL_6:
      SESCreateAndLogError();
      *a8 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_7;
    }
    __int16 v26 = [@"A000000909ACCE5501" hexStringAsData];
    unsigned int v27 = [v16 isEqualToData:v26];

    if (v27)
    {
      if (v17 && v18)
      {
        if (a8)
        {
          id v28 = SESDefaultLogObject();
          SESCreateAndLogError();
          *a8 = (id)objc_claimAutoreleasedReturnValue();
        }
        id v22 = 0;
LABEL_22:
        id v20 = 0;
        goto LABEL_8;
      }
      if (v18) {
        id v38 = v18;
      }
      else {
        id v38 = v17;
      }
      id v54 = 0;
      id v22 = sub_100056504(v15, 128, a4, a5, a6, v38, 0, &v54);
      id v20 = v54;
      if (!v20 && v22)
      {
        sub_10005D558((id *)v22);
        id v23 = (id)objc_claimAutoreleasedReturnValue();
        goto LABEL_9;
      }
    }
    else
    {
      if (v17)
      {
        char v50 = a4;
        id v29 = v15;
        id v30 = v17;
        if ([v30 length])
        {
          id v48 = v18;
          id v49 = v17;
          uint64_t v31 = 0;
          unsigned int v32 = 0;
          while (1)
          {
            __int16 v33 = (char *)[v30 length];
            uint64_t v34 = (unint64_t)&v33[-v31] >= 0xFA ? 250 : (uint64_t)&v33[-v31];
            uint64_t v35 = [v30 subdataWithRange:v31, v34];
            id v55 = 0;
            id v36 = sub_100056348(v29, 128, 208, SBYTE1(v32), v32, v35, 0, &v55);
            id v37 = v55;

            if (v37) {
              break;
            }
            v32 += v34;
            uint64_t v31 = v32;
            if ([v30 length] == (id)v32)
            {
              id v20 = 0;
              goto LABEL_40;
            }
          }
          id v39 = SESDefaultLogObject();
          SESCreateAndLogError();
          id v20 = (id)objc_claimAutoreleasedReturnValue();

LABEL_40:
          id v18 = v48;
          id v17 = v49;
        }
        else
        {
          id v20 = 0;
        }

        a4 = v50;
        if (v20)
        {
          if (!a8) {
            goto LABEL_7;
          }
          uint64_t v21 = SESDefaultLogObject();
          goto LABEL_6;
        }
      }
      id v53 = 0;
      id v22 = sub_100056348(v15, 128, a4, v51, a6, v18, 0, &v53);
      id v20 = v53;
      if (!v20 && v22)
      {
        id v40 = sub_10005D558((id *)v22);
        id v23 = [v40 length];

        if (!v23)
        {
          id v20 = 0;
          goto LABEL_9;
        }
        int v41 = sub_10005D558((id *)v22);
        id v42 = [v41 length];

        if (v42 == (id)2)
        {
          sub_10005D558((id *)v22);
          id v43 = objc_claimAutoreleasedReturnValue();
          unsigned int v44 = bswap32(*(unsigned __int16 *)[v43 bytes]) >> 16;
          id v52 = 0;
          sub_10004EAD8(v15, v44, &v52);
          id v23 = (id)objc_claimAutoreleasedReturnValue();
          id v20 = v52;

          goto LABEL_9;
        }
        if (a8)
        {
          uint64_t v46 = SESDefaultLogObject();
          uint64_t v47 = sub_10005D558((id *)v22);
          SESCreateAndLogError();
          *a8 = (id)objc_claimAutoreleasedReturnValue();
        }
        goto LABEL_22;
      }
    }
    if (a8)
    {
      id v45 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_8;
  }
  if (a8)
  {
    __int16 v24 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a8 = (id)objc_claimAutoreleasedReturnValue();
  }
  id v23 = 0;
LABEL_13:

  return v23;
}

id sub_1000489E4(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = SESDefaultLogObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 138412290;
    id v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }

  if (v5 && v6 && v7)
  {
    sub_100056638(v5, v6);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    if (!v9)
    {
      id v15 = 0;
      id v10 = sub_100056348(v5, 128, 52, 0, 0, v7, 0, &v15);
      id v9 = v15;
    }
    id v11 = v9;
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v12 = SESDefaultLogObject();
    SESCreateAndLogError();
    id v11 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v13 = v11;

  return v13;
}

id sub_100048B74(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = SESDefaultLogObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    id v9 = [v7 asHexString];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  id v10 = SESDefaultLogObject();
  if (os_signpost_enabled(v10))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINT", "", buf, 2u);
  }

  if (v5 && v6 && v7)
  {
    id v11 = +[SESTLV TLVWithTag:146 value:v7];
    uint64_t v12 = [v11 asData];
    id v13 = sub_1000489E4(v5, v6, v12);

    id v14 = +[SESTLV TLVWithTag:80 value:v7];
    id v15 = [v14 asData];
    id v23 = 0;
    id v16 = sub_100048478(v5, v6, 0, 116, 0, 0, v15, &v23);
    id v17 = v23;

    if (v17)
    {
      id v18 = SESDefaultLogObject();
      id v22 = [v7 asHexString];
      uint64_t v19 = SESCreateAndLogError();
    }
    else
    {
      uint64_t v19 = 0;
    }
  }
  else
  {
    id v11 = SESDefaultLogObject();
    uint64_t v19 = SESCreateAndLogError();
  }

  id v20 = SESDefaultLogObject();
  if (os_signpost_enabled(v20))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINT", "", buf, 2u);
  }

  return v19;
}

void sub_100048E88(_Unwind_Exception *a1)
{
  double v2 = SESDefaultLogObject();
  sub_1003656F0(v2);

  _Unwind_Resume(a1);
}

id sub_100048EC4(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  CFDataRef v10 = a2;
  id v34 = a3;
  id v11 = a4;
  uint64_t v12 = SESDefaultLogObject();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412802;
    CFDataRef v38 = v10;
    __int16 v39 = 2112;
    id v40 = v34;
    __int16 v41 = 2112;
    id v42 = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "%@ %@ %@", buf, 0x20u);
  }

  id v13 = SESDefaultLogObject();
  if (os_signpost_enabled(v13))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINTCA", "", buf, 2u);
  }

  if (!v9 || !v10 || !v11)
  {
    if (a5)
    {
      id v29 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a5 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_19;
  }
  CFDataRef v36 = 0;
  id v15 = sub_100056FD0(v9, v14);
  CFDataRef v16 = [v15 seid];
  int v17 = SSEGetSignedDeviceData(v16, &v36);

  if (!v17)
  {
    CFDataRef v18 = v36;
    if (v36)
    {
      uint64_t v19 = SESDefaultLogObject();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        CFDataRef v38 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Retrieved SEPData : %@", buf, 0xCu);
      }

      id v20 = objc_opt_new();
      uint64_t v21 = [v11 asAsciiData];
      id v22 = +[SESTLV TLVWithTag:24352 value:v21];
      id v23 = [v22 asData];
      [v20 appendData:v23];

      __int16 v24 = +[SESTLV TLVWithTag:32560 value:v18];
      uint64_t v25 = [v24 asData];
      [v20 appendData:v25];

      id v35 = 0;
      __int16 v26 = sub_100048478(v9, v10, 0, 56, 0, 0, v20, &v35);
      id v27 = v35;
      if (v27 || !v26)
      {
        if (a5)
        {
          id v30 = SESDefaultLogObject();
          __int16 v33 = [v20 asHexString];
          SESCreateAndLogError();
          *a5 = (id)objc_claimAutoreleasedReturnValue();
        }
        id v28 = 0;
      }
      else
      {
        id v28 = +[SEEndPointCA endPointCAWithIdentifier:v34 subjectIdentifier:v11 instanceAID:v10 secureElementAttestation:v26 error:a5];
      }

      goto LABEL_24;
    }
  }
  if (!a5)
  {
LABEL_19:
    id v28 = 0;
    goto LABEL_25;
  }
  SESDefaultLogObject();
  CFDataRef v18 = (CFDataRef)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  id v28 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_24:

LABEL_25:
  uint64_t v31 = SESDefaultLogObject();
  if (os_signpost_enabled(v31))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_CREATE_ENDPOINTCA", "", buf, 2u);
  }

  return v28;
}

void sub_100049378(_Unwind_Exception *a1)
{
  double v2 = SESDefaultLogObject();
  sub_100365740(v2);

  _Unwind_Resume(a1);
}

id sub_1000493BC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = SESDefaultLogObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }

  id v9 = SESDefaultLogObject();
  if (os_signpost_enabled(v9))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINTCA", "", buf, 2u);
  }

  uint64_t v10 = [v7 asAsciiData];
  id v11 = (void *)v10;
  if (v5 && v6 && v10)
  {
    uint64_t v12 = +[SESTLV TLVWithTag:24352 value:v10];
    id v13 = [v12 asData];
    id v20 = 0;
    id v14 = sub_100048478(v5, v6, 0, 58, 0, 0, v13, &v20);
    id v15 = v20;

    if (v15)
    {
      CFDataRef v16 = SESDefaultLogObject();
      int v17 = SESCreateAndLogError();
    }
    else
    {
      int v17 = 0;
    }
  }
  else
  {
    SESDefaultLogObject();
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    int v17 = SESCreateAndLogError();
  }

  CFDataRef v18 = SESDefaultLogObject();
  if (os_signpost_enabled(v18))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PTA_DELETE_ENDPOINTCA", "", buf, 2u);
  }

  return v17;
}

void sub_100049674(_Unwind_Exception *a1)
{
  double v2 = SESDefaultLogObject();
  sub_100365790(v2);

  _Unwind_Resume(a1);
}

void *sub_1000496AC(void *a1, void *a2, void *a3, int a4, int a5, void *a6)
{
  LODWORD(v7) = a5;
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = v13;
  if (v11 && v12 && v13)
  {
    uint64_t v15 = sub_100056638(v11, v12);
    if (v15)
    {
      CFDataRef v16 = (void *)v15;
      if (a6)
      {
        int v17 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a6 = (id)objc_claimAutoreleasedReturnValue();

        a6 = 0;
      }
    }
    else
    {
      uint64_t v19 = SESDefaultLogObject();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "", buf, 2u);
      }

      unsigned int v32 = v14;
      id v20 = +[SESTLV TLVWithTag:80 value:v14];
      uint64_t v21 = [v20 asData];

      id v22 = objc_opt_new();
      if (v7)
      {
        while (1)
        {
          __int16 v23 = v7;
          char v24 = (unsigned __int16)v7 >= 0xFAu ? -6 : v7;
          id v33 = 0;
          sub_100056348(v11, 128, 120, SBYTE1(a4), a4, v21, v24, &v33);
          uint64_t v25 = (id *)objc_claimAutoreleasedReturnValue();
          id v26 = v33;
          if (v26 || v25 == 0) {
            break;
          }
          id v28 = sub_10005D558(v25);
          [v22 appendData:v28];

          uint64_t v7 = sub_10005D558(v25);
          a4 += [(id)v7 length];

          id v29 = sub_10005D558(v25);
          LOWORD(v7) = v23 - (unsigned __int16)[v29 length];

          if (!(_WORD)v7) {
            goto LABEL_20;
          }
        }
        CFDataRef v16 = v26;
        if (a6)
        {
          id v30 = SESDefaultLogObject();
          SESCreateAndLogError();
          *a6 = (id)objc_claimAutoreleasedReturnValue();
        }
        a6 = 0;
      }
      else
      {
LABEL_20:
        a6 = v22;
        CFDataRef v16 = 0;
      }
      id v14 = v32;
    }
  }
  else if (a6)
  {
    CFDataRef v18 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a6 = (id)objc_claimAutoreleasedReturnValue();

    a6 = 0;
  }

  return a6;
}

id sub_1000499B4(void *a1, void *a2, void *a3, void *a4, __int16 a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = SESDefaultLogObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = [v11 asHexString];
    *(_DWORD *)long long buf = 138412546;
    id v34 = v14;
    __int16 v35 = 1024;
    unsigned int v36 = [v12 length];
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@ --> %u bytes", buf, 0x12u);
  }
  if (v9 && v10 && v11 && v12)
  {
    uint64_t v15 = sub_100056638(v9, v10);
    if (v15)
    {
      CFDataRef v16 = SESDefaultLogObject();
      int v17 = SESCreateAndLogError();
LABEL_9:

      goto LABEL_11;
    }
    if ([v12 length])
    {
      id v31 = v10;
      uint64_t v19 = 0;
      while (1)
      {
        id v20 = [v12 length];
        uint64_t v21 = (unint64_t)(v20 - v19) >= 0xDB ? 219 : v20 - v19;
        CFDataRef v16 = +[NSMutableData dataWithCapacity:256];
        id v22 = +[SESTLV TLVWithTag:80 value:v11];
        __int16 v23 = [v22 asData];
        [v16 appendData:v23];

        char v24 = [v12 subdataWithRange:v19, v21];
        uint64_t v25 = +[SESTLV TLVWithTag:75 value:v24];
        id v26 = [v25 asData];
        [v16 appendData:v26];

        id v32 = 0;
        id v27 = sub_100056348(v9, 128, 122, SHIBYTE(a5), a5, v16, 0, &v32);
        id v28 = v32;
        if (v28) {
          break;
        }
        v19 += v21;
        a5 += v21;

        if (v19 == [v12 length])
        {
          int v17 = 0;
          uint64_t v15 = 0;
          id v10 = v31;
          goto LABEL_11;
        }
      }
      id v29 = v28;
      id v30 = SESDefaultLogObject();
      [v12 length];
      int v17 = SESCreateAndLogError();

      uint64_t v15 = 0;
      id v10 = v31;
      goto LABEL_9;
    }
    int v17 = 0;
  }
  else
  {
    uint64_t v15 = SESDefaultLogObject();
    int v17 = SESCreateAndLogError();
  }
LABEL_11:

  return v17;
}

id sub_100049D34(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  id v65 = a1;
  id v20 = a2;
  id v21 = a3;
  id v22 = a4;
  id v23 = a5;
  id v24 = a6;
  id v69 = a7;
  id v68 = a8;
  id v71 = a9;
  id v70 = a10;
  id v72 = a11;
  id v25 = a12;
  id v66 = a13;
  id v26 = SESDefaultLogObject();
  if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
  {
    id v27 = [v21 asHexString];
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Configure Endpoint %@", buf, 0xCu);
  }
  id v67 = v25;
  if (!v65 || !v20 || !v21)
  {
    id v28 = SESDefaultLogObject();
    id v43 = SESCreateAndLogError();
    id v30 = v22;
LABEL_30:
    char v50 = v68;
    id v49 = v69;
    goto LABEL_40;
  }
  id v28 = +[NSMutableArray arrayWithCapacity:8];
  id v29 = +[SESTLV TLVWithTag:80 value:v21];
  [v28 addObject:v29];

  id v30 = v22;
  if (v23)
  {
    id v31 = +[SESTLV TLVWithTag:74 value:v23];
    [v28 addObject:v31];
  }
  if (v22)
  {
    id v32 = +[SESTLV TLVWithTag:75 value:v22];
    [v28 addObject:v32];
  }
  if (v69)
  {
    id v33 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 131, [v69 BOOLValue]);
    [v28 addObject:v33];
  }
  if (v24)
  {
    id v34 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 130, [v24 BOOLValue]);
    [v28 addObject:v34];
  }
  if (v71)
  {
    __int16 v35 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 156, [v71 BOOLValue]);
    [v28 addObject:v35];
  }
  if (v68)
  {
    unsigned int v36 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 155, [v68 BOOLValue]);
    [v28 addObject:v36];
  }
  if (v70)
  {
    id v37 = +[SESTLV TLVWithTag:78 value:v70];
    [v28 addObject:v37];
  }
  id v64 = v24;
  if (v72)
  {
    *(void *)long long buf = 0;
    CFDataRef v38 = sub_100048478(v65, v20, 0, 118, 202, 0, v21, buf);
    id v39 = *(id *)buf;
    id v40 = v39;
    id v41 = v23;
    if (v39)
    {
      id v42 = v39;
    }
    else
    {
      if ([v38 length] == (id)1)
      {
        id v42 = 0;
        char v44 = *(unsigned char *)[v38 bytes] & 0xFE;
LABEL_28:

        id v46 = v42;
        if (v46)
        {
          uint64_t v47 = v46;
          id v48 = SESDefaultLogObject();
          id v43 = SESCreateAndLogError();

          id v23 = v41;
          id v24 = v64;
          goto LABEL_30;
        }
        char v51 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 202, (v44 | [v72 BOOLValue]));
        [v28 addObject:v51];

        id v23 = v41;
        goto LABEL_32;
      }
      id v45 = SESDefaultLogObject();
      uint64_t v62 = [v38 asHexString];
      SESCreateAndLogError();
      id v42 = (id)objc_claimAutoreleasedReturnValue();
    }
    char v44 = 0;
    goto LABEL_28;
  }
LABEL_32:
  if (v67)
  {
    id v52 = +[SESTLV TLVWithTag:unsignedChar:](SESTLV, "TLVWithTag:unsignedChar:", 154, [v67 unsignedCharValue]);
    [v28 addObject:v52];
  }
  id v53 = v23;
  if (v66)
  {
    id v54 = +[SESTLV TLVWithTag:unsignedShort:](SESTLV, "TLVWithTag:unsignedShort:", 94, bswap32([v66 shortValue]) >> 16);
    [v28 addObject:v54];
  }
  id v55 = v65;
  id v56 = v20;
  CFDataRef v57 = +[SESTLV dataWithTLVs:v28];
  *(void *)long long buf = 0;
  id v58 = sub_100048478(v55, v56, 0, 126, 0, 0, v57, buf);
  id v59 = *(id *)buf;

  if (v59)
  {
    uint64_t v60 = SESDefaultLogObject();
    id v63 = [v21 asHexString];
    id v43 = SESCreateAndLogError();
  }
  else
  {
    id v43 = 0;
  }
  id v23 = v53;
  char v50 = v68;
  id v49 = v69;

  id v24 = v64;
LABEL_40:

  return v43;
}

id sub_10004A414(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = SESDefaultLogObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    id v11 = [v9 asHexString];
    int v16 = 138412290;
    int v17 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&v16, 0xCu);
  }
  if (v7 && v8 && v9)
  {
    id v12 = +[SESTLV TLVWithTag:80 value:v9];
    id v13 = [v12 asData];
    id v14 = sub_100048478(v7, v8, 0, 138, 0, 0, v13, a4);

LABEL_9:
    goto LABEL_10;
  }
  if (a4)
  {
    id v12 = SESDefaultLogObject();
    SESCreateAndLogError();
    id v14 = 0;
    *a4 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_9;
  }
  id v14 = 0;
LABEL_10:

  return v14;
}

id sub_10004A5DC(void *a1, void *a2, void *a3, void *a4, void *a5, __int16 a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  int v16 = SESDefaultLogObject();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    int v17 = [v13 asHexString];
    *(_DWORD *)long long buf = 138412290;
    id v33 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  if (v11 && v12 && v13 && v14 && v15)
  {
    if ([v14 length] == (id)65)
    {
      CFDataRef v18 = +[NSMutableData data];
      uint64_t v19 = +[SESTLV TLVWithTag:151 value:v14];
      id v20 = [v19 asData];
      [v18 appendData:v20];

      id v21 = +[SESTLV TLVWithTag:74 value:v15];
      id v22 = [v21 asData];
      [v18 appendData:v22];

      id v23 = +[SESTLV TLVWithTag:80 value:v13];
      id v24 = [v23 asData];
      id v31 = 0;
      id v25 = sub_100048478(v11, v12, v18, 124, SHIBYTE(a6), a6, v24, &v31);
      id v26 = v31;

      if (v26)
      {
        id v27 = SESDefaultLogObject();
        id v30 = [v13 asHexString];
        id v28 = SESCreateAndLogError();
      }
      else
      {
        id v28 = 0;
      }

      goto LABEL_16;
    }
    CFDataRef v18 = SESDefaultLogObject();
    [v14 length];
  }
  else
  {
    CFDataRef v18 = SESDefaultLogObject();
  }
  id v28 = SESCreateAndLogError();
LABEL_16:

  return v28;
}

id sub_10004A910(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = SESDefaultLogObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
  {
    id v12 = [v9 asHexString];
    *(_DWORD *)long long buf = 138412290;
    id v22 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  if (v7 && v8 && v9 && v10)
  {
    id v13 = +[SESTLV TLVWithTag:32555 value:v10];
    id v14 = [v13 asData];
    id v15 = +[SESTLV TLVWithTag:80 value:v9];
    int v16 = [v15 asData];
    id v20 = 0;
    id v17 = sub_100048478(v7, v8, v14, 50, 1, 0, v16, &v20);
    id v18 = v20;
  }
  else
  {
    id v13 = SESDefaultLogObject();
    SESCreateAndLogError();
    id v18 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v18;
}

id sub_10004AB18(void *a1, unsigned int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10, char a11, __int16 a12, void *a13, void *a14, void *a15)
{
  id v21 = a1;
  id v22 = a3;
  id v23 = a4;
  id v115 = a5;
  id v24 = a6;
  CFDataRef v25 = a7;
  id v116 = a8;
  id v119 = a9;
  id v118 = a13;
  id v26 = a14;
  id v27 = SESDefaultLogObject();
  if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
  {
    [v23 asHexString];
    v29 = id v28 = v24;
    *(_DWORD *)long long buf = 138412802;
    *(void *)&uint8_t buf[4] = v29;
    __int16 v129 = 2112;
    id v130 = v26;
    __int16 v131 = 1024;
    BOOL v132 = v119 != 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "%@ %@ - have BA %d", buf, 0x1Cu);

    id v24 = v28;
  }
  id v117 = v26;

  id v30 = v21;
  if (!v21 || !v22 || !v23 || !v25)
  {
    id v31 = v115;
    if (a15)
    {
      __int16 v35 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a15 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_17;
  }
  id v31 = v115;
  if (a2 >= 2)
  {
    id v126 = 0;
    unint64_t v32 = sub_1000482CC(v21, v22, &v126);
    id v33 = v126;
    if (v33)
    {
      id v34 = a15;
      if (a15) {
        goto LABEL_15;
      }
      goto LABEL_16;
    }
    if (v32 <= 3)
    {
      id v34 = a15;
      if (a15)
      {
LABEL_15:
        id v36 = v24;
        id v37 = SESDefaultLogObject();
        SESCreateAndLogError();
        *id v34 = (id)objc_claimAutoreleasedReturnValue();

        id v24 = v36;
      }
LABEL_16:

LABEL_17:
      CFDataRef v38 = 0;
      id v39 = v116;
      goto LABEL_89;
    }
  }
  SecCertificateRef v40 = SecCertificateCreateWithData(0, v25);
  if (!v40)
  {
    id v39 = v116;
    id v65 = a15;
    if (!a15) {
      goto LABEL_46;
    }
LABEL_45:
    id v66 = SESDefaultLogObject();
    SESCreateAndLogError();
    *id v65 = (id)objc_claimAutoreleasedReturnValue();

    goto LABEL_46;
  }
  SecCertificateRef v41 = v40;
  v125[4] = 0;
  id v42 = (const void *)SecCertificateCopyExtensionValue();
  id v39 = v116;
  if (!v42)
  {
    CFRelease(v41);
    id v65 = a15;
    if (!a15) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  id v103 = v24;
  CFRelease(v42);
  SecKeyRef v43 = SecCertificateCopyKey(v41);
  CFRelease(v41);
  if (v43)
  {
    *(void *)long long buf = 0;
    SecKeyCopyPublicBytes();
    CFRelease(v43);
    id v108 = *(void **)buf;
    if (*(void *)buf)
    {
      char v44 = objc_opt_new();
      if (v115)
      {
        id v45 = +[SESTLV TLVWithTag:32544 value:v115];
        [v44 addObject:v45];
      }
      if (v103)
      {
        id v46 = +[SESTLV TLVWithTag:32546 value:v103];
        [v44 addObject:v46];
      }
      uint64_t v47 = +[SESTLV TLVWithTag:32548 value:v25];
      [v44 addObject:v47];

      if (v119)
      {
        id v48 = +[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 32554);
        [v44 addObject:v48];
      }
      id v100 = v44;
      id v49 = +[SESTLV TLVWithTag:0 children:v44];
      char v50 = [v49 value];
      id v51 = [v50 mutableCopy];

      if (v116) {
        [v51 appendData:v116];
      }
      id v52 = objc_opt_new();
      id v53 = +[SESTLV TLVWithTag:80 value:v23];
      [v52 addObject:v53];

      if (a12)
      {
        v125[0] = a11;
        v125[1] = a10;
        v125[2] = HIBYTE(a12);
        v125[3] = a12;
        id v54 = +[NSData dataWithBytes:v125 length:4];
        id v55 = +[SESTLV TLVWithTag:74 value:v54];
        [v52 addObject:v55];
      }
      if (v118)
      {
        id v56 = +[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 88);
        [v52 addObject:v56];
      }
      id v102 = v51;
      if (v117)
      {
        CFDataRef v57 = +[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", 89);
        [v52 addObject:v57];
      }
      if (a2 <= 1) {
        char v58 = 0;
      }
      else {
        char v58 = a2;
      }
      uint64_t v99 = v52;
      id v59 = +[SESTLV TLVWithTag:0 children:v52];
      uint64_t v60 = [v59 value];
      id v124 = 0;
      uint64_t v61 = sub_100048478(v30, v22, v51, 50, 0, v58, v60, &v124);
      id v62 = v124;

      uint64_t v101 = v62;
      id v98 = (void *)v61;
      if (v62)
      {
        if (!a15)
        {
          CFDataRef v38 = 0;
          id v24 = v103;
          id v39 = v116;
LABEL_88:

          goto LABEL_89;
        }
        id v63 = SESDefaultLogObject();
        uint64_t v96 = [v23 asHexString];
        SESCreateAndLogError();
        CFDataRef v38 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue();
        id v64 = (id)v96;
        id v24 = v103;
        id v39 = v116;
LABEL_87:

        goto LABEL_88;
      }
      id v68 = objc_opt_new();
      if (a2 < 2) {
        uint64_t v69 = 1;
      }
      else {
        uint64_t v69 = a2;
      }
      id v70 = +[SESTLV TLVWithTag:65 unsignedChar:v69];
      uint64_t v107 = v68;
      [v68 addObject:v70];

      long long v122 = 0u;
      long long v123 = 0u;
      long long v120 = 0u;
      long long v121 = 0u;
      id v71 = +[SESTLV TLVsWithData:v61];
      id v111 = [v71 countByEnumeratingWithState:&v120 objects:v127 count:16];
      if (v111)
      {
        id v72 = 0;
        id v64 = 0;
        id v73 = 0;
        uint64_t v110 = *(void *)v121;
        id v104 = v71;
        while (2)
        {
          for (uint64_t i = 0; i != v111; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v121 != v110) {
              objc_enumerationMutation(v71);
            }
            id v75 = *(void **)(*((void *)&v120 + 1) + 8 * i);
            int v76 = [v75 tag];
            if (v76 > 150)
            {
              if (v76 == 151)
              {
                id v83 = v75;
                CFStringRef v79 = v73;
                id v73 = v83;
              }
              else
              {
                if (v76 != 158)
                {
LABEL_79:
                  long long v112 = v72;
                  if (a15)
                  {
                    id v94 = SESDefaultLogObject();
                    [v75 tag];
                    SESCreateAndLogError();
                    *a15 = (id)objc_claimAutoreleasedReturnValue();
                  }
                  CFDataRef v38 = 0;
                  id v31 = v115;
                  id v39 = v116;
                  id v24 = v103;
                  uint64_t v93 = v104;
                  goto LABEL_85;
                }
                id v81 = v75;
                CFStringRef v79 = v72;
                id v72 = v81;
              }
            }
            else if (v76 == 74)
            {
              id v82 = v75;
              CFStringRef v79 = v64;
              id v64 = v82;
            }
            else
            {
              if (v76 != 146) {
                goto LABEL_79;
              }
              [v107 addObject:v75];
              id v77 = v72;
              id v78 = v64;
              CFStringRef v79 = +[NSData dataWithData:v108];
              uint64_t v80 = +[SESTLV TLVWithTag:90 value:v79];
              [v107 addObject:v80];

              id v64 = v78;
              id v72 = v77;
              id v71 = v104;
            }
          }
          id v111 = [v71 countByEnumeratingWithState:&v120 objects:v127 count:16];
          if (v111) {
            continue;
          }
          break;
        }

        id v39 = v116;
        uint64_t v97 = v64;
        if (!v72)
        {
          id v31 = v115;
          goto LABEL_83;
        }
        long long v112 = v72;
        id v31 = v115;
        if (v118)
        {
          if (a2 >= 2) {
            uint64_t v84 = 120;
          }
          else {
            uint64_t v84 = 88;
          }
          id v85 = +[SESTLV TLVWithTag:value:](SESTLV, "TLVWithTag:value:", v84);
          [v107 addObject:v85];
        }
        uint64_t v86 = [@"91712C44" hexStringAsData];
        id v87 = +[SESTLV TLVWithTag:147 value:v86];
        [v107 addObject:v87];

        uint64_t v88 = +[NSMutableData data];
        id v89 = +[SESTLV TLVWithTag:32549 children:v107];
        uint64_t v90 = [v89 asData];
        uint64_t v105 = v88;
        [v88 appendData:v90];

        id v91 = [v112 asData];
        [v88 appendData:v91];

        id v114 = [v73 value];
        uint64_t v92 = [v97 value];
        CFDataRef v38 = +[SEEndPointAuthorizeResponse responseWithEndPointAttestationData:v105 encryptionPublicKeyData:v114 encryptedData:v92];

        uint64_t v93 = v105;
        id v64 = v97;
        id v24 = v103;
      }
      else
      {

        id v73 = 0;
        uint64_t v97 = 0;
        id v39 = v116;
LABEL_83:
        id v24 = v103;
        if (!a15)
        {
          long long v112 = 0;
          CFDataRef v38 = 0;
          id v64 = v97;
          goto LABEL_86;
        }
        uint64_t v106 = SESDefaultLogObject();
        SESCreateAndLogError();
        long long v112 = 0;
        CFDataRef v38 = 0;
        *a15 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v93 = (void *)v106;
        id v64 = v97;
      }
LABEL_85:

LABEL_86:
      id v63 = v112;
      goto LABEL_87;
    }
    id v24 = v103;
    if (a15)
    {
      uint64_t v109 = SESDefaultLogObject();
      SESCreateAndLogError();
      CFDataRef v38 = 0;
      *a15 = (id)objc_claimAutoreleasedReturnValue();

      goto LABEL_89;
    }
LABEL_46:
    CFDataRef v38 = 0;
    goto LABEL_89;
  }
  if (a15)
  {
    id v67 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a15 = (id)objc_claimAutoreleasedReturnValue();
  }
  CFDataRef v38 = 0;
  id v24 = v103;
LABEL_89:

  return v38;
}

id sub_10004B7A0(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  int v16 = SESDefaultLogObject();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = [v13 asHexString];
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@", (uint8_t *)&buf, 0xCu);
  }
  if (v11 && v12 && v13 && v14)
  {
    if ([v14 length] == (id)32)
    {
      id v18 = objc_opt_new();
      uint64_t v19 = +[SESTLV TLVWithTag:80 value:v13];
      id v20 = [v19 asData];
      [v18 appendData:v20];

      id v21 = +[SESTLV TLVWithTag:88 value:v14];
      id v22 = [v21 asData];
      [v18 appendData:v22];

      __int16 v87 = 12416;
      BOOL v88 = v15 == 0;
      char v89 = 0;
      id v23 = +[NSMutableData dataWithBytes:&v87 length:4];
      [v23 appendU8:[v18 length]];
      [v23 appendData:v18];
      id v73 = v15;
      uint64_t v74 = v23;
      if (!v15)
      {
        id v32 = 0;
LABEL_30:
        id v36 = v32;
        [v23 appendU8:0];
        sub_100056638(v11, v12);
        id v32 = (id)objc_claimAutoreleasedReturnValue();

        if (v32)
        {
          if (a6)
          {
            uint64_t v37 = SESDefaultLogObject();
            id v67 = v13;
            CFDataRef v38 = [v13 asHexString];
            id v68 = (void *)v37;
            SESCreateAndLogError();
            id v34 = 0;
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            id v15 = v73;
            goto LABEL_74;
          }
          id v34 = 0;
          id v15 = v73;
          goto LABEL_76;
        }
        id v85 = 0;
        sub_100056104(v11, v23, &v85);
        id v39 = (id *)objc_claimAutoreleasedReturnValue();
        id v40 = v85;
        id v32 = v40;
        id v68 = v39;
        if (!v39 || v40)
        {
          id v15 = v73;
          if (a6)
          {
            id v67 = v13;
            CFDataRef v38 = SESDefaultLogObject();
            SESCreateAndLogError();
            id v34 = 0;
            *a6 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_74;
          }
          id v34 = 0;
LABEL_75:

          goto LABEL_76;
        }
        id v67 = v13;
        id v72 = v18;
        SecCertificateRef v41 = sub_10005D558(v39);
        id v42 = +[SESTLV TLVsWithData:v41];

        SecKeyRef v43 = objc_opt_new();
        long long v81 = 0u;
        long long v82 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        id v44 = v42;
        id v45 = [v44 countByEnumeratingWithState:&v81 objects:v91 count:16];
        if (!v45)
        {
          CFDataRef v38 = v44;

          goto LABEL_70;
        }
        id v46 = v45;
        CFDataRef v38 = v44;
        id v70 = v12;
        int v76 = 0;
        uint64_t v47 = *(void *)v82;
LABEL_37:
        uint64_t v48 = 0;
        while (1)
        {
          if (*(void *)v82 != v47) {
            objc_enumerationMutation(v38);
          }
          id v49 = *(void **)(*((void *)&v81 + 1) + 8 * v48);
          int v50 = [v49 tag];
          if (v50 <= 92)
          {
            if (v50 != 65 && v50 != 87)
            {
LABEL_66:
              if (a6)
              {
                id v64 = SESDefaultLogObject();
                [v49 tag];
                SESCreateAndLogError();
                *a6 = (id)objc_claimAutoreleasedReturnValue();
              }
              id v34 = 0;
              id v12 = v70;
              id v15 = v73;
              id v63 = v76;
              goto LABEL_72;
            }
          }
          else
          {
            if (v50 == 93)
            {
              [v43 addObject:v49];
              id v52 = +[SESTLV TLVWithTag:88 value:v14];
              [v43 addObject:v52];

              goto LABEL_49;
            }
            if (v50 != 146)
            {
              if (v50 != 158) {
                goto LABEL_66;
              }
              uint64_t v51 = [v49 value];

              int v76 = (void *)v51;
              goto LABEL_49;
            }
          }
          [v43 addObject:v49];
LABEL_49:
          if (v46 == (id)++v48)
          {
            id v46 = [v38 countByEnumeratingWithState:&v81 objects:v91 count:16];
            if (v46) {
              goto LABEL_37;
            }

            id v12 = v70;
            if (v76)
            {
              id v66 = v11;
              id v53 = objc_opt_new();
              long long v77 = 0u;
              long long v78 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              id v54 = v43;
              id v55 = [v54 countByEnumeratingWithState:&v77 objects:v90 count:16];
              if (v55)
              {
                id v56 = v55;
                uint64_t v57 = *(void *)v78;
                do
                {
                  for (uint64_t i = 0; i != v56; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v78 != v57) {
                      objc_enumerationMutation(v54);
                    }
                    id v59 = [*(id *)(*((void *)&v77 + 1) + 8 * i) asData];
                    [v53 appendData:v59];
                  }
                  id v56 = [v54 countByEnumeratingWithState:&v77 objects:v90 count:16];
                }
                while (v56);
              }

              uint64_t v60 = @"9304D074DA4F";
              id v15 = v73;
              if (!v73) {
                uint64_t v60 = @"9304FC6F4C17";
              }
              uint64_t v61 = v60;
              id v62 = [(__CFString *)v61 hexStringAsData];
              [v53 appendData:v62];

              id v63 = v76;
              id v34 = +[SEEndPointSignatureResponse responseWithSignedData:v53 signature:v76];

              id v11 = v66;
              id v12 = v70;
              goto LABEL_72;
            }
LABEL_70:
            if (a6)
            {
              id v63 = SESDefaultLogObject();
              SESCreateAndLogError();
              id v34 = 0;
              *a6 = (id)objc_claimAutoreleasedReturnValue();
              id v15 = v73;
LABEL_72:
            }
            else
            {
              id v34 = 0;
              id v15 = v73;
            }

            id v18 = v72;
LABEL_74:

            id v13 = v67;
            goto LABEL_75;
          }
        }
      }
      id v71 = v18;
      id v24 = +[NSData dataWithBytes:&unk_100377660 length:1];
      CFDataRef v25 = [v23 ses_sha256];
      *(void *)&long long buf = [v24 DERItem];
      *((void *)&buf + 1) = v26;
      id v93 = [v25 DERItem];
      uint64_t v94 = v27;
      id v28 = encodeSequence();
      if (v28)
      {
        id v75 = v24;
        id v69 = v12;
        id v29 = [v12 asHexString];
        id v86 = 0;
        id v30 = v11;
        id v31 = sub_10005B9F4(v11, v29, v28, v15, &v86);
        id v32 = v86;

        if (!v31 || v32)
        {
          if (a6)
          {
            __int16 v35 = SESDefaultLogObject();
            SESCreateAndLogError();
            *a6 = (id)objc_claimAutoreleasedReturnValue();
          }
          int v33 = 1;
        }
        else
        {
          int v33 = 0;
        }
        id v24 = v75;
      }
      else
      {
        if (!a6)
        {
          id v32 = 0;
          int v33 = 1;
          goto LABEL_27;
        }
        id v69 = v12;
        id v30 = v11;
        id v31 = SESDefaultLogObject();
        SESCreateAndLogError();
        id v32 = 0;
        *a6 = (id)objc_claimAutoreleasedReturnValue();
        int v33 = 1;
      }

      id v11 = v30;
      id v12 = v69;
LABEL_27:

      if (v33)
      {
        id v34 = 0;
        id v18 = v71;
        id v15 = v73;
LABEL_76:

        goto LABEL_77;
      }
      id v18 = v71;
      id v23 = v74;
      goto LABEL_30;
    }
    if (a6)
    {
      SESDefaultLogObject();
      id v32 = (id)objc_claimAutoreleasedReturnValue();
      [v14 length];
      goto LABEL_17;
    }
LABEL_18:
    id v34 = 0;
    goto LABEL_78;
  }
  if (!a6) {
    goto LABEL_18;
  }
  SESDefaultLogObject();
  id v32 = (id)objc_claimAutoreleasedReturnValue();
LABEL_17:
  SESCreateAndLogError();
  id v34 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_77:

LABEL_78:

  return v34;
}

id sub_10004C0E8(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a1;
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = SESDefaultLogObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = [v11 asHexString];
    *(_DWORD *)long long buf = 138412290;
    uint64_t v51 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  if (v9 && v10 && v11 && v12)
  {
    id v42 = a5;
    id v15 = objc_opt_new();
    int v16 = +[SESTLV TLVWithTag:80 value:v11];
    id v17 = [v16 asData];
    [v15 appendData:v17];

    id v43 = v12;
    id v18 = +[SESTLV TLVWithTag:88 value:v12];
    uint64_t v19 = [v18 asData];
    [v15 appendData:v19];

    *(_DWORD *)long long buf = 12672;
    id v20 = +[NSMutableData dataWithBytes:buf length:4];
    [v20 appendU8:[v15 length]];
    [v20 appendData:v15];
    [v20 appendU8:0];
    uint64_t v21 = sub_100056638(v9, v10);
    if (v21)
    {
      id v22 = (void *)v21;
      if (!v42)
      {
        CFDataRef v25 = 0;
LABEL_38:

        id v12 = v43;
        goto LABEL_39;
      }
      id v41 = v10;
      id v23 = SESDefaultLogObject();
      id v24 = [v11 asHexString];
      SESCreateAndLogError();
      CFDataRef v25 = 0;
      *id v42 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_36;
    }
    id v48 = 0;
    sub_100056104(v9, v20, &v48);
    uint64_t v26 = (id *)objc_claimAutoreleasedReturnValue();
    id v27 = v48;
    id v22 = v27;
    id v40 = v26;
    if (!v26 || v27)
    {
      if (!v42)
      {
        CFDataRef v25 = 0;
        id v23 = v26;
        goto LABEL_37;
      }
      id v41 = v10;
      SESDefaultLogObject();
      id v24 = (id)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      CFDataRef v25 = 0;
      *id v42 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v41 = v10;
      id v28 = sub_10005D558(v26);
      id v29 = +[SESTLV TLVsWithData:v28];

      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      id v24 = v29;
      id v30 = [v24 countByEnumeratingWithState:&v44 objects:v49 count:16];
      if (v30)
      {
        id v31 = v30;
        id v39 = v9;
        uint64_t v32 = 0;
        uint64_t v33 = *(void *)v45;
        while (2)
        {
          id v34 = 0;
          __int16 v35 = (void *)v32;
          do
          {
            if (*(void *)v45 != v33) {
              objc_enumerationMutation(v24);
            }
            id v36 = *(void **)(*((void *)&v44 + 1) + 8 * (void)v34);
            if ([v36 tag] != 158)
            {
              if (v42)
              {
                uint64_t v37 = SESDefaultLogObject();
                [v36 tag];
                SESCreateAndLogError();
                *id v42 = (id)objc_claimAutoreleasedReturnValue();
              }
              CFDataRef v25 = 0;
              id v9 = v39;
              goto LABEL_35;
            }
            uint64_t v32 = [v36 value];

            id v34 = (char *)v34 + 1;
            __int16 v35 = (void *)v32;
          }
          while (v31 != v34);
          id v31 = [v24 countByEnumeratingWithState:&v44 objects:v49 count:16];
          if (v31) {
            continue;
          }
          break;
        }

        id v9 = v39;
        if (v32)
        {
          CFDataRef v25 = +[SEEndPointSignatureResponse signature:v32];
          __int16 v35 = (void *)v32;
          goto LABEL_35;
        }
      }
      else
      {
      }
      if (v42)
      {
        __int16 v35 = SESDefaultLogObject();
        SESCreateAndLogError();
        CFDataRef v25 = 0;
        *id v42 = (id)objc_claimAutoreleasedReturnValue();
LABEL_35:
        id v23 = v40;

        goto LABEL_36;
      }
      CFDataRef v25 = 0;
    }
    id v23 = v40;
LABEL_36:

    id v10 = v41;
LABEL_37:

    goto LABEL_38;
  }
  if (!a5)
  {
    CFDataRef v25 = 0;
    goto LABEL_40;
  }
  id v22 = SESDefaultLogObject();
  SESCreateAndLogError();
  CFDataRef v25 = 0;
  *a5 = (id)objc_claimAutoreleasedReturnValue();
LABEL_39:

LABEL_40:

  return v25;
}

id sub_10004C654(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  int v16 = SESDefaultLogObject();
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    id v17 = [v13 asHexString];
    *(_DWORD *)long long buf = 138412290;
    CFDataRef v38 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
  }
  if (v11 && v12 && v13 && v14)
  {
    if ([v14 length] != (id)16)
    {
      if (a6)
      {
        id v18 = SESDefaultLogObject();
        [v14 length];
        goto LABEL_15;
      }
      goto LABEL_17;
    }
    if ((unint64_t)[v15 length] >= 0x33)
    {
      if (a6)
      {
        id v18 = SESDefaultLogObject();
        [v15 length];
LABEL_15:
        SESCreateAndLogError();
        uint64_t v19 = 0;
        *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_16:

        goto LABEL_18;
      }
      goto LABEL_17;
    }
    id v18 = objc_opt_new();
    uint64_t v21 = +[SESTLV TLVWithTag:80 value:v13];
    [v18 addObject:v21];

    id v22 = +[SESTLV TLVWithTag:145 value:v14];
    [v18 addObject:v22];

    if (v15)
    {
      id v23 = +[SESTLV TLVWithTag:88 value:v15];
      [v18 addObject:v23];
    }
    uint64_t v24 = sub_100056638(v11, v12);
    if (v24)
    {
      id v25 = (id)v24;
      if (!a6)
      {
        uint64_t v19 = 0;
LABEL_34:

        goto LABEL_16;
      }
      uint64_t v26 = SESDefaultLogObject();
      uint64_t v32 = [v13 asHexString];
      SESCreateAndLogError();
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      id v27 = (void *)v26;

      uint64_t v19 = 0;
    }
    else
    {
      id v34 = +[SESTLV TLVWithTag:32558 children:v18];
      id v28 = [v34 asData];
      id v36 = 0;
      sub_100056348(v11, 128, 114, 0, 0, v28, 0, &v36);
      id v29 = (id *)objc_claimAutoreleasedReturnValue();
      id v25 = v36;

      if (v25 || (sub_10005D558(v29), id v31 = objc_claimAutoreleasedReturnValue(), v31, !v31))
      {
        __int16 v35 = v29;
        if (a6)
        {
          id v30 = SESDefaultLogObject();
          uint64_t v33 = [v13 asHexString];
          SESCreateAndLogError();
          *a6 = (id)objc_claimAutoreleasedReturnValue();
        }
        uint64_t v19 = 0;
        id v27 = v35;
      }
      else
      {
        sub_10005D558(v29);
        v19 = id v27 = v29;
      }
    }

    goto LABEL_34;
  }
  if (a6)
  {
    id v18 = SESDefaultLogObject();
    goto LABEL_15;
  }
LABEL_17:
  uint64_t v19 = 0;
LABEL_18:

  return v19;
}

id sub_10004CAB4(void *a1, void *a2, void *a3)
{
  return sub_10004CAC0(a1, a2, 1, a3);
}

id sub_10004CAC0(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = SESDefaultLogObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (!v7 || !v8)
  {
    if (a4) {
      goto LABEL_20;
    }
LABEL_21:
    id v18 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    char v11 = 0;
    char v10 = 3;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    char v10 = -125;
    char v11 = 0x80;
LABEL_11:
    id v27 = 0;
    id v12 = sub_100048478(v7, v8, 0, 118, v10, 0, 0, &v27);
    id v13 = v27;
    if (v13 || !v12)
    {
      if (!a4)
      {
        id v18 = 0;
        goto LABEL_29;
      }
      int v16 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v18 = 0;
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v14 = SESDefaultLogObject();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = *(unsigned __int8 *)[v12 bytes];
        *(_DWORD *)long long buf = 138412546;
        id v29 = v8;
        __int16 v30 = 1024;
        int v31 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Instance '%@' reporting %d objects", buf, 0x12u);
      }

      id v26 = 0;
      int v16 = sub_100048478(v7, v8, 0, 118, v11, 0, 0, &v26);
      id v13 = v26;
      if (v13)
      {
        if (a4)
        {
          id v17 = SESDefaultLogObject();
          SESCreateAndLogError();
          *a4 = (id)objc_claimAutoreleasedReturnValue();
        }
        id v18 = 0;
      }
      else
      {
        id v18 = +[NSMutableArray array];
        if ([v16 length])
        {
          unint64_t v19 = 0;
          int v20 = 0;
          do
          {
            id v21 = v16;
            uint64_t v22 = (v20 + 1);
            uint64_t v23 = *((unsigned __int8 *)[v21 bytes] + v19);
            uint64_t v24 = [v21 subdataWithRange:v22, v23];
            [v18 addObject:v24];

            unint64_t v19 = (v22 + v23);
            int v20 = v19;
          }
          while ((unint64_t)[v21 length] > v19);
          int v16 = v21;
        }
      }
    }

LABEL_29:
    goto LABEL_30;
  }
  if (!a4) {
    goto LABEL_21;
  }
LABEL_20:
  SESDefaultLogObject();
  id v13 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  id v18 = 0;
  *a4 = (id)objc_claimAutoreleasedReturnValue();
LABEL_30:

LABEL_31:

  return v18;
}

id sub_10004CE88(void *a1, void *a2, void *a3)
{
  return sub_10004CAC0(a1, a2, 0, a3);
}

BOOL sub_10004CE94(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a2;
  id v9 = a1;
  char v10 = SESDefaultLogObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    char v11 = [v7 asHexString];
    *(_DWORD *)long long buf = 138412290;
    id v21 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%@", buf, 0xCu);
  }
  id v19 = 0;
  id v12 = sub_100048478(v9, v8, 0, 118, 4, 0, v7, &v19);

  id v13 = v19;
  id v14 = v13;
  if (!v13)
  {
    if ([v12 length] == (id)1)
    {
      BOOL v15 = *(unsigned char *)[v12 bytes] != 0;
      goto LABEL_11;
    }
    if (a4)
    {
      int v16 = SESDefaultLogObject();
      id v18 = [v12 asHexString];
      SESCreateAndLogError();
      *a4 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_10:
    BOOL v15 = 0;
    goto LABEL_11;
  }
  if (!a4) {
    goto LABEL_10;
  }
  BOOL v15 = 0;
  *a4 = v13;
LABEL_11:

  return v15;
}

void *sub_10004D084(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  if ([v6 length])
  {
    ccec_cp_256();
    __chkstk_darwin();
    id v8 = (void **)((char *)&v23 - v7);
    [v6 length];
    [v6 bytes];
    if (ccec_import_pub())
    {
      if (!a3) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    unint64_t v32 = 0;
    unint64_t v33 = 0;
    uint64_t v34 = 0;
    id v30 = 0;
    uint64_t v31 = 0;
    id v30 = [v5 DERItem];
    uint64_t v31 = v10;
    if (DERDecodeItem((uint64_t)&v30, &v32) || v32 != 0x6000000000000039)
    {
      if (!a3) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    long long v29 = 0u;
    long long v27 = 0u;
    memset(v28, 0, sizeof(v28));
    if (DERParseSequenceSpecContent())
    {
      if (!a3) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (*((void *)&v29 + 1) == 16 * **v8)
    {
      unint64_t v13 = v28[0] + v28[1];
      if (!__CFADD__(v28[0], v28[1]) && (unint64_t v14 = v33, v15 = v13 >= v33, v16 = v13 - v33, v15))
      {
        unint64_t v24 = v16;
        id v17 = SESDefaultLogObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          id v18 = +[NSData dataWithBytesNoCopy:v14 length:v24 freeWhenDone:0];
          id v19 = [v18 asHexString];
          LODWORD(v35) = 138412290;
          *(void *)((char *)&v35 + 4) = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "RTR TBS: %@", (uint8_t *)&v35, 0xCu);
        }
        long long v40 = 0u;
        long long v41 = 0u;
        ccsha256_di();
        ccdigest();
        char v26 = 0;
        if (ccec_verify_composite() || !v26)
        {
          if (a3) {
            goto LABEL_13;
          }
        }
        else
        {
          *(void *)&long long v35 = 0;
          *((void *)&v35 + 1) = &v35;
          uint64_t v36 = 0x3032000000;
          uint64_t v37 = sub_10004D6C4;
          CFDataRef v38 = sub_10004D6D4;
          id v39 = objc_alloc_init((Class)NSMutableArray);
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472;
          unint64_t v25[2] = sub_10004D6DC;
          v25[3] = &unk_10040D010;
          v25[4] = &v35;
          if (DERDecodeSequenceContentWithBlock(v28, (uint64_t)v25))
          {
            if (a3)
            {
              int v20 = SESDefaultLogObject();
              id v21 = +[NSData dataWithDERItem:v28];
              uint64_t v22 = [v21 asHexString];
              SESCreateAndLogError();
              *a3 = (id)objc_claimAutoreleasedReturnValue();

              a3 = 0;
            }
          }
          else
          {
            a3 = *(id *)(*((void *)&v35 + 1) + 40);
          }
          _Block_object_dispose(&v35, 8);
        }
      }
      else if (a3)
      {
        goto LABEL_13;
      }
    }
    else if (a3)
    {
LABEL_13:
      char v11 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      a3 = 0;
    }
  }
  else if (a3)
  {
    id v9 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a3 = (id)objc_claimAutoreleasedReturnValue();

    a3 = 0;
  }
LABEL_14:

  return a3;
}

void sub_10004D6A4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 + 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004D6C4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004D6D4(uint64_t a1)
{
}

uint64_t sub_10004D6DC(uint64_t a1, uint64_t *a2)
{
  if (*a2 == 0x6000000000000001)
  {
    *(_OWORD *)long long buf = 0u;
    long long v17 = 0u;
    id v4 = a2 + 1;
    uint64_t v5 = DERParseSequenceSpecContent();
    if (v5)
    {
      id v6 = SESDefaultLogObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = +[NSData dataWithDERItem:v4];
        id v8 = [v7 asHexString];
        v13[0] = 67109378;
        v13[1] = v5;
        __int16 v14 = 2112;
        BOOL v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed (%d) to parse content of tag 0x61 %@", (uint8_t *)v13, 0x12u);
      }
    }
    else
    {
      char v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
      id v6 = +[NSData dataWithDERItem:buf];
      [v11 addObject:v6];
    }
  }
  else
  {
    id v9 = SESDefaultLogObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *a2;
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Ignoring unknown tag 0x%llX in RTR", buf, 0xCu);
    }

    return 0;
  }
  return v5;
}

id sub_10004D898(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  uint64_t v7 = SESDefaultLogObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  if (v5 && v6)
  {
    id v38 = 0;
    id v8 = sub_100048478(v5, v6, 0, 118, 135, 0, 0, &v38);
    id v9 = v38;
    if (v9 || !v8)
    {
      if (a3)
      {
        id v12 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      id v11 = 0;
      goto LABEL_35;
    }
    *(void *)long long buf = 0;
    unint64_t v33 = buf;
    uint64_t v34 = 0x3032000000;
    long long v35 = sub_10004D6C4;
    uint64_t v36 = sub_10004D6D4;
    id v37 = (id)objc_opt_new();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    _OWORD v31[2] = sub_10004DF34;
    v31[3] = &unk_10040D798;
    void v31[4] = buf;
    if (sub_10004DE88(v8, v31))
    {
      if (!a3)
      {
        id v9 = 0;
        id v11 = 0;
LABEL_34:
        _Block_object_dispose(buf, 8);

LABEL_35:
        goto LABEL_36;
      }
      SESDefaultLogObject();
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v22 = [v8 base64];
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();

      id v9 = 0;
    }
    else
    {
      id v30 = 0;
      sub_10004CAC0(v5, v6, 0, &v30);
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      id v9 = v30;
      if (!v9 && v10)
      {
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v10 = v10;
        id v13 = [v10 countByEnumeratingWithState:&v26 objects:v41 count:16];
        if (v13)
        {
          uint64_t v14 = *(void *)v27;
          while (2)
          {
            BOOL v15 = 0;
            unint64_t v16 = v8;
            do
            {
              if (*(void *)v27 != v14) {
                objc_enumerationMutation(v10);
              }
              long long v17 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v15);
              id v25 = 0;
              id v8 = sub_100048478(v5, v6, 0, 118, 136, 0, v17, &v25);
              id v9 = v25;

              if (v9 || !v8)
              {
                int v20 = SESDefaultLogObject();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)id v39 = 138412290;
                  id v40 = v9;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Ignoring error on VIEW (0x88) -- probably not updated PTA: %@", v39, 0xCu);
                }

                goto LABEL_44;
              }
              v24[0] = _NSConcreteStackBlock;
              v24[1] = 3221225472;
              v24[2] = sub_10004DF48;
              v24[3] = &unk_10040D798;
              v24[4] = buf;
              if (sub_10004DE88(v8, v24))
              {
                if (a3)
                {
                  id v21 = SESDefaultLogObject();
                  uint64_t v23 = [v8 base64];
                  SESCreateAndLogError();
                  *a3 = (id)objc_claimAutoreleasedReturnValue();
                }
                id v9 = 0;
                id v11 = 0;
                goto LABEL_33;
              }
              BOOL v15 = (char *)v15 + 1;
              unint64_t v16 = v8;
            }
            while (v13 != v15);
            id v13 = [v10 countByEnumeratingWithState:&v26 objects:v41 count:16];
            if (v13) {
              continue;
            }
            break;
          }
          id v9 = 0;
        }
        else
        {
          id v9 = 0;
        }
LABEL_44:

        id v11 = *((id *)v33 + 5);
        goto LABEL_33;
      }
      if (a3)
      {
        id v18 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
    }
    id v11 = 0;
LABEL_33:

    goto LABEL_34;
  }
  if (!a3)
  {
    id v11 = 0;
    goto LABEL_37;
  }
  SESDefaultLogObject();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  SESCreateAndLogError();
  id v11 = 0;
  *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_36:

LABEL_37:

  return v11;
}

void sub_10004DE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_10004DE88(void *a1, void *a2)
{
  id v3 = a2;
  v10[0] = (unint64_t)[a1 DERItem];
  v10[1] = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10004E8B4;
  v8[3] = &unk_10040D7C0;
  id v9 = v3;
  id v5 = v3;
  uint64_t v6 = DERDecodeSequenceContentWithBlock(v10, (uint64_t)v8);

  return v6;
}

id sub_10004DF34(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:a2];
}

id sub_10004DF48(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:a2];
}

id sub_10004DF5C(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  id v8 = SESDefaultLogObject();
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "", v13, 2u);
  }

  if (v5 && v6 && v7)
  {
    id v9 = +[SESTLV TLVWithTag:147 value:v7];
    id v10 = [v9 asData];
    id v11 = sub_1000489E4(v5, v6, v10);
  }
  else
  {
    id v9 = SESDefaultLogObject();
    id v11 = SESCreateAndLogError();
  }

  return v11;
}

id sub_10004E0A4(uint64_t a1, void *a2)
{
  memset(&v6[2], 0, 64);
  if (DERParseSequenceSpec())
  {
    if (a2) {
      goto LABEL_6;
    }
    goto LABEL_7;
  }
  memset(v6, 0, 32);
  if (DERParseSequenceSpecContent())
  {
    if (a2)
    {
LABEL_6:
      id v3 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_7:
    unint64_t v4 = 0;
    goto LABEL_8;
  }
  unint64_t v4 = +[NSData dataWithDERItem:v6];
LABEL_8:

  return v4;
}

BOOL sub_10004E1CC(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = v6;
  if (v5 && v6)
  {
    uint64_t v8 = sub_100056638(v5, v6);
    if (v8)
    {
      id v9 = (id)v8;
      if (a3)
      {
        id v10 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      BOOL v11 = 0;
    }
    else
    {
      id v13 = +[NSData dataWithHexString:@"80CA000100"];
      id v16 = 0;
      uint64_t v14 = sub_10005603C(v5, (uint64_t)v13, &v16);
      id v9 = v16;

      if (v9)
      {
        BOOL v11 = 0;
        if (a3) {
          *a3 = v9;
        }
      }
      else
      {
        BOOL v11 = sub_10005D5A8((uint64_t)v14) == 26880;
      }
    }
  }
  else
  {
    if (a3)
    {
      id v12 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    BOOL v11 = 0;
  }

  return v11;
}

id sub_10004E364(void *a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v59 = 0;
  unint64_t v15 = sub_1000482CC(v11, v12, &v59);
  id v16 = v59;
  if (v16) {
    BOOL v17 = 0;
  }
  else {
    BOOL v17 = v15 > 3;
  }
  if (v17)
  {
    id v21 = +[SESTLV TLVWithTag:80 value:v13];
    v63[0] = v21;
    uint64_t v22 = +[SESTLV TLVWithTag:81 value:v14];
    v63[1] = v22;
    uint64_t v23 = +[SESTLV TLVWithTag:83 unsignedShort:__rev16(a5)];
    v63[2] = v23;
    id v19 = +[NSArray arrayWithObjects:v63 count:3];

    id v52 = +[SESTLV TLVWithTag:32570 children:v19];
    unint64_t v24 = [v52 asData];
    id v58 = 0;
    uint64_t v25 = sub_100048478(v11, v12, 0, 140, 0, 0, v24, &v58);
    id v18 = v58;

    id v53 = (void *)v25;
    if (v18)
    {
      if (a6)
      {
        SESDefaultLogObject();
        long long v26 = a6;
        id v27 = (id)objc_claimAutoreleasedReturnValue();
        SESCreateAndLogError();
        int v20 = 0;
        *long long v26 = (id)objc_claimAutoreleasedReturnValue();
        long long v28 = v52;
        goto LABEL_39;
      }
      int v20 = 0;
      long long v28 = v52;
LABEL_40:

      goto LABEL_41;
    }
    id v48 = a6;
    id v49 = v13;
    int v50 = v19;
    id v51 = v14;
    +[SESTLV TLVsWithData:v25];
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    id v29 = (id)objc_claimAutoreleasedReturnValue();
    id v30 = [v29 countByEnumeratingWithState:&v54 objects:v62 count:16];
    if (!v30)
    {

      id v27 = 0;
      goto LABEL_35;
    }
    id v31 = v30;
    id v46 = v12;
    id v47 = v11;
    id v27 = 0;
    unsigned int v32 = 0;
    uint64_t v33 = *(void *)v55;
LABEL_13:
    uint64_t v34 = 0;
    while (1)
    {
      if (*(void *)v55 != v33) {
        objc_enumerationMutation(v29);
      }
      long long v35 = *(void **)(*((void *)&v54 + 1) + 8 * v34);
      unsigned int v36 = [v35 tag];
      if (v36 == 32548) {
        break;
      }
      if (v36 == 83)
      {
        id v37 = [v35 value];
        id v38 = [v37 length];

        if (v38 != (id)2)
        {
          if (v48)
          {
            long long v41 = SESDefaultLogObject();
            id v42 = [v35 value];
            long long v45 = [v42 asHexString];
            SESCreateAndLogError();
            void *v48 = (id)objc_claimAutoreleasedReturnValue();
          }
          int v20 = 0;
          goto LABEL_33;
        }
        id v39 = [v35 value];
        unsigned int v32 = [v39 u16BE:0];
        goto LABEL_21;
      }
LABEL_22:
      if (v31 == (id)++v34)
      {
        id v31 = [v29 countByEnumeratingWithState:&v54 objects:v62 count:16];
        if (v31) {
          goto LABEL_13;
        }

        if (v27 && v32)
        {
          id v40 = SESDefaultLogObject();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67109120;
            unsigned int v61 = v32;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "Endpoint converted successfully to counter %d", buf, 8u);
          }

          id v27 = v27;
          int v20 = v27;
LABEL_33:
          id v12 = v46;
          id v11 = v47;
          goto LABEL_38;
        }
        id v12 = v46;
        id v11 = v47;
LABEL_35:
        if (v48)
        {
          id v43 = SESDefaultLogObject();
          SESCreateAndLogError();
          void *v48 = (id)objc_claimAutoreleasedReturnValue();
        }
        int v20 = 0;
LABEL_38:
        id v13 = v49;
        long long v28 = v52;

        id v19 = v50;
        id v14 = v51;
LABEL_39:

        goto LABEL_40;
      }
    }
    [v35 value];
    id v39 = v27;
    id v27 = (id)objc_claimAutoreleasedReturnValue();
LABEL_21:

    goto LABEL_22;
  }
  id v18 = v16;
  if (!a6)
  {
    int v20 = 0;
    goto LABEL_42;
  }
  id v19 = SESDefaultLogObject();
  SESCreateAndLogError();
  int v20 = 0;
  *a6 = (id)objc_claimAutoreleasedReturnValue();
LABEL_41:

LABEL_42:

  return v20;
}

uint64_t sub_10004E8B4()
{
  long long v3 = 0u;
  long long v4 = 0u;
  long long v1 = 0u;
  long long v2 = 0u;
  uint64_t result = DERParseSequenceSpecContent();
  if (!result) {
    return 6;
  }
  return result;
}

id sub_10004EAD8(void *a1, int a2, void *a3)
{
  id v5 = a1;
  id v6 = SESDefaultLogObject();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "", buf, 2u);
  }

  id v7 = objc_opt_new();
  if (a2)
  {
    int v8 = 0;
    while (1)
    {
      char v9 = (a2 - v8) >= 0xFA ? -6 : a2 - v8;
      id v19 = 0;
      sub_100056348(v5, 128, 176, SBYTE1(v8), v8, 0, v9, &v19);
      id v10 = (id *)objc_claimAutoreleasedReturnValue();
      id v11 = v19;
      if (v11 || v10 == 0) {
        break;
      }
      id v13 = sub_10005D558(v10);
      [v7 appendData:v13];

      id v14 = sub_10005D558(v10);
      v8 += [v14 length];

      if (v8 == a2) {
        goto LABEL_13;
      }
    }
    id v16 = v11;
    if (a3)
    {
      BOOL v17 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    id v15 = 0;
  }
  else
  {
LABEL_13:
    id v15 = v7;
  }

  return v15;
}

void sub_10004EC98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_signpost_emit_with_name_impl(a1, v9, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, a5, a6, &a9, 2u);
}

void sub_10004ED08(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

id sub_10004ED5C()
{
  self;
  if (qword_10045CD68 != -1) {
    dispatch_once(&qword_10045CD68, &stru_10040D7E0);
  }
  v0 = (void *)qword_10045CD60;

  return v0;
}

void sub_10004EDB4(id a1)
{
  uint64_t v1 = objc_opt_new();
  long long v2 = (void *)qword_10045CD60;
  qword_10045CD60 = v1;

  id v3 = (id)objc_opt_new();
  sub_10004EE24(qword_10045CD60, v3);
}

void sub_10004EE24(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_10004EE34(uint64_t a1, void *a2)
{
  id v7 = a2;
  self;
  sub_10004ED5C();
  long long v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v2);
  uint64_t v3 = objc_opt_new();
  long long v4 = (void *)v3;
  if (v3) {
    *(_DWORD *)(v3 + 12) = 6;
  }
  if (v2) {
    id v5 = (void *)v2[1];
  }
  else {
    id v5 = 0;
  }
  id v6 = v5;
  [v6 setObject:v4 forKeyedSubscript:v7];

  objc_sync_exit(v2);
}

void sub_10004EEFC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004EF10(uint64_t a1, void *a2)
{
  id v5 = a2;
  self;
  sub_10004ED5C();
  long long v2 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v2);
  if (v2) {
    uint64_t v3 = (void *)v2[1];
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = v3;
  [v4 removeObjectForKey:v5];

  objc_sync_exit(v2);
}

void sub_10004EFAC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004EFC0(uint64_t a1, unsigned int a2, void *a3)
{
  id v4 = a3;
  self;
  sub_10004ED5C();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v5);
  if (v5) {
    id v6 = (void *)v5[1];
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  int v8 = [v7 objectForKeyedSubscript:v4];

  if (v8)
  {
    if (v8[2] >= a2) {
      v8[2] = a2;
    }
  }
  else
  {
    char v9 = SESDefaultLogObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Couldn't find peer", v10, 2u);
    }
  }
  objc_sync_exit(v5);
}

void sub_10004F0C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F0E0(uint64_t a1, int a2, int a3, void *a4)
{
  id v6 = a4;
  self;
  sub_10004ED5C();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v7);
  if (v7) {
    int v8 = (void *)v7[1];
  }
  else {
    int v8 = 0;
  }
  id v9 = v8;
  uint64_t v10 = [v9 objectForKeyedSubscript:v6];

  if (!v10)
  {
    id v14 = SESDefaultLogObject();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Couldn't find peer", v17, 2u);
    }
    goto LABEL_11;
  }
  if (*(_DWORD *)(v10 + 8) == -1)
  {
    if (a2)
    {
      id v11 = *(id *)(v10 + 40);
      uint64_t v12 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v11 unsignedIntValue] | 1);
      id v13 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v12;
    }
    if (a3)
    {
      id v14 = *(id *)(v10 + 40);
      uint64_t v15 = +[NSNumber numberWithUnsignedInt:[v14 unsignedIntValue] | 2];
      id v16 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v15;

LABEL_11:
    }
  }

  objc_sync_exit(v7);
}

void sub_10004F25C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F274(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  self;
  sub_10004ED5C();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v7);
  if (v7) {
    int v8 = (void *)v7[1];
  }
  else {
    int v8 = 0;
  }
  id v9 = v8;
  uint64_t v10 = [v9 objectForKeyedSubscript:v6];

  if (v10)
  {
    if (*(_DWORD *)(v10 + 8) == -1)
    {
      id v11 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = 0;

      objc_storeStrong((id *)(v10 + 32), a2);
    }
  }
  else
  {
    uint64_t v12 = SESDefaultLogObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Couldn't find peer", v13, 2u);
    }
  }
  objc_sync_exit(v7);
}

void sub_10004F3A0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10004F3B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10004ED5C();
  uint64_t v3 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v3);
  if (v3) {
    id v4 = (void *)v3[1];
  }
  else {
    id v4 = 0;
  }
  id v5 = v4;
  id v6 = [v5 objectForKeyedSubscript:v2];

  if (v6)
  {
    uint64_t v7 = v6[3];
  }
  else
  {
    int v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Couldn't find peer", v10, 2u);
    }

    uint64_t v7 = 0xFFFFFFFFLL;
  }

  objc_sync_exit(v3);
  return v7;
}

void sub_10004F4B0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F4C8(uint64_t a1, int a2, void *a3)
{
  id v4 = a3;
  self;
  sub_10004ED5C();
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(v5);
  if (v5) {
    id v6 = (void *)v5[1];
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;
  int v8 = [v7 objectForKeyedSubscript:v4];

  if (v8)
  {
    v8[3] = a2;
  }
  else
  {
    id v9 = SESDefaultLogObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Couldn't find peer", v10, 2u);
    }
  }
  objc_sync_exit(v5);
}

void sub_10004F5C4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004F5DC(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  id v5 = SESDefaultLogObject();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v26 = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Posting SESD HUP event with result %lu", buf, 0xCu);
  }

  id v6 = [v4 getEndpointUser];
  id v7 = [v4 hupData];
  int v8 = v7;
  if (v7)
  {
    BOOL v9 = v6 == 0;
    id v10 = [v7 u8:0];
    unsigned int v22 = [v8 u16BE:7];
    id v11 = objc_alloc((Class)KmlRoutingInformation);
    uint64_t v12 = [v4 readerInfo];
    id v13 = [v11 initWithReaderInformation:v12];

    id v21 = [v13 manufacturer];
    id v14 = [v13 brand];
    uint64_t v15 = [v13 regionString];
    v23[0] = @"bluetoothConfiguration";
    id v16 = +[NSNumber numberWithUnsignedChar:v10];
    v24[0] = v16;
    v24[1] = v14;
    v23[1] = @"Brand";
    v23[2] = @"dataCenterCode";
    v24[2] = v15;
    v23[3] = @"isOwner";
    BOOL v17 = +[NSNumber numberWithBool:v9];
    v24[3] = v17;
    v24[4] = v21;
    v23[4] = @"Manufacturer";
    v23[5] = @"pairingResult";
    id v18 = +[NSNumber numberWithUnsignedInteger:a3];
    void v24[5] = v18;
    v23[6] = @"vehicleCapabilities";
    id v19 = +[NSNumber numberWithUnsignedShort:v22];
    v24[6] = v19;
    int v20 = +[NSDictionary dictionaryWithObjects:v24 forKeys:v23 count:7];

    +[CALogger postCAEventFor:@"com.apple.kml.headUnitPairingEvent" eventInput:v20];
  }
  else
  {
    id v13 = SESDefaultLogObject();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Could not report CA because hupData is nil", buf, 2u);
    }
  }
}

void sub_10004F8C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v8 = a3;
  self;
  id v9 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v8];
  id v10 = SESDefaultLogObject();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "readerInfo - %@", buf, 0xCu);
  }

  id v11 = [v9 manufacturer];
  uint64_t v12 = [v9 brand];
  id v13 = [v9 regionString];
  id v14 = +[NSNumber numberWithInteger:a2, @"destination"];
  v19[0] = v14;
  v19[1] = v13;
  v18[1] = @"dataCenterCode";
  v18[2] = @"manufacturer";
  v19[2] = v11;
  v19[3] = v12;
  v18[3] = @"brand";
  v18[4] = @"transportSupported";
  uint64_t v15 = +[NSNumber numberWithUnsignedInteger:a4];
  void v19[4] = v15;
  v18[5] = @"status";
  id v16 = +[NSNumber numberWithUnsignedInt:a5];
  v19[5] = v16;
  BOOL v17 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:6];

  +[CALogger postCAEventFor:@"com.apple.kml.keyRevocationEvent" eventInput:v17];
}

void sub_10004FAD8(uint64_t a1, int a2, int a3, void *a4, unint64_t a5, void *a6)
{
  id v38 = a4;
  id v9 = a6;
  self;
  if (a5 <= 1)
  {
    sub_10004ED5C();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_sync_enter(v10);
    if (v10) {
      id v11 = (void *)v10[1];
    }
    else {
      id v11 = 0;
    }
    id v12 = v11;
    uint64_t v13 = [v12 objectForKeyedSubscript:v9];

    if (!v13)
    {
      BOOL v17 = SESDefaultLogObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Couldn't retrieve peer", buf, 2u);
      }
      goto LABEL_38;
    }
    int v14 = a3 | (a2 << 16);
    int v15 = *(_DWORD *)(v13 + 8);
    switch(v15)
    {
      case 1:
        *(_DWORD *)(v13 + 24) = v14;
        goto LABEL_14;
      case 3:
        uint64_t v16 = 16;
        break;
      case 2:
        uint64_t v16 = 20;
        break;
      default:
        goto LABEL_39;
    }
    *(_DWORD *)(v13 + v16) = v14;
    if (a2 == 0x8000)
    {
LABEL_14:
      uint64_t v34 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v38];
      id v18 = SESDefaultLogObject();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v42 = v38;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "readerInfo - %@", buf, 0xCu);
      }

      unsigned int v32 = [v34 manufacturer];
      id v31 = [v34 brand];
      id v30 = [v34 regionString];
      v39[0] = @"eventType";
      long long v35 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v13 + 12)];
      v40[0] = v35;
      v40[1] = v30;
      v39[1] = @"dataCenterCode";
      v39[2] = @"manufacturer";
      void v40[2] = v32;
      v40[3] = v31;
      v39[3] = @"brand";
      uint8_t v39[4] = @"optimalFlowStatus";
      uint64_t v33 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v13 + 20)];
      v40[4] = v33;
      v39[5] = @"suboptimalFlowStatus";
      id v19 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v13 + 24)];
      v40[5] = v19;
      v39[6] = @"recoveryFlowStatus";
      int v20 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v13 + 16)];
      v40[6] = v20;
      v39[7] = @"deviceIntent";
      id v21 = *(id *)(v13 + 32);
      unsigned int v22 = +[NSNumber numberWithInt:v21 != 0];
      v40[7] = v22;
      uint64_t v23 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:8];
      id v36 = [v23 mutableCopy];

      if (*(void *)(v13 + 32))
      {
        id v24 = *(id *)(v13 + 32);
        [v36 setObject:v24 forKeyedSubscript:@"deviceIntentConfidence"];
      }
      id v25 = *(id *)(v13 + 40);
      if (v25) {
        uint64_t v26 = (_UNKNOWN **)*(id *)(v13 + 40);
      }
      else {
        uint64_t v26 = &off_10042DE40;
      }
      [v36 setObject:v26 forKeyedSubscript:@"currentDeviceState"];
      if (v25) {

      }
      +[CALogger postCAEventFor:@"com.apple.kml.passiveEntryEvent" eventInput:v36];
      if (a2 != 0x8000) {
        goto LABEL_37;
      }
      if (a3 == 1 && *(void *)(v13 + 32))
      {
        id v27 = @"friendPassiveEntryTxCount";
        CFStringRef v28 = @"ownerPassiveEntryTxCount";
      }
      else if (a3 || *(void *)(v13 + 32))
      {
        id v29 = 0;
        if (a3 != 1 || *(void *)(v13 + 32))
        {
LABEL_36:

LABEL_37:
          *(_DWORD *)(v13 + 8) = -1;
          sub_100017370(v13, 0);
          sub_10004ED08(v13, 0);
          *(_OWORD *)(v13 + 12) = xmmword_1003776A0;

          BOOL v17 = v34;
LABEL_38:

          goto LABEL_39;
        }
        id v27 = @"friendNoDIPassiveEntryTxCount";
        CFStringRef v28 = @"ownerNoDIPassiveEntryTxCount";
      }
      else
      {
        id v27 = @"friendWalkAwayLockCount";
        CFStringRef v28 = @"ownerWalkAwayLockCount";
      }
      if (!a5) {
        id v27 = (__CFString *)v28;
      }
      id v29 = v27;
      sub_100050018((uint64_t)SESDAnalyticsLogger, v29);
      goto LABEL_36;
    }
LABEL_39:
    objc_sync_exit(v10);
  }
}

void sub_10004FFDC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100050018(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = SESDefaultLogObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v21 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Registering CA General Transaction Statistics event %@", buf, 0xCu);
  }

  id v4 = sub_10004ED5C();
  v19[0] = @"ownerPassiveEntryTxCount";
  v19[1] = @"ownerNoDIPassiveEntryTxCount";
  v19[2] = @"ownerWalkAwayLockCount";
  v19[3] = @"ownerWalletRKECount";
  void v19[4] = @"owner3rdPartyRKECount";
  v19[5] = @"ownerPassthroughCount";
  id v5 = +[NSArray arrayWithObjects:v19 count:6];
  v18[0] = @"friendPassiveEntryTxCount";
  v18[1] = @"friendNoDIPassiveEntryTxCount";
  v18[2] = @"friendWalkAwayLockCount";
  v18[3] = @"friendWalletRKECount";
  v18[4] = @"friend3rdPartyRKECount";
  v18[5] = @"friendPassthroughCount";
  id v6 = +[NSArray arrayWithObjects:v18 count:6];
  v17[0] = @"unlockNeededForCarActionCount";
  v17[1] = @"connectionCount";
  void v17[2] = @"disconnectionCount";
  id v17[3] = @"deviceIntentCount";
  id v7 = +[NSArray arrayWithObjects:v17 count:4];
  id v8 = v4;
  objc_sync_enter(v8);
  id v9 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  if ([v5 containsObject:v2])
  {
    id v10 = [v9 dictionaryForKey:@"ca.general.transaction.statistics.owner"];
    id v11 = [v10 mutableCopy];

    if (!v11) {
      id v11 = sub_1000509A0((uint64_t)SESDAnalyticsLogger, v5);
    }
    CFStringRef v12 = @"ca.general.transaction.statistics.owner";
LABEL_15:
    int v15 = [v11 objectForKeyedSubscript:v2];
    uint64_t v16 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v15 unsignedIntegerValue] + 1);
    [v11 setObject:v16 forKeyedSubscript:v2];

    [v9 setObject:v11 forKey:v12];
    goto LABEL_16;
  }
  if ([v6 containsObject:v2])
  {
    uint64_t v13 = [v9 dictionaryForKey:@"ca.general.transaction.statistics.friend"];
    id v11 = [v13 mutableCopy];

    if (!v11) {
      id v11 = sub_1000509A0((uint64_t)SESDAnalyticsLogger, v6);
    }
    CFStringRef v12 = @"ca.general.transaction.statistics.friend";
    goto LABEL_15;
  }
  if ([v7 containsObject:v2])
  {
    int v14 = [v9 dictionaryForKey:@"ca.general.transaction.statistics"];
    id v11 = [v14 mutableCopy];

    if (!v11) {
      id v11 = sub_1000509A0((uint64_t)SESDAnalyticsLogger, v7);
    }
    CFStringRef v12 = @"ca.general.transaction.statistics";
    goto LABEL_15;
  }
  id v11 = SESDefaultLogObject();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 138412290;
    id v21 = v2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unknown key %@", buf, 0xCu);
  }
LABEL_16:

  objc_sync_exit(v8);
}

void sub_1000503E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10005040C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v11 = a7;
  self;
  id v12 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v11];
  uint64_t v13 = SESDefaultLogObject();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "readerInfo - %@", buf, 0xCu);
  }

  int v14 = [v12 manufacturer];
  int v15 = [v12 brand];
  uint64_t v16 = [v12 regionString];
  uint64_t v23 = v11;
  v25[0] = @"type";
  BOOL v17 = +[NSNumber numberWithUnsignedInt:a2];
  v26[0] = v17;
  v25[1] = @"functionID";
  id v18 = +[NSNumber numberWithUnsignedShort:a3];
  v26[1] = v18;
  unint64_t v25[2] = @"actionID";
  id v19 = +[NSNumber numberWithUnsignedChar:a4];
  void v26[2] = v19;
  v25[3] = @"executionStatus";
  int v20 = +[NSNumber numberWithUnsignedInt:a5];
  v25[4] = @"dataCenterCode";
  void v25[5] = @"manufacturer";
  v26[3] = v20;
  void v26[4] = v16;
  v25[6] = @"brand";
  v25[7] = @"status";
  v26[5] = v14;
  v26[6] = v15;
  v26[7] = &off_10042DE40;
  v25[8] = @"subType";
  id v21 = +[NSNumber numberWithUnsignedInteger:a6];
  v26[8] = v21;
  unsigned int v22 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:9];
  +[CALogger postCAEventFor:@"com.apple.kml.rkeEvent" eventInput:v22];
}

void sub_10005069C(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  +[CALogger postCAEventFor:@"com.apple.sesd.keySyncEvent" eventInput:v2];
}

void sub_100050700(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  +[CALogger postCAEventFor:@"com.apple.sesd.fidoEvent" eventInput:v2];
}

void sub_100050764(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = HIDWORD(a2);
  self;
  v9[0] = @"preconditionsMet";
  id v4 = +[NSNumber numberWithBool:a2 & 1];
  v10[0] = v4;
  v9[1] = @"isSynchronized";
  id v5 = +[NSNumber numberWithBool:(a2 >> 8) & 1];
  v10[1] = v5;
  _DWORD v9[2] = @"serverRecoveredTLK";
  id v6 = +[NSNumber numberWithBool:(a2 >> 16) & 1];
  unint64_t v10[2] = v6;
  v9[3] = @"identityAge";
  id v7 = +[NSNumber numberWithUnsignedInt:v3];
  v10[3] = v7;
  id v8 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:4];

  +[CALogger postCAEventFor:@"com.apple.sesd.keySyncStateStatistics" eventInput:v8];
}

void sub_1000508B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  self;
  v8[0] = @"assetCompatibilityVersion";
  id v5 = +[NSNumber numberWithUnsignedInteger:a2];
  v8[1] = @"assetContentVersion";
  v9[0] = v5;
  id v6 = +[NSNumber numberWithUnsignedInteger:a3];
  v9[1] = v6;
  id v7 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:2];

  +[CALogger postCAEventFor:@"com.apple.sesd.generalStatistics" eventInput:v7];
}

id sub_1000509A0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [objc_alloc((Class)NSMutableDictionary) initWithCapacity:[v2 count]];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        [v3 setObject:&off_10042DE40 forKey:*(void *)(*((void *)&v10 + 1) + 8 * (void)v8) (void)v10];
        id v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v6);
  }

  return v3;
}

void sub_100050AE4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = SESDefaultLogObject();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v25 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Recording CA Aliro Daily Transaction Statistics events %@", buf, 0xCu);
  }

  id v4 = sub_10004ED5C();
  v23[0] = @"auxReaderKeyTxCount";
  v23[1] = @"btConnectionCount";
  v23[2] = @"btConnectionDuration";
  v23[3] = @"deviceInitatedRangingCount";
  v23[4] = @"deviceInitatedSuspendRangingCount";
  v23[5] = @"fastTxAttemptedCount";
  v23[6] = @"lockInitiatedSuspendRangingCount";
  void v23[7] = @"lockInitiatedResumeRangingCount";
  v23[8] = @"primaryReaderKeyTxCount";
  v23[9] = @"rangingDuration";
  v23[10] = @"seDuration";
  v23[11] = @"standardTxAttemptedCount";
  v23[12] = @"stepUpTxAttemptedCount";
  v23[13] = @"successfulAliroTxCount";
  v23[14] = @"successfulFastTxCount";
  v23[15] = @"successfulStandardTxCount";
  v23[16] = @"successfulStepUpTxCount";
  v23[17] = @"suspendedDuration";
  v23[18] = @"timeSyncProcedure1Count";
  v23[19] = @"txCountAttempted";
  int v15 = +[NSArray arrayWithObjects:v23 count:20];
  id obj = v4;
  objc_sync_enter(obj);
  id v16 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  id v5 = [v16 dictionaryForKey:@"ca.aliro.daily.transaction.statistics"];
  id v6 = [v5 mutableCopy];

  if (!v6) {
    id v6 = sub_1000509A0((uint64_t)SESDAnalyticsLogger, v15);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v7 = v2;
  id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v19;
    do
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        long long v12 = [v7 objectForKeyedSubscript:v11];
        long long v13 = [v6 objectForKeyedSubscript:v11];
        int v14 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v13 unsignedIntegerValue] + [v12 unsignedIntegerValue]);
        [v6 setObject:v14 forKeyedSubscript:v11];
      }
      id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v8);
  }

  [v16 setObject:v6 forKey:@"ca.aliro.daily.transaction.statistics"];
  objc_sync_exit(obj);
}

void sub_100050E44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_100050E78()
{
  self;
  v20[0] = @"auxReaderKeyTxCount";
  v20[1] = @"btConnectionCount";
  v20[2] = @"btConnectionDuration";
  v20[3] = @"deviceInitatedRangingCount";
  void v20[4] = @"deviceInitatedSuspendRangingCount";
  v20[5] = @"fastTxAttemptedCount";
  v20[6] = @"lockInitiatedSuspendRangingCount";
  v20[7] = @"lockInitiatedResumeRangingCount";
  v20[8] = @"primaryReaderKeyTxCount";
  v20[9] = @"rangingDuration";
  v20[10] = @"seDuration";
  v20[11] = @"standardTxAttemptedCount";
  v20[12] = @"stepUpTxAttemptedCount";
  v20[13] = @"successfulAliroTxCount";
  v20[14] = @"successfulFastTxCount";
  v20[15] = @"successfulStandardTxCount";
  v20[16] = @"successfulStepUpTxCount";
  v20[17] = @"suspendedDuration";
  v20[18] = @"timeSyncProcedure1Count";
  v20[19] = @"txCountAttempted";
  long long v10 = +[NSArray arrayWithObjects:v20 count:20];
  sub_10004ED5C();
  id obj = (id)objc_claimAutoreleasedReturnValue();
  objc_sync_enter(obj);
  id v11 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  v0 = [v11 dictionaryForKey:@"ca.aliro.daily.transaction.statistics"];
  id v1 = [v0 mutableCopy];
  if (!v1) {
    id v1 = sub_1000509A0((uint64_t)SESDAnalyticsLogger, v10);
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v2 = v0;
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        id v7 = [v2 objectForKeyedSubscript:v6];
        id v8 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", +[SignificantDigits getValueWithSignificantDigits:value:](_TtC10seserviced17SignificantDigits, "getValueWithSignificantDigits:value:", 2, [v7 intValue]));
        [v1 setObject:v8 forKeyedSubscript:v6];
      }
      id v3 = [v2 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }
    while (v3);
  }

  uint64_t v9 = SESDefaultLogObject();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138412290;
    id v18 = v1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Posting CA Aliro Daily Statistics events %@", buf, 0xCu);
  }

  +[CALogger postCAEventFor:@"com.apple.sesd.dailyAliroTransactionEvent" eventInput:v1];
  [v11 removeObjectForKey:@"ca.aliro.daily.transaction.statistics"];

  objc_sync_exit(obj);
}

void sub_1000511C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

void sub_100051200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  self;
  if (!(a3 | a2)) {
    return;
  }
  id v7 = sub_10004ED5C();
  v20[0] = @"ownerPassiveEntryTxCount";
  v20[1] = @"ownerNoDIPassiveEntryTxCount";
  v20[2] = @"ownerWalkAwayLockCount";
  v20[3] = @"ownerWalletRKECount";
  void v20[4] = @"owner3rdPartyRKECount";
  v20[5] = @"ownerPassthroughCount";
  BOOL v17 = +[NSArray arrayWithObjects:v20 count:6];
  v19[0] = @"friendPassiveEntryTxCount";
  v19[1] = @"friendNoDIPassiveEntryTxCount";
  v19[2] = @"friendWalkAwayLockCount";
  v19[3] = @"friendWalletRKECount";
  void v19[4] = @"friend3rdPartyRKECount";
  v19[5] = @"friendPassthroughCount";
  long long v16 = +[NSArray arrayWithObjects:v19 count:6];
  v18[0] = @"unlockNeededForCarActionCount";
  v18[1] = @"connectionCount";
  v18[2] = @"disconnectionCount";
  v18[3] = @"deviceIntentCount";
  id v8 = +[NSArray arrayWithObjects:v18 count:4];
  id v9 = v7;
  objc_sync_enter(v9);
  id v10 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  id v11 = v10;
  if (a2
    && ([v10 dictionaryForKey:@"ca.general.transaction.statistics.owner"],
        (a2 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    a2 = (uint64_t)sub_1000509A0((uint64_t)SESDAnalyticsLogger, v17);
    if (a3)
    {
LABEL_5:
      a3 = [v11 dictionaryForKey:@"ca.general.transaction.statistics.friend"];
      if (!a3) {
        a3 = (uint64_t)sub_1000509A0((uint64_t)SESDAnalyticsLogger, v16);
      }
    }
  }
  else if (a3)
  {
    goto LABEL_5;
  }
  long long v12 = [v11 dictionaryForKey:@"ca.general.transaction.statistics"];
  if (!v12) {
    long long v12 = sub_1000509A0((uint64_t)SESDAnalyticsLogger, v8);
  }
  long long v13 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", (char *)[(id)a2 count]+ (void)objc_msgSend((id)a3, "count")+ (unint64_t)objc_msgSend(v12, "count"));
  long long v14 = v13;
  if (a2) {
    [v13 addEntriesFromDictionary:a2];
  }
  if (a3) {
    [v14 addEntriesFromDictionary:a3];
  }
  [v14 addEntriesFromDictionary:v12];
  long long v15 = +[NSNumber numberWithBool:a4];
  [v14 setObject:v15 forKeyedSubscript:@"production"];

  +[CALogger postCAEventFor:@"com.apple.kml.generalTransactionStatisticsEvent" eventInput:v14];
  [v11 removeObjectForKey:@"ca.general.transaction.statistics"];
  [v11 removeObjectForKey:@"ca.general.transaction.statistics.friend"];
  [v11 removeObjectForKey:@"ca.general.transaction.statistics.owner"];

  objc_sync_exit(v9);
}

void sub_100051560(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100051588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, unsigned int a15, unsigned int a16, unsigned int a17, unsigned int a18)
{
  self;
  v43[0] = @"deviceStatus";
  id v42 = +[NSNumber numberWithUnsignedInt:a2];
  v44[0] = v42;
  v43[1] = @"transactionMode";
  long long v41 = +[NSNumber numberWithUnsignedInt:a3];
  v44[1] = v41;
  v43[2] = @"keyType";
  id v40 = +[NSNumber numberWithUnsignedInt:a4];
  v44[2] = v40;
  v43[3] = @"disconnectReason";
  id v39 = +[NSNumber numberWithUnsignedInt:a5];
  v44[3] = v39;
  void v43[4] = @"lockStatus";
  id v38 = +[NSNumber numberWithUnsignedInt:a6];
  v44[4] = v38;
  v43[5] = @"lockSharingCapability";
  id v37 = +[NSNumber numberWithUnsignedInt:a7];
  v44[5] = v37;
  v43[6] = @"unlockCount";
  id v36 = +[NSNumber numberWithUnsignedInt:a8];
  v44[6] = v36;
  v43[7] = @"unlockFromOtherSourceCount";
  long long v35 = +[NSNumber numberWithUnsignedInt:a9];
  v44[7] = v35;
  v43[8] = @"deviceInitatedRangingAttemptsCount";
  id v25 = +[NSNumber numberWithUnsignedInt:a10];
  v44[8] = v25;
  v43[9] = @"rangingAttemptsCount";
  uint64_t v26 = +[NSNumber numberWithUnsignedInt:a11];
  v44[9] = v26;
  unsigned char v43[10] = @"timeSyncProcedure1Count";
  id v27 = +[NSNumber numberWithUnsignedInt:a12];
  v44[10] = v27;
  v43[11] = @"btTimeExtensionInitiatedByDeviceCount";
  id v28 = +[NSNumber numberWithUnsignedInt:a13];
  v44[11] = v28;
  v43[12] = @"btTimeExtensionInitiatedByLockCount";
  id v29 = +[NSNumber numberWithUnsignedInt:a14];
  v44[12] = v29;
  v43[13] = @"btOutOfOrderMessageCount";
  id v30 = +[NSNumber numberWithUnsignedInt:a15];
  v44[13] = v30;
  v43[14] = @"stepUpDuration";
  id v31 = +[NSNumber numberWithUnsignedInt:a16];
  v44[14] = v31;
  v43[15] = @"rangingDuration";
  unsigned int v32 = +[NSNumber numberWithUnsignedInt:a17];
  v44[15] = v32;
  v43[16] = @"btConnectionDuration";
  uint64_t v33 = +[NSNumber numberWithUnsignedInt:a18];
  v44[16] = v33;
  uint64_t v34 = +[NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:17];

  +[CALogger postCAEventFor:@"com.apple.sesd.aliroSessionEvent" eventInput:v34];
}

void sub_100051964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  self;
  v29[0] = @"deviceStatus";
  id v28 = +[NSNumber numberWithUnsignedInt:a2];
  v30[0] = v28;
  v29[1] = @"lockStatus";
  BOOL v17 = +[NSNumber numberWithUnsignedInt:a5];
  v30[1] = v17;
  void v29[2] = @"lockCapability";
  id v18 = +[NSNumber numberWithUnsignedInt:a3];
  id v30[2] = v18;
  v29[3] = @"lockStatusAtConnection";
  long long v19 = +[NSNumber numberWithUnsignedInt:a4];
  v30[3] = v19;
  uint8_t v29[4] = @"intentFallbackTriggered";
  long long v20 = +[NSNumber numberWithUnsignedInt:a7];
  v30[4] = v20;
  void v29[5] = @"rangingExceptionBitmap";
  long long v21 = +[NSNumber numberWithUnsignedInt:a8];
  void v30[5] = v21;
  v29[6] = @"deviceInitatedRangingAttemptsCount";
  unsigned int v22 = +[NSNumber numberWithUnsignedInt:a10];
  v30[6] = v22;
  v29[7] = @"rangingAttemptsCount";
  uint64_t v23 = +[NSNumber numberWithUnsignedInt:a9];
  id v30[7] = v23;
  v29[8] = @"rangingDuration";
  id v24 = +[NSNumber numberWithUnsignedInt:a11];
  v30[8] = v24;
  v29[9] = @"unlockSource";
  id v25 = +[NSNumber numberWithUnsignedInt:a6];
  v30[9] = v25;
  uint64_t v26 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:10];

  +[CALogger postCAEventFor:@"com.apple.sesd.aliroTransactionEvent" eventInput:v26];
}

id sub_100051BDC(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v13 = 0;
    long long v14 = &v13;
    uint64_t v15 = 0x3032000000;
    long long v16 = sub_100051D68;
    BOOL v17 = sub_100051D78;
    id v18 = 0;
    uint64_t v7 = 0;
    id v8 = &v7;
    uint64_t v9 = 0x3032000000;
    id v10 = sub_100051D68;
    id v11 = sub_100051D78;
    id v12 = 0;
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100051D80;
    void v6[3] = &unk_10040C430;
    _DWORD v6[4] = &v7;
    void v6[5] = &v13;
    sub_10001A4A0(a1, v6);
    id v3 = (void *)v14[5];
    if (v3)
    {
      id v4 = 0;
      if (a2) {
        *a2 = v3;
      }
    }
    else
    {
      id v4 = (id)v8[5];
    }
    _Block_object_dispose(&v7, 8);

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_100051D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100051D68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100051D78(uint64_t a1)
{
}

void sub_100051D80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[UuidToEndpointId fetchRequest];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v3 executeFetchRequest:v4 error:&obj];

  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_100051E28(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    uint64_t v9 = sub_100051BDC(a1, a4);
    if (*a4)
    {
      id v10 = 0;
    }
    else
    {
      id v13 = v8;
      id v14 = v7;
      id v11 = Find();
      id v10 = [v11 endpointId:_NSConcreteStackBlock with:3221225472 and:sub_100051F50 and:&unk_10040D808];
    }
  }
  else
  {
    id v10 = 0;
  }

  return v10;
}

id sub_100051F50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 clientName];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    uint64_t v5 = [v3 uuid];
    id v6 = [v5 isEqual:*(void *)(a1 + 40)];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_100051FCC(id a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v16 = 0;
    BOOL v17 = &v16;
    uint64_t v18 = 0x3032000000;
    long long v19 = sub_100051D68;
    long long v20 = sub_100051D78;
    id v21 = 0;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100052148;
    v11[3] = &unk_10040D830;
    void v11[4] = a1;
    id v12 = v8;
    id v13 = v9;
    uint64_t v15 = &v16;
    id v14 = v7;
    sub_10001A33C((uint64_t)a1, v11);
    a1 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }

  return a1;
}

void sub_100052130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100052148(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  id v6 = (void *)a1[6];
  uint64_t v7 = *(void *)(a1[8] + 8);
  id obj = *(id *)(v7 + 40);
  uint64_t v8 = sub_100051E28(v4, v5, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);
  if (*(void *)(*(void *)(a1[8] + 8) + 40) | v8)
  {
    sub_100030B78(v3);
  }
  else
  {
    id v9 = sub_100030AD8((uint64_t)v3);
    id v10 = +[NSEntityDescription insertNewObjectForEntityForName:@"UuidToEndpointId" inManagedObjectContext:v9];

    [v10 setEndpointId:a1[7]];
    [v10 setUuid:a1[5]];
    [v10 setClientName:a1[6]];
    uint64_t v11 = *(void *)(a1[8] + 8);
    id v16 = *(id *)(v11 + 40);
    unsigned __int8 v12 = [v10 validateForInsert:&v16];
    objc_storeStrong((id *)(v11 + 40), v16);
    if (v12)
    {
      uint64_t v13 = sub_100030AE4((uint64_t)v3);
      uint64_t v14 = *(void *)(a1[8] + 8);
      uint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = v13;
    }
    else
    {
      sub_100030B78(v3);
    }
  }
}

id sub_10005229C(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x3032000000;
    id v25 = sub_100051D68;
    uint64_t v26 = sub_100051D78;
    id v27 = 0;
    id obj = 0;
    uint64_t v7 = sub_100051BDC((uint64_t)a1, &obj);
    objc_storeStrong(&v27, obj);
    uint64_t v8 = (void *)v23[5];
    if (v8)
    {
      a1 = v8;
    }
    else
    {
      uint64_t v15 = _NSConcreteStackBlock;
      uint64_t v16 = 3221225472;
      BOOL v17 = sub_1000524B0;
      uint64_t v18 = &unk_10040D808;
      id v19 = v6;
      id v20 = v5;
      id v9 = Find();
      id v10 = v9;
      if (v9)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10005252C;
        v12[3] = &unk_10040C510;
        id v13 = v9;
        uint64_t v14 = &v22;
        sub_10001A33C((uint64_t)a1, v12);
        a1 = (id)v23[5];
      }
      else
      {
        a1 = 0;
      }
    }
    _Block_object_dispose(&v22, 8);
  }

  return a1;
}

void sub_100052494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000524B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 clientName];
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = [v3 uuid];
    id v6 = [v5 isEqual:*(void *)(a1 + 40)];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_10005252C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100030AD8((uint64_t)v3);
  [v4 deleteObject:*(void *)(a1 + 32)];

  uint64_t v5 = sub_100030AE4((uint64_t)v3);

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id sub_1000525A8(void *a1)
{
  id v1 = a1;
  id v2 = [@"A000000809434343444b467631" hexStringAsData];
  id v19 = 0;
  id v3 = sub_10005666C(v1, v2, &v19);
  uint64_t v4 = (id *)v19;

  if (v3)
  {
    id v5 = v3;
  }
  else
  {
    uint64_t v6 = sub_10005D558(v4);
    uint64_t v7 = +[SESTLV TLVsWithData:v6];

    uint64_t v8 = [v7 find:&stru_10040D850];
    id v9 = SESDefaultLogObject();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      id v10 = [v8 value];
      *(_DWORD *)long long buf = 138412290;
      id v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Got PAKE version: %@", buf, 0xCu);
    }
    uint64_t v11 = [v8 value];
    unsigned __int8 v12 = [@"0100" hexStringAsData];
    unsigned __int8 v13 = [v11 isEqualToData:v12];

    if (v13)
    {
      id v5 = 0;
    }
    else
    {
      uint64_t v14 = [@"0100" hexStringAsData];
      id v18 = 0;
      id v15 = sub_100056348(v1, 128, 54, 0, 0, v14, 0, &v18);
      id v16 = v18;

      id v5 = v16;
    }
  }

  return v5;
}

BOOL sub_1000527E0(id a1, SESTLV *a2)
{
  return [(SESTLV *)a2 tag] == 90;
}

NSObject **sub_100052804(NSObject **a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)SESTimer;
    a1 = (NSObject **)[super init];
    if (a1)
    {
      dispatch_source_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 1uLL, 0, v5);
      uint64_t v8 = a1[1];
      a1[1] = v7;

      id v9 = a1[1];
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_100052910;
      handler[3] = &unk_10040C108;
      id v12 = v6;
      dispatch_source_set_event_handler(v9, handler);
      dispatch_activate(a1[1]);
      *((unsigned char *)a1 + 16) = 0;
    }
  }

  return a1;
}

uint64_t sub_100052910(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Invoking timer CB", v4, 2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1000529D8(uint64_t a1, double a2)
{
  if (a1)
  {
    double v2 = 0.001;
    if (a2 / 10.0 >= 0.001) {
      double v2 = a2 / 10.0;
    }
    if (a2 / 10.0 <= 60.0) {
      double v3 = v2;
    }
    else {
      double v3 = 60.0;
    }
    sub_100052A0C(a1, a2, v3);
  }
}

void sub_100052A0C(uint64_t a1, double a2, double a3)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 16) = 1;
    uint64_t v4 = *(NSObject **)(a1 + 8);
    int64_t v5 = (uint64_t)(a2 * 1000000000.0);
    dispatch_time_t v6 = dispatch_time(0, v5);
    dispatch_source_set_timer(v4, v6, 0xFFFFFFFFFFFFFFFFLL, (uint64_t)(a3 * 1000000000.0));
    dispatch_source_t v7 = SESDefaultLogObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = 134218240;
      int64_t v9 = v5;
      __int16 v10 = 2048;
      uint64_t v11 = (uint64_t)(a3 * 1000000000.0);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Timer set for interval %lld -- leeway %llu", (uint8_t *)&v8, 0x16u);
    }
  }
}

void sub_100052B14(uint64_t a1)
{
  if (a1)
  {
    *(unsigned char *)(a1 + 16) = 0;
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 8), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    id v1 = SESDefaultLogObject();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)double v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Timer cancelled", v2, 2u);
    }
  }
}

BOOL sub_100052B9C(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 16) != 0;
  }
  return result;
}

void sub_100052C10(id a1)
{
  uint64_t v1 = objc_opt_new();
  double v2 = (void *)qword_10045CD70;
  qword_10045CD70 = v1;

  double v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.secureelementservice.event.publisher.queue", v3);
  [(id)qword_10045CD70 setEventPublisherQueue:v4];

  id v5 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  if ([v5 BOOLForKey:@"debug.use.test.event.port"]) {
    CFStringRef v6 = @"com.apple.secureelementservice.test.events";
  }
  else {
    CFStringRef v6 = @"com.apple.passd.nf-events";
  }
  dispatch_source_t v7 = SESDefaultLogObject();
  if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    int v11 = 138412290;
    CFStringRef v12 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Posting xpc events to %@", (uint8_t *)&v11, 0xCu);
  }

  int v8 = [NFSecureXPCEventPublisher alloc];
  int64_t v9 = [(id)qword_10045CD70 eventPublisherQueue];
  __int16 v10 = [(NFSecureXPCEventPublisher *)v8 initWithMachPort:v6 queue:v9];
  [(id)qword_10045CD70 setEventPublisher:v10];
}

void *sub_1000535D8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  double v3 = sub_100053638([SEProxyAdapter alloc], v2);

  return v3;
}

void *sub_100053638(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)SEProxyAdapter;
    a1 = [super init];
    if (a1)
    {
      uint64_t v4 = [v3 synchronousRemoteObjectProxyWithErrorHandler:&stru_10040D8B0];
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

void sub_1000536B8(id a1, NSError *a2)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "failed make proxy synchronous?", v3, 2u);
  }
}

void sub_100053888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000538AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1000538BC(uint64_t a1)
{
}

void sub_1000538C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v11 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  __int16 v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
}

BOOL sub_100053A20(id a1, SESTLV *a2)
{
  return [(SESTLV *)a2 tag] == 57154;
}

id sub_100053F30(uint64_t a1)
{
  return [*(id *)(a1 + 32) dumpState];
}

id sub_100053F38(uint64_t a1)
{
  +[SESAlarm registerAlarm:@"com.apple.seserviced.download.catalog" handler:*(void *)(a1 + 32)];
  +[SESAlarm registerAlarm:@"com.apple.seserviced.download.asset" handler:*(void *)(a1 + 32)];
  +[SESDarwinNotificationMonitor registerDelegate:*(void *)(a1 + 32) forEvent:@"com.apple.MobileAsset.SecureElementServiceAssets.ma.cached-metadata-updated"];
  +[SESDarwinNotificationMonitor registerDelegate:*(void *)(a1 + 32) forEvent:@"com.apple.MobileAsset.SecureElementServiceAssets.ma.new-asset-installed"];
  [*(id *)(a1 + 32) queryMA];
  id v2 = *(void **)(a1 + 32);

  return [v2 maybeQueryMetadata];
}

id sub_100054064(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Handling alarm %@", (uint8_t *)&v5, 0xCu);
  }

  if ([*(id *)(a1 + 32) isEqualToString:@"com.apple.seserviced.download.catalog"]) {
    return [*(id *)(a1 + 40) maybeQueryMetadata];
  }
  id result = [*(id *)(a1 + 32) isEqualToString:@"com.apple.seserviced.download.asset"];
  if (result) {
    return [*(id *)(a1 + 40) queryMA];
  }
  return result;
}

id sub_1000541E0(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Handling notification %@", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) queryMA];
}

void sub_100054768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = SESDefaultLogObject();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "catalog download result %ld", buf, 0xCu);
  }

  int v5 = [*(id *)(a1 + 32) queue];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100054880;
  void v6[3] = &unk_10040D920;
  _DWORD v6[4] = *(void *)(a1 + 32);
  void v6[5] = a2;
  dispatch_async(v5, v6);
}

void sub_100054880(uint64_t a1)
{
  uint64_t v3 = a1 + 32;
  id v2 = *(void **)(a1 + 32);
  if (*(void *)(v3 + 8))
  {
    [v2 retryWithBackoff:@"com.apple.seserviced.download.catalog"];
  }
  else
  {
    uint64_t v4 = [v2 userDefaults];
    [v4 removeObjectForKey:@"catalogDownloadStartedOn"];

    [*(id *)(a1 + 32) setErrorCount:0];
    int v5 = self;
    [v5 metadataQueryInterval];
    uint64_t v6 = +[NSDate dateWithTimeIntervalSinceNow:](NSDate, "dateWithTimeIntervalSinceNow:");

    uint64_t v7 = [*(id *)(a1 + 32) userDefaults];
    [v7 setObject:v6 forKey:@"nextMetadataCheck"];

    [*(id *)(a1 + 32) metadataQueryInterval];
    +[SESAlarm setAlarm:secondsFromNow:](SESAlarm, "setAlarm:secondsFromNow:", @"com.apple.seserviced.download.catalog");
    uint64_t v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      __int16 v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Metadata downloaded success, next check %@", (uint8_t *)&v9, 0xCu);
    }

    [*(id *)(a1 + 32) queryMA];
  }
}

void sub_100054B28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100054BDC;
  block[3] = &unk_10040D970;
  int v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  uint64_t v8 = a2;
  id v7 = v5;
  dispatch_async(v4, block);
}

id sub_100054BDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleQueryResult:*(void *)(a1 + 48) query:*(void *)(a1 + 40)];
}

void sub_100055230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = [*(id *)(a1 + 32) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000552E4;
  block[3] = &unk_10040D970;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v9 = a2;
  void block[4] = v5;
  id v8 = v6;
  dispatch_async(v4, block);
}

id sub_1000552E4(uint64_t a1)
{
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    int v8 = 134217984;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Download result %ld", (uint8_t *)&v8, 0xCu);
  }

  uint64_t v4 = *(void *)(a1 + 48);
  if (v4 != 10 && v4 != 0) {
    return [*(id *)(a1 + 32) retryWithBackoff:@"com.apple.seserviced.download.asset"];
  }
  uint64_t v6 = [*(id *)(a1 + 32) userDefaults];
  [v6 removeObjectForKey:@"assetDownloadStartedOn"];

  return [*(id *)(a1 + 32) handleAvailableAsset:*(void *)(a1 + 40)];
}

id sub_100055A6C(uint64_t a1)
{
  [*(id *)(a1 + 32) setUserInitiated:1];
  [*(id *)(*(void *)(a1 + 32) + 48) removeObjectForKey:@"nextMetadataCheck"];
  id v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Querying metadata on user initiated trigger", v4, 2u);
  }

  return [*(id *)(a1 + 32) queryMetadata];
}

id *sub_100055CCC(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)SecureElement;
    int v8 = (id *)[super init];
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 3, a2);
      *((unsigned char *)a1 + 32) = [v6 conformsToProtocol:&OBJC_PROTOCOL___BackedByNFSession];
      objc_storeStrong(a1 + 6, a3);
      uint64_t v9 = +[SecureElementManager getInstance];
      __int16 v10 = [v9 getNFManager];
      uint64_t v11 = [v10 secureElementInfo];
      id v12 = a1[5];
      a1[5] = (id)v11;

      if (!a1[5])
      {
        objc_super v13 = SESDefaultLogObject();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          v15[0] = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Refusing to initialize SE because NFManager has no info", (uint8_t *)v15, 2u);
        }

        a1 = 0;
      }
    }
  }

  return a1;
}

void sub_100055F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100055FAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100055FBC(uint64_t a1)
{
}

void sub_100055FC4(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = *(void **)(a1[4] + 24);
  uint64_t v4 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = [v3 transceive:v2 outError:&obj];
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = *(void *)(a1[6] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

id sub_10005603C(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v9 = 0;
    uint64_t v4 = [a1 transceive:a2 error:&v9];
    id v5 = v9;
    uint64_t v6 = v5;
    if (!v4 || v5)
    {
      if (a3)
      {
        SESEnsureError();
        id v7 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v7 = 0;
      }
    }
    else
    {
      id v7 = sub_10005D448((uint64_t)RAPDU, v4, a3);
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

id sub_100056104(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v16 = 0;
    uint64_t v6 = [a1 transceive:v5 error:&v16];
    id v7 = v16;
    id v8 = v7;
    if (!v6 || v7)
    {
      if (!a3)
      {
        uint64_t v11 = 0;
        goto LABEL_15;
      }
      SESDefaultLogObject();
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      SESCreateAndLogError();
      uint64_t v11 = 0;
      *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_14:

LABEL_15:
      goto LABEL_16;
    }
    id v15 = 0;
    sub_10005D448((uint64_t)RAPDU, v6, &v15);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v8 = v15;
    if (v8)
    {
      if (!a3)
      {
LABEL_8:
        uint64_t v11 = 0;
        goto LABEL_14;
      }
      __int16 v10 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      if (sub_10005D5A8((uint64_t)v9) == 36864 || (sub_10005D5A8((uint64_t)v9) & 0xFF00) == 0x6300)
      {
        id v9 = v9;
        uint64_t v11 = v9;
        goto LABEL_14;
      }
      if (!a3) {
        goto LABEL_8;
      }
      __int16 v10 = SESDefaultLogObject();
      sub_10005D5A8((uint64_t)v9);
      objc_super v13 = [v6 asHexString];
      uint64_t v14 = [v5 asHexString];
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    goto LABEL_8;
  }
  uint64_t v11 = 0;
LABEL_16:

  return v11;
}

id sub_100056348(void *a1, char a2, char a3, char a4, char a5, void *a6, char a7, void *a8)
{
  id v15 = a6;
  id v16 = v15;
  if (!a1) {
    goto LABEL_7;
  }
  if ((unint64_t)[v15 length] < 0x100)
  {
    char v23 = a7;
    if ([v16 length]) {
      uint64_t v19 = (uint64_t)[v16 length] + 6;
    }
    else {
      uint64_t v19 = 5;
    }
    id v17 = +[NSMutableData dataWithLength:v19];
    id v20 = [v17 mutableBytes];
    unsigned char *v20 = a2;
    v20[1] = a3;
    v20[2] = a4;
    v20[3] = a5;
    if ([v16 length])
    {
      void v20[4] = [v16 length];
      id v21 = v16;
      memcpy(v20 + 5, [v21 bytes], (size_t)[v21 length]);
    }
    v20[v19 - 1] = v23;
    id v18 = sub_100056104(a1, v17, a8);
    goto LABEL_12;
  }
  if (!a8)
  {
LABEL_7:
    id v18 = 0;
    goto LABEL_13;
  }
  SESDefaultLogObject();
  id v17 = (id)objc_claimAutoreleasedReturnValue();
  [v16 length];
  SESCreateAndLogError();
  id v18 = 0;
  *a8 = (id)objc_claimAutoreleasedReturnValue();
LABEL_12:

LABEL_13:

  return v18;
}

id sub_100056504(void *a1, char a2, char a3, char a4, char a5, void *a6, unsigned int a7, void *a8)
{
  if (a1)
  {
    id v14 = a6;
    id v15 = [v14 length];
    id v16 = +[NSMutableData dataWithLength:(char *)v15 + 9];
    id v17 = (char *)[v16 mutableBytes];
    char *v17 = a2;
    v17[1] = a3;
    void v17[2] = a4;
    id v17[3] = a5;
    *(_WORD *)(v17 + 5) = bswap32([v14 length]) >> 16;
    id v18 = v14;
    memcpy(v17 + 7, [v18 bytes], (size_t)[v18 length]);
    *(_WORD *)&v17[(void)v15 + 7] = __rev16(a7);

    uint64_t v19 = sub_100056104(a1, v16, a8);
  }
  else
  {
    uint64_t v19 = 0;
  }

  return v19;
}

id sub_100056638(void *a1, void *a2)
{
  if (a1)
  {
    a1 = sub_10005666C(a1, a2, 0);
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_10005666C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    uint64_t v19 = 0;
    id v20 = &v19;
    uint64_t v21 = 0x3032000000;
    uint64_t v22 = sub_100055FAC;
    char v23 = sub_100055FBC;
    id v24 = 0;
    uint64_t v13 = 0;
    id v14 = &v13;
    uint64_t v15 = 0x3032000000;
    id v16 = sub_100055FAC;
    id v17 = sub_100055FBC;
    id v18 = 0;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_100056834;
    v9[3] = &unk_10040DA88;
    void v9[4] = a1;
    id v10 = v5;
    uint64_t v11 = &v13;
    id v12 = &v19;
    [a1 sync:v9];
    id v7 = (void *)v14[5];
    if (!v7 || v20[5])
    {
      a1 = SESEnsureError();
    }
    else
    {
      a1 = 0;
      if (a3) {
        *a3 = v7;
      }
    }

    _Block_object_dispose(&v13, 8);
    _Block_object_dispose(&v19, 8);
  }

  return a1;
}

void sub_100056810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100056834(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 8) isEqualToData:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), *(id *)(v3 + 16));
    return;
  }
  uint64_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + 8) = 0;

  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 16);
  *(void *)(v5 + 16) = 0;

  id v7 = +[NSMutableData dataWithBytes:&unk_100377704 length:4];
  [v7 appendU8:[*(id *)(a1 + 40) length]];
  [v7 appendData:*(void *)(a1 + 40)];
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8);
  id obj = *(id *)(v9 + 40);
  id v10 = [v8 transceive:v7 error:&obj];
  objc_storeStrong((id *)(v9 + 40), obj);
  if (v10)
  {
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v13 = *(void *)(v11 + 40);
    id v12 = (id *)(v11 + 40);
    if (!v13)
    {
      id v25 = 0;
      uint64_t v14 = sub_10005D448((uint64_t)RAPDU, v10, &v25);
      objc_storeStrong(v12, v25);
      uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8);
      id v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = v14;

      uint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
      if (v17)
      {
        if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
        {
          if (sub_10005D5A8(v17) == 27033
            || sub_10005D5A8(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) == 27266)
          {
            id v18 = SESDefaultLogObject();
          }
          else
          {
            if (sub_10005D5A8(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)) == 36864)
            {
              objc_storeStrong((id *)(*(void *)(a1 + 32) + 8), *(id *)(a1 + 40));
              uint64_t v19 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
              uint64_t v20 = *(void *)(a1 + 32);
              id v21 = v19;
              id v18 = *(void **)(v20 + 16);
              *(void *)(v20 + 16) = v21;
LABEL_15:

              goto LABEL_5;
            }
            id v18 = SESDefaultLogObject();
            sub_10005D5A8(*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40));
          }
          uint64_t v22 = SESCreateAndLogError();
          uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 8);
          id v24 = *(void **)(v23 + 40);
          *(void *)(v23 + 40) = v22;

          goto LABEL_15;
        }
      }
    }
  }
LABEL_5:
}

id sub_100056AF0(id a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  if (a1)
  {
    if (a3) {
      sub_100056B94(a1);
    }
    id v10 = 0;
    id v8 = sub_10005666C(a1, v7, &v10);
    a1 = v10;
    if (a4) {
      *a4 = v8;
    }
  }

  return a1;
}

id sub_100056B94(id result)
{
  if (result)
  {
    v1[0] = _NSConcreteStackBlock;
    v1[1] = 3221225472;
    v1[2] = sub_100056F84;
    v1[3] = &unk_10040B880;
    v1[4] = result;
    return [result sync:v1];
  }
  return result;
}

BOOL sub_100056C08(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v7 = 0;
  id v2 = sub_10005666C(a1, a2, &v7);
  id v3 = v7;
  uint64_t v4 = v3;
  if (v3) {
    BOOL v5 = sub_10005D5A8((uint64_t)v3) != 27266;
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

BOOL sub_100056C80(void *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v15 = 4279897;
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x3032000000;
  uint64_t v9 = sub_100055FAC;
  id v10 = sub_100055FBC;
  id v11 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100056DE8;
  v5[3] = &unk_10040DAB0;
  v5[4] = a1;
  void v5[5] = &v6;
  void v5[6] = &v12;
  [a1 sync:v5];
  if (a2) {
    *a2 = (id) v7[5];
  }
  BOOL v3 = v13[3] == 1 && v7[5] == 0;
  _Block_object_dispose(&v6, 8);

  _Block_object_dispose(&v12, 8);
  return v3;
}

void sub_100056DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100056DE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && (*(unsigned char *)(v2 + 32) & 1) != 0)
  {
    uint64_t v6 = *(void **)(v2 + 24);
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    id obj = *(id *)(v7 + 40);
    id v8 = [v6 validatePairing:&obj];
    objc_storeStrong((id *)(v7 + 40), obj);
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v8;
    sub_100056B94(*(id *)(a1 + 32));
  }
  else
  {
    SESDefaultLogObject();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v3 = SESCreateAndLogError();
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    BOOL v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }
}

void sub_100056F84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 8);
  *(void *)(v2 + 8) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0;
}

id sub_100056FD0(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 40, 1);
  }
  return result;
}

uint64_t sub_100056FE4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 48);
  }
  return result;
}

void sub_100057590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

uint64_t sub_1000575B4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  unint64_t v7 = 0;
  __s2 = 0;
  size_t __n = 0;
  uint64_t v5 = DERDecodeItem(a2 + 8, &v7);
  if (!v5 && v7 == 12 && __n == *(void *)(a1 + 40) && !memcmp(*(const void **)(a1 + 48), __s2, __n))
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return v5;
}

void sub_100057AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100057AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  xpc_type_t type = xpc_get_type(v3);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    uint64_t v6 = type;
    unint64_t v7 = SESDefaultLogObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315138;
      name = xpc_type_get_name(v6);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unexpected typed: %s", (uint8_t *)&v13, 0xCu);
    }
LABEL_15:

    goto LABEL_16;
  }
  if (xpc_equal(v3, &_xpc_error_connection_interrupted))
  {
    id v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = *(const char **)(a1 + 32);
      int v13 = 138412290;
      name = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Service interrupted: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    if (!xpc_equal(v3, &_xpc_error_connection_invalid))
    {
      unint64_t v7 = xpc_dictionary_get_value(v3, _xpc_error_key_description);
      uint64_t v12 = SESDefaultLogObject();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315138;
        name = xpc_string_get_string_ptr(v7);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v13, 0xCu);
      }

      goto LABEL_15;
    }
    id v10 = SESDefaultLogObject();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = *(const char **)(a1 + 32);
      int v13 = 138412290;
      name = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Service not available: %@", (uint8_t *)&v13, 0xCu);
    }

    [WeakRetained setAvailable:0];
  }
LABEL_16:
}

void sub_100057F78(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10045CD80;
  qword_10045CD80 = v1;
}

void *sub_1000580C0(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_100059198([NearFieldManager alloc], v2);

  return v3;
}

void sub_10005812C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  self;
  uint64_t v12 = sub_100058290();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13[0] = 67240706;
    v13[1] = v8 != 0;
    __int16 v14 = 1026;
    BOOL v15 = v9 != 0;
    __int16 v16 = 2114;
    id v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Queuing SE request with transceiver %{public}d handoffToken %{public}d for %{public}@", (uint8_t *)v13, 0x18u);
  }

  if (v8)
  {
    sub_1000582E4((uint64_t)SecureElementManager, v8, v10, v11);
  }
  else if (v9)
  {
    sub_100058404((uint64_t)SecureElementManager, v10, v9, v11);
  }
  else
  {
    sub_100058540((uint64_t)SecureElementManager, v10, v11);
  }
}

id sub_100058290()
{
  if (qword_10045CD90 != -1) {
    dispatch_once(&qword_10045CD90, &stru_10040DCE8);
  }
  v0 = (void *)qword_10045CD98;

  return v0;
}

void sub_1000582E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  id v9 = +[SecureElementManager getInstance];
  id v10 = v9[2];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100058654;
  v15[3] = &unk_10040D360;
  id v16 = v6;
  id v17 = v9;
  id v18 = v7;
  id v19 = v8;
  id v11 = v7;
  id v12 = v8;
  int v13 = v9;
  id v14 = v6;
  dispatch_async(v10, v15);
}

void sub_100058404(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  self;
  id v9 = +[SecureElementManager getInstance];
  id v11 = v9;
  if (v9) {
    id Property = objc_getProperty(v9, v10, 16, 1);
  }
  else {
    id Property = 0;
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_100058810;
  id v17[3] = &unk_10040B988;
  id v18 = v11;
  id v19 = v6;
  id v20 = v7;
  id v21 = v8;
  id v13 = v8;
  id v14 = v7;
  id v15 = v6;
  id v16 = v11;
  dispatch_sync(Property, v17);
}

void sub_100058540(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = +[SecureElementManager getInstance];
  id v8 = v6;
  if (v6) {
    id Property = objc_getProperty(v6, v7, 16, 1);
  }
  else {
    id Property = 0;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100058AF0;
  block[3] = &unk_10040C560;
  id v15 = v4;
  id v16 = v5;
  id v14 = v8;
  id v10 = v4;
  id v11 = v5;
  id v12 = v8;
  dispatch_async(Property, block);
}

void sub_100058654(void *a1)
{
  id v3 = [SecureElement alloc];
  id v5 = (void *)a1[4];
  id v4 = (void *)a1[5];
  if (v4) {
    id Property = objc_getProperty(v4, v2, 16, 1);
  }
  else {
    id Property = 0;
  }
  id v7 = sub_100055CCC((id *)&v3->super.isa, v5, Property);
  if (v7)
  {
    id v8 = sub_100058290();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = a1[6];
      int v20 = 138412290;
      uint64_t v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Got SE (w/ transceiver) for %@", (uint8_t *)&v20, 0xCu);
    }

    uint64_t v10 = a1[7];
    id v12 = [SecureElement alloc];
    id v14 = (void *)a1[4];
    id v13 = (void *)a1[5];
    if (v13) {
      id v15 = objc_getProperty(v13, v11, 16, 1);
    }
    else {
      id v15 = 0;
    }
    id v16 = sub_100055CCC((id *)&v12->super.isa, v14, v15);
    (*(void (**)(uint64_t, id *, void))(v10 + 16))(v10, v16, 0);
  }
  else
  {
    uint64_t v17 = a1[7];
    id v18 = sub_100058290();
    id v19 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0, v19);
  }
}

void sub_100058810(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getNFManager];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1000588EC;
  v5[3] = &unk_10040DB48;
  id v8 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  [v2 getSecureElementWithReason:v3 handoffToken:v4 completion:v5];
}

void sub_1000588EC(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    uint64_t v19 = a1[6];
    uint64_t v10 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v10);
  }
  else
  {
    id v7 = [SecureElement alloc];
    id v8 = (void *)a1[4];
    if (v8) {
      id Property = objc_getProperty(v8, v6, 16, 1);
    }
    else {
      id Property = 0;
    }
    uint64_t v10 = sub_100055CCC((id *)&v7->super.isa, v5, Property);
    if (v10)
    {
      id v11 = sub_100058290();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = a1[5];
        int v23 = 138543362;
        uint64_t v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Got SE (w/ token) for %{public}@", (uint8_t *)&v23, 0xCu);
      }

      uint64_t v13 = a1[6];
      id v15 = [SecureElement alloc];
      id v16 = (void *)a1[4];
      if (v16) {
        id v17 = objc_getProperty(v16, v14, 16, 1);
      }
      else {
        id v17 = 0;
      }
      id v18 = sub_100055CCC((id *)&v15->super.isa, v5, v17);
      (*(void (**)(uint64_t, id *, void))(v13 + 16))(v13, v18, 0);
    }
    else
    {
      uint64_t v20 = a1[6];
      uint64_t v21 = sub_100058290();
      uint64_t v22 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v22);
    }
  }
}

void sub_100058AF0(id *a1)
{
  id v2 = [a1[4] getNFManager];

  if (v2)
  {
    uint64_t v3 = sub_100058290();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v4 = a1[5];
      *(_DWORD *)long long buf = 138543362;
      id v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Requesting SE for %{public}@", buf, 0xCu);
    }

    id v5 = [a1[4] getNFManager];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    unint64_t v10[2] = sub_100058CF4;
    v10[3] = &unk_10040DB48;
    id v6 = a1[5];
    id v13 = a1[6];
    id v11 = a1[4];
    id v12 = a1[5];
    [v5 getSecureElementWithReason:v6 callback:v10];
  }
  else
  {
    id v7 = (void (**)(id, void, void *))a1[6];
    sub_100058290();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v8 = SESCreateAndLogError();
    v7[2](v7, 0, v8);
  }
}

void sub_100058CF4(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!v5 || a3)
  {
    uint64_t v19 = a1[6];
    uint64_t v10 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0, v10);
  }
  else
  {
    id v7 = [SecureElement alloc];
    id v8 = (void *)a1[4];
    if (v8) {
      id Property = objc_getProperty(v8, v6, 16, 1);
    }
    else {
      id Property = 0;
    }
    uint64_t v10 = sub_100055CCC((id *)&v7->super.isa, v5, Property);
    if (v10)
    {
      id v11 = sub_100058290();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = a1[5];
        int v23 = 138543362;
        uint64_t v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Got SE for %{public}@", (uint8_t *)&v23, 0xCu);
      }

      uint64_t v13 = a1[6];
      id v15 = [SecureElement alloc];
      id v16 = (void *)a1[4];
      if (v16) {
        id v17 = objc_getProperty(v16, v14, 16, 1);
      }
      else {
        id v17 = 0;
      }
      id v18 = sub_100055CCC((id *)&v15->super.isa, v5, v17);
      (*(void (**)(uint64_t, id *, void))(v13 + 16))(v13, v18, 0);
    }
    else
    {
      uint64_t v20 = a1[6];
      uint64_t v21 = sub_100058290();
      uint64_t v22 = SESCreateAndLogError();
      (*(void (**)(uint64_t, void, void *))(v20 + 16))(v20, 0, v22);
    }
  }
}

void sub_100058EF8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = +[SecureElementManager getInstance];
  id v5 = v3;
  if (v3) {
    id Property = objc_getProperty(v3, v4, 16, 1);
  }
  else {
    id Property = 0;
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100058FE8;
  v9[3] = &unk_10040D1A0;
  id v10 = v5;
  id v11 = v2;
  id v7 = v2;
  id v8 = v5;
  dispatch_sync(Property, v9);
}

void sub_100058FE8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) getNFManager];
  [v2 setHandoffToken:*(void *)(a1 + 40)];
}

void *sub_10005903C(uint64_t a1, void *a2)
{
  self;
  uint64_t v3 = +[NFHardwareManager sharedHardwareManager];
  id v11 = 0;
  id v4 = [v3 expressPassConfigsWithError:&v11];
  id v5 = v11;
  if (v5)
  {
    if (a2)
    {
      id v6 = sub_100058290();
      SESCreateAndLogError();
      *a2 = (id)objc_claimAutoreleasedReturnValue();

      a2 = 0;
    }
  }
  else
  {
    id v7 = [v3 expressModeControlState];
    uint64_t v8 = 1;
    if (v7 != (id)1) {
      uint64_t v8 = 2;
    }
    if (v7 == (id)-1) {
      uint64_t v9 = 3;
    }
    else {
      uint64_t v9 = v8;
    }
    a2 = +[SESExpressConfiguration withState:v9 passConfigs:v4];
  }

  return a2;
}

void *sub_100059198(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v24.receiver = a1;
    v24.super_class = (Class)NearFieldManager;
    id v5 = [super init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 2, a2);
      a1[4] = 6;
      uint64_t v6 = objc_opt_new();
      id v7 = (void *)a1[1];
      a1[1] = v6;

      uint64_t v8 = [SESTimer alloc];
      uint64_t v9 = (void *)a1[2];
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_1000593C0;
      v22[3] = &unk_10040B880;
      id v10 = a1;
      id v23 = v10;
      id v11 = sub_100052804((NSObject **)v8, v9, v22);
      uint64_t v12 = (void *)v10[7];
      v10[7] = v11;

      objc_initWeak(&location, v10);
      id v16 = _NSConcreteStackBlock;
      uint64_t v17 = 3221225472;
      id v18 = sub_100059550;
      uint64_t v19 = &unk_10040C398;
      objc_copyWeak(&v20, &location);
      os_state_add_handler();
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      unint64_t v14[2] = sub_100059678;
      v14[3] = &unk_10040DB70;
      a1 = v10;
      id v15 = a1;
      +[NFHardwareManager sharedHardwareManager:v14];

      objc_destroyWeak(&v20);
      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_1000593A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

dispatch_queue_t *sub_1000593C0(uint64_t a1)
{
  id v2 = sub_100058290();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SE Session timer expired", v4, 2u);
  }

  return sub_100059434(*(dispatch_queue_t **)(a1 + 32));
}

dispatch_queue_t *sub_100059434(dispatch_queue_t *result)
{
  if (result)
  {
    uint64_t v1 = result;
    dispatch_assert_queue_V2(result[2]);
    id v2 = sub_100058290();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      dispatch_queue_t v3 = v1[4];
      dispatch_queue_t v4 = v1[5];
      *(_DWORD *)long long buf = 67240448;
      int v8 = (int)v3;
      __int16 v9 = 2048;
      dispatch_queue_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "State %{public}u closing session %p", buf, 0x12u);
    }

    v1[4] = (dispatch_queue_t)5;
    dispatch_queue_t v5 = v1[5];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10005B168;
    void v6[3] = &unk_10040B880;
    _DWORD v6[4] = v1;
    return (dispatch_queue_t *)[v5 endSessionWithCompletion:v6];
  }
  return result;
}

id *sub_100059550(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = sub_100059588((uint64_t)WeakRetained);

  return v2;
}

id *sub_100059588(uint64_t a1)
{
  uint64_t v1 = (id *)a1;
  if (a1)
  {
    v6[0] = @"state";
    id v2 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 32)];
    v6[1] = @"waiters";
    v7[0] = v2;
    dispatch_queue_t v3 = [v1[1] ses_map:&stru_10040DBB0];
    v7[1] = v3;
    dispatch_queue_t v4 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];

    uint64_t v1 = (id *)sub_1000190DC((uint64_t)"nearfieldmanager.state", (uint64_t)v4);
  }
  return v1;
}

void sub_100059678(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = v1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100059704;
  block[3] = &unk_10040B880;
  dispatch_queue_t v4 = v1;
  dispatch_async(v2, block);
}

void sub_100059704(uint64_t a1)
{
}

void sub_10005970C(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    id v2 = sub_100058290();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      unsigned int v3 = [*(id *)(a1 + 8) count];
      v5[0] = 67240192;
      v5[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Got hardware ready with %{public}u waiters", (uint8_t *)v5, 8u);
    }

    id v4 = [(id)a1 secureElementInfo];
    *(void *)(a1 + 32) = 1;
    if ([*(id *)(a1 + 8) count]) {
      sub_100059E08(a1);
    }
  }
}

id sub_1000597F0(id a1, SERequest *a2)
{
  return [(SERequest *)a2 reason];
}

void sub_100059E08(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    id v2 = [(id)a1 secureElementInfo];

    unsigned int v3 = sub_100058290();
    id v4 = v3;
    if (v2)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Requesting session from NF", buf, 2u);
      }

      dispatch_queue_t v5 = +[NFHardwareManager sharedHardwareManager];
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_10005AB28;
      id v17[3] = &unk_10040DC78;
      void v17[4] = a1;
      uint64_t v6 = [v5 startSecureElementManagerSession:v17];
      id v7 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v6;

      if (*(void *)(a1 + 80))
      {
        id v8 = [[*(id *)(a1 + 48) activateWithToken:];
        *(unsigned char *)(a1 + 88) = 1;
        __int16 v9 = *(void **)(a1 + 80);
        *(void *)(a1 + 80) = 0;
      }
      *(void *)(a1 + 32) = 2;
    }
    else
    {
      dispatch_queue_t v10 = SESCreateAndLogError();

      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v11 = *(id *)(a1 + 8);
      id v12 = [v11 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v14 = *(void *)v20;
        do
        {
          id v15 = 0;
          do
          {
            if (*(void *)v20 != v14) {
              objc_enumerationMutation(v11);
            }
            id v16 = [*(id *)(*((void *)&v19 + 1) + 8 * (void)v15) callback];
            ((void (**)(void, void, void *))v16)[2](v16, 0, v10);

            id v15 = (char *)v15 + 1;
          }
          while (v13 != v15);
          id v13 = [v11 countByEnumeratingWithState:&v19 objects:v23 count:16];
        }
        while (v13);
      }

      [*(id *)(a1 + 8) removeAllObjects];
      *(void *)(a1 + 32) = 1;
    }
  }
}

id *sub_10005A080(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = [NearFieldSessionShim alloc];
    id v3 = v1[5];
    id v4 = [v1[3] seid];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_10005AED0;
    void v6[3] = &unk_10040DCA0;
    _DWORD v6[4] = v1;
    uint64_t v1 = sub_10005A9B4((id *)&v2->super.isa, v3, v4, v6);
  }

  return v1;
}

id sub_10005A1E8(uint64_t a1)
{
  id v2 = *(id **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2[6])
  {
    id result = [v2[6] activateWithToken:v3];
    *(unsigned char *)(*(void *)(a1 + 32) + 88) = 1;
  }
  else
  {
    return [v2 setHandoffToken:v3];
  }
  return result;
}

void sub_10005A55C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10005A660;
  v11[3] = &unk_10040DC28;
  id v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(a1 + 48);
  void v11[4] = *(void *)(a1 + 40);
  id v12 = v8;
  id v13 = v5;
  id v14 = v6;
  id v16 = *(id *)(a1 + 64);
  id v15 = *(id *)(a1 + 56);
  id v9 = v6;
  id v10 = v5;
  [v7 invoke:v11];
}

void sub_10005A660(uint64_t a1)
{
  id v2 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005A744;
  block[3] = &unk_10040DC00;
  id v4 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  id v8 = *(id *)(a1 + 72);
  id v7 = *(id *)(a1 + 64);
  dispatch_async(v2, block);
}

void sub_10005A744(uint64_t a1)
{
  id v2 = sub_100058290();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    BOOL v4 = *(void *)(a1 + 40) != 0;
    uint64_t v5 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 138543874;
    uint64_t v17 = v3;
    __int16 v18 = 1026;
    BOOL v19 = v4;
    __int16 v20 = 2114;
    uint64_t v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Got tokened SE session for %{public}@ - success %{public}d error %{public}@", buf, 0x1Cu);
  }

  if (!*(void *)(a1 + 40) || *(void *)(a1 + 48))
  {
    uint64_t v12 = *(void *)(a1 + 64);
    id v11 = SESEnsureError();
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0, v11);
  }
  else
  {
    id v6 = [NearFieldSessionShim alloc];
    id v7 = *(void **)(a1 + 56);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _DWORD v13[2] = sub_10005A904;
    v13[3] = &unk_10040DBD8;
    id v8 = *(void **)(a1 + 40);
    id v14 = *(id *)(a1 + 32);
    id v15 = *(id *)(a1 + 40);
    id v9 = sub_10005A9B4((id *)&v6->super.isa, v8, v7, v13);
    (*(void (**)(void, id *, void, uint64_t))(*(void *)(a1 + 64) + 16))(*(void *)(a1 + 64), v9, 0, v10);

    id v11 = v14;
  }
}

id sub_10005A904(uint64_t a1)
{
  id v2 = sub_100058290();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Tokened session for %{public}@ finished, releasing session", (uint8_t *)&v5, 0xCu);
  }

  return [*(id *)(a1 + 40) endSession];
}

id *sub_10005A9B4(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)NearFieldSessionShim;
    id v11 = (id *)[super init];
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      uint64_t v12 = [v9 asHexString];
      id v13 = a1[2];
      a1[2] = (id)v12;

      id v14 = objc_retainBlock(v10);
      id v15 = a1[4];
      a1[4] = v14;

      *((unsigned char *)a1 + 24) = 0;
    }
  }

  return a1;
}

void sub_10005AA84(uint64_t a1)
{
  [*(id *)(a1 + 32) endSession];
  uint64_t v2 = *(void *)(a1 + 48);
  sub_100058290();
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void, void *))(v2 + 16))(v2, 0, v3);
}

void sub_10005AB28(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(NSObject **)(v7 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005ABF0;
  block[3] = &unk_10040D2C0;
  void block[4] = v7;
  id v12 = v5;
  id v13 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

void sub_10005ABF0(uint64_t a1)
{
}

void sub_10005AC00(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    id v8 = sub_100058290();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      unsigned int v9 = [*(id *)(a1 + 8) count];
      *(_DWORD *)long long buf = 138412802;
      id v32 = v6;
      __int16 v33 = 2112;
      id v34 = v7;
      __int16 v35 = 1026;
      unsigned int v36 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Received open CB from NF: %@ %@ %{public}u", buf, 0x1Cu);
    }

    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    id v10 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = 0;

    if (!v6 || v7)
    {
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v20 = *(id *)(a1 + 8);
      id v21 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v27;
        do
        {
          objc_super v24 = 0;
          do
          {
            if (*(void *)v27 != v23) {
              objc_enumerationMutation(v20);
            }
            [*(id *)(*((void *)&v26 + 1) + 8 * (void)v24) callback:v26];
            id v25 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue();
            ((void (**)(void, void, id))v25)[2](v25, 0, v7);

            objc_super v24 = (char *)v24 + 1;
          }
          while (v22 != v24);
          id v22 = [v20 countByEnumeratingWithState:&v26 objects:v30 count:16];
        }
        while (v22);
      }

      [*(id *)(a1 + 8) removeAllObjects];
      *(void *)(a1 + 32) = 1;
    }
    else
    {
      if (!*(void *)(a1 + 64))
      {
        uint64_t v11 = voucher_copy();
        id v12 = *(void **)(a1 + 64);
        *(void *)(a1 + 64) = v11;

        id v13 = sub_100058290();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          id v14 = *(void **)(a1 + 64);
          *(_DWORD *)long long buf = 138412290;
          id v32 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Got voucher (SE) %@", buf, 0xCu);
        }
      }
      id v15 = [*(id *)(a1 + 8) popFirst];
      *(void *)(a1 + 32) = 3;
      uint64_t v16 = [v15 reason];
      objc_super v17 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v16;

      objc_storeStrong((id *)(a1 + 40), a2);
      __int16 v18 = [v15 callback];
      BOOL v19 = sub_10005A080((id *)a1);
      ((void (**)(void, void *, void))v18)[2](v18, v19, 0);
    }
  }
}

void sub_10005AED0(uint64_t a1, char a2)
{
}

void sub_10005AED8(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 16);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10005AF58;
    v3[3] = &unk_10040DCC8;
    v3[4] = a1;
    char v4 = a2;
    dispatch_async(v2, v3);
  }
}

void sub_10005AF58(uint64_t a1)
{
  uint64_t v2 = sub_100058290();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 72);
    int v5 = *(unsigned __int8 *)(a1 + 40);
    int v6 = *(unsigned __int8 *)(v3 + 88);
    unsigned int v7 = [*(id *)(v3 + 8) count];
    int v16 = 138544130;
    uint64_t v17 = v4;
    __int16 v18 = 1026;
    int v19 = v5;
    __int16 v20 = 1026;
    int v21 = v6;
    __int16 v22 = 1026;
    unsigned int v23 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Shim dealloced for %{public}@, invalidated %{public}d tokened %{public}d waiters %{public}u", (uint8_t *)&v16, 0x1Eu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  unsigned int v9 = *(void **)(v8 + 72);
  *(void *)(v8 + 72) = 0;

  uint64_t v10 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40) || *(unsigned char *)(v10 + 88))
  {
    *(void *)(v10 + 32) = 4;
    sub_100059434(*(void *)(a1 + 32));
  }
  else
  {
    uint64_t v11 = [*(id *)(v10 + 8) popFirst];
    id v12 = sub_100058290();
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
    if (v11)
    {
      if (v13)
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Handing off to next queued waiter", (uint8_t *)&v16, 2u);
      }

      id v14 = [v11 callback];
      id v15 = sub_10005A080(*(id *)(a1 + 32));
      ((void (**)(void, void *, void))v14)[2](v14, v15, 0);
    }
    else
    {
      if (v13)
      {
        LOWORD(v16) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "No waiters, queueing close", (uint8_t *)&v16, 2u);
      }

      *(void *)(*(void *)(a1 + 32) + 32) = 4;
      sub_1000529D8(*(void *)(*(void *)(a1 + 32) + 56), 0.3);
    }
  }
}

void sub_10005B168(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005B1DC;
  block[3] = &unk_10040B880;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10005B1DC(uint64_t a1)
{
}

void sub_10005B1E4(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    uint64_t v2 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    *(unsigned char *)(a1 + 88) = 0;
    id v3 = [*(id *)(a1 + 8) count];
    uint64_t v4 = sub_100058290();
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
    if (v3)
    {
      if (v5)
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "session closed while we had a waiter, reopening", (uint8_t *)&v9, 2u);
      }

      sub_100059E08(a1);
    }
    else
    {
      if (v5)
      {
        LOWORD(v9) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "session closed kthxbai", (uint8_t *)&v9, 2u);
      }

      *(void *)(a1 + 32) = 1;
    }
    int v6 = sub_100058290();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      int v9 = 138412290;
      uint64_t v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Releasing voucher (SE) %@", (uint8_t *)&v9, 0xCu);
    }

    uint64_t v8 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
  }
}

void sub_10005B9AC(id a1)
{
  os_log_t v1 = os_log_create(SESLoggingSubsystem, "secureelement.manager");
  uint64_t v2 = (void *)qword_10045CD98;
  qword_10045CD98 = (uint64_t)v1;
}

id sub_10005B9F4(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  return sub_10005BA00(a1, a2, a3, a4, 0, a5);
}

id sub_10005BA00(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = v14;
  if (v11 && v12 && v13 && (v14 || a5 == 2))
  {
    id v59 = v14;
    __int16 v18 = [v12 hexStringAsData];
    int v19 = +[SESTLV TLVWithTag:79 value:v18];
    v64[0] = v19;
    __int16 v20 = +[SESTLV TLVWithTag:239 value:v13];
    v64[1] = v20;
    int v21 = +[NSArray arrayWithObjects:v64 count:2];

    __int16 v22 = +[SESTLV TLVWithTag:228 children:v21];
    unsigned int v23 = [v22 asData];

    objc_super v24 = +[NSMutableData dataWithBytes:&unk_100377730 length:4];
    [v24 appendU8:[v23 length]];
    [v24 appendData:v23];
    [v24 appendU8:0];
    if (SSEIsFeatureSupported(12))
    {
      if (a6)
      {
        id v25 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a6 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_12;
    }
    CFDataRef v63 = 0;
    if (SSEGetHostChallenge(&v63) || !v63)
    {
      if (!a6)
      {
LABEL_12:
        uint64_t v17 = 0;
        id v15 = v59;
LABEL_44:

        goto LABEL_45;
      }
      long long v28 = SESDefaultLogObject();
      SESCreateAndLogError();
      uint64_t v17 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
      id v15 = v59;
LABEL_43:

      goto LABEL_44;
    }
    CFDataRef v56 = v63;
    long long v26 = [@"A00000015143525300" hexStringAsData];
    uint64_t v27 = sub_100056638(v11, v26);

    id v57 = (id)v27;
    if (v27)
    {
      id v15 = v59;
      long long v28 = v56;
      if (!a6)
      {
        uint64_t v17 = 0;
LABEL_42:

        goto LABEL_43;
      }
      uint64_t v29 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v30 = (id)objc_claimAutoreleasedReturnValue();
      id v31 = (void *)v29;
      uint64_t v17 = 0;
      *a6 = v30;
LABEL_41:

      goto LABEL_42;
    }
    id v62 = 0;
    long long v28 = v56;
    uint64_t v32 = sub_100056348(v11, 128, 248, 0, 0, v56, 0, &v62);
    id v33 = v62;
    id v31 = (void *)v32;
    id v15 = v59;
    id v57 = v33;
    long long v54 = (id *)v31;
    if (!v33
      && v31
      && (sub_10005D558((id *)v31),
          id v34 = objc_claimAutoreleasedReturnValue(),
          id v52 = [v34 length],
          v34,
          id v31 = v54,
          long long v28 = v56,
          (unint64_t)v52 > 0xF))
    {
      __int16 v35 = sub_10005D558(v54);
      id v53 = [v35 subdataWithRange:0, 8];

      unsigned int v36 = sub_10005D558(v54);
      id v51 = [v36 subdataWithRange:NSMakeRange(8, 8)];

      sub_100056FD0(v11, v37);
      id v58 = (id)objc_claimAutoreleasedReturnValue();
      id v38 = [v58 seid];
      id v61 = 0;
      int v50 = sub_10005C068(a5, v59, v38, v56, v53, v51, v24, &v61);
      id v39 = v61;

      id v40 = v50;
      id v57 = v39;
      if (v39 || !v50)
      {
        if (a6)
        {
          id v44 = v39;
          id v40 = v50;
          uint64_t v17 = 0;
          id v57 = v44;
          *a6 = v44;
        }
        else
        {
          uint64_t v17 = 0;
        }
        long long v28 = v56;
      }
      else
      {
        id v60 = 0;
        sub_100056104(v11, v50, &v60);
        long long v41 = (id *)objc_claimAutoreleasedReturnValue();
        id v42 = v60;

        id v57 = v42;
        if (v42)
        {
          if (a6)
          {
            id v48 = SESDefaultLogObject();
            sub_10005D5A8((uint64_t)v41);
            id v49 = v41;
            long long v55 = sub_10005D558(v41);
            id v47 = [v55 asHexString];
            SESCreateAndLogError();
            *a6 = (id)objc_claimAutoreleasedReturnValue();

            uint64_t v17 = 0;
            id v43 = v49;
          }
          else
          {
            id v43 = v41;
            uint64_t v17 = 0;
          }
        }
        else
        {
          uint64_t v45 = sub_10005D558(v41);
          id v43 = v41;
          uint64_t v17 = (void *)v45;
          id v57 = 0;
        }
        long long v54 = v43;
        long long v28 = v56;
        id v40 = v50;
      }
    }
    else
    {
      if (!a6)
      {
        uint64_t v17 = 0;
        goto LABEL_41;
      }
      id v53 = SESDefaultLogObject();
      SESCreateAndLogError();
      uint64_t v17 = 0;
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }

    id v31 = v54;
    goto LABEL_41;
  }
  if (a6)
  {
    int v16 = SESDefaultLogObject();
    SESCreateAndLogError();
    *a6 = (id)objc_claimAutoreleasedReturnValue();
  }
  uint64_t v17 = 0;
LABEL_45:

  return v17;
}

__CFData *sub_10005C068(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  CFDataRef v15 = a2;
  CFDataRef v16 = a3;
  CFDataRef v17 = a4;
  CFDataRef v18 = a5;
  CFDataRef v19 = a6;
  CFDataRef v20 = a7;
  long long v26 = 0;
  if (a1 == 2)
  {
    int v21 = SSEAuthorizeAndSignAPDU(8, v15, -1, v16, v17, v18, v19, v20, &v26);
  }
  else if (a1 == 1)
  {
    int v21 = SSEAuthorizeAndSignAPDU(7, v15, -1, v16, v17, v18, v19, v20, &v26);
  }
  else
  {
    if (a1)
    {
      if (a8)
      {
        objc_super v24 = SESDefaultLogObject();
        SESCreateAndLogError();
        *a8 = (id)objc_claimAutoreleasedReturnValue();
      }
      goto LABEL_13;
    }
    int v21 = SSEAuthorizeAndSignECommerceBlob(v15, -1, v16, 0, v17, v18, v19, v20, &v26);
  }
  if (v21 || (__int16 v22 = v26) == 0)
  {
    if (a8)
    {
      unsigned int v23 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a8 = (id)objc_claimAutoreleasedReturnValue();
    }
LABEL_13:
    __int16 v22 = 0;
  }

  return v22;
}

void sub_10005C5A0(id a1)
{
  os_log_t v1 = objc_alloc_init(SECAngelProxy);
  uint64_t v2 = (void *)qword_10045CDA0;
  qword_10045CDA0 = (uint64_t)v1;
}

void sub_10005D12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D154(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  if (*(void *)a2 == 0xC00000000000001CLL)
  {
    *(_OWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 32) = *(_OWORD *)(a2 + 8);
    *a3 = 1;
  }
  return 0;
}

id sub_10005D448(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  if ((unint64_t)[v4 length] > 1)
  {
    uint64_t v6 = objc_opt_new();
    id v7 = v4;
    *(_WORD *)(v6 + 8) = bswap32(*(unsigned __int16 *)((char *)[v7 bytes]
                                                     + (void)[v7 length]
                                                     - 2)) >> 16;
    id v8 = v7;
    BOOL v5 = *(void **)(v6 + 16);
    *(void *)(v6 + 16) = v8;
    goto LABEL_5;
  }
  if (a3)
  {
    BOOL v5 = SESDefaultLogObject();
    SESCreateAndLogError();
    uint64_t v6 = 0;
    *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_5:

    goto LABEL_7;
  }
  uint64_t v6 = 0;
LABEL_7:

  return (id)v6;
}

id *sub_10005D558(id *a1)
{
  if (a1)
  {
    [a1[2] subdataWithRange:0, (char *)[a1[2] length] - 2];
    a1 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_10005D5A8(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 8);
  }
  return result;
}

id sub_10005D5C0(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v12 = 0;
    id v13 = &v12;
    uint64_t v14 = 0x3032000000;
    CFDataRef v15 = sub_10005D738;
    CFDataRef v16 = sub_10005D748;
    id v17 = 0;
    uint64_t v6 = 0;
    id v7 = &v6;
    uint64_t v8 = 0x3032000000;
    int v9 = sub_10005D738;
    uint64_t v10 = sub_10005D748;
    id v11 = 0;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    _DWORD v5[2] = sub_10005D750;
    v5[3] = &unk_10040C430;
    void v5[4] = &v6;
    void v5[5] = &v12;
    sub_10001A4A0(a1, v5);
    if (a2) {
      *a2 = (id) v13[5];
    }
    id v3 = (id)v7[5];
    _Block_object_dispose(&v6, 8);

    _Block_object_dispose(&v12, 8);
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

void sub_10005D714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D738(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005D748(uint64_t a1)
{
}

void sub_10005D750(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[AirInstanceEntity fetchRequest];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = [v3 executeFetchRequest:v4 error:&obj];

  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_10005D7F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v13 = 0;
    uint64_t v6 = sub_10005D5C0(a1, &v13);
    id v7 = v13;
    uint64_t v8 = v7;
    if (v7) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v6 == 0;
    }
    if (v9)
    {
      uint64_t v10 = 0;
      if (a3) {
        *a3 = v7;
      }
    }
    else
    {
      id v12 = v5;
      uint64_t v10 = Find();
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_10005D920(uint64_t a1, void *a2)
{
  id v3 = [a2 identifier];
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10005D964(id a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = SESDefaultLogObject();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Create AirInstanceEntityWithIdentifier : %@", (uint8_t *)&buf, 0xCu);
      }

      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v24 = 0x3032000000;
      id v25 = sub_10005D738;
      long long v26 = sub_10005D748;
      id v27 = 0;
      uint64_t v17 = 0;
      CFDataRef v18 = &v17;
      uint64_t v19 = 0x3032000000;
      CFDataRef v20 = sub_10005D738;
      int v21 = sub_10005D748;
      id v22 = 0;
      id obj = 0;
      uint64_t v8 = sub_10005D7F8((uint64_t)a1, v6, &obj);
      objc_storeStrong(&v27, obj);
      if (*(void *)(*((void *)&buf + 1) + 40))
      {
        if (a3) {
          goto LABEL_13;
        }
      }
      else
      {
        if (!v8)
        {
          v12[0] = _NSConcreteStackBlock;
          v12[1] = 3221225472;
          v12[2] = sub_10005DCC0;
          v12[3] = &unk_10040DD98;
          uint64_t v14 = &v17;
          id v13 = v6;
          p_long long buf = &buf;
          sub_10001A33C((uint64_t)a1, v12);
          if (a3) {
            *a3 = *(id *)(*((void *)&buf + 1) + 40);
          }
          a1 = (id)v18[5];
          uint64_t v10 = v13;
          goto LABEL_18;
        }
        if (a3)
        {
LABEL_13:
          uint64_t v10 = SESDefaultLogObject();
          SESCreateAndLogError();
          a1 = 0;
          *a3 = (id)objc_claimAutoreleasedReturnValue();
LABEL_18:

          goto LABEL_19;
        }
      }
      a1 = 0;
LABEL_19:

      _Block_object_dispose(&v17, 8);
      _Block_object_dispose(&buf, 8);

      goto LABEL_20;
    }
    if (a3)
    {
      BOOL v9 = SESDefaultLogObject();
      SESCreateAndLogError();
      *a3 = (id)objc_claimAutoreleasedReturnValue();
    }
    a1 = 0;
  }
LABEL_20:

  return a1;
}

void sub_10005DC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10005DCC0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100030AD8((uint64_t)v3);
  uint64_t v5 = +[NSEntityDescription insertNewObjectForEntityForName:@"AirInstanceEntity" inManagedObjectContext:v4];
  uint64_t v6 = *(void *)(a1[5] + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  [*(id *)(*(void *)(a1[5] + 8) + 40) setIdentifier:a1[4]];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setNumCertificateAuthorityIdentifier:0];
  [*(id *)(*(void *)(a1[5] + 8) + 40) setNumEndPointIdentifier:0];
  uint64_t v8 = *(void **)(*(void *)(a1[5] + 8) + 40);
  uint64_t v9 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v9 + 40);
  LOBYTE(v4) = [v8 validateForInsert:&obj];
  objc_storeStrong((id *)(v9 + 40), obj);
  if (v4)
  {
    uint64_t v10 = sub_100030AE4((uint64_t)v3);
    uint64_t v11 = *(void *)(a1[6] + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
  else
  {
    id v13 = SESDefaultLogObject();
    uint64_t v14 = SESCreateAndLogError();
    uint64_t v15 = *(void *)(a1[6] + 8);
    uint64_t v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    sub_100030B78(v3);
  }
}

id sub_10005DE24(void *a1, void *a2, void *a3)
{
  id v40 = a2;
  id v5 = a3;
  if (a1)
  {
    long long v41 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [&off_10042D9E8 count]);
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v6 = [&off_10042D9E8 countByEnumeratingWithState:&v65 objects:v76 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v66;
      uint64_t v8 = &off_10042D9E8;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v66 != v7) {
            objc_enumerationMutation(&off_10042D9E8);
          }
          uint64_t v10 = *(void **)(*((void *)&v65 + 1) + 8 * i);
          uint64_t v11 = objc_opt_new();
          id v12 = sub_100056638(v5, v11);

          id v13 = [v10 hexStringAsData];
          sub_100056638(v5, v13);
          id v14 = (id)objc_claimAutoreleasedReturnValue();

          if (v14)
          {
            if ([v14 code] != (id)11) {
              goto LABEL_44;
            }
          }
          else
          {
            [v41 addObject:v10];
          }
        }
        id v6 = [&off_10042D9E8 countByEnumeratingWithState:&v65 objects:v76 count:16];
      }
      while (v6);
    }
    uint64_t v59 = 0;
    id v60 = &v59;
    uint64_t v61 = 0x3032000000;
    id v62 = sub_10005E634;
    CFDataRef v63 = sub_10005E644;
    id v64 = 0;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    uint64_t v8 = v41;
    id v15 = [v8 countByEnumeratingWithState:&v55 objects:v75 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v56;
      while (2)
      {
        for (j = 0; j != v15; j = (char *)j + 1)
        {
          if (*(void *)v56 != v16) {
            objc_enumerationMutation(v8);
          }
          uint64_t v18 = *(void **)(*((void *)&v55 + 1) + 8 * (void)j);
          uint64_t v19 = (id *)(v60 + 5);
          id obj = (id)v60[5];
          CFDataRef v20 = sub_10005D7F8((uint64_t)a1, v18, &obj);
          objc_storeStrong(v19, obj);
          if (v60[5]) {
            goto LABEL_42;
          }
          if (!v20)
          {
            int v21 = SESDefaultLogObject();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v18;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Instance %@ not in DB, creating it", (uint8_t *)&buf, 0xCu);
            }

            id v22 = (id *)(v60 + 5);
            id v53 = (id)v60[5];
            CFDataRef v20 = sub_10005D964(a1, v18, &v53);
            objc_storeStrong(v22, v53);
            if (v60[5]) {
              goto LABEL_42;
            }
          }
          uint64_t v23 = sub_10005E64C((uint64_t)a1, v20, v5);
          uint64_t v24 = (void *)v60[5];
          v60[5] = v23;

          if (v60[5]) {
            goto LABEL_42;
          }
          uint64_t v25 = sub_10005ED98(a1, v20, v5);
          long long v26 = (void *)v60[5];
          v60[5] = v25;

          if (v60[5]
            || (sub_10005F394((uint64_t)a1, v20, v5),
                uint64_t v27 = objc_claimAutoreleasedReturnValue(),
                long long v28 = (void *)v60[5],
                v60[5] = v27,
                v28,
                v60[5]))
          {
LABEL_42:
            id v38 = SESDefaultLogObject();
            SESCreateAndLogError();
            id v14 = (id)objc_claimAutoreleasedReturnValue();

            id v32 = v8;
            goto LABEL_43;
          }
        }
        id v15 = [v8 countByEnumeratingWithState:&v55 objects:v75 count:16];
        if (v15) {
          continue;
        }
        break;
      }
    }

    uint64_t v29 = SESDefaultLogObject();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      unsigned int v30 = [v8 count];
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "Finished reconciliation of %u instances", (uint8_t *)&buf, 8u);
    }

    id v31 = (id *)(v60 + 5);
    id v52 = (id)v60[5];
    sub_10005D5C0((uint64_t)a1, &v52);
    id v32 = (id)objc_claimAutoreleasedReturnValue();
    objc_storeStrong(v31, v52);
    id v33 = (void *)v60[5];
    if (v33)
    {
      id v14 = v33;
    }
    else
    {
      *(void *)&long long buf = 0;
      *((void *)&buf + 1) = &buf;
      uint64_t v71 = 0x3032000000;
      id v72 = sub_10005E634;
      id v73 = sub_10005E644;
      id v74 = (id)objc_opt_new();
      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472;
      void v46[2] = sub_10005F840;
      id v46[3] = &unk_10040DDC0;
      id v32 = v32;
      id v47 = v32;
      id v48 = v8;
      id v49 = a1;
      p_long long buf = &buf;
      id v51 = &v59;
      sub_10001A33C((uint64_t)a1, v46);
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v34 = *(id *)(*((void *)&buf + 1) + 40);
      id v35 = [v34 countByEnumeratingWithState:&v42 objects:v69 count:16];
      if (v35)
      {
        uint64_t v36 = *(void *)v43;
        do
        {
          for (k = 0; k != v35; k = (char *)k + 1)
          {
            if (*(void *)v43 != v36) {
              objc_enumerationMutation(v34);
            }
            +[EndpointStore removeWithEndpoint:*(void *)(*((void *)&v42 + 1) + 8 * (void)k)];
          }
          id v35 = [v34 countByEnumeratingWithState:&v42 objects:v69 count:16];
        }
        while (v35);
      }

      id v14 = (id)v60[5];
      _Block_object_dispose(&buf, 8);
    }
LABEL_43:

    _Block_object_dispose(&v59, 8);
LABEL_44:
  }
  else
  {
    id v14 = 0;
  }

  return v14;
}

void sub_10005E5D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t sub_10005E634(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10005E644(uint64_t a1)
{
}

id sub_10005E64C(uint64_t a1, void *a2, void *a3)
{
  id v44 = a2;
  id v43 = a3;
  if (a1)
  {
    id v5 = sub_10001A584(a1);
    dispatch_assert_queue_V2(v5);

    uint64_t v60 = 0;
    uint64_t v61 = &v60;
    uint64_t v62 = 0x3032000000;
    CFDataRef v63 = sub_10005E634;
    id v64 = sub_10005E644;
    id v65 = 0;
    uint64_t v6 = sub_10005FC54(a1);
    uint64_t v7 = (void *)v61[5];
    v61[5] = v6;

    uint64_t v8 = [v44 identifier];
    uint64_t v9 = [v8 hexStringAsData];
    uint64_t v10 = (id *)(v61 + 5);
    id obj = (id)v61[5];
    long long v41 = sub_10004CAB4(v43, v9, &obj);
    objc_storeStrong(v10, obj);

    if (v61[5])
    {
      long long v42 = SESDefaultLogObject();
      uint64_t v11 = [v44 identifier];
      id v12 = SESCreateAndLogError();
    }
    else
    {
      long long v42 = Transform();
      id v13 = SESDefaultLogObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unsigned int v14 = [v42 count];
        id v15 = [v44 identifier];
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)long long v68 = v14;
        *(_WORD *)&v68[4] = 2112;
        *(void *)&v68[6] = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Found %u CAs in SE instance %@", buf, 0x12u);
      }
      uint64_t v11 = [v44 certificateAuthorities];
      if (v61[5])
      {
        uint64_t v16 = SESDefaultLogObject();
        id v37 = [v44 identifier];
        id v12 = SESCreateAndLogError();
      }
      else
      {
        long long v54 = _NSConcreteStackBlock;
        uint64_t v55 = 3221225472;
        long long v56 = sub_10005FE80;
        long long v57 = &unk_10040DE08;
        uint64_t v58 = a1;
        id v40 = TransformIf();
        uint64_t v17 = SESDefaultLogObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          unsigned int v18 = [v40 count];
          uint64_t v19 = [v44 identifier];
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)long long v68 = v18;
          *(_WORD *)&v68[4] = 2112;
          *(void *)&v68[6] = v19;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Found %u CAs in DB instance %@", buf, 0x12u);
        }
        id v20 = [v40 mutableCopy];
        [v20 removeObjectsInArray:v42];
        int v21 = SESDefaultLogObject();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          unsigned int v22 = [v20 count];
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)long long v68 = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Found %u CAs in the DB not present on SE", buf, 8u);
        }

        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472;
        v49[2] = sub_10005FED4;
        v49[3] = &unk_10040D218;
        id v39 = v20;
        id v50 = v39;
        id v38 = v11;
        id v51 = v38;
        uint64_t v52 = a1;
        id v53 = &v60;
        sub_10001A33C(a1, v49);
        id v23 = [v42 mutableCopy];
        [v23 removeObjectsInArray:v40];
        uint64_t v24 = SESDefaultLogObject();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          unsigned int v25 = [v23 count];
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)long long v68 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Found %u CAs in the SE not present on DB", buf, 8u);
        }

        long long v47 = 0u;
        long long v48 = 0u;
        long long v45 = 0u;
        long long v46 = 0u;
        id v26 = v23;
        id v27 = [v26 countByEnumeratingWithState:&v45 objects:v66 count:16];
        if (v27)
        {
          uint64_t v28 = *(void *)v46;
          do
          {
            for (uint64_t i = 0; i != v27; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v46 != v28) {
                objc_enumerationMutation(v26);
              }
              unsigned int v30 = *(void **)(*((void *)&v45 + 1) + 8 * i);
              id v31 = SESDefaultLogObject();
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 138412290;
                *(void *)long long v68 = v30;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Removing dangling SE CA %@", buf, 0xCu);
              }

              id v32 = [v44 identifier];
              id v33 = [v32 hexStringAsData];
              id v34 = sub_1000493BC(v43, v33, v30);

              if (v34)
              {
                id v35 = SESDefaultLogObject();
                if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 138412290;
                  *(void *)long long v68 = v30;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Failed to remove CA entity from SE for subjectCA %@", buf, 0xCu);
                }
              }
            }
            id v27 = [v26 countByEnumeratingWithState:&v45 objects:v66 count:16];
          }
          while (v27);
        }

        id v12 = 0;
        uint64_t v11 = v38;
      }
    }

    _Block_object_dispose(&v60, 8);
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

void sub_10005ED28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

id sub_10005ED98(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = sub_10001A584((uint64_t)a1);
    dispatch_assert_queue_V2(v7);

    uint64_t v52 = 0;
    id v53 = &v52;
    uint64_t v54 = 0x3032000000;
    uint64_t v55 = sub_10005E634;
    long long v56 = sub_10005E644;
    id v57 = 0;
    uint64_t v8 = [v5 identifier];
    uint64_t v9 = [v8 hexStringAsData];
    uint64_t v10 = (id *)(v53 + 5);
    id obj = (id)v53[5];
    uint64_t v11 = sub_10004CE88(v6, v9, &obj);
    objc_storeStrong(v10, obj);

    id v12 = (void *)v53[5];
    if (v12)
    {
      a1 = v12;
    }
    else
    {
      id v13 = SESDefaultLogObject();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        unsigned int v14 = [v11 count];
        id v15 = [v5 identifier];
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v14;
        LOWORD(v65) = 2112;
        *(void *)((char *)&v65 + 2) = v15;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Found %u endpoints in SE instance %@", buf, 0x12u);
      }
      *(void *)long long buf = 0;
      *(void *)&long long v65 = buf;
      *((void *)&v65 + 1) = 0x3032000000;
      long long v66 = sub_10005E634;
      long long v67 = sub_10005E644;
      uint64_t v16 = [v5 endPoints];
      id v68 = [v16 mutableCopy];

      uint64_t v17 = (void *)v53[5];
      if (v17)
      {
        a1 = v17;
      }
      else
      {
        long long v46 = _NSConcreteStackBlock;
        uint64_t v47 = 3221225472;
        long long v48 = sub_100060354;
        id v49 = &unk_10040C7B0;
        id v50 = a1;
        unsigned int v18 = TransformIf();
        uint64_t v19 = SESDefaultLogObject();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          unsigned int v20 = [v18 count];
          int v21 = [v5 identifier];
          *(_DWORD *)uint64_t v59 = 67109378;
          *(_DWORD *)&v59[4] = v20;
          LOWORD(v60) = 2112;
          *(void *)((char *)&v60 + 2) = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Found %u endpoints in DB instance %@", v59, 0x12u);
        }
        id v22 = [v18 mutableCopy];
        [v22 removeObjectsInArray:v11];
        id v23 = SESDefaultLogObject();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          unsigned int v24 = [v22 count];
          *(_DWORD *)uint64_t v59 = 67109120;
          *(_DWORD *)&v59[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Found %u EPs in the DB not present on SE", v59, 8u);
        }

        *(void *)uint64_t v59 = 0;
        *(void *)&long long v60 = v59;
        *((void *)&v60 + 1) = 0x3032000000;
        uint64_t v61 = sub_10005E634;
        uint64_t v62 = sub_10005E644;
        id v63 = (id)objc_opt_new();
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1000603A8;
        v36[3] = &unk_10040DE80;
        id v25 = v22;
        id v37 = v25;
        id v38 = a1;
        id v43 = buf;
        id v44 = v59;
        long long v45 = &v52;
        id v39 = v6;
        id v40 = v5;
        id v41 = v11;
        id v26 = v18;
        id v42 = v26;
        sub_10001A33C((uint64_t)a1, v36);
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        id v27 = *(id *)(v60 + 40);
        id v28 = [v27 countByEnumeratingWithState:&v32 objects:v58 count:16];
        if (v28)
        {
          uint64_t v29 = *(void *)v33;
          do
          {
            for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v33 != v29) {
                objc_enumerationMutation(v27);
              }
              +[EndpointStore removeWithEndpoint:](_TtC10seserviced13EndpointStore, "removeWithEndpoint:", *(void *)(*((void *)&v32 + 1) + 8 * i), (void)v32);
            }
            id v28 = [v27 countByEnumeratingWithState:&v32 objects:v58 count:16];
          }
          while (v28);
        }

        a1 = (id)v53[5];
        _Block_object_dispose(v59, 8);
      }
      _Block_object_dispose(buf, 8);
    }
    _Block_object_dispose(&v52, 8);
  }

  return a1;
}

void sub_10005F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose((const void *)(v37 - 176), 8);
  _Block_object_dispose(&a37, 8);
  _Unwind_Resume(a1);
}

id sub_10005F394(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v18 = a3;
  if (a1)
  {
    uint64_t v24 = a1;
    id v5 = sub_10001A584(a1);
    dispatch_assert_queue_V2(v5);

    uint64_t v41 = 0;
    id v42 = &v41;
    uint64_t v43 = 0x3032000000;
    id v44 = sub_10005E634;
    long long v45 = sub_10005E644;
    id v46 = 0;
    uint64_t v19 = [v20 certificateAuthorities];
    if (v42[5])
    {
      id v6 = SESDefaultLogObject();
      SESCreateAndLogError();
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      int v21 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", [v19 count]);
      long long v39 = 0u;
      long long v40 = 0u;
      long long v38 = 0u;
      long long v37 = 0u;
      id obj = v19;
      id v8 = [obj countByEnumeratingWithState:&v37 objects:v49 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v38;
        do
        {
          for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v38 != v9) {
              objc_enumerationMutation(obj);
            }
            uint64_t v11 = *(void **)(*((void *)&v37 + 1) + 8 * i);
            id v12 = [v11 endPoints];
            id v31 = _NSConcreteStackBlock;
            uint64_t v32 = 3221225472;
            long long v33 = sub_10006152C;
            long long v34 = &unk_10040DEA8;
            uint64_t v35 = v24;
            uint64_t v36 = &v41;
            int v13 = Any();
            unsigned int v14 = SESDefaultLogObject();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              *(void *)long long v48 = v11;
              *(_WORD *)&v48[8] = 1024;
              *(_DWORD *)&v48[10] = v13;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "EndpointEntity %@ has active endpoints? %d", buf, 0x12u);
            }

            if ((v13 & 1) == 0) {
              [v21 addObject:v11];
            }
          }
          id v8 = [obj countByEnumeratingWithState:&v37 objects:v49 count:16];
        }
        while (v8);
      }

      if ([v21 count])
      {
        id v15 = SESDefaultLogObject();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          unsigned int v16 = [v21 count];
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)long long v48 = v16;
          *(_WORD *)&v48[4] = 2112;
          *(void *)&v48[6] = obj;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Deleting %u endPointCAs with no active endpoints : %@", buf, 0x12u);
        }

        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472;
        unint64_t v25[2] = sub_100061640;
        v25[3] = &unk_10040DED0;
        id v22 = v21;
        id v26 = v22;
        uint64_t v27 = v24;
        unsigned int v30 = &v41;
        id v28 = v18;
        id v29 = v20;
        sub_10001A33C(v24, v25);
        id v7 = (id)v42[5];
      }
      else
      {
        id v7 = 0;
      }
    }

    _Block_object_dispose(&v41, 8);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_10005F7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
}

void sub_10005F840(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v52;
    uint64_t v37 = *(void *)v52;
    do
    {
      id v7 = 0;
      id v38 = v5;
      do
      {
        if (*(void *)v52 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v51 + 1) + 8 * (void)v7);
        uint64_t v9 = *(void **)(a1 + 40);
        uint64_t v10 = [v8 identifier];
        LOBYTE(v9) = [v9 containsObject:v10];

        if ((v9 & 1) == 0)
        {
          uint64_t v11 = SESDefaultLogObject();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            id v12 = [v8 identifier];
            *(_DWORD *)long long buf = 138412290;
            id v58 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Database contains PTA instance %@ but SE does not, cleaning it now!", buf, 0xCu);
          }
          uint64_t v41 = v7;

          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v40 = v8;
          int v13 = [v8 endPoints];
          id v14 = [v13 countByEnumeratingWithState:&v47 objects:v56 count:16];
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = *(void *)v48;
            do
            {
              for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v48 != v16) {
                  objc_enumerationMutation(v13);
                }
                id v18 = *(void **)(*((void *)&v47 + 1) + 8 * i);
                uint64_t v19 = *(void *)(a1 + 48);
                id v46 = 0;
                id v20 = sub_100040964(v19, v18, &v46);
                id v21 = v46;
                id v22 = sub_100030AD8((uint64_t)v3);
                [v22 deleteObject:v18];

                if (v20)
                {
                  id v23 = [v20 deleteEndPointLongTermPrivacyKey];
                  uint64_t v24 = [v20 bleUUID];

                  if (v24) {
                    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v20];
                  }
                }
                else
                {
                  id v25 = SESDefaultLogObject();
                  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 138412290;
                    id v58 = v21;
                    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Failed to retrieve endpoint %@", buf, 0xCu);
                  }
                }
              }
              id v15 = [v13 countByEnumeratingWithState:&v47 objects:v56 count:16];
            }
            while (v15);
          }

          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          id v26 = [v40 certificateAuthorities];
          id v27 = [v26 countByEnumeratingWithState:&v42 objects:v55 count:16];
          if (v27)
          {
            id v28 = v27;
            uint64_t v29 = *(void *)v43;
            do
            {
              for (j = 0; j != v28; j = (char *)j + 1)
              {
                if (*(void *)v43 != v29) {
                  objc_enumerationMutation(v26);
                }
                uint64_t v31 = *(void *)(*((void *)&v42 + 1) + 8 * (void)j);
                uint64_t v32 = sub_100030AD8((uint64_t)v3);
                [v32 deleteObject:v31];
              }
              id v28 = [v26 countByEnumeratingWithState:&v42 objects:v55 count:16];
            }
            while (v28);
          }

          long long v33 = sub_100030AD8((uint64_t)v3);
          [v33 deleteObject:v40];

          uint64_t v6 = v37;
          id v5 = v38;
          id v7 = v41;
        }
        id v7 = (char *)v7 + 1;
      }
      while (v7 != v5);
      id v5 = [obj countByEnumeratingWithState:&v51 objects:v59 count:16];
    }
    while (v5);
  }

  uint64_t v34 = sub_100030AE4((uint64_t)v3);
  uint64_t v35 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v36 = *(void **)(v35 + 40);
  *(void *)(v35 + 40) = v34;
}

id sub_10005FC54(uint64_t a1)
{
  id v1 = (id)a1;
  if (a1)
  {
    id v15 = 0;
    uint64_t v2 = sub_1000404C0(a1, &v15);
    id v3 = v15;
    id v4 = v3;
    if (!v2 || v3)
    {
      SESEnsureError();
      id v1 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      unint64_t v14[2] = sub_1000618DC;
      v14[3] = &unk_10040C788;
      void v14[4] = v1;
      id v5 = [v2 filter:v14];
      id v13 = 0;
      uint64_t v6 = sub_100046240((uint64_t)v1, &v13);
      id v4 = v13;
      if (v4)
      {
        SESEnsureError();
        id v1 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472;
        v12[2] = sub_10006192C;
        v12[3] = &unk_10040C670;
        void v12[4] = v1;
        id v7 = [v6 filter:v12];
        if ([v5 count] || objc_msgSend(v7, "count"))
        {
          v9[0] = _NSConcreteStackBlock;
          v9[1] = 3221225472;
          void v9[2] = sub_10006197C;
          v9[3] = &unk_10040C3C0;
          id v10 = v5;
          id v11 = v7;
          sub_10001A33C((uint64_t)v1, v9);
        }
        id v1 = 0;
      }
    }
  }

  return v1;
}

id sub_10005FE70(id a1, NSData *a2)
{
  return +[NSString stringWithAsciiData:a2];
}

id sub_10005FE80(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_10004663C(*(void *)(a1 + 32), a2, 0);
  id v3 = [v2 subjectIdentifier];

  return v3;
}

void sub_10005FED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = *(id *)(a1 + 32);
  id v24 = [obj countByEnumeratingWithState:&v42 objects:v51 count:16];
  if (v24)
  {
    uint64_t v23 = *(void *)v43;
    do
    {
      for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v42 + 1) + 8 * i);
        uint64_t v36 = 0;
        uint64_t v37 = &v36;
        uint64_t v38 = 0x3032000000;
        long long v39 = sub_10005E634;
        long long v40 = sub_10005E644;
        id v41 = 0;
        uint64_t v29 = _NSConcreteStackBlock;
        uint64_t v30 = 3221225472;
        uint64_t v31 = sub_1000602CC;
        uint64_t v32 = &unk_10040DE30;
        uint64_t v6 = *(void *)(a1 + 48);
        uint64_t v34 = v5;
        uint64_t v35 = &v36;
        uint64_t v33 = v6;
        id v7 = Find();
        if (v7)
        {
          id v8 = SESDefaultLogObject();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = [v7 endPoints];
            unsigned int v10 = [v9 count];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v48 = v5;
            __int16 v49 = 1024;
            LODWORD(v50) = v10;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Removing dangling DB CA %@ with %u endpoints ", buf, 0x12u);
          }
          long long v27 = 0u;
          long long v28 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          id v11 = [v7 endPoints];
          id v12 = [v11 countByEnumeratingWithState:&v25 objects:v46 count:16];
          if (v12)
          {
            uint64_t v13 = *(void *)v26;
            do
            {
              for (j = 0; j != v12; j = (char *)j + 1)
              {
                if (*(void *)v26 != v13) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v15 = *(void *)(*((void *)&v25 + 1) + 8 * (void)j);
                uint64_t v16 = sub_100030AD8((uint64_t)v3);
                [v16 deleteObject:v15];
              }
              id v12 = [v11 countByEnumeratingWithState:&v25 objects:v46 count:16];
            }
            while (v12);
          }

          uint64_t v17 = sub_100030AD8((uint64_t)v3);
          [v17 deleteObject:v7];
        }
        else
        {
          uint64_t v17 = SESDefaultLogObject();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v18 = v37[5];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v48 = v5;
            __int16 v49 = 2112;
            uint64_t v50 = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Couldn't get entity for subjectIdentifier %@ : %@", buf, 0x16u);
          }
        }

        _Block_object_dispose(&v36, 8);
      }
      id v24 = [obj countByEnumeratingWithState:&v42 objects:v51 count:16];
    }
    while (v24);
  }

  uint64_t v19 = sub_100030AE4((uint64_t)v3);
  uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
  id v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;
}

void sub_100060294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

id sub_1000602CC(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = sub_10004663C(v3, a2, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = [v5 subjectIdentifier];
  id v7 = [v6 isEqualToString:a1[5]];

  return v7;
}

id sub_100060354(uint64_t a1, void *a2)
{
  uint64_t v2 = sub_100040964(*(void *)(a1 + 32), a2, 0);
  uint64_t v3 = [v2 publicKeyIdentifier];

  return v3;
}

void sub_1000603A8(uint64_t a1, void *a2)
{
  BOOL v132 = a2;
  long long v153 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  uint64_t v136 = a1;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v153 objects:v167 count:16];
  if (v3)
  {
    uint64_t v133 = *(void *)v154;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v154 != v133) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v153 + 1) + 8 * i);
        *(void *)v163 = 0;
        *(void *)&v163[8] = v163;
        *(void *)&v163[16] = 0x3032000000;
        v164 = sub_10005E634;
        v165 = sub_10005E644;
        id v166 = 0;
        v152[1] = _NSConcreteStackBlock;
        v152[2] = (id)3221225472;
        v152[3] = sub_1000614A4;
        v152[4] = &unk_10040DE58;
        uint64_t v6 = *(void **)(v136 + 40);
        v152[6] = v5;
        v152[7] = v163;
        v152[5] = v6;
        id v7 = Find();
        if (v7)
        {
          uint64_t v8 = *(void *)(v136 + 40);
          uint64_t v9 = (id *)(*(void *)&v163[8] + 40);
          v152[0] = *(id *)(*(void *)&v163[8] + 40);
          unsigned int v10 = sub_100040964(v8, v7, v152);
          objc_storeStrong(v9, v152[0]);
          id v11 = SESDefaultLogObject();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            id v12 = [v5 asHexString];
            *(_DWORD *)long long buf = 138412290;
            v160 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Removing dangling entity %@", buf, 0xCu);
          }
          uint64_t v13 = sub_100030AD8((uint64_t)v132);
          [v13 deleteObject:v7];

          [*(id *)(*(void *)(*(void *)(v136 + 80) + 8) + 40) removeObject:v7];
          if (v10)
          {
            id v14 = [v10 deleteEndPointLongTermPrivacyKey];
            uint64_t v15 = [v10 bleUUID];

            if (v15) {
              [*(id *)(*(void *)(*(void *)(v136 + 88) + 8) + 40) addObject:v10];
            }
          }
          else
          {
            uint64_t v18 = SESDefaultLogObject();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              uint64_t v19 = *(void **)(*(void *)&v163[8] + 40);
              *(_DWORD *)long long buf = 138412290;
              v160 = v19;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to retrieve endpoint %@", buf, 0xCu);
            }
          }
        }
        else
        {
          unsigned int v10 = SESDefaultLogObject();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = [v5 asHexString];
            uint64_t v17 = *(void *)(*(void *)&v163[8] + 40);
            *(_DWORD *)long long buf = 138412546;
            v160 = v16;
            __int16 v161 = 2112;
            uint64_t v162 = v17;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Couldn't get entity for identifier %@ : %@", buf, 0x16u);
          }
        }

        _Block_object_dispose(v163, 8);
      }
      id v3 = [obj countByEnumeratingWithState:&v153 objects:v167 count:16];
    }
    while (v3);
  }

  long long v150 = 0u;
  long long v151 = 0u;
  long long v148 = 0u;
  long long v149 = 0u;
  id v20 = *(id *)(*(void *)(*(void *)(v136 + 80) + 8) + 40);
  id v134 = [v20 countByEnumeratingWithState:&v148 objects:v158 count:16];
  if (v134)
  {
    id obja = *(id *)v149;
    do
    {
      for (j = 0; j != v134; j = (char *)j + 1)
      {
        if (*(id *)v149 != obja) {
          objc_enumerationMutation(v20);
        }
        id v22 = *(void **)(*((void *)&v148 + 1) + 8 * (void)j);
        uint64_t v23 = *(void *)(v136 + 40);
        uint64_t v24 = *(void *)(*(void *)(v136 + 96) + 8);
        id v147 = *(id *)(v24 + 40);
        long long v25 = sub_100040964(v23, v22, &v147);
        objc_storeStrong((id *)(v24 + 40), v147);
        if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40))
        {
LABEL_76:
          id v111 = SESDefaultLogObject();
          uint64_t v112 = SESCreateAndLogError();
          uint64_t v113 = *(void *)(*(void *)(v136 + 96) + 8);
          id v114 = *(void **)(v113 + 40);
          *(void *)(v113 + 40) = v112;

          sub_100030B78(v132);
          goto LABEL_81;
        }
        long long v26 = [v25 revocationAttestation];

        if (!v26)
        {
          long long v27 = *(void **)(v136 + 48);
          long long v28 = [*(id *)(v136 + 56) identifier];
          uint64_t v29 = [v28 hexStringAsData];
          uint64_t v30 = [v25 publicKeyIdentifier];
          uint64_t v31 = *(void *)(*(void *)(v136 + 96) + 8);
          id v146 = *(id *)(v31 + 40);
          BOOL v32 = sub_10004CE94(v27, v29, v30, &v146);
          objc_storeStrong((id *)(v31 + 40), v146);

          if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40)) {
            goto LABEL_76;
          }
          if (!v32)
          {
            uint64_t v33 = SESDefaultLogObject();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              uint64_t v34 = [v25 publicKeyIdentifier];
              uint64_t v35 = [v34 asHexString];
              *(_DWORD *)v163 = 138412290;
              *(void *)&v163[4] = v35;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "Revoked endpoint %@ is not up-to-date in the DB", v163, 0xCu);
            }
            if ([v25 endPointType] == (id)3 || objc_msgSend(v25, "endPointType") == (id)4)
            {
              uint64_t v36 = SESDefaultLogObject();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
              {
                uint64_t v37 = [v25 publicKeyIdentifier];
                uint64_t v38 = [v37 asHexString];
                *(_DWORD *)v163 = 138412290;
                *(void *)&v163[4] = v38;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Deleting the revoked HOME or Lyon endpoint %@ from the DB and the SE", v163, 0xCu);
              }
              long long v39 = sub_100030AD8((uint64_t)v132);
              [v39 deleteObject:v22];

              long long v40 = *(void **)(v136 + 48);
              id v41 = [*(id *)(v136 + 56) identifier];
              long long v42 = [v41 hexStringAsData];
              long long v43 = [v25 publicKeyIdentifier];
              uint64_t v44 = sub_100048B74(v40, v42, v43);
              uint64_t v45 = *(void *)(*(void *)(v136 + 96) + 8);
              id v46 = *(void **)(v45 + 40);
              *(void *)(v45 + 40) = v44;

              if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40))
              {
                long long v47 = SESDefaultLogObject();
                if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v48 = [v25 publicKeyIdentifier];
                  __int16 v49 = [v48 asHexString];
                  uint64_t v50 = *(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40);
                  *(_DWORD *)v163 = 138412546;
                  *(void *)&v163[4] = v49;
                  *(_WORD *)&v163[12] = 2112;
                  *(void *)&v163[14] = v50;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to delete endpoint %@ %@", v163, 0x16u);
                }
              }
              id v51 = [v25 deleteEndPointLongTermPrivacyKey];
              long long v52 = [v25 bleUUID];

              if (v52) {
                [*(id *)(*(void *)(*(void *)(v136 + 88) + 8) + 40) addObject:v25];
              }
            }
            else
            {
              long long v53 = *(void **)(v136 + 48);
              long long v128 = [*(id *)(v136 + 56) identifier];
              long long v54 = [v128 hexStringAsData];
              uint64_t v55 = [v25 publicKeyIdentifier];
              long long v56 = +[NSData randomData:16];
              uint64_t v57 = *(void *)(*(void *)(v136 + 96) + 8);
              id v145 = *(id *)(v57 + 40);
              id v58 = sub_10004C654(v53, v54, v55, v56, 0, &v145);
              objc_storeStrong((id *)(v57 + 40), v145);

              if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40))
              {
                long long v123 = SESDefaultLogObject();
                uint64_t v124 = SESCreateAndLogError();
                uint64_t v125 = *(void *)(*(void *)(v136 + 96) + 8);
                id v126 = *(void **)(v125 + 40);
                *(void *)(v125 + 40) = v124;

LABEL_83:
                sub_100030B78(v132);

                goto LABEL_81;
              }
              [v25 setRevocationAttestation:v58];
              uint64_t v59 = [v132 stageEndPointEntityUpdates:v22 fromEndPoint:v25];
              uint64_t v60 = *(void *)(*(void *)(v136 + 96) + 8);
              uint64_t v61 = *(void **)(v60 + 40);
              *(void *)(v60 + 40) = v59;

              if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40)) {
                goto LABEL_83;
              }
              uint64_t v62 = [v25 bleUUID];

              if (v62) {
                [*(id *)(*(void *)(*(void *)(v136 + 88) + 8) + 40) addObject:v25];
              }
            }
          }
        }
      }
      id v134 = [v20 countByEnumeratingWithState:&v148 objects:v158 count:16];
    }
    while (v134);
  }

  id v63 = [*(id *)(v136 + 64) mutableCopy];
  [v63 removeObjectsInArray:*(void *)(v136 + 72)];
  id v64 = SESDefaultLogObject();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
  {
    unsigned int v65 = [v63 count];
    *(_DWORD *)v163 = 67109120;
    *(_DWORD *)&v163[4] = v65;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "Found %u EPs on the SE not present in DB", v163, 8u);
  }

  long long v143 = 0u;
  long long v144 = 0u;
  long long v141 = 0u;
  long long v142 = 0u;
  id v20 = v63;
  id v135 = [v20 countByEnumeratingWithState:&v141 objects:v157 count:16];
  if (!v135) {
    goto LABEL_75;
  }
  id objb = *(id *)v142;
  while (2)
  {
    for (k = 0; k != v135; k = (char *)k + 1)
    {
      if (*(id *)v142 != objb) {
        objc_enumerationMutation(v20);
      }
      long long v67 = *(void **)(*((void *)&v141 + 1) + 8 * (void)k);
      id v68 = [*(id *)(v136 + 56) identifier:v127];
      if ([@"A00000085801010100000001" isEqualToString:v68])
      {

LABEL_57:
        uint64_t v71 = SESDefaultLogObject();
        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
        {
          id v72 = [v67 asHexString];
          *(_DWORD *)v163 = 138412290;
          *(void *)&v163[4] = v72;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "Deleting the revoked HOME/LYON endpoint %@ from the SE", v163, 0xCu);
        }
        id v73 = *(void **)(v136 + 48);
        id v74 = [*(id *)(v136 + 56) identifier];
        id v75 = [v74 hexStringAsData];
        uint64_t v76 = sub_100048B74(v73, v75, v67);
        uint64_t v77 = *(void *)(*(void *)(v136 + 96) + 8);
        long long v78 = *(void **)(v77 + 40);
        *(void *)(v77 + 40) = v76;

        if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40))
        {
          long long v79 = SESDefaultLogObject();
          if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
          {
            long long v80 = [v67 asHexString];
            uint64_t v81 = *(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40);
            *(_DWORD *)v163 = 138412546;
            *(void *)&v163[4] = v80;
            *(_WORD *)&v163[12] = 2112;
            *(void *)&v163[14] = v81;
            _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "Failed to delete endpoint %@ %@", v163, 0x16u);
          }
        }
        continue;
      }
      id v69 = [*(id *)(v136 + 56) identifier];
      unsigned int v70 = [@"A000000909ACCE5501" isEqualToString:v69];

      if (v70) {
        goto LABEL_57;
      }
      long long v82 = *(void **)(v136 + 48);
      long long v83 = [*(id *)(v136 + 56) identifier];
      long long v84 = [v83 hexStringAsData];
      id v85 = +[NSData randomData:16];
      uint64_t v86 = *(void *)(*(void *)(v136 + 96) + 8);
      id v140 = *(id *)(v86 + 40);
      __int16 v87 = sub_10004C654(v82, v84, v67, v85, 0, &v140);
      objc_storeStrong((id *)(v86 + 40), v140);

      if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40))
      {
        id v115 = SESDefaultLogObject();
        uint64_t v116 = SESCreateAndLogError();
        uint64_t v117 = *(void *)(*(void *)(v136 + 96) + 8);
        id v118 = *(void **)(v117 + 40);
        *(void *)(v117 + 40) = v116;

        sub_100030B78(v132);
LABEL_79:

LABEL_80:
        long long v25 = v20;
        goto LABEL_81;
      }
      BOOL v88 = [*(id *)(v136 + 56) identifier];
      char v89 = [v88 hexStringAsData];
      uint64_t v90 = *(void *)(*(void *)(v136 + 96) + 8);
      id v139 = *(id *)(v90 + 40);
      id v91 = +[SEEndPoint revokedEndpointWithPublicKeyIdentifier:v67 appletIdentifier:v89 revocationAttestation:v87 error:&v139];
      objc_storeStrong((id *)(v90 + 40), v139);

      uint64_t v92 = *(void *)(*(void *)(v136 + 96) + 8);
      uint64_t v94 = *(void *)(v92 + 40);
      id v93 = (id *)(v92 + 40);
      if (v94)
      {
        id v119 = SESDefaultLogObject();
        uint64_t v120 = SESCreateAndLogError();
        uint64_t v121 = *(void *)(*(void *)(v136 + 96) + 8);
        long long v122 = *(void **)(v121 + 40);
        *(void *)(v121 + 40) = v120;

        sub_100030B78(v132);
        goto LABEL_79;
      }
      id v138 = 0;
      uint64_t v95 = [v91 encodeWithError:&v138];
      objc_storeStrong(v93, v138);
      if (*(void *)(*(void *)(*(void *)(v136 + 96) + 8) + 40) || !v95)
      {
        uint64_t v101 = SESDefaultLogObject();
        long long v127 = v67;
        uint64_t v102 = SESCreateAndLogError();
        uint64_t v103 = *(void *)(*(void *)(v136 + 96) + 8);
        id v104 = *(void **)(v103 + 40);
        *(void *)(v103 + 40) = v102;

        sub_100030B78(v132);
        int v100 = 1;
      }
      else
      {
        uint64_t v96 = sub_100030AD8((uint64_t)v132);
        uint64_t v97 = +[NSEntityDescription insertNewObjectForEntityForName:@"SEEndPointEntity" inManagedObjectContext:v96];

        [v97 setInstance:*(void *)(v136 + 56)];
        [v97 setClientName:@"com.apple.seserviced"];
        [v97 setEndPointData:v95];
        uint64_t v98 = *(void *)(*(void *)(v136 + 96) + 8);
        id v137 = *(id *)(v98 + 40);
        unsigned __int8 v99 = [v97 validateForInsert:&v137];
        objc_storeStrong((id *)(v98 + 40), v137);
        if (v99)
        {
          int v100 = 0;
        }
        else
        {
          uint64_t v105 = SESDefaultLogObject();
          long long v127 = v67;
          uint64_t v106 = SESCreateAndLogError();
          uint64_t v107 = *(void *)(*(void *)(v136 + 96) + 8);
          id v108 = *(void **)(v107 + 40);
          *(void *)(v107 + 40) = v106;

          sub_100030B78(v132);
          int v100 = 1;
        }
      }
      if (v100) {
        goto LABEL_80;
      }
    }
    id v135 = [v20 countByEnumeratingWithState:&v141 objects:v157 count:16];
    if (v135) {
      continue;
    }
    break;
  }
LABEL_75:

  uint64_t v109 = sub_100030AE4((uint64_t)v132);
  uint64_t v110 = *(void *)(*(void *)(v136 + 96) + 8);
  long long v25 = *(void **)(v110 + 40);
  *(void *)(v110 + 40) = v109;
LABEL_81:
}

void sub_10006146C(_Unwind_Exception *a1)
{
}

id sub_1000614A4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = *(void *)(a1[6] + 8);
  id obj = *(id *)(v4 + 40);
  uint64_t v5 = sub_100040964(v3, a2, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  uint64_t v6 = [v5 publicKeyIdentifier];
  id v7 = [v6 isEqualToData:a1[5]];

  return v7;
}

BOOL sub_10006152C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = sub_100040964(v4, v3, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    id v7 = SESDefaultLogObject();
    uint64_t v13 = [v3 identifier];
    uint64_t v8 = SESCreateAndLogError();
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    unsigned int v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    BOOL v11 = 1;
  }
  else
  {
    id v7 = [v6 revocationAttestation];
    BOOL v11 = v7 == 0;
  }

  return v11;
}

void sub_100061640(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v32;
    do
    {
      id v7 = 0;
      id v28 = v5;
      do
      {
        if (*(void *)v32 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v7);
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8);
        id v30 = *(id *)(v10 + 40);
        BOOL v11 = sub_10004663C(v9, v8, &v30);
        objc_storeStrong((id *)(v10 + 40), v30);
        if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) {
          goto LABEL_8;
        }
        id v12 = *(void **)(a1 + 48);
        [*(id *)(a1 + 56) identifier];
        uint64_t v13 = v6;
        v15 = id v14 = v3;
        uint64_t v16 = [v15 hexStringAsData];
        uint64_t v17 = [v11 subjectIdentifier];
        uint64_t v18 = sub_1000493BC(v12, v16, v17);
        uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8);
        id v20 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = v18;

        id v3 = v14;
        uint64_t v6 = v13;
        id v5 = v28;
        if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40))
        {
LABEL_8:
          id v21 = SESDefaultLogObject();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            uint64_t v22 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
            uint64_t v23 = [v11 subjectIdentifier];
            *(_DWORD *)long long buf = 138412546;
            uint64_t v36 = v22;
            __int16 v37 = 2112;
            uint64_t v38 = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Error %@ while removing CA %@ from SE", buf, 0x16u);
          }
        }
        uint64_t v24 = sub_100030AD8((uint64_t)v3);
        [v24 deleteObject:v8];

        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [obj countByEnumeratingWithState:&v31 objects:v39 count:16];
    }
    while (v5);
  }

  uint64_t v25 = sub_100030AE4((uint64_t)v3);
  uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
  long long v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v25;
}

uint64_t sub_1000618DC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v7 = 0;
  id v3 = sub_100040964(v2, a2, &v7);
  if (v3) {
    BOOL v4 = v7 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

uint64_t sub_10006192C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v7 = 0;
  id v3 = sub_10004663C(v2, a2, &v7);
  if (v3) {
    BOOL v4 = v7 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  uint64_t v5 = !v4;

  return v5;
}

void sub_10006197C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v23 = a1;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v28 objects:v35 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v29;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        uint64_t v10 = SESDefaultLogObject();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          BOOL v11 = [v9 identifier];
          *(_DWORD *)long long buf = 138412290;
          long long v34 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Deleting unparsable EP Entity %@", buf, 0xCu);
        }
        id v12 = sub_100030AD8((uint64_t)v3);
        [v12 deleteObject:v9];
      }
      id v6 = [v4 countByEnumeratingWithState:&v28 objects:v35 count:16];
    }
    while (v6);
  }

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v13 = *(id *)(v23 + 40);
  id v14 = [v13 countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v25;
    do
    {
      for (j = 0; j != v15; j = (char *)j + 1)
      {
        if (*(void *)v25 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void **)(*((void *)&v24 + 1) + 8 * (void)j);
        uint64_t v19 = SESDefaultLogObject();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          id v20 = [v18 identifier];
          *(_DWORD *)long long buf = 138412290;
          long long v34 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Deleting unparsable CA Entity %@", buf, 0xCu);
        }
        id v21 = sub_100030AD8((uint64_t)v3);
        [v21 deleteObject:v18];
      }
      id v15 = [v13 countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v15);
  }

  id v22 = sub_100030AE4((uint64_t)v3);
}

uint64_t sub_1000620A4(uint64_t a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESACWGSession endSession %@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) endSessionInternal:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100062240(uint64_t a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v31 = v3;
    __int16 v32 = 2112;
    uint64_t v33 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESACWGSession %@ setActiveKey %@", buf, 0x16u);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = SESDefaultLogObject();
    BOOL v11 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v11);

    return;
  }
  if (!*(void *)(a1 + 40)) {
    goto LABEL_15;
  }
  int v5 = [*(id *)(*(void *)(a1 + 32) + 64) publicKeyIdentifier];
  uint64_t v6 = [*(id *)(a1 + 40) hexStringAsData];
  unsigned int v7 = [v5 isEqualToData:v6];

  if (v7)
  {
    uint64_t v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Key already active", buf, 2u);
    }

    goto LABEL_16;
  }
  id v12 = *(void **)(a1 + 40);
  if (!v12)
  {
LABEL_15:
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void **)(v22 + 64);
    *(void *)(v22 + 64) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
LABEL_16:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    return;
  }
  id v13 = [v12 hexStringAsData];
  id v14 = +[LyonExternal shared];
  id v15 = [v14 getAllEndpoints];

  uint64_t v16 = [v15 allObjects];
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_1000625FC;
  v28[3] = &unk_10040DEF8;
  id v17 = v13;
  id v29 = v17;
  uint64_t v18 = [v16 find:v28];

  uint64_t v19 = (id *)(*(void *)(a1 + 32) + 64);
  if (v18)
  {
    objc_storeStrong(v19, v18);
    id v20 = SESDefaultLogObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v31 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Active key set to %@", buf, 0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v24 = *v19;
    id *v19 = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
    uint64_t v25 = *(void *)(a1 + 48);
    long long v26 = SESDefaultLogObject();
    long long v27 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v25 + 16))(v25, v27);
  }
}

id sub_1000625FC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [a2 publicKeyIdentifier];
  id v4 = [v2 isEqualToData:v3];

  return v4;
}

void sub_10006271C(uint64_t a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESACWGSession %@ setSecureElementToken", (uint8_t *)&v7, 0xCu);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    if ([*(id *)(a1 + 32) isWaitingForSecureElement])
    {
      [*(id *)(a1 + 32) pushSecureElementToken:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) setIsWaitingForSecureElement:0];
    }
    else
    {
      [*(id *)(a1 + 32) setSeToken:*(void *)(a1 + 40)];
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    int v5 = SESDefaultLogObject();
    uint64_t v6 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v6);
  }
}

void sub_100062930(uint64_t a1)
{
  uint64_t v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 1024;
    int v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESACWGSession %@ preArmActiveKey %d", buf, 0x12u);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) != 0
    && (uint64_t v5 = *(void *)(a1 + 32), *(void *)(v5 + 64)))
  {
    *(unsigned char *)(v5 + 56) = *(unsigned char *)(a1 + 48);
    uint64_t v6 = +[LyonExternal shared];
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(unsigned __int8 *)(v7 + 56);
    uint64_t v9 = *(void *)(v7 + 64);
    id v13 = 0;
    [v6 updatePreArmState:v8 for:v9 error:&v13];
    id v10 = v13;

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 40);
    SESDefaultLogObject();
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    id v12 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);
  }
}

void sub_100062B88(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isWaitingForSecureElement] & 1) == 0)
  {
    uint64_t v2 = [*(id *)(a1 + 32) seToken];

    uint64_t v3 = *(void **)(a1 + 32);
    if (v2)
    {
      int v4 = [*(id *)(a1 + 32) seToken];
      [v3 pushSecureElementToken:v4];

      uint64_t v5 = *(void **)(a1 + 32);
      [v5 setSeToken:0];
    }
    else
    {
      [*(id *)(a1 + 32) setIsWaitingForSecureElement:1];
      id v6 = [*(id *)(a1 + 32) remoteObject];
      [v6 sendEvent:&off_10042DCD0];
    }
  }
}

void sub_100062D28(uint64_t a1)
{
}

void sub_100062F20(id a1)
{
  id v1 = (void *)qword_10045CDB0;
  qword_10045CDB0 = (uint64_t)&off_10042DA00;
}

void sub_100063194(uint64_t a1)
{
  id v4 = +[AlishaPairingExternal shared];
  uint64_t v2 = *(void *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(v2 + 8));
  [v4 requestOwnerPairingWithSession:v2 delegate:WeakRetained];
}

id sub_100063744()
{
  self;
  if (qword_10045CDC8 != -1) {
    dispatch_once(&qword_10045CDC8, &stru_10040DF60);
  }
  v0 = (void *)qword_10045CDC0;

  return v0;
}

void sub_10006379C(id a1)
{
  uint64_t v1 = objc_opt_new();
  uint64_t v2 = (void *)qword_10045CDC0;
  qword_10045CDC0 = v1;
}

void sub_1000637D8()
{
  self;
  sub_100063744();
  id v0 = (id)objc_claimAutoreleasedReturnValue();
  sub_100063824((uint64_t)v0);
}

void sub_100063824(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[SESXPCEventListener registerOnStream:@"com.apple.nfcd.xpc.sesd.events" forEvent:@"Payload" handler:a1];
    uint64_t v3 = *(NSObject **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000638D0;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v3, block);
  }
}

void sub_1000638D0(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 40) addObserver:*(void *)(a1 + 32) forKeyPath:@"debug.install.logging.applet" options:4 context:0];
  sub_100063934(*(dispatch_queue_t **)(a1 + 32));
  *(unsigned char *)(*(void *)(a1 + 32) + 32) = 1;
  uint64_t v2 = *(void *)(a1 + 32);

  sub_100063B38(v2);
}

void sub_100063934(dispatch_queue_t *a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(a1[1]);
    uint64_t v2 = a1;
    objc_sync_enter(v2);
    dispatch_queue_t v3 = v2[3];
    objc_sync_exit(v2);

    if (v3 == (dispatch_queue_t)4279897)
    {
      uint64_t v14 = 0;
      uint64_t v15 = &v14;
      uint64_t v16 = 0x2020000000;
      uint64_t v17 = 0;
      id v4 = dispatch_group_create();
      dispatch_group_enter(v4);
      uint64_t v5 = +[NFHardwareManager sharedHardwareManager];
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_1000645C0;
      v11[3] = &unk_10040DFD8;
      id v6 = v4;
      id v12 = v6;
      id v13 = &v14;
      id v7 = [v5 startLPEMConfigSession:v11];

      dispatch_group_wait(v6, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v8 = v2;
      objc_sync_enter(v8);
      v2[3] = (dispatch_queue_t)((v15[3] & 6) != 0);
      uint64_t v9 = SESDefaultLogObject();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        dispatch_queue_t v10 = v2[3];
        *(_DWORD *)long long buf = 134217984;
        dispatch_queue_t v19 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "LPEM enabled value %lu", buf, 0xCu);
      }

      objc_sync_exit(v8);
      _Block_object_dispose(&v14, 8);
    }
  }
}

void sub_100063B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  objc_sync_exit(v15);
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_100063B38(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    unsigned int v2 = [*(id *)(a1 + 40) BOOLForKey:@"debug.install.logging.applet"];
    dispatch_queue_t v3 = [*(id *)(a1 + 40) stringForKey:@"debug.logging.profile.to.install"];
    unsigned __int8 v4 = +[SESBootUUID isFirstLaunchAfterBootForKey:@"debug.logging.last.check.uuid"];
    if (v4)
    {
      +[SESBootUUID setFirstLaunchAfterBootDoneForKey:@"debug.logging.last.check.uuid"];
    }
    else
    {
      uint64_t v5 = (unsigned __int8 *)(id)a1;
      objc_sync_enter(v5);
      if (v5[17] == v2 && (!*((void *)v5 + 3) || v5[16]))
      {
        id v6 = SESDefaultLogObject();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Logging profile and/or applet installed correctly, nothing to do", buf, 2u);
        }

        objc_sync_exit(v5);
        goto LABEL_12;
      }
      objc_sync_exit(v5);
    }
    id v7 = (void *)os_transaction_create();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100063D90;
    v8[3] = &unk_10040DFB0;
    void v8[4] = a1;
    char v11 = v2;
    unsigned __int8 v12 = v4;
    id v9 = v3;
    id v10 = v7;
    uint64_t v5 = v7;
    sub_100058540((uint64_t)SecureElementManager, @"Evaluate Conditions for Logging Applet", v8);

LABEL_12:
  }
}

void sub_100063D00(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100063D88(uint64_t a1)
{
}

void sub_100063D90(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    id v7 = SESDefaultLogObject();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to get SE, logging applet pref dropped on the floor", buf, 2u);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(NSObject **)(v8 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100063EC0;
    block[3] = &unk_10040DF88;
    void block[4] = v8;
    id v11 = v5;
    char v14 = *(unsigned char *)(a1 + 56);
    id v12 = *(id *)(a1 + 40);
    char v15 = *(unsigned char *)(a1 + 57);
    id v13 = *(id *)(a1 + 48);
    dispatch_async(v9, block);
  }
}

void sub_100063EC0(uint64_t a1)
{
}

void sub_100063ED8(dispatch_queue_t *a1, void *a2, int a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a4;
  if (a1)
  {
    dispatch_assert_queue_V2(a1[1]);
    id v11 = a1;
    objc_sync_enter(v11);
    if (a5)
    {
      uint64_t v12 = [@"A000000704E000010002" hexStringAsData];
      *((unsigned char *)v11 + 16) = sub_100056C08(v9, (void *)v12);

      [v11[5] setBool:*((unsigned __int8 *)v11 + 16) forKey:@"debug.have.logging.applet"];
      id v13 = [@"A000000704E000010000" hexStringAsData];
      LOBYTE(v12) = sub_100056C08(v9, v13);

      char v14 = [@"A000000704E000010001" hexStringAsData];
      BOOL v15 = sub_100056C08(v9, v14);

      *((unsigned char *)v11 + 17) = v12 & v15;
      -[NSObject setBool:forKey:](v11[5], "setBool:forKey:");
    }
    if (!*((unsigned char *)v11 + 16) && (v11[3] || a3))
    {
      uint64_t v16 = sub_1000643B4((uint64_t)v11, v9);
      if (v16)
      {
        uint64_t v17 = SESDefaultLogObject();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          int v32 = 138412290;
          v33[0] = v16;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to SLAM logging applet, dropping logging preference %@", (uint8_t *)&v32, 0xCu);
        }
LABEL_26:

        goto LABEL_27;
      }
      *((unsigned char *)v11 + 16) = 1;
      [v11[5] setBool:1 forKey:@"debug.have.logging.applet"];
    }
    if (*((unsigned __int8 *)v11 + 17) == a3)
    {
      uint64_t v16 = SESDefaultLogObject();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v32 = 67109120;
        LODWORD(v33[0]) = a3;
        uint64_t v18 = "Synced (after checking with SE) at %d";
        dispatch_queue_t v19 = v16;
        os_log_type_t v20 = OS_LOG_TYPE_INFO;
        uint32_t v21 = 8;
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, (uint8_t *)&v32, v21);
        goto LABEL_27;
      }
      goto LABEL_27;
    }
    if (a3)
    {
      if ([v10 isEqualToString:@"Engineering"])
      {
        int v22 = 1;
        uint64_t v23 = "SLAMInstallLogger_v0_DevelopmentProfile";
        goto LABEL_23;
      }
      id v24 = SESDefaultLogObject();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        int v32 = 138412290;
        v33[0] = v10;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Can't find install script for profile %@", (uint8_t *)&v32, 0xCu);
      }

      [v11[5] setBool:0 forKey:@"debug.install.logging.applet"];
    }
    int v22 = 0;
    uint64_t v23 = "SLAMDeleteSunspriteLoggingApplets";
LABEL_23:
    uint64_t v16 = sub_10001558C(v9, (uint64_t)v23);
    if (v16)
    {
      uint64_t v17 = SESDefaultLogObject();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v32 = 138412290;
        v33[0] = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to SLAM logging applet instances, dropping logging preference %@", (uint8_t *)&v32, 0xCu);
      }
      goto LABEL_26;
    }
    uint64_t v25 = [@"A000000704E000010000" hexStringAsData];
    BOOL v26 = sub_100056C08(v9, v25);

    long long v27 = [@"A000000704E000010001" hexStringAsData];
    BOOL v28 = sub_100056C08(v9, v27);

    uint64_t v29 = v26 & v28;
    if (v22 == v29)
    {
      long long v30 = SESDefaultLogObject();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        LOWORD(v32) = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Successfully set up or deleted logging instances", (uint8_t *)&v32, 2u);
      }

      *((unsigned char *)v11 + 17) = v29;
      [v11[5] setBool:v29 forKey:@"debug.have.logging.profile"];
      dispatch_queue_t v31 = v11[5];
      if (v29) {
        [v31 setObject:v10 forKey:@"debug.logging.profile.did.install"];
      }
      else {
        [v31 removeObjectForKey:@"debug.logging.profile.did.install"];
      }
      goto LABEL_28;
    }
    uint64_t v16 = SESDefaultLogObject();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v32 = 67109376;
      LODWORD(v33[0]) = v22;
      WORD2(v33[0]) = 1024;
      *(_DWORD *)((char *)v33 + 6) = v29;
      uint64_t v18 = "Failed to set up logging instances shouldInstall %d isAppletInstalled %d; ignoring logging preference";
      dispatch_queue_t v19 = v16;
      os_log_type_t v20 = OS_LOG_TYPE_ERROR;
      uint32_t v21 = 14;
      goto LABEL_15;
    }
LABEL_27:

LABEL_28:
    objc_sync_exit(v11);
  }
}

void sub_100064368(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000643B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    unsigned __int8 v4 = SESDefaultLogObject();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Installing Logging Applet", (uint8_t *)&v14, 2u);
    }

    id v5 = sub_10001558C(v3, (uint64_t)"SLAMLoadAndInstallLogger");
    if (v5)
    {
      id v6 = SESDefaultLogObject();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v14 = 138412290;
        BOOL v15 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to SLAM logging applet instances, dropping logging preference %@", (uint8_t *)&v14, 0xCu);
      }

      id v7 = v5;
    }
    else
    {
      uint64_t v8 = [@"A000000704E000010002" hexStringAsData];
      BOOL v9 = sub_100056C08(v3, v8);

      id v10 = SESDefaultLogObject();
      id v11 = v10;
      if (v9)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Logger applet successfully installed", (uint8_t *)&v14, 2u);
        }

        uint64_t v12 = 0;
        goto LABEL_16;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v14) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to install Logger applet; ignoring logging preference",
          (uint8_t *)&v14,
          2u);
      }

      SESEnsureError();
      id v7 = (id)objc_claimAutoreleasedReturnValue();
    }
    uint64_t v12 = v7;
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v12 = 0;
LABEL_17:

  return v12;
}

void sub_1000645C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    id v11 = SESDefaultLogObject();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 138412290;
      id v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to start LPEM session with error: %@", buf, 0xCu);
    }

    SESEnsureError();
    id v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v12 = 0;
    id v8 = [v5 getLPEMFeaturesWithError:&v12];
    id v9 = v12;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v8;
    if (v9)
    {
      id v10 = SESDefaultLogObject();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        id v14 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "getLPEMFeatures failed with error: %@", buf, 0xCu);
      }
    }
    [v5 endSession];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100064738(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    unsigned __int8 v4 = [@"A000000704E000010002" hexStringAsData];
    BOOL v5 = sub_100056C08(v3, v4);

    if (v5)
    {
      id v6 = a1;
      objc_sync_enter(v6);
      if (*((void *)v6 + 3) || *((unsigned char *)v6 + 17))
      {
        objc_sync_exit(v6);
      }
      else
      {
        objc_sync_exit(v6);

        id v7 = SESDefaultLogObject();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Deleting unused Logger Applet", buf, 2u);
        }

        id v8 = sub_10001558C(v3, (uint64_t)"SLAMDeleteLogger");
        if (v8)
        {
          id v9 = SESDefaultLogObject();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)id v11 = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SLAM Failed, could not delete logging applet!", v11, 2u);
          }
        }
        id v10 = (id *)v6;
        objc_sync_enter(v10);
        *((unsigned char *)v10 + 16) = 0;
        [v10[5] setBool:0 forKey:@"debug.have.logging.applet"];
        objc_sync_exit(v10);
      }
    }
  }
}

void sub_1000648B4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100064998(id *a1)
{
  if ([a1[4] isEqualToString:@"com.apple.nfcd.xpc.sesd.events"])
  {
    string = xpc_dictionary_get_string(a1[5], _xpc_event_key_name);
    if (string)
    {
      id v3 = string;
      if (strcmp(string, "Payload"))
      {
        unsigned __int8 v4 = SESDefaultLogObject();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          int v17 = 136315138;
          int64_t v18 = (int64_t)v3;
          BOOL v5 = "Ignoring eventName %s";
LABEL_13:
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v17, 0xCu);
          goto LABEL_14;
        }
        goto LABEL_14;
      }
    }
    id v8 = xpc_dictionary_get_string(a1[5], "Payload");
    if (v8)
    {
      id v9 = v8;
      if (strcmp(v8, "com.apple.stockholm.lpem.changed"))
      {
        unsigned __int8 v4 = SESDefaultLogObject();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          int v17 = 136315138;
          int64_t v18 = (int64_t)v9;
          BOOL v5 = "Ignoring event %s";
          goto LABEL_13;
        }
LABEL_14:

        return;
      }
    }
    id v10 = xpc_dictionary_get_value(a1[5], "lpemFeatures");
    int64_t value = xpc_int64_get_value(v10);

    id v12 = SESDefaultLogObject();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v17 = 134217984;
      int64_t v18 = value;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Received event for LPEM state change value %lu", (uint8_t *)&v17, 0xCu);
    }

    id v13 = a1[6];
    objc_sync_enter(v13);
    id v14 = a1[6];
    uint64_t v15 = v14[3];
    v14[3] = (value & 6) != 0;
    uint64_t v16 = a1[6];
    if (v16[32] && *((void *)v16 + 3))
    {
      objc_sync_exit(v13);

      if (!v15) {
        sub_100063B38((uint64_t)a1[6]);
      }
    }
    else
    {
      objc_sync_exit(v13);
    }
  }
  else
  {
    id v6 = SESDefaultLogObject();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = a1[4];
      int v17 = 138412290;
      int64_t v18 = (int64_t)v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Ignoring stream %@", (uint8_t *)&v17, 0xCu);
    }
  }
}

uint64_t sub_1000653D4(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESAssertion invalidate %@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) stop];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100065BB4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100065BDC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setStateDescriptor:v3];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100065C7C;
  v5[3] = &unk_10040E000;
  void v5[4] = *(void *)(a1 + 40);
  [v4 setUpdateHandler:v5];
}

id sub_100065C7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) applicationStateChanged:stateUpdate:];
}

id sub_100065C84(uint64_t a1, void *a2)
{
  return _[a2 setPredicates:*(void *)(*(void *)(a1 + 32) + 32)];
}

void sub_100065F38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100065F5C(uint64_t a1, void *a2)
{
  return _[a2 setPredicates:*(void *)(*(void *)(a1 + 32) + 32)];
}

void sub_100066338(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100066354(uint64_t a1, void *a2)
{
  return [a2 processIdentifier] == *(_DWORD *)(a1 + 32);
}

void sub_100066840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id obj)
{
}

uint64_t sub_100066D88(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession endSession %@", (uint8_t *)&v5, 0xCu);
  }

  [*(id *)(a1 + 32) endSessionInternal:0];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100066F24(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)long long buf = 138412546;
    uint64_t v44 = v3;
    __int16 v45 = 2112;
    uint64_t v46 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ setActiveKey %@", buf, 0x16u);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) == 0)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = SESDefaultLogObject();
    id v11 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v11);

    return;
  }
  if (!*(void *)(a1 + 40)) {
    goto LABEL_17;
  }
  int v5 = [*(id *)(*(void *)(a1 + 32) + 64) publicKeyIdentifier];
  uint64_t v6 = [*(id *)(a1 + 40) hexStringAsData];
  unsigned int v7 = [v5 isEqualToData:v6];

  if (v7)
  {
    id v8 = SESDefaultLogObject();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Key already active", buf, 2u);
    }

    goto LABEL_18;
  }
  id v12 = *(void **)(a1 + 40);
  if (!v12)
  {
LABEL_17:
    uint64_t v33 = *(void *)(a1 + 32);
    long long v34 = *(void **)(v33 + 64);
    *(void *)(v33 + 64) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 57) = 0;
LABEL_18:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    return;
  }
  id v13 = [v12 hexStringAsData];
  id v14 = +[AlishaExternal shared];
  uint64_t v15 = [v14 getAllEndpoints];

  uint64_t v16 = [v15 allObjects];
  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472;
  v39[2] = sub_1000673FC;
  v39[3] = &unk_10040DEF8;
  id v17 = v13;
  id v40 = v17;
  int64_t v18 = [v16 find:v39];

  dispatch_queue_t v19 = (id *)(*(void *)(a1 + 32) + 64);
  if (v18)
  {
    objc_storeStrong(v19, v18);
    os_log_type_t v20 = SESDefaultLogObject();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      uint64_t v21 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v44 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Active key set to %@", buf, 0xCu);
    }

    int v22 = +[AlishaExternal shared];
    uint64_t v23 = [v18 bleUUID];
    id v24 = +[NSUUID ses_withUUIDString:v23];
    unsigned int v25 = [v22 isPeerConnectedWithClientUUID:v24];

    CFStringRef v26 = @"com.apple.secureelementservice.dck.event.vehicle.did.disconnect";
    long long v27 = *(id **)(a1 + 32);
    if (v25) {
      CFStringRef v26 = @"com.apple.secureelementservice.dck.event.vehicle.did.connect";
    }
    v42[0] = v26;
    v41[0] = @"xpcEventName";
    v41[1] = @"appletIdentifier";
    BOOL v28 = [v27[8] appletIdentifier];
    uint64_t v29 = [v28 asHexString];
    v41[2] = @"keyIdentifier";
    uint64_t v30 = *(void *)(a1 + 40);
    v42[1] = v29;
    v42[2] = v30;
    dispatch_queue_t v31 = +[NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:3];
    int v32 = [v18 publicKeyIdentifier];
    [v27 sendEvent:v31 keyIdentifier:v32];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    id v35 = *v19;
    id *v19 = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 57) = 0;
    uint64_t v36 = *(void *)(a1 + 48);
    __int16 v37 = SESDefaultLogObject();
    uint64_t v38 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v36 + 16))(v36, v38);
  }
}

BOOL sub_1000673FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  int v5 = [v3 publicKeyIdentifier];
  if ([v4 isEqualToData:v5])
  {
    uint64_t v6 = [v3 bleUUID];
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }

  return v7;
}

void sub_100067550(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ setSecureElementToken", (uint8_t *)&v7, 0xCu);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    if ([*(id *)(a1 + 32) isWaitingForSecureElement])
    {
      [*(id *)(a1 + 32) pushSecureElementToken:*(void *)(a1 + 40)];
      [*(id *)(a1 + 32) setIsWaitingForSecureElement:0];
    }
    else
    {
      [*(id *)(a1 + 32) setSeToken:*(void *)(a1 + 40)];
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    int v5 = SESDefaultLogObject();
    uint64_t v6 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v6);
  }
}

void sub_10006775C(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 138412290;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ setAuthorization", (uint8_t *)&v8, 0xCu);
  }

  unsigned __int8 v4 = [*(id *)(a1 + 32) isActive];
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4)
  {
    (*(void (**)(uint64_t, void))(v5 + 16))(v5, 0);
  }
  else
  {
    uint64_t v6 = SESDefaultLogObject();
    int v7 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v7);
  }
}

void sub_100067940(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = *(unsigned __int8 *)(a1 + 48);
    int v13 = 138412546;
    uint64_t v14 = v3;
    __int16 v15 = 1024;
    int v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ preArmActiveKey %d", (uint8_t *)&v13, 0x12u);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) != 0
    && (uint64_t v5 = *(void *)(a1 + 32), *(void *)(v5 + 64)))
  {
    *(unsigned char *)(v5 + 57) = *(unsigned char *)(a1 + 48);
    if ([*(id *)(a1 + 32) isPreArmed])
    {
      uint64_t v6 = +[AlishaExternal shared];
      id v7 = objc_alloc((Class)NSUUID);
      int v8 = [*(id *)(*(void *)(a1 + 32) + 64) bleUUID];
      id v9 = [v7 initWithUUIDString:v8];
      [v6 pauseRangingFor:v9];
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = SESDefaultLogObject();
    id v12 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v10 + 16))(v10, v12);
  }
}

void sub_100067C2C(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    uint64_t v5 = *(void *)(a1 + 32);
    BOOL v6 = *(void *)(a1 + 40) != 0;
    *(_DWORD *)long long buf = 138413058;
    uint64_t v13 = v5;
    __int16 v14 = 1024;
    int v15 = v3;
    __int16 v16 = 1024;
    int v17 = v4;
    __int16 v18 = 1024;
    BOOL v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ sendRKEFunction 0x%X action 0x%X authorization %d", buf, 0x1Eu);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) != 0 && *(void *)(*(void *)(a1 + 32) + 64))
  {
    id v7 = +[AlishaExternal shared];
    uint64_t v8 = *(unsigned __int16 *)(a1 + 56);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
    uint64_t v10 = [*(id *)(*(void *)(a1 + 32) + 64) publicKeyIdentifier];
    [v7 sendRKERequestWithFunctionIdentifier:v8 actionIdentifier:v9 keyIdentifier:v10 requestType:0 enduringRequestHandler:0 authorization:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 48);
    id v7 = SESDefaultLogObject();
    uint64_t v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0, v10);
  }
}

void sub_100067ED0(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
    int v11 = 138412546;
    uint64_t v12 = v3;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ cancelRKEFunction 0x%X", (uint8_t *)&v11, 0x12u);
  }

  if (([*(id *)(a1 + 32) isActive] & 1) != 0 && *(void *)(*(void *)(a1 + 32) + 64))
  {
    uint64_t v5 = +[AlishaExternal shared];
    uint64_t v6 = *(unsigned __int16 *)(a1 + 48);
    id v7 = [*(id *)(*(void *)(a1 + 32) + 64) publicKeyIdentifier];
    uint64_t v8 = [v5 cancelRKERequestWithFunctionIdentifier:v6 keyIdentifier:v7];

    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v8 = SESDefaultLogObject();
    uint64_t v10 = SESCreateAndLogError();
    (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
  }
}

void sub_100068178(uint64_t a1)
{
  unsigned int v2 = SESDefaultLogObject();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v14 = 138412290;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "SESDCKSession %@ sendPassthroughMessage", (uint8_t *)&v14, 0xCu);
  }

  if ([*(id *)(a1 + 32) isActive])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 64);
    if (v5)
    {
      if (*(unsigned char *)(v4 + 56))
      {
LABEL_13:
        id v11 = objc_alloc((Class)NSUUID);
        uint64_t v12 = [*(id *)(*(void *)(a1 + 32) + 64) bleUUID];
        id v9 = [v11 initWithUUIDString:v12];

        __int16 v13 = +[AlishaExternal shared];
        uint64_t v10 = [v13 sendPassthroughWithMessage:*(void *)(a1 + 40) clientUUID:v9];

        (*(void (**)(void, void *))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), v10);
        goto LABEL_14;
      }
      id v6 = [v5 getEndpointUser];
      if (v6)
      {
        if (v6 != (id)1)
        {
LABEL_12:
          *(unsigned char *)(*(void *)(a1 + 32) + 56) = 1;
          goto LABEL_13;
        }
        id v7 = @"friendPassthroughCount";
      }
      else
      {
        id v7 = @"ownerPassthroughCount";
      }
      sub_100050018((uint64_t)SESDAnalyticsLogger, v7);
      goto LABEL_12;
    }
  }
  uint64_t v8 = *(void *)(a1 + 48);
  SESDefaultLogObject();
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v10 = SESCreateAndLogError();
  (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v10);
LABEL_14:
}

void sub_10006841C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isWaitingForSecureElement] & 1) == 0)
  {
    unsigned int v2 = [*(id *)(a1 + 32) seToken];

    uint64_t v3 = *(void **)(a1 + 32);
    if (v2)
    {
      uint64_t v4 = [*(id *)(a1 + 32) seToken];
      [v3 pushSecureElementToken:v4];

      uint64_t v5 = *(void **)(a1 + 32);
      [v5 setSeToken:0];
    }
    else
    {
      [*(id *)(a1 + 32) setIsWaitingForSecureElement:1];
      id v6 = [*(id *)(a1 + 32) remoteObject];
      [v6 sendEvent:&off_10042DCF8];
    }
  }
}

void sub_1000685BC(uint64_t a1)
{
}

void sub_1000687B4(id a1)
{
  uint64_t v1 = (void *)qword_10045CDD0;
  qword_10045CDD0 = (uint64_t)&off_10042DA18;
}

id sub_100068A94()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AlishaPairingExternal()) init];
  qword_1004684F8 = (uint64_t)result;
  return result;
}

uint64_t sub_100068B24(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  int v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v20[0] = qword_100468A38;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = v2;
  v15[3] = a1;
  void v15[4] = a2;
  aBlock[4] = sub_10006D3E4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_10040FE28;
  __int16 v16 = _Block_copy(aBlock);
  id v17 = v2;
  id v18 = a1;
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v20[1] = &_swiftEmptyArrayStorage;
  sub_10006CDB8((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release();
}

uint64_t sub_100068E04(unsigned char *a1)
{
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called requestOwnerPairing", v4, 2u);
    swift_slowDealloc();
  }

  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  a1[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning] = 1;
  if (qword_100453680 != -1) {
    swift_once();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  uint64_t v6 = a1;
  sub_100090958((uint64_t)sub_10006D3F0, v5);

  return swift_release();
}

void sub_100068F74(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  void *v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
LABEL_16:
    sub_10009120C();
    return;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) != 1) {
    return;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
LABEL_13:
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      BOOL v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing session or delegate", v19, 2u);
      swift_slowDealloc();
    }

    if (qword_100453680 == -1) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  uint64_t v11 = (void *)Strong;
  uint64_t v12 = swift_unknownObjectWeakLoadStrong();
  if (!v12)
  {
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  uint64_t v13 = (void *)v12;
  int v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    __int16 v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)__int16 v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Calling btHceTxnSessionDidStartEmulation", v16, 2u);
    swift_slowDealloc();
  }

  if ([v11 respondsToSelector:"btHceTxnSessionDidStartEmulation:result:"])
  {
    swift_unknownObjectRetain();
    if (a1) {
      a1 = (void *)_convertErrorToNSError(_:)();
    }
    [v11 btHceTxnSessionDidStartEmulation:v13 result:a1];

    swift_unknownObjectRelease_n();
  }
  else
  {

    swift_unknownObjectRelease();
  }
}

void sub_100069324(uint64_t a1)
{
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called stopOwnerPairing", v4, 2u);
    swift_slowDealloc();
  }

  if (qword_100453680 != -1) {
    swift_once();
  }
  sub_10009120C();
  *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) = 0;
}

void sub_10006947C(uint64_t a1)
{
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called startHceEmulation", v4, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) = 1;
    uint64_t v5 = OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart;
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart))
    {
LABEL_12:
      *(unsigned char *)(a1 + v5) = 0;
      return;
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = (void *)Strong;
      uint64_t v8 = swift_unknownObjectWeakLoadStrong();
      if (v8)
      {
        id v9 = (void *)v8;
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Calling btHceTxnSessionDidStartEmulation", v12, 2u);
          swift_slowDealloc();
        }

        if ([v7 respondsToSelector:"btHceTxnSessionDidStartEmulation:result:"]) {
          [v7 btHceTxnSessionDidStartEmulation:v9 result:0];
        }

        swift_unknownObjectRelease();
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing session or delegate", v15, 2u);
      swift_slowDealloc();
    }

    if (qword_100453680 != -1) {
      swift_once();
    }
    sub_10009120C();
  }
}

void sub_100069760(uint64_t a1)
{
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called stopHceEmulation", v4, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) = 0;
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      uint64_t v7 = swift_unknownObjectWeakLoadStrong();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        id v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v9, v10))
        {
          os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling btHceTxnSessionDidStopEmulation", v11, 2u);
          swift_slowDealloc();
        }

        if ([v6 respondsToSelector:"btHceTxnSessionDidStopEmulation:result:"]) {
          [v6 btHceTxnSessionDidStopEmulation:v8 result:0];
        }

        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing session or delegate", v14, 2u);
      swift_slowDealloc();
    }

    if (qword_100453680 != -1) {
      swift_once();
    }
    sub_10009120C();
  }
}

void sub_100069A40(uint64_t a1)
{
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called startTransactionEmulation", v4, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100453680 != -1) {
      swift_once();
    }
    sub_1000A2B8C();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      uint64_t v7 = swift_unknownObjectWeakLoadStrong();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        id v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v9, v10))
        {
          os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling btTxnSessionDidStartTransaction", v11, 2u);
          swift_slowDealloc();
        }

        if ([v6 respondsToSelector:"btTxnSessionDidStartTransaction:result:"]) {
          [v6 btTxnSessionDidStartTransaction:v8 result:0];
        }

        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing session or delegate", v14, 2u);
      swift_slowDealloc();
    }

    sub_10009120C();
  }
}

void sub_100069CE0(uint64_t a1)
{
  unsigned int v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called stopTransactionEmulation", v4, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100453680 != -1) {
      swift_once();
    }
    sub_10009144C();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v6 = (void *)Strong;
      uint64_t v7 = swift_unknownObjectWeakLoadStrong();
      if (v7)
      {
        uint64_t v8 = (void *)v7;
        id v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v9, v10))
        {
          os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Calling btTxnSessionDidEndTransaction", v11, 2u);
          swift_slowDealloc();
        }

        if ([v6 respondsToSelector:"btTxnSessionDidEndTransaction:result:"]) {
          [v6 btTxnSessionDidEndTransaction:v8 result:0];
        }

        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing session or delegate", v14, 2u);
      swift_slowDealloc();
    }

    sub_10009120C();
  }
}

uint64_t sub_100069FC8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_10006D324;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_10040FC48;
  os_log_type_t v14 = _Block_copy(aBlock);
  id v15 = v1;
  swift_errorRetain();
  static DispatchQoS.unspecified.getter();
  v17[1] = &_swiftEmptyArrayStorage;
  sub_10006CDB8((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release();
}

void sub_10006A298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "KML called pairingEnded", v6, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100453680 != -1) {
      swift_once();
    }
    sub_10009145C(a2);
  }
}

uint64_t sub_10006A3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.notOnQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    __chkstk_darwin(result, v13);
    v14[-4] = v2;
    v14[-3] = a1;
    v14[-2] = a2;
    sub_10006C51C(&qword_100453DA8);
    OS_dispatch_queue.sync<A>(execute:)();
    return v14[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006A5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "KML called sendAPDU", v10, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100453680 != -1) {
      swift_once();
    }
    uint64_t result = sub_100091788(a2, a3);
  }
  else
  {
    sub_10006D098();
    uint64_t result = swift_allocError();
    *uint64_t v12 = 2;
  }
  *a4 = result;
  return result;
}

uint64_t sub_10006A7A4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (void *)((char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  void *v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.notOnQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    __chkstk_darwin(result, v9);
    v10[-2] = v0;
    sub_10006C51C(&qword_100453DA8);
    OS_dispatch_queue.sync<A>(execute:)();
    return v10[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10006A950@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  uint64_t v7 = v6;
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, (os_log_type_t)v7, "KML called readAPDU", v2, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) != 1
    || *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) != 1)
  {
    sub_10006D098();
    uint64_t result = swift_allocError();
    uint64_t v16 = result;
    unsigned char *v17 = 2;
    goto LABEL_14;
  }
  uint64_t v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages);
  uint64_t result = swift_beginAccess();
  if (!*(void *)(*v8 + 16))
  {
    uint64_t v16 = 0;
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending) = 1;
    goto LABEL_14;
  }
  swift_beginAccess();
  uint64_t v10 = *v8;
  if (!*(void *)(*v8 + 16))
  {
    __break(1u);
LABEL_21:
    swift_once();
LABEL_19:
    sub_10009120C();
    sub_10006D098();
    uint64_t v16 = swift_allocError();
    unsigned char *v20 = 2;
    uint64_t result = sub_10006D144(v7, (unint64_t)v2);
    goto LABEL_14;
  }
  uint64_t v7 = *(void *)(v10 + 32);
  uint64_t v2 = *(uint8_t **)(v10 + 40);
  sub_10006D0EC(v7, (unint64_t)v2);
  sub_1002D2148(0, 1);
  swift_endAccess();
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
  uint64_t v12 = Logger.logObject.getter();
  if (!Strong)
  {
    uint64_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, (os_log_type_t)v18))
    {
      BOOL v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, (os_log_type_t)v18, "Missing delegate", v19, 2u);
      swift_slowDealloc();
    }

    if (qword_100453680 == -1) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Calling btHceSessionHandleApdu", v14, 2u);
    swift_slowDealloc();
  }

  if ([Strong respondsToSelector:"btHceSessionHandleApdu:"])
  {
    sub_10006D0EC(v7, (unint64_t)v2);
    swift_unknownObjectRetain();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [Strong btHceSessionHandleApdu:isa];
    swift_unknownObjectRelease();

    sub_10006D144(v7, (unint64_t)v2);
  }
  swift_unknownObjectRelease();
  uint64_t result = sub_10006D144(v7, (unint64_t)v2);
  uint64_t v16 = 0;
LABEL_14:
  *a2 = v16;
  return result;
}

uint64_t sub_10006AD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v19[0] - 8);
  __chkstk_darwin(v19[0], v12);
  os_log_type_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = a3;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v3;
  static DispatchQoS.unspecified.getter();
  v19[1] = &_swiftEmptyArrayStorage;
  sub_10006CDB8((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, void))(v11 + 8))(v14, v19[0]);
  return swift_release();
}

void sub_10006AFF4(uint64_t a1)
{
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "KML called endSession", v4, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    if (qword_100453680 != -1) {
      swift_once();
    }
    sub_100091A54();
  }
}

uint64_t sub_10006B154(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v15);
  id v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100468A38;
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v5;
  v18[3] = a1;
  void v18[4] = a2;
  aBlock[4] = a4;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = v23;
  BOOL v19 = _Block_copy(aBlock);
  id v20 = v5;
  sub_10006D0EC(a1, a2);
  static DispatchQoS.unspecified.getter();
  unsigned int v25 = &_swiftEmptyArrayStorage;
  sub_10006CDB8((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v24);
  return swift_release();
}

void sub_10006B428(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "KML called startFirstApproach", v7, 2u);
    swift_slowDealloc();
  }

  if (qword_100453680 != -1) {
    swift_once();
  }
  sub_100091C2C(a2, a3);
}

void sub_10006B540(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a3;
  id v14 = a1;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_10006B154(v11, v13, a4, a5, a6);
  sub_10006D144(v11, v13);
}

void sub_10006B5F0(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    uint64_t v5 = (uint64_t)sub_100258EB0(0, *(void *)(v5 + 16) + 1, 1, (char *)v5);
    uint64_t *v2 = v5;
    goto LABEL_13;
  }
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) != 1) {
    return;
  }
  if (*((unsigned char *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending) == 1
    && *((unsigned char *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) == 1)
  {
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong();
    unint64_t v13 = Logger.logObject.getter();
    if (Strong)
    {
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Calling btHceSessionHandleApdu", v15, 2u);
        swift_slowDealloc();
      }

      if ([Strong respondsToSelector:"btHceSessionHandleApdu:"])
      {
        swift_unknownObjectRetain();
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        [Strong btHceSessionHandleApdu:isa];
        swift_unknownObjectRelease_n();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v21, "Missing delegate", v22, 2u);
        swift_slowDealloc();
      }

      if (qword_100453680 != -1) {
        swift_once();
      }
      sub_10009120C();
    }
    return;
  }
  uint64_t v2 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages);
  swift_beginAccess();
  uint64_t v5 = *v2;
  sub_10006D0EC(a1, a2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_24;
  }
LABEL_13:
  unint64_t v19 = *(void *)(v5 + 16);
  unint64_t v18 = *(void *)(v5 + 24);
  if (v19 >= v18 >> 1)
  {
    uint64_t v5 = (uint64_t)sub_100258EB0((char *)(v18 > 1), v19 + 1, 1, (char *)v5);
    uint64_t *v2 = v5;
  }
  *(void *)(v5 + 16) = v19 + 1;
  uint64_t v20 = v5 + 16 * v19;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  swift_endAccess();
}

void sub_10006B9C0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  void *v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v9 = (void *)Strong;
      uint64_t v10 = swift_unknownObjectWeakLoadStrong();
      if (v10)
      {
        id v11 = (void *)v10;
        unint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v12, v13))
        {
          os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Calling btTxnSessionDidEndTransaction", v14, 2u);
          swift_slowDealloc();
        }

        if ([v9 respondsToSelector:"btTxnSessionDidEndTransaction:result:"]) {
          [v9 btTxnSessionDidEndTransaction:v11 result:0];
        }

        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing session or delegate", v17, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10006BC78(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  void *v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) == 1)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      id v11 = (void *)Strong;
      uint64_t v12 = swift_unknownObjectWeakLoadStrong();
      if (v12)
      {
        os_log_type_t v13 = (void *)v12;
        if (a1)
        {
          if (a1 == 4)
          {
            os_log_type_t v14 = Logger.logObject.getter();
            os_log_type_t v15 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v14, v15))
            {
              os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)os_log_type_t v16 = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, v15, "Calling btHceTxnSessionUwbUnavailable", v16, 2u);
              swift_slowDealloc();
            }

            if ([v11 respondsToSelector:"btHceTxnSessionUwbUnavailable:"]) {
              [v11 btHceTxnSessionUwbUnavailable:v13];
            }
          }
          else
          {
            uint64_t v23 = Logger.logObject.getter();
            os_log_type_t v24 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v23, v24))
            {
              unsigned int v25 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unsigned int v25 = 0;
              _os_log_impl((void *)&_mh_execute_header, v23, v24, "Calling btHceTxnSessionDidEndUnexpectedly", v25, 2u);
              swift_slowDealloc();
            }

            if ([v11 respondsToSelector:"btHceTxnSessionDidEndUnexpectedly:result:"])
            {
              sub_10006D098();
              swift_allocError();
              *CFStringRef v26 = a1;
              swift_unknownObjectRetain();
              long long v27 = (void *)_convertErrorToNSError(_:)();
              [v11 btHceTxnSessionDidEndUnexpectedly:v13 result:v27];

              swift_unknownObjectRelease_n();
              swift_errorRelease();
              return;
            }
          }
        }
        else
        {
          uint64_t v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v20, v21))
          {
            uint64_t v22 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v22 = 0;
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "Calling btHceTxnSessionRadioIsDisabled", v22, 2u);
            swift_slowDealloc();
          }

          if ([v11 respondsToSelector:"btHceTxnSessionRadioIsDisabled:"]) {
            [v11 btHceTxnSessionRadioIsDisabled:v13];
          }
        }

        swift_unknownObjectRelease();
        return;
      }
      swift_unknownObjectRelease();
    }
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing session or delegate", v19, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10006C0E0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  void *v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages) = 0;
    *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart) = 1;
    *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning) = 0;
    *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending) = 0;
    id v9 = (void *)(v0 + OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages);
    swift_beginAccess();
    *id v9 = &_swiftEmptyArrayStorage;
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10006C288()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  v2[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_canReceiveMessages] = 0;
  swift_unknownObjectWeakInit();
  v2[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isFirstStart] = 1;
  v2[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_isRunning] = 0;
  v2[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_readPending] = 0;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced21AlishaPairingExternal_receivedMessages] = &_swiftEmptyArrayStorage;
  swift_unknownObjectWeakInit();

  v4.receiver = v2;
  v4.super_class = ObjectType;
  return [super init];
}

id SECServer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return [super dealloc];
}

uint64_t variable initialization expression of CredentialInternalServer.logger()
{
  return Logger.init(subsystem:category:)();
}

unint64_t variable initialization expression of SECServer.machName()
{
  return 0xD000000000000027;
}

uint64_t variable initialization expression of SECServer.presentmentIntentAssertionCallbacks()
{
  sub_10006C51C(&qword_100453980);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_10006C51C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10006C560()
{
  return type metadata accessor for AlishaPairingExternal();
}

uint64_t type metadata accessor for AlishaPairingExternal()
{
  uint64_t result = qword_1004539F0;
  if (!qword_1004539F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10006C5B4()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void type metadata accessor for NIAcwgSessionTriggerReason(uint64_t a1)
{
}

void type metadata accessor for NIAcwgSuspendTriggerReason(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for SECCredentialConfig.Metadata.CredentialInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_10006C6CC(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10006C6D8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006C6F8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for CaAliroReaderKeyType(uint64_t a1)
{
}

void type metadata accessor for CaAliroIntentFallbackTriggered(uint64_t a1)
{
}

void type metadata accessor for CaAliroTransactionMode(uint64_t a1)
{
}

void type metadata accessor for CaAliroDisconnectionReason(uint64_t a1)
{
}

void type metadata accessor for SEEndPointType(uint64_t a1)
{
}

void type metadata accessor for SecureElementType(uint64_t a1)
{
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

_DWORD *sub_10006C7EC@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_10006C7FC(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10006C808(uint64_t a1, uint64_t a2)
{
  return sub_10006CF8C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

void *sub_10006C834@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
  return result;
}

void sub_10006C844(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10006C850()
{
  return _CFObject.hashValue.getter();
}

uint64_t sub_10006C89C()
{
  return _CFObject.hash(into:)();
}

Swift::Int sub_10006C8F4()
{
  return Hasher._finalize()();
}

uint64_t sub_10006C960(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_10006C9D8(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_10006CA58@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10006CA9C(uint64_t a1, uint64_t a2)
{
  return sub_10006CF8C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10006CAB4()
{
  swift_getWitnessTable();

  return static _CFObject.== infix(_:_:)();
}

uint64_t sub_10006CB24()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10006CBB0(uint64_t a1)
{
  uint64_t v2 = sub_10006CDB8(&qword_100453E58, type metadata accessor for SESPrivacyEncryptionScheme);
  uint64_t v3 = sub_10006CDB8(&qword_100453E60, type metadata accessor for SESPrivacyEncryptionScheme);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10006CC6C(uint64_t a1)
{
  uint64_t v2 = sub_10006CDB8(&qword_100453D20, type metadata accessor for Name);
  uint64_t v3 = sub_10006CDB8(&qword_100453D28, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10006CD28()
{
  return sub_10006CDB8(&qword_100453C40, type metadata accessor for Name);
}

uint64_t sub_10006CD70()
{
  return sub_10006CDB8(&qword_100453C48, type metadata accessor for Name);
}

uint64_t sub_10006CDB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006CE00()
{
  return sub_10006CDB8(&qword_100453C50, type metadata accessor for Name);
}

BOOL sub_10006CE48(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10006CE5C@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_10006CEA4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10006CED0(uint64_t a1)
{
  uint64_t v2 = sub_10006CDB8(&qword_100453E68, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_10006CDB8(&qword_100453E70, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10006CF8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_10006CFD0()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006D024()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_10006D098()
{
  unint64_t result = qword_100453CB8;
  if (!qword_100453CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100453CB8);
  }
  return result;
}

uint64_t sub_10006D0EC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_10006D144(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void sub_10006D1A0()
{
  sub_10006B428(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10006D1AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10006D1BC()
{
  return swift_release();
}

unint64_t sub_10006D1C4()
{
  unint64_t result = qword_100453DA0;
  if (!qword_100453DA0)
  {
    sub_10006D220((uint64_t *)&unk_100455710);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100453DA0);
  }
  return result;
}

uint64_t sub_10006D220(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10006D268()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10006D2A0()
{
  sub_10006AFF4(*(void *)(v0 + 16));
}

uint64_t sub_10006D2A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006A950(*(void *)(v1 + 16), a1);
}

uint64_t sub_10006D2C4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10006A5B0(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_10006D2E4()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10006D324()
{
  sub_10006A298(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_10006D32C()
{
  sub_100069CE0(*(void *)(v0 + 16));
}

uint64_t sub_10006D338()
{
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10006D378()
{
  sub_100069A40(*(void *)(v0 + 16));
}

void sub_10006D384()
{
  sub_100069760(*(void *)(v0 + 16));
}

void sub_10006D38C()
{
  sub_10006947C(*(void *)(v0 + 16));
}

void sub_10006D394()
{
  sub_100069324(*(void *)(v0 + 16));
}

uint64_t sub_10006D39C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10006D3E4()
{
  return sub_100068E04(*(unsigned char **)(v0 + 16));
}

void sub_10006D3F0(void *a1)
{
}

uint64_t sub_10006D414(uint64_t a1)
{
  return a1;
}

void type metadata accessor for CBPairingType(uint64_t a1)
{
}

void type metadata accessor for CARWirelessPairingIntent(uint64_t a1)
{
}

void type metadata accessor for CARWirelessPairingResult(uint64_t a1)
{
}

__n128 sub_10006D478(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x2C0], 8) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t sub_10006D4BC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006D4DC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 16_Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 200) = v3;
  return result;
}

void type metadata accessor for os_state_data_s(uint64_t a1)
{
}

void type metadata accessor for SESPrivacyEncryptionScheme(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

__n128 initializeWithTake for WebauthN.AttestationStatement.AppleAttestationFormat(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_10006D580(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006D5A0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for Result(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for NFWalletDomain(uint64_t a1)
{
}

uint64_t sub_10006D654()
{
  return sub_10006CDB8(&qword_100453E18, type metadata accessor for URLResourceKey);
}

uint64_t sub_10006D69C()
{
  return sub_10006CDB8(&qword_100453E20, type metadata accessor for URLResourceKey);
}

uint64_t sub_10006D6E4()
{
  return sub_10006CDB8(&qword_100453E28, type metadata accessor for URLResourceKey);
}

uint64_t sub_10006D72C()
{
  return sub_10006CDB8(&qword_100453E30, type metadata accessor for SESPrivacyEncryptionScheme);
}

uint64_t sub_10006D774()
{
  return sub_10006CDB8(&qword_100453E38, type metadata accessor for SESPrivacyEncryptionScheme);
}

uint64_t sub_10006D7BC()
{
  return sub_10006CDB8(&qword_100453E40, type metadata accessor for SESPrivacyEncryptionScheme);
}

uint64_t sub_10006D804()
{
  return sub_10006CDB8((unint64_t *)&qword_100453E48, type metadata accessor for CFString);
}

uint64_t sub_10006D84C()
{
  return sub_10006CDB8(&qword_100453E50, type metadata accessor for CFString);
}

__n128 sub_10006D894(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10006D8B8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10006D8D8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12_Block_object_dispose(&STACK[0x2C0], 8) = v3;
  return result;
}

void type metadata accessor for os_state_data_decoder_s(uint64_t a1)
{
}

void type metadata accessor for os_state_data_s.__Unnamed_union___Anonymous_field1(uint64_t a1)
{
}

void type metadata accessor for os_state_data_type_t(uint64_t a1)
{
}

void sub_10006D960(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

id sub_10006DA1C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LyonSE()) init];
  qword_100468500 = (uint64_t)result;
  return result;
}

id sub_10006DAAC()
{
  ObjectType = (objc_class *)swift_getObjectType();
  long long v2 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(_OWORD *)&v2[OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData] = xmmword_100378280;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager;
  type metadata accessor for SlotManager();
  uint64_t v4 = swift_allocObject();
  sub_100075410(2uLL);
  *(void *)&v2[v3] = v4;
  v2[OBJC_IVAR____TtC10seserviced6LyonSE_isRunning] = 0;
  uint64_t v5 = OBJC_IVAR____TtC10seserviced6LyonSE_seTimeoutInSec;
  unint64_t v16 = 0xD000000000000014;
  unint64_t v17 = 0x80000001003B1620;
  unint64_t v18 = 0xD000000000000019;
  unint64_t v19 = 0x80000001003B1BB0;
  uint64_t v20 = 0x4008000000000000;
  char v21 = 1;
  sub_1001AF368();
  *(void *)&v2[v5] = v6;

  v15.receiver = v2;
  v15.super_class = ObjectType;
  id v7 = [super init];
  uint64_t v8 = qword_100453928;
  id v9 = v7;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  void v14[4] = sub_1000761AC;
  void v14[5] = v10;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  void v14[2] = sub_1002B9D80;
  v14[3] = &unk_100410338;
  id v11 = _Block_copy(v14);
  id v12 = v9;
  swift_release();
  os_state_add_handler();

  _Block_release(v11);
  return v12;
}

uint64_t sub_10006DCD0()
{
  uint64_t v1 = v0;
  char v2 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning);
  uint64_t v3 = 1701736302;
  uint64_t v46 = &type metadata for Bool;
  LOBYTE(v45) = v2;
  sub_1000761D0(&v45, v44);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v44, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_seTimeoutInSec);
  uint64_t v46 = &type metadata for Double;
  *(void *)&long long v45 = v5;
  sub_1000761D0(&v45, v44);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v44, 0x756F656D69546573, 0xEE006365536E4974, v6);
  swift_bridgeObjectRelease();
  id v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
  unint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8);
  if (v8 >> 60 == 15)
  {
    uint64_t v46 = &type metadata for String;
  }
  else
  {
    uint64_t v9 = *v7;
    sub_10006D0EC(*v7, *(void *)(v0 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8));
    *(void *)&long long v45 = sub_10023CDF4(v9, v8);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    sub_100075868(v9, v8);
    uint64_t v46 = &type metadata for String;
    if (v12)
    {
      uint64_t v3 = v10;
      goto LABEL_6;
    }
  }
  unint64_t v12 = 0xE400000000000000;
LABEL_6:
  *(void *)&long long v45 = v3;
  *((void *)&v45 + 1) = v12;
  sub_1000761D0(&v45, v44);
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v44, 0xD00000000000001DLL, 0x80000001003B1C40, v13);
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager);
  unint64_t v15 = *(void *)(v14 + 24);
  if (v15 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_8;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    unint64_t v19 = &_swiftEmptyArrayStorage;
LABEL_21:
    uint64_t v27 = sub_10006C51C((uint64_t *)&unk_100455EA0);
    uint64_t v46 = (void *)v27;
    *(void *)&long long v45 = v19;
    sub_1000761D0(&v45, v44);
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v44, 0x746F6C536B737275, 0xE900000000000073, v28);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v29 = *(void *)(v14 + 32);
    int64_t v30 = *(void *)(v29 + 16);
    dispatch_queue_t v31 = &_swiftEmptyArrayStorage;
    if (v30)
    {
      uint64_t v43 = v27;
      *(void *)&long long v45 = &_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1002CF974(0, v30, 0);
      dispatch_queue_t v31 = (void *)v45;
      uint64_t v32 = v29 + 48;
      do
      {
        swift_retain();
        swift_retain();
        uint64_t v33 = UUID.uuidString.getter();
        uint64_t v35 = v34;
        swift_release();
        swift_release();
        *(void *)&long long v45 = v31;
        unint64_t v37 = v31[2];
        unint64_t v36 = v31[3];
        if (v37 >= v36 >> 1)
        {
          sub_1002CF974(v36 > 1, v37 + 1, 1);
          dispatch_queue_t v31 = (void *)v45;
        }
        _OWORD v31[2] = v37 + 1;
        uint64_t v38 = (char *)&v31[2 * v37];
        *((void *)v38 + 4) = v33;
        *((void *)v38 + 5) = v35;
        v32 += 24;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      uint64_t v27 = v43;
    }
    uint64_t v46 = (void *)v27;
    *(void *)&long long v45 = v31;
    sub_1000761D0(&v45, v44);
    char v39 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v44, 0x746F6C536B737275, 0xEF73726574696157, v39);
    swift_bridgeObjectRelease();
    sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v41 = sub_1000190DC((uint64_t)"lyonse.state", (uint64_t)isa);

    return (uint64_t)v41;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16) {
    goto LABEL_20;
  }
LABEL_8:
  *(void *)&long long v45 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_1002CF974(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v42 = v14;
    uint64_t v18 = 0;
    unint64_t v19 = (void *)v45;
    while (1)
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        if (!*(void *)(specialized _ArrayBuffer._getElementSlowPath(_:)() + 16)) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v23 = *(void *)(v15 + 8 * v18 + 32);
        swift_retain();
        if (!*(void *)(v23 + 16))
        {
LABEL_14:
          swift_release();
          unint64_t v22 = 0xE800000000000000;
          uint64_t v20 = 0x72656E774F206F4ELL;
          goto LABEL_15;
        }
      }
      swift_retain();
      uint64_t v20 = UUID.uuidString.getter();
      unint64_t v22 = v21;
      swift_release();
      swift_release();
LABEL_15:
      *(void *)&long long v45 = v19;
      unint64_t v25 = v19[2];
      unint64_t v24 = v19[3];
      if (v25 >= v24 >> 1)
      {
        sub_1002CF974(v24 > 1, v25 + 1, 1);
        unint64_t v19 = (void *)v45;
      }
      ++v18;
      void v19[2] = v25 + 1;
      CFStringRef v26 = (char *)&v19[2 * v25];
      *((void *)v26 + 4) = v20;
      *((void *)v26 + 5) = v22;
      if (v16 == v18)
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = v42;
        goto LABEL_21;
      }
    }
  }
  __break(1u);
  return result;
}

void sub_10006E2D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced6LyonSE_isRunning;
    char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning);
    unint64_t v11 = Logger.logObject.getter();
    if (v10)
    {
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        char v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "LyonSE is already running", v13, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v14, "Starting LyonSE", v15, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v1 + v9) = 1;
      sub_10006E510();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10006E510()
{
  uint64_t v1 = sub_10006C51C(&qword_100455EB0);
  uint64_t result = __chkstk_darwin(v1 - 8, v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)&v0[OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8] >> 60 == 15)
  {
    if (qword_100453710 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for UUID();
    memset(v13, 0, sizeof(v13));
    uint64_t v14 = 0;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = v0;
    type metadata accessor for SERequest();
    uint64_t v8 = swift_allocObject();
    uint64_t v9 = (void *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
    *uint64_t v9 = 0xD000000000000014;
    v9[1] = 0x80000001003B1B90;
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = 1;
    *(void *)(v8 + 16) = 0;
    *(unsigned char *)(v8 + 24) = 1;
    sub_100076148((uint64_t)v13, v8 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, &qword_100454058);
    *(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = 2;
    *(void *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = 0;
    uint64_t v10 = v8 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
    *(void *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
    sub_100076148((uint64_t)v5, v8 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, &qword_100455EB0);
    uint64_t v11 = v8 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
    *(void *)uint64_t v11 = 0;
    *(unsigned char *)(v11 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
    *(void *)(v8 + 32) = sub_10007613C;
    *(void *)(v8 + 40) = v7;
    os_log_type_t v12 = v0;
    sub_100177598(0, v8);
    return swift_release();
  }
  return result;
}

void sub_10006E76C()
{
  uint64_t v3 = v0;
  unint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, unint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, unint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v1 = OBJC_IVAR____TtC10seserviced6LyonSE_isRunning;
  int v11 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning);
  os_log_type_t v12 = Logger.logObject.getter();
  if (v11 != 1)
  {
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v18, "LyonSE is not running", v19, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Stopping LyonSE", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v2 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager);
  unint64_t v4 = *(void *)(v2 + 24);
  if (v4 >> 62)
  {
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    if (v15) {
      goto LABEL_9;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v2 + 32) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
    unint64_t v21 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8);
    *(_OWORD *)(v3 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData) = xmmword_100378280;
    sub_100075868(v20, v21);
    *(unsigned char *)(v3 + v1) = 0;
    return;
  }
  uint64_t v15 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_20;
  }
LABEL_9:
  if (v15 >= 1)
  {
    uint64_t v16 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        uint64_t v17 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v17 = swift_retain();
      }
      ++v16;
      *(void *)(v17 + 16) = 0;
      swift_release();
      swift_release();
    }
    while (v15 != v16);
    goto LABEL_20;
  }
  __break(1u);
}

void sub_10006EAA8(void *a1, char a2, NSObject *a3)
{
  unint64_t v4 = a1;
  if (a2)
  {
    osloga = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      unint64_t v21 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      sub_100075894();
      swift_allocError();
      unsigned char *v22 = (_BYTE)v4;
      uint64_t v76 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v21 = v76;
      _os_log_impl((void *)&_mh_execute_header, osloga, v19, "Failed to get secure element with %@", v20, 0xCu);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return;
  }
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  os_log_t oslog = a3;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    sub_100290514(0xD000000000000012, 0x80000001003B1A40, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Selecting %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v9 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
  if (v10 >> 60 == 15)
  {
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v11, v12);
  uint64_t v76 = 0;
  id v14 = sub_10005666C(v5, isa, &v76);

  if (v14)
  {
    id v15 = (id)v76;

    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v76 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v18 = 136315138;
      sub_100290514(0xD000000000000012, 0x80000001003B1A40, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to select %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    sub_1000758E8(v4, 0);

    return;
  }
  if (!v76) {
    goto LABEL_68;
  }
  uint64_t v23 = (id *)(id)v76;
  unint64_t v24 = sub_10005D558(v23);
  uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  Class v28 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v25, v27);
  uint64_t v29 = self;
  id v30 = [v29 TLVWithData:v28];

  if (!v30)
  {
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if ([v30 tag] == 111)
  {
    unsigned int v70 = v29;
    id v31 = [v30 children];
    if (v31)
    {
      uint64_t v32 = v31;
      sub_10007582C(0, (unint64_t *)&qword_100454048);
      unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v76 = (uint64_t)_swiftEmptyArrayStorage;
      if (v33 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v34)
        {
LABEL_20:
          uint64_t v71 = v4;
          if (v34 < 1)
          {
            __break(1u);
LABEL_62:
            swift_once();
LABEL_40:
            unint64_t v45 = v33 & 0xC000000000000001;
            if (byte_100468520 == 1)
            {
              if (v45)
              {
                id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_44:
                long long v47 = v46;
                swift_release();
                id v48 = [v47 value];

                if (v48)
                {
                  uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v51 = v50;

                  v52.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
                  sub_10006D144(v49, v51);
                }
                else
                {
                  v52.super.Class isa = 0;
                }
                id v59 = [v70 TLVWithTag:0 value:v52.super.isa];

                if (v59)
                {
                  id v55 = [v59 asData];

                  if (!v55) {
                    goto LABEL_54;
                  }
                  goto LABEL_50;
                }
LABEL_71:
                __break(1u);
                return;
              }
              if (*(void *)(v33 + 16))
              {
                id v46 = *(id *)(v33 + 32);
                goto LABEL_44;
              }
              __break(1u);
LABEL_66:
              __break(1u);
            }
            if (v45)
            {
              id v53 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (!*(void *)(v33 + 16)) {
                goto LABEL_66;
              }
              id v53 = *(id *)(v33 + 32);
            }
            long long v54 = v53;
            swift_release();
            id v55 = [v54 asData];

            if (!v55)
            {
LABEL_54:

              sub_1000758E8(v4, 0);
              uint64_t v56 = 0;
              unint64_t v58 = 0xF000000000000000;
              goto LABEL_55;
            }
LABEL_50:
            uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v58 = v57;

            sub_1000758E8(v4, 0);
LABEL_55:
            uint64_t v60 = (uint64_t *)((char *)oslog + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
            uint64_t v61 = *(uint64_t *)((char *)&oslog->isa + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
            unint64_t v62 = *(unint64_t *)((char *)&oslog[1].isa
                                      + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
            uint64_t *v60 = v56;
            v60[1] = v58;
            sub_100075868(v61, v62);

            return;
          }
          for (uint64_t i = 0; i != v34; ++i)
          {
            if ((v33 & 0xC000000000000001) != 0) {
              id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v36 = *(id *)(v33 + 8 * i + 32);
            }
            unint64_t v37 = v36;
            if ([v36 tag] == 165)
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            else
            {
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v33 = v76;
          unint64_t v4 = v71;
          if (v76 < 0) {
            goto LABEL_56;
          }
LABEL_37:
          if ((v33 & 0x4000000000000000) == 0)
          {
            uint64_t v44 = *(void **)(v33 + 16);
            if (v44 != (void *)1)
            {
LABEL_57:
              id v63 = v23;
              id v64 = v30;
              swift_retain();
              unsigned int v65 = Logger.logObject.getter();
              os_log_type_t v66 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v65, v66))
              {
                uint64_t v67 = swift_slowAlloc();
                id v72 = v4;
                id v68 = (void *)swift_slowAlloc();
                *(_DWORD *)uint64_t v67 = 134218242;
                swift_release();
                uint64_t v76 = (uint64_t)v44;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                *(_WORD *)(v67 + 12) = 2112;
                uint64_t v76 = (uint64_t)v64;
                id v69 = v64;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                void *v68 = v30;

                _os_log_impl((void *)&_mh_execute_header, v65, v66, "Select response contains %ld instances of A5 tag %@", (uint8_t *)v67, 0x16u);
                sub_10006C51C(&qword_100455620);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                sub_1000758E8(v72, 0);
              }
              else
              {

                swift_release();
                sub_1000758E8(v4, 0);

                swift_release();
              }

              return;
            }
LABEL_39:
            if (qword_100453670 == -1) {
              goto LABEL_40;
            }
            goto LABEL_62;
          }
LABEL_56:
          swift_bridgeObjectRetain();
          uint64_t v44 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_release();
          if (v44 != (void *)1) {
            goto LABEL_57;
          }
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v34) {
          goto LABEL_20;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v33 = (unint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_56;
      }
      goto LABEL_37;
    }
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  id v38 = v30;
  char v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    id v73 = v23;
    id v41 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = (void *)swift_slowAlloc();
    *(_DWORD *)id v41 = 138412290;
    uint64_t v76 = (uint64_t)v38;
    id v43 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v42 = v30;

    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Invalid Select Response for Lyon %@", v41, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v23 = v73;
    swift_slowDealloc();

    sub_1000758E8(v4, 0);
  }
  else
  {

    sub_1000758E8(v4, 0);
  }
}

void sub_10006F5F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
  {
    if (qword_100453668 != -1) {
      swift_once();
    }
    sub_10007C108(a1);
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 2;
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
    Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C97EC((uint64_t)isa, v8, v10, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
    Class v16 = NSNumber.init(integerLiteral:)(1).super.super.isa;
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = &_swiftEmptyDictionarySingleton;
    sub_1002C97EC((uint64_t)v16, v13, v15, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = self;
    Class v19 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_100050AE4(v18, v19);
  }
  else
  {
    swift_retain_n();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      unint64_t v4 = (uint8_t *)swift_slowAlloc();
      id v5 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v4 = 136315138;
      uint64_t v20 = v5;
      type metadata accessor for UUID();
      sub_100075624();
      uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_100290514(v6, v7, (uint64_t *)&v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "peer %s already disconnected, freeing slot", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_100074A40(a1);
  }
}

void sub_10006FAD4(char a1, NSObject *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v8;
  uint64_t v10 = v7;
  uint64_t v232 = a7;
  uint64_t v231 = a6;
  uint64_t v229 = a5;
  uint64_t v235 = a4;
  unint64_t v233 = a3;
  v234 = a2;
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v12 - 8, v13);
  v230 = (char *)&v209 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v228 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v209 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = ((char *)&v209 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100468A38;
  v23->Class isa = (Class)qword_100468A38;
  (*(void (**)(NSObject *, void, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  id v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  unint64_t v27 = *(void (**)(NSObject *, uint64_t))(v20 + 8);
  unint64_t v26 = v20 + 8;
  v27(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_50:
    if (__OFSUB__(HIDWORD(v23), v23))
    {
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    unint64_t v73 = HIDWORD(v23) - (int)v23;
LABEL_53:
    uint64_t v76 = self;
    if (__OFSUB__(v73, 1))
    {
      __break(1u);
    }
    else if ((uint64_t)(v73 - 1) >= 5)
    {
      uint64_t v77 = (void *)v76;
      uint64_t v78 = Data.subdata(in:)();
      unint64_t v80 = v79;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      unint64_t v82 = v80;
      uint64_t v23 = v234;
      sub_10006D144(v78, v82);
      id v83 = [v77 TLVsWithData:isa];

      if (!v83)
      {
LABEL_66:
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v37, v38)) {
          goto LABEL_16;
        }
        char v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v39 = 0;
        os_log_type_t v40 = "Invalid Auth 0 TLVs";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v37, v38, v40, v39, 2u);
LABEL_14:
        swift_slowDealloc();
        goto LABEL_16;
      }
      v224 = v9;
      sub_10007582C(0, (unint64_t *)&qword_100454048);
      unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v73 >> 62))
      {
        uint64_t v84 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v84) {
          goto LABEL_58;
        }
        goto LABEL_122;
      }
LABEL_121:
      swift_bridgeObjectRetain();
      uint64_t v84 = _CocoaArrayWrapper.endIndex.getter();
      if (v84)
      {
LABEL_58:
        unint64_t v85 = v73 & 0xC000000000000001;
        uint64_t v86 = 4;
        while (1)
        {
          if (v85) {
            id v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v87 = *(id *)(v73 + 8 * v86);
          }
          BOOL v88 = v87;
          uint64_t v89 = v86 - 3;
          if (__OFADD__(v86 - 4, 1))
          {
            __break(1u);
            goto LABEL_97;
          }
          if ([v87 tag] == 65) {
            break;
          }

          ++v86;
          if (v89 == v84)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_95;
          }
        }
        swift_bridgeObjectRelease();
        id v90 = [v88 value];

        if (v90)
        {
          uint64_t v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v93 = v92;

          sub_10006D0EC(v91, v93);
          uint64_t v94 = v224;
          LODWORD(v223) = sub_10007D4A4(v91, v93, 0, 0, 0);
          v224 = v94;
          if (v94)
          {
            swift_bridgeObjectRelease();
            sub_10006D144(v91, v93);
            swift_errorRelease();
            v224 = 0;
            goto LABEL_95;
          }
          uint64_t v221 = v91;
          unint64_t v222 = v93;
          swift_bridgeObjectRetain();
          unint64_t v26 = 4;
          while (1)
          {
            if (v85) {
              id v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v95 = *(id *)(v73 + 8 * v26);
            }
            uint64_t v96 = v95;
            uint64_t v23 = (v26 - 3);
            if (__OFADD__(v26 - 4, 1)) {
              goto LABEL_120;
            }
            if ([v95 tag] == 77) {
              break;
            }

            ++v26;
            if (v23 == v84)
            {
              swift_bridgeObjectRelease_n();
              goto LABEL_94;
            }
          }
          swift_bridgeObjectRelease();
          id v97 = [v96 value];

          if (v97)
          {
            uint64_t v219 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v220 = v98;

            swift_bridgeObjectRetain();
            uint64_t v99 = 4;
            while (1)
            {
              if (v85) {
                id v100 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v100 = *(id *)(v73 + 8 * v99);
              }
              uint64_t v101 = v100;
              uint64_t v102 = v99 - 3;
              if (__OFADD__(v99 - 4, 1)) {
                goto LABEL_133;
              }
              if ([v100 tag] == 76) {
                break;
              }

              ++v99;
              if (v102 == v84)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_93;
              }
            }
            swift_bridgeObjectRelease_n();
            id v103 = [v101 value];

            if (v103)
            {
              uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v106 = v105;

              uint64_t v215 = v104;
              unint64_t v216 = v106;
              uint64_t v217 = Data.subdata(in:)();
              unint64_t v218 = v107;
              if (v223 == 1) {
                *(_DWORD *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = 1;
              }
LABEL_97:
              uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v110 = v109;
              uint64_t v111 = self;
              sub_10006C51C(&qword_100454040);
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = xmmword_100378290;
              *(void *)(inited + 32) = v108;
              *(void *)(inited + 40) = v110;
              sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
              *(NSNumber *)(inited + 4_Block_object_dispose(&STACK[0x2C0], 8) = NSNumber.init(integerLiteral:)(1);
              sub_1001DB390(inited);
              Class v113 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              sub_100050AE4(v111, v113);

              uint64_t v114 = v219;
              unint64_t v115 = v220;
              sub_10006D0EC(v219, v220);
              sub_10023CC58(8, v114, v115, (uint64_t *)&aBlock);
              long long v116 = aBlock;
              uint64_t v118 = *(void *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier);
              unint64_t v117 = *(void *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier + 8);
              LOBYTE(inited) = sub_100088AE4(aBlock, *((unint64_t *)&aBlock + 1), v118, v117);
              sub_10006D144(v116, *((unint64_t *)&v116 + 1));
              if ((inited & 1) == 0)
              {
                swift_retain_n();
                uint64_t v128 = v219;
                unint64_t v129 = v220;
                sub_10006D0EC(v219, v220);
                swift_retain();
                sub_10006D0EC(v128, v129);
                swift_retain();
                id v130 = Logger.logObject.getter();
                os_log_type_t v131 = static os_log_type_t.error.getter();
                v234 = v130;
                LODWORD(v233) = v131;
                if (os_log_type_enabled(v130, v131))
                {
                  uint64_t v132 = swift_slowAlloc();
                  uint64_t v232 = swift_slowAlloc();
                  *(void *)&long long aBlock = v232;
                  *(_DWORD *)uint64_t v132 = 136315650;
                  uint64_t v133 = v224;
                  id v134 = sub_10023CDF4(v118, v117);
                  uint64_t v231 = (uint64_t)v133;
                  uint64_t v240 = (uint64_t)v134;
                  sub_10006C51C((uint64_t *)&unk_100455EA0);
                  sub_1000756D0();
                  uint64_t v135 = BidirectionalCollection<>.joined(separator:)();
                  unint64_t v137 = v136;
                  swift_bridgeObjectRelease();
                  uint64_t v240 = sub_100290514(v135, v137, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  *(_WORD *)(v132 + 12) = 2080;
                  uint64_t v138 = v219;
                  unint64_t v139 = v220;
                  uint64_t v240 = (uint64_t)sub_10023CDF4(v219, v220);
                  uint64_t v140 = BidirectionalCollection<>.joined(separator:)();
                  unint64_t v142 = v141;
                  swift_bridgeObjectRelease();
                  uint64_t v240 = sub_100290514(v140, v142, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006D144(v138, v139);
                  sub_10006D144(v138, v139);
                  *(_WORD *)(v132 + 22) = 2080;
                  swift_retain();
                  uint64_t v143 = UUID.uuidString.getter();
                  unint64_t v145 = v144;
                  swift_release();
                  uint64_t v240 = sub_100290514(v143, v145, (uint64_t *)&aBlock);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  id v146 = v234;
                  _os_log_impl((void *)&_mh_execute_header, v234, (os_log_type_t)v233, "%s does not match %s for %s", (uint8_t *)v132, 0x20u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  swift_release_n();

                  uint64_t v147 = v219;
                  unint64_t v148 = v220;
                  sub_10006D144(v219, v220);
                  sub_10006D144(v147, v148);
                  swift_release_n();
                }
                sub_10007567C();
                swift_allocError();
                *long long v149 = 0;
                swift_willThrow();
                sub_10006D144(v221, v222);
                sub_10006D144(v219, v220);
                sub_10006D144(v217, v218);
                sub_10006D144(v215, v216);
                return;
              }
              id v119 = (void *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
              uint64_t v120 = *(void *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
              unint64_t v121 = *(void *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);
              uint64_t v122 = v219;
              unint64_t v123 = v220;
              *id v119 = v219;
              v119[1] = v123;
              sub_10006D0EC(v122, v123);
              sub_100075868(v120, v121);
              uint64_t v124 = v217;
              unint64_t v125 = v218;
              sub_10006D0EC(v217, v218);
              id v126 = v224;
              int v127 = sub_10007D8AC(v124, v125, 0, 0, 1);
              if (v126)
              {
                swift_errorRelease();
                int v127 = 0;
              }
              uint64_t v9 = 0;
              uint64_t v150 = v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID;
              *(_DWORD *)uint64_t v150 = v127;
              *(unsigned char *)(v150 + 4) = v126 != 0;
              long long v151 = &v10[OBJC_IVAR____TtC10seserviced6LyonSE_logger];
              uint64_t v152 = v219;
              unint64_t v153 = v220;
              sub_10006D0EC(v219, v220);
              swift_retain();
              sub_10006D0EC(v152, v153);
              swift_retain();
              v224 = v151;
              long long v154 = Logger.logObject.getter();
              os_log_type_t v155 = static os_log_type_t.debug.getter();
              v223 = v154;
              LODWORD(v214) = v155;
              if (os_log_type_enabled(v154, v155))
              {
                uint64_t v156 = swift_slowAlloc();
                uint64_t v213 = swift_slowAlloc();
                *(void *)&long long aBlock = v213;
                *(_DWORD *)uint64_t v156 = 136315394;
                uint64_t v212 = v156 + 4;
                uint64_t v157 = v219;
                uint64_t v240 = (uint64_t)sub_10023CDF4(v219, v220);
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_1000756D0();
                uint64_t v158 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v160 = v159;
                swift_bridgeObjectRelease();
                uint64_t v240 = sub_100290514(v158, v160, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                unint64_t v161 = v220;
                sub_10006D144(v157, v220);
                sub_10006D144(v157, v161);
                *(_WORD *)(v156 + 12) = 2080;
                uint64_t v212 = v156 + 14;
                swift_retain();
                uint64_t v162 = UUID.uuidString.getter();
                unint64_t v164 = v163;
                swift_release();
                uint64_t v240 = sub_100290514(v162, v164, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                v165 = v223;
                _os_log_impl((void *)&_mh_execute_header, v223, (os_log_type_t)v214, "Setting reader identifier %s for peer %s", (uint8_t *)v156, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                uint64_t v166 = v219;
                unint64_t v167 = v220;
                sub_10006D144(v219, v220);
                sub_10006D144(v166, v167);
                swift_release_n();
              }
              uint64_t v168 = v217;
              unint64_t v169 = v218;
              sub_10006D0EC(v217, v218);
              swift_retain();
              uint64_t v170 = v215;
              unint64_t v171 = v216;
              sub_10006D0EC(v215, v216);
              sub_10006D0EC(v168, v169);
              swift_retain();
              sub_10006D0EC(v170, v171);
              v172 = Logger.logObject.getter();
              os_log_type_t v173 = static os_log_type_t.debug.getter();
              v224 = v172;
              LODWORD(v223) = v173;
              if (os_log_type_enabled(v172, v173))
              {
                uint64_t v174 = swift_slowAlloc();
                uint64_t v214 = swift_slowAlloc();
                *(void *)&long long aBlock = v214;
                *(_DWORD *)uint64_t v174 = 136315650;
                uint64_t v210 = v174 + 4;
                uint64_t v175 = v217;
                unint64_t v176 = v218;
                v177 = sub_10023CDF4(v217, v218);
                uint64_t v213 = 0;
                uint64_t v240 = (uint64_t)v177;
                uint64_t v212 = sub_10006C51C((uint64_t *)&unk_100455EA0);
                unint64_t v211 = sub_1000756D0();
                uint64_t v178 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v180 = v179;
                swift_bridgeObjectRelease();
                uint64_t v240 = sub_100290514(v178, v180, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10006D144(v175, v176);
                sub_10006D144(v175, v176);
                *(_WORD *)(v174 + 12) = 2080;
                swift_retain();
                uint64_t v181 = UUID.uuidString.getter();
                unint64_t v183 = v182;
                swift_release();
                uint64_t v240 = sub_100290514(v181, v183, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                v209 = (uint8_t *)v174;
                *(_WORD *)(v174 + 22) = 2080;
                uint64_t v210 = v174 + 24;
                uint64_t v184 = v215;
                unint64_t v185 = v216;
                uint64_t v9 = v213;
                uint64_t v240 = (uint64_t)sub_10023CDF4(v215, v216);
                uint64_t v186 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v188 = v187;
                swift_bridgeObjectRelease();
                uint64_t v189 = sub_100290514(v186, v188, (uint64_t *)&aBlock);
                v190 = v209;
                uint64_t v240 = v189;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10006D144(v184, v185);
                sub_10006D144(v184, v185);
                v191 = v224;
                _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v223, "Setting uwb session id %s for peer %s from transaction id %s", v190, 0x20u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                sub_10006D144(v221, v222);
                sub_10006D144(v219, v220);
                sub_10006D144(v217, v218);
                sub_10006D144(v184, v185);
              }
              else
              {
                sub_10006D144(v221, v222);
                sub_10006D144(v219, v220);
                uint64_t v192 = v217;
                unint64_t v193 = v218;
                sub_10006D144(v217, v218);
                uint64_t v194 = v215;
                unint64_t v195 = v216;
                sub_10006D144(v215, v216);

                sub_10006D144(v192, v193);
                sub_10006D144(v192, v193);
                swift_release_n();
                sub_10006D144(v194, v195);
                sub_10006D144(v194, v195);
              }
              char v52 = 1;
              if ((unsigned __int16)v225 <= 0x10BFu)
              {
                if ((unsigned __int16)v225 != 192 && (unsigned __int16)v225 != 195)
                {
                  unint64_t v26 = v233;
                  goto LABEL_127;
                }
              }
              else if ((unsigned __int16)v225 != 4288 && (unsigned __int16)v225 != 4291)
              {
                unint64_t v26 = v233;
                uint64_t v29 = v235;
                BOOL v50 = v226;
                if ((unsigned __int16)v225 == 32897)
                {
LABEL_33:
                  *(_DWORD *)(v29 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = 2;
                  char v52 = v50;
                  goto LABEL_127;
                }
                goto LABEL_127;
              }
              int v49 = *(unsigned __int8 *)(v235 + v227);
              goto LABEL_36;
            }
LABEL_93:
            sub_10006D144(v219, v220);
          }
          else
          {
            swift_bridgeObjectRelease();
          }
LABEL_94:
          sub_10006D144(v221, v222);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
LABEL_95:
        unint64_t v26 = v233;
        uint64_t v23 = v234;
LABEL_123:
        sub_10006D0EC((uint64_t)v23, v26);
        sub_10006D0EC((uint64_t)v23, v26);
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v196 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v37, v196))
        {

          goto LABEL_26;
        }
        v197 = (uint8_t *)swift_slowAlloc();
        uint64_t v235 = swift_slowAlloc();
        *(void *)&long long aBlock = v235;
        *(_DWORD *)v197 = 136315138;
        v234 = (v197 + 4);
        uint64_t v240 = (uint64_t)sub_10023CDF4((uint64_t)v23, v26);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v198 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v200 = v199;
        swift_bridgeObjectRelease();
        uint64_t v240 = sub_100290514(v198, v200, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144((uint64_t)v23, v26);
        sub_10006D144((uint64_t)v23, v26);
        _os_log_impl((void *)&_mh_execute_header, v37, v196, "Tag 0x41, 0x4C 0x4D not found in Auth0 with payload %s", v197, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_14;
      }
LABEL_122:
      swift_bridgeObjectRelease_n();
      goto LABEL_123;
    }
    __break(1u);
LABEL_120:
    __break(1u);
    goto LABEL_121;
  }
  if (v10[OBJC_IVAR____TtC10seserviced6LyonSE_isRunning] != 1)
  {
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
    {
LABEL_16:

      goto LABEL_17;
    }
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v39 = 0;
    os_log_type_t v40 = "Not running";
    goto LABEL_11;
  }
  uint64_t v28 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  uint64_t v29 = v235;
  if (*(unsigned __int8 *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) - 2 > 2)
  {
    swift_retain_n();
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v41))
    {
      swift_release_n();
      goto LABEL_16;
    }
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 136315138;
    *(void *)&long long aBlock = v43;
    LOBYTE(v240) = *(unsigned char *)(v29 + v28);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v240 = sub_100290514(v44, v45, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v41, "received SE message when peer is in invalid state %s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_14;
  }
  if (a1)
  {
    uint64_t v23 = v234;
    unint64_t v26 = v233;
    sub_10006D0EC((uint64_t)v234, v233);
    sub_10006D0EC((uint64_t)v23, v26);
    id v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      *(void *)&long long aBlock = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 16777730;
      LOBYTE(v240) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 5) = 2080;
      uint64_t v235 = v32 + 7;
      uint64_t v240 = (uint64_t)sub_10023CDF4((uint64_t)v23, v26);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      unint64_t v33 = v26;
      sub_1000756D0();
      uint64_t v34 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v36 = v35;
      swift_bridgeObjectRelease();
      uint64_t v240 = sub_100290514(v34, v36, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144((uint64_t)v23, v33);
      sub_10006D144((uint64_t)v23, v33);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Ignoring unknown message with ID %hhu payload %s", (uint8_t *)v32, 0xFu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_17:
      sub_10007567C();
      swift_allocError();
      unsigned char *v46 = 0;
      swift_willThrow();
      return;
    }

LABEL_26:
    sub_10006D144((uint64_t)v23, v26);
    sub_10006D144((uint64_t)v23, v26);
    goto LABEL_17;
  }
  uint64_t v227 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  uint64_t v23 = v234;
  unint64_t v26 = v233;
  int v47 = sub_100071C08((uint64_t)v234, v233);
  if ((v47 & 0x10000) != 0)
  {
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v37, v38)) {
      goto LABEL_16;
    }
    char v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v39 = 0;
    os_log_type_t v40 = "Blocking invalid command";
    goto LABEL_11;
  }
  int v48 = v47;
  if (qword_100453668 != -1) {
    swift_once();
  }
  sub_10007CBEC(0);
  if (v8) {
    return;
  }
  sub_10007CDE4(1, 0x617373656D204553, 0xEA00000000006567);
  uint64_t v9 = 0;
  int v49 = *(unsigned __int8 *)(v29 + v227);
  BOOL v50 = v49 == 2;
  if (v49 == 2)
  {
    int v226 = 1;
    sub_10006D0EC((uint64_t)v23, v26);
    unsigned __int16 v51 = sub_10007D08C((uint64_t)v23, v26, 0, 0, 0);
    int v225 = v48;
    if (v51 == 32896)
    {
      unint64_t v73 = 0;
      switch(v26 >> 62)
      {
        case 1uLL:
          goto LABEL_50;
        case 2uLL:
          Class v75 = v23[2].isa;
          Class v74 = v23[3].isa;
          unint64_t v73 = v74 - v75;
          if (!__OFSUB__(v74, v75)) {
            goto LABEL_53;
          }
          goto LABEL_132;
        case 3uLL:
          goto LABEL_53;
        default:
          unint64_t v73 = BYTE6(v26);
          goto LABEL_53;
      }
    }
    goto LABEL_66;
  }
  char v52 = 0;
  if ((unsigned __int16)v48 > 0x10BFu)
  {
    if ((unsigned __int16)v48 != 4288 && (unsigned __int16)v48 != 4291)
    {
      if ((unsigned __int16)v48 != 32897) {
        goto LABEL_127;
      }
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  if ((unsigned __int16)v48 != 192 && (unsigned __int16)v48 != 195)
  {
LABEL_127:
    if (qword_100453710 != -1) {
      swift_once();
    }
    uint64_t v228 = qword_100468738;
    unint64_t v233 = *(void *)&v10[OBJC_IVAR____TtC10seserviced6LyonSE_seTimeoutInSec];
    uint64_t v201 = type metadata accessor for UUID();
    long long aBlock = 0u;
    long long v237 = 0u;
    v238 = 0;
    uint64_t v202 = *(void *)(v201 - 8);
    uint64_t v203 = (uint64_t)v230;
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v230, v229, v201);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v202 + 56))(v203, 0, 1, v201);
    uint64_t v204 = swift_allocObject();
    *(unsigned char *)(v204 + 16) = v52;
    uint64_t v205 = v235;
    *(void *)(v204 + 24) = v10;
    *(void *)(v204 + 32) = v205;
    v206 = v234;
    *(void *)(v204 + 40) = v234;
    *(void *)(v204 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v26;
    type metadata accessor for SERequest();
    swift_allocObject();
    swift_retain();
    sub_10006D0EC((uint64_t)v206, v26);
    swift_retain();
    v207 = v10;
    v208 = sub_100192C8C(0xD000000000000017, 0x80000001003B19C0, v52, v233, 0, (uint64_t)&aBlock, 2, v205, v232, 0, v203, v231, 0, (uint64_t)sub_100075774, v204);
    if (v208)
    {
      sub_100177598(0, (uint64_t)v208);
      swift_release();
      return;
    }
LABEL_134:
    __break(1u);
    JUMPOUT(0x100071BF8);
  }
LABEL_36:
  if (v49 != 3)
  {
LABEL_45:
    uint64_t v64 = v235;
    uint64_t v65 = *(void *)(v235 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper);
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = v64;
    *(void *)(v66 + 24) = v10;
    uint64_t v67 = *(void **)(v65 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper);
    swift_retain();
    id v68 = v10;
    Class v69 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v70 = qword_100468A38;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = sub_1000757C8;
    *(void *)(v71 + 24) = v66;
    v238 = sub_10007580C;
    uint64_t v239 = v71;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v237 = sub_100075568;
    *((void *)&v237 + 1) = &unk_100410270;
    id v72 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v67 processUnifiedAccessStepupAPDU:v69 callbackQueue:v70 responseHandler:v72];
    _Block_release(v72);
    swift_release();

    return;
  }
  uint64_t v53 = v235;
  *(unsigned char *)(v235 + v227) = 4;
  sub_10028D64C();
  if (!v9)
  {
    int v54 = *(_DWORD *)(v53 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode);
    if (v54 == 3) {
      int v55 = 6;
    }
    else {
      int v55 = 5;
    }
    if (v54 == 1) {
      int v56 = 4;
    }
    else {
      int v56 = v55;
    }
    *(_DWORD *)(v53 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = v56;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    uint64_t v58 = v57;
    (*(void (**)(char *, uint64_t))(v228 + 8))(v18, v15);
    uint64_t v59 = v53 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime;
    *(void *)uint64_t v59 = v58;
    *(unsigned char *)(v59 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
    uint64_t v60 = self;
    sub_10006C51C(&qword_100454040);
    uint64_t v61 = swift_initStackObject();
    *(_OWORD *)(v61 + 16) = xmmword_100378290;
    *(void *)(v61 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v61 + 40) = v62;
    sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
    *(NSNumber *)(v61 + 4_Block_object_dispose(&STACK[0x2C0], 8) = NSNumber.init(integerLiteral:)(1);
    sub_1001DB390(v61);
    Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_100050AE4(v60, v63);

    goto LABEL_45;
  }
}

uint64_t sub_100071C08(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1000721F8);
  }
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v11) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_32;
      }
      uint64_t v11 = (int)v11;
LABEL_9:
      if (v11 < 4)
      {
LABEL_10:
        sub_10006D0EC(a1, a2);
        sub_10006D0EC(a1, a2);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          v32[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 136315138;
          id v30 = v17 + 4;
          uint64_t v31 = (uint64_t)sub_10023CDF4(a1, a2);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_1000756D0();
          uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v20 = v19;
          swift_bridgeObjectRelease();
          uint64_t v31 = sub_100290514(v18, v20, v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(a1, a2);
          sub_10006D144(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Payload is too short %s", v17, 0xCu);
          int v21 = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          unsigned __int16 v22 = 0;
          return v22 | (v21 << 16);
        }
LABEL_29:

        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        unsigned __int16 v22 = 0;
        int v21 = 1;
        return v22 | (v21 << 16);
      }
      sub_10006D0EC(a1, a2);
      unsigned __int16 v22 = sub_10007D08C(a1, a2, 0, 0, 0);
      int v21 = 0;
      if (v22 <= 0x807Fu)
      {
        if (v22 > 0x10BFu)
        {
          if (v22 == 4288 || v22 == 4291) {
            return v22 | (v21 << 16);
          }
        }
        else if (v22 == 192 || v22 == 195)
        {
          return v22 | (v21 << 16);
        }
LABEL_27:
        sub_10006D0EC(a1, a2);
        sub_10006D0EC(a1, a2);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          v32[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 136315138;
          id v30 = v24 + 4;
          uint64_t v31 = (uint64_t)sub_10023CDF4(a1, a2);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_1000756D0();
          uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v27 = v26;
          swift_bridgeObjectRelease();
          uint64_t v31 = sub_100290514(v25, v27, v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(a1, a2);
          sub_10006D144(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v15, v23, "Blocked command %s", v24, 0xCu);
          int v21 = 1;
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          unsigned __int16 v22 = 0;
          return v22 | (v21 << 16);
        }
        goto LABEL_29;
      }
      if (v22 > 0x80D0u)
      {
        if (v22 == 32977 || v22 == 36993 || v22 == 37073) {
          return v22 | (v21 << 16);
        }
        goto LABEL_27;
      }
      if (v22 - 32896 >= 2 && v22 != 32969) {
        goto LABEL_27;
      }
      return v22 | (v21 << 16);
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      BOOL v14 = __OFSUB__(v12, v13);
      uint64_t v11 = v12 - v13;
      if (!v14) {
        goto LABEL_9;
      }
      goto LABEL_33;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_9;
  }
}

uint64_t sub_100072208(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
LABEL_15:
    sub_10007C594(a4, 0);
    return swift_errorRelease();
  }
  os_log_type_t v16 = &OBJC_PROTOCOL___SEServerProtocol;
  if (a3)
  {
    sub_10007587C(a1, a2, 1);
    sub_10007587C(a1, a2, 1);
    swift_retain();
    sub_10007587C(a1, a2, 1);
    swift_retain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    int v19 = v18;
    char v39 = v17;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      v41[0] = v38;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_retain();
      uint64_t v21 = UUID.uuidString.getter();
      HIDWORD(v37) = v19;
      unint64_t v23 = v22;
      swift_release();
      uint64_t v40 = sub_100290514(v21, v23, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v40 = sub_100290514(v24, v25, v41);
      os_log_type_t v16 = &OBJC_PROTOCOL___SEServerProtocol;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100075888(a1, a2, 1);
      sub_100075888(a1, a2, 1);
      unint64_t v26 = v39;
      _os_log_impl((void *)&_mh_execute_header, v39, BYTE4(v37), "Failed to handle stepup command for %s %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      sub_100075888(a1, a2, 1);
      sub_100075888(a1, a2, 1);
    }
    sub_10007567C();
    unint64_t v27 = swift_allocError();
    *uint64_t v28 = 0;
    char v39 = v27;
    swift_willThrow();
    sub_100075888(a1, a2, a3 & 1);
    swift_retain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      v41[0] = v32;
      swift_retain();
      uint64_t v33 = UUID.uuidString.getter();
      unint64_t v35 = v34;
      swift_release();
      uint64_t v40 = sub_100290514(v33, v35, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Could handle stepup response for %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (v16[22].inst_props == (__objc2_prop_list *)-1) {
      goto LABEL_15;
    }
    goto LABEL_17;
  }
  sub_10006D0EC(a1, a2);
  if (qword_100453668 != -1) {
    swift_once();
  }
  sub_10007DFFC(0, 1, a1, a2, a4);
  sub_10007CBEC(1);
  sub_10007CDE4(0, 0x2070752D70657453, 0xEF6567617373656DLL);
  return sub_100075888(a1, a2, 0);
}

void sub_100072854(void *a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v80 = (void *)a7;
  uint64_t v12 = type metadata accessor for Date();
  __chkstk_darwin(v12, v13);
  os_log_type_t v16 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    char v33 = (char)a1;
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      v83[0] = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v36 = 136315138;
      LOBYTE(v82[0]) = v33;
      sub_100075894();
      uint64_t v37 = Error.localizedDescription.getter();
      v82[0] = sub_100290514(v37, v38, (uint64_t *)v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to get SE %s", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100075894();
    uint64_t v31 = swift_allocError();
    *char v39 = v33;
    swift_willThrow();
    goto LABEL_25;
  }
  if (a3)
  {
    uint64_t v75 = v14;
    uint64_t v78 = a5;
    uint64_t v79 = a4;
    uint64_t v17 = (uint8_t *)(a4 + OBJC_IVAR____TtC10seserviced6LyonSE_logger);
    id v18 = a1;
    uint64_t v76 = v17;
    uint64_t v77 = v18;
    int v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v83[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      v82[0] = sub_100290514(0xD000000000000012, 0x80000001003B1A40, (uint64_t *)v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Selecting %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v22 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
    a5 = v78;
    if (v23 >> 60 == 15)
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v24 = v22;
    unint64_t v25 = v23;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v24, v25);
    id v27 = sub_100056638(v77, isa);

    if (v27)
    {

      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
        v83[0] = (id)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v30 = 136315138;
        v82[0] = sub_100290514(0xD000000000000012, 0x80000001003B1A40, (uint64_t *)v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to select %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_10007567C();
      uint64_t v31 = swift_allocError();
      *uint64_t v32 = 0;
      swift_willThrow();
      sub_1000758E8(a1, 0);
      goto LABEL_25;
    }
    *(unsigned char *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 3;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    uint64_t v42 = v41;
    (*(void (**)(char *, uint64_t))(v75 + 8))(v16, v12);
    uint64_t v43 = a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime;
    *(void *)uint64_t v43 = v42;
    *(unsigned char *)(v43 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
    a4 = v79;
  }
  else
  {
    id v40 = a1;
  }
  Class v44 = Data._bridgeToObjectiveC()().super.isa;
  v83[0] = 0;
  unint64_t v45 = (id *)sub_10005603C(a1, (uint64_t)v44, v83);

  if (!v45)
  {
    id v52 = v83[0];
    uint64_t v31 = _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_1000758E8(a1, 0);
LABEL_25:
    swift_retain_n();
    int v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      int v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      *(_DWORD *)int v56 = 136315138;
      *(void *)&long long v84 = v57;
      unint64_t v80 = (void *)v31;
      swift_retain();
      uint64_t v58 = UUID.uuidString.getter();
      unint64_t v60 = v59;
      swift_release();
      uint64_t v81 = sub_100290514(v58, v60, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "SERequest failed, disconnecting for %s", v56, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (qword_100453668 != -1) {
      swift_once();
    }
    sub_10007C594(a5, 0);
    swift_errorRelease();
    return;
  }
  long long v84 = xmmword_100378280;
  id v46 = v83[0];
  if (sub_10005D5A8((uint64_t)v45) != 36864)
  {
    sub_100073478(a1, a5);
    int v61 = sub_10005D5A8((uint64_t)v45);
    unint64_t v80 = v45;
    if (v61 != 36865) {
      goto LABEL_18;
    }
    uint64_t v78 = a5;
    uint64_t v62 = sub_10005D558(v45);
    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v65 = v64;

    *(void *)&long long v84 = v63;
    *((void *)&v84 + 1) = v65;
    LOWORD(v82[0]) = 144;
    v83[3] = &type metadata for UnsafeRawBufferPointer;
    void v83[4] = &protocol witness table for UnsafeRawBufferPointer;
    v83[0] = v82;
    v83[1] = (char *)v82 + 2;
    sub_100075908(v83, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)v83);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v66, v67))
    {

      a5 = v78;
      goto LABEL_18;
    }
    uint64_t v79 = a4;
    id v68 = (uint8_t *)swift_slowAlloc();
    uint64_t v77 = (void *)swift_slowAlloc();
    v83[0] = v77;
    *(_DWORD *)id v68 = 136315138;
    swift_beginAccess();
    unint64_t v69 = *((void *)&v84 + 1);
    if (*((void *)&v84 + 1) >> 60 != 15)
    {
      uint64_t v70 = v84;
      uint64_t v76 = v68 + 4;
      sub_10006D0EC(v84, *((unint64_t *)&v84 + 1));
      uint64_t v81 = (uint64_t)sub_10023CDF4(v70, v69);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v71 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v73 = v72;
      swift_bridgeObjectRelease();
      sub_100075868(v70, v69);
      uint64_t v81 = sub_100290514(v71, v73, (uint64_t *)v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Sending %s", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a5 = v78;
      a4 = v79;
      goto LABEL_18;
    }
LABEL_37:
    __break(1u);
    return;
  }
  unint64_t v80 = v45;
LABEL_18:
  uint64_t v79 = a4;
  if (qword_100453668 != -1) {
    swift_once();
  }
  swift_beginAccess();
  long long v47 = v84;
  unint64_t v49 = *((void *)&v84 + 1);
  uint64_t v48 = v84;
  if (*((void *)&v84 + 1) >> 60 == 15)
  {
    id v50 = (id)sub_100014F20((uint64_t)v80);
    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v51;
  }
  sub_1000758F4(v47, *((unint64_t *)&v47 + 1));
  sub_10007DFFC(0, 1, v48, v49, a5);
  sub_10006D144(v48, v49);
  sub_10007CBEC(1);
  uint64_t v53 = v80;
  sub_10007CDE4(0, 0x67617373654D4553, 0xE900000000000065);
  sub_100075868(v47, *((unint64_t *)&v47 + 1));

  sub_1000758E8(a1, 0);
}

void sub_100073478(void *a1, uint64_t a2)
{
  uint64_t inited = v2;
  long long v149 = 0;
  id v5 = sub_100056348(a1, 128, 175, 0, 0, 0, 0, &v149);
  id v6 = v149;
  if (!v5)
  {
    uint64_t v94 = v149;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return;
  }
  uint64_t v7 = v5;
  uint64_t v8 = self;
  uint64_t v9 = v7;
  id v10 = v6;
  uint64_t v132 = v9;
  uint64_t v11 = sub_10005D558(v9);
  unint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  v15.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v12, v14);
  id v133 = v8;
  id v16 = [v8 TLVsWithData:v15.super.isa];

  if (!v16) {
    goto LABEL_149;
  }
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62) {
    goto LABEL_129;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
  {
LABEL_130:
    long long v116 = v132;

    swift_bridgeObjectRelease();
LABEL_131:

    return;
  }
LABEL_5:
  unint64_t v18 = 0;
  unint64_t v140 = v12 & 0xC000000000000001;
  unint64_t v134 = v12 + 32;
  uint64_t v135 = v12 & 0xFFFFFFFFFFFFFF8;
  unint64_t v139 = v12;
  uint64_t v138 = v17;
  while (2)
  {
    if (v140)
    {
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v18 >= *(void *)(v135 + 16)) {
        goto LABEL_128;
      }
      id v19 = *(id *)(v134 + 8 * v18);
    }
    os_log_type_t v20 = v19;
    BOOL v21 = __OFADD__(v18, 1);
    unint64_t v22 = v18 + 1;
    unint64_t v12 = (unint64_t)&selRef_setDesignation_designation_handoffToken_completion_;
    if (v21) {
      goto LABEL_121;
    }
    if ([v19 tag] != 130)
    {
      unint64_t v39 = v22;
      id v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Get event returned unexpected tag", v42, 2u);
        swift_slowDealloc();
      }

      unint64_t v12 = v139;
      unint64_t v18 = v39;
      goto LABEL_7;
    }
    unint64_t v136 = v22;
    id v23 = [v20 value];
    if (!v23) {
      goto LABEL_144;
    }
    uint64_t v24 = v23;
    unint64_t v25 = v20;
    unint64_t v26 = [v23 u8:0];

    id v27 = [v25 value];
    if (!v27) {
      goto LABEL_145;
    }
    uint64_t v28 = v27;
    os_log_type_t v29 = (char *)[v27 u8:1];

    id v30 = [v25 value];
    if (!v30) {
      goto LABEL_146;
    }
    uint64_t v31 = v30;
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    unint64_t v137 = v25;
    id v35 = [v25 value];
    if (!v35) {
      goto LABEL_147;
    }
    unint64_t v36 = v35;
    v15.super.Class isa = (Class)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v37;

    switch(v12 >> 62)
    {
      case 1uLL:
        sub_10006D144((uint64_t)v15.super.isa, v12);
        if (__OFSUB__(HIDWORD(v15.super.isa), v15.super.isa))
        {
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          swift_once();
LABEL_113:
          if (!*(void *)(qword_1004688B8 + 16))
          {
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            sub_10006D144(v148, v145);
            __break(1u);
LABEL_143:
            sub_10006D144(v148, v145);
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
          }
          LOWORD(v149) = *(_WORD *)(qword_1004688B8 + 32);
          uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(inited + 120) = v12;
          *(void *)(inited + 96) = v120;
          *(void *)(inited + 104) = v121;
          unint64_t v122 = sub_1001DB224(inited);
          sub_1002B9140((uint64_t)v15.super.isa + 33, 0x80000001003B1A90, (uint64_t)v29, (unint64_t)v26, (uint64_t)v34, v3, v122);
          swift_bridgeObjectRelease();
          sub_100075868((uint64_t)v34, v3);
          sub_100075868((uint64_t)v29, (unint64_t)v26);
          unint64_t v112 = v145;
          uint64_t v47 = v148;
LABEL_115:
          sub_10006D0EC(v47, v112);
          sub_10006D0EC(v47, v112);
          unint64_t v123 = Logger.logObject.getter();
          os_log_type_t v124 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v123, v124))
          {
            unint64_t v125 = (uint8_t *)swift_slowAlloc();
            long long v149 = (void *)swift_slowAlloc();
            *(_DWORD *)unint64_t v125 = 136315138;
            uint64_t v151 = (uint64_t)sub_10023CDF4(v47, v145);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_1000756D0();
            uint64_t v126 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v128 = v127;
            swift_bridgeObjectRelease();
            uint64_t v151 = sub_100290514(v126, v128, (uint64_t *)&v149);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v47, v145);
            sub_10006D144(v47, v145);
            _os_log_impl((void *)&_mh_execute_header, v123, v124, "Received error event with payload %s, disconnecting peer ", v125, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            unint64_t v112 = v145;
            swift_slowDealloc();
          }
          else
          {

            sub_10006D144(v47, v112);
            sub_10006D144(v47, v112);
          }
          sub_10007567C();
          swift_allocError();
          *unint64_t v129 = 0;
          swift_willThrow();

          sub_10006D144(v47, v112);
          return;
        }
        uint64_t v38 = HIDWORD(v15.super.isa) - LODWORD(v15.super.isa);
LABEL_25:
        if (v38 < 2) {
          goto LABEL_151;
        }
        uint64_t v148 = Data.subdata(in:)();
        unint64_t v145 = v44;
        sub_10006D144(v32, (unint64_t)v34);
        sub_100074A38();
        sub_100074A38();
        sub_100074A38();
        sub_100074A38();
        unint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.debug.getter();
        unint64_t v12 = v46;
        if (os_log_type_enabled(v45, v46))
        {
          v15.super.Class isa = (Class)swift_slowAlloc();
          *(_DWORD *)v15.super.Class isa = 16777728;
          *((unsigned char *)v15.super.isa + 4) = (_BYTE)v26;
          *(_WORD *)((char *)v15.super.isa + 5) = 256;
          *((unsigned char *)v15.super.isa + 7) = (_BYTE)v29;
          _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v12, "Received event with type 0x%hhx and version 0x%hhx", (uint8_t *)v15.super.isa, 8u);
          swift_slowDealloc();
        }

        if (v26 != 21)
        {
          uint64_t v47 = v148;
          if (v26 == 22)
          {
            swift_bridgeObjectRelease();
            sub_10006D0EC(v148, v145);
            __int16 v110 = sub_10007D08C(v148, v145, 0, 0, 0);
            if (inited)
            {
              swift_errorRelease();
              __int16 v111 = 0;
            }
            else
            {
              __int16 v111 = v110;
            }
            v15.super.Class isa = (Class)0xD000000000000020;
            os_log_type_t v29 = (char *)sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
            unint64_t v26 = v117;
            unint64_t v34 = *(uint8_t **)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
            int64_t v3 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
            sub_10006C51C(&qword_1004555D0);
            uint64_t inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = xmmword_1003782A0;
            *(void *)(inited + 32) = 0xD000000000000020;
            *(void *)(inited + 40) = 0x80000001003B1A60;
            long long v149 = 0;
            unint64_t v150 = 0xE000000000000000;
            LOWORD(v151) = v111;
            sub_1000758F4((uint64_t)v34, v3);
            v118._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v118);
            swift_bridgeObjectRelease();
            unint64_t v119 = v150;
            unint64_t v12 = (unint64_t)&type metadata for String;
            *(void *)(inited + 4_Block_object_dispose(&STACK[0x2C0], 8) = v149;
            *(void *)(inited + 56) = v119;
            *(void *)(inited + 72) = &type metadata for String;
            *(void *)(inited + 80) = 0xD000000000000020;
            *(void *)(inited + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0x80000001003B1AE0;
            if (qword_1004537D0 == -1) {
              goto LABEL_113;
            }
            goto LABEL_138;
          }
          if (v26 == 23)
          {
            swift_bridgeObjectRelease();
            unint64_t v112 = v145;
            goto LABEL_115;
          }
          os_log_type_t v29 = (char *)v145;
          sub_10006D0EC(v148, v145);
          sub_10006D0EC(v148, v145);
          uint64_t v48 = Logger.logObject.getter();
          int64_t v3 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v48, (os_log_type_t)v3))
          {
            unint64_t v12 = v145 >> 62;
            unint64_t v34 = (uint8_t *)swift_slowAlloc();
            uint64_t v151 = swift_slowAlloc();
            *(_DWORD *)unint64_t v34 = 136315138;
            unint64_t v26 = _swiftEmptyArrayStorage;
            v15.super.Class isa = (Class)v148;
            switch(v145 >> 62)
            {
              case 1uLL:
                uint64_t v143 = inited;
                if (__OFSUB__(HIDWORD(v148), v148)) {
                  goto LABEL_135;
                }
                uint64_t inited = HIDWORD(v148) - (int)v148;
LABEL_62:
                if (inited)
                {
                  os_log_type_t v29 = (char *)(inited & ~(inited >> 63));
                  sub_1002CF974(0, (int64_t)v29, 0);
                  v15.super.Class isa = (Class)v148;
                  unint64_t v26 = _swiftEmptyArrayStorage;
                  os_log_type_t v131 = v34;
                  unsigned int v130 = v3;
                  if (!v12)
                  {
                    if ((inited & 0x8000000000000000) == 0)
                    {
                      int64_t v3 = 0;
                      goto LABEL_71;
                    }
                    goto LABEL_137;
                  }
                  if (v12 == 1) {
                    int64_t v3 = (int)v148;
                  }
                  else {
                    int64_t v3 = *(void *)(v148 + 16);
                  }
                  if (inited < 0) {
                    goto LABEL_134;
                  }
                  do
                  {
LABEL_71:
                    if (!v29) {
                      goto LABEL_120;
                    }
                    if (v12)
                    {
                      if (v12 == 1)
                      {
                        if (v3 < (int)v148 || v3 >= v148 >> 32) {
                          goto LABEL_122;
                        }
                        uint64_t v78 = __DataStorage._bytes.getter();
                        if (!v78) {
                          goto LABEL_142;
                        }
                        unint64_t v12 = v78;
                        uint64_t v79 = __DataStorage._offset.getter();
                        int64_t v80 = v3 - v79;
                        if (__OFSUB__(v3, v79)) {
                          goto LABEL_125;
                        }
                      }
                      else
                      {
                        if (v3 < *((void *)v15.super.isa + 2)) {
                          goto LABEL_124;
                        }
                        if (v3 >= *((void *)v15.super.isa + 3)) {
                          goto LABEL_126;
                        }
                        uint64_t v82 = __DataStorage._bytes.getter();
                        if (!v82) {
                          goto LABEL_143;
                        }
                        unint64_t v12 = v82;
                        uint64_t v83 = __DataStorage._offset.getter();
                        int64_t v80 = v3 - v83;
                        if (__OFSUB__(v3, v83)) {
                          goto LABEL_127;
                        }
                      }
                      char v81 = *(unsigned char *)(v12 + v80);
                    }
                    else
                    {
                      if (v3 >= BYTE6(v145)) {
                        goto LABEL_123;
                      }
                      LOWORD(v149) = v15.super.isa;
                      BYTE2(v149) = BYTE2(v15.super.isa);
                      BYTE3(v149) = BYTE3(v15.super.isa);
                      BYTE4(v149) = BYTE4(v148);
                      BYTE5(v149) = BYTE5(v15.super.isa);
                      BYTE6(v149) = BYTE6(v15.super.isa);
                      HIBYTE(v149) = HIBYTE(v15.super.isa);
                      LODWORD(v150) = v145;
                      WORD2(v150) = WORD2(v145);
                      char v81 = *((unsigned char *)&v149 + v3);
                    }
                    sub_10006C51C(&qword_100457200);
                    uint64_t v84 = swift_allocObject();
                    *(_OWORD *)(v84 + 16) = xmmword_100378290;
                    *(void *)(v84 + 56) = &type metadata for UInt8;
                    *(void *)(v84 + 64) = &protocol witness table for UInt8;
                    *(unsigned char *)(v84 + 32) = v81;
                    uint64_t v85 = String.init(format:_:)();
                    uint64_t v87 = v86;
                    unint64_t v89 = _swiftEmptyArrayStorage[2];
                    unint64_t v88 = _swiftEmptyArrayStorage[3];
                    if (v89 >= v88 >> 1) {
                      sub_1002CF974(v88 > 1, v89 + 1, 1);
                    }
                    _swiftEmptyArrayStorage[2] = v89 + 1;
                    id v90 = &_swiftEmptyArrayStorage[2 * v89];
                    v90[4] = v85;
                    v90[5] = v87;
                    ++v3;
                    --v29;
                    --inited;
                    unint64_t v12 = v145 >> 62;
                    v15.super.Class isa = (Class)v148;
                  }
                  while (inited);
                  uint64_t inited = v143;
                  unint64_t v34 = v131;
                  int64_t v3 = v130;
                }
                else
                {
                  uint64_t inited = v143;
                }
LABEL_91:
                long long v149 = _swiftEmptyArrayStorage;
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_1000756D0();
                uint64_t v91 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v93 = v92;
                swift_bridgeObjectRelease();
                long long v149 = (void *)sub_100290514(v91, v93, &v151);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10006D144((uint64_t)v15.super.isa, v145);
                sub_10006D144((uint64_t)v15.super.isa, v145);
                _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v3, "Received unknown event with payload %s, ignoring", v34, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                sub_10006D144((uint64_t)v15.super.isa, v145);
                break;
              case 2uLL:
                uint64_t v143 = inited;
                uint64_t v77 = *(void *)(v148 + 16);
                uint64_t v76 = *(void *)(v148 + 24);
                uint64_t inited = v76 - v77;
                if (!__OFSUB__(v76, v77)) {
                  goto LABEL_62;
                }
                goto LABEL_136;
              case 3uLL:
                goto LABEL_91;
              default:
                uint64_t v143 = inited;
                uint64_t inited = BYTE6(v145);
                goto LABEL_62;
            }
            goto LABEL_95;
          }

          sub_10006D144(v148, v145);
          sub_10006D144(v148, v145);
          uint64_t v74 = v148;
          unint64_t v75 = v145;
LABEL_94:
          sub_10006D144(v74, v75);
LABEL_95:
          unint64_t v12 = v139;
          unint64_t v18 = v136;
LABEL_7:
          if (v18 == v138) {
            goto LABEL_130;
          }
          continue;
        }
        if (v29 != 16)
        {
          swift_bridgeObjectRelease();
          sub_100074A38();
          sub_100074A38();
          Class v113 = Logger.logObject.getter();
          os_log_type_t v114 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v113, v114))
          {
            unint64_t v115 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)unint64_t v115 = 16777472;
            LOBYTE(v149) = (_BYTE)v29;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v113, v114, "Received notify share session with unsupported version 0x%hhx and expected version 0x10", v115, 5u);
            swift_slowDealloc();
          }

          long long v116 = v132;
          sub_10006D144(v148, v145);

          goto LABEL_131;
        }
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v50 = [v133 TLVsWithData:isa];

        if (!v50)
        {
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          sub_10006D144((uint64_t)v15.super.isa, v12);
LABEL_151:
          __break(1u);
          JUMPOUT(0x100074A18);
        }
        unint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v51 >> 62))
        {
          uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v52) {
            goto LABEL_38;
          }
          goto LABEL_93;
        }
        swift_bridgeObjectRetain();
        uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v52)
        {
LABEL_93:

          swift_bridgeObjectRelease();
          uint64_t v74 = v148;
          unint64_t v75 = v145;
          goto LABEL_94;
        }
LABEL_38:
        unint64_t v147 = v51 & 0xC000000000000001;
        uint64_t v53 = 4;
        uint64_t v141 = v52;
        unint64_t v142 = v51;
        while (2)
        {
          if (v147) {
            id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v54 = *(id *)(v51 + 8 * v53);
          }
          os_log_type_t v55 = v54;
          int64_t v3 = v53 - 3;
          if (__OFADD__(v53 - 4, 1))
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            swift_bridgeObjectRetain();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (!v17) {
              goto LABEL_130;
            }
            goto LABEL_5;
          }
          unsigned int v56 = [v54 tag];
          if (v56 == 128)
          {
            uint64_t v65 = v55;
            id v66 = [v55 value];
            if (!v66) {
              goto LABEL_140;
            }
            os_log_type_t v67 = v66;
            uint64_t v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v12 = v69;

            sub_10026549C(v68, v12, a2);
            if (inited)
            {
              sub_10006D144(v68, v12);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_errorRetain();
              swift_errorRetain();
              uint64_t v102 = Logger.logObject.getter();
              os_log_type_t v103 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v102, v103))
              {
                unint64_t v105 = (uint8_t *)swift_slowAlloc();
                unint64_t v106 = (void *)swift_slowAlloc();
                *(_DWORD *)unint64_t v105 = 138412290;
                swift_errorRetain();
                unint64_t v107 = (void *)_swift_stdlib_bridgeErrorToNSError();
                long long v149 = v107;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *unint64_t v106 = v107;
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v102, v103, "Could not create BLE secure channel for peer with %@", v105, 0xCu);
                sub_10006C51C(&qword_100455620);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_errorRelease();
                swift_errorRelease();
              }
              sub_10007567C();
              swift_allocError();
              *uint64_t v109 = 0;
              swift_willThrow();

              sub_10006D144(v148, v145);
              swift_errorRelease();

              return;
            }

            sub_10006D144(v68, v12);
LABEL_40:
            uint64_t v52 = v141;
            unint64_t v51 = v142;
LABEL_41:
            ++v53;
            if (v3 == v52) {
              goto LABEL_93;
            }
            continue;
          }
          break;
        }
        if (v56 != 129)
        {
          id v70 = v55;
          uint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.info.getter();
          unint64_t v12 = v72;
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v73 = swift_slowAlloc();
            *(_DWORD *)uint64_t v73 = 67109120;
            *(_DWORD *)(v73 + 4) = [v70 tag];

            _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v12, "Ignoring unknown tag value %u for get event", (uint8_t *)v73, 8u);
            swift_slowDealloc();
          }
          else
          {
          }
          goto LABEL_41;
        }
        uint64_t v57 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        unint64_t v58 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        if (v58 >> 60 != 15)
        {
          uint64_t v144 = inited;
          unint64_t v12 = *v57;
          sub_10006D0EC(*v57, v58);
          id v59 = [v55 value];
          if (!v59) {
            goto LABEL_141;
          }
          unint64_t v60 = v55;
          int v61 = v59;
          uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v64 = v63;

          sub_10028E058(v62, v64, v12, v58);
          sub_10006D144(v62, v64);
          sub_100075868(v12, v58);
          uint64_t inited = v144;
          goto LABEL_40;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain_n();
        id v95 = Logger.logObject.getter();
        os_log_type_t v96 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v95, v96))
        {
          id v97 = (uint8_t *)swift_slowAlloc();
          unint64_t v98 = (void *)swift_slowAlloc();
          *(_DWORD *)id v97 = 136315138;
          long long v149 = v98;
          swift_retain();
          uint64_t v99 = UUID.uuidString.getter();
          unint64_t v101 = v100;
          swift_release();
          uint64_t v151 = sub_100290514(v99, v101, (uint64_t *)&v149);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Key identifier not set for peer %s", v97, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        sub_10007567C();
        swift_allocError();
        *uint64_t v108 = 0;
        swift_willThrow();

        sub_10006D144(v148, v145);
        return;
      case 2uLL:
        int64_t v3 = *((void *)v15.super.isa + 2);
        uint64_t v43 = *((void *)v15.super.isa + 3);
        sub_10006D144((uint64_t)v15.super.isa, v12);
        uint64_t v38 = v43 - v3;
        if (!__OFSUB__(v43, v3)) {
          goto LABEL_25;
        }
        goto LABEL_133;
      case 3uLL:
        goto LABEL_150;
      default:
        sub_10006D144((uint64_t)v15.super.isa, v12);
        uint64_t v38 = BYTE6(v12);
        goto LABEL_25;
    }
  }
}

uint64_t sub_100074A38()
{
  return 0;
}

void sub_100074A40(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 24);
  if (v2 >> 62)
  {
LABEL_21:
    swift_bridgeObjectRetain_n();
    swift_retain();
    int64_t v3 = (void (*)(void))_CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_3;
    }
  }
  else
  {
    int64_t v3 = *(void (**)(void))((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_retain();
    if (v3)
    {
LABEL_3:
      uint64_t v4 = 4;
      uint64_t v5 = a1;
      while (1)
      {
        uint64_t v6 = v4 - 4;
        if ((v2 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v8 = (void (*)(void))(v4 - 3);
          if (__OFADD__(v6, 1)) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v2 + 8 * v4);
          swift_retain();
          uint64_t v8 = (void (*)(void))(v4 - 3);
          if (__OFADD__(v6, 1))
          {
LABEL_20:
            __break(1u);
            goto LABEL_21;
          }
        }
        if (*(void *)(v7 + 16))
        {
          swift_retain();
          swift_retain();
          char v9 = static UUID.== infix(_:_:)();
          swift_release();
          swift_release();
          if (v9) {
            break;
          }
        }
        swift_release();
        ++v4;
        if (v8 == v3) {
          goto LABEL_22;
        }
      }
      swift_release();
      swift_bridgeObjectRelease_n();
      id v10 = (uint64_t *)(v23 + 32);
      swift_beginAccess();
      if (!*(void *)(*(void *)(v23 + 32) + 16))
      {
        *(void *)(v7 + 16) = 0;
        swift_release();
        swift_release();
        return;
      }
      swift_beginAccess();
      uint64_t v11 = *v10;
      if (*(void *)(*v10 + 16))
      {
        uint64_t v5 = *(void *)(v11 + 32);
        int64_t v3 = *(void (**)(void))(v11 + 40);
        swift_retain();
        swift_retain();
        swift_retain();
        sub_1002D22CC(0, 1);
        swift_endAccess();
        *(void *)(v7 + 16) = v5;
        swift_retain();
        swift_release();
        if (qword_100453920 == -1)
        {
LABEL_15:
          swift_retain_n();
          unint64_t v12 = Logger.logObject.getter();
          os_log_type_t v13 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v12, v13))
          {
            unint64_t v22 = v3;
            unint64_t v14 = (uint8_t *)swift_slowAlloc();
            v25[0] = swift_slowAlloc();
            *(_DWORD *)unint64_t v14 = 136315138;
            type metadata accessor for UUID();
            sub_100075624();
            uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
            sub_100290514(v15, v16, v25);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v12, v13, "Allocating free slot to next waiter %s", v14, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            int64_t v3 = v22;
            swift_slowDealloc();
          }
          else
          {

            swift_release_n();
          }
          v25[0] = v5;
          v3(v25);
          swift_release_n();
          swift_release();
          swift_release();
          return;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once();
      goto LABEL_15;
    }
  }
LABEL_22:
  swift_release();
  swift_bridgeObjectRelease_n();
  if (qword_100453920 != -1) {
    swift_once();
  }
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)id v19 = 136315138;
    type metadata accessor for UUID();
    sub_100075624();
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v25[0] = sub_100290514(v20, v21, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "No slot to belongs to %s, doing nothing", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

void sub_100074FDC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced6LyonSE_isRunning) == 1)
  {
    [*(id *)(*(void *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper)+ OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper) invalidate];
    if (qword_100453710 == -1)
    {
LABEL_6:
      sub_100177D1C(a1);
      sub_100074A40(a1);
      return;
    }
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Not running", v13, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1000752C4()
{
  return type metadata accessor for LyonSE();
}

uint64_t type metadata accessor for LyonSE()
{
  uint64_t result = qword_100453ED8;
  if (!qword_100453ED8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100075318()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000753D8()
{
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t sub_100075410(unint64_t result)
{
  v1[4] = &_swiftEmptyArrayStorage;
  v1[2] = result;
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = result;
    if (result)
    {
      specialized ContiguousArray.reserveCapacity(_:)();
      type metadata accessor for SlotManager.LyonURSKSlot();
      do
      {
        *(void *)(swift_allocObject() + 16) = 0;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        --v2;
      }
      while (v2);
    }
    v1[3] = &_swiftEmptyArrayStorage;
    return (unint64_t)v1;
  }
  return result;
}

uint64_t sub_1000754E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SlotManager()
{
  return self;
}

uint64_t type metadata accessor for SlotManager.LyonURSKSlot()
{
  return self;
}

uint64_t sub_100075568(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = *(void (**)(void *, unint64_t, void *, uint64_t))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = v6;
    uint64_t v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    swift_retain();
    unint64_t v10 = 0xF000000000000000;
  }
  id v11 = a3;
  v7(v6, v10, a3, a4);

  sub_100075868((uint64_t)v6, v10);

  return swift_release();
}

unint64_t sub_100075624()
{
  unint64_t result = qword_100454038;
  if (!qword_100454038)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454038);
  }
  return result;
}

unint64_t sub_10007567C()
{
  unint64_t result = qword_1004556B0;
  if (!qword_1004556B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004556B0);
  }
  return result;
}

unint64_t sub_1000756D0()
{
  unint64_t result = qword_100455600;
  if (!qword_100455600)
  {
    sub_10006D220((uint64_t *)&unk_100455EA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100455600);
  }
  return result;
}

uint64_t sub_10007572C()
{
  swift_release();
  sub_10006D144(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100075774(void *a1, char a2)
{
  sub_100072854(a1, a2 & 1, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_100075788()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000757C8(uint64_t a1, unint64_t a2, char a3)
{
  return sub_100072208(a1, a2, a3 & 1, *(void *)(v3 + 16));
}

uint64_t sub_1000757D4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007580C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10028E464(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16));
}

uint64_t sub_100075814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100075824()
{
  return swift_release();
}

uint64_t sub_10007582C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100075868(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10006D144(a1, a2);
  }
  return a1;
}

uint64_t sub_10007587C(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRetain();
  }
  else {
    return sub_10006D0EC(a1, a2);
  }
}

uint64_t sub_100075888(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_10006D144(a1, a2);
  }
}

unint64_t sub_100075894()
{
  unint64_t result = qword_100454050;
  if (!qword_100454050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454050);
  }
  return result;
}

void sub_1000758E8(id a1, char a2)
{
  if ((a2 & 1) == 0) {
}
  }

uint64_t sub_1000758F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10006D0EC(a1, a2);
  }
  return a1;
}

void *sub_100075908(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10007594C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10007599C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain_n();
    id v27 = a3;
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    id v9 = a3;
    if (v8)
    {
LABEL_3:
      uint64_t v10 = 4;
      do
      {
        uint64_t v11 = v10 - 4;
        if ((v7 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v13 = __OFADD__(v11, 1);
          uint64_t v14 = v10 - 3;
          if (v13) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v12 = *(void *)(v7 + 8 * v10);
          swift_retain();
          BOOL v13 = __OFADD__(v11, 1);
          uint64_t v14 = v10 - 3;
          if (v13)
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        if (!*(void *)(v12 + 16))
        {
          swift_bridgeObjectRelease_n();
          *(void *)(v12 + 16) = a1;
          swift_retain();
          swift_release();
          uint64_t v26 = swift_retain();
          sub_10006F5F8(v26);
          swift_release();
          return swift_release_n();
        }
        swift_release();
        ++v10;
      }
      while (v14 != v8);
    }
  }
  swift_bridgeObjectRelease_n();
  if (qword_100453920 != -1) {
    swift_once();
  }
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "No free slot available, adding to queue", v17, 2u);
    swift_slowDealloc();
  }

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100076108;
  *(void *)(v18 + 24) = v6;
  id v19 = (void *)(a2 + 32);
  swift_beginAccess();
  uint64_t v20 = *(void **)(a2 + 32);
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 32) = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v20 = sub_100258FC0(0, v20[2] + 1, 1, v20);
    void *v19 = v20;
  }
  unint64_t v23 = v20[2];
  unint64_t v22 = v20[3];
  if (v23 >= v22 >> 1)
  {
    uint64_t v20 = sub_100258FC0((void *)(v22 > 1), v23 + 1, 1, v20);
    void *v19 = v20;
  }
  void v20[2] = v23 + 1;
  uint64_t v24 = &v20[3 * v23];
  v24[4] = a1;
  void v24[5] = sub_100076110;
  v24[6] = v18;
  swift_endAccess();
  return swift_release();
}

void sub_100075CC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_1001DB390((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v32 = v7;
  sub_1002C97EC((uint64_t)isa, v8, v10, isUniquelyReferenced_nonNull_native);
  unint64_t v13 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime;
  if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime + 8) & 1) == 0)
  {
    double v15 = *(double *)v14;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    double v17 = v16;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    double v18 = (v17 - v15) * 1000.0;
    if ((~*(void *)&v18 & 0x7FF0000000000000) != 0)
    {
      if (v18 > -1.0)
      {
        if (v18 < 4294967300.0)
        {
          *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpDuration) = v18;
          *(void *)uint64_t v14 = 0;
          *(unsigned char *)(v14 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;
          sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
          Class v22 = NSNumber.init(integerLiteral:)(1).super.super.isa;
          char v23 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v32 = v13;
          sub_1002C97EC((uint64_t)v22, v19, v21, v23);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v24 = a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime;
  if ((*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime + 8) & 1) == 0)
  {
    double v25 = *(double *)v24;
    Date.init()();
    Date.timeIntervalSince1970.getter();
    double v27 = v26;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    double v28 = v27 - v25;
    if ((~COERCE__INT64(v27 - v25) & 0x7FF0000000000000) != 0)
    {
      if (v28 > -1.0)
      {
        if (v28 < 4294967300.0)
        {
          *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration) = v28;
          *(void *)uint64_t v24 = 0;
          *(unsigned char *)(v24 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
          goto LABEL_11;
        }
LABEL_19:
        __break(1u);
        return;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_11:
  uint64_t v29 = self;
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  Class v30 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100050AE4(v29, v30);

  [*(id *)(*(void *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper)+ OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper) invalidate];
  if (qword_100453710 != -1) {
    swift_once();
  }
  sub_100177D1C(a1);
}

uint64_t sub_1000760D0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100076108(uint64_t a1)
{
}

uint64_t sub_100076110(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void sub_10007613C(void *a1, char a2)
{
  sub_10006EAA8(a1, a2 & 1, *(NSObject **)(v2 + 16));
}

uint64_t sub_100076148(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10006C51C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000761AC()
{
  return sub_10006DCD0();
}

_OWORD *sub_1000761D0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000761F4()
{
  type metadata accessor for AlishaLPEM();
  uint64_t v0 = swift_allocObject();
  String.init(cString:)();
  uint64_t result = Logger.init(subsystem:category:)();
  uint64_t v2 = v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency;
  *(void *)uint64_t v2 = 0xD000000000000014;
  *(void *)(v2 + _Block_object_dispose(&STACK[0x2C0], 8) = 0x80000001003B1620;
  *(void *)(v2 + 16) = 0xD000000000000017;
  *(void *)(v2 + 24) = 0x80000001003B1E00;
  *(_WORD *)(v2 + 32) = 261;
  uint64_t v3 = v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer;
  *(void *)uint64_t v3 = 0xD000000000000014;
  *(void *)(v3 + _Block_object_dispose(&STACK[0x2C0], 8) = 0x80000001003B1620;
  *(void *)(v3 + 16) = 0xD00000000000001DLL;
  *(void *)(v3 + 24) = 0x80000001003B1E20;
  *(_WORD *)(v3 + 32) = 262;
  uint64_t v4 = v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled;
  *(void *)uint64_t v4 = 0xD000000000000014;
  *(void *)(v4 + _Block_object_dispose(&STACK[0x2C0], 8) = 0x80000001003B1620;
  *(void *)(v4 + 16) = 0xD00000000000001ALL;
  *(void *)(v4 + 24) = 0x80000001003B1E40;
  *(_WORD *)(v4 + 32) = 0;
  qword_100468510 = v0;
  return result;
}

void sub_100076314(long long *a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v115 = (uint64_t)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void **)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (long long *)((char *)&v110 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v10 = qword_100468A38;
    *(void *)uint64_t v9 = qword_100468A38;
    int v11 = enum case for DispatchPredicate.onQueue(_:);
    uint64_t v12 = (void (*)(long long *, void, long long *))v6[13];
    v12(v9, enum case for DispatchPredicate.onQueue(_:), (long long *)v5);
    id v13 = (id)v10;
    LOBYTE(v10) = _dispatchPreconditionTest(_:)();
    uint64_t v14 = (void (*)(long long *, uint64_t))v6[1];
    v14(v9, v5);
    if (v10)
    {
      if (qword_100453940 == -1) {
        goto LABEL_4;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_4:
    os_log_type_t v124 = v14;
    unint64_t v125 = v12;
    LODWORD(v126) = v11;
    unint64_t v127 = (long long *)v5;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a1;
    uint64_t v16 = qword_100453910;
    swift_bridgeObjectRetain();
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_100078504;
    *(void *)(v17 + 24) = v15;
    uint64_t v109 = __chkstk_darwin(v17, v18);
    __chkstk_darwin(v109, v19);
    uint64_t v21 = v20 + 4;
    swift_retain();
    os_unfair_lock_lock(v21);
    uint64_t v22 = 0;
    sub_100079ACC(&v158);
    os_unfair_lock_unlock(v21);
    uint64_t v23 = v158;
    swift_release();
    swift_release();
    unint64_t v24 = v23 & 0xC000000000000001;
    if ((v23 & 0xC000000000000001) != 0)
    {
      if (!__CocoaSet.count.getter()) {
        goto LABEL_11;
      }
      uint64_t v25 = __CocoaSet.count.getter();
    }
    else
    {
      uint64_t v25 = *(void *)(v23 + 16);
      if (!v25) {
        goto LABEL_11;
      }
    }
    if (v25 <= 8)
    {
      if (qword_1004536B0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_58;
    }
LABEL_11:
    swift_bridgeObjectRetain();
    double v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      double v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)double v28 = 134217984;
      if (v24) {
        unint64_t v24 = __CocoaSet.count.getter();
      }
      else {
        unint64_t v24 = *(void *)(v23 + 16);
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v158 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Disabling LPEM due to %ld peers", v28, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v37 = qword_100468A38;
    *(void *)uint64_t v9 = qword_100468A38;
    uint64_t v22 = (uint64_t)v127;
    v125(v9, v126, v127);
    id v38 = (id)v37;
    LOBYTE(v37) = _dispatchPreconditionTest(_:)();
    v124(v9, v22);
    if (v37)
    {
      sub_1002D6F5C(0);
      return;
    }
    __break(1u);
LABEL_58:
    swift_once();
LABEL_16:
    sub_1000CA07C();
    uint64_t v30 = v29;
    unint64_t v32 = v31;
    sub_1000CA39C(v23, (uint64_t *)&v158);
    uint64_t v33 = v121;
    if (v22)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to retrieve pairing information", v36, 2u);
        swift_slowDealloc();
      }
      sub_10006D144(v30, v32);

      return;
    }
    long long v113 = v158;
    unint64_t v39 = v160;
    long long v114 = v159;
    *(void *)&long long v158 = v160;
    swift_bridgeObjectRetain();
    sub_100078574((void **)&v158);
    uint64_t v40 = v158;
    uint64_t v41 = *(void *)(v158 + 16);
    if (v24) {
      uint64_t v42 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v42 = *(void *)(v23 + 16);
    }
    uint64_t v119 = v41;
    uint64_t v120 = v40;
    if (v41 != v42)
    {
      swift_bridgeObjectRetain();
      swift_retain();
      int v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 134218240;
        if (v24) {
          uint64_t v64 = __CocoaSet.count.getter();
        }
        else {
          uint64_t v64 = *(void *)(v23 + 16);
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v158 = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v63 + 12) = 2048;
        swift_release();
        *(void *)&long long v158 = v119;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Missing pairing information for %ld peers got %ld", (uint8_t *)v63, 0x16u);
        swift_slowDealloc();
        sub_10006D144(v30, v32);

        sub_10006D144(v113, *((unint64_t *)&v113 + 1));
        sub_10006D144(v114, *((unint64_t *)&v114 + 1));
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        sub_10006D144(v30, v32);

        sub_10006D144(v113, *((unint64_t *)&v113 + 1));
        sub_10006D144(v114, *((unint64_t *)&v114 + 1));
        swift_release();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      return;
    }
    __int16 v110 = v39;
    swift_bridgeObjectRelease();
    uint64_t v118 = type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v43 = __DataStorage.init(capacity:)();
    uint64_t v156 = 0;
    uint64_t v157 = v43 | 0x4000000000000000;
    LOBYTE(v142[0]) = 1;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v142;
    *((void *)&v158 + 1) = (char *)v142 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LODWORD(v142[0]) = 0x1000000;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v142;
    *((void *)&v158 + 1) = (char *)v142 + 4;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    Data.append(_:)();
    Data.append(_:)();
    unint64_t v112 = v32;
    Data.append(_:)();
    long long v44 = *(_OWORD *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled + 16);
    v142[0] = *(_OWORD *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled);
    v142[1] = v44;
    __int16 v143 = *(_WORD *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__isLoggingEnabled + 32);
    long long v144 = v142[0];
    long long v145 = v44;
    sub_100079AE8((uint64_t)&v144);
    sub_100079AE8((uint64_t)&v145);
    sub_1001AF4B4();
    char v46 = v45;
    sub_100079B14((uint64_t)&v144);
    sub_100079B14((uint64_t)&v145);
    LOBYTE(v139[0]) = v46 & 1;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v139;
    *((void *)&v158 + 1) = (char *)v139 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    uint64_t v154 = 0;
    unint64_t v155 = 0;
    LOBYTE(v139[0]) = 1;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v139;
    *((void *)&v158 + 1) = (char *)v139 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    if (v41 >= 256)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    LOBYTE(v139[0]) = v41;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v139;
    *((void *)&v158 + 1) = (char *)v139 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    uint64_t v47 = v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM_logger;
    swift_retain();
    unint64_t v127 = (long long *)v47;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.info.getter();
    BOOL v50 = os_log_type_enabled(v48, v49);
    unint64_t v51 = &unk_100454000;
    uint64_t v111 = v30;
    if (v50)
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 16777472;
      uint64_t v126 = v52 + 4;
      uint64_t v53 = v33;
      uint64_t v54 = *(void *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 8);
      uint64_t v55 = *(void *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 16);
      uint64_t v56 = *(void *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 24);
      char v57 = *(unsigned char *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 32);
      char v58 = *(unsigned char *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency + 33);
      v139[0] = *(void *)(v33 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__latency);
      v139[1] = v54;
      v139[2] = v55;
      v139[3] = v56;
      char v140 = v57;
      char v141 = v58;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001AF604();
      char v60 = v59;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v15_Block_object_dispose(&STACK[0x2C0], 8) = v60;
      unint64_t v51 = (void *)&unk_100454000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Using car0 latency value %hhu", v52, 5u);
      swift_slowDealloc();
    }
    else
    {
      uint64_t v53 = v33;
      swift_release();
    }

    uint64_t v65 = (long long *)(v53 + v51[13]);
    long long v66 = v65[1];
    long long v136 = *v65;
    long long v137 = v66;
    __int16 v138 = *((_WORD *)v65 + 16);
    long long v146 = v136;
    long long v147 = v66;
    sub_100079AE8((uint64_t)&v146);
    sub_100079AE8((uint64_t)&v147);
    sub_1001AF604();
    char v68 = v67;
    sub_100079B14((uint64_t)&v146);
    sub_100079B14((uint64_t)&v147);
    LOBYTE(v133[0]) = v68;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v133;
    *((void *)&v158 + 1) = (char *)v133 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LOBYTE(v133[0]) = 2;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v133;
    *((void *)&v158 + 1) = (char *)v133 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LOBYTE(v133[0]) = 3;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v133;
    *((void *)&v158 + 1) = (char *)v133 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LOBYTE(v133[0]) = 6;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v133;
    *((void *)&v158 + 1) = (char *)v133 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LOBYTE(v133[0]) = 15;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = v133;
    *((void *)&v158 + 1) = (char *)v133 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    swift_retain();
    unint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.info.getter();
    uint64_t v6 = &unk_100454000;
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v71 = 16777472;
      uint64_t v72 = v53 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer;
      uint64_t v73 = *(void *)(v53 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer);
      uint64_t v74 = *(void *)(v53 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 8);
      uint64_t v75 = *(void *)(v72 + 16);
      uint64_t v76 = *(void *)(v72 + 24);
      char v77 = *(unsigned char *)(v72 + 32);
      LOBYTE(v72) = *(unsigned char *)(v72 + 33);
      v133[0] = v73;
      v133[1] = v74;
      v133[2] = v75;
      v133[3] = v76;
      char v134 = v77;
      char v135 = v72;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1001AF604();
      char v79 = v78;
      swift_bridgeObjectRelease();
      uint64_t v53 = v121;
      swift_bridgeObjectRelease();
      LOBYTE(v15_Block_object_dispose(&STACK[0x2C0], 8) = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Using car0 BT scan timer value %hhu", v71, 5u);
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }
    uint64_t v5 = v120;

    long long v80 = *(_OWORD *)(v53 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 16);
    long long v130 = *(_OWORD *)(v53 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer);
    long long v131 = v80;
    __int16 v132 = *(_WORD *)(v53 + OBJC_IVAR____TtC10seserviced10AlishaLPEM__btScanTimer + 32);
    long long v148 = v130;
    long long v149 = v80;
    sub_100079AE8((uint64_t)&v148);
    sub_100079AE8((uint64_t)&v149);
    sub_1001AF604();
    char v82 = v81;
    sub_100079B14((uint64_t)&v148);
    sub_100079B14((uint64_t)&v149);
    LOBYTE(v153) = v82;
    uint64_t v9 = &v153;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = &v153;
    *((void *)&v158 + 1) = (char *)&v153 + 1;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    a1 = (long long *)&v154;
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LOWORD(v153) = 12288;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = &v153;
    *((void *)&v158 + 1) = (char *)&v153 + 2;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    LOWORD(v153) = 24576;
    *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
    unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
    *(void *)&long long v158 = &v153;
    *((void *)&v158 + 1) = (char *)&v153 + 2;
    sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
    Data._Representation.append(contentsOf:)();
    sub_10007594C((uint64_t)&v158);
    long long v153 = xmmword_100378350;
    long long v152 = xmmword_100378350;
    if (!v119) {
      break;
    }
    uint64_t v83 = 0;
    long long v116 = &v129;
    uint64_t v117 = v119 & ~(v119 >> 63);
    uint64_t v84 = (void (**)(long long *, void, long long *))(v5 + 80);
    while (v117 != v83)
    {
      unint64_t v127 = (long long *)v83;
      uint64_t v6 = *(v84 - 6);
      uint64_t v85 = (uint64_t)*(v84 - 5);
      unint64_t v86 = (unint64_t)*(v84 - 4);
      uint64_t v87 = (void (*)(long long *, uint64_t))*(v84 - 3);
      unint64_t v89 = (unint64_t)*(v84 - 2);
      uint64_t v88 = (uint64_t)*(v84 - 1);
      id v90 = *v84;
      swift_allocObject();
      swift_retain();
      sub_10006D0EC(v85, v86);
      sub_10006D0EC((uint64_t)v87, v89);
      sub_10006D0EC(v88, (unint64_t)v90);
      uint64_t v91 = __DataStorage.init(capacity:)();
      uint64_t v150 = 0;
      unint64_t v151 = v91 | 0x4000000000000000;
      Data.append(_:)();
      Data.append(_:)();
      Data.append(_:)();
      swift_retain();
      sub_10006D0EC(v85, v86);
      sub_10006D0EC((uint64_t)v87, v89);
      sub_10006D0EC(v88, (unint64_t)v90);
      unint64_t v125 = v90;
      uint64_t v126 = (uint8_t *)v88;
      sub_10006D144(v88, (unint64_t)v90);
      unint64_t v123 = v89;
      os_log_type_t v124 = v87;
      sub_10006D144((uint64_t)v87, v89);
      sub_10006D144(v85, v86);
      uint64_t v93 = *(void *)((char *)v6 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      unint64_t v92 = *(void *)((char *)v6 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      sub_1000758F4(v93, v92);
      swift_release();
      if (v92 >> 60 == 15) {
        __break(1u);
      }
      uint64_t v9 = v127;
      uint64_t v122 = (uint64_t)v127 + 1;
      Data.append(_:)();
      sub_100075868(v93, v92);
      char v128 = 0;
      *((void *)&v159 + 1) = &type metadata for UnsafeRawBufferPointer;
      unint64_t v160 = &protocol witness table for UnsafeRawBufferPointer;
      *(void *)&long long v158 = &v128;
      *((void *)&v158 + 1) = v116;
      sub_100075908(&v158, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.append(contentsOf:)();
      sub_10007594C((uint64_t)&v158);
      uint64_t v94 = v150;
      unint64_t v95 = v151;
      sub_10006D0EC(v150, v151);
      if ((unint64_t)v9 >= 4) {
        a1 = &v152;
      }
      else {
        a1 = &v153;
      }
      Data.append(_:)();
      sub_10006D144(v94, v95);
      swift_release();
      sub_10006D144(v85, v86);
      sub_10006D144((uint64_t)v124, v123);
      sub_10006D144((uint64_t)v126, (unint64_t)v125);
      sub_10006D144(v94, v95);
      v84 += 7;
      uint64_t v83 = v122;
      uint64_t v5 = v120;
      if (v119 == v122) {
        goto LABEL_47;
      }
    }
    __break(1u);
LABEL_54:
    swift_once();
  }
LABEL_47:
  swift_release();
  if (qword_100453710 != -1) {
    swift_once();
  }
  uint64_t v126 = (uint8_t *)qword_100468738;
  uint64_t v96 = type metadata accessor for UUID();
  long long v158 = 0u;
  long long v159 = 0u;
  unint64_t v160 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v115, 1, 1, v96);
  uint64_t v97 = v156;
  unint64_t v98 = v157;
  unint64_t v127 = (long long *)v156;
  uint64_t v99 = v154;
  unint64_t v100 = v155;
  long long v101 = v153;
  unint64_t v125 = (void (*)(long long *, void, long long *))v153;
  long long v102 = v152;
  uint64_t v103 = swift_allocObject();
  *(void *)(v103 + 16) = v121;
  *(void *)(v103 + 24) = v97;
  *(void *)(v103 + 32) = v98;
  *(void *)(v103 + 40) = v99;
  *(void *)(v103 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v100;
  *(_OWORD *)(v103 + 56) = v101;
  *(_OWORD *)(v103 + 72) = v102;
  type metadata accessor for SERequest();
  uint64_t v104 = swift_allocObject();
  unint64_t v105 = (void *)(v104 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
  *unint64_t v105 = 0xD000000000000017;
  v105[1] = 0x80000001003B1D20;
  *(unsigned char *)(v104 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = 1;
  *(void *)(v104 + 16) = 0;
  *(unsigned char *)(v104 + 24) = 1;
  sub_100076148((uint64_t)&v158, v104 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, &qword_100454058);
  *(unsigned char *)(v104 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = 3;
  *(void *)(v104 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = 0;
  uint64_t v106 = v104 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
  *(void *)uint64_t v106 = 0;
  *(unsigned char *)(v106 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
  sub_100076148(v115, v104 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, &qword_100455EB0);
  uint64_t v107 = v104 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
  *(void *)uint64_t v107 = 0;
  *(unsigned char *)(v107 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
  *(void *)(v104 + 32) = sub_100079B98;
  *(void *)(v104 + 40) = v103;
  swift_retain();
  sub_10006D0EC((uint64_t)v127, v98);
  sub_10006D0EC(v99, v100);
  uint64_t v108 = (void (*)(void, void, void))v125;
  sub_10006D0EC((uint64_t)v125, *((unint64_t *)&v101 + 1));
  sub_10006D0EC(v102, *((unint64_t *)&v102 + 1));
  sub_100177598(0, v104);
  swift_release();
  sub_10006D144(v111, v112);
  sub_10006D144(v113, *((unint64_t *)&v113 + 1));
  sub_10006D144(v114, *((unint64_t *)&v114 + 1));
  swift_bridgeObjectRelease();
  sub_10006D144(v102, *((unint64_t *)&v102 + 1));
  sub_10006D144((uint64_t)v108, *((unint64_t *)&v101 + 1));
  sub_10006D144(v99, v100);
  sub_10006D144((uint64_t)v127, v98);
}

uint64_t sub_1000776B8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type)) {
    return 0;
  }
  uint64_t v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v3 >> 60 == 15) {
    return 0;
  }
  uint64_t v6 = *v2;
  sub_10006D0EC(*v2, v3);
  LOBYTE(a2) = sub_1000B6444(v6, v3, a2);
  sub_100075868(v6, v3);
  return a2 & 1;
}

void sub_100077750(void *a1, char a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  __chkstk_darwin(v17, v18);
  if (a2)
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      sub_100075894();
      uint64_t v22 = Error.localizedDescription.getter();
      sub_100290514(v22, v23, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v20, "Failed to get the SE %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    id v19 = a1;
    sub_100077BF0(v19, 811889762, 0xE400000000000000, a4, a5);
    sub_100077BF0(v19, 812802403, 0xE400000000000000, a6, a7);
    sub_100077BF0(v19, 829579619, 0xE400000000000000, a8, a9);
    switch(a11 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(a10) - a10;
        if (__OFSUB__(HIDWORD(a10), a10))
        {
          __break(1u);
LABEL_21:
          __break(1u);
          JUMPOUT(0x100077BE0);
        }
        uint64_t v24 = (int)v24;
LABEL_13:
        if (v24 > 0) {
          sub_100077BF0(v19, 846356835, 0xE400000000000000, a10, a11);
        }
LABEL_15:
        if (qword_100453940 != -1) {
          swift_once();
        }
        sub_1002D6AD8(0);
        sub_1000758E8(a1, 0);
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(a10 + 16);
        uint64_t v25 = *(void *)(a10 + 24);
        BOOL v27 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (!v27) {
          goto LABEL_13;
        }
        goto LABEL_21;
      case 3uLL:
        goto LABEL_15;
      default:
        uint64_t v24 = BYTE6(a11);
        goto LABEL_13;
    }
  }
}

uint64_t sub_100077BF0(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v59 = a4;
  unint64_t v60 = a5;
  uint64_t v62 = a2;
  uint64_t v61 = type metadata accessor for String.Encoding();
  uint64_t v7 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  static String.Encoding.ascii.getter();
  uint64_t v18 = String.data(using:allowLossyConversion:)();
  unint64_t v20 = v19;
  unint64_t v23 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v21 = v7 + 8;
  uint64_t v22 = v23;
  v23(v10, v61);
  if (v20 >> 60 == 15)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    uint64_t result = sub_100075868(v54, v55);
    __break(1u);
    return result;
  }
  uint64_t v56 = v22;
  uint64_t v57 = v21;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v18, v20);
  char v58 = a1;
  id v25 = sub_100017AEC(a1, isa, 0);

  if (v25)
  {
    uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    uint64_t v30 = v59;
    unint64_t v29 = v60;
    sub_10006D0EC(v59, v60);
    sub_10006D0EC(v26, v28);
    char v31 = sub_100088AE4(v26, v28, v30, v29);
    sub_10006D144(v30, v29);
    sub_10006D144(v26, v28);
    if (v31) {
      return sub_10006D144(v26, v28);
    }
  }
  else
  {
    uint64_t v34 = v59;
    unint64_t v33 = v60;
    sub_10006D0EC(v59, v60);
    unint64_t v28 = 0xF000000000000000;
    sub_100075868(0, 0xF000000000000000);
    sub_100075868(v34, v33);
    uint64_t v26 = 0;
  }
  swift_bridgeObjectRetain_n();
  os_log_type_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v54 = v26;
  unint64_t v55 = v28;
  if (v37)
  {
    id v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)id v38 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_100290514(v62, a3, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Updating Sunsprite '%s'", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  static String.Encoding.ascii.getter();
  uint64_t v39 = String.data(using:allowLossyConversion:)();
  unint64_t v41 = v40;
  v56(v10, v61);
  uint64_t v42 = v58;
  if (v41 >> 60 == 15) {
    goto LABEL_21;
  }
  Class v43 = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v39, v41);
  Class v44 = Data._bridgeToObjectiveC()().super.isa;
  id v45 = sub_1000178B4(v42, v43, v44);

  if (!v45) {
    return sub_100075868(v54, v55);
  }
  swift_bridgeObjectRetain_n();
  id v46 = v45;
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    *(_DWORD *)uint64_t v49 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v63 = sub_100290514(v62, a3, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v49 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v50 = Error.localizedDescription.getter();
    uint64_t v63 = sub_100290514(v50, v51, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failed to write to Sunsprite '%s' %s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  sub_10007567C();
  swift_allocError();
  *uint64_t v52 = 0;
  swift_willThrow();

  return sub_100075868(v54, v55);
}

uint64_t sub_1000782AC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced10AlishaLPEM_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1000783AC()
{
  return type metadata accessor for AlishaLPEM();
}

uint64_t type metadata accessor for AlishaLPEM()
{
  uint64_t result = qword_1004540A8;
  if (!qword_1004540A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100078400()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10007849C(void *a1, uint64_t (*a2)(void))
{
  return a2(*a1) & 1;
}

uint64_t sub_1000784CC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100078504(uint64_t a1)
{
  return sub_1000776B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_10007850C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100078544(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1) & 1;
}

Swift::Int sub_100078574(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (void *)sub_100079BD8(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_1000785E0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000785E0(uint64_t *a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0) {
      goto LABEL_133;
    }
    if (v4) {
      return sub_100079060(0, v4, 1, a1);
    }
    return result;
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_141;
  }
  Swift::Int v122 = result;
  uint64_t v120 = a1;
  if (v4 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v4 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_99:
      uint64_t v126 = v8;
      if (v12 >= 2)
      {
        uint64_t v114 = *v120;
        do
        {
          unint64_t v115 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_128;
          }
          if (!v114) {
            goto LABEL_140;
          }
          uint64_t v116 = *(void *)&v11[16 * v115 + 32];
          uint64_t v117 = *(void *)&v11[16 * v12 + 24];
          sub_10007928C((char *)(v114 + 56 * v116), (char *)(v114 + 56 * *(void *)&v11[16 * v12 + 16]), v114 + 56 * v117, __dst);
          if (v2) {
            break;
          }
          if (v117 < v116) {
            goto LABEL_129;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v11 = sub_100079A98((uint64_t)v11);
          }
          if (v115 >= *((void *)v11 + 2)) {
            goto LABEL_130;
          }
          uint64_t v118 = &v11[16 * v115 + 32];
          *(void *)uint64_t v118 = v116;
          *((void *)v118 + 1) = v117;
          unint64_t v119 = *((void *)v11 + 2);
          if (v12 > v119) {
            goto LABEL_131;
          }
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v119 - v12));
          *((void *)v11 + 2) = v119 - 1;
          unint64_t v12 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_110:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v7 = v6 >> 1;
    sub_10006C51C(&qword_100454148);
    uint64_t v8 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    void v8[2] = v7;
    __dst = (char *)(v8 + 4);
  }
  uint64_t v126 = v8;
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v121 = *a1 + 80;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v128 = v4;
  uint64_t v132 = *a1;
  while (1)
  {
    Swift::Int v13 = v9;
    Swift::Int v14 = v9 + 1;
    Swift::Int v129 = v9;
    if (v9 + 1 < v4)
    {
      unint64_t v123 = v11;
      uint64_t v124 = v2;
      uint64_t v15 = (void *)(v10 + 56 * v14);
      uint64_t v16 = v15[1];
      unint64_t v17 = v15[2];
      uint64_t v18 = v15[3];
      uint64_t v19 = v15[5];
      unint64_t v154 = v15[4];
      uint64_t v151 = v19;
      unint64_t v20 = v15[6];
      uint64_t v21 = (void *)(v10 + 56 * v9);
      uint64_t v22 = v21[1];
      unint64_t v23 = v21[2];
      unint64_t v24 = v21[4];
      uint64_t v148 = v21[5];
      uint64_t v143 = v21[3];
      unint64_t v146 = v21[6];
      swift_retain();
      sub_10006D0EC(v16, v17);
      sub_10006D0EC(v18, v154);
      uint64_t v25 = v19;
      unint64_t v26 = v20;
      sub_10006D0EC(v25, v20);
      swift_retain();
      sub_10006D0EC(v22, v23);
      sub_10006D0EC(v143, v24);
      sub_10006D0EC(v148, v146);
      int v139 = static UUID.< infix(_:_:)();
      swift_release();
      sub_10006D144(v22, v23);
      Swift::Int v13 = v129;
      sub_10006D144(v143, v24);
      Swift::Int v4 = v128;
      sub_10006D144(v148, v146);
      swift_release();
      sub_10006D144(v16, v17);
      sub_10006D144(v18, v154);
      sub_10006D144(v151, v26);
      Swift::Int v14 = v129 + 2;
      if (v129 + 2 < v128)
      {
        unint64_t v27 = (uint64_t *)(v121 + 56 * v129);
        while (1)
        {
          Swift::Int v133 = v14;
          uint64_t v28 = v27[5];
          unint64_t v30 = v27[6];
          uint64_t v29 = v27[7];
          uint64_t v31 = v27[9];
          unint64_t v153 = v27[8];
          unint64_t v155 = v27[10];
          uint64_t v32 = *(v27 - 2);
          unint64_t v34 = *(v27 - 1);
          uint64_t v33 = *v27;
          unint64_t v147 = v27[1];
          uint64_t v141 = v27[2];
          unint64_t v144 = v27[3];
          swift_retain();
          sub_10006D0EC(v28, v30);
          sub_10006D0EC(v29, v153);
          sub_10006D0EC(v31, v155);
          swift_retain();
          sub_10006D0EC(v32, v34);
          sub_10006D0EC(v33, v147);
          sub_10006D0EC(v141, v144);
          int v150 = static UUID.< infix(_:_:)();
          swift_release();
          sub_10006D144(v32, v34);
          sub_10006D144(v33, v147);
          sub_10006D144(v141, v144);
          swift_release();
          sub_10006D144(v28, v30);
          sub_10006D144(v29, v153);
          sub_10006D144(v31, v155);
          if ((v139 ^ v150)) {
            break;
          }
          Swift::Int v14 = v133 + 1;
          v27 += 7;
          Swift::Int v4 = v128;
          if (v128 == v133 + 1)
          {
            Swift::Int v14 = v128;
            goto LABEL_22;
          }
        }
        Swift::Int v4 = v128;
        Swift::Int v14 = v133;
LABEL_22:
        Swift::Int v13 = v129;
      }
      uint64_t v11 = v123;
      uint64_t v2 = v124;
      uint64_t v10 = v132;
      if (v139)
      {
        if (v14 < v13) {
          goto LABEL_134;
        }
        if (v13 < v14)
        {
          uint64_t v35 = 56 * v14;
          Swift::Int v36 = v14;
          Swift::Int v37 = v13;
          uint64_t v38 = 56 * v13;
          do
          {
            if (v37 != --v36)
            {
              if (!v132) {
                goto LABEL_139;
              }
              uint64_t v39 = v132 + v38;
              uint64_t v40 = *(void *)(v132 + v38);
              uint64_t v41 = v132 + v35;
              long long v42 = *(_OWORD *)(v132 + v38 + 8);
              long long v43 = *(_OWORD *)(v132 + v38 + 24);
              long long v44 = *(_OWORD *)(v132 + v38 + 40);
              long long v45 = *(_OWORD *)(v132 + v35 - 40);
              long long v46 = *(_OWORD *)(v132 + v35 - 24);
              long long v47 = *(_OWORD *)(v132 + v35 - 56);
              *(void *)(v39 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *(void *)(v132 + v35 - 8);
              *(_OWORD *)(v39 + 16) = v45;
              *(_OWORD *)(v39 + 32) = v46;
              *(_OWORD *)uint64_t v39 = v47;
              *(void *)(v41 - 56) = v40;
              *(_OWORD *)(v41 - 4_Block_object_dispose(&STACK[0x2C0], 8) = v42;
              *(_OWORD *)(v41 - 32) = v43;
              *(_OWORD *)(v41 - 16) = v44;
            }
            ++v37;
            v35 -= 56;
            v38 += 56;
          }
          while (v37 < v36);
        }
      }
    }
    if (v14 < v4)
    {
      if (__OFSUB__(v14, v13)) {
        goto LABEL_132;
      }
      if (v14 - v13 < v122) {
        break;
      }
    }
LABEL_50:
    if (v14 < v13) {
      goto LABEL_127;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100079810(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v64 = *((void *)v11 + 2);
    unint64_t v63 = *((void *)v11 + 3);
    unint64_t v12 = v64 + 1;
    uint64_t v10 = v132;
    Swift::Int v135 = v14;
    if (v64 >= v63 >> 1)
    {
      long long v113 = sub_100079810((char *)(v63 > 1), v64 + 1, 1, v11);
      uint64_t v10 = v132;
      uint64_t v11 = v113;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v65 = v11 + 32;
    long long v66 = &v11[16 * v64 + 32];
    *(void *)long long v66 = v13;
    *((void *)v66 + 1) = v135;
    if (v64)
    {
      while (1)
      {
        unint64_t v67 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v72 = &v65[16 * v12];
          uint64_t v73 = *((void *)v72 - 8);
          uint64_t v74 = *((void *)v72 - 7);
          BOOL v78 = __OFSUB__(v74, v73);
          uint64_t v75 = v74 - v73;
          if (v78) {
            goto LABEL_116;
          }
          uint64_t v77 = *((void *)v72 - 6);
          uint64_t v76 = *((void *)v72 - 5);
          BOOL v78 = __OFSUB__(v76, v77);
          uint64_t v70 = v76 - v77;
          char v71 = v78;
          if (v78) {
            goto LABEL_117;
          }
          unint64_t v79 = v12 - 2;
          long long v80 = &v65[16 * v12 - 32];
          uint64_t v82 = *(void *)v80;
          uint64_t v81 = *((void *)v80 + 1);
          BOOL v78 = __OFSUB__(v81, v82);
          uint64_t v83 = v81 - v82;
          if (v78) {
            goto LABEL_119;
          }
          BOOL v78 = __OFADD__(v70, v83);
          uint64_t v84 = v70 + v83;
          if (v78) {
            goto LABEL_122;
          }
          if (v84 >= v75)
          {
            long long v102 = &v65[16 * v67];
            uint64_t v104 = *(void *)v102;
            uint64_t v103 = *((void *)v102 + 1);
            BOOL v78 = __OFSUB__(v103, v104);
            uint64_t v105 = v103 - v104;
            if (v78) {
              goto LABEL_126;
            }
            BOOL v95 = v70 < v105;
            goto LABEL_87;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v96 = *((void *)v11 + 4);
            uint64_t v97 = *((void *)v11 + 5);
            BOOL v78 = __OFSUB__(v97, v96);
            uint64_t v89 = v97 - v96;
            char v90 = v78;
            goto LABEL_81;
          }
          uint64_t v69 = *((void *)v11 + 4);
          uint64_t v68 = *((void *)v11 + 5);
          BOOL v78 = __OFSUB__(v68, v69);
          uint64_t v70 = v68 - v69;
          char v71 = v78;
        }
        if (v71) {
          goto LABEL_118;
        }
        unint64_t v79 = v12 - 2;
        uint64_t v85 = &v65[16 * v12 - 32];
        uint64_t v87 = *(void *)v85;
        uint64_t v86 = *((void *)v85 + 1);
        BOOL v88 = __OFSUB__(v86, v87);
        uint64_t v89 = v86 - v87;
        char v90 = v88;
        if (v88) {
          goto LABEL_121;
        }
        uint64_t v91 = &v65[16 * v67];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v78 = __OFSUB__(v92, v93);
        uint64_t v94 = v92 - v93;
        if (v78) {
          goto LABEL_124;
        }
        if (__OFADD__(v89, v94)) {
          goto LABEL_125;
        }
        if (v89 + v94 >= v70)
        {
          BOOL v95 = v70 < v94;
LABEL_87:
          if (v95) {
            unint64_t v67 = v79;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v90) {
          goto LABEL_120;
        }
        unint64_t v98 = &v65[16 * v67];
        uint64_t v100 = *(void *)v98;
        uint64_t v99 = *((void *)v98 + 1);
        BOOL v78 = __OFSUB__(v99, v100);
        uint64_t v101 = v99 - v100;
        if (v78) {
          goto LABEL_123;
        }
        if (v101 < v89) {
          goto LABEL_14;
        }
LABEL_89:
        unint64_t v106 = v67 - 1;
        if (v67 - 1 >= v12)
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
          goto LABEL_136;
        }
        if (!v10) {
          goto LABEL_138;
        }
        uint64_t v107 = v11;
        uint64_t v108 = &v65[16 * v106];
        uint64_t v109 = *(void *)v108;
        __int16 v110 = &v65[16 * v67];
        uint64_t v111 = *((void *)v110 + 1);
        sub_10007928C((char *)(v10 + 56 * *(void *)v108), (char *)(v10 + 56 * *(void *)v110), v10 + 56 * v111, __dst);
        if (v2) {
          goto LABEL_110;
        }
        if (v111 < v109) {
          goto LABEL_113;
        }
        if (v67 > *((void *)v107 + 2)) {
          goto LABEL_114;
        }
        *(void *)uint64_t v108 = v109;
        *(void *)&v65[16 * v106 + 8] = v111;
        unint64_t v112 = *((void *)v107 + 2);
        if (v67 >= v112) {
          goto LABEL_115;
        }
        uint64_t v11 = v107;
        unint64_t v12 = v112 - 1;
        memmove(&v65[16 * v67], v110 + 16, 16 * (v112 - 1 - v67));
        *((void *)v11 + 2) = v112 - 1;
        uint64_t v10 = v132;
        if (v112 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_14:
    Swift::Int v4 = v128;
    Swift::Int v9 = v135;
    uint64_t v8 = v126;
    if (v135 >= v128) {
      goto LABEL_99;
    }
  }
  if (__OFADD__(v13, v122)) {
    goto LABEL_135;
  }
  if (v13 + v122 >= v4) {
    Swift::Int v48 = v4;
  }
  else {
    Swift::Int v48 = v13 + v122;
  }
  if (v48 >= v13)
  {
    if (v14 != v48)
    {
      uint64_t v125 = v2;
      uint64_t v49 = (void *)(v10 + 56 * v14);
      Swift::Int v127 = v48;
      do
      {
        unint64_t v51 = (void *)(v10 + 56 * v14);
        uint64_t v52 = v51[1];
        unint64_t v53 = v51[2];
        uint64_t v54 = v51[3];
        unint64_t v55 = v51[4];
        uint64_t v56 = v51[5];
        unint64_t v57 = v51[6];
        long long v130 = v49;
        Swift::Int v134 = v14;
        while (1)
        {
          Swift::Int v136 = v13;
          uint64_t v137 = *(v49 - 6);
          unint64_t v58 = *(v49 - 5);
          unint64_t v138 = *(v49 - 3);
          uint64_t v140 = *(v49 - 4);
          uint64_t v145 = *(v49 - 2);
          unint64_t v142 = *(v49 - 1);
          unint64_t v59 = v53;
          unint64_t v156 = v53;
          unint64_t v152 = v57;
          unint64_t v60 = v57;
          swift_retain();
          sub_10006D0EC(v52, v59);
          sub_10006D0EC(v54, v55);
          sub_10006D0EC(v56, v60);
          swift_retain();
          sub_10006D0EC(v137, v58);
          sub_10006D0EC(v140, v138);
          sub_10006D0EC(v145, v142);
          char v149 = static UUID.< infix(_:_:)();
          swift_release();
          sub_10006D144(v137, v58);
          sub_10006D144(v140, v138);
          sub_10006D144(v145, v142);
          swift_release();
          sub_10006D144(v52, v156);
          sub_10006D144(v54, v55);
          sub_10006D144(v56, v152);
          if ((v149 & 1) == 0) {
            break;
          }
          uint64_t v10 = v132;
          Swift::Int v50 = v134;
          if (!v132) {
            goto LABEL_137;
          }
          uint64_t v61 = *v49;
          uint64_t v52 = v49[1];
          unint64_t v53 = v49[2];
          uint64_t v54 = v49[3];
          unint64_t v55 = v49[4];
          uint64_t v56 = v49[5];
          unint64_t v57 = v49[6];
          long long v62 = *(_OWORD *)(v49 - 5);
          *(_OWORD *)uint64_t v49 = *(_OWORD *)(v49 - 7);
          *((_OWORD *)v49 + 1) = v62;
          *((_OWORD *)v49 + 2) = *(_OWORD *)(v49 - 3);
          v49[6] = *(v49 - 1);
          *(v49 - 6) = v52;
          *(v49 - 5) = v53;
          *(v49 - 4) = v54;
          *(v49 - 3) = v55;
          *(v49 - 2) = v56;
          *(v49 - 1) = v57;
          Swift::Int v13 = v136 + 1;
          *(v49 - 7) = v61;
          v49 -= 7;
          if (v134 == v136 + 1) {
            goto LABEL_43;
          }
        }
        uint64_t v10 = v132;
        Swift::Int v50 = v134;
LABEL_43:
        Swift::Int v14 = v50 + 1;
        Swift::Int v13 = v129;
        uint64_t v49 = v130 + 7;
      }
      while (v14 != v127);
      Swift::Int v14 = v127;
      uint64_t v2 = v125;
    }
    goto LABEL_50;
  }
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100079060(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = result;
  if (a3 != a2)
  {
    uint64_t v18 = *a4;
    Swift::Int v4 = (void *)(*a4 + 56 * a3);
LABEL_5:
    uint64_t v5 = (void *)(v18 + 56 * a3);
    uint64_t v6 = v5[1];
    unint64_t v7 = v5[2];
    uint64_t v8 = v5[3];
    unint64_t v10 = v5[4];
    uint64_t v9 = v5[5];
    unint64_t v11 = v5[6];
    unint64_t v17 = v4;
    uint64_t v19 = a3;
    uint64_t v20 = v16;
    while (1)
    {
      unint64_t v12 = *(v4 - 5);
      uint64_t v21 = *(v4 - 6);
      unint64_t v22 = *(v4 - 3);
      uint64_t v25 = *(v4 - 2);
      uint64_t v23 = *(v4 - 4);
      unint64_t v24 = *(v4 - 1);
      swift_retain();
      sub_10006D0EC(v6, v7);
      sub_10006D0EC(v8, v10);
      sub_10006D0EC(v9, v11);
      swift_retain();
      sub_10006D0EC(v21, v12);
      sub_10006D0EC(v23, v22);
      sub_10006D0EC(v25, v24);
      char v26 = static UUID.< infix(_:_:)();
      swift_release();
      sub_10006D144(v21, v12);
      sub_10006D144(v23, v22);
      sub_10006D144(v25, v24);
      swift_release();
      sub_10006D144(v6, v7);
      sub_10006D144(v8, v10);
      Swift::Int result = sub_10006D144(v9, v11);
      if ((v26 & 1) == 0)
      {
LABEL_4:
        a3 = v19 + 1;
        Swift::Int v4 = v17 + 7;
        if (v19 + 1 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v18) {
        break;
      }
      uint64_t v13 = *v4;
      uint64_t v6 = v4[1];
      unint64_t v7 = v4[2];
      uint64_t v8 = v4[3];
      unint64_t v10 = v4[4];
      uint64_t v9 = v4[5];
      unint64_t v11 = v4[6];
      long long v14 = *(_OWORD *)(v4 - 5);
      *(_OWORD *)Swift::Int v4 = *(_OWORD *)(v4 - 7);
      *((_OWORD *)v4 + 1) = v14;
      *((_OWORD *)v4 + 2) = *(_OWORD *)(v4 - 3);
      v4[6] = *(v4 - 1);
      *(v4 - 6) = v6;
      *(v4 - 5) = v7;
      *(v4 - 4) = v8;
      *(v4 - 3) = v10;
      *(v4 - 2) = v9;
      *(v4 - 1) = v11;
      *(v4 - 7) = v13;
      v4 -= 7;
      if (v19 == ++v20) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10007928C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  Swift::Int v4 = __dst;
  uint64_t v5 = a2;
  uint64_t v6 = __src;
  int64_t v7 = a2 - __src;
  int64_t v8 = (a2 - __src) / 56;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = (uint64_t)(a3 - (void)a2) / 56;
  uint64_t v72 = __src;
  char v71 = __dst;
  if (v8 >= v10)
  {
    if (v9 < -55) {
      goto LABEL_43;
    }
    if (__dst != a2 || &a2[56 * v10] <= __dst) {
      memmove(__dst, a2, 56 * v10);
    }
    unint64_t v27 = &v4[56 * v10];
    uint64_t v70 = v27;
    uint64_t v72 = v5;
    if (v6 >= v5 || v9 < 56) {
      goto LABEL_42;
    }
    unint64_t v28 = a3 - 56;
    uint64_t v29 = v5;
    unint64_t v64 = v4;
    long long v62 = v6;
    while (1)
    {
      unint64_t v59 = v27;
      uint64_t v69 = v5;
      uint64_t v30 = *((void *)v27 - 6);
      uint64_t v31 = v27 - 56;
      unint64_t v60 = (char *)(v28 + 56);
      unint64_t v33 = *((void *)v27 - 5);
      uint64_t v32 = *((void *)v27 - 4);
      uint64_t v34 = *((void *)v27 - 2);
      unint64_t v67 = *((void *)v27 - 3);
      unint64_t v65 = *((void *)v27 - 1);
      uint64_t v35 = *((void *)v29 - 6);
      v29 -= 56;
      unint64_t v36 = *((void *)v29 + 2);
      unint64_t v50 = *((void *)v29 + 4);
      uint64_t v52 = *((void *)v29 + 3);
      uint64_t v48 = *((void *)v29 + 5);
      unint64_t v49 = *((void *)v29 + 6);
      swift_retain();
      sub_10006D0EC(v30, v33);
      sub_10006D0EC(v32, v67);
      sub_10006D0EC(v34, v65);
      swift_retain();
      sub_10006D0EC(v35, v36);
      sub_10006D0EC(v52, v50);
      sub_10006D0EC(v48, v49);
      char v55 = static UUID.< infix(_:_:)();
      swift_release();
      sub_10006D144(v35, v36);
      sub_10006D144(v52, v50);
      sub_10006D144(v48, v49);
      swift_release();
      sub_10006D144(v30, v33);
      sub_10006D144(v32, v67);
      sub_10006D144(v34, v65);
      if (v55)
      {
        unint64_t v27 = v59;
        if (v60 != v69 || v28 >= (unint64_t)v69)
        {
          long long v37 = *(_OWORD *)v29;
          long long v38 = *((_OWORD *)v29 + 1);
          long long v39 = *((_OWORD *)v29 + 2);
          *(void *)(v28 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *((void *)v29 + 6);
          *(_OWORD *)(v28 + 16) = v38;
          *(_OWORD *)(v28 + 32) = v39;
          *(_OWORD *)unint64_t v28 = v37;
        }
        uint64_t v72 = v29;
      }
      else
      {
        uint64_t v70 = v31;
        uint64_t v29 = v69;
        if (v60 >= v59 && v28 < (unint64_t)v59)
        {
          uint64_t v40 = v64;
          if (v60 != v59)
          {
            long long v41 = *(_OWORD *)v31;
            long long v42 = *((_OWORD *)v31 + 1);
            long long v43 = *((_OWORD *)v31 + 2);
            *(void *)(v28 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *((void *)v31 + 6);
            *(_OWORD *)(v28 + 16) = v42;
            *(_OWORD *)(v28 + 32) = v43;
            *(_OWORD *)unint64_t v28 = v41;
          }
          unint64_t v27 = v31;
          goto LABEL_38;
        }
        long long v44 = *(_OWORD *)v31;
        long long v45 = *((_OWORD *)v31 + 1);
        long long v46 = *((_OWORD *)v31 + 2);
        *(void *)(v28 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *((void *)v31 + 6);
        *(_OWORD *)(v28 + 16) = v45;
        *(_OWORD *)(v28 + 32) = v46;
        *(_OWORD *)unint64_t v28 = v44;
        unint64_t v27 = v31;
      }
      uint64_t v40 = v64;
LABEL_38:
      if (v29 > v62)
      {
        v28 -= 56;
        uint64_t v5 = v29;
        if (v27 > v40) {
          continue;
        }
      }
      goto LABEL_42;
    }
  }
  if (v7 >= -55)
  {
    if (__dst != __src || &__src[56 * v8] <= __dst) {
      memmove(__dst, __src, 56 * v8);
    }
    unint64_t v51 = &v4[56 * v8];
    uint64_t v70 = v51;
    if ((unint64_t)v5 < a3 && v7 >= 56)
    {
      do
      {
        uint64_t v68 = v5;
        uint64_t v11 = *((void *)v5 + 1);
        uint64_t v61 = v6;
        unint64_t v12 = *((void *)v5 + 2);
        uint64_t v13 = *((void *)v5 + 3);
        uint64_t v14 = *((void *)v5 + 5);
        unint64_t v66 = *((void *)v5 + 4);
        unint64_t v15 = *((void *)v5 + 6);
        uint64_t v16 = *((void *)v4 + 1);
        unint64_t v17 = *((void *)v4 + 2);
        unint64_t v54 = *((void *)v4 + 4);
        uint64_t v56 = *((void *)v4 + 3);
        uint64_t v57 = *((void *)v4 + 5);
        unint64_t v63 = v4;
        unint64_t v18 = *((void *)v4 + 6);
        swift_retain();
        sub_10006D0EC(v11, v12);
        sub_10006D0EC(v13, v66);
        sub_10006D0EC(v14, v15);
        swift_retain();
        sub_10006D0EC(v16, v17);
        sub_10006D0EC(v56, v54);
        sub_10006D0EC(v57, v18);
        char v58 = static UUID.< infix(_:_:)();
        swift_release();
        sub_10006D144(v16, v17);
        sub_10006D144(v56, v54);
        sub_10006D144(v57, v18);
        swift_release();
        sub_10006D144(v11, v12);
        sub_10006D144(v13, v66);
        sub_10006D144(v14, v15);
        if (v58)
        {
          uint64_t v19 = v68 + 56;
          uint64_t v20 = v61;
          Swift::Int v4 = v63;
          if (v61 < v68 || v61 >= v19 || v61 != v68)
          {
            long long v21 = *(_OWORD *)v68;
            long long v22 = *((_OWORD *)v68 + 1);
            long long v23 = *((_OWORD *)v68 + 2);
            *((void *)v61 + 6) = *((void *)v68 + 6);
            *((_OWORD *)v61 + 1) = v22;
            *((_OWORD *)v61 + 2) = v23;
            *(_OWORD *)uint64_t v61 = v21;
          }
        }
        else
        {
          uint64_t v20 = v61;
          if (v61 != v63)
          {
            long long v24 = *(_OWORD *)v63;
            long long v25 = *((_OWORD *)v63 + 1);
            long long v26 = *((_OWORD *)v63 + 2);
            *((void *)v61 + 6) = *((void *)v63 + 6);
            *((_OWORD *)v61 + 1) = v25;
            *((_OWORD *)v61 + 2) = v26;
            *(_OWORD *)uint64_t v61 = v24;
          }
          Swift::Int v4 = v63 + 56;
          char v71 = v63 + 56;
          uint64_t v19 = v68;
        }
        uint64_t v6 = v20 + 56;
        if (v4 >= v51) {
          break;
        }
        uint64_t v5 = v19;
      }
      while ((unint64_t)v19 < a3);
      uint64_t v72 = v6;
    }
LABEL_42:
    sub_10007990C((void **)&v72, &v71, &v70);
    return 1;
  }
LABEL_43:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100079810(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_100454150);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_10007990C(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -56)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 56;
    if (result != v3 || result >= &v3[56 * v6])
    {
      return (char *)memmove(result, v3, 56 * v6);
    }
  }
  return result;
}

char *sub_1000799E0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  else {
    uint64_t v5 = v4 + 1;
  }
  if (v4 <= -2)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 1;
    if (result != v3 || result >= &v3[2 * v7])
    {
      return (char *)memmove(result, v3, 2 * v7);
    }
  }
  return result;
}

char *sub_100079A98(uint64_t a1)
{
  return sub_100079810(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100079AAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100088A74(*(uint64_t (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void *sub_100079ACC@<X0>(void *a1@<X8>)
{
  return sub_100088AA0(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_100079AE8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100079B14(uint64_t a1)
{
  return a1;
}

uint64_t sub_100079B40()
{
  swift_release();
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_10006D144(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10006D144(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10006D144(*(void *)(v0 + 72), *(void *)(v0 + 80));

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100079B98(void *a1, char a2)
{
  sub_100077750(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80));
}

uint64_t sub_100079BD8(void *a1)
{
  return sub_1002CFF50(0, a1[2], 0, a1);
}

uint64_t sub_100079BEC(uint64_t a1)
{
  return sub_1002D1C80(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_100079C04(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  sub_10007BEB4();
  if (qword_100453918 != -1) {
    swift_once();
  }
  static OS_dispatch_queue.getSpecific<A>(key:)();
  if ((v12 & 1) != 0 || v11 != 0x534F534543555245)
  {
    id v10 = (id)sub_100056FE4(a4);
    OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    sub_100079D60(a4, 1, a1, a2, a3, a5);
  }
}

uint64_t sub_100079D60(unint64_t a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v13 = a4 >> 60;
  if (a4 >> 60 != 15)
  {
    uint64_t v14 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        LODWORD(v14) = HIDWORD(a3) - a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_67;
        }
        uint64_t v14 = (int)v14;
        goto LABEL_3;
      case 2uLL:
        uint64_t v23 = *(void *)(a3 + 16);
        uint64_t v22 = *(void *)(a3 + 24);
        BOOL v15 = __OFSUB__(v22, v23);
        uint64_t v14 = v22 - v23;
        if (!v15) {
          goto LABEL_3;
        }
        __break(1u);
        goto LABEL_25;
      case 3uLL:
        goto LABEL_3;
      default:
        uint64_t v14 = BYTE6(a4);
        goto LABEL_3;
    }
  }
  uint64_t v14 = 0;
LABEL_3:
  BOOL v15 = __OFADD__(v14, 2);
  uint64_t v16 = v14 + 2;
  if (v15)
  {
    __break(1u);
    goto LABEL_64;
  }
  BOOL v15 = __OFADD__(v16, 2);
  uint64_t v17 = v16 + 2;
  if (v15)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  unint64_t v6 = *(void *)(a5 + 16);
  unint64_t v18 = v17 + v6;
  if (__OFADD__(v17, v6))
  {
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (__OFADD__(v18, 9)) {
    goto LABEL_66;
  }
  uint64_t v83 = sub_100089000(v18 + 9);
  unint64_t v84 = v19;
  __int16 v80 = -20608;
  if (a2) {
    char v20 = 64;
  }
  else {
    char v20 = 16;
  }
  char v81 = v20;
  __int16 v82 = 2;
  Data._Representation.append(contentsOf:)();
  if ((v18 & 0x8000000000000000) != 0 || v18 >= 0x10000) {
    goto LABEL_75;
  }
  __int16 v75 = bswap32(v18) >> 16;
  BOOL v78 = &type metadata for UnsafeRawBufferPointer;
  unint64_t v79 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v76 = &v75;
  uint64_t v77 = (id *)&v76;
  sub_100075908(&v76, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v76);
  uint64_t v72 = (void *)a1;
  uint64_t v7 = sub_10006C51C(&qword_100454158);
  BOOL v78 = (void *)v7;
  a1 = sub_10007BEF4();
  unint64_t v79 = (void *)a1;
  LOBYTE(v76) = 79;
  LOBYTE(v75) = *(unsigned char *)sub_100075908(&v76, v7);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v76);
  if (v13 > 0xE)
  {
LABEL_25:
    BOOL v78 = (void *)v7;
    unint64_t v79 = (void *)a1;
    LOBYTE(v76) = 0;
    LOBYTE(v75) = *(unsigned char *)sub_100075908(&v76, v7);
    Data._Representation.replaceSubrange(_:with:count:)();
    sub_10007594C((uint64_t)&v76);
  }
  else
  {
    LOBYTE(v21) = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_68;
        }
        unint64_t v21 = HIDWORD(a3) - (int)a3;
LABEL_27:
        sub_10006D0EC(a3, a4);
        if ((v21 & 0x8000000000000000) != 0 || v21 >= 0x100) {
          goto LABEL_71;
        }
LABEL_29:
        BOOL v78 = (void *)v7;
        unint64_t v79 = (void *)a1;
        LOBYTE(v76) = v21;
        LOBYTE(v75) = *(unsigned char *)sub_100075908(&v76, v7);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_10007594C((uint64_t)&v76);
        Data.append(_:)();
        sub_100075868(a3, a4);
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(a3 + 16);
        uint64_t v24 = *(void *)(a3 + 24);
        unint64_t v21 = v24 - v25;
        if (!__OFSUB__(v24, v25)) {
          goto LABEL_27;
        }
        goto LABEL_69;
      case 3uLL:
        goto LABEL_29;
      default:
        LOBYTE(v21) = BYTE6(a4);
        goto LABEL_29;
    }
  }
  BOOL v78 = (void *)v7;
  unint64_t v79 = (void *)a1;
  LOBYTE(v76) = 92;
  LOBYTE(v75) = *(unsigned char *)sub_100075908(&v76, v7);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v76);
  if (v6 >= 0x100)
  {
LABEL_75:
    while (1)
    {
LABEL_71:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  BOOL v78 = (void *)v7;
  unint64_t v79 = (void *)a1;
  LOBYTE(v76) = v6;
  LOBYTE(v75) = *(unsigned char *)sub_100075908(&v76, v7);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v76);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = 0;
    do
    {
      if (*(unsigned __int8 *)(a5 + v26++ + 32)) {
        char v27 = -38;
      }
      else {
        char v27 = 79;
      }
      BOOL v78 = (void *)v7;
      unint64_t v79 = (void *)a1;
      LOBYTE(v76) = v27;
      LOBYTE(v75) = *(unsigned char *)sub_100075908(&v76, v7);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)&v76);
    }
    while (v6 != v26);
    swift_bridgeObjectRelease();
  }
  __int16 v75 = 0;
  BOOL v78 = &type metadata for UnsafeRawBufferPointer;
  unint64_t v79 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v76 = &v75;
  uint64_t v77 = (id *)&v76;
  sub_100075908(&v76, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v76);
  uint64_t v29 = sub_10011FE64(0xD000000000000010, 0x80000001003B1EB0);
  if (v30 >> 60 == 15) {
LABEL_70:
  }
    __break(1u);
  uint64_t v31 = v29;
  unint64_t v32 = v30;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v31, v32);
  uint64_t v34 = v72;
  id v35 = sub_100056638(v72, isa);

  if (v35)
  {
    swift_willThrow();
    uint64_t v36 = v83;
    unint64_t v37 = v84;
  }
  else
  {
    id v38 = [objc_allocWithZone((Class)RAPDU) init];
    while (1)
    {
      uint64_t v40 = v83;
      unint64_t v39 = v84;
      sub_10006D0EC(v83, v84);
      Class v41 = Data._bridgeToObjectiveC()().super.isa;
      unint64_t v70 = v39;
      sub_10006D144(v40, v39);
      uint64_t v76 = 0;
      id v42 = sub_100056104(v34, v41, &v76);

      if (!v42)
      {
        unint64_t v63 = v76;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_61;
      }
      long long v43 = v76;

      id v38 = v42;
      long long v44 = sub_10005D558((id *)v38);
      long long v45 = (__int16 *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      uint64_t v76 = v45;
      uint64_t v77 = (id *)v47;
      sub_10006D0EC((uint64_t)v45, v47);
      uint64_t v48 = sub_10018CE08((uint64_t *)&v76, 0);
      if (v73)
      {
        uint64_t v64 = (uint64_t)v76;
        unint64_t v65 = (unint64_t)v77;
        goto LABEL_60;
      }
      uint64_t v51 = v48;
      uint64_t v52 = v49;
      unint64_t v53 = v50;
      sub_10006D144((uint64_t)v76, (unint64_t)v77);
      if (v51 != 227) {
        break;
      }
      uint64_t v76 = v52;
      uint64_t v77 = (id *)v53;
      sub_10006D0EC((uint64_t)v52, v53);
      uint64_t v73 = 0;
      uint64_t v54 = sub_10018CE08((uint64_t *)&v76, 0);
      uint64_t v56 = v55;
      unint64_t v58 = v57;
      sub_10006D144((uint64_t)v76, (unint64_t)v77);
      if (v54 != 218)
      {
        uint64_t v67 = 0;
        switch(v53 >> 62)
        {
          case 1uLL:
            uint64_t v67 = (int)v52;
            break;
          case 2uLL:
            uint64_t v67 = *((void *)v52 + 2);
            break;
          default:
            break;
        }
        uint64_t v74 = v67;
        sub_10007BF50();
        swift_allocError();
        *(void *)uint64_t v69 = v54;
        *(void *)(v69 + _Block_object_dispose(&STACK[0x2C0], 8) = 218;
        *(void *)(v69 + 16) = v74;
        *(unsigned char *)(v69 + 24) = 0;
        swift_willThrow();
        sub_10006D144(v56, v58);
        goto LABEL_59;
      }
      sub_10006D144((uint64_t)v52, v53);
      uint64_t v59 = *a6;
      unint64_t v60 = a6[1];
      *a6 = v56;
      a6[1] = v58;
      sub_100075868(v59, v60);
      sub_10006D144((uint64_t)v45, v47);
      Data._Representation.subscript.setter();
      int v61 = sub_10005D5A8((uint64_t)v38);

      uint64_t v34 = v72;
      if (v61 != 25360)
      {

        return sub_10006D144(v83, v84);
      }
    }
    uint64_t v66 = 0;
    switch(v47 >> 62)
    {
      case 1uLL:
        uint64_t v66 = (int)v45;
        break;
      case 2uLL:
        uint64_t v66 = *((void *)v45 + 2);
        break;
      default:
        break;
    }
    sub_10007BF50();
    swift_allocError();
    *(void *)uint64_t v68 = v51;
    *(void *)(v68 + _Block_object_dispose(&STACK[0x2C0], 8) = 227;
    *(void *)(v68 + 16) = v66;
    *(unsigned char *)(v68 + 24) = 0;
    swift_willThrow();
LABEL_59:
    uint64_t v64 = (uint64_t)v52;
    unint64_t v65 = v53;
LABEL_60:
    sub_10006D144(v64, v65);
    sub_10006D144((uint64_t)v45, v47);

LABEL_61:
    uint64_t v36 = v40;
    unint64_t v37 = v70;
  }
  return sub_10006D144(v36, v37);
}

uint64_t sub_10007A808(void *a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, unint64_t), unint64_t a7)
{
  uint64_t v10 = v8;
  unint64_t v15 = a4 >> 60;
  if (a4 >> 60 != 15)
  {
    uint64_t v16 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        LODWORD(v16) = HIDWORD(a3) - a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_55;
        }
        uint64_t v16 = (int)v16;
        goto LABEL_3;
      case 2uLL:
        uint64_t v25 = *(void *)(a3 + 16);
        uint64_t v24 = *(void *)(a3 + 24);
        BOOL v17 = __OFSUB__(v24, v25);
        uint64_t v16 = v24 - v25;
        if (!v17) {
          goto LABEL_3;
        }
        __break(1u);
        goto LABEL_25;
      case 3uLL:
        goto LABEL_3;
      default:
        uint64_t v16 = BYTE6(a4);
        goto LABEL_3;
    }
  }
  uint64_t v16 = 0;
LABEL_3:
  BOOL v17 = __OFADD__(v16, 2);
  uint64_t v18 = v16 + 2;
  if (v17)
  {
    __break(1u);
    goto LABEL_52;
  }
  BOOL v17 = __OFADD__(v18, 2);
  uint64_t v19 = v18 + 2;
  if (v17)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v9 = *(void *)(a5 + 16);
  unint64_t v20 = v19 + v9;
  if (__OFADD__(v19, v9))
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (__OFADD__(v20, 9)) {
    goto LABEL_54;
  }
  uint64_t v66 = sub_100089000(v20 + 9);
  unint64_t v67 = v21;
  __int16 v63 = -20608;
  if (a2) {
    char v22 = 64;
  }
  else {
    char v22 = 16;
  }
  char v64 = v22;
  __int16 v65 = 2;
  Data._Representation.append(contentsOf:)();
  if ((v20 & 0x8000000000000000) != 0 || v20 >= 0x10000) {
    goto LABEL_63;
  }
  __int16 v58 = bswap32(v20) >> 16;
  uint64_t v7 = &type metadata for UnsafeRawBufferPointer;
  int v61 = &type metadata for UnsafeRawBufferPointer;
  long long v62 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v59 = &v58;
  unint64_t v60 = (id *)&v59;
  sub_100075908(&v59, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v59);
  uint64_t v55 = v8;
  uint64_t v10 = sub_10006C51C(&qword_100454158);
  int v61 = (void *)v10;
  a7 = sub_10007BEF4();
  long long v62 = (void *)a7;
  LOBYTE(v59) = 79;
  LOBYTE(v5_Block_object_dispose(&STACK[0x2C0], 8) = *(unsigned char *)sub_100075908(&v59, v10);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v59);
  if (v15 > 0xE)
  {
LABEL_25:
    int v61 = (void *)v10;
    long long v62 = (void *)a7;
    LOBYTE(v59) = 0;
    LOBYTE(v5_Block_object_dispose(&STACK[0x2C0], 8) = *(unsigned char *)sub_100075908(&v59, v10);
    Data._Representation.replaceSubrange(_:with:count:)();
    sub_10007594C((uint64_t)&v59);
  }
  else
  {
    LOBYTE(v23) = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        uint64_t v26 = a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_56;
        }
        unint64_t v23 = HIDWORD(a3) - (int)a3;
LABEL_27:
        sub_10006D0EC(v26, a4);
        if ((v23 & 0x8000000000000000) != 0 || v23 >= 0x100) {
          goto LABEL_59;
        }
LABEL_29:
        int v61 = (void *)v10;
        long long v62 = (void *)a7;
        LOBYTE(v59) = v23;
        LOBYTE(v5_Block_object_dispose(&STACK[0x2C0], 8) = *(unsigned char *)sub_100075908(&v59, v10);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_10007594C((uint64_t)&v59);
        Data.append(_:)();
        sub_100075868(a3, a4);
        break;
      case 2uLL:
        uint64_t v26 = a3;
        uint64_t v28 = *(void *)(a3 + 16);
        uint64_t v27 = *(void *)(a3 + 24);
        unint64_t v23 = v27 - v28;
        if (!__OFSUB__(v27, v28)) {
          goto LABEL_27;
        }
        goto LABEL_57;
      case 3uLL:
        goto LABEL_29;
      default:
        LOBYTE(v23) = BYTE6(a4);
        goto LABEL_29;
    }
  }
  int v61 = (void *)v10;
  long long v62 = (void *)a7;
  LOBYTE(v59) = 92;
  LOBYTE(v5_Block_object_dispose(&STACK[0x2C0], 8) = *(unsigned char *)sub_100075908(&v59, v10);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v59);
  if (v9 >= 0x100)
  {
LABEL_63:
    while (1)
    {
LABEL_59:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  int v61 = (void *)v10;
  long long v62 = (void *)a7;
  LOBYTE(v59) = v9;
  LOBYTE(v5_Block_object_dispose(&STACK[0x2C0], 8) = *(unsigned char *)sub_100075908(&v59, v10);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v59);
  if (v9)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    do
    {
      if (*(unsigned __int8 *)(a5 + v29++ + 32)) {
        char v30 = -38;
      }
      else {
        char v30 = 79;
      }
      int v61 = (void *)v10;
      long long v62 = (void *)a7;
      LOBYTE(v59) = v30;
      LOBYTE(v5_Block_object_dispose(&STACK[0x2C0], 8) = *(unsigned char *)sub_100075908(&v59, v10);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)&v59);
    }
    while (v9 != v29);
    swift_bridgeObjectRelease();
    uint64_t v7 = &type metadata for UnsafeRawBufferPointer;
  }
  __int16 v58 = 0;
  int v61 = v7;
  long long v62 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v59 = &v58;
  unint64_t v60 = (id *)&v59;
  sub_100075908(&v59, (uint64_t)v7);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v59);
  uint64_t v32 = sub_10011FE64(0xD000000000000010, 0x80000001003B1EB0);
  if (v33 >> 60 == 15) {
LABEL_58:
  }
    __break(1u);
  uint64_t v34 = v32;
  unint64_t v35 = v33;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v34, v35);
  unint64_t v37 = a1;
  id v38 = sub_100056638(a1, isa);

  if (v38)
  {
    swift_willThrow();
    return sub_10006D144(v66, v67);
  }
  else
  {
    id v40 = [objc_allocWithZone((Class)RAPDU) init];
    while (1)
    {
      uint64_t v41 = v66;
      unint64_t v42 = v67;
      sub_10006D0EC(v66, v67);
      Class v43 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v41, v42);
      uint64_t v59 = 0;
      id v44 = sub_100056104(v37, v43, &v59);

      if (!v44)
      {
        unint64_t v53 = v59;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_49;
      }
      long long v45 = v59;

      id v40 = v44;
      unint64_t v46 = sub_10005D558((id *)v40);
      uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v49 = v48;

      a6(v47, v49);
      sub_10006D144(v47, v49);
      if (v55) {
        break;
      }
      Data._Representation.subscript.setter();
      int v50 = sub_10005D5A8((uint64_t)v40);

      unint64_t v37 = a1;
      if (v50 != 25360)
      {

        uint64_t v51 = v66;
        unint64_t v52 = v67;
        return sub_10006D144(v51, v52);
      }
    }

LABEL_49:
    uint64_t v51 = v41;
    unint64_t v52 = v42;
    return sub_10006D144(v51, v52);
  }
}

uint64_t sub_10007B0E4(void *a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, unint64_t), unint64_t a7)
{
  unint64_t v14 = a4 >> 60;
  if (a4 >> 60 != 15)
  {
    uint64_t v15 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        LODWORD(v15) = HIDWORD(a3) - a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_52;
        }
        uint64_t v15 = (int)v15;
        goto LABEL_3;
      case 2uLL:
        uint64_t v24 = *(void *)(a3 + 16);
        uint64_t v23 = *(void *)(a3 + 24);
        BOOL v16 = __OFSUB__(v23, v24);
        uint64_t v15 = v23 - v24;
        if (!v16) {
          goto LABEL_3;
        }
        __break(1u);
        goto LABEL_25;
      case 3uLL:
        goto LABEL_3;
      default:
        uint64_t v15 = BYTE6(a4);
        goto LABEL_3;
    }
  }
  uint64_t v15 = 0;
LABEL_3:
  BOOL v16 = __OFADD__(v15, 2);
  uint64_t v17 = v15 + 2;
  if (v16)
  {
    __break(1u);
    goto LABEL_49;
  }
  BOOL v16 = __OFADD__(v17, 2);
  uint64_t v18 = v17 + 2;
  if (v16)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  unint64_t v8 = *(void *)(a5 + 16);
  unint64_t v19 = v18 + v8;
  if (__OFADD__(v18, v8))
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (__OFADD__(v19, 9)) {
    goto LABEL_51;
  }
  uint64_t v54 = a1;
  uint64_t v63 = sub_100089000(v19 + 9);
  unint64_t v64 = v20;
  __int16 v60 = -20608;
  if (a2) {
    char v21 = 64;
  }
  else {
    char v21 = 16;
  }
  char v61 = v21;
  __int16 v62 = 2;
  Data._Representation.append(contentsOf:)();
  if ((v19 & 0x8000000000000000) != 0 || v19 >= 0x10000) {
    goto LABEL_60;
  }
  __int16 v55 = bswap32(v19) >> 16;
  __int16 v58 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v59 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v56 = &v55;
  unint64_t v57 = (id *)&v56;
  sub_100075908(&v56, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v56);
  uint64_t v9 = sub_10006C51C(&qword_100454158);
  __int16 v58 = (void *)v9;
  a7 = sub_10007BEF4();
  uint64_t v59 = (void *)a7;
  LOBYTE(v56) = 79;
  LOBYTE(v55) = *(unsigned char *)sub_100075908(&v56, v9);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v56);
  if (v14 > 0xE)
  {
LABEL_25:
    __int16 v58 = (void *)v9;
    uint64_t v59 = (void *)a7;
    LOBYTE(v56) = 0;
    LOBYTE(v55) = *(unsigned char *)sub_100075908(&v56, v9);
    Data._Representation.replaceSubrange(_:with:count:)();
    sub_10007594C((uint64_t)&v56);
  }
  else
  {
    LOBYTE(v22) = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        uint64_t v25 = a3;
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_53;
        }
        unint64_t v22 = HIDWORD(a3) - (int)a3;
LABEL_27:
        sub_10006D0EC(v25, a4);
        if ((v22 & 0x8000000000000000) != 0 || v22 >= 0x100) {
          goto LABEL_56;
        }
LABEL_29:
        __int16 v58 = (void *)v9;
        uint64_t v59 = (void *)a7;
        LOBYTE(v56) = v22;
        LOBYTE(v55) = *(unsigned char *)sub_100075908(&v56, v9);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_10007594C((uint64_t)&v56);
        Data.append(_:)();
        sub_100075868(a3, a4);
        break;
      case 2uLL:
        uint64_t v25 = a3;
        uint64_t v27 = *(void *)(a3 + 16);
        uint64_t v26 = *(void *)(a3 + 24);
        unint64_t v22 = v26 - v27;
        if (!__OFSUB__(v26, v27)) {
          goto LABEL_27;
        }
        goto LABEL_54;
      case 3uLL:
        goto LABEL_29;
      default:
        LOBYTE(v22) = BYTE6(a4);
        goto LABEL_29;
    }
  }
  __int16 v58 = (void *)v9;
  uint64_t v59 = (void *)a7;
  LOBYTE(v56) = 92;
  LOBYTE(v55) = *(unsigned char *)sub_100075908(&v56, v9);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v56);
  if (v8 >= 0x100)
  {
LABEL_60:
    while (1)
    {
LABEL_56:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  __int16 v58 = (void *)v9;
  uint64_t v59 = (void *)a7;
  LOBYTE(v56) = v8;
  LOBYTE(v55) = *(unsigned char *)sub_100075908(&v56, v9);
  Data._Representation.replaceSubrange(_:with:count:)();
  sub_10007594C((uint64_t)&v56);
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    do
    {
      char v29 = *(unsigned char *)(a5 + v28++ + 32);
      __int16 v58 = (void *)v9;
      uint64_t v59 = (void *)a7;
      LOBYTE(v56) = v29;
      LOBYTE(v55) = *(unsigned char *)sub_100075908(&v56, v9);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)&v56);
    }
    while (v8 != v28);
    swift_bridgeObjectRelease();
  }
  __int16 v55 = 0;
  __int16 v58 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v59 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v56 = &v55;
  unint64_t v57 = (id *)&v56;
  sub_100075908(&v56, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v56);
  uint64_t v30 = sub_10011FE64(0xD000000000000010, 0x80000001003B1EB0);
  if (v31 >> 60 == 15) {
LABEL_55:
  }
    __break(1u);
  uint64_t v32 = v30;
  unint64_t v33 = v31;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v32, v33);
  unint64_t v35 = v54;
  id v36 = sub_100056638(v54, isa);

  if (v36)
  {
    swift_willThrow();
    return sub_10006D144(v63, v64);
  }
  else
  {
    id v38 = [objc_allocWithZone((Class)RAPDU) init];
    while (1)
    {
      uint64_t v39 = v63;
      unint64_t v40 = v64;
      sub_10006D0EC(v63, v64);
      Class v41 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v39, v40);
      uint64_t v56 = 0;
      id v42 = sub_100056104(v35, v41, &v56);

      if (!v42)
      {
        uint64_t v51 = v56;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_46;
      }
      Class v43 = v56;

      id v38 = v42;
      id v44 = sub_10005D558((id *)v38);
      uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;

      a6(v45, v47);
      sub_10006D144(v45, v47);
      if (v7) {
        break;
      }
      Data._Representation.subscript.setter();
      int v48 = sub_10005D5A8((uint64_t)v38);

      unint64_t v35 = v54;
      if (v48 != 25360)
      {

        uint64_t v49 = v63;
        unint64_t v50 = v64;
        return sub_10006D144(v49, v50);
      }
    }

LABEL_46:
    uint64_t v49 = v39;
    unint64_t v50 = v40;
    return sub_10006D144(v49, v50);
  }
}

void sub_10007B9AC(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t), unint64_t a5)
{
  sub_10007BEB4();
  if (qword_100453918 != -1) {
    swift_once();
  }
  static OS_dispatch_queue.getSpecific<A>(key:)();
  if ((v13 & 1) != 0 || v12 != 0x534F534543555245)
  {
    id v11 = (id)sub_100056FE4((uint64_t)v5);
    OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    sub_10007B0E4(v5, 0, a1, a2, a3, a4, a5);
  }
}

BOOL sub_10007BAF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10007BB0C()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10007BB54()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10007BB80()
{
  Swift::UInt8 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unsigned __int8 *sub_10007BBC4@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2 = *result;
  if (v2 == 79) {
    char v3 = 79;
  }
  else {
    char v3 = 0;
  }
  BOOL v4 = v2 != 79;
  BOOL v5 = v2 == 132;
  if (v2 == 132) {
    char v6 = -124;
  }
  else {
    char v6 = v3;
  }
  BOOL v7 = !v5 && v4;
  *a2 = v6;
  a2[1] = v7;
  return result;
}

void sub_10007BBF4(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_10007BC00(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(uint64_t, unint64_t), unint64_t a5)
{
  int64_t v7 = *(void *)(a3 + 16);
  if (v7)
  {
    uint64_t v15 = a4;
    unint64_t v16 = a5;
    uint64_t result = sub_1002CFA00(0, v7, 0);
    uint64_t v10 = (unsigned __int8 *)(a3 + 32);
    while (1)
    {
      int v12 = *v10++;
      int v11 = v12;
      if (v12 != 79 && v11 != 132) {
        break;
      }
      unint64_t v14 = *((void *)&_swiftEmptyArrayStorage + 2);
      unint64_t v13 = *((void *)&_swiftEmptyArrayStorage + 3);
      if (v14 >= v13 >> 1) {
        uint64_t result = sub_1002CFA00(v13 > 1, v14 + 1, 1);
      }
      *((void *)&_swiftEmptyArrayStorage + 2) = v14 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage + v14 + 32) = v11;
      if (!--v7)
      {
        a4 = v15;
        a5 = v16;
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    sub_10007B9AC(a1, a2, (uint64_t)&_swiftEmptyArrayStorage, a4, a5);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10007BE68(uint64_t a1, unint64_t a2)
{
  return sub_1001AEA30(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_10007BE84()
{
  return sub_10007C02C(1, (uint64_t (*)(void, uint64_t, void, void, void, void, void))sub_10007A808);
}

unint64_t sub_10007BEB4()
{
  unint64_t result = qword_1004566E0;
  if (!qword_1004566E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1004566E0);
  }
  return result;
}

unint64_t sub_10007BEF4()
{
  unint64_t result = qword_100454160;
  if (!qword_100454160)
  {
    sub_10006D220(&qword_100454158);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454160);
  }
  return result;
}

unint64_t sub_10007BF50()
{
  unint64_t result = qword_100454168;
  if (!qword_100454168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454168);
  }
  return result;
}

void sub_10007BFA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(v1 + 16))(v1, isa);
}

uint64_t sub_10007BFFC()
{
  return sub_10007C02C(0, (uint64_t (*)(void, uint64_t, void, void, void, void, void))sub_10007B0E4);
}

uint64_t sub_10007C02C(uint64_t a1, uint64_t (*a2)(void, uint64_t, void, void, void, void, void))
{
  return a2(v2[2], a1, v2[3], v2[4], v2[5], v2[6], v2[7]);
}

ValueMetadata *type metadata accessor for GetStatusModuleTag()
{
  return &type metadata for GetStatusModuleTag;
}

unint64_t sub_10007C070()
{
  unint64_t result = qword_100454170;
  if (!qword_100454170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454170);
  }
  return result;
}

uint64_t sub_10007C0C4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

void sub_10007C108(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_25:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v3 + 16) != 1)
  {
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Not running", v18, 2u);
      swift_slowDealloc();
    }
    goto LABEL_23;
  }
  if (qword_100453658 != -1) {
    goto LABEL_25;
  }
LABEL_6:
  unint64_t v12 = *(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8);
  if (v12 >> 60 == 15)
  {
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Initiate access protocol data not yet cached", v15, 2u);
      swift_slowDealloc();
    }

    sub_10007C594(a1, 0);
    return;
  }
  uint64_t v19 = *(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData);
  uint64_t v20 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 2u)
  {
    sub_10006D0EC(*(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData), *(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8));
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v24, "Initiate access protocol already called for this peer; do nothing",
        v25,
        2u);
      swift_slowDealloc();
    }
    sub_100075868(v19, v12);
LABEL_23:

    return;
  }
  sub_10006D0EC(*(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData), *(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_cachedInitiateAccessProtocolData + 8));
  if (qword_100453668 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_1000891C8(2, 5, v19, v12);
  unint64_t v23 = v22;
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  sub_1000CB6FC(v21, v23);
  if (v2)
  {
    sub_10006D144(v21, v23);
    sub_100075868(v19, v12);
  }
  else
  {
    sub_10007CDE4(0, 0xD000000000000016, 0x80000001003B2550);
    sub_100075868(v19, v12);
    sub_10006D144(v21, v23);
    *(unsigned char *)(a1 + v20) = 2;
  }
}

void sub_10007C594(uint64_t a1, int a2)
{
  LODWORD(v55) = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v54 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v51 = *(void *)(v8 - 8);
  uint64_t v52 = v8;
  __chkstk_darwin(v8, v9);
  id v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchTime();
  uint64_t v49 = *(void *)(v12 - 8);
  uint64_t v50 = v12;
  uint64_t v14 = __chkstk_darwin(v12, v13);
  unint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  os_log_type_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v25 = (void *)qword_100468A38;
  *(void *)os_log_type_t v24 = qword_100468A38;
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  id v26 = v25;
  uint64_t v27 = _dispatchPreconditionTest(_:)();
  char v29 = *(void (**)(char *, uint64_t))(v21 + 8);
  char v28 = v21 + 8;
  v29(v24, v20);
  if ((v27 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
LABEL_8:
    unint64_t v47 = v19;
    sub_10007DFFC(2, 0, v27, (unint64_t)v19, a1);
    uint64_t v48 = v27;
    unint64_t v46 = v7;
    if (v28 == 3)
    {
      int v35 = 12;
      id v36 = (void *)&unk_100468000;
    }
    else
    {
      id v36 = &unk_100468000;
      if (*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason))
      {
LABEL_16:
        uint64_t v45 = v36[327];
        static DispatchTime.now()();
        + infix(_:_:)();
        uint64_t v40 = v50;
        __int16 v55 = *(void (**)(char *, uint64_t))(v49 + 8);
        v55(v16, v50);
        aBlock[4] = sub_10008AFB0;
        aBlock[5] = a1;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_10007C0C4;
        aBlock[3] = &unk_1004104A8;
        Class v41 = _Block_copy(aBlock);
        swift_retain();
        id v42 = v11;
        static DispatchQoS.unspecified.getter();
        uint64_t v56 = _swiftEmptyArrayStorage;
        sub_10008BEDC((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10006C51C((uint64_t *)&unk_100455710);
        sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
        Class v43 = v46;
        uint64_t v44 = v54;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
        _Block_release(v41);
        sub_10006D144(v48, (unint64_t)v47);
        (*(void (**)(char *, uint64_t))(v53 + 8))(v43, v44);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v42, v52);
        v55(v24, v40);
        swift_release();
        return;
      }
      int v35 = 11;
    }
    *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = v35;
    goto LABEL_16;
  }
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 1;
    uint64_t v30 = self;
    char v28 = (char)v55;
    id v31 = [v30 TLVWithTag:1 unsignedChar:v55];
    if (v31)
    {
      uint64_t v32 = v31;
      id v33 = [v31 asData];

      if (v33)
      {
        os_log_type_t v24 = v19;
        uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v34;

        if (qword_100453668 == -1) {
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Not running", v39, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10007CBEC(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  void *v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    if (*(unsigned char *)(v1 + 16) == 1)
    {
      sub_1002127E0(a1 & 1);
    }
    else
    {
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not running", v12, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10007CDE4(char a1, uint64_t a2, unint64_t a3)
{
  uint64_t v21 = a2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    if (*(unsigned char *)(v3 + 16) == 1)
    {
      char v13 = a1 & 1;
      uint64_t v14 = swift_allocObject();
      swift_weakInit();
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v14;
      *(unsigned char *)(v15 + 24) = v13;
      uint64_t v16 = v21;
      *(void *)(v15 + 32) = v3;
      *(void *)(v15 + 40) = v16;
      *(void *)(v15 + 4_Block_object_dispose(&STACK[0x2C0], 8) = a3;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_100212CB8(v13, v16, a3, (uint64_t)sub_10008BFA4, v15);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not running", v19, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10007D08C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v6 = sub_100132DF4;
  if (a5) {
    uint64_t v6 = sub_100132DE8;
  }
  if (__OFADD__(a3, 2))
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v11 = 0;
  switch(v8)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_30;
      }
      uint64_t v11 = HIDWORD(a1) - (int)a1;
LABEL_9:
      if (((uint64_t (*)(uint64_t, uint64_t))v6)(a3 + 2, v11))
      {
        uint64_t v14 = 0;
        uint64_t v15 = a3;
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_16;
          case 1:
            uint64_t v14 = (int)a1;
            uint64_t v15 = (int)a1 + a3;
            if (!__OFADD__((int)a1, a3)) {
              goto LABEL_16;
            }
            __break(1u);
            goto LABEL_14;
          case 2:
            uint64_t v14 = *(void *)(a1 + 16);
            uint64_t v15 = v14 + a3;
            if (__OFADD__(v14, a3)) {
              goto LABEL_32;
            }
LABEL_16:
            BOOL v18 = __OFADD__(v14, a3);
            uint64_t v19 = v14 + a3;
            if (v18) {
              goto LABEL_27;
            }
            BOOL v18 = __OFADD__(v19, 2);
            uint64_t v20 = v19 + 2;
            if (v18) {
              goto LABEL_28;
            }
            if (v20 < v15) {
              goto LABEL_29;
            }
            sub_10006C51C(&qword_1004545A0);
            sub_10008BFB8();
            sub_10008C0B0((unint64_t *)&qword_1004545B0, &qword_1004545A0);
            DataProtocol.copyBytes<A>(to:from:)();
            sub_10006D144(a1, a2);
            unsigned int v21 = bswap32(0) >> 16;
            if (a4) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = v21;
            }
            break;
          default:
LABEL_35:
            JUMPOUT(0);
        }
      }
      else
      {
LABEL_14:
        _StringGuts.grow(_:)(47);
        swift_bridgeObjectRelease();
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0x6164206D6F726620;
        v17._object = (void *)0xEF206E656C206174;
        String.append(_:)(v17);
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_25;
          case 1:
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_25;
            }
            goto LABEL_33;
          case 2:
            if (__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
              goto LABEL_34;
            }
LABEL_25:
            sub_10007582C(0, (unint64_t *)&qword_100454598);
            v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v23);
            swift_bridgeObjectRelease();
            v24._countAndFlagsBits = 0x2074657366666F20;
            v24._object = (void *)0xE800000000000000;
            String.append(_:)(v24);
            v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v25);
            swift_bridgeObjectRelease();
            sub_100299FAC(0, 1, 0xD000000000000012, 0x80000001003B2400, 0);
            swift_willThrow();
            uint64_t result = sub_10006D144(a1, a2);
            break;
          default:
            goto LABEL_35;
        }
      }
      return result;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v11 = v12 - v13;
      if (!__OFSUB__(v12, v13)) {
        goto LABEL_9;
      }
      goto LABEL_31;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_9;
  }
}

uint64_t sub_10007D4A4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = sub_100132DF4;
  if (a5) {
    uint64_t v6 = sub_100132DE8;
  }
  if (__OFADD__(a3, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v10 = 0;
  switch(v8)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_29;
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_9:
      if (((uint64_t (*)(uint64_t, uint64_t))v6)(a3 + 1, v10))
      {
        uint64_t v13 = 0;
        uint64_t v14 = a3;
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_16;
          case 1:
            uint64_t v13 = (int)a1;
            uint64_t v14 = (int)a1 + a3;
            if (!__OFADD__((int)a1, a3)) {
              goto LABEL_16;
            }
            __break(1u);
            goto LABEL_14;
          case 2:
            uint64_t v13 = *(void *)(a1 + 16);
            uint64_t v14 = v13 + a3;
            if (__OFADD__(v13, a3)) {
              goto LABEL_31;
            }
LABEL_16:
            BOOL v17 = __OFADD__(v13, a3);
            uint64_t v18 = v13 + a3;
            if (v17) {
              goto LABEL_26;
            }
            BOOL v17 = __OFADD__(v18, 1);
            uint64_t v19 = v18 + 1;
            if (v17) {
              goto LABEL_27;
            }
            if (v19 < v14) {
              goto LABEL_28;
            }
            sub_10006C51C(&qword_1004545A0);
            sub_10008BFB8();
            sub_10008C0B0((unint64_t *)&qword_1004545B0, &qword_1004545A0);
            DataProtocol.copyBytes<A>(to:from:)();
            uint64_t v20 = 0;
            sub_10006D144(a1, a2);
            break;
          default:
LABEL_34:
            JUMPOUT(0);
        }
      }
      else
      {
LABEL_14:
        _StringGuts.grow(_:)(47);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        v16._countAndFlagsBits = 0x6164206D6F726620;
        v16._object = (void *)0xEF206E656C206174;
        String.append(_:)(v16);
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_23;
          case 1:
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_23;
            }
            goto LABEL_32;
          case 2:
            if (__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
              goto LABEL_33;
            }
LABEL_23:
            uint64_t v21 = sub_10007582C(0, (unint64_t *)&qword_100454598);
            v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v22);
            swift_bridgeObjectRelease();
            v23._countAndFlagsBits = 0x2074657366666F20;
            v23._object = (void *)0xE800000000000000;
            String.append(_:)(v23);
            v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v24);
            swift_bridgeObjectRelease();
            uint64_t v20 = v21;
            sub_100299FAC(0, 1, 0xD000000000000012, 0x80000001003B2400, 0);
            swift_willThrow();
            sub_10006D144(a1, a2);
            break;
          default:
            goto LABEL_34;
        }
      }
      return v20;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_9;
      }
      goto LABEL_30;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_9;
  }
}

uint64_t sub_10007D8AC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v6 = sub_100132DF4;
  if (a5) {
    uint64_t v6 = sub_100132DE8;
  }
  if (__OFADD__(a3, 4))
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v11 = 0;
  switch(v8)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_30;
      }
      uint64_t v11 = HIDWORD(a1) - (int)a1;
LABEL_9:
      if (((uint64_t (*)(uint64_t, uint64_t))v6)(a3 + 4, v11))
      {
        uint64_t v14 = 0;
        uint64_t v15 = a3;
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_16;
          case 1:
            uint64_t v14 = (int)a1;
            uint64_t v15 = (int)a1 + a3;
            if (!__OFADD__((int)a1, a3)) {
              goto LABEL_16;
            }
            __break(1u);
            goto LABEL_14;
          case 2:
            uint64_t v14 = *(void *)(a1 + 16);
            uint64_t v15 = v14 + a3;
            if (__OFADD__(v14, a3)) {
              goto LABEL_32;
            }
LABEL_16:
            BOOL v18 = __OFADD__(v14, a3);
            uint64_t v19 = v14 + a3;
            if (v18) {
              goto LABEL_27;
            }
            BOOL v18 = __OFADD__(v19, 4);
            uint64_t v20 = v19 + 4;
            if (v18) {
              goto LABEL_28;
            }
            if (v20 < v15) {
              goto LABEL_29;
            }
            sub_10006C51C(&qword_1004545A0);
            sub_10008BFB8();
            sub_10008C0B0((unint64_t *)&qword_1004545B0, &qword_1004545A0);
            DataProtocol.copyBytes<A>(to:from:)();
            sub_10006D144(a1, a2);
            unsigned int v21 = bswap32(0);
            if (a4) {
              uint64_t result = 0;
            }
            else {
              uint64_t result = v21;
            }
            break;
          default:
LABEL_35:
            JUMPOUT(0);
        }
      }
      else
      {
LABEL_14:
        _StringGuts.grow(_:)(47);
        swift_bridgeObjectRelease();
        v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v16);
        swift_bridgeObjectRelease();
        v17._countAndFlagsBits = 0x6164206D6F726620;
        v17._object = (void *)0xEF206E656C206174;
        String.append(_:)(v17);
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_25;
          case 1:
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_25;
            }
            goto LABEL_33;
          case 2:
            if (__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
              goto LABEL_34;
            }
LABEL_25:
            sub_10007582C(0, (unint64_t *)&qword_100454598);
            v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v23);
            swift_bridgeObjectRelease();
            v24._countAndFlagsBits = 0x2074657366666F20;
            v24._object = (void *)0xE800000000000000;
            String.append(_:)(v24);
            v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v25);
            swift_bridgeObjectRelease();
            sub_100299FAC(0, 1, 0xD000000000000012, 0x80000001003B2400, 0);
            swift_willThrow();
            uint64_t result = sub_10006D144(a1, a2);
            break;
          default:
            goto LABEL_35;
        }
      }
      return result;
    case 2uLL:
      uint64_t v13 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v11 = v12 - v13;
      if (!__OFSUB__(v12, v13)) {
        goto LABEL_9;
      }
      goto LABEL_31;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v11 = BYTE6(a2);
      goto LABEL_9;
  }
}

void *sub_10007DCC0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = sub_100132DF4;
  if (a5) {
    uint64_t v6 = sub_100132DE8;
  }
  if (__OFADD__(a3, 1))
  {
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }
  unint64_t v8 = a2 >> 62;
  uint64_t v10 = 0;
  switch(v8)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_18;
      }
      uint64_t v10 = HIDWORD(a1) - (int)a1;
LABEL_9:
      if (((uint64_t (*)(uint64_t, uint64_t))v6)(a3 + 1, v10))
      {
        sub_100132E00(a1, a2, a3, 1, &v20);
        object = 0;
        sub_10006D144(a1, a2);
      }
      else
      {
        _StringGuts.grow(_:)(47);
        swift_bridgeObjectRelease();
        uint64_t v20 = 0xD000000000000012;
        uint64_t v21 = 0x80000001003B2400;
        v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v14);
        swift_bridgeObjectRelease();
        v15._countAndFlagsBits = 0x6164206D6F726620;
        v15._object = (void *)0xEF206E656C206174;
        String.append(_:)(v15);
        switch((int)v8)
        {
          case 0:
          case 3:
            goto LABEL_15;
          case 1:
            if (!__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_15;
            }
            goto LABEL_20;
          case 2:
            if (__OFSUB__(*(void *)(a1 + 24), *(void *)(a1 + 16))) {
              goto LABEL_21;
            }
LABEL_15:
            sub_10007582C(0, (unint64_t *)&qword_100454598);
            v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v16);
            swift_bridgeObjectRelease();
            v17._countAndFlagsBits = 0x2074657366666F20;
            v17._object = (void *)0xE800000000000000;
            String.append(_:)(v17);
            v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            object = v18._object;
            String.append(_:)(v18);
            swift_bridgeObjectRelease();
            sub_100299FAC(0, 1, v20, v21, 0);
            swift_willThrow();
            sub_10006D144(a1, a2);
            break;
          default:
            JUMPOUT(0);
        }
      }
      return object;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      uint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_9;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_9;
  }
}

void sub_10007DFFC(int a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v40 = (void *)a3;
  int v41 = a1;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  Swift::String v14 = (uint64_t *)((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  Swift::String v15 = (void *)qword_100468A38;
  *Swift::String v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  unint64_t v17 = _dispatchPreconditionTest(_:)();
  uint64_t v19 = *(void (**)(void *, uint64_t))(v11 + 8);
  char v18 = v11 + 8;
  v19(v14, v10);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (*(unsigned char *)(v5 + 16) == 1)
  {
    if (*(unsigned __int8 *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) < 5u)
    {
      uint64_t v10 = 0;
      unint64_t v17 = 0xF000000000000000;
      goto LABEL_20;
    }
    LODWORD(v23) = 0;
    Swift::String v24 = v40;
    switch(a4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v40), v40))
        {
          __break(1u);
LABEL_30:
          __break(1u);
        }
        else
        {
          unint64_t v23 = HIDWORD(v40) - (int)v40;
LABEL_15:
          if ((v23 & 0x8000000000000000) == 0 && v23 < 0x10000)
          {
LABEL_17:
            uint64_t v27 = sub_10008909C(v41, a2, v23);
            unint64_t v29 = (unint64_t)v28;
            uint64_t v30 = sub_100266BA4(v24, a4, v27, v28);
            if (v6)
            {
              uint64_t v32 = v27;
              unint64_t v33 = v29;
LABEL_26:
              sub_10006D144(v32, v33);
              return;
            }
            uint64_t v10 = v30;
            unint64_t v17 = v31;
            sub_10006D144(v27, v29);
LABEL_20:
            char v18 = a2;
            if (qword_100453668 == -1)
            {
LABEL_21:
              uint64_t v34 = v10;
              unint64_t v35 = v17;
              if (v17 >> 60 == 15)
              {
                uint64_t v34 = (uint64_t)v40;
                sub_10006D0EC((uint64_t)v40, a4);
                unint64_t v35 = a4;
              }
              sub_1000758F4(v10, v17);
              uint64_t v36 = sub_1000891C8(v41, v18, v34, v35);
              unint64_t v38 = v37;
              sub_10006D144(v34, v35);
              if (qword_1004536B0 != -1) {
                swift_once();
              }
              sub_1000CB6FC(v36, v38);
              sub_100075868(v10, v17);
              uint64_t v32 = v36;
              unint64_t v33 = v38;
              goto LABEL_26;
            }
LABEL_28:
            swift_once();
            goto LABEL_21;
          }
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10007E474);
      case 2uLL:
        uint64_t v26 = v40[2];
        uint64_t v25 = v40[3];
        unint64_t v23 = v25 - v26;
        if (!__OFSUB__(v25, v26)) {
          goto LABEL_15;
        }
        goto LABEL_30;
      case 3uLL:
        goto LABEL_17;
      default:
        LODWORD(v23) = BYTE6(a4);
        goto LABEL_17;
    }
  }
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    Swift::String v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not running", v22, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10007E484@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000893C0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007E4B0()
{
  swift_release();

  swift_release();
  sub_10006D144(*(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier + 8));
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
  unint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);

  return sub_100075868(v1, v2);
}

uint64_t sub_10007E528()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v2);
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8));
  swift_release();

  swift_release();
  sub_10006D144(*(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8));
  return v0;
}

uint64_t sub_10007E664()
{
  sub_10007E528();

  return swift_deallocClassInstance();
}

uint64_t sub_10007E6BC()
{
  return type metadata accessor for LyonPeer(0);
}

uint64_t type metadata accessor for LyonPeer(uint64_t a1)
{
  return sub_100087C90(a1, qword_1004541A8);
}

uint64_t sub_10007E6E4()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_10007E7E4()
{
  type metadata accessor for Lyon(0);
  swift_allocObject();
  uint64_t result = sub_10007E908();
  qword_100468518 = result;
  return result;
}

void sub_10007E824()
{
  sub_1001AF4B4();
  byte_100468520 = v0 & 1;
}

void sub_10007E898()
{
  id v0 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithIdentifier:v1];

  qword_100454178 = (uint64_t)v2;
}

uint64_t sub_10007E908()
{
  *(unsigned char *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Lyon_maxMessageLength) = 2013;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = _swiftEmptyArrayStorage;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_10008AFD0;
  void v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_1004104D0;
  NSString v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

uint64_t sub_10007EA54()
{
  char v1 = *(unsigned char *)(v0 + 16);
  int v41 = &type metadata for Bool;
  LOBYTE(v40) = v1;
  sub_1000761D0(&v40, &v38);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v38, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  uint64_t v3 = swift_bridgeObjectRelease();
  if (qword_100453910 != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v5 = __chkstk_darwin(v3, v4);
  __chkstk_darwin(v5, v6);
  unint64_t v8 = v7 + 4;
  os_unfair_lock_lock(v7 + 4);
  sub_10008AFEC(&v40);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = v40;
  unint64_t v10 = v40 & 0xC000000000000001;
  if ((v40 & 0xC000000000000001) != 0)
  {
    uint64_t v11 = __CocoaSet.count.getter();
    if (v11) {
      goto LABEL_5;
    }
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_28:
    int v41 = (void *)sub_10006C51C((uint64_t *)&unk_100455780);
    *(void *)&long long v40 = _swiftEmptyArrayStorage;
    sub_1000761D0(&v40, &v38);
    char v32 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v38, 0x657463656E6E6F63, 0xEE00737265655064, v32);
    swift_bridgeObjectRelease();
    if (qword_100453670 != -1) {
      swift_once();
    }
    int v41 = &type metadata for Bool;
    LOBYTE(v40) = byte_100468520;
    sub_1000761D0(&v40, &v38);
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v38, 0xD000000000000015, 0x80000001003B2310, v33);
    swift_bridgeObjectRelease();
    if (qword_1004537E8 != -1) {
      swift_once();
    }
    int v41 = &type metadata for Double;
    *(void *)&long long v40 = qword_100468920;
    sub_1000761D0(&v40, &v38);
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v38, 0xD000000000000015, 0x80000001003B2330, v34);
    swift_bridgeObjectRelease();
    if (qword_1004537F0 != -1) {
      swift_once();
    }
    int v41 = &type metadata for Double;
    *(void *)&long long v40 = qword_100468928;
    sub_1000761D0(&v40, &v38);
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v38, 0xD000000000000015, 0x80000001003B2350, v35);
    swift_bridgeObjectRelease();
    sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v37 = sub_1000190DC((uint64_t)"lyon.state", (uint64_t)isa);

    return (uint64_t)v37;
  }
  uint64_t v11 = *(void *)(v40 + 16);
  if (!v11) {
    goto LABEL_8;
  }
LABEL_5:
  sub_1002CFA20(0, v11 & ~(v11 >> 63), 0);
  if (v10)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v14 = 1;
  }
  else
  {
    uint64_t result = sub_1000FCB1C(v9);
    unsigned __int8 v14 = v15 & 1;
  }
  *(void *)&long long v38 = result;
  *((void *)&v38 + 1) = v13;
  unsigned __int8 v39 = v14;
  if ((v11 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        long long v21 = v38;
        uint64_t v22 = v39;
        sub_1000FB6D0(v38, SDWORD2(v38), v39, v9);
        sub_10006C51C(&qword_1004587F0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1003782A0;
        *(void *)(inited + 32) = 1919247696;
        *(void *)(inited + 40) = 0xE400000000000000;
        *(void *)(inited + 4_Block_object_dispose(&STACK[0x2C0], 8) = UUID.uuidString.getter();
        *(void *)(inited + 56) = v24;
        *(void *)(inited + 64) = 0x656E6F5A49535352;
        *(void *)(inited + 72) = 0xE800000000000000;
        if (qword_1004536B0 != -1) {
          swift_once();
        }
        char v25 = sub_1000CBD8C();
        if (v25 == 2)
        {
          unint64_t v26 = 0xE800000000000000;
          uint64_t v27 = 0x64656C6261736944;
        }
        else
        {
          LOBYTE(v40) = v25 & 1;
          uint64_t v27 = String.init<A>(describing:)();
        }
        *(void *)(inited + 80) = v27;
        *(void *)(inited + 8_Block_object_dispose(&STACK[0x2C0], 8) = v26;
        unint64_t v28 = sub_1001DB39C(inited);
        swift_release();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = sub_1002CFA20(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v30 = _swiftEmptyArrayStorage[2];
        unint64_t v29 = _swiftEmptyArrayStorage[3];
        if (v30 >= v29 >> 1) {
          uint64_t result = sub_1002CFA20(v29 > 1, v30 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v30 + 1;
        _swiftEmptyArrayStorage[v30 + 4] = v28;
        if (v10) {
          break;
        }
        uint64_t v16 = sub_1000FAE78(v21, *((void *)&v21 + 1), v22, v9);
        uint64_t v18 = v17;
        char v20 = v19;
        sub_10008B004(v21, *((uint64_t *)&v21 + 1), v22);
        *(void *)&long long v38 = v16;
        *((void *)&v38 + 1) = v18;
        unsigned __int8 v39 = v20 & 1;
        if (!--v11) {
          goto LABEL_27;
        }
      }
      if ((v22 & 1) == 0) {
        goto LABEL_36;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C(&qword_100454580);
      unint64_t v31 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v31(&v40, 0);
      --v11;
    }
    while (v11);
LABEL_27:
    sub_10008B004(v38, *((uint64_t *)&v38 + 1), v39);
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10007F180()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v24[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    uint64_t v15 = swift_once();
    goto LABEL_11;
  }
  char v9 = *(unsigned char *)(v1 + 16);
  unint64_t v10 = Logger.logObject.getter();
  if (v9)
  {
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Lyon is already running", v12, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v13))
  {
    unsigned __int8 v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned __int8 v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v13, "Starting Lyon", v14, 2u);
    swift_slowDealloc();
  }

  uint64_t v2 = qword_100468A38;
  if (qword_1004536D8 != -1) {
    goto LABEL_21;
  }
LABEL_11:
  uint64_t v17 = __chkstk_darwin(v15, v16);
  *(void *)&v24[-32] = v18;
  *(void *)&v24[-24] = v1;
  *(void *)&v24[-16] = v2;
  __chkstk_darwin(v17, v19);
  *(void *)&v24[-16] = sub_10008C0F4;
  *(void *)&v24[-8] = v20;
  uint64_t v22 = v21 + 4;
  os_unfair_lock_lock(v21 + 4);
  sub_10008C114(v23);
  os_unfair_lock_unlock(v22);
  if (qword_100453658 != -1) {
    swift_once();
  }
  sub_10006E2D0();
  if (qword_100453790 != -1) {
    swift_once();
  }
  sub_1001DC0F4();
  if (qword_100453830 != -1) {
    swift_once();
  }
  sub_100253740();
  if (qword_100453818 != -1) {
    swift_once();
  }
  sub_10022F6D0();
  sub_100089824();
  *(unsigned char *)(v1 + 16) = 1;
}

void sub_10007F568()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
LABEL_8:
    sub_1001DC324();
    if (qword_100453658 != -1) {
      swift_once();
    }
    sub_10006E76C();
    if (qword_1004536A0 != -1) {
      swift_once();
    }
    sub_1000B7250();
    if (qword_100453678 != -1) {
      swift_once();
    }
    [(id)qword_100454178 invalidate];
    *(unsigned char *)(v1 + 16) = 0;
    return;
  }
  int v9 = *(unsigned __int8 *)(v1 + 16);
  unint64_t v10 = Logger.logObject.getter();
  if (v9 == 1)
  {
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping Lyon", v12, 2u);
      swift_slowDealloc();
    }

    *(void *)(v1 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    if (qword_100453790 == -1) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v13))
  {
    unsigned __int8 v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unsigned __int8 v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v13, "Lyon is not running", v14, 2u);
    swift_slowDealloc();
  }
}

void sub_10007F8AC(uint64_t a1, unint64_t a2, __objc2_class **a3)
{
  uint64_t v4 = v3;
  uint64_t v85 = a3;
  uint64_t v84 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v8);
  uint64_t v83 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = type metadata accessor for DispatchPredicate();
  unint64_t isa = (unint64_t)v10[-1].isa;
  __chkstk_darwin(v10, v12);
  unsigned __int8 v14 = ((char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_83;
  }
LABEL_2:
  uint64_t v15 = qword_100468A38;
  v14->unint64_t isa = (Class)qword_100468A38;
  (*(void (**)(NSObject *, void, NSObject *))(isa + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(NSObject *, NSObject *))(isa + 8))(v14, v10);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
    JUMPOUT(0x100080664);
  }
  if (*(unsigned char *)(v4 + 16) != 1)
  {
    char v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not running", v27, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v78 = v7;
  uint64_t v17 = (char *)v85 + OBJC_IVAR____TtC10seserviced4Peer_buffer;
  unint64_t isa = *(unint64_t *)((char *)v85 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
  uint64_t v92 = *(uint64_t *)((char *)v85 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
  uint64_t v18 = v92;
  unint64_t v93 = isa;
  *(_OWORD *)((char *)v85 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
  sub_1000758F4(v18, isa);
  sub_100075868(v18, isa);
  if (isa >> 60 == 15 || (Data.append(_:)(), v18 = v92, isa = v93, uint64_t v7 = v92, v19 = v93, v93 >> 60 == 15))
  {
    sub_10006D0EC(a1, a2);
    uint64_t v7 = a1;
    unint64_t v19 = a2;
  }
  char v90 = v7;
  unint64_t v91 = v19;
  uint64_t v20 = v4 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
  sub_10006D0EC(a1, a2);
  sub_10006D0EC(a1, a2);
  sub_1000758F4(v18, isa);
  v77[3] = v20;
  unint64_t v10 = Logger.logObject.getter();
  unsigned __int8 v14 = static os_log_type_t.debug.getter();
  BOOL v21 = os_log_type_enabled(v10, (os_log_type_t)v14);
  v77[0] = v17;
  v77[2] = a2;
  v77[1] = a1;
  uint64_t v82 = v4;
  if (v21)
  {
    unint64_t isa = a2 >> 62;
    uint64_t v22 = (_DWORD *)swift_slowAlloc();
    _DWORD *v22 = 134218240;
    uint64_t v23 = v22;
    switch(a2 >> 62)
    {
      case 1uLL:
        unint64_t isa = HIDWORD(a1);
        sub_10006D144(a1, a2);
        LODWORD(v24) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_89;
        }
        uint64_t v24 = (int)v24;
        break;
      case 2uLL:
        uint64_t v28 = a1;
        uint64_t v30 = a1 + 16;
        uint64_t v29 = *(void *)(a1 + 16);
        unint64_t isa = *(void *)(v30 + 8);
        uint64_t v31 = v28;
        sub_10006D144(v28, a2);
        uint64_t v24 = isa - v29;
        if (__OFSUB__(isa, v29)) {
          goto LABEL_90;
        }
        a1 = v31;
        break;
      case 3uLL:
        sub_10006D144(a1, a2);
        uint64_t v24 = 0;
        break;
      default:
        sub_10006D144(a1, a2);
        uint64_t v24 = BYTE6(a2);
        break;
    }
    uint64_t v89 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10006D144(a1, a2);
    *((_WORD *)v23 + 6) = 2048;
    swift_beginAccess();
    uint64_t v7 = (uint64_t)v90;
    unint64_t v19 = v91;
    int64_t v32 = 0;
    switch(v91 >> 62)
    {
      case 1uLL:
        LODWORD(v32) = HIDWORD(v90) - v90;
        if (__OFSUB__(HIDWORD(v90), v90)) {
          goto LABEL_91;
        }
        int64_t v32 = (int)v32;
LABEL_24:
        uint64_t v89 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v10, (os_log_type_t)v14, "%ld bytes received; %ld bytes including accumulated",
          (uint8_t *)v23,
          0x16u);
        swift_slowDealloc();

        break;
      case 2uLL:
        Class v34 = v90[2].isa;
        Class v33 = v90[3].isa;
        BOOL v35 = __OFSUB__(v33, v34);
        int64_t v32 = v33 - v34;
        if (!v35) {
          goto LABEL_24;
        }
        goto LABEL_92;
      case 3uLL:
        goto LABEL_24;
      default:
        int64_t v32 = BYTE6(v91);
        goto LABEL_24;
    }
  }
  else
  {
    sub_10006D144(a1, a2);

    sub_10006D144(a1, a2);
  }
  uint64_t v80 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
  char v81 = (char *)v85 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  swift_beginAccess();
  unint64_t v79 = (void (**)(char *, char *, uint64_t))(v78 + 16);
  uint64_t v4 = v78 + 8;
  while (2)
  {
    a1 = v19 >> 62;
    switch(v19 >> 62)
    {
      case 1uLL:
        if (!((v7 ^ (unint64_t)(v7 << 32)) >> 32)) {
          goto LABEL_77;
        }
        goto LABEL_36;
      case 2uLL:
        uint64_t v37 = *(void *)(v7 + 16);
        uint64_t v38 = *(void *)(v7 + 24);
        if (v37 == v38) {
          goto LABEL_77;
        }
        if (a1 == 2)
        {
          BOOL v35 = __OFSUB__(v38, v37);
          uint64_t v36 = v38 - v37;
          if (v35) {
            goto LABEL_88;
          }
        }
        else
        {
LABEL_36:
          LODWORD(v36) = HIDWORD(v7) - v7;
          if (__OFSUB__(HIDWORD(v7), v7)) {
            goto LABEL_82;
          }
          uint64_t v36 = (int)v36;
        }
LABEL_38:
        if (v36 < 4)
        {
          uint64_t v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.info.getter();
          BOOL v51 = os_log_type_enabled(v49, v50);
          uint64_t v52 = (uint64_t *)v77[0];
          if (v51)
          {
            uint64_t v53 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v53 = 134217984;
            uint64_t v7 = (uint64_t)v90;
            unint64_t v19 = v91;
            uint64_t v54 = v53;
            uint64_t v55 = 0;
            switch(v91 >> 62)
            {
              case 1uLL:
                LODWORD(v55) = HIDWORD(v90) - v90;
                if (__OFSUB__(HIDWORD(v90), v90)) {
                  goto LABEL_93;
                }
                uint64_t v55 = (int)v55;
LABEL_69:
                unint64_t v86 = v55;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "Got partial data of size %ld < header size", v54, 0xCu);
                swift_slowDealloc();
                break;
              case 2uLL:
                Class v68 = v90[2].isa;
                Class v67 = v90[3].isa;
                BOOL v35 = __OFSUB__(v67, v68);
                uint64_t v55 = v67 - v68;
                if (!v35) {
                  goto LABEL_69;
                }
                goto LABEL_94;
              case 3uLL:
                goto LABEL_69;
              default:
                uint64_t v55 = BYTE6(v91);
                goto LABEL_69;
            }
          }

          sub_10006D0EC(v7, v19);
          uint64_t v69 = sub_100080770(v7, v19);
          uint64_t v70 = *v52;
          unint64_t v71 = v52[1];
          *uint64_t v52 = v69;
          v52[1] = v72;
LABEL_76:
          sub_100075868(v70, v71);
LABEL_77:
          uint64_t v59 = v7;
          unint64_t v60 = v19;
          goto LABEL_78;
        }
        sub_10006D0EC(v7, v19);
        unsigned __int8 v14 = sub_10007D4A4(v7, v19, 0, 0, 0);
        sub_10006D0EC(v7, v19);
        unint64_t v39 = sub_10007D4A4(v7, v19, 1, 0, 0);
        sub_10006D0EC(v7, v19);
        a2 = (unsigned __int16)sub_10007D08C(v7, v19, 2, 0, 0);
        unint64_t v10 = (a2 + 4);
        if (a2 <= 0x7D9)
        {
          if (a1)
          {
            if (a1 == 1)
            {
              LODWORD(v40) = HIDWORD(v7) - v7;
              if (__OFSUB__(HIDWORD(v7), v7)) {
                goto LABEL_85;
              }
              uint64_t v40 = (int)v40;
            }
            else
            {
              uint64_t v42 = *(void *)(v7 + 16);
              uint64_t v41 = *(void *)(v7 + 24);
              BOOL v35 = __OFSUB__(v41, v42);
              uint64_t v40 = v41 - v42;
              if (v35) {
                goto LABEL_86;
              }
            }
          }
          else
          {
            uint64_t v40 = BYTE6(v19);
          }
          if (v40 < (uint64_t)v10)
          {
            char v61 = Logger.logObject.getter();
            os_log_type_t v62 = static os_log_type_t.info.getter();
            BOOL v63 = os_log_type_enabled(v61, v62);
            unint64_t v64 = (uint64_t *)v77[0];
            if (v63)
            {
              uint64_t v65 = swift_slowAlloc();
              *(_DWORD *)uint64_t v65 = 134218240;
              swift_beginAccess();
              uint64_t v7 = (uint64_t)v90;
              unint64_t v19 = v91;
              unint64_t v66 = 0;
              switch(v91 >> 62)
              {
                case 1uLL:
                  LODWORD(v66) = HIDWORD(v90) - v90;
                  if (__OFSUB__(HIDWORD(v90), v90)) {
                    goto LABEL_95;
                  }
                  unint64_t v66 = (int)v66;
LABEL_74:
                  unint64_t v88 = v66;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v65 + 12) = 2048;
                  unint64_t v88 = a2 + 4;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl((void *)&_mh_execute_header, v61, v62, "Got partial data of size %ld expected %ld", (uint8_t *)v65, 0x16u);
                  swift_slowDealloc();
                  break;
                case 2uLL:
                  Class v74 = v90[2].isa;
                  Class v73 = v90[3].isa;
                  BOOL v35 = __OFSUB__(v73, v74);
                  unint64_t v66 = v73 - v74;
                  if (!v35) {
                    goto LABEL_74;
                  }
                  goto LABEL_96;
                case 3uLL:
                  goto LABEL_74;
                default:
                  unint64_t v66 = BYTE6(v91);
                  goto LABEL_74;
              }
            }

            sub_10006D0EC(v7, v19);
            uint64_t v75 = sub_100080770(v7, v19);
            uint64_t v70 = *v64;
            unint64_t v71 = v64[1];
            uint64_t *v64 = v75;
            v64[1] = v76;
            goto LABEL_76;
          }
          if (a1)
          {
            if (a1 == 1)
            {
              unint64_t isa = (int)v7;
              a1 = (int)v7 + 4;
            }
            else
            {
              unint64_t isa = *(void *)(v7 + 16);
              a1 = isa + 4;
              if (__OFADD__(isa, 4)) {
                goto LABEL_87;
              }
              swift_retain();
            }
            swift_retain();
          }
          else
          {
            unint64_t isa = 0;
            a1 = 4;
          }
          if (!__OFADD__(isa + 4, a2))
          {
            if ((uint64_t)(isa + 4 + a2) < a1) {
              goto LABEL_81;
            }
            uint64_t v43 = Data.subdata(in:)();
            a2 = v44;
            sub_10006D144(v7, v19);
            uint64_t v45 = (uint64_t)v83;
            unint64_t isa = v84;
            (*v79)(v83, v81, v84);
            sub_100080A24(v14, v39, v43, a2, v45, *(uint64_t *)((char *)v85 + v80), v85);
            sub_10006D144(v43, a2);
            (*(void (**)(uint64_t, unint64_t))v4)(v45, isa);
            unsigned __int8 v14 = v90;
            unint64_t v46 = v91;
            sub_10006D0EC((uint64_t)v90, v91);
            sub_100081790((uint64_t)v10, (uint64_t)v14, v46, (uint64_t *)&v86);
            uint64_t v7 = v86;
            unint64_t v19 = v87;
            uint64_t v47 = (uint64_t)v90;
            unint64_t v48 = v91;
            char v90 = v86;
            unint64_t v91 = v87;
            sub_10006D144(v47, v48);
            continue;
          }
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          swift_once();
          goto LABEL_2;
        }
        swift_retain();
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v56, v57))
        {
          swift_release();

          goto LABEL_77;
        }
        uint64_t v58 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 134218240;
        unint64_t v86 = a2 + 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v58 + 12) = 2048;
        unint64_t v86 = 2013;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Discarding message exceeding max size %ld > %ld", (uint8_t *)v58, 0x16u);
        swift_slowDealloc();

        uint64_t v59 = (uint64_t)v90;
        unint64_t v60 = v91;
LABEL_78:
        sub_10006D144(v59, v60);
LABEL_79:
        sub_100075868(v92, v93);
        return;
      case 3uLL:
        goto LABEL_79;
      default:
        if ((v19 & 0xFF000000000000) == 0) {
          goto LABEL_79;
        }
        uint64_t v36 = BYTE6(v19);
        goto LABEL_38;
    }
  }
}

uint64_t sub_1000806B4(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  void v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_100075908(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (unsigned char *)*v2;
  if (*v2 && (v4 = (unsigned char *)v2[1], uint64_t v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_100088D7C(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_100088E40((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      uint64_t v6 = sub_100088EBC((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  sub_10007594C((uint64_t)v8);
  return v6;
}

uint64_t sub_100080770(uint64_t a1, unint64_t a2)
{
  v28[3] = &type metadata for Data;
  void v28[4] = &protocol witness table for Data;
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = sub_100075908(v28, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(v5, v6);
      uint64_t v8 = (unsigned char *)__DataStorage._bytes.getter();
      if (v8)
      {
        uint64_t v9 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = __DataStorage._length.getter();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_100088868(v8, v13, &v27);
      sub_10006D144(v5, v6);
LABEL_27:
      sub_10006D144(a1, a2);
      uint64_t v24 = v27;
      sub_10007594C((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_10006D0EC(a1, a2);
      swift_retain();
      swift_retain();
      id v16 = (unsigned char *)__DataStorage._bytes.getter();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = __DataStorage._offset.getter();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = __DataStorage._length.getter();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_100088868(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_10006D0EC(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_10006D0EC(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_100088868(v26, v7, &v27);
      goto LABEL_27;
  }
}

void sub_100080A24(NSObject *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, __objc2_class **a7)
{
  unint64_t v83 = a4;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (uint64_t *)((char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_100468A38;
  void *v17 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = (id)v18;
  LOBYTE(v1_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_48:
    swift_once();
LABEL_46:
    sub_10007C594((uint64_t)a7, 0);
    swift_errorRelease();
    return;
  }
  uint64_t v81 = a5;
  uint64_t v82 = a6;
  LODWORD(v86) = a1;
  uint64_t v20 = v84 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
  swift_retain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = swift_slowAlloc();
    LODWORD(v85) = a2;
    uint64_t v24 = v23;
    a1 = swift_slowAlloc();
    v88[0] = (uint64_t)a1;
    *(_DWORD *)uint64_t v24 = 136315650;
    unint64_t v25 = sub_10020700C(v86);
    uint64_t v80 = v20;
    uint64_t v87 = sub_100290514(v25, v26, v88);
    uint64_t v79 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 256;
    LOBYTE(v87) = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 15) = 2080;
    swift_retain();
    uint64_t v27 = UUID.uuidString.getter();
    unint64_t v29 = v28;
    swift_release();
    uint64_t v87 = sub_100290514(v27, v29, v88);
    a3 = v79;
    uint64_t v20 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Received type %s id %hhu from peer %s", (uint8_t *)v24, 0x19u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v85;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if ((*((unsigned char *)a7 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) & 1) == 0)
  {
    uint64_t v38 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
    if (*((unsigned __int8 *)a7 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) >= 5u)
    {
      uint64_t v39 = v86;
      uint64_t v41 = 0;
      switch(v83 >> 62)
      {
        case 1uLL:
          LODWORD(v41) = HIDWORD(a3) - a3;
          if (!__OFSUB__(HIDWORD(a3), a3))
          {
            uint64_t v41 = (int)v41;
            goto LABEL_19;
          }
          __break(1u);
          goto LABEL_52;
        case 2uLL:
          uint64_t v43 = *(void *)(a3 + 16);
          uint64_t v42 = *(void *)(a3 + 24);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v41 = v42 - v43;
          if (!v44) {
            goto LABEL_19;
          }
LABEL_52:
          __break(1u);
          goto LABEL_53;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v41 = BYTE6(v83);
LABEL_19:
          unint64_t v45 = v41 - 16;
          if (__OFSUB__(v41, 16))
          {
            __break(1u);
            goto LABEL_50;
          }
          if ((v45 & 0x8000000000000000) != 0
            || (uint64_t v80 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState, v45 >= 0x10000))
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x100081780);
          }
          unint64_t v46 = (__objc2_prot *)sub_10008909C((char)v86, a2, v45);
          unint64_t v48 = (unint64_t)v47;
          uint64_t v39 = 0;
          uint64_t v49 = sub_100265C70(a3, v83, v46, v47);
          unint64_t v51 = v50;
          LODWORD(v85) = a2;
          sub_10006D144((uint64_t)v46, v48);
          char v40 = (char)v86;
          a2 = v51;
          a1 = v49;
          uint64_t v38 = v80;
          break;
      }
    }
    else
    {
      LODWORD(v85) = a2;
      a2 = v83;
      sub_10006D0EC(a3, v83);
      uint64_t v39 = 0;
      a1 = a3;
      char v40 = (char)v86;
    }
    if (v40 == 2)
    {
      sub_100081940(v85, (unint64_t)a1, a2, a7);
    }
    else if (v40 == 1)
    {
      if (*((unsigned __int8 *)a7 + v38) < 5u)
      {
        unint64_t v86 = a1;
        swift_retain_n();
        uint64_t v53 = Logger.logObject.getter();
        os_log_type_t v54 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v53, v54))
        {
          uint64_t v55 = swift_slowAlloc();
          uint64_t v80 = v20;
          uint64_t v56 = v55;
          v88[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v56 = 136315394;
          LOBYTE(v87) = *((unsigned char *)a7 + v38);
          uint64_t v57 = String.init<A>(describing:)();
          uint64_t v87 = sub_100290514(v57, v58, v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v56 + 12) = 2080;
          swift_retain();
          uint64_t v59 = UUID.uuidString.getter();
          unint64_t v61 = v60;
          swift_release();
          uint64_t v87 = sub_100290514(v59, v61, v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v53, v54, "Cannot process UWB message in state %s for %s", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        sub_10007567C();
        swift_allocError();
        unsigned char *v71 = 0;
        swift_willThrow();
        uint64_t v52 = (uint64_t)v86;
LABEL_42:
        sub_10006D144(v52, a2);
        swift_retain_n();
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          Class v74 = (uint8_t *)swift_slowAlloc();
          uint64_t v75 = swift_slowAlloc();
          *(_DWORD *)Class v74 = 136315138;
          v88[0] = v75;
          swift_retain();
          uint64_t v76 = UUID.uuidString.getter();
          unint64_t v78 = v77;
          swift_release();
          uint64_t v87 = sub_100290514(v76, v78, v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Could not process message for %s, disconnecting", v74, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        if (qword_100453668 == -1) {
          goto LABEL_46;
        }
        goto LABEL_48;
      }
      if (qword_1004536A0 != -1) {
LABEL_53:
      }
        swift_once();
      sub_1000C6244(v85, (uint64_t)a1, a2, (uint64_t)a7);
      if (v39)
      {
LABEL_28:
        uint64_t v52 = (uint64_t)a1;
        goto LABEL_42;
      }
    }
    else
    {
      if (v40)
      {
        unint64_t v62 = v83;
        sub_10006D0EC(a3, v83);
        sub_10006D0EC(a3, v62);
        BOOL v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = swift_slowAlloc();
          uint64_t v84 = swift_slowAlloc();
          v88[0] = v84;
          *(_DWORD *)uint64_t v65 = 16777986;
          LOBYTE(v87) = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v65 + 5) = 256;
          LOBYTE(v87) = v85;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v65 + _Block_object_dispose(&STACK[0x2C0], 8) = 2080;
          unint64_t v66 = v83;
          uint64_t v87 = (uint64_t)sub_10023CDF4(a3, v83);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          unint64_t v86 = a1;
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          unint64_t v85 = a2;
          uint64_t v67 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v69 = v68;
          swift_bridgeObjectRelease();
          uint64_t v87 = sub_100290514(v67, v69, v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(a3, v66);
          sub_10006D144(a3, v66);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Ignoring unknown message type %hhu id %hhu payload %s", (uint8_t *)v65, 0x12u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_10006D144((uint64_t)v86, v85);
        }
        else
        {
          sub_10006D144((uint64_t)a1, a2);

          unint64_t v70 = v83;
          sub_10006D144(a3, v83);
          sub_10006D144(a3, v70);
        }
        return;
      }
      if (qword_100453658 != -1) {
LABEL_50:
      }
        swift_once();
      sub_10006FAD4(v85, a1, a2, (uint64_t)a7, v81, v82, 3);
      if (v39) {
        goto LABEL_28;
      }
    }
    sub_10006D144((uint64_t)a1, a2);
    return;
  }
  swift_retain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc();
    v88[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = 136315394;
    swift_retain();
    uint64_t v33 = UUID.uuidString.getter();
    unint64_t v35 = v34;
    swift_release();
    uint64_t v87 = sub_100290514(v33, v35, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    unint64_t v36 = sub_10020700C(v86);
    uint64_t v87 = sub_100290514(v36, v37, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s already errored out, ignoring %s message", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

uint64_t sub_100081790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_100088988(v10, v9, a2, a3);
  if (!a1 || v11 < 0 || v11 >= a1)
  {
    uint64_t v12 = sub_10008890C(v10, a1, a2, a3);
    uint64_t v13 = 0;
    switch((int)v5)
    {
      case 1:
        uint64_t v13 = a2 >> 32;
        break;
      case 2:
        uint64_t v13 = *(void *)(a2 + 24);
        break;
      case 3:
        break;
      default:
        uint64_t v13 = BYTE6(a3);
        break;
    }
    if (v13 < v12)
    {
LABEL_16:
      __break(1u);
      JUMPOUT(0x100081910);
    }
  }
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_10006D144(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

void sub_100081940(uint64_t a1, unint64_t a2, unint64_t a3, __objc2_class **a4)
{
  uint64_t v31 = a1;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (void *)((char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v15)
  {
    uint64_t v16 = v32 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v27[1] = v16;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = v4;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v34 = swift_slowAlloc();
      unint64_t v28 = a3;
      unint64_t v29 = a2;
      *(_DWORD *)uint64_t v20 = 136315138;
      char v21 = v31;
      unint64_t v22 = sub_100207324(v31);
      uint64_t v33 = sub_100290514(v22, v23, &v34);
      a3 = v28;
      a2 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Processing Notification %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      char v21 = v31;
    }
    switch(v21)
    {
      case 0:
        sub_100084308(a2, a3, (uint64_t)a4);
        break;
      case 1:
        if (qword_1004536A0 == -1) {
          goto LABEL_13;
        }
        goto LABEL_18;
      case 2:
        sub_100081D38(a2, a3, (uint64_t)a4);
        break;
      case 3:
        sub_100083290(a2, a3, a4);
        break;
      default:
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          unint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Ignoring unknown notification id", v26, 2u);
          swift_slowDealloc();
        }

        break;
    }
  }
  else
  {
    __break(1u);
LABEL_18:
    swift_once();
LABEL_13:
    sub_1000B7A6C(a2, a3, (uint64_t)a4);
  }
}

void sub_100081D38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v181 = a3;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v178 = v6;
  uint64_t v179 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v158 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  char v15 = (unint64_t *)((char *)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *char v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v18 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  uint64_t v19 = v181;
  if (*(unsigned __int8 *)(v181 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) < 5u)
  {
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      unint64_t v180 = (unint64_t *)swift_slowAlloc();
      unint64_t v182 = v180;
      *(_DWORD *)uint64_t v22 = 136315394;
      LOBYTE(v184) = *(unsigned char *)(v19 + v18);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v184 = sub_100290514(v23, v24, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      swift_retain();
      uint64_t v25 = UUID.uuidString.getter();
      unint64_t v27 = v26;
      swift_release();
      uint64_t v184 = sub_100290514(v25, v27, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cannot process status changed message in state %s for %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_18;
  }
  sub_10006D0EC(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(a1, a2);
  char v15 = [self TLVWithData:isa];

  if (!v15)
  {
    sub_10006D0EC(a1, a2);
    swift_retain();
    sub_10006D0EC(a1, a2);
    swift_retain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    int v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = swift_slowAlloc();
      unint64_t v180 = (unint64_t *)swift_slowAlloc();
      unint64_t v182 = v180;
      *(_DWORD *)uint64_t v59 = 136315394;
      uint64_t v178 = v59 + 4;
      uint64_t v184 = (uint64_t)sub_10023CDF4(a1, a2);
      LODWORD(v179) = v58;
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v60 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v62 = v61;
      swift_bridgeObjectRelease();
      uint64_t v184 = sub_100290514(v60, v62, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      *(_WORD *)(v59 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10008BEDC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v184 = sub_100290514(v63, v64, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v179, "Could not process status changed notification %s from peer %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      swift_release_n();
    }
LABEL_18:
    sub_10007567C();
    swift_allocError();
    *uint64_t v65 = 0;
    swift_willThrow();
    return;
  }
  id v29 = [v15 value];
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    int v34 = sub_10007D4A4(v31, v33, 0, 0, 0);
    if (v3)
    {
LABEL_52:

      return;
    }
    int v35 = v34;
    id v36 = [v15 value];
    if (v36)
    {
      unint64_t v37 = v36;
      uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      char v41 = sub_10007D4A4(v38, v40, 1, 0, 0);
      uint64_t v42 = v181;
      uint64_t v43 = OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus;
      *(unsigned char *)(v181 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) = v41;
      BOOL v44 = (char *)v180 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
      swift_retain_n();
      uint64_t v174 = v44;
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.info.getter();
      int v47 = v46;
      uint64_t v175 = v45;
      BOOL v48 = os_log_type_enabled(v45, v46);
      uint64_t v177 = v43;
      int v176 = v35;
      if (v48)
      {
        uint64_t v49 = swift_slowAlloc();
        LODWORD(v173) = v47;
        uint64_t v50 = v49;
        v172 = (unint64_t *)swift_slowAlloc();
        unint64_t v182 = v172;
        *(_DWORD *)uint64_t v50 = 136315394;
        uint64_t v171 = v50 + 4;
        uint64_t v51 = sub_100207614(*(unsigned char *)(v42 + v43));
        uint64_t v184 = sub_100290514(v51, v52, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2080;
        unint64_t v53 = sub_100207750(v35);
        uint64_t v184 = sub_100290514(v53, v54, (uint64_t *)&v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v55 = v175;
        _os_log_impl((void *)&_mh_execute_header, v175, (os_log_type_t)v173, "Received status update %s from source %s", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }
      unint64_t v66 = (uint64_t *)(v42 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier);
      unint64_t v67 = *(void *)(v42 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier + 8);
      if (v67 >> 60 == 15)
      {
        unint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v68, v69))
        {
          unint64_t v70 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v70 = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "Received status changed notification for unknown reader identifier, likely before auth is completed", v70, 2u);
          swift_slowDealloc();
        }

        sub_10007567C();
        swift_allocError();
        unsigned char *v71 = 0;
        swift_willThrow();
        goto LABEL_52;
      }
      uint64_t v72 = *v66;
      sub_1000758F4(*v66, v67);
      unint64_t v160 = 0x80000001003B1A40;
      unint64_t v161 = (unint64_t)"fastTxAttemptedCount";
      uint64_t v73 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
      uint64_t v171 = v74;
      v172 = (unint64_t *)v73;
      uint64_t v76 = *(void *)(v181 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      unint64_t v169 = *(void *)(v181 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      unint64_t v75 = v169;
      uint64_t v170 = v76;
      unint64_t v164 = (uint64_t *)(v181 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      uint64_t v165 = sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378460;
      unint64_t v162 = (unint64_t)"aliroGroupResolvingKeys";
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x80000001003B0CF0;
      unint64_t v159 = 0x80000001003B0CF0;
      sub_1000758F4(v76, v75);
      uint64_t v173 = v72;
      uint64_t v175 = v67;
      unint64_t v182 = sub_10023CDF4(v72, v67);
      uint64_t v78 = sub_10006C51C((uint64_t *)&unk_100455EA0);
      uint64_t v166 = sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v167 = v78;
      uint64_t v79 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v81 = v80;
      swift_bridgeObjectRelease();
      *(void *)(inited + 4_Block_object_dispose(&STACK[0x2C0], 8) = v79;
      *(void *)(inited + 56) = v81;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 80) = 0x6D617473656D6974;
      *(void *)(inited + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0xE900000000000070;
      unint64_t v182 = 0;
      unint64_t v183 = 0xE000000000000000;
      Date.init()();
      Date.timeIntervalSince1970.getter();
      uint64_t v82 = *(void (**)(char *, uint64_t))(v179 + 8);
      v179 += 8;
      uint64_t v168 = v82;
      v82(v10, v178);
      Double.write<A>(to:)();
      unint64_t v83 = v183;
      *(void *)(inited + 96) = v182;
      *(void *)(inited + 104) = v83;
      *(void *)(inited + 120) = &type metadata for String;
      *(void *)(inited + 12_Block_object_dispose(&STACK[0x2C0], 8) = 0x746174536B636F6CLL;
      *(void *)(inited + 136) = 0xEA00000000007375;
      LOBYTE(v182) = *(unsigned char *)(v181 + v177);
      *(void *)(inited + 144) = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(inited + 152) = v84;
      *(void *)(inited + 16_Block_object_dispose(&STACK[0x2C0], 8) = &type metadata for String;
      *(void *)(inited + 176) = 0xD000000000000013;
      unint64_t v163 = (unint64_t)"cwg.event.did.status.update";
      unint64_t v158 = 0x80000001003B2460;
      *(void *)(inited + 184) = 0x80000001003B2460;
      LOBYTE(v182) = v176;
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(inited + 216) = &type metadata for String;
      *(void *)(inited + 192) = v85;
      *(void *)(inited + 200) = v86;
      unint64_t v87 = sub_1001DB224(inited);
      unint64_t v89 = v171;
      uint64_t v88 = (uint64_t)v172;
      unint64_t v91 = v169;
      uint64_t v90 = v170;
      sub_1002B9140(0xD00000000000003BLL, 0x80000001003B2420, (uint64_t)v172, v171, v170, v169, v87);
      swift_bridgeObjectRelease();
      uint64_t v92 = v90;
      uint64_t v93 = v181;
      sub_100075868(v92, v91);
      sub_100075868(v88, v89);
      int v94 = *(unsigned __int8 *)(v93 + v177);
      if (v94 == 2)
      {
        uint64_t v110 = sub_10011FE64(0xD000000000000012, v160);
        uint64_t v171 = v111;
        v172 = (unint64_t *)v110;
        uint64_t v113 = *v164;
        unint64_t v169 = v164[1];
        unint64_t v112 = v169;
        uint64_t v170 = v113;
        uint64_t v114 = swift_initStackObject();
        *(_OWORD *)(v114 + 16) = xmmword_100378470;
        unint64_t v115 = v159;
        *(void *)(v114 + 32) = 0xD000000000000010;
        *(void *)(v114 + 40) = v115;
        sub_1000758F4(v113, v112);
        unint64_t v182 = sub_10023CDF4(v173, (unint64_t)v175);
        uint64_t v116 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v118 = v117;
        swift_bridgeObjectRelease();
        *(void *)(v114 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v116;
        *(void *)(v114 + 56) = v118;
        *(void *)(v114 + 72) = &type metadata for String;
        *(void *)(v114 + 80) = 0x6D617473656D6974;
        *(void *)(v114 + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0xE900000000000070;
        unint64_t v182 = 0;
        unint64_t v183 = 0xE000000000000000;
        Date.init()();
        Date.timeIntervalSince1970.getter();
        v168(v10, v178);
        Double.write<A>(to:)();
        unint64_t v119 = v183;
        *(void *)(v114 + 96) = v182;
        *(void *)(v114 + 104) = v119;
        *(void *)(v114 + 120) = &type metadata for String;
        *(void *)(v114 + 12_Block_object_dispose(&STACK[0x2C0], 8) = 0xD000000000000013;
        *(void *)(v114 + 136) = v158;
        LOBYTE(v182) = v176;
        uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v114 + 16_Block_object_dispose(&STACK[0x2C0], 8) = &type metadata for String;
        *(void *)(v114 + 144) = v120;
        *(void *)(v114 + 152) = v121;
        unint64_t v107 = sub_1001DB224(v114);
        uint64_t v108 = 0xD000000000000031;
        uint64_t v109 = "com.apple.secureelementservice.acwg.event.did.jam";
      }
      else if (v94 == 1)
      {
        uint64_t v122 = sub_10011FE64(0xD000000000000012, v161 | 0x8000000000000000);
        uint64_t v171 = v123;
        v172 = (unint64_t *)v122;
        uint64_t v125 = *v164;
        unint64_t v169 = v164[1];
        unint64_t v124 = v169;
        uint64_t v170 = v125;
        uint64_t v126 = swift_initStackObject();
        *(_OWORD *)(v126 + 16) = xmmword_100378470;
        unint64_t v127 = v162 | 0x8000000000000000;
        *(void *)(v126 + 32) = 0xD000000000000010;
        *(void *)(v126 + 40) = v127;
        sub_1000758F4(v125, v124);
        unint64_t v182 = sub_10023CDF4(v173, (unint64_t)v175);
        uint64_t v128 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v130 = v129;
        swift_bridgeObjectRelease();
        *(void *)(v126 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v128;
        *(void *)(v126 + 56) = v130;
        *(void *)(v126 + 72) = &type metadata for String;
        *(void *)(v126 + 80) = 0x6D617473656D6974;
        *(void *)(v126 + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0xE900000000000070;
        unint64_t v182 = 0;
        unint64_t v183 = 0xE000000000000000;
        uint64_t v93 = v181;
        Date.init()();
        Date.timeIntervalSince1970.getter();
        v168(v10, v178);
        Double.write<A>(to:)();
        unint64_t v131 = v183;
        *(void *)(v126 + 96) = v182;
        *(void *)(v126 + 104) = v131;
        *(void *)(v126 + 120) = &type metadata for String;
        *(void *)(v126 + 12_Block_object_dispose(&STACK[0x2C0], 8) = 0xD000000000000013;
        *(void *)(v126 + 136) = v163 | 0x8000000000000000;
        LOBYTE(v182) = v176;
        uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v126 + 16_Block_object_dispose(&STACK[0x2C0], 8) = &type metadata for String;
        *(void *)(v126 + 144) = v132;
        *(void *)(v126 + 152) = v133;
        unint64_t v107 = sub_1001DB224(v126);
        uint64_t v108 = 0xD000000000000034;
        uint64_t v109 = "com.apple.secureelementservice.acwg.event.did.unlock";
      }
      else
      {
        if (*(unsigned char *)(v93 + v177))
        {
          swift_retain();
          unint64_t v138 = Logger.logObject.getter();
          os_log_type_t v139 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v138, v139))
          {
            uint64_t v140 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v140 = 16777472;
            uint64_t v93 = v181;
            LOBYTE(v182) = *(unsigned char *)(v181 + v177);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v138, v139, "Unknown status %hhu", v140, 5u);
            swift_slowDealloc();
          }
          else
          {
            swift_release();
          }

LABEL_35:
          uint64_t v141 = &OBJC_PROTOCOL___SEServerProtocol;
          if (*(unsigned char *)(v93 + v177) != 1)
          {
            if (!*(unsigned char *)(v93 + v177))
            {
              if (qword_1004536A0 != -1) {
                swift_once();
              }
              sub_1000B9948(v181);
LABEL_50:
              if (v141[23].opt_inst_meths == (__objc2_meth_list *)-1)
              {
LABEL_51:
                uint64_t v156 = v181;
                int v157 = v176;
                sub_1000B8ECC(v181, v176);
                sub_100084F90(v156, v157);
                sub_100075868(v173, (unint64_t)v175);
                goto LABEL_52;
              }
LABEL_54:
              swift_once();
              goto LABEL_51;
            }
LABEL_46:
            uint64_t v152 = v181;
            swift_retain();
            unint64_t v153 = Logger.logObject.getter();
            os_log_type_t v154 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v153, v154))
            {
              unint64_t v155 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)unint64_t v155 = 16777472;
              uint64_t v141 = &OBJC_PROTOCOL___SEServerProtocol;
              LOBYTE(v182) = *(unsigned char *)(v152 + v177);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v153, v154, "Received status %hhu, doing nothing", v155, 5u);
              swift_slowDealloc();
            }
            else
            {
              swift_release();
            }

            goto LABEL_50;
          }
          if (v176 == 4)
          {
            int v142 = *(_DWORD *)(v181 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount);
            BOOL v143 = __CFADD__(v142, 1);
            int v144 = v142 + 1;
            if (!v143)
            {
              *(_DWORD *)(v181 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount) = v144;
              uint64_t v145 = self;
              sub_10006C51C(&qword_100454040);
              uint64_t v146 = swift_initStackObject();
              *(_OWORD *)(v146 + 16) = xmmword_100378290;
              *(void *)(v146 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
              *(void *)(v146 + 40) = v147;
              sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
              *(NSNumber *)(v146 + 4_Block_object_dispose(&STACK[0x2C0], 8) = NSNumber.init(integerLiteral:)(1);
              sub_1001DB390(v146);
              Class v148 = Dictionary._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              sub_100050AE4(v145, v148);

              if (qword_100453830 == -1)
              {
LABEL_43:
                sub_100253EE4(v149);
                goto LABEL_46;
              }
LABEL_57:
              uint64_t v149 = swift_once();
              goto LABEL_43;
            }
            __break(1u);
          }
          else
          {
            int v150 = *(_DWORD *)(v181 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount);
            BOOL v143 = __CFADD__(v150, 1);
            int v151 = v150 + 1;
            if (!v143)
            {
              *(_DWORD *)(v181 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount) = v151;
              goto LABEL_46;
            }
          }
          __break(1u);
          goto LABEL_57;
        }
        uint64_t v95 = sub_10011FE64(0xD000000000000012, v161 | 0x8000000000000000);
        uint64_t v171 = v96;
        v172 = (unint64_t *)v95;
        uint64_t v98 = *v164;
        unint64_t v169 = v164[1];
        unint64_t v97 = v169;
        uint64_t v170 = v98;
        uint64_t v99 = swift_initStackObject();
        *(_OWORD *)(v99 + 16) = xmmword_100378470;
        unint64_t v100 = v162 | 0x8000000000000000;
        *(void *)(v99 + 32) = 0xD000000000000010;
        *(void *)(v99 + 40) = v100;
        sub_1000758F4(v98, v97);
        unint64_t v182 = sub_10023CDF4(v173, (unint64_t)v175);
        uint64_t v101 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v103 = v102;
        swift_bridgeObjectRelease();
        *(void *)(v99 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v101;
        *(void *)(v99 + 56) = v103;
        *(void *)(v99 + 72) = &type metadata for String;
        *(void *)(v99 + 80) = 0x6D617473656D6974;
        *(void *)(v99 + 8_Block_object_dispose(&STACK[0x2C0], 8) = 0xE900000000000070;
        unint64_t v182 = 0;
        unint64_t v183 = 0xE000000000000000;
        uint64_t v93 = v181;
        Date.init()();
        Date.timeIntervalSince1970.getter();
        v168(v10, v178);
        Double.write<A>(to:)();
        unint64_t v104 = v183;
        *(void *)(v99 + 96) = v182;
        *(void *)(v99 + 104) = v104;
        *(void *)(v99 + 120) = &type metadata for String;
        *(void *)(v99 + 12_Block_object_dispose(&STACK[0x2C0], 8) = 0xD000000000000013;
        *(void *)(v99 + 136) = v163 | 0x8000000000000000;
        LOBYTE(v182) = v176;
        uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v99 + 16_Block_object_dispose(&STACK[0x2C0], 8) = &type metadata for String;
        *(void *)(v99 + 144) = v105;
        *(void *)(v99 + 152) = v106;
        unint64_t v107 = sub_1001DB224(v99);
        uint64_t v108 = 0xD000000000000032;
        uint64_t v109 = "com.apple.secureelementservice.acwg.event.did.lock";
      }
      unint64_t v135 = v171;
      uint64_t v134 = (uint64_t)v172;
      unint64_t v136 = v169;
      uint64_t v137 = v170;
      sub_1002B9140(v108, (unint64_t)(v109 - 32) | 0x8000000000000000, (uint64_t)v172, v171, v170, v169, v107);
      swift_bridgeObjectRelease();
      sub_100075868(v137, v136);
      sub_100075868(v134, v135);
      goto LABEL_35;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100083290(unint64_t a1, unint64_t a2, __objc2_class **a3)
{
  unint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  *uint64_t v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  id v17 = *(void (**)(void *, uint64_t))(v10 + 8);
  uint64_t v16 = v10 + 8;
  v17(v13, v9);
  if (v14)
  {
    if (qword_100453668 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  sub_10007CBEC(0);
  if (v4) {
    return;
  }
  uint64_t v18 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
  if (*((unsigned __int8 *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) - 3 <= 1)
  {
    uint64_t v19 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v19) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_56;
        }
        uint64_t v19 = (int)v19;
LABEL_16:
        unint64_t v32 = v19 - 16;
        if (!__OFSUB__(v19, 16))
        {
          if ((v32 & 0x8000000000000000) == 0)
          {
            uint64_t v97 = OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState;
            if (v32 < 0x10000)
            {
              unint64_t v33 = (__objc2_prot *)sub_10008909C(2, 3, v32);
              unint64_t v35 = (unint64_t)v34;
              uint64_t v16 = sub_100265C70(a1, a2, v33, v34);
              a1 = v36;
              sub_10006D144((uint64_t)v33, v35);
              unint64_t v37 = &v5[OBJC_IVAR____TtC10seserviced4Lyon_logger];
              sub_10006D0EC(v16, a1);
              sub_10006D0EC(v16, a1);
              uint64_t v95 = v37;
              uint64_t v38 = Logger.logObject.getter();
              os_log_type_t v39 = static os_log_type_t.info.getter();
              BOOL v40 = os_log_type_enabled(v38, v39);
              unint64_t v96 = a1;
              if (v40)
              {
                char v41 = (uint8_t *)swift_slowAlloc();
                uint64_t v94 = swift_slowAlloc();
                uint64_t v99 = v94;
                *(_DWORD *)char v41 = 136315138;
                v92[1] = v41 + 4;
                uint64_t v93 = v41;
                uint64_t v98 = (uint64_t)sub_10023CDF4(v16, a1);
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                uint64_t v42 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v44 = v43;
                a1 = v96;
                swift_bridgeObjectRelease();
                uint64_t v98 = sub_100290514(v42, v44, &v99);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10006D144(v16, a1);
                sub_10006D144(v16, a1);
                _os_log_impl((void *)&_mh_execute_header, v38, v39, "Access Protocol Completed payload : %s", v93, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                sub_10006D144(v16, a1);
                sub_10006D144(v16, a1);
              }
              sub_10006D0EC(v16, a1);
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              sub_10006D144(v16, a1);
              unint64_t v5 = (char *)[self TLVWithData:isa];

              if (!v5)
              {
                sub_10006D0EC(v16, a1);
                swift_retain();
                sub_10006D0EC(v16, a1);
                swift_retain();
                uint64_t v59 = Logger.logObject.getter();
                os_log_type_t v60 = static os_log_type_t.error.getter();
                int v61 = v60;
                if (os_log_type_enabled(v59, v60))
                {
                  uint64_t v62 = swift_slowAlloc();
                  uint64_t v97 = swift_slowAlloc();
                  uint64_t v99 = v97;
                  *(_DWORD *)uint64_t v62 = 136315394;
                  uint64_t v94 = v62 + 4;
                  uint64_t v98 = (uint64_t)sub_10023CDF4(v16, a1);
                  LODWORD(v95) = v61;
                  sub_10006C51C((uint64_t *)&unk_100455EA0);
                  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                  uint64_t v63 = BidirectionalCollection<>.joined(separator:)();
                  uint64_t v64 = v16;
                  unint64_t v66 = v65;
                  swift_bridgeObjectRelease();
                  uint64_t v98 = sub_100290514(v63, v66, &v99);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  uint64_t v16 = v64;
                  swift_bridgeObjectRelease();
                  sub_10006D144(v64, a1);
                  sub_10006D144(v64, a1);
                  *(_WORD *)(v62 + 12) = 2080;
                  type metadata accessor for UUID();
                  sub_10008BEDC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
                  uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
                  uint64_t v98 = sub_100290514(v67, v68, &v99);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v95, "Could not process access protocol completed notification %s from peer %s", (uint8_t *)v62, 0x16u);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {

                  sub_10006D144(v16, a1);
                  sub_10006D144(v16, a1);
                  swift_release_n();
                }
                sub_10007567C();
                swift_allocError();
                *os_log_type_t v69 = 0;
                swift_willThrow();
LABEL_30:
                sub_10006D144(v16, a1);
                return;
              }
              id v46 = [v5 value];
              if (v46)
              {
                int v47 = v46;
                uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v50 = v49;

                char v51 = sub_10007D4A4(v48, v50, 1, 0, 0);
                uint64_t v52 = OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus;
                *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) = v51;
                *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatusAtConnection) = v51;
                id v53 = [v5 value];
                if (v53)
                {
                  unint64_t v54 = v53;
                  uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v57 = v56;

                  unsigned __int8 v58 = sub_10007D4A4(v55, v57, 0, 0, 0);
                  uint64_t v70 = OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue;
                  *((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue) = v58 >> 5;
                  swift_retain_n();
                  unint64_t v71 = Logger.logObject.getter();
                  os_log_type_t v72 = static os_log_type_t.info.getter();
                  int v73 = v72;
                  if (os_log_type_enabled(v71, v72))
                  {
                    unint64_t v74 = (_DWORD *)swift_slowAlloc();
                    LODWORD(v94) = v73;
                    unint64_t v75 = v74;
                    _DWORD *v74 = 16777728;
                    LOBYTE(v99) = *((unsigned char *)a3 + v52);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    *(_WORD *)((char *)v75 + 5) = 256;
                    uint64_t v93 = (uint8_t *)v75 + 7;
                    uint64_t v76 = v16;
                    char v77 = *((unsigned char *)a3 + v70);
                    swift_release();
                    LOBYTE(v99) = v77;
                    uint64_t v16 = v76;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_release();
                    _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v94, "received status update %hhu and reader status reporting value %hhu", (uint8_t *)v75, 8u);
                    swift_slowDealloc();
                  }
                  else
                  {
                    swift_release_n();
                  }

                  if (*((unsigned char *)a3 + v70) != 1)
                  {
                    swift_retain_n();
                    uint64_t v78 = Logger.logObject.getter();
                    os_log_type_t v79 = static os_log_type_t.error.getter();
                    int v80 = v79;
                    if (os_log_type_enabled(v78, v79))
                    {
                      uint64_t v81 = swift_slowAlloc();
                      uint64_t v99 = swift_slowAlloc();
                      *(_DWORD *)uint64_t v81 = 16777730;
                      LOBYTE(v9_Block_object_dispose(&STACK[0x2C0], 8) = *((unsigned char *)a3 + v70);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_release();
                      *(_WORD *)(v81 + 5) = 2080;
                      uint64_t v94 = v16;
                      LODWORD(v93) = v80;
                      type metadata accessor for UUID();
                      sub_10008BEDC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
                      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
                      uint64_t v98 = sub_100290514(v82, v83, &v99);
                      uint64_t v16 = v94;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_release_n();
                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v93, "unsolicitedReaderStatusReporting value %hhu is not 1 as expected for %s", (uint8_t *)v81, 0xFu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      swift_release_n();
                    }

                    a1 = v96;
                    goto LABEL_42;
                  }
                  a1 = v96;
                  if (qword_1004536A0 == -1)
                  {
LABEL_37:
                    sub_1000B8ECC((uint64_t)a3, 0);
LABEL_42:
                    *((unsigned char *)a3 + v97) = 5;
                    if (*((unsigned char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID + 4))
                    {
                      swift_retain_n();
                      uint64_t v84 = Logger.logObject.getter();
                      os_log_type_t v85 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v84, v85))
                      {
                        uint64_t v86 = (uint8_t *)swift_slowAlloc();
                        uint64_t v87 = swift_slowAlloc();
                        uint64_t v94 = v16;
                        *(_DWORD *)uint64_t v86 = 136315138;
                        uint64_t v99 = v87;
                        uint64_t v97 = (uint64_t)(v86 + 4);
                        type metadata accessor for UUID();
                        sub_10008BEDC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
                        a1 = v96;
                        uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
                        uint64_t v98 = sub_100290514(v88, v89, &v99);
                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                        swift_release_n();
                        swift_bridgeObjectRelease();
                        _os_log_impl((void *)&_mh_execute_header, v84, v85, "No cached uwb session id for %s", v86, 0xCu);
                        swift_arrayDestroy();
                        uint64_t v16 = v94;
                        swift_slowDealloc();
                        swift_slowDealloc();
                      }
                      else
                      {
                        swift_release_n();
                      }

                      sub_10007567C();
                      swift_allocError();
                      *unint64_t v91 = 0;
                      swift_willThrow();
                    }
                    else
                    {
                      uint64_t v90 = *(unsigned int *)((char *)a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID);
                      if (qword_100453658 != -1) {
                        swift_once();
                      }
                      sub_100075CC0((uint64_t)a3);
                      if (qword_1004536A0 != -1) {
                        swift_once();
                      }
                      sub_1000B90C8(a3, v90);
                      sub_1000B9610((uint64_t)a3);
                    }

                    goto LABEL_30;
                  }
LABEL_58:
                  swift_once();
                  goto LABEL_37;
                }
              }
              else
              {
                __break(1u);
              }
              __break(1u);
            }
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1000842F8);
        }
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      case 2uLL:
        uint64_t v30 = *(void *)(a1 + 16);
        uint64_t v29 = *(void *)(a1 + 24);
        BOOL v31 = __OFSUB__(v29, v30);
        uint64_t v19 = v29 - v30;
        if (!v31) {
          goto LABEL_16;
        }
        goto LABEL_57;
      case 3uLL:
        goto LABEL_16;
      default:
        uint64_t v19 = BYTE6(a2);
        goto LABEL_16;
    }
  }
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v99 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136315394;
    LOBYTE(v9_Block_object_dispose(&STACK[0x2C0], 8) = *((unsigned char *)a3 + v18);
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v98 = sub_100290514(v23, v24, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    swift_retain();
    uint64_t v25 = UUID.uuidString.getter();
    unint64_t v27 = v26;
    swift_release();
    uint64_t v98 = sub_100290514(v25, v27, &v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Cannot process access protocol completed in state %s for %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_10007567C();
  swift_allocError();
  *unint64_t v28 = 0;
  swift_willThrow();
}

void sub_100084308(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(v7 - 1);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, void *))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_31:
    swift_once();
LABEL_29:
    sub_1000CAD08();

    return;
  }
  sub_10006D0EC(a1, a2);
  __int16 v14 = sub_10007D08C(a1, a2, 0, 0, 1);
  if (v3)
  {
    swift_errorRelease();
  }
  else if (!v14)
  {
    swift_retain_n();
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v56 = v39;
      uint64_t v54 = (uint64_t)(v38 + 4);
      swift_retain();
      uint64_t v40 = UUID.uuidString.getter();
      unint64_t v42 = v41;
      swift_release();
      uint64_t v55 = sub_100290514(v40, v42, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Received busy subevent from peer %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_10021220C(0);
    int v49 = *(_DWORD *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount);
    BOOL v50 = __CFADD__(v49, 1);
    int v51 = v49 + 1;
    if (!v50)
    {
      *(_DWORD *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount) = v51;
      return;
    }
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  sub_10006D0EC(a1, a2);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(a1, a2);
  uint64_t v7 = [self TLVWithData:isa];

  if (v7)
  {
    unsigned int v16 = [v7 tag];
    if (v16 >= 0x100)
    {
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    if (v16 == 1)
    {
      id v17 = [v7 value];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v21 = v20;

        char v22 = sub_10007D4A4(v19, v21, 0, 0, 0);
        char v43 = v22;
        swift_retain_n();
        unint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc();
          uint64_t v54 = swift_slowAlloc();
          uint64_t v56 = v54;
          *(_DWORD *)uint64_t v46 = 136315394;
          uint64_t v53 = v46 + 4;
          type metadata accessor for UUID();
          sub_10008BEDC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v55 = sub_100290514(v47, v48, &v56);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 256;
          LOBYTE(v55) = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Received general error from peer %s with value %hhu", (uint8_t *)v46, 0xFu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        *(_DWORD *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 10;
        *(unsigned char *)(a3 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 1;
        if (qword_1004536B0 == -1) {
          goto LABEL_29;
        }
        goto LABEL_31;
      }
      goto LABEL_33;
    }
    BOOL v31 = v7;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      int v34 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)int v34 = 67109120;
      LODWORD(v56) = [v31 tag];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unknown/Unsupported event TLV with tag: %u", v34, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    sub_10006D0EC(a1, a2);
    swift_retain();
    sub_10006D0EC(a1, a2);
    swift_retain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      uint64_t v56 = v54;
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v53 = v25 + 4;
      uint64_t v55 = (uint64_t)sub_10023CDF4(a1, a2);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v55 = sub_100290514(v26, v28, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      *(_WORD *)(v25 + 12) = 2080;
      type metadata accessor for UUID();
      sub_10008BEDC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = sub_100290514(v29, v30, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Could not process event notification %s from peer %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      swift_release_n();
    }
    sub_10007567C();
    swift_allocError();
    *unint64_t v35 = 0;
    swift_willThrow();
  }
}

void sub_100084F90(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  int v36 = a2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v37 = sub_10008A10C(a1);
  if (qword_100453830 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_100255040();
  BOOL v11 = sub_100085FD4(1, (uint64_t)v10);
  BOOL v12 = sub_100085FD4(0, (uint64_t)v10);
  BOOL v13 = sub_100085FD4(2, (uint64_t)v10);
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v3 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) + 16)) {
    *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 2;
  }
  unsigned int v14 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime + 8)) {
    goto LABEL_10;
  }
  double v15 = *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  double v18 = v17 - v15;
  if ((~COERCE__INT64(v17 - v15) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v18 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v18 >= 4294967300.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  BOOL v19 = __CFADD__(v14, v18);
  v14 += v18;
  if (v19)
  {
LABEL_23:
    __break(1u);
    return;
  }
LABEL_10:
  unsigned int v20 = (v36 - 1);
  if (v20 < 7) {
    unsigned int v21 = v20 + 1;
  }
  else {
    unsigned int v21 = 0;
  }
  if (v11) {
    int v22 = 4;
  }
  else {
    int v22 = 0;
  }
  unsigned int v23 = v22 & 0xFFFFFFFE | v12;
  if (v13) {
    uint64_t v24 = v23 | 2;
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = self;
  uint64_t v26 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue);
  uint64_t v27 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatusAtConnection);
  uint64_t v28 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus);
  uint64_t v29 = *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent);
  sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount));
  unsigned int v31 = v30;
  sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount));
  unsigned int v33 = v32;
  sub_1000B3890(2u, v14);
  sub_100051964(v25, v37, v26, v27, v28, v21, v29, v24, v31, v33, v34);
}

uint64_t sub_100085284(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  a1 = result;
  if (*(unsigned char *)(result + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
  {
    if ((a2 & 1) == 0)
    {
      swift_retain_n();
      BOOL v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unsigned int v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        *(_DWORD *)unsigned int v14 = 136315138;
        uint64_t v23 = v15;
        swift_retain();
        uint64_t v16 = UUID.uuidString.getter();
        unint64_t v18 = v17;
        swift_release();
        uint64_t v22 = sub_100290514(v16, v18, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Timer ended for incoming message, disconnecting %s", v14, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      if (qword_100453668 != -1) {
        swift_once();
      }
      sub_10007C594(a1, 0);
      goto LABEL_17;
    }
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unsigned int v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Timer ended for outgoing message, sending busy subevent", v21, 2u);
      swift_slowDealloc();
    }

    if (qword_100453668 == -1)
    {
LABEL_12:
      sub_10008A15C(a1);
      swift_release();
      return 1;
    }
LABEL_20:
    swift_once();
    goto LABEL_12;
  }
LABEL_17:
  swift_release();
  return 0;
}

void sub_100085724(char a1, __objc2_class **a2)
{
  unint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  BOOL v11 = (uint64_t *)((char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  BOOL v12 = (void *)qword_100468A38;
  *BOOL v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  uint64_t v15 = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    uint64_t v15 = swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v4 + 16) != 1)
  {
    unsigned int v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unsigned int v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned int v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not running", v32, 2u);
      swift_slowDealloc();
    }

    return;
  }
  if (qword_100453910 != -1) {
    goto LABEL_54;
  }
LABEL_6:
  uint64_t v17 = __chkstk_darwin(v15, v16);
  *(&v71 - 4) = (uint64_t)sub_10008C554;
  *(&v71 - 3) = 0;
  *(&v71 - 2) = v18;
  __chkstk_darwin(v17, v19);
  *(&v71 - 2) = (uint64_t)sub_10008AFD4;
  *(&v71 - 1) = v20;
  uint64_t v22 = v21 + 4;
  os_unfair_lock_lock(v21 + 4);
  sub_10008AFEC(&v93);
  if (v3)
  {
    os_unfair_lock_unlock(v22);
    __break(1u);
  }
  else
  {
    uint64_t v23 = 0;
    os_unfair_lock_unlock(v22);
    uint64_t v24 = (uint64_t)v93;
    if (a1)
    {
      if (qword_100453818 != -1) {
        goto LABEL_56;
      }
      while (1)
      {
        id v25 = [a2 publicKeyIdentifier];
        uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v27 = a2;
        a2 = v28;

        uint64_t v29 = sub_10022FA44(v26, (unint64_t)a2);
        sub_10006D144(v26, (unint64_t)a2);
        if (v23)
        {
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v79 = 0;
        int v80 = v27;
        uint64_t v84 = OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers;
        unint64_t v85 = v4;
        *(void *)(v4 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = v29;
        swift_bridgeObjectRelease();
        if ((v24 & 0xC000000000000001) != 0)
        {
          __CocoaSet.makeIterator()();
          type metadata accessor for Peer();
          sub_10008BEDC((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
          Set.Iterator.init(_cocoa:)();
          uint64_t v24 = v88;
          uint64_t v34 = v89;
          uint64_t v35 = v90;
          uint64_t v23 = v91;
          unint64_t v4 = v92;
        }
        else
        {
          uint64_t v23 = 0;
          uint64_t v36 = -1 << *(unsigned char *)(v24 + 32);
          uint64_t v34 = v24 + 56;
          uint64_t v37 = ~v36;
          uint64_t v38 = -v36;
          uint64_t v39 = v38 < 64 ? ~(-1 << v38) : -1;
          unint64_t v4 = v39 & *(void *)(v24 + 56);
          uint64_t v35 = v37;
        }
        uint64_t v78 = v35;
        int64_t v40 = (unint64_t)(v35 + 64) >> 6;
        *(void *)&long long v33 = 136315394;
        long long v77 = v33;
        uint64_t v76 = (char *)&type metadata for Any + 8;
        uint64_t v86 = (char *)&type metadata for Swift.AnyObject + 8;
        uint64_t v82 = v24 & 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v83 = v34;
        int64_t v81 = v40;
        while (v24 < 0)
        {
          uint64_t v44 = __CocoaSet.Iterator.next()();
          if (!v44) {
            goto LABEL_52;
          }
          uint64_t v87 = v44;
          type metadata accessor for Peer();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          a2 = v93;
          swift_unknownObjectRelease();
          uint64_t v43 = v23;
          uint64_t v41 = v4;
LABEL_46:
          if (!a2) {
            goto LABEL_52;
          }
          if (*a2 == _TtC10seserviced8LyonPeer
            && *((unsigned char *)a2 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
          {
            uint64_t v48 = *(void *)(v85 + v84);
            uint64_t v49 = *(uint64_t *)((char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier);
            unint64_t v50 = *(unint64_t *)((char *)a2
                                      + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier
                                      + 8);
            swift_retain();
            swift_bridgeObjectRetain();
            sub_10006D0EC(v49, v50);
            char v51 = sub_100086034(v49, v50, v48);
            sub_10006D144(v49, v50);
            swift_bridgeObjectRelease();
            if (v51)
            {
              *(_DWORD *)((char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 4;
              swift_retain_n();
              uint64_t v52 = v80;
              uint64_t v53 = Logger.logObject.getter();
              os_log_type_t v54 = static os_log_type_t.error.getter();
              int v55 = v54;
              if (os_log_type_enabled(v53, v54))
              {
                uint64_t v56 = swift_slowAlloc();
                uint64_t v75 = swift_slowAlloc();
                uint64_t v93 = (__objc2_class **)v75;
                *(_DWORD *)uint64_t v56 = v77;
                os_log_t v74 = v53;
                swift_retain();
                uint64_t v57 = UUID.uuidString.getter();
                int v73 = v55;
                unint64_t v59 = v58;
                swift_release();
                uint64_t v60 = sub_100290514(v57, v59, (uint64_t *)&v93);
                uint64_t v72 = v56;
                *(void *)(v56 + 4) = v60;
                swift_release_n();
                swift_bridgeObjectRelease();
                *(_WORD *)(v56 + 12) = 2080;
                id v61 = [v52 publicKeyIdentifier];
                uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v63 = v52;
                unint64_t v65 = v64;

                uint64_t v66 = Data.description.getter();
                unint64_t v68 = v67;
                sub_10006D144(v62, v65);
                uint64_t v69 = sub_100290514(v66, v68, (uint64_t *)&v93);
                uint64_t v70 = (uint8_t *)v72;
                *(void *)(v72 + 14) = v69;

                swift_bridgeObjectRelease();
                uint64_t v53 = v74;
                _os_log_impl((void *)&_mh_execute_header, v74, (os_log_type_t)v73, "Disconnecting %s since %s is pre armed", v70, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {

                swift_release_n();
              }

              sub_10007C594((uint64_t)a2, 0);
            }
            swift_release();
            uint64_t v34 = v83;
            int64_t v40 = v81;
          }
          swift_release();
          uint64_t v23 = v43;
          unint64_t v4 = v41;
        }
        if (v4) {
          break;
        }
        int64_t v45 = v23 + 1;
        if (!__OFADD__(v23, 1))
        {
          if (v45 >= v40) {
            goto LABEL_52;
          }
          unint64_t v46 = *(void *)(v34 + 8 * v45);
          uint64_t v43 = v23 + 1;
          if (!v46)
          {
            uint64_t v43 = v23 + 2;
            if (v23 + 2 >= v40) {
              goto LABEL_52;
            }
            unint64_t v46 = *(void *)(v34 + 8 * v43);
            if (!v46)
            {
              uint64_t v43 = v23 + 3;
              if (v23 + 3 >= v40) {
                goto LABEL_52;
              }
              unint64_t v46 = *(void *)(v34 + 8 * v43);
              if (!v46)
              {
                uint64_t v43 = v23 + 4;
                if (v23 + 4 >= v40) {
                  goto LABEL_52;
                }
                unint64_t v46 = *(void *)(v34 + 8 * v43);
                if (!v46)
                {
                  uint64_t v47 = v23 + 5;
                  while (v40 != v47)
                  {
                    unint64_t v46 = *(void *)(v34 + 8 * v47++);
                    if (v46)
                    {
                      uint64_t v43 = v47 - 1;
                      goto LABEL_44;
                    }
                  }
LABEL_52:
                  sub_10008C4F0();
                  return;
                }
              }
            }
          }
LABEL_44:
          uint64_t v41 = (v46 - 1) & v46;
          unint64_t v42 = __clz(__rbit64(v46)) + (v43 << 6);
          goto LABEL_45;
        }
        __break(1u);
LABEL_56:
        swift_once();
      }
      uint64_t v41 = (v4 - 1) & v4;
      unint64_t v42 = __clz(__rbit64(v4)) | (v23 << 6);
      uint64_t v43 = v23;
LABEL_45:
      a2 = *(__objc2_class ***)(*(void *)(v24 + 48) + 8 * v42);
      swift_retain();
      goto LABEL_46;
    }
    swift_bridgeObjectRelease();
    *(void *)(v4 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }
}

BOOL sub_100085FD4(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  int v3 = result;
  if (*(unsigned char *)(a2 + 32) == result) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  for (uint64_t i = 33; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100086034(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = a2;
  uint64_t v7 = (char *)(a2 >> 62);
  unint64_t v75 = HIDWORD(a1);
  BOOL v8 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v78 = v8;
  size_t __n = BYTE6(a2);
  uint64_t v76 = (int)a1;
  size_t v77 = HIDWORD(a1) - (int)a1;
  uint64_t v74 = a1 >> 32;
  uint64_t v70 = (a1 >> 32) - (int)a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = (unint64_t *)(a3 + 40);
  unint64_t v72 = HIDWORD(v5);
  unint64_t v73 = v5 >> 40;
  uint64_t v80 = v7;
  unint64_t v71 = v5;
  int v79 = (int)v7;
  while (2)
  {
    uint64_t v11 = *(v9 - 1);
    unint64_t v10 = *v9;
    unint64_t v12 = *v9 >> 62;
    v9 += 2;
    uint64_t v13 = 0;
    switch(v12)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v11), v11))
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_14:
        sub_10006D0EC(v11, v10);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v11 + 16);
        uint64_t v14 = *(void *)(v11 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_14;
        }
        goto LABEL_121;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v10);
        break;
    }
    size_t v16 = __n;
    switch(v80)
    {
      case 1:
        size_t v16 = v77;
        if (v78) {
          goto LABEL_122;
        }
        goto LABEL_19;
      case 2:
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v17 = *(void *)(a1 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        size_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_19;
        }
        goto LABEL_123;
      case 3:
        if (v13) {
          goto LABEL_7;
        }
        goto LABEL_118;
      default:
LABEL_19:
        if (v13 != v16)
        {
LABEL_7:
          sub_10006D144(v11, v10);
LABEL_8:
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            return 0;
          }
          continue;
        }
        if (v13 >= 1)
        {
          switch((int)v12)
          {
            case 1:
              if ((int)v11 > v11 >> 32) {
                goto LABEL_124;
              }
              uint64_t v24 = __DataStorage._bytes.getter();
              if (v24)
              {
                uint64_t v25 = v24;
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v11, v26)) {
                  goto LABEL_126;
                }
                uint64_t v27 = (const void *)(v25 + (int)v11 - v26);
              }
              else
              {
                uint64_t v27 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v27) {
                  goto LABEL_154;
                }
                int v34 = memcmp(v27, __s1, __n);
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_135;
                }
                swift_retain();
                uint64_t v41 = (char *)__DataStorage._bytes.getter();
                if (v41)
                {
                  uint64_t v42 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v42)) {
                    goto LABEL_142;
                  }
                  v41 += v76 - v42;
                }
                uint64_t v43 = __DataStorage._length.getter();
                size_t v44 = v70;
                if (v43 < v70) {
                  size_t v44 = v43;
                }
                if (!v27) {
                  goto LABEL_147;
                }
                if (!v41) {
                  goto LABEL_148;
                }
                int v34 = memcmp(v27, v41, v44);
                sub_10006D144(a1, v5);
LABEL_101:
                sub_10006D144(v11, v10);
LABEL_102:
                if (!v34) {
                  goto LABEL_119;
                }
                goto LABEL_8;
              }
              uint64_t v61 = *(void *)(a1 + 16);
              uint64_t v62 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v63 = (char *)__DataStorage._bytes.getter();
              if (v63)
              {
                uint64_t v64 = __DataStorage._offset.getter();
                if (__OFSUB__(v61, v64)) {
                  goto LABEL_141;
                }
                v63 += v61 - v64;
              }
              BOOL v19 = __OFSUB__(v62, v61);
              int64_t v65 = v62 - v61;
              if (v19) {
                goto LABEL_136;
              }
              uint64_t v66 = __DataStorage._length.getter();
              if (v66 >= v65) {
                size_t v67 = v65;
              }
              else {
                size_t v67 = v66;
              }
              if (!v27) {
                goto LABEL_155;
              }
              unint64_t v5 = v71;
              LODWORD(v7) = v79;
              if (!v63) {
                goto LABEL_156;
              }
              int v40 = memcmp(v27, v63, v67);
              swift_release();
              swift_release();
LABEL_114:
              sub_10006D144(v11, v10);
              if (!v40) {
                goto LABEL_119;
              }
              break;
            case 2:
              uint64_t v28 = *(void *)(v11 + 16);
              swift_retain();
              swift_retain();
              uint64_t v29 = (char *)__DataStorage._bytes.getter();
              if (!v29) {
                goto LABEL_36;
              }
              uint64_t v30 = __DataStorage._offset.getter();
              if (__OFSUB__(v28, v30)) {
                goto LABEL_125;
              }
              v29 += v28 - v30;
LABEL_36:
              __DataStorage._length.getter();
              LODWORD(v7) = v79;
              if (!v79)
              {
                LOWORD(__s1[0]) = a1;
                BYTE2(__s1[0]) = BYTE2(a1);
                BYTE3(__s1[0]) = BYTE3(a1);
                BYTE4(__s1[0]) = v75;
                BYTE5(__s1[0]) = BYTE5(a1);
                BYTE6(__s1[0]) = BYTE6(a1);
                HIBYTE(__s1[0]) = HIBYTE(a1);
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = v72;
                BYTE5(__s1[1]) = v73;
                if (!v29) {
                  goto LABEL_151;
                }
                int v34 = memcmp(v29, __s1, __n);
                swift_release();
                swift_release();
                goto LABEL_101;
              }
              if (v79 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_129;
                }
                swift_retain();
                uint64_t v7 = (char *)__DataStorage._bytes.getter();
                if (v7)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v31)) {
                    goto LABEL_140;
                  }
                  v7 += v76 - v31;
                }
                uint64_t v32 = __DataStorage._length.getter();
                size_t v33 = v70;
                if (v32 < v70) {
                  size_t v33 = v32;
                }
                if (!v29) {
                  goto LABEL_144;
                }
                if (!v7) {
                  goto LABEL_145;
                }
                int v34 = memcmp(v29, v7, v33);
                sub_10006D144(a1, v5);
                swift_release();
                swift_release();
                sub_10006D144(v11, v10);
                LODWORD(v7) = v79;
                goto LABEL_102;
              }
              uint64_t v55 = *(void *)(a1 + 16);
              uint64_t v69 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v56 = (char *)__DataStorage._bytes.getter();
              if (v56)
              {
                uint64_t v57 = __DataStorage._offset.getter();
                if (__OFSUB__(v55, v57)) {
                  goto LABEL_139;
                }
                v56 += v55 - v57;
              }
              BOOL v19 = __OFSUB__(v69, v55);
              int64_t v58 = v69 - v55;
              if (v19) {
                goto LABEL_134;
              }
              uint64_t v59 = __DataStorage._length.getter();
              if (v59 >= v58) {
                size_t v60 = v58;
              }
              else {
                size_t v60 = v59;
              }
              if (!v29) {
                goto LABEL_152;
              }
              unint64_t v5 = v71;
              if (!v56) {
                goto LABEL_153;
              }
              int v39 = memcmp(v29, v56, v60);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_96:
              sub_10006D144(v11, v10);
LABEL_97:
              LODWORD(v7) = v79;
              if (!v39) {
                goto LABEL_119;
              }
              goto LABEL_8;
            case 3:
              memset(__s1, 0, 14);
              if (!v7) {
                goto LABEL_56;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_128;
                }
                sub_10006D0EC(a1, v5);
                uint64_t v35 = __DataStorage._bytes.getter();
                if (!v35) {
                  goto LABEL_146;
                }
                uint64_t v21 = v35;
                uint64_t v36 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v36;
                if (__OFSUB__(v76, v36)) {
                  goto LABEL_133;
                }
LABEL_52:
                uint64_t v37 = __DataStorage._length.getter();
                if (v37 >= v70) {
                  size_t v38 = v70;
                }
                else {
                  size_t v38 = v37;
                }
                int v39 = memcmp(__s1, (const void *)(v21 + v23), v38);
                sub_10006D144(a1, v5);
                goto LABEL_96;
              }
              uint64_t v51 = *(void *)(a1 + 16);
              uint64_t v52 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v53 = __DataStorage._offset.getter();
                if (__OFSUB__(v51, v53)) {
                  goto LABEL_138;
                }
                v47 += v51 - v53;
              }
              BOOL v19 = __OFSUB__(v52, v51);
              int64_t v49 = v52 - v51;
              if (v19) {
                goto LABEL_131;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_150;
              }
LABEL_80:
              if (v50 >= v49) {
                size_t v54 = v49;
              }
              else {
                size_t v54 = v50;
              }
              int v39 = memcmp(__s1, v47, v54);
              swift_release();
              swift_release();
              sub_10006D144(v11, v10);
              unint64_t v5 = v71;
              goto LABEL_97;
            default:
              __s1[0] = v11;
              LOWORD(__s1[1]) = v10;
              BYTE2(__s1[1]) = BYTE2(v10);
              BYTE3(__s1[1]) = BYTE3(v10);
              BYTE4(__s1[1]) = BYTE4(v10);
              BYTE5(__s1[1]) = BYTE5(v10);
              if (!v7)
              {
LABEL_56:
                __int16 __s2 = a1;
                char v83 = BYTE2(a1);
                char v84 = BYTE3(a1);
                char v85 = v75;
                char v86 = BYTE5(a1);
                char v87 = BYTE6(a1);
                char v88 = HIBYTE(a1);
                __int16 v89 = v5;
                char v90 = BYTE2(v5);
                char v91 = BYTE3(v5);
                char v92 = v72;
                char v93 = v73;
                int v40 = memcmp(__s1, &__s2, __n);
                goto LABEL_114;
              }
              if (v7 == 1)
              {
                if (v74 < v76) {
                  goto LABEL_127;
                }
                sub_10006D0EC(a1, v5);
                uint64_t v20 = __DataStorage._bytes.getter();
                if (!v20)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
LABEL_156:
                  __break(1u);
                  JUMPOUT(0x100086984);
                }
                uint64_t v21 = v20;
                uint64_t v22 = __DataStorage._offset.getter();
                uint64_t v23 = v76 - v22;
                if (__OFSUB__(v76, v22)) {
                  goto LABEL_132;
                }
                goto LABEL_52;
              }
              uint64_t v45 = *(void *)(a1 + 16);
              uint64_t v46 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v47 = (char *)__DataStorage._bytes.getter();
              if (v47)
              {
                uint64_t v48 = __DataStorage._offset.getter();
                if (__OFSUB__(v45, v48)) {
                  goto LABEL_137;
                }
                v47 += v45 - v48;
              }
              BOOL v19 = __OFSUB__(v46, v45);
              int64_t v49 = v46 - v45;
              if (v19) {
                goto LABEL_130;
              }
              uint64_t v50 = __DataStorage._length.getter();
              if (!v47) {
                goto LABEL_149;
              }
              goto LABEL_80;
          }
          goto LABEL_8;
        }
LABEL_118:
        sub_10006D144(v11, v10);
LABEL_119:
        swift_bridgeObjectRelease();
        return 1;
    }
  }
}

uint64_t sub_1000869B4(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    if (*(unsigned char *)(v2 + 16) == 1)
    {
      uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced4Lyon_preArmedTruncatedReaderIdentifiers);
      swift_bridgeObjectRetain();
      char v14 = sub_100086034(a1, a2, v13);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Not running", v17, 2u);
        swift_slowDealloc();
      }

      char v14 = 0;
    }
    return v14 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100086BC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_100468A38;
  void *v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  unint64_t v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  v12(v6, v2);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_8;
  }
  int v13 = *(unsigned __int8 *)(v37[1] + 16);
  char v14 = Logger.logObject.getter();
  if (v13 != 1)
  {
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v27, "Not running", v28, 2u);
      swift_slowDealloc();
    }

    return;
  }
  v37[0] = a1;
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Lyon onChannelOpen", v16, 2u);
    swift_slowDealloc();
  }

  uint64_t v17 = self;
  sub_10006C51C(&qword_100454040);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v19;
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  *(NSNumber *)(inited + 4_Block_object_dispose(&STACK[0x2C0], 8) = NSNumber.init(integerLiteral:)(1);
  sub_1001DB390(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_100050AE4(v17, isa);

  if (qword_1004536A0 != -1) {
    goto LABEL_30;
  }
LABEL_8:
  uint64_t v21 = qword_100468660;
  uint64_t v22 = (void *)qword_100468A38;
  void *v6 = qword_100468A38;
  v9(v6, v8, v2);
  id v23 = v22;
  char v24 = _dispatchPreconditionTest(_:)();
  v12(v6, v2);
  uint64_t v25 = v37[0];
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (*(unsigned char *)(v21 + 16) == 1)
  {
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    uint64_t v26 = qword_100468680;
    swift_retain();
    swift_retain();
    sub_10010418C((uint64_t)v25, v26, v25, v21);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not running", v31, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v32 = (uint64_t *)((char *)v25 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v33 = *(unint64_t *)((char *)&v25[1].isa + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  if (v33 >> 60 == 15)
  {
LABEL_24:
    *((unsigned char *)&v25->isa + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 1;
    if (qword_100453830 == -1)
    {
LABEL_25:
      sub_100254030((uint64_t)v25);
      return;
    }
LABEL_32:
    swift_once();
    goto LABEL_25;
  }
  uint64_t v34 = *v32;
  sub_10006D0EC(*v32, *(unint64_t *)((char *)&v25[1].isa + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier));
  if (qword_100453818 != -1) {
    swift_once();
  }
  if (sub_100230530(v34, v33) == 2)
  {
    sub_100075868(v34, v33);
    goto LABEL_24;
  }
  if (qword_100453658 != -1) {
    swift_once();
  }
  uint64_t v35 = *(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager);
  id v36 = (id)qword_100468500;
  sub_10007599C((uint64_t)v25, v35, v36);

  sub_100075868(v34, v33);
}

void sub_1000871A8()
{
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  sub_1000CAD08();
}

void sub_100087208(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
LABEL_17:
    sub_100074FDC(a1);
    if (qword_1004536A0 != -1) {
      swift_once();
    }
    sub_1000BADDC(a1);
    return;
  }
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    if (*(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) <= 9u
      && *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) == 1)
    {
      if (qword_100453830 != -1) {
        swift_once();
      }
      sub_100254AB0();
    }
    swift_retain_n();
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      int v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)int v13 = 136315138;
      uint64_t v22 = v14;
      swift_retain();
      uint64_t v15 = UUID.uuidString.getter();
      unint64_t v17 = v16;
      swift_release();
      uint64_t v21 = sub_100290514(v15, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Lyon onDisconnection for %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_10008A474(a1);
    if (qword_100453658 == -1) {
      goto LABEL_17;
    }
    goto LABEL_21;
  }
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not running", v20, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100087624(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  int v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004537B0 != -1) {
    swift_once();
  }
  if (byte_100468898 != 1)
  {
    if (qword_100453678 != -1) {
      swift_once();
    }
    [(id)qword_100454178 invalidate];
    return a1(1);
  }
  if (qword_100453668 != -1) {
    swift_once();
  }
  if (*(unsigned char *)(qword_100468518 + 16) != 1)
  {
    if (qword_100453920 != -1) {
      swift_once();
    }
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Skipping Aliro Daily Transaction Statistics since Lyon is not running", v19, 2u);
      swift_slowDealloc();
    }

    return a1(1);
  }
  if (qword_100453928 != -1) {
    swift_once();
  }
  v20[0] = qword_100468A38;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  aBlock[4] = sub_10008C168;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100410598;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_10008BEDC((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

uint64_t sub_100087AB0(uint64_t (*a1)(uint64_t))
{
  if (qword_100453920 != -1) {
    swift_once();
  }
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting CA Aliro Daily Transaction Statistics", v4, 2u);
    swift_slowDealloc();
  }

  self;
  sub_100050E78();
  return a1(1);
}

uint64_t sub_100087BB8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced4Lyon_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100087C68()
{
  return type metadata accessor for Lyon(0);
}

uint64_t type metadata accessor for Lyon(uint64_t a1)
{
  return sub_100087C90(a1, qword_1004544D8);
}

uint64_t sub_100087C90(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100087CC8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for DSKExpress.ExpressState(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for LyonSessionState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for LyonSessionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *uint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100087EE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

uint64_t sub_100087F10(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100087F1C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for LyonSessionState()
{
  return &type metadata for LyonSessionState;
}

unint64_t sub_100087F38()
{
  unint64_t result = qword_100454578;
  if (!qword_100454578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454578);
  }
  return result;
}

uint64_t sub_100087F94(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (uint64_t *)(a3 + 32);
  if (a1)
  {
    swift_beginAccess();
    sub_10008BEBC((uint64_t)a1);
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_10008B1F8(v7, a1, a2);
    sub_10008BECC((uint64_t)a1);
    if (*(unsigned char *)(a3 + 24)) {
      return v8;
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    if (*(unsigned char *)(a3 + 24)) {
      return v8;
    }
  }
  unint64_t v9 = v8 & 0xC000000000000001;
  if ((v8 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = __CocoaSet.count.getter();
    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v11 = v10;
    uint64_t v37 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v34 = __CocoaSet.startIndex.getter();
    uint64_t v35 = v12;
    unsigned __int8 v36 = 1;
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
    __break(1u);
  }
  uint64_t v11 = *(void *)(v8 + 16);
  if (!v11)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v31 = &_swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v8 = sub_10008B488((unint64_t)v31);
    swift_bridgeObjectRelease();
    return v8;
  }
  uint64_t v37 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v34 = sub_1000FCB1C(v8);
  uint64_t v35 = v13;
  unsigned __int8 v36 = v14 & 1;
LABEL_11:
  p_types = &stru_100447FF8.types;
  uint64_t v32 = v8;
  while (1)
  {
    while (1)
    {
      sub_1000FB200(v34, v35, v36, v8);
      uint64_t v28 = v27;
      [v27 setReportType:0];
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_10007582C(0, (unint64_t *)&qword_100458810);
      swift_dynamicCast();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (v9) {
        break;
      }
      uint64_t v16 = v34;
      uint64_t v17 = v35;
      char v18 = v36;
      uint64_t v19 = sub_1000FAE78(v34, v35, v36, v8);
      uint64_t v20 = p_types;
      uint64_t v21 = v19;
      uint64_t v23 = v22;
      char v25 = v24;
      sub_10008B004(v16, v17, v18);
      uint64_t v34 = v21;
      uint64_t v35 = v23;
      p_types = v20;
      uint64_t v8 = v32;
      unsigned __int8 v26 = v25 & 1;
      unint64_t v9 = 0;
      unsigned __int8 v36 = v26;
      if (!--v11) {
        goto LABEL_18;
      }
    }
    if ((v36 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_10006C51C((uint64_t *)&unk_100457230);
    os_log_type_t v30 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v30(v33, 0);
    if (!--v11)
    {
LABEL_18:
      sub_10008B004(v34, v35, v36);
      uint64_t v31 = v37;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100088308(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (uint64_t *)(a3 + 32);
  if (a1)
  {
    swift_beginAccess();
    sub_10008BEBC((uint64_t)a1);
    uint64_t v7 = swift_bridgeObjectRetain();
    uint64_t v8 = sub_10008BA60(v7, a1, a2);
    sub_10008BECC((uint64_t)a1);
    if (*(unsigned char *)(a3 + 24)) {
      return v8;
    }
  }
  else
  {
    swift_beginAccess();
    uint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    if (*(unsigned char *)(a3 + 24)) {
      return v8;
    }
  }
  unint64_t v9 = v8 & 0xC000000000000001;
  if ((v8 & 0xC000000000000001) != 0)
  {
    uint64_t v10 = __CocoaSet.count.getter();
    if (!v10) {
      goto LABEL_19;
    }
    uint64_t v11 = v10;
    unsigned __int8 v36 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v33 = __CocoaSet.startIndex.getter();
    uint64_t v34 = v12;
    unsigned __int8 v35 = 1;
    if ((v11 & 0x8000000000000000) == 0) {
      goto LABEL_11;
    }
    __break(1u);
  }
  uint64_t v11 = *(void *)(v8 + 16);
  if (!v11)
  {
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v29 = &_swiftEmptyArrayStorage;
LABEL_20:
    uint64_t v8 = sub_10008BD4C((unint64_t)v29);
    swift_bridgeObjectRelease();
    return v8;
  }
  unsigned __int8 v36 = &_swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v33 = sub_1000FCB1C(v8);
  uint64_t v34 = v13;
  unsigned __int8 v35 = v14 & 1;
LABEL_11:
  uint64_t v15 = (uint64_t *)&unk_100454588;
  p_types = (char **)(&stru_100447FF8 + 8);
  uint64_t v30 = v8;
  while (1)
  {
    while (1)
    {
      sub_1000FB6D0(v33, v34, v35, v8);
      type metadata accessor for Peer();
      swift_retain();
      sub_10006C51C(v15);
      swift_dynamicCast();
      [v31 setReportType:0];
      swift_unknownObjectRelease();
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      swift_dynamicCast();
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized ContiguousArray._endMutation()();
      if (v9) {
        break;
      }
      uint64_t v17 = v33;
      uint64_t v18 = v34;
      char v19 = v35;
      uint64_t v20 = sub_1000FAE78(v33, v34, v35, v8);
      uint64_t v22 = v21;
      uint64_t v23 = v15;
      char v25 = v24;
      sub_10008B004(v17, v18, v19);
      uint64_t v33 = v20;
      uint64_t v34 = v22;
      unint64_t v9 = 0;
      p_types = &stru_100447FF8.types;
      unsigned __int8 v26 = v25 & 1;
      uint64_t v15 = v23;
      uint64_t v8 = v30;
      unsigned __int8 v35 = v26;
      if (!--v11) {
        goto LABEL_18;
      }
    }
    if ((v35 & 1) == 0) {
      break;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_10006C51C(&qword_100454580);
    uint64_t v28 = (void (*)(unsigned char *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v28(v32, 0);
    if (!--v11)
    {
LABEL_18:
      sub_10008B004(v33, v34, v35);
      uint64_t v29 = v36;
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000886A8(uint64_t a1)
{
  sub_10008C00C();
  uint64_t result = Set.init(minimumCapacity:)();
  int64_t v3 = 0;
  uint64_t v18 = result;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_10006D0EC(*v11, v13);
    sub_1000E93CC(v17, v12, v13);
    uint64_t result = sub_10006D144(v17[0], v17[1]);
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    int64_t v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v3 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v3);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

BOOL sub_100088848(void *a1)
{
  return *(unsigned char *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type) == 3;
}

unsigned char *sub_100088868@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = (unsigned char *)sub_100088D7C(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (unsigned char *)sub_100088E40((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = (unsigned char *)sub_100088EBC((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000888E0()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t sub_10008890C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v4)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < result || result < v7)
  {
LABEL_10:
    __break(1u);
    JUMPOUT(0x100088978);
  }
  return result;
}

uint64_t sub_100088988(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x100088A54);
  }
  return result;
}

uint64_t sub_100088A74@<X0>(uint64_t (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100088308(a1, a2, a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

void *sub_100088AA0@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  uint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_100088AE4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v_Block_object_dispose(&STACK[0x2C0], 8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100088D4CLL);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_10006D0EC(a3, a4);
                  sub_10006D0EC(a1, a2);
                  char v17 = sub_100234D84((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10006D144(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_10006D0EC(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100234D84(v21, v22, v20, a3, a4);
                  sub_10006D144(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_10006D0EC(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_10006D0EC(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100234CAC(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10006D144(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100088D7C(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_100088E40(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Data.RangeReference();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_100088EBC(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t result = __DataStorage.init(bytes:length:)();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100088F40(uint64_t a1)
{
  uint64_t v9 = sub_10006C51C(&qword_1004545C0);
  uint64_t v10 = sub_10008C0B0((unint64_t *)&qword_1004545C8, &qword_1004545C0);
  v8[0] = a1;
  uint64_t v2 = sub_100075908(v8, v9);
  int64_t v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_100088868(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_10007594C((uint64_t)v8);
  return v5;
}

uint64_t sub_100089000(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(capacity:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10008909C(char a1, char a2, unsigned int a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  LOBYTE(v6) = a1;
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v7 = &v6;
  uint64_t v8 = (__int16 **)((char *)&v6 + 1);
  sub_100075908(&v7, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v7);
  LOBYTE(v6) = a2;
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v7 = &v6;
  uint64_t v8 = (__int16 **)((char *)&v6 + 1);
  sub_100075908(&v7, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v7);
  __int16 v6 = bswap32(a3) >> 16;
  uint64_t v9 = &type metadata for UnsafeRawBufferPointer;
  uint64_t v10 = &protocol witness table for UnsafeRawBufferPointer;
  uint64_t v7 = &v6;
  uint64_t v8 = &v7;
  sub_100075908(&v7, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v7);
  return v11;
}

uint64_t sub_1000891C8(char a1, char a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 62;
  unsigned __int8 v5 = BYTE6(a4);
  uint64_t v9 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_16;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (__OFADD__(v9, 4))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1000893A0);
      }
      uint64_t v20 = sub_100089000(v9 + 4);
      LODWORD(v13) = 0;
      switch((int)v4)
      {
        case 1:
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_18;
          }
          unint64_t v13 = HIDWORD(a3) - (int)a3;
LABEL_12:
          if ((v13 & 0x8000000000000000) != 0 || v13 >= 0x10000) {
            goto LABEL_20;
          }
LABEL_14:
          uint64_t v16 = sub_10008909C(a1, a2, v13);
          unint64_t v18 = v17;
          Data.append(_:)();
          sub_10006D144(v16, v18);
          Data.append(_:)();
          return v20;
        case 2:
          uint64_t v15 = *(void *)(a3 + 16);
          uint64_t v14 = *(void *)(a3 + 24);
          unint64_t v13 = v14 - v15;
          if (!__OFSUB__(v14, v15)) {
            goto LABEL_12;
          }
          goto LABEL_19;
        case 3:
          goto LABEL_14;
        default:
          LODWORD(v13) = v5;
          goto LABEL_14;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v9 = BYTE6(a4);
      goto LABEL_6;
  }
}

uint64_t sub_1000893C0(uint64_t result)
{
  if (result >= 0xFu) {
    return 15;
  }
  else {
    return result;
  }
}

uint64_t sub_1000893D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t v7 = v6;
  int v38 = a6;
  uint64_t v39 = a4;
  unint64_t v40 = a5;
  uint64_t v42 = a3;
  uint64_t v43 = a1;
  int v41 = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  unint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = OBJC_IVAR____TtC10seserviced8LyonPeer_secureChannel;
  type metadata accessor for LyonBLESecureChannel();
  uint64_t v19 = swift_allocObject();
  long long v37 = xmmword_100378280;
  *(_OWORD *)(v19 + 16) = xmmword_100378280;
  *(_OWORD *)(v19 + 32) = xmmword_100378280;
  *(_OWORD *)(v19 + 4_Block_object_dispose(&STACK[0x2C0], 8) = xmmword_100378280;
  *(void *)(v19 + 64) = 0x100000001;
  *(void *)(v7 + v1_Block_object_dispose(&STACK[0x2C0], 8) = v19;
  uint64_t v20 = OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpHelper;
  id v21 = objc_allocWithZone((Class)type metadata accessor for LyonStepUpHelper());
  swift_retain();
  *(void *)(v7 + v20) = [v21 init];
  uint64_t v22 = OBJC_IVAR____TtC10seserviced8LyonPeer_timeExtension;
  type metadata accessor for LyonTimeExtension();
  swift_allocObject();
  *(void *)(v7 + v22) = sub_1002132FC();
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus) = 3;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatusAtConnection) = 3;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue) = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 0;
  uint64_t v23 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion;
  *(_WORD *)uint64_t v23 = 0;
  *(unsigned char *)(v23 + 2) = 1;
  uint64_t v24 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_uwbSessionID;
  *(_DWORD *)uint64_t v24 = 0;
  *(unsigned char *)(v24 + 4) = 1;
  *(_OWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerIdentifier) = v37;
  uint64_t v25 = OBJC_IVAR____TtC10seserviced8LyonPeer_connectionTime;
  Date.init()();
  Date.timeIntervalSince1970.getter();
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  *(void *)(v7 + v25) = v27;
  uint64_t v28 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_startTime;
  *(void *)uint64_t v28 = 0;
  *(unsigned char *)(v28 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
  uint64_t v29 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime;
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
  uint64_t v30 = v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart;
  *(void *)uint64_t v30 = 0;
  *(unsigned char *)(v30 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpDuration) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode) = 0;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_lastTransactionIntent) = 0;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_peripheralTXPower) = v38;
  id v31 = (uint64_t *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_truncatedReaderGroupIdentifier);
  uint64_t v32 = v39;
  unint64_t v33 = v40;
  *id v31 = v39;
  v31[1] = v33;
  *(_DWORD *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerKeyType) = v41;
  *(void *)(v7 + OBJC_IVAR____TtC10seserviced8LyonPeer_endpointType) = v42;
  sub_10006D0EC(v32, v33);
  swift_release();
  uint64_t v34 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v43, v8);
  uint64_t v35 = sub_1002119A8((uint64_t)v12);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v34, v8);
  return v35;
}

void sub_100089824()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unint64_t v4 = (void *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468A38;
  void *v4 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100453678 != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v7 = (void *)qword_100454178;
  [(id)qword_100454178 setPreregistered:1];
  aBlock[4] = sub_100087624;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E7F30;
  aBlock[3] = &unk_100410548;
  uint64_t v8 = _Block_copy(aBlock);
  [v7 scheduleWithBlock:v8];
  _Block_release(v8);
}

uint64_t sub_100089A28(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for DSKExpress.ExpressKey();
  sub_10008BEDC(&qword_1004545D0, (void (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1000E8848(&v9, v6);
        swift_release();
      }
    }
    else
    {
      uint64_t v7 = (uint64_t *)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        swift_retain();
        sub_1000E8848(&v9, v8);
        swift_release();
        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100089BA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10008C00C();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_10006D0EC(v5, *v4);
      sub_1000E93CC(v7, v5, v6);
      sub_10006D144(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_100089C3C()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468A38;
  void *v4 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
  if (v5)
  {
    if (qword_1004537B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v7 = byte_100468898;
  if ((byte_100468898 & 1) == 0)
  {
    if (qword_100453920 != -1) {
      swift_once();
    }
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Lyon can't start because UWB is not supported on this device", v10, 2u);
      swift_slowDealloc();
    }
  }
  return v7;
}

uint64_t sub_100089E64(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  id v31 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v30 = (char *)v24 - v8;
  uint64_t v9 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a1 + 16);
  sub_10008BEDC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v32 = Set.init(minimumCapacity:)();
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v14 = v3 + 16;
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v17 = *(void *)(v14 + 56);
    unint64_t v18 = v14 + 40;
    uint64_t v27 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 32);
    uint64_t v28 = v15;
    uint64_t v25 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v26 = v17;
    uint64_t v29 = v14;
    uint64_t v19 = (void (**)(uint64_t, uint64_t))(v14 - 8);
    v24[1] = v18 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v21 = (uint64_t)v30;
    uint64_t v20 = v31;
    while (1)
    {
      v28(v12, v16, v2);
      uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v18;
      (*(void (**)(char *, void, uint64_t, uint64_t))v18)(v12, 0, 1, v2);
      if ((*v27)(v12, 1, v2) == 1) {
        break;
      }
      (*v25)(v20, v12, v2);
      sub_1000EA1A0(v21, v20);
      (*v19)(v21, v2);
      v16 += v26;
      if (!--v13) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v22(v12, 1, 1, v2);
  }
  return v32;
}

uint64_t sub_10008A10C(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState);
  if (v1 < 0xA && ((0x37Fu >> v1) & 1) != 0) {
    return dword_100378634[(char)v1];
  }
  if (*(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount)) {
    return 9;
  }
  return 8;
}

void sub_10008A15C(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v1 + 16) != 1)
  {
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Not running", v25, 2u);
      swift_slowDealloc();
    }

    return;
  }
  if (qword_100453668 != -1) {
    goto LABEL_18;
  }
LABEL_6:
  id v11 = [self TLVWithTag:0 value:0];
  if (!v11)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v12 = v11;
  id v13 = [v11 asData];

  if (!v13)
  {
LABEL_21:
    __break(1u);
    return;
  }
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  uint64_t v17 = sub_1000891C8(2, 0, v14, v16);
  unint64_t v19 = v18;
  sub_10006D144(v14, v16);
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  sub_1000CB6FC(v17, v19);
  sub_10006D144(v17, v19);
  if (!v2)
  {
    int v20 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount);
    BOOL v21 = __CFADD__(v20, 1);
    int v22 = v20 + 1;
    if (!v21)
    {
      *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount) = v22;
      return;
    }
    __break(1u);
    goto LABEL_20;
  }
}

void sub_10008A474(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v7 = sub_10008A10C(a1);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_endpointType);
  if (v8 == 4) {
    int v9 = 0x10000;
  }
  else {
    int v9 = (v8 == 5) << 17;
  }
  int v10 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerKeyType);
  unsigned int v11 = v9 + v10;
  if (__CFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_21;
  }
  unsigned int v12 = v7;
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v14 = v13;
  unint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v6, v2);
  double v16 = v14 - *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_connectionTime);
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v16 <= -1.0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v16 >= 4294967300.0)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart + 8))
  {
    uint64_t v17 = 0;
    goto LABEL_14;
  }
  double v18 = *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_firstRangingStart);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v20 = v19;
  v15(v6, v2);
  double v21 = v20 - v18;
  if ((~COERCE__INT64(v20 - v18) & 0x7FF0000000000000) == 0) {
    goto LABEL_24;
  }
  if (v21 <= -1.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v21 >= 4294967300.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unsigned int v22 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration);
  uint64_t v17 = v21 - v22;
  if (v21 < v22)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
LABEL_14:
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime + 8))
  {
LABEL_19:
    unsigned int v65 = v16;
    uint64_t v27 = self;
    uint64_t v63 = v27;
    sub_10006C51C(&qword_100454040);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378480;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v29;
    uint64_t v30 = OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count;
    uint64_t v31 = *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_timeSyncProcedure1Count);
    unsigned int v67 = v12;
    id v32 = objc_allocWithZone((Class)NSNumber);
    unsigned int v66 = v11;
    *(void *)(inited + 4_Block_object_dispose(&STACK[0x2C0], 8) = [v32 initWithUnsignedInt:v31];
    *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 64) = v33;
    *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1+ OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedSuspendRangingCount)];
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 8_Block_object_dispose(&STACK[0x2C0], 8) = v34;
    *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1+ OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedSuspendRangingCount)];
    *(void *)(inited + 104) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 112) = v35;
    *(void *)(inited + 120) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_lockInitiatedRangingCount)];
    *(void *)(inited + 12_Block_object_dispose(&STACK[0x2C0], 8) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v36;
    uint64_t v37 = OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount;
    *(void *)(inited + 144) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1+ OBJC_IVAR____TtC10seserviced8LyonPeer_deviceInitiatedRangingCount)];
    *(void *)(inited + 152) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 160) = v38;
    *(void *)(inited + 16_Block_object_dispose(&STACK[0x2C0], 8) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v16];
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 184) = v39;
    uint64_t v64 = OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration;
    *(void *)(inited + 192) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingDuration)];
    *(void *)(inited + 200) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 20_Block_object_dispose(&STACK[0x2C0], 8) = v40;
    *(void *)(inited + 216) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v17];
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 232) = v41;
    *(void *)(inited + 240) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:*(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration)];
    sub_1001DB390(inited);
    sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_100050AE4(v27, isa);

    unsigned int v62 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_transactionMode);
    unsigned int v61 = *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason);
    unsigned int v60 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_readerStatus);
    unsigned int v59 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unsolicitedReaderStatusReportingValue);
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockCount));
    uint64_t v44 = v43;
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_unlockFromOtherSourceCount));
    LODWORD(isa) = v45;
    sub_1000B3890(2u, *(_DWORD *)(a1 + v37));
    LODWORD(v37) = v46;
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingAttemptsCount));
    LODWORD(v31) = v47;
    sub_1000B3890(2u, *(_DWORD *)(a1 + v30));
    LODWORD(v30) = v48;
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByDeviceCount));
    unsigned int v50 = v49;
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btTimeExtensionInitiatedByLockCount));
    LODWORD(inited) = v51;
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_btOutOfOrderMessageCount));
    unsigned int v53 = v52;
    sub_1000B3890(2u, *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_stepUpDuration));
    unsigned int v55 = v54;
    sub_1000B3890(2u, *(_DWORD *)(a1 + v64));
    unsigned int v57 = v56;
    sub_1000B3890(2u, v65);
    sub_100051588(v63, v67, v62, v66, v61, v60, v59, v44, isa, v37, v31, v30, v50, inited, v53, v55, v57, v58);
    return;
  }
  double v23 = *(double *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seStartTime);
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v25 = v24;
  v15(v6, v2);
  double v26 = v25 - v23;
  if ((~COERCE__INT64(v25 - v23) & 0x7FF0000000000000) == 0) {
    goto LABEL_28;
  }
  if (v26 <= -1.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v26 < 4294967300.0)
  {
    *(_DWORD *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_seDuration) = v26;
    goto LABEL_19;
  }
LABEL_30:
  __break(1u);
}

void sub_10008AB3C(uint64_t a1)
{
  __chkstk_darwin(a1, a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  if (swift_dynamicCast())
  {
    id v3 = v13;
    id v4 = [v13 appletIdentifier];
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    uint64_t v8 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
    unint64_t v10 = v9;
    if (v9 >> 60 == 15)
    {
      sub_100075868(v5, v7);
      sub_100075868(v8, v10);
    }
    else
    {
      sub_10006D0EC(v5, v7);
      char v11 = sub_100088AE4(v5, v7, v8, v10);
      sub_100075868(v8, v10);
      sub_10006D144(v5, v7);
      sub_10006D144(v5, v7);
      if ((v11 & 1) != 0 && [v3 endPointType] == (id)4)
      {
        if (qword_100453758 != -1) {
          swift_once();
        }
        sub_1001B091C(v3);
      }
    }
  }
}

void sub_10008AD54(uint64_t a1)
{
  __chkstk_darwin(a1, a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  if (swift_dynamicCast())
  {
    id v3 = v18;
    id v4 = [v18 appletIdentifier];
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    uint64_t v8 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
    unint64_t v10 = v9;
    if (v9 >> 60 == 15)
    {
      sub_100075868(v5, v7);
      sub_100075868(v8, v10);
LABEL_10:

      return;
    }
    sub_10006D0EC(v5, v7);
    char v11 = sub_100088AE4(v5, v7, v8, v10);
    sub_100075868(v8, v10);
    sub_10006D144(v5, v7);
    sub_10006D144(v5, v7);
    if ((v11 & 1) == 0) {
      goto LABEL_10;
    }
    if ([v3 endPointType] != (id)4) {
      goto LABEL_10;
    }
    id v12 = [v3 homeUUIDString];
    if (!v12) {
      goto LABEL_10;
    }
    id v13 = v12;
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    if (qword_100453758 != -1) {
      swift_once();
    }
    sub_1001B10C8(v14, v16);

    swift_bridgeObjectRelease();
  }
}

void sub_10008AFB0()
{
}

uint64_t sub_10008AFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10008AFC8()
{
  return swift_release();
}

uint64_t sub_10008AFD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10008C478(a1);
}

void *sub_10008AFEC@<X0>(void *a1@<X8>)
{
  return sub_10008C4AC(a1);
}

uint64_t sub_10008B004(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10008B010(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void **))
{
  uint64_t v21 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v22 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_17:
    unint64_t v16 = *(void **)(*(void *)(a3 + 48) + 8 * v12);
    double v23 = v16;
    if (!a4) {
      goto LABEL_30;
    }
    id v17 = v16;
    char v18 = a4(&v23);

    if (v18)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v21++, 1);
      if (v13) {
        goto LABEL_29;
      }
    }
  }
  BOOL v13 = __OFADD__(v6++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v6 >= v22) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v6);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v6 + 1;
  if (v6 + 1 >= v22) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v6 + 2;
  if (v6 + 2 >= v22) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v6 + 3;
  if (v6 + 3 >= v22)
  {
LABEL_26:
    swift_retain();
    sub_1000F92F8(a1, a2, v21, a3);
    return;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v6 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v6 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v6 >= v22) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v6);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
}

uint64_t sub_10008B1F8(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_10008B7E8(a1, (uint64_t)a2, a3, (void (*)(uint64_t, uint64_t))sub_10008C54C, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_10008B010, (void (*)(uint64_t, uint64_t))sub_10008C550);
  }
  id v4 = &_swiftEmptySetSingleton;
  double v23 = &_swiftEmptySetSingleton;
  sub_10008BEBC((uint64_t)a2);
  __CocoaSet.makeIterator()();
  uint64_t v5 = __CocoaSet.Iterator.next()();
  if (!v5)
  {
LABEL_23:
    swift_release();
    sub_10008BECC((uint64_t)a2);
    return (uint64_t)v4;
  }
  uint64_t v6 = v5;
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  while (1)
  {
    uint64_t v21 = v6;
    uint64_t result = swift_dynamicCast();
    uint64_t v21 = (uint64_t)v22;
    if (!a2) {
      break;
    }
    char v8 = a2(&v21);
    id v9 = v22;
    if (v8)
    {
      unint64_t v10 = v23;
      unint64_t v11 = v23[2];
      if (v23[3] <= v11)
      {
        sub_1000EC93C(v11 + 1);
        unint64_t v10 = v23;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(v10[5]);
      unint64_t v12 = v10 + 7;
      uint64_t v13 = -1 << *((unsigned char *)v10 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~v10[(v14 >> 6) + 7]) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~v10[(v14 >> 6) + 7])) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v17 = 0;
        unint64_t v18 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v18 && (v17 & 1) != 0)
          {
            __break(1u);
            goto LABEL_25;
          }
          BOOL v19 = v15 == v18;
          if (v15 == v18) {
            unint64_t v15 = 0;
          }
          v17 |= v19;
          uint64_t v20 = v12[v15];
        }
        while (v20 == -1);
        unint64_t v16 = __clz(__rbit64(~v20)) + (v15 << 6);
      }
      *(void *)((char *)v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(v10[6] + 8 * v16) = v9;
      ++v10[2];
    }
    else
    {
    }
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (!v6)
    {
      id v4 = v23;
      goto LABEL_23;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10008B488(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  sub_10008C060((unint64_t *)&qword_1004556F0, (unint64_t *)&qword_100458810);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1000E7C08(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        char v8 = *v7++;
        sub_1000E7C08(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008B5FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  unint64_t v18 = (unint64_t *)result;
  uint64_t v19 = 0;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 56);
  int64_t v20 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v11 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_17:
    uint64_t v21 = *(void *)(*(void *)(a3 + 48) + 8 * v12);
    if (!a4) {
      goto LABEL_30;
    }
    swift_retain();
    char v16 = a4(&v21);
    uint64_t result = swift_release();
    if (v16)
    {
      *(unint64_t *)((char *)v18 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v19++, 1);
      if (v13) {
        goto LABEL_29;
      }
    }
  }
  BOOL v13 = __OFADD__(v6++, 1);
  if (v13)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v6 >= v20) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v6);
  if (v14)
  {
LABEL_16:
    unint64_t v10 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
    goto LABEL_17;
  }
  int64_t v15 = v6 + 1;
  if (v6 + 1 >= v20) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v6 + 2;
  if (v6 + 2 >= v20) {
    goto LABEL_26;
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v6 + 3;
  if (v6 + 3 >= v20)
  {
LABEL_26:
    swift_retain();
    return sub_1000F97D4(v18, a2, v19, a3);
  }
  unint64_t v14 = *(void *)(v7 + 8 * v15);
  if (v14)
  {
LABEL_15:
    int64_t v6 = v15;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v6 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v6 >= v20) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v6);
    ++v15;
    if (v14) {
      goto LABEL_16;
    }
  }
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10008B7E8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t (*a5)(char *, unint64_t, uint64_t, uint64_t, uint64_t), void (*a6)(uint64_t, uint64_t))
{
  double v23 = a6;
  char v12 = *(unsigned char *)(a1 + 32);
  unsigned int v13 = v12 & 0x3F;
  unint64_t v14 = (unint64_t)((1 << v12) + 63) >> 6;
  size_t v15 = 8 * v14;
  a4(a2, a3);
  uint64_t isStackAllocationSafe = ((uint64_t (*)(uint64_t, uint64_t))a4)(a2, a3);
  if (v13 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    v22[1] = v22;
    __chkstk_darwin(isStackAllocationSafe, v17);
    bzero((char *)v22 - ((v15 + 15) & 0x3FFFFFFFFFFFFFF0), v15);
    a4(a2, a3);
    uint64_t v18 = a5((char *)v22 - ((v15 + 15) & 0x3FFFFFFFFFFFFFF0), v14, a1, a2, a3);
    uint64_t v19 = v23;
    v23(a2, a3);
    swift_release();
    if (v6) {
      swift_willThrow();
    }
    v19(a2, a3);
    v19(a2, a3);
  }
  else
  {
    int64_t v20 = (void *)swift_slowAlloc();
    bzero(v20, v15);
    a4(a2, a3);
    uint64_t v18 = a5((char *)v20, v14, a1, a2, a3);
    v23(a2, a3);
    swift_release();
    swift_slowDealloc();
    v23(a2, a3);
    v23(a2, a3);
  }
  return v18;
}

uint64_t sub_10008BA60(uint64_t a1, uint64_t (*a2)(uint64_t *), uint64_t a3)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_10008B7E8(a1, (uint64_t)a2, a3, (void (*)(uint64_t, uint64_t))sub_10008BEBC, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_10008B5FC, (void (*)(uint64_t, uint64_t))sub_10008BECC);
  }
  uint64_t v4 = &_swiftEmptySetSingleton;
  id v22 = &_swiftEmptySetSingleton;
  sub_10008BEBC((uint64_t)a2);
  __CocoaSet.makeIterator()();
  uint64_t v5 = __CocoaSet.Iterator.next()();
  if (!v5)
  {
LABEL_23:
    swift_release();
    sub_10008BECC((uint64_t)a2);
    return (uint64_t)v4;
  }
  uint64_t v6 = v5;
  type metadata accessor for Peer();
  while (1)
  {
    v20[0] = v6;
    uint64_t result = swift_dynamicCast();
    v20[0] = v21;
    if (!a2) {
      break;
    }
    char v8 = a2(v20);
    uint64_t v9 = v21;
    if (v8)
    {
      unint64_t v10 = v22;
      if (v22[3] <= v22[2])
      {
        sub_1000ECBF4();
        unint64_t v10 = v22;
      }
      Hasher.init(_seed:)();
      type metadata accessor for UUID();
      sub_10008BEDC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v11 = v10 + 7;
      uint64_t v12 = -1 << *((unsigned char *)v10 + 32);
      unint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~v10[(v13 >> 6) + 7]) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~v10[(v13 >> 6) + 7])) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v16 = 0;
        unint64_t v17 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v17 && (v16 & 1) != 0)
          {
            __break(1u);
            goto LABEL_25;
          }
          BOOL v18 = v14 == v17;
          if (v14 == v17) {
            unint64_t v14 = 0;
          }
          v16 |= v18;
          uint64_t v19 = v11[v14];
        }
        while (v19 == -1);
        unint64_t v15 = __clz(__rbit64(~v19)) + (v14 << 6);
      }
      *(void *)((char *)v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(v10[6] + 8 * v15) = v9;
      ++v10[2];
    }
    else
    {
      swift_release();
    }
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (!v6)
    {
      uint64_t v4 = v22;
      goto LABEL_23;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10008BD4C(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for Peer();
  sub_10008BEDC((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v4 = result;
  uint64_t v9 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v5) {
      return v4;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      return v4;
    }
  }
  if (v5 >= 1)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      sub_1000E851C(&v8, v7);
      swift_release();
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008BEBC(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10008BECC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10008BEDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008BF24()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10008BF5C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10008BFA4()
{
  return sub_100085284(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

unint64_t sub_10008BFB8()
{
  unint64_t result = qword_1004545A8;
  if (!qword_1004545A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545A8);
  }
  return result;
}

unint64_t sub_10008C00C()
{
  unint64_t result = qword_1004545B8;
  if (!qword_1004545B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545B8);
  }
  return result;
}

uint64_t sub_10008C060(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10007582C(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008C0B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10008C0F4()
{
  return sub_1001E8C7C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_10008C114(uint64_t a1)
{
  return sub_1001E5FE4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10008C130()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008C168()
{
  return sub_100087AB0(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_10008C170(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  sub_10007582C(0, (unint64_t *)&unk_100455680);
  sub_10008C060(&qword_1004545E0, (unint64_t *)&unk_100455680);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        uint64_t v6 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_1000EA898(&v9, v6);
      }
    }
    else
    {
      uint64_t v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        sub_1000EA898(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008C2E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_10008C4F8();
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (void *)(a1 + 64);
    do
    {
      uint64_t v5 = *(v4 - 3);
      uint64_t v6 = *v4;
      v9[0] = *(v4 - 4);
      v9[1] = v5;
      long long v10 = *((_OWORD *)v4 - 1);
      uint64_t v11 = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000EAB70((uint64_t)v7, (Swift::Int)v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 += 5;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_10008C390(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_1000EAF24(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10008C404(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (double *)(a1 + 32);
    do
    {
      double v5 = *v4++;
      sub_1000EB020(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_10008C478@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100088308(*(uint64_t (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void *sub_10008C4AC@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_10008C4F0()
{
  return swift_release();
}

unint64_t sub_10008C4F8()
{
  unint64_t result = qword_1004545D8;
  if (!qword_1004545D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545D8);
  }
  return result;
}

void sub_10008C574()
{
  Hasher._combine(_:)(*v0);
}

uint64_t sub_10008C5A4()
{
  return *(void *)&aCorsize_0[8 * *v0];
}

uint64_t sub_10008C5BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008F290(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10008C5E4()
{
  return 0;
}

void sub_10008C5F0(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10008C5FC(uint64_t a1)
{
  unint64_t v2 = sub_100090658();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008C638(uint64_t a1)
{
  unint64_t v2 = sub_100090658();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008C674(void *a1, uint64_t a2, uint64_t a3)
{
  v11[1] = a3;
  uint64_t v5 = sub_10006C51C(&qword_100454758);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_100090658();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    char v13 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10008C80C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_100454700);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_10008FF58();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&long long v11 = *(void *)v3;
  char v13 = 0;
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_100090000(&qword_100454708);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 24);
    uint64_t v12 = *(void *)(v3 + 40);
    char v13 = 2;
    sub_100090064();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + 48);
    uint64_t v12 = *(void *)(v3 + 64);
    char v13 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10008CA44@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008F3E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10008CA74(void *a1)
{
  return sub_10008C674(a1, *v1, v1[1]);
}

BOOL sub_10008CA94(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

Swift::Int sub_10008CAC4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_10008CB0C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_10008CB50()
{
  unint64_t result = 0x4173656C75646F6DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x416567616B636170;
      break;
    case 2:
      unint64_t result = 0x656E6961746E6F63;
      break;
    case 3:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10008CBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008F5B4(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008CC24(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10008CC30(uint64_t a1)
{
  unint64_t v2 = sub_10008FF58();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008CC6C(uint64_t a1)
{
  unint64_t v2 = sub_10008FF58();

  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_10008CCA8@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10008F7B4(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_10008CCFC(void *a1)
{
  return sub_10008C80C(a1);
}

BOOL sub_10008CD14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v21 = *(void *)(a1 + 16);
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  if ((sub_1002E4424(*(void **)a1, *(void **)a2) & 1) == 0) {
    return 0;
  }
  if (v2 == v5 && v21 == v20)
  {
    BOOL result = 0;
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    BOOL result = 0;
    if ((v13 & 1) == 0) {
      return result;
    }
  }
  if (v19 == v6 && v18 == v7 && v17 == v8) {
    return v16 == v9 && v3 == v10 && v4 == v11;
  }
  return result;
}

uint64_t sub_10008CE54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[0] = a4;
  uint64_t v6 = sub_10006C51C(&qword_1004546A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_10008F1E8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v4)
  {
    v12[1] = v12[0];
    char v13 = 1;
    sub_10006C51C(&qword_1004546B0);
    sub_10008FE94(&qword_1004546B8, (void (*)(void))sub_10008F23C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

BOOL sub_10008D01C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_10008D034()
{
  if (*v0) {
    return 0x6E4974656C707061;
  }
  else {
    return 0x69746E6564657263;
  }
}

uint64_t sub_10008D088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10008FB04(a1, a2);
  *a3 = result;
  return result;
}

void sub_10008D0B0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10008D0BC(uint64_t a1)
{
  unint64_t v2 = sub_10008F1E8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008D0F8(uint64_t a1)
{
  unint64_t v2 = sub_10008F1E8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10008D134@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10008FC40(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10008D164(void *a1)
{
  return sub_10008CE54(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_10008D184(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }

  return sub_1002E41E4(v2, v3);
}

uint64_t sub_10008D1F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SECCredentialConfig();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = [a1 productConfigId];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v37 = v13;
    uint64_t v38 = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      sub_10008E734((uint64_t)v7, &qword_100455EB0);
    }
    else
    {
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v20(v12, v7, v8);
      id v21 = [a1 credentialMetadata];
      if (v21)
      {
        id v22 = v21;
        uint64_t v34 = v20;
        uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        type metadata accessor for JSONDecoder();
        swift_allocObject();
        JSONDecoder.init()();
        sub_10008E67C();
        uint64_t v35 = v23;
        *(void *)&long long v36 = v25;
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();

        sub_10006D144(v35, v36);
        swift_release();
        uint64_t v31 = v39;
        long long v36 = v40;
        v34(v17, v12, v8);
        uint64_t v13 = v37;
        a2 = v38;
        id v32 = &v17[*(int *)(v37 + 20)];
        *(void *)id v32 = v31;
        *(_OWORD *)(v32 + _Block_object_dispose(&STACK[0x2C0], 8) = v36;
        sub_10008E6D0((uint64_t)v17, a2);
        uint64_t v33 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a2, v33, 1, v13);
      }
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }
    uint64_t v13 = v37;
    a2 = v38;
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10008E55C(v26, (uint64_t)qword_1004686A8);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Corrupted metadata entity", v29, 2u);
    swift_slowDealloc();
  }

  uint64_t v33 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(a2, v33, 1, v13);
}

BOOL sub_10008D61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL result = 0;
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = *(void *)(a1 + v6);
    uint64_t v8 = *(void *)(a1 + v6 + 8);
    uint64_t v9 = *(void *)(a1 + v6 + 16);
    uint64_t v10 = (void *)(a2 + v6);
    uint64_t v11 = v10[2];
    BOOL v12 = v7 == *v10 && v8 == v10[1];
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && (sub_1002E41E4(v9, v11)) {
      return 1;
    }
  }
  return result;
}

void sub_10008D6A4(void *a1, uint64_t a2)
{
  type metadata accessor for CredentialMetadataEntity();
  id v5 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a1];
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v6 = a2 + *(int *)(type metadata accessor for SECCredentialConfig() + 20);
  uint64_t v7 = *(void **)(v6 + 8);
  uint64_t v8 = *(void **)(v6 + 16);
  v24[0] = *(id *)v6;
  v24[1] = v7;
  void v24[2] = v8;
  sub_10008DB00();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v2)
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    [v5 setCredentialMetadata:isa];

    UUID.uuidString.getter();
    NSString v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v5 setProductConfigId:v14];

    v24[0] = 0;
    if ([a1 save:v24])
    {
      id v15 = v24[0];
    }
    else
    {
      id v16 = v24[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E55C(v17, (uint64_t)qword_1004686A8);
      swift_errorRetain();
      swift_errorRetain();
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        v24[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 136315394;
        sub_100290514(0xD000000000000019, 0x80000001003B25A0, (uint64_t *)v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v20 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v21 = Error.localizedDescription.getter();
        sub_100290514(v21, v22, (uint64_t *)v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v20, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_10008E594();
      swift_allocError();
      void *v23 = 0;
      swift_willThrow();
      swift_errorRelease();
    }
    sub_10006D144(v11, v12);
  }
}

uint64_t type metadata accessor for SECCredentialConfig()
{
  uint64_t result = qword_100454668;
  if (!qword_100454668) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10008DB00()
{
  unint64_t result = qword_1004545E8;
  if (!qword_1004545E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545E8);
  }
  return result;
}

void sub_10008DB54(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithEntityName:v6];

  sub_10008E5E8();
  sub_10006C51C(&qword_100457200);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_100378290;
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10008E628();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  unint64_t v12 = NSPredicate.init(format:_:)();
  [v7 setPredicate:v12];

  id v13 = [*(id *)(v3 + 112) viewContext];
  type metadata accessor for CredentialMetadataEntity();
  uint64_t v14 = NSManagedObjectContext.fetch<A>(_:)();
  if (!v2)
  {
    unint64_t v21 = v14;

    if (v21 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v25)
      {
LABEL_8:
        if ((v21 & 0xC000000000000001) != 0)
        {
          id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return;
          }
          id v22 = *(id *)(v21 + 32);
        }
        uint64_t v23 = v22;
        swift_bridgeObjectRelease();
        sub_10008D1F8(v23, a1);

        return;
      }
    }
    else if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_8;
    }

    swift_bridgeObjectRelease();
    uint64_t v26 = type metadata accessor for SECCredentialConfig();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a1, 1, 1, v26);
    return;
  }

  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E55C(v15, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  id v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315394;
    sub_100290514(0xD00000000000001CLL, 0x80000001003B25E0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
    sub_100290514(v19, v20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  void *v24 = 0;
  swift_willThrow();
  swift_errorRelease();
}

uint64_t sub_10008DFC4()
{
  uint64_t v2 = sub_10006C51C(&qword_100454608);
  __chkstk_darwin(v2 - 8, v3);
  id v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SECCredentialConfig();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  id v13 = (char *)&v39 - v12;
  id v14 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v14 initWithEntityName:v15];

  os_log_type_t v17 = v16;
  uint64_t v18 = [*(id *)(v0 + 112) viewContext];
  type metadata accessor for CredentialMetadataEntity();
  uint64_t v19 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E55C(v20, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v46 = sub_100290514(0xD000000000000016, 0x80000001003B2600, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v24 = Error.localizedDescription.getter();
      uint64_t v46 = sub_100290514(v24, v25, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v38 = 0;
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v18;
  }
  unint64_t v26 = v19;
  uint64_t v27 = v45;
  id v40 = v17;
  uint64_t v41 = 0;
  uint64_t v43 = v13;
  uint64_t v44 = v10;

  if (!(v26 >> 62))
  {
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v30 = (uint64_t)v44;
    if (v28) {
      goto LABEL_8;
    }
LABEL_25:

    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage;
LABEL_26:
    swift_bridgeObjectRelease();
    return (uint64_t)v18;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v28 = result;
  uint64_t v30 = (uint64_t)v44;
  if (!result) {
    goto LABEL_25;
  }
LABEL_8:
  if (v28 >= 1)
  {
    uint64_t v31 = v27;
    uint64_t v32 = 0;
    uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v42 = v6;
    do
    {
      if ((v26 & 0xC000000000000001) != 0) {
        id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v34 = *(id *)(v26 + 8 * v32 + 32);
      }
      sub_10008D1F8(v34, (uint64_t)v5);
      if ((*v33)(v5, 1, v6) == 1)
      {
        sub_10008E734((uint64_t)v5, &qword_100454608);
      }
      else
      {
        uint64_t v35 = (uint64_t)v43;
        sub_10008E6D0((uint64_t)v5, (uint64_t)v43);
        sub_10008E6D0(v35, v30);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v18 = (void *)sub_100259540(0, v18[2] + 1, 1, (unint64_t)v18);
        }
        unint64_t v37 = v18[2];
        unint64_t v36 = v18[3];
        if (v37 >= v36 >> 1) {
          uint64_t v18 = (void *)sub_100259540(v36 > 1, v37 + 1, 1, (unint64_t)v18);
        }
        v18[2] = v37 + 1;
        uint64_t v30 = (uint64_t)v44;
        sub_10008E6D0((uint64_t)v44, (uint64_t)v18+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v37);
        uint64_t v6 = v42;
      }
      ++v32;
    }
    while (v28 != v32);

    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_10008E55C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

unint64_t sub_10008E594()
{
  unint64_t result = qword_10045AFC0;
  if (!qword_10045AFC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AFC0);
  }
  return result;
}

unint64_t sub_10008E5E8()
{
  unint64_t result = qword_1004545F0;
  if (!qword_1004545F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1004545F0);
  }
  return result;
}

unint64_t sub_10008E628()
{
  unint64_t result = qword_1004545F8;
  if (!qword_1004545F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545F8);
  }
  return result;
}

unint64_t sub_10008E67C()
{
  unint64_t result = qword_100454600;
  if (!qword_100454600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454600);
  }
  return result;
}

uint64_t sub_10008E6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SECCredentialConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008E734(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10006C51C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for SECCredentialConfig.Metadata()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s10seserviced19SECCredentialConfigV8MetadataVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SECCredentialConfig.Metadata(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for LyonTimeExtension.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SECCredentialConfig.Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SECCredentialConfig.Metadata(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SECCredentialConfig.Metadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECCredentialConfig.Metadata()
{
  return &type metadata for SECCredentialConfig.Metadata;
}

uint64_t destroy for SECCredentialConfig.Metadata.CredentialInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SECCredentialConfig.Metadata.CredentialInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SECCredentialConfig.Metadata.CredentialInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  return a1;
}

__n128 initializeWithTake for SECCredentialConfig.Metadata.CredentialInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for SECCredentialConfig.Metadata.CredentialInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for SECCredentialConfig.Metadata.CredentialInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SECCredentialConfig.Metadata.CredentialInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECCredentialConfig.Metadata.CredentialInfo()
{
  return &type metadata for SECCredentialConfig.Metadata.CredentialInfo;
}

uint64_t *sub_10008EBCC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    void v9[2] = v10[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10008ECB4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10008ED34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  void v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_10008EDCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v8[2] = v9[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008EE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  return a1;
}

uint64_t sub_10008EF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  void v8[2] = v9[2];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10008EFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008EFBC);
}

uint64_t sub_10008EFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_10008F080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008F094);
}

uint64_t sub_10008F094(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + _Block_object_dispose(&STACK[0x2C0], 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10008F154()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10008F1E8()
{
  unint64_t result = qword_1004546A8;
  if (!qword_1004546A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004546A8);
  }
  return result;
}

unint64_t sub_10008F23C()
{
  unint64_t result = qword_1004546C0;
  if (!qword_1004546C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004546C0);
  }
  return result;
}

uint64_t sub_10008F290(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657A6953726F63 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x657A6953646F63 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x657A69536D766ELL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_10008F3E8(void *a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100454748);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_100090658();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v9[15] = 0;
  uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v9[14] = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v9[13] = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10007594C((uint64_t)a1);
  return v7;
}

uint64_t sub_10008F5B4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4173656C75646F6DLL && a2 == 0xEB00000000734449;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x416567616B636170 && a2 == 0xEA00000000006469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656E6961746E6F63 && a2 == 0xED0000657A695372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001003B2620)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10008F7B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10006C51C(&qword_1004546E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_10008FF58();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)a1);
  }
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  char v29 = 0;
  sub_100090000(&qword_1004546F0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v27;
  LOBYTE(v27) = 1;
  swift_bridgeObjectRetain();
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v24 = v11;
  char v29 = 2;
  unint64_t v14 = sub_10008FFAC();
  swift_bridgeObjectRetain();
  *(void *)&long long v25 = v14;
  uint64_t v26 = v13;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v22 = *((void *)&v27 + 1);
  uint64_t v23 = v27;
  uint64_t v21 = v28;
  char v29 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  long long v25 = v27;
  uint64_t v15 = v28;
  sub_10007594C((uint64_t)a1);
  uint64_t v16 = v26;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = v24;
  *(void *)a2 = v10;
  *(void *)(a2 + _Block_object_dispose(&STACK[0x2C0], 8) = v18;
  uint64_t v19 = v23;
  *(void *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v19;
  uint64_t v20 = v21;
  *(void *)(a2 + 32) = v22;
  *(void *)(a2 + 40) = v20;
  *(_OWORD *)(a2 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v25;
  *(void *)(a2 + 64) = v15;
  return result;
}

uint64_t sub_10008FB04(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69746E6564657263 && a2 == 0xEF73657079546C61;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E4974656C707061 && a2 == 0xEF7365636E617473)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10008FC40(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_1004546C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1[4];
  sub_100075908(a1, a1[3]);
  sub_10008F1E8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10007594C((uint64_t)a1);
  }
  else
  {
    v10[31] = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_10006C51C(&qword_1004546B0);
    v10[15] = 1;
    sub_10008FE94(&qword_1004546D0, (void (*)(void))sub_10008FF04);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain();
    sub_10007594C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_10008FE94(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(&qword_1004546B0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008FF04()
{
  unint64_t result = qword_1004546D8;
  if (!qword_1004546D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004546D8);
  }
  return result;
}

unint64_t sub_10008FF58()
{
  unint64_t result = qword_1004546E8;
  if (!qword_1004546E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004546E8);
  }
  return result;
}

unint64_t sub_10008FFAC()
{
  unint64_t result = qword_1004546F8;
  if (!qword_1004546F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004546F8);
  }
  return result;
}

uint64_t sub_100090000(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220((uint64_t *)&unk_100455EA0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100090064()
{
  unint64_t result = qword_100454710;
  if (!qword_100454710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454710);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Peer.PeerType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SECCredentialConfig.Metadata.CredentialInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100090214);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECCredentialConfig.Metadata.CredentialInfo.CodingKeys()
{
  return &type metadata for SECCredentialConfig.Metadata.CredentialInfo.CodingKeys;
}

uint64_t getEnumTagSinglePayload for LyonTimeExtension.MessageDirection(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SECCredentialConfig.Metadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000903A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000903D0(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SECCredentialConfig.Metadata.CodingKeys()
{
  return &type metadata for SECCredentialConfig.Metadata.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo()
{
  return &type metadata for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo;
}

unint64_t sub_10009044C()
{
  unint64_t result = qword_100454718;
  if (!qword_100454718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454718);
  }
  return result;
}

unint64_t sub_1000904A4()
{
  unint64_t result = qword_100454720;
  if (!qword_100454720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454720);
  }
  return result;
}

unint64_t sub_1000904FC()
{
  unint64_t result = qword_100454728;
  if (!qword_100454728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454728);
  }
  return result;
}

unint64_t sub_100090554()
{
  unint64_t result = qword_100454730;
  if (!qword_100454730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454730);
  }
  return result;
}

unint64_t sub_1000905AC()
{
  unint64_t result = qword_100454738;
  if (!qword_100454738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454738);
  }
  return result;
}

unint64_t sub_100090604()
{
  unint64_t result = qword_100454740;
  if (!qword_100454740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454740);
  }
  return result;
}

unint64_t sub_100090658()
{
  unint64_t result = qword_100454750;
  if (!qword_100454750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454750);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DSKExpress.ExpressState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100090808);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo.CodingKeys()
{
  return &type metadata for SECCredentialConfig.Metadata.CredentialInfo.MemoryInfo.CodingKeys;
}

unint64_t sub_100090844()
{
  unint64_t result = qword_100454760;
  if (!qword_100454760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454760);
  }
  return result;
}

unint64_t sub_10009089C()
{
  unint64_t result = qword_100454768;
  if (!qword_100454768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454768);
  }
  return result;
}

unint64_t sub_1000908F4()
{
  unint64_t result = qword_100454770;
  if (!qword_100454770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454770);
  }
  return result;
}

uint64_t sub_100090958(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v64 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  unsigned int v11 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v12 = *(void (**)(void *, void, uint64_t))(v6 + 104);
  v12(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v13 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  unint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
  v14(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    uint64_t v22 = swift_once();
    goto LABEL_13;
  }
  unsigned int v62 = v12;
  uint64_t v63 = a2;
  unsigned int v61 = v14;
  a2 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 1) {
    sub_100093B18(3);
  }
  unint64_t v14 = (void (*)(void *, uint64_t))OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  int v15 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state);
  uint64_t v16 = Logger.logObject.getter();
  if (v15)
  {
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already running", v18, 2u);
      swift_slowDealloc();
    }

    uint64_t v19 = 2;
    return sub_100093B18(v19);
  }
  unsigned int v59 = v11;
  uint64_t v60 = v5;
  int v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, (os_log_type_t)v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v20, "Starting Owner Pairing", v21, 2u);
    swift_slowDealloc();
  }

  if (qword_1004536D8 != -1) {
    goto LABEL_35;
  }
LABEL_13:
  uint64_t v24 = __chkstk_darwin(v22, v23);
  __chkstk_darwin(v24, v25);
  long long v27 = v26 + 4;
  os_unfair_lock_lock(v26 + 4);
  sub_1000AA81C(v28);
  os_unfair_lock_unlock(v27);
  *(unsigned char *)(v3 + a2) = 2;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s");
  *((unsigned char *)v14 + v3) = 1;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
  char v29 = (void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  uint64_t v30 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  uint64_t v31 = v63;
  void *v29 = v64;
  v29[1] = v31;
  sub_10008BECC(v30);
  uint64_t v32 = qword_1004537B0;
  swift_retain();
  if (v32 != -1) {
    swift_once();
  }
  if (byte_100468898 != 1)
  {
    uint64_t v19 = 4;
    return sub_100093B18(v19);
  }
  uint64_t v58 = 0;
  unint64_t v68 = 0xD000000000000014;
  unint64_t v69 = 0x80000001003B1620;
  unint64_t v70 = 0xD000000000000016;
  unint64_t v71 = 0x80000001003B27C0;
  uint64_t v72 = 893797958;
  unint64_t v73 = 0xE400000000000000;
  char v74 = 1;
  sub_1001AF218();
  uint64_t v63 = v34;
  uint64_t v64 = v33;
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  uint64_t v57 = qword_100468680;
  sub_10006C51C(&qword_10045B590);
  uint64_t v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1003782A0;
  *(void *)(v35 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 40) = v36;
  *(void *)(v35 + 4_Block_object_dispose(&STACK[0x2C0], 8) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v35 + 56) = v37;
  sub_10006C51C(&qword_1004548C0);
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v38 - 8);
  unint64_t v40 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_100378290;
  if (qword_1004538E8 != -1) {
    swift_once();
  }
  uint64_t v42 = sub_10008E55C(v38, (uint64_t)qword_100468A00);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v39 + 16))(v41 + v40, v42, v38);
  if (qword_1004537D8 != -1) {
    swift_once();
  }
  uint64_t v43 = *(void *)(qword_1004688C0 + 16);
  type metadata accessor for DSKBLE.BLEScanRequest();
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  *((void *)&v56 + 1) = sub_1000AA57C;
  *((void *)&v55 + 1) = sub_1000AA578;
  *(void *)&long long v56 = v3;
  *((void *)&v54 + 1) = sub_1000AA574;
  *(void *)&long long v55 = v3;
  *((void *)&v53 + 1) = sub_1000AA570;
  *(void *)&long long v54 = v3;
  *((void *)&v52 + 1) = sub_1000AA558;
  *(void *)&long long v53 = v3;
  *((void *)&v51 + 1) = sub_1000AA538;
  *(void *)&long long v52 = v3;
  *(void *)&long long v51 = 0;
  uint64_t v44 = sub_1000DA5FC(v64, v63, -60, v35, v41, 1, 0, v43, 0, 0, 1, 0, v51, v52, v53, v54, v55, v56, v3, 0);
  uint64_t v45 = v58;
  sub_1000CC140(v44);
  swift_release();
  if (!v45)
  {
    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v47 = qword_100468880;
    uint64_t v48 = qword_100468A38;
    *uint64_t v9 = qword_100468A38;
    uint64_t v49 = v60;
    v62(v9, v59, v60);
    id v50 = (id)v48;
    LOBYTE(v4_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
    v61(v9, v49);
    if (v48)
    {
      *(unsigned char *)(v47 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 1;
      if (qword_1004537A8 == -1)
      {
LABEL_33:
        uint64_t v66 = 0;
        memset(v65, 0, sizeof(v65));
        sub_1001F91E8(0, (uint64_t)v65);
        return sub_10008E734((uint64_t)v65, &qword_100458800);
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_33;
  }
  *(void *)&v65[0] = v45;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast() && v67 == 3)
  {
    swift_errorRelease();
    sub_100093B18(0);
    return swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100093B18(2);
    return swift_errorRelease();
  }
}

void sub_10009120C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    int v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode);
    uint64_t v10 = Logger.logObject.getter();
    if (v9 == 2)
    {
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping", v12, 2u);
        swift_slowDealloc();
      }

      sub_100093B18(2);
    }
    else
    {
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v13, "Not running", v14, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10009144C()
{
}

void sub_10009145C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (void *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *id v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "pairingEnded", v13, 2u);
        swift_slowDealloc();
      }

      if (a1)
      {
        swift_errorRetain();
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          os_log_type_t v17 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 138412290;
          swift_errorRetain();
          uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
          v19[1] = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          void *v17 = v18;
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "Pairing ended with error %@", v16, 0xCu);
          sub_10006C51C(&qword_100455620);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        sub_100093B18(2);
        swift_errorRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100091788(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *id v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      if (*(void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
      {
        swift_retain();
        if (sub_100095EF4(1430540353, 0xE400000000000000, 0, 12, a1, a2))
        {
          swift_release();
          return 0;
        }
        else
        {
          sub_10006D098();
          uint64_t v14 = swift_allocError();
          unsigned char *v20 = 2;
          swift_release();
        }
      }
      else
      {
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing peer", v18, 2u);
          swift_slowDealloc();
        }

        sub_100093B18(2);
        sub_10006D098();
        uint64_t v14 = swift_allocError();
        unsigned char *v19 = 2;
      }
    }
    else
    {
      sub_10006D098();
      uint64_t v14 = swift_allocError();
      *os_log_type_t v15 = 2;
    }
    return v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100091A54()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      id v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Session ended", v12, 2u);
        swift_slowDealloc();
      }

      return sub_100093B18(6);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100091C2C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v49 = v9;
  __chkstk_darwin(v9, v10);
  id v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  os_log_type_t v17 = (uint8_t **)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v18 = (void *)qword_100468A38;
  void *v17 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = v18;
  uint64_t v20 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  if (v20)
  {
    uint64_t v46 = v5;
    uint64_t v47 = v4;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a1;
    *(void *)(v20 + 24) = a2;
    sub_10006D0EC(a1, a2);
    if (qword_1004536D8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v21 = (uint8_t *)off_100455CB0;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1000AA490;
  *(void *)(v22 + 24) = v20;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  *(&v42 - 4) = (uint8_t *)sub_1000AA894;
  *(&v42 - 3) = (uint8_t *)v24;
  *(&v42 - 2) = v21;
  __chkstk_darwin(v24, v25);
  *(&v42 - 2) = (uint8_t *)sub_1000AA878;
  *(&v42 - 1) = v26;
  uint64_t v28 = v27 + 4;
  swift_retain();
  os_unfair_lock_lock(v28);
  sub_1000AA804(aBlock);
  os_unfair_lock_unlock(v28);
  uint64_t v29 = aBlock[0];
  swift_release();
  swift_release();
  uint64_t v30 = (void *)sub_1000BB0E4(v29);
  swift_bridgeObjectRelease();
  if (v30)
  {
    id v31 = [v30 blePairingRequest];

    if (v31)
    {
    }
    else
    {
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(a1, a2);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.info.getter();
      int v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        int v45 = v34;
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        aBlock[0] = v44;
        *(_DWORD *)uint64_t v35 = 136315138;
        uint64_t v42 = v35 + 4;
        uint64_t v43 = v35;
        long long v51 = sub_10023CDF4(a1, a2);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        long long v51 = (void *)sub_100290514(v36, v38, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v45, "Request to start First Approach for %s", v43, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
      }
      if (qword_100453930 != -1) {
        swift_once();
      }
      uint64_t v39 = (void *)swift_allocObject();
      v39[2] = a1;
      v39[3] = a2;
      void v39[4] = v50;
      aBlock[4] = (uint64_t)sub_1000AA4D8;
      aBlock[5] = (uint64_t)v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10007C0C4;
      aBlock[3] = (uint64_t)&unk_100410DD8;
      unint64_t v40 = _Block_copy(aBlock);
      sub_10006D0EC(a1, a2);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      long long v51 = &_swiftEmptyArrayStorage;
      sub_1000A98B0((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      uint64_t v41 = v47;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v8, v41);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v12, v49);
      swift_release();
    }
  }
}

uint64_t sub_1000923AC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000A98B0((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
    goto LABEL_29;
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 < v9)
    {
      unint64_t v15 = *(void *)(v17 + 8 * v14);
      uint64_t v12 = v4 + 1;
      if (v15) {
        goto LABEL_28;
      }
      uint64_t v12 = v4 + 2;
      if (v4 + 2 < v9)
      {
        unint64_t v15 = *(void *)(v17 + 8 * v12);
        if (v15) {
          goto LABEL_28;
        }
        uint64_t v12 = v4 + 3;
        if (v4 + 3 < v9)
        {
          unint64_t v15 = *(void *)(v17 + 8 * v12);
          if (v15) {
            goto LABEL_28;
          }
          uint64_t v12 = v4 + 4;
          if (v4 + 4 < v9)
          {
            unint64_t v15 = *(void *)(v17 + 8 * v12);
            if (v15) {
              goto LABEL_28;
            }
            uint64_t v12 = v4 + 5;
            if (v4 + 5 < v9)
            {
              unint64_t v15 = *(void *)(v17 + 8 * v12);
              if (!v15)
              {
                uint64_t v16 = v4 + 6;
                while (v9 != v16)
                {
                  unint64_t v15 = *(void *)(v17 + 8 * v16++);
                  if (v15)
                  {
                    uint64_t v12 = v16 - 1;
                    goto LABEL_28;
                  }
                }
                goto LABEL_33;
              }
LABEL_28:
              uint64_t v10 = (v15 - 1) & v15;
              unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
              uint64_t v13 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
              swift_retain();
              if (v13)
              {
                do
                {
                  if (*(unsigned char *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1) {
                    break;
                  }
                  uint64_t result = swift_release();
                  uint64_t v4 = v12;
                  unint64_t v5 = v10;
                  if ((v1 & 0x8000000000000000) == 0) {
                    goto LABEL_8;
                  }
LABEL_10:
                  if (!__CocoaSet.Iterator.next()()) {
                    goto LABEL_33;
                  }
                  type metadata accessor for Peer();
                  swift_unknownObjectRetain();
                  swift_dynamicCast();
                  uint64_t v13 = v23;
                  swift_unknownObjectRelease();
                  uint64_t v12 = v4;
                  uint64_t v10 = v5;
                }
                while (v23);
              }
              goto LABEL_34;
            }
          }
        }
      }
    }
LABEL_33:
    uint64_t v13 = 0;
LABEL_34:
    sub_10008C4F0();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100092684()
{
  type metadata accessor for AlishaPairing();
  swift_allocObject();
  uint64_t result = sub_100092880();
  qword_100468650 = result;
  return result;
}

void sub_1000926C4(uint64_t a1, uint64_t a2, const char *a3)
{
  swift_retain_n();
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    uint64_t v10 = v6;
    uint64_t v7 = String.init<A>(describing:)();
    sub_100290514(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, a3, v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

uint64_t sub_100092880()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) = 0;
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  *uint64_t v1 = 0;
  v1[1] = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches) = &_swiftEmptySetSingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches) = &_swiftEmptySetSingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 0;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v4[4] = sub_1000A98F8;
  v4[5] = v0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  _DWORD v4[2] = sub_1002B9D80;
  v4[3] = &unk_100410B58;
  uint64_t v2 = _Block_copy(v4);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v2);
  return v0;
}

_DWORD *sub_100092A24()
{
  uint64_t v1 = 1701736302;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  if (v2)
  {
    id v3 = [v2 publicKeyIdentifier];
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    *(void *)&long long v136 = sub_10023CDF4(v4, v6);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    sub_10006D144(v4, v6);
    uint64_t v137 = &type metadata for String;
    if (!v9)
    {
      unint64_t v9 = 0xE400000000000000;
      uint64_t v7 = 1701736302;
    }
  }
  else
  {
    uint64_t v137 = &type metadata for String;
    unint64_t v9 = 0xE400000000000000;
    uint64_t v7 = 1701736302;
  }
  *(void *)&long long v136 = v7;
  *((void *)&v136 + 1) = v9;
  sub_1000761D0(&v136, &v134);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 0x746E696F70646E65, 0xE800000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v11 = *(unsigned char *)(v115 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed);
  uint64_t v137 = &type metadata for Bool;
  LOBYTE(v136) = v11;
  sub_1000761D0(&v136, &v134);
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 0xD000000000000011, 0x80000001003B2660, v12);
  swift_bridgeObjectRelease();
  LOBYTE(v136) = *(unsigned char *)(v115 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode);
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v137 = &type metadata for String;
  *(void *)&long long v136 = v13;
  *((void *)&v136 + 1) = v14;
  sub_1000761D0(&v136, &v134);
  char v15 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 1701080941, 0xE400000000000000, v15);
  swift_bridgeObjectRelease();
  if (*(void *)(v115 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
    swift_retain();
    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    swift_release();
    uint64_t v137 = &type metadata for String;
    if (v18)
    {
      uint64_t v1 = v16;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v137 = &type metadata for String;
  }
  unint64_t v18 = 0xE400000000000000;
LABEL_11:
  *(void *)&long long v136 = v1;
  *((void *)&v136 + 1) = v18;
  sub_1000761D0(&v136, &v134);
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 1919247728, 0xE400000000000000, v19);
  swift_bridgeObjectRelease();
  uint64_t v20 = (uint64_t *)(v115 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches);
  swift_beginAccess();
  uint64_t v21 = *v20;
  unint64_t v121 = *v20 & 0xC000000000000001;
  if (v121)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = __CocoaSet.count.getter();
  }
  else
  {
    uint64_t v22 = *(void *)(v21 + 16);
    swift_bridgeObjectRetain();
  }
  if (!v22)
  {
    swift_bridgeObjectRelease();
    goto LABEL_71;
  }
  sub_1002CF974(0, v22 & ~(v22 >> 63), 0);
  if (v121)
  {
    uint64_t v23 = __CocoaSet.startIndex.getter();
    unsigned __int8 v25 = 1;
  }
  else
  {
    uint64_t v23 = sub_1000FCB1C(v21);
    unsigned __int8 v25 = v26 & 1;
  }
  *(void *)&long long v134 = v23;
  *((void *)&v134 + 1) = v24;
  unsigned __int8 v135 = v25;
  if (v22 < 0) {
    goto LABEL_155;
  }
  uint64_t v27 = 0;
  uint64_t v117 = v22;
  uint64_t v119 = v21;
  while (2)
  {
    if (v27 == v22) {
      goto LABEL_145;
    }
    long long v125 = v134;
    unsigned int v127 = v135;
    uint64_t v33 = sub_1000FB6D0(v134, SDWORD2(v134), v135, v21);
    int v34 = (uint64_t *)(v33 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v35 = *(void *)(v33 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v35 >> 60 == 15) {
      goto LABEL_161;
    }
    uint64_t v123 = v27 + 1;
    uint64_t v36 = *v34;
    unint64_t v37 = v35 >> 62;
    unint64_t v38 = HIDWORD(*v34);
    unint64_t v130 = *(void *)(v33 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    switch(v35 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(v38, v36)) {
          goto LABEL_148;
        }
        uint64_t v39 = (int)v38 - (int)v36;
        sub_10006D0EC(v36, *(void *)(v33 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
        if (v38 == v36) {
          goto LABEL_35;
        }
        goto LABEL_27;
      case 2uLL:
        uint64_t v43 = *(void *)(v36 + 16);
        uint64_t v42 = *(void *)(v36 + 24);
        uint64_t v39 = v42 - v43;
        if (__OFSUB__(v42, v43)) {
          goto LABEL_149;
        }
        sub_10006D0EC(v36, v130);
        if (!v39) {
          goto LABEL_35;
        }
LABEL_27:
        char v129 = v38;
        int64_t v40 = v39 & ~(v39 >> 63);
        sub_1002CF974(0, v40, 0);
        if (v37)
        {
          if (v37 == 1) {
            uint64_t v41 = (int)v36;
          }
          else {
            uint64_t v41 = *(void *)(v36 + 16);
          }
          if (v39 < 0) {
            goto LABEL_147;
          }
        }
        else
        {
          if (v39 < 0) {
            goto LABEL_153;
          }
          uint64_t v41 = 0;
        }
        int v132 = v37;
        break;
      case 3uLL:
        goto LABEL_36;
      default:
        uint64_t v39 = BYTE6(v35);
        if (v39) {
          goto LABEL_27;
        }
        goto LABEL_35;
    }
    do
    {
      if (!v40)
      {
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
        goto LABEL_146;
      }
      if (v37)
      {
        if (v37 == 1)
        {
          if (v41 < (int)v36 || v41 >= v36 >> 32) {
            goto LABEL_135;
          }
          uint64_t v51 = __DataStorage._bytes.getter();
          if (!v51) {
            goto LABEL_157;
          }
          uint64_t v52 = v51;
          uint64_t v53 = __DataStorage._offset.getter();
          uint64_t v54 = v41 - v53;
          if (__OFSUB__(v41, v53)) {
            goto LABEL_137;
          }
        }
        else
        {
          if (v41 < *(void *)(v36 + 16)) {
            goto LABEL_134;
          }
          if (v41 >= *(void *)(v36 + 24)) {
            goto LABEL_136;
          }
          uint64_t v56 = __DataStorage._bytes.getter();
          if (!v56) {
            goto LABEL_158;
          }
          uint64_t v52 = v56;
          uint64_t v57 = __DataStorage._offset.getter();
          uint64_t v54 = v41 - v57;
          if (__OFSUB__(v41, v57)) {
            goto LABEL_138;
          }
        }
        char v55 = *(unsigned char *)(v52 + v54);
      }
      else
      {
        if (v41 >= BYTE6(v130)) {
          goto LABEL_133;
        }
        LOWORD(v136) = v36;
        BYTE2(v136) = BYTE2(v36);
        BYTE3(v136) = BYTE3(v36);
        BYTE4(v136) = v129;
        BYTE5(v136) = BYTE5(v36);
        BYTE6(v136) = BYTE6(v36);
        BYTE7(v136) = HIBYTE(v36);
        DWORD2(v136) = v130;
        WORD6(v136) = WORD2(v130);
        char v55 = *((unsigned char *)&v136 + v41);
      }
      sub_10006C51C(&qword_100457200);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_100378290;
      *(void *)(v58 + 56) = &type metadata for UInt8;
      *(void *)(v58 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v58 + 32) = v55;
      uint64_t v59 = String.init(format:_:)();
      uint64_t v61 = v60;
      unint64_t v37 = _swiftEmptyArrayStorage[2];
      unint64_t v62 = _swiftEmptyArrayStorage[3];
      if (v37 >= v62 >> 1) {
        sub_1002CF974(v62 > 1, v37 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v37 + 1;
      uint64_t v63 = &_swiftEmptyArrayStorage[2 * v37];
      v63[4] = v59;
      void v63[5] = v61;
      ++v41;
      --v40;
      --v39;
      LODWORD(v37) = v132;
    }
    while (v39);
LABEL_35:
    unint64_t v35 = v130;
LABEL_36:
    *(void *)&long long v136 = _swiftEmptyArrayStorage;
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    sub_100075868(v36, v35);
    swift_release();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1002CF974(0, _swiftEmptyArrayStorage[2] + 1, 1);
    }
    uint64_t v22 = v117;
    uint64_t v21 = v119;
    uint64_t v27 = v123;
    unint64_t v48 = _swiftEmptyArrayStorage[2];
    unint64_t v47 = _swiftEmptyArrayStorage[3];
    if (v48 >= v47 >> 1) {
      sub_1002CF974(v47 > 1, v48 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v48 + 1;
    uint64_t v49 = &_swiftEmptyArrayStorage[2 * v48];
    void v49[4] = v44;
    v49[5] = v46;
    if (!v121)
    {
      uint64_t v28 = sub_1000FAE78(v125, *((void *)&v125 + 1), v127, v119);
      uint64_t v30 = v29;
      char v32 = v31;
      sub_10008B004(v125, *((uint64_t *)&v125 + 1), v127);
      *(void *)&long long v134 = v28;
      *((void *)&v134 + 1) = v30;
      unsigned __int8 v135 = v32 & 1;
      goto LABEL_22;
    }
    if ((v127 & 1) == 0) {
      goto LABEL_163;
    }
    if (__CocoaSet.Index.handleBitPattern.getter()) {
      swift_isUniquelyReferenced_nonNull_native();
    }
    sub_10006C51C(&qword_100454580);
    uint64_t v50 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
    __CocoaSet.formIndex(after:isUnique:)();
    v50(&v136, 0);
LABEL_22:
    if (v123 != v117) {
      continue;
    }
    break;
  }
  sub_10008B004(v134, *((uint64_t *)&v134 + 1), v135);
  swift_bridgeObjectRelease();
LABEL_71:
  uint64_t v122 = sub_10006C51C((uint64_t *)&unk_100455EA0);
  uint64_t v137 = (void *)v122;
  *(void *)&long long v136 = _swiftEmptyArrayStorage;
  sub_1000761D0(&v136, &v134);
  char v64 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 0xD000000000000015, 0x80000001003B26A0, v64);
  swift_bridgeObjectRelease();
  unsigned int v65 = (uint64_t *)(v115 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess();
  uint64_t v66 = *v65;
  unint64_t v120 = *v65 & 0xC000000000000001;
  if (v120)
  {
    swift_bridgeObjectRetain();
    uint64_t v67 = __CocoaSet.count.getter();
  }
  else
  {
    uint64_t v67 = *(void *)(v66 + 16);
    swift_bridgeObjectRetain();
  }
  if (!v67)
  {
    swift_bridgeObjectRelease();
    goto LABEL_130;
  }
  sub_1002CF974(0, v67 & ~(v67 >> 63), 0);
  if (v120)
  {
    uint64_t v68 = __CocoaSet.startIndex.getter();
    unsigned __int8 v70 = 1;
  }
  else
  {
    uint64_t v68 = sub_1000FCB1C(v66);
    unsigned __int8 v70 = v71 & 1;
  }
  *(void *)&long long v134 = v68;
  *((void *)&v134 + 1) = v69;
  unsigned __int8 v135 = v70;
  if (v67 < 0)
  {
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
  }
  uint64_t v72 = 0;
  uint64_t v116 = v66;
  uint64_t v118 = v67;
  while (2)
  {
    if (v72 == v67)
    {
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
      goto LABEL_156;
    }
    long long v126 = v134;
    unsigned int v128 = v135;
    BOOL v78 = (uint64_t *)(sub_1000FB6D0(v134, SDWORD2(v134), v135, v66) + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v79 = v78[1];
    if (v79 >> 60 == 15) {
      goto LABEL_162;
    }
    uint64_t v124 = v72 + 1;
    uint64_t v80 = *v78;
    unint64_t v131 = v78[1];
    unint64_t v81 = v79 >> 62;
    unint64_t v82 = HIDWORD(*v78);
    switch(v79 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(v82, v80)) {
          goto LABEL_151;
        }
        uint64_t v83 = (int)v82 - (int)v80;
LABEL_99:
        sub_10006D0EC(v80, v79);
        if (!v83) {
          goto LABEL_87;
        }
LABEL_100:
        int64_t v92 = v83 & ~(v83 >> 63);
        sub_1002CF974(0, v92, 0);
        if (v81)
        {
          if (v81 == 1) {
            uint64_t v93 = (int)v80;
          }
          else {
            uint64_t v93 = *(void *)(v80 + 16);
          }
          if (v83 < 0) {
            goto LABEL_150;
          }
        }
        else
        {
          if (v83 < 0) {
            goto LABEL_154;
          }
          uint64_t v93 = 0;
        }
        int v133 = v81;
        do
        {
          if (!v92) {
            goto LABEL_132;
          }
          if (v81)
          {
            if (v81 == 1)
            {
              if (v93 < (int)v80 || v93 >= v80 >> 32) {
                goto LABEL_139;
              }
              uint64_t v95 = __DataStorage._bytes.getter();
              if (!v95) {
                goto LABEL_159;
              }
              uint64_t v96 = v95;
              uint64_t v97 = __DataStorage._offset.getter();
              uint64_t v98 = v93 - v97;
              if (__OFSUB__(v93, v97)) {
                goto LABEL_142;
              }
            }
            else
            {
              if (v93 < *(void *)(v80 + 16)) {
                goto LABEL_141;
              }
              if (v93 >= *(void *)(v80 + 24)) {
                goto LABEL_143;
              }
              uint64_t v100 = __DataStorage._bytes.getter();
              if (!v100) {
                goto LABEL_160;
              }
              uint64_t v96 = v100;
              uint64_t v101 = __DataStorage._offset.getter();
              uint64_t v98 = v93 - v101;
              if (__OFSUB__(v93, v101)) {
                goto LABEL_144;
              }
            }
            char v99 = *(unsigned char *)(v96 + v98);
          }
          else
          {
            if (v93 >= BYTE6(v131)) {
              goto LABEL_140;
            }
            *(void *)&long long v136 = v80;
            DWORD2(v136) = v131;
            WORD6(v136) = WORD2(v131);
            char v99 = *((unsigned char *)&v136 + v93);
          }
          sub_10006C51C(&qword_100457200);
          uint64_t v102 = swift_allocObject();
          *(_OWORD *)(v102 + 16) = xmmword_100378290;
          *(void *)(v102 + 56) = &type metadata for UInt8;
          *(void *)(v102 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v102 + 32) = v99;
          unint64_t v81 = String.init(format:_:)();
          uint64_t v104 = v103;
          unint64_t v106 = _swiftEmptyArrayStorage[2];
          unint64_t v105 = _swiftEmptyArrayStorage[3];
          if (v106 >= v105 >> 1) {
            sub_1002CF974(v105 > 1, v106 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v106 + 1;
          unint64_t v107 = &_swiftEmptyArrayStorage[2 * v106];
          v107[4] = v81;
          v107[5] = v104;
          ++v93;
          --v92;
          --v83;
          LODWORD(v81) = v133;
        }
        while (v83);
LABEL_87:
        uint64_t v66 = v116;
LABEL_88:
        *(void *)&long long v136 = _swiftEmptyArrayStorage;
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v84 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v86 = v85;
        swift_bridgeObjectRelease();
        sub_100075868(v80, v131);
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002CF974(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v88 = _swiftEmptyArrayStorage[2];
        unint64_t v87 = _swiftEmptyArrayStorage[3];
        if (v88 >= v87 >> 1) {
          sub_1002CF974(v87 > 1, v88 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v88 + 1;
        __int16 v89 = &_swiftEmptyArrayStorage[2 * v88];
        v89[4] = v84;
        v89[5] = v86;
        if (v120)
        {
          uint64_t v67 = v118;
          uint64_t v72 = v124;
          if ((v128 & 1) == 0) {
            goto LABEL_164;
          }
          if (__CocoaSet.Index.handleBitPattern.getter()) {
            swift_isUniquelyReferenced_nonNull_native();
          }
          sub_10006C51C(&qword_100454580);
          uint64_t v94 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
          __CocoaSet.formIndex(after:isUnique:)();
          v94(&v136, 0);
        }
        else
        {
          uint64_t v73 = sub_1000FAE78(v126, *((void *)&v126 + 1), v128, v66);
          uint64_t v75 = v74;
          char v77 = v76;
          sub_10008B004(v126, *((uint64_t *)&v126 + 1), v128);
          *(void *)&long long v134 = v73;
          *((void *)&v134 + 1) = v75;
          unsigned __int8 v135 = v77 & 1;
          uint64_t v67 = v118;
          uint64_t v72 = v124;
        }
        if (v72 != v67) {
          continue;
        }
        sub_10008B004(v134, *((uint64_t *)&v134 + 1), v135);
        swift_bridgeObjectRelease();
        break;
      case 2uLL:
        uint64_t v91 = *(void *)(v80 + 16);
        uint64_t v90 = *(void *)(v80 + 24);
        uint64_t v83 = v90 - v91;
        if (!__OFSUB__(v90, v91)) {
          goto LABEL_99;
        }
        goto LABEL_152;
      case 3uLL:
        goto LABEL_88;
      default:
        uint64_t v83 = BYTE6(v79);
        if (!BYTE6(v79)) {
          goto LABEL_87;
        }
        goto LABEL_100;
    }
    break;
  }
LABEL_130:
  uint64_t v137 = (void *)v122;
  *(void *)&long long v136 = _swiftEmptyArrayStorage;
  sub_1000761D0(&v136, &v134);
  char v108 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 0xD000000000000018, 0x80000001003B26C0, v108);
  swift_bridgeObjectRelease();
  LOBYTE(v136) = *(unsigned char *)(v115 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state);
  uint64_t v109 = String.init<A>(describing:)();
  uint64_t v137 = &type metadata for String;
  *(void *)&long long v136 = v109;
  *((void *)&v136 + 1) = v110;
  sub_1000761D0(&v136, &v134);
  char v111 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v134, 0x6574617473, 0xE500000000000000, v111);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v113 = sub_1000190DC((uint64_t)"alishapairing.state", (uint64_t)isa);

  return v113;
}

uint64_t sub_100093B18(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v5 = *(void **)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (uint64_t *)((char *)&v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  *uint64_t v13 = qword_100468A38;
  char v15 = *(void (**)(void))(v10 + 104);
  unsigned int v77 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v78 = v10 + 104;
  char v76 = (void (*)(void *, void, uint64_t))v15;
  v15(v13);
  id v16 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t v75 = *(uint64_t (**)(void *, void *))(v10 + 8);
  uint64_t result = v75(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_56:
    swift_once();
    goto LABEL_39;
  }
  uint64_t v18 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (!*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state)) {
    return result;
  }
  uint64_t v73 = (uint64_t)v9;
  char v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v72 = v13;
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Clean up", v21, 2u);
    uint64_t v13 = v72;
    swift_slowDealloc();
  }

  *(unsigned char *)(v2 + v1_Block_object_dispose(&STACK[0x2C0], 8) = 0;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
  uint64_t v22 = &unk_100454000;
  int v74 = a1;
  if (a1 != 6)
  {
    uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer);
    if (v23)
    {
      uint64_t v72 = v5;
      uint64_t v24 = qword_1004537A8;
      swift_retain();
      if (v24 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_100468890;
      swift_retain();
      uint64_t v26 = sub_100203774(v25, v23);
      swift_release();
      uint64_t v27 = (void *)sub_1000BB110(v26);
      swift_bridgeObjectRelease();
      if (v27)
      {
        sub_1001FF6A0();
      }
      if (qword_1004537E0 != -1) {
        swift_once();
      }
      uint64_t v28 = qword_100468A38;
      *uint64_t v13 = qword_100468A38;
      uint64_t v29 = v73;
      v76(v13, v77, v73);
      id v30 = (id)v28;
      LOBYTE(v2_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
      v75(v13, (void *)v29);
      if (v28)
      {
        uint64_t v29 = v23 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_beginAccess();
        sub_10017FB1C(v29);
        swift_endAccess();
        if (qword_1004536B8 == -1)
        {
LABEL_17:
          sub_1000CC674();
          uint64_t v31 = sub_100088F40((uint64_t)&off_10040E240);
          unint64_t v33 = v32;
          sub_100095EF4(0x5F4C4152454E4547, 0xED0000524F525245, 3, 17, v31, v32);
          sub_10006D144(v31, v33);
          int v34 = v72;
          ((void (*)(char *, uint64_t, uint64_t))v72[2])(v8, v29, v4);
          type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
          uint64_t v35 = swift_allocObject();
          ((void (*)(uint64_t, char *, uint64_t))v34[4])(v35 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v8, v4);
          uint64_t v36 = (void *)(v35 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
          *uint64_t v36 = 0xD000000000000011;
          v36[1] = 0x80000001003B0C70;
          sub_1000CC9C8(v35);
          uint64_t v22 = (void *)&unk_100454000;
          swift_release();
          swift_release();
          goto LABEL_18;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once();
      goto LABEL_17;
    }
  }
LABEL_18:
  a1 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode))
  {
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 1)
    {
      unint64_t v9 = &unk_100454000;
      unint64_t v5 = v22;
      if (*(void *)(v2 + v22[246]))
      {
        swift_beginAccess();
        swift_retain();
        sub_1000F5D98();
        swift_endAccess();
        swift_release();
        swift_release();
      }
    }
    else
    {
      if (v74 == 6)
      {
        unint64_t v5 = v22;
        unint64_t v9 = &unk_100454000;
        if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) == 1)
        {
          if (qword_100453650 != -1) {
            swift_once();
          }
          sub_10006B9C0();
        }
      }
      else
      {
        unint64_t v9 = &unk_100454000;
        unint64_t v5 = v22;
        if (qword_100453650 != -1) {
          swift_once();
        }
        sub_10006BC78(v74);
      }
      if (qword_100453650 != -1) {
        swift_once();
      }
      sub_10006C0E0();
      if (qword_1004536B0 != -1) {
        swift_once();
      }
      sub_1000CCF24(893797958, 0xE400000000000000);
      if (qword_1004536D8 != -1) {
        uint64_t v37 = swift_once();
      }
      uint64_t v39 = __chkstk_darwin(v37, v38);
      *(&v71 - 2) = v40;
      *(&v71 - 1) = v2;
      __chkstk_darwin(v39, v41);
      *(&v71 - 2) = (uint64_t)sub_1000A2ADC;
      *(&v71 - 1) = v42;
      uint64_t v44 = v43 + 4;
      os_unfair_lock_lock(v43 + 4);
      sub_10008C114(v45);
      os_unfair_lock_unlock(v44);
    }
  }
  else
  {
    unint64_t v9 = &unk_100454000;
    unint64_t v5 = v22;
  }
  if (qword_100453798 != -1) {
    goto LABEL_56;
  }
LABEL_39:
  uint64_t v46 = qword_100468880;
  uint64_t v47 = qword_100468A38;
  *uint64_t v13 = qword_100468A38;
  uint64_t v48 = v73;
  v76(v13, v77, v73);
  id v49 = (id)v47;
  LOBYTE(v47) = _dispatchPreconditionTest(_:)();
  uint64_t v50 = v75(v13, (void *)v48);
  if ((v47 & 1) == 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  *(unsigned char *)(v46 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 0;
  if (qword_1004536D8 != -1) {
LABEL_58:
  }
    uint64_t v50 = swift_once();
  uint64_t v52 = __chkstk_darwin(v50, v51);
  *(&v71 - 4) = (uint64_t)sub_1000A24C8;
  *(&v71 - 3) = 0;
  *(&v71 - 2) = v53;
  __chkstk_darwin(v52, v54);
  *(&v71 - 2) = (uint64_t)sub_1000A2ABC;
  *(&v71 - 1) = v55;
  uint64_t v57 = v56 + 4;
  os_unfair_lock_lock(v56 + 4);
  sub_100079ACC(v79);
  os_unfair_lock_unlock(v57);
  if ((v79[0] & 0xC000000000000001) != 0) {
    uint64_t v58 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v58 = *(void *)(v79[0] + 16);
  }
  uint64_t v59 = swift_bridgeObjectRelease();
  if (!v58)
  {
    uint64_t v61 = __chkstk_darwin(v59, v60);
    *(&v71 - 4) = (uint64_t)sub_1000A2570;
    *(&v71 - 3) = 0;
    *(&v71 - 2) = v62;
    __chkstk_darwin(v61, v63);
    *(&v71 - 2) = (uint64_t)sub_1000AA878;
    *(&v71 - 1) = v64;
    uint64_t v66 = v65 + 4;
    os_unfair_lock_lock(v65 + 4);
    sub_1000AA804(v79);
    os_unfair_lock_unlock(v66);
    uint64_t v67 = (v79[0] & 0xC000000000000001) != 0 ? __CocoaSet.count.getter() : *(void *)(v79[0] + 16);
    swift_bridgeObjectRelease();
    if (!v67)
    {
      if (qword_1004537A8 != -1) {
        swift_once();
      }
      sub_1001F9B00(0);
    }
  }
  uint64_t v68 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  *(void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = 0;

  *(unsigned char *)(v2 + v9[240]) = 0;
  *(unsigned char *)(v2 + a1) = 0;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s");
  uint64_t v69 = (void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  uint64_t v70 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  *uint64_t v69 = 0;
  v69[1] = 0;
  sub_10008BECC(v70);
  *(void *)(v2 + v5[246]) = 0;
  uint64_t result = swift_release();
  if (v74 != 3) {
    return sub_1000962AC();
  }
  return result;
}

uint64_t sub_100094664(uint64_t a1)
{
  uint64_t v52 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v3 - 8);
  uint64_t v54 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v51 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_28:
    swift_once();
LABEL_13:
    uint64_t v27 = v54;
    uint64_t v28 = sub_10008E55C(v54, (uint64_t)qword_100468A00);
    uint64_t v29 = v53;
    uint64_t v30 = (uint64_t)v51;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v51, v28, v27);
    uint64_t v31 = v52;
    if (*(void *)(v52 + 16) && (unint64_t v32 = sub_1002C09FC(v30), (v33 & 1) != 0))
    {
      int v34 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v32);
      uint64_t v35 = *v34;
      unint64_t v36 = v34[1];
      sub_10006D0EC(*v34, v36);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v27);
      uint64_t v37 = v49;
      uint64_t result = sub_10007D08C(v35, v36, 0, 0, 0);
      if (!v37) {
        return result;
      }
      swift_errorRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v27);
    }
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v39, v40)) {
      goto LABEL_24;
    }
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Failed to read PSM characteristic", v41, 2u);
    goto LABEL_22;
  }
  uint64_t v14 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
  {
    if (!*(void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer)) {
      goto LABEL_25;
    }
    swift_retain();
    swift_retain();
    char v15 = static UUID.== infix(_:_:)();
    swift_release();
    swift_release();
    if ((v15 & 1) == 0) {
      goto LABEL_25;
    }
  }
  uint64_t v49 = v2;
  uint64_t v50 = v1;
  uint64_t v16 = v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  swift_retain_n();
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    void v48[2] = v16;
    os_log_type_t v20 = (uint8_t *)v19;
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v20 = 136315138;
    uint64_t v56 = v21;
    v48[1] = v20 + 4;
    swift_retain();
    uint64_t v22 = UUID.uuidString.getter();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v55 = sub_100290514(v22, v24, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Read characteristics %s", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v25 = v50;
  if (*(unsigned char *)(v50 + v14) != 2
    || (uint64_t v26 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state,
        *(unsigned char *)(v50 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 1))
  {
    if (qword_1004538E8 == -1) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  swift_retain_n();
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v39, v42))
  {
    swift_release_n();
    goto LABEL_24;
  }
  uint64_t v43 = (uint8_t *)swift_slowAlloc();
  uint64_t v44 = swift_slowAlloc();
  *(_DWORD *)uint64_t v43 = 136315138;
  uint64_t v56 = v44;
  LOBYTE(v55) = *(unsigned char *)(v25 + v26);
  uint64_t v45 = String.init<A>(describing:)();
  uint64_t v55 = sub_100290514(v45, v46, &v56);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v39, v42, "Wrong state %s", v43, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_22:
  swift_slowDealloc();
LABEL_24:

  sub_100093B18(2);
LABEL_25:
  sub_10006D098();
  swift_allocError();
  unsigned char *v47 = 2;
  return swift_willThrow();
}

void sub_100094D04(uint64_t a1, NSObject *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      char v15 = (uint8_t *)swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *(_DWORD *)char v15 = 136315138;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      uint64_t v37 = sub_100290514(v16, v17, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to open channel %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100093B18(2);
    swift_errorRelease();
    return;
  }
  uint64_t v18 = v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  swift_retain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v36 = v18;
    v38[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_retain();
    uint64_t v23 = UUID.uuidString.getter();
    unint64_t v25 = v24;
    swift_release();
    uint64_t v37 = sub_100290514(v23, v25, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Channel established %s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (!*(void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
LABEL_18:
    if (qword_1004537A8 == -1)
    {
LABEL_19:
      swift_retain_n();
      uint64_t v27 = (void *)sub_1001FA398(a2, (uint64_t)sub_1000AA148, v3, (uint64_t)sub_1000AA14C, v3, sub_1000AA150, v3, (uint64_t)sub_1000AA154, v3, (uint64_t)sub_1000AA15C, v3, (uint64_t)sub_1000AA160, v3);
      swift_release_n();

      uint64_t v28 = self;
      UUID.uuidString.getter();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10004EE34(v28, v29);

      return;
    }
LABEL_25:
    swift_once();
    goto LABEL_19;
  }
  swift_retain();
  if ((static UUID.== infix(_:_:)() & 1) == 0 || *(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 2)
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }
  uint64_t v26 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 1)
  {
    *(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 2;
    sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
    goto LABEL_17;
  }
  swift_retain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)unint64_t v32 = 136315138;
    v38[0] = v33;
    LOBYTE(v37) = *(unsigned char *)(v3 + v26);
    uint64_t v34 = String.init<A>(describing:)();
    uint64_t v37 = sub_100290514(v34, v35, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Wrong state %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_100093B18(2);
  swift_release();
}

uint64_t sub_100095460(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
    swift_retain();
    if (static UUID.== infix(_:_:)())
    {
      if (qword_100453798 == -1)
      {
LABEL_7:
        unint64_t v14 = qword_100468880;
        swift_retain();
        sub_1001F2ED8(a1, a2, 1, a3, v14, v3);
        swift_release();
        return swift_release();
      }
LABEL_11:
      swift_once();
      goto LABEL_7;
    }
    swift_release();
  }
  uint64_t v16 = sub_100088F40((uint64_t)&off_10040E418);
  unint64_t v18 = v17;
  sub_100095EF4(0x425F454349564544, 0xEB00000000595355, 3, 17, v16, v17);
  return sub_10006D144(v16, v18);
}

void sub_1000956BC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_100468A38;
  void *v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v11 = v4 + 104;
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v12 = v8;
  uint64_t v13 = _dispatchPreconditionTest(_:)();
  uint64_t v16 = *(void (**)(void *, uint64_t))(v4 + 8);
  uint64_t v14 = v4 + 8;
  char v15 = v16;
  v16(v7, v3);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  os_log_type_t v40 = v15;
  uint64_t v42 = v1;
  swift_retain_n();
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v41 = v10;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v39 = v3;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    unsigned int v36 = v9;
    v44[0] = v22;
    uint64_t v37 = v11;
    uint64_t v38 = v14;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_retain();
    uint64_t v23 = UUID.uuidString.getter();
    unint64_t v25 = v24;
    swift_release();
    uint64_t v43 = sub_100290514(v23, v25, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Disconnected %s", v21, 0xCu);
    swift_arrayDestroy();
    uint64_t v9 = v36;
    swift_slowDealloc();
    uint64_t v3 = v39;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v26 = v42;
  swift_beginAccess();
  sub_1000F5D98();
  swift_endAccess();
  swift_release();
  uint64_t v13 = (uint64_t)&OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  if (!*(void *)(v26 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
LABEL_11:
    if (qword_1004537A8 == -1) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
  swift_retain();
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    goto LABEL_11;
  }
  sub_100093B18(2);
  swift_release();
  char v15 = (void (*)(void *, uint64_t))&unk_100468000;
  while (1)
  {
    if (qword_1004537E0 != -1) {
LABEL_18:
    }
      swift_once();
    uint64_t v30 = (void *)*((void *)v15 + 327);
    void *v7 = v30;
    v41(v7, v9, v3);
    id v31 = v30;
    LOBYTE(v3sub_1000A2B9C("Transaction emulation ended", 0) = _dispatchPreconditionTest(_:)();
    v40(v7, v3);
    if (v30) {
      break;
    }
    __break(1u);
LABEL_20:
    swift_once();
LABEL_12:
    uint64_t v27 = qword_100468890;
    swift_retain();
    uint64_t v28 = sub_100203774(v27, a1);
    swift_release();
    NSString v29 = (void *)sub_1000BB110(v28);
    swift_bridgeObjectRelease();
    char v15 = (void (*)(void *, uint64_t))&unk_100468000;
    if (v29)
    {
      sub_1001FF6A0();
    }
  }
  uint64_t v32 = a1 + *(void *)v13;
  swift_beginAccess();
  sub_10017FB1C(v32);
  swift_endAccess();
  uint64_t v33 = self;
  UUID.uuidString.getter();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004EF10(v33, v34);
}

void sub_100095BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_8;
  }
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = a1;
    uint64_t v24 = v17;
    *(_DWORD *)uint64_t v16 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2048;
    uint64_t v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2048;
    uint64_t v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 32) = 2080;
    swift_retain();
    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v20 = v19;
    swift_release();
    uint64_t v23 = sub_100290514(v18, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Time sync event type %ld ticks %llu counter %llu peer %s", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (qword_1004537E0 != -1) {
    goto LABEL_10;
  }
LABEL_8:
  sub_10020C608(a1, v21, v22, a4);
}

uint64_t sub_100095EF4(uint64_t a1, unint64_t a2, char a3, char a4, uint64_t a5, unint64_t a6)
{
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v18 = a5;
    char v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)char v13 = 136315138;
    swift_bridgeObjectRetain();
    sub_100290514(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Sending %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v18;
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (qword_100453798 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_1001F28F8(a3, a4, a5, a6);
  unint64_t v16 = v15;
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  sub_1000CB6FC(v14, v16);
  sub_10006D144(v14, v16);
  return 1;
}

uint64_t sub_1000962AC()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint8_t **)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_100468A38;
  void *v7 = qword_100468A38;
  unsigned int v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = *(void (**)(void *, void, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = v8;
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  char v13 = *(void (**)(void *, uint64_t))(v4 + 8);
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v13)(v7, v3);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once();
    goto LABEL_11;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state)) {
    return result;
  }
  uint64_t v15 = v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches;
  uint64_t v61 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  swift_beginAccess();
  uint64_t v62 = v13;
  uint64_t v59 = v15;
  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v1 = 0;
  uint64_t v12 = sub_1000923AC(v16);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v12) {
    return result;
  }
  uint64_t v56 = v10;
  uint64_t v17 = v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  swift_retain_n();
  uint64_t v58 = v17;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  int v20 = v19;
  BOOL v21 = os_log_type_enabled(v18, v19);
  uint64_t v63 = v12;
  unsigned int v57 = v9;
  if (v21)
  {
    LODWORD(v6sub_1000A2B9C("Transaction emulation ended", 0) = v20;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v55 = v23;
    *(_DWORD *)uint64_t v22 = 136315138;
    v65[0] = v23;
    uint64_t v53 = v22 + 4;
    uint64_t v54 = v22;
    type metadata accessor for UUID();
    sub_1000A98B0((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v1 = 0;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_100290514(v24, v25, v65);
    uint64_t v12 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v60, "Processing First Approach for %s", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v26 = qword_1004536D8;
  swift_retain();
  if (v26 != -1) {
    goto LABEL_29;
  }
LABEL_11:
  uint64_t v27 = (uint8_t *)off_100455CB0;
  uint64_t v28 = swift_allocObject();
  uint64_t v60 = &v53;
  *(void *)(v28 + 16) = sub_1000A9780;
  *(void *)(v28 + 24) = v12;
  uint64_t v30 = __chkstk_darwin(v28, v29);
  *(&v53 - 4) = (uint8_t *)sub_1000A97C0;
  *(&v53 - 3) = (uint8_t *)v30;
  *(&v53 - 2) = v27;
  __chkstk_darwin(v30, v31);
  *(&v53 - 2) = (uint8_t *)sub_1000AA878;
  *(&v53 - 1) = v32;
  NSString v34 = v33 + 4;
  swift_retain();
  os_unfair_lock_lock(v34);
  sub_1000AA804(v65);
  os_unfair_lock_unlock(v34);
  uint64_t v35 = v65[0];
  swift_release();
  swift_release();
  unsigned int v36 = (void *)sub_1000BB0E4(v35);
  swift_bridgeObjectRelease();
  if (!v36)
  {
    unint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to retrieve endpoint", v48, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    uint64_t v49 = v63;
    sub_1000F5D98();
    swift_endAccess();
    swift_release();
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    uint64_t v50 = qword_100468890;
    swift_retain();
    uint64_t v51 = sub_100203774(v50, v49);
    swift_release();
    uint64_t v52 = (void *)sub_1000BB110(v51);
    swift_bridgeObjectRelease();
    if (v52)
    {
      sub_1001FF6A0();
    }
    return swift_release();
  }
  *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) = 1;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s");
  *(unsigned char *)(v2 + v61) = 5;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
  *(void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = v12;
  swift_retain();
  swift_release();
  uint64_t v37 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  *(void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = v36;
  id v38 = v36;

  if (qword_100453798 != -1) {
    swift_once();
  }
  uint64_t v39 = qword_100468880;
  uint64_t v40 = qword_100468A38;
  void *v7 = qword_100468A38;
  v56(v7, v57, v3);
  id v41 = (id)v40;
  LOBYTE(v4sub_1000A2B9C("Transaction emulation ended", 0) = _dispatchPreconditionTest(_:)();
  v62(v7, v3);
  if (v40)
  {
    *(unsigned char *)(v39 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 1;
    uint64_t v39 = v63;
    if (qword_1004536B8 == -1) {
      goto LABEL_16;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_16:
  type metadata accessor for DSKBLEPairing.BLEPairingRequest();
  uint64_t v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_100378280;
  *(void *)(v42 + 32) = v39;
  *(void *)(v42 + 4sub_1000A2B9C("Transaction emulation ended", 0) = &off_10040E200;
  *(void *)(v42 + 4_Block_object_dispose(&STACK[0x2C0], 8) = sub_1000AA890;
  *(void *)(v42 + 56) = v2;
  *(void *)(v42 + 64) = sub_1000AA7CC;
  *(void *)(v42 + 72) = v2;
  swift_retain_n();
  swift_retain();
  sub_1000CD37C(v42);
  swift_release();
  if (!v1)
  {

    return swift_release();
  }
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to pair", v45, 2u);
    swift_slowDealloc();
  }

  sub_100093B18(2);
  swift_release();
  return swift_errorRelease();
}

void sub_100096B04()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100453650 != -1) {
LABEL_7:
  }
    swift_once();
  sub_10006C0E0();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) = 0;
  unsigned int v9 = (void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
  *unsigned int v9 = 0;
  v9[1] = 0;
  sub_10008BECC(v10);
  id v11 = (void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_activeFirstApproaches);
  swift_beginAccess();
  *id v11 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess();
  *uint64_t v12 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  char v13 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint) = 0;

  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) = 0;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_mode, (uint64_t)&type metadata for AlishaPairing.Mode, "New pairing mode %s");
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = 0;
  swift_release();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 0;
  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
}

uint64_t sub_100096D7C(void *a1, uint64_t a2)
{
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  id v4 = [a1 publicKeyIdentifier];
  uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v7 = v6;

  uint64_t v8 = a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v10 = *(void *)(v8 + 8);
  if (v10 >> 60 == 15)
  {
    sub_100075868(v5, v7);
    sub_100075868(v9, v10);
    return 0;
  }
  sub_10006D0EC(v5, v7);
  sub_1000758F4(v9, v10);
  char v12 = sub_100088AE4(v5, v7, v9, v10);
  sub_100075868(v9, v10);
  sub_10006D144(v5, v7);
  sub_10006D144(v5, v7);
  return v12 & 1;
}

void sub_100096E88(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (unint64_t *)((char *)&v164 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_100468A38;
  *uint64_t v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  uint64_t v19 = _dispatchPreconditionTest(_:)();
  BOOL v21 = *(void (**)(void *, uint64_t))(v13 + 8);
  id v20 = (id)(v13 + 8);
  v21(v16, v12);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_52:
    LODWORD(v73) = HIDWORD(v181) - v181;
    if (!__OFSUB__(HIDWORD(v181), v181))
    {
      uint64_t v73 = (int)v73;
LABEL_55:
      if (v73 == 16)
      {
        uint64_t v179 = v19;
        uint64_t v177 = sub_1001247A8(8);
        unint64_t v178 = v76;
        uint64_t v175 = sub_1001247A8(8);
        unint64_t v176 = v77;
        id v172 = v20;
        unint64_t v186 = v6;
        uint64_t v169 = a3;
        unint64_t v171 = a1;
        unint64_t v170 = a2;
        uint64_t v174 = sub_1000A5B7C(0, a3, a1, v179, a2, v177, v178, 4);
        uint64_t v173 = v81;
        a3 = 0;
        unint64_t v6 = v80;
        uint64_t v31 = (void *)(v80 >> 62);
        a2 = v82;
        unint64_t v168 = v82 >> 62;
        switch(v80 >> 62)
        {
          case 1uLL:
            goto LABEL_71;
          case 2uLL:
            uint64_t v85 = *(void *)(v174 + 16);
            uint64_t v84 = *(void *)(v174 + 24);
            BOOL v48 = __OFSUB__(v84, v85);
            uint64_t v83 = v84 - v85;
            if (!v48) {
              goto LABEL_74;
            }
            goto LABEL_149;
          case 3uLL:
            goto LABEL_87;
          default:
            uint64_t v83 = BYTE6(v80);
            goto LABEL_74;
        }
      }
LABEL_57:
      sub_10006D144(v181, (unint64_t)v16);
      goto LABEL_58;
    }
    __break(1u);
LABEL_121:
    __break(1u);
    goto LABEL_122;
  }
  uint64_t v184 = a3;
  unint64_t v22 = v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  a3 = v24;
  BOOL v25 = os_log_type_enabled(v23, v24);
  unint64_t v185 = a4;
  if (v25)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    unint64_t v188 = a1;
    uint64_t v191 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    unint64_t v186 = v6;
    uint64_t v187 = v22;
    swift_retain();
    uint64_t v28 = UUID.uuidString.getter();
    unint64_t v30 = v29;
    swift_release();
    uint64_t v189 = sub_100290514(v28, v30, &v191);
    unint64_t v6 = v186;
    unint64_t v22 = v187;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)a3, "Pairing started %s", v26, 0xCu);
    swift_arrayDestroy();
    a1 = v188;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (*(void *)(v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
    LODWORD(v31) = a5 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    swift_retain();
    if (static UUID.== infix(_:_:)())
    {
      a4 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
      if (*(unsigned char *)(v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) != 5)
      {
        swift_retain_n();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          id v41 = (uint8_t *)swift_slowAlloc();
          uint64_t v42 = swift_slowAlloc();
          *(_DWORD *)id v41 = 136315138;
          uint64_t v191 = v42;
          LOBYTE(v189) = *(unsigned char *)(v6 + a4);
          uint64_t v43 = String.init<A>(describing:)();
          uint64_t v189 = sub_100290514(v43, v44, &v191);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Wrong state %s", v41, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        uint64_t v45 = 2;
        goto LABEL_66;
      }
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v32) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1))
          {
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            LODWORD(v83) = HIDWORD(v174) - v174;
            if (__OFSUB__(HIDWORD(v174), v174))
            {
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              LODWORD(v143) = HIDWORD(v165) - v165;
              if (!__OFSUB__(HIDWORD(v165), v165))
              {
                uint64_t v143 = (int)v143;
LABEL_153:
                if (v143 == 4)
                {
                  type metadata accessor for __DataStorage();
                  swift_allocObject();
                  uint64_t v146 = __DataStorage.init(capacity:)();
                  uint64_t v189 = 0;
                  unint64_t v190 = v146 | 0x4000000000000000;
                  unint64_t v147 = v6;
                  Data.append(_:)();
                  uint64_t v148 = v177;
                  Data.append(_:)();
                  unint64_t v164 = a2;
                  Data.append(_:)();
                  Data.append(_:)();
                  Data.append(_:)();
                  uint64_t v149 = v165;
                  Data.append(_:)();
                  *(unsigned char *)(v186 + a4) = 6;
                  sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
                  uint64_t v150 = v189;
                  unint64_t v151 = v190;
                  sub_10006D0EC(v189, v190);
                  sub_100095EF4(0xD000000000000011, 0x80000001003B2740, 5, 14, v150, v151);

                  sub_10006D144(v169, v171);
                  sub_10006D144(v179, v170);
                  sub_10006D144(v181, v180);
                  sub_10006D144(v148, v178);
                  sub_10006D144(v150, v151);
                  sub_10006D144(v184, v185);
                  sub_10006D144(v167, v168);
                  sub_10006D144(v175, v176);
                  swift_release();
                  sub_10006D144(v149, v182);
                  sub_10006D144(v166, v183);
                  sub_10006D144(v173, v164);
                  sub_10006D144(v174, v147);
                  uint64_t v152 = v150;
                  unint64_t v153 = v151;
LABEL_170:
                  sub_10006D144(v152, v153);
                  sub_10006D144(a1, v188);
                  return;
                }
LABEL_155:
                sub_10006D0EC(v166, v183);
                sub_10006D0EC(v165, v182);
                os_log_type_t v154 = Logger.logObject.getter();
                os_log_type_t v155 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v154, v155))
                {
                  uint64_t v156 = (_DWORD *)swift_slowAlloc();
                  *uint64_t v156 = 134218752;
                  int v157 = v156;
                  uint64_t v158 = 0;
                  switch((int)v31)
                  {
                    case 0:
                      uint64_t v158 = BYTE6(v183);
                      goto LABEL_162;
                    case 1:
                      LODWORD(v15_Block_object_dispose(&STACK[0x2C0], 8) = HIDWORD(v166) - v166;
                      if (__OFSUB__(HIDWORD(v166), v166)) {
                        goto LABEL_189;
                      }
                      uint64_t v158 = (int)v158;
LABEL_162:
                      uint64_t v189 = v158;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      sub_10006D144(v166, v183);
                      *((_WORD *)v157 + 6) = 2048;
                      uint64_t v189 = 38;
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      *((_WORD *)v157 + 11) = 2048;
                      uint64_t v161 = 0;
                      switch((int)a3)
                      {
                        case 1:
                          LODWORD(v161) = HIDWORD(v165) - v165;
                          if (__OFSUB__(HIDWORD(v165), v165)) {
                            goto LABEL_191;
                          }
                          uint64_t v161 = (int)v161;
LABEL_167:
                          uint64_t v189 = v161;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          sub_10006D144(v165, v182);
                          *((_WORD *)v157 + 16) = 2048;
                          uint64_t v189 = 4;
                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                          _os_log_impl((void *)&_mh_execute_header, v154, v155, "Invalid E2_Payload %ld != %ld or Tag2 %ld != %ld", (uint8_t *)v157, 0x2Au);
                          swift_slowDealloc();

                          break;
                        case 2:
                          uint64_t v163 = *(void *)(v165 + 16);
                          uint64_t v162 = *(void *)(v165 + 24);
                          BOOL v48 = __OFSUB__(v162, v163);
                          uint64_t v161 = v162 - v163;
                          if (!v48) {
                            goto LABEL_167;
                          }
                          goto LABEL_192;
                        case 3:
                          goto LABEL_167;
                        default:
                          uint64_t v161 = BYTE6(v182);
                          goto LABEL_167;
                      }
                      break;
                    case 2:
                      uint64_t v160 = *(void *)(v166 + 16);
                      uint64_t v159 = *(void *)(v166 + 24);
                      BOOL v48 = __OFSUB__(v159, v160);
                      uint64_t v158 = v159 - v160;
                      if (!v48) {
                        goto LABEL_162;
                      }
                      goto LABEL_190;
                    case 3:
                      goto LABEL_162;
                    default:
                      goto LABEL_195;
                  }
                }
                else
                {

                  sub_10006D144(v166, v183);
                  sub_10006D144(v165, v182);
                }
                sub_100093B18(1);

                sub_10006D144(v169, v171);
                sub_10006D144(v179, v170);
                sub_10006D144(v181, v180);
                sub_10006D144(v177, v178);
                sub_10006D144(v184, v185);
                sub_10006D144(v167, v168);
                sub_10006D144(v175, v176);
                swift_release();
                sub_10006D144(v165, v182);
                sub_10006D144(v166, v183);
LABEL_169:
                sub_10006D144(v173, a2);
                uint64_t v152 = v174;
                unint64_t v153 = v6;
                goto LABEL_170;
              }
LABEL_193:
              __break(1u);
LABEL_194:
              __break(1u);
              JUMPOUT(0x1000988B4);
            }
            uint64_t v83 = (int)v83;
LABEL_74:
            if (v83 == 8)
            {
              switch(v168)
              {
                case 1uLL:
                  goto LABEL_81;
                case 2uLL:
                  uint64_t v88 = *(void *)(v173 + 16);
                  uint64_t v87 = *(void *)(v173 + 24);
                  BOOL v48 = __OFSUB__(v87, v88);
                  uint64_t v86 = v87 - v88;
                  if (!v48) {
                    goto LABEL_84;
                  }
                  goto LABEL_176;
                case 3uLL:
                  break;
                default:
                  uint64_t v86 = BYTE6(a2);
                  goto LABEL_84;
              }
            }
          }
          else
          {
            uint64_t v32 = (int)v32;
LABEL_24:
            if (v32 == 6)
            {
              uint64_t v49 = *(void **)(v6 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
              if (!v49)
              {
LABEL_61:
                uint64_t v53 = Logger.logObject.getter();
                os_log_type_t v78 = static os_log_type_t.error.getter();
                if (!os_log_type_enabled(v53, v78))
                {
LABEL_64:

                  goto LABEL_65;
                }
                unint64_t v79 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v79 = 0;
                _os_log_impl((void *)&_mh_execute_header, v53, v78, "Wrong parameters for pairing", v79, 2u);
LABEL_63:
                swift_slowDealloc();
                goto LABEL_64;
              }
              unint64_t v183 = a2 >> 62;
              id v20 = v49;
              id v50 = [v20 bleDCKIdentifier];
              if (!v50)
              {
LABEL_60:

                goto LABEL_61;
              }
              uint64_t v31 = v50;
              unint64_t v188 = a1;
              unint64_t v182 = a2;
              a3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              a1 = v51;

              switch(a1 >> 62)
              {
                case 1uLL:
                  LODWORD(v52) = HIDWORD(a3) - a3;
                  if (__OFSUB__(HIDWORD(a3), a3)) {
                    goto LABEL_79;
                  }
                  uint64_t v52 = (int)v52;
LABEL_40:
                  if (v52 != 8) {
                    goto LABEL_59;
                  }
                  id v61 = [v20 bleIntroKey];
                  if (!v61) {
                    goto LABEL_59;
                  }
                  break;
                case 2uLL:
                  uint64_t v60 = *(void *)(a3 + 16);
                  uint64_t v59 = *(void *)(a3 + 24);
                  BOOL v48 = __OFSUB__(v59, v60);
                  uint64_t v52 = v59 - v60;
                  if (!v48) {
                    goto LABEL_40;
                  }
                  goto LABEL_80;
                case 3uLL:
                  goto LABEL_59;
                default:
                  uint64_t v52 = BYTE6(a1);
                  goto LABEL_40;
              }
              uint64_t v62 = v61;
              uint64_t v187 = v22;
              uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v64 = v63;

              a2 = v64;
              switch(v64 >> 62)
              {
                case 1uLL:
                  LODWORD(v66) = HIDWORD(v19) - v19;
                  if (!__OFSUB__(HIDWORD(v19), v19))
                  {
                    uint64_t v66 = (int)v66;
LABEL_47:
                    if (v66 == 16)
                    {
                      id v69 = [v20 bleOOBKey];
                      if (v69)
                      {
                        uint64_t v70 = v69;
                        uint64_t v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                        unint64_t v180 = v72;
                        uint64_t v181 = v71;

                        uint64_t v16 = (void *)v180;
                        switch(v180 >> 62)
                        {
                          case 1uLL:
                            goto LABEL_52;
                          case 2uLL:
                            uint64_t v75 = *(void *)(v181 + 16);
                            uint64_t v74 = *(void *)(v181 + 24);
                            BOOL v48 = __OFSUB__(v74, v75);
                            uint64_t v73 = v74 - v75;
                            if (!v48) {
                              goto LABEL_55;
                            }
                            goto LABEL_121;
                          case 3uLL:
                            goto LABEL_57;
                          default:
                            uint64_t v73 = BYTE6(v180);
                            goto LABEL_55;
                        }
                      }
                    }
LABEL_58:
                    sub_10006D144(v19, a2);
LABEL_59:
                    sub_10006D144(a3, a1);
                    goto LABEL_60;
                  }
                  __break(1u);
LABEL_107:
                  __break(1u);
LABEL_108:
                  if (v65 != 114) {
                    goto LABEL_115;
                  }
                  uint64_t v106 = v184;
                  unint64_t v105 = v185;
                  sub_10006D0EC(v184, v185);
                  char v107 = sub_10007D4A4(v106, v105, 17, 0, 0);
                  if (a3)
                  {
LABEL_105:
                    swift_errorRelease();
                  }
                  else if (v107 == 99)
                  {
                    uint64_t v167 = Data.subdata(in:)();
                    unint64_t v168 = v108;
                    uint64_t v184 = Data.subdata(in:)();
                    unint64_t v185 = v109;
                    if (v183)
                    {
                      if (v183 == 1)
                      {
                        LODWORD(v11sub_1000A2B9C("Transaction emulation ended", 0) = HIDWORD(v188) - v188;
                        if (!__OFSUB__(HIDWORD(v188), v188))
                        {
                          uint64_t v110 = (int)v110;
                          goto LABEL_124;
                        }
                        goto LABEL_181;
                      }
                      uint64_t v124 = *(void *)(v188 + 16);
                      uint64_t v123 = *(void *)(v188 + 24);
                      BOOL v48 = __OFSUB__(v123, v124);
                      uint64_t v110 = v123 - v124;
                      if (v48) {
                        goto LABEL_182;
                      }
LABEL_124:
                      uint64_t v125 = 0;
                      switch(v185 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v125) = HIDWORD(v184) - v184;
                          if (__OFSUB__(HIDWORD(v184), v184)) {
                            goto LABEL_183;
                          }
                          uint64_t v125 = (int)v125;
LABEL_129:
                          BOOL v48 = __OFADD__(v110, v125);
                          uint64_t v128 = v110 + v125;
                          if (v48) {
                            goto LABEL_179;
                          }
                          uint64_t v129 = 0;
                          switch(v168 >> 62)
                          {
                            case 1uLL:
                              LODWORD(v129) = HIDWORD(v167) - v167;
                              if (__OFSUB__(HIDWORD(v167), v167)) {
                                goto LABEL_185;
                              }
                              uint64_t v129 = (int)v129;
LABEL_135:
                              if (__OFADD__(v128, v129)) {
                                goto LABEL_180;
                              }
                              uint64_t v191 = sub_100089000(v128 + v129);
                              unint64_t v192 = v132;
                              Data.append(_:)();
                              Data.append(_:)();
                              Data.append(_:)();
                              a1 = v191;
                              unint64_t v133 = v192;
                              sub_10006D0EC(v191, v192);
                              unint64_t v188 = v133;
                              uint64_t v166 = sub_1000A5B7C(0, a1, v133, v181, v180, v175, v176, 4);
                              unint64_t v183 = (unint64_t)v134;
                              uint64_t v165 = v135;
                              unint64_t v182 = v136;
                              if (a3)
                              {
                                swift_errorRelease();
                                sub_10006D144(a1, v188);
                                uint64_t v137 = Logger.logObject.getter();
                                os_log_type_t v138 = static os_log_type_t.error.getter();
                                if (os_log_type_enabled(v137, v138))
                                {
                                  os_log_type_t v139 = (uint8_t *)swift_slowAlloc();
                                  *(_WORD *)os_log_type_t v139 = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v137, v138, "Failed to encrypt BTAddrA || Ca || ra", v139, 2u);
                                  swift_slowDealloc();
                                }

                                sub_100093B18(1);
                                sub_10006D144(v169, v171);
                                sub_10006D144(v179, v170);
                                sub_10006D144(v181, v180);
                                sub_10006D144(v177, v178);
                                sub_10006D144(v184, v185);
                                sub_10006D144(v167, v168);
                                sub_10006D144(v175, v176);
                                swift_release();
                                goto LABEL_169;
                              }
                              sub_10006D144(a1, v188);
                              uint64_t v31 = (void *)(v183 >> 62);
                              a3 = v182 >> 62;
                              switch(v183 >> 62)
                              {
                                case 1uLL:
                                  LODWORD(v14sub_1000A2B9C("Transaction emulation ended", 0) = HIDWORD(v166) - v166;
                                  if (__OFSUB__(HIDWORD(v166), v166)) {
                                    goto LABEL_187;
                                  }
                                  uint64_t v140 = (int)v140;
LABEL_145:
                                  if (v140 == 38)
                                  {
                                    switch(a3)
                                    {
                                      case 1:
                                        goto LABEL_150;
                                      case 2:
                                        uint64_t v145 = *(void *)(v165 + 16);
                                        uint64_t v144 = *(void *)(v165 + 24);
                                        BOOL v48 = __OFSUB__(v144, v145);
                                        uint64_t v143 = v144 - v145;
                                        if (!v48) {
                                          goto LABEL_153;
                                        }
                                        goto LABEL_194;
                                      case 3:
                                        goto LABEL_155;
                                      default:
                                        uint64_t v143 = BYTE6(v182);
                                        goto LABEL_153;
                                    }
                                  }
                                  break;
                                case 2uLL:
                                  uint64_t v142 = *(void *)(v166 + 16);
                                  uint64_t v141 = *(void *)(v166 + 24);
                                  BOOL v48 = __OFSUB__(v141, v142);
                                  uint64_t v140 = v141 - v142;
                                  if (!v48) {
                                    goto LABEL_145;
                                  }
                                  goto LABEL_188;
                                case 3uLL:
                                  goto LABEL_155;
                                default:
                                  uint64_t v140 = BYTE6(v183);
                                  goto LABEL_145;
                              }
                              break;
                            case 2uLL:
                              uint64_t v131 = *(void *)(v167 + 16);
                              uint64_t v130 = *(void *)(v167 + 24);
                              BOOL v48 = __OFSUB__(v130, v131);
                              uint64_t v129 = v130 - v131;
                              if (!v48) {
                                goto LABEL_135;
                              }
                              goto LABEL_186;
                            case 3uLL:
                              goto LABEL_135;
                            default:
                              uint64_t v129 = BYTE6(v168);
                              goto LABEL_135;
                          }
                          break;
                        case 2uLL:
                          uint64_t v127 = *(void *)(v184 + 16);
                          uint64_t v126 = *(void *)(v184 + 24);
                          BOOL v48 = __OFSUB__(v126, v127);
                          uint64_t v125 = v126 - v127;
                          if (!v48) {
                            goto LABEL_129;
                          }
                          goto LABEL_184;
                        case 3uLL:
                          goto LABEL_129;
                        default:
                          uint64_t v125 = BYTE6(v185);
                          goto LABEL_129;
                      }
                      goto LABEL_155;
                    }
LABEL_122:
                    uint64_t v110 = BYTE6(v182);
                    goto LABEL_124;
                  }
LABEL_115:
                  uint64_t v112 = v184;
                  unint64_t v111 = v185;
                  sub_10006D0EC(v184, v185);
                  sub_10006D0EC(v112, v111);
                  uint64_t v113 = Logger.logObject.getter();
                  os_log_type_t v114 = static os_log_type_t.error.getter();
                  LODWORD(v18_Block_object_dispose(&STACK[0x2C0], 8) = v114;
                  if (os_log_type_enabled(v113, v114))
                  {
                    uint64_t v115 = (uint8_t *)swift_slowAlloc();
                    uint64_t v187 = swift_slowAlloc();
                    uint64_t v191 = v187;
                    *(_DWORD *)uint64_t v115 = 136315138;
                    unint64_t v182 = (unint64_t)(v115 + 4);
                    unint64_t v183 = (unint64_t)v115;
                    uint64_t v116 = v184;
                    unint64_t v117 = v185;
                    uint64_t v189 = (uint64_t)sub_10023CDF4(v184, v185);
                    sub_10006C51C((uint64_t *)&unk_100455EA0);
                    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                    uint64_t v118 = BidirectionalCollection<>.joined(separator:)();
                    unint64_t v120 = v119;
                    swift_bridgeObjectRelease();
                    uint64_t v189 = sub_100290514(v118, v120, &v191);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    swift_bridgeObjectRelease();
                    sub_10006D144(v116, v117);
                    sub_10006D144(v116, v117);
                    _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v188, "Invalid OOB data %s", (uint8_t *)v183, 0xCu);
                    swift_arrayDestroy();
                    swift_slowDealloc();
                    swift_slowDealloc();
                  }
                  else
                  {

                    uint64_t v122 = v184;
                    unint64_t v121 = v185;
                    sub_10006D144(v184, v185);
                    sub_10006D144(v122, v121);
                  }
                  uint64_t v95 = 5;
                  break;
                case 2uLL:
                  uint64_t v68 = *(void *)(v19 + 16);
                  uint64_t v67 = *(void *)(v19 + 24);
                  BOOL v48 = __OFSUB__(v67, v68);
                  uint64_t v66 = v67 - v68;
                  if (!v48) {
                    goto LABEL_47;
                  }
                  goto LABEL_107;
                case 3uLL:
                  goto LABEL_58;
                default:
                  uint64_t v66 = BYTE6(v64);
                  goto LABEL_47;
              }
LABEL_119:
              sub_100093B18(v95);
              sub_10006D144(v173, a2);
              sub_10006D144(v174, v6);
              sub_10006D144(v175, v176);
              sub_10006D144(v177, v178);
              sub_10006D144(v181, v180);
              sub_10006D144(v179, v170);
              sub_10006D144(v169, v171);
              swift_release();

              return;
            }
LABEL_29:
            sub_10006D0EC(a1, a2);
            uint64_t v53 = Logger.logObject.getter();
            LODWORD(v31) = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v53, (os_log_type_t)v31))
            {

              sub_10006D144(a1, a2);
LABEL_65:
              uint64_t v45 = 5;
LABEL_66:
              sub_100093B18(v45);
              swift_release();
              return;
            }
            a3 = a1;
            uint64_t v54 = (_DWORD *)swift_slowAlloc();
            _DWORD *v54 = 134218240;
            uint64_t v55 = v54;
            uint64_t v56 = 0;
            switch(a2 >> 62)
            {
              case 0uLL:
                uint64_t v56 = BYTE6(a2);
                goto LABEL_36;
              case 1uLL:
                LODWORD(v56) = HIDWORD(a3) - a3;
                if (!__OFSUB__(HIDWORD(a3), a3))
                {
                  uint64_t v56 = (int)v56;
LABEL_36:
                  uint64_t v191 = v56;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  sub_10006D144(a3, a2);
                  *((_WORD *)v55 + 6) = 2048;
                  uint64_t v191 = 6;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v31, "Invalid BTAddrA %ld != %ld", (uint8_t *)v55, 0x16u);
                  goto LABEL_63;
                }
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                LODWORD(v86) = HIDWORD(v173) - v173;
                if (__OFSUB__(HIDWORD(v173), v173)) {
                  goto LABEL_175;
                }
                uint64_t v86 = (int)v86;
LABEL_84:
                if (v86 == 4)
                {
                  switch(v185 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v89) = HIDWORD(v184) - v184;
                      if (__OFSUB__(HIDWORD(v184), v184)) {
                        goto LABEL_177;
                      }
                      uint64_t v89 = (int)v89;
LABEL_103:
                      if (v89 < 34) {
                        goto LABEL_115;
                      }
                      uint64_t v104 = v184;
                      unint64_t v103 = v185;
                      sub_10006D0EC(v184, v185);
                      char v65 = sub_10007D4A4(v104, v103, 0, 0, 0);
                      if (a3) {
                        goto LABEL_105;
                      }
                      goto LABEL_108;
                    case 2uLL:
                      uint64_t v102 = *(void *)(v184 + 16);
                      uint64_t v101 = *(void *)(v184 + 24);
                      BOOL v48 = __OFSUB__(v101, v102);
                      uint64_t v89 = v101 - v102;
                      if (!v48) {
                        goto LABEL_103;
                      }
                      goto LABEL_178;
                    case 3uLL:
                      goto LABEL_115;
                    default:
                      uint64_t v89 = BYTE6(v185);
                      goto LABEL_103;
                  }
                }
                break;
              case 2uLL:
                uint64_t v58 = *(void *)(a3 + 16);
                uint64_t v57 = *(void *)(a3 + 24);
                BOOL v48 = __OFSUB__(v57, v58);
                uint64_t v56 = v57 - v58;
                if (!v48) {
                  goto LABEL_36;
                }
                goto LABEL_78;
              case 3uLL:
                goto LABEL_36;
              default:
LABEL_195:
                JUMPOUT(0);
            }
          }
LABEL_87:
          sub_10006D0EC(v174, v6);
          sub_10006D0EC(v173, a2);
          uint64_t v90 = Logger.logObject.getter();
          os_log_type_t v91 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v90, v91))
          {
            int64_t v92 = (_DWORD *)swift_slowAlloc();
            *int64_t v92 = 134218752;
            uint64_t v93 = v92;
            uint64_t v94 = 0;
            switch((int)v31)
            {
              case 0:
                uint64_t v94 = BYTE6(v6);
                goto LABEL_94;
              case 1:
                LODWORD(v94) = HIDWORD(v174) - v174;
                if (__OFSUB__(HIDWORD(v174), v174))
                {
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  __break(1u);
LABEL_190:
                  __break(1u);
LABEL_191:
                  __break(1u);
LABEL_192:
                  __break(1u);
                  goto LABEL_193;
                }
                uint64_t v94 = (int)v94;
LABEL_94:
                uint64_t v191 = v94;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                sub_10006D144(v174, v6);
                *((_WORD *)v93 + 6) = 2048;
                uint64_t v191 = 8;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                *((_WORD *)v93 + 11) = 2048;
                uint64_t v98 = 0;
                switch((int)v168)
                {
                  case 1:
                    LODWORD(v9_Block_object_dispose(&STACK[0x2C0], 8) = HIDWORD(v173) - v173;
                    if (__OFSUB__(HIDWORD(v173), v173)) {
                      goto LABEL_173;
                    }
                    uint64_t v98 = (int)v98;
LABEL_99:
                    uint64_t v191 = v98;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    sub_10006D144(v173, a2);
                    *((_WORD *)v93 + 16) = 2048;
                    uint64_t v191 = 4;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    _os_log_impl((void *)&_mh_execute_header, v90, v91, "Invalid E1_Payload %ld != %ld or Tag1 %ld != %ld", (uint8_t *)v93, 0x2Au);
                    swift_slowDealloc();

                    uint64_t v95 = 1;
                    break;
                  case 2:
                    uint64_t v100 = *(void *)(v173 + 16);
                    uint64_t v99 = *(void *)(v173 + 24);
                    BOOL v48 = __OFSUB__(v99, v100);
                    uint64_t v98 = v99 - v100;
                    if (!v48) {
                      goto LABEL_99;
                    }
                    goto LABEL_174;
                  case 3:
                    goto LABEL_99;
                  default:
                    uint64_t v98 = BYTE6(a2);
                    goto LABEL_99;
                }
                break;
              case 2:
                uint64_t v97 = *(void *)(v174 + 16);
                uint64_t v96 = *(void *)(v174 + 24);
                BOOL v48 = __OFSUB__(v96, v97);
                uint64_t v94 = v96 - v97;
                if (!v48) {
                  goto LABEL_94;
                }
                goto LABEL_172;
              case 3:
                goto LABEL_94;
              default:
                goto LABEL_195;
            }
          }
          else
          {

            sub_10006D144(v174, v6);
            sub_10006D144(v173, a2);
            uint64_t v95 = 1;
          }
          goto LABEL_119;
        case 2uLL:
          uint64_t v47 = *(void *)(a1 + 16);
          uint64_t v46 = *(void *)(a1 + 24);
          BOOL v48 = __OFSUB__(v46, v47);
          uint64_t v32 = v46 - v47;
          if (!v48) {
            goto LABEL_24;
          }
          goto LABEL_70;
        case 3uLL:
          goto LABEL_29;
        default:
          uint64_t v32 = BYTE6(a2);
          goto LABEL_24;
      }
    }
    swift_release();
  }
  swift_retain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v191 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 136315138;
    swift_retain();
    uint64_t v36 = UUID.uuidString.getter();
    unint64_t v38 = v37;
    swift_release();
    uint64_t v189 = sub_100290514(v36, v38, &v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Wrong peer %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

void sub_1000989B4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v116 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  os_log_type_t v114 = (char *)&v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for DispatchQoS();
  uint64_t v113 = *(void *)(v115 - 8);
  __chkstk_darwin(v115, v11);
  uint64_t v112 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (uint64_t *)((char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v18 = qword_100468A38;
  void *v17 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = (id)v18;
  LOBYTE(v1_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v14 + 8))(v17, v13);
  if (v18)
  {
    uint64_t v111 = v8;
    uint64_t v20 = v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    BOOL v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v117 = v20;
      uint64_t v118 = v5;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v126 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_retain();
      uint64_t v24 = UUID.uuidString.getter();
      unint64_t v26 = v25;
      swift_release();
      unint64_t aBlock = sub_100290514(v24, v26, (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      unint64_t v27 = 0xE000000000000000;
      if (a1)
      {
        unint64_t aBlock = 0;
        unint64_t v121 = 0xE000000000000000;
        v28._countAndFlagsBits = 0x7272652068746977;
        v28._object = (void *)0xEB0000000020726FLL;
        String.append(_:)(v28);
        uint64_t v119 = a1;
        sub_10006C51C((uint64_t *)&unk_10045AFD0);
        _print_unlocked<A, B>(_:_:)();
        uint64_t v29 = aBlock;
        unint64_t v27 = v121;
      }
      else
      {
        uint64_t v29 = 0;
      }
      unint64_t aBlock = sub_100290514(v29, v27, (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Pairing completed for %s %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v20 = v117;
      uint64_t v5 = v118;
    }
    else
    {
      swift_release_n();

      swift_errorRelease();
      swift_errorRelease();
    }
    if (*(void *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
    {
      swift_retain();
      if (static UUID.== infix(_:_:)())
      {
        uint64_t v3 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
        if (*(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 7)
        {
          if (a1)
          {
            swift_errorRetain();
            swift_errorRetain();
            swift_errorRetain();
            unint64_t v30 = Logger.logObject.getter();
            os_log_type_t v31 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v30, v31))
            {
              uint64_t v32 = (uint8_t *)swift_slowAlloc();
              uint64_t v33 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v32 = 138412290;
              swift_errorRetain();
              uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
              unint64_t aBlock = v34;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v33 = v34;
              swift_errorRelease();
              swift_errorRelease();
              _os_log_impl((void *)&_mh_execute_header, v30, v31, "Pairing failed with error %@", v32, 0xCu);
              sub_10006C51C(&qword_100455620);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_errorRelease();
              swift_errorRelease();
            }
            sub_100093B18(2);
            swift_errorRelease();
            goto LABEL_35;
          }
          uint64_t v48 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
          if (*(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode))
          {
            if (*(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 1)
            {
              uint64_t v49 = self;
              UUID.uuidString.getter();
              NSString v50 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease();
              sub_10004F4C8(v49, 5, v50);

LABEL_28:
              *(unsigned char *)(v5 + v3) = 8;
              sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
              uint64_t v51 = sub_100088F40((uint64_t)&off_10040E440);
              unint64_t v53 = v52;
              sub_100095EF4(0xD00000000000001CLL, 0x80000001003B2700, 3, 17, v51, v52);
              sub_10006D144(v51, v53);
LABEL_35:
              swift_release();
              return;
            }
            uint64_t v57 = *(void **)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
            if (v57)
            {
              uint64_t v58 = qword_1004536B0;
              id v110 = v57;
              uint64_t v4 = v20;
              if (v58 == -1) {
                goto LABEL_38;
              }
              goto LABEL_44;
            }
            id v41 = Logger.logObject.getter();
            os_log_type_t v63 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v41, v63))
            {
LABEL_34:

              sub_100093B18(2);
              goto LABEL_35;
            }
            unint64_t v64 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v64 = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, v63, "No endpoint", v64, 2u);
LABEL_24:
            swift_slowDealloc();
            goto LABEL_34;
          }
          swift_retain_n();
          id v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = (uint8_t *)swift_slowAlloc();
            uint64_t v54 = swift_slowAlloc();
            *(_DWORD *)uint64_t v43 = 136315138;
            unint64_t aBlock = v54;
            LOBYTE(v126) = *(unsigned char *)(v5 + v48);
            uint64_t v55 = String.init<A>(describing:)();
            uint64_t v126 = (void *)sub_100290514(v55, v56, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v47 = "Wrong mode %s";
            goto LABEL_23;
          }
        }
        else
        {
          swift_retain_n();
          id v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = (uint8_t *)swift_slowAlloc();
            uint64_t v44 = swift_slowAlloc();
            *(_DWORD *)uint64_t v43 = 136315138;
            unint64_t aBlock = v44;
            LOBYTE(v126) = *(unsigned char *)(v5 + v3);
            uint64_t v45 = String.init<A>(describing:)();
            uint64_t v126 = (void *)sub_100290514(v45, v46, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v47 = "Wrong state %s";
LABEL_23:
            _os_log_impl((void *)&_mh_execute_header, v41, v42, v47, v43, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            goto LABEL_24;
          }
        }
        swift_release_n();
        goto LABEL_34;
      }
      swift_release();
    }
    swift_retain_n();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      unint64_t v37 = (uint8_t *)swift_slowAlloc();
      unint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)unint64_t v37 = 136315138;
      swift_retain();
      uint64_t v38 = UUID.uuidString.getter();
      unint64_t v40 = v39;
      swift_release();
      uint64_t v126 = (void *)sub_100290514(v38, v40, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Wrong peer %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    return;
  }
  __break(1u);
LABEL_44:
  swift_once();
LABEL_38:
  sub_10006C51C(&qword_1004557C0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378B90;
  *(void *)(inited + 32) = a2;
  unint64_t aBlock = inited;
  specialized Array._endMutation()();
  unint64_t v60 = aBlock;
  if (aBlock >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v65) {
      goto LABEL_40;
    }
  }
  else
  {
    uint64_t v61 = *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    if (v61)
    {
LABEL_40:
      uint64_t v62 = (void *)sub_1000A44C4(v60);
      goto LABEL_47;
    }
  }
  uint64_t v62 = &_swiftEmptySetSingleton;
LABEL_47:
  swift_bridgeObjectRelease();
  sub_1000CA39C((uint64_t)v62, (uint64_t *)&aBlock);
  uint64_t v117 = v4;
  unint64_t v72 = v121;
  uint64_t v73 = (uint64_t)v122;
  unint64_t v74 = (unint64_t)v123;
  uint64_t v75 = v124;
  uint64_t v76 = aBlock;
  swift_bridgeObjectRelease();
  sub_10006D0EC(v76, v72);
  sub_10006D0EC(v73, v74);
  swift_bridgeObjectRetain();
  sub_10006D144(v73, v74);
  sub_10006D144(v76, v72);
  if (*((void *)v75 + 2))
  {
    unint64_t v101 = v72;
    uint64_t v102 = v76;
    unint64_t v103 = v74;
    uint64_t v104 = v73;
    uint64_t v118 = v5;
    uint64_t v77 = *((void *)v75 + 5);
    unint64_t v79 = *((void *)v75 + 6);
    uint64_t v78 = *((void *)v75 + 7);
    unint64_t v80 = *((void *)v75 + 8);
    uint64_t v81 = *((void *)v75 + 9);
    unint64_t v82 = *((void *)v75 + 10);
    uint64_t v106 = *((void *)v75 + 4);
    swift_retain();
    uint64_t v105 = v77;
    unint64_t v107 = v79;
    sub_10006D0EC(v77, v79);
    uint64_t v83 = v78;
    unint64_t v108 = v80;
    sub_10006D0EC(v78, v80);
    uint64_t v117 = v81;
    unint64_t v109 = v82;
    sub_10006D0EC(v81, v82);
    swift_bridgeObjectRelease();
    if (qword_100453930 != -1) {
      swift_once();
    }
    uint64_t v100 = qword_100468A40;
    uint64_t v84 = (void *)swift_allocObject();
    id v85 = v110;
    uint64_t v86 = v106;
    v84[2] = v110;
    v84[3] = v86;
    uint64_t v87 = v105;
    unint64_t v88 = v107;
    v84[4] = v105;
    v84[5] = v88;
    uint64_t v98 = v83;
    v84[6] = v83;
    unint64_t v89 = v108;
    uint64_t v90 = v117;
    uint64_t v91 = v118;
    v84[7] = v108;
    v84[8] = v90;
    v84[9] = v109;
    v84[10] = a2;
    v84[11] = v91;
    uint64_t v124 = sub_1000A9830;
    uint64_t v125 = v84;
    unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
    unint64_t v121 = 1107296256;
    uint64_t v122 = sub_10007C0C4;
    uint64_t v123 = &unk_100410A90;
    uint64_t v99 = _Block_copy(&aBlock);
    swift_retain();
    id v110 = v85;
    swift_retain();
    sub_10006D0EC(v87, v88);
    uint64_t v92 = v98;
    sub_10006D0EC(v98, v89);
    sub_10006D0EC(v117, v109);
    swift_retain();
    uint64_t v93 = v112;
    static DispatchQoS.unspecified.getter();
    uint64_t v126 = _swiftEmptyArrayStorage;
    sub_1000A98B0((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10006C51C((uint64_t *)&unk_100455710);
    sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
    uint64_t v94 = v114;
    uint64_t v95 = v111;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    uint64_t v96 = v93;
    uint64_t v97 = v99;
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v97);
    uint64_t v5 = v118;
    swift_release();
    sub_10006D144(v105, v107);
    sub_10006D144(v92, v108);
    sub_10006D144(v117, v109);

    sub_10006D144(v102, v101);
    sub_10006D144(v104, v103);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v116 + 8))(v94, v95);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v96, v115);
    swift_release();
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  sub_10006D144(v76, v72);
  sub_10006D144(v73, v74);
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    unint64_t aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136315138;
    uint64_t v118 = v5;
    swift_retain();
    uint64_t v69 = UUID.uuidString.getter();
    unint64_t v71 = v70;
    swift_release();
    uint64_t v126 = (void *)sub_100290514(v69, v71, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to retrieve pairing info for %s", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_100093B18(2);
  swift_release();
}

uint64_t sub_100099B24(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_getErrorValue();
      uint64_t v6 = Error.localizedDescription.getter();
      sub_100290514(v6, v7, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to process DK UWB message %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100093B18(2);
    return swift_errorRelease();
  }
  else if (a2 >> 60 != 15)
  {
    uint64_t v9 = result;
    sub_10006D0EC(result, a2);
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000CB6FC(v9, a2);
    return sub_100075868(v9, a2);
  }
  return result;
}

uint64_t sub_100099E48(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v41 = a4;
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  unint64_t v10 = a3[2];
  uint64_t v9 = a3[3];
  unint64_t v11 = a3[4];
  uint64_t v12 = a3[5];
  unint64_t v13 = a3[6];
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v39 = *(void *)(v14 - 8);
  uint64_t v40 = v14;
  __chkstk_darwin(v14, v15);
  uint64_t v38 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  __chkstk_darwin(v17, v18);
  uint64_t v34 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t aBlock = sub_10023CDF4(a1, a2);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v33[0] = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v7;
  v20[3] = v8;
  void v20[4] = v10;
  v20[5] = v9;
  void v20[6] = v11;
  v20[7] = v12;
  uint64_t v21 = v41;
  v20[8] = v13;
  uint64_t v20[9] = v21;
  uint64_t v47 = sub_1000A988C;
  uint64_t v48 = v20;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256;
  v33[1] = &v45;
  uint64_t v45 = sub_10009A314;
  unint64_t v46 = &unk_100410CE8;
  os_log_type_t v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  sub_10006D0EC(v8, v10);
  sub_10006D0EC(v9, v11);
  sub_10006D0EC(v12, v13);
  swift_release();
  uint64_t v23 = (void *)v33[0];
  id v24 = (id)SESEndPointUpdateWithBlock();
  _Block_release(v22);

  if (qword_100453928 != -1) {
    swift_once();
  }
  unint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = v35;
  unint64_t v25[2] = v24;
  uint64_t v25[3] = v26;
  void v25[4] = v41;
  uint64_t v47 = sub_1000AA13C;
  uint64_t v48 = v25;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v44 = 1107296256;
  uint64_t v45 = sub_10007C0C4;
  unint64_t v46 = &unk_100410D38;
  unint64_t v27 = _Block_copy(&aBlock);
  swift_retain();
  id v28 = v24;
  swift_retain();
  uint64_t v29 = v34;
  static DispatchQoS.unspecified.getter();
  os_log_type_t v42 = _swiftEmptyArrayStorage;
  sub_1000A98B0((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  unint64_t v30 = v38;
  uint64_t v31 = v40;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v29, v37);
  return swift_release();
}

void sub_10009A314(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_10009A37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v6 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to update BLE data for endpoint %@", v5, 0xCu);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100093B18(2);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      unint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Endpoint updated with BLE UUID", v10, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    sub_1000F5D98();
    swift_endAccess();
    swift_release();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Handing off the peripheral to Alisha", v13, 2u);
      swift_slowDealloc();
    }

    if (qword_100453798 != -1) {
      swift_once();
    }
    sub_1001E82F0(a3);
    uint64_t v14 = sub_100088F40((uint64_t)&off_10040E468);
    unint64_t v16 = v15;
    sub_100095EF4(0xD00000000000001CLL, 0x80000001003B2700, 3, 17, v14, v15);
    sub_10006D144(v14, v16);
    return sub_100093B18(6);
  }
}

void sub_10009A6E8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (unint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  unint64_t v13 = (void *)qword_100468A38;
  *(void *)unint64_t v12 = qword_100468A38;
  (*(void (**)(unint64_t, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  unint64_t v15 = _dispatchPreconditionTest(_:)();
  uint64_t v17 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  unint64_t v16 = v9 + 8;
  v17(v12, v8);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_40:
    LODWORD(v6sub_1000A2B9C("Transaction emulation ended", 0) = HIDWORD(v91) - v91;
    if (__OFSUB__(HIDWORD(v91), v91))
    {
      __break(1u);
LABEL_58:
      __break(1u);
      JUMPOUT(0x10009B408);
    }
    uint64_t v60 = (int)v60;
LABEL_43:
    if (v60 == 38)
    {
      uint64_t v87 = Data.subdata(in:)();
      unint64_t v88 = v68;
      unint64_t v82 = v12;
      uint64_t v85 = Data.subdata(in:)();
      unint64_t v86 = v69;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v70 = __DataStorage.init(capacity:)();
      uint64_t v101 = 0;
      uint64_t v102 = (void *)(v70 | 0x4000000000000000);
      uint64_t v71 = sub_10006C51C(&qword_100454158);
      uint64_t v99 = v71;
      uint64_t v83 = sub_10008C0B0((unint64_t *)&qword_100454160, &qword_100454158);
      uint64_t v100 = v83;
      LOBYTE(v98[0]) = 114;
      uint64_t v84 = v71;
      char v97 = *(unsigned char *)sub_100075908(v98, v71);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)v98);
      Data.append(_:)();
      uint64_t v99 = v84;
      uint64_t v100 = v83;
      LOBYTE(v98[0]) = 99;
      char v97 = *(unsigned char *)sub_100075908(v98, v84);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)v98);
      Data.append(_:)();
      if (qword_1004536B8 != -1) {
        swift_once();
      }
      uint64_t v83 = qword_100468688;
      uint64_t v72 = v101;
      uint64_t v73 = v102;
      sub_10006D0EC(v101, (unint64_t)v102);
      uint64_t v84 = v72;
      unint64_t v81 = (unint64_t)v73;
      sub_1000CDA7C(v72, v73);
      if (a1)
      {
        uint64_t v83 = a1;
        unint64_t v74 = v81;
        sub_10006D144(v84, v81);
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v77 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Failed to request pairing", v77, 2u);
          swift_slowDealloc();
        }

        sub_100093B18(2);
        sub_100075868(v4, v16);
        sub_100075868(v3, v15);

        sub_10006D144(v85, v86);
        sub_10006D144(v87, v88);
        sub_10006D144(v89, v90);
        sub_10006D144(v91, v82);
        sub_10006D144(v93, v94);
        sub_100075868(v96, v95);
        swift_release();
        swift_errorRelease();
        uint64_t v78 = v84;
      }
      else
      {
        sub_100075868(v4, v16);
        sub_100075868(v3, v15);

        uint64_t v79 = v84;
        unint64_t v74 = v81;
        sub_10006D144(v84, v81);
        sub_10006D144(v85, v86);
        sub_10006D144(v87, v88);
        sub_10006D144(v89, v90);
        sub_10006D144(v91, v82);
        sub_10006D144(v93, v94);
        sub_100075868(v96, v95);
        swift_release();
        uint64_t v78 = v79;
      }
      sub_10006D144(v78, v74);
      goto LABEL_16;
    }
LABEL_45:
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v61, v62)) {
      goto LABEL_48;
    }
    os_log_type_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v63 = 0;
    unint64_t v64 = "Invalid OOB data length";
    goto LABEL_47;
  }
  if (!*(void *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer)) {
    goto LABEL_18;
  }
  swift_retain();
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
LABEL_18:
    swift_retain_n();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      *(_DWORD *)unint64_t v30 = 136315138;
      v98[0] = v31;
      swift_retain();
      uint64_t v32 = UUID.uuidString.getter();
      unint64_t v34 = v33;
      swift_release();
      uint64_t v103 = sub_100290514(v32, v34, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Wrong peer %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    return;
  }
  uint64_t v18 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
  if (*(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 7)
  {
    uint64_t v103 = a1;
    unint64_t v104 = a2;
    sub_10006D0EC(a1, a2);
    uint64_t v19 = sub_100182970(38);
    if (v20 >> 60 == 15)
    {
LABEL_12:
      unint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid length for FIRST_APPROACH_RS", v27, 2u);
        swift_slowDealloc();
      }

      sub_100093B18(2);
      goto LABEL_15;
    }
    uint64_t v4 = v19;
    unint64_t v16 = v20;
    uint64_t v21 = sub_100182970(8);
    if (v22 >> 60 == 15)
    {
LABEL_11:
      sub_100075868(v4, v16);
      goto LABEL_12;
    }
    unint64_t v3 = v21;
    unint64_t v15 = v22;
    uint64_t v23 = sub_100182970(4);
    if (v24 >> 60 == 15)
    {
      sub_100075868(v3, v15);
      goto LABEL_11;
    }
    unint64_t v41 = v24;
    uint64_t v96 = v23;
    os_log_type_t v42 = *(void **)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
    if (v42)
    {
      id v43 = v42;
      id v44 = [v43 bleOOBKey];
      if (v44)
      {
        uint64_t v45 = v44;
        id v92 = v43;
        unint64_t v95 = v41;
        uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v48 = v47;

        uint64_t v93 = v46;
        unint64_t v94 = v48;
        unint64_t v49 = v48;
        a1 = 0;
        uint64_t v50 = sub_1000A5B7C(1, v4, v16, v46, v49, v3, v15, 4);
        unint64_t v12 = v56;
        unint64_t v90 = v57;
        uint64_t v91 = v50;
        uint64_t v89 = v58;
        char v59 = sub_100088AE4(v58, v57, v96, v95);
        if (v59)
        {
          switch(v12 >> 62)
          {
            case 1uLL:
              goto LABEL_40;
            case 2uLL:
              uint64_t v66 = *(void *)(v91 + 16);
              uint64_t v65 = *(void *)(v91 + 24);
              BOOL v67 = __OFSUB__(v65, v66);
              uint64_t v60 = v65 - v66;
              if (!v67) {
                goto LABEL_43;
              }
              goto LABEL_58;
            case 3uLL:
              goto LABEL_45;
            default:
              uint64_t v60 = BYTE6(v12);
              goto LABEL_43;
          }
        }
        uint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v61, v62)) {
          goto LABEL_48;
        }
        os_log_type_t v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v63 = 0;
        unint64_t v64 = "Failed authentication";
LABEL_47:
        _os_log_impl((void *)&_mh_execute_header, v61, v62, v64, v63, 2u);
        swift_slowDealloc();
LABEL_48:

        sub_100093B18(1);
        sub_100075868(v4, v16);
        sub_100075868(v3, v15);

        sub_10006D144(v89, v90);
        sub_10006D144(v91, v12);
        sub_10006D144(v93, v94);
        unint64_t v55 = v95;
        uint64_t v54 = v96;
LABEL_33:
        sub_100075868(v54, v55);
LABEL_15:
        swift_release();
LABEL_16:
        sub_10006D144(v103, v104);
        return;
      }
    }
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Missing endpoint or bleOOBKey", v53, 2u);
      swift_slowDealloc();
    }

    sub_100093B18(2);
    sub_100075868(v4, v16);
    sub_100075868(v3, v15);
    uint64_t v54 = v96;
    unint64_t v55 = v41;
    goto LABEL_33;
  }
  swift_retain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    v98[0] = v38;
    LOBYTE(v103) = *(unsigned char *)(v5 + v18);
    uint64_t v39 = String.init<A>(describing:)();
    uint64_t v103 = sub_100290514(v39, v40, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Wrong state %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_100093B18(2);
  swift_release();
}

uint64_t sub_10009B428(void *a1, uint64_t a2, unint64_t a3)
{
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  id v6 = [a1 publicKeyIdentifier];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  char v10 = sub_100088AE4(v7, v9, a2, a3);
  sub_10006D144(v7, v9);
  return v10 & 1;
}

uint64_t sub_10009B4D0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v22 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v9 - 8);
  uint64_t v24 = v9;
  __chkstk_darwin(v9, v10);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t aBlock = sub_10023CDF4(a1, a2);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_10009B900;
  uint64_t v32 = 0;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256;
  os_log_type_t v29 = sub_10009A314;
  unint64_t v30 = &unk_100410E00;
  id v14 = _Block_copy(&aBlock);
  id v15 = (id)SESEndPointUpdateWithBlock();
  _Block_release(v14);

  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_100468A38;
  unint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = v22;
  _OWORD v16[2] = v15;
  v16[3] = v17;
  v16[4] = a1;
  v16[5] = a2;
  uint64_t v31 = sub_1000AA52C;
  uint64_t v32 = v16;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v28 = 1107296256;
  os_log_type_t v29 = sub_10007C0C4;
  unint64_t v30 = &unk_100410E50;
  uint64_t v18 = _Block_copy(&aBlock);
  id v19 = v15;
  swift_retain();
  sub_10006D0EC(a1, a2);
  static DispatchQoS.unspecified.getter();
  os_log_type_t v26 = &_swiftEmptyArrayStorage;
  sub_1000A98B0((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v24);
  return swift_release();
}

void sub_10009B900(void *a1)
{
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  [a1 setBlePairingRequest:isa];
}

void sub_10009B978(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v14 = a4;
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 136315138;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      sub_100290514(v9, v10, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update endpoint %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v14;
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      NSString v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Endpoint updated with BLE pairing request", v13, 2u);
      swift_slowDealloc();
    }
  }
  sub_10009BBC4(a3, a4);
}

void sub_10009BBC4(uint64_t a1, char **a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t)v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
LABEL_74:
  }
    swift_once();
  uint64_t v11 = (void *)qword_100468A38;
  *(void *)uint64_t v10 = qword_100468A38;
  uint64_t v12 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v13 = v7 + 104;
  uint64_t v131 = *(void (**)(uint64_t, void, uint64_t))(v7 + 104);
  v131(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v14 = v11;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t v18 = *(void (**)(uint64_t, char *))(v7 + 8);
  uint64_t v17 = v7 + 8;
  unint64_t v16 = v18;
  v18(v10, (char *)v6);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_76:
    swift_once();
    goto LABEL_8;
  }
  unsigned int v129 = v12;
  uint64_t v130 = v13;
  swift_beginAccess();
  sub_10006D0EC(a1, (unint64_t)a2);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  char v20 = sub_1000A363C(v19, a1, (unint64_t)a2);
  sub_10006D144(a1, (unint64_t)a2);
  swift_bridgeObjectRelease();
  if (v20) {
    return;
  }
  uint64_t v126 = (char *)v6;
  uint64_t v21 = v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  sub_10006D0EC(a1, (unint64_t)a2);
  sub_10006D0EC(a1, (unint64_t)a2);
  uint64_t v128 = (void *)v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v127 = v3;
  uint64_t v124 = (void *)v10;
  uint64_t v125 = v17;
  uint64_t v123 = v16;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v122 = swift_slowAlloc();
    v133[0] = v122;
    *(_DWORD *)uint64_t v25 = 136315138;
    id v121 = v25 + 4;
    uint64_t v132 = (uint64_t)sub_10023CDF4(a1, (unint64_t)a2);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v132 = sub_100290514(v26, v28, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a1, (unint64_t)a2);
    sub_10006D144(a1, (unint64_t)a2);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Starting First Approach for %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D144(a1, (unint64_t)a2);
    sub_10006D144(a1, (unint64_t)a2);
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  sub_10006D0EC(a1, (unint64_t)a2);
  if (qword_1004536D8 != -1) {
    goto LABEL_76;
  }
LABEL_8:
  os_log_type_t v29 = off_100455CB0;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = sub_1000A9EC0;
  *(void *)(v30 + 24) = v12;
  uint64_t v32 = __chkstk_darwin(v30, v31);
  v113[-4] = sub_1000AA894;
  v113[-3] = v32;
  v113[-2] = v29;
  __chkstk_darwin(v32, v33);
  v113[-2] = sub_1000AA878;
  v113[-1] = v34;
  os_log_type_t v36 = v35 + 4;
  swift_retain();
  os_unfair_lock_lock(v36);
  sub_1000AA804(v133);
  os_unfair_lock_unlock(v36);
  uint64_t v37 = v133[0];
  swift_release();
  swift_release();
  uint64_t v10 = sub_1000BB0E4(v37);
  swift_bridgeObjectRelease();
  if (!v10)
  {
    unint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Endpoint not found", v51, 2u);
      swift_slowDealloc();
    }

    return;
  }
  id v38 = [(id)v10 deviceConfiguration];
  if (!v38)
  {
    os_log_type_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Missing device configuration", v54, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v39 = v38;
  uint64_t v122 = v13;
  uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v41;

  id v43 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v45 = [v43 TLVsWithData:isa];

  if (!v45) {
    goto LABEL_85;
  }
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  unint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v46 >> 62))
  {
    uint64_t v6 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_13;
    }
    goto LABEL_84;
  }
LABEL_83:
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  if (!v6)
  {
LABEL_84:
    swift_bridgeObjectRelease_n();
LABEL_85:
    sub_10006D0EC(v40, v42);
    sub_10006D0EC(v40, v42);
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      unint64_t v108 = v42;
      unint64_t v109 = (uint8_t *)swift_slowAlloc();
      v133[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v109 = 136315138;
      uint64_t v131 = (void (*)(uint64_t, void, uint64_t))(v109 + 4);
      uint64_t v132 = (uint64_t)sub_10023CDF4(v40, v108);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      id v121 = (id)v10;
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v110 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v112 = v111;
      swift_bridgeObjectRelease();
      uint64_t v132 = sub_100290514(v110, v112, v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(v40, v108);
      sub_10006D144(v40, v108);
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Invalid device configuration %s", v109, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10006D144(v40, v108);

LABEL_87:
    }
    else
    {
      sub_10006D144(v40, v42);

      sub_10006D144(v40, v42);
      sub_10006D144(v40, v42);
    }
    return;
  }
LABEL_13:
  uint64_t v119 = v40;
  unint64_t v120 = v42;
  uint64_t v117 = (char **)a1;
  uint64_t v118 = a2;
  uint64_t v3 = 4;
  a2 = &selRef_setDesignation_designation_handoffToken_completion_;
  a1 = 32585;
  while (1)
  {
    if ((v46 & 0xC000000000000001) != 0) {
      id v47 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v47 = *(id *)(v46 + 8 * v3);
    }
    unint64_t v48 = v47;
    uint64_t v7 = v3 - 3;
    if (__OFADD__(v3 - 4, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    if ([v47 tag] == 32585) {
      break;
    }

    ++v3;
    if (v7 == v6)
    {
      swift_bridgeObjectRelease_n();
LABEL_52:
      unint64_t v42 = v120;
      uint64_t v40 = v119;
      goto LABEL_85;
    }
  }
  swift_bridgeObjectRelease_n();
  id v55 = [v48 children];
  if (v55)
  {
    unint64_t v56 = v55;
    unint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v121 = (id)v10;
    if (v46 >> 62)
    {
LABEL_91:
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      if (v40) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v40 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v40)
      {
LABEL_30:
        unint64_t v42 = 4;
        uint64_t v10 = 32594;
        while (1)
        {
          if ((v46 & 0xC000000000000001) != 0) {
            id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v57 = *(id *)(v46 + 8 * v42);
          }
          uint64_t v58 = v57;
          a1 = v42 - 3;
          if (__OFADD__(v42 - 4, 1))
          {
            __break(1u);
            goto LABEL_83;
          }
          if ([v57 tag] == 32594) {
            break;
          }

          ++v42;
          if (a1 == v40) {
            goto LABEL_37;
          }
        }
        swift_bridgeObjectRelease_n();
        id v59 = [v58 children];
        if (!v59) {
          goto LABEL_99;
        }
        uint64_t v60 = v59;
        unint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v61 >> 62) {
          goto LABEL_94;
        }
        unint64_t v46 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v116 = swift_allocObject();
          if (!v46) {
            break;
          }
          uint64_t v115 = v116 + 16;
          uint64_t v62 = 4;
          while (1)
          {
            if ((v61 & 0xC000000000000001) != 0) {
              id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v63 = *(id *)(v61 + 8 * v62);
            }
            unint64_t v64 = v63;
            uint64_t v65 = v62 - 3;
            if (__OFADD__(v62 - 4, 1))
            {
              __break(1u);
              goto LABEL_91;
            }
            if ([v63 tag] == 208) {
              break;
            }

            ++v62;
            if (v65 == v46) {
              goto LABEL_49;
            }
          }
          swift_bridgeObjectRelease_n();
          id v66 = [v64 value];

          if (!v66) {
            goto LABEL_50;
          }
          uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v69 = v68;

          uint64_t v70 = v116;
          *(void *)(v116 + 16) = v67;
          *(void *)(v70 + 24) = v69;
          id v71 = [v58 children];
          if (!v71) {
            goto LABEL_100;
          }
          uint64_t v72 = v71;
          unint64_t v73 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v73 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v74 = _CocoaArrayWrapper.endIndex.getter();
          }
          else
          {
            uint64_t v74 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
          }
          uint64_t v114 = swift_allocObject();
          if (!v74)
          {
LABEL_65:
            swift_bridgeObjectRelease_n();
LABEL_66:

            swift_deallocUninitializedObject();
            swift_release();
            goto LABEL_51;
          }
          v113[1] = v114 + 16;
          uint64_t v75 = 4;
          while (1)
          {
            id v76 = (v73 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v73 + 8 * v75);
            uint64_t v77 = v76;
            unint64_t v61 = v75 - 3;
            if (__OFADD__(v75 - 4, 1)) {
              break;
            }
            if ([v76 tag] == 209)
            {
              swift_bridgeObjectRelease_n();
              id v78 = [v77 value];

              if (!v78) {
                goto LABEL_66;
              }
              uint64_t v79 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v81 = v80;

              uint64_t v82 = v114;
              *(void *)(v114 + 16) = v79;
              *(void *)(v82 + 24) = v81;
              uint64_t v83 = sub_10006C51C(&qword_100454158);
              v133[3] = v83;
              void v133[4] = sub_10008C0B0((unint64_t *)&qword_100454160, &qword_100454158);
              LOBYTE(v133[0]) = 0;
              LOBYTE(v132) = *(unsigned char *)sub_100075908(v133, v83);
              Data._Representation.replaceSubrange(_:with:count:)();
              sub_10007594C((uint64_t)v133);
              sub_10009CE30();
              if (qword_1004536B0 != -1) {
                swift_once();
              }
              uint64_t v122 = qword_100468680;
              uint64_t v84 = (void *)swift_allocObject();
              uint64_t v85 = v126;
              uint64_t v86 = v127;
              v84[2] = v82;
              v84[3] = v86;
              uint64_t v87 = v117;
              unint64_t v88 = (unint64_t)v118;
              v84[4] = v117;
              v84[5] = v88;
              uint64_t v128 = v84;
              v84[6] = v116;
              uint64_t v89 = qword_100468A38;
              uint64_t v90 = (uint64_t)v124;
              *uint64_t v124 = qword_100468A38;
              v131(v90, v129, (uint64_t)v85);
              sub_10006D0EC((uint64_t)v87, v88);
              swift_retain();
              swift_retain();
              swift_retain();
              sub_10006D0EC((uint64_t)v87, v88);
              swift_retain();
              swift_retain();
              swift_retain();
              id v91 = (id)v89;
              LOBYTE(v89) = _dispatchPreconditionTest(_:)();
              v123(v90, v85);
              if (v89)
              {
                uint64_t v92 = v122;
                if (sub_1000FD8DC(*(void *)(v122 + OBJC_IVAR____TtC10seserviced6DSKBLE_centralState)))
                {
                  uint64_t v93 = qword_100468680;
                  swift_beginAccess();
                  uint64_t v94 = v114;
                  uint64_t v95 = *(void *)(v114 + 16);
                  unint64_t v96 = *(void *)(v114 + 24);
                  unint64_t v97 = (unint64_t)v118;
                  sub_10006D0EC((uint64_t)v87, (unint64_t)v118);
                  swift_retain();
                  swift_retain();
                  uint64_t v98 = (void (*)(char *, uint64_t))v116;
                  swift_retain();
                  sub_10006D0EC(v95, v96);
                  uint64_t v99 = (char *)v93;
                  unint64_t v100 = v97;
                  sub_100102EF0(v95, v96, v99, (uint64_t)v87, v97, v86, v94, v98);
                  swift_release();
                  swift_release();
                  swift_release();
                  sub_10006D144((uint64_t)v87, v97);
                  sub_10006D144(v95, v96);
LABEL_81:
                  swift_release();
                  swift_release();
                  swift_release();
                  sub_10006D144((uint64_t)v87, v100);

                  swift_release();
                  swift_release_n();
                  sub_10006D144(v119, v120);
                  goto LABEL_87;
                }
                uint64_t v90 = swift_allocObject();
                uint64_t v101 = v128;
                *(void *)(v90 + 16) = sub_1000A9F1C;
                *(void *)(v90 + 24) = v101;
                uint64_t v87 = (char **)(v92 + OBJC_IVAR____TtC10seserviced6DSKBLE_closuresOnPowerOn);
                swift_beginAccess();
                uint64_t v85 = *v87;
                swift_retain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                void *v87 = v85;
                if (isUniquelyReferenced_nonNull_native)
                {
LABEL_78:
                  unint64_t v100 = (unint64_t)v118;
                  unint64_t v104 = *((void *)v85 + 2);
                  unint64_t v103 = *((void *)v85 + 3);
                  if (v104 >= v103 >> 1)
                  {
                    uint64_t v85 = sub_100259574((char *)(v103 > 1), v104 + 1, 1, v85);
                    void *v87 = v85;
                  }
                  *((void *)v85 + 2) = v104 + 1;
                  uint64_t v105 = &v85[16 * v104];
                  *((void *)v105 + 4) = sub_1000A9F2C;
                  *((void *)v105 + 5) = v90;
                  swift_endAccess();
                  uint64_t v87 = v117;
                  goto LABEL_81;
                }
              }
              else
              {
                __break(1u);
              }
              uint64_t v85 = sub_100259574(0, *((void *)v85 + 2) + 1, 1, v85);
              void *v87 = v85;
              goto LABEL_78;
            }

            ++v75;
            if (v61 == v74) {
              goto LABEL_65;
            }
          }
          __break(1u);
LABEL_94:
          swift_bridgeObjectRetain();
          unint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
        }
LABEL_49:
        swift_bridgeObjectRelease_n();
LABEL_50:

        swift_deallocUninitializedObject();
        goto LABEL_51;
      }
    }
LABEL_37:
    swift_bridgeObjectRelease_n();

LABEL_51:
    uint64_t v10 = (uint64_t)v121;
    goto LABEL_52;
  }
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
}

unint64_t sub_10009CDAC(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = [a1 publicKeyIdentifier];
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  LOBYTE(a3) = sub_100088AE4(v6, v8, a2, a3);
  sub_10006D144(v6, v8);
  return a3 & 1;
}

void sub_10009CE30()
{
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  unint64_t v3 = v1 >> 62;
  switch(v1 >> 62)
  {
    case 1uLL:
      if (!((v2 ^ (unint64_t)(v2 << 32)) >> 32)) {
        return;
      }
      goto LABEL_8;
    case 2uLL:
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      if (v4 == v5) {
        return;
      }
      if (v3 != 2)
      {
LABEL_8:
        uint64_t v4 = (int)v2;
        uint64_t v5 = v2 >> 32;
      }
      break;
    case 3uLL:
      return;
    default:
      if ((v1 & 0xFF000000000000) == 0) {
        return;
      }
      uint64_t v4 = 0;
      uint64_t v5 = BYTE6(v1);
      break;
  }
  uint64_t v6 = v5 - 1;
  if (__OFSUB__(v5, 1)) {
    goto LABEL_53;
  }
  if (v4 < v6)
  {
    while (1)
    {
      uint64_t v8 = *v0;
      unint64_t v7 = v0[1];
      switch(v7 >> 62)
      {
        case 1uLL:
          uint64_t v9 = (int)v8;
          uint64_t v10 = v8 >> 32;
          if (v4 >= v10 || v4 < v9) {
            goto LABEL_43;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_55;
          }
          if (__OFSUB__(v4, __DataStorage._offset.getter())) {
            goto LABEL_46;
          }
          if (v6 >= v10 || v6 < v9) {
            goto LABEL_48;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_56;
          }
          if (!__OFSUB__(v6, __DataStorage._offset.getter())) {
            goto LABEL_12;
          }
          goto LABEL_50;
        case 2uLL:
          if (v4 < *(void *)(v8 + 16)) {
            goto LABEL_44;
          }
          if (v4 >= *(void *)(v8 + 24)) {
            goto LABEL_47;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_57;
          }
          if (__OFSUB__(v4, __DataStorage._offset.getter())) {
            goto LABEL_49;
          }
          if (v6 < *(void *)(v8 + 16)) {
            goto LABEL_51;
          }
          if (v6 >= *(void *)(v8 + 24)) {
            goto LABEL_52;
          }
          if (!__DataStorage._bytes.getter()) {
            goto LABEL_58;
          }
          if (!__OFSUB__(v6, __DataStorage._offset.getter())) {
            goto LABEL_12;
          }
          __break(1u);
          return;
        case 3uLL:
          goto LABEL_54;
        default:
          if (v4 >= BYTE6(v7))
          {
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
          }
          if (v6 >= BYTE6(v7)) {
            goto LABEL_45;
          }
LABEL_12:
          Data._Representation.subscript.setter();
          Data._Representation.subscript.setter();
          if (++v4 >= --v6) {
            return;
          }
          break;
      }
    }
  }
}

uint64_t sub_10009D160(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(char *, uint64_t))
{
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  uint64_t v10 = (char *)qword_100468680;
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 16);
  unint64_t v12 = *(void *)(a1 + 24);
  sub_10006D0EC(a3, a4);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10006D0EC(v11, v12);
  sub_100102EF0(v11, v12, v10, a3, a4, a2, a1, a5);
  swift_release();
  swift_release();
  swift_release();
  sub_10006D144(a3, a4);
  return sub_10006D144(v11, v12);
}

void sub_10009D284(NSObject *a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_retain_n();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(void *)&v75[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v48 = 136315138;
      swift_beginAccess();
      uint64_t v49 = *(void *)(a6 + 16);
      unint64_t v50 = *(void *)(a6 + 24);
      sub_10006D0EC(v49, v50);
      uint64_t v51 = Data.description.getter();
      unint64_t v53 = v52;
      sub_10006D144(v49, v50);
      uint64_t v76 = sub_100290514(v51, v53, (uint64_t *)v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v47, "Failed to retrieve peripheral with address %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      uint64_t v62 = v72;
    }
  }
  else
  {
    uint64_t v70 = v17;
    uint64_t v71 = v16;
    uint64_t v69 = a7 + 16;
    id v20 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for Peer();
    swift_allocObject();
    uint64_t v21 = sub_1002119A8((uint64_t)v19);
    uint64_t v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    uint64_t v23 = *(void *)(v21 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v24 = *(void *)(v21 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    uint64_t *v22 = a3;
    v22[1] = a4;
    sub_10006D0EC(a3, a4);
    sub_100075868(v23, v24);
    swift_beginAccess();
    swift_retain();
    sub_1000E851C((uint64_t *)v75, v21);
    swift_endAccess();
    swift_release();
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    uint64_t v72 = a1;
    uint64_t v79 = 0;
    long long v77 = 0u;
    long long v78 = 0u;
    sub_1001F91E8(0, (uint64_t)&v77);
    sub_10008E734((uint64_t)&v77, &qword_100458800);
    if (qword_1004537D8 != -1) {
      swift_once();
    }
    uint64_t v25 = *(void *)(qword_1004688C0 + 16);
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v28 = v27;
    swift_beginAccess();
    uint64_t v29 = *(void *)(a6 + 16);
    unint64_t v30 = *(void *)(a6 + 24);
    *((void *)&v78 + 1) = &type metadata for Data;
    *(void *)&long long v77 = v29;
    *((void *)&v77 + 1) = v30;
    sub_1000761D0(&v77, v75);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v29, v30);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = v25;
    sub_1002C9648(v75, v26, v28, isUniquelyReferenced_nonNull_native);
    uint64_t v32 = v74;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v35 = v34;
    swift_beginAccess();
    uint64_t v36 = *(void *)(a7 + 16);
    unint64_t v37 = *(void *)(a7 + 24);
    *((void *)&v78 + 1) = &type metadata for Data;
    *(void *)&long long v77 = v36;
    *((void *)&v77 + 1) = v37;
    sub_1000761D0(&v77, v75);
    sub_10006D0EC(v36, v37);
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v73 = v32;
    sub_1002C9648(v75, v33, v35, v38);
    uint64_t v39 = v73;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v69 = v39;
      *(_DWORD *)unint64_t v42 = 136315138;
      *(void *)&long long v77 = v43;
      swift_retain();
      uint64_t v44 = UUID.uuidString.getter();
      unint64_t v46 = v45;
      swift_release();
      *(void *)&v75[0] = sub_100290514(v44, v46, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Requesting connection for First Approach %s", v42, 0xCu);
      swift_arrayDestroy();
      uint64_t v39 = v69;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v54 = v70;
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_10006C51C(&qword_1004548C0);
    unint64_t v55 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_100378290;
    unint64_t v57 = v56 + v55;
    uint64_t v58 = qword_1004538E8;
    swift_retain();
    if (v58 != -1) {
      swift_once();
    }
    uint64_t v59 = v71;
    uint64_t v60 = sub_10008E55C(v71, (uint64_t)qword_100468A00);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v54 + 16))(v57, v60, v59);
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_allocObject();
    *(void *)&long long v67 = sub_1000AA874;
    *((void *)&v67 + 1) = a5;
    *(void *)&long long v66 = sub_1000AA7C8;
    *((void *)&v66 + 1) = a5;
    *(void *)&long long v65 = sub_1000AA870;
    *((void *)&v65 + 1) = a5;
    *(void *)&long long v64 = sub_1000AA7D0;
    *((void *)&v64 + 1) = a5;
    *(void *)&long long v63 = sub_1000AA858;
    *((void *)&v63 + 1) = a5;
    uint64_t v61 = sub_1000DAA98(v21, 893797958, 0xE400000000000000, v56, v39, 0, 0, 1, 0, v63, v64, v65, v66, v67, 0, 0);
    swift_retain_n();
    sub_1000CE648(v61, 0);
    swift_release();
    swift_release();
    sub_1000758E8(v72, 0);
  }
}

uint64_t sub_10009DABC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_requestedFirstApproaches);
  swift_beginAccess();
  uint64_t v14 = *v13;
  swift_bridgeObjectRetain();
  sub_10006D0EC(a1, a2);
  uint64_t v6 = sub_1000A2D80(v14, a1, a2);
  sub_10006D144(a1, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v6) {
    return result;
  }
  if (qword_1004536B0 != -1) {
    goto LABEL_17;
  }
LABEL_6:
  sub_1000CAD08();
  swift_beginAccess();
  sub_1000F5D98();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  sub_1000F5D98();
  swift_endAccess();
  swift_release();
  if (!*(void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
LABEL_10:
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    uint64_t v16 = qword_100468890;
    swift_retain();
    uint64_t v17 = sub_100203774(v16, v6);
    swift_release();
    uint64_t v18 = (void *)sub_1000BB110(v17);
    swift_bridgeObjectRelease();
    if (v18)
    {
      sub_1001FF6A0();
    }
    return swift_release();
  }
  swift_retain();
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    goto LABEL_10;
  }
  sub_100093B18(2);
  swift_release();
  return swift_release();
}

void sub_10009DE04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_8;
  }
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v17 = v12;
    swift_retain();
    uint64_t v13 = UUID.uuidString.getter();
    unint64_t v15 = v14;
    swift_release();
    uint64_t v16 = sub_100290514(v13, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session started running for %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (qword_1004537E0 != -1) {
    goto LABEL_10;
  }
LABEL_8:
  sub_10020C7F4(a1);
}

void sub_10009E0E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (uint64_t *)((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *id v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    swift_retain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315394;
      swift_retain();
      uint64_t v14 = UUID.uuidString.getter();
      unint64_t v16 = v15;
      swift_release();
      uint64_t v19 = sub_100290514(v14, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 12) = 2080;
      uint64_t v17 = sub_1002014D4(a1);
      uint64_t v19 = sub_100290514(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "UWB Alisha session suspended for %s %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2
      && *(void *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
    {
      swift_retain();
      if (static UUID.== infix(_:_:)()) {
        sub_100093B18(4);
      }
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10009E434()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (uint64_t *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468A38;
  void *v4 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
  if (v5)
  {
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v15 = v10;
      swift_retain();
      uint64_t v11 = UUID.uuidString.getter();
      unint64_t v13 = v12;
      swift_release();
      uint64_t v14 = sub_100290514(v11, v13, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "UWB Alisha session resumed for %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10009E6D8(unint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v13)
  {
    if (qword_1004536B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  sub_1000CB6FC(a1, a2);
  if (qword_100453798 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468880;
  swift_retain();
  swift_retain();
  sub_1001F3D98(a1, a2, 1, a3, v15, v4, (uint64_t)a3);
  swift_release();
  return swift_release();
}

void sub_10009E984(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      LOBYTE(v17) = a1;
      uint64_t v12 = String.init<A>(describing:)();
      uint64_t v17 = sub_100290514(v12, v13, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      swift_retain();
      uint64_t v14 = UUID.uuidString.getter();
      unint64_t v16 = v15;
      swift_release();
      uint64_t v17 = sub_100290514(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session health update %s for %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10009EC74(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v10 = *a1;
  sub_1000AA164((uint64_t)a1, (uint64_t)v9);
  if (v10 != 5) {
    return sub_1000AA1C8((uint64_t)v9);
  }
  int v11 = v9[1];
  uint64_t result = sub_1000AA1C8((uint64_t)v9);
  if (v11 != 13) {
    return result;
  }
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2
    && *(void *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
  {
    swift_retain();
    if (static UUID.== infix(_:_:)())
    {
      uint64_t v13 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
      if (*(unsigned char *)(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 2)
      {
        uint64_t v14 = *(void (**)(void))(a2 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart);
        if (v14)
        {
          swift_retain();
          v14(0);
          sub_10008BECC((uint64_t)v14);
        }
        *(unsigned char *)(a2 + v13) = 3;
        sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
        uint64_t v15 = sub_100088F40((uint64_t)&off_10040E490);
        unint64_t v17 = v16;
        sub_100095EF4(0xD000000000000015, 0x80000001003B27A0, 3, 17, v15, v16);
        sub_10006D144(v15, v17);
      }
      return swift_release();
    }
    swift_release();
  }
  swift_beginAccess();
  swift_retain();
  char v18 = sub_1000E851C(&v20, a3);
  swift_endAccess();
  uint64_t result = swift_release();
  if (v18) {
    return sub_1000962AC();
  }
  return result;
}

uint64_t sub_10009EEB0(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a4;
  uint64_t v41 = a3;
  uint64_t v5 = a2[1];
  uint64_t v38 = *a2;
  unint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  unint64_t v9 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v39 = a2[6];
  uint64_t v40 = v8;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v47 = *(void *)(v10 - 8);
  uint64_t v48 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v43 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t v46 = v13;
  __chkstk_darwin(v13, v14);
  unint64_t v42 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = [a1 publicKeyIdentifier];
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  unint64_t aBlock = sub_10023CDF4(v17, v19);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v17, v19);
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = v38;
  v20[3] = v5;
  void v20[4] = v6;
  v20[5] = v7;
  unint64_t v22 = v39;
  uint64_t v21 = v40;
  void v20[6] = v9;
  v20[7] = v21;
  uint64_t v23 = v41;
  v20[8] = v22;
  uint64_t v20[9] = v23;
  uint64_t v54 = (void (*)())sub_1000A988C;
  unint64_t v55 = v20;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  unint64_t v37 = &v52;
  unint64_t v52 = sub_10009A314;
  unint64_t v53 = &unk_100410AE0;
  unint64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  sub_10006D0EC(v5, v6);
  sub_10006D0EC(v7, v9);
  sub_10006D0EC(v21, v22);
  swift_release();
  uint64_t v25 = v36;
  id v26 = (id)SESEndPointUpdateWithBlock();
  _Block_release(v24);

  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v44;
  *(void *)(v27 + 16) = v26;
  *(void *)(v27 + 24) = v28;
  uint64_t v54 = sub_1000A98A8;
  unint64_t v55 = (void *)v27;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v51 = 1107296256;
  unint64_t v52 = sub_10007C0C4;
  unint64_t v53 = &unk_100410B30;
  uint64_t v29 = _Block_copy(&aBlock);
  id v30 = v26;
  swift_retain();
  uint64_t v31 = v42;
  static DispatchQoS.unspecified.getter();
  uint64_t v49 = _swiftEmptyArrayStorage;
  sub_1000A98B0((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  uint64_t v32 = v43;
  uint64_t v33 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v33);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v31, v46);
  return swift_release();
}

void sub_10009F3C4(void *a1)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a1 setBleAddress:isa];

  UUID.uuidString.getter();
  id v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a1 setBleUUID:v3];
}

void sub_10009F46C(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      id v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v4 = (void *)swift_slowAlloc();
      *(_DWORD *)id v3 = 138412290;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v4 = v8;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to update BLE data for endpoint %@", v3, 0xCu);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_100093B18(2);
    swift_errorRelease();
  }
  else
  {
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Endpoint updated with BLE UUID", v6, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10009F6B0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v53 = v1;
  uint64_t v54 = v2;
  uint64_t v4 = __chkstk_darwin(v1, v3);
  unint64_t v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  unint64_t v17 = (unint64_t)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
LABEL_42:
  }
    swift_once();
  unint64_t v18 = (void *)qword_100468A38;
  *(void *)unint64_t v17 = qword_100468A38;
  (*(void (**)(unint64_t, void, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = v18;
  char v20 = _dispatchPreconditionTest(_:)();
  (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v17, v13);
  if (v20)
  {
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v13 = 0;
    uint64_t v0 = sub_1000A2578(v21, v22);
    if (!*(void *)(v0 + 16)) {
      return swift_release();
    }
    if (qword_100453798 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  swift_retain();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 134217984;
    uint64_t v57 = *(void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unpairing %ld unknown paired peers", v25, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  uint64_t v27 = *(void *)(v0 + 56);
  uint64_t v44 = v0 + 56;
  uint64_t v28 = 1 << *(unsigned char *)(v0 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v17 = v29 & v27;
  int64_t v45 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v30 = v53;
  uint64_t v56 = v54 + 16;
  uint64_t v51 = v54 + 48;
  unint64_t v52 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v54 + 56);
  uint64_t v14 = v54 + 32;
  uint64_t v47 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v31 = 0;
  unint64_t v46 = 0x80000001003B0C70;
  uint64_t v48 = v12;
  uint64_t v49 = v0;
  while (1)
  {
    if (v17)
    {
      unint64_t v32 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v33 = v32 | (v31 << 6);
      goto LABEL_30;
    }
    if (__OFADD__(v31++, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v31 >= v45) {
      goto LABEL_39;
    }
    unint64_t v35 = *(void *)(v44 + 8 * v31);
    if (!v35) {
      break;
    }
LABEL_29:
    unint64_t v17 = (v35 - 1) & v35;
    unint64_t v33 = __clz(__rbit64(v35)) + (v31 << 6);
LABEL_30:
    uint64_t v37 = v54;
    uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v54 + 16);
    v38(v12, *(void *)(v0 + 48) + *(void *)(v54 + 72) * v33, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v12, 0, 1, v30);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v12, 1, v30) == 1) {
      return swift_release_n();
    }
    int64_t v55 = v31;
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))v14;
    (*(void (**)(char *, char *, uint64_t))v14)(v8, v12, v30);
    if (qword_1004536B8 != -1) {
      swift_once();
    }
    uint64_t v40 = v50;
    v38(v50, (unint64_t)v8, v30);
    type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
    uint64_t v41 = swift_allocObject();
    v39((char *)(v41 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier), v40, v30);
    unint64_t v42 = (void *)(v41 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
    *unint64_t v42 = 0xD000000000000011;
    v42[1] = v46;
    sub_1000CC9C8(v41);
    swift_release();
    if (v13)
    {
      swift_errorRelease();
      uint64_t v13 = 0;
    }
    uint64_t v30 = v53;
    uint64_t result = (*v47)(v8, v53);
    uint64_t v12 = v48;
    uint64_t v0 = v49;
    int64_t v31 = v55;
  }
  int64_t v36 = v31 + 1;
  if (v31 + 1 >= v45) {
    goto LABEL_39;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35) {
    goto LABEL_28;
  }
  int64_t v36 = v31 + 2;
  if (v31 + 2 >= v45) {
    goto LABEL_39;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35) {
    goto LABEL_28;
  }
  int64_t v36 = v31 + 3;
  if (v31 + 3 >= v45) {
    goto LABEL_39;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35) {
    goto LABEL_28;
  }
  int64_t v36 = v31 + 4;
  if (v31 + 4 >= v45) {
    goto LABEL_39;
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35) {
    goto LABEL_28;
  }
  int64_t v36 = v31 + 5;
  if (v31 + 5 >= v45)
  {
LABEL_39:
    (*v52)(v12, 1, 1, v30);
    return swift_release_n();
  }
  unint64_t v35 = *(void *)(v44 + 8 * v36);
  if (v35)
  {
LABEL_28:
    int64_t v31 = v36;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v31 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v31 >= v45) {
      goto LABEL_39;
    }
    unint64_t v35 = *(void *)(v44 + 8 * v31);
    ++v36;
    if (v35) {
      goto LABEL_29;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10009FD70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type);
  if (v9 == 4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    char v10 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    if (v9) {
      char v10 = 0;
    }
    else {
      char v10 = static UUID.== infix(_:_:)();
    }
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10 & 1;
}

uint64_t sub_10009FEC0@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t *a5@<X6>, uint64_t *a6@<X7>, _DWORD *a7@<X8>, char a8, uint64_t a9, unint64_t a10)
{
  uint64_t v11 = a7;
  unint64_t v12 = a10;
  unint64_t v15 = a4;
  unint64_t v16 = a2;
  switch(a2 >> 62)
  {
    case 1uLL:
      unint64_t v109 = a2;
      unint64_t v114 = a10;
      uint64_t v31 = a1 >> 32;
      if (a1 >> 32 >= (int)a1)
      {
        unint64_t v27 = a4;
        unint64_t v15 = a3;
        sub_10006D0EC(a3, a4);
        sub_10006D0EC(a1, v109);
        sub_10006D0EC(a9, a10);
        int v32 = sub_1000A5954((int)a1, v31, v109 & 0x3FFFFFFFFFFFFFFFLL, v15, v27, a5, a6, a8 & 1, a1, v109, a9, a10);
        if (!v10)
        {
          int v30 = v32;
          sub_10006D144(v15, v27);
          unint64_t v12 = a10;
          uint64_t v11 = a7;
          unint64_t v16 = v109;
          goto LABEL_62;
        }
LABEL_73:
        sub_10006D144(v15, v27);
        sub_10006D144(a9, v114);
        sub_10006D144(a1, v109);
        __break(1u);
        JUMPOUT(0x1000A0B70);
      }
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    case 2uLL:
      uint64_t v26 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v109 = *(void *)(a1 + 16);
      unint64_t v27 = a2;
      uint64_t v108 = *(void *)(a1 + 24);
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a1, v27);
      sub_10006D0EC(a9, a10);
      swift_retain();
      swift_retain();
      unint64_t v114 = a10;
      unint64_t v16 = v27;
      int v29 = sub_1000A5954(v109, v108, v26, a3, v15, a5, a6, a8 & 1, a1, v27, a9, a10);
      if (v10)
      {
        sub_10006D144(a3, v15);
        sub_10006D144(a1, v27);
        sub_10006D144(a9, a10);
        swift_release();
        swift_release();
        __break(1u);
        goto LABEL_73;
      }
      int v30 = v29;
      swift_release();
      swift_release();
      sub_10006D144(a3, v15);
      uint64_t v11 = a7;
      goto LABEL_62;
    case 3uLL:
      memset(v135, 0, 14);
      switch(a4 >> 62)
      {
        case 1uLL:
          uint64_t v117 = a7;
          uint64_t v50 = (int)a3;
          uint64_t v104 = (a3 >> 32) - (int)a3;
          if (a3 >> 32 < (int)a3) {
            goto LABEL_64;
          }
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a3, v15);
          sub_10006D0EC(a9, a10);
          uint64_t v52 = __DataStorage._bytes.getter();
          unint64_t v120 = a6;
          if (!v52) {
            goto LABEL_25;
          }
          uint64_t v53 = __DataStorage._offset.getter();
          if (__OFSUB__(v50, v53)) {
            goto LABEL_70;
          }
          v52 += v50 - v53;
LABEL_25:
          uint64_t v54 = __DataStorage._length.getter();
          uint64_t v55 = v104;
          uint64_t v56 = a3;
          if (v54 < v104) {
            uint64_t v55 = v54;
          }
          uint64_t v57 = v52 + v55;
          if (v52) {
            uint64_t v58 = v57;
          }
          else {
            uint64_t v58 = 0;
          }
          sub_10006D0EC(a3, v15);
          uint64_t v59 = a9;
          sub_10006D0EC(a9, a10);
          uint64_t v60 = a1;
          unint64_t v61 = a2;
          sub_10006D0EC(a1, a2);
          uint64_t v62 = a5;
          unint64_t v99 = a10;
          long long v63 = v135;
          uint64_t v95 = v58;
          uint64_t v97 = a9;
          unint64_t v92 = v15;
          uint64_t v93 = v52;
          long long v64 = v120;
          char v65 = a8 & 1;
          uint64_t v66 = a1;
          unint64_t v67 = a2;
          goto LABEL_41;
        case 2uLL:
          uint64_t v117 = a7;
          uint64_t v127 = *(void *)(a3 + 16);
          uint64_t v103 = *(void *)(a3 + 24);
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a3, v15);
          sub_10006D0EC(a9, a10);
          uint64_t v105 = a3;
          swift_retain();
          swift_retain();
          uint64_t v34 = __DataStorage._bytes.getter();
          if (v34)
          {
            uint64_t v35 = v34;
            uint64_t v36 = __DataStorage._offset.getter();
            uint64_t v37 = v127;
            if (__OFSUB__(v127, v36)) {
              goto LABEL_68;
            }
            uint64_t v38 = v35 + v127 - v36;
          }
          else
          {
            uint64_t v38 = 0;
            uint64_t v37 = v127;
          }
          uint64_t v122 = a6;
          uint64_t v77 = v103 - v37;
          if (!__OFSUB__(v103, v37))
          {
            uint64_t v78 = __DataStorage._length.getter();
            if (v78 >= v77) {
              uint64_t v79 = v77;
            }
            else {
              uint64_t v79 = v78;
            }
            uint64_t v80 = v38 + v79;
            if (v38) {
              uint64_t v81 = v80;
            }
            else {
              uint64_t v81 = 0;
            }
            uint64_t v82 = v105;
            sub_10006D0EC(v105, v15);
            sub_10006D0EC(a9, a10);
            uint64_t v83 = a1;
            unint64_t v84 = a2;
            sub_10006D0EC(a1, a2);
            int v30 = sub_1000A51B4(a5, v122, a8 & 1, a1, a2, (uint64_t)v135, (uint64_t)v135, v105, v15, v38, v81, a9, a10);
            sub_10006D144(a9, a10);
            sub_10006D144(v105, v15);
            sub_10006D144(a1, a2);
            goto LABEL_60;
          }
LABEL_66:
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          return result;
        case 3uLL:
          memset(v134, 0, 14);
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a9, a10);
          int64_t v45 = a6;
          uint64_t v46 = a1;
          uint64_t v47 = a3;
          int v48 = sub_1000A51B4(a5, v45, a8 & 1, a1, v16, (uint64_t)v135, (uint64_t)v135, a3, v15, (uint64_t)v134, (uint64_t)v134, a9, a10);
          goto LABEL_20;
        default:
          v134[0] = a3;
          LOWORD(v134[1]) = a4;
          BYTE2(v134[1]) = BYTE2(a4);
          BYTE3(v134[1]) = BYTE3(a4);
          BYTE4(v134[1]) = BYTE4(a4);
          BYTE5(v134[1]) = BYTE5(a4);
          unint64_t v17 = a4;
          uint64_t v132 = (char *)v134 + BYTE6(a4);
          uint64_t v18 = a3;
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a9, a10);
          unint64_t v98 = a10;
          uint64_t v25 = v135;
          uint64_t v94 = (uint64_t)v132;
          uint64_t v96 = a9;
          unint64_t v91 = v17;
          id v19 = a5;
          char v20 = a6;
          char v21 = a8 & 1;
          uint64_t v22 = a1;
          uint64_t v23 = a1;
          unint64_t v24 = v16;
          goto LABEL_8;
      }
    default:
      v135[0] = a1;
      LOWORD(v135[1]) = a2;
      BYTE2(v135[1]) = BYTE2(a2);
      BYTE3(v135[1]) = BYTE3(a2);
      BYTE4(v135[1]) = BYTE4(a2);
      BYTE5(v135[1]) = BYTE5(a2);
      uint64_t v102 = (char *)v135 + BYTE6(a2);
      switch(a4 >> 62)
      {
        case 1uLL:
          uint64_t v117 = a7;
          uint64_t v68 = (int)a3;
          uint64_t v101 = (a3 >> 32) - (int)a3;
          if (a3 >> 32 < (int)a3) {
            goto LABEL_65;
          }
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a3, v15);
          sub_10006D0EC(a9, a10);
          uint64_t v70 = __DataStorage._bytes.getter();
          id v121 = a6;
          if (!v70) {
            goto LABEL_35;
          }
          uint64_t v71 = __DataStorage._offset.getter();
          if (__OFSUB__(v68, v71)) {
            goto LABEL_71;
          }
          v70 += v68 - v71;
LABEL_35:
          uint64_t v72 = __DataStorage._length.getter();
          uint64_t v73 = v101;
          if (v72 < v101) {
            uint64_t v73 = v72;
          }
          uint64_t v74 = v70 + v73;
          if (v70) {
            uint64_t v75 = v74;
          }
          else {
            uint64_t v75 = 0;
          }
          uint64_t v56 = a3;
          sub_10006D0EC(a3, v15);
          uint64_t v59 = a9;
          sub_10006D0EC(a9, a10);
          uint64_t v60 = a1;
          unint64_t v61 = a2;
          sub_10006D0EC(a1, a2);
          uint64_t v62 = a5;
          unint64_t v99 = a10;
          uint64_t v95 = v75;
          uint64_t v97 = a9;
          unint64_t v92 = v15;
          uint64_t v93 = v70;
          long long v64 = v121;
          char v65 = a8 & 1;
          uint64_t v66 = a1;
          unint64_t v67 = a2;
          long long v63 = v102;
LABEL_41:
          int v30 = sub_1000A51B4(v62, v64, v65, v66, v67, (uint64_t)v135, (uint64_t)v63, v56, v92, v93, v95, v97, v99);
          sub_10006D144(v59, a10);
          sub_10006D144(v56, v15);
          sub_10006D144(v60, v61);
          sub_10006D144(v56, v15);
          sub_10006D144(v60, v61);
          uint64_t v76 = v56;
          unint64_t v16 = v61;
          goto LABEL_61;
        case 2uLL:
          uint64_t v117 = a7;
          uint64_t v128 = *(void *)(a3 + 16);
          uint64_t v100 = *(void *)(a3 + 24);
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a3, v15);
          sub_10006D0EC(a9, a10);
          uint64_t v106 = a3;
          swift_retain();
          swift_retain();
          uint64_t v40 = __DataStorage._bytes.getter();
          if (v40)
          {
            uint64_t v41 = v40;
            uint64_t v42 = __DataStorage._offset.getter();
            uint64_t v43 = v128;
            if (__OFSUB__(v128, v42)) {
              goto LABEL_69;
            }
            uint64_t v44 = v41 + v128 - v42;
          }
          else
          {
            uint64_t v44 = 0;
            uint64_t v43 = v128;
          }
          uint64_t v123 = a6;
          uint64_t v85 = v100 - v43;
          if (__OFSUB__(v100, v43)) {
            goto LABEL_67;
          }
          uint64_t v86 = __DataStorage._length.getter();
          if (v86 >= v85) {
            uint64_t v87 = v85;
          }
          else {
            uint64_t v87 = v86;
          }
          uint64_t v88 = v44 + v87;
          if (v44) {
            uint64_t v89 = v88;
          }
          else {
            uint64_t v89 = 0;
          }
          uint64_t v82 = v106;
          sub_10006D0EC(v106, v15);
          sub_10006D0EC(a9, a10);
          uint64_t v83 = a1;
          unint64_t v84 = a2;
          sub_10006D0EC(a1, a2);
          int v30 = sub_1000A51B4(a5, v123, a8 & 1, a1, a2, (uint64_t)v135, (uint64_t)v102, v106, v15, v44, v89, a9, a10);
          sub_10006D144(a9, a10);
          sub_10006D144(v106, v15);
          sub_10006D144(a1, a2);
LABEL_60:
          swift_release();
          swift_release();
          sub_10006D144(v82, v15);
          sub_10006D144(v83, v84);
          uint64_t v76 = v82;
          unint64_t v16 = v84;
LABEL_61:
          sub_10006D144(v76, v15);
          uint64_t v11 = v117;
LABEL_62:
          sub_10006D144(a1, v16);
          uint64_t result = sub_10006D144(a9, v12);
          *uint64_t v11 = v30;
          return result;
        case 3uLL:
          memset(v134, 0, 14);
          uint64_t v47 = a3;
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a9, a10);
          uint64_t v49 = a6;
          uint64_t v46 = a1;
          int v48 = sub_1000A51B4(a5, v49, a8 & 1, a1, v16, (uint64_t)v135, (uint64_t)v102, v47, v15, (uint64_t)v134, (uint64_t)v134, a9, a10);
LABEL_20:
          int v30 = v48;
          sub_10006D144(v46, v16);
          sub_10006D144(v47, v15);
          goto LABEL_62;
        default:
          v134[0] = a3;
          LOWORD(v134[1]) = a4;
          BYTE2(v134[1]) = BYTE2(a4);
          BYTE3(v134[1]) = BYTE3(a4);
          BYTE4(v134[1]) = BYTE4(a4);
          BYTE5(v134[1]) = BYTE5(a4);
          unint64_t v17 = a4;
          uint64_t v131 = (char *)v134 + BYTE6(a4);
          uint64_t v18 = a3;
          sub_10006D0EC(a3, a4);
          sub_10006D0EC(a9, a10);
          unint64_t v98 = a10;
          uint64_t v94 = (uint64_t)v131;
          uint64_t v96 = a9;
          unint64_t v91 = v17;
          id v19 = a5;
          char v20 = a6;
          char v21 = a8 & 1;
          uint64_t v22 = a1;
          uint64_t v23 = a1;
          unint64_t v24 = v16;
          uint64_t v25 = v102;
LABEL_8:
          int v30 = sub_1000A51B4(v19, v20, v21, v23, v24, (uint64_t)v135, (uint64_t)v25, v18, v91, (uint64_t)v134, v94, v96, v98);
          sub_10006D144(v22, v16);
          sub_10006D144(v18, v17);
          goto LABEL_62;
      }
  }
}

uint64_t sub_1000A0BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, _DWORD *a9@<X8>, unint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v12 = a9;
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      uint64_t v40 = (a3 >> 32) - (int)a3;
      char v42 = a7 & 1;
      int v48 = a9;
      sub_10006D0EC(a8, a10);
      sub_10006D0EC(a11, a12);
      sub_10006D0EC(a3, a4);
      uint64_t v22 = __DataStorage._bytes.getter();
      if (v22)
      {
        uint64_t v23 = __DataStorage._offset.getter();
        if (!__OFSUB__((int)a3, v23))
        {
          v22 += (int)a3 - v23;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v24 = __DataStorage._length.getter();
      uint64_t v25 = v40;
      if (v24 < v40) {
        uint64_t v25 = v24;
      }
      uint64_t v26 = v22 + v25;
      if (v22) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      sub_10006D0EC(a8, a10);
      sub_10006D0EC(a11, a12);
      sub_10006D0EC(a3, a4);
      int v19 = sub_1000A51B4(a5, a6, v42, a8, a10, a1, a2, a3, a4, v22, v27, a11, a12);
      sub_10006D144(a11, a12);
      sub_10006D144(a3, a4);
      sub_10006D144(a8, a10);
      sub_10006D144(a11, a12);
      sub_10006D144(a3, a4);
      uint64_t result = sub_10006D144(a8, a10);
LABEL_24:
      unint64_t v12 = v48;
LABEL_27:
      *unint64_t v12 = v19;
      return result;
    case 2uLL:
      char v43 = a7 & 1;
      int v48 = a9;
      uint64_t v29 = *(void *)(a3 + 16);
      uint64_t v41 = *(void *)(a3 + 24);
      sub_10006D0EC(a8, a10);
      sub_10006D0EC(a11, a12);
      sub_10006D0EC(a3, a4);
      swift_retain();
      swift_retain();
      uint64_t v30 = __DataStorage._bytes.getter();
      if (!v30) {
        goto LABEL_16;
      }
      uint64_t v31 = __DataStorage._offset.getter();
      if (__OFSUB__(v29, v31)) {
        goto LABEL_30;
      }
      v30 += v29 - v31;
LABEL_16:
      BOOL v32 = __OFSUB__(v41, v29);
      uint64_t v33 = v41 - v29;
      if (v32) {
        goto LABEL_29;
      }
      uint64_t v34 = __DataStorage._length.getter();
      if (v34 >= v33) {
        uint64_t v35 = v33;
      }
      else {
        uint64_t v35 = v34;
      }
      uint64_t v36 = v30 + v35;
      if (v30) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      sub_10006D0EC(a8, a10);
      sub_10006D0EC(a11, a12);
      sub_10006D0EC(a3, a4);
      int v19 = sub_1000A51B4(a5, a6, v43, a8, a10, a1, a2, a3, a4, v30, v37, a11, a12);
      sub_10006D144(a11, a12);
      sub_10006D144(a3, a4);
      sub_10006D144(a8, a10);
      sub_10006D144(a11, a12);
      sub_10006D144(a3, a4);
      sub_10006D144(a8, a10);
      swift_release();
      uint64_t result = swift_release();
      goto LABEL_24;
    case 3uLL:
      memset(v54, 0, 14);
      char v44 = a7 & 1;
      sub_10006D0EC(a8, a10);
      sub_10006D0EC(a11, a12);
      uint64_t v39 = a8;
      int v19 = sub_1000A51B4(a5, a6, v44, a8, a10, a1, a2, a3, a4, (uint64_t)v54, (uint64_t)v54, a11, a12);
      sub_10006D144(a11, a12);
      sub_10006D144(a3, a4);
      uint64_t v20 = v39;
      unint64_t v21 = a10;
      goto LABEL_26;
    default:
      v54[0] = a3;
      LOWORD(v54[1]) = a4;
      BYTE2(v54[1]) = BYTE2(a4);
      BYTE3(v54[1]) = BYTE3(a4);
      BYTE4(v54[1]) = BYTE4(a4);
      BYTE5(v54[1]) = BYTE5(a4);
      char v18 = a7 & 1;
      sub_10006D0EC(a8, a10);
      sub_10006D0EC(a11, a12);
      int v19 = sub_1000A51B4(a5, a6, v18, a8, a10, a1, a2, a3, a4, (uint64_t)v54, (uint64_t)v54 + BYTE6(a4), a11, a12);
      sub_10006D144(a11, a12);
      sub_10006D144(a3, a4);
      uint64_t v20 = a8;
      unint64_t v21 = a10;
LABEL_26:
      uint64_t result = sub_10006D144(v20, v21);
      goto LABEL_27;
  }
}

uint64_t sub_1000A10C4@<X0>(char a1@<W2>, uint64_t a2@<X3>, unint64_t a3@<X4>, uint64_t a4@<X7>, _DWORD *a5@<X8>, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a1) {
    ccaes_ccm_decrypt_mode();
  }
  else {
    ccaes_ccm_encrypt_mode();
  }
  switch(a3 >> 62)
  {
    case 1uLL:
      if (!__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_8;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      JUMPOUT(0x1000A1278);
    case 2uLL:
      if (!__OFSUB__(*(void *)(a2 + 24), *(void *)(a2 + 16))) {
        goto LABEL_8;
      }
      goto LABEL_18;
    default:
LABEL_8:
      switch(a6 >> 62)
      {
        case 1uLL:
          if (!__OFSUB__(HIDWORD(a4), a4)) {
            goto LABEL_12;
          }
          goto LABEL_19;
        case 2uLL:
          if (!__OFSUB__(*(void *)(a4 + 24), *(void *)(a4 + 16))) {
            goto LABEL_12;
          }
          goto LABEL_20;
        default:
LABEL_12:
          switch(a10 >> 62)
          {
            case 1uLL:
              if (!__OFSUB__(HIDWORD(a9), a9)) {
                goto LABEL_16;
              }
              goto LABEL_21;
            case 2uLL:
              if (!__OFSUB__(*(void *)(a9 + 24), *(void *)(a9 + 16))) {
                goto LABEL_16;
              }
              goto LABEL_22;
            default:
LABEL_16:
              uint64_t result = ccccm_one_shot();
              *a5 = result;
              return result;
          }
      }
  }
}

uint64_t sub_1000A12B8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10008BECC(*(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaPairing_onOwnerPairingStart));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_1000A13AC()
{
  return type metadata accessor for AlishaPairing();
}

uint64_t type metadata accessor for AlishaPairing()
{
  uint64_t result = qword_1004547E8;
  if (!qword_1004547E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000A1400()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AlishaPairing.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AlishaPairing.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A1630);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaPairing.State()
{
  return &type metadata for AlishaPairing.State;
}

unsigned char *storeEnumTagSinglePayload for AlishaPairing.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000A1734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaPairing.Mode()
{
  return &type metadata for AlishaPairing.Mode;
}

unint64_t sub_1000A1770()
{
  unint64_t result = qword_1004548B0;
  if (!qword_1004548B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004548B0);
  }
  return result;
}

unint64_t sub_1000A17C8()
{
  unint64_t result = qword_1004548B8;
  if (!qword_1004548B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004548B8);
  }
  return result;
}

void sub_1000A181C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v5 = a1;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  int v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  *uint64_t v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_release();

    __break(1u);
    return;
  }
  (*(void (**)(char *, id, uint64_t))(v6 + 16))(v8, v5, a2);
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  if (swift_dynamicCast())
  {
    id v16 = v59;
    if ([v59 endPointType] != (id)1)
    {

      return;
    }
    uint64_t v17 = OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint;
    uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
    id v19 = v16;
    uint64_t v20 = v19;
    if (v18)
    {
      swift_retain_n();
      id v5 = v20;
      unint64_t v21 = Logger.logObject.getter();
      int v22 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v21, (os_log_type_t)v22))
      {

        swift_release_n();
        goto LABEL_14;
      }
      LODWORD(v56) = v22;
      os_log_t v57 = v21;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      id v59 = v55;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v24 = *(void **)(v3 + v17);
      if (v24)
      {
        v53[1] = v23 + 4;
        id v25 = [v24 publicKeyIdentifier];
        uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;

        uint64_t v29 = sub_10023CDF4(v26, v28);
        uint64_t v54 = 0;
        uint64_t v58 = (uint64_t)v29;
        v53[0] = sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
        sub_10006D144(v26, v28);
        uint64_t v58 = sub_100290514(v30, v32, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 12) = 2080;
        id v33 = [v5 publicKeyIdentifier];
        uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;

        uint64_t v58 = (uint64_t)sub_10023CDF4(v34, v36);
        uint64_t v37 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v39 = v38;
        swift_bridgeObjectRelease();
        sub_10006D144(v34, v36);
        uint64_t v58 = sub_100290514(v37, v39, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        unint64_t v21 = v57;
        _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v56, "We're tracking endpoint %s but got a new one %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
LABEL_14:

        sub_100093B18(2);
        return;
      }
      goto LABEL_19;
    }
    id v40 = v19;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    int v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      LODWORD(v57) = v43;
      char v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      id v59 = v56;
      *(_DWORD *)char v44 = 136315138;
      uint64_t v54 = v44 + 4;
      uint64_t v55 = v44;
      id v45 = [v40 publicKeyIdentifier];
      uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      uint64_t v58 = (uint64_t)sub_10023CDF4(v46, v48);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v49 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      sub_10006D144(v46, v48);
      uint64_t v58 = sub_100290514(v49, v51, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v57, "Endpoint created %s", v55, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v52 = *(void **)(v3 + v17);
    *(void *)(v3 + v17) = v40;
  }
}

void sub_1000A1F3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  int v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (uint64_t *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  *uint64_t v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  if (swift_dynamicCast())
  {
    id v16 = v43;
    if ([v43 endPointType] == (id)1)
    {
      uint64_t v17 = OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint;
      uint64_t v18 = *(void **)(v3 + OBJC_IVAR____TtC10seserviced13AlishaPairing_endpoint);
      if (v18)
      {
        id v19 = v16;
        id v20 = v18;
        char v21 = static NSObject.== infix(_:_:)();

        if (v21)
        {
          id v22 = v19;
          uint64_t v23 = Logger.logObject.getter();
          os_log_type_t v24 = static os_log_type_t.info.getter();
          int v25 = v24;
          if (os_log_type_enabled(v23, v24))
          {
            int v41 = v25;
            uint64_t v26 = (uint8_t *)swift_slowAlloc();
            id v40 = (void *)swift_slowAlloc();
            id v43 = v40;
            *(_DWORD *)uint64_t v26 = 136315138;
            unint64_t v39 = v26;
            id v27 = [v22 publicKeyIdentifier:v26 + 4];
            uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v30 = v29;

            uint64_t v42 = (uint64_t)sub_10023CDF4(v28, v30);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v33 = v32;
            swift_bridgeObjectRelease();
            sub_10006D144(v28, v30);
            uint64_t v42 = sub_100290514(v31, v33, (uint64_t *)&v43);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v41, "Endpoint updated %s", v39, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v37 = *(void **)(v3 + v17);
          *(void *)(v3 + v17) = v22;

          return;
        }
      }
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        unint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Got an update for a different endpoint", v36, 2u);
        swift_slowDealloc();
      }
    }
  }
}

uint64_t sub_1000A2424(uint64_t a1, uint64_t a2)
{
  return sub_1000A243C(a1, a2);
}

uint64_t sub_1000A243C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  Swift::Int v5 = sub_1000A9C44(v4, a2);
  swift_release();
  *(void *)(a1 + 16) = v5;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A24C8(id *a1)
{
  id v1 = *a1;
  if ([*a1 endPointType] == (id)1)
  {
    uint64_t result = (uint64_t)[v1 bleUUID];
    if (!result) {
      return result;
    }

    id v3 = [v1 revocationAttestation];
    if (!v3) {
      return 1;
    }
    uint64_t v4 = v3;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;

    sub_10006D144(v5, v7);
  }
  return 0;
}

uint64_t sub_1000A2570(void **a1)
{
  return sub_1001F11DC(*a1);
}

uint64_t sub_1000A2578(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3 = isStackAllocationSafe;
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v5 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v6 = 8 * v5;
  if ((v4 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0), v6);
    sub_1000A26DC((unint64_t *)((char *)&v12 - ((v6 + 15) & 0x3FFFFFFFFFFFFFF0)), v5, v3);
    uint64_t v8 = v7;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v6);
    sub_1000A26DC((unint64_t *)v9, v5, v3);
    uint64_t v8 = v10;
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

void sub_1000A26DC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v39 = a2;
  id v40 = a1;
  size_t v6 = (os_unfair_lock_s *)type metadata accessor for UUID();
  __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v11 = 0;
  uint64_t v46 = v8;
  uint64_t v47 = a3;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v41 = 0;
  uint64_t v42 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v45 = v8 + 16;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  char v44 = (void (**)(char *, os_unfair_lock_s *))(v8 + 8);
  while (v15)
  {
    unint64_t v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v17 = v16 | (v11 << 6);
LABEL_17:
    char v21 = v6;
    uint64_t v22 = (*(uint64_t (**)(char *, unint64_t, os_unfair_lock_s *))(v46 + 16))(v10, *(void *)(v47 + 48) + *(void *)(v46 + 72) * v17, v6);
    uint64_t v24 = __chkstk_darwin(v22, v23);
    *(&v38 - 2) = (uint64_t)v10;
    if (qword_100453910 != -1) {
      uint64_t v24 = swift_once();
    }
    uint64_t v26 = __chkstk_darwin(v24, v25);
    *(&v38 - 2) = (uint64_t)sub_1000A9E78;
    *(&v38 - 1) = (uint64_t)(&v38 - 4);
    uint64_t v28 = __chkstk_darwin(v26, v27);
    *(&v38 - 4) = v29;
    *(&v38 - 3) = (uint64_t)sub_100078544;
    *(&v38 - 2) = v30;
    __chkstk_darwin(v28, v31);
    *(&v38 - 2) = (uint64_t)sub_1000A9E80;
    *(&v38 - 1) = v32;
    size_t v6 = v33 + 4;
    os_unfair_lock_lock(v33 + 4);
    sub_1000A9EA0(&v48);
    if (v4) {
      goto LABEL_32;
    }
    uint64_t v4 = 0;
    os_unfair_lock_unlock(v6);
    char v34 = v48;
    size_t v6 = v21;
    (*v44)(v10, v21);
    if ((v34 & 1) == 0)
    {
      *(unint64_t *)((char *)v40 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      BOOL v18 = __OFADD__(v41++, 1);
      if (v18) {
        goto LABEL_31;
      }
    }
  }
  BOOL v18 = __OFADD__(v11++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v11 >= v43) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v42 + 8 * v11);
  if (v19)
  {
LABEL_16:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }
  int64_t v20 = v11 + 1;
  if (v11 + 1 >= v43) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v42 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v11 + 2;
  if (v11 + 2 >= v43) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v42 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v11 + 3;
  if (v11 + 3 >= v43)
  {
LABEL_28:
    uint64_t v35 = v39;
    uint64_t v36 = v41;
    uint64_t v37 = v47;
    swift_retain();
    sub_1000F9AA8(v40, v35, v36, v37);
    return;
  }
  unint64_t v19 = *(void *)(v42 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v11 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v43) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v42 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  os_unfair_lock_unlock(v6);
  __break(1u);
}

uint64_t sub_1000A2ABC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001E6148(*(uint64_t (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1000A2ADC()
{
  return sub_1000A243C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000A2AF8@<X0>(uint64_t (*a1)(uint64_t *)@<X1>, unsigned char *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = swift_bridgeObjectRetain();
  char v5 = sub_1000A916C(v4, a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 & 1;
  return result;
}

void sub_1000A2B8C()
{
}

void sub_1000A2B9C(const char *a1, char a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v1sub_1000A2B9C("Transaction emulation started", 1) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    if (*(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
    {
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, a1, v15, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) = a2;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A2D80(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = v3;
  uint64_t v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000A98B0((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v7 = __s1[2];
    uint64_t v54 = __s1[3];
    uint64_t v8 = __s1[4];
    int64_t v9 = __s1[5];
    unint64_t v10 = __s1[6];
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v54 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
  }
  int64_t v53 = (unint64_t)(v8 + 64) >> 6;
  unint64_t v58 = a3;
  BOOL v14 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v52 = v14;
  unint64_t v56 = a3 >> 62;
  uint64_t v57 = BYTE6(a3);
  uint64_t v55 = v7;
  while (2)
  {
    int64_t v15 = v9;
    if (v7 < 0)
    {
      uint64_t v18 = __CocoaSet.Iterator.next()();
      if (!v18) {
        goto LABEL_75;
      }
      uint64_t v60 = v18;
      type metadata accessor for Peer();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v19 = __s1[0];
      swift_unknownObjectRelease();
      uint64_t v16 = v10;
      if (!v19) {
        goto LABEL_77;
      }
    }
    else
    {
      if (v10)
      {
        uint64_t v16 = (v10 - 1) & v10;
        unint64_t v17 = __clz(__rbit64(v10)) | (v9 << 6);
      }
      else
      {
        ++v9;
        if (__OFADD__(v15, 1))
        {
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
        }
        if (v9 >= v53) {
          goto LABEL_75;
        }
        unint64_t v20 = *(void *)(v54 + 8 * v9);
        if (!v20)
        {
          int64_t v21 = v15 + 2;
          if (v15 + 2 >= v53) {
            goto LABEL_75;
          }
          unint64_t v20 = *(void *)(v54 + 8 * v21);
          if (v20) {
            goto LABEL_28;
          }
          int64_t v21 = v15 + 3;
          if (v15 + 3 >= v53) {
            goto LABEL_75;
          }
          unint64_t v20 = *(void *)(v54 + 8 * v21);
          if (v20) {
            goto LABEL_28;
          }
          int64_t v21 = v15 + 4;
          if (v15 + 4 >= v53) {
            goto LABEL_75;
          }
          unint64_t v20 = *(void *)(v54 + 8 * v21);
          if (v20)
          {
LABEL_28:
            int64_t v9 = v21;
          }
          else
          {
            int64_t v9 = v15 + 5;
            if (v15 + 5 >= v53)
            {
LABEL_75:
              uint64_t v19 = 0;
              goto LABEL_77;
            }
            unint64_t v20 = *(void *)(v54 + 8 * v9);
            if (!v20)
            {
              int64_t v47 = v15 + 6;
              do
              {
                if (v53 == v47) {
                  goto LABEL_75;
                }
                unint64_t v20 = *(void *)(v54 + 8 * v47++);
              }
              while (!v20);
              int64_t v9 = v47 - 1;
            }
          }
        }
        uint64_t v16 = (v20 - 1) & v20;
        unint64_t v17 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v7 + 48) + 8 * v17);
      swift_retain();
      if (!v19) {
        goto LABEL_77;
      }
    }
    unint64_t v59 = v16;
    uint64_t v23 = *(void *)(v19 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v22 = *(void *)(v19 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v22 >> 60 == 15)
    {
      sub_10006D0EC(a2, v58);
      sub_100075868(v23, v22);
      sub_100075868(a2, v58);
      goto LABEL_12;
    }
    uint64_t v24 = 0;
    switch(v22 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v23), v23)) {
          goto LABEL_80;
        }
        uint64_t v24 = HIDWORD(v23) - (int)v23;
LABEL_37:
        sub_10006D0EC(*(void *)(v19 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(void *)(v19 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v23 + 16);
        uint64_t v25 = *(void *)(v23 + 24);
        uint64_t v24 = v25 - v26;
        if (!__OFSUB__(v25, v26)) {
          goto LABEL_37;
        }
        goto LABEL_79;
      case 3uLL:
        break;
      default:
        uint64_t v24 = BYTE6(v22);
        break;
    }
    uint64_t v27 = v57;
    switch(v56)
    {
      case 1uLL:
        uint64_t v27 = HIDWORD(a2) - (int)a2;
        if (v52) {
          goto LABEL_81;
        }
        goto LABEL_42;
      case 2uLL:
        uint64_t v29 = *(void *)(a2 + 16);
        uint64_t v28 = *(void *)(a2 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          goto LABEL_42;
        }
        goto LABEL_82;
      case 3uLL:
        if (v24) {
          goto LABEL_48;
        }
        goto LABEL_76;
      default:
LABEL_42:
        if (v24 != v27)
        {
LABEL_48:
          sub_100075868(v23, v22);
          uint64_t v7 = v55;
LABEL_12:
          swift_release();
          unint64_t v10 = v59;
          continue;
        }
        if (v24 >= 1)
        {
          switch(v22 >> 62)
          {
            case 1uLL:
              if (v23 >> 32 < (int)v23) {
                goto LABEL_83;
              }
              sub_10006D0EC(a2, v58);
              sub_1000758F4(v23, v22);
              sub_10006D0EC(a2, v58);
              uint64_t v41 = __DataStorage._bytes.getter();
              if (v41)
              {
                uint64_t v42 = v41;
                uint64_t v43 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v23, v43)) {
                  goto LABEL_86;
                }
                uint64_t v44 = v42 + (int)v23 - v43;
              }
              else
              {
                uint64_t v44 = 0;
              }
              __DataStorage._length.getter();
              uint64_t v46 = v44;
              uint64_t v31 = (char *)v58;
              uint64_t v7 = a2;
              sub_1001E5240(v46, a2, v58, (char *)__s1);
              if (v4) {
                goto LABEL_90;
              }
              unint64_t v4 = 0;
              sub_10006D144(a2, v58);
              sub_100075868(v23, v22);
              sub_10006D144(a2, v58);
              sub_100075868(v23, v22);
              uint64_t v7 = v55;
              if (__s1[0]) {
                goto LABEL_77;
              }
              goto LABEL_12;
            case 2uLL:
              unint64_t v51 = v4;
              uint64_t v49 = *(void *)(v23 + 24);
              uint64_t v50 = *(void *)(v23 + 16);
              sub_10006D0EC(a2, v58);
              sub_10006D0EC(a2, v58);
              swift_retain();
              swift_retain();
              uint64_t v36 = __DataStorage._bytes.getter();
              if (v36)
              {
                uint64_t v37 = v36;
                uint64_t v38 = __DataStorage._offset.getter();
                uint64_t v39 = v50;
                if (__OFSUB__(v50, v38)) {
                  goto LABEL_85;
                }
                uint64_t v40 = v37 + v50 - v38;
              }
              else
              {
                uint64_t v40 = 0;
                uint64_t v39 = v50;
              }
              if (__OFSUB__(v49, v39)) {
                goto LABEL_84;
              }
              uint64_t v31 = (char *)(v22 & 0x3FFFFFFFFFFFFFFFLL);
              __DataStorage._length.getter();
              uint64_t v45 = v40;
              unint64_t v4 = v58;
              uint64_t v7 = a2;
              sub_1001E5240(v45, a2, v58, (char *)__s1);
              if (v51) {
                goto LABEL_89;
              }
              sub_10006D144(a2, v58);
              swift_release();
              swift_release();
              sub_10006D144(a2, v58);
              sub_100075868(v23, v22);
              char v35 = __s1[0];
              uint64_t v7 = v55;
              goto LABEL_63;
            case 3uLL:
              memset(__s1, 0, 14);
              uint64_t v31 = (char *)v58;
              uint64_t v32 = a2;
              sub_10006D0EC(a2, v58);
              sub_10006D0EC(a2, v58);
              sub_1001E5240((uint64_t)__s1, a2, v58, (char *)&v60);
              uint64_t v7 = v55;
              if (v4) {
                goto LABEL_88;
              }
              unint64_t v4 = 0;
              sub_10006D144(a2, v58);
              sub_10006D144(a2, v58);
              sub_100075868(v23, v22);
              if (v60 == 1) {
                goto LABEL_77;
              }
              goto LABEL_12;
            default:
              __s1[0] = v23;
              LOWORD(__s1[1]) = v22;
              BYTE2(__s1[1]) = BYTE2(v22);
              BYTE3(__s1[1]) = BYTE3(v22);
              BYTE4(__s1[1]) = BYTE4(v22);
              BYTE5(__s1[1]) = BYTE5(v22);
              uint64_t v31 = (char *)__s1 + BYTE6(v22);
              uint64_t v32 = a2;
              unint64_t v33 = v4;
              unint64_t v4 = v58;
              sub_10006D0EC(a2, v58);
              sub_10006D0EC(a2, v58);
              unint64_t v34 = v33;
              sub_1001E5240((uint64_t)__s1, a2, v58, (char *)&v60);
              uint64_t v7 = v55;
              if (v34)
              {
                sub_10006D144(a2, v58);
                __break(1u);
LABEL_88:
                sub_10006D144(v32, (unint64_t)v31);
                __break(1u);
LABEL_89:
                sub_10006D144(v7, v4);
                swift_release();
                swift_release();
                __break(1u);
LABEL_90:
                sub_10006D144(v7, (unint64_t)v31);
                sub_100075868(v23, v22);
                __break(1u);
                JUMPOUT(0x1000A360CLL);
              }
              sub_10006D144(a2, v58);
              sub_10006D144(a2, v58);
              sub_100075868(v23, v22);
              char v35 = v60;
LABEL_63:
              unint64_t v4 = 0;
              if (v35) {
                goto LABEL_77;
              }
              goto LABEL_12;
          }
        }
LABEL_76:
        sub_100075868(v23, v22);
LABEL_77:
        sub_10008C4F0();
        return v19;
    }
  }
}

uint64_t sub_1000A363C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000A98B0((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = __s1[2];
    uint64_t v52 = __s1[3];
    uint64_t v6 = __s1[4];
    int64_t v7 = __s1[5];
    unint64_t v8 = __s1[6];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v52 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  int64_t v50 = (unint64_t)(v6 + 64) >> 6;
  unint64_t v56 = a3;
  uint64_t v57 = a2;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v49 = v12;
  uint64_t v48 = HIDWORD(a2) - (int)a2;
  unint64_t v54 = a3 >> 62;
  uint64_t v55 = BYTE6(a3);
  uint64_t v53 = v5;
  while (2)
  {
    unint64_t v13 = v7;
    if (v5 < 0)
    {
      uint64_t v16 = __CocoaSet.Iterator.next()();
      uint64_t v17 = v16;
      if (!v16) {
        goto LABEL_79;
      }
      uint64_t v58 = v16;
      type metadata accessor for Peer();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v18 = __s1[0];
      swift_unknownObjectRelease();
      uint64_t v14 = v8;
      if (!v18)
      {
LABEL_75:
        uint64_t v17 = 0;
        goto LABEL_79;
      }
    }
    else
    {
      if (v8)
      {
        uint64_t v14 = (v8 - 1) & v8;
        unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
      }
      else
      {
        ++v7;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
        }
        if (v7 >= v50) {
          goto LABEL_76;
        }
        unint64_t v19 = *(void *)(v52 + 8 * v7);
        if (!v19)
        {
          int64_t v20 = v13 + 2;
          if ((uint64_t)(v13 + 2) >= v50) {
            goto LABEL_76;
          }
          unint64_t v19 = *(void *)(v52 + 8 * v20);
          if (v19) {
            goto LABEL_28;
          }
          int64_t v20 = v13 + 3;
          if ((uint64_t)(v13 + 3) >= v50) {
            goto LABEL_76;
          }
          unint64_t v19 = *(void *)(v52 + 8 * v20);
          if (v19) {
            goto LABEL_28;
          }
          int64_t v20 = v13 + 4;
          if ((uint64_t)(v13 + 4) >= v50) {
            goto LABEL_76;
          }
          unint64_t v19 = *(void *)(v52 + 8 * v20);
          if (v19)
          {
LABEL_28:
            int64_t v7 = v20;
          }
          else
          {
            int64_t v7 = v13 + 5;
            if ((uint64_t)(v13 + 5) >= v50)
            {
LABEL_76:
              uint64_t v17 = 0;
              goto LABEL_79;
            }
            unint64_t v19 = *(void *)(v52 + 8 * v7);
            if (!v19)
            {
              unint64_t v44 = v13 + 6;
              do
              {
                if (v50 == v44) {
                  goto LABEL_76;
                }
                unint64_t v19 = *(void *)(v52 + 8 * v44++);
              }
              while (!v19);
              int64_t v7 = v44 - 1;
            }
          }
        }
        uint64_t v14 = (v19 - 1) & v19;
        unint64_t v15 = __clz(__rbit64(v19)) + (v7 << 6);
      }
      uint64_t v18 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      swift_retain();
      if (!v18) {
        goto LABEL_75;
      }
    }
    uint64_t v22 = *(void *)(v18 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v21 = *(void *)(v18 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v21 >> 60 == 15)
    {
      sub_10006D0EC(v57, v56);
      sub_100075868(v22, v21);
      sub_100075868(v57, v56);
      goto LABEL_12;
    }
    uint64_t v23 = 0;
    switch(v21 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v22), v22)) {
          goto LABEL_81;
        }
        uint64_t v23 = HIDWORD(v22) - (int)v22;
LABEL_37:
        sub_10006D0EC(*(void *)(v18 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(void *)(v18 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
        break;
      case 2uLL:
        uint64_t v25 = *(void *)(v22 + 16);
        uint64_t v24 = *(void *)(v22 + 24);
        uint64_t v23 = v24 - v25;
        if (!__OFSUB__(v24, v25)) {
          goto LABEL_37;
        }
        goto LABEL_82;
      case 3uLL:
        break;
      default:
        uint64_t v23 = BYTE6(v21);
        break;
    }
    uint64_t v26 = v55;
    switch(v54)
    {
      case 1uLL:
        uint64_t v26 = v48;
        if (v49) {
          goto LABEL_83;
        }
        goto LABEL_42;
      case 2uLL:
        uint64_t v28 = *(void *)(v57 + 16);
        uint64_t v27 = *(void *)(v57 + 24);
        BOOL v29 = __OFSUB__(v27, v28);
        uint64_t v26 = v27 - v28;
        if (!v29) {
          goto LABEL_42;
        }
        goto LABEL_84;
      case 3uLL:
        if (v23) {
          goto LABEL_49;
        }
        goto LABEL_77;
      default:
LABEL_42:
        if (v23 != v26)
        {
LABEL_49:
          sub_100075868(v22, v21);
          uint64_t v5 = v53;
LABEL_12:
          swift_release();
          unint64_t v8 = v14;
          continue;
        }
        if (v23 < 1)
        {
LABEL_77:
          sub_100075868(v22, v21);
          swift_release();
          uint64_t v17 = 1;
        }
        else
        {
          switch(v21 >> 62)
          {
            case 1uLL:
              if (v22 >> 32 < (int)v22) {
                goto LABEL_85;
              }
              sub_10006D0EC(v57, v56);
              sub_1000758F4(v22, v21);
              sub_10006D0EC(v57, v56);
              uint64_t v36 = __DataStorage._bytes.getter();
              if (v36)
              {
                uint64_t v37 = v36;
                uint64_t v38 = __DataStorage._offset.getter();
                uint64_t v39 = v51;
                if (__OFSUB__((int)v22, v38)) {
                  goto LABEL_88;
                }
                uint64_t v40 = v37 + (int)v22 - v38;
              }
              else
              {
                uint64_t v40 = 0;
                uint64_t v39 = v51;
              }
              __DataStorage._length.getter();
              uint64_t v43 = v40;
              BOOL v30 = (char *)v56;
              uint64_t v5 = v57;
              sub_1001E5240(v43, v57, v56, (char *)__s1);
              uint64_t v51 = v39;
              if (v39) {
                goto LABEL_92;
              }
              sub_10006D144(v57, v56);
              sub_100075868(v22, v21);
              sub_10006D144(v57, v56);
              sub_100075868(v22, v21);
              swift_release();
              uint64_t v5 = v53;
              unint64_t v8 = v14;
              if ((__s1[0] & 1) == 0) {
                continue;
              }
LABEL_78:
              uint64_t v17 = 1;
              break;
            case 2uLL:
              uint64_t v46 = *(void *)(v22 + 24);
              uint64_t v47 = *(void *)(v22 + 16);
              sub_10006D0EC(v57, v56);
              BOOL v30 = (char *)(v21 & 0x3FFFFFFFFFFFFFFFLL);
              sub_10006D0EC(v57, v56);
              swift_retain();
              swift_retain();
              uint64_t v33 = __DataStorage._bytes.getter();
              if (v33)
              {
                uint64_t v34 = __DataStorage._offset.getter();
                uint64_t v35 = v47;
                if (__OFSUB__(v47, v34)) {
                  goto LABEL_87;
                }
                v33 += v47 - v34;
              }
              else
              {
                uint64_t v35 = v47;
              }
              if (__OFSUB__(v46, v35)) {
                goto LABEL_86;
              }
              __DataStorage._length.getter();
              uint64_t v41 = v33;
              unint64_t v31 = v56;
              uint64_t v5 = v57;
              sub_1001E5240(v41, v57, v56, (char *)__s1);
              if (v51) {
                goto LABEL_91;
              }
              sub_10006D144(v57, v56);
              swift_release();
              swift_release();
              sub_10006D144(v57, v56);
              sub_100075868(v22, v21);
              char v42 = __s1[0];
              swift_release();
              uint64_t v5 = v53;
              uint64_t v51 = 0;
              unint64_t v8 = v14;
              if (v42) {
                goto LABEL_78;
              }
              continue;
            case 3uLL:
              unint64_t v31 = v13;
              memset(__s1, 0, 14);
              BOOL v30 = (char *)v56;
              uint64_t v32 = v57;
              sub_10006D0EC(v57, v56);
              sub_10006D0EC(v57, v56);
              sub_1001E5240((uint64_t)__s1, v57, v56, (char *)&v58);
              uint64_t v5 = v53;
              if (v51) {
                goto LABEL_90;
              }
              sub_10006D144(v57, v56);
              sub_10006D144(v57, v56);
              sub_100075868(v22, v21);
              swift_release();
              unint64_t v8 = v14;
              if ((v58 & 1) == 0) {
                continue;
              }
              uint64_t v17 = 1;
              break;
            default:
              __s1[0] = v22;
              LOWORD(__s1[1]) = v21;
              BYTE2(__s1[1]) = BYTE2(v21);
              BYTE3(__s1[1]) = BYTE3(v21);
              BYTE4(__s1[1]) = BYTE4(v21);
              BYTE5(__s1[1]) = BYTE5(v21);
              BOOL v30 = (char *)__s1 + BYTE6(v21);
              unint64_t v31 = v56;
              uint64_t v32 = v57;
              sub_10006D0EC(v57, v56);
              sub_10006D0EC(v57, v56);
              sub_1001E5240((uint64_t)__s1, v57, v56, (char *)&v58);
              uint64_t v5 = v53;
              if (v51)
              {
                sub_10006D144(v57, v56);
                __break(1u);
LABEL_90:
                sub_10006D144(v32, (unint64_t)v30);
                __break(1u);
LABEL_91:
                sub_10006D144(v5, v31);
                swift_release();
                swift_release();
                __break(1u);
LABEL_92:
                sub_10006D144(v5, (unint64_t)v30);
                sub_100075868(v22, v21);
                __break(1u);
                JUMPOUT(0x1000A3F00);
              }
              sub_10006D144(v57, v56);
              sub_10006D144(v57, v56);
              sub_100075868(v22, v21);
              swift_release();
              uint64_t v51 = 0;
              unint64_t v8 = v14;
              if (v58) {
                goto LABEL_78;
              }
              continue;
          }
        }
LABEL_79:
        sub_10008C4F0();
        return v17;
    }
  }
}

uint64_t sub_1000A3F30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  BOOL v12 = (void *)qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = v12;
  char v14 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2)
  {
    uint64_t v41 = v3;
    uint64_t v42 = a1;
    uint64_t v16 = v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_logger;
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v39 = v16;
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v40 = v4;
      *(_DWORD *)unint64_t v19 = 136315138;
      *(void *)&long long v43 = v20;
      swift_retain();
      uint64_t v21 = UUID.uuidString.getter();
      unint64_t v23 = v22;
      swift_release();
      uint64_t v45 = sub_100290514(v21, v23, (uint64_t *)&v43);
      uint64_t v4 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Peer discovered %s", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v24 = v42;
    uint64_t v25 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
    if (*(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 1)
    {
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v24 + 16))
      {
        uint64_t v28 = sub_1002C0AD0(v26, v27);
        if (v29)
        {
          sub_1000AA580(*(void *)(v24 + 56) + 32 * v28, (uint64_t)&v43);
        }
        else
        {
          long long v43 = 0u;
          long long v44 = 0u;
        }
      }
      else
      {
        long long v43 = 0u;
        long long v44 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v44 + 1))
      {
        if swift_dynamicCast() && (v45)
        {
          *(void *)(v4 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer) = a2;
          swift_release();
          return swift_retain();
        }
      }
      else
      {
        sub_10008E734((uint64_t)&v43, (uint64_t *)&unk_1004556C0);
      }
      BOOL v30 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v30, v36)) {
        goto LABEL_25;
      }
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v36, "Peripheral is not connectable", v37, 2u);
    }
    else
    {
      swift_retain_n();
      BOOL v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v30, v31))
      {
        swift_release_n();
LABEL_25:

        sub_100093B18(2);
        sub_10006D098();
        swift_allocError();
        *uint64_t v38 = 2;
        return swift_willThrow();
      }
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      *(void *)&long long v43 = v33;
      LOBYTE(v45) = *(unsigned char *)(v4 + v25);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v45 = sub_100290514(v34, v35, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Wrong state %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
    }
    swift_slowDealloc();
    goto LABEL_25;
  }
  return result;
}

unint64_t sub_1000A44C4(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      sub_10006C51C(&qword_100455660);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      uint64_t v3 = (unsigned char *)result;
      unint64_t v20 = v1;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v4) {
        return (unint64_t)v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  unint64_t v20 = v1;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4) {
    return (unint64_t)v3;
  }
LABEL_9:
  unint64_t v6 = 0;
  uint64_t v7 = v3 + 56;
  while ((v20 & 0xC000000000000001) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v8 = result;
    BOOL v9 = __OFADD__(v6++, 1);
    if (v9) {
      goto LABEL_27;
    }
LABEL_18:
    Hasher.init(_seed:)();
    type metadata accessor for UUID();
    sub_1000A98B0((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v10 = -1 << v3[32];
    unint64_t v11 = result & ~v10;
    unint64_t v12 = v11 >> 6;
    uint64_t v13 = *(void *)&v7[8 * (v11 >> 6)];
    uint64_t v14 = 1 << v11;
    if (((1 << v11) & v13) != 0)
    {
      swift_retain();
      char v15 = static UUID.== infix(_:_:)();
      uint64_t result = swift_release();
      if (v15)
      {
LABEL_10:
        uint64_t result = swift_release();
        goto LABEL_11;
      }
      uint64_t v16 = ~v10;
      while (1)
      {
        unint64_t v11 = (v11 + 1) & v16;
        unint64_t v12 = v11 >> 6;
        uint64_t v13 = *(void *)&v7[8 * (v11 >> 6)];
        uint64_t v14 = 1 << v11;
        if ((v13 & (1 << v11)) == 0) {
          break;
        }
        swift_retain();
        char v17 = static UUID.== infix(_:_:)();
        uint64_t result = swift_release();
        if (v17) {
          goto LABEL_10;
        }
      }
    }
    *(void *)&v7[8 * v12] = v14 | v13;
    *(void *)(*((void *)v3 + 6) + 8 * v1sub_1000A2B9C("Transaction emulation started", 1) = v8;
    uint64_t v18 = *((void *)v3 + 2);
    BOOL v9 = __OFADD__(v18, 1);
    uint64_t v19 = v18 + 1;
    if (v9) {
      goto LABEL_28;
    }
    *((void *)v3 + 2) = v19;
LABEL_11:
    if (v6 == v4) {
      return (unint64_t)v3;
    }
  }
  if (v6 >= *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_29;
  }
  unint64_t v8 = *(void *)(v20 + 32 + 8 * v6);
  uint64_t result = swift_retain();
  BOOL v9 = __OFADD__(v6++, 1);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000A47B4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      __DataStorage.init(length:)();
      if (v1 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_1000A4854(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_9;
  }
  uint64_t result = __DataStorage._offset.getter();
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_1000A10C4(a4 & 1, a5, a6, a9, &v21, a10, a11, a12, a13, a14);
  if (!v14) {
    return v21;
  }
  return result;
}

uint64_t sub_1000A499C(uint64_t *a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12)
{
  unint64_t v13 = a12;
  char v46 = a2 & 1;
  uint64_t v15 = *a1;
  unint64_t v14 = a1[1];
  uint64_t v16 = v12;
  switch(v14 >> 62)
  {
    case 1uLL:
      uint64_t v24 = v14 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_100378350;
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      uint64_t v40 = v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = (int)v15;
      uint64_t v27 = v15 >> 32;
      uint64_t v38 = a6;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_18;
      }
      if (v27 < (int)v15) {
        goto LABEL_25;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v15, __DataStorage._offset.getter())) {
        goto LABEL_26;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v34 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v26 = (int)v15;
      uint64_t v40 = v34;
      uint64_t v27 = v15 >> 32;
      unint64_t v13 = a12;
LABEL_18:
      if (v27 < v26)
      {
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
      }
      uint64_t v16 = v27;
      uint64_t v35 = v26;
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, v13);
      uint64_t v36 = sub_1000A4854(v35, v16, v40, v46, a3, a4, a5, v38, a7, a8, a9, a10, a11, v13);
      if (v12)
      {
        sub_10006D144(a11, v13);
        sub_10006D144(a7, a8);
        sub_10006D144(a3, a4);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        sub_10006D144(a11, v13);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        *a1 = v15;
        a1[1] = v40 | 0x4000000000000000;
        goto LABEL_23;
      }
      uint64_t v16 = v36;
      sub_10006D144(a11, v13);
      sub_10006D144(a7, a8);
      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      sub_10006D144(a7, a8);
      sub_10006D144(a11, v13);
      sub_10006D144(a3, a4);
      sub_10006D144(a7, a8);
      uint64_t v33 = a1;
      unint64_t v32 = v40 | 0x4000000000000000;
      *a1 = v15;
      goto LABEL_22;
    case 2uLL:
      *(void *)&long long v53 = *a1;
      *((void *)&v53 + sub_1000A2B9C("Transaction emulation started", 1) = v14 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      uint64_t v39 = a6;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v28 = *(void *)(v15 + 16);
      uint64_t v16 = *(void *)(v15 + 24);
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      uint64_t v44 = *((void *)&v53 + 1);
      uint64_t v29 = sub_1000A4854(v28, v16, *((uint64_t *)&v53 + 1), v46, a3, a4, a5, v39, a7, a8, a9, a10, a11, a12);
      if (v12)
      {
        sub_10006D144(a11, a12);
        sub_10006D144(a7, a8);
        sub_10006D144(a3, a4);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        sub_10006D144(a11, a12);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        *a1 = v15;
        a1[1] = v44 | 0x8000000000000000;
      }
      else
      {
        uint64_t v16 = v29;
        sub_10006D144(a11, a12);
        sub_10006D144(a7, a8);
        sub_10006D144(a3, a4);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        sub_10006D144(a11, a12);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        unint64_t v32 = *((void *)&v53 + 1) | 0x8000000000000000;
        uint64_t v33 = a1;
        *a1 = v15;
LABEL_22:
        v33[1] = v32;
      }
LABEL_23:
      sub_10006D144(a11, v13);
      return v16;
    case 3uLL:
      *(void *)((char *)&v53 + 7) = 0;
      *(void *)&long long v53 = 0;
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      sub_1000A10C4(v46, a3, a4, a7, &v52, a8, a9, a10, a11, a12);
      sub_10006D144(a3, a4);
      sub_10006D144(a7, a8);
      if (!v12) {
        uint64_t v16 = v52;
      }
      goto LABEL_23;
    default:
      *(void *)&long long v53 = *a1;
      WORD4(v53) = v14;
      BYTE10(v53) = BYTE2(v14);
      BYTE11(v53) = BYTE3(v14);
      BYTE12(v53) = BYTE4(v14);
      BYTE13(v53) = BYTE5(v14);
      BYTE14(v53) = BYTE6(v14);
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a7, a8);
      sub_10006D0EC(a11, a12);
      sub_1000A10C4(v46, a3, a4, a7, &v52, a8, a9, a10, a11, a12);
      if (v12)
      {
        uint64_t v47 = DWORD2(v53);
        uint64_t v50 = v53;
        uint64_t v16 = BYTE12(v53);
        uint64_t v22 = BYTE13(v53);
        uint64_t v23 = BYTE14(v53);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        *a1 = v50;
        a1[1] = v47 | (v16 << 32) | (v22 << 40) | (v23 << 48);
      }
      else
      {
        uint64_t v16 = v52;
        uint64_t v48 = DWORD2(v53);
        uint64_t v51 = v53;
        uint64_t v45 = BYTE12(v53);
        uint64_t v30 = BYTE13(v53);
        uint64_t v31 = BYTE14(v53);
        sub_10006D144(a3, a4);
        sub_10006D144(a7, a8);
        *a1 = v51;
        a1[1] = v48 | (v45 << 32) | (v30 << 40) | (v31 << 48);
      }
      unint64_t v13 = a12;
      goto LABEL_23;
  }
}

uint64_t sub_1000A51B4(uint64_t *a1, uint64_t *a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t v14 = a12;
  unint64_t v13 = a13;
  char v37 = a3 & 1;
  uint64_t v16 = *a1;
  unint64_t v15 = a1[1];
  switch(v15 >> 62)
  {
    case 1uLL:
      uint64_t v24 = v15 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_100378350;
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      uint64_t v33 = v24;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = v16 >> 32;
      uint64_t v31 = a7;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_15;
      }
      if (v26 < (int)v16) {
        goto LABEL_25;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v16, __DataStorage._offset.getter())) {
        goto LABEL_26;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v29 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v33 = v29;
      uint64_t v14 = a12;
      uint64_t v26 = v16 >> 32;
LABEL_15:
      if (v26 < (int)v16) {
        goto LABEL_22;
      }
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(v14, a13);
      if (!__DataStorage._bytes.getter()) {
        goto LABEL_28;
      }
      if (__OFSUB__((int)v16, __DataStorage._offset.getter())) {
        goto LABEL_24;
      }
      __DataStorage._length.getter();
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      unint64_t v13 = a13;
      sub_10006D0EC(v14, a13);
      uint64_t v21 = sub_1000A499C(a2, v37, a4, a5, a6, v31, a8, a9, a10, a11, v14, a13);
      sub_10006D144(v14, a13);
      sub_10006D144(a8, a9);
      sub_10006D144(a4, a5);
      sub_10006D144(v14, a13);
      sub_10006D144(a8, a9);
      sub_10006D144(a4, a5);
      sub_10006D144(a4, a5);
      sub_10006D144(a8, a9);
      sub_10006D144(v14, a13);
      sub_10006D144(a4, a5);
      sub_10006D144(a8, a9);
      uint64_t v28 = a1;
      unint64_t v23 = v33 | 0x4000000000000000;
      *a1 = v16;
      goto LABEL_19;
    case 2uLL:
      uint64_t v35 = a1;
      uint64_t v43 = v15 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v27 = *(void *)(v16 + 16);
      uint64_t v34 = *(void *)(v16 + 24);
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      if (!__DataStorage._bytes.getter())
      {
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x1000A5944);
      }
      if (__OFSUB__(v27, __DataStorage._offset.getter()))
      {
        __break(1u);
LABEL_22:
        __break(1u);
        goto LABEL_23;
      }
      if (__OFSUB__(v34, v27))
      {
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
      }
      __DataStorage._length.getter();
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      uint64_t v14 = a12;
      sub_10006D0EC(a12, a13);
      uint64_t v21 = sub_1000A499C(a2, v37, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
      sub_10006D144(a12, a13);
      sub_10006D144(a8, a9);
      sub_10006D144(a4, a5);
      sub_10006D144(a12, a13);
      sub_10006D144(a8, a9);
      sub_10006D144(a4, a5);
      sub_10006D144(a4, a5);
      sub_10006D144(a8, a9);
      sub_10006D144(a12, a13);
      sub_10006D144(a4, a5);
      sub_10006D144(a8, a9);
      uint64_t v22 = v16;
      unint64_t v23 = v43 | 0x8000000000000000;
LABEL_12:
      uint64_t v28 = v35;
      *uint64_t v35 = v22;
LABEL_19:
      v28[1] = v23;
LABEL_20:
      sub_10006D144(v14, v13);
      return v21;
    case 3uLL:
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      uint64_t v21 = sub_1000A499C(a2, v37, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
      sub_10006D144(a4, a5);
      sub_10006D144(a8, a9);
      goto LABEL_20;
    default:
      LOWORD(v42) = a1[1];
      BYTE2(v42) = BYTE2(a1[1]);
      HIBYTE(v42) = BYTE3(a1[1]);
      __int16 v44 = WORD2(a1[1]);
      unsigned __int8 v45 = BYTE6(a1[1]);
      uint64_t v35 = a1;
      sub_10006D0EC(a4, a5);
      sub_10006D0EC(a8, a9);
      sub_10006D0EC(a12, a13);
      unsigned int v40 = sub_1000A499C(a2, v37, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
      sub_10006D144(a4, a5);
      sub_10006D144(a8, a9);
      unint64_t v13 = a13;
      uint64_t v21 = v40;
      uint64_t v22 = v16;
      unint64_t v23 = v42 | ((unint64_t)v44 << 32) | ((unint64_t)HIBYTE(v44) << 40) | ((unint64_t)v45 << 48);
      uint64_t v14 = a12;
      goto LABEL_12;
  }
}

uint64_t sub_1000A5954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t *a7, char a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v20 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v20 += a1 - result;
  }
  BOOL v21 = __OFSUB__(a2, a1);
  uint64_t v22 = a2 - a1;
  if (v21)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v23 = __DataStorage._length.getter();
  if (v23 >= v22) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v23;
  }
  uint64_t v25 = v20 + v24;
  if (v20) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t result = sub_1000A0BA0(v20, v26, a4, a5, a6, a7, a8 & 1, a9, &v28, a10, a11, a12);
  if (!v12) {
    return v28;
  }
  return result;
}

uint64_t sub_1000A5A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t *a8, uint64_t *a9, char a10, uint64_t a11, unint64_t a12)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_8;
    }
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  __DataStorage._length.getter();
  uint64_t result = sub_10009FEC0(a4, a5, a6, a7, a8, a9, &v21, a10 & 1, a11, a12);
  if (!v12) {
    return v21;
  }
  return result;
}

uint64_t sub_1000A5B7C(char a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  char v9 = a1 & 1;
  unint64_t v10 = a5 >> 62;
  uint64_t v12 = a6;
  unint64_t v14 = a3;
  uint64_t v15 = a2;
  switch(a5 >> 62)
  {
    case 1uLL:
      LODWORD(v16) = HIDWORD(a4) - a4;
      if (__OFSUB__(HIDWORD(a4), a4))
      {
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
        goto LABEL_87;
      }
      uint64_t v16 = (int)v16;
LABEL_6:
      if (v16 != 16)
      {
LABEL_12:
        sub_10006D098();
        swift_allocError();
        unsigned char *v29 = 1;
        return swift_willThrow();
      }
      char v103 = a1 & 1;
      switch(a3 >> 62)
      {
        case 1uLL:
          goto LABEL_22;
        case 2uLL:
          unint64_t v100 = a3;
          uint64_t v32 = *(void *)(a2 + 16);
          uint64_t v31 = *(void *)(a2 + 24);
          if (__OFSUB__(v31, v32)) {
            goto LABEL_86;
          }
          unint64_t v14 = a6;
          uint64_t v112 = sub_1000A47B4(v31 - v32);
          unint64_t v113 = v34;
          uint64_t v110 = sub_1000A47B4(a8);
          unint64_t v111 = v35;
          uint64_t v12 = v100;
          uint64_t v36 = *(void *)(v15 + 24);
          uint64_t v99 = *(void *)(v15 + 16);
          sub_10006D0EC(v14, a7);
          unint64_t v24 = a5;
          sub_10006D0EC(a4, a5);
          sub_10006D0EC(v15, v100);
          swift_retain();
          swift_retain();
          int v37 = sub_1000A5A70(v99, v36, v100 & 0x3FFFFFFFFFFFFFFFLL, a4, a5, v14, a7, &v112, &v110, v9, v15, v100);
          if (!v8)
          {
            int v38 = v37;
            swift_release();
            swift_release();
            sub_10006D144(a4, a5);
            sub_10006D144(v14, a7);
            unint64_t v14 = v100;
            goto LABEL_81;
          }
          sub_10006D144(a4, a5);
          sub_10006D144(v14, a7);
          sub_10006D144(v15, v100);
          swift_release();
          swift_release();
          __break(1u);
          goto LABEL_100;
        case 3uLL:
          uint64_t v112 = sub_1000A47B4(0);
          unint64_t v113 = v40;
          uint64_t v110 = sub_1000A47B4(a8);
          unint64_t v111 = v41;
          memset(v109, 0, 14);
          if (!v10)
          {
            uint64_t v106 = a4;
            unint64_t v24 = a5;
            int v107 = a5;
            __int16 v108 = WORD2(a5);
            uint64_t v48 = (char *)&v106 + BYTE6(a5);
            switch(a7 >> 62)
            {
              case 1uLL:
                if (v12 >> 32 < (int)v12) {
                  goto LABEL_91;
                }
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                uint64_t v76 = __DataStorage._bytes.getter();
                if (!v76) {
                  goto LABEL_60;
                }
                uint64_t v77 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v12, v77)) {
                  goto LABEL_97;
                }
                v76 += (int)v12 - v77;
LABEL_60:
                uint64_t v78 = __DataStorage._length.getter();
                uint64_t v79 = (v12 >> 32) - (int)v12;
                if (v78 < v79) {
                  uint64_t v79 = v78;
                }
                uint64_t v80 = v76 + v79;
                if (v76) {
                  uint64_t v81 = v80;
                }
                else {
                  uint64_t v81 = 0;
                }
                goto LABEL_76;
              case 2uLL:
                uint64_t v96 = v15;
                unint64_t v101 = v14;
                unint64_t v57 = a7;
                uint64_t v59 = *(void *)(v12 + 16);
                uint64_t v58 = *(void *)(v12 + 24);
                sub_10006D0EC(v12, v57);
                sub_10006D0EC(v12, v57);
                sub_10006D0EC(a4, a5);
                unint64_t v97 = v57;
                sub_10006D0EC(v12, v57);
                sub_10006D0EC(a4, a5);
                swift_retain();
                swift_retain();
                uint64_t v60 = __DataStorage._bytes.getter();
                if (!v60) {
                  goto LABEL_36;
                }
                uint64_t v61 = __DataStorage._offset.getter();
                if (__OFSUB__(v59, v61)) {
                  goto LABEL_95;
                }
                v60 += v59 - v61;
LABEL_36:
                BOOL v19 = __OFSUB__(v58, v59);
                uint64_t v62 = v58 - v59;
                if (v19) {
                  goto LABEL_93;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  uint64_t v64 = v62;
                }
                else {
                  uint64_t v64 = v63;
                }
                uint64_t v65 = v60 + v64;
                if (v60) {
                  uint64_t v66 = v65;
                }
                else {
                  uint64_t v66 = 0;
                }
                a7 = v97;
                sub_10006D0EC(v12, v97);
                sub_10006D0EC(a4, a5);
                uint64_t v15 = v96;
                sub_10006D0EC(v96, v101);
                uint64_t v92 = v66;
                unint64_t v14 = v101;
                int v38 = sub_1000A51B4(&v112, &v110, v103, a4, a5, (uint64_t)&v106, (uint64_t)&v106 + BYTE6(a5), v12, v97, v60, v92, v96, v101);
                sub_10006D144(v96, v101);
                sub_10006D144(v12, v97);
                sub_10006D144(a4, a5);
                goto LABEL_55;
              case 3uLL:
                goto LABEL_65;
              default:
                goto LABEL_27;
            }
          }
          uint64_t v23 = v12;
          unint64_t v24 = a5;
          if (v10 != 1)
          {
            uint64_t v49 = *(void *)(a4 + 16);
            uint64_t v50 = *(void *)(a4 + 24);
            sub_10006D0EC(v23, a7);
            sub_10006D0EC(a4, a5);
            swift_retain();
            swift_retain();
            uint64_t v51 = v50;
            uint64_t v12 = v23;
            int v52 = sub_1000A5954(v49, v51, a5 & 0x3FFFFFFFFFFFFFFFLL, v23, a7, &v112, &v110, v9, a4, a5, v15, v14);
            if (v8)
            {
LABEL_101:
              sub_10006D144(v15, v14);
              sub_10006D144(v12, a7);
              sub_10006D144(a4, v24);
              sub_10006D144(v15, v14);
LABEL_103:
              swift_release();
              swift_release();
              __break(1u);
              JUMPOUT(0x1000A6C48);
            }
            int v38 = v52;
            swift_release();
            swift_release();
            goto LABEL_79;
          }
          if (a4 >> 32 < (int)a4)
          {
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
          }
          unint64_t v25 = a7;
          sub_10006D0EC(v23, a7);
          sub_10006D0EC(a4, a5);
          sub_10006D0EC(a4, a5);
          unint64_t v94 = v14;
          unint64_t v90 = a5;
          uint64_t v91 = v15;
          uint64_t v89 = a4;
          uint64_t v26 = (int)a4;
          uint64_t v27 = a4 >> 32;
          uint64_t v28 = a5 & 0x3FFFFFFFFFFFFFFFLL;
          goto LABEL_20;
        default:
          uint64_t v112 = sub_1000A47B4(BYTE6(a3));
          unint64_t v113 = v21;
          uint64_t v110 = sub_1000A47B4(a8);
          unint64_t v111 = v22;
          v109[0] = v15;
          LOWORD(v109[1]) = v14;
          BYTE2(v109[1]) = BYTE2(v14);
          BYTE3(v109[1]) = BYTE3(v14);
          BYTE4(v109[1]) = BYTE4(v14);
          BYTE5(v109[1]) = BYTE5(v14);
          if (v10)
          {
            uint64_t v23 = v12;
            unint64_t v24 = a5;
            if (v10 != 1)
            {
              uint64_t v53 = *(void *)(a4 + 16);
              uint64_t v54 = *(void *)(a4 + 24);
              sub_10006D0EC(v23, a7);
              sub_10006D0EC(a4, a5);
              swift_retain();
              swift_retain();
              uint64_t v55 = v54;
              uint64_t v12 = v23;
              int v56 = sub_1000A5954(v53, v55, a5 & 0x3FFFFFFFFFFFFFFFLL, v23, a7, &v112, &v110, v9, a4, a5, v15, v14);
              if (v8)
              {
                sub_10006D144(v15, v14);
                sub_10006D144(v23, a7);
                sub_10006D144(a4, a5);
                sub_10006D144(v15, v14);
                goto LABEL_103;
              }
              int v38 = v56;
              swift_release();
              swift_release();
              sub_10006D144(v15, v14);
              unint64_t v24 = a5;
              goto LABEL_80;
            }
            unint64_t v25 = a7;
            if (a4 >> 32 < (int)a4)
            {
LABEL_89:
              __break(1u);
              goto LABEL_90;
            }
            sub_10006D0EC(v23, a7);
            sub_10006D0EC(a4, a5);
            sub_10006D0EC(a4, a5);
            unint64_t v94 = v14;
            unint64_t v90 = a5;
            uint64_t v91 = v15;
            uint64_t v89 = a4;
            uint64_t v26 = (int)a4;
            uint64_t v27 = a4 >> 32;
            uint64_t v28 = a5 & 0x3FFFFFFFFFFFFFFFLL;
LABEL_20:
            a7 = v25;
            uint64_t v12 = v23;
            int v42 = sub_1000A5954(v26, v27, v28, v23, a7, &v112, &v110, v9, v89, v90, v91, v94);
            if (v8)
            {
              sub_10006D144(v15, v14);
              sub_10006D144(v23, a7);
              sub_10006D144(a4, v24);
              sub_10006D144(v15, v14);
              sub_10006D144(a4, v24);
              __break(1u);
LABEL_22:
              unint64_t v100 = v14;
              if (!__OFSUB__(HIDWORD(v15), v15))
              {
                uint64_t v43 = a8;
                uint64_t v44 = v12;
                uint64_t v112 = sub_1000A47B4(HIDWORD(v15) - (int)v15);
                unint64_t v113 = v45;
                uint64_t v110 = sub_1000A47B4(v43);
                unint64_t v111 = v46;
                if (v15 >> 32 >= (int)v15)
                {
                  sub_10006D0EC(v12, a7);
                  sub_10006D0EC(a4, a5);
                  sub_10006D0EC(v15, v14);
                  unint64_t v24 = a5;
                  uint64_t v12 = v15;
                  unint64_t v14 = v44;
                  int v47 = sub_1000A5A70((int)v15, v15 >> 32, v100 & 0x3FFFFFFFFFFFFFFFLL, a4, a5, v44, a7, &v112, &v110, v9, v15, v100);
                  if (!v8)
                  {
                    int v38 = v47;
                    sub_10006D144(a4, a5);
                    sub_10006D144(v14, a7);
                    unint64_t v14 = v100;
                    goto LABEL_81;
                  }
LABEL_100:
                  sub_10006D144(a4, v24);
                  sub_10006D144(v14, a7);
                  sub_10006D144(v12, v100);
                  __break(1u);
                  goto LABEL_101;
                }
                goto LABEL_88;
              }
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
              goto LABEL_89;
            }
LABEL_66:
            int v38 = v42;
            uint64_t v82 = a4;
            unint64_t v83 = v24;
          }
          else
          {
            uint64_t v106 = a4;
            unint64_t v24 = a5;
            int v107 = a5;
            __int16 v108 = WORD2(a5);
            uint64_t v48 = (char *)&v106 + BYTE6(a5);
            switch(a7 >> 62)
            {
              case 1uLL:
                if (v12 >> 32 < (int)v12) {
                  goto LABEL_92;
                }
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                uint64_t v76 = __DataStorage._bytes.getter();
                if (!v76) {
                  goto LABEL_71;
                }
                uint64_t v84 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v12, v84)) {
                  goto LABEL_98;
                }
                v76 += (int)v12 - v84;
LABEL_71:
                uint64_t v85 = __DataStorage._length.getter();
                uint64_t v86 = (v12 >> 32) - (int)v12;
                if (v85 < v86) {
                  uint64_t v86 = v85;
                }
                uint64_t v87 = v76 + v86;
                if (v76) {
                  uint64_t v81 = v87;
                }
                else {
                  uint64_t v81 = 0;
                }
LABEL_76:
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                sub_10006D0EC(v15, v14);
                int v38 = sub_1000A51B4(&v112, &v110, v103, a4, v24, (uint64_t)&v106, (uint64_t)&v106 + BYTE6(a5), v12, a7, v76, v81, v15, v14);
                sub_10006D144(v15, v14);
                sub_10006D144(v12, a7);
                sub_10006D144(a4, v24);
                break;
              case 2uLL:
                unint64_t v102 = v14;
                unint64_t v67 = a7;
                uint64_t v68 = *(void *)(v12 + 16);
                uint64_t v95 = *(void *)(v12 + 24);
                sub_10006D0EC(v12, v67);
                sub_10006D0EC(v12, v67);
                sub_10006D0EC(a4, a5);
                unint64_t v98 = v67;
                sub_10006D0EC(v12, v67);
                sub_10006D0EC(a4, a5);
                swift_retain();
                swift_retain();
                uint64_t v69 = __DataStorage._bytes.getter();
                if (!v69) {
                  goto LABEL_47;
                }
                uint64_t v70 = __DataStorage._offset.getter();
                if (__OFSUB__(v68, v70)) {
                  goto LABEL_96;
                }
                v69 += v68 - v70;
LABEL_47:
                BOOL v19 = __OFSUB__(v95, v68);
                uint64_t v71 = v95 - v68;
                if (v19) {
                  goto LABEL_94;
                }
                uint64_t v72 = __DataStorage._length.getter();
                if (v72 >= v71) {
                  uint64_t v73 = v71;
                }
                else {
                  uint64_t v73 = v72;
                }
                uint64_t v74 = v69 + v73;
                if (v69) {
                  uint64_t v75 = v74;
                }
                else {
                  uint64_t v75 = 0;
                }
                a7 = v98;
                sub_10006D0EC(v12, v98);
                sub_10006D0EC(a4, a5);
                sub_10006D0EC(v15, v102);
                uint64_t v93 = v75;
                unint64_t v14 = v102;
                int v38 = sub_1000A51B4(&v112, &v110, v103, a4, a5, (uint64_t)&v106, (uint64_t)&v106 + BYTE6(a5), v12, v98, v69, v93, v15, v102);
                sub_10006D144(v15, v102);
                sub_10006D144(v12, v98);
                sub_10006D144(a4, a5);
LABEL_55:
                swift_release();
                swift_release();
                break;
              case 3uLL:
LABEL_65:
                memset(v105, 0, 14);
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                int v42 = sub_1000A51B4(&v112, &v110, v9, a4, v24, (uint64_t)&v106, (uint64_t)v48, v12, a7, (uint64_t)v105, (uint64_t)v105, v15, v14);
                goto LABEL_66;
              default:
LABEL_27:
                v105[0] = v12;
                LOWORD(v105[1]) = a7;
                BYTE2(v105[1]) = BYTE2(a7);
                BYTE3(v105[1]) = BYTE3(a7);
                BYTE4(v105[1]) = BYTE4(a7);
                BYTE5(v105[1]) = BYTE5(a7);
                sub_10006D0EC(v12, a7);
                sub_10006D0EC(a4, a5);
                int v42 = sub_1000A51B4(&v112, &v110, v9, a4, a5, (uint64_t)&v106, (uint64_t)&v106 + BYTE6(a5), v12, a7, (uint64_t)v105, (uint64_t)v105 + BYTE6(a7), v15, v14);
                goto LABEL_66;
            }
            sub_10006D144(v12, a7);
            sub_10006D144(a4, v24);
            sub_10006D144(a4, v24);
            uint64_t v82 = v12;
            unint64_t v83 = a7;
          }
          sub_10006D144(v82, v83);
LABEL_79:
          sub_10006D144(v15, v14);
LABEL_80:
          sub_10006D144(a4, v24);
          sub_10006D144(v12, a7);
LABEL_81:
          sub_10006D144(v15, v14);
          if (!v38) {
            return v112;
          }
          sub_10006D098();
          swift_allocError();
          unsigned char *v88 = 1;
          swift_willThrow();
          sub_10006D144(v110, v111);
          return sub_10006D144(v112, v113);
      }
    case 2uLL:
      uint64_t v18 = *(void *)(a4 + 16);
      uint64_t v17 = *(void *)(a4 + 24);
      BOOL v19 = __OFSUB__(v17, v18);
      uint64_t v16 = v17 - v18;
      if (!v19) {
        goto LABEL_6;
      }
      goto LABEL_85;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v16 = BYTE6(a5);
      goto LABEL_6;
  }
}

void sub_1000A6C88(char a1, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v194 = a6;
  uint64_t v193 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v192 = *(void *)(v193 - 8);
  __chkstk_darwin(v193, v10);
  unint64_t v190 = (char *)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = type metadata accessor for DispatchQoS();
  uint64_t v189 = *(void *)(v191 - 8);
  __chkstk_darwin(v191, v12);
  unint64_t v14 = (char *)&v175 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = (char *)&v175 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (uint64_t *)((char *)&v175 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100468A38;
  void *v23 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  id v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_130:
    swift_once();
LABEL_9:
    sub_10006B5F0(a3, a4);
    return;
  }
  switch(a1)
  {
    case 0:
      if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 2) {
        return;
      }
      if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 3)
      {
        *(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 4;
        sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
      }
      if (qword_100453650 == -1) {
        goto LABEL_9;
      }
      goto LABEL_130;
    case 1:
      uint64_t v43 = v195;
      if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2
        && *(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_isSEAccessAllowed) != 1)
      {
        uint64_t v77 = sub_100088F40((uint64_t)&off_10040E3B0);
        unint64_t v79 = v84;
        uint64_t v80 = 0x535F454349564544;
        unint64_t v81 = 0xEE00595355425F45;
        uint64_t v82 = v77;
        unint64_t v83 = v79;
        goto LABEL_43;
      }
      uint64_t v44 = v194;
      if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) != 8)
      {
        uint64_t v77 = sub_100088F40((uint64_t)&off_10040E388);
        unint64_t v79 = v78;
        uint64_t v80 = 0x425F454349564544;
        unint64_t v81 = 0xEB00000000595355;
        uint64_t v82 = v77;
        unint64_t v83 = v79;
LABEL_43:
        sub_100095EF4(v80, v81, 3, 17, v82, v83);
        uint64_t v85 = v77;
        unint64_t v86 = v79;
        goto LABEL_97;
      }
      uint64_t v193 = OBJC_IVAR____TtC10seserviced13AlishaPairing_mode;
      uint64_t v192 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
      if (qword_100453898 != -1) {
        swift_once();
      }
      uint64_t v45 = v44 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
      swift_beginAccess();
      uint64_t v46 = type metadata accessor for UUID();
      uint64_t v47 = *(void *)(v46 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v18, v45, v46);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v18, 0, 1, v46);
      sub_10027194C(a2, a3, a4, v44, 1, (uint64_t)v18, 0, 1);
      sub_10008E734((uint64_t)v18, &qword_100455EB0);
      sub_10006D0EC(a3, a4);
      char v48 = sub_10007D4A4(a3, a4, 1, 0, 0);
      sub_10006D0EC(a3, a4);
      char v49 = sub_10007D4A4(a3, a4, 2, 0, 0);
      sub_10006D0EC(a3, a4);
      unsigned __int8 v50 = sub_10007D4A4(a3, a4, 3, 0, 0);
      if (v48 == 60)
      {
        if (*(unsigned char *)(v43 + v193))
        {
          if (*(unsigned char *)(v43 + v193) == 1)
          {
            if (v49)
            {
              if (v49 == 1 && v50 == 176)
              {
                *(unsigned char *)(v195 + v192) = 9;
                sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
              }
              return;
            }
            goto LABEL_127;
          }
          if (v49)
          {
            if (v49 == 1 && v50 == 129)
            {
              *(unsigned char *)(v195 + v192) = 9;
              sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
              if (qword_100453650 != -1) {
                swift_once();
              }
              sub_10006B9C0();
              uint64_t v130 = Logger.logObject.getter();
              os_log_type_t v131 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v130, v131))
              {
                uint64_t v132 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v132 = 0;
                _os_log_impl((void *)&_mh_execute_header, v130, v131, "Handing off the peripheral to Alisha", v132, 2u);
                swift_slowDealloc();
              }

              if (qword_100453798 != -1) {
                swift_once();
              }
              sub_1001E82F0(v194);
              sub_100093B18(6);
            }
            return;
          }
        }
        else if (v49)
        {
          return;
        }
LABEL_127:
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v133 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v87, v133))
        {
          long long v134 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v134 = 0;
          _os_log_impl((void *)&_mh_execute_header, v87, v133, "Received error control flow", v134, 2u);
          swift_slowDealloc();
        }
        goto LABEL_68;
      }
      return;
    case 2:
      if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 2) {
        return;
      }
      unint64_t v33 = a4;
      if (qword_1004537A8 != -1) {
        swift_once();
      }
      uint64_t v34 = qword_100468890;
      uint64_t v35 = v194;
      swift_retain();
      uint64_t v36 = sub_100203774(v34, v35);
      swift_release();
      int v37 = (void *)sub_1000BB110(v36);
      swift_bridgeObjectRelease();
      uint64_t v38 = v195;
      if (!v37) {
        goto LABEL_63;
      }
      type metadata accessor for UWBAlishaSession();
      if (swift_dynamicCastClass())
      {
        if (qword_100453798 != -1) {
          swift_once();
        }
        uint64_t v39 = sub_1001F28F8(2, a2, a3, v33);
        unint64_t v41 = v40;
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = v38;
        *(void *)(v42 + 24) = v35;
        swift_retain();
        swift_retain();
        sub_1001FA098(v39, v41, (uint64_t)sub_1000AA04C, v42);
        swift_release();
        sub_10006D144(v39, v41);

        return;
      }

LABEL_63:
      swift_retain_n();
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v106 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v106))
      {
        int v107 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        *(_DWORD *)int v107 = 136315138;
        unint64_t aBlock = v108;
        swift_retain();
        uint64_t v109 = UUID.uuidString.getter();
        unint64_t v111 = v110;
        swift_release();
        uint64_t v202 = (void *)sub_100290514(v109, v111, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v112 = "No active UWB Alisha session for %s";
        goto LABEL_65;
      }
      goto LABEL_67;
    case 3:
      unint64_t v26 = a4;
      sub_10006D0EC(a3, a4);
      char v51 = sub_10007D4A4(a3, a4, 0, 0, 0);
      if (v51 != 1)
      {
        sub_10006D0EC(a3, a4);
        sub_10006D0EC(a3, a4);
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = swift_slowAlloc();
          uint64_t v195 = swift_slowAlloc();
          unint64_t aBlock = v195;
          *(_DWORD *)uint64_t v73 = 16777730;
          LOBYTE(v202) = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v73 + 5) = 2080;
          uint64_t v202 = sub_10023CDF4(a3, v26);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v74 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v76 = v75;
          swift_bridgeObjectRelease();
          uint64_t v202 = (void *)sub_100290514(v74, v76, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(a3, v26);
          sub_10006D144(a3, v26);
          _os_log_impl((void *)&_mh_execute_header, v71, v72, "Ignoring unknown event category %hhu payload %s", (uint8_t *)v73, 0xFu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10006D144(a3, v26);
          uint64_t v85 = a3;
LABEL_96:
          unint64_t v86 = v26;
LABEL_97:
          sub_10006D144(v85, v86);
        }
        return;
      }
      break;
    case 5:
      unint64_t v26 = a4;
      if (a2 == 15)
      {
        uint64_t v53 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
        uint64_t v54 = v195;
        if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) != 6) {
          goto LABEL_44;
        }
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v55, v56))
        {
          unint64_t v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Received FIRST_APPROACH_RS", v57, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v54 + v53) = 7;
        sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
        sub_10009A6E8(a3, v26);
        return;
      }
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a3, a4);
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = a3;
        uint64_t v61 = swift_slowAlloc();
        unint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 16777730;
        LOBYTE(v202) = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v61 + 5) = 2080;
        uint64_t v202 = sub_10023CDF4(a3, v26);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        unint64_t v62 = v26;
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v63 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v65 = v64;
        swift_bridgeObjectRelease();
        uint64_t v202 = (void *)sub_100290514(v63, v65, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v60, v62);
        sub_10006D144(v60, v62);
        uint64_t v66 = "Ignoring supplementary service message identifier %hhu payload %s";
        unint64_t v67 = v58;
        os_log_type_t v68 = v59;
        uint64_t v69 = (uint8_t *)v61;
        uint32_t v70 = 15;
        goto LABEL_38;
      }
LABEL_94:

      goto LABEL_95;
    default:
      unint64_t v26 = a4;
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a3, a4);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        unint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 16777986;
        LOBYTE(v202) = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v29 + 5) = 256;
        LOBYTE(v202) = a2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v29 + _Block_object_dispose(&STACK[0x2C0], 8) = 2080;
        uint64_t v202 = sub_10023CDF4(a3, a4);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v30 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v32 = v31;
        swift_bridgeObjectRelease();
        uint64_t v202 = (void *)sub_100290514(v30, v32, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a3, a4);
        sub_10006D144(a3, a4);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Ignoring unknown message type %hhu identifier %hhu payload %s", (uint8_t *)v29, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }

LABEL_95:
      sub_10006D144(a3, v26);
      uint64_t v85 = a3;
      goto LABEL_96;
  }
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v52) = HIDWORD(a3) - a3;
      if (!__OFSUB__(HIDWORD(a3), a3))
      {
        uint64_t v52 = (int)v52;
        goto LABEL_51;
      }
      __break(1u);
      goto LABEL_132;
    case 2uLL:
      uint64_t v94 = *(void *)(a3 + 16);
      uint64_t v93 = *(void *)(a3 + 24);
      BOOL v95 = __OFSUB__(v93, v94);
      uint64_t v52 = v93 - v94;
      if (!v95) {
        goto LABEL_51;
      }
LABEL_132:
      __break(1u);
      goto LABEL_133;
    case 3uLL:
      goto LABEL_52;
    default:
      uint64_t v52 = BYTE6(a4);
LABEL_51:
      if (v52 < 2)
      {
LABEL_52:
        sub_10006D0EC(a3, a4);
        sub_10006D0EC(a3, a4);
        uint64_t v96 = Logger.logObject.getter();
        os_log_type_t v97 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v96, v97))
        {
          unint64_t v98 = (uint8_t *)swift_slowAlloc();
          uint64_t v194 = swift_slowAlloc();
          unint64_t aBlock = v194;
          *(_DWORD *)unint64_t v98 = 136315138;
          uint64_t v202 = sub_10023CDF4(a3, a4);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v99 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v101 = v100;
          swift_bridgeObjectRelease();
          uint64_t v202 = (void *)sub_100290514(v99, v101, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(a3, a4);
          sub_10006D144(a3, a4);
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "Invalid Command Complete event %s", v98, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10006D144(a3, a4);
          sub_10006D144(a3, a4);
        }
        sub_100093B18(2);
        return;
      }
      sub_10006D0EC(a3, a4);
      unsigned int v102 = sub_10007D4A4(a3, a4, 1, 0, 0);
      if (v102 > 0x85)
      {
        switch(v102)
        {
          case 0xFCu:
            uint64_t v87 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v87, v103)) {
              goto LABEL_68;
            }
            uint64_t v104 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v104 = 0;
            uint64_t v105 = "Received OOB_MISMATCH";
            goto LABEL_112;
          case 0xFDu:
            uint64_t v87 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v87, v103)) {
              goto LABEL_68;
            }
            uint64_t v104 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v104 = 0;
            uint64_t v105 = "Received BLE_PAIRING_FAILED";
            goto LABEL_112;
          case 0xFEu:
            uint64_t v87 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v87, v103)) {
              goto LABEL_68;
            }
            uint64_t v104 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v104 = 0;
            uint64_t v105 = "Received FA_CRYPTO_OPERATION_FAILED";
            goto LABEL_112;
          case 0xFFu:
            uint64_t v87 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v87, v103)) {
              goto LABEL_68;
            }
            uint64_t v104 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v104 = 0;
            uint64_t v105 = "Received WRONG_PARAMETERS";
            goto LABEL_112;
          default:
            if (v102 != 134) {
              goto LABEL_92;
            }
            uint64_t v87 = Logger.logObject.getter();
            os_log_type_t v103 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v87, v103)) {
              goto LABEL_68;
            }
            uint64_t v104 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v104 = 0;
            uint64_t v105 = "Received OP_DEVICE_NOT_INSIDE_VEHICLE";
            break;
        }
        goto LABEL_112;
      }
      if (v102)
      {
        if (v102 != 1)
        {
          if (v102 != 128)
          {
LABEL_92:
            sub_10006D0EC(a3, a4);
            sub_10006D0EC(a3, a4);
            uint64_t v58 = Logger.logObject.getter();
            os_log_type_t v125 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v58, v125)) {
              goto LABEL_94;
            }
            uint64_t v126 = (uint8_t *)swift_slowAlloc();
            unint64_t aBlock = swift_slowAlloc();
            *(_DWORD *)uint64_t v126 = 136315138;
            uint64_t v195 = (uint64_t)(v126 + 4);
            uint64_t v202 = sub_10023CDF4(a3, a4);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v127 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v129 = v128;
            swift_bridgeObjectRelease();
            uint64_t v202 = (void *)sub_100290514(v127, v129, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(a3, a4);
            sub_10006D144(a3, a4);
            uint64_t v66 = "Ignoring unknown Command Complete event %s";
            unint64_t v67 = v58;
            os_log_type_t v68 = v125;
            uint64_t v69 = v126;
            uint32_t v70 = 12;
LABEL_38:
            _os_log_impl((void *)&_mh_execute_header, v67, v68, v66, v69, v70);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            return;
          }
          uint64_t v87 = Logger.logObject.getter();
          os_log_type_t v103 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v87, v103)) {
            goto LABEL_68;
          }
          uint64_t v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v104 = 0;
          uint64_t v105 = "Received GENERAL_ERROR";
LABEL_112:
          _os_log_impl((void *)&_mh_execute_header, v87, v103, v105, v104, 2u);
          swift_slowDealloc();
          goto LABEL_68;
        }
        uint64_t v54 = v195;
        if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 2) {
          return;
        }
        unint64_t v120 = Logger.logObject.getter();
        os_log_type_t v121 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v120, v121))
        {
          uint64_t v122 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v122 = 0;
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Received BLE_PAIRING_READY", v122, 2u);
          swift_slowDealloc();
        }

        uint64_t v53 = OBJC_IVAR____TtC10seserviced13AlishaPairing_state;
        uint64_t v123 = v194;
        if (*(unsigned char *)(v54 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) == 4)
        {
          *(unsigned char *)(v54 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) = 5;
          sub_1000926C4((uint64_t)&OBJC_IVAR____TtC10seserviced13AlishaPairing_state, (uint64_t)&type metadata for AlishaPairing.State, "New pairing state %s");
          if (qword_1004536B8 != -1) {
            swift_once();
          }
          type metadata accessor for DSKBLEPairing.BLEPairingRequest();
          uint64_t v124 = swift_allocObject();
          *(_OWORD *)(v124 + 16) = xmmword_100378280;
          *(void *)(v124 + 32) = v123;
          *(void *)(v124 + 4sub_1000A2B9C("Transaction emulation ended", 0) = &off_10040E3D8;
          *(void *)(v124 + 4_Block_object_dispose(&STACK[0x2C0], 8) = sub_1000A9F34;
          *(void *)(v124 + 56) = v54;
          *(void *)(v124 + 64) = sub_1000A9F38;
          *(void *)(v124 + 72) = v54;
          swift_retain_n();
          swift_retain();
          sub_1000CD37C(v124);
          swift_release();
          return;
        }
LABEL_44:
        swift_retain_n();
        uint64_t v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v89 = (uint8_t *)swift_slowAlloc();
          uint64_t v90 = swift_slowAlloc();
          *(_DWORD *)uint64_t v89 = 136315138;
          unint64_t aBlock = v90;
          LOBYTE(v202) = *(unsigned char *)(v54 + v53);
          uint64_t v91 = String.init<A>(describing:)();
          uint64_t v202 = (void *)sub_100290514(v91, v92, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v87, v88, "Wrong state %s", v89, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
LABEL_66:
          swift_slowDealloc();
LABEL_68:

          sub_100093B18(2);
          return;
        }
        goto LABEL_67;
      }
      unint64_t v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v113, v114))
      {
        uint64_t v115 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v115 = 0;
        _os_log_impl((void *)&_mh_execute_header, v113, v114, "Received DESELECT_SE", v115, 2u);
        swift_slowDealloc();
      }

      if (qword_100453710 != -1) {
LABEL_133:
      }
        swift_once();
      sub_100177D1C(v194);
      if (*(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) != 1
        || *(unsigned char *)(v195 + OBJC_IVAR____TtC10seserviced13AlishaPairing_state) != 9)
      {
        return;
      }
      if (qword_1004536B0 != -1) {
        swift_once();
      }
      sub_10006C51C(&qword_1004557C0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378B90;
      *(void *)(inited + 32) = v194;
      unint64_t aBlock = inited;
      specialized Array._endMutation()();
      unint64_t v117 = aBlock;
      if (aBlock >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v135) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v118 = *(void *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_retain();
        if (v118)
        {
LABEL_81:
          uint64_t v119 = (void *)sub_1000A44C4(v117);
LABEL_136:
          swift_bridgeObjectRelease();
          sub_1000CA39C((uint64_t)v119, (uint64_t *)&aBlock);
          uint64_t v140 = aBlock;
          unint64_t v141 = v197;
          uint64_t v143 = (uint64_t)v198;
          unint64_t v142 = (unint64_t)v199;
          uint64_t v144 = v200;
          swift_bridgeObjectRelease();
          sub_10006D0EC(v140, v141);
          sub_10006D0EC(v143, v142);
          swift_bridgeObjectRetain();
          sub_10006D144(v143, v142);
          sub_10006D144(v140, v141);
          if (*((void *)v144 + 2))
          {
            uint64_t v182 = v140;
            uint64_t v183 = v143;
            unint64_t v184 = v142;
            uint64_t v145 = *((void *)v144 + 5);
            unint64_t v147 = *((void *)v144 + 6);
            uint64_t v146 = *((void *)v144 + 7);
            unint64_t v149 = *((void *)v144 + 8);
            uint64_t v148 = *((void *)v144 + 9);
            unint64_t v150 = *((void *)v144 + 10);
            uint64_t v185 = *((void *)v144 + 4);
            swift_retain();
            uint64_t v186 = v145;
            uint64_t v151 = v145;
            unint64_t v152 = v147;
            sub_10006D0EC(v151, v147);
            uint64_t v188 = v146;
            unint64_t v187 = v149;
            sub_10006D0EC(v146, v149);
            sub_10006D0EC(v148, v150);
            swift_bridgeObjectRelease();
            unint64_t v153 = (uint64_t *)(v194 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
            unint64_t v154 = *(void *)(v194 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
            if (v154 >> 60 == 15)
            {
              unint64_t v155 = v150;
              uint64_t v156 = Logger.logObject.getter();
              os_log_type_t v157 = static os_log_type_t.error.getter();
              BOOL v158 = os_log_type_enabled(v156, v157);
              uint64_t v159 = v182;
              if (v158)
              {
                uint64_t v160 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v160 = 0;
                _os_log_impl((void *)&_mh_execute_header, v156, v157, "Failed to retrieve key identifier", v160, 2u);
                swift_slowDealloc();
              }

              sub_100093B18(2);
              swift_release();
              sub_10006D144(v186, v152);
              sub_10006D144(v188, v187);
              sub_10006D144(v148, v155);
              sub_10006D144(v159, v141);
              sub_10006D144(v183, v184);
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v180 = v141;
              uint64_t v161 = *v153;
              sub_10006D0EC(*v153, v154);
              if (qword_100453930 != -1) {
                swift_once();
              }
              uint64_t v179 = qword_100468A40;
              uint64_t v162 = (void *)swift_allocObject();
              uint64_t v181 = v161;
              v162[2] = v161;
              v162[3] = v154;
              v162[4] = v185;
              unint64_t v176 = v154;
              uint64_t v163 = v186;
              v162[5] = v186;
              v162[6] = v147;
              unint64_t v177 = v147;
              uint64_t v164 = v188;
              unint64_t v165 = v187;
              v162[7] = v188;
              v162[8] = v165;
              v162[9] = v148;
              v162[10] = v150;
              unint64_t v166 = v150;
              uint64_t v167 = v195;
              v162[11] = v194;
              v162[12] = v167;
              unint64_t v200 = sub_1000A9FA4;
              uint64_t v201 = v162;
              unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
              uint64_t v197 = 1107296256;
              uint64_t v198 = sub_10007C0C4;
              unint64_t v199 = &unk_100410C70;
              unint64_t v178 = _Block_copy(&aBlock);
              swift_retain();
              swift_retain();
              swift_retain();
              sub_10006D0EC(v163, v152);
              uint64_t v168 = v164;
              unint64_t v169 = v187;
              sub_10006D0EC(v168, v187);
              uint64_t v170 = v148;
              sub_10006D0EC(v148, v166);
              unint64_t v171 = v176;
              sub_1000758F4(v181, v176);
              static DispatchQoS.unspecified.getter();
              uint64_t v202 = _swiftEmptyArrayStorage;
              sub_1000A98B0((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
              sub_10006C51C((uint64_t *)&unk_100455710);
              sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
              id v172 = v190;
              uint64_t v173 = v193;
              dispatch thunk of SetAlgebra.init<A>(_:)();
              uint64_t v174 = v178;
              OS_dispatch_queue.async(group:qos:flags:execute:)();
              _Block_release(v174);
              swift_release();
              sub_10006D144(v186, v177);
              sub_10006D144(v188, v169);
              sub_10006D144(v170, v166);
              sub_100075868(v181, v171);
              sub_10006D144(v182, v180);
              sub_10006D144(v183, v184);
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v192 + 8))(v172, v173);
              (*(void (**)(char *, uint64_t))(v189 + 8))(v14, v191);
              swift_release();
            }
            return;
          }
          swift_bridgeObjectRelease();
          sub_10006D144(v140, v141);
          sub_10006D144(v143, v142);
          swift_bridgeObjectRelease();
          swift_retain_n();
          uint64_t v87 = Logger.logObject.getter();
          os_log_type_t v106 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v87, v106))
          {
            int v107 = (uint8_t *)swift_slowAlloc();
            uint64_t v136 = swift_slowAlloc();
            *(_DWORD *)int v107 = 136315138;
            unint64_t aBlock = v136;
            swift_retain();
            uint64_t v137 = UUID.uuidString.getter();
            unint64_t v139 = v138;
            swift_release();
            uint64_t v202 = (void *)sub_100290514(v137, v139, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v112 = "Failed to retrieve pairing info for %s";
LABEL_65:
            _os_log_impl((void *)&_mh_execute_header, v87, v106, v112, v107, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            goto LABEL_66;
          }
LABEL_67:
          swift_release_n();
          goto LABEL_68;
        }
      }
      uint64_t v119 = &_swiftEmptySetSingleton;
      goto LABEL_136;
  }
}

uint64_t sub_1000A916C(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000A98B0((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v22;
    uint64_t v21 = v23;
    uint64_t v5 = v24;
    uint64_t v6 = v25;
    unint64_t v7 = v26;
  }
  else
  {
    uint64_t v8 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = 0;
  }
  int64_t v20 = (unint64_t)(v5 + 64) >> 6;
  while (1)
  {
    uint64_t v15 = v6;
    if (v3 < 0)
    {
      uint64_t v19 = __CocoaSet.Iterator.next()();
      if (!v19) {
        goto LABEL_34;
      }
      type metadata accessor for Peer();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v13 = v27;
      swift_unknownObjectRelease();
      if (!v13) {
        goto LABEL_33;
      }
      goto LABEL_10;
    }
    if (!v7) {
      break;
    }
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v6 << 6);
LABEL_9:
    uint64_t v13 = *(void *)(*(void *)(v3 + 48) + 8 * v12);
    swift_retain();
    if (!v13) {
      goto LABEL_33;
    }
LABEL_10:
    uint64_t v27 = v13;
    char v14 = a2(&v27);
    uint64_t result = swift_release();
    if (v14)
    {
      uint64_t v19 = 1;
      goto LABEL_34;
    }
  }
  int64_t v16 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v16 >= v20) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v21 + 8 * v16);
    ++v6;
    if (!v17)
    {
      uint64_t v6 = v15 + 2;
      if (v15 + 2 >= v20) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v21 + 8 * v6);
      if (!v17)
      {
        uint64_t v6 = v15 + 3;
        if (v15 + 3 >= v20) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v21 + 8 * v6);
        if (!v17)
        {
          uint64_t v6 = v15 + 4;
          if (v15 + 4 >= v20) {
            goto LABEL_33;
          }
          unint64_t v17 = *(void *)(v21 + 8 * v6);
          if (!v17)
          {
            uint64_t v6 = v15 + 5;
            if (v15 + 5 >= v20) {
              goto LABEL_33;
            }
            unint64_t v17 = *(void *)(v21 + 8 * v6);
            if (!v17)
            {
              uint64_t v18 = v15 + 6;
              while (v20 != v18)
              {
                unint64_t v17 = *(void *)(v21 + 8 * v18++);
                if (v17)
                {
                  uint64_t v6 = v18 - 1;
                  goto LABEL_28;
                }
              }
LABEL_33:
              uint64_t v19 = 0;
LABEL_34:
              sub_10008C4F0();
              return v19;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v6 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1000A9474()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  void *v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)unint64_t v11 = 136315138;
      uint64_t v17 = v12;
      swift_retain();
      uint64_t v13 = UUID.uuidString.getter();
      unint64_t v15 = v14;
      swift_release();
      uint64_t v16 = sub_100290514(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session invalidated for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_mode) == 2
      && *(void *)(v1 + OBJC_IVAR____TtC10seserviced13AlishaPairing_peer))
    {
      swift_retain();
      if (static UUID.== infix(_:_:)()) {
        sub_100093B18(4);
      }
      swift_release();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000A9780(void *a1)
{
  return sub_100096D7C(a1, v1);
}

uint64_t sub_1000A9788()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A97C0(void *a1)
{
  return sub_10007849C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000A97C8()
{
  swift_release();
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10006D144(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10006D144(*(void *)(v0 + 64), *(void *)(v0 + 72));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000A9830()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  long long v2 = *(_OWORD *)(v0 + 48);
  long long v5 = *(_OWORD *)(v0 + 32);
  long long v6 = v2;
  long long v7 = *(_OWORD *)(v0 + 64);
  return sub_10009EEB0(v1, &v4, *(void *)(v0 + 80), *(void *)(v0 + 88));
}

uint64_t sub_1000A9870(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000A2B9C("Transaction emulation ended", 0) = v2;
  return swift_retain();
}

uint64_t sub_1000A9880()
{
  return swift_release();
}

uint64_t sub_1000A9890()
{
  return sub_1000AA004((void (*)(void))&_swift_errorRelease);
}

void sub_1000A98A8()
{
  sub_10009F46C(*(void *)(v0 + 16));
}

uint64_t sub_1000A98B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A98FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = (unint64_t *)result;
  uint64_t v7 = 0;
  int64_t v8 = 0;
  uint64_t v9 = a3 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(a3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v13) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_24;
      }
      unint64_t v17 = *(void *)(v9 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_24;
        }
        unint64_t v17 = *(void *)(v9 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_5:
    if (*(void *)(*(void *)(*(void *)(a3 + 48) + 8 * v15) + 16) != a4)
    {
      *(void *)(result + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v7++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_1000F9560(v6, a2, v7, a3);
      }
    }
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_24;
  }
  unint64_t v17 = *(void *)(v9 + 8 * v18);
  if (v17)
  {
    int64_t v8 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v8 >= v13) {
      goto LABEL_24;
    }
    unint64_t v17 = *(void *)(v9 + 8 * v8);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1000A9A78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  unsigned int v7 = v6 & 0x3F;
  unint64_t v8 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v9 = 8 * v8;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v7 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v11);
    bzero((char *)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    swift_retain();
    uint64_t v12 = sub_1000A98FC((uint64_t)&v15 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, a1, a2);
    swift_release();
    swift_release();
    if (v3) {
      swift_willThrow();
    }
    swift_release_n();
  }
  else
  {
    int64_t v13 = (void *)swift_slowAlloc();
    bzero(v13, v9);
    swift_retain();
    uint64_t v12 = sub_1000A98FC((uint64_t)v13, v8, a1, a2);
    swift_release();
    swift_release();
    swift_slowDealloc();
    swift_release_n();
  }
  return v12;
}

Swift::Int sub_1000A9C44(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_1000A9A78(a1, a2);
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  swift_retain();
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    do
    {
      sub_10006C51C(&qword_100455720);
      swift_dynamicCast();
      Swift::UInt v4 = *(void *)(v15 + 16);
      if (v4 == a2)
      {
        swift_release();
      }
      else
      {
        if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
          sub_1000ECF20();
        }
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v4);
        Swift::Int result = Hasher._finalize()();
        char v6 = (char *)&_swiftEmptySetSingleton + 56;
        uint64_t v7 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7)) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v11 = 0;
          unint64_t v12 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v12 && (v11 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v13 = v9 == v12;
            if (v9 == v12) {
              unint64_t v9 = 0;
            }
            v11 |= v13;
            uint64_t v14 = *(void *)&v6[8 * v9];
          }
          while (v14 == -1);
          unint64_t v10 = __clz(__rbit64(~v14)) + (v9 << 6);
        }
        *(void *)&v6[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
        *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v1sub_1000A2B9C("Transaction emulation ended", 0) = v15;
        ++*((void *)&_swiftEmptySetSingleton + 2);
      }
    }
    while (__CocoaSet.Iterator.next()());
    uint64_t v3 = &_swiftEmptySetSingleton;
  }
  swift_release();
  swift_release();
  return (Swift::Int)v3;
}

uint64_t sub_1000A9E78(uint64_t a1)
{
  return sub_10009FD70(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000A9E80@<X0>(unsigned char *a1@<X8>)
{
  return sub_1000A2AF8(*(uint64_t (**)(uint64_t *))(v1 + 24), a1);
}

void *sub_1000A9EA0@<X0>(unsigned char *a1@<X8>)
{
  return sub_10012A7E8(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

unint64_t sub_1000A9EC0(void *a1)
{
  return sub_10009CDAC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000A9ECC()
{
  swift_release();
  swift_release();
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A9F1C()
{
  return sub_10009D160(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void (**)(char *, uint64_t))(v0 + 48));
}

uint64_t sub_1000A9F2C()
{
  return sub_1001BC3D0(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000A9F3C()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  sub_10006D144(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10006D144(*(void *)(v0 + 56), *(void *)(v0 + 64));
  sub_10006D144(*(void *)(v0 + 72), *(void *)(v0 + 80));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1000A9FA4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  long long v3 = *(_OWORD *)(v0 + 56);
  long long v6 = *(_OWORD *)(v0 + 40);
  long long v7 = v3;
  long long v8 = *(_OWORD *)(v0 + 72);
  return sub_100099E48(v1, v2, &v5, *(void *)(v0 + 88), *(void *)(v0 + 96));
}

uint64_t sub_1000A9FEC()
{
  return sub_1000AA004((void (*)(void))&_swift_release);
}

uint64_t sub_1000AA004(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1000AA04C(uint64_t result, unint64_t a2, uint64_t a3)
{
  return sub_100099B24(result, a2, a3);
}

uint64_t sub_1000AA058()
{
  swift_release();
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_10006D144(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10006D144(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_1000AA0B0(void *a1)
{
}

uint64_t sub_1000AA0F4()
{
  swift_errorRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AA13C()
{
  return sub_10009A37C(v0[2], v0[3], v0[4]);
}

void sub_1000AA154()
{
}

uint64_t sub_1000AA164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Alisha.DKMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000AA1C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Alisha.DKMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1000AA224(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10006C51C(&qword_1004548C8);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      long long v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      id v7 = v6;
      String.hash(into:)();
      Swift::Int v8 = Hasher._finalize()();
      Swift::Int result = (void *)swift_bridgeObjectRelease();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = v8 & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;
        if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
        {
LABEL_3:
          swift_bridgeObjectRelease_n();
LABEL_4:

          goto LABEL_5;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        Swift::Int result = (void *)swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_4;
        }
        uint64_t v21 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v21;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v24 = v23;
          if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25) {
            goto LABEL_3;
          }
          char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          Swift::Int result = (void *)swift_bridgeObjectRelease();
          if (v27) {
            goto LABEL_4;
          }
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      *(void *)(*(void *)(v3 + 48) + 8 * v1sub_1000A2B9C("Transaction emulation started", 1) = v7;
      uint64_t v28 = *(void *)(v3 + 16);
      BOOL v29 = __OFADD__(v28, 1);
      uint64_t v30 = v28 + 1;
      if (v29)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v30;
LABEL_5:
      if (++v4 == v31) {
        return (void *)v3;
      }
    }
  }
  return &_swiftEmptySetSingleton;
}

uint64_t sub_1000AA458()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA490(void *a1)
{
  return sub_10009B428(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000AA498()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000AA4D8()
{
  return sub_10009B4D0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000AA4E4()
{
  swift_errorRelease();
  swift_release();
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000AA52C()
{
  sub_10009B978(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(char ***)(v0 + 40));
}

uint64_t sub_1000AA538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A3F30(a3, a4);
}

uint64_t sub_1000AA558(uint64_t a1)
{
  return sub_100094664(a1);
}

uint64_t sub_1000AA580(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t getEnumTagSinglePayload for AlishaPairing.PairingError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AlishaPairing.PairingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *Swift::Int result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000AA738);
      case 4:
        *(_DWORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *Swift::Int result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaPairing.PairingError()
{
  return &type metadata for AlishaPairing.PairingError;
}

unint64_t sub_1000AA774()
{
  unint64_t result = qword_1004548D0;
  if (!qword_1004548D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1004548D0);
  }
  return result;
}

void *sub_1000AA804@<X0>(void *a1@<X8>)
{
  return sub_100079ACC(a1);
}

uint64_t sub_1000AA81C(uint64_t a1)
{
  return sub_10008C114(a1);
}

uint64_t sub_1000AA858(uint64_t a1)
{
  return sub_1000AA558(a1);
}

uint64_t sub_1000AA878@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000A2ABC(a1);
}

uint64_t sub_1000AA898(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 136) = a5;
  *(void *)(v6 + 144) = v5;
  *(void *)(v6 + 12sub_1000A2B9C("Transaction emulation ended", 0) = a2;
  *(void *)(v6 + 12_Block_object_dispose(&STACK[0x2C0], 8) = a4;
  *(_DWORD *)(v6 + 232) = a3;
  *(void *)(v6 + 112) = a1;
  return _swift_task_switch(sub_1000AA934, 0, 0);
}

uint64_t sub_1000AA934()
{
  uint64_t v72 = v0;
  id v1 = [self identifierWithPid:*(unsigned int *)(v0 + 232)];
  *(void *)(v0 + 152) = v1;
  if (v1)
  {
    int v2 = v1;
    int v3 = self;
    *(void *)(v0 + 8sub_1000A2B9C("Transaction emulation ended", 0) = 0;
    id v4 = v2;
    id v5 = [v3 handleForIdentifier:v4 error:v0 + 80];
    *(void *)(v0 + 16sub_1000A2B9C("Transaction emulation ended", 0) = v5;
    uint64_t v6 = *(void **)(v0 + 80);
    if (v5)
    {
      BOOL v7 = v5;
      id v8 = v6;

      uint64_t v9 = qword_1004536D0;
      id v10 = v7;
      if (v9 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      *(void *)(v0 + 16_Block_object_dispose(&STACK[0x2C0], 8) = sub_10008E55C(v11, (uint64_t)qword_1004686A8);
      id v12 = v10;
      swift_bridgeObjectRetain_n();
      id v13 = v12;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      BOOL v16 = os_log_type_enabled(v14, v15);
      unint64_t v17 = *(void *)(v0 + 120);
      if (v16)
      {
        uint64_t v18 = *(void *)(v0 + 112);
        uint64_t v19 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315394;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 104) = sub_100290514(v18, v17, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v19 + 12) = 2080;
        id v20 = [v13 description];
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v23 = v22;

        *(void *)(v0 + 8_Block_object_dispose(&STACK[0x2C0], 8) = sub_100290514(v21, v23, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v14, v15, "AuthSheet present: Starting presentation for scene ID %s and process %s", (uint8_t *)v19, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }
      uint64_t v37 = *(void *)(v0 + 144);
      uint64_t v38 = self;
      NSString v39 = String._bridgeToObjectiveC()();
      id v40 = [v38 createForSceneID:v39 inProcess:v13];
      *(void *)(v0 + 176) = v40;

      id v41 = [objc_allocWithZone((Class)LAContext) init];
      *(void *)(v0 + 184) = v41;
      uint64_t v42 = *(void **)(v37 + 24);
      id v43 = v41;

      *(void *)(v37 + 24) = v41;
      NSString v44 = String._bridgeToObjectiveC()();
      id v45 = [v43 externalizedContext];
      if (v45)
      {
        uint64_t v53 = v45;
        uint64_t v54 = *(void *)(v0 + 144);
        uint64_t v55 = self;
        uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v58 = v57;

        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10006D144(v56, v58);
        id v60 = [v55 createForName:v44 externalizedContext:isa];
        *(void *)(v0 + 192) = v60;

        id v61 = [self createForRequest:v60];
        *(void *)(v0 + 20sub_1000A2B9C("Transaction emulation ended", 0) = v61;
        unint64_t v62 = *(void **)(v54 + 16);
        id v63 = v61;

        *(void *)(v54 + 16) = v61;
        unint64_t v64 = (void *)swift_task_alloc();
        *(void *)(v0 + 20_Block_object_dispose(&STACK[0x2C0], 8) = v64;
        void v64[2] = v63;
        v64[3] = v40;
        v64[4] = v43;
        unint64_t v65 = (void *)swift_task_alloc();
        *(void *)(v0 + 216) = v65;
        uint64_t v66 = sub_10006C51C(&qword_1004548E0);
        *unint64_t v65 = v0;
        v65[1] = sub_1000AB208;
        uint64_t v52 = v66;
        id v45 = (id)(v0 + 16);
        unint64_t v49 = 0x80000001003B27E0;
        unsigned __int8 v50 = sub_1000AC134;
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        unint64_t v48 = 0xD000000000000032;
        char v51 = v64;
      }
      else
      {
        __break(1u);
      }
      return withCheckedContinuation<A>(isolation:function:_:)(v45, v46, v47, v48, v49, v50, v51, v52);
    }
    id v30 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E55C(v31, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      int v70 = *(_DWORD *)(v0 + 232);
      uint64_t v34 = swift_slowAlloc();
      uint64_t v71 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      *(void *)(v0 + 96) = sub_100290514(v35, v36, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v34 + 12) = 1024;
      *(_DWORD *)(v0 + 224) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "RBS Error %s encountered when getting process handle for pid %d", (uint8_t *)v34, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v67 = 6;
    swift_willThrow();

    swift_errorRelease();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E55C(v24, (uint64_t)qword_1004686A8);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      int v27 = *(_DWORD *)(v0 + 232);
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 67109120;
      *(_DWORD *)(v0 + 22_Block_object_dispose(&STACK[0x2C0], 8) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "AuthSheet present: Unable to convert client pid %d to RBSProcessIdentifier", v28, 8u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    void *v29 = 6;
    swift_willThrow();
  }
  os_log_type_t v68 = *(uint64_t (**)(void))(v0 + 8);
  return v68();
}

uint64_t sub_1000AB208()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1000AB34C, 0, 0);
}

uint64_t sub_1000AB34C()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  if (!v3)
  {
    uint64_t v37 = v0[2];
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "AuthSheet present: Returning from present since auth sheet is unavailable in PK", v20, 2u);
      swift_slowDealloc();
    }
    uint64_t v21 = (void *)v0[24];
    unint64_t v22 = (void *)v0[25];
    uint64_t v24 = (void *)v0[22];
    unint64_t v23 = (void *)v0[23];
    uint64_t v25 = (void *)v0[19];
    os_log_type_t v26 = (void *)v0[20];

    sub_10008E594();
    swift_allocError();
    *int v27 = 29;
    swift_willThrow();

    id v12 = v21;
    sub_100075868(v37, v2);
    goto LABEL_9;
  }
  id v4 = (uint64_t *)v0[18];
  uint64_t v5 = v0[5];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v5;
  uint64_t v7 = *v4;
  swift_retain_n();
  sub_10008BECC(v7);
  uint64_t *v4 = (uint64_t)sub_1000AC178;
  v4[1] = v6;
  if (v2 >> 60 == 15)
  {
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "AuthSheet present: Externalize Context is unexpectedly nil", v10, 2u);
      swift_slowDealloc();
    }
    id v12 = (void *)v0[24];
    uint64_t v11 = (void *)v0[25];
    uint64_t v14 = (void *)v0[22];
    id v13 = (void *)v0[23];
    BOOL v16 = (void *)v0[19];
    os_log_type_t v15 = (void *)v0[20];

    sub_10008E594();
    swift_allocError();
    void *v17 = 6;
    swift_willThrow();

    swift_release_n();
LABEL_9:

    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  uint64_t v31 = (void *)v0[24];
  id v30 = (void *)v0[25];
  os_log_type_t v33 = (void *)v0[22];
  uint64_t v32 = (void *)v0[23];
  uint64_t v35 = (void *)v0[19];
  uint64_t v34 = (void *)v0[20];
  sub_1000758F4(v1, v2);

  swift_release_n();
  sub_100075868(v1, v2);

  unint64_t v36 = (uint64_t (*)(uint64_t, unint64_t))v0[1];
  return v36(v1, v2);
}

void sub_1000AB6B0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  int v27 = a4;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v26 = a1;
  uint64_t v5 = sub_10006C51C(&qword_1004548E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = v8;
  void v24[2] = v8;
  id v10 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_1004548F0);
  uint64_t v11 = swift_allocObject();
  *(_DWORD *)(v11 + 2sub_1000A2B9C("Transaction emulation ended", 0) = 0;
  *(unsigned char *)(v11 + 16) = 0;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v25(v10, a1, v5);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  v24[1] = v12 | 7;
  unint64_t v14 = (v9 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v11;
  v24[0] = *(void *)(v6 + 32);
  ((void (*)(uint64_t, char *, uint64_t))v24[0])(v15 + v13, v10, v5);
  BOOL v16 = v27;
  *(void *)(v15 + v14) = v27;
  uint64_t v34 = sub_1000AC29C;
  uint64_t v35 = v15;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  uint64_t v32 = sub_1000ABC74;
  os_log_type_t v33 = &unk_100410F58;
  unint64_t v17 = _Block_copy(&aBlock);
  swift_retain_n();
  id v18 = v16;
  swift_release();
  v25(v10, v26, v5);
  uint64_t v19 = (v12 + 32) & ~v12;
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v28;
  *(void *)(v20 + 16) = v28;
  *(void *)(v20 + 24) = v11;
  ((void (*)(uint64_t, char *, uint64_t))v24[0])(v20 + v19, v10, v5);
  uint64_t v34 = sub_1000AC440;
  uint64_t v35 = v20;
  unint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v31 = 1107296256;
  uint64_t v32 = sub_10007C0C4;
  os_log_type_t v33 = &unk_100410FA8;
  unint64_t v22 = _Block_copy(&aBlock);
  id v23 = v21;
  swift_release();
  [v23 displayForPresentationTarget:v29 withAction:v17 completion:v22];
  swift_release();
  _Block_release(v22);
  _Block_release(v17);
}

void sub_1000AB9B4(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a3 + 4;
  uint64_t v9 = a3 + 5;
  os_unfair_lock_lock(a3 + 5);
  sub_10025203C(v8, v24);
  os_unfair_lock_unlock(v9);
  if (v24[0])
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004686A8);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "AuthSheet present: Invalidated before auth performed", v12, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_1004686A8);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      BOOL v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "AuthSheet present: Auth performed, returning continuation for consumption", v16, 2u);
      swift_slowDealloc();
    }

    os_unfair_lock_lock(v9);
    sub_1000B3ED0(v8);
    os_unfair_lock_unlock(v9);
    id v17 = [a5 externalizedContext];
    if (v17)
    {
      id v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      unint64_t v21 = 0xF000000000000000;
    }
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = a1;
    *(void *)(v22 + 24) = a2;
    v24[0] = v19;
    v24[1] = v21;
    void v24[2] = sub_1000AC4F8;
    void v24[3] = v22;
    swift_retain();
    sub_10006C51C(&qword_1004548E8);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1000ABC74(uint64_t a1, void *aBlock)
{
  unint64_t v2 = *(void (**)(uint64_t (*)(char), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_1000AC4E0, v4);
  swift_release();

  return swift_release();
}

void sub_1000ABD08(void *a1, uint64_t a2)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E55C(v4, (uint64_t)qword_1004686A8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AuthSheet present: Auth sheet has been invalidated by PassKitCore", v7, 2u);
    swift_slowDealloc();
  }

  [a1 invalidateWithCompletion:0];
  uint64_t v8 = (os_unfair_lock_s *)(a2 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 20));
  sub_10025203C((unsigned char *)(a2 + 16), &v15);
  os_unfair_lock_unlock((os_unfair_lock_t)(a2 + 20));
  char v9 = v15;
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(oslog, v10);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "AuthSheet present: Returning from handled continuation upon invalidation", v12, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "AuthSheet present: Resuming continuation upon invalidation", v13, 2u);
      swift_slowDealloc();
    }

    os_unfair_lock_lock(v8);
    sub_1000B3ED0((unsigned char *)(a2 + 16));
    os_unfair_lock_unlock(v8);
    long long v15 = xmmword_100378280;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    sub_10006C51C(&qword_1004548E8);
    CheckedContinuation.resume(returning:)();
  }
}

void sub_1000ABF88(char a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = (void (*)(void))*v1;
  if (*v1)
  {
    uint64_t v5 = qword_1004536D0;
    swift_retain();
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      char v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v9 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Notifying PassKitCore about auth completion commited %{BOOL}d", v9, 8u);
      swift_slowDealloc();
    }

    v3(a1 & 1);
    sub_10008BECC((uint64_t)v3);
    uint64_t v10 = *v2;
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_10008BECC(v10);
  uint64_t *v2 = 0;
  v2[1] = 0;
  BOOL v11 = (void (*)(void))v2[2];
  if (v11)
  {
    [(id)v2[2] invalidateWithCompletion:0];

    v2[2] = 0;
  }
  uint64_t v12 = (void (*)(void))v2[3];
  if (v12)
  {
    [(id)v2[3] invalidate];
  }
  v2[3] = 0;
}

void sub_1000AC134(uint64_t a1)
{
  sub_1000AB6B0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000AC140()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AC178(char a1)
{
  unint64_t v2 = *(uint64_t (**)(char *))(v1 + 16);
  char v4 = a1;
  return v2(&v4);
}

uint64_t sub_1000AC1B0()
{
  uint64_t v1 = sub_10006C51C(&qword_1004548E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000AC29C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_10006C51C(&qword_1004548E8) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(os_unfair_lock_s **)(v2 + 16);
  os_log_type_t v8 = *(void **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1000AB9B4(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_1000AC350(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000A2B9C("Transaction emulation ended", 0) = v2;
  return swift_retain();
}

uint64_t sub_1000AC360()
{
  return swift_release();
}

uint64_t sub_1000AC368()
{
  uint64_t v1 = sub_10006C51C(&qword_1004548E8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1000AC440()
{
  sub_10006C51C(&qword_1004548E8);
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);

  sub_1000ABD08(v1, v2);
}

uint64_t sub_1000AC4A8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000AC4E0(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

uint64_t sub_1000AC4F8(unsigned __int8 *a1)
{
  return sub_1001BC37C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t type metadata accessor for SEFidoEvents()
{
  return self;
}

uint64_t destroy for DefaultAppInfo()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DefaultAppInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DefaultAppInfo(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for DefaultAppInfo(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DefaultAppInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultAppInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultAppInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 4sub_1000A2B9C("Transaction emulation ended", 0) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 4sub_1000A2B9C("Transaction emulation ended", 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultAppInfo()
{
  return &type metadata for DefaultAppInfo;
}

uint64_t sub_1000ACEA0()
{
  uint64_t v1 = v0;
  uint64_t v3 = *v0;
  unint64_t v2 = v0[1];
  id v4 = objc_allocWithZone((Class)LSApplicationRecord);
  swift_bridgeObjectRetain();
  id v5 = sub_10019636C(v3, v2, 1);
  if (qword_100453688 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E55C(v6, (uint64_t)qword_100454920);
  long long v14 = *(_OWORD *)(v1 + 3);
  swift_bridgeObjectRetain();
  sub_100079AE8((uint64_t)&v14);
  id v7 = v5;
  swift_bridgeObjectRetain();
  sub_100079AE8((uint64_t)&v14);
  id v8 = v7;
  char v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    sub_100290514(v3, v2, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_100079B14((uint64_t)&v14);
    swift_bridgeObjectRelease();
    sub_100079B14((uint64_t)&v14);
    *(_WORD *)(v11 + 12) = 2048;
    [v8 installType];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Current Default Application with bundleID %s is installed with installType %lu", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();

    sub_100079B14((uint64_t)&v14);
    swift_bridgeObjectRelease();
    sub_100079B14((uint64_t)&v14);
  }
  return 1;
}

Swift::Int sub_1000AD370()
{
  return Hasher._finalize()();
}

uint64_t sub_1000AD3CC()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000AD424()
{
  return Hasher._finalize()();
}

uint64_t sub_1000AD47C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

unint64_t sub_1000AD4B0()
{
  unint64_t result = qword_100454938;
  if (!qword_100454938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454938);
  }
  return result;
}

uint64_t sub_1000AD504()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100454920);
  sub_10008E55C(v0, (uint64_t)qword_100454920);
  return Logger.init(subsystem:category:)();
}

void sub_1000AD588(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = sub_1002C0AD0(0x6449656C646E7562, 0xE800000000000000);
    if (v5)
    {
      sub_1000AA580(*(void *)(a1 + 56) + 32 * v4, (uint64_t)v24);
      if (swift_dynamicCast())
      {
        uint64_t v6 = v23;
        if (*(void *)(a1 + 16))
        {
          uint64_t v7 = v22;
          uint64_t v8 = sub_1002C0AD0(0x6E69616D6F64, 0xE600000000000000);
          if (v9)
          {
            sub_1000AA580(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v24);
            if (swift_dynamicCast())
            {
              if (*(void *)(a1 + 16))
              {
                uint64_t v10 = v22;
                uint64_t v11 = sub_1002C0AD0(0x4E79616C70736964, 0xEB00000000656D61);
                if (v12)
                {
                  sub_1000AA580(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v24);
                  if (swift_dynamicCast())
                  {
                    swift_bridgeObjectRelease();
                    uint64_t v13 = v22;
                    uint64_t v14 = v23;
                    goto LABEL_18;
                  }
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease();
      }
    }
  }
  if (qword_100453688 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E55C(v15, (uint64_t)qword_100454920);
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)id v18 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v19 = Dictionary.description.getter();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    sub_100290514(v19, v21, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Malformed dict %s when forming default app info", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v7 = 0;
  uint64_t v6 = 0;
  uint64_t v10 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_18:
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v10;
  a2[3] = v13;
  a2[4] = v14;
}

uint64_t *sub_1000AD8C8(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_1000AD92C()
{
  uint64_t v17 = type metadata accessor for HPKE.AEAD();
  uint64_t v0 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v1);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for HPKE.KDF();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for HPKE.KEM();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for HPKE.Ciphersuite();
  sub_1000AD8C8(v14, qword_100454940);
  sub_10008E55C(v14, (uint64_t)qword_100454940);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, enum case for HPKE.KEM.P256_HKDF_SHA256(_:), v9);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for HPKE.KDF.HKDF_SHA256(_:), v4);
  (*(void (**)(char *, void, uint64_t))(v0 + 104))(v3, enum case for HPKE.AEAD.AES_GCM_128(_:), v17);
  return HPKE.Ciphersuite.init(kem:kdf:aead:)();
}

char *sub_1000ADB84(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v56 = a1;
  uint64_t v57 = a2;
  uint64_t v6 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  uint64_t v55 = v7;
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for HPKE.Sender();
  uint64_t v58 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v47 - v21;
  v60[0] = a3;
  v60[1] = a4;
  sub_10006D0EC(a3, a4);
  uint64_t v23 = v61;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  if (!v23)
  {
    char v51 = v10;
    uint64_t v24 = v54;
    uint64_t v48 = a3;
    uint64_t v61 = 0;
    unint64_t v49 = a4;
    uint64_t v50 = v11;
    uint64_t v25 = v53;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    uint64_t v52 = v22;
    v26(v19, v22, v15);
    if (qword_100453690 != -1) {
      swift_once();
    }
    uint64_t v27 = sub_10008E55C(v24, (uint64_t)qword_100454940);
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v51, v27, v24);
    uint64_t v28 = v61;
    HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
    uint64_t v29 = v58;
    if (v28)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v52, v15);
    }
    else
    {
      v60[0] = v56;
      v60[1] = v57;
      long long v59 = xmmword_100378350;
      sub_10008BFB8();
      uint64_t v30 = HPKE.Sender.seal<A, B>(_:authenticating:)();
      uint64_t v61 = 0;
      unint64_t v56 = v32;
      uint64_t v57 = v30;
      sub_10006C51C(&qword_100455670);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378460;
      strcpy((char *)v60, "version");
      v60[1] = 0xE700000000000000;
      AnyHashable.init<A>(_:)();
      uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 72) = v34;
      *(void *)(inited + 8sub_1000A2B9C("Transaction emulation ended", 0) = v35;
      strcpy((char *)v60, "publicKeyHash");
      HIWORD(v60[1]) = -4864;
      AnyHashable.init<A>(_:)();
      uint64_t v36 = sub_1002B3BD0(v48, v49);
      uint64_t v55 = v15;
      unint64_t v38 = v37;
      Swift::String v39 = Data.base64EncodedString(options:)(0);
      uint64_t v47 = v14;
      sub_10006D144(v36, v38);
      *(void *)(inited + 16_Block_object_dispose(&STACK[0x2C0], 8) = &type metadata for String;
      *(Swift::String *)(inited + 144) = v39;
      v60[0] = 0xD000000000000012;
      v60[1] = 0x80000001003B29F0;
      AnyHashable.init<A>(_:)();
      uint64_t v40 = HPKE.Sender.encapsulatedKey.getter();
      unint64_t v42 = v41;
      Swift::String v43 = Data.base64EncodedString(options:)(0);
      sub_10006D144(v40, v42);
      *(void *)(inited + 24sub_1000A2B9C("Transaction emulation ended", 0) = &type metadata for String;
      *(Swift::String *)(inited + 216) = v43;
      v60[0] = 1635017060;
      v60[1] = 0xE400000000000000;
      AnyHashable.init<A>(_:)();
      unint64_t v45 = v56;
      uint64_t v44 = v57;
      Swift::String v46 = Data.base64EncodedString(options:)(0);
      *(void *)(inited + 312) = &type metadata for String;
      *(Swift::String *)(inited + 28_Block_object_dispose(&STACK[0x2C0], 8) = v46;
      uint64_t v19 = (char *)sub_1001DB24C(inited);
      sub_10006D144(v44, v45);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v47, v50);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v52, v55);
    }
  }
  return v19;
}

uint64_t sub_1000AE120(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for HPKE.Ciphersuite();
  uint64_t v41 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v39 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for HPKE.Recipient();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v42 = 0xD000000000000012;
  unint64_t v43 = 0x80000001003B29F0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v16 = sub_1002C0B68((uint64_t)v44), (v17 & 1) != 0))
  {
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v16, (uint64_t)&v45);
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  sub_1000AE724((uint64_t)v44);
  if (!*((void *)&v46 + 1))
  {
    sub_1000AE778((uint64_t)&v45);
    goto LABEL_10;
  }
  uint64_t v38 = v12;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    uint64_t v20 = sub_1000AE7D8();
    uint64_t v21 = "Missing ephemeralPublicKey";
    goto LABEL_11;
  }
  uint64_t v37 = Data.init(base64Encoded:options:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v19 >> 60 != 15)
  {
    unint64_t v23 = v19;
    unint64_t v42 = 1635017060;
    unint64_t v43 = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    if (*(void *)(a1 + 16) && (unint64_t v24 = sub_1002C0B68((uint64_t)v44), (v25 & 1) != 0))
    {
      sub_1000AA580(*(void *)(a1 + 56) + 32 * v24, (uint64_t)&v45);
    }
    else
    {
      long long v45 = 0u;
      long long v46 = 0u;
    }
    sub_1000AE724((uint64_t)v44);
    if (*((void *)&v46 + 1))
    {
      if (swift_dynamicCast())
      {
        uint64_t v35 = Data.init(base64Encoded:options:)();
        unint64_t v27 = v26;
        swift_bridgeObjectRelease();
        unint64_t v36 = v27;
        if (v27 >> 60 == 15)
        {
          uint64_t v20 = sub_1000AE7D8();
          sub_100299FAC(0, 1, 0x2064696C61766E49, 0xEC00000061746164, 0);
          swift_willThrow();
          uint64_t v28 = v37;
          unint64_t v29 = v23;
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v10, v40, v7);
          uint64_t v20 = v37;
          if (qword_100453690 != -1) {
            swift_once();
          }
          uint64_t v30 = sub_10008E55C(v3, (uint64_t)qword_100454940);
          (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v6, v30, v3);
          sub_10006D0EC(v20, v23);
          uint64_t v31 = v47;
          HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
          uint64_t v32 = v38;
          if (!v31)
          {
            uint64_t v34 = v35;
            unint64_t v33 = v36;
            v44[0] = v35;
            v44[1] = v36;
            long long v45 = xmmword_100378350;
            sub_10008BFB8();
            uint64_t v20 = HPKE.Recipient.open<A, B>(_:authenticating:)();
            sub_100075868(v37, v23);
            (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v11);
            sub_100075868(v34, v33);
            return v20;
          }
          sub_100075868(v20, v23);
          uint64_t v28 = v35;
          unint64_t v29 = v36;
        }
        goto LABEL_24;
      }
    }
    else
    {
      sub_1000AE778((uint64_t)&v45);
    }
    uint64_t v20 = sub_1000AE7D8();
    sub_100299FAC(0, 1, 0x20676E697373694DLL, 0xEC00000061746164, 0);
    swift_willThrow();
    uint64_t v28 = v37;
    unint64_t v29 = v19;
LABEL_24:
    sub_100075868(v28, v29);
    return v20;
  }
  uint64_t v20 = sub_1000AE7D8();
  uint64_t v21 = "Invalid ephemeralPublicKey";
LABEL_11:
  sub_100299FAC(0, 1, 0xD00000000000001ALL, (unint64_t)(v21 - 32) | 0x8000000000000000, 0);
  swift_willThrow();
  return v20;
}

uint64_t sub_1000AE724(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000AE778(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C((uint64_t *)&unk_1004556C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1000AE7D8()
{
  unint64_t result = qword_100454598;
  if (!qword_100454598)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100454598);
  }
  return result;
}

uint64_t sub_1000AE818(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced13EventListener_queue);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v3);
  uint64_t v9 = v8;
  char v10 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v1;
  *(void *)(v12 + 24) = a1;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1000AF4E0;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1000A9F2C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E8C54;
  aBlock[3] = &unk_100411180;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  id v15 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v9, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t sub_1000AEA58(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  uint64_t v6 = &selRef_fetchTrustedSecureElementIdentities_;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    id v8 = [v3 name];
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    uint64_t v6 = &selRef_fetchTrustedSecureElementIdentities_;
    sub_100290514(v9, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received notification %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v12 = [v3 v6[285]];
  swift_beginAccess();
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(void *)(v13 + 16) && (unint64_t v14 = sub_1002C0CB4((uint64_t)v12), (v15 & 1) != 0))
  {
    uint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
    swift_endAccess();
    swift_bridgeObjectRetain();

    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain();
      unint64_t v18 = (void **)(v16 + 64);
      do
      {
        uint64_t v19 = (uint64_t)*(v18 - 1);
        uint64_t v20 = *v18;
        uint64_t v23 = (uint64_t)*(v18 - 4);
        long long v24 = *(_OWORD *)(v18 - 3);
        uint64_t v25 = v19;
        unint64_t v26 = v20;
        swift_bridgeObjectRetain();
        swift_retain();
        id v21 = v20;
        sub_1000AECF0((uint64_t)&v23);

        swift_release();
        swift_bridgeObjectRelease();
        v18 += 5;
        --v17;
      }
      while (v17);
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {

    return swift_endAccess();
  }
}

uint64_t sub_1000AECF0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v31 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v28 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 24);
  unint64_t v10 = *(void **)(a1 + 32);
  long long v27 = *(_OWORD *)(a1 + 8);
  unint64_t v12 = v27;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  id v13 = v10;
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v24 = v3;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = v9;
    uint64_t v17 = (uint8_t *)v16;
    aBlock[0] = swift_slowAlloc();
    uint64_t v25 = v1;
    *(_DWORD *)uint64_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v34 = (void *)sub_100290514(v26, v12, aBlock);
    uint64_t v3 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_release_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Calling handler for %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v26;
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v9;
  *(_OWORD *)(v18 + 24) = v27;
  *(void *)(v18 + 4sub_1000A2B9C("Transaction emulation ended", 0) = v11;
  *(void *)(v18 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v13;
  aBlock[4] = (uint64_t)sub_1000AF558;
  aBlock[5] = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10007C0C4;
  aBlock[3] = (uint64_t)&unk_1004111D0;
  uint64_t v19 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  v13;
  uint64_t v20 = v28;
  static DispatchQoS.unspecified.getter();
  uint64_t v34 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  id v21 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v3);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v20, v30);
  return swift_release();
}

uint64_t sub_1000AF168()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced13EventListener_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000AF220()
{
  return type metadata accessor for EventListener();
}

uint64_t type metadata accessor for EventListener()
{
  uint64_t result = qword_100454990;
  if (!qword_100454990) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000AF274()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void destroy for EventListener.Handler(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v2 = *(void **)(a1 + 32);
}

uint64_t initializeWithCopy for EventListener.Handler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  id v4 = v3;
  return a1;
}

void *assignWithCopy for EventListener.Handler(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = (void *)a2[4];
  uint64_t v6 = (void *)a1[4];
  a1[4] = v5;
  id v7 = v5;

  return a1;
}

uint64_t assignWithTake for EventListener.Handler(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for EventListener.Handler()
{
  return &type metadata for EventListener.Handler;
}

uint64_t sub_1000AF4A0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AF4E0()
{
  return sub_1000AEA58(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000AF4E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AF4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000A2B9C("Transaction emulation ended", 0) = v2;
  return swift_retain();
}

uint64_t sub_1000AF508()
{
  return swift_release();
}

uint64_t sub_1000AF510()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000AF558()
{
  return (*(uint64_t (**)(void))(v0 + 32))();
}

unint64_t sub_1000AF580()
{
  unint64_t result = qword_100453D90;
  if (!qword_100453D90)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100453D90);
  }
  return result;
}

void sub_1000AF5E0(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for SecureElementApplicationEntity();
    sub_1000B37D8((unint64_t *)&unk_10045BEF0, (void (*)(uint64_t))type metadata accessor for SecureElementApplicationEntity);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v24;
    uint64_t v22 = v25;
    uint64_t v2 = v26;
    uint64_t v3 = v27;
    unint64_t v4 = v28;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v6 = ~v5;
    uint64_t v7 = -v5;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = v6;
    uint64_t v3 = 0;
  }
  int64_t v21 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_39;
    }
    type metadata accessor for SecureElementApplicationEntity();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v23;
    swift_unknownObjectRelease();
    uint64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v23) {
      goto LABEL_39;
    }
LABEL_33:
    id v16 = v12;
    id v17 = [v16 identifier];
    if (v17)
    {
      uint64_t v18 = v17;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v19 = [v16 bundleIdentifier];
      if (v19)
      {
        uint64_t v20 = v19;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      type metadata accessor for ApplicationInfoInternal();
      [v16 gdprVersionShown];
      dispatch thunk of ApplicationInfoInternal.__allocating_init(applicationId:bundleId:gdprShownVersion:)();

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
    uint64_t v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
LABEL_32:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_39;
    }
    goto LABEL_33;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v21) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v22 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v21) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v22 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v21) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v22 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v21) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v22 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v21) {
              goto LABEL_39;
            }
            unint64_t v14 = *(void *)(v22 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v21 != v15)
              {
                unint64_t v14 = *(void *)(v22 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_39:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_1000AF9D0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v87 = a2;
  uint64_t v5 = sub_10006C51C(&qword_100454A40);
  __chkstk_darwin(v5 - 8, v6);
  os_log_type_t v88 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StateInternal();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  unint64_t v86 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  uint64_t v89 = (char *)&v76 - v13;
  uint64_t v14 = sub_10006C51C(&qword_100455EB0);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  uint64_t v18 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  int64_t v21 = (char *)&v76 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void **)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v85 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v91 = (char *)&v76 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  unint64_t v33 = (char *)&v76 - v32;
  __chkstk_darwin(v31, v34);
  unint64_t v36 = (char *)&v76 - v35;
  id v37 = [a1 friendlyName];
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v93 = a3;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v92 = v40;

    id v41 = [a1 uuid];
    if (v41)
    {
      unint64_t v42 = v41;
      uint64_t v80 = v39;
      uint64_t v81 = v8;
      unint64_t v84 = v36;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v43 = (void (*)(char *, char *, uint64_t))v23[4];
      v43(v21, v33, v22);
      uint64_t v44 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v23[7];
      v44(v21, 0, 1, v22);
      unint64_t v83 = v23;
      uint64_t v82 = (unsigned int (*)(char *, uint64_t, uint64_t))v23[6];
      if (v82(v21, 1, v22) != 1)
      {
        unint64_t v79 = v44;
        v43(v84, v21, v22);
        id v45 = [a1 ownerApplications];
        if (v45
          && (long long v46 = v45,
              uint64_t v94 = 0,
              uint64_t v47 = type metadata accessor for SecureElementApplicationEntity(),
              sub_1000B37D8((unint64_t *)&unk_10045BEF0, (void (*)(uint64_t))type metadata accessor for SecureElementApplicationEntity), uint64_t v78 = v47, static Set._conditionallyBridgeFromObjectiveC(_:result:)(), v46, v94))
        {
          uint64_t v77 = v94;
          id v48 = [a1 userApplications];
          if (v48)
          {
            unint64_t v49 = v48;
            uint64_t v94 = 0;
            static Set._conditionallyBridgeFromObjectiveC(_:result:)();

            uint64_t v50 = v94;
            if (v94)
            {
              id v51 = [a1 productConfigUUID];
              if (v51)
              {
                uint64_t v52 = v51;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                v43(v18, v33, v22);
                v79(v18, 0, 1, v22);
                if (v82(v18, 1, v22) != 1)
                {
                  v43(v91, v18, v22);
                  sub_1000AF5E0(v77);
                  uint64_t v82 = v53;
                  swift_bridgeObjectRelease();
                  sub_1000AF5E0(v50);
                  uint64_t v55 = v54;
                  swift_bridgeObjectRelease();
                  [a1 state];
                  int64_t v21 = v88;
                  StateInternal.init(rawDiscriminant:instanceInfos:)();
                  uint64_t v56 = v90;
                  uint64_t v57 = v81;
                  int v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48))(v21, 1, v81);
                  long long v59 = v83;
                  uint64_t v60 = v93;
                  if (v58 != 1)
                  {
                    unint64_t v79 = v55;
                    (*(void (**)(char *, char *, uint64_t))(v56 + 32))(v89, v21, v57);
                    swift_bridgeObjectRetain();
                    uint64_t v66 = v87;
                    char v67 = sub_1000B3130((unint64_t)v82, v87, v60);
                    swift_bridgeObjectRelease();
                    uint64_t v68 = v57;
                    if (v67)
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v93 = 1;
                    }
                    else
                    {
                      swift_bridgeObjectRetain();
                      char v69 = sub_1000B3130((unint64_t)v79, v66, v60);
                      swift_bridgeObjectRelease_n();
                      if ((v69 & 1) == 0)
                      {

                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        (*(void (**)(char *, uint64_t))(v90 + 8))(v89, v57);
                        unint64_t v75 = (void (*)(char *, uint64_t))v83[1];
                        v75(v91, v22);
                        v75(v84, v22);
                        return 0;
                      }
                      uint64_t v93 = 0;
                    }
                    int v70 = v83;
                    uint64_t v71 = (void (*)(char *, char *, uint64_t))v83[2];
                    v71(v33, v84, v22);
                    uint64_t v73 = v89;
                    uint64_t v72 = v90;
                    (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v86, v89, v68);
                    v71(v85, v91, v22);
                    uint64_t v64 = dispatch thunk of CredentialInternal.__allocating_init(identifier:friendlyName:ownerApplications:userApplications:state:configUUID:accessLevel:)();

                    (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v81);
                    uint64_t v74 = (void (*)(char *, uint64_t))v70[1];
                    v74(v91, v22);
                    v74(v84, v22);
                    return v64;
                  }

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  uint64_t v61 = (void (*)(char *, uint64_t))v59[1];
                  v61(v91, v22);
                  v61(v84, v22);
                  unint64_t v62 = &qword_100454A40;
                  goto LABEL_15;
                }
              }
              else
              {
                v79(v18, 1, 1, v22);
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t))v83[1])(v84, v22);
              unint64_t v62 = &qword_100455EB0;
              uint64_t v63 = (uint64_t)v18;
              goto LABEL_16;
            }
          }

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        ((void (*)(char *, uint64_t))v83[1])(v84, v22);
        return 0;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v23[7])(v21, 1, 1, v22);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    unint64_t v62 = &qword_100455EB0;
LABEL_15:
    uint64_t v63 = (uint64_t)v21;
LABEL_16:
    sub_10008E734(v63, v62);
    return 0;
  }
  swift_bridgeObjectRelease();

  return 0;
}

uint64_t sub_1000B02A4(void *a1)
{
  uint64_t v4 = type metadata accessor for StateInternal();
  uint64_t v228 = *(void *)(v4 - 8);
  uint64_t v229 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (uint8_t *)&v220 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  int v225 = (id *)((char *)&v220 - v10);
  uint64_t v231 = type metadata accessor for InstanceInfoInternal.LifeCycleState();
  uint64_t v11 = *(void *)(v231 - 8);
  uint64_t v13 = __chkstk_darwin(v231, v12);
  int v226 = (char *)&v220 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  v230 = (char *)&v220 - v17;
  __chkstk_darwin(v16, v18);
  os_log_t v235 = (os_log_t)((char *)&v220 - v19);
  uint64_t v20 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v239 = (uint64_t)&v220 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for UUID();
  v238 = *(void (***)(os_log_t, uint64_t))(v23 - 8);
  uint64_t v25 = __chkstk_darwin(v23, v24);
  v234 = (uint8_t *)&v220 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v220 - v29;
  __chkstk_darwin(v28, v31);
  os_log_t v241 = (os_log_t)((char *)&v220 - v32);
  uint64_t v232 = a1;
  id v33 = [a1 applet];
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = sub_10008E55C(v34, (uint64_t)qword_1004686A8);
  id v36 = v33;
  id v37 = v1;
  id v38 = v36;
  id v39 = v37;
  uint64_t v240 = v35;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  uint64_t v233 = v2;
  uint64_t v227 = v8;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc();
    v236 = v30;
    uint64_t v45 = v44;
    uint64_t v224 = swift_slowAlloc();
    uint64_t v243 = v224;
    *(_DWORD *)uint64_t v45 = 136315394;
    os_log_t v223 = v40;
    long long v46 = v38;
    id v47 = [v38 identifier];
    uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v237 = v23;
    unint64_t v50 = v49;

    uint64_t v242 = sub_100290514(v48, v50, &v243);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v45 + 12) = 2080;
    uint64_t v221 = v45 + 14;
    int v222 = v42;
    uint64_t v51 = v11;
    id v52 = v39;
    os_log_t v53 = v241;
    CredentialInternal.identifier.getter();
    uint64_t v54 = UUID.uuidString.getter();
    unint64_t v56 = v55;
    uint64_t v57 = v238;
    os_log_t v58 = v53;
    id v39 = v52;
    uint64_t v11 = v51;
    v238[1](v58, v237);
    uint64_t v242 = sub_100290514(v54, v56, &v243);
    id v38 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v23 = v237;
    swift_bridgeObjectRelease();
    os_log_t v59 = v223;
    _os_log_impl((void *)&_mh_execute_header, v223, (os_log_type_t)v222, "Syncing NFAppletInfo %s with credential %s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v30 = v236;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v57 = v238;
  }
  uint64_t v60 = v239;
  sub_10012018C(v239);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v57[6])(v60, 1, v23) == 1)
  {
    sub_10008E734(v60, &qword_100455EB0);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "NFApplet is nil or NFApplet is missing credentialUUID tag", v63, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    void *v64 = 3;
    swift_willThrow();
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v57[4])(v30, v60, v23);
    os_log_t v66 = v241;
    char v67 = (uint8_t *)v39;
    CredentialInternal.identifier.getter();
    char v68 = static UUID.== infix(_:_:)();
    char v69 = v57;
    uint64_t v70 = (uint64_t)(v57 + 1);
    uint64_t v71 = (void (**)(os_log_t, uint64_t))v57[1];
    uint64_t v239 = v70;
    ((void (*)(os_log_t, uint64_t))v71)(v66, v23);
    if (v68)
    {
      v234 = v67;
      v238 = v71;
      type metadata accessor for InstanceInfoInternal();
      uint64_t v72 = v232;
      uint64_t v73 = sub_1000B1B3C(v72);
      if (v73)
      {
        uint64_t v74 = (void *)v73;
        InstanceInfoInternal.lifeCycleState.getter();
        os_log_t v75 = v235;
        InstanceInfoInternal.LifeCycleState.init(from:)();
        uint64_t v76 = v230;
        uint64_t v77 = v231;
        (*(void (**)(char *, os_log_t, uint64_t))(v11 + 16))(v230, v75, v231);
        uint64_t v78 = v11;
        id v79 = v74;
        uint64_t v80 = Logger.logObject.getter();
        os_log_type_t v81 = static os_log_type_t.debug.getter();
        int v82 = v81;
        BOOL v83 = os_log_type_enabled(v80, v81);
        v236 = v30;
        uint64_t v237 = v23;
        id v220 = v38;
        uint64_t v232 = v79;
        if (v83)
        {
          uint64_t v84 = swift_slowAlloc();
          uint64_t v224 = swift_slowAlloc();
          uint64_t v243 = v224;
          *(_DWORD *)uint64_t v84 = 136315394;
          uint64_t v221 = v84 + 4;
          os_log_t v223 = v80;
          uint64_t v85 = InstanceInfoInternal.instanceAID.getter();
          int v222 = v82;
          unint64_t v86 = v79;
          uint64_t v87 = v85;
          unint64_t v89 = v88;
          uint64_t v90 = v233;
          uint64_t v91 = sub_10023CDF4(v85, v88);
          uint64_t v233 = v90;
          uint64_t v242 = (uint64_t)v91;
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v92 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v94 = v93;
          swift_bridgeObjectRelease();
          sub_10006D144(v87, v89);
          uint64_t v242 = sub_100290514(v92, v94, &v243);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v84 + 12) = 2080;
          BOOL v95 = v230;
          uint64_t v96 = InstanceInfoInternal.LifeCycleState.description.getter();
          uint64_t v242 = sub_100290514(v96, v97, &v243);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t v98 = *(char **)(v78 + 8);
          uint64_t v99 = (v78 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          ((void (*)(char *, uint64_t))v98)(v95, v77);
          os_log_t v100 = v223;
          _os_log_impl((void *)&_mh_execute_header, v223, (os_log_type_t)v222, "AID %s lifecycle %s", (uint8_t *)v84, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          unint64_t v98 = *(char **)(v78 + 8);
          uint64_t v99 = (v78 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          ((void (*)(char *, uint64_t))v98)(v76, v77);
        }
        uint64_t v132 = v77;
        os_log_type_t v133 = v226;
        static InstanceInfoInternal.LifeCycleState.locked.getter();
        sub_1000B37D8(&qword_100454A28, (void (*)(uint64_t))&type metadata accessor for InstanceInfoInternal.LifeCycleState);
        char v134 = dispatch thunk of SetAlgebra.isSuperset(of:)();
        ((void (*)(char *, uint64_t))v98)(v133, v77);
        uint64_t v135 = (unint64_t *)v227;
        if (v134)
        {
          uint64_t v136 = v77;
          uint64_t v137 = v234;
          unint64_t v138 = Logger.logObject.getter();
          os_log_type_t v139 = static os_log_type_t.info.getter();
          BOOL v140 = os_log_type_enabled(v138, v139);
          v234 = v137;
          if (v140)
          {
            unint64_t v141 = (uint8_t *)swift_slowAlloc();
            uint64_t v142 = swift_slowAlloc();
            v230 = v98;
            uint64_t v240 = v142;
            uint64_t v243 = v142;
            uint64_t v224 = v99;
            *(_DWORD *)unint64_t v141 = 136315138;
            int v226 = (char *)(v141 + 4);
            uint64_t v227 = v141;
            os_log_t v143 = v241;
            CredentialInternal.identifier.getter();
            uint64_t v144 = UUID.uuidString.getter();
            unint64_t v146 = v145;
            uint64_t v148 = v237;
            unint64_t v147 = v238;
            ((void (*)(os_log_t, uint64_t))v238)(v143, v237);
            uint64_t v242 = sub_100290514(v144, v146, &v243);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            uint64_t v136 = v231;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v138, v139, "Credential %s transitioned into locked state", v227, 0xCu);
            swift_arrayDestroy();
            unint64_t v98 = v230;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            uint64_t v148 = v237;
            unint64_t v147 = v238;
          }
          id v149 = v220;
          sub_10006C51C(&qword_1004557C0);
          uint64_t v171 = swift_allocObject();
          *(_OWORD *)(v171 + 16) = xmmword_100378B90;
          id v172 = v232;
          *(void *)(v171 + 32) = v232;
          uint64_t v243 = v171;
          specialized Array._endMutation()();
          uint64_t v173 = v225;
          *int v225 = v243;
          (*(void (**)(void *, void, uint64_t))(v228 + 104))(v173, enum case for StateInternal.locked(_:), v229);
          id v174 = v172;
          CredentialInternal.state.setter();

          ((void (*)(os_log_t, uint64_t))v98)(v235, v136);
          ((void (*)(char *, uint64_t))v147)(v236, v148);
        }
        else
        {
          unint64_t v150 = v234;
          CredentialInternal.state.getter();
          uint64_t v152 = v228;
          uint64_t v151 = v229;
          uint64_t v153 = (*(uint64_t (**)(unint64_t *, uint64_t))(v228 + 88))(v135, v229);
          uint64_t v154 = v153;
          uint64_t v155 = enum case for StateInternal.installed(_:);
          if (v153 != enum case for StateInternal.installed(_:))
          {
            if (v153 == enum case for StateInternal.installationPending(_:))
            {
              sub_10006C51C(&qword_1004557C0);
              uint64_t v175 = swift_allocObject();
              *(_OWORD *)(v175 + 16) = xmmword_100378B90;
              unint64_t v176 = v232;
              *(void *)(v175 + 32) = v232;
              uint64_t v243 = v175;
              specialized Array._endMutation()();
              unint64_t v177 = v225;
              *int v225 = v243;
              (*(void (**)(void *, uint64_t, uint64_t))(v152 + 104))(v177, v155, v151);
              id v178 = v176;
              uint64_t v179 = v234;
              CredentialInternal.state.setter();
              unint64_t v180 = v179;
              id v181 = v178;
              uint64_t v182 = v180;
              id v183 = v181;
              unint64_t v184 = Logger.logObject.getter();
              os_log_type_t v185 = static os_log_type_t.info.getter();
              int v186 = v185;
              if (os_log_type_enabled(v184, v185))
              {
                uint64_t v187 = swift_slowAlloc();
                uint64_t v240 = swift_slowAlloc();
                uint64_t v243 = v240;
                *(_DWORD *)uint64_t v187 = 136315394;
                uint64_t v224 = v99;
                v230 = v98;
                os_log_t v188 = v241;
                LODWORD(v234) = v186;
                CredentialInternal.identifier.getter();
                uint64_t v189 = UUID.uuidString.getter();
                unint64_t v191 = v190;
                uint64_t v192 = v238;
                ((void (*)(os_log_t, uint64_t))v238)(v188, v237);
                uint64_t v242 = sub_100290514(v189, v191, &v243);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v187 + 12) = 2080;
                os_log_t v241 = (os_log_t)(v187 + 14);
                uint64_t v193 = InstanceInfoInternal.instanceAID.getter();
                unint64_t v195 = v194;
                uint64_t v196 = v233;
                uint64_t v197 = sub_10023CDF4(v193, v194);
                uint64_t v233 = v196;
                uint64_t v242 = (uint64_t)v197;
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                uint64_t v198 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v200 = v199;
                swift_bridgeObjectRelease();
                sub_10006D144(v193, v195);
                uint64_t v242 = sub_100290514(v198, v200, &v243);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v184, (os_log_type_t)v234, "Credential %s transitioned to installed state with new instance %s", (uint8_t *)v187, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                ((void (*)(os_log_t, uint64_t))v230)(v235, v231);
                ((void (*)(char *, uint64_t))v192)(v236, v237);
              }
              else
              {

                ((void (*)(os_log_t, uint64_t))v98)(v235, v132);
                ((void (*)(char *, uint64_t))v238)(v236, v237);
              }
              char v65 = 1;
            }
            else
            {
              v207 = v234;
              v208 = Logger.logObject.getter();
              os_log_type_t v209 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v208, v209))
              {
                uint64_t v210 = (uint8_t *)swift_slowAlloc();
                uint64_t v211 = swift_slowAlloc();
                v230 = v98;
                uint64_t v240 = v211;
                uint64_t v243 = v211;
                uint64_t v224 = v99;
                *(_DWORD *)uint64_t v210 = 136315138;
                v234 = v210 + 4;
                uint64_t v212 = v135;
                os_log_t v213 = v241;
                CredentialInternal.identifier.getter();
                uint64_t v214 = UUID.uuidString.getter();
                unint64_t v216 = v215;
                os_log_t v217 = v213;
                uint64_t v135 = v212;
                os_log_t v241 = v208;
                unint64_t v218 = v238;
                ((void (*)(os_log_t, uint64_t))v238)(v217, v237);
                uint64_t v242 = sub_100290514(v214, v216, &v243);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                os_log_t v219 = v241;
                _os_log_impl((void *)&_mh_execute_header, v241, v209, "Credential %s is in a bad state", v210, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                ((void (*)(os_log_t, uint64_t))v230)(v235, v231);
                ((void (*)(char *, uint64_t))v218)(v236, v237);
              }
              else
              {

                ((void (*)(os_log_t, uint64_t))v98)(v235, v132);
                ((void (*)(char *, uint64_t))v238)(v236, v237);
              }
              (*(void (**)(unint64_t *, uint64_t))(v228 + 8))(v135, v229);
              char v65 = 0;
            }
            return v65 & 1;
          }
          v230 = v98;
          (*(void (**)(unint64_t *, uint64_t))(v152 + 96))(v135, v151);
          unint64_t v156 = *v135;
          os_log_type_t v157 = v150;
          BOOL v158 = Logger.logObject.getter();
          os_log_type_t v159 = static os_log_type_t.info.getter();
          BOOL v160 = os_log_type_enabled(v158, v159);
          uint64_t v224 = v99;
          if (v160)
          {
            uint64_t v161 = (uint8_t *)swift_slowAlloc();
            uint64_t v240 = swift_slowAlloc();
            uint64_t v243 = v240;
            v234 = v161;
            *(_DWORD *)uint64_t v161 = 136315138;
            uint64_t v227 = v161 + 4;
            unint64_t v162 = v156;
            os_log_t v163 = v241;
            CredentialInternal.identifier.getter();
            uint64_t v164 = UUID.uuidString.getter();
            unint64_t v166 = v165;
            os_log_t v167 = v163;
            unint64_t v156 = v162;
            ((void (*)(os_log_t, uint64_t))v238)(v167, v237);
            uint64_t v242 = sub_100290514(v164, v166, &v243);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            uint64_t v168 = v231;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v158, v159, "Credential %s is already in installed state", v234, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            uint64_t v168 = v132;
          }
          id v201 = v220;
          uint64_t v202 = v236;
          if ((v156 & 0x8000000000000000) != 0 || (v156 & 0x4000000000000000) != 0)
          {
            uint64_t v203 = (uint64_t)sub_1000B26F0(v156);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v203 = v156 & 0xFFFFFFFFFFFFFF8;
          }
          uint64_t v204 = v237;
          uint64_t v243 = v203;
          uint64_t v205 = v232;
          sub_1000B1D98(v232);
          v206 = v225;
          *int v225 = v243;
          (*(void (**)(void *, uint64_t, uint64_t))(v228 + 104))(v206, v154, v229);
          CredentialInternal.state.setter();

          ((void (*)(os_log_t, uint64_t))v230)(v235, v168);
          ((void (*)(char *, uint64_t))v238)(v202, v204);
        }
        char v65 = 0;
        return v65 & 1;
      }
      id v118 = v72;
      uint64_t v119 = Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v119, v120))
      {
        id v220 = v38;
        uint64_t v121 = swift_slowAlloc();
        uint64_t v122 = swift_slowAlloc();
        v236 = v30;
        uint64_t v243 = v122;
        *(_DWORD *)uint64_t v121 = 136315138;
        os_log_t v241 = (os_log_t)(v121 + 4);
        id v123 = [v118 applet];
        id v124 = [v123 identifier];
        uint64_t v237 = v23;
        id v125 = v124;

        uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v128 = v127;

        uint64_t v242 = sub_100290514(v126, v128, &v243);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v119, v120, "Malformed instance info for instance %s", (uint8_t *)v121, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_10008E594();
        swift_allocError();
        *unint64_t v129 = 6;
        swift_willThrow();

        uint64_t v130 = v236;
        uint64_t v131 = v237;
      }
      else
      {

        sub_10008E594();
        swift_allocError();
        *unint64_t v169 = 6;
        swift_willThrow();

        uint64_t v130 = v30;
        uint64_t v131 = v23;
      }
      ((void (*)(char *, uint64_t))v238)(v130, v131);
    }
    else
    {
      unint64_t v101 = v234;
      ((void (*)(uint8_t *, char *, uint64_t))v69[2])(v234, v30, v23);
      unsigned int v102 = v67;
      os_log_type_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.error.getter();
      int v105 = v104;
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v106 = swift_slowAlloc();
        LODWORD(v23_Block_object_dispose(&STACK[0x2C0], 8) = v105;
        uint64_t v107 = v106;
        uint64_t v240 = swift_slowAlloc();
        uint64_t v243 = v240;
        *(_DWORD *)uint64_t v107 = 136315394;
        id v220 = v38;
        uint64_t v233 = v107 + 4;
        os_log_t v108 = v241;
        os_log_t v235 = v103;
        CredentialInternal.identifier.getter();
        uint64_t v109 = UUID.uuidString.getter();
        unint64_t v110 = v71;
        unint64_t v112 = v111;
        ((void (*)(os_log_t, uint64_t))v110)(v108, v23);
        uint64_t v242 = sub_100290514(v109, v112, &v243);
        v236 = v30;
        id v38 = v220;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v71 = v110;
        swift_bridgeObjectRelease();
        *(_WORD *)(v107 + 12) = 2080;
        unint64_t v113 = v234;
        uint64_t v114 = UUID.uuidString.getter();
        uint64_t v242 = sub_100290514(v114, v115, &v243);
        uint64_t v30 = v236;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(uint8_t *, uint64_t))v71)(v113, v23);
        os_log_t v116 = v235;
        _os_log_impl((void *)&_mh_execute_header, v235, (os_log_type_t)v238, "Cannot synchronize Credential %s information with NFApplet for credential %s", (uint8_t *)v107, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        ((void (*)(uint8_t *, uint64_t))v71)(v101, v23);
      }
      sub_10008E594();
      swift_allocError();
      *unint64_t v117 = 6;
      swift_willThrow();

      ((void (*)(char *, uint64_t))v71)(v30, v23);
    }
  }
  return v65 & 1;
}

uint64_t sub_1000B1B3C(void *a1)
{
  id v2 = [a1 applet];
  id v3 = [v2 packageIdentifier];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  uint64_t v7 = sub_10011FE64(v4, v6);
  if (v8 >> 60 == 15)
  {

    return 0;
  }
  uint64_t v10 = v7;
  unint64_t v11 = v8;
  id v12 = [v2 moduleIdentifier];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  uint64_t v16 = sub_10011FE64(v13, v15);
  if (v17 >> 60 == 15)
  {

LABEL_9:
    sub_100075868(v10, v11);
    return 0;
  }
  uint64_t v18 = v16;
  unint64_t v19 = v17;
  id v20 = [a1 ssdAID];
  if (!v20)
  {

    sub_100075868(v18, v19);
    goto LABEL_9;
  }
  uint64_t v21 = v20;
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  id v22 = [a1 obgk];
  if (v22)
  {
    uint64_t v23 = v22;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v24 = [v2 identifierAsData];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v26 = bswap64((unint64_t)[v2 rawGPState]);
  sub_1000806B4((uint64_t)&v26, (uint64_t)&v27);
  uint64_t v9 = dispatch thunk of InstanceInfoInternal.__allocating_init(instanceAID:packageAID:moduleAID:securityDomainAID:securityDomainKeyInfo:lifeCycleState:)();

  return v9;
}

uint64_t sub_1000B1D98(void *a1)
{
  id v10 = a1;
  unint64_t v2 = *v1;
  void v9[2] = &v10;
  swift_bridgeObjectRetain();
  unint64_t v3 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_1000B30D8, v9, v2);
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_6;
    }
LABEL_3:
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1000B3288(v1, v4);
    uint64_t result = swift_bridgeObjectRelease();
    if ((unint64_t)*v1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v7 >= v5) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= v5)
      {
LABEL_5:
        sub_1002D244C(v5, v7);
        goto LABEL_6;
      }
    }
    __break(1u);
    return result;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_3;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  id v8 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t sub_1000B1F08(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_100454A40);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v90 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for StateInternal();
  uint64_t v91 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  unint64_t v88 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  unint64_t v89 = (char *)&v76 - v11;
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  unint64_t v19 = (char *)&v76 - v18;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void **)(v20 - 8);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v87 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v92 = (char *)&v76 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v31 = (char *)&v76 - v30;
  __chkstk_darwin(v29, v32);
  uint64_t v34 = (char *)&v76 - v33;
  id v35 = [a1 friendlyName];
  if (v35)
  {
    id v36 = v35;
    unint64_t v93 = v31;
    uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v94 = v37;

    id v38 = a1;
    id v39 = [a1 uuid];
    if (v39)
    {
      uint64_t v40 = v39;
      uint64_t v83 = v6;
      uint64_t v84 = v16;
      unint64_t v86 = v34;
      uint64_t v82 = v1;
      os_log_type_t v41 = v93;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      int v42 = (void (*)(char *, char *, uint64_t))v21[4];
      v42(v19, v41, v20);
      BOOL v43 = (void (*)(char *, void, uint64_t, uint64_t))v21[7];
      v43(v19, 0, 1, v20);
      uint64_t v44 = v21;
      uint64_t v45 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v21[6];
      if (v45((uint64_t)v19, 1, v20) != 1)
      {
        uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v43;
        os_log_type_t v81 = v44;
        id v79 = v45;
        v42(v86, v19, v20);
        long long v46 = v38;
        id v47 = [v38 ownerApplications];
        if (!v47) {
          goto LABEL_17;
        }
        uint64_t v48 = v47;
        unint64_t v49 = v42;
        uint64_t v95 = 0;
        type metadata accessor for SecureElementApplicationEntity();
        sub_1000B37D8((unint64_t *)&unk_10045BEF0, (void (*)(uint64_t))type metadata accessor for SecureElementApplicationEntity);
        static Set._conditionallyBridgeFromObjectiveC(_:result:)();

        uint64_t v50 = v95;
        if (v95)
        {
          id v51 = [v46 userApplications];
          if (v51)
          {
            id v52 = v51;
            uint64_t v95 = 0;
            static Set._conditionallyBridgeFromObjectiveC(_:result:)();

            if (v95)
            {
              uint64_t v77 = v95;
              uint64_t v78 = v50;
              id v53 = [v46 productConfigUUID];
              if (v53)
              {
                uint64_t v54 = v53;
                unint64_t v55 = v93;
                static UUID._unconditionallyBridgeFromObjectiveC(_:)();

                uint64_t v56 = (uint64_t)v84;
                v49(v84, v55, v20);
                v80(v56, 0, 1, v20);
                if (v79(v56, 1, v20) != 1)
                {
                  uint64_t v57 = v92;
                  v49(v92, (char *)v56, v20);
                  sub_1000AF5E0(v78);
                  os_log_t v59 = v58;
                  swift_bridgeObjectRelease();
                  sub_1000AF5E0(v77);
                  uint64_t v61 = v60;
                  swift_bridgeObjectRelease();
                  [v46 state];
                  unint64_t v19 = v90;
                  StateInternal.init(rawDiscriminant:instanceInfos:)();
                  uint64_t v62 = v91;
                  uint64_t v63 = v83;
                  int v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 48))(v19, 1, v83);
                  char v65 = v86;
                  if (v64 != 1)
                  {
                    uint64_t v71 = v89;
                    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v89, v19, v63);
                    uint64_t v72 = v81;
                    uint64_t v90 = v59;
                    uint64_t v73 = (void (*)(char *, char *, uint64_t))v81[2];
                    uint64_t v84 = v61;
                    v73(v93, v65, v20);
                    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v88, v71, v63);
                    v73(v87, v92, v20);
                    uint64_t v74 = v62;
                    uint64_t v69 = dispatch thunk of CredentialInternal.__allocating_init(identifier:friendlyName:ownerApplications:userApplications:state:configUUID:accessLevel:)();

                    (*(void (**)(char *, uint64_t))(v74 + 8))(v89, v63);
                    os_log_t v75 = (void (*)(char *, uint64_t))v72[1];
                    v75(v92, v20);
                    v75(v86, v20);
                    return v69;
                  }

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  os_log_t v66 = (void (*)(char *, uint64_t))v81[1];
                  v66(v57, v20);
                  v66(v65, v20);
                  char v67 = &qword_100454A40;
                  goto LABEL_15;
                }
              }
              else
              {
                uint64_t v56 = (uint64_t)v84;
                v80((uint64_t)v84, 1, 1, v20);
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t))v81[1])(v86, v20);
              char v67 = &qword_100455EB0;
              uint64_t v68 = v56;
              goto LABEL_16;
            }
          }

          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_17:
        }
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v81[1])(v86, v20);
        return 0;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v21[7])(v19, 1, 1, v20);
    }

    swift_bridgeObjectRelease();
    char v67 = &qword_100455EB0;
LABEL_15:
    uint64_t v68 = (uint64_t)v19;
LABEL_16:
    sub_10008E734(v68, v67);
    return 0;
  }

  return 0;
}

void *sub_1000B26F0(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10006C51C(&qword_1004557C0);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_1000B29C0((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_1000B27E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10006C51C(&qword_100454A48);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  uint64_t v5 = sub_1000B2D1C(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_10008C4F0();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_1000B28DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10006C51C((uint64_t *)&unk_10045B6B0);
  uint64_t v3 = swift_allocObject();
  int64_t v4 = j__malloc_size((const void *)v3);
  int64_t v5 = v4 - 32;
  if (v4 < 32) {
    int64_t v5 = v4 - 31;
  }
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v5 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v6 = sub_1000B2F44(&v8, (_WORD *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_10008C4F0();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

uint64_t sub_1000B29C0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10008C0B0(&qword_100454A38, &qword_100454A30);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10006C51C(&qword_100454A30);
          uint64_t v12 = sub_1000B2BE4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for InstanceInfoInternal();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_1000B2BE4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1000B2C94(v6, a2, a3);
  return sub_1000B2C4C;
}

void sub_1000B2C4C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1000B2C94(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_1000B2D14;
  }
  __break(1u);
  return result;
}

void sub_1000B2D14(id *a1)
{
}

void *sub_1000B2D1C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v24 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v19 = *(void *)(a4 + 48) + 40 * v15;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 32);
    long long v22 = *(_OWORD *)(v19 + 16);
    *(void *)uint64_t v10 = *(void *)v19;
    *(void *)(v10 + _Block_object_dispose(&STACK[0x2C0], 8) = v20;
    *(_OWORD *)(v10 + 16) = v22;
    *(void *)(v10 + 32) = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 40;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v23;
      uint64_t result = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_1000B2F44(void *result, _WORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_WORD *)(*(void *)(a4 + 48) + 2 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1000B30D8()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t sub_1000B3130(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      if (ApplicationInfoInternal.applicationId.getter() == a2 && v11 == a3)
      {
        swift_bridgeObjectRelease();

        char v12 = 1;
        goto LABEL_18;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        ++v7;
        if (v10 != v6) {
          continue;
        }
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
  char v12 = 0;
LABEL_18:
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1000B3288(uint64_t *a1, unint64_t a2)
{
  unint64_t v3 = *a1;
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_79;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_80:
    swift_bridgeObjectRelease();
    if ((unint64_t)*a1 >> 62) {
      goto LABEL_84;
    }
    return *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
LABEL_3:
  unint64_t v5 = 0;
  unint64_t v41 = a2 & 0xC000000000000001;
  unint64_t v43 = a2 >> 62;
  while (1)
  {
    id v6 = (v3 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(v3 + 8 * v5 + 32);
    uint64_t v7 = v6;
    if (v43) {
      break;
    }
    uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_9;
    }
LABEL_17:

    swift_bridgeObjectRelease();
    unint64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_80;
      }
      goto LABEL_3;
    }
LABEL_18:
    ++v5;
    if (v14 == v4) {
      goto LABEL_80;
    }
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_17;
  }
LABEL_9:
  if (v41)
  {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_68;
    }
    id v9 = *(id *)(a2 + 32);
  }
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  type metadata accessor for InstanceInfoInternal();
  id v11 = v7;
  id v12 = v10;
  char v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    unint64_t v14 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_67;
    }
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  unint64_t v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else if (!((unint64_t)*a1 >> 62))
  {
    if (v15 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_24;
    }
    return v5;
  }
  swift_bridgeObjectRetain();
  uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 == v40) {
    return v5;
  }
LABEL_24:
  unint64_t v16 = v5 + 5;
  while (2)
  {
    unint64_t v3 = v16 - 4;
    uint64_t v17 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_69;
      }
      if (v3 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_70;
      }
      id v18 = *(id *)(v17 + 8 * v16);
    }
    uint64_t v19 = v18;
    if (!v43)
    {
      uint64_t v20 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v20) {
        goto LABEL_31;
      }
LABEL_34:

      swift_bridgeObjectRelease();
LABEL_38:
      if (v3 == v5) {
        goto LABEL_57;
      }
      uint64_t v26 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v26 = *a1;
        if ((*a1 & 0xC000000000000001) == 0) {
          goto LABEL_43;
        }
      }
      else
      {
        if ((v5 & 0x8000000000000000) != 0) {
          goto LABEL_73;
        }
        if (v5 >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_74;
        }
        id v27 = *(id *)(v26 + 8 * v5 + 32);
        if ((v26 & 0xC000000000000001) == 0)
        {
LABEL_43:
          if ((v3 & 0x8000000000000000) != 0) {
            goto LABEL_75;
          }
          if (v3 >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_76;
          }
          id v28 = *(id *)(v26 + 8 * v16);
LABEL_46:
          int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v26;
          if (!isUniquelyReferenced_nonNull_bridgeObject || v26 < 0 || (v26 & 0x4000000000000000) != 0)
          {
            uint64_t v26 = sub_1000FADE4(v26);
            *a1 = v26;
          }
          uint64_t v30 = *(void **)((v26 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
          *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x2sub_1000A2B9C("Transaction emulation ended", 0) = v28;

          specialized Array._endMutation()();
          uint64_t v31 = *a1;
          int v32 = swift_isUniquelyReferenced_nonNull_bridgeObject();
          *a1 = v31;
          if (!v32 || v31 < 0 || (v31 & 0x4000000000000000) != 0)
          {
            uint64_t v31 = sub_1000FADE4(v31);
            *a1 = v31;
          }
          if ((v3 & 0x8000000000000000) != 0) {
            goto LABEL_77;
          }
          uint64_t v33 = v31 & 0xFFFFFFFFFFFFFF8;
          if (v3 >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_78;
          }
          uint64_t v34 = *(void **)(v33 + 8 * v16);
          *(void *)(v33 + 8 * v16) = v27;

          specialized Array._endMutation()();
LABEL_57:
          if (__OFADD__(v5++, 1)) {
            goto LABEL_72;
          }
LABEL_58:
          unint64_t v36 = v16 - 3;
          if (__OFADD__(v3, 1)) {
            goto LABEL_71;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v37 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v16;
          if (v36 == v37) {
            return v5;
          }
          continue;
        }
      }
      id v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v26 = *a1;
      goto LABEL_46;
    }
    break;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_34;
  }
LABEL_31:
  if (v41)
  {
    id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_37;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v21 = *(id *)(a2 + 32);
LABEL_37:
    long long v22 = v21;
    swift_bridgeObjectRelease();
    id v23 = v19;
    id v24 = v22;
    char v25 = static NSObject.== infix(_:_:)();

    if ((v25 & 1) == 0) {
      goto LABEL_38;
    }
    goto LABEL_58;
  }
  __break(1u);
LABEL_84:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_1000B37D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SignificantDigits()
{
  return self;
}

void sub_1000B3890(unsigned int a1, unsigned int a2)
{
  if (a1 <= 0xA && a2)
  {
    float v4 = log10f((float)a2);
    if ((~LODWORD(v4) & 0x7F800000) != 0)
    {
      if (v4 > -1.0)
      {
        if (v4 < 4295000000.0)
        {
          unsigned int v5 = v4 + 1;
          if (v4 != -1)
          {
            BOOL v6 = v5 >= a1;
            unsigned int v7 = v5 - a1;
            if (v7 == 0 || !v6) {
              return;
            }
            double v8 = __exp10((double)v7);
            if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
            {
              if (v8 > -1.0)
              {
                if (v8 < 4294967300.0)
                {
                  if (v8)
                  {
                    if (a2 >= a2 % v8) {
                      return;
                    }
LABEL_23:
                    __break(1u);
                    return;
                  }
LABEL_22:
                  __break(1u);
                  goto LABEL_23;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t sub_1000B3980()
{
  return swift_initClassMetadata2();
}

BOOL static UUID.UTF8DataStringCase.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void UUID.UTF8DataStringCase.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int UUID.UTF8DataStringCase.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_1000B3A60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static UUID.UTF8DataStringCase.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000B3A6C()
{
  return UUID.UTF8DataStringCase.hashValue.getter(*v0);
}

void sub_1000B3A74(uint64_t a1)
{
  UUID.UTF8DataStringCase.hash(into:)(a1, *v1);
}

Swift::Int sub_1000B3A7C()
{
  Hasher.init(_seed:)();
  UUID.UTF8DataStringCase.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_1000B3ABC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000B3AEC()
{
  sub_1000B3ABC();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Store()
{
  return sub_1000B3E5C();
}

uint64_t sub_1000B3B38()
{
  return swift_initClassMetadata2();
}

BOOL sub_1000B3B88(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) == *(void *)(a2 + 16);
}

void sub_1000B3B9C()
{
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

uint64_t sub_1000B3BC8()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DelegateWrapper()
{
  return sub_1000B3E5C();
}

uint64_t sub_1000B3C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

unsigned char *sub_1000B3C28(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B3CF4);
      case 4:
        *(_DWORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + sub_1000A2B9C("Transaction emulation started", 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for Store.StoreType()
{
  return sub_1000B3E5C();
}

uint64_t sub_1000B3D34()
{
  return swift_getWitnessTable();
}

Swift::Int sub_1000B3D50()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int sub_1000B3D94()
{
  return sub_1000B3D50();
}

void sub_1000B3DB8()
{
}

Swift::Int sub_1000B3DDC()
{
  return Hasher._finalize()();
}

BOOL sub_1000B3E1C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000B3B88(*a1, *a2);
}

uint64_t sub_1000B3E40()
{
  return swift_getWitnessTable();
}

uint64_t sub_1000B3E5C()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for Atomic()
{
  return sub_1000B3E5C();
}

unsigned char *sub_1000B3EA4(unsigned char *result)
{
  *uint64_t result = 1;
  return result;
}

unsigned char *sub_1000B3EB0(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

void sub_1000B3EB8(uint64_t *a1)
{
}

unsigned char *sub_1000B3ED0(unsigned char *a1)
{
  return sub_1000B3EA4(a1);
}

unsigned char *sub_1000B3EE8(unsigned char *a1)
{
  return sub_1000B3EB0(a1);
}

uint64_t sub_1000B3F00(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000B612C();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v25;
    uint64_t v24 = v26;
    uint64_t v3 = v27;
    int64_t v4 = v28;
    uint64_t v5 = v29;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    uint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    int64_t v4 = 0;
  }
  long long v22 = (char *)_swiftEmptyArrayStorage;
  int64_t v23 = (unint64_t)(v3 + 64) >> 6;
LABEL_8:
  int64_t v9 = v4;
  unint64_t v10 = v5;
  while (1)
  {
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_39;
      }
      type metadata accessor for Peer();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v12 = v30;
      swift_unknownObjectRelease();
      int64_t v4 = v9;
      uint64_t v5 = v10;
      if (!v30) {
        goto LABEL_39;
      }
      goto LABEL_11;
    }
    if (!v10) {
      break;
    }
    uint64_t v5 = (v10 - 1) & v10;
    unint64_t v11 = __clz(__rbit64(v10)) | (v9 << 6);
    int64_t v4 = v9;
LABEL_10:
    uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v12) {
      goto LABEL_39;
    }
LABEL_11:
    uint64_t v13 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v14 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    sub_1000758F4(v13, v14);
    uint64_t result = swift_release();
    int64_t v9 = v4;
    unint64_t v10 = v5;
    if (v14 >> 60 != 15)
    {
      id v18 = v22;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100258EB0(0, *((void *)v22 + 2) + 1, 1, v22);
        id v18 = (char *)result;
      }
      unint64_t v20 = *((void *)v18 + 2);
      unint64_t v19 = *((void *)v18 + 3);
      if (v20 >= v19 >> 1)
      {
        uint64_t result = (uint64_t)sub_100258EB0((char *)(v19 > 1), v20 + 1, 1, v18);
        id v18 = (char *)result;
      }
      *((void *)v18 + 2) = v20 + 1;
      long long v22 = v18;
      id v21 = &v18[16 * v20];
      *((void *)v21 + 4) = v13;
      *((void *)v21 + 5) = v14;
      goto LABEL_8;
    }
  }
  int64_t v4 = v9 + 1;
  if (!__OFADD__(v9, 1))
  {
    if (v4 >= v23) {
      goto LABEL_39;
    }
    unint64_t v15 = *(void *)(v24 + 8 * v4);
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v23) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v16 = v9 + 3;
      if (v9 + 3 >= v23) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (v15) {
        goto LABEL_23;
      }
      int64_t v16 = v9 + 4;
      if (v9 + 4 >= v23) {
        goto LABEL_39;
      }
      unint64_t v15 = *(void *)(v24 + 8 * v16);
      if (v15)
      {
LABEL_23:
        int64_t v4 = v16;
      }
      else
      {
        int64_t v4 = v9 + 5;
        if (v9 + 5 >= v23) {
          goto LABEL_39;
        }
        unint64_t v15 = *(void *)(v24 + 8 * v4);
        if (!v15)
        {
          int64_t v17 = v9 + 6;
          while (v23 != v17)
          {
            unint64_t v15 = *(void *)(v24 + 8 * v17++);
            if (v15)
            {
              int64_t v4 = v17 - 1;
              goto LABEL_24;
            }
          }
LABEL_39:
          sub_10008C4F0();
          return (uint64_t)v22;
        }
      }
    }
LABEL_24:
    uint64_t v5 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

void sub_1000B4258()
{
  type metadata accessor for AlishaExpress();
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  if (qword_100453928 != -1) {
    swift_once();
  }
  v2[4] = sub_1000B6184;
  v2[5] = v0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 1107296256;
  v2[2] = sub_1002B9D80;
  v2[3] = &unk_1004113E8;
  uint64_t v1 = _Block_copy(v2);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  qword_100468658 = v0;
}

_DWORD *sub_1000B43B0()
{
  char v1 = *(unsigned char *)(v0 + 16);
  uint64_t v8 = &type metadata for Bool;
  LOBYTE(v7) = v1;
  sub_1000761D0(&v7, v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v6, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  int64_t v4 = sub_1000190DC((uint64_t)"alishaexpress.state", (uint64_t)isa);

  return v4;
}

void sub_1000B449C()
{
  char v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  long long v7 = (void *)((char *)&v21[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  void *v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
LABEL_11:
    v21[3] = v2;
    void v21[4] = &off_1004113D8;
    v21[0] = v1;
    swift_retain();
    uint64_t v16 = sub_10011FE64(0xD00000000000001ALL, 0x80000001003B2B50);
    if (v17 >> 60 == 15)
    {
      __break(1u);
      swift_unexpectedError();
      __break(1u);
    }
    else
    {
      uint64_t v18 = v16;
      unint64_t v19 = v17;
      sub_100197EB4((uint64_t)v21, v16, v17);
      sub_100075868(v18, v19);
      sub_10007594C((uint64_t)v21);
    }
    return;
  }
  char v10 = *((unsigned char *)v1 + 16);
  unint64_t v11 = Logger.logObject.getter();
  if ((v10 & 1) == 0)
  {
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v14, "Starting AlishaExpress", v15, 2u);
      swift_slowDealloc();
    }

    *((unsigned char *)v1 + 16) = 1;
    if (qword_100453738 == -1) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "AlishaExpress is already running", v13, 2u);
    swift_slowDealloc();
  }
}

void sub_1000B47C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  long long v7 = (void *)qword_100468A38;
  void *v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  os_log_type_t v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  v12(v6, v2);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
    goto LABEL_8;
  }
  int v13 = *(unsigned __int8 *)(v1 + 16);
  os_log_type_t v14 = Logger.logObject.getter();
  if (v13 != 1)
  {
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v23, "AlishaExpress is not running", v24, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v26 = v1;
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Stopping AlishaExpress", v16, 2u);
    swift_slowDealloc();
  }

  if (qword_100453738 != -1) {
    goto LABEL_15;
  }
LABEL_8:
  v25[1] = qword_1004687C0;
  uint64_t v17 = sub_10011FE64(0xD00000000000001ALL, 0x80000001003B2B50);
  if (v18 >> 60 != 15)
  {
    uint64_t v19 = v17;
    unint64_t v20 = v18;
    uint64_t v21 = qword_100468A38;
    void *v6 = qword_100468A38;
    v9(v6, v8, v2);
    id v22 = (id)v21;
    LOBYTE(v2sub_1000A2B9C("Transaction emulation started", 1) = _dispatchPreconditionTest(_:)();
    v12(v6, v2);
    if (v21)
    {
      uint64_t v28 = 0;
      memset(v27, 0, sizeof(v27));
      swift_beginAccess();
      sub_10006D0EC(v19, v20);
      sub_1001F8738((uint64_t)v27, v19, v20);
      swift_endAccess();
      sub_100075868(v19, v20);
      *(unsigned char *)(v26 + 16) = 0;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1000B4B38()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced13AlishaExpress_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1000B4BD8()
{
  return type metadata accessor for AlishaExpress();
}

uint64_t type metadata accessor for AlishaExpress()
{
  uint64_t result = qword_100454CA8;
  if (!qword_100454CA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B4C2C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1000B4CC8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  long long v7 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_100468A38;
  void *v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = v4 + 104;
  char v11 = *(void (**)(void *, void, uint64_t))(v4 + 104);
  v11(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v12 = v8;
  uint64_t v13 = _dispatchPreconditionTest(_:)();
  uint64_t v16 = *(void (**)(void *, uint64_t))(v4 + 8);
  uint64_t v15 = v4 + 8;
  os_log_type_t v14 = v16;
  v16(v7, v3);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_32:
    uint64_t v25 = swift_once();
LABEL_10:
    uint64_t v27 = __chkstk_darwin(v25, v26);
    *(&v52 - 4) = (uint64_t)sub_1000B5774;
    *(&v52 - 3) = 0;
    *(&v52 - 2) = v28;
    __chkstk_darwin(v27, v29);
    *(&v52 - 2) = (uint64_t)sub_100079AAC;
    *(&v52 - sub_1000A2B9C("Transaction emulation started", 1) = v30;
    int v32 = v31 + 4;
    os_unfair_lock_lock(v31 + 4);
    sub_100079ACC(&v62);
    os_unfair_lock_unlock(v32);
    uint64_t v33 = v62;
    swift_retain();
    sub_1000B5E50(v33, a1);
    swift_bridgeObjectRelease();
    uint64_t v34 = swift_release();
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      uint64_t v36 = __chkstk_darwin(v34, v35);
      *(&v52 - 4) = (uint64_t)sub_1000B5794;
      *(&v52 - 3) = 0;
      *(&v52 - 2) = v37;
      __chkstk_darwin(v36, v38);
      *(&v52 - 2) = (uint64_t)sub_1000B61A0;
      *(&v52 - sub_1000A2B9C("Transaction emulation started", 1) = v39;
      unint64_t v41 = v40 + 4;
      os_unfair_lock_lock(v40 + 4);
      sub_1000AA804(&v62);
      os_unfair_lock_unlock(v41);
      uint64_t v42 = v62;
      a1 = (uint64_t)v57;
      if ((v62 & 0xC000000000000001) != 0)
      {
        if (__CocoaSet.count.getter())
        {
LABEL_13:
          uint64_t v43 = sub_1000B3F00(v42);
          swift_bridgeObjectRelease();
          if (qword_100453660 != -1) {
            swift_once();
          }
          uint64_t v44 = (long long *)sub_100089BA0(v43);
          swift_bridgeObjectRelease();
          sub_100076314(v44);
          swift_bridgeObjectRelease();
          return;
        }
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v42 = (uint64_t)v57;
      if (qword_100453660 != -1) {
        swift_once();
      }
      uint64_t v48 = *(void **)(v13 + 2616);
      void *v7 = v48;
      ((void (*)(void *, uint64_t, uint64_t))v42)(v7, v9, v3);
      id v49 = v48;
      LOBYTE(v4_Block_object_dispose(&STACK[0x2C0], 8) = _dispatchPreconditionTest(_:)();
      v54(v7, v3);
      if (v48)
      {
LABEL_27:
        if (qword_100453940 != -1) {
          swift_once();
        }
        sub_1002D6F5C(0);
        return;
      }
      __break(1u);
    }
    if (*(void *)(v42 + 16)) {
      goto LABEL_13;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    if (qword_100453660 != -1) {
      swift_once();
    }
    uint64_t v50 = *(void **)(v13 + 2616);
    void *v7 = v50;
    ((void (*)(void *, uint64_t, uint64_t))a1)(v7, v9, v3);
    id v51 = v50;
    LOBYTE(v5sub_1000A2B9C("Transaction emulation ended", 0) = _dispatchPreconditionTest(_:)();
    v54(v7, v3);
    if ((v50 & 1) == 0)
    {
      __break(1u);
      return;
    }
    goto LABEL_27;
  }
  if ((sub_10012ACFC((uint64_t)sub_1000B53C0, 0) & 1) == 0) {
    return;
  }
  unsigned int v60 = v9;
  uint64_t v59 = v1;
  uint64_t v17 = v1 + OBJC_IVAR____TtC10seserviced13AlishaExpress_logger;
  swift_retain_n();
  uint64_t v56 = v17;
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v54 = v14;
  uint64_t v55 = v15;
  uint64_t v57 = (void (*)(void, void, void))v11;
  uint64_t v58 = v10;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    uint64_t v53 = v3;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_retain();
    uint64_t v22 = sub_10019B5E0();
    unint64_t v24 = v23;
    swift_release();
    uint64_t v61 = sub_100290514(v22, v24, &v62);
    uint64_t v3 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v9 = v60;
  uint64_t v13 = (uint64_t)&unk_100468000;
  if (*(unsigned char *)(v59 + 16) == 1)
  {
    if (qword_100453910 == -1) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    id v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Not running", v47, 2u);
    swift_slowDealloc();
  }
}

BOOL sub_1000B53C0(void *a1)
{
  return [a1 endPointType] == (id)1;
}

void sub_1000B53E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = OBJC_IVAR____TtC10seserviced4Peer_expressState;
  int v6 = *(unsigned __int8 *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_expressState);
  swift_retain();
  uint64_t v7 = swift_bridgeObjectRetain();
  char v8 = sub_1000B579C(v7, v4);
  swift_bridgeObjectRelease();
  swift_release();
  if (v8)
  {
    int v9 = *(unsigned __int8 *)(a2 + 16);
    *(unsigned char *)(v4 + v5) = v9;
    if (v9 == 1)
    {
      if (v6 != 1 && *(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
      {
        if (qword_100453798 != -1) {
          swift_once();
        }
        uint64_t v10 = sub_100088F40((uint64_t)&off_10040E338);
        unint64_t v12 = v11;
        uint64_t v13 = sub_1001F28F8(3, 17, v10, v11);
        unint64_t v15 = v14;
        sub_10006D144(v10, v12);
        if (qword_1004536B0 != -1) {
          swift_once();
        }
        sub_1000CB6FC(v13, v15);
        if (v2) {
          swift_errorRelease();
        }
        if (*(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2)
        {
          char v16 = sub_1000CBD8C();
          if (v16 != 2 && (v16 & 1) == 0)
          {
            if (qword_1004537D8 != -1) {
              swift_once();
            }
            sub_10020827C(v4);
            if (qword_1004537E0 != -1) {
              swift_once();
            }
            sub_10020CD38(0, v4);
          }
        }
        sub_10006D144(v13, v15);
      }
      return;
    }
  }
  else
  {
    *(unsigned char *)(v4 + v5) = 0;
  }
  if (v6 == 1 && *(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
  {
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_100468890;
    swift_retain();
    uint64_t v18 = sub_100203774(v17, v4);
    swift_release();
    os_log_type_t v19 = (void *)sub_1000BB110(v18);
    swift_bridgeObjectRelease();
    if (v19)
    {
      sub_1001FF2E0();
      sub_1001FF150();
    }
  }
}

BOOL sub_1000B5700(uint64_t a1)
{
  return !*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type)
      && *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_expressState) == 1
      && *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2;
}

void sub_1000B5750(uint64_t a1)
{
}

BOOL sub_1000B5774(void *a1)
{
  return *(unsigned char *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type) == 0;
}

BOOL sub_1000B5794(uint64_t *a1)
{
  return sub_1000B5700(*a1);
}

uint64_t sub_1000B579C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = a1;
  uint64_t v5 = a1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  uint64_t v38 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  int64_t v37 = (unint64_t)(v6 + 63) >> 6;
  int64_t v9 = 0;
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = v5;
  while (1)
  {
LABEL_5:
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v9 << 6);
    }
    else
    {
      BOOL v12 = __OFADD__(v9++, 1);
      if (v12)
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      if (v9 >= v37) {
        goto LABEL_62;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v9);
      if (!v13)
      {
        int64_t v14 = v9 + 1;
        if (v9 + 1 >= v37) {
          goto LABEL_62;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v37) {
            goto LABEL_62;
          }
          unint64_t v13 = *(void *)(v5 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v37) {
              goto LABEL_62;
            }
            unint64_t v13 = *(void *)(v5 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v37)
              {
LABEL_62:
                uint64_t v31 = 0;
                goto LABEL_64;
              }
              unint64_t v13 = *(void *)(v5 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  int64_t v9 = v14 + 1;
                  if (__OFADD__(v14, 1)) {
                    break;
                  }
                  if (v9 >= v37) {
                    goto LABEL_62;
                  }
                  unint64_t v13 = *(void *)(v5 + 8 * v9);
                  ++v14;
                  if (v13) {
                    goto LABEL_19;
                  }
                }
LABEL_72:
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
              }
            }
          }
        }
        int64_t v9 = v14;
      }
LABEL_19:
      unint64_t v8 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v9 << 6);
    }
    unint64_t v15 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    uint64_t v19 = *v38;
    unint64_t v18 = v38[1];
    if (v18 >> 60 != 15) {
      break;
    }
    sub_10006D0EC(v16, v17);
    sub_100075868(v16, v17);
    sub_100075868(v19, v18);
  }
  uint64_t v20 = 0;
  switch(v17 >> 62)
  {
    case 1uLL:
      LODWORD(v2sub_1000A2B9C("Transaction emulation ended", 0) = HIDWORD(v16) - v16;
      if (__OFSUB__(HIDWORD(v16), v16)) {
        goto LABEL_67;
      }
      uint64_t v20 = (int)v20;
LABEL_26:
      switch(v18 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v19), v19)) {
            goto LABEL_69;
          }
          if (v20 == HIDWORD(v19) - v19) {
            goto LABEL_36;
          }
          goto LABEL_5;
        case 2uLL:
          uint64_t v24 = *(void *)(v19 + 16);
          uint64_t v23 = *(void *)(v19 + 24);
          BOOL v12 = __OFSUB__(v23, v24);
          uint64_t v25 = v23 - v24;
          if (v12) {
            goto LABEL_68;
          }
          if (v20 != v25) {
            goto LABEL_5;
          }
LABEL_36:
          if (v20 >= 1)
          {
            switch(v17 >> 62)
            {
              case 1uLL:
                if (v16 >> 32 < (int)v16) {
                  goto LABEL_70;
                }
                sub_1000758F4(v19, v18);
                sub_10006D0EC(v16, v17);
                sub_1000758F4(v19, v18);
                sub_10006D0EC(v16, v17);
                uint64_t v29 = __DataStorage._bytes.getter();
                if (!v29) {
                  goto LABEL_54;
                }
                uint64_t v30 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v16, v30)) {
                  goto LABEL_74;
                }
                v29 += (int)v16 - v30;
LABEL_54:
                __DataStorage._length.getter();
                sub_1001E5240(v29, v19, v18, (char *)__s1);
                if (v3) {
                  goto LABEL_77;
                }
                uint64_t v3 = 0;
                sub_100075868(v19, v18);
                sub_10006D144(v16, v17);
                break;
              case 2uLL:
                uint64_t v36 = v3;
                uint64_t v26 = *(void *)(v16 + 16);
                uint64_t v33 = *(void *)(v16 + 24);
                sub_1000758F4(v19, v18);
                sub_1000758F4(v19, v18);
                sub_10006D0EC(v16, v17);
                swift_retain();
                swift_retain();
                uint64_t v27 = __DataStorage._bytes.getter();
                if (!v27) {
                  goto LABEL_44;
                }
                uint64_t v28 = __DataStorage._offset.getter();
                if (__OFSUB__(v26, v28)) {
                  goto LABEL_73;
                }
                v27 += v26 - v28;
LABEL_44:
                if (__OFSUB__(v33, v26)) {
                  goto LABEL_71;
                }
                __DataStorage._length.getter();
                sub_1001E5240(v27, v19, v18, (char *)__s1);
                if (v36)
                {
                  sub_100075868(v19, v18);
                  swift_release();
                  swift_release();
                  __break(1u);
LABEL_76:
                  sub_100075868(v19, v18);
                  __break(1u);
LABEL_77:
                  sub_100075868(v19, v18);
                  sub_10006D144(v16, v17);
                  __break(1u);
                  JUMPOUT(0x1000B5E20);
                }
                uint64_t v3 = 0;
                sub_100075868(v19, v18);
                swift_release();
                swift_release();
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                sub_1000758F4(v19, v18);
                sub_1000758F4(v19, v18);
                sub_10006D0EC(v16, v17);
                sub_1001E5240((uint64_t)__s1, v19, v18, &v39);
                if (v3) {
                  goto LABEL_76;
                }
                uint64_t v3 = 0;
                sub_100075868(v19, v18);
                sub_100075868(v19, v18);
                sub_10006D144(v16, v17);
                if (v39 == 1) {
                  goto LABEL_63;
                }
                goto LABEL_5;
              default:
                __s1[0] = *v15;
                LOWORD(__s1[1]) = v17;
                BYTE2(__s1[1]) = BYTE2(v17);
                BYTE3(__s1[1]) = BYTE3(v17);
                BYTE4(__s1[1]) = BYTE4(v17);
                BYTE5(__s1[1]) = BYTE5(v17);
                sub_1000758F4(v19, v18);
                sub_1000758F4(v19, v18);
                sub_10006D0EC(v16, v17);
                sub_1001E5240((uint64_t)__s1, v19, v18, &v39);
                if (v3) {
                  goto LABEL_76;
                }
                uint64_t v3 = 0;
                sub_100075868(v19, v18);
                sub_100075868(v19, v18);
                sub_10006D144(v16, v17);
                uint64_t v5 = v35;
                if (v39) {
                  goto LABEL_63;
                }
                goto LABEL_5;
            }
            sub_100075868(v19, v18);
            sub_10006D144(v16, v17);
            uint64_t v4 = v34;
            uint64_t v5 = v35;
            if ((__s1[0] & 1) == 0) {
              goto LABEL_5;
            }
          }
LABEL_63:
          uint64_t v31 = 1;
          break;
        case 3uLL:
          if (!v20) {
            goto LABEL_63;
          }
          goto LABEL_5;
        default:
          if (v20 == BYTE6(v18)) {
            goto LABEL_36;
          }
          goto LABEL_5;
      }
      break;
    case 2uLL:
      uint64_t v22 = *(void *)(v16 + 16);
      uint64_t v21 = *(void *)(v16 + 24);
      BOOL v12 = __OFSUB__(v21, v22);
      uint64_t v20 = v21 - v22;
      if (!v12) {
        goto LABEL_26;
      }
      goto LABEL_66;
    case 3uLL:
      goto LABEL_26;
    default:
      uint64_t v20 = BYTE6(v17);
      goto LABEL_26;
  }
LABEL_64:
  swift_release();
  return v31;
}

uint64_t sub_1000B5E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1000B612C();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v23;
    uint64_t v22 = v24;
    uint64_t v7 = v25;
    int64_t v8 = v26;
    unint64_t v9 = v27;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for Peer();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v14 = v28;
    swift_unknownObjectRelease();
    int64_t v15 = v8;
    uint64_t v16 = v9;
    while (v14)
    {
      uint64_t v28 = v14;
      sub_1000B53E8(&v28, a2);
      uint64_t result = swift_release();
      if (v3) {
        break;
      }
      int64_t v8 = v15;
      unint64_t v9 = v16;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v9)
      {
        uint64_t v16 = (v9 - 1) & v9;
        unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
        int64_t v15 = v8;
      }
      else
      {
        int64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return result;
        }
        if (v15 >= v21) {
          return sub_10008C4F0();
        }
        unint64_t v18 = *(void *)(v22 + 8 * v15);
        if (!v18)
        {
          int64_t v19 = v8 + 2;
          if (v8 + 2 >= v21) {
            return sub_10008C4F0();
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v21) {
            return sub_10008C4F0();
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 4;
          if (v8 + 4 >= v21) {
            return sub_10008C4F0();
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18)
          {
LABEL_22:
            int64_t v15 = v19;
          }
          else
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v21) {
              return sub_10008C4F0();
            }
            unint64_t v18 = *(void *)(v22 + 8 * v15);
            if (!v18)
            {
              int64_t v20 = v8 + 6;
              while (v21 != v20)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v20++);
                if (v18)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_23;
                }
              }
              return sub_10008C4F0();
            }
          }
        }
LABEL_23:
        uint64_t v16 = (v18 - 1) & v18;
        unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      uint64_t v14 = *(void *)(*(void *)(v5 + 48) + 8 * v17);
      swift_retain();
    }
  }
  return sub_10008C4F0();
}

unint64_t sub_1000B612C()
{
  unint64_t result = qword_100454590;
  if (!qword_100454590)
  {
    type metadata accessor for Peer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454590);
  }
  return result;
}

uint64_t sub_1000B6188(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_1000A2B9C("Transaction emulation ended", 0) = v2;
  return swift_retain();
}

uint64_t sub_1000B6198()
{
  return swift_release();
}

uint64_t sub_1000B61A0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100079AAC(a1);
}

void *sub_1000B61B8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = a1;
  sub_1002CF974(0, v1, 0);
  unint64_t result = (void *)sub_1000C6194(v2);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0;
  uint64_t v7 = v2 + 64;
  uint64_t v25 = v2 + 80;
  int64_t v26 = v1;
  int v27 = v4;
  uint64_t v28 = v2 + 64;
  uint64_t v29 = v2;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(v2 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if ((*(void *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v2 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v30 = v6;
    uint64_t v11 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v5);
    uint64_t v13 = *v11;
    unint64_t v12 = v11[1];
    sub_10006D0EC(*v11, v12);
    sub_10023CDF4(v13, v12);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    unint64_t result = (void *)sub_10006D144(v13, v12);
    unint64_t v18 = _swiftEmptyArrayStorage[2];
    unint64_t v17 = _swiftEmptyArrayStorage[3];
    if (v18 >= v17 >> 1) {
      unint64_t result = (void *)sub_1002CF974(v17 > 1, v18 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v18 + 1;
    int64_t v19 = &_swiftEmptyArrayStorage[2 * v18];
    void v19[4] = v14;
    v19[5] = v16;
    uint64_t v2 = v29;
    int64_t v8 = 1 << *(unsigned char *)(v29 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = v28;
    uint64_t v20 = *(void *)(v28 + 8 * v10);
    if ((v20 & (1 << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v27;
    if (*(_DWORD *)(v29 + 36) != v27) {
      goto LABEL_27;
    }
    unint64_t v21 = v20 & (-2 << (v5 & 0x3F));
    if (v21)
    {
      int64_t v8 = __clz(__rbit64(v21)) | v5 & 0xFFFFFFFFFFFFFFC0;
      int64_t v9 = v26;
    }
    else
    {
      unint64_t v22 = v10 + 1;
      unint64_t v23 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v26;
      if (v10 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v28 + 8 * v22);
        if (v24)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v24)) + (v22 << 6);
        }
        else
        {
          while (v23 - 2 != v10)
          {
            unint64_t v24 = *(void *)(v25 + 8 * v10++);
            if (v24)
            {
              unint64_t v22 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v6 = v30 + 1;
    uint64_t v5 = v8;
    if (v30 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_1000B6444(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Data.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  unint64_t v10 = a2 >> 62;
  uint64_t v79 = ~v7;
  unint64_t v76 = a2;
  unint64_t v78 = a2 >> 62;
  BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v77 = v11;
  uint64_t v74 = (a1 >> 32) - (int)a1;
  uint64_t v75 = a1 >> 32;
  uint64_t v80 = v10;
  size_t __n = BYTE6(a2);
  while (2)
  {
    unint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    uint64_t v15 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_15:
        sub_10006D0EC(v14, v13);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v14 + 16);
        uint64_t v16 = *(void *)(v14 + 24);
        uint64_t v15 = v16 - v17;
        if (!__OFSUB__(v16, v17)) {
          goto LABEL_15;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v15 = BYTE6(v13);
        break;
    }
    size_t v18 = __n;
    switch(v80)
    {
      case 1:
        size_t v18 = HIDWORD(a1) - (int)a1;
        if (v77) {
          goto LABEL_121;
        }
        goto LABEL_20;
      case 2:
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        size_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_20;
        }
        goto LABEL_122;
      case 3:
        if (v15) {
          goto LABEL_8;
        }
        goto LABEL_118;
      default:
LABEL_20:
        if (v15 != v18)
        {
LABEL_8:
          sub_10006D144(v14, v13);
          goto LABEL_9;
        }
        if (v15 >= 1)
        {
          switch(v13 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v25 = __DataStorage._bytes.getter();
              if (v25)
              {
                uint64_t v26 = v25;
                uint64_t v27 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v27)) {
                  goto LABEL_125;
                }
                uint64_t v28 = (const void *)(v26 + (int)v14 - v27);
              }
              else
              {
                uint64_t v28 = 0;
              }
              __DataStorage._length.getter();
              LODWORD(v1sub_1000A2B9C("Transaction emulation ended", 0) = v78;
              if (!v78)
              {
                *(void *)__s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v28) {
                  goto LABEL_153;
                }
                int v36 = memcmp(v28, __s1, __n);
                goto LABEL_115;
              }
              if (v78 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_134;
                }
                swift_retain();
                uint64_t v43 = (char *)__DataStorage._bytes.getter();
                if (v43)
                {
                  uint64_t v44 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a1, v44)) {
                    goto LABEL_141;
                  }
                  v43 += (int)a1 - v44;
                }
                uint64_t v45 = __DataStorage._length.getter();
                size_t v46 = (a1 >> 32) - (int)a1;
                if (v45 < v74) {
                  size_t v46 = v45;
                }
                if (!v28) {
                  goto LABEL_146;
                }
                if (!v43) {
                  goto LABEL_147;
                }
                int v36 = memcmp(v28, v43, v46);
                sub_10006D144(a1, a2);
                goto LABEL_115;
              }
              uint64_t v65 = *(void *)(a1 + 16);
              uint64_t v66 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              char v67 = (char *)__DataStorage._bytes.getter();
              if (v67)
              {
                uint64_t v68 = __DataStorage._offset.getter();
                if (__OFSUB__(v65, v68)) {
                  goto LABEL_140;
                }
                v67 += v65 - v68;
              }
              BOOL v21 = __OFSUB__(v66, v65);
              int64_t v69 = v66 - v65;
              if (v21) {
                goto LABEL_135;
              }
              uint64_t v70 = __DataStorage._length.getter();
              if (v70 >= v69) {
                size_t v71 = v69;
              }
              else {
                size_t v71 = v70;
              }
              a2 = v76;
              if (!v28) {
                goto LABEL_154;
              }
              LODWORD(v1sub_1000A2B9C("Transaction emulation ended", 0) = v78;
              if (!v67) {
                goto LABEL_155;
              }
              int v36 = memcmp(v28, v67, v71);
              swift_release();
              goto LABEL_114;
            case 2uLL:
              uint64_t v29 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v30 = (char *)__DataStorage._bytes.getter();
              if (!v30) {
                goto LABEL_37;
              }
              uint64_t v31 = __DataStorage._offset.getter();
              if (__OFSUB__(v29, v31)) {
                goto LABEL_124;
              }
              v30 += v29 - v31;
LABEL_37:
              __DataStorage._length.getter();
              LODWORD(v1sub_1000A2B9C("Transaction emulation ended", 0) = v78;
              if (!v78)
              {
                *(void *)__s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v30) {
                  goto LABEL_150;
                }
                int v36 = memcmp(v30, __s1, __n);
                goto LABEL_90;
              }
              if (v78 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_128;
                }
                swift_retain();
                int v32 = (char *)__DataStorage._bytes.getter();
                if (v32)
                {
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a1, v33)) {
                    goto LABEL_139;
                  }
                  v32 += (int)a1 - v33;
                }
                uint64_t v34 = __DataStorage._length.getter();
                size_t v35 = (a1 >> 32) - (int)a1;
                if (v34 < v74) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_143;
                }
                if (!v32) {
                  goto LABEL_144;
                }
                int v36 = memcmp(v30, v32, v35);
                a2 = v76;
                sub_10006D144(a1, v76);
LABEL_90:
                swift_release();
LABEL_114:
                swift_release();
LABEL_115:
                sub_10006D144(v14, v13);
                uint64_t v9 = a3 + 56;
                if (!v36) {
                  return 1;
                }
                break;
              }
              uint64_t v58 = *(void *)(a1 + 16);
              uint64_t v73 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v59 = (char *)__DataStorage._bytes.getter();
              if (v59)
              {
                uint64_t v60 = __DataStorage._offset.getter();
                if (__OFSUB__(v58, v60)) {
                  goto LABEL_138;
                }
                v59 += v58 - v60;
              }
              BOOL v21 = __OFSUB__(v73, v58);
              int64_t v61 = v73 - v58;
              if (v21) {
                goto LABEL_133;
              }
              uint64_t v62 = __DataStorage._length.getter();
              if (v62 >= v61) {
                size_t v63 = v61;
              }
              else {
                size_t v63 = v62;
              }
              if (!v30) {
                goto LABEL_151;
              }
              LODWORD(v1sub_1000A2B9C("Transaction emulation ended", 0) = v78;
              if (!v59) {
                goto LABEL_152;
              }
              int v64 = memcmp(v30, v59, v63);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_10006D144(v14, v13);
              a2 = v76;
              uint64_t v9 = a3 + 56;
              if (!v64) {
                return 1;
              }
              break;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v10) {
                goto LABEL_58;
              }
              if (v10 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_127;
                }
                sub_10006D0EC(a1, a2);
                uint64_t v37 = __DataStorage._bytes.getter();
                if (!v37) {
                  goto LABEL_145;
                }
                uint64_t v23 = v37;
                uint64_t v38 = __DataStorage._offset.getter();
                unint64_t v10 = (int)a1 - v38;
                if (__OFSUB__((int)a1, v38)) {
                  goto LABEL_132;
                }
LABEL_53:
                uint64_t v39 = __DataStorage._length.getter();
                if (v39 >= v74) {
                  size_t v40 = (a1 >> 32) - (int)a1;
                }
                else {
                  size_t v40 = v39;
                }
                int v41 = memcmp(__s1, (const void *)(v23 + v10), v40);
                sub_10006D144(a1, a2);
                sub_10006D144(v14, v13);
                LODWORD(v1sub_1000A2B9C("Transaction emulation ended", 0) = v78;
                if (!v41) {
                  return 1;
                }
              }
              else
              {
                uint64_t v54 = *(void *)(a1 + 16);
                uint64_t v53 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                id v49 = (char *)__DataStorage._bytes.getter();
                if (v49)
                {
                  uint64_t v55 = __DataStorage._offset.getter();
                  if (__OFSUB__(v54, v55)) {
                    goto LABEL_137;
                  }
                  v49 += v54 - v55;
                }
                BOOL v21 = __OFSUB__(v53, v54);
                int64_t v51 = v53 - v54;
                if (v21) {
                  goto LABEL_130;
                }
                uint64_t v52 = __DataStorage._length.getter();
                a2 = v76;
                if (!v49) {
                  goto LABEL_149;
                }
LABEL_83:
                if (v52 >= v51) {
                  size_t v56 = v51;
                }
                else {
                  size_t v56 = v52;
                }
                int v57 = memcmp(__s1, v49, v56);
                swift_release();
                swift_release();
                sub_10006D144(v14, v13);
                LODWORD(v1sub_1000A2B9C("Transaction emulation ended", 0) = v78;
                if (!v57) {
                  return 1;
                }
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v13;
              __s1[10] = BYTE2(v13);
              __s1[11] = BYTE3(v13);
              __s1[12] = BYTE4(v13);
              __s1[13] = BYTE5(v13);
              if (!v10)
              {
LABEL_58:
                uint64_t __s2 = a1;
                __int16 v83 = a2;
                char v84 = BYTE2(a2);
                char v85 = BYTE3(a2);
                char v86 = BYTE4(a2);
                char v87 = BYTE5(a2);
                int v42 = memcmp(__s1, &__s2, __n);
                sub_10006D144(v14, v13);
                if (!v42) {
                  return 1;
                }
                break;
              }
              if (v10 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_126;
                }
                sub_10006D0EC(a1, a2);
                uint64_t v22 = __DataStorage._bytes.getter();
                if (!v22)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x1000B6DE4);
                }
                uint64_t v23 = v22;
                uint64_t v24 = __DataStorage._offset.getter();
                unint64_t v10 = (int)a1 - v24;
                if (__OFSUB__((int)a1, v24)) {
                  goto LABEL_131;
                }
                goto LABEL_53;
              }
              uint64_t v47 = *(void *)(a1 + 16);
              uint64_t v48 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              id v49 = (char *)__DataStorage._bytes.getter();
              if (v49)
              {
                uint64_t v50 = __DataStorage._offset.getter();
                if (__OFSUB__(v47, v50)) {
                  goto LABEL_136;
                }
                v49 += v47 - v50;
              }
              BOOL v21 = __OFSUB__(v48, v47);
              int64_t v51 = v48 - v47;
              if (v21) {
                goto LABEL_129;
              }
              uint64_t v52 = __DataStorage._length.getter();
              a2 = v76;
              if (!v49) {
                goto LABEL_148;
              }
              goto LABEL_83;
          }
LABEL_9:
          unint64_t v8 = (v8 + 1) & v79;
          if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            return 0;
          }
          continue;
        }
LABEL_118:
        sub_10006D144(v14, v13);
        return 1;
    }
  }
}