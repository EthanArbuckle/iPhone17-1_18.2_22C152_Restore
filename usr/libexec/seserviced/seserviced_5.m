uint64_t sub_10031B780(uint64_t a1, unsigned int a2, unsigned int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v34;
  void v35[2];
  void v36[2];
  void v37[2];
  void v38[2];
  void v39[2];
  void v40[2];
  void v41[2];
  void v42[2];
  void v43[2];
  void v44[2];
  void v45[2];
  void v46[2];
  void v47[2];
  void v48[2];

  if (!a1) {
    return 0;
  }
  if (a2 == 18)
  {
    switch(a3)
    {
      case 0u:
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - no specific reason.";
        v9 = 1;
        v10 = 632;
        goto LABEL_48;
      case 1u:
        if (a4)
        {
          v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v47[0] = NSLocalizedDescriptionKey;
          v16 = +[NSString stringWithUTF8String:KmlErrorString(215)];
          v47[1] = NSLocalizedFailureReasonErrorKey;
          v48[0] = v16;
          v48[1] = @"No matching PAKE version found";
          v17 = +[NSDictionary dictionaryWithObjects:v48 forKeys:v47 count:2];
          *a4 = +[NSError errorWithDomain:v15 code:215 userInfo:v17];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - no matching PAKE version found.";
        v9 = 1;
        v10 = 638;
        goto LABEL_48;
      case 2u:
        if (a4)
        {
          v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v45[0] = NSLocalizedDescriptionKey;
          v19 = +[NSString stringWithUTF8String:KmlErrorString(215)];
          v45[1] = NSLocalizedFailureReasonErrorKey;
          v46[0] = v19;
          v46[1] = @"No matching digital key applet version found";
          v20 = +[NSDictionary dictionaryWithObjects:v46 forKeys:v45 count:2];
          *a4 = +[NSError errorWithDomain:v18 code:215 userInfo:v20];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - no matching digital key applet version found.";
        v9 = 1;
        v10 = 644;
        goto LABEL_48;
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
        if (a4)
        {
          v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v43[0] = NSLocalizedDescriptionKey;
          v13 = +[NSString stringWithUTF8String:KmlErrorString(23)];
          v43[1] = NSLocalizedFailureReasonErrorKey;
          v44[0] = v13;
          v44[1] = @"Failed due to timeout";
          v14 = +[NSDictionary dictionaryWithObjects:v44 forKeys:v43 count:2];
          *a4 = +[NSError errorWithDomain:v12 code:23 userInfo:v14];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - Failed due to timeout.";
        v9 = 1;
        v10 = 650;
        goto LABEL_48;
      case 8u:
        if (a4)
        {
          v21 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v41[0] = NSLocalizedDescriptionKey;
          v22 = +[NSString stringWithUTF8String:KmlErrorString(11)];
          v41[1] = NSLocalizedFailureReasonErrorKey;
          v42[0] = v22;
          v42[1] = @"No key support present in remote reader";
          v23 = +[NSDictionary dictionaryWithObjects:v42 forKeys:v41 count:2];
          *a4 = +[NSError errorWithDomain:v21 code:11 userInfo:v23];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - no key support present in remote reader.";
        v9 = 1;
        v10 = 657;
        goto LABEL_48;
      case 9u:
        if (a4)
        {
          v24 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v39[0] = NSLocalizedDescriptionKey;
          v25 = +[NSString stringWithUTF8String:KmlErrorString(5)];
          v39[1] = NSLocalizedFailureReasonErrorKey;
          v40[0] = v25;
          v40[1] = @"Evidence verification on car side failed";
          v26 = +[NSDictionary dictionaryWithObjects:v40 forKeys:v39 count:2];
          *a4 = +[NSError errorWithDomain:v24 code:5 userInfo:v26];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - evidence verification on car side failed.";
        v9 = 1;
        v10 = 663;
        goto LABEL_48;
      case 0xAu:
        if (a4)
        {
          v27 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v37[0] = NSLocalizedDescriptionKey;
          v28 = +[NSString stringWithUTF8String:KmlErrorString(26)];
          v37[1] = NSLocalizedFailureReasonErrorKey;
          v38[0] = v28;
          v38[1] = @"wrong digital key configuration";
          v29 = +[NSDictionary dictionaryWithObjects:v38 forKeys:v37 count:2];
          *a4 = +[NSError errorWithDomain:v27 code:26 userInfo:v29];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - wrong digital key configuration";
        v9 = 1;
        v10 = 669;
        goto LABEL_48;
      case 0xBu:
        if (a4)
        {
          v30 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          v35[0] = NSLocalizedDescriptionKey;
          v31 = +[NSString stringWithUTF8String:KmlErrorString(201)];
          v35[1] = NSLocalizedFailureReasonErrorKey;
          v36[0] = v31;
          v36[1] = @"certificate verification failed";
          v32 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:2];
          *a4 = +[NSError errorWithDomain:v30 code:201 userInfo:v32];
        }
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - certificate verification failed";
        v9 = 1;
        v10 = 675;
        goto LABEL_48;
      case 0xCu:
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - curve point X zero or invalid";
        v9 = 1;
        v10 = 678;
        goto LABEL_48;
      case 0xDu:
        v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - maximum number of unsuccessful owner pairing attempts reached, vehicle will get a new verifier";
        v9 = 1;
        v10 = 681;
        goto LABEL_48;
      default:
        if (a3 == 127)
        {
          v8 = @"KmlCommandHandler: OpControlFlow command - abort, reason - pairing failed due to other reason";
          v9 = 1;
          v10 = 684;
          goto LABEL_48;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 687, @"KmlCommandHandler: OpControlFlow command - abort, reason - unknown (%d)", a5, a6, a7, a8, a3);
        break;
    }
    return 0;
  }
  if (a2 == 17)
  {
    if (a3 == 17)
    {
      v8 = @"KmlCommandHandler: OpControlFlow command - end, reason - successful end of key creation and verification, key not tracked by remote reader.";
      v9 = 1;
      v10 = 622;
      goto LABEL_48;
    }
    if (a3 == 16)
    {
      v8 = @"KmlCommandHandler: OpControlFlow command - end, reason - successful end of key creation and verification, key tracked by remote reader.";
      v9 = 1;
      v10 = 619;
      goto LABEL_48;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 625, @"KmlCommandHandler: OpControlFlow command - end, reason - unknown (%d)", a5, a6, a7, a8, a3);
    return 0;
  }
  if (a2 != 16)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 693, @"KmlCommandHandler: unknown OpControlFlow command - %d", a5, a6, a7, a8, a2);
    return 0;
  }
  if ((int)a3 > 2)
  {
    if (a3 == 3)
    {
      v8 = @"KmlCommandHandler: OpControlFlow command - continue, reason - waiting for user confirmation on reader  UI.";
      v9 = 1;
      v10 = 606;
      goto LABEL_48;
    }
    if (a3 == 15)
    {
      v8 = @"KmlCommandHandler: OpControlFlow command - continue, reason - reader waiting time extension, keep busy, no action on device side.";
      v9 = 1;
      v10 = 609;
      goto LABEL_48;
    }
    goto LABEL_22;
  }
  if (a3 == 1)
  {
    v8 = @"KmlCommandHandler: OpControlFlow command - continue, reason - key creation data transmitted to device";
    v9 = 1;
    v10 = 600;
    goto LABEL_48;
  }
  if (a3 != 2)
  {
LABEL_22:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", 612, @"KmlCommandHandler: OpControlFlow command - continue, reason - unknown (%d)", a5, a6, a7, a8, a3);
    return 0;
  }
  v8 = @"KmlCommandHandler: OpControlFlow command - continue, reason - key certificate chain received by remote reader, reeader tries to contact KTS.";
  v9 = 1;
  v10 = 603;
LABEL_48:
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler validateOpControlFlowWithOperation:reason:error:]", v10, v8, a5, a6, a7, a8, v34);
  return v9;
}

id sub_10031C09C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 48);
    id v4 = [*(id *)(a1 + 56) agreedKmlVehicleVersion];
    a1 = sub_10033CC60(v2, v3, (uint64_t)v4, v5, v6, v7, v8, v9);
    uint64_t v1 = vars8;
  }
  return (id)a1;
}

uint64_t *sub_10031C0EC(uint64_t *a1)
{
  if (a1)
  {
    sub_10033F0AC(a1[4]);
    a1 = (uint64_t *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_10031C120(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[4];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_10031C150(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 64);
  }
  return result;
}

void sub_10031C224(id a1)
{
  uint64_t v1 = objc_alloc_init(KeyManagementLibrary);
  uint64_t v2 = (void *)qword_1004683A0;
  qword_1004683A0 = (uint64_t)v1;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KeyManagementLibrary sharedLibrary]_block_invoke", 50, @"Service created", v3, v4, v5, v6, v8);
}

id *sub_10031C46C(uint64_t a1)
{
  return sub_10031C474(*(id **)(a1 + 32));
}

id *sub_10031C474(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = +[NSMutableDictionary dictionary];
    uint64_t v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v1[3] count]);
    [v2 setObject:v3 forKeyedSubscript:@"numberOfQueuedSessions"];

    if (v1[4]) {
      uint64_t v4 = &off_10042E398;
    }
    else {
      uint64_t v4 = &off_10042E3B0;
    }
    [v2 setObject:v4 forKeyedSubscript:@"hasActiveSession"];
    id v5 = v1[4];
    if (v5)
    {
      uint64_t v6 = [v5 clientName];
      uint64_t v7 = (void *)v6;
      if (v6) {
        CFStringRef v8 = (const __CFString *)v6;
      }
      else {
        CFStringRef v8 = &stru_100421848;
      }
      [v2 setObject:v8 forKeyedSubscript:@"currentSessionClient"];
      uint64_t v9 = (objc_class *)objc_opt_class();
      v10 = NSStringFromClass(v9);
      [v2 setObject:v10 forKeyedSubscript:@"currentSessionType"];

      v11 = [v1[4] dumpState];
      if (v11) {
        [v2 setObject:v11 forKeyedSubscript:@"currentSessionState"];
      }
    }
    v12 = +[NSPropertyListSerialization dataWithPropertyList:v2 format:200 options:0 error:0];
    id v13 = [v12 length];
    uint64_t v1 = (id *)malloc_type_calloc(1uLL, (size_t)v13 + 200, 0xED8D9C59uLL);
    *(_DWORD *)uint64_t v1 = 1;
    *((_DWORD *)v1 + 1) = v13;
    __strlcpy_chk();
    id v14 = v12;
    memcpy(v1 + 25, [v14 bytes], (size_t)v13);
  }
  return v1;
}

void sub_10031C854(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10031C868(uint64_t a1)
{
  return _[*(id *)(a1 + 32) startNextSession];
}

void sub_10031CA20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10031CA34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) startNextSession];
}

void sub_10031CB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10031CD38(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10031CD60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = [v3 userInfo];
    uint64_t v6 = [v5 objectForKeyedSubscript:@"ProxyObjects"];
    uint64_t v7 = +[NSSet setWithSet:v6];

    uint64_t v8 = [v5 objectForKeyedSubscript:@"ClientName"];
    id v9 = [v4 processIdentifier];
    v24 = (void *)v8;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary handleCloseForConnection:]", 215, @"KmlXpcService: Goodbye from client pid=%d name=%@", v10, v11, v12, v13, (uint64_t)v9);
    sub_10032B0A8(*(void *)(a1 + 16), v4);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v14 = v7;
    id v15 = [v14 countByEnumeratingWithState:&v25 objects:v29 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v26;
      do
      {
        v18 = 0;
        do
        {
          if (*(void *)v26 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(id *)(*((void *)&v25 + 1) + 8 * (void)v18);
          KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KeyManagementLibrary handleCloseForConnection:]", 222, @"Ending session %@", v20, v21, v22, v23, (uint64_t)v19);
          [v19 endSessionWithCompletion:&stru_100419DB8];

          v18 = (char *)v18 + 1;
        }
        while (v16 != v18);
        id v16 = [v14 countByEnumeratingWithState:&v25 objects:v29 count:16];
      }
      while (v16);
    }
  }
}

void sub_10031CF54(id a1, NSError *a2)
{
  uint64_t v6 = (NSError *)@"No Error";
  if (a2) {
    uint64_t v6 = a2;
  }
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KeyManagementLibrary handleCloseForConnection:]_block_invoke", 224, @"Session ended with %@", v2, v3, v4, v5, (uint64_t)v6);
}

void sub_10031D484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location,id a26)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(v29);
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a26);
  _Unwind_Resume(a1);
}

void sub_10031D4D4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  sub_10031CD60((uint64_t)v2, WeakRetained);
}

void sub_10031D534(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v2 = objc_loadWeakRetained((id *)(a1 + 40));
  sub_10031CD60((uint64_t)v2, WeakRetained);
}

id sub_10031D720(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_10031D7EC(uint64_t a1)
{
  id v14 = [*(id *)(a1 + 32) userInfo];
  id v2 = [v14 objectForKeyedSubscript:@"clientName"];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary clientAppIsBackGrounded:]_block_invoke", 373, @"Client (%@) is backGrounded", v3, v4, v5, v6, (uint64_t)v2);

  [v14 setObject:&__kCFBooleanTrue forKeyedSubscript:@"BackGroundClient"];
  uint64_t v7 = [v14 objectForKeyedSubscript:@"Entitlements"];
  if (sub_100321FC8((BOOL)v7))
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 40) + 32);
    if (v12) {
      [v12 startBackGroundTimer];
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary clientAppIsBackGrounded:]_block_invoke", 377, @"Client doesn't have entitlement to continue.", v8, v9, v10, v11, v13);
    [*(id *)(a1 + 32) invalidate];
  }
}

void sub_10031D9A8(uint64_t a1)
{
  id v7 = [*(id *)(a1 + 32) userInfo];
  id v2 = [v7 objectForKeyedSubscript:@"clientName"];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeyManagementLibrary clientAppIsForeGrounded:]_block_invoke", 398, @"Client (%@) is foreGrounded", v3, v4, v5, v6, (uint64_t)v2);

  [v7 setObject:&__kCFBooleanFalse forKeyedSubscript:@"BackGroundClient"];
  [*(id *)(*(void *)(a1 + 40) + 32) cancelBackGroundTimer];
}

id sub_10031DB48()
{
  self;
  if (qword_1004683B8 != -1) {
    dispatch_once(&qword_1004683B8, &stru_100419E00);
  }
  v0 = (void *)qword_1004683B0;

  return v0;
}

void sub_10031DBA0(id a1)
{
  uint64_t v1 = objc_alloc_init(KmlSharingTransport);
  id v2 = (void *)qword_1004683B0;
  qword_1004683B0 = (uint64_t)v1;
}

void sub_10031DD24(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031F9F8;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10031DDEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031DEB4;
    block[3] = &unk_10040D2C0;
    block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10031DEB4(uint64_t a1)
{
}

void sub_10031DEC4(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = *(void **)(a1 + 24);
    id v11 = a3;
    id v6 = a2;
    [v5 removeObjectForKey:v11];
    [*(id *)(a1 + 24) setObject:v6 forKey:v11];

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport sync_addDelegate:forSharingIdentifier:]", 397, @"KSTransport: added delegate for %@.", v7, v8, v9, v10, (uint64_t)v11);
  }
}

void sub_10031DF6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031E014;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void *sub_10031E014(void *result)
{
  uint64_t v1 = result[4];
  if (v1) {
    return [*(id *)(v1 + 24) removeObjectForKey:result[5]];
  }
  return result;
}

void sub_10031E02C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031E0D4;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10031E0D4(uint64_t a1)
{
}

void sub_10031E0E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 40);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10031E188;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10031E188(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 32) + 32) addObject:*(void *)(a1 + 40)];
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);

  sub_100359308(v2);
}

BOOL sub_10031E1CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  BOOL v5 = 0;
  if (a1 && v3)
  {
    if ([v3 length])
    {
      uint64_t v11 = 0;
      uint64_t v12 = &v11;
      uint64_t v13 = 0x2020000000;
      char v14 = 0;
      dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
      id v6 = *(NSObject **)(a1 + 40);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10031E2EC;
      block[3] = &unk_100419E28;
      uint64_t v10 = &v11;
      block[4] = a1;
      id v9 = v4;
      dispatch_sync(v6, block);
      BOOL v5 = *((unsigned char *)v12 + 24) != 0;

      _Block_object_dispose(&v11, 8);
    }
    else
    {
      BOOL v5 = 0;
    }
  }

  return v5;
}

void sub_10031E2D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10031E2EC(uint64_t a1)
{
  uint64_t result = sub_1003597CC(*(void *)(*(void *)(a1 + 32) + 8), *(void **)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

dispatch_queue_t *sub_10031E324(dispatch_queue_t *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_10031E438;
    id v9 = sub_10031E448;
    id v10 = 0;
    dispatch_assert_queue_not_V2(a1[5]);
    uint64_t v2 = v1[5];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10031E450;
    v4[3] = &unk_100419E50;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);
  }

  return v1;
}

void sub_10031E420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10031E438(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10031E448(uint64_t a1)
{
}

void sub_10031E450(uint64_t a1)
{
  uint64_t v2 = sub_100359A74(*(dispatch_queue_t **)(*(void *)(a1 + 32) + 8));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10031E4A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  id v24 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  id v21 = a7;
  id v22 = a8;
  if (a1)
  {
    uint64_t v23 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031E630;
    block[3] = &unk_100419E78;
    id v26 = v19;
    id v27 = v24;
    id v28 = v21;
    uint64_t v29 = a1;
    uint64_t v34 = a9;
    id v30 = v17;
    id v31 = v18;
    id v32 = v20;
    uint64_t v35 = a10;
    id v33 = v22;
    dispatch_async(v23, block);
  }
}

void sub_10031E630(uint64_t a1)
{
  id v14 = +[NSMutableDictionary dictionary];
  [v14 setObject:*(void *)(a1 + 32) forKeyedSubscript:@"kmlMessageId"];
  [v14 setObject:*(void *)(a1 + 40) forKeyedSubscript:@"kmlSharingData"];
  uint64_t v2 = [*(id *)(a1 + 48) UUIDString];
  [v14 setObject:v2 forKeyedSubscript:@"kmlSharingUuid"];

  uint64_t v3 = *(void *)(a1 + 96);
  CFStringRef v4 = @"kmlPhone";
  if (v3 == 2) {
    CFStringRef v4 = @"kmlWatch";
  }
  if (v3 == 255) {
    CFStringRef v5 = @"kmlAnyDevice";
  }
  else {
    CFStringRef v5 = v4;
  }
  if (*(void *)(a1 + 56)) {
    CFStringRef v6 = v5;
  }
  else {
    CFStringRef v6 = 0;
  }
  [v14 setObject:v6 forKeyedSubscript:@"kmlDeviceType"];
  uint64_t v7 = *(void *)(a1 + 64);
  if (v7) {
    [v14 setObject:v7 forKeyedSubscript:@"kmlMetaData"];
  }
  uint64_t v8 = *(void *)(a1 + 72);
  if (v8) {
    [v14 setObject:v8 forKeyedSubscript:@"kmlBindingAttestation"];
  }
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    [v14 setObject:v9 forKeyedSubscript:@"kmlKeyId"];
  }
  if (*(void *)(a1 + 56))
  {
    unint64_t v10 = *(void *)(a1 + 104) - 1;
    if (v10 > 8) {
      CFStringRef v11 = @"kmlUnknown";
    }
    else {
      CFStringRef v11 = off_100419E98[v10];
    }
  }
  else
  {
    CFStringRef v11 = 0;
  }
  [v14 setObject:v11 forKeyedSubscript:@"kmlMessageType"];
  char v12 = *(void *)(a1 + 104) == 8 && *(void *)(a1 + 96) == 2;
  uint64_t v13 = sub_1003583DC((id *)[KmlMessageToSend alloc], v14, *(void **)(a1 + 32), *(void **)(a1 + 88));
  sub_1003589F0(*(void *)(*(void *)(a1 + 56) + 8), v13, v12);
}

void sub_10031E804(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    unint64_t v10 = *(NSObject **)(a1 + 40);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10031E8F0;
    v11[3] = &unk_100419A98;
    id v12 = v8;
    id v13 = v9;
    uint64_t v14 = a1;
    id v15 = v7;
    dispatch_async(v10, v11);
  }
}

void sub_10031E8F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport queueCrossPlatformSharingMessage:forInvitationIdentifier:fromMailboxIdentifier:]_block_invoke", 202, @"Invitation Identifier - %@", a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport queueCrossPlatformSharingMessage:forInvitationIdentifier:fromMailboxIdentifier:]_block_invoke", 203, @"Mailbox identifier - %@", v9, v10, v11, v12, a1[5]);
  id v19 = [*(id *)(a1[6] + 24) objectForKeyedSubscript:a1[4]];
  [v19 handleCrossPlatformSharingMessage:a1[7] fromMailboxIdentifier:a1[5]];
  id v17 = v19;
  if (!v19)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport queueCrossPlatformSharingMessage:forInvitationIdentifier:fromMailboxIdentifier:]_block_invoke", 208, @"No delegate to handle message. Dropping it", v13, v14, v15, v16, v18);
    id v17 = 0;
  }
}

void sub_10031E9BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
    CFStringRef v4 = *(NSObject **)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10031EA6C;
    v5[3] = &unk_10040BE80;
    v5[4] = a1;
    id v6 = v3;
    dispatch_sync(v4, v5);
  }
}

void sub_10031EA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (isInternalBuild())
  {
    id v14 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(v15 + 48);
    *(void *)(v15 + 48) = v14;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingTransport registerCrossPlatformTestMessageOverIDSHandler:]_block_invoke", 222, @"Internal build test only method", v10, v11, v12, v13, a9);
  }
}

void sub_10031EAEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
    id v7 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031EBBC;
    block[3] = &unk_10040D2C0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_sync(v7, block);
  }
}

void sub_10031EBBC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (isInternalBuild())
  {
    id v14 = (void *)a1[5];
    uint64_t v15 = *(void *)(a1[4] + 8);
    uint64_t v16 = (void *)a1[6];
    sub_100359B74(v15, v14, v16);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingTransport sendCrossPlatformTestData:toIdsIdentifier:]_block_invoke", 234, @"Internal build test only method", v10, v11, v12, v13, a9);
  }
}

void sub_10031EC34(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 40));
    uint64_t v2 = *(NSObject **)(a1 + 40);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10031ECC0;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_10031ECC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = 0;
}

id sub_10031ED68(uint64_t a1)
{
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    id v5 = 0;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0;
      id v8 = v5;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v2);
        }
        id v5 = [*(id *)(*(void *)(a1 + 32) + 24) objectForKey:*(void *)(*((void *)&v10 + 1) + 8 * (void)v7), (void)v10];

        [v5 handleTransportSetupResult:*(void *)(a1 + 40)];
        id v7 = (char *)v7 + 1;
        id v8 = v5;
      }
      while (v4 != v7);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v4);
  }
  return [*(id *)(*(void *)(a1 + 32) + 32) removeAllObjects];
}

void sub_10031EF68(void *a1)
{
  id v2 = [*(id *)(a1[4] + 24) objectForKeyedSubscript:a1[5]];
  [v2 handleSendMessageResult:a1[6]];
}

void sub_10031F088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingTestData:fromRemoteIdsIdentifier:]_block_invoke", 271, @"KSTransport: received data from %@.", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 48);
  if (v14)
  {
    uint64_t v15 = *(void (**)(void))(v14 + 16);
    v15();
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingTestData:fromRemoteIdsIdentifier:]_block_invoke", 275, @"KSTransport: We don't expect NSData from anyone so dropping it.", v10, v11, v12, v13, a9);
  }
}

void sub_10031F200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 283, @"KSTransport: received message from %@.", a5, a6, a7, a8, *(void *)(a1 + 32));
  id v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlSharingData"];

  if (v9)
  {
    id v10 = objc_alloc((Class)NSData);
    uint64_t v11 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlSharingData"];
    id v9 = [v10 initWithData:v11];
  }
  uint64_t v12 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlMetaData"];

  if (v12)
  {
    id v13 = objc_alloc((Class)NSData);
    uint64_t v14 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlMetaData"];
    id v15 = [v13 initWithData:v14];
  }
  else
  {
    id v15 = 0;
  }
  uint64_t v16 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlBindingAttestation"];

  if (v16)
  {
    id v17 = objc_alloc((Class)NSData);
    uint64_t v18 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlBindingAttestation"];
    id v19 = [v17 initWithData:v18];
  }
  else
  {
    id v19 = 0;
  }
  id v20 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlMessageId"];

  if (v20)
  {
    id v21 = objc_alloc((Class)NSString);
    id v22 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlMessageId"];
    id v23 = [v21 initWithString:v22];
  }
  else
  {
    id v23 = 0;
  }
  id v24 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlKeyId"];

  if (v24)
  {
    id v25 = objc_alloc((Class)NSString);
    id v26 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlKeyId"];
    id v27 = [v25 initWithString:v26];
  }
  else
  {
    id v27 = 0;
  }
  id v28 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlSharingUuid"];

  if (v28)
  {
    id v29 = objc_alloc((Class)NSUUID);
    id v30 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlSharingUuid"];
    id v31 = [v29 initWithUUIDString:v30];
  }
  else
  {
    id v31 = 0;
  }
  id v32 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlMessageType"];

  if (v32)
  {
    uint64_t v33 = *(void *)(a1 + 48);
    uint64_t v34 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlMessageType"];
    uint64_t v35 = sub_10031F84C(v33, v34);
  }
  else
  {
    uint64_t v35 = 0;
  }
  v36 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlDeviceType"];

  if (v36)
  {
    uint64_t v41 = *(void *)(a1 + 48);
    v42 = [*(id *)(a1 + 40) objectForKeyedSubscript:@"kmlDeviceType"];
    uint64_t v43 = sub_10031F98C(v41, v42);

    if (!v9) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v43 = 1;
    if (!v9) {
      goto LABEL_29;
    }
  }
  if (v31)
  {
    if (v35 == 8)
    {
      uint64_t v64 = v43;
      v48 = sub_10034CDCC((uint64_t)KmlOwnerSharingManager, v31);
      if (!v48) {
        goto LABEL_52;
      }
    }
    else
    {
      if (v35 == 9)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 337, @"Dropping re-invite errror response by design. It will be handled in future", v37, v38, v39, v40, v60);
        goto LABEL_52;
      }
      if (!v23)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 341, @"Missing messageId, dropping it.", v37, v38, v39, v40, v60);
LABEL_53:
        v48 = 0;
LABEL_54:

        goto LABEL_55;
      }
      id v63 = v9;
      uint64_t v64 = v43;
      id v61 = v27;
      id v62 = v15;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      id v49 = *(id *)(*(void *)(a1 + 48) + 24);
      id v50 = [v49 countByEnumeratingWithState:&v65 objects:v69 count:16];
      if (v50)
      {
        id v51 = v50;
        uint64_t v52 = *(void *)v66;
LABEL_35:
        uint64_t v53 = 0;
        while (1)
        {
          if (*(void *)v66 != v52) {
            objc_enumerationMutation(v49);
          }
          v54 = *(void **)(*((void *)&v65 + 1) + 8 * v53);
          if ([v54 isEqualToString:v23]) {
            break;
          }
          if (v51 == (id)++v53)
          {
            id v51 = [v49 countByEnumeratingWithState:&v65 objects:v69 count:16];
            if (v51) {
              goto LABEL_35;
            }
            goto LABEL_41;
          }
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 347, @"KSTransport: Found delegate that can handle the message with id %@", v55, v56, v57, v58, (uint64_t)v23);
        v48 = [*(id *)(*(void *)(a1 + 48) + 24) objectForKey:v54];

        id v15 = v62;
        id v9 = v63;
        id v27 = v61;
        if (v48) {
          goto LABEL_49;
        }
      }
      else
      {
LABEL_41:

        id v15 = v62;
        id v9 = v63;
        id v27 = v61;
      }
      switch(v35)
      {
        case 1:
        case 4:
          v59 = sub_10032B90C((uint64_t)KmlFriendSharingManager, v23, 1);
          break;
        case 2:
        case 5:
          v59 = sub_10034DB08((uint64_t)KmlOwnerSharingManager, v23, v31);
          break;
        default:
          goto LABEL_52;
      }
      v48 = v59;
      if (!v59)
      {
LABEL_52:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 375, @"KSTransport: No delegate to handle this message. Dropping it.", v44, v45, v46, v47, v60);
        sub_100359684(*(void *)(*(void *)(a1 + 48) + 8), *(void **)(a1 + 32));
        goto LABEL_53;
      }
      sub_10031DEC4(*(void *)(a1 + 48), v59, v23);
    }
LABEL_49:
    [v48 handleIncomingMessage:v9 metaData:v15 bindingAttestation:v19 keyIdentifier:v27 uuid:v31 messageType:v35 targetDeviceType:v64 remoteIdsIdentifier:*(void *)(a1 + 32)];
    if (v35 == 3 || (v35 & 0xE) == 4) {
      sub_100359684(*(void *)(*(void *)(a1 + 48) + 8), *(void **)(a1 + 32));
    }
    goto LABEL_54;
  }
LABEL_29:
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingTransport handleIncomingMessage:fromRemoteIdsIdentifier:]_block_invoke", 327, @"KSTransport: malformed message, dropping it.", v37, v38, v39, v40, v60);
LABEL_55:
}

uint64_t sub_10031F84C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = 0;
  if (a1 && v3)
  {
    if ([v3 isEqualToString:@"kmlInvitation"])
    {
      uint64_t v5 = 1;
    }
    else if ([v4 isEqualToString:@"kmlSigningRequest"])
    {
      uint64_t v5 = 2;
    }
    else if ([v4 isEqualToString:@"kmlSignedResponse"])
    {
      uint64_t v5 = 3;
    }
    else if ([v4 isEqualToString:@"kmlOwnerCancel"])
    {
      uint64_t v5 = 4;
    }
    else if ([v4 isEqualToString:@"kmlFriendCancel"])
    {
      uint64_t v5 = 5;
    }
    else if ([v4 isEqualToString:@"kmlPinEntryRequest"])
    {
      uint64_t v5 = 6;
    }
    else if ([v4 isEqualToString:@"kmlPinEntryValue"])
    {
      uint64_t v5 = 7;
    }
    else if ([v4 isEqualToString:@"kmlReinviteRequest"])
    {
      uint64_t v5 = 8;
    }
    else if ([v4 isEqualToString:@"kmlReinviteErrorResponse"])
    {
      uint64_t v5 = 9;
    }
    else
    {
      uint64_t v5 = 0;
    }
  }

  return v5;
}

uint64_t sub_10031F98C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ([v3 isEqualToString:@"kmlWatch"])
    {
      a1 = 2;
    }
    else if ([v4 isEqualToString:@"kmlPhone"])
    {
      a1 = 1;
    }
    else
    {
      a1 = 255;
    }
  }

  return a1;
}

id sub_10031F9F8(uint64_t a1)
{
  return sub_100328860(*(id *)(*(void *)(a1 + 32) + 16));
}

void sub_10031FB50(uint64_t a1)
{
  id v2 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
  NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
  id v3 = +[NSString stringWithUTF8String:KmlErrorString(13)];
  id v17 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  uint64_t v5 = +[NSError errorWithDomain:v2 code:13 userInfo:v4];

  if (*(void *)(*(void *)(a1 + 32) + 56))
  {
    id v10 = @"We already have Pairing in progress. Denying this request.";
    uint64_t v11 = 45;
LABEL_6:
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingSession preWarmForManufacturer:callback:]_block_invoke", v11, v10, v6, v7, v8, v9, v15);
    goto LABEL_7;
  }
  uint64_t v12 = sub_10030B000((uint64_t)KmlOwnerPairingManager, 0);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 56);
  *(void *)(v13 + 56) = v12;

  sub_10030B33C(*(void *)(*(void *)(a1 + 32) + 56), *(void **)(a1 + 32));
  if (!sub_10030B448(*(void *)(*(void *)(a1 + 32) + 56), *(void **)(a1 + 40)))
  {
    id v10 = @"Failed to start pre-warm.";
    uint64_t v11 = 56;
    goto LABEL_6;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession preWarmForManufacturer:callback:]_block_invoke", 53, @"Started pre-warm for pairing.", v6, v7, v8, v9, v15);

  uint64_t v5 = 0;
LABEL_7:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10031FE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession startKeyPairingWithPassword:keyName:transport:bindingAttestation:callback:]_block_invoke", 73, @"Requesting Pairing to Start", a5, a6, a7, a8, v26);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 56);
  if (!v9)
  {
    uint64_t v10 = sub_10030B000((uint64_t)KmlOwnerPairingManager, 0);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(v11 + 56);
    *(void *)(v11 + 56) = v10;

    sub_10030B33C(*(void *)(*(void *)(a1 + 32) + 56), *(void **)(a1 + 32));
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 56);
  }
  if (sub_10030B63C(v9, *(void **)(a1 + 40), *(void **)(a1 + 48), *(void *)(a1 + 72), *(void **)(a1 + 56)))
  {
    id v13 = objc_retainBlock(*(id *)(a1 + 64));
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 64);
    *(void *)(v14 + 64) = v13;

    uint64_t v16 = *(void *)(a1 + 32);
    id v17 = *(void **)(v16 + 80);
    *(void *)(v16 + 80) = 0;

    *(unsigned char *)(*(void *)(a1 + 32) + 88) = 0;
    *(unsigned char *)(*(void *)(a1 + 32) + 89) = 0;
    *(unsigned char *)(*(void *)(a1 + 32) + 90) = 0;
  }
  else
  {
    uint64_t v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
    id v19 = +[NSString stringWithUTF8String:KmlErrorString(13)];
    id v29 = v19;
    id v20 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    id v21 = +[NSError errorWithDomain:v18 code:13 userInfo:v20];

    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingSession startKeyPairingWithPassword:keyName:transport:bindingAttestation:callback:]_block_invoke", 85, @"We already have Pairing in progress. Denying this request.", v22, v23, v24, v25, v27);
    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
  }
}

uint64_t sub_10032011C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession startProbingWithCallback:]_block_invoke", 102, &stru_100421848, a5, a6, a7, a8, v25);
  if (*(void *)(*(void *)(a1 + 32) + 56))
  {
    id v13 = @"Started probing in the wrong time: opManager is not nil.";
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    uint64_t v15 = 114;
  }
  else
  {
    uint64_t v16 = sub_10030B000((uint64_t)KmlOwnerPairingManager, 0);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 56);
    *(void *)(v17 + 56) = v16;

    sub_10030B33C(*(void *)(*(void *)(a1 + 32) + 56), *(void **)(a1 + 32));
    if (sub_10030BF68(*(void *)(*(void *)(a1 + 32) + 56)))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession startProbingWithCallback:]_block_invoke", 109, @"Started probing for pairing.", v9, v10, v11, v12, v26);
      goto LABEL_7;
    }
    id v13 = @"Failed to start probing.";
    os_log_type_t v14 = OS_LOG_TYPE_ERROR;
    uint64_t v15 = 111;
  }
  KmlLogFunc2(v14, (uint64_t)"-[KmlOwnerPairingSession startProbingWithCallback:]_block_invoke", v15, v13, v9, v10, v11, v12, v26);
LABEL_7:
  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = *(void **)(v19 + 64);
  *(void *)(v19 + 64) = 0;

  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(v21 + 80);
  *(void *)(v21 + 80) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 88) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 89) = 0;
  *(unsigned char *)(*(void *)(a1 + 32) + 90) = 0;
  uint64_t v23 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v23();
}

void sub_100320338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession endSessionWithCompletion:]_block_invoke", 128, &stru_100421848, a5, a6, a7, a8, (uint64_t)v23.receiver);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 56);
  if (!v10) {
    goto LABEL_7;
  }
  sub_10030B9E4(v10);
  BOOL v11 = sub_10030F4B4(*(void *)(*(void *)(a1 + 32) + 56));
  uint64_t v9 = *(void *)(a1 + 32);
  if (v11) {
    goto LABEL_7;
  }
  BOOL v12 = sub_10030F4C8(*(void *)(v9 + 56));
  uint64_t v9 = *(void *)(a1 + 32);
  if (v12) {
    goto LABEL_7;
  }
  if (*(unsigned char *)(v9 + 88))
  {
    if (!*(unsigned char *)(v9 + 89) || *(unsigned char *)(v9 + 90))
    {
LABEL_7:
      uint64_t v17 = *(void *)(a1 + 40);
      v23.receiver = (id)v9;
      v23.super_class = (Class)KmlOwnerPairingSession;
      [super endSessionWithCompletion:v17];
      sub_100320484(*(void *)(a1 + 32));
      return;
    }
    uint64_t v18 = @"Save end session callback to be called after first post OP transaction is done.";
    uint64_t v19 = 141;
  }
  else
  {
    uint64_t v18 = @"Save end session callback to be called after pairing completion";
    uint64_t v19 = 135;
  }
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingSession endSessionWithCompletion:]_block_invoke", v19, v18, v13, v14, v15, v16, (uint64_t)v23.receiver);
  id v20 = objc_retainBlock(*(id *)(a1 + 40));
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void **)(v21 + 80);
  *(void *)(v21 + 80) = v20;
}

void sub_100320484(uint64_t a1)
{
  if (a1)
  {
    sub_1002F8704(*(id **)(a1 + 56), 0);
    id v2 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;

    id v3 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;

    id v4 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;

    uint64_t v5 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
  }
}

void sub_10032063C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession consumeTrackingReceipt:otherJSONData:forKeyWithIdentifier:callback:]_block_invoke", 161, &stru_100421848, a5, a6, a7, a8, v26);
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingSession consumeTrackingReceipt:otherJSONData:forKeyWithIdentifier:callback:]_block_invoke", 167, @"otherJsonData : %@", v9, v10, v11, v12, *(void *)(a1 + 32));
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 56);
  if (!v13) {
    goto LABEL_8;
  }
  uint64_t v14 = sub_1002F3EF4(v13);
  if (([v14 isEqualToString:*(void *)(a1 + 48)] & 1) == 0)
  {

    goto LABEL_8;
  }
  int v15 = *(unsigned __int8 *)(*(void *)(a1 + 40) + 88);

  if (!v15)
  {
LABEL_8:
    uint64_t v22 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    objc_super v23 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    NSErrorUserInfoKey v28 = v23;
    uint64_t v24 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    uint64_t v25 = +[NSError errorWithDomain:v22 code:210 userInfo:v24];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    return;
  }
  id v16 = objc_retainBlock(*(id *)(a1 + 64));
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void **)(v17 + 72);
  *(void *)(v17 + 72) = v16;

  uint64_t v19 = *(void **)(a1 + 32);
  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 56);
  uint64_t v21 = *(void **)(a1 + 56);

  sub_10030BC08(v20, v21, v19);
}

void sub_10032098C(uint64_t a1, const char *a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 88) = 1;
  id v3 = sub_100321460(*(id *)(a1 + 32), a2);
  [v3 handleKeyPairingCompletionResult:*(void *)(a1 + 40) keyInformation:*(void *)(a1 + 48) trackingRequest:*(void *)(a1 + 56)];

  if (*(void *)(*(void *)(a1 + 32) + 80))
  {
    v4.receiver = *(id *)(a1 + 32);
    v4.super_class = (Class)KmlOwnerPairingSession;
    [super endSessionWithCompletion:];
    sub_100320484(*(void *)(a1 + 32));
  }
}

uint64_t sub_100320AF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 64) + 16))();
}

void sub_100320B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v9 = @"Cancel successful";
    uint64_t v10 = 211;
  }
  else
  {
    uint64_t v9 = @"Failed to cancel";
    uint64_t v10 = 213;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingSession handleKmlOwnerPairingCancellationResult:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
}

void sub_100320CAC(uint64_t a1, const char *a2)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 90) = 1;
  id v3 = sub_100321460(*(id *)(a1 + 32), a2);
  [v3 handleFirstTransactionCompletionResult:*(void *)(a1 + 40)];

  if (*(void *)(*(void *)(a1 + 32) + 80))
  {
    v4.receiver = *(id *)(a1 + 32);
    v4.super_class = (Class)KmlOwnerPairingSession;
    [super endSessionWithCompletion:];
    sub_100320484(*(void *)(a1 + 32));
  }
}

uint64_t sub_100320E10(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 89) = *(void *)(a1 + 40) == 0;
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 72) + 16))();
}

void sub_100320F18(uint64_t a1, const char *a2)
{
  sub_100321460(*(id *)(a1 + 32), a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v3 handlePreWarmCompletionResult:*(void *)(a1 + 40)];
}

void sub_100321048(uint64_t a1, const char *a2)
{
  sub_100321460(*(id *)(a1 + 32), a2);
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  [v3 handleProbingCompletionWithBrandCode:*(void *)(a1 + 48) error:*(void *)(a1 + 40)];
}

void sub_100321144(uint64_t a1, const char *a2)
{
  sub_100321460(*(id *)(a1 + 32), a2);
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  [v2 handlePairingDidStart];
}

id *sub_1003212D0(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[3];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100321460(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 48, 1);
  }
  return result;
}

void sub_1003215E0(uint64_t a1, double a2)
{
  if (a1)
  {
    id v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003217BC;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    *(double *)&v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100321660(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003216DC;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

id sub_1003216DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession cancelXpcConnection]_block_invoke", 121, @"Invalidating connection", a5, a6, a7, a8, v11);
  sub_100321738(*(void *)(a1 + 32));
  uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 24);

  return [v9 invalidate];
}

void sub_100321738(uint64_t a1)
{
  if (a1)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100321A38;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
}

void sub_1003217BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession startBackGroundTimerWithTimeout:]_block_invoke", 135, @"Timer already running. Ignore another start", a5, a6, a7, a8, a9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSession startBackGroundTimerWithTimeout:]_block_invoke", 138, @"Starting background connection timer", a5, a6, a7, a8, v10[0]);
    v10[0] = (uint64_t)_NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = (uint64_t)sub_1003218A8;
    v10[3] = (uint64_t)&unk_10040D920;
    v10[4] = *(void *)(a1 + 32);
    v10[5] = *(void *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);
  }
}

void sub_1003218A8(uint64_t a1)
{
  double v2 = *(double *)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100321948;
  v6[3] = &unk_100419BB8;
  v6[4] = *(void *)(a1 + 32);
  uint64_t v3 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v6 block:v2];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100321948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession startBackGroundTimerWithTimeout:]_block_invoke_3", 141, @"Cancelling connection from backgrounded client due to time out.", a5, a6, a7, a8, v10);
  uint64_t v9 = *(void *)(a1 + 32);

  sub_100321660(v9);
}

void sub_100321A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 40)) {
    sub_100321738(v9);
  }
  else {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession cancelBackGroundTimer]_block_invoke", 152, @"Timer is not running.", a5, a6, a7, a8, a9);
  }
}

void sub_100321A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSession cancelBackGroundTimer_internal]_block_invoke", 162, @"Stopping background timer", a5, a6, a7, a8, v11);
  [*(id *)(*(void *)(a1 + 32) + 40) invalidate];
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;
}

uint64_t sub_100321B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSession endSessionWithCompletion:]_block_invoke", 173, &stru_100421848, a5, a6, a7, a8, v15);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v16 = WeakRetained;
    sub_100321738((uint64_t)WeakRetained);
    uint64_t v10 = +[KeyManagementLibrary sharedLibrary];
    [v10 removeSession:v16 withError:0];
    uint64_t v11 = (void *)v16[2];
    v16[2] = 0;

    uint64_t v12 = *(void *)(a1 + 32);
    if (v12) {
      (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0);
    }
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0);
    }
  }

  return _objc_release_x2();
}

CFTypeRef sub_100321CB4(uint64_t a1, const __CFString *a2, SecTaskRef task)
{
  if (!a1) {
    return 0;
  }
  CFErrorRef error = 0;
  CFTypeRef v7 = SecTaskCopyValueForEntitlement(task, a2, &error);
  if (error)
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEntitlementChecker _copyValueOfEntitlement:secTask:]", 30, @"Failed to get entitlements: %@", v3, v4, v5, v6, (uint64_t)error);
    CFRelease(error);
  }
  return v7;
}

uint64_t sub_100321D30(uint64_t a1, void *a2, __SecTask *a3)
{
  uint64_t v5 = a2;
  if (a1)
  {
    CFBooleanRef v6 = (const __CFBoolean *)sub_100321CB4(a1, v5, a3);
    if (v6)
    {
      CFBooleanRef v7 = v6;
      CFTypeID v8 = CFGetTypeID(v6);
      a1 = v8 == CFBooleanGetTypeID() && CFBooleanGetValue(v7) != 0;
      CFRelease(v7);
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

id sub_100321DC4(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)KmlEntitlementChecker;
    a1 = [super init];
    if (a1)
    {
      memset(buffer, 0, 255);
      proc_name((int)[v3 processIdentifier], buffer, 0xFEu);
      uint64_t v4 = +[NSString stringWithUTF8String:buffer];
      uint64_t v5 = (void *)*((void *)a1 + 1);
      *((void *)a1 + 1) = v4;

      if (v3) {
        [v3 auditToken];
      }
      else {
        memset(&token, 0, sizeof(token));
      }
      CFBooleanRef v6 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
      if (v6)
      {
        uint64_t v11 = v6;
        *((unsigned char *)a1 + 16) = sub_100321D30((uint64_t)a1, @"com.apple.seserviced.kmlXpcService", v6);
        *((unsigned char *)a1 + 17) = sub_100321D30((uint64_t)a1, @"com.apple.seserviced.kmlBackGroundClient", v11);
        CFRelease(v11);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEntitlementChecker initWithConnection:]", 89, @"Cannot create SecTaskRef with XPC Connection: %@", v7, v8, v9, v10, (uint64_t)v3);

        a1 = 0;
      }
    }
  }

  return a1;
}

BOOL sub_100321FC8(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 17) != 0;
  }
  return result;
}

id sub_100321FE8(unsigned char *a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  double v2 = a1;
  sub_100315960((uint64_t)KmlTlv, a2);
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v38;
LABEL_4:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v38 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v8 = *(void **)(*((void *)&v37 + 1) + 8 * v7);
      if (sub_10005D5A8((uint64_t)v8) == 32620) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [v3 countByEnumeratingWithState:&v37 objects:v42 count:16];
        if (v5) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
    uint64_t v13 = v8;

    if (!v13) {
      goto LABEL_22;
    }
    objc_super v14 = sub_100315FB4(v13);
    uint64_t v15 = sub_100315960((uint64_t)KmlTlv, v14);

    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    id v3 = v15;
    id v16 = [v3 countByEnumeratingWithState:&v33 objects:v41 count:16];
    if (!v16)
    {
LABEL_21:

LABEL_29:
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCancelMessage initWithData:]", 120, @"Cancel code TLV not found", v21, v22, v23, v24, (uint64_t)v32.receiver);

      goto LABEL_30;
    }
    id v17 = v16;
    uint64_t v18 = *(void *)v34;
LABEL_14:
    uint64_t v19 = 0;
    while (1)
    {
      if (*(void *)v34 != v18) {
        objc_enumerationMutation(v3);
      }
      uint64_t v20 = *(void **)(*((void *)&v33 + 1) + 8 * v19);
      if (sub_10005D5A8((uint64_t)v20) == 109 || sub_10005D5A8((uint64_t)v20) == 90) {
        break;
      }
      if (v17 == (id)++v19)
      {
        id v17 = [v3 countByEnumeratingWithState:&v33 objects:v41 count:16];
        if (v17) {
          goto LABEL_14;
        }
        goto LABEL_21;
      }
    }
    id v25 = v20;

    if (!v25) {
      goto LABEL_29;
    }
    v32.receiver = v2;
    v32.super_class = (Class)KmlCancelMessage;
    uint64_t v26 = [super init];
    if (v26)
    {
      unsigned __int8 v27 = sub_100316118((uint64_t)v25);
      uint64_t v28 = 0;
      v26[8] = v27;
      while (LOBYTE(dword_10037F290[v28 + 1]) != v27)
      {
        v28 += 2;
        if (v28 == 8)
        {
          int v29 = 105;
          goto LABEL_34;
        }
      }
      int v29 = dword_10037F290[v28];
LABEL_34:
      *((_DWORD *)v26 + 3) = v29;
    }
    double v2 = v26;

    id v30 = v2;
  }
  else
  {
LABEL_10:

LABEL_22:
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCancelMessage initWithData:]", 107, @"Cancel TLV not found", v9, v10, v11, v12, (uint64_t)v32.receiver);
LABEL_30:
    id v30 = 0;
  }

  return v30;
}

id sub_1003222E0(id result, int a2)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)KmlCancelMessage;
    uint64_t result = [super init];
    if (result)
    {
      uint64_t v3 = 0;
      *((_DWORD *)result + 3) = a2;
      while (dword_10037F290[v3] != a2)
      {
        v3 += 2;
        if (v3 == 8)
        {
          char v4 = -1;
          goto LABEL_8;
        }
      }
      char v4 = dword_10037F290[v3 + 1];
LABEL_8:
      *((unsigned char *)result + 8) = v4;
    }
  }
  return result;
}

id sub_10032236C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = sub_100315D88((uint64_t)KmlTlv, 109, *(unsigned char *)(a1 + 8));
    double v2 = sub_100316294((uint64_t)v1);
    uint64_t v3 = sub_100315D20((uint64_t)KmlTlv, 32620, v2);

    char v4 = sub_100316294((uint64_t)v3);
  }
  else
  {
    char v4 = 0;
  }

  return v4;
}

uint64_t sub_100322414(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

const char *KmlErrorString(int a1)
{
  uint64_t v2 = 0;
  uint64_t result = "Unknown Error";
  while (dword_100419F50[v2] != a1)
  {
    v2 += 4;
    if (v2 == 328) {
      return result;
    }
  }
  return *(const char **)&dword_100419F50[v2 + 2];
}

id sesErrorToKmlError(void *a1, unsigned int a2)
{
  id v3 = a1;
  char v4 = v3;
  if (!v3) {
    goto LABEL_6;
  }
  objc_super v5 = [v3 domain];
  uint64_t v6 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  if ([v5 isEqual:v6]) {
    goto LABEL_5;
  }
  uint64_t v7 = [v4 domain];
  uint64_t v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
  if ([v7 isEqual:v8])
  {

LABEL_5:
LABEL_6:
    id v9 = v4;
    goto LABEL_7;
  }
  uint64_t v11 = [v4 domain];
  uint64_t v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
  unsigned __int8 v13 = [v11 isEqual:v12];

  if (v13) {
    goto LABEL_6;
  }
  objc_super v14 = [v4 underlyingErrors];
  if ([v14 count])
  {
    uint64_t v15 = [v4 underlyingErrors];
    id v16 = [v15 firstObject];
    id v17 = [v16 code];
  }
  else
  {
    id v17 = [v4 code];
  }

  v29[2] = 3;
  unsigned int v18 = 209;
  v29[3] = 209;
  v29[4] = 6;
  v30[0] = 215;
  v30[1] = -1;
  v30[2] = 0xFFFFFFFFLL;
  if (v17 != (id)3)
  {
    uint64_t v19 = (unsigned int *)v30;
    while (1)
    {
      unsigned int v18 = *v19;
      if (*v19 == -1) {
        break;
      }
      id v20 = (id)*((void *)v19 - 1);
      v19 += 4;
      if (v20 == v17) {
        goto LABEL_20;
      }
    }
    unsigned int v18 = a2;
  }
LABEL_20:
  uint64_t v21 = 0;
  uint64_t v22 = "Unknown Error";
  while (dword_100419F50[v21] != v18)
  {
    v21 += 4;
    if (v21 == 328) {
      goto LABEL_25;
    }
  }
  uint64_t v22 = *(const char **)&dword_100419F50[v21 + 2];
LABEL_25:
  uint64_t v23 = +[NSString stringWithUTF8String:v22];
  uint64_t v24 = [v4 localizedFailureReason];
  if (v24)
  {
    id v25 = [v4 localizedFailureReason];
  }
  else
  {
    id v25 = &stru_100421848;
  }

  v28[0] = NSLocalizedDescriptionKey;
  v28[1] = NSLocalizedFailureReasonErrorKey;
  v29[0] = v23;
  v29[1] = v25;
  uint64_t v26 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:2];
  unsigned __int8 v27 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
  id v9 = +[NSError errorWithDomain:v27 code:v18 userInfo:v26];

LABEL_7:

  return v9;
}

id kmlUtilDataForHexString(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && [v1 length])
  {
    id v3 = objc_alloc_init((Class)NSMutableData);
    char v4 = [v2 stringByReplacingOccurrencesOfString:@" " withString:&stru_100421848];
    objc_super v5 = [v4 stringByReplacingOccurrencesOfString:@"\n" withString:&stru_100421848];

    if ([v5 length] != (id)1)
    {
      uint64_t v6 = 0;
      do
      {
        char v17 = 0;
        __darwin_ct_rune_t v7 = [v5 characterAtIndex:v6];
        __darwin_ct_rune_t v8 = [v5 characterAtIndex:v6 + 1];
        unsigned __int16 v9 = __toupper(v7);
        unsigned int v10 = v9 - 48;
        if (v10 >= 0xA) {
          unsigned int v10 = -1;
        }
        if (v9 - 65 >= 6) {
          int v11 = v10;
        }
        else {
          int v11 = v9 - 55;
        }
        unsigned __int16 v12 = __toupper(v8);
        unsigned int v13 = v12 - 48;
        if (v13 >= 0xA) {
          unsigned int v13 = -1;
        }
        if (v12 - 65 < 6) {
          unsigned int v13 = v12 - 55;
        }
        BOOL v14 = v13 == -1 || v11 == -1;
        char v15 = v13 | (16 * v11);
        if (v14) {
          char v15 = 0;
        }
        char v17 = v15;
        [v3 appendBytes:&v17 length:1];
        v6 += 2;
      }
      while ((char *)[v5 length] - 1 > v6);
    }
  }
  else
  {
    id v3 = 0;
  }

  return v3;
}

id kmlUtilHexStringFromData(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1 && [v1 length])
  {
    uint64_t v3 = 2 * (void)[v2 length];
    char v4 = (char *)malloc_type_malloc(v3 | 1, 0x8F3A8AADuLL);
    v4[v3] = 0;
    id v5 = v2;
    uint64_t v6 = (unsigned __int8 *)[v5 bytes];
    if ([v5 length])
    {
      unint64_t v7 = 0;
      __darwin_ct_rune_t v8 = v4;
      do
      {
        sprintf(v8, "%02X", v6[v7++]);
        v8 += 2;
      }
      while ((unint64_t)[v5 length] > v7);
    }
    id v9 = [objc_alloc((Class)NSString) initWithUTF8String:v4];
    free(v4);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

id kmlUtilSHA1(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bytes];
  CC_LONG v3 = [v1 length];

  char v4 = CC_SHA1(v2, v3, md);
  if (v4)
  {
    char v4 = +[NSData dataWithBytes:md length:20];
  }

  return v4;
}

id kmlUtilSHA256(void *a1)
{
  id v1 = a1;
  id v2 = [v1 bytes];
  CC_LONG v3 = [v1 length];

  char v4 = CC_SHA256(v2, v3, md);
  if (v4)
  {
    char v4 = +[NSData dataWithBytes:md length:32];
  }

  return v4;
}

void kmlUtilLogLargeData(void *a1, void *a2)
{
  id v25 = a1;
  id v3 = a2;
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 117, @"--- start %@ ---", v4, v5, v6, v7, (uint64_t)v25);
  __darwin_ct_rune_t v8 = kmlUtilHexStringFromData(v3);
  id v9 = (char *)[v8 length];
  if ((unint64_t)v9 < 0x321)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      int v11 = [v8 substringWithRange:v10];
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 122, @"%@", v12, v13, v14, v15, (uint64_t)v11);

      v10 += 800;
      v9 -= 800;
    }
    while ((unint64_t)v9 > 0x320);
  }
  id v16 = [v8 substringWithRange:v10, v9];
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 126, @"%@", v17, v18, v19, v20, (uint64_t)v16);

  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"void kmlUtilLogLargeData(NSString *__strong, NSData *__strong)", 127, @"--- end %@ ---", v21, v22, v23, v24, (uint64_t)v25);
}

id kmlUtilUUIDToData(void *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  [a1 getUUIDBytes:v3];
  id v1 = +[NSData dataWithBytes:v3 length:16];

  return v1;
}

id kmlUtilTimeNow()
{
  v0 = +[NSDate date];
  id v1 = objc_alloc_init((Class)NSDateFormatter);
  id v2 = +[NSTimeZone timeZoneWithName:@"UTC"];
  [v1 setTimeZone:v2];

  [v1 setDateFormat:@"yyyyMMddHHmmss'Z'"];
  id v3 = +[NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"];
  [v1 setLocale:v3];

  uint64_t v4 = [v1 stringFromDate:v0];
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"NSData *kmlUtilTimeNow(void)", 149, @"date now %@", v5, v6, v7, v8, (uint64_t)v4);
  id v9 = v4;
  uint64_t v10 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", [v9 UTF8String], [v9 length]);

  return v10;
}

NSData *kmlUtilInfiniteTime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"NSData *kmlUtilInfiniteTime(void)", 175, @"infinite date %@", a5, a6, a7, a8, @"99991231235959Z");
  id v8 = [@"99991231235959Z" UTF8String];
  id v9 = [@"99991231235959Z" length];

  return +[NSData dataWithBytes:v8 length:v9];
}

uint64_t isInternalBuild()
{
  if ((byte_1004683C1 & 1) == 0)
  {
    if (MGGetBoolAnswer()) {
      byte_1004683C0 = 1;
    }
    byte_1004683C1 = 1;
  }
  return byte_1004683C0;
}

id randomStringWithLength(uint64_t a1)
{
  uint32_t v2 = [@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" length];
  for (i = +[NSMutableString stringWithCapacity:a1];
    [i appendFormat:@"%C", [@"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789" characterAtIndex:arc4random_uniform(v2)]];

  return i;
}

id kmlUtilSanitizeFriendlyName(void *a1)
{
  id v1 = a1;
  uint32_t v2 = [v1 dataUsingEncoding:4];
  if ((unint64_t)[v2 length] > 0x1E)
  {
    uint64_t v15 = 0;
    id v16 = &v15;
    uint64_t v17 = 0x3032000000;
    uint64_t v18 = sub_100323284;
    uint64_t v19 = sub_100323294;
    id v20 = +[NSMutableString string];
    v14[0] = 0;
    v14[1] = v14;
    v14[2] = 0x2020000000;
    v14[3] = 0;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10032329C;
    v13[3] = &unk_10041A488;
    v13[4] = v14;
    v13[5] = &v15;
    [v1 enumerateSubstringsInRange:0 length:[v1 length] options:2 usingBlock:v13];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSString *kmlUtilSanitizeFriendlyName(NSString *__strong)", 234, @"Original key name: %@ ,  truncated key name: %@", v8, v9, v10, v11, (uint64_t)v1);
    id v7 = (id)v16[5];
    _Block_object_dispose(v14, 8);
    _Block_object_dispose(&v15, 8);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSString *kmlUtilSanitizeFriendlyName(NSString *__strong)", 216, @"UTF8 encoded friendly name is less than %ld chars : %@", v3, v4, v5, v6, 30);
    id v7 = v1;
  }

  return v7;
}

void sub_100323260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100323284(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100323294(uint64_t a1)
{
}

void sub_10032329C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7)
{
  id v9 = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v9 lengthOfBytesUsingEncoding:4];
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) > 0x1EuLL) {
    *a7 = 1;
  }
  else {
    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) appendString:v9];
  }
}

id kmlUtilGetDckIdFromSlotId(void *a1)
{
  id v1 = a1;
  uint64_t v6 = v1;
  if (!v1 || ![v1 length])
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSData *kmlUtilGetDckIdFromSlotId(NSData *__strong)", 241, @"Invalid slotId %@:", v2, v3, v4, v5, (uint64_t)v6);
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  if ([v6 length] == (id)8)
  {
    id v7 = v6;
LABEL_8:
    uint64_t v8 = v7;
    goto LABEL_10;
  }
  if ((unint64_t)[v6 length] >= 9)
  {
    [v6 subdataWithRange:0, 8];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_8;
  }
  uint64_t v8 = +[NSMutableData dataWithLength:8];
  [v8 replaceBytesInRange:8 - [v6 length] withBytes:[v6 length] bytes:[objc_retainAutorelease(v6) bytes]];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSData *kmlUtilGetDckIdFromSlotId(NSData *__strong)", 255, @"DCK Identifier : %@", v9, v10, v11, v12, (uint64_t)v8);
LABEL_10:

  return v8;
}

id kmlUtilGetOOBKey(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v9 = v4;
  if (v3 && v4)
  {
    uint64_t v10 = +[NSMutableData dataWithLength:64];
    ccsha256_di();
    [v3 length];
    [v3 bytes];
    [v9 length];
    [v9 bytes];
    [v10 length];
    id v11 = v10;
    id v20 = [v11 mutableBytes];
    uint64_t v12 = cchkdf();
    if (v12)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSData *kmlUtilGetOOBKey(NSData *__strong, NSData *__strong)", 273, @"cchkdf failed with %d", v13, v14, v15, v16, v12);
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = [v11 subdataWithRange:0, 16, v20];
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSData *kmlUtilGetOOBKey(NSData *__strong, NSData *__strong)", 262, @"Missing masterKey or identifier", v5, v6, v7, v8, v19);
    uint64_t v17 = 0;
  }

  return v17;
}

id kmlUtilRandomDataWithSize(size_t a1)
{
  id v2 = +[NSMutableData dataWithLength:a1];
  arc4random_buf([v2 mutableBytes], a1);

  return v2;
}

id kmlUtilGeneratePasscode(void *a1, void *a2, unint64_t a3)
{
  id v5 = a1;
  id v6 = a2;
  if ([v5 length] && (id v7 = objc_msgSend(v6, "length"), a3) && v7)
  {
    unsigned __int8 v33 = 0;
    uint64_t v12 = +[NSMutableString stringWithCapacity:a3];
    unint64_t v13 = 0;
    id v31 = v6;
    id v32 = v5;
    while (1)
    {
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_DEBUG, (uint64_t)"NSString *kmlUtilGeneratePasscode(NSData *__strong, NSData *__strong, NSUInteger)", 305, @"counter : %u ; digits scored : %u",
        v8,
        v9,
        v10,
        v11,
        v33);
      uint64_t v14 = +[NSMutableData dataWithBytes:&v33 length:1];
      [v14 appendData:v5];
      [v14 appendData:v6];
      kmlUtilSHA256(v14);
      id v15 = objc_claimAutoreleasedReturnValue();
      uint64_t v16 = (char *)[v15 bytes];
      if ([v15 length])
      {
        uint64_t v21 = 0;
        while (1)
        {
          if (v16[v21] <= 0xF9u)
          {
            uint64_t v30 = a0123456789[*(unsigned __int16 *)&v16[v21] % 0xAu];
            [v12 appendFormat:@"%C"];
            if (++v13 == a3) {
              break;
            }
          }
          if (++v21 >= (unint64_t)[v15 length]) {
            goto LABEL_12;
          }
        }
        unint64_t v13 = a3;
      }
LABEL_12:
      if (v33 == 255) {
        break;
      }
      ++v33;

      id v6 = v31;
      id v5 = v32;
      if (v13 >= a3)
      {
        uint64_t v22 = v12;
        goto LABEL_17;
      }
    }
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSString *kmlUtilGeneratePasscode(NSData *__strong, NSData *__strong, NSUInteger)", 326, @"Ran out of randomizer counter. Abort!", v17, v18, v19, v20, v30);

    uint64_t v22 = 0;
    id v6 = v31;
    id v5 = v32;
LABEL_17:
    id v28 = v22;
  }
  else
  {
    id v23 = [v5 length];
    [v6 length];
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"NSString *kmlUtilGeneratePasscode(NSData *__strong, NSData *__strong, NSUInteger)", 290, @"length of : longTermSecret:%u; seed:%u; desiredPasscode:%u",
      v24,
      v25,
      v26,
      v27,
      (uint64_t)v23);
    id v28 = 0;
  }

  return v28;
}

id kmlUtilGenerateAccountInfoHash(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 length] && objc_msgSend(v4, "length"))
  {
    id v5 = +[NSMutableData data];
    [v5 appendData:v3];
    [v5 appendData:v4];
    id v6 = kmlUtilSHA256(v5);
  }
  else
  {
    id v7 = [v3 length];
    [v4 length];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSData *kmlUtilGenerateAccountInfoHash(NSData *__strong, NSData *__strong)", 340, @"anonymizedDsid.length = %lu, readerIdentifier.length = %lu", v8, v9, v10, v11, (uint64_t)v7);
    id v6 = 0;
  }

  return v6;
}

uint64_t kmlUtilIsFleetKey(unsigned int a1)
{
  return (a1 >> 3) & 1;
}

uint64_t kmlUtilIsServerIssuedKey(unsigned int a1)
{
  return (a1 >> 2) & 1;
}

uint64_t kmlUtilKeyClassOriginBitmap(unsigned int a1)
{
  return (a1 >> 2) & 3;
}

id kmlUtilGetMockInstanceCAData()
{
  v0 = +[NSMutableData data];
  id v1 = +[NSMutableArray array];
  id v2 = [@"ECIES_v1" dataUsingEncoding:4];
  id v3 = sub_100315D20((uint64_t)KmlTlv, 218, v2);
  [v1 addObject:v3];

  id v4 = kmlUtilRandomDataWithSize(0x41uLL);
  id v5 = sub_100315D20((uint64_t)KmlTlv, 69, v4);
  [v1 addObject:v5];

  id v6 = kmlUtilRandomDataWithSize(0x20uLL);
  id v7 = sub_100315D20((uint64_t)KmlTlv, 70, v6);
  [v1 addObject:v7];

  uint64_t v8 = kmlUtilRandomDataWithSize(0x80uLL);
  uint64_t v9 = sub_100315D20((uint64_t)KmlTlv, 74, v8);
  [v1 addObject:v9];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v10 = v1;
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (i = 0; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        id v15 = sub_100316294(*(void *)(*((void *)&v19 + 1) + 8 * i));
        [v0 appendData:v15];
      }
      id v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }

  uint64_t v16 = sub_100315D20((uint64_t)KmlTlv, 32546, v0);
  uint64_t v17 = sub_100316294((uint64_t)v16);

  return v17;
}

id kmlUtilDecodeJson(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  if (![v7 length])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 407, @"json data is nil", v10, v11, v12, v13, v61);
    id v29 = 0;
    goto LABEL_39;
  }
  long long v66 = +[NSMutableDictionary dictionary];
  id v71 = 0;
  uint64_t v14 = +[NSJSONSerialization JSONObjectWithData:v7 options:0 error:&v71];
  id v15 = v71;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 417, @"json serialization error : %@", v16, v17, v18, v19, (uint64_t)v15);
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 418, @"jsonObject : %@", v20, v21, v22, v23, (uint64_t)v14);
  if (v15 || !v14)
  {
    uint64_t v30 = 0;
    id v29 = 0;
    if (a4) {
      *a4 = v15;
    }
    goto LABEL_38;
  }
  if ([v9 length])
  {
    id v24 = [v14 objectForKey:v9];
    if (!v24)
    {
      id v64 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    id v24 = v14;
  }
  id v64 = v24;
  if ([v24 count])
  {
    id v62 = v14;
    id v63 = v7;
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    long long v68 = 0u;
    id v31 = [v8 allKeys];
    id v32 = [v31 countByEnumeratingWithState:&v67 objects:v72 count:16];
    unsigned __int8 v33 = v64;
    if (v32)
    {
      id v34 = v32;
      uint64_t v35 = *(void *)v68;
      long long v65 = v31;
      do
      {
        for (i = 0; i != v34; i = (char *)i + 1)
        {
          if (*(void *)v68 != v35) {
            objc_enumerationMutation(v31);
          }
          uint64_t v37 = *(void *)(*((void *)&v67 + 1) + 8 * i);
          long long v38 = [v33 objectForKey:v37];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v43 = [v8 objectForKeyedSubscript:v37];
            if (v43 == objc_opt_class())
            {
              [v66 setObject:v38 forKeyedSubscript:v37];
            }
            else if (v43 == objc_opt_class())
            {
              id v48 = v8;
              id v49 = objc_alloc_init((Class)NSNumberFormatter);
              v54 = [v49 numberFromString:v38];
              if (v54) {
                [v66 setObject:v54 forKeyedSubscript:v37];
              }
              else {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 457, @"Skip %@, since value is nil", v50, v51, v52, v53, v37);
              }

              id v8 = v48;
              unsigned __int8 v33 = v64;
              id v31 = v65;
            }
            else if (v43 == objc_opt_class())
            {
              uint64_t v55 = kmlUtilDataForHexString(v38);
              if ([v55 length]) {
                [v66 setObject:v55 forKeyedSubscript:v37];
              }
              else {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 467, @"Skip %@, since value is nil", v56, v57, v58, v59, v37);
              }

              id v31 = v65;
            }
            else
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 471, @"Skip %@, since it is expected to have value of unsupported class", v44, v45, v46, v47, v37);
            }
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 441, @"Skip %@, since it has non string value in json", v39, v40, v41, v42, v37);
          }
        }
        id v34 = [v31 countByEnumeratingWithState:&v67 objects:v72 count:16];
      }
      while (v34);
    }

    id v29 = v66;
    id v7 = v63;
    uint64_t v30 = v33;
    uint64_t v14 = v62;
    id v15 = 0;
    goto LABEL_38;
  }
LABEL_37:
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"NSDictionary *kmlUtilDecodeJson(NSData *__strong, NSDictionary *__strong, NSString *__strong, NSError *__autoreleasing *)", 434, @"Missing target dictionary with keyName : %@", v25, v26, v27, v28, (uint64_t)v9);
  id v29 = 0;
  uint64_t v30 = v64;
LABEL_38:

LABEL_39:

  return v29;
}

uint64_t kmlUtilAddUniqueTagToSet(void *a1, unsigned int a2)
{
  id v3 = a1;
  uint64_t v4 = a2;
  id v5 = +[NSNumber numberWithUnsignedInteger:a2];
  unsigned int v6 = [v3 containsObject:v5];

  if (v6)
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"_Bool kmlUtilAddUniqueTagToSet(NSMutableSet *__strong, uint16_t)", 480, @"Received duplicated tag: 0x%02X", v7, v8, v9, v10, v4);
  }
  else
  {
    uint64_t v11 = +[NSNumber numberWithUnsignedInteger:v4];
    [v3 addObject:v11];
  }
  return v6 ^ 1;
}

void sub_1003242A0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession sendSharingInviteForKeyIdentifier:toIdsIdentifier:auth:config:completionHandler:]_block_invoke", 64, @"Key Sharing requested", a5, a6, a7, a8, v21);
  uint64_t v9 = sub_10034C5B4((uint64_t)KmlOwnerSharingManager, a1[5], a1[6], 0);
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)v10[8];
  v10[8] = v9;

  sub_100354A5C(*((id **)a1[4] + 8), a1[4]);
  BOOL v12 = sub_10034E63C(*((void *)a1[4] + 8), a1[7], 0, a1[8]);
  uint64_t v13 = (void (**)(void *, void, void *))a1[9];
  if (v12)
  {
    id v14 = objc_retainBlock(a1[9]);
    id v15 = a1[4];
    uint64_t v16 = (void *)v15[16];
    v15[16] = v14;
  }
  else
  {
    uint64_t v17 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    uint64_t v18 = +[NSString stringWithUTF8String:KmlErrorString(108)];
    uint64_t v23 = v18;
    uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v20 = +[NSError errorWithDomain:v17 code:108 userInfo:v19];
    v13[2](v13, 0, v20);
  }
}

void sub_100324590(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession sendSilentSharingInviteForKeyIdentifier:config:groupIdentifier:completionHandler:]_block_invoke", 81, @"Silent Key Sharing requested", a5, a6, a7, a8, v21);
  uint64_t v9 = sub_10034CDCC((uint64_t)KmlOwnerSharingManager, a1[5]);
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)v10[8];
  v10[8] = v9;

  sub_100354A5C(*((id **)a1[4] + 8), a1[4]);
  BOOL v12 = sub_10034EA50(*((void *)a1[4] + 8), a1[6]);
  uint64_t v13 = (void (**)(void *, void, void *))a1[7];
  if (v12)
  {
    id v14 = objc_retainBlock(a1[7]);
    id v15 = a1[4];
    uint64_t v16 = (void *)v15[18];
    v15[18] = v14;
  }
  else
  {
    uint64_t v17 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    uint64_t v18 = +[NSString stringWithUTF8String:KmlErrorString(105)];
    uint64_t v23 = v18;
    uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v20 = +[NSError errorWithDomain:v17 code:105 userInfo:v19];
    v13[2](v13, 0, v20);
  }
}

uint64_t sub_100324824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlKeySharingSession authorizeSharingInvitationIdentifier:auth:completionHandler:]_block_invoke", 98, @"NOT IMPLEMENTED", a5, a6, a7, a8, v11);
  uint64_t v9 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v9();
}

void sub_100324958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession cancelSharingInvitation:completionHandler:]_block_invoke", 109, @"Cancel requested for invitation ID:%@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032B90C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  if (*(void *)(*(void *)(a1 + 40) + 80))
  {
    id v16 = objc_retainBlock(*(id *)(a1 + 48));
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void **)(v17 + 136);
    *(void *)(v17 + 136) = v16;

    sub_10033748C(*(id **)(*(void *)(a1 + 40) + 80), *(void **)(a1 + 40));
    uint64_t v19 = *(void *)(*(void *)(a1 + 40) + 80);
    sub_10032DE34(v19);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession cancelSharingInvitation:completionHandler:]_block_invoke", 116, @"We don't have a valid invitation with ID:%@", v12, v13, v14, v15, *(void *)(a1 + 32));
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
    NSErrorUserInfoKey v22 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    uint64_t v26 = v22;
    uint64_t v23 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    id v24 = +[NSError errorWithDomain:v21 code:109 userInfo:v23];
    (*(void (**)(uint64_t, void *))(v20 + 16))(v20, v24);
  }
}

void sub_100324C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitationWithIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 128, @"KmlXpcService: Start key sharing exchange", a5, a6, a7, a8, v18);
  id v9 = objc_retainBlock(*(id *)(a1 + 64));
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 88);
  *(void *)(v10 + 88) = v9;

  uint64_t v12 = sub_10032B90C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 40), 1);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 80);
  *(void *)(v13 + 80) = v12;

  sub_10033748C(*(id **)(*(void *)(a1 + 32) + 80), *(void **)(a1 + 32));
  uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 80);
  id v16 = *(void **)(a1 + 48);
  uint64_t v17 = *(void **)(a1 + 56);

  sub_10032CEEC(v15, v16, v17);
}

void sub_100324E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession requestInviteWithConfig:completionHandler:]_block_invoke", 139, @"Request key sharing invitation for late device", a5, a6, a7, a8, v13);
  id v9 = [*(id *)(a1 + 40) sharingSessionIdentifier];
  uint64_t v10 = sub_10032BD00((uint64_t)KmlFriendSharingManager, v9);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void **)(v11 + 80);
  *(void *)(v11 + 80) = v10;

  sub_10032E2C0(*(dispatch_queue_t **)(*(void *)(a1 + 32) + 80), *(void **)(a1 + 40));
  id v14 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10032505C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession createSharingInvitationsForKeyIdentifier:friendIdentifier:auth:ourBindingAttestation:config:completionHandler:]_block_invoke", 155, @"Cross-platform Key Sharing requested", a5, a6, a7, a8, v21);
  uint64_t v9 = sub_10034C5B4((uint64_t)KmlOwnerSharingManager, a1[5], a1[6], 1);
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)v10[8];
  v10[8] = v9;

  sub_100354A5C(*((id **)a1[4] + 8), a1[4]);
  BOOL v12 = sub_10034E63C(*((void *)a1[4] + 8), a1[7], a1[8], a1[9]);
  uint64_t v13 = (void (**)(void *, void, void *))a1[10];
  if (v12)
  {
    id v14 = objc_retainBlock(a1[10]);
    uint64_t v15 = a1[4];
    id v16 = (void *)v15[16];
    v15[16] = v14;
  }
  else
  {
    uint64_t v17 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    uint64_t v18 = +[NSString stringWithUTF8String:KmlErrorString(108)];
    uint64_t v23 = v18;
    uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v20 = +[NSError errorWithDomain:v17 code:108 userInfo:v19];
    v13[2](v13, 0, v20);
  }
}

void sub_100325324(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession createSilentSharingInvitationWithGroupIdentifier:completionHandler:]_block_invoke", 170, @"Silent Cross-platform Key Sharing requested", a5, a6, a7, a8, v20[0]);
  uint64_t v9 = sub_10034CDCC((uint64_t)KmlOwnerSharingManager, a1[5]);
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)v10[8];
  v10[8] = v9;

  sub_100354A5C(*((id **)a1[4] + 8), a1[4]);
  if (sub_10034ECD4(*((void *)a1[4] + 8)))
  {
    v20[0] = (uint64_t)_NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = (uint64_t)sub_100325524;
    v20[3] = (uint64_t)&unk_10041A528;
    id v21 = a1[6];
    BOOL v12 = objc_retainBlock(v20);
    uint64_t v13 = a1[4];
    id v14 = (void *)v13[16];
    v13[16] = v12;

    uint64_t v15 = v21;
  }
  else
  {
    id v16 = (void (**)(void *, void, void *))a1[6];
    uint64_t v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    uint64_t v17 = +[NSString stringWithUTF8String:KmlErrorString(108)];
    uint64_t v23 = v17;
    uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v19 = +[NSError errorWithDomain:v15 code:108 userInfo:v18];
    v16[2](v16, 0, v19);
  }
}

void sub_100325524(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if ([v7 count])
  {
    unsigned int v6 = [v7 objectAtIndexedSubscript:0];
  }
  else
  {
    unsigned int v6 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1003256E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setMailboxIdentifier:forOwnerKeyIdentifier:forInvitationIdentifier:completionHandler:]_block_invoke", 190, @"InvitationId - %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setMailboxIdentifier:forOwnerKeyIdentifier:forInvitationIdentifier:completionHandler:]_block_invoke", 191, @"MailboxId - %@", v9, v10, v11, v12, *(void *)(a1 + 40));
  uint64_t v13 = sub_10034CB0C((uint64_t)KmlOwnerSharingManager, *(void **)(a1 + 56), *(void **)(a1 + 32));
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void **)(v14 + 64);
  *(void *)(v14 + 64) = v13;

  id v16 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
  uint64_t v17 = +[NSString stringWithUTF8String:KmlErrorString(109)];
  uint64_t v23 = v17;
  uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
  uint64_t v19 = +[NSError errorWithDomain:v16 code:109 userInfo:v18];

  uint64_t v20 = *(dispatch_queue_t **)(*(void *)(a1 + 48) + 64);
  if (v20)
  {
    uint64_t v21 = sub_10034F2DC(v20, *(void **)(a1 + 40), *(void **)(a1 + 32));

    uint64_t v19 = (void *)v21;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100325A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitation:withIdentifier:fromMailboxIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 209, @"InvitationIdentifier- %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitation:withIdentifier:fromMailboxIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 210, @"MailboxId - %@", v9, v10, v11, v12, *(void *)(a1 + 40));
  if (*(void *)(a1 + 48) && (uint64_t v13 = *(void **)(a1 + 40)) != 0)
  {
    uint64_t v14 = sub_10032C294((uint64_t)KmlFriendSharingManager, v13, 1);
  }
  else
  {
    uint64_t v14 = sub_10032B90C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  }
  uint64_t v15 = *(void *)(a1 + 56);
  id v16 = *(void **)(v15 + 80);
  *(void *)(v15 + 80) = v14;

  if (*(void *)(*(void *)(a1 + 56) + 80))
  {
    id v21 = objc_retainBlock(*(id *)(a1 + 80));
    uint64_t v22 = *(void *)(a1 + 56);
    uint64_t v23 = *(void **)(v22 + 96);
    *(void *)(v22 + 96) = v21;

    sub_10033748C(*(id **)(*(void *)(a1 + 56) + 80), *(void **)(a1 + 56));
    id v24 = *(void **)(a1 + 48);
    uint64_t v25 = *(void *)(*(void *)(a1 + 56) + 80);
    uint64_t v26 = *(void **)(a1 + 64);
    uint64_t v27 = *(void **)(a1 + 72);
    sub_10032D998(v25, v24, v26, v27);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlKeySharingSession acceptSharingInvitation:withIdentifier:fromMailboxIdentifier:passcode:productPlanIdentifier:completionHandler:]_block_invoke", 222, @"No manager found to handle this", v17, v18, v19, v20, v33);
    uint64_t v28 = *(void *)(a1 + 80);
    id v29 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    uint64_t v30 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    uint64_t v35 = v30;
    id v31 = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    id v32 = +[NSError errorWithDomain:v29 code:109 userInfo:v31];
    (*(void (**)(uint64_t, void, void, void *))(v28 + 16))(v28, 0, 0, v32);
  }
}

void sub_100325D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession startShareAcceptanceFlowWithInvitation:fromMailboxIdentifier:completionHandler:]_block_invoke", 233, @"MailboxId - %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032C294((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 1);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  id v12 = objc_retainBlock(*(id *)(a1 + 56));
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void **)(v13 + 104);
  *(void *)(v13 + 104) = v12;

  sub_10033748C(*(id **)(*(void *)(a1 + 40) + 80), *(void **)(a1 + 40));
  uint64_t v15 = *(void **)(a1 + 48);
  uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 80);

  sub_10032D568(v16, v15);
}

void sub_100325F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession handleRecipientMessage:forInvitationIdentifier:completionHandler:]_block_invoke", 248, @"invitationIdentifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032B90C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  if (*(void *)(*(void *)(a1 + 40) + 80))
  {
    id v12 = objc_retainBlock(*(id *)(a1 + 56));
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void **)(v13 + 112);
    *(void *)(v13 + 112) = v12;

    sub_10033748C(*(id **)(*(void *)(a1 + 40) + 80), *(void **)(a1 + 40));
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void **)(*(void *)(a1 + 40) + 80);
    [v16 handleCrossPlatformSharingMessage:v15 fromMailboxIdentifier:0];
  }
  else
  {
    id v17 = objc_alloc((Class)DAShareRecipientResult);
    uint64_t v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    uint64_t v19 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    id v24 = v19;
    uint64_t v20 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    id v21 = +[NSError errorWithDomain:v18 code:109 userInfo:v20];
    id v22 = [v17 initFailureResultWithCrdentialIdentifier:0 error:v21];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_10032625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession handleInitiatorMessage:forInvitationIdentifier:completionHandler:]_block_invoke", 270, @"invitationIdentifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10034D160((uint64_t)KmlOwnerSharingManager, *(void **)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 72);
  *(void *)(v10 + 72) = v9;

  if (*(void *)(*(void *)(a1 + 40) + 80))
  {
    id v12 = objc_retainBlock(*(id *)(a1 + 56));
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void **)(v13 + 120);
    *(void *)(v13 + 120) = v12;

    sub_1002F86F4(*(id **)(*(void *)(a1 + 40) + 72), *(void **)(a1 + 40));
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void **)(*(void *)(a1 + 40) + 72);
    [v16 handleCrossPlatformSharingMessage:v15 fromMailboxIdentifier:0];
  }
  else
  {
    id v17 = objc_alloc((Class)DAShareInitiatorResult);
    uint64_t v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    uint64_t v19 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    id v24 = v19;
    uint64_t v20 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    id v21 = +[NSError errorWithDomain:v18 code:109 userInfo:v20];
    id v22 = [v17 initFailureResultWithResponse:0 error:v21];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_100326554(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession requestBindingAttestationDataForKeyWithIdentifier:callback:]_block_invoke", 292, @"Request Binding Attestation Data for key with id: %@", a5, a6, a7, a8, a1[4]);
  uint64_t v9 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, (void *)a1[4]);
  uint64_t v10 = a1[5];
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  id v12 = *(void **)(a1[5] + 80);
  if (v12)
  {
    id v18 = 0;
    uint64_t v13 = sub_10032E608(v12, &v18);
    id v14 = v18;
  }
  else
  {
    uint64_t v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v16 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v20 = v16;
    id v17 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v14 = +[NSError errorWithDomain:v15 code:210 userInfo:v17];

    uint64_t v13 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1003267FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setBindingAttestation:forKeyWithIdentifier:callback:]_block_invoke", 310, @"Set Binding Attestation Data for key with id: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  id v12 = *(void **)(*(void *)(a1 + 40) + 80);
  if (v12)
  {
    uint64_t v13 = sub_10032E684(v12, *(void **)(a1 + 48));
  }
  else
  {
    id v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    uint64_t v15 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    id v18 = v15;
    uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v14 code:210 userInfo:v16];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100326A60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession getPreTrackRequestForInvitationWithIdentifier:completionHandler:]_block_invoke", 327, @"Get pre-track request for invitation with id: %@", a5, a6, a7, a8, a1[4]);
  uint64_t v9 = sub_10032B90C((uint64_t)KmlFriendSharingManager, (void *)a1[4], 0);
  uint64_t v10 = a1[5];
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  id v12 = *(void **)(a1[5] + 80);
  if (v12)
  {
    id v18 = 0;
    uint64_t v13 = sub_10032E878(v12, &v18);
    id v14 = v18;
  }
  else
  {
    uint64_t v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v16 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v20 = v16;
    NSErrorUserInfoKey v17 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v14 = +[NSError errorWithDomain:v15 code:210 userInfo:v17];

    uint64_t v13 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100326CE4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession getPreTrackRequestForKeyWithIdentifier:callback:]_block_invoke", 345, @"Get pre-track request for key with id: %@", a5, a6, a7, a8, a1[4]);
  uint64_t v9 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, (void *)a1[4]);
  uint64_t v10 = a1[5];
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  id v12 = *(void **)(a1[5] + 80);
  if (v12)
  {
    id v18 = 0;
    uint64_t v13 = sub_10032E878(v12, &v18);
    id v14 = v18;
  }
  else
  {
    uint64_t v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v16 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v20 = v16;
    NSErrorUserInfoKey v17 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v14 = +[NSError errorWithDomain:v15 code:210 userInfo:v17];

    uint64_t v13 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100326F8C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession ppidRequestForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 364, @"Get ppid fetch request for Invitation with id: %@", a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession ppidRequestForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 365, @"mailboxIdentifier : %@", v9, v10, v11, v12, a1[5]);
  uint64_t v13 = sub_10032C500((uint64_t)KmlFriendSharingManager, (void *)a1[4], (void *)a1[5]);
  uint64_t v14 = a1[6];
  uint64_t v15 = *(void **)(v14 + 80);
  *(void *)(v14 + 80) = v13;

  uint64_t v16 = *(void **)(a1[6] + 80);
  if (v16)
  {
    id v22 = 0;
    NSErrorUserInfoKey v17 = sub_10032E8F4(v16, &v22);
    id v18 = v22;
  }
  else
  {
    NSErrorUserInfoKey v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    uint64_t v20 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    id v24 = v20;
    id v21 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    id v18 = +[NSError errorWithDomain:v19 code:109 userInfo:v21];

    NSErrorUserInfoKey v17 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_100327258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession setProductPlanIdentifier:forInvitationIdentifier:completion:]_block_invoke", 387, @"invitationIdentifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032B90C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  uint64_t v12 = *(dispatch_queue_t **)(*(void *)(a1 + 40) + 80);
  if (v12)
  {
    uint64_t v13 = sub_10032E970(v12, *(void **)(a1 + 48));
  }
  else
  {
    uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    uint64_t v15 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    id v18 = v15;
    uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v14 code:109 userInfo:v16];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1003274E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession readerInformationForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 408, @"Get readerInformation for Invitation with id: %@", a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession readerInformationForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 409, @"mailboxIdentifier : %@", v9, v10, v11, v12, a1[5]);
  uint64_t v13 = sub_10032C500((uint64_t)KmlFriendSharingManager, (void *)a1[4], (void *)a1[5]);
  uint64_t v14 = a1[6];
  uint64_t v15 = *(void **)(v14 + 80);
  *(void *)(v14 + 80) = v13;

  uint64_t v16 = *(void *)(a1[6] + 80);
  if (v16)
  {
    NSErrorUserInfoKey v17 = sub_10033749C(v16);
    id v18 = 0;
  }
  else
  {
    NSErrorUserInfoKey v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    uint64_t v20 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    NSErrorUserInfoKey v23 = v20;
    id v21 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    id v18 = +[NSError errorWithDomain:v19 code:109 userInfo:v21];

    NSErrorUserInfoKey v17 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_1003277A4(id *a1)
{
  id v2 = [a1[4] length];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession retryPasscode:forInvitationIdentifier:completionHandler:]_block_invoke", 431, @"Retry passcode (length = %d) for Invitation Identifier: %@", v3, v4, v5, v6, (uint64_t)v2);
  uint64_t v7 = sub_10032B90C((uint64_t)KmlFriendSharingManager, a1[5], 0);
  uint64_t v8 = a1[6];
  uint64_t v9 = (void *)v8[10];
  v8[10] = v7;

  uint64_t v10 = (dispatch_queue_t *)*((void *)a1[6] + 10);
  if (!v10)
  {
    uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v15 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v20 = v15;
    uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v14 code:210 userInfo:v16];

    if (v11) {
      goto LABEL_3;
    }
LABEL_5:
    sub_10033748C(*((id **)a1[6] + 10), a1[6]);
    id v17 = objc_retainBlock(a1[7]);
    id v18 = a1[6];
    uint64_t v13 = (void *)v18[12];
    v18[12] = v17;
    goto LABEL_6;
  }
  uint64_t v11 = sub_10032EAE8(v10, a1[4]);
  if (!v11) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v12 = (void (**)(id, void, void *, void *))a1[7];
  uint64_t v13 = sub_1003374A8(*((void *)a1[6] + 10));
  v12[2](v12, 0, v13, v11);
LABEL_6:
}

void sub_100327A8C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) length];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeySharingSession retryPasscode:forKeyIdentifier:completionHandler:]_block_invoke", 455, @"Retry passcode (length = %d) for Key ID: %@", v3, v4, v5, v6, (uint64_t)v2);
  uint64_t v7 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 40));
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void **)(v8 + 80);
  *(void *)(v8 + 80) = v7;

  uint64_t v10 = *(dispatch_queue_t **)(*(void *)(a1 + 48) + 80);
  if (v10)
  {
    uint64_t v11 = sub_10032EAE8(v10, *(void **)(a1 + 32));
  }
  else
  {
    uint64_t v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    uint64_t v13 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v16 = v13;
    uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v12 code:210 userInfo:v14];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100327D98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 128);
  if (v3)
  {
    uint64_t v4 = *(void (**)(void))(v3 + 16);
LABEL_5:
    v4();
    return;
  }
  if (*(void *)(a1 + 48) || (v5 = [*(id *)(a1 + 40) count], uint64_t v2 = *(void *)(a1 + 32), !v5))
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(v2 + 144) + 16);
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(v2 + 144);
  id v7 = [*(id *)(a1 + 40) objectAtIndexedSubscript:0];
  (*(void (**)(uint64_t, id, void))(v6 + 16))(v6, v7, *(void *)(a1 + 48));
}

void *sub_100327F80(void *result)
{
  uint64_t v1 = *(void *)(result[4] + 128);
  if (v1) {
    return (void *)(*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)(result[4] + 128), result[5], result[6]);
  }
  return result;
}

void *sub_1003280A4(void *result)
{
  uint64_t v1 = *(void *)(result[4] + 88);
  if (v1) {
    return (void *)(*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)(result[4] + 88), result[5], result[6]);
  }
  return result;
}

uint64_t sub_1003281A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 136) + 16))();
}

void *sub_1003282E0(void *result)
{
  uint64_t v1 = *(void *)(result[4] + 96);
  if (v1) {
    return (void *)(*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(void *)(result[4] + 96), result[5], result[6], result[7]);
  }
  return result;
}

uint64_t sub_1003283E4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 104);
  if (v1) {
    return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)(*(void *)(result + 32) + 104), *(void *)(result + 40));
  }
  return result;
}

uint64_t sub_1003284E4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 112);
  if (v1) {
    return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)(*(void *)(result + 32) + 112), *(void *)(result + 40));
  }
  return result;
}

uint64_t sub_1003285E4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 32) + 120);
  if (v1) {
    return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)(*(void *)(result + 32) + 120), *(void *)(result + 40));
  }
  return result;
}

id sub_10032872C()
{
  self;
  if (qword_1004683D0 != -1) {
    dispatch_once(&qword_1004683D0, &stru_10041A570);
  }
  v0 = (void *)qword_1004683C8;

  return v0;
}

void sub_100328784(id a1)
{
  uint64_t v1 = objc_alloc_init(KmlSharingManager);
  uint64_t v2 = (void *)qword_1004683C8;
  qword_1004683C8 = (uint64_t)v1;
}

id sub_100328860(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    sub_100328908((uint64_t)result);
    sub_100328A68(v1);
    unsigned int v2 = +[SESAlarm registerAlarm:@"com.apple.sesd.kml.sharingAuthExpiry" handler:v1];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateSharingObjects]", 73, @"Alarm registered - %u", v3, v4, v5, v6, v2);
    double v7 = sub_100328BD4(v1);
    return +[SESAlarm setAlarm:@"com.apple.sesd.kml.sharingAuthExpiry" secondsFromNow:v7];
  }
  return result;
}

void sub_100328908(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100329434(a1);
    double v7 = (void *)v2;
    if (v2)
    {
      uint64_t v16 = v2;
      uint64_t v8 = @"Failed to get list of endpoints - %@";
      os_log_type_t v9 = OS_LOG_TYPE_ERROR;
      uint64_t v10 = 142;
    }
    else
    {
      if ([*(id *)(a1 + 8) count])
      {
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        id v11 = *(id *)(a1 + 8);
        id v12 = [v11 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v12)
        {
          id v13 = v12;
          uint64_t v14 = *(void *)v18;
          do
          {
            for (i = 0; i != v13; i = (char *)i + 1)
            {
              if (*(void *)v18 != v14) {
                objc_enumerationMutation(v11);
              }
              sub_1003296D8(a1, *(void **)(*((void *)&v17 + 1) + 8 * i));
            }
            id v13 = [v11 countByEnumeratingWithState:&v17 objects:v21 count:16];
          }
          while (v13);
        }

        goto LABEL_14;
      }
      uint64_t v8 = @"There are no valid owner endpoints that are in middle of sharing. No-op";
      os_log_type_t v9 = OS_LOG_TYPE_INFO;
      uint64_t v10 = 147;
    }
    KmlLogFunc2(v9, (uint64_t)"-[KmlSharingManager regenerateOwnerSharingObjects]", v10, v8, v3, v4, v5, v6, v16);
LABEL_14:
  }
}

void sub_100328A68(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100314660();
    uint64_t v3 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v2;

    uint64_t v4 = sub_100314E50(*(id **)(a1 + 16));
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v16;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v16 != v7) {
            objc_enumerationMutation(v4);
          }
          os_log_type_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          uint64_t v10 = sub_100313DEC((uint64_t)v9);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateFriendSharingObjects]", 212, @"Regenerate friend sharing session with id : %@", v11, v12, v13, v14, (uint64_t)v10);

          sub_10032C758((uint64_t)KmlFriendSharingManager, v9);
        }
        id v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v6);
    }
  }
}

double sub_100328BD4(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  id v1 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  [v1 doubleForKey:@"AuthExpiryAlarmInitTime"];
  if (v2 < 2.0) {
    double v2 = 2.0;
  }
  double v3 = fmin(v2, 1200.0);

  return v3;
}

void sub_100328C4C(uint64_t a1, double a2)
{
  if (a1)
  {
    double v2 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100328CC4;
    block[3] = &unk_10040D278;
    *(double *)&void block[4] = a2;
    dispatch_async(v2, block);
  }
}

void sub_100328CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (+[SESAlarm isAlarmSet:@"com.apple.sesd.kml.sharingAuthExpiry"])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager startAuthExpiryAlarmFor:]_block_invoke", 81, @"An alarm is already set. So ignore this request", v10, v11, v12, v13, a9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager startAuthExpiryAlarmFor:]_block_invoke", 84, @"Setting alarm for auth expiry", v10, v11, v12, v13, v15);
    double v14 = *(double *)(a1 + 32) + 1.0;
    +[SESAlarm setAlarm:@"com.apple.sesd.kml.sharingAuthExpiry" secondsFromNow:v14];
  }
}

id sub_100328D6C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v13 = 0;
    double v14 = &v13;
    uint64_t v15 = 0x3032000000;
    long long v16 = sub_100328EB8;
    long long v17 = sub_100328EC8;
    id v18 = 0;
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    id v6 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100328ED0;
    block[3] = &unk_10041A598;
    uint64_t v11 = &v13;
    id v10 = v5;
    char v12 = a3;
    dispatch_sync(v6, block);
    id v7 = (id)v14[5];

    _Block_object_dispose(&v13, 8);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_100328EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100328EB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100328EC8(uint64_t a1)
{
}

void sub_100328ED0(uint64_t a1)
{
  uint64_t v2 = sub_100340574((uint64_t)KmlEndpointManager, *(void **)(a1 + 32), *(unsigned char *)(a1 + 48));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_100328F28(uint64_t a1, char a2, char a3, void *a4)
{
  id v7 = a4;
  if (a1)
  {
    uint64_t v16 = 0;
    long long v17 = &v16;
    uint64_t v18 = 0x3032000000;
    long long v19 = sub_100328EB8;
    long long v20 = sub_100328EC8;
    id v21 = 0;
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    uint64_t v8 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100329084;
    block[3] = &unk_10041A5C0;
    uint64_t v13 = &v16;
    char v14 = a2;
    char v15 = a3;
    id v12 = v7;
    dispatch_sync(v8, block);
    id v9 = (id)v17[5];

    _Block_object_dispose(&v16, 8);
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_10032906C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100329084(uint64_t a1)
{
  uint64_t v2 = sub_1003409A4((uint64_t)KmlEndpointManager, *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49), *(void **)(a1 + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100329158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef v8 = @"yes";
  if (!*(unsigned char *)(a1 + 40)) {
    CFStringRef v8 = @"no";
  }
  if (*(unsigned __int8 *)(*(void *)(a1 + 32) + 33) == *(unsigned __int8 *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager setAppletLockState:]_block_invoke", 121, @"Sharing block state is still : %@", a5, a6, a7, a8, (uint64_t)v8);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager setAppletLockState:]_block_invoke", 115, @"Sharing blocked by applet lock - %@", a5, a6, a7, a8, (uint64_t)v8);
    *(unsigned char *)(*(void *)(a1 + 32) + 33) = *(unsigned char *)(a1 + 40);
    id v10 = *(unsigned char **)(a1 + 32);
    if (!v10[33])
    {
      sub_100328860(v10);
    }
  }
}

void sub_10032929C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  +[SESAlarm clearAlarm:@"com.apple.sesd.kml.sharingAuthExpiry"];
  uint64_t v17 = *(void *)(a1 + 32);

  sub_1003292E4(v17, v10, v11, v12, v13, v14, v15, v16, a9);
}

void sub_1003292E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v10 = sub_100329434(a1);
    if (v10)
    {
      id v25 = (id)v10;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingManager handleAuthExpiryAlarm]", 319, @"Failed to get owner endpoints due to : %@", v11, v12, v13, v14, v10);
LABEL_16:

      return;
    }
  }
  *(unsigned char *)(a1 + 32) = 1;
  if ([*(id *)(a1 + 8) count])
  {
    double v26 = 1.79769313e308;
    sub_100329F7C((id *)a1, &v26);
    id v25 = (id)objc_claimAutoreleasedReturnValue();
    if (v25 || (v26 < 1.79769313e308 ? (BOOL v23 = v26 <= 2.0) : (BOOL v23 = 1), v23)) {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager handleAuthExpiryAlarm]", 336, @"We have no invites with expiring auths.", v19, v20, v21, v22, v24);
    }
    else {
      +[SESAlarm setAlarm:@"com.apple.sesd.kml.sharingAuthExpiry" secondsFromNow:v26 + 1.0];
    }
    goto LABEL_16;
  }

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager handleAuthExpiryAlarm]", 326, @"We don't have any owner endpoints. No-Op", v15, v16, v17, v18, a9);
}

id sub_100329434(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 8) removeAllObjects];
    uint64_t v32 = 0;
    uint64_t v2 = SESEndPointList();
    id v3 = 0;
    if (v3)
    {
      CFStringRef v8 = v3;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingManager getFreshListOfValidShareInitiatorEndpoints]", 165, @"Error in getting endpoint list: %@", v4, v5, v6, v7, (uint64_t)v3);
      id v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      uint64_t v10 = [v8 userInfo];
      uint64_t v11 = +[NSError errorWithDomain:v9 code:210 userInfo:v10];
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v9 = v2;
      id v12 = [v9 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v12)
      {
        id v13 = v12;
        uint64_t v27 = v2;
        uint64_t v14 = *(void *)v29;
        do
        {
          for (i = 0; i != v13; i = (char *)i + 1)
          {
            if (*(void *)v29 != v14) {
              objc_enumerationMutation(v9);
            }
            uint64_t v16 = *(void **)(*((void *)&v28 + 1) + 8 * i);
            uint64_t v17 = (void *)sub_1002FFCE4((uint64_t)[KmlVersions alloc], v16);
            if ([v17 agreedKmlVehicleVersion] == 768
              || ([v16 subjectIdentifier],
                  uint64_t v18 = objc_claimAutoreleasedReturnValue(),
                  sub_100340298((uint64_t)KmlEndpointManager, v18),
                  uint64_t v19 = objc_claimAutoreleasedReturnValue(),
                  v18,
                  LODWORD(v18) = [v19 isEqualToString:@"OWNR"],
                  v19,
                  v18))
            {
              uint64_t v20 = [v16 revocationAttestation];

              if (!v20)
              {
                uint64_t v21 = [v16 publicKeyIdentifier];
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager getFreshListOfValidShareInitiatorEndpoints]", 184, @"Found un-revoked shareInitiator endpoint with id : %@", v22, v23, v24, v25, (uint64_t)v21);

                [*(id *)(a1 + 8) addObject:v16];
              }
            }
          }
          id v13 = [v9 countByEnumeratingWithState:&v28 objects:v33 count:16];
        }
        while (v13);
        uint64_t v11 = 0;
        uint64_t v2 = v27;
      }
      else
      {
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1003296D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    sub_100339C10((uint64_t)KmlSharingRecordsUpdater, v3);
    uint64_t v4 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = sub_10033B100(v4);
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v19;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v11 = sub_100313DE0((uint64_t)v10);
          uint64_t v12 = sub_1002FEDB0((uint64_t)v10);
          uint64_t v17 = (void *)v12;
          if (v11 == 4)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateOwnerSharingManagersForEndpoint:]", 198, @"%@ is record of successful sharing. Leave it alone.", v13, v14, v15, v16, v12);
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager regenerateOwnerSharingManagersForEndpoint:]", 200, @"Regenerate owner sharing session with id : %@", v13, v14, v15, v16, v12);

            sub_10034D3C0((uint64_t)KmlOwnerSharingManager, v3, v10, v4);
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v7);
    }
  }
}

id **sub_100329888(id **a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager listReceivedSharingInvitationsWithError:]", 220, &stru_100421848, a5, a6, a7, a8, v26);
    uint64_t v9 = sub_100314660();
    uint64_t v10 = v8[2];
    v8[2] = (id *)v9;

    uint64_t v11 = sub_100314E50(v8[2]);
    uint64_t v8 = +[NSMutableArray array];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v12 = v11;
    id v13 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v29;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v29 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void *)(*((void *)&v28 + 1) + 8 * i);
          if (sub_100313DD4(v17) <= 5)
          {
            id v18 = objc_alloc((Class)DAKeySharingInvitationData);
            long long v19 = sub_100014F20(v17);
            long long v20 = sub_100313DEC(v17);
            long long v21 = sub_100313DE0(v17);
            unint64_t v22 = sub_100313DD4(v17) - 1;
            if (v22 > 5) {
              uint64_t v23 = 8;
            }
            else {
              uint64_t v23 = qword_10037F2B8[v22];
            }
            id v24 = [v18 initWithSessionUUID:v19 invitationIdentifier:v20 friendKeyIdentifier:v21 sharingTarget:1 state:v23 vehicleEnteredPasscode:0];

            [v8 addObject:v24];
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }
      while (v14);
    }

    if (a2) {
      *a2 = 0;
    }
  }

  return v8;
}

uint64_t sub_100329ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager cancelAllFriendInvitations]", 249, &stru_100421848, a5, a6, a7, a8, v11);
    uint64_t v9 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100329B60;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v9, block);
  }
  return 0;
}

void sub_100329B60(uint64_t a1)
{
  uint64_t v2 = sub_100314660();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  uint64_t v5 = sub_100314E50(*(id **)(*(void *)(a1 + 32) + 16));
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v19;
    do
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v19 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v18 + 1) + 8 * i);
        uint64_t v11 = sub_100313DE0(v10);

        sub_100313DEC(v10);
        if (v11) {
          id v12 = {;
        }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager cancelAllFriendInvitations]_block_invoke", 261, @"Invitation (%@) can not be cancelled at this stage", v13, v14, v15, v16, (uint64_t)v12);
        }
        else {
          uint64_t v17 = {;
        }
          id v12 = sub_10032B90C((uint64_t)KmlFriendSharingManager, v17, 1);

          sub_10032DE34((uint64_t)v12);
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }
    while (v7);
  }
}

uint64_t sub_100329D18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager removeSharingInvitationId:]", 271, @"Sharing invitation id : %@", v4, v5, v6, v7, (uint64_t)v3);
    if (v8)
    {
      uint64_t v9 = *(NSObject **)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100329DE8;
      block[3] = &unk_10040D1A0;
      void block[4] = a1;
      id v12 = v8;
      dispatch_async(v9, block);
    }
  }

  return 0;
}

void sub_100329DE8(uint64_t a1)
{
  uint64_t v2 = sub_100314660();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;

  sub_100314E50(*(id **)(*(void *)(a1 + 32) + 16));
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v16;
    while (2)
    {
      for (i = 0; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v11 = sub_100313DEC(v10);
        unsigned int v12 = [v11 isEqualToString:*(void *)(a1 + 40) v15];

        if (v12)
        {
          uint64_t v13 = sub_100313DEC(v10);
          uint64_t v14 = sub_10032B90C((uint64_t)KmlFriendSharingManager, v13, 1);

          sub_10032E238((uint64_t)v14);
          goto LABEL_11;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v7) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

id *sub_100329F7C(id *a1, double *a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    goto LABEL_41;
  }
  uint64_t v66 = 0;
  uint64_t v50 = SESEndPointListAuthorizations();
  id v3 = 0;
  if (v3)
  {
    uint64_t v8 = v3;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager reconcileInvitationsAndAuths:]", 348, @"Error in getting saved authorizations : %@", v4, v5, v6, v7, (uint64_t)v3);
    id v9 = v8;
    goto LABEL_40;
  }
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  id obj = v2[1];
  id v47 = [obj countByEnumeratingWithState:&v62 objects:v69 count:16];
  if (!v47)
  {
    double v10 = 1.79769313e308;
    goto LABEL_39;
  }
  double v10 = 1.79769313e308;
  uint64_t v46 = *(void *)v63;
  do
  {
    uint64_t v11 = 0;
    do
    {
      if (*(void *)v63 != v46) {
        objc_enumerationMutation(obj);
      }
      uint64_t v49 = v11;
      sub_100339C10((uint64_t)KmlSharingRecordsUpdater, *(void **)(*((void *)&v62 + 1) + 8 * v11));
      id v48 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
      unsigned int v12 = sub_10033B100(v48);
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      id v53 = v12;
      id v13 = [v12 countByEnumeratingWithState:&v58 objects:v68 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v59;
        uint64_t v51 = *(void *)v59;
        do
        {
          long long v16 = 0;
          id v52 = v14;
          do
          {
            if (*(void *)v59 != v15) {
              objc_enumerationMutation(v53);
            }
            uint64_t v17 = *(void *)(*((void *)&v58 + 1) + 8 * (void)v16);
            if (sub_100313DE0(v17) == 3)
            {
              long long v18 = sub_1002FEDB0(v17);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager reconcileInvitationsAndAuths:]", 360, @"Found in-progress sharing session with ID : %@", v19, v20, v21, v22, (uint64_t)v18);

              long long v56 = 0u;
              long long v57 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              id v23 = v50;
              id v24 = [v23 countByEnumeratingWithState:&v54 objects:v67 count:16];
              if (v24)
              {
                id v25 = v24;
                uint64_t v26 = *(void *)v55;
LABEL_17:
                uint64_t v27 = 0;
                while (1)
                {
                  if (*(void *)v55 != v26) {
                    objc_enumerationMutation(v23);
                  }
                  long long v28 = *(void **)(*((void *)&v54 + 1) + 8 * v27);
                  long long v29 = sub_100313DC8(v17);
                  long long v30 = [v28 authorizationID];
                  unsigned __int8 v31 = [v29 isEqualToData:v30];

                  if (v31) {
                    break;
                  }
                  if (v25 == (id)++v27)
                  {
                    id v25 = [v23 countByEnumeratingWithState:&v54 objects:v67 count:16];
                    if (v25) {
                      goto LABEL_17;
                    }
                    goto LABEL_23;
                  }
                }
                id v36 = v28;

                if (!v36) {
                  goto LABEL_30;
                }
                id v14 = v52;
                if ([v36 state] == 1)
                {
                  uint64_t v37 = [v36 remainingTime];
                  [v37 doubleValue];
                  double v39 = v38;

                  if (v10 >= v39) {
                    double v10 = v39;
                  }
                }
                if (v10 >= 2.0) {
                  goto LABEL_32;
                }
              }
              else
              {
LABEL_23:

                id v36 = 0;
LABEL_30:
                id v14 = v52;
              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingManager reconcileInvitationsAndAuths:]", 374, @"Auth for this sharing session is expired.", v32, v33, v34, v35, v43);
              uint64_t v40 = sub_100014F20(v17);
              uint64_t v41 = sub_1002FEDB0(v17);
              sub_10034DEF4((uint64_t)KmlOwnerSharingManager, v40, v41);

LABEL_32:
              uint64_t v15 = v51;
            }
            long long v16 = (char *)v16 + 1;
          }
          while (v16 != v14);
          id v14 = [v53 countByEnumeratingWithState:&v58 objects:v68 count:16];
        }
        while (v14);
      }

      uint64_t v11 = v49 + 1;
    }
    while ((id)(v49 + 1) != v47);
    id v47 = [obj countByEnumeratingWithState:&v62 objects:v69 count:16];
  }
  while (v47);
LABEL_39:

  uint64_t v8 = 0;
  *a2 = v10;
LABEL_40:

  uint64_t v2 = (id *)v8;
LABEL_41:

  return v2;
}

KmlPowerAssertion *sub_10032A410(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = objc_alloc_init(KmlPowerAssertion);
  sub_10032A470((uint64_t)v3, v2);

  return v3;
}

void sub_10032A470(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v14 = v4;
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlPowerAssertion _holdPowerAssertion:]", 50, @"holding assertion: %@", v5, v6, v7, v8, (uint64_t)v4);
    id v9 = +[NSProcessInfo processInfo];
    double v10 = [v9 processName];
    uint64_t v11 = +[NSString stringWithFormat:@"%@[%@]", v10, v14];

    *(_DWORD *)(a1 + 8) = 0;
    if (IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, v11, (IOPMAssertionID *)(a1 + 8))) {
      *(_DWORD *)(a1 + 8) = 0;
    }
    uint64_t v12 = os_transaction_create();
    id v13 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v12;

    objc_storeStrong((id *)(a1 + 32), a2);
    id v4 = v14;
  }
}

void sub_10032A618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlPowerAssertion _releasePowerAssertion]", 69, @"releasing assertion: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
    IOPMAssertionID v9 = *(_DWORD *)(a1 + 8);
    if (v9)
    {
      IOPMAssertionRelease(v9);
      *(_DWORD *)(a1 + 8) = 0;
    }
    double v10 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    uint64_t v11 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
  }
}

void *sub_10032A6F0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)KmlClientAppStateObserver;
    id v4 = [super init];
    a1 = v4;
    if (v4)
    {
      objc_storeWeak((id *)v4 + 5, v3);
      id v5 = objc_alloc_init((Class)NSMutableSet);
      uint64_t v6 = (void *)a1[2];
      a1[2] = v5;

      id v7 = objc_alloc_init((Class)NSMutableArray);
      uint64_t v8 = (void *)a1[3];
      a1[3] = v7;

      uint64_t v9 = +[RBSProcessMonitor monitor];
      double v10 = (void *)a1[1];
      a1[1] = v9;

      uint64_t v11 = +[RBSProcessStateDescriptor descriptor];
      [v11 setValues:1];
      uint64_t v21 = FBSSceneVisibilityEndowmentNamespace;
      uint64_t v12 = +[NSArray arrayWithObjects:&v21 count:1];
      [v11 setEndowmentNamespaces:v12];

      objc_initWeak(&location, a1);
      id v13 = (void *)a1[1];
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10032A8FC;
      v16[3] = &unk_10041A610;
      id v14 = v11;
      id v17 = v14;
      objc_copyWeak(&v18, &location);
      [v13 updateConfiguration:v16];
      objc_destroyWeak(&v18);

      objc_destroyWeak(&location);
    }
  }

  return a1;
}

void sub_10032A8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10032A8FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setStateDescriptor:*(void *)(a1 + 32)];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10032A9BC;
  v4[3] = &unk_10041A5E8;
  objc_copyWeak(&v5, (id *)(a1 + 40));
  [v3 setUpdateHandler:v4];
  objc_destroyWeak(&v5);
}

void sub_10032A9A8(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10032A9BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v6 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v8 = WeakRetained;
  if (WeakRetained) {
    sub_10032AA34((uint64_t)WeakRetained, v9, v6);
  }
}

void sub_10032AA34(uint64_t a1, void *a2, void *a3)
{
  id v36 = a2;
  id v5 = a3;
  if (a1)
  {
    unsigned int v6 = [v36 pid];
    id v35 = v5;
    double v38 = [v5 state];
    unsigned int v7 = [v38 taskState];
    uint64_t v8 = +[NSMutableArray array];
    id v9 = *(id *)(a1 + 16);
    objc_sync_enter(v9);
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v10 = *(id *)(a1 + 16);
    id v11 = [v10 countByEnumeratingWithState:&v43 objects:v48 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v44;
      do
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v44 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          if ([v14 processIdentifier] == v6) {
            [v8 addObject:v14];
          }
        }
        id v11 = [v10 countByEnumeratingWithState:&v43 objects:v48 count:16];
      }
      while (v11);
    }

    objc_sync_exit(v9);
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v15 = v8;
    id v16 = [v15 countByEnumeratingWithState:&v39 objects:v47 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v40;
      id v18 = (id *)(a1 + 40);
      uint64_t v37 = FBSSceneVisibilityEndowmentNamespace;
      do
      {
        for (j = 0; j != v16; j = (char *)j + 1)
        {
          if (*(void *)v40 != v17) {
            objc_enumerationMutation(v15);
          }
          objc_super v20 = *(void **)(*((void *)&v39 + 1) + 8 * (void)j);
          id WeakRetained = objc_loadWeakRetained(v18);

          if (WeakRetained)
          {
            if (v7 == 4)
            {
              long long v28 = [v38 endowmentNamespaces];
              unsigned int v29 = [v28 containsObject:v37];

              id v30 = [v20 processIdentifier];
              if (v29)
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver _applicationStateChanged:stateUpdate:]", 205, @"_applicationStateChanged: clientAppIsForeGrounded - pid=%d", v31, v32, v33, v34, (uint64_t)v30);
                id v27 = objc_loadWeakRetained(v18);
                [v27 clientAppIsForeGrounded:v20];
              }
              else
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver _applicationStateChanged:stateUpdate:]", 208, @"_applicationStateChanged: clientAppIsBackGrounded - pid=%d", v31, v32, v33, v34, (uint64_t)v30);
                id v27 = objc_loadWeakRetained(v18);
                [v27 clientAppIsBackGrounded:v20];
              }
            }
            else
            {
              if (v7 != 3) {
                continue;
              }
              id v22 = [v20 processIdentifier];
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver _applicationStateChanged:stateUpdate:]", 196, @"_applicationStateChanged: clientAppIsSuspended - pid=%d", v23, v24, v25, v26, (uint64_t)v22);
              id v27 = objc_loadWeakRetained(v18);
              [v27 clientAppIsSuspended:v20];
            }
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v39 objects:v47 count:16];
      }
      while (v16);
    }

    id v5 = v35;
  }
}

void sub_10032AD70(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10032ADE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    if (v3)
    {
      memset(buffer, 0, 255);
      proc_name((int)[v3 processIdentifier], buffer, 0xFEu);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 81, @"Register for Client: %s", v9, v10, v11, v12, (uint64_t)buffer);
      id v13 = *(id *)(a1 + 16);
      objc_sync_enter(v13);
      if ([*(id *)(a1 + 16) containsObject:v8])
      {
        [v8 processIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 86, @"Duplicated register for theConnection: %@ - processIdentifier: %d", v14, v15, v16, v17, (uint64_t)v8);
      }
      else if ([v8 processIdentifier])
      {
        id v18 = [v8 processIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 94, @"Register for processIdentifier: %d", v19, v20, v21, v22, (uint64_t)v18);
        uint64_t v23 = *(void **)(a1 + 24);
        uint64_t v24 = +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", [v8 processIdentifier]);
        uint64_t v25 = +[RBSProcessPredicate predicateMatchingIdentifier:v24];
        [v23 addObject:v25];

        uint64_t v26 = *(void **)(a1 + 8);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_10032B098;
        v36[3] = &unk_10040E050;
        v36[4] = a1;
        [v26 updateConfiguration:v36];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 101, @"After register: _predicates: %@", v27, v28, v29, v30, *(void *)(a1 + 24));
        [*(id *)(a1 + 16) addObject:v8];
      }
      else
      {
        id v31 = [v8 processIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 90, @"Could not register: theConnection.processIdentifier: %d", v32, v33, v34, v35, (uint64_t)v31);
      }
      objc_sync_exit(v13);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver registerForStateChangesToConnection:]", 75, @"Could not register: theConnection: %@", v4, v5, v6, v7, 0);
    }
  }
}

void sub_10032B07C(_Unwind_Exception *exception_object)
{
}

id sub_10032B098(uint64_t a1, void *a2)
{
  return _[a2 setPredicates:*(void *)(*(void *)(a1 + 32) + 24)];
}

void sub_10032B0A8(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 108, &stru_100421848, v3, v4, v5, v6, v31);
    if (v7)
    {
      id v12 = *(id *)(a1 + 16);
      objc_sync_enter(v12);
      if ([*(id *)(a1 + 16) containsObject:v7])
      {
        id v13 = [v7 processIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 119, @"Unregister for processIdentifier: %d", v14, v15, v16, v17, (uint64_t)v13);
        id v18 = *(void **)(a1 + 24);
        uint64_t v19 = +[RBSProcessIdentifier identifierWithPid:](RBSProcessIdentifier, "identifierWithPid:", [v7 processIdentifier]);
        uint64_t v20 = +[RBSProcessPredicate predicateMatchingIdentifier:v19];
        [v18 removeObject:v20];

        uint64_t v21 = *(void **)(a1 + 8);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        v32[2] = sub_10032B2A4;
        v32[3] = &unk_10040E050;
        v32[4] = a1;
        [v21 updateConfiguration:v32];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 124, @"After unregister: _predicates: %@", v22, v23, v24, v25, *(void *)(a1 + 24));
        [*(id *)(a1 + 16) removeObject:v7];
      }
      else
      {
        id v26 = [v7 processIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 116, @"Could not unregister: processIdentifier has not been registered: %d", v27, v28, v29, v30, (uint64_t)v26);
      }
      objc_sync_exit(v12);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver unregisterForStateChangesToConnection:]", 110, @"Could not unregister: theConnection: %@", v8, v9, v10, v11, 0);
    }
  }
}

void sub_10032B290(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10032B2A4(uint64_t a1, void *a2)
{
  return _[a2 setPredicates:*(void *)(*(void *)(a1 + 32) + 24)];
}

BOOL sub_10032B2B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (!a1) {
    goto LABEL_7;
  }
  if (!v3)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientSuspended:]", 132, @"Cannot check isClientSuspended: theConnection is nil", v4, v5, v6, v7, v25);
LABEL_7:
    BOOL v23 = 0;
    goto LABEL_10;
  }
  id v9 = *(id *)(a1 + 16);
  objc_sync_enter(v9);
  uint64_t v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 processIdentifier]);
  id v26 = 0;
  uint64_t v11 = +[RBSProcessHandle handleForIdentifier:v10 error:&v26];
  id v12 = v26;

  if (!v11 || v12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientSuspended:]", 139, @"Error in getting handle: %@", v13, v14, v15, v16, (uint64_t)v12);
    BOOL v23 = 0;
  }
  else
  {
    id v17 = [v8 processIdentifier];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientSuspended:]", 142, @"isClientSuspended check for pid: %d", v18, v19, v20, v21, (uint64_t)v17);
    uint64_t v22 = [v11 currentState];
    BOOL v23 = [v22 taskState] == 3;
  }
  objc_sync_exit(v9);

LABEL_10:
  return v23;
}

void sub_10032B41C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032B430(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    if (v3)
    {
      id v9 = *(id *)(a1 + 16);
      objc_sync_enter(v9);
      uint64_t v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v8 processIdentifier]);
      id v35 = 0;
      uint64_t v11 = +[RBSProcessHandle handleForIdentifier:v10 error:&v35];
      id v12 = v35;

      if (!v11 || v12)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 157, @"Error in getting handle: %@", v13, v14, v15, v16, (uint64_t)v12);
        uint64_t v32 = 4279897;
      }
      else
      {
        id v17 = [v8 processIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 161, @"isClientBackground check for pid: %d", v18, v19, v20, v21, (uint64_t)v17);
        uint64_t v22 = [v11 currentState];
        BOOL v23 = [v11 currentState];
        unsigned int v24 = [v23 taskState];

        if (v24 == 4)
        {
          uint64_t v25 = [v22 endowmentNamespaces];
          unsigned int v26 = [v25 containsObject:FBSSceneVisibilityEndowmentNamespace];

          id v27 = [v8 processIdentifier];
          if (v26)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 167, @"pid: %d is in foreground", v28, v29, v30, v31, (uint64_t)v27);
            uint64_t v32 = 0;
          }
          else
          {
            uint64_t v32 = 1;
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 170, @"pid: %d is backgrounded", v28, v29, v30, v31, (uint64_t)v27);
          }
        }
        else
        {
          uint64_t v32 = 4279897;
        }
      }
      objc_sync_exit(v9);
    }
    else
    {
      uint64_t v32 = 4279897;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlClientAppStateObserver isClientBackground:]", 150, @"Cannot check isClientBackground: theConnection is nil", v4, v5, v6, v7, v34);
    }
  }
  else
  {
    uint64_t v32 = 0;
  }

  return v32;
}

void sub_10032B65C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10032B6D4()
{
  self;
  if (qword_1004683E0 != -1)
  {
    dispatch_once(&qword_1004683E0, &stru_10041A630);
  }
}

void sub_10032B724(id a1)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager initFsManagerArray]_block_invoke", 130, @"FriendSharingManager: initializing fsManagerArray", v1, v2, v3, v4, vars0);
  uint64_t v5 = +[NSMutableArray array];
  uint64_t v6 = (void *)qword_1004683D8;
  qword_1004683D8 = v5;
}

void sub_10032B780()
{
  self;
  v0 = +[NSMutableIndexSet indexSet];
  id v1 = (id)qword_1004683D8;
  objc_sync_enter(v1);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = (id)qword_1004683D8;
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (v7 && *(void *)(v7 + 8) == 52) {
          [v0 addIndex:(char *)v6 + v4, (void)v8];
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      v4 += (uint64_t)v6;
    }
    while (v3);
  }

  [(id)qword_1004683D8 removeObjectsAtIndexes:v0];
  objc_sync_exit(v1);
}

void sub_10032B8E4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10032B90C(uint64_t a1, void *a2, int a3)
{
  id v3 = a2;
  self;
  sub_10032B6D4();
  sub_10032B780();
  id v4 = (id)qword_1004683D8;
  objc_sync_enter(v4);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  id v5 = (id)qword_1004683D8;
  uint64_t v6 = (id *)[v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v25;
    do
    {
      long long v8 = 0;
      do
      {
        if (*(void *)v25 != v7) {
          objc_enumerationMutation(v5);
        }
        if (v3)
        {
          long long v9 = *(void **)(*((void *)&v24 + 1) + 8 * (void)v8);
          long long v10 = v9 ? (void *)v9[41] : 0;
          id v11 = v10;
          unsigned int v12 = [v11 isEqualToString:v3];

          if (v12)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:createIfNil:]", 162, @"FriendSharingManager: found manager to handle invitationId:%@", v13, v14, v15, v16, (uint64_t)v3);
            uint64_t v6 = v9;
            goto LABEL_16;
          }
        }
        long long v8 = (id *)((char *)v8 + 1);
      }
      while (v6 != v8);
      id v17 = (id *)[v5 countByEnumeratingWithState:&v24 objects:v28 count:16];
      uint64_t v6 = v17;
    }
    while (v17);
  }
LABEL_16:

  if (!v6)
  {
    if (a3)
    {
      uint64_t v6 = sub_10032BB48((id *)[KmlFriendSharingManager alloc], v3, 0);
      if (v6)
      {
        [(id)qword_1004683D8 addObject:v6];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:createIfNil:]", 172, @"FriendSharingManager: created new manager to handle invitationId:%@", v18, v19, v20, v21, (uint64_t)v3);
      }
    }
  }
  objc_sync_exit(v4);

  return v6;
}

void sub_10032BB20(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10032BB48(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v30.receiver = a1;
    v30.super_class = (Class)KmlFriendSharingManager;
    long long v8 = (id *)[super init];
    a1 = v8;
    if (v8)
    {
      id v9 = [v8[41] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 327, (uint64_t)v9, @"FriendSharingManager: let's init", v10, v11, v12, (uint64_t)v30.receiver);
      *(int64x2_t *)(a1 + 1) = vdupq_n_s64(2uLL);
      a1[3] = (id)2;
      objc_storeStrong(a1 + 41, a2);
      objc_storeStrong(a1 + 43, a3);
      *((_WORD *)a1 + 116) = 0;
      id v13 = a1[41];
      uint64_t v14 = KmlSignpostLogger();
      uint64_t v15 = v14;
      uint64_t v16 = 41;
      if (!v13) {
        uint64_t v16 = 43;
      }
      a1[32] = (id)os_signpost_id_make_with_pointer(v14, a1[v16]);

      uint64_t v17 = sub_10032CD4C();
      id v18 = a1[35];
      a1[35] = (id)v17;

      uint64_t v19 = sub_10031DB48();
      id v20 = a1[30];
      a1[30] = (id)v19;

      uint64_t v21 = objc_alloc_init(KmlSharingInvitationRecord);
      id v22 = a1[31];
      a1[31] = v21;

      a1[36] = 0;
      a1[37] = 0;
      uint64_t v23 = sub_1002FFCE4((uint64_t)[KmlVersions alloc], 0);
      id v24 = a1[27];
      a1[27] = (id)v23;

      id v25 = [a1[41] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 355, (uint64_t)v25, @"FriendSharingManager:  ready to roll", v26, v27, v28, (uint64_t)v30.receiver);
    }
  }

  return a1;
}

id *sub_10032BD00(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10032B6D4();
  sub_10032B780();
  id v3 = (id)qword_1004683D8;
  objc_sync_enter(v3);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v4 = (id)qword_1004683D8;
  id v5 = [v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v24;
    while (2)
    {
      id v7 = 0;
      do
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v4);
        }
        if (v2)
        {
          long long v8 = *(void **)(*((void *)&v23 + 1) + 8 * (void)v7);
          id v9 = v8 ? (void *)v8[44] : 0;
          id v10 = v9;
          unsigned int v11 = [v10 isEqual:v2];

          if (v11)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForUuid:]", 191, @"FriendSharingManager: found manager to handle UUID:%@", v12, v13, v14, v15, (uint64_t)v2);
            uint64_t v17 = v8;

            if (v8) {
              goto LABEL_18;
            }
            goto LABEL_16;
          }
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v16 = [v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
      id v5 = v16;
      if (v16) {
        continue;
      }
      break;
    }
  }

LABEL_16:
  uint64_t v17 = sub_10032BF38((id *)[KmlFriendSharingManager alloc], v2);
  if (v17)
  {
    [(id)qword_1004683D8 addObject:v17];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForUuid:]", 201, @"FriendSharingManager: created new manager to handle UUID:%@", v18, v19, v20, v21, (uint64_t)v2);
  }
LABEL_18:
  objc_sync_exit(v3);

  return v17;
}

void sub_10032BF10(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10032BF38(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)KmlFriendSharingManager;
    id v5 = (id)[super init];
    a1 = v5;
    if (v5)
    {
      id v6 = [v5[41] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 364, (uint64_t)v6, @"let's init", v7, v8, v9, (uint64_t)v26.receiver);
      a1[1] = 0;
      a1[2] = 0;
      a1[3] = 0;
      objc_storeStrong(a1 + 44, a2);
      uint64_t v10 = [a1[44] UUIDString];
      id v11 = a1[41];
      a1[41] = (id)v10;

      *((_WORD *)a1 + 116) = 0;
      uint64_t v12 = KmlSignpostLogger();
      a1[32] = (id)os_signpost_id_make_with_pointer(v12, a1[41]);

      uint64_t v13 = sub_10032CD4C();
      id v14 = a1[35];
      a1[35] = (id)v13;

      uint64_t v15 = objc_alloc_init(KmlSharingInvitationRecord);
      id v16 = a1[31];
      a1[31] = v15;

      uint64_t v17 = sub_10031DB48();
      id v18 = a1[30];
      a1[30] = (id)v17;

      uint64_t v19 = sub_1002FFCE4((uint64_t)[KmlVersions alloc], 0);
      id v20 = a1[27];
      a1[27] = (id)v19;

      id v21 = [a1[41] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 384, (uint64_t)v21, @"ready to roll", v22, v23, v24, (uint64_t)v26.receiver);
    }
  }

  return a1;
}

void *sub_10032C0B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10032B6D4();
  sub_10032B780();
  id v3 = (id)qword_1004683D8;
  objc_sync_enter(v3);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v4 = (id)qword_1004683D8;
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v19;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v4);
        }
        if (v2)
        {
          uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8 * (void)v7);
          uint64_t v9 = v8 ? (void *)v8[42] : 0;
          id v10 = v9;
          unsigned int v11 = [v10 isEqualToString:v2];

          if (v11)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForKeyIdentifier:]", 220, @"Found manager to handle KeyId :%@", v12, v13, v14, v15, (uint64_t)v2);
            id v5 = v8;
            goto LABEL_16;
          }
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v16 = [v4 countByEnumeratingWithState:&v18 objects:v22 count:16];
      id v5 = v16;
    }
    while (v16);
  }
LABEL_16:

  objc_sync_exit(v3);

  return v5;
}

void sub_10032C270(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10032C294(uint64_t a1, void *a2, int a3)
{
  id v3 = a2;
  self;
  sub_10032B6D4();
  sub_10032B780();
  id v4 = (id)qword_1004683D8;
  objc_sync_enter(v4);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v5 = (id)qword_1004683D8;
  uint64_t v6 = (id *)[v5 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v27;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v27 != v7) {
          objc_enumerationMutation(v5);
        }
        if (v3)
        {
          uint64_t v9 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v8);
          id v10 = v9 ? (void *)v9[43] : 0;
          id v11 = v10;
          unsigned int v12 = [v11 isEqualToString:v3];

          if (v12)
          {
            uint64_t v14 = [v3 substringToIndex:4];
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerWithMailboxIdentifier:createIfNil:]", 242, @"FriendSharingManager: found manager to handle mailboxId:%@", v15, v16, v17, v18, (uint64_t)v14);

            uint64_t v6 = v9;
            goto LABEL_16;
          }
        }
        uint64_t v8 = (id *)((char *)v8 + 1);
      }
      while (v6 != v8);
      uint64_t v13 = (id *)[v5 countByEnumeratingWithState:&v26 objects:v30 count:16];
      uint64_t v6 = v13;
    }
    while (v13);
  }
LABEL_16:

  if (!v6)
  {
    if (a3)
    {
      uint64_t v6 = sub_10032BB48((id *)[KmlFriendSharingManager alloc], 0, v3);
      if (v6)
      {
        [(id)qword_1004683D8 addObject:v6];
        long long v19 = [v3 substringToIndex:4];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerWithMailboxIdentifier:createIfNil:]", 252, @"FriendSharingManager: created new manager to handle mailboxId:%@", v20, v21, v22, v23, (uint64_t)v19);
      }
    }
  }
  objc_sync_exit(v4);

  return v6;
}

void sub_10032C4D8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_10032C500(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  sub_10032B6D4();
  sub_10032B780();
  id v6 = (id)qword_1004683D8;
  objc_sync_enter(v6);
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v7 = (id)qword_1004683D8;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v30;
    do
    {
      id v10 = 0;
      do
      {
        if (*(void *)v30 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(void **)(*((void *)&v29 + 1) + 8 * (void)v10);
        if (v4)
        {
          unsigned int v12 = v11 ? (void *)v11[41] : 0;
          id v13 = v12;
          unsigned int v14 = [v13 isEqualToString:v4];

          if (v14)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:orMailboxIdentifier:]", 272, @"FriendSharingManager: found manager to handle invitationId:%@", v15, v16, v17, v18, (uint64_t)v4);
LABEL_22:
            uint64_t v8 = v11;
            goto LABEL_23;
          }
        }
        if (v5)
        {
          long long v19 = v11 ? (void *)v11[43] : 0;
          id v20 = v19;
          unsigned int v21 = [v20 isEqualToString:v5];

          if (v21)
          {
            uint64_t v23 = [v5 substringToIndex:4];
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager getFriendSharingManagerForInvitationIdentifier:orMailboxIdentifier:]", 277, @"FriendSharingManager: found manager to handle mailboxId:%@", v24, v25, v26, v27, (uint64_t)v23);

            goto LABEL_22;
          }
        }
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      uint64_t v22 = [v7 countByEnumeratingWithState:&v29 objects:v33 count:16];
      uint64_t v8 = v22;
    }
    while (v22);
  }
LABEL_23:

  objc_sync_exit(v6);

  return v8;
}

void sub_10032C734(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10032C758(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10032B6D4();
  id obj = (id)qword_1004683D8;
  objc_sync_enter(obj);
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v3 = (id)qword_1004683D8;
  id v4 = [v3 countByEnumeratingWithState:&v26 objects:v30 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v27;
    while (2)
    {
      id v6 = 0;
      do
      {
        if (*(void *)v27 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(void **)(*((void *)&v26 + 1) + 8 * (void)v6);
        uint64_t v8 = sub_100313DEC((uint64_t)v2);
        if (v8)
        {
          uint64_t v9 = v7 ? (void *)v7[41] : 0;
          id v10 = v9;
          id v11 = sub_100313DEC((uint64_t)v2);
          unsigned int v12 = [v10 isEqualToString:v11];

          if (v12)
          {
            unsigned int v14 = sub_100313DEC((uint64_t)v2);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager regenerateFriendSharingForInvitationRecord:]", 296, @"found manager to handle invitationId:%@", v15, v16, v17, v18, (uint64_t)v14);

            long long v19 = v7;
            if (v7) {
              goto LABEL_18;
            }
            goto LABEL_16;
          }
        }
        id v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v13 = [v3 countByEnumeratingWithState:&v26 objects:v30 count:16];
      id v4 = v13;
      if (v13) {
        continue;
      }
      break;
    }
  }

LABEL_16:
  long long v19 = (void *)sub_10032C9D4((uint64_t)[KmlFriendSharingManager alloc], v2);
  if (v19)
  {
    [(id)qword_1004683D8 addObject:v19];
    id v20 = sub_100313DEC((uint64_t)v2);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlFriendSharingManager regenerateFriendSharingForInvitationRecord:]", 306, @"created new manager to handle invitationId:%@", v21, v22, v23, v24, (uint64_t)v20);
  }
LABEL_18:
  objc_sync_exit(obj);
}

void sub_10032C9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

uint64_t sub_10032C9D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v57.receiver = (id)a1;
    v57.super_class = (Class)KmlFriendSharingManager;
    id v4 = [(id *)[super init];
    a1 = (uint64_t)v4;
    if (v4)
    {
      id v5 = [v4[41] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 393, (uint64_t)v5, @"let's init", v6, v7, v8, (uint64_t)v55);
      id v9 = [v3 copy];
      id v10 = *(void **)(a1 + 248);
      *(void *)(a1 + 248) = v9;

      uint64_t v11 = sub_100313DEC(*(void *)(a1 + 248));
      unsigned int v12 = *(void **)(a1 + 328);
      *(void *)(a1 + 328) = v11;

      uint64_t v13 = sub_100030AD8(*(void *)(a1 + 248));
      unsigned int v14 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v13;

      uint64_t v15 = sub_10001A584(*(void *)(a1 + 248));
      uint64_t v16 = *(void **)(a1 + 344);
      *(void *)(a1 + 344) = v15;

      uint64_t v17 = sub_100014F20(*(void *)(a1 + 248));
      uint64_t v18 = *(void **)(a1 + 352);
      *(void *)(a1 + 352) = v17;

      uint64_t v19 = sub_100313DE0(*(void *)(a1 + 248));
      id v20 = *(void **)(a1 + 336);
      *(void *)(a1 + 336) = v19;

      uint64_t v21 = kmlUtilDataForHexString(*(void **)(a1 + 336));
      uint64_t v22 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v21;

      unint64_t v23 = sub_100313DD4(*(void *)(a1 + 248)) - 1;
      if (v23 <= 5) {
        *(void *)(a1 + 8) = qword_10037F2E8[v23];
      }
      uint64_t v24 = sub_100056FE4(*(void *)(a1 + 248));
      uint64_t v25 = *(void **)(a1 + 136);
      *(void *)(a1 + 136) = v24;

      if (*(void *)(a1 + 136))
      {
        long long v26 = sub_10033F89C([KmlBindingAttestation alloc], *(void **)(a1 + 136));
        uint64_t v27 = sub_10030ACC4((uint64_t)v26);
        long long v28 = *(void **)(a1 + 224);
        *(void *)(a1 + 224) = v27;
      }
      long long v29 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = 0;

      uint64_t v30 = sub_10030ACB8(*(void *)(a1 + 248));
      long long v31 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v30;

      uint64_t v32 = sub_10030ACC4(*(void *)(a1 + 248));
      uint64_t v33 = *(void **)(a1 + 160);
      *(void *)(a1 + 160) = v32;

      uint64_t v34 = sub_10030ACD0(*(void *)(a1 + 248));
      id v35 = *(void **)(a1 + 168);
      *(void *)(a1 + 168) = v34;

      sub_100313DC8(*(void *)(a1 + 248));
      id v36 = (id)objc_claimAutoreleasedReturnValue();

      if (v36)
      {
        uint64_t v37 = sub_100313DC8(*(void *)(a1 + 248));
        id v56 = 0;
        uint64_t v38 = +[DAAlishaKeyEncryptedRequest decodeWithData:v37 error:&v56];
        id v36 = v56;
        long long v39 = *(void **)(a1 + 192);
        *(void *)(a1 + 192) = v38;
      }
      long long v40 = sub_10030ACEC(*(void *)(a1 + 248));

      if (v40)
      {
        long long v41 = sub_10030ACEC(*(void *)(a1 + 248));
        id v55 = v36;
        uint64_t v42 = +[DAAlishaKeyEncryptedRequest decodeWithData:v41 error:&v55];
        id v43 = v55;

        long long v44 = *(void **)(a1 + 184);
        *(void *)(a1 + 184) = v42;

        id v36 = v43;
      }
      *(void *)(a1 + 296) = sub_1002FED98(*(void *)(a1 + 248));
      uint64_t v45 = sub_10032CD4C();
      long long v46 = *(void **)(a1 + 280);
      *(void *)(a1 + 280) = v45;

      uint64_t v47 = sub_10031DB48();
      id v48 = *(void **)(a1 + 240);
      *(void *)(a1 + 240) = v47;

      *(_WORD *)(a1 + 232) = 0;
      uint64_t v49 = KmlSignpostLogger();
      *(void *)(a1 + 256) = os_signpost_id_make_with_pointer(v49, *(const void **)(a1 + 328));

      sub_10032CE08(a1);
      id v50 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 443, (uint64_t)v50, @"ready to roll", v51, v52, v53, (uint64_t)v55);
    }
  }

  return a1;
}

id sub_10032CD4C()
{
  self;
  if (qword_1004683F0 != -1) {
    dispatch_once(&qword_1004683F0, &stru_10041A650);
  }
  v0 = (void *)qword_1004683E8;

  return v0;
}

void sub_10032CDA4(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.sesd.kml.friendSharingManager", v3);
  id v2 = (void *)qword_1004683E8;
  qword_1004683E8 = (uint64_t)v1;
}

void sub_10032CE08(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100337380;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10032CEEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032CFB4;
    block[3] = &unk_10040D2C0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10032CFB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 8);
  id v4 = *(id *)(v2 + 328);
  if (v3 == 11)
  {
    id v5 = v4;
    id v6 = [v5 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 470, (uint64_t)v6, @"FriendSharingManager: Prepare for key sharing from %@", v7, v8, v9, *(void *)(*(void *)(a1 + 32) + 72));

    id v10 = KmlSignpostLogger();
    uint64_t v11 = v10;
    os_signpost_id_t v12 = *(void *)(*(void *)(a1 + 32) + 256);
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, v12, "FriendSharingAccepted", "client", buf, 2u);
    }

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144), *(id *)(a1 + 40));
    id v13 = sub_10032D230(*(void *)(a1 + 32), *(void **)(a1 + 48));
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = 12;
    goto LABEL_8;
  }
  id v16 = [v4 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 476, (uint64_t)v16, @"FriendSharingManager: Not waiting on User acceptance", v17, v18, v19, v29);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 304));
  uint64_t v21 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
  uint64_t v22 = +[NSString stringWithUTF8String:KmlErrorString(214)];
  uint64_t v33 = v22;
  unint64_t v23 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
  uint64_t v24 = +[NSError errorWithDomain:v21 code:214 userInfo:v23];
  [WeakRetained handleExchangeStartedWithFriendKey:0 status:v24];

  uint64_t v14 = *(void *)(a1 + 32);
  if (*(uint64_t *)(v14 + 8) <= 10)
  {
    uint64_t v15 = 52;
LABEL_8:
    sub_10032D4EC(v14, v15);
    return;
  }
  id v25 = [*(id *)(v14 + 328) UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 481, (uint64_t)v25, @"Let sharing finish normally", v26, v27, v28, v30);
}

id sub_10032D230(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    if (*(void *)(a1 + 152))
    {
      uint64_t v9 = @"We already have PPID from server";
      uint64_t v10 = 1966;
LABEL_11:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", v10, v9, v4, v5, v6, v7, v31);
      a1 = 0;
      goto LABEL_12;
    }
    if (!*(void *)(a1 + 160) || !*(void *)(a1 + 168))
    {
      uint64_t v9 = @"Need keyPair to decrypt encrypted data";
      uint64_t v10 = 1971;
      goto LABEL_11;
    }
    if (v3
      && ([v3 encryptedRequest], (uint64_t v11 = objc_claimAutoreleasedReturnValue()) != 0)
      && (os_signpost_id_t v12 = (void *)v11,
          [v8 ephemeralPublicKey],
          id v13 = objc_claimAutoreleasedReturnValue(),
          v13,
          v12,
          v13))
    {
      id v14 = [objc_alloc((Class)SESKeyPair) initWithPublicKey:*(void *)(a1 + 160) secretKey:*(void *)(a1 + 168)];
      uint64_t v15 = [v8 encryptedRequest];
      id v16 = [v8 ephemeralPublicKey];
      uint64_t v17 = SESEndPointPrivacyDecryptionWithKeyPair();
      id v18 = 0;
      uint64_t v19 = *(void **)(a1 + 152);
      *(void *)(a1 + 152) = v17;

      id v20 = kmlUtilHexStringFromData(*(void **)(a1 + 152));
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", 1985, @"Decrypted PPID : %@", v21, v22, v23, v24, (uint64_t)v20);

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", 1986, @"PPID decryption result: %@", v25, v26, v27, v28, (uint64_t)v18);
      a1 = sesErrorToKmlError(v18, 0xDBu);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager getDecryptedPPID:]", 1976, @"PPID from server not usable", v4, v5, v6, v7, v31);
      id v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
      id v18 = +[NSString stringWithUTF8String:KmlErrorString(219)];
      id v33 = v18;
      uint64_t v30 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      a1 = +[NSError errorWithDomain:v14 code:219 userInfo:v30];
    }
  }
LABEL_12:

  return (id)a1;
}

void sub_10032D4EC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 280);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_1003310F8;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_10032D568(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 280);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10032D610;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10032D610(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 8);
  id v4 = [*(id *)(v2 + 328) UTF8String];
  if (v3 == 2)
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 491, (uint64_t)v4, @"Parse cross-platform key sharing invitation", v5, v6, v7, v14);
    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager parseCrossPlatformInvitation:]_block_invoke", 492, @"from %@", v8, v9, v10, v11, *(void *)(*(void *)(a1 + 32) + 344));
    uint64_t v12 = *(void *)(a1 + 32);
    id v13 = *(void **)(a1 + 40);
    sub_10032D700(v12, v13);
  }
  else
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 497, (uint64_t)v4, @"Not expecting to parse cross-platform sharing invitation. Ignore", v5, v6, v7, v14);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 304));
    [WeakRetained handleCrossPlatformParseInvitationStatus:0];
  }
}

void sub_10032D700(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3
      && ([v3 genericData],
          uint64_t v5 = objc_claimAutoreleasedReturnValue(),
          [v5 message],
          uint64_t v6 = objc_claimAutoreleasedReturnValue(),
          char v7 = sub_10032F93C(a1, v6),
          v6,
          v5,
          (v7 & 1) != 0))
    {
      uint64_t v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;

      uint64_t v9 = [v4 genericData];
      uint64_t v10 = [v9 sharingIdentifier];
      uint64_t v11 = *(void **)(a1 + 328);
      *(void *)(a1 + 328) = v10;

      uint64_t v12 = [v4 genericData];
      id v13 = [v12 message];
      sub_10004ED08(*(void *)(a1 + 248), v13);

      sub_10031457C(*(void *)(a1 + 248), *(void **)(a1 + 328));
      sub_100017370(*(void *)(a1 + 248), *(void **)(a1 + 344));
      uint64_t v14 = [v4 additionalData];

      if (v14)
      {
        uint64_t v15 = [v4 additionalData];
        uint64_t v16 = [v15 sharingSessionUUID];
        uint64_t v17 = *(void **)(a1 + 352);
        *(void *)(a1 + 352) = v16;

        id v18 = [v4 additionalData];
        *(void *)(a1 + 360) = [v18 targetDeviceType];
      }
      else
      {
        *(void *)(a1 + 360) = 255;
      }
      uint64_t v26 = *(void **)(a1 + 352);
      if (!v26)
      {
        uint64_t v27 = +[NSUUID UUID];
        uint64_t v28 = *(void **)(a1 + 352);
        *(void *)(a1 + 352) = v27;

        uint64_t v26 = *(void **)(a1 + 352);
      }
      sub_1000162FC(*(void *)(a1 + 248), v26);
      uint64_t v24 = a1;
      uint64_t v25 = 3;
    }
    else
    {
      uint64_t v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      id v20 = +[NSString stringWithUTF8String:KmlErrorString(109)];
      uint64_t v30 = v20;
      uint64_t v21 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      uint64_t v22 = +[NSError errorWithDomain:v19 code:109 userInfo:v21];
      uint64_t v23 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v22;

      uint64_t v24 = a1;
      if (*(unsigned char *)(a1 + 233)) {
        uint64_t v25 = 42;
      }
      else {
        uint64_t v25 = 44;
      }
    }
    sub_10032D4EC(v24, v25);
  }
}

void sub_10032D998(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = v9;
  if (a1)
  {
    uint64_t v11 = *(NSObject **)(a1 + 280);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10032DA88;
    v12[3] = &unk_100419A98;
    v12[4] = a1;
    id v13 = v9;
    id v14 = v8;
    id v15 = v7;
    dispatch_async(v11, v12);
  }
}

void sub_10032DA88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 8);
  id v4 = [*(id *)(v2 + 328) UTF8String];
  if (v3 < 12)
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 512, (uint64_t)v4, @"User accepted cross-platform key sharing invitation", v5, v6, v7, v37);
    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager acceptCrossPlatformInvitation:passcode:productPlanIdentifier:]_block_invoke", 513, @"from %@", v13, v14, v15, v16, *(void *)(*(void *)(a1 + 32) + 344));
    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager acceptCrossPlatformInvitation:passcode:productPlanIdentifier:]_block_invoke", 514, @"PPID from server : %@", v17, v18, v19, v20, *(void *)(a1 + 40));
    *(unsigned char *)(*(void *)(a1 + 32) + 233) = 1;
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 144), *(id *)(a1 + 48));
    id v21 = sub_10032D230(*(void *)(a1 + 32), *(void **)(a1 + 40));
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v23 = *(void **)(a1 + 56);
    if (*(void *)(v22 + 8) == 2)
    {
      sub_10032D700(v22, v23);
    }
    else
    {
      if (v23)
      {
        uint64_t v24 = *(void **)(v22 + 328);
        uint64_t v25 = [*(id *)(a1 + 56) genericData];
        uint64_t v26 = [v25 sharingIdentifier];
        LODWORD(v24) = [v24 isEqualToString:v26];

        if (!v24)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlFriendSharingManager acceptCrossPlatformInvitation:passcode:productPlanIdentifier:]_block_invoke", 524, @"Parse invite and accepted invite don't match", v27, v28, v29, v30, v38);
          uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
          NSErrorUserInfoKey v32 = +[NSString stringWithUTF8String:KmlErrorString(109)];
          long long v40 = v32;
          id v33 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
          uint64_t v34 = +[NSError errorWithDomain:v31 code:109 userInfo:v33];
          uint64_t v35 = *(void *)(a1 + 32);
          id v36 = *(void **)(v35 + 264);
          *(void *)(v35 + 264) = v34;

          sub_10032D4EC(*(void *)(a1 + 32), 42);
          return;
        }
        uint64_t v22 = *(void *)(a1 + 32);
      }
      sub_10032D4EC(v22, 12);
    }
  }
  else
  {
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 509, (uint64_t)v4, @"Sharing for this mailbox already under progress. Let sharing finish normally", v5, v6, v7, v37);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 304));
    id v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
    uint64_t v10 = +[NSString stringWithUTF8String:KmlErrorString(214)];
    uint64_t v42 = v10;
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
    uint64_t v12 = +[NSError errorWithDomain:v9 code:214 userInfo:v11];
    [WeakRetained handleCrossPlatformSigningRequest:0 status:v12 keyInformation:0];
  }
}

void sub_10032DE34(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032DEB0;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10032DEB0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 232) = 1;
  *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
  uint64_t v3 = +[NSString stringWithUTF8String:KmlErrorString(102)];
  uint64_t v28 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
  uint64_t v5 = +[NSError errorWithDomain:v2 code:102 userInfo:v4];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 264);
  *(void *)(v6 + 264) = v5;

  uint64_t v8 = *(void *)(a1 + 32);
  if (*(uint64_t *)(v8 + 8) < 31)
  {
    uint64_t v17 = KmlSignpostLogger();
    uint64_t v18 = v17;
    os_signpost_id_t v19 = *(void *)(*(void *)(a1 + 32) + 256);
    if (v19 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
    {
      LOWORD(v24) = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, v19, "FriendSharingCancelled", "client", (uint8_t *)&v24, 2u);
    }

    uint64_t v20 = *(void *)(a1 + 32);
    if (*(void *)(v20 + 80))
    {
      sub_10032E170(v20);
      uint64_t v20 = *(void *)(a1 + 32);
    }
    uint64_t v21 = *(void *)(v20 + 8);
    if (v21 > 20)
    {
      if (v21 == 21)
      {
LABEL_13:
        uint64_t v16 = 0;
        goto LABEL_14;
      }
      uint64_t v22 = 43;
    }
    else
    {
      uint64_t v22 = 21;
    }
    sub_10032D4EC(v20, v22);
    goto LABEL_13;
  }
  id v9 = [*(id *)(v8 + 328) UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 547, (uint64_t)v9, @"Sharing at stage where it can not be cancelled", v10, v11, v12, v24);
  uint64_t v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
  uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(101)];
  uint64_t v26 = v14;
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
  uint64_t v16 = +[NSError errorWithDomain:v13 code:101 userInfo:v15];

LABEL_14:
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 304));
  [WeakRetained handleFriendSideKeySharingCancelStatus:v16];
}

void sub_10032E170(uint64_t a1)
{
  if (a1)
  {
    SESEndPointDelete();
    id v2 = 0;
    id v3 = *(id *)(a1 + 328);
    id v4 = [v3 UTF8String];
    if (v2) {
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1232, (uint64_t)v4, @"Failed to delete key with name: %@, and idStr: %@, due to %@", v5, v6, v7, *(void *)(a1 + 88));
    }
    else {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1234, (uint64_t)v4, @"Deleted key with name: %@, and idStr: %@", v5, v6, v7, *(void *)(a1 + 88));
    }
  }
}

void sub_10032E238(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032E2B4;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10032E2B4(uint64_t a1)
{
}

dispatch_queue_t *sub_10032E2C0(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[35]);
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x3032000000;
    uint64_t v12 = sub_10032E3E8;
    uint64_t v13 = sub_10032E3F8;
    id v14 = 0;
    id v4 = a1[35];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032E400;
    block[3] = &unk_10041A678;
    void block[4] = a1;
    uint64_t v8 = &v9;
    id v7 = v3;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

uint64_t sub_10032E3E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10032E3F8(uint64_t a1)
{
}

void sub_10032E400(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 8))
  {
    id v3 = [*(id *)(v2 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 582, (uint64_t)v3, @"Not ready to request invite", v4, v5, v6, v24);
    id v7 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
    uint64_t v8 = +[NSString stringWithUTF8String:KmlErrorString(214)];
    uint64_t v26 = v8;
    uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    uint64_t v10 = +[NSError errorWithDomain:v7 code:214 userInfo:v9];
    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v12 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }
  else
  {
    uint64_t v13 = [*(id *)(a1 + 40) ownerIdsIdentifier];
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 72);
    *(void *)(v14 + 72) = v13;

    uint64_t v16 = *(void *)(a1 + 32);
    if (v16) {
      uint64_t v17 = *(void **)(v16 + 328);
    }
    else {
      uint64_t v17 = 0;
    }
    id v18 = v17;
    id v19 = [v18 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 586, (uint64_t)v19, @"Ready to request invite from %@", v20, v21, v22, *(void *)(*(void *)(a1 + 32) + 72));

    uint64_t v23 = *(void *)(a1 + 32);
    sub_10032D4EC(v23, 1);
  }
}

id sub_10032E608(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a1;
    objc_sync_enter(v3);
    id v4 = v3[25];
    if (a2 && !v4)
    {
      *a2 = v3[34];
      id v4 = v3[25];
    }
    id v5 = v4;
    objc_sync_exit(v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10032E684(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = a1;
    objc_sync_enter(v4);
    if (v4[17])
    {
      id v5 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      v15[0] = NSLocalizedDescriptionKey;
      uint64_t v6 = +[NSString stringWithUTF8String:KmlErrorString(214)];
      v15[1] = NSLocalizedFailureReasonErrorKey;
      v16[0] = v6;
      v16[1] = @"Binding attestation already set";
      id v7 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];
      uint64_t v8 = +[NSError errorWithDomain:v5 code:214 userInfo:v7];
    }
    else
    {
      id v9 = [objc_alloc((Class)NSData) initWithData:v3];
      uint64_t v10 = v4[17];
      v4[17] = v9;

      if (v4[17])
      {
        uint64_t v11 = sub_10033F89C([KmlBindingAttestation alloc], v4[17]);
        uint64_t v12 = sub_10030ACC4((uint64_t)v11);
        uint64_t v13 = v4[28];
        v4[28] = (void *)v12;
      }
      sub_10032D4EC((uint64_t)v4, 21);
      uint64_t v8 = 0;
    }
    objc_sync_exit(v4);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_10032E858(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_10032E878(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a1;
    objc_sync_enter(v3);
    id v4 = v3[23];
    if (a2 && !v4)
    {
      *a2 = v3[34];
      id v4 = v3[23];
    }
    id v5 = v4;
    objc_sync_exit(v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_10032E8F4(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a1;
    objc_sync_enter(v3);
    id v4 = v3[24];
    if (a2 && !v4)
    {
      *a2 = v3[34];
      id v4 = v3[24];
    }
    id v5 = v4;
    objc_sync_exit(v3);
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

dispatch_queue_t *sub_10032E970(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[35]);
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x3032000000;
    uint64_t v12 = sub_10032E3E8;
    uint64_t v13 = sub_10032E3F8;
    id v14 = 0;
    id v4 = a1[35];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032EA98;
    block[3] = &unk_100419E28;
    uint64_t v8 = &v9;
    void block[4] = a1;
    id v7 = v3;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10032EA98(uint64_t a1)
{
  uint64_t v2 = sub_10032D230(*(void *)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

dispatch_queue_t *sub_10032EAE8(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[35]);
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x3032000000;
    uint64_t v12 = sub_10032E3E8;
    uint64_t v13 = sub_10032E3F8;
    id v14 = 0;
    id v4 = a1[35];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032EC0C;
    block[3] = &unk_100419AE8;
    void block[4] = a1;
    id v7 = v3;
    uint64_t v8 = &v9;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10032EC0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 8) == 23 && *(void *)(v2 + 48))
  {
    objc_storeStrong((id *)(v2 + 144), *(id *)(a1 + 40));
    uint64_t v3 = *(void *)(a1 + 32);
    sub_10032EDB4(v3);
  }
  else
  {
    id v4 = [*(id *)(v2 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 675, (uint64_t)v4, @"Not ready to retry passcode", v5, v6, v7, v14);
    uint64_t v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
    uint64_t v9 = +[NSString stringWithUTF8String:KmlErrorString(119)];
    uint64_t v16 = v9;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v8 code:119 userInfo:v10];
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;
  }
}

void sub_10032EDB4(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100336268;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10032EE30(uint64_t a1)
{
  if (a1)
  {
    dispatch_queue_t v1 = *(NSObject **)(a1 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10032EEAC;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10032EEAC(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  uint64_t v3 = +[NSString stringWithUTF8String:KmlErrorString(211)];
  uint64_t v9 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  uint64_t v5 = +[NSError errorWithDomain:v2 code:211 userInfo:v4];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 264);
  *(void *)(v6 + 264) = v5;

  sub_10032D4EC(*(void *)(a1 + 32), 43);
}

void sub_10032F114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32))
  {
    if (v9) {
      uint64_t v11 = *(void **)(v9 + 328);
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = v11;
    id v13 = [v12 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 709, (uint64_t)v13, @"FriendSharingManager: Received message from : %@", v14, v15, v16, *(void *)(a1 + 32));

    uint64_t v17 = *(void *)(a1 + 40);
    if (*(void *)(v17 + 8) == 2 && *(void *)(a1 + 80) == 1)
    {
      if (sub_10032F93C(v17, *(void **)(a1 + 48)) && *(void *)(a1 + 56))
      {
        id v18 = [objc_alloc((Class)NSData) initWithData:*(void *)(a1 + 56)];
        uint64_t v19 = *(void *)(a1 + 40);
        uint64_t v20 = *(void **)(v19 + 40);
        *(void *)(v19 + 40) = v18;

        id v21 = [objc_alloc((Class)NSString) initWithString:*(void *)(a1 + 32)];
        uint64_t v22 = *(void *)(a1 + 40);
        uint64_t v23 = *(void **)(v22 + 72);
        *(void *)(v22 + 72) = v21;

        objc_storeStrong((id *)(*(void *)(a1 + 40) + 352), *(id *)(a1 + 64));
        *(void *)(*(void *)(a1 + 40) + 360) = *(void *)(a1 + 88);
        sub_1000162FC(*(void *)(*(void *)(a1 + 40) + 248), *(void **)(a1 + 64));
        sub_10004ED08(*(void *)(*(void *)(a1 + 40) + 248), *(void **)(a1 + 48));
        sub_10031457C(*(void *)(*(void *)(a1 + 40) + 248), *(void **)(*(void *)(a1 + 40) + 328));
        sub_100017360(*(void *)(*(void *)(a1 + 40) + 248), *(void **)(*(void *)(a1 + 40) + 72));
        uint64_t v24 = *(void *)(a1 + 40);
        sub_10032D4EC(v24, 3);
        return;
      }
      uint64_t v54 = *(void *)(a1 + 40);
      if (v54) {
        id v55 = *(void **)(v54 + 328);
      }
      else {
        id v55 = 0;
      }
      id v46 = [v55 UTF8String];
      id v50 = @"FriendSharingManager: incorrect data received, ignoring it";
      uint64_t v51 = 725;
      goto LABEL_32;
    }
    unsigned __int8 v25 = [*(id *)(v17 + 72) isEqualToString:*(void *)(a1 + 32)];
    uint64_t v26 = *(void *)(a1 + 40);
    if (v25)
    {
      if ([*(id *)(v26 + 352) isEqual:*(void *)(a1 + 64)])
      {
        NSErrorUserInfoKey v27 = *(void **)(a1 + 40);
        if (*(void *)(a1 + 80) == 4)
        {
          if (v27) {
            NSErrorUserInfoKey v27 = (void *)v27[41];
          }
          id v28 = [v27 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 744, (uint64_t)v28, @"FriendSharingManager: Owner cancelled sharing request", v29, v30, v31, v105);
          NSErrorUserInfoKey v32 = sub_100321FE8([KmlCancelMessage alloc], *(void **)(a1 + 48));
          id v33 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          if (v32)
          {
            uint64_t v34 = sub_100322414((uint64_t)v32);
            NSErrorUserInfoKey v110 = NSLocalizedDescriptionKey;
            int v35 = sub_100322414((uint64_t)v32);
            id v36 = +[NSString stringWithUTF8String:KmlErrorString(v35)];
            v111 = v36;
            uint64_t v37 = +[NSDictionary dictionaryWithObjects:&v111 forKeys:&v110 count:1];
            uint64_t v38 = v33;
            uint64_t v39 = v34;
          }
          else
          {
            NSErrorUserInfoKey v108 = NSLocalizedDescriptionKey;
            id v36 = +[NSString stringWithUTF8String:KmlErrorString(103)];
            v109 = v36;
            uint64_t v37 = +[NSDictionary dictionaryWithObjects:&v109 forKeys:&v108 count:1];
            uint64_t v38 = v33;
            uint64_t v39 = 103;
          }
          uint64_t v71 = +[NSError errorWithDomain:v38 code:v39 userInfo:v37];
          uint64_t v72 = *(void *)(a1 + 40);
          v73 = *(void **)(v72 + 264);
          *(void *)(v72 + 264) = v71;

          uint64_t v69 = *(void *)(a1 + 40);
          uint64_t v74 = *(void *)(v69 + 8);
          if (v74 != 11)
          {
            if (v74 <= 32)
            {
LABEL_46:
              uint64_t v70 = 51;
              goto LABEL_55;
            }
            goto LABEL_56;
          }
        }
        else
        {
          NSErrorUserInfoKey v32 = sub_10032FB18((id *)v27, *(void **)(a1 + 48));
          uint64_t v58 = *(void *)(a1 + 40);
          if (!v32)
          {
            if (v58) {
              v75 = *(void **)(v58 + 328);
            }
            else {
              v75 = 0;
            }
            id v76 = [v75 UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 762, (uint64_t)v76, @"We will only handle signed request at this point. This message is not that so dropping", v77, v78, v79, v105);
            sub_10031E02C(*(void *)(*(void *)(a1 + 40) + 240), *(void **)(a1 + 32));
            goto LABEL_56;
          }
          uint64_t v59 = *(void *)(v58 + 8);
          if ((unint64_t)(v59 - 22) < 2)
          {
            if (!*(void *)(v58 + 80))
            {
              id v93 = [*(id *)(v58 + 328) UTF8String];
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 769, (uint64_t)v93, @"Failed to look up endpoint", v94, v95, v96, v105);
              uint64_t v69 = *(void *)(a1 + 40);
              uint64_t v70 = 43;
              goto LABEL_55;
            }
            if (!*(void *)(v58 + 336)) {
              goto LABEL_41;
            }
            unsigned __int8 v60 = [*(id *)(a1 + 72) isEqualToString:];
            uint64_t v58 = *(void *)(a1 + 40);
            if ((v60 & 1) == 0)
            {
              if (v58) {
                v97 = *(void **)(v58 + 328);
              }
              else {
                v97 = 0;
              }
              id v98 = v97;
              id v99 = [v98 UTF8String];
              uint64_t v100 = *(void *)(a1 + 88);

              v104 = "watch";
              if (v100 == 1) {
                v104 = "phone";
              }
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 775, (uint64_t)v99, @"Signed response is not for our keyID. Other %s on our account must have accepted the invite.", v101, v102, v103, (uint64_t)v104);
              sub_10031E02C(*(void *)(*(void *)(a1 + 40) + 240), *(void **)(a1 + 32));
              uint64_t v69 = *(void *)(a1 + 40);
              goto LABEL_46;
            }
            if (!v58) {
              long long v61 = 0;
            }
            else {
LABEL_41:
            }
              long long v61 = *(void **)(v58 + 328);
            id v62 = v61;
            id v63 = [v62 UTF8String];
            uint64_t v64 = *(void *)(*(void *)(a1 + 40) + 8);

            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 781, (uint64_t)v63, @"Received signed response in state - %ld", v65, v66, v67, v64);
            objc_storeStrong((id *)(*(void *)(a1 + 40) + 56), v32);
            long long v68 = +[NSString stringWithFormat:@"SignedResponse - %@", *(void *)(*(void *)(a1 + 40) + 328)];
            kmlUtilLogLargeData(v68, *(void **)(a1 + 48));

            uint64_t v69 = *(void *)(a1 + 40);
            uint64_t v70 = 31;
LABEL_55:
            sub_10032D4EC(v69, v70);
            goto LABEL_56;
          }
          if (v59 != 11)
          {
LABEL_56:

            return;
          }
          id v80 = *(id *)(v58 + 328);
          id v81 = [v80 UTF8String];
          uint64_t v82 = *(void *)(a1 + 88);

          v86 = "watch";
          if (v82 == 1) {
            v86 = "phone";
          }
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 790, (uint64_t)v81, @"It appears that other %s on our account has used this invitation.", v83, v84, v85, (uint64_t)v86);
          v87 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v106 = NSLocalizedDescriptionKey;
          v88 = +[NSString stringWithUTF8String:KmlErrorString(110)];
          v107 = v88;
          v89 = +[NSDictionary dictionaryWithObjects:&v107 forKeys:&v106 count:1];
          uint64_t v90 = +[NSError errorWithDomain:v87 code:110 userInfo:v89];
          uint64_t v91 = *(void *)(a1 + 40);
          v92 = *(void **)(v91 + 264);
          *(void *)(v91 + 264) = v90;

          uint64_t v69 = *(void *)(a1 + 40);
        }
        uint64_t v70 = 41;
        goto LABEL_55;
      }
      uint64_t v52 = *(void *)(a1 + 40);
      if (v52) {
        uint64_t v53 = *(void **)(v52 + 328);
      }
      else {
        uint64_t v53 = 0;
      }
      id v46 = [v53 UTF8String];
      id v50 = @"Unknown uuid. Dropping message";
      uint64_t v51 = 738;
    }
    else
    {
      if (v26) {
        uint64_t v45 = *(void **)(v26 + 328);
      }
      else {
        uint64_t v45 = 0;
      }
      id v46 = [v45 UTF8String];
      id v50 = @"Unexpected sender. Dropping message";
      uint64_t v51 = 732;
    }
LABEL_32:
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", v51, (uint64_t)v46, v50, v47, v48, v49, v105);
    id v56 = *(void **)(a1 + 32);
    uint64_t v57 = *(void *)(*(void *)(a1 + 40) + 240);
    sub_10031E02C(v57, v56);
    return;
  }
  if (v9) {
    long long v40 = *(void **)(v9 + 328);
  }
  else {
    long long v40 = 0;
  }
  id v41 = [v40 UTF8String];

  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 705, (uint64_t)v41, @"FriendSharingManager: missing remote IDS identifier", v42, v43, v44, a9);
}

uint64_t sub_10032F93C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(KeySharingInvitation);
    uint64_t v5 = sub_1003091E8((uint64_t)v4, v3);
    if (v5)
    {
      objc_storeStrong((id *)(a1 + 32), v4);
      uint64_t v6 = sub_100014F14(*(void *)(a1 + 32));
      uint64_t v7 = sub_10001A584((uint64_t)v6);
      NSErrorUserInfoKey v8 = sub_10033CB34((uint64_t)v7);
      uint64_t v9 = kmlUtilHexStringFromData(v8);

      uint64_t v10 = sub_100014F14(*(void *)(a1 + 32));
      uint64_t v11 = sub_10001A584((uint64_t)v10);
      id v12 = sub_10033F2A8(v11);

      id v13 = [objc_alloc((Class)KmlRoutingInformation) initWithInformation:v12 readerIdentifier:v9];
      uint64_t v14 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v13;

      uint64_t v15 = [*(id *)(a1 + 104) getReaderInformation];
      uint64_t v16 = *(void **)(a1 + 312);
      *(void *)(a1 + 312) = v15;

      uint64_t v17 = [*(id *)(a1 + 104) manufacturer];
      id v18 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v17;

      id v19 = *(id *)(a1 + 328);
      id v20 = [v19 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1425, (uint64_t)v20, @"Received valid sharing invitation for manufacturer - %@", v21, v22, v23, *(void *)(a1 + 112));

      kmlUtilLogLargeData(@"Invitation", v3);
    }
    else
    {
      id v24 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1413, (uint64_t)v24, @"Received sharing invitation is invalid", v25, v26, v27, v29);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

id *sub_10032FB18(id *a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    id v4 = a1[41];
    id v5 = a2;
    id v6 = [v4 UTF8String];
    uint64_t v7 = kmlUtilHexStringFromData(v5);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1433, (uint64_t)v6, @"FriendSharingManager: incoming message %@", v8, v9, v10, v7);

    uint64_t v11 = objc_alloc_init(SharingSignedResponse);
    LOBYTE(v7) = sub_10030A534((uint64_t)v11, v5);

    if (v7)
    {
      uint64_t v2 = v11;
    }
    else
    {
      id v12 = [v2[41] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1437, (uint64_t)v12, @"FriendSharingManager: Still waiting for signed response", v13, v14, v15, v17);
      uint64_t v2 = 0;
    }
  }

  return v2;
}

void sub_10032FCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) == 21)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(id *)(v9 + 328);
    if (v11)
    {
      id v13 = v12;
      id v14 = [v13 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 809, (uint64_t)v14, @"FriendSharingManager: error setting up transport %@", v15, v16, v17, *(void *)(a1 + 40));

      uint64_t v18 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v18 + 232))
      {
        sub_10032FE00(v18);
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = 52;
      }
      else
      {
        objc_storeStrong((id *)(v18 + 264), *(id *)(a1 + 40));
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = 42;
      }
    }
    else
    {
      id v25 = [v12 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 818, (uint64_t)v25, @"FriendSharingManager: transport set up", v26, v27, v28, v29);
      uint64_t v19 = *(void *)(a1 + 32);
      if (*(unsigned char *)(v19 + 232)) {
        uint64_t v20 = 43;
      }
      else {
        uint64_t v20 = 22;
      }
    }
    sub_10032D4EC(v19, v20);
  }
  else
  {
    id v21 = [*(id *)(v9 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 803, (uint64_t)v21, @"FriendSharingManager: Ignore transport setup result when in wrong state.", v22, v23, v24, a9);
  }
}

void sub_10032FE00(uint64_t a1)
{
  if (a1)
  {
    if (sub_10031E1CC(*(void *)(a1 + 240), *(void **)(a1 + 72))) {
      int v2 = 1;
    }
    else {
      int v2 = 2;
    }
    unsigned int v71 = v2;
    id v3 = sub_100014F14(*(void *)(a1 + 32));
    sub_10001A584((uint64_t)v3);
    id v4 = (id *)objc_claimAutoreleasedReturnValue();
    id v5 = sub_10033F07C(v4);

    v75 = v5;
    uint64_t v6 = sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], v5);
    BOOL v7 = sub_1003184DC(v6);
    if (sub_1003184F0(v6)) {
      uint64_t v8 = 2;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = sub_100014F14(*(void *)(a1 + 32));
    uint64_t v10 = sub_10001A584((uint64_t)v9);
    BOOL v11 = sub_10033F418((uint64_t)v10) != 0;

    uint64_t v74 = (void *)v6;
    BOOL v12 = sub_100318518(v6) != 0;
    id v13 = sub_100014F14(*(void *)(a1 + 32));
    id v14 = sub_10001A584((uint64_t)v13);
    uint64_t v15 = sub_10033F660((uint64_t)v14);

    BOOL v20 = v15 != 0;
    if (v15) {
      id v21 = [v15 u16BE:7];
    }
    else {
      id v21 = 0;
    }
    uint64_t v61 = v8 | v7;
    unsigned int v57 = v12 | (2 * v11);
    uint64_t v22 = *(void **)(a1 + 264);
    if (v22)
    {
      uint64_t v23 = 24;
      if (!*(unsigned char *)(a1 + 232)) {
        uint64_t v23 = 16;
      }
      uint64_t v24 = *(void *)(a1 + v23);
      id v55 = [v22 code];
    }
    else
    {
      id v55 = 0;
      uint64_t v24 = *(void *)(a1 + 8);
    }
    id v25 = *(void **)(a1 + 104);
    v73 = v15;
    if (v25)
    {
      uint64_t v26 = [v25 manufacturer];
      CFStringRef v27 = (const __CFString *)[v26 copy];

      uint64_t v28 = [*(id *)(a1 + 104) brand];
      CFStringRef v29 = (const __CFString *)[v28 copy];

      uint64_t v30 = [*(id *)(a1 + 104) regionString];
      CFStringRef v31 = (const __CFString *)[v30 copy];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager reportSharingEventToCA]", 1280, @"No routing info available", v16, v17, v18, v19, v49);
      CFStringRef v31 = @"Unknown";
      CFStringRef v29 = @"Unknown";
      CFStringRef v27 = @"Unknown";
    }
    int v59 = [*(id *)(a1 + 216) agreedKmlVehicleVersion] == 768;
    NSErrorUserInfoKey v32 = sub_100014F14(*(void *)(a1 + 32));
    id v33 = sub_10001A584((uint64_t)v32);
    unsigned int v34 = sub_10033E910((uint64_t)v33);
    unsigned int v63 = kmlUtilKeyClassOriginBitmap(v34);

    uint64_t v35 = sub_100301934(*(void *)(a1 + 216));
    v76[0] = @"destination";
    uint64_t v72 = +[NSNumber numberWithUnsignedInt:v71];
    v77[0] = v72;
    v77[1] = &off_10042E3C8;
    v76[1] = @"type";
    v76[2] = @"targetDeviceType";
    uint64_t v69 = +[NSNumber numberWithInteger:*(void *)(a1 + 360)];
    v77[2] = v69;
    v76[3] = @"step";
    uint64_t v66 = +[NSNumber numberWithInteger:v24];
    v77[3] = v66;
    v77[4] = v31;
    uint64_t v70 = (__CFString *)v31;
    v76[4] = @"dataCenterCode";
    v76[5] = @"HUPDataSource";
    uint64_t v65 = +[NSNumber numberWithUnsignedInteger:v20];
    v77[5] = v65;
    v76[6] = @"vehicleCapabilities";
    uint64_t v64 = +[NSNumber numberWithUnsignedShort:v21];
    v77[6] = v64;
    v77[7] = v27;
    uint64_t v67 = (__CFString *)v29;
    long long v68 = (__CFString *)v27;
    v76[7] = @"manufacturer";
    v76[8] = @"brand";
    v77[8] = v29;
    v76[9] = @"transportSupported";
    id v62 = +[NSNumber numberWithUnsignedInteger:v61];
    v77[9] = v62;
    v76[10] = @"totalSharedKeysOnFriendDevice";
    unsigned __int8 v60 = +[NSNumber numberWithInteger:*(void *)(a1 + 288)];
    v77[10] = v60;
    v76[11] = @"status";
    id v56 = +[NSNumber numberWithUnsignedInt:v55];
    v77[11] = v56;
    v76[12] = @"activationOption";
    uint64_t v58 = +[NSNumber numberWithUnsignedInt:v57];
    v77[12] = v58;
    v76[13] = @"sharingTransport";
    if (*(void *)(a1 + 344)) {
      uint64_t v36 = 2;
    }
    else {
      uint64_t v36 = 1;
    }
    uint64_t v53 = +[NSNumber numberWithUnsignedInt:v36];
    v77[13] = v53;
    v76[14] = @"pinAttempts";
    uint64_t v52 = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 296)];
    v77[14] = v52;
    v76[15] = @"appleToApple";
    uint64_t v51 = +[NSNumber numberWithInt:*(void *)(a1 + 72) != 0];
    v77[15] = v51;
    v76[16] = @"senderSupportedFrameworkVersions";
    uint64_t v37 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%04X", [*(id *)(a1 + 216) agreedKmlSharingVersion]);
    id v50 = (void *)v37;
    CFStringRef v38 = &stru_100421848;
    uint64_t v54 = (void *)v35;
    if (v35) {
      CFStringRef v38 = (const __CFString *)v35;
    }
    v77[16] = v37;
    v77[17] = v38;
    v76[17] = @"receiverSupportedFrameworkVersions";
    v76[18] = @"attestationChainLength";
    uint64_t v39 = sub_10030ACEC(*(void *)(a1 + 56));
    long long v40 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v39 count]);
    v77[18] = v40;
    v77[19] = &off_10042E3E0;
    v76[19] = @"certificateChainLength";
    v76[20] = @"accountRole";
    id v41 = sub_100014F20(*(void *)(a1 + 32));
    uint64_t v42 = +[NSNumber numberWithUnsignedShort:sub_100306A30((uint64_t)v41)];
    v77[20] = v42;
    v77[21] = &off_10042E3E0;
    v76[21] = @"isIntraAccountShare";
    v76[22] = @"wasUserAuthRequired";
    v77[22] = &off_10042E3E0;
    v76[23] = @"mailboxVersion";
    uint64_t v43 = +[NSNumber numberWithUnsignedChar:(v59 << 7)];
    v77[23] = v43;
    v76[24] = @"frameworkVersion";
    uint64_t v44 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 216) agreedKmlSharingVersion]);
    v77[24] = v44;
    v76[25] = @"accessProfile";
    uint64_t v45 = sub_100014F20(*(void *)(a1 + 32));
    id v46 = +[NSNumber numberWithUnsignedChar:sub_100306A3C((uint64_t)v45)];
    v77[25] = v46;
    v76[26] = @"keyClassOriginBitmap";
    uint64_t v47 = +[NSNumber numberWithUnsignedChar:v63];
    v77[26] = v47;
    uint64_t v48 = +[NSDictionary dictionaryWithObjects:v77 forKeys:v76 count:27];

    sub_1002F928C((uint64_t)KmlAnalyticsLogger, v48);
  }
}

void sub_100330608(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3 == 43)
  {
    if (!*(void *)(a1 + 40))
    {
LABEL_13:
      uint64_t v23 = 52;
      goto LABEL_14;
    }
    id v11 = *(id *)(v2 + 328);
    id v12 = [v11 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 858, (uint64_t)v12, @"error sending cancel message over transport %@", v13, v14, v15, *(void *)(a1 + 40));

LABEL_12:
    uint64_t v2 = *(void *)(a1 + 32);
    goto LABEL_13;
  }
  if (v3 != 22)
  {
    if (v3 != 1) {
      return;
    }
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(id *)(v2 + 328);
    if (v4)
    {
      id v6 = v5;
      id v7 = [v6 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 833, (uint64_t)v7, @"error sending message over transport %@", v8, v9, v10, *(void *)(a1 + 40));

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 264), *(id *)(a1 + 40));
    }
    else
    {
      id v24 = [v5 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 837, (uint64_t)v24, @"Sharing invite request sent successfully", v25, v26, v27, v32);
    }
    goto LABEL_12;
  }
  uint64_t v16 = *(void *)(a1 + 40);
  id v17 = *(id *)(v2 + 328);
  if (v16)
  {
    id v18 = v17;
    id v19 = [v18 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 846, (uint64_t)v19, @"error sending message over transport %@", v20, v21, v22, *(void *)(a1 + 40));

    objc_storeStrong((id *)(*(void *)(a1 + 32) + 264), *(id *)(a1 + 40));
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v23 = 42;
  }
  else
  {
    id v28 = [v17 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 850, (uint64_t)v28, @"FriendSharingManager: Sharing request sent successfully", v29, v30, v31, v32);
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v23 = 23;
  }
LABEL_14:

  sub_10032D4EC(v2, v23);
}

void sub_10033086C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) genericData];
  id v3 = [v2 messageType];

  if (v3 == (id)4)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (v4) {
      id v5 = *(void **)(v4 + 328);
    }
    else {
      id v5 = 0;
    }
    id v6 = [v5 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 873, (uint64_t)v6, @"FriendSharingManager: Owner cancelled sharing request", v7, v8, v9, v88);
    uint64_t v10 = [KmlCancelMessage alloc];
    id v11 = [*(id *)(a1 + 32) genericData];
    id v12 = [v11 message];
    uint64_t v13 = sub_100321FE8(v10, v12);

    uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    if (v13)
    {
      uint64_t v15 = sub_100322414((uint64_t)v13);
      NSErrorUserInfoKey v97 = NSLocalizedDescriptionKey;
      int v16 = sub_100322414((uint64_t)v13);
      id v17 = +[NSString stringWithUTF8String:KmlErrorString(v16)];
      id v98 = v17;
      id v18 = +[NSDictionary dictionaryWithObjects:&v98 forKeys:&v97 count:1];
      id v19 = v14;
      uint64_t v20 = v15;
    }
    else
    {
      NSErrorUserInfoKey v95 = NSLocalizedDescriptionKey;
      id v17 = +[NSString stringWithUTF8String:KmlErrorString(103)];
      uint64_t v96 = v17;
      id v18 = +[NSDictionary dictionaryWithObjects:&v96 forKeys:&v95 count:1];
      id v19 = v14;
      uint64_t v20 = 103;
    }
    uint64_t v56 = +[NSError errorWithDomain:v19 code:v20 userInfo:v18];
    uint64_t v57 = *(void *)(a1 + 40);
    uint64_t v58 = *(void **)(v57 + 264);
    *(void *)(v57 + 264) = v56;

    goto LABEL_19;
  }
  uint64_t v21 = [*(id *)(a1 + 32) genericData];
  id v22 = [v21 messageType];

  uint64_t v23 = *(void *)(a1 + 40);
  if (v22 != (id)6)
  {
    uint64_t v36 = [*(id *)(a1 + 32) genericData];
    uint64_t v37 = [v36 message];
    uint64_t v13 = sub_10032FB18((id *)v23, v37);

    uint64_t v38 = *(void *)(a1 + 40);
    if (!v13)
    {
      if (v38) {
        unsigned int v71 = *(void **)(v38 + 328);
      }
      else {
        unsigned int v71 = 0;
      }
      id v72 = [v71 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 907, (uint64_t)v72, @"We will only handle signed request at this point. This message is not that", v73, v74, v75, v88);
      id v76 = objc_alloc((Class)DAShareRecipientResult);
      uint64_t v77 = *(void *)(*(void *)(a1 + 40) + 336);
      uint64_t v78 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v91 = NSLocalizedDescriptionKey;
      uint64_t v79 = +[NSString stringWithUTF8String:KmlErrorString(214)];
      v92 = v79;
      id v80 = +[NSDictionary dictionaryWithObjects:&v92 forKeys:&v91 count:1];
      id v81 = +[NSError errorWithDomain:v78 code:214 userInfo:v80];
      id v82 = [v76 initFailureResultWithCrdentialIdentifier:v77 error:v81];

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 304));
      [WeakRetained handleRecipientMessageResult:v82];

      goto LABEL_21;
    }
    if (*(void *)(v38 + 8) != 23)
    {
LABEL_21:

      return;
    }
    uint64_t v39 = *(void *)(v38 + 80);
    id v40 = *(id *)(v38 + 328);
    if (v39)
    {
      id v41 = v40;
      id v42 = [v41 UTF8String];
      uint64_t v43 = *(void *)(*(void *)(a1 + 40) + 8);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 920, (uint64_t)v42, @"Received signed response in state - %ld", v44, v45, v46, v43);
      uint64_t v47 = +[NSString stringWithFormat:@"SignedResponse - %@", *(void *)(*(void *)(a1 + 40) + 328)];
      uint64_t v48 = [*(id *)(a1 + 32) genericData];
      uint64_t v49 = [v48 message];
      kmlUtilLogLargeData(v47, v49);

      objc_storeStrong((id *)(*(void *)(a1 + 40) + 56), v13);
      id v50 = [*(id *)(a1 + 32) additionalData];
      uint64_t v51 = [v50 initiatorIdsPseudonym];
      uint64_t v52 = *(void *)(a1 + 40);
      uint64_t v53 = *(void **)(v52 + 72);
      *(void *)(v52 + 72) = v51;

      sub_100017360(*(void *)(*(void *)(a1 + 40) + 248), *(void **)(*(void *)(a1 + 40) + 72));
      uint64_t v54 = *(void *)(a1 + 40);
      uint64_t v55 = 31;
LABEL_20:
      sub_10032D4EC(v54, v55);
      goto LABEL_21;
    }
    id v84 = [v40 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 915, (uint64_t)v84, @"Failed to look up endpoint", v85, v86, v87, v88);
LABEL_19:
    uint64_t v54 = *(void *)(a1 + 40);
    uint64_t v55 = 51;
    goto LABEL_20;
  }
  if (v23) {
    id v24 = *(void **)(v23 + 328);
  }
  else {
    id v24 = 0;
  }
  id v25 = [v24 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 887, (uint64_t)v25, @"Owner is requesting password re-entry", v26, v27, v28, v88);
  uint64_t v29 = *(void *)(a1 + 40);
  uint64_t v30 = [*(id *)(a1 + 32) genericData];
  uint64_t v31 = [v30 message];
  unint64_t v32 = sub_100330FC4(v29, v31);

  uint64_t v33 = *(void *)(a1 + 40);
  if (*(void *)(v33 + 8) == 23)
  {
    unsigned int v34 = +[KmlClientReporterFactory getReporter];
    [v34 passcodeRetryRequestedFor:*(void *)(*(void *)(a1 + 40) + 336) retriesLeft:v32];

    id v90 = [objc_alloc((Class)DAShareRecipientResult) initPasscodeFailureResultWithCredentialIdentifier:*(void *)(*(void *)(a1 + 40) + 336) retryCount:v32];
    id v35 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 304));
    [v35 handleRecipientMessageResult:v90];
  }
  else
  {
    id v59 = [*(id *)(v33 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 897, (uint64_t)v59, @"We are not waiting for signedResponse, it needs to be ignored", v60, v61, v62, v89);
    id v63 = objc_alloc((Class)DAShareRecipientResult);
    uint64_t v64 = *(void *)(*(void *)(a1 + 40) + 336);
    uint64_t v65 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v93 = NSLocalizedDescriptionKey;
    uint64_t v66 = +[NSString stringWithUTF8String:KmlErrorString(214)];
    uint64_t v94 = v66;
    uint64_t v67 = +[NSDictionary dictionaryWithObjects:&v94 forKeys:&v93 count:1];
    long long v68 = +[NSError errorWithDomain:v65 code:214 userInfo:v67];
    id v69 = [v63 initFailureResultWithCrdentialIdentifier:v64 error:v68];

    id v70 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 304));
    [v70 handleRecipientMessageResult:v69];
  }
}

unint64_t sub_100330FC4(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  sub_100315960((uint64_t)KmlTlv, a2);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  unint64_t v3 = (unint64_t)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != (void *)v3; i = (char *)i + 1)
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v8 + 1) + 8 * i);
        if (sub_10005D5A8(v6) == 40727)
        {
          unint64_t v3 = sub_100316118(v6);
          goto LABEL_12;
        }
      }
      unint64_t v3 = (unint64_t)[v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v3;
}

void sub_1003310F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  if (v10 <= *(void *)(v9 + 8))
  {
    id v12 = [*(id *)(v9 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 940, (uint64_t)v12, @"FriendSharingManager: Current state higher than new state. Do nothing", v13, v14, v15, a9);
  }
  else
  {
    sub_10033116C(v9, v10, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_10033116C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return;
  }
  id v11 = *(id *)(a1 + 328);
  id v12 = [v11 UTF8String];
  uint64_t v13 = *(void *)(a1 + 8);

  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 950, (uint64_t)v12, @"FriendSharingManager: Current state %ld, new state %ld", v14, v15, v16, v13);
  uint64_t v17 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v17;
  if (a2 <= 20)
  {
    switch(a2)
    {
      case 1:
        id v24 = KmlSignpostLogger();
        id v25 = v24;
        os_signpost_id_t v26 = *(void *)(a1 + 256);
        if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v24))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, v26, "FriendSilentSharingRequest", "", buf, 2u);
        }

        sub_1003321B4(a1);
        return;
      case 2:
        id v31 = [*(id *)(a1 + 328) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 965, (uint64_t)v31, @"Waiting to receive sharing invite", v32, v33, v34, a9);
        return;
      case 3:
        sub_1003322A4(a1);
        return;
      case 11:
        SESEndPointPreWarm();
        sub_1003326D8(a1);
        if (*(void *)(a1 + 344))
        {
          int v35 = *(unsigned __int8 *)(a1 + 233);
          id v36 = [*(id *)(a1 + 328) UTF8String];
          if (v35)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 985, (uint64_t)v36, @"This Cross platform sharing invitation was accepted by user first.", v37, v38, v39, v168);
            sub_10032D4EC(a1, 12);
LABEL_99:
            sub_100332B80(a1);
            return;
          }
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 988, (uint64_t)v36, @"This Cross platform sharing invitation was parsed first. Waiting for user to accept.", v37, v38, v39, v168);
          id WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));
          [WeakRetained handleCrossPlatformParseInvitationStatus:0];
        }
        else
        {
          id v153 = [*(id *)(a1 + 328) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 993, (uint64_t)v153, @"Received sharing invite intended for us. Pop it up to user.", v154, v155, v156, v168);
          v157 = KmlSignpostLogger();
          v158 = v157;
          os_signpost_id_t v159 = *(void *)(a1 + 256);
          if (v159 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v157))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v158, OS_SIGNPOST_EVENT, v159, "FriendSharingInviteReceived", "", buf, 2u);
          }

          id WeakRetained = +[KmlClientReporterFactory getReporter];
          [WeakRetained didReceiveSharingInvitationWithIdentifier:*(void *)(a1 + 328) uuid:*(void *)(a1 + 352) metadata:*(void *)(a1 + 40) ownerIdsId:*(void *)(a1 + 72)];
        }
LABEL_98:

        goto LABEL_99;
      case 12:
        *(void *)(a1 + 288) = sub_100340370((uint64_t)KmlEndpointManager, @"FRND");
        id v40 = [*(id *)(a1 + 328) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1009, (uint64_t)v40, @"Generate signing request", v41, v42, v43, v168);
        sub_100332B80(a1);
        uint64_t v44 = *(void **)(a1 + 264);
        *(void *)(a1 + 264) = 0;

        uint64_t v45 = sub_100332D70(a1);
        id v171 = v45;
        if (v45)
        {
          id v46 = v45;
          uint64_t v47 = *(void **)(a1 + 264);
          *(void *)(a1 + 264) = v46;
        }
        else
        {
          sub_100334700(a1);
          sub_100334818(a1);
          sub_1003349CC(a1);
          uint64_t v47 = +[NSString stringWithFormat:@"SigningRequest - %@", *(void *)(a1 + 328), a2];
          kmlUtilLogLargeData(v47, *(void **)(a1 + 48));
        }

        if (*(void *)(a1 + 264)) {
          uint64_t v160 = 42;
        }
        else {
          uint64_t v160 = 13;
        }
        sub_10032D4EC(a1, v160);

        return;
      case 13:
        uint64_t v48 = KmlSignpostLogger();
        uint64_t v49 = v48;
        os_signpost_id_t v50 = *(void *)(a1 + 256);
        if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_EVENT, v50, "FriendSharingWaitForBindingAttestation", "", buf, 2u);
        }

        id v51 = [objc_alloc((Class)DAKeyInformation) initWithEndpoint:*(void *)(a1 + 80)];
        uint64_t v52 = *(void **)(a1 + 320);
        *(void *)(a1 + 320) = v51;

        sub_100334B98(a1);
        uint64_t v53 = *(void *)(a1 + 344);
        id v54 = [*(id *)(a1 + 328) UTF8String];
        if (v53)
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1044, (uint64_t)v54, @"Not waiting For binding attestation in cross-platform case", v55, v56, v57, v168);
          sub_10032D4EC(a1, 21);
        }
        else
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1048, (uint64_t)v54, @"Wait For binding attestation", v55, v56, v57, v168);
          sub_100332B80(a1);
        }
        if (isInternalBuild())
        {
          id v111 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
          v161 = [v111 objectForKey:@"BindingAttestationSkip"];
          if (v161)
          {
            id v162 = [*(id *)(a1 + 328) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1056, (uint64_t)v162, @"User default is asking to skip binding attestation. Rolling through this state", v163, v164, v165, v169);
            sub_10032D4EC(a1, 21);
          }

          goto LABEL_76;
        }
        return;
      default:
        return;
    }
  }
  switch(a2)
  {
    case 21:
      id v18 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1063, (uint64_t)v18, @"Check connection", v19, v20, v21, v168);
      sub_10031DDEC(*(void *)(a1 + 240), (void *)a1, *(void **)(a1 + 328));
      if (*(void *)(a1 + 344))
      {
        uint64_t v22 = a1;
        if (*(unsigned char *)(a1 + 232)) {
          uint64_t v23 = 43;
        }
        else {
          uint64_t v23 = 23;
        }
LABEL_68:
        sub_10032D4EC(v22, v23);
      }
      else
      {
        sub_100332B80(a1);
        uint64_t v166 = *(void *)(a1 + 240);
        v167 = *(void **)(a1 + 328);
        sub_10031E0E0(v166, v167);
      }
      return;
    case 22:
      id v58 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1081, (uint64_t)v58, @"Send signing request", v59, v60, v61, v168);
      uint64_t v62 = KmlSignpostLogger();
      id v63 = v62;
      os_signpost_id_t v64 = *(void *)(a1 + 256);
      if (v64 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v62))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, OS_SIGNPOST_EVENT, v64, "FriendSharingSendRequest", "", buf, 2u);
      }

      sub_10031E4A0(*(void *)(a1 + 240), *(void **)(a1 + 48), 0, *(void **)(a1 + 136), *(void **)(a1 + 328), *(void **)(a1 + 336), *(void **)(a1 + 352), *(void **)(a1 + 72), 1, 2);
      return;
    case 23:
      id v65 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1097, (uint64_t)v65, @"Wait for signed response from the owner", v66, v67, v68, v168);
      id v69 = KmlSignpostLogger();
      id WeakRetained = v69;
      os_signpost_id_t v71 = *(void *)(a1 + 256);
      if (v71 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v69))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, WeakRetained, OS_SIGNPOST_EVENT, v71, "FriendSharingWaitForSignedRequest", "", buf, 2u);
      }
      goto LABEL_98;
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return;
    case 31:
      id v72 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1104, (uint64_t)v72, @"Preparing mailbox data based on signed response from owner", v73, v74, v75, v168);
      id v76 = KmlSignpostLogger();
      uint64_t v77 = v76;
      os_signpost_id_t v78 = *(void *)(a1 + 256);
      if (v78 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v76))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v77, OS_SIGNPOST_EVENT, v78, "FriendSharingReceivedSignedRequest", "", buf, 2u);
      }

      sub_100334D00(a1);
      return;
    case 32:
      id v79 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1110, (uint64_t)v79, @"Create and save tracking request", v80, v81, v82, v168);
      uint64_t v83 = KmlSignpostLogger();
      id v84 = v83;
      os_signpost_id_t v85 = *(void *)(a1 + 256);
      if (v85 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v83))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v84, OS_SIGNPOST_EVENT, v85, "FriendSharingBuildTrackingRequest", "", buf, 2u);
      }

      sub_1003354E8(a1, v86, v87, v88, v89, v90, v91, v92, v170);
      uint64_t v93 = sub_1003359F0(a1);
      uint64_t v94 = *(void **)(a1 + 264);
      *(void *)(a1 + 264) = v93;

      if (*(void *)(a1 + 264))
      {
        id v95 = *(id *)(a1 + 328);
        id v96 = [v95 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1116, (uint64_t)v96, @"Failed to Create and save tracking request - %@", v97, v98, v99, *(void *)(a1 + 264));

LABEL_61:
        uint64_t v131 = a1;
        uint64_t v132 = 51;
      }
      else
      {
        uint64_t v131 = a1;
        uint64_t v132 = 33;
      }
      sub_10032D4EC(v131, v132);
      return;
    case 33:
      uint64_t v100 = KmlSignpostLogger();
      uint64_t v101 = v100;
      os_signpost_id_t v102 = *(void *)(a1 + 256);
      if (v102 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v100))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, OS_SIGNPOST_EVENT, v102, "FriendSharingSuccess", "", buf, 2u);
      }

      id v103 = [objc_alloc((Class)DAKeyInformation) initWithEndpoint:*(void *)(a1 + 80)];
      v104 = *(void **)(a1 + 320);
      *(void *)(a1 + 320) = v103;

      id v105 = *(id *)(a1 + 328);
      id v106 = [v105 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1129, (uint64_t)v106, @"Successfully received key as friend - %@", v107, v108, v109, *(void *)(a1 + 320));

      NSErrorUserInfoKey v110 = +[KmlClientReporterFactory getReporter];
      [v110 finishedSharingForKey:*(void *)(a1 + 320) result:0];

      id v111 = [objc_alloc((Class)DAShareRecipientResult) initCredentialProvisionedResultWithCredentialIdentifier:*(void *)(a1 + 336) keyInformation:*(void *)(a1 + 320)];
      id v112 = objc_loadWeakRetained((id *)(a1 + 304));
      [v112 handleRecipientMessageResult:v111];

      goto LABEL_75;
    case 41:
      id v113 = *(id *)(a1 + 328);
      id v114 = [v113 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1145, (uint64_t)v114, @"Invite is no longer usable due to : %@", v115, v116, v117, *(void *)(a1 + 264));

      v118 = KmlSignpostLogger();
      v119 = v118;
      os_signpost_id_t v120 = *(void *)(a1 + 256);
      if (v120 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v118))
      {
        uint64_t v121 = *(void *)(a1 + 264);
        *(_DWORD *)buf = 138412290;
        uint64_t v173 = v121;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v119, OS_SIGNPOST_EVENT, v120, "FriendSharingInviteUnusable", "reason - %@", buf, 0xCu);
      }

      id v111 = +[KmlClientReporterFactory getReporter];
      [v111 reportUnusableInvitation:*(void *)(a1 + 328) reason:*(void *)(a1 + 264)];
      goto LABEL_75;
    case 42:
      id v122 = *(id *)(a1 + 328);
      id v123 = [v122 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1156, (uint64_t)v123, @"Failed to start exchange due to : %@", v124, v125, v126, *(void *)(a1 + 264));

      v127 = KmlSignpostLogger();
      v128 = v127;
      os_signpost_id_t v129 = *(void *)(a1 + 256);
      if (v129 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v127))
      {
        uint64_t v130 = *(void *)(a1 + 264);
        *(_DWORD *)buf = 138412290;
        uint64_t v173 = v130;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v128, OS_SIGNPOST_EVENT, v129, "FriendSharingFailedToSend", "reason - %@", buf, 0xCu);
      }

      sub_100334B98(a1);
      goto LABEL_61;
    case 43:
      v133 = KmlSignpostLogger();
      v134 = v133;
      os_signpost_id_t v135 = *(void *)(a1 + 256);
      if (v135 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v133))
      {
        uint64_t v136 = *(void *)(a1 + 264);
        *(_DWORD *)buf = 138412290;
        uint64_t v173 = v136;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v134, OS_SIGNPOST_EVENT, v135, "FriendSharingCancelled", "reason - %@", buf, 0xCu);
      }

      sub_100332B80(a1);
      sub_10032FE00(a1);
      sub_100335EC4(a1);
      return;
    case 44:
      id v137 = *(id *)(a1 + 328);
      id v138 = [v137 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1174, (uint64_t)v138, @"Failed to parse invite due to : %@", v139, v140, v141, *(void *)(a1 + 264));

      id v142 = objc_loadWeakRetained((id *)(a1 + 304));
      [v142 handleCrossPlatformParseInvitationStatus:*(void *)(a1 + 264)];

      uint64_t v22 = a1;
      uint64_t v23 = 52;
      goto LABEL_68;
    default:
      if (a2 != 51)
      {
        if (a2 == 52)
        {
          id v27 = [*(id *)(a1 + 328) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1200, (uint64_t)v27, @"FriendSharingManager: Ready for cleanup.", v28, v29, v30, v168);
          sub_10031DF6C(*(void *)(a1 + 240), *(void **)(a1 + 328));
          sub_100332B80(a1);
        }
        return;
      }
      id v143 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1182, (uint64_t)v143, @"Error while receiving shared key.", v144, v145, v146, v168);
      v147 = KmlSignpostLogger();
      v148 = v147;
      os_signpost_id_t v149 = *(void *)(a1 + 256);
      if (v149 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v147))
      {
        uint64_t v150 = *(void *)(a1 + 264);
        *(_DWORD *)buf = 138412290;
        uint64_t v173 = v150;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v148, OS_SIGNPOST_EVENT, v149, "FriendSharingFailed", "error - %@", buf, 0xCu);
      }

      v151 = +[KmlClientReporterFactory getReporter];
      [v151 finishedSharingForKey:*(void *)(a1 + 320) result:*(void *)(a1 + 264)];

      id v111 = [objc_alloc((Class)DAShareRecipientResult) initFailureResultWithCrdentialIdentifier:*(void *)(a1 + 336) error:*(void *)(a1 + 264)];
      id v152 = objc_loadWeakRetained((id *)(a1 + 304));
      [v152 handleRecipientMessageResult:v111];

      sub_10032E170(a1);
LABEL_75:
      sub_10032FE00(a1);
      sub_10032D4EC(a1, 52);
      break;
  }
LABEL_76:
}

void sub_1003321B4(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1212, (uint64_t)v2, @"Sending invite request message.", v3, v4, v5, v11);
    id v12 = +[NSMutableData dataWithLength:32];
    uint64_t v6 = *(void *)(a1 + 240);
    uint64_t v7 = *(void **)(a1 + 328);
    long long v8 = *(void **)(a1 + 352);
    uint64_t v9 = *(void **)(a1 + 72);
    if (MGGetSInt32Answer() == 6) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 1;
    }
    sub_10031E4A0(v6, v12, 0, 0, v7, 0, v8, v9, v10, 8);
  }
}

void sub_1003322A4(uint64_t a1)
{
  if (!a1) {
    return;
  }
  id v2 = [*(id *)(a1 + 328) UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2145, (uint64_t)v2, @"Validating if the invite is for this device.", v3, v4, v5, v37);
  int v6 = MGGetSInt32Answer();
  if (v6 != 1)
  {
    if (v6 == 6)
    {
      uint64_t v7 = *(void *)(a1 + 360);
      if (v7 == 255 || v7 == 2)
      {
        *(void *)(a1 + 360) = 2;
        id v8 = [*(id *)(a1 + 328) UTF8String];
        id v12 = @"Invite is intended for watch. Good to go on watch";
        uint64_t v13 = 2153;
LABEL_11:
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", v13, (uint64_t)v8, v12, v9, v10, v11, v38);
        uint64_t v15 = a1;
        uint64_t v16 = 11;
LABEL_19:
        sub_10032D4EC(v15, v16);
        return;
      }
    }
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)(a1 + 360);
  switch(v14)
  {
    case 255:
LABEL_10:
      *(void *)(a1 + 360) = 1;
      id v8 = [*(id *)(a1 + 328) UTF8String];
      id v12 = @"Invite is intended for phone. Good to go on phone";
      uint64_t v13 = 2161;
      goto LABEL_11;
    case 2:
      if (!*(void *)(a1 + 344))
      {
        uint64_t v17 = +[NRPairedDeviceRegistry sharedInstance];
        id v18 = [v17 getActivePairedDevice];

        id v19 = [*(id *)(a1 + 328) UTF8String];
        if (!v18)
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2172, (uint64_t)v19, @"Invite is intended for watch. But we don't have a paired watch. Check for a watch logged into our iCloud account.", v20, v21, v22, v38);
          sub_1003368E8(a1);
          return;
        }
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2176, (uint64_t)v19, @"We do have a watch paired with this phone. Let the watch handle it's copy of invite.", v20, v21, v22, v38);
      }
      break;
    case 1:
      goto LABEL_10;
  }
LABEL_15:
  id v23 = [*(id *)(a1 + 328) UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2185, (uint64_t)v23, @"We are not supposed to handle this invite.", v24, v25, v26, v38);
  if (!*(void *)(a1 + 344))
  {
    id v33 = [*(id *)(a1 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2195, (uint64_t)v33, @"clean up", v34, v35, v36, v39);
    sub_10031E02C(*(void *)(a1 + 240), *(void **)(a1 + 72));
    uint64_t v15 = a1;
    uint64_t v16 = 52;
    goto LABEL_19;
  }
  id v27 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
  uint64_t v28 = +[NSString stringWithUTF8String:KmlErrorString(115)];
  uint64_t v41 = v28;
  uint64_t v29 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
  uint64_t v30 = +[NSError errorWithDomain:v27 code:115 userInfo:v29];
  id v31 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = v30;

  if (*(unsigned char *)(a1 + 233)) {
    uint64_t v32 = 42;
  }
  else {
    uint64_t v32 = 44;
  }
  sub_10032D4EC(a1, v32);
}

void sub_100332648(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    uint64_t v4 = *(void **)(v3 + 328);
  }
  else {
    uint64_t v4 = 0;
  }
  id v5 = v4;
  id v10 = a2;
  id v6 = [v5 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 974, (uint64_t)v6, @"Prewarm result : %@", v7, v8, v9, (uint64_t)v10);
}

void sub_1003326D8(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = 0;

    uint64_t v3 = [KmlDeviceConfigurationData alloc];
    uint64_t v4 = sub_100014F14(*(void *)(a1 + 32));
    sub_10001A584((uint64_t)v4);
    id v5 = (id *)objc_claimAutoreleasedReturnValue();
    id v6 = sub_10033F07C(v5);
    uint64_t v7 = (void *)sub_1003163A8((uint64_t)v3, v6);

    uint64_t v8 = sub_1002FEDB0((uint64_t)v7);

    if (v8)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager createPpidFetchRequest]", 1900, @"We received Product Plan Identifier from invite. Not need to fetch from server.", v9, v10, v11, v12, v50);
      uint64_t v13 = *(void **)(a1 + 192);
      *(void *)(a1 + 192) = 0;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager createPpidFetchRequest]", 1905, @"We need to construct Product Plan Identifier request to fetch from server.", v9, v10, v11, v12, v50);
      uint64_t v14 = sub_1003365C4(a1);
      if (v14)
      {
        id v15 = (id)v14;
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v17 = +[NSMutableArray array];
        id v18 = [*(id *)(a1 + 104) readerIdentifier];
        id v19 = kmlUtilDataForHexString(v18);

        uint64_t v53 = v19;
        uint64_t v20 = sub_100315D20((uint64_t)KmlTlv, 77, v19);
        [v17 addObject:v20];

        uint64_t v21 = sub_100315D20((uint64_t)KmlTlv, 24393, *(void **)(a1 + 160));
        [v17 addObject:v21];

        uint64_t v22 = [@"ECIES_v1" dataUsingEncoding:4];
        id v23 = sub_100315D20((uint64_t)KmlTlv, 218, v22);
        [v17 addObject:v23];

        uint64_t v24 = +[NSMutableData data];
        long long v54 = 0u;
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        id v25 = v17;
        id v26 = [v25 countByEnumeratingWithState:&v54 objects:v58 count:16];
        if (v26)
        {
          id v27 = v26;
          uint64_t v28 = *(void *)v55;
          do
          {
            for (i = 0; i != v27; i = (char *)i + 1)
            {
              if (*(void *)v55 != v28) {
                objc_enumerationMutation(v25);
              }
              uint64_t v30 = sub_100316294(*(void *)(*((void *)&v54 + 1) + 8 * i));
              [v24 appendData:v30];
            }
            id v27 = [v25 countByEnumeratingWithState:&v54 objects:v58 count:16];
          }
          while (v27);
        }

        id v51 = sub_100315D20((uint64_t)KmlTlv, 32595, v24);
        id v31 = [*(id *)(a1 + 104) regionString];
        uint64_t v32 = [v31 substringWithRange:0, 2];
        id v33 = [v31 substringWithRange:2, 1];
        uint64_t v34 = [*(id *)(a1 + 104) manufacturer];
        uint64_t v35 = sub_100316294((uint64_t)v51);
        uint64_t v52 = SESEndPointPrivacyEncryptionWithManufacturer();
        id v15 = 0;

        if (!v15)
        {
          id v43 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
          uint64_t v44 = [v52 version];
          uint64_t v45 = [v52 ephemeralPublicKeydata];
          id v46 = [v52 receiverPublicKeyHash];
          uint64_t v47 = [v52 cipherText];
          id v48 = [v43 initWithVersion:v44 ephemeralPublicKey:v45 publicKeyHash:v46 encryptedRequest:v47];
          uint64_t v49 = *(void **)(a1 + 192);
          *(void *)(a1 + 192) = v48;

          goto LABEL_16;
        }
        uint64_t v16 = v52;
      }
      id v36 = *(id *)(a1 + 328);
      id v37 = [v36 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1934, (uint64_t)v37, @"Failed to encrypt pre-track request with - %@", v38, v39, v40, (uint64_t)v15);

      uint64_t v41 = sesErrorToKmlError(v15, 0x78u);
      uint64_t v42 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = v41;
    }
LABEL_16:
  }
}

void sub_100332B80(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 328);
    id v3 = [v2 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2384, (uint64_t)v3, @"Saving sharing record for invitation (%@)", v4, v5, v6, *(void *)(a1 + 328));

    uint64_t v7 = sub_100336ED8(a1);
    sub_10031458C(*(void *)(a1 + 248), v7);
    sub_10031456C(*(void *)(a1 + 248), *(void **)(a1 + 336));
    sub_100314598(*(void *)(a1 + 248), *(void *)(a1 + 296));
    if (*(uint64_t *)(a1 + 8) < 24)
    {
      sub_100307F94(*(void *)(a1 + 248), *(void **)(a1 + 136));
      sub_100309D6C(*(void *)(a1 + 248), *(void **)(a1 + 48));
      sub_10031453C(*(void *)(a1 + 248), *(void **)(a1 + 160));
      sub_10031454C(*(void *)(a1 + 248), *(void **)(a1 + 168));
      uint64_t v8 = *(void **)(a1 + 192);
      if (v8)
      {
        id v16 = 0;
        uint64_t v9 = [v8 encodeWithError:&v16];
        id v10 = v16;
        sub_10030ACDC(*(void *)(a1 + 248), v9);
      }
      else
      {
        sub_10030ACDC(*(void *)(a1 + 248), 0);
        id v10 = 0;
      }
      uint64_t v11 = *(void **)(a1 + 184);
      if (v11)
      {
        id v15 = v10;
        uint64_t v12 = [v11 encodeWithError:&v15];
        id v13 = v15;

        sub_10031455C(*(void *)(a1 + 248), v12);
        id v10 = v13;
      }
      else
      {
        sub_10031455C(*(void *)(a1 + 248), 0);
      }
    }
    else
    {
      sub_100307F94(*(void *)(a1 + 248), 0);
      sub_100309D6C(*(void *)(a1 + 248), 0);
      sub_10031453C(*(void *)(a1 + 248), 0);
      sub_10031454C(*(void *)(a1 + 248), 0);
      sub_10030ACDC(*(void *)(a1 + 248), 0);
      sub_10031455C(*(void *)(a1 + 248), 0);
    }
    uint64_t v14 = sub_100314660();
    sub_100314A58((uint64_t)v14, *(void **)(a1 + 248));
  }
}

id sub_100332D70(uint64_t a1)
{
  if (a1)
  {
    id v2 = [KmlDeviceConfigurationData alloc];
    id v3 = sub_100014F14(*(void *)(a1 + 32));
    sub_10001A584((uint64_t)v3);
    uint64_t v4 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v5 = sub_10033F07C(v4);
    uint64_t v6 = sub_1003163A8((uint64_t)v2, v5);
    uint64_t v7 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = v6;

    sub_100317554(*(void *)(a1 + 208), *(void **)(a1 + 152));
    uint64_t v8 = objc_opt_new();
    uint64_t v9 = [*(id *)(a1 + 104) manufacturer];
    id v10 = [*(id *)(a1 + 104) brand];
    uint64_t v11 = sub_1002FEDB0(*(void *)(a1 + 208));
    id v319 = 0;
    uint64_t v12 = [v8 BOOLValueForSetting:5 manufacturer:v9 brand:v10 uuid:v11 error:&v319];
    id v13 = v319;
    unsigned __int8 v14 = [v12 BOOLValue];

    if ((v14 & 1) == 0)
    {
      id v70 = *(id *)(a1 + 328);
      id v71 = [v70 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1480, (uint64_t)v71, @"Sharing is blocked by configuration %d error %@", v72, v73, v74, 1);

      if (v13)
      {
        uint64_t v75 = sesErrorToKmlError(v13, 0x79u);
      }
      else
      {
        id v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        v332[0] = NSLocalizedDescriptionKey;
        uint64_t v80 = +[NSString stringWithUTF8String:KmlErrorString(121)];
        v332[1] = NSLocalizedFailureReasonErrorKey;
        v333[0] = v80;
        v333[1] = @"Sharing is blocked by configuration";
        uint64_t v81 = +[NSDictionary dictionaryWithObjects:v333 forKeys:v332 count:2];
        uint64_t v75 = +[NSError errorWithDomain:v13 code:121 userInfo:v81];
      }
      goto LABEL_83;
    }
    id v15 = [*(id *)(a1 + 104) manufacturer];
    id v16 = [*(id *)(a1 + 104) brand];
    uint64_t v17 = sub_1002FEDB0(*(void *)(a1 + 208));
    id v318 = v13;
    id v18 = [v8 BOOLValueForSetting:1 manufacturer:v15 brand:v16 uuid:v17 error:&v318];
    id v19 = v318;

    if (v19
      || !v18
      || (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1497, @"Found override for downgrade pairing version", v23, v24, v25, v26, v276), [v18 BOOLValue]))
    {
      sub_100300278(*(void *)(a1 + 216), v20, v21, v22, v23, v24, v25, v26, v276);
    }
    uint64_t v27 = *(void *)(a1 + 216);
    uint64_t v28 = sub_1002FEDBC(*(void *)(a1 + 208));
    id v29 = sub_100300B88(v27, v28);

    uint64_t v30 = *(void *)(a1 + 216);
    id v31 = sub_1003128C8(*(void *)(a1 + 208));
    id v32 = sub_1003010CC(v30, v31);

    uint64_t v33 = *(void *)(a1 + 216);
    uint64_t v34 = sub_100014F14(*(void *)(a1 + 32));
    uint64_t v35 = sub_10001A584((uint64_t)v34);
    id v36 = sub_10033EF20((uint64_t)v35);
    id v37 = sub_100300714(v33, v36);

    uint64_t v38 = sub_100014F14(*(void *)(a1 + 32));
    uint64_t v39 = sub_10001A584((uint64_t)v38);
    uint64_t v40 = sub_10033E7F4((uint64_t)v39);

    uint64_t v41 = sub_100014F14(*(void *)(a1 + 32));
    uint64_t v42 = sub_10001A584((uint64_t)v41);
    uint64_t v43 = sub_10033E910((uint64_t)v42);

    if ([*(id *)(a1 + 216) agreedKmlSharingVersion] == 768)
    {
      uint64_t v44 = sub_100014F14(*(void *)(a1 + 32));
      uint64_t v45 = sub_10001A584((uint64_t)v44);
      uint64_t v40 = sub_10033F798((uint64_t)v45);

      id v46 = sub_100014F14(*(void *)(a1 + 32));
      uint64_t v47 = sub_10001A584((uint64_t)v46);
      uint64_t v43 = sub_10033F7A4((uint64_t)v47);
    }
    id v48 = [*(id *)(a1 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1518, (uint64_t)v48, @"options_1: %02x; options_2: %02x",
      v49,
      v50,
      v51,
      v40);
    uint64_t v52 = +[SEEndPointConfiguration configurationWithOpt1:v40 opt2:v43];
    if (v52)
    {
      if (kmlUtilIsFleetKey(v43))
      {
        id v53 = [*(id *)(a1 + 328) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1525, (uint64_t)v53, @"We have received an invitation for a fleet vehicle", v54, v55, v56, v277);
        id v317 = v19;
        long long v57 = [v8 getSettingForKey:@"AllowedFleetManufacturers" error:&v317];
        id v58 = v317;

        if (v58
          || ([*(id *)(a1 + 104) manufacturer],
              uint64_t v59 = objc_claimAutoreleasedReturnValue(),
              unsigned __int8 v60 = [v57 containsObject:v59],
              v59,
              (v60 & 1) == 0))
        {
          id v86 = *(id *)(a1 + 328);
          id v87 = [v86 UTF8String];
          uint64_t v88 = [*(id *)(a1 + 104) manufacturer];

          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1529, (uint64_t)v87, @"%@ is not in allow list for fleet cars", v89, v90, v91, (uint64_t)v88);
          id v76 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          id v77 = [v58 userInfo];
          uint64_t v75 = +[NSError errorWithDomain:v76 code:223 userInfo:v77];
          id v19 = v58;
          goto LABEL_82;
        }
        if (!kmlUtilIsServerIssuedKey(v43)) {
          goto LABEL_19;
        }
        sub_100030AD8(*(void *)(a1 + 32));
        uint64_t v61 = (const __CFData **)objc_claimAutoreleasedReturnValue();
        uint64_t v62 = [*(id *)(a1 + 104) manufacturer];
        BOOL v63 = sub_10030864C(v61, v62);

        if (v63)
        {
          os_signpost_id_t v64 = sub_100030AD8(*(void *)(a1 + 32));
          id v65 = sub_100014F20((uint64_t)v64);

          if (v65)
          {
            id v316 = 0;
            uint64_t v66 = [v8 getSettingForKey:@"AllowedFleetServiceProviders" error:&v316];
            id v19 = v316;
            if (v19
              || (sub_100030AD8(*(void *)(a1 + 32)),
                  uint64_t v67 = objc_claimAutoreleasedReturnValue(),
                  sub_100014F20((uint64_t)v67),
                  uint64_t v68 = objc_claimAutoreleasedReturnValue(),
                  unsigned __int8 v69 = [v66 containsObject:v68],
                  v68,
                  v67,
                  (v69 & 1) == 0))
            {
              id v262 = *(id *)(a1 + 328);
              id v263 = [v262 UTF8String];
              v264 = sub_100030AD8(*(void *)(a1 + 32));

              v265 = sub_100014F20((uint64_t)v264);
              KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1547, (uint64_t)v263, @"%@ is not in allow list for fleet car service provider", v266, v267, v268, (uint64_t)v265);

              id v77 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
              v269 = [v19 userInfo];
              +[NSError errorWithDomain:v77 code:225 userInfo:v269];
              v75 = id v76 = v66;

              goto LABEL_82;
            }

LABEL_19:
            id v19 = 0;
LABEL_28:
            uint64_t v92 = sub_100014F20(*(void *)(a1 + 32));
            long long v57 = sub_10001A584((uint64_t)v92);

            id v93 = [*(id *)(a1 + 328) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1562, (uint64_t)v93, @"FriendSharingManager: Received valid sharing invitation with keyname %@", v94, v95, v96, (uint64_t)v57);
            v304 = v52;
            if (v57)
            {
              uint64_t v97 = kmlUtilSanitizeFriendlyName(v57);
              uint64_t v98 = *(void **)(a1 + 88);
              *(void *)(a1 + 88) = v97;
            }
            else
            {
              uint64_t v98 = *(void **)(a1 + 88);
              *(void *)(a1 + 88) = @"MyFriend1";
            }

            if (sub_1003184DC(*(void *)(a1 + 208))
              || (+[NISession deviceCapabilities],
                  uint64_t v99 = objc_claimAutoreleasedReturnValue(),
                  unsigned __int8 v100 = [v99 supportsPreciseDistanceMeasurement],
                  v99,
                  (v100 & 1) != 0))
            {
              v297 = v57;
              uint64_t v101 = [*(id *)(a1 + 104) manufacturer];
              os_signpost_id_t v102 = [*(id *)(a1 + 104) brand];
              id v103 = sub_1002FEDB0(*(void *)(a1 + 208));
              v104 = [v8 BOOLValueForSetting:0 manufacturer:v101 brand:v102 uuid:v103 error:0];
              unsigned int v105 = [v104 BOOLValue];

              if (!v105) {
                goto LABEL_49;
              }
              id v106 = +[NISession deviceCapabilities];
              unsigned __int8 v107 = [v106 supportsPreciseDistanceMeasurement];

              if (v107) {
                goto LABEL_49;
              }
              uint64_t v108 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
              NSErrorUserInfoKey v320 = NSLocalizedDescriptionKey;
              uint64_t v109 = +[NSString stringWithUTF8String:KmlErrorString(218)];
              v321 = v109;
              NSErrorUserInfoKey v110 = +[NSDictionary dictionaryWithObjects:&v321 forKeys:&v320 count:1];
              uint64_t v75 = +[NSError errorWithDomain:v108 code:218 userInfo:v110];

              int v111 = MGGetSInt32Answer();
              if (v111 == 6)
              {
                if (sub_100074A38())
                {
                  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1621, @"Allowing NFC only watch to have friend key since there is a paired UWB-capable phone", v135, v136, v137, v138, v279);

                  goto LABEL_49;
                }
LABEL_47:
                if (v75)
                {
                  id v77 = *(id *)(a1 + 328);
                  id v139 = [v77 UTF8String];
                  uint64_t v140 = *(void *)(a1 + 112);
                  id v76 = [*(id *)(a1 + 104) brand];
                  KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1627, (uint64_t)v139, @"We don't allow CarKey on NFC only device for (%@, %@)", v141, v142, v143, v140);
                  uint64_t v52 = v304;
                  long long v57 = v297;
                  goto LABEL_82;
                }
LABEL_49:
                uint64_t v144 = [*(id *)(a1 + 104) manufacturer];
                uint64_t v145 = [*(id *)(a1 + 104) brand];
                uint64_t v146 = sub_1002FEDB0(*(void *)(a1 + 208));
                v147 = [v8 BOOLValueForSetting:7 manufacturer:v144 brand:v145 uuid:v146 error:0];
                unsigned __int8 v148 = [v147 BOOLValue];

                if ((v148 & 1) == 0)
                {
                  id v149 = *(id *)(a1 + 328);
                  id v150 = [v149 UTF8String];
                  v151 = [*(id *)(a1 + 104) manufacturer];
                  id v152 = [*(id *)(a1 + 104) brand];

                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1639, (uint64_t)v150, @"UWB is blocked for %@, %@", v153, v154, v155, (uint64_t)v151);
                  sub_100317D44(*(void *)(a1 + 208), v156, v157, v158, v159, v160, v161, v162, v280);
                }
                uint64_t v163 = v18;
                uint64_t v164 = sub_100316988(*(id **)(a1 + 208));
                id v165 = *(id *)(a1 + 328);
                id v166 = [v165 UTF8String];
                v296 = v164;
                v167 = kmlUtilHexStringFromData(v164);

                KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1644, (uint64_t)v166, @"DeviceConfigData: %@", v168, v169, v170, (uint64_t)v167);
                uint64_t v303 = sub_1003400EC((uint64_t)KmlEndpointManager, @"FRND");
                if ([*(id *)(a1 + 216) agreedKmlSharingVersion] == 768)
                {
                  id v171 = [*(id *)(a1 + 328) UTF8String];
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1651, (uint64_t)v171, @"using v3 mailbox sizes", v172, v173, v174, v281);
                  v175 = sub_100014F14(*(void *)(a1 + 32));
                  v176 = sub_10001A584((uint64_t)v175);
                  uint64_t v177 = sub_10033E66C((uint64_t)v176);

                  v178 = sub_100014F14(*(void *)(a1 + 32));
                  v179 = sub_10001A584((uint64_t)v178);
                  uint64_t v180 = sub_10033E43C((uint64_t)v179);
                }
                else
                {
                  v181 = sub_100014F14(*(void *)(a1 + 32));
                  v182 = sub_10001A584((uint64_t)v181);
                  uint64_t v177 = (uint64_t)sub_10033E324((uint64_t)v182);

                  v178 = sub_100014F14(*(void *)(a1 + 32));
                  v179 = sub_10001A584((uint64_t)v178);
                  uint64_t v180 = (uint64_t)sub_10033E20C((uint64_t)v179);
                }
                uint64_t v183 = v180;
                v295 = v163;

                unsigned int v293 = v183;
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlFriendSharingManager *)"getting mailbox data sizes: private: 0x%04x generateFriendEndpoint], v184, v185, v186, v187, v183);
                v188 = sub_100014F14(*(void *)(a1 + 32));
                v189 = sub_10001A584((uint64_t)v188);
                v190 = sub_10033DD5C((uint64_t)v189);
                v302 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v190, 0, v177);

                v292 = sub_100014F14(*(void *)(a1 + 32));
                v291 = sub_10001A584((uint64_t)v292);
                v301 = sub_10033CB34((uint64_t)v291);
                v290 = sub_100014F14(*(void *)(a1 + 32));
                v289 = sub_10001A584((uint64_t)v290);
                v300 = sub_10033CA08((uint64_t)v289);
                uint64_t v191 = *(void *)(a1 + 312);
                v288 = sub_100014F14(*(void *)(a1 + 32));
                v287 = sub_10001A584((uint64_t)v288);
                v299 = sub_10033DE88((uint64_t)v287);
                v286 = sub_100014F14(*(void *)(a1 + 32));
                v285 = sub_10001A584((uint64_t)v286);
                v298 = sub_10033DFB4((uint64_t)v285);
                v284 = sub_100014F14(*(void *)(a1 + 32));
                v192 = sub_10001A584((uint64_t)v284);
                v193 = sub_10033E0E0((uint64_t)v192);
                int v294 = v177;
                if (v177)
                {
                  v194 = +[NSNumber numberWithUnsignedInteger:v177];
                }
                else
                {
                  v194 = 0;
                }
                if (v293)
                {
                  v195 = +[NSNumber numberWithUnsignedInteger:v293];
                }
                else
                {
                  v195 = 0;
                }
                id v315 = v19;
                uint64_t v282 = v191;
                uint64_t v196 = SESEndPointCreateForAlishaWithSession();
                id v197 = v19;

                v198 = *(void **)(a1 + 80);
                *(void *)(a1 + 80) = v196;

                if (v293) {
                if (v294)
                }

                uint64_t v52 = v304;
                if (v197)
                {
                  id v199 = *(id *)(a1 + 328);
                  id v200 = [v199 UTF8String:v282 v299 v298 v193 v302 v194 v195 &v315];
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1681, (uint64_t)v200, @"FriendSharingManager: Failed to create friend key - %@", v201, v202, v203, (uint64_t)v197);

                  uint64_t v75 = sesErrorToKmlError(v197, 0x69u);
                  id v18 = v295;
                  id v76 = v296;
                  long long v57 = v297;
                }
                else
                {
                  id v18 = v295;
                  long long v57 = v297;
                  if ([*(id *)(a1 + 216) agreedKmlSharingVersion] == 768)
                  {
                    id v204 = [*(id *)(a1 + 328) UTF8String];
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1688, (uint64_t)v204, @"using v3 mailbox sizes", v205, v206, v207, v282);
                    v208 = sub_100014F14(*(void *)(a1 + 32));
                    v209 = sub_10001A584((uint64_t)v208);
                    v210 = sub_10033EEEC(v209);

                    v211 = sub_100014F14(*(void *)(a1 + 32));
                    v212 = sub_10001A584((uint64_t)v211);
                    sub_10033EC84(v212);
                  }
                  else
                  {
                    v213 = sub_100014F14(*(void *)(a1 + 32));
                    v214 = sub_10001A584((uint64_t)v213);
                    v210 = sub_10033EB58((uint64_t)v214);

                    v211 = sub_100014F14(*(void *)(a1 + 32));
                    v212 = sub_10001A584((uint64_t)v211);
                    sub_10033EA2C((uint64_t)v212);
                  v215 = };

                  id v216 = [*(id *)(a1 + 328) UTF8String];
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1695, (uint64_t)v216, @"Setting MailBoxes configuration %@ %@", v217, v218, v219, (uint64_t)v210);
                  uint64_t v220 = [*(id *)(a1 + 80) publicKeyIdentifier];
                  v221 = *(void **)(a1 + 96);
                  *(void *)(a1 + 96) = v220;

                  uint64_t v222 = kmlUtilHexStringFromData(*(void **)(a1 + 96));
                  v223 = *(void **)(a1 + 336);
                  *(void *)(a1 + 336) = v222;

                  uint64_t v314 = 0;
                  SESEndPointConfigureMailBoxes();
                  id v224 = 0;
                  if (v224)
                  {
                    v225 = v224;
                    id v226 = *(id *)(a1 + 328);
                    id v227 = [v226 UTF8String];
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1705, (uint64_t)v227, @"FriendSharingManager: Failed to configure friend mailboxes - %@", v228, v229, v230, (uint64_t)v225);

                    v231 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
                    v232 = [v225 userInfo];
                    v233 = +[NSError errorWithDomain:v231 code:105 userInfo:v232];

                    id v197 = v233;
                  }
                  else
                  {
                    uint64_t v313 = 0;
                    uint64_t v234 = SESEndPointCreateEncryptionKey();
                    id v235 = 0;
                    v236 = *(void **)(a1 + 64);
                    *(void *)(a1 + 64) = v234;

                    id v237 = *(id *)(a1 + 328);
                    id v238 = [v237 UTF8String];
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1711, (uint64_t)v238, @"FriendSharingManager: encryption attestation %@", v239, v240, v241, *(void *)(a1 + 64));

                    if (v235)
                    {
                      id v242 = *(id *)(a1 + 328);
                      id v243 = [v242 UTF8String];
                      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1714, (uint64_t)v243, @"FriendSharingManager: Failed to create encryption key - %@", v244, v245, v246, (uint64_t)v235);
                    }
                    v247 = sub_100301734(*(id *)(a1 + 216));
                    id v248 = *(id *)(a1 + 328);
                    id v249 = [v248 UTF8String];
                    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1718, (uint64_t)v249, @"Saving friendly name (%@), reader info (%@) and invitationId (%@)", v250, v251, v252, *(void *)(a1 + 88));

                    v306 = _NSConcreteStackBlock;
                    uint64_t v307 = 3221225472;
                    v308 = sub_100336054;
                    v309 = &unk_10041A6C8;
                    uint64_t v310 = a1;
                    id v311 = v296;
                    id v253 = v247;
                    id v312 = v253;
                    SESEndPointUpdateWithBlock();
                    id v254 = (id)objc_claimAutoreleasedReturnValue();

                    if (v254
                      || [*(id *)(a1 + 216) agreedKmlSharingVersion] == 768
                      && (char v305 = 0x80,
                          +[NSData dataWithBytes:&v305 length:1],
                          v270 = objc_claimAutoreleasedReturnValue(),
                          SESEndPointSetPrivateDataWithSession(),
                          id v254 = 0,
                          v270,
                          v254))
                    {
                      id v255 = [*(id *)(a1 + 328) UTF8String];
                      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1766, (uint64_t)v255, @"Could not update endpoint", v256, v257, v258, v283);
                      v259 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
                      v260 = [v254 userInfo];
                      v261 = +[NSError errorWithDomain:v259 code:105 userInfo:v260];
                    }
                    else
                    {
                      v261 = 0;
                    }
                    id v197 = v261;

                    long long v57 = v297;
                  }
                  id v76 = v296;

                  uint64_t v75 = v197;
                }

                id v19 = v197;
                id v77 = (id)v303;
                goto LABEL_82;
              }
              if (v111 != 1) {
                goto LABEL_47;
              }
              id v112 = +[NRPairedDeviceRegistry sharedInstance];
              id v113 = [v112 getActivePairedDevice];

              if (v113)
              {
                id v114 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C4F6386A-780D-40E5-9900-0A26C16273A1"];
                if (![v113 supportsCapability:v114])
                {
LABEL_41:

                  goto LABEL_42;
                }
                id v115 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81D292E4-16D8-4630-82ED-BDF62B05E334"];
                unsigned int v116 = [v113 supportsCapability:v115];

                if (v116)
                {
                  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager generateFriendEndpoint]", 1615, @"Allowing NFC only phone to have friend key since there is a paired UWB-capable watch", v117, v118, v119, v120, v279);
                  id v114 = v75;
                  uint64_t v75 = 0;
                  goto LABEL_41;
                }
              }
LABEL_42:

              goto LABEL_47;
            }
            id v121 = [*(id *)(a1 + 328) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1582, (uint64_t)v121, @"We have a UWB only reader and NFC only device. Incompatible. Don't create endpoint.", v122, v123, v124, v279);
            id v76 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
            NSErrorUserInfoKey v322 = NSLocalizedDescriptionKey;
            id v77 = +[NSString stringWithUTF8String:KmlErrorString(114)];
            id v323 = v77;
            uint64_t v125 = +[NSDictionary dictionaryWithObjects:&v323 forKeys:&v322 count:1];
            uint64_t v75 = +[NSError errorWithDomain:v76 code:114 userInfo:v125];

LABEL_82:
            id v13 = v19;
LABEL_83:

            goto LABEL_84;
          }
          id v272 = [*(id *)(a1 + 328) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1540, (uint64_t)v272, @"Server endpoint cert missing service provider extension", v273, v274, v275, v278);
          id v76 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v326 = NSLocalizedDescriptionKey;
          id v77 = +[NSString stringWithUTF8String:KmlErrorString(225)];
          id v327 = v77;
          uint64_t v132 = +[NSDictionary dictionaryWithObjects:&v327 forKeys:&v326 count:1];
          v133 = v76;
          uint64_t v134 = 225;
        }
        else
        {
          id v126 = *(id *)(a1 + 328);
          id v127 = [v126 UTF8String];
          v128 = [*(id *)(a1 + 104) manufacturer];

          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1535, (uint64_t)v127, @"Server cert chain is not signed by %@", v129, v130, v131, (uint64_t)v128);
          id v76 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v328 = NSLocalizedDescriptionKey;
          id v77 = +[NSString stringWithUTF8String:KmlErrorString(224)];
          id v329 = v77;
          uint64_t v132 = +[NSDictionary dictionaryWithObjects:&v329 forKeys:&v328 count:1];
          v133 = v76;
          uint64_t v134 = 224;
        }
        uint64_t v75 = +[NSError errorWithDomain:v133 code:v134 userInfo:v132];

        id v19 = 0;
        goto LABEL_82;
      }
      if (!kmlUtilIsServerIssuedKey(v43)) {
        goto LABEL_28;
      }
      id v82 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1556, (uint64_t)v82, @"We have received an invitation for private car from server", v83, v84, v85, v277);
      long long v57 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v324 = NSLocalizedDescriptionKey;
      id v76 = +[NSString stringWithUTF8String:KmlErrorString(225)];
      v325 = v76;
      id v77 = +[NSDictionary dictionaryWithObjects:&v325 forKeys:&v324 count:1];
      os_signpost_id_t v78 = v57;
      uint64_t v79 = 225;
    }
    else
    {
      long long v57 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      v330[0] = NSLocalizedDescriptionKey;
      id v76 = +[NSString stringWithUTF8String:KmlErrorString(105)];
      v330[1] = NSLocalizedFailureReasonErrorKey;
      v331[0] = v76;
      v331[1] = @"Invalid endpoint configuration option group values (RFU bits set)";
      id v77 = +[NSDictionary dictionaryWithObjects:v331 forKeys:v330 count:2];
      os_signpost_id_t v78 = v57;
      uint64_t v79 = 105;
    }
    uint64_t v75 = +[NSError errorWithDomain:v78 code:v79 userInfo:v77];
    goto LABEL_82;
  }
  uint64_t v75 = 0;
LABEL_84:

  return v75;
}

void sub_100334700(uint64_t a1)
{
  if (!a1) {
    return;
  }
  id v2 = sub_100014F14(*(void *)(a1 + 32));
  id v3 = sub_10001A584((uint64_t)v2);
  if (!sub_10033F418((uint64_t)v3))
  {

    goto LABEL_6;
  }
  uint64_t v4 = sub_100014F14(*(void *)(a1 + 32));
  uint64_t v5 = sub_10001A584((uint64_t)v4);
  int v6 = sub_10033F53C((uint64_t)v5);

  if (!v6)
  {
LABEL_6:
    int v7 = 0;
    goto LABEL_7;
  }
  ++*(void *)(a1 + 296);
  int v7 = 1;
LABEL_7:
  uint64_t v11 = objc_alloc_init(KeySigningRequest);
  sub_100309D6C((uint64_t)v11, *(void **)(a1 + 216));
  if (v7) {
    uint64_t v8 = *(void **)(a1 + 144);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = sub_10030954C((uint64_t)v11, *(void *)(a1 + 80), *(void **)(a1 + 64), v8);
  id v10 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v9;
}

void sub_100334818(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = 0;

    id v3 = [*(id *)(a1 + 104) manufacturer];
    uint64_t v4 = SESEndpointGetBindingAttestationRequestWithSession();
    id v5 = 0;

    if (v5)
    {
      id v6 = *(id *)(a1 + 328);
      id v7 = [v6 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1856, (uint64_t)v7, @"Failed to get binding attestation data with error : %@", v8, v9, v10, (uint64_t)v5);

      uint64_t v11 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      uint64_t v12 = [v5 userInfo];
      uint64_t v13 = +[NSError errorWithDomain:v11 code:112 userInfo:v12];
      unsigned __int8 v14 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = v13;
    }
    else
    {
      id v15 = objc_alloc((Class)DAKeyBindingAttestationRequestData);
      uint64_t v16 = *(void *)(a1 + 352);
      uint64_t v11 = [v4 subCAAttestation];
      uint64_t v12 = [v4 casdECDSACertificate];
      uint64_t v17 = [v4 casdRSACertificate];
      id v18 = [v15 initWithSharingSessionIdentifier:v16 subCaAttestation:v11 casd:v12 rsaCertData:v17];
      id v19 = *(void **)(a1 + 200);
      *(void *)(a1 + 200) = v18;

      unsigned __int8 v14 = 0;
      id v5 = (id)v17;
    }
  }
}

void sub_1003349CC(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = 0;

    id v3 = [*(id *)(a1 + 104) readerIdentifier];
    uint64_t v4 = kmlUtilDataForHexString(v3);

    id v5 = sub_100315D20((uint64_t)KmlTlv, 77, v4);
    id v6 = sub_100316294((uint64_t)v5);
    id v7 = SESEndPointPrivacyEncryption();
    id v8 = 0;

    if (v8)
    {
      id v9 = *(id *)(a1 + 328);
      id v10 = [v9 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1879, (uint64_t)v10, @"Failed to encrypt pre-track request with - %@", v11, v12, v13, (uint64_t)v8);

      uint64_t v14 = sesErrorToKmlError(v8, 0x78u);
      id v15 = *(void **)(a1 + 272);
      *(void *)(a1 + 272) = v14;
    }
    else
    {
      id v16 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
      uint64_t v17 = [v7 version];
      id v15 = [v7 ephemeralPublicKeydata];
      id v18 = [v7 receiverPublicKeyHash];
      id v19 = [v7 cipherText];
      id v20 = [v16 initWithVersion:v17 ephemeralPublicKey:v15 publicKeyHash:v18 encryptedRequest:v19];
      uint64_t v21 = *(void **)(a1 + 184);
      *(void *)(a1 + 184) = v20;

      id v8 = (id)v17;
    }
  }
}

void sub_100334B98(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 264);
    if (*(void *)(a1 + 344))
    {
      if (v2)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));
        [WeakRetained handleCrossPlatformSigningRequest:0 status:*(void *)(a1 + 264) keyInformation:0];
      }
      else
      {
        id WeakRetained = [objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData) initWithSharingIdentifier:*(void *)(a1 + 328) friendKeyIdentifier:*(void *)(a1 + 336) sharingMessageType:2 message:*(void *)(a1 + 48)];
        id v4 = [objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData) initWithSharingSessionUUID:*(void *)(a1 + 352) bindingAttestation:*(void *)(a1 + 136) targetDeviceType:*(void *)(a1 + 360) initiatorIdsPseudonym:0];
        id v5 = [objc_alloc((Class)DACarKeyPrivateCrossPlatformSharingData) initWithVehicleEnteredPasscode:0 pairedEntityIdentifier:*(void *)(a1 + 312)];
        id v6 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:WeakRetained additionalData:v4 privateData:v5];
        id v7 = objc_loadWeakRetained((id *)(a1 + 304));
        [v7 handleCrossPlatformSigningRequest:v6 status:0 keyInformation:*(void *)(a1 + 320)];
      }
    }
    else
    {
      if (v2)
      {
        id v3 = objc_loadWeakRetained((id *)(a1 + 304));
        [v3 handleExchangeStartedWithFriendKey:0 status:*(void *)(a1 + 264)];
      }
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 304));
      [WeakRetained handleExchangeStartedWithFriendKey:*(void *)(a1 + 320) status:0];
    }
  }
}

void sub_100334D00(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    uint64_t v2 = sub_10030ACB8(*(void *)(a1 + 56));
    id v3 = *(id *)(v1 + 328);
    id v4 = [v3 UTF8String];
    id v5 = kmlUtilHexStringFromData(v2);

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1995, (uint64_t)v4, @"MailboxMappingData: %@", v6, v7, v8, (uint64_t)v5);
    id v9 = *(id *)(v1 + 328);
    id v10 = [v9 UTF8String];
    uint64_t v11 = sub_100014F14(*(void *)(v1 + 56));

    uint64_t v12 = sub_100316294((uint64_t)v11);
    uint64_t v13 = kmlUtilHexStringFromData(v12);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1997, (uint64_t)v10, @"Key attestation - %@", v14, v15, v16, (uint64_t)v13);

    unsigned __int8 v107 = +[NSMutableData data];
    uint64_t v17 = sub_100014F14(*(void *)(v1 + 56));
    id v18 = sub_100316294((uint64_t)v17);
    id v19 = sub_100315960((uint64_t)KmlTlv, v18);

    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    id v20 = v19;
    id v21 = [v20 countByEnumeratingWithState:&v117 objects:v123 count:16];
    unsigned int v105 = v2;
    id v106 = v20;
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v118;
LABEL_4:
      uint64_t v24 = 0;
      while (1)
      {
        if (*(void *)v118 != v23) {
          objc_enumerationMutation(v20);
        }
        uint64_t v25 = *(id **)(*((void *)&v117 + 1) + 8 * v24);
        if (sub_10005D5A8((uint64_t)v25) == 32549) {
          break;
        }
        if (v22 == (id)++v24)
        {
          id v22 = [v20 countByEnumeratingWithState:&v117 objects:v123 count:16];
          if (v22) {
            goto LABEL_4;
          }
          goto LABEL_10;
        }
      }
      uint64_t v26 = sub_100315FB4(v25);
      uint64_t v27 = sub_100315960((uint64_t)KmlTlv, v26);

      uint64_t v108 = (void *)v27;
      if (!v27) {
        goto LABEL_30;
      }
      uint64_t v104 = v1;
      long long v115 = 0u;
      long long v116 = 0u;
      long long v113 = 0u;
      long long v114 = 0u;
      id v28 = [&off_10042DC10 countByEnumeratingWithState:&v113 objects:v122 count:16];
      if (v28)
      {
        id v29 = v28;
        uint64_t v30 = *(void *)v114;
        do
        {
          for (i = 0; i != v29; i = (char *)i + 1)
          {
            if (*(void *)v114 != v30) {
              objc_enumerationMutation(&off_10042DC10);
            }
            id v32 = *(void **)(*((void *)&v113 + 1) + 8 * i);
            long long v109 = 0u;
            long long v110 = 0u;
            long long v111 = 0u;
            long long v112 = 0u;
            id v33 = v108;
            id v34 = [v33 countByEnumeratingWithState:&v109 objects:v121 count:16];
            if (v34)
            {
              id v35 = v34;
              uint64_t v36 = *(void *)v110;
              while (2)
              {
                for (j = 0; j != v35; j = (char *)j + 1)
                {
                  if (*(void *)v110 != v36) {
                    objc_enumerationMutation(v33);
                  }
                  uint64_t v38 = *(void *)(*((void *)&v109 + 1) + 8 * (void)j);
                  int v39 = sub_10005D5A8(v38);
                  if (v39 == [v32 unsignedIntValue])
                  {
                    uint64_t v40 = sub_100316294(v38);
                    [v107 appendData:v40];

                    goto LABEL_27;
                  }
                }
                id v35 = [v33 countByEnumeratingWithState:&v109 objects:v121 count:16];
                if (v35) {
                  continue;
                }
                break;
              }
            }
LABEL_27:
          }
          id v29 = [&off_10042DC10 countByEnumeratingWithState:&v113 objects:v122 count:16];
        }
        while (v29);
      }

      uint64_t v1 = v104;
    }
    else
    {
LABEL_10:

LABEL_30:
      id v41 = [*(id *)(v1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2011, (uint64_t)v41, @"Signed request validation needs to catch this, at this point we just continue", v42, v43, v44, v101);
    }
    uint64_t v45 = sub_100056FE4(*(void *)(v1 + 56));
    id v46 = sub_100316294((uint64_t)v45);
    [v107 appendData:v46];

    id v47 = *(id *)(v1 + 328);
    id v48 = [v47 UTF8String];
    uint64_t v49 = kmlUtilHexStringFromData(v107);

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2030, (uint64_t)v48, @"Key attestation Data - %@", v50, v51, v52, (uint64_t)v49);
    objc_storeStrong((id *)(v1 + 120), v107);
    id v53 = *(id *)(v1 + 328);
    id v54 = [v53 UTF8String];
    uint64_t v55 = kmlUtilHexStringFromData(*(void **)(v1 + 120));

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2033, (uint64_t)v54, @"Friend Attestation Package data %@", v56, v57, v58, (uint64_t)v55);
    uint64_t v59 = sub_10030ACC4(*(void *)(v1 + 56));

    if (v59)
    {
      uint64_t v60 = *(void *)(v1 + 208);
      uint64_t v61 = sub_10030ACC4(*(void *)(v1 + 56));
      sub_100316FB0(v60, v61);

      uint64_t v62 = objc_opt_new();
      BOOL v63 = [*(id *)(v1 + 104) manufacturer];
      os_signpost_id_t v64 = [*(id *)(v1 + 104) brand];
      id v65 = sub_1002FEDB0(*(void *)(v1 + 208));
      uint64_t v66 = [v62 BOOLValueForSetting:7 manufacturer:v63 brand:v64 uuid:v65 error:0];
      unsigned __int8 v67 = [v66 BOOLValue];

      if ((v67 & 1) == 0)
      {
        id v68 = *(id *)(v1 + 328);
        id v69 = [v68 UTF8String];
        id v70 = [*(id *)(v1 + 104) manufacturer];
        id v71 = [*(id *)(v1 + 104) brand];

        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2045, (uint64_t)v69, @"UWB is blocked for %@, %@", v72, v73, v74, (uint64_t)v70);
        sub_100317D44(*(void *)(v1 + 208), v75, v76, v77, v78, v79, v80, v81, v103);
      }
    }
    id v82 = v105;
    id v83 = v107;
    uint64_t v84 = SESEndPointUpdateWithBlock();
    if (sub_1003184F0(*(void *)(v1 + 208)))
    {
      uint64_t v85 = +[NISession deviceCapabilities];
      unsigned int v86 = [v85 supportsPreciseDistanceMeasurement];

      id v87 = v106;
      if (v86)
      {
        id v88 = [*(id *)(v1 + 328) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2090, (uint64_t)v88, @"disable full power express over nfc for uwb capable key", v89, v90, v91, v102);
        SESEndPointConfigureNFCExpressInLPM();
        id v92 = v84;

        uint64_t v84 = v92;
      }
    }
    else
    {
      id v87 = v106;
    }
    if (v84)
    {
      id v93 = [*(id *)(v1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2095, (uint64_t)v93, @"Could not update endpoint", v94, v95, v96, v102);
    }
    id v97 = [*(id *)(v1 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2099, (uint64_t)v97, @"FriendSharingManager: Saved Mailbox Data from signed request successfully", v98, v99, v100, v102);
    sub_10032D4EC(v1, 32);
  }
}

void sub_1003354E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 80))
    {
      id v10 = +[NSMutableArray array];
      uint64_t v11 = sub_100315D20((uint64_t)KmlTlv, 32565, *(void **)(a1 + 120));
      [v10 addObject:v11];

      uint64_t v12 = [*(id *)(a1 + 80) certificates];
      uint64_t v13 = [v12 objectAtIndexedSubscript:2];
      uint64_t v14 = sub_100315D20((uint64_t)KmlTlv, 32548, v13);
      [v10 addObject:v14];

      uint64_t v15 = [v12 objectAtIndexedSubscript:1];
      uint64_t v16 = sub_100315D20((uint64_t)KmlTlv, 32546, v15);
      [v10 addObject:v16];

      if (sub_100316F24(*(void *)(a1 + 208)) && sub_100316F5C(*(void *)(a1 + 208)))
      {
        uint64_t v64 = 0;
        uint64_t v17 = SESEndPointCreateEncryptionKey();
        id v18 = 0;
        if (v18)
        {
          id v19 = *(id *)(a1 + 328);
          id v20 = [v19 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2283, (uint64_t)v20, @"Error getting endpoint encryption key - %@", v21, v22, v23, (uint64_t)v18);

          uint64_t v17 = 0;
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      uint64_t v24 = [*(id *)(a1 + 80) privacyPublicKey];
      uint64_t v25 = sub_100315D20((uint64_t)KmlTlv, 24393, v24);
      [v10 addObject:v25];

      uint64_t v26 = [@"ECIES_v1" dataUsingEncoding:4];
      uint64_t v27 = sub_100315D20((uint64_t)KmlTlv, 218, v26);
      [v10 addObject:v27];

      if ([*(id *)(a1 + 216) agreedKmlSharingVersion] == 768)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlFriendSharingManager buildTrackingRequest]", 2296, @"Add account info hash", v28, v29, v30, v31, v59);
        id v32 = *(void **)(a1 + 224);
        id v33 = [*(id *)(a1 + 104) readerIdentifier];
        id v34 = kmlUtilDataForHexString(v33);
        id v35 = kmlUtilGenerateAccountInfoHash(v32, v34);

        uint64_t v36 = sub_100315D20((uint64_t)KmlTlv, 94, v35);
        [v10 addObject:v36];
      }
      id v37 = +[NSMutableData data];
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      id v38 = v10;
      id v39 = [v38 countByEnumeratingWithState:&v60 objects:v65 count:16];
      if (v39)
      {
        id v40 = v39;
        uint64_t v41 = *(void *)v61;
        do
        {
          for (i = 0; i != v40; i = (char *)i + 1)
          {
            if (*(void *)v61 != v41) {
              objc_enumerationMutation(v38);
            }
            uint64_t v43 = *(void *)(*((void *)&v60 + 1) + 8 * i);
            if (sub_10005D5A8(v43) == 24393 && v17 != 0) {
              [v37 appendData:v17];
            }
            uint64_t v45 = sub_100316294(v43);
            [v37 appendData:v45];
          }
          id v40 = [v38 countByEnumeratingWithState:&v60 objects:v65 count:16];
        }
        while (v40);
      }

      id v46 = sub_10030ACD0(*(void *)(a1 + 56));

      if (v46)
      {
        id v47 = [*(id *)(a1 + 328) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2314, (uint64_t)v47, @"refreshed instance CA cert received from owner. Adding it to tracking request", v48, v49, v50, v59);
        uint64_t v51 = sub_10030ACD0(*(void *)(a1 + 56));
        [v37 appendData:v51];
      }
      uint64_t v52 = sub_100315D20((uint64_t)KmlTlv, 32568, v37);
      uint64_t v53 = sub_100316294((uint64_t)v52);
      id v54 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = v53;

      kmlUtilLogLargeData(@"plaintext tracking request", *(void **)(a1 + 128));
    }
    else
    {
      id v55 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2260, (uint64_t)v55, @"We don't have an endpoint to create tracking request.", v56, v57, v58, a9);
    }
  }
}

id sub_1003359F0(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 128))
    {
      v51[1] = 0;
      uint64_t v2 = SESEndPointPrivacyEncryption();
      id v3 = 0;
      if (v3)
      {
        id v4 = v3;
        id v5 = *(id *)(a1 + 328);
        id v6 = [v5 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2332, (uint64_t)v6, @"Failed to encrypt friend tracking request with - %@", v7, v8, v9, (uint64_t)v4);

        id v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        uint64_t v11 = [v4 userInfo];
        uint64_t v12 = +[NSError errorWithDomain:v10 code:105 userInfo:v11];

        id v13 = v12;
        uint64_t v14 = v13;
      }
      else
      {
        uint64_t v16 = [v2 version];
        if ([*(id *)(a1 + 216) agreedKmlSharingVersion] == 768)
        {
          id v17 = [*(id *)(a1 + 328) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2354, (uint64_t)v17, @"Version string : %@", v18, v19, v20, (uint64_t)v16);
        }
        id v21 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
        uint64_t v22 = [v2 ephemeralPublicKeydata];
        uint64_t v23 = [v2 receiverPublicKeyHash];
        uint64_t v24 = [v2 cipherText];
        id v25 = [v21 initWithVersion:v16 ephemeralPublicKey:v22 publicKeyHash:v23 encryptedRequest:v24];
        uint64_t v26 = *(void **)(a1 + 176);
        *(void *)(a1 + 176) = v25;

        uint64_t v27 = *(void **)(a1 + 176);
        v51[0] = 0;
        uint64_t v28 = [v27 encodeWithError:v51];
        id v29 = v51[0];
        if (v29 || !v28)
        {
          id v40 = *(id *)(a1 + 328);
          id v41 = [v40 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2361, (uint64_t)v41, @"Encode key tracking request error %@, trackingRequestData=%@", v42, v43, v44, (uint64_t)v29);

          uint64_t v45 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          id v46 = [v29 userInfo];
          id v47 = +[NSError errorWithDomain:v45 code:105 userInfo:v46];

          id v13 = v47;
        }
        else
        {
          uint64_t v30 = [*(id *)(a1 + 80) publicKeyIdentifier];
          uint64_t v31 = kmlUtilHexStringFromData(v30);
          id v50 = v28;
          id v32 = SESEndPointUpdateWithBlock();

          if (v32)
          {
            id v33 = [*(id *)(a1 + 328) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2376, (uint64_t)v33, @"Could not update endpoint", v34, v35, v36, v49);
            id v37 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
            id v38 = [v32 userInfo];
            id v39 = +[NSError errorWithDomain:v37 code:105 userInfo:v38];
          }
          else
          {
            id v39 = 0;
          }
          id v13 = v39;
        }
        uint64_t v14 = v13;
      }
    }
    else
    {
      id v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v52 = NSLocalizedDescriptionKey;
      uint64_t v2 = +[NSString stringWithUTF8String:KmlErrorString(104)];
      uint64_t v53 = v2;
      uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
      uint64_t v14 = +[NSError errorWithDomain:v13 code:104 userInfo:v15];
    }
  }
  else
  {
    uint64_t v14 = 0;
  }

  return v14;
}

void sub_100335EC4(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2216, (uint64_t)v2, @"Sending cancel message.", v3, v4, v5, v11);
    id v6 = sub_1003222E0([KmlCancelMessage alloc], (int)[*(id *)(a1 + 264) code]);
    sub_10032236C((uint64_t)v6);
    id v12 = (id)objc_claimAutoreleasedReturnValue();

    if (*(void *)(a1 + 344))
    {
      id v7 = [objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData) initWithSharingIdentifier:*(void *)(a1 + 328) friendKeyIdentifier:0 sharingMessageType:5 message:v12];
      id v8 = [objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData) initWithSharingSessionUUID:*(void *)(a1 + 352) bindingAttestation:0 targetDeviceType:*(void *)(a1 + 360) initiatorIdsPseudonym:0];
      id v9 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:v7 additionalData:v8 privateData:0];
      id v10 = +[KmlClientReporterFactory getReporter];
      [v10 sendCrossPlatformSharingMessage:v9 toMailboxIdentifier:*(void *)(a1 + 344)];
      sub_10032D4EC(a1, 52);
    }
    else
    {
      sub_10031E4A0(*(void *)(a1 + 240), v12, 0, 0, *(void **)(a1 + 328), 0, *(void **)(a1 + 352), *(void **)(a1 + 72), *(void *)(a1 + 360), 5);
    }
  }
}

void sub_100336054(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_1002FEDB0(*(void *)(a1[4] + 208));
  [v3 setReaderConfigID:v4];

  [v3 setFriendlyName:*(void *)(a1[4] + 88)];
  [v3 setReaderInfo:*(void *)(a1[4] + 312)];
  [v3 setInvitationIdentifier:*(void *)(a1[4] + 328)];
  uint64_t v5 = (uint64_t *)a1[4];
  id v6 = (void *)v5[44];
  if (v6)
  {
    id v7 = [v6 UUIDString];
    [v3 setSharingSessionUUID:v7];

    uint64_t v5 = (uint64_t *)a1[4];
  }
  if (v5[9])
  {
    [v3 setOwnerIDSIdentifier:];
    uint64_t v5 = (uint64_t *)a1[4];
  }
  id v8 = sub_100014F14(v5[4]);
  id v9 = sub_10001A584((uint64_t)v8);
  id v10 = sub_10033E0E0((uint64_t)v9);
  uint64_t v11 = kmlUtilGetDckIdFromSlotId(v10);
  [v3 setBleDCKIdentifier:v11];

  [v3 setDeviceConfiguration:a1[5]];
  id v12 = sub_10030ACB8(*(void *)(a1[4] + 208));
  [v3 setBleIntroKey:v12];

  id v13 = sub_100056FE4(*(void *)(a1[4] + 208));
  [v3 setBleOOBKey:v13];

  uint64_t v14 = sub_100313DBC(*(void *)(a1[4] + 208));
  [v3 setBleAddress:v14];

  [v3 setVehicleSupportedVersionsData:a1[6]];
  uint64_t v15 = sub_100014F14(*(void *)(a1[4] + 32));
  uint64_t v16 = sub_10001A584((uint64_t)v15);
  id v17 = sub_10033E67C((uint64_t)v16);
  [v3 setMailboxSizesPlusAdditionalData:v17];

  uint64_t v18 = a1[4];
  if (*(void *)(v18 + 224))
  {
    [v3 setAnonymizedDsid:];
    uint64_t v18 = a1[4];
  }
  uint64_t v19 = *(void **)(v18 + 80);
  *(void *)(v18 + 80) = v3;
}

void sub_100336268(uint64_t a1)
{
  id v2 = objc_alloc_init(KeySigningRequest);
  sub_100309D6C((uint64_t)v2, *(void **)(*(void *)(a1 + 32) + 216));
  char v3 = sub_1003098BC((uint64_t)v2, *(void **)(*(void *)(a1 + 32) + 48));
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = sub_100309CE4(v2, *(void **)(v4 + 144));
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 48);
    *(void *)(v6 + 48) = v5;

    ++*(void *)(*(void *)(a1 + 32) + 296);
    sub_100332B80(*(void *)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 32);
    if (v8) {
      id v9 = *(void **)(v8 + 328);
    }
    else {
      id v9 = 0;
    }
    id v10 = [v9 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 1804, (uint64_t)v10, @"Sending signing request with new passcode", v11, v12, v13, v30);
    uint64_t v14 = +[NSString stringWithFormat:@"Passcode Retry SigningRequest - %@", *(void *)(*(void *)(a1 + 32) + 328)];
    kmlUtilLogLargeData(v14, *(void **)(*(void *)(a1 + 32) + 48));

    uint64_t v15 = *(void *)(a1 + 32);
    if (!*(void *)(v15 + 344))
    {
      sub_10031E4A0(*(void *)(v15 + 240), *(void **)(v15 + 48), 0, *(void **)(v15 + 136), *(void **)(v15 + 328), *(void **)(v15 + 336), *(void **)(v15 + 352), *(void **)(v15 + 72), 1, 7);
      goto LABEL_12;
    }
    id v16 = [objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData) initWithSharingIdentifier:*(void *)(*(void *)(a1 + 32) + 328) friendKeyIdentifier:*(void *)(*(void *)(a1 + 32) + 336) sharingMessageType:7 message:*(void *)(*(void *)(a1 + 32) + 48)];
    id v17 = [objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData) initWithSharingSessionUUID:*(void *)(*(void *)(a1 + 32) + 352) bindingAttestation:*(void *)(*(void *)(a1 + 32) + 136) targetDeviceType:*(void *)(*(void *)(a1 + 32) + 360) initiatorIdsPseudonym:0];
    id v18 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:v16 additionalData:v17 privateData:0];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 304));
    [WeakRetained handleCrossPlatformSigningRequest:v18 status:0 keyInformation:*(void *)(*(void *)(a1 + 32) + 320)];

    uint64_t v20 = +[KmlClientReporterFactory getReporter];
    [v20 sendCrossPlatformSharingMessage:v18 toMailboxIdentifier:*(void *)(*(void *)(a1 + 32) + 344)];

    goto LABEL_10;
  }
  if (v4) {
    id v21 = *(void **)(v4 + 328);
  }
  else {
    id v21 = 0;
  }
  id v22 = [v21 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 1791, (uint64_t)v22, @"Failed to parse signingRequest that we just built", v23, v24, v25, v30);
  uint64_t v26 = *(void *)(a1 + 32);
  if (*(void *)(v26 + 344))
  {
    id v16 = objc_loadWeakRetained((id *)(v26 + 304));
    id v17 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    uint64_t v27 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    id v32 = v27;
    uint64_t v28 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    id v29 = +[NSError errorWithDomain:v17 code:109 userInfo:v28];
    [v16 handleCrossPlatformSigningRequest:0 status:v29 keyInformation:*(void *)(*(void *)(a1 + 32) + 320)];

LABEL_10:
  }
LABEL_12:
}

id sub_1003365C4(uint64_t a1)
{
  if (a1)
  {
    id v2 = SESEndPointCreateKeyPair();
    id v7 = 0;
    if (v7)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlFriendSharingManager createEphemeralPrivacyEncryptionKeys]", 1953, @"Failed to create ephemeral key pair", v3, v4, v5, v6, v14);
      id v8 = v7;
    }
    else
    {
      uint64_t v9 = [v2 publicKey];
      id v10 = *(void **)(a1 + 160);
      *(void *)(a1 + 160) = v9;

      uint64_t v11 = [v2 secretKey];
      uint64_t v12 = *(void **)(a1 + 168);
      *(void *)(a1 + 168) = v11;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_100336694(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setMailboxMapping:*(void *)(a1 + 32)];
  [v3 setSharingAttestationData:*(void *)(a1 + 40)];
  uint64_t v4 = sub_10030ACEC(*(void *)(*(void *)(a1 + 48) + 56));
  id v5 = [v4 count];

  if (v5)
  {
    uint64_t v6 = sub_10030ACEC(*(void *)(*(void *)(a1 + 48) + 56));
    [v3 setAdditionalAttestationsDict:v6];
  }
  uint64_t v7 = sub_100030AD8(*(void *)(*(void *)(a1 + 48) + 56));
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = sub_100014F20(*(void *)(*(void *)(a1 + 48) + 56));

    if (v9)
    {
      sub_100030AD8(*(void *)(*(void *)(a1 + 48) + 56));
      id v10 = (id *)objc_claimAutoreleasedReturnValue();
      uint64_t v11 = sub_100315FB4(v10);
      [v3 setOwnerEphemeralKey:v11];

      sub_100014F20(*(void *)(*(void *)(a1 + 48) + 56));
      uint64_t v12 = (id *)objc_claimAutoreleasedReturnValue();
      uint64_t v13 = sub_100315FB4(v12);
      [v3 setSharingEncryptedData:v13];
    }
  }
  uint64_t v14 = *(void *)(a1 + 48);
  if (*(void *)(v14 + 344) && *(void *)(v14 + 72))
  {
    id v15 = *(id *)(v14 + 328);
    id v16 = [v15 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2068, (uint64_t)v16, @"Owner is apple device with IDS ID %@", v17, v18, v19, *(void *)(*(void *)(a1 + 48) + 72));

    [v3 setOwnerIDSIdentifier:*(void *)(*(void *)(a1 + 48) + 72)];
    uint64_t v14 = *(void *)(a1 + 48);
  }
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v20 = sub_100316988(*(id **)(v14 + 208));
    [v3 setDeviceConfiguration:v20];

    id v21 = sub_10030ACB8(*(void *)(*(void *)(a1 + 48) + 208));
    [v3 setBleIntroKey:v21];

    id v22 = sub_100056FE4(*(void *)(*(void *)(a1 + 48) + 208));
    [v3 setBleOOBKey:v22];

    uint64_t v23 = sub_100313DBC(*(void *)(*(void *)(a1 + 48) + 208));
    [v3 setBleAddress:v23];

    uint64_t v14 = *(void *)(a1 + 48);
  }
  uint64_t v24 = *(void **)(v14 + 80);
  *(void *)(v14 + 80) = v3;
}

void sub_1003368E8(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[ACAccountStore defaultStore];
    uint64_t v25 = ACAccountTypeIdentifierAppleAccount;
    id v3 = +[NSArray arrayWithObjects:&v25 count:1];
    id v23 = 0;
    uint64_t v4 = [v2 accountsWithAccountTypeIdentifiers:v3 error:&v23];
    id v5 = v23;
    uint64_t v6 = [v4 firstObject];

    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      id v17 = objc_alloc_init((Class)AKDeviceListRequestContext);
      uint64_t v18 = [v6 aa_altDSID];
      [v17 setAltDSID:v18];

      [v17 setIncludeUntrustedDevices:1];
      uint64_t v24 = AKServiceNameiCloud;
      uint64_t v19 = +[NSArray arrayWithObjects:&v24 count:1];
      [v17 setServices:v19];

      [v17 setOperatingSystems:&off_10042DC28];
      id v20 = objc_alloc_init((Class)AKAppleIDAuthenticationController);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_100336B60;
      v22[3] = &unk_10041A718;
      v22[4] = a1;
      [v20 deviceListWithContext:v17 completion:v22];

      id v5 = v17;
    }
    else
    {
      id v8 = *(id *)(a1 + 328);
      id v9 = [v8 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2112, (uint64_t)v9, @"Failed to lookup account : %@", v10, v11, v12, (uint64_t)v5);

      id v13 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2113, (uint64_t)v13, @"We are not going to handle this invite. clean up", v14, v15, v16, v21);
      sub_10032D4EC(a1, 52);
    }
  }
}

void sub_100336B60(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = [a2 deviceList];
  BOOL v7 = v6;
  if (v5 || ![v6 count])
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = *(NSObject **)(v8 + 280);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100336CF0;
    block[3] = &unk_10040D1A0;
    void block[4] = v8;
    id v26 = v5;
    dispatch_async(v9, block);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      uint64_t v11 = *(void **)(v10 + 328);
    }
    else {
      uint64_t v11 = 0;
    }
    id v12 = [v11 UTF8String];
    id v13 = [v7 objectAtIndexedSubscript:0];
    uint64_t v14 = [v13 name];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2127, (uint64_t)v12, @"Found at least one watch on our account with device name %@", v15, v16, v17, (uint64_t)v14);

    uint64_t v18 = *(void *)(a1 + 32);
    if (v18) {
      uint64_t v19 = *(void **)(v18 + 328);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = [v19 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2128, (uint64_t)v20, @"We are not going to handle this invite. clean up", v21, v22, v23, v24);
    sub_10032D4EC(*(void *)(a1 + 32), 52);
  }
}

uint64_t sub_100336CF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 328);
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;
  id v5 = [v4 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2132, (uint64_t)v5, @"No watch found on our account %@", v6, v7, v8, *(void *)(a1 + 40));

  *(unsigned char *)(*(void *)(a1 + 32) + 232) = 1;
  *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
  uint64_t v10 = +[NSString stringWithUTF8String:KmlErrorString(113)];
  uint64_t v17 = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v17 forKeys:&v16 count:1];
  uint64_t v12 = +[NSError errorWithDomain:v9 code:113 userInfo:v11];
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 264);
  *(void *)(v13 + 264) = v12;

  return sub_10032D4EC(*(void *)(a1 + 32), 21);
}

void sub_100336E78(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTrackingRequest:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(v4 + 224))
  {
    [v3 setAnonymizedDsid:];
    uint64_t v4 = *(void *)(a1 + 40);
  }
  id v5 = *(void **)(v4 + 80);
  *(void *)(v4 + 80) = v3;
}

uint64_t sub_100336ED8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 8);
    uint64_t result = 1;
    switch(v1)
    {
      case 0:
      case 1:
      case 2:
      case 3:
        return result;
      case 11:
        uint64_t result = 2;
        break;
      case 12:
      case 13:
        uint64_t result = 3;
        break;
      case 21:
      case 22:
        uint64_t result = 4;
        break;
      case 23:
        uint64_t result = 5;
        break;
      default:
        uint64_t result = 6;
        break;
    }
  }
  return result;
}

void sub_100336FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return;
  }
  uint64_t v10 = (id *)(a1 + 80);
  if (*(void *)(a1 + 80))
  {
    id v11 = [*(id *)(a1 + 328) UTF8String];
    uint64_t v15 = @"We already have our endpoint. No need to look up endpoint";
    uint64_t v16 = 2477;
LABEL_4:
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", v16, (uint64_t)v11, v15, v12, v13, v14, a9);
    return;
  }
  uint64_t v17 = *(void *)(a1 + 336);
  id v18 = *(id *)(a1 + 328);
  if (!v17)
  {
    id v11 = [v18 UTF8String];
    uint64_t v15 = @"We have no way to look up our endpoint for re-generated object";
    uint64_t v16 = 2482;
    goto LABEL_4;
  }
  id v19 = v18;
  id v20 = [v19 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2486, (uint64_t)v20, @"Looking for endpoint with id %@", v21, v22, v23, *(void *)(a1 + 336));

  uint64_t v67 = 0;
  uint64_t v24 = SESEndPointList();
  id v25 = 0;
  if (v25)
  {
    id v26 = *(id *)(a1 + 328);
    id v27 = [v26 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2490, (uint64_t)v27, @"Error in getting endpoint list: %@", v28, v29, v30, (uint64_t)v25);
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v62 = v24;
    id v31 = v24;
    id v32 = [v31 countByEnumeratingWithState:&v63 objects:v68 count:16];
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = *(void *)v64;
      while (2)
      {
        for (i = 0; i != v33; i = (char *)i + 1)
        {
          if (*(void *)v64 != v34) {
            objc_enumerationMutation(v31);
          }
          uint64_t v36 = *(void **)(*((void *)&v63 + 1) + 8 * i);
          id v37 = [v36 publicKeyIdentifier];
          unsigned int v38 = [v37 isEqualToData:*(void *)(a1 + 96)];

          if (v38)
          {
            id v39 = [*(id *)(a1 + 328) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2496, (uint64_t)v39, @"Found our endpoint", v40, v41, v42, v61);
            objc_storeStrong(v10, v36);
            goto LABEL_21;
          }
        }
        id v33 = [v31 countByEnumeratingWithState:&v63 objects:v68 count:16];
        if (v33) {
          continue;
        }
        break;
      }
    }
LABEL_21:

    if (*v10)
    {
      uint64_t v43 = [*v10 friendlyName];
      uint64_t v44 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = v43;

      uint64_t v45 = [KmlDeviceConfigurationData alloc];
      id v46 = [*(id *)(a1 + 80) deviceConfiguration];
      uint64_t v47 = sub_1003163A8((uint64_t)v45, v46);
      uint64_t v48 = *(void **)(a1 + 208);
      *(void *)(a1 + 208) = v47;

      uint64_t v49 = sub_1002FFCE4((uint64_t)[KmlVersions alloc], *(void **)(a1 + 80));
      id v50 = *(void **)(a1 + 216);
      *(void *)(a1 + 216) = v49;

      uint64_t v51 = *(void *)(a1 + 216);
      NSErrorUserInfoKey v52 = sub_1002FEDBC(*(void *)(a1 + 208));
      id v53 = sub_100300B88(v51, v52);

      uint64_t v54 = *(void *)(a1 + 216);
      id v55 = sub_1003128C8(*(void *)(a1 + 208));
      id v56 = sub_1003010CC(v54, v55);
    }
    else
    {
      id v57 = [*(id *)(a1 + 328) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlFriendSharingManager.m", 2503, (uint64_t)v57, @"Failed to find endpoint", v58, v59, v60, v61);
    }
    uint64_t v24 = v62;
  }
}

void sub_100337380(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = sub_100313DBC(*(void *)(v2 + 248));
  sub_10032F93C(v2, v3);

  sub_100336FB8(*(void *)(a1 + 32), v4, v5, v6, v7, v8, v9, v10, v24);
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(v11 + 8);
  if (v12 == 11 || (v12 == 23 || v12 == 21) && *(void *)(v11 + 80))
  {
    id v13 = [*(id *)(v11 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2524, (uint64_t)v13, @"session is worth restoring", v14, v15, v16, v25);
  }
  else
  {
    id v17 = [*(id *)(v11 + 328) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlFriendSharingManager.m", 2526, (uint64_t)v17, @"Our Client can not revive sharing in this state. So cancel sharing to clean it out.", v18, v19, v20, v25);
    sub_10032DE34(*(void *)(a1 + 32));
  }
  sub_10031DDEC(*(void *)(*(void *)(a1 + 32) + 240), *(void **)(a1 + 32), *(void **)(*(void *)(a1 + 32) + 328));
  uint64_t v21 = *(void *)(a1 + 32);
  uint64_t v22 = *(void *)(v21 + 240);
  uint64_t v23 = *(void **)(v21 + 328);

  sub_10031E0E0(v22, v23);
}

id *sub_10033748C(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 38, a2);
  }
  return result;
}

uint64_t sub_10033749C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 312);
  }
  return result;
}

uint64_t sub_1003374A8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 320);
  }
  return result;
}

char *sub_100337710(void *a1, char a2)
{
  if (!a1) {
    return 0;
  }
  v7.receiver = a1;
  v7.super_class = (Class)KmlSecureChannel;
  id v3 = (char *)[super init];
  if (v3)
  {
    id v4 = [objc_alloc((Class)NSMutableData) initWithLength:16];
    uint64_t v5 = (void *)*((void *)v3 + 11);
    *((void *)v3 + 11) = v4;

    v3[8] = a2;
    *(_WORD *)(v3 + 9) = 256;
  }
  return v3;
}

BOOL sub_100337798(BOOL result)
{
  if (result) {
    return *(void *)(result + 48) != 0;
  }
  return result;
}

void sub_1003377AC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = [*(id *)(a1 + 104) alishaKey];
    id v3 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v2;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 87, @"SecureChannel: Ksc = %@", v4, v5, v6, v7, *(void *)(a1 + 32));
    uint64_t v8 = [*(id *)(a1 + 104) KEnc];
    uint64_t v9 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v8;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 90, @"SecureChannel: Kenc = %@", v10, v11, v12, v13, *(void *)(a1 + 48));
    uint64_t v14 = [*(id *)(a1 + 104) KMac];
    uint64_t v15 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v14;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 93, @"SecureChannel: Kmac = %@", v16, v17, v18, v19, *(void *)(a1 + 56));
    uint64_t v20 = [*(id *)(a1 + 104) KRMac];
    uint64_t v21 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v20;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 96, @"SecureChannel: Krmac = %@", v22, v23, v24, v25, *(void *)(a1 + 64));
    uint64_t v26 = [*(id *)(a1 + 104) SymmetricLTS];
    id v27 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v26;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 99, @"SecureChannel: LTS = %@", v28, v29, v30, v31, *(void *)(a1 + 40));
    uint64_t v32 = [[*(id *)(a1 + 104) Kble_intro];
    id v33 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v32;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 103, @"SecureChannel: Kble_intro = %@", v34, v35, v36, v37, *(void *)(a1 + 72));
    uint64_t v38 = [[*(id *)(a1 + 104) Kble_oob_master];
    id v39 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v38;

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel configurePakeKeys]", 106, @"SecureChannel: Kble_oob_master = %@", v40, v41, v42, v43, *(void *)(a1 + 80));
  }
}

void *sub_10033796C(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (void *)a1[12];
    id v7 = a3;
    id v8 = a2;
    uint64_t v16 = [v6 debugDescription];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel handlePakeVerifyWithCurvepointY:remoteEvidence:]", 112, @"SecureChannel: curvePointY - %@, remoteEvidence - %@, pakeClient - %@", v9, v10, v11, v12, (uint64_t)v8);

    uint64_t v13 = [(id)v5[12] processResponseWithY:v8 M1:v7];

    uint64_t v14 = (void *)v5[13];
    v5[13] = v13;

    a1 = [(id)v5[13] M2];
    uint64_t v3 = vars8;
  }
  return a1;
}

void *sub_100337A38(void *a1, void *a2, void *a3, void *a4, unsigned int a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v20 = a8;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel handlePakeRequestWithScrypt:pairingPassword:salt:cpuCost:blocksize:parallelization:pakeVersion:]", 119, @"SecureChannel: pairingPassword - %@, salt - %@, pakeVersion - %@", v16, v17, v18, v19, (uint64_t)v14);
    id v21 = [objc_alloc((Class)_TtC16CryptoKitPrivate18AlishaSPAKE2Prover) initWithPassword:v14 salt:v15 authenticatedData:v20 keyDerivationCost:a5];
    uint64_t v22 = (void *)a1[12];
    a1[12] = v21;

    id v27 = (void *)a1[12];
    if (v27)
    {
      a1 = [v27 getX];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel handlePakeRequestWithScrypt:pairingPassword:salt:cpuCost:blocksize:parallelization:pakeVersion:]", 123, @"SecureChannel: Failed to create PAKE prover", v23, v24, v25, v26, v29);
      a1 = 0;
    }
  }

  return a1;
}

id sub_100337B50(uint64_t a1, void *a2, void *a3, __int16 a4)
{
  id v7 = a2;
  id v8 = a3;
  __int16 v19 = a4;
  if (a1)
  {
    uint64_t v9 = +[NSMutableData dataWithLength:16];
    id v14 = [*(id *)(a1 + 88) mutableCopy];
    if (v8 && [v8 length]) {
      [v14 appendData:v8];
    }
    if (!*(unsigned char *)(a1 + 8))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateMacWithKey:forPayload:statusWord:error:]", 199, @"SecureChannel: Status word included in ResponseMac calculation.", v10, v11, v12, v13, v18);
      [v14 appendBytes:&v19 length:2];
    }
    [v7 bytes];
    id v15 = v14;
    [v15 bytes];
    [v15 length];
    id v16 = v9;
    [v16 mutableBytes];
    CCAESCmac();
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

BOOL sub_100337CA0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (!a1) {
    goto LABEL_9;
  }
  if ([v9 length] != (id)8)
  {
    id v49 = [v9 length];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 211, @"SecureChannel: provided mac is %lu bytes", v50, v51, v52, v53, (uint64_t)v49);
LABEL_9:
    BOOL v25 = 0;
    goto LABEL_10;
  }
  uint64_t v13 = +[NSMutableData dataWithLength:16];
  id v18 = [*(id *)(a1 + 88) mutableCopy];
  if (!*(unsigned char *)(a1 + 8))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 220, @"SecureChannel: Header included in CommandMac calculation.", v14, v15, v16, v17, v55);
    [v18 appendData:v12];
  }
  id v56 = v12;
  [v18 appendData:v11];
  id v19 = v10;
  [v19 bytes];
  id v20 = v18;
  [v20 bytes];
  [v20 length];
  id v21 = v13;
  [v21 mutableBytes];
  CCAESCmac();
  id v22 = v9;
  id v23 = [v22 bytes];
  id v24 = v21;
  LODWORD(v23) = timingsafe_bcmp(v23, [v24 bytes], 8uLL);
  BOOL v25 = v23 == 0;
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 229, @"SecureChannel:   mac key = %@", v26, v27, v28, v29, (uint64_t)v19);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 230, @"SecureChannel:  payload  = %@", v30, v31, v32, v33, (uint64_t)v20);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 231, @"SecureChannel: their mac = %@", v34, v35, v36, v37, (uint64_t)v22);
  uint64_t v38 = [v24 subdataWithRange:0, 8];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 232, @"SecureChannel:    my mac = %@", v39, v40, v41, v42, (uint64_t)v38);

  if (!v23)
  {
    id v43 = [v24 copy];
    uint64_t v44 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v43;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel verifyMac:withKey:forPayload:header:error:]", 236, @"SecureChannel: new chaining value = %@", v45, v46, v47, v48, *(void *)(a1 + 88));
    *(unsigned char *)(a1 + 9) = 0;
  }

  id v12 = v56;
LABEL_10:

  return v25;
}

id sub_100337F48(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[NSMutableData dataWithLength:16];
    *((unsigned char *)[v2 mutableBytes] + 15) = *(unsigned char *)(a1 + 10);
    uint64_t v3 = +[NSMutableData dataWithLength:16];
    size_t v18 = 0;
    id v4 = *(id *)(a1 + 48);
    id v5 = [v4 bytes];
    id v6 = [*(id *)(a1 + 48) length];
    id v7 = v2;
    id v8 = [v7 mutableBytes];
    id v9 = [v7 length];
    id v10 = v3;
    uint64_t v11 = CCCrypt(0, 0, 0, v5, (size_t)v6, 0, v8, (size_t)v9, [v10 mutableBytes], (size_t)[v10 length], &v18);

    if (v11)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateCommandICV]", 263, @"SecureChannel: generateICV failed with %d", v12, v13, v14, v15, v11);
      id v16 = 0;
    }
    else
    {
      id v16 = v10;
    }
  }
  else
  {
    id v16 = 0;
  }

  return v16;
}

id sub_1003380C0(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[NSMutableData dataWithLength:16];
    uint64_t v3 = [v2 mutableBytes];
    *uint64_t v3 = 0x80;
    int v4 = *(unsigned __int8 *)(a1 + 10);
    BOOL v5 = v4 != 0;
    char v6 = v4 - 1;
    if (!v5) {
      char v6 = 0;
    }
    v3[15] = v6;
    id v7 = +[NSMutableData dataWithLength:16];
    size_t v22 = 0;
    id v8 = *(id *)(a1 + 48);
    id v9 = [v8 bytes];
    id v10 = [*(id *)(a1 + 48) length];
    id v11 = v2;
    id v12 = [v11 mutableBytes];
    id v13 = [v11 length];
    id v14 = v7;
    uint64_t v15 = CCCrypt(0, 0, 0, v9, (size_t)v10, 0, v12, (size_t)v13, [v14 mutableBytes], (size_t)[v14 length], &v22);

    if (v15)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateResponseICV]", 285, @"SecureChannel: generateICV failed with %d", v16, v17, v18, v19, v15);
      id v20 = 0;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel generateResponseICV]", 281, @"SecureChannel: Response ICV : %@", v16, v17, v18, v19, (uint64_t)v14);
      id v20 = v14;
    }
  }
  else
  {
    id v20 = 0;
  }

  return v20;
}

id sub_100338268(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v10 = a3;
  if (!a1) {
    goto LABEL_9;
  }
  if (!v5 || ![v5 length])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptData:withICV:error:]", 293, @"SecureChannel: encryptData: nothing to encrypt", v6, v7, v8, v9, (uint64_t)dataOut);
LABEL_9:
    id v26 = 0;
    goto LABEL_12;
  }
  id v11 = [v5 mutableCopy];
  char v31 = 0x80;
  [v11 appendBytes:&v31 length:1];
  int v12 = [v11 length] & 0xF;
  if (v12) {
    [v11 increaseLengthBy:(16 - v12)];
  }
  id v13 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", [v11 length]);
  size_t v30 = 0;
  id v14 = *(id *)(a1 + 48);
  id key = [v14 bytes];
  id v15 = [*(id *)(a1 + 48) length];
  id v16 = [v10 bytes];
  id v17 = v11;
  id v18 = [v17 bytes];
  id v19 = [v17 length];
  id v20 = v13;
  uint64_t v21 = CCCrypt(0, 0, 0, key, (size_t)v15, v16, v18, (size_t)v19, [v20 mutableBytes], (size_t)[v20 length], &v30);

  if (v21)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptData:withICV:error:]", 320, @"SecureChannel: encrypt returned %d", v22, v23, v24, v25, v21);
    id v26 = 0;
  }
  else
  {
    [v20 setLength:v30];
    id v26 = v20;
  }

LABEL_12:

  return v26;
}

uint64_t sub_100338474(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1)
  {
    if ([v3 length])
    {
      id v5 = v4;
      uint64_t v6 = (char *)[v5 bytes];
      uint64_t v7 = [v5 length];
      while (v7)
      {
        int v8 = v6[--v7];
        if (v8)
        {
          if (v8 == 128)
          {
            [v5 setLength:];
            goto LABEL_8;
          }
          break;
        }
      }
      a1 = 0;
    }
    else
    {
LABEL_8:
      a1 = 1;
    }
  }

  return a1;
}

id sub_100338510(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!a1) {
    goto LABEL_4;
  }
  if (((unint64_t)[v7 length] & 0xF) != 0)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptData:withICV:error:]", 354, @"SecureChannel: ciphertext isn't a multiple of block size", v9, v10, v11, v12, (uint64_t)dataOut);
LABEL_4:
    id v13 = 0;
    goto LABEL_11;
  }
  uint64_t v38 = a4;
  id v14 = +[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", [v7 length]);
  size_t v40 = 0;
  id v15 = *(id *)(a1 + 48);
  id v16 = [v15 bytes];
  id v17 = [*(id *)(a1 + 48) length];
  id v39 = v8;
  id v18 = [v8 bytes];
  id v19 = v7;
  id v20 = [v19 bytes];
  id v21 = [v19 length];
  id v22 = v14;
  uint64_t v23 = CCCrypt(1u, 0, 0, v16, (size_t)v17, v18, v20, (size_t)v21, [v22 mutableBytes], (size_t)[v22 length], &v40);

  if (v23)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptData:withICV:error:]", 366, @"SecureChannel: decrypt returned %d", v24, v25, v26, v27, v23);
    id v13 = 0;
  }
  else
  {
    [v22 setLength:v40];
    if ((sub_100338474(a1, v22) & 1) == 0)
    {
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptData:withICV:error:]", 373, @"SecureChannel: decryption failed", v28, v29, v30, v31, (uint64_t)dataOuta);
      id v8 = v39;
      if (v38)
      {
        uint64_t v33 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
        uint64_t v34 = +[NSString stringWithUTF8String:KmlErrorString(202)];
        uint64_t v42 = v34;
        uint64_t v35 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
        *uint64_t v38 = +[NSError errorWithDomain:v33 code:202 userInfo:v35];
      }
      id v13 = 0;
      goto LABEL_10;
    }
    id v13 = v22;
  }
  id v8 = v39;
LABEL_10:

LABEL_11:

  return v13;
}

id sub_1003387F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v12 = a3;
  if (!a1) {
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 48))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptAndVerifyCommandPayload:header:error:]", 386, @"SecureChannel: SecureChannel not ready.", v8, v9, v10, v11, v29);
    goto LABEL_6;
  }
  id v13 = [v7 length];
  id v14 = (char *)[v7 length];
  if ((unint64_t)v13 <= 7)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptAndVerifyCommandPayload:header:error:]", 391, @"SecureChannel: payload is too short (%lu bytes)", v15, v16, v17, v18, (uint64_t)v14);
LABEL_6:
    id v19 = 0;
    goto LABEL_10;
  }
  id v20 = [v7 subdataWithRange:NSMakeRange(v14 - 8, 8)];
  id v21 = [v7 subdataWithRange:0, (char *)[v7 length] - 8];
  id v19 = 0;
  if (sub_100337CA0(a1, v20, *(void **)(a1 + 56), v21, v12))
  {
    id v22 = sub_100337F48(a1);
    id v19 = sub_100338510(a1, v21, v22, a4);

    unsigned __int8 v23 = *(unsigned char *)(a1 + 10) + 1;
    *(unsigned char *)(a1 + 10) = v23;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel decryptAndVerifyCommandPayload:header:error:]", 406, @"SecureChannel: new command counter = %u", v24, v25, v26, v27, v23);
  }

LABEL_10:

  return v19;
}

id sub_100338994(id a1, void *a2, __int16 a3)
{
  id v5 = a2;
  if (a1)
  {
    if (*((unsigned char *)a1 + 9)) {
      sub_100338B34((uint64_t)a1);
    }
    uint64_t v6 = sub_1003380C0((uint64_t)a1);
    id v7 = sub_100338268((uint64_t)a1, v5, v6);

    if (!v7)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptResponsePayload:statusWord:error:]", 419, @"SecureChannel: Nothing to encrypt", v8, v9, v10, v11, v24);
      id v7 = +[NSMutableData data];
    }
    uint64_t v16 = sub_100337B50((uint64_t)a1, *((void **)a1 + 8), v7, a3);
    if (v16)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptResponsePayload:statusWord:error:]", 428, @"SecureChannel: chaining value = %@", v12, v13, v14, v15, *((void *)a1 + 11));
      uint64_t v17 = [v16 subdataWithRange:0, 8];
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel encryptResponsePayload:statusWord:error:]", 429, @"SecureChannel:         my mac = %@", v18, v19, v20, v21, (uint64_t)v17);

      id v22 = [v16 subdataWithRange:0, 8];
      [v7 appendData:v22];

      *((unsigned char *)a1 + 9) = 1;
      a1 = v7;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

void sub_100338B34(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 56);
    id v3 = +[NSMutableData dataWithLength:16];
    id v4 = [*(id *)(a1 + 88) mutableCopy];
    id v5 = v2;
    [v5 bytes];
    id v6 = v4;
    [v6 bytes];
    [v6 length];
    id v18 = v3;
    [v18 mutableBytes];
    CCAESCmac();
    id v7 = [v18 copy];
    uint64_t v8 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = v7;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel updateMacChainingValueForZeroPayloadRequest]", 449, @"SecureChannel: new chaining value for command with 0 payload = %@", v9, v10, v11, v12, *(void *)(a1 + 88));
    unsigned __int8 v13 = *(unsigned char *)(a1 + 10) + 1;
    *(unsigned char *)(a1 + 10) = v13;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSecureChannel updateMacChainingValueForZeroPayloadRequest]", 452, @"SecureChannel: new command counter = %u", v14, v15, v16, v17, v13);
    *(unsigned char *)(a1 + 9) = 0;
  }
}

uint64_t sub_100339168(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 14);
  }
  return result;
}

uint64_t sub_100339174(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 9);
  }
  return result;
}

BOOL sub_100339180(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 12) != 0;
  }
  return result;
}

BOOL sub_100339194(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 13) != 0;
  }
  return result;
}

id sub_100339830(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  if (qword_1004683F8 != -1) {
    dispatch_once(&qword_1004683F8, &stru_10041A738);
  }
  id v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:qword_100468400 fromData:v4 error:a3];

  return v5;
}

void sub_1003398D0(id a1)
{
  uint64_t v1 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v2 = (void *)qword_100468400;
  qword_100468400 = v1;
}

BOOL sub_100339938(BOOL result)
{
  if (result) {
    return *(void *)(result + 24) && *(void *)(result + 32) == 0;
  }
  return result;
}

uint64_t sub_10033995C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 48) = a2;
  }
  return result;
}

uint64_t sub_100339968(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 56) = a2;
  }
  return result;
}

uint64_t sub_100339974(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 88) = a2;
  }
  return result;
}

uint64_t sub_100339980(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 96) = a2;
  }
  return result;
}

uint64_t sub_10033998C(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_100339998(uint64_t result, __int16 a2)
{
  if (result) {
    *(_WORD *)(result + 14) = a2;
  }
  return result;
}

uint64_t sub_1003399A4(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 9) = a2;
  }
  return result;
}

uint64_t sub_1003399B0(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 10) = a2;
  }
  return result;
}

uint64_t sub_1003399BC(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 11) = a2;
  }
  return result;
}

void sub_1003399C8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 112), a2);
  }
}

void sub_1003399D8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 120), a2);
  }
}

void sub_1003399E8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 128), a2);
  }
}

void sub_1003399F8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 136), a2);
  }
}

uint64_t sub_100339A08(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 12) = a2;
  }
  return result;
}

void sub_100339A14(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 144), a2);
  }
}

void sub_100339A24(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 152), a2);
  }
}

void sub_100339A34(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 160), a2);
  }
}

uint64_t sub_100339A44(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 168) = a2;
  }
  return result;
}

uint64_t sub_100339A50(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 176) = a2;
  }
  return result;
}

uint64_t sub_100339A5C(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 13) = a2;
  }
  return result;
}

void sub_100339B48()
{
  self;
  if (qword_100468410 != -1)
  {
    dispatch_once(&qword_100468410, &stru_10041A758);
  }
}

void sub_100339B98(id a1)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlSharingRecordsUpdater initRecordUpdaterTable]_block_invoke", 183, @"initializing recordUpdaterTable", v1, v2, v3, v4, v7);
  if (!qword_100468408)
  {
    uint64_t v5 = +[NSHashTable weakObjectsHashTable];
    id v6 = (void *)qword_100468408;
    qword_100468408 = v5;
  }
}

KmlSharingRecordsUpdater *sub_100339C10(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v7 = [v2 subjectIdentifier];
    if (v7)
    {
      sub_100339B48();
      id v8 = (id)qword_100468408;
      objc_sync_enter(v8);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v9 = (id)qword_100468408;
      id v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v19;
LABEL_5:
        uint64_t v12 = 0;
        while (1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v9);
          }
          unsigned __int8 v13 = *(void **)(*((void *)&v18 + 1) + 8 * v12);
          uint64_t v14 = [v13 endpointIdentifier:v18];
          unsigned __int8 v15 = [v14 isEqualToString:v7];

          if (v15) {
            break;
          }
          if (v10 == (id)++v12)
          {
            id v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
            if (v10) {
              goto LABEL_5;
            }
            goto LABEL_11;
          }
        }
        uint64_t v16 = v13;

        if (v16) {
          goto LABEL_16;
        }
      }
      else
      {
LABEL_11:
      }
      uint64_t v16 = [[KmlSharingRecordsUpdater alloc] initWithEndpoint:v2];
      if (v16) {
        [(id)qword_100468408 addObject:v16];
      }
LABEL_16:
      objc_sync_exit(v8);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlSharingRecordsUpdater getSharingRecordsUpdaterForEndpoint:]", 200, @"endpoint has nil identifier. Can't get updater for such endpoint", v3, v4, v5, v6, v18);
      uint64_t v16 = 0;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }

  return v16;
}

void sub_100339E0C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_100339E34()
{
  self;
  if (qword_100468420 != -1) {
    dispatch_once(&qword_100468420, &stru_10041A778);
  }
  v0 = (void *)qword_100468418;

  return v0;
}

void sub_100339E8C(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.sesd.kml.ownerRecordsUpdater", v3);
  id v2 = (void *)qword_100468418;
  qword_100468418 = (uint64_t)v1;
}

void sub_100339FBC(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    id v2 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10033A820;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_10033A048(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v8 = v3;
  if (a1)
  {
    if (v3 && v3[17])
    {
      id v9 = *(NSObject **)(a1 + 24);
      v10[0] = (uint64_t)_NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = (uint64_t)sub_10033A124;
      v10[3] = (uint64_t)&unk_10040D1A0;
      v10[4] = a1;
      uint64_t v11 = v3;
      dispatch_async(v9, v10);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater updateConfig:]", 252, @"Invalid sharing config. Ignore it", v4, v5, v6, v7, v10[0]);
    }
  }
}

id sub_10033A124(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  if (v1) {
    uint64_t v3 = *(void *)(v1 + 136);
  }
  else {
    uint64_t v3 = 0;
  }
  return [v2 setObject:v1 forKeyedSubscript:v3];
}

uint64_t sub_10033A140(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10033A150(uint64_t a1)
{
}

dispatch_queue_t *sub_10033A158(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v15 = 0;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x3032000000;
      long long v18 = sub_10033A140;
      long long v19 = sub_10033A150;
      id v20 = 0;
      dispatch_assert_queue_not_V2(a1[3]);
      id v9 = a1[3];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10033A2BC;
      block[3] = &unk_100419AE8;
      void block[4] = a1;
      id v13 = v8;
      uint64_t v14 = &v15;
      dispatch_sync(v9, block);
      a1 = (dispatch_queue_t *)(id)v16[5];

      _Block_object_dispose(&v15, 8);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingRecordsUpdater getConfigWithFriendKeyIdentifier:]", 274, @"keyIdentifier is nil", v4, v5, v6, v7, v11);
      a1 = 0;
    }
  }

  return a1;
}

void sub_10033A2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033A2BC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10033A354;
  v5[3] = &unk_10041A7A0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_10033A354(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v7 = a3;
  id v8 = v7;
  if (v7) {
    uint64_t v7 = (void *)v7[16];
  }
  if ([v7 isEqualToString:*(void *)(a1 + 32)])
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
    *a4 = 1;
  }
}

void sub_10033A3D8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10033A454;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_sync(v1, block);
  }
}

void sub_10033A454(uint64_t a1)
{
  uint64_t v35 = +[NSMutableArray array];
  uint64_t v37 = +[NSMutableArray array];
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 16);
  id v2 = [obj countByEnumeratingWithState:&v39 objects:v43 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v40;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v40 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v39 + 1) + 8 * i);
        id v8 = [*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:v7];
        id v13 = v8;
        if (v8 && v8[12] == 5)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 300, @"The record is ready for clean up. Removing it", v9, v10, v11, v12, v34);
          if (v13[16])
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 302, @"Removing un-claimed authorization for previously shared key.", v14, v15, v16, v17, v34);
            sub_10033A758(*(void *)(a1 + 32), (void *)v13[10]);
          }
          [v37 addObject:v7];
        }
        else
        {
          id v38 = v4;
          long long v18 = sub_1003143F0(v8, (uint64_t)&v38);
          id v19 = v38;

          if (v19)
          {
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"[(KmlSharingRecordsUpdater *)"Sharing config with Invitation Id (%@) saveSharingRecords], v20, v21, v22, v23, v7);
            uint64_t v24 = v37;
            uint64_t v25 = (void *)v7;
          }
          else
          {
            uint64_t v24 = v35;
            uint64_t v25 = v18;
          }
          [v24 addObject:v25];

          uint64_t v4 = v19;
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v39 objects:v43 count:16];
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }

  uint64_t v26 = [*(id *)(*(void *)(a1 + 32) + 8) publicKeyIdentifier];
  uint64_t v27 = kmlUtilHexStringFromData(v26);

  id v28 = v35;
  uint64_t v29 = SESEndPointUpdateWithBlock();

  if (v29) {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingRecordsUpdater saveSharingRecords]_block_invoke", 323, @"Failed to save sharing records on endPoint : %@", v30, v31, v32, v33, (uint64_t)v29);
  }
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectsForKeys:v37];
}

void sub_10033A758(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && v3)
  {
    id v15 = v3;
    uint64_t v4 = SESEndPointDeleteAuthorizationID();
    uint64_t v9 = v4;
    if (v4)
    {
      uint64_t v10 = [v4 description];
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater deleteAuthWithId:]", 459, @"Failed in delete Auth. error: %@", v11, v12, v13, v14, (uint64_t)v10);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater deleteAuthWithId:]", 461, @"Deleted auth with Id : %@", v5, v6, v7, v8, (uint64_t)v15);
    }

    id v3 = v15;
  }
}

id sub_10033A814(uint64_t a1, void *a2)
{
  return _[a2 setSharingRecords:*(void *)(a1 + 32)];
}

void sub_10033A820(uint64_t a1)
{
  uint64_t v1 = [*(id *)(*(void *)(a1 + 32) + 8) sharingRecords];
  uint64_t v6 = v1;
  if (!v1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", 335, @"We don't have any sharing records", v2, v3, v4, v5, v22);
    goto LABEL_21;
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v7 = [v1 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v26;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void **)(*((void *)&v25 + 1) + 8 * (void)v10);
        id v24 = 0;
        uint64_t v12 = sub_100339830((uint64_t)KmlSharingConfig, v11, (uint64_t)&v24);
        id v17 = v24;
        if (v17)
        {
          uint64_t v18 = 343;
          id v19 = @"Found a courrupted sharing record. Discarding it";
LABEL_12:
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", v18, v19, v13, v14, v15, v16, v22);
          goto LABEL_13;
        }
        if (v12)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", 347, @"Found sharing record for invitation Id : %@", v13, v14, v15, v16, v12[17]);
          if (v12[12] == 5)
          {
            uint64_t v18 = 349;
            id v19 = @"The record is ready for clean up. Removing it";
            goto LABEL_12;
          }
          uint64_t v20 = v12[17];
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater unpackAllConfigsOnEndpoint]_block_invoke", 347, @"Found sharing record for invitation Id : %@", v13, v14, v15, v16, 0);
          uint64_t v20 = 0;
        }
        [*(id *)(*(void *)(a1 + 32) + 16) setObject:v12 forKeyedSubscript:v20];
LABEL_13:

        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v21 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
      id v8 = v21;
    }
    while (v21);
  }
LABEL_21:
}

dispatch_queue_t *sub_10033AA30(dispatch_queue_t *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_10033A140;
    uint64_t v9 = sub_10033A150;
    id v10 = +[NSMutableArray array];
    dispatch_assert_queue_not_V2(v1[3]);
    uint64_t v2 = v1[3];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10033AB58;
    v4[3] = &unk_10040D310;
    void v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);
  }

  return v1;
}

void sub_10033AB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10033AB58(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10033ABD4;
  v3[3] = &unk_10041A7C8;
  v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateKeysAndObjectsUsingBlock:v3];
}

void sub_10033ABD4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = a3;
  id v4 = objc_alloc((Class)DAKeySharingInvitationData);
  if (v13)
  {
    id v5 = v13[2];
    id v6 = v13[17];
    id v7 = v13[16];
    id v8 = v13[11];
    unint64_t v9 = (unint64_t)v13[12] - 3;
    if (v9 > 2) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = qword_10037F318[v9];
    }
    id v11 = v13[18];
  }
  else
  {
    uint64_t v10 = 0;
    id v7 = 0;
    id v5 = 0;
    id v6 = 0;
    id v8 = 0;
    id v11 = 0;
  }
  id v12 = [v4 initWithSessionUUID:v5 invitationIdentifier:v6 friendKeyIdentifier:v7 sharingTarget:v8 state:v10 vehicleEnteredPasscode:v11];

  [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:v12];
}

uint64_t sub_10033ACF0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x2020000000;
    uint64_t v8 = 0;
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    uint64_t v2 = *(NSObject **)(v1 + 24);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10033ADC0;
    v4[3] = &unk_10040D310;
    void v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = v6[3];
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_10033ADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10033ADC0(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10033AE3C;
  v3[3] = &unk_10041A7C8;
  v3[4] = *(void *)(a1 + 40);
  return [v1 enumerateKeysAndObjectsUsingBlock:v3];
}

uint64_t sub_10033AE3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    if (*(void *)(a3 + 128)) {
      ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24);
    }
  }
  return result;
}

dispatch_queue_t *sub_10033AE6C(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x3032000000;
    id v12 = sub_10033A140;
    uint64_t v13 = sub_10033A150;
    id v14 = 0;
    dispatch_assert_queue_not_V2(a1[3]);
    id v4 = a1[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10033AFA8;
    block[3] = &unk_100419AE8;
    void block[4] = a1;
    id v7 = v3;
    uint64_t v8 = &v9;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10033AF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033AFA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10033B040;
  v5[3] = &unk_10041A7A0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_10033B040(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  uint64_t v7 = a3;
  uint64_t v11 = v7;
  if (v7) {
    uint64_t v8 = (void *)v7[2];
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = v8;
  if ([v9 isEqual:*(void *)(a1 + 32)])
  {
    if (v11) {
      uint64_t v10 = v11[16];
    }
    else {
      uint64_t v10 = 0;
    }

    if (v10)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a3);
      *a4 = 1;
    }
  }
  else
  {
  }
}

dispatch_queue_t *sub_10033B100(dispatch_queue_t *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000;
    uint64_t v8 = sub_10033A140;
    id v9 = sub_10033A150;
    id v10 = 0;
    dispatch_assert_queue_not_V2(a1[3]);
    uint64_t v2 = v1[3];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10033B214;
    v4[3] = &unk_100419E50;
    void v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);
  }

  return v1;
}

void sub_10033B1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033B214(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 16) allValues];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10033B264(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 24));
    uint64_t v4 = *(NSObject **)(a1 + 24);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10033B314;
    v5[3] = &unk_10040D1A0;
    void v5[4] = a1;
    id v6 = v3;
    dispatch_sync(v4, v5);
  }
}

void sub_10033B314(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 16);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10033B3A4;
  v2[3] = &unk_10041A7F0;
  id v3 = *(id *)(a1 + 40);
  [v1 enumerateKeysAndObjectsUsingBlock:v2];
}

void sub_10033B3A4(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    id v7 = *((id *)v5 + 16);
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = [*(id *)(a1 + 32) containsObject:v6[16]];

      if (v9)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater removeConfigsWithSharedKeyIdentifiers:]_block_invoke_2", 426, @"Found record with shared key Identifier : %@", v10, v11, v12, v13, v6[16]);
        v6[12] = 5;
      }
    }
  }
}

dispatch_queue_t *sub_10033B458(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x3032000000;
    uint64_t v12 = sub_10033A140;
    uint64_t v13 = sub_10033A150;
    id v14 = +[NSMutableSet set];
    dispatch_assert_queue_not_V2(a1[3]);
    uint64_t v4 = a1[3];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10033B5A8;
    block[3] = &unk_100419AE8;
    void block[4] = a1;
    id v7 = v3;
    uint64_t v8 = &v9;
    dispatch_sync(v4, block);
    a1 = (dispatch_queue_t *)(id)v10[5];

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10033B590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10033B5A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10033B640;
  v5[3] = &unk_10041A7A0;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = v3;
  uint64_t v7 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_10033B640(uint64_t a1, void *a2, void *a3)
{
  id v15 = a2;
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    id v7 = v5[16];
    if (v7)
    {
      uint64_t v8 = v7;
      unsigned int v9 = [*(id *)(a1 + 32) containsObject:v6[16]];

      if (v9)
      {
        id v10 = v6[16];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingRecordsUpdater getUUIDsForSharedKeyIdentifiers:]_block_invoke_2", 441, @"Found record with shared key Identifier : %@, uuid : %@", v11, v12, v13, v14, (uint64_t)v10);

        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v6[2]];
      }
    }
  }
}

id sub_10033B898(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (*(unsigned char *)(a1 + 104))
    {
      [*(id *)(a1 + 16) appendData:v3];
      a1 = 0;
    }
    else
    {
      [*(id *)(a1 + 8) appendData:v3];
      a1 = sub_10033B914(a1);
    }
  }

  return (id)a1;
}

id sub_10033B914(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 8));
    [*(id *)(a1 + 8) setLength:0];
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    id obj = v2;
    id v3 = [obj countByEnumeratingWithState:&v119 objects:v139 count:16];
    if (!v3)
    {
      id v5 = 0;
      goto LABEL_47;
    }
    id v4 = v3;
    id v5 = 0;
    uint64_t v6 = *(void *)v120;
    while (1)
    {
      id v7 = 0;
      do
      {
        if (*(void *)v120 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(id **)(*((void *)&v119 + 1) + 8 * (void)v7);
        if (sub_10005D5A8((uint64_t)v8) == 32586)
        {
          if (*(void *)(a1 + 56))
          {
            unsigned int v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v137 = NSLocalizedDescriptionKey;
            id v10 = +[NSString stringWithUTF8String:KmlErrorString(3)];
            uint64_t v138 = v10;
            uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v138 forKeys:&v137 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v9 code:3 userInfo:v11];

            uint64_t v13 = sub_100315FB4(v8);
            uint64_t v14 = kmlUtilHexStringFromData(v13);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 236, @"KeyCreationConfig: Received Duplicated Endpoint creation Data : %@", v15, v16, v17, v18, (uint64_t)v14);
            goto LABEL_13;
          }
          long long v39 = sub_100315FB4(v8);
          long long v40 = kmlUtilHexStringFromData(v39);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 229, @"KeyCreationConfig: Received Endpoint creation Data : %@", v41, v42, v43, v44, (uint64_t)v40);

          uint64_t v45 = sub_100315FB4(v8);
          uint64_t v46 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v45;

          uint64_t v47 = sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 56));
          uint64_t v48 = +[NSMutableArray arrayWithArray:v47];
          id v49 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = v48;

          uint64_t v50 = sub_10033CA08(a1);
          uint64_t v51 = *(void **)(a1 + 96);
          *(void *)(a1 + 96) = v50;

          uint64_t v52 = sub_10033CB34(a1);
          uint64_t v53 = kmlUtilHexStringFromData(v52);
          uint64_t v54 = *(void **)(a1 + 112);
          *(void *)(a1 + 112) = v53;

LABEL_21:
          goto LABEL_38;
        }
        if (sub_10005D5A8((uint64_t)v8) == 32587)
        {
          if (*(void *)(a1 + 144))
          {
            id v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v135 = NSLocalizedDescriptionKey;
            uint64_t v20 = +[NSString stringWithUTF8String:KmlErrorString(3)];
            uint64_t v136 = v20;
            id v21 = +[NSDictionary dictionaryWithObjects:&v136 forKeys:&v135 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v19 code:3 userInfo:v21];

            uint64_t v13 = sub_100315FB4(v8);
            uint64_t v14 = kmlUtilHexStringFromData(v13);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 244, @"KeyCreationConfig: Received Duplicated remote public key : %@", v22, v23, v24, v25, (uint64_t)v14);
            goto LABEL_13;
          }
          long long v62 = sub_100315FB4(v8);
          kmlUtilLogLargeData(@"Received remote public key", v62);

          uint64_t v63 = sub_100315FB4(v8);
          long long v64 = *(void **)(a1 + 144);
          *(void *)(a1 + 144) = v63;
          goto LABEL_37;
        }
        if (sub_10005D5A8((uint64_t)v8) == 32588)
        {
          if (*(void *)(a1 + 24))
          {
            uint64_t v30 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v133 = NSLocalizedDescriptionKey;
            uint64_t v31 = +[NSString stringWithUTF8String:KmlErrorString(3)];
            uint64_t v134 = v31;
            uint64_t v32 = +[NSDictionary dictionaryWithObjects:&v134 forKeys:&v133 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v30 code:3 userInfo:v32];

            uint64_t v37 = 252;
            id v38 = @"KeyCreationConfig: Received Duplicated chain cert part.";
            goto LABEL_19;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 248, @"KeyCreationConfig: Received chain cert part.", v26, v27, v28, v29, v116);
          uint64_t v72 = sub_100315FB4(v8);
          long long v64 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v72;
LABEL_37:

          goto LABEL_38;
        }
        if (sub_10005D5A8((uint64_t)v8) == 32589)
        {
          if (*(void *)(a1 + 40))
          {
            uint64_t v55 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v131 = NSLocalizedDescriptionKey;
            id v56 = +[NSString stringWithUTF8String:KmlErrorString(3)];
            uint64_t v132 = v56;
            id v57 = +[NSDictionary dictionaryWithObjects:&v132 forKeys:&v131 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v55 code:3 userInfo:v57];

            uint64_t v13 = kmlUtilHexStringFromData(*(void **)(a1 + 40));
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 260, @"KeyCreationConfig: Received Duplicated Mailbox mapping : %@", v58, v59, v60, v61, (uint64_t)v13);
            goto LABEL_14;
          }
          uint64_t v77 = sub_100316294((uint64_t)v8);
          uint64_t v78 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v77;

          uint64_t v52 = kmlUtilHexStringFromData(*(void **)(a1 + 40));
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 257, @"KeyCreationConfig: Received Mailbox mapping : %@", v79, v80, v81, v82, (uint64_t)v52);
          goto LABEL_21;
        }
        if (sub_10005D5A8((uint64_t)v8) == 32590)
        {
          if (*(void *)(a1 + 48))
          {
            long long v65 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v129 = NSLocalizedDescriptionKey;
            long long v66 = +[NSString stringWithUTF8String:KmlErrorString(3)];
            uint64_t v130 = v66;
            uint64_t v67 = +[NSDictionary dictionaryWithObjects:&v130 forKeys:&v129 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v65 code:3 userInfo:v67];

            uint64_t v13 = sub_100315FB4(v8);
            uint64_t v14 = kmlUtilHexStringFromData(v13);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 269, @"KeyCreationConfig: Received Duplicated device config : %@", v68, v69, v70, v71, (uint64_t)v14);
LABEL_13:

LABEL_14:
            goto LABEL_15;
          }
          uint64_t v94 = sub_100315FB4(v8);
          uint64_t v95 = kmlUtilHexStringFromData(v94);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 264, @"KeyCreationConfig: Received device config : %@", v96, v97, v98, v99, (uint64_t)v95);

          uint64_t v100 = sub_100315FB4(v8);
          uint64_t v101 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v100;

          uint64_t v102 = sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 48));
          long long v64 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = v102;
          goto LABEL_37;
        }
        int v73 = sub_10005D5A8((uint64_t)v8);
        if (isEndOfKeyConfigTag(v73))
        {
          if (*(unsigned char *)(a1 + 128))
          {
            uint64_t v74 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v125 = NSLocalizedDescriptionKey;
            uint64_t v75 = +[NSString stringWithUTF8String:KmlErrorString(3)];
            id v126 = v75;
            uint64_t v76 = +[NSDictionary dictionaryWithObjects:&v126 forKeys:&v125 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v74 code:3 userInfo:v76];

            uint64_t v37 = 282;
            id v38 = @"KeyCreationConfig: Received Duplicated Data Complete TLV";
            goto LABEL_19;
          }
          uint64_t v103 = sub_100315FB4(v8);
          id v104 = [v103 length];

          if (v104)
          {
            long long v109 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v127 = NSLocalizedDescriptionKey;
            long long v110 = +[NSString stringWithUTF8String:KmlErrorString(4)];
            v128 = v110;
            long long v111 = +[NSDictionary dictionaryWithObjects:&v128 forKeys:&v127 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v109 code:4 userInfo:v111];

            uint64_t v37 = 275;
            id v38 = @"KeyCreationConfig: Received Invalid Data after EndOfKeyConfigTag";
LABEL_19:
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", v37, v38, v33, v34, v35, v36, v116);
LABEL_15:
            id v5 = (void *)v12;
            goto LABEL_38;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 277, @"KeyCreationConfig: Received Data Complete TLV", v105, v106, v107, v108, v116);
          *(unsigned char *)(a1 + 128) = 1;
        }
        else
        {
          if (sub_10005D5A8((uint64_t)v8) != 0xFFFF)
          {
            id v87 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v123 = NSLocalizedDescriptionKey;
            id v88 = +[NSString stringWithUTF8String:KmlErrorString(4)];
            uint64_t v124 = v88;
            uint64_t v89 = +[NSDictionary dictionaryWithObjects:&v124 forKeys:&v123 count:1];
            uint64_t v12 = +[NSError errorWithDomain:v87 code:4 userInfo:v89];

            uint64_t v117 = sub_10005D5A8((uint64_t)v8);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 289, @"KeyCreationConfig: TLV with un-expected tag (0x%04x)", v90, v91, v92, v93, v117);
            goto LABEL_15;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig parseKeyConfigData]", 285, @"KeyCreationConfig: Received partial data TLV", v83, v84, v85, v86, v116);
          long long v112 = *(void **)(a1 + 8);
          long long v113 = sub_100315FB4(v8);
          [v112 appendData:v113];
        }
LABEL_38:
        id v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      id v114 = [obj countByEnumeratingWithState:&v119 objects:v139 count:16];
      id v4 = v114;
      if (!v114)
      {
LABEL_47:

        goto LABEL_48;
      }
    }
  }
  id v5 = 0;
LABEL_48:

  return v5;
}

void sub_10033C430(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 56), a2);
    id v4 = sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 56));
    uint64_t v5 = +[NSMutableArray arrayWithArray:v4];
    uint64_t v6 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v5;
  }
}

void sub_10033C4D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    if (![*(id *)(a1 + 56) length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig setEndpointConfigSiacDataForSharing:]", 177, @"We don't have endpointCreationData, so first absorb all SiaC data", v4, v5, v6, v7, v20);
      sub_10033C430(a1, v3);
    }
    uint64_t v8 = sub_100315960((uint64_t)KmlTlv, v3);
    unsigned int v9 = +[NSMutableData data];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v10 = v8;
    id v11 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v21;
      do
      {
        uint64_t v14 = 0;
        do
        {
          if (*(void *)v21 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v20 + 1) + 8 * (void)v14);
          if (sub_10005D5A8((uint64_t)v15) == 74 || sub_10005D5A8((uint64_t)v15) == 75)
          {
            uint64_t v16 = sub_100316294((uint64_t)v15);
            [v9 appendData:v16];
          }
          else if (sub_10005D5A8((uint64_t)v15) == 70)
          {
            *(unsigned char *)(a1 + 129) = sub_10031609C(v15);
          }
          else if (sub_10005D5A8((uint64_t)v15) == 71)
          {
            *(unsigned char *)(a1 + 130) = sub_10031609C(v15);
          }
          uint64_t v14 = (char *)v14 + 1;
        }
        while (v12 != v14);
        id v17 = [v10 countByEnumeratingWithState:&v20 objects:v24 count:16];
        id v12 = v17;
      }
      while (v17);
    }

    uint64_t v18 = *(void **)(a1 + 72);
    id v19 = sub_100315D20((uint64_t)KmlTlv, 96, v9);
    [v18 addObject:v19];
  }
}

void sub_10033C6F0(uint64_t a1, void *a2)
{
  if (a1)
  {
    sub_100315960((uint64_t)KmlTlv, a2);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    id v4 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v21;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v21 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(id **)(*((void *)&v20 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v8) == 32586)
          {
            unsigned int v9 = sub_100315FB4(v8);
            id v10 = kmlUtilHexStringFromData(v9);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig setEndpointConfigSiacDataForUpgrade:]", 203, @"Received Endpoint creation Data for Upgrade: %@", v11, v12, v13, v14, (uint64_t)v10);

            uint64_t v15 = sub_100315FB4(v8);
            uint64_t v16 = *(void **)(a1 + 56);
            *(void *)(a1 + 56) = v15;

            id v17 = sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 56));
            uint64_t v18 = +[NSMutableArray arrayWithArray:v17];
            id v19 = *(void **)(a1 + 72);
            *(void *)(a1 + 72) = v18;

            goto LABEL_12;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v20 objects:v24 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
}

void sub_10033C8B0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    objc_storeStrong((id *)(a1 + 80), a2);
    id v5 = +[NSMutableData data];
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v6 = *(id *)(a1 + 80);
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      do
      {
        id v10 = 0;
        do
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = sub_100316294(*(void *)(*((void *)&v13 + 1) + 8 * (void)v10));
          [v5 appendData:v11];

          id v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v8);
    }

    uint64_t v12 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v5;
  }
}

id sub_10033CA08(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 91)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033CB34(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 77)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033CC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    int v8 = a3;
    if (sub_10033D080(a1, a2, a3, a4, a5, a6, a7, a8))
    {
      if (sub_10033D234(a1))
      {
        if (sub_10033D678(a1, v8, v15, v16, v17, v18, v19, v20))
        {
          if (sub_10033D6F8(a1, a2, v8, v21, v22, v23, v24, v25))
          {
            if (*(unsigned char *)(a1 + 128))
            {
              uint64_t v30 = 0;
              *(unsigned char *)(a1 + 104) = 1;
              goto LABEL_14;
            }
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 323, @"KeyCreationConfig: Missing Completion tag", v26, v27, v28, v29, v37);
            uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
            uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(21)];
            long long v39 = v32;
            uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1];
            uint64_t v34 = v31;
            uint64_t v35 = 21;
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 318, @"KeyCreationConfig: Invalid device config", v26, v27, v28, v29, v37);
            uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
            uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(2)];
            uint64_t v41 = v32;
            uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
            uint64_t v34 = v31;
            uint64_t v35 = 2;
          }
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 313, @"KeyCreationConfig: Invalid Mailbox mapping", v22, v23, v24, v25, v37);
          uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
          uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(212)];
          uint64_t v43 = v32;
          uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
          uint64_t v34 = v31;
          uint64_t v35 = 212;
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 307, @"KeyCreationConfig: Failed to validate Remote Long Term Certificate", v17, v18, v19, v20, v37);
        uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v44 = NSLocalizedDescriptionKey;
        uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(201)];
        uint64_t v45 = v32;
        uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
        uint64_t v34 = v31;
        uint64_t v35 = 201;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isAllDataValidForTransport:kmlVersion:]", 302, @"KeyCreationConfig: Invalid Endpoint creation Data", v11, v12, v13, v14, v37);
      uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
      uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(4)];
      uint64_t v47 = v32;
      uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
      uint64_t v34 = v31;
      uint64_t v35 = 4;
    }
    uint64_t v30 = +[NSError errorWithDomain:v34 code:v35 userInfo:v33];
  }
  else
  {
    uint64_t v30 = 0;
  }
LABEL_14:

  return v30;
}

uint64_t sub_10033D080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (a1)
  {
    if (*(void *)(a1 + 56))
    {
      id v9 = objc_alloc_init((Class)NSMutableSet);
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v10 = *(id *)(v8 + 72);
      id v11 = [v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v22;
        while (2)
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v22 != v13) {
              objc_enumerationMutation(v10);
            }
            unsigned int v15 = sub_10005D5A8(*(void *)(*((void *)&v21 + 1) + 8 * i));
            if ((kmlUtilAddUniqueTagToSet(v9, v15) & 1) == 0)
            {

              goto LABEL_16;
            }
          }
          id v12 = [v10 countByEnumeratingWithState:&v21 objects:v25 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      if ([*(id *)(v8 + 120) isSubsetOfSet:v9])
      {
        uint64_t v8 = 1;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isEndpointCreationDataValid]", 473, @"isEndpointCreationDataValid: Received all the required tags.", v16, v17, v18, v19, v21);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isEndpointCreationDataValid]", 478, @"isEndpointCreationDataValid: Missing required tags", v16, v17, v18, v19, v21);
        sub_10033DBF4(v8, *(void **)(v8 + 120), v9);
LABEL_16:
        uint64_t v8 = 0;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isEndpointCreationDataValid]", 461, @"isEndpointCreationDataValid: _endpointCreationData is nil", a5, a6, a7, a8, v21);
      return 0;
    }
  }
  return v8;
}

uint64_t sub_10033D234(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v8 = SecCertificateCreateWithData(0, *(CFDataRef *)(a1 + 144));
    if (v8)
    {
      unsigned int v13 = sub_10033D88C((id *)v1, v8, v2, v3, v4, v5, v6, v7);
      CFStringRef v14 = @"NO";
      if (v13) {
        CFStringRef v14 = @"YES";
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 345, @"validatePublicKeyInLeafCert?  %@", v9, v10, v11, v12, (uint64_t)v14);
      if (v13)
      {
        CFStringRef commonName = 0;
        SecCertificateCopyCommonName(v8, &commonName);
        unsigned int v15 = *(void **)(v1 + 88);
        *(void *)(v1 + 88) = commonName;

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 353, @"Received readerInfo(CommonName): %@", v16, v17, v18, v19, *(void *)(v1 + 88));
        id v20 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:*(void *)(v1 + 88)];
        long long v21 = *(void **)(v1 + 136);
        *(void *)(v1 + 136) = v20;

        if (*(void *)(v1 + 112))
        {
          uint64_t v26 = [*(id *)(v1 + 136) readerIdentifier];
          uint64_t v27 = [v26 uppercaseString];
          uint64_t v28 = [*(id *)(v1 + 112) uppercaseString];
          unsigned __int8 v29 = [v27 isEqualToString:v28];

          if (v29)
          {
            uint64_t v30 = SecCertificateGetAuthorityKeyID();
            uint64_t v31 = kmlUtilHexStringFromData(v30);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 364, @"Leaf certificateAuthorityKeyID=%@", v32, v33, v34, v35, (uint64_t)v31);

            if (!v30)
            {
              BOOL v85 = 0;
LABEL_31:
              uint64_t v1 = v85;
              goto LABEL_16;
            }
            uint64_t v36 = objc_opt_new();
            [v36 addObject:v8];
            CFDataRef v37 = *(const __CFData **)(v1 + 24);
            if (v37)
            {
              NSErrorUserInfoKey v38 = SecCertificateCreateWithData(0, v37);
              if (!v38)
              {
                BOOL v85 = 0;
LABEL_30:

                goto LABEL_31;
              }
              long long v39 = v38;
              CFStringRef commonName = 0;
              SecCertificateCopyCommonName(v38, &commonName);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 382, @"Intermediate certificate CommonName: %@", v40, v41, v42, v43, (uint64_t)commonName);
              if (commonName) {
                CFRelease(commonName);
              }
              [v36 addObject:v39];
              NSErrorUserInfoKey v44 = SecCertificateGetAuthorityKeyID();

              uint64_t v45 = kmlUtilHexStringFromData(v44);
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 389, @"Intermediate certificateAuthorityKeyID=%@", v46, v47, v48, v49, (uint64_t)v45);

              uint64_t v30 = v44;
            }
            else
            {
              long long v39 = 0;
            }
            id v56 = objc_opt_new();
            id v57 = [*(id *)(v1 + 136) manufacturer];
            uint64_t v58 = [v56 getRootCertificateFor:v57 keyID:v30 error:0];
            uint64_t v59 = *(void **)(v1 + 32);
            *(void *)(v1 + 32) = v58;

            CFDataRef v60 = *(const __CFData **)(v1 + 32);
            if (v60)
            {
              uint64_t v61 = SecCertificateCreateWithData(0, v60);
              long long v66 = v61;
              if (v61)
              {
                CFStringRef commonName = 0;
                SecCertificateCopyCommonName(v61, &commonName);
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 414, @"Root certificate CommonName: %@", v67, v68, v69, v70, (uint64_t)commonName);
                if (commonName) {
                  CFRelease(commonName);
                }
                uint64_t v71 = (void *)SecCertificateCopyIssuerSummary();
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 419, @"rootCert certificateIssuer=%@", v72, v73, v74, v75, (uint64_t)v71);
                BOOL v76 = sub_10033D9A8((uint64_t)KmlEndpointCreationConfig, v66, v36);
              }
              else
              {
                KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 423, @"Root certificate is nil", v62, v63, v64, v65, v83);
                BOOL v76 = 0;
              }
              BOOL v85 = v76;
            }
            else
            {
              uint64_t v77 = kmlUtilHexStringFromData(v30);
              KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 398, @"Got nil certificate for issuer %@", v78, v79, v80, v81, (uint64_t)v77);

              BOOL v85 = 0;
            }

            goto LABEL_30;
          }
        }
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 358, @"Reader Id mismatch.", v22, v23, v24, v25, v82);
        uint64_t v50 = [*(id *)(v1 + 136) readerIdentifier];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isRemoteCertValid]", 359, @"In leaf cert:%@ and in endpoint creation config: %@", v51, v52, v53, v54, (uint64_t)v50);
      }
    }
    uint64_t v1 = 0;
LABEL_16:
  }
  return v1;
}

id *sub_10033D678(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v8 = sub_100313018((char *)[KmlMailboxMappingData alloc], *(void **)(a1 + 40), a2);
      uint64_t v16 = sub_10031380C((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);

      return v16;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isMailboxMappingDataValidForVersion:]", 486, @"isMailboxMappingDataValid: _mailboxMappingData is nil", a5, a6, a7, a8, v18);
  }
  return 0;
}

uint64_t sub_10033D6F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 48))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig isDeviceConfigDataValidForTransport:version:]", 499, @"isDeviceConfigDataValid: _deviceConfigData is nil", a5, a6, a7, a8, v25);
    return 0;
  }
  id v11 = objc_alloc_init((Class)NSMutableSet);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v12 = *(id *)(a1 + 80);
  id v13 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = *(void *)v26;
    while (2)
    {
      uint64_t v16 = 0;
      do
      {
        if (*(void *)v26 != v15) {
          objc_enumerationMutation(v12);
        }
        unsigned int v17 = sub_10005D5A8(*(void *)(*((void *)&v25 + 1) + 8 * (void)v16));
        if (!kmlUtilAddUniqueTagToSet(v11, v17))
        {
          uint64_t v23 = 0;
          goto LABEL_13;
        }
        uint64_t v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      id v14 = [v12 countByEnumeratingWithState:&v25 objects:v29 count:16];
      if (v14) {
        continue;
      }
      break;
    }
  }

  id v12 = (id)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], *(void **)(a1 + 48));
  uint64_t v23 = sub_100318010((uint64_t)v12, a3, a2, v18, v19, v20, v21, v22);
LABEL_13:

  return v23;
}

id *sub_10033D88C(id *a1, __SecCertificate *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1;
  if (!a1) {
    return v8;
  }
  if (!a2 || (id v10 = a1[12]) == 0 || ![v10 length])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig validatePublicKeyInLeafCert:]", 432, @"leafCert or/and readerPK is nil", a5, a6, a7, a8, v25);
    return 0;
  }
  if (*(unsigned char *)[v8[12] bytes] != 4) {
    return 0;
  }
  id v11 = SecCertificateCopyKey(a2);
  uint64_t v16 = v11;
  if (v11)
  {
    CFErrorRef error = 0;
    CFDataRef v17 = SecKeyCopyExternalRepresentation(v11, &error);
    CFDataRef v22 = v17;
    if (v17)
    {
      uint64_t v8 = (id *)[(__CFData *)v17 isEqualToData:v8[12]];
    }
    else
    {
      CFErrorRef v24 = error;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig validatePublicKeyInLeafCert:]", 451, @"SecKeyCopyExternalRepresentation() failed. error: %@", v18, v19, v20, v21, (uint64_t)error);

      uint64_t v8 = 0;
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig validatePublicKeyInLeafCert:]", 443, @"SecCertificateCopyPublicKey() failed.", v12, v13, v14, v15, v25);
    uint64_t v8 = 0;
  }

  return v8;
}

BOOL sub_10033D9A8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  if (v5)
  {
    id v6 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
    uint64_t v7 = [v6 objectForKey:@"SecurityPolicy"];
    if (isInternalBuild() && v7)
    {
      BasicX509 = SecPolicyCreateBasicX509();
      uint64_t v13 = @"Using basic policy";
      uint64_t v14 = 940;
    }
    else
    {
      BasicX509 = (void *)SecPolicyCreateAlisha();
      uint64_t v40 = isInternalBuild();
      uint64_t v13 = @"Using Alisha policy (%d) (%d)";
      uint64_t v14 = 943;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", v14, v13, v8, v9, v10, v11, v40);
    if (!BasicX509) {
      goto LABEL_10;
    }
    SecTrustRef trust = 0;
    uint64_t v16 = SecTrustCreateWithCertificates(v5, BasicX509, &trust);
    if (v16)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 953, @"Cannot create trust for certificate evaluation, error code = %d", v17, v18, v19, v20, v16);
LABEL_10:
      BOOL v15 = 0;
LABEL_17:

      goto LABEL_18;
    }
    uint64_t v21 = trust;
    CFArrayRef v22 = +[NSArray arrayWithObject:v4];
    uint64_t v23 = SecTrustSetAnchorCertificates(v21, v22);
    if (v23)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 963, @"SecTrustSetAnchorCertificates failed, error code = %d", v24, v25, v26, v27, v23);
    }
    else
    {
      uint64_t v28 = SecTrustSetAnchorCertificatesOnly(v21, 1u);
      if (!v28)
      {
        CFErrorRef error = 0;
        BOOL v15 = SecTrustEvaluateWithError(v21, &error);
        if (!v15)
        {
          CFStringRef v34 = CFErrorCopyDescription(error);
          if (v34)
          {
            CFStringRef v39 = v34;
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 978, @"Trust evaluation failed: %@", v35, v36, v37, v38, (uint64_t)v34);
            CFRelease(v39);
          }
        }
        if (error) {
          CFRelease(error);
        }
        goto LABEL_16;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointCreationConfig isCertificateChainValid:chain:]", 968, @"SecTrustSetAnchorCertificatesOnly failed, error code = %d", v29, v30, v31, v32, v28);
    }
    BOOL v15 = 0;
LABEL_16:

    goto LABEL_17;
  }
  BOOL v15 = 0;
LABEL_18:

  return v15;
}

void sub_10033DBF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = [objc_alloc((Class)NSMutableSet) initWithSet:v5];
    [v7 minusSet:v6];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        uint64_t v12 = 0;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = [*(id *)(*((void *)&v18 + 1) + 8 * (void)v12) unsignedIntegerValue];
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig logMissingRequiredTags:receivedTagsSet:]", 905, @"KmlEndpointCreationConfig: Missing required tag: 0x%lx", v14, v15, v16, v17, (uint64_t)v13);
          uint64_t v12 = (char *)v12 + 1;
        }
        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v10);
    }
  }
}

id sub_10033DD5C(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 73)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033DE88(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 81)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033DFB4(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 82)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033E0E0(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 78)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033E20C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v1 = *(id *)(a1 + 72);
  id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(void *)(*((void *)&v7 + 1) + 8 * i);
        if (sub_10005D5A8(v5) == 75)
        {
          id v2 = (id)sub_100316118(v5);
          goto LABEL_12;
        }
      }
      id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v2;
}

id sub_10033E324(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v1 = *(id *)(a1 + 72);
  id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v8;
    while (2)
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(void *)v8 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(void *)(*((void *)&v7 + 1) + 8 * i);
        if (sub_10005D5A8(v5) == 74)
        {
          id v2 = (id)sub_100316118(v5);
          goto LABEL_12;
        }
      }
      id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  return v2;
}

uint64_t sub_10033E43C(uint64_t result)
{
  if (result) {
    return sub_10033E44C(result, 75);
  }
  return result;
}

uint64_t sub_10033E44C(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v3 = *(id *)(a1 + 72);
  id v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v25;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(v3);
        }
        long long v7 = *(id **)(*((void *)&v24 + 1) + 8 * i);
        if (sub_10005D5A8((uint64_t)v7) == 96)
        {
          sub_100315FB4(v7);
          id v4 = (id)objc_claimAutoreleasedReturnValue();
          goto LABEL_12;
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if ([v4 length])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig sharingInChainMailboxSizeForTag:]", 655, @"found override %@", v8, v9, v10, v11, (uint64_t)v4);
    sub_100315960((uint64_t)KmlTlv, v4);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    id v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v21;
      while (2)
      {
        for (j = 0; j != v14; j = (char *)j + 1)
        {
          if (*(void *)v21 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void *)(*((void *)&v20 + 1) + 8 * (void)j);
          if (sub_10005D5A8(v17) == a2)
          {
            uint64_t v18 = sub_100316118(v17);
            goto LABEL_23;
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }
    uint64_t v18 = 0;
LABEL_23:
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

uint64_t sub_10033E66C(uint64_t result)
{
  if (result) {
    return sub_10033E44C(result, 74);
  }
  return result;
}

id sub_10033E67C(uint64_t a1)
{
  if (a1)
  {
    id v2 = +[NSMutableData data];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = *(id *)(a1 + 72);
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v11 + 1) + 8 * i);
          if (sub_10005D5A8(v8) == 74
            || sub_10005D5A8(v8) == 75
            || sub_10005D5A8(v8) == 96)
          {
            uint64_t v9 = sub_100316294(v8);
            [v2 appendData:v9];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

uint64_t sub_10033E7F4(uint64_t a1)
{
  if (a1)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v10;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(void *)v10 != v4) {
            objc_enumerationMutation(v1);
          }
          uint64_t v6 = *(void *)(*((void *)&v9 + 1) + 8 * i);
          if (sub_10005D5A8(v6) == 70)
          {
            unsigned __int8 v7 = sub_100316118(v6);
            goto LABEL_12;
          }
        }
        id v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
    unsigned __int8 v7 = -1;
LABEL_12:
  }
  else
  {
    return 0;
  }
  return v7;
}

uint64_t sub_10033E910(uint64_t a1)
{
  if (a1)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    id v1 = *(id *)(a1 + 72);
    id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v10;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(void *)v10 != v4) {
            objc_enumerationMutation(v1);
          }
          uint64_t v6 = *(void *)(*((void *)&v9 + 1) + 8 * i);
          if (sub_10005D5A8(v6) == 71)
          {
            unsigned __int8 v7 = sub_100316118(v6);
            goto LABEL_12;
          }
        }
        id v3 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
    unsigned __int8 v7 = 47;
LABEL_12:
  }
  else
  {
    return 0;
  }
  return v7;
}

id sub_10033EA2C(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 80);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 74)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033EB58(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 80);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          id v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 75)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id sub_10033EC84(void *a1)
{
  if (a1)
  {
    a1 = sub_10033ECB8((uint64_t)a1, 74);
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10033ECB8(uint64_t a1, int a2)
{
  if (a1)
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v3 = *(id *)(a1 + 80);
    id v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v25;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v25 != v5) {
            objc_enumerationMutation(v3);
          }
          long long v7 = *(id **)(*((void *)&v24 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v7) == 96)
          {
            sub_100315FB4(v7);
            id v4 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v4 = [v3 countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    if ([v4 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig sharingInAChainDeviceConfigMailboxSettingDataForTag:]", 789, @"found override %@", v8, v9, v10, v11, (uint64_t)v4);
      sub_100315960((uint64_t)KmlTlv, v4);
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v12 = (id)objc_claimAutoreleasedReturnValue();
      id v13 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v21;
        while (2)
        {
          for (j = 0; j != v14; j = (char *)j + 1)
          {
            if (*(void *)v21 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(id **)(*((void *)&v20 + 1) + 8 * (void)j);
            if (sub_10005D5A8((uint64_t)v17) == a2)
            {
              uint64_t v18 = sub_100315FB4(v17);
              goto LABEL_23;
            }
          }
          id v14 = [v12 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v14) {
            continue;
          }
          break;
        }
      }
      uint64_t v18 = 0;
LABEL_23:
    }
    else
    {
      uint64_t v18 = 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

id sub_10033EEEC(void *a1)
{
  if (a1)
  {
    a1 = sub_10033ECB8((uint64_t)a1, 75);
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10033EF20(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 80);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          uint64_t v5 = *(void *)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8(v5) == 92)
          {
            sub_100316294(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

id *sub_10033F04C(id *a1)
{
  if (a1)
  {
    a1 = (id *)[a1[5] copy];
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_10033F07C(id *a1)
{
  if (a1)
  {
    a1 = (id *)[a1[6] copy];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_10033F0AC(uint64_t a1)
{
  if (a1)
  {
    sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 16));
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v1 = (id)objc_claimAutoreleasedReturnValue();
    id v2 = [v1 countByEnumeratingWithState:&v27 objects:v31 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = *(void *)v28;
      while (2)
      {
        for (i = 0; i != v3; i = (char *)i + 1)
        {
          if (*(void *)v28 != v4) {
            objc_enumerationMutation(v1);
          }
          uint64_t v6 = *(id **)(*((void *)&v27 + 1) + 8 * i);
          int v7 = sub_10005D5A8((uint64_t)v6);
          if (isDeviceKeyAttestationTag(v7))
          {
            long long v19 = sub_100315FB4(v6);
            long long v20 = kmlUtilHexStringFromData(v19);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig getKeyAttestation]", 832, @"KeyCreationConfig: Received key attestation Data : %@", v21, v22, v23, v24, (uint64_t)v20);

            uint64_t v18 = sub_100315FB4(v6);
            goto LABEL_15;
          }
          int v8 = sub_10005D5A8((uint64_t)v6);
          if (isEndOfKeyConfigTag(v8))
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig getKeyAttestation]", 835, @"KeyCreationConfig: Received Data Complete TLV", v9, v10, v11, v12, v26);
            goto LABEL_14;
          }
          unsigned int v13 = sub_10005D5A8((uint64_t)v6);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointCreationConfig getKeyAttestation]", 838, @"KeyCreationConfig: TLV with un-expected tag (%d)", v14, v15, v16, v17, v13);
        }
        id v3 = [v1 countByEnumeratingWithState:&v27 objects:v31 count:16];
        uint64_t v18 = 0;
        if (v3) {
          continue;
        }
        break;
      }
    }
    else
    {
LABEL_14:
      uint64_t v18 = 0;
    }
LABEL_15:
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

void *sub_10033F2A8(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = (void *)a1[11];
    if (!v2)
    {
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      id v3 = (id)v1[10];
      id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v15;
        do
        {
          for (i = 0; i != v5; i = (char *)i + 1)
          {
            if (*(void *)v15 != v6) {
              objc_enumerationMutation(v3);
            }
            int v8 = *(id **)(*((void *)&v14 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v8) == 89)
            {
              id v9 = objc_alloc((Class)NSString);
              uint64_t v10 = sub_100315FB4(v8);
              id v11 = [v9 initWithData:v10 encoding:4 (void)v14];
              uint64_t v12 = (void *)v1[11];
              v1[11] = v11;
            }
          }
          id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
        }
        while (v5);
      }

      id v2 = (void *)v1[11];
    }
    a1 = [v2 copy:v14];
  }

  return a1;
}

uint64_t sub_10033F418(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 80);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          uint64_t v5 = *(void *)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8(v5) == 40728)
          {
            LOBYTE(v2) = sub_100316118(v5);
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

uint64_t sub_10033F53C(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 80);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          uint64_t v5 = *(void *)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8(v5) == 40727)
          {
            LOBYTE(v2) = sub_100316118(v5);
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  return v2;
}

id sub_10033F660(uint64_t a1)
{
  if (a1)
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v1 = *(id *)(a1 + 80);
    id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v8;
      while (2)
      {
        for (i = 0; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v8 != v3) {
            objc_enumerationMutation(v1);
          }
          uint64_t v5 = *(id **)(*((void *)&v7 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v5) == 40736)
          {
            sub_100315FB4(v5);
            id v2 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v2 = [v1 countByEnumeratingWithState:&v7 objects:v11 count:16];
        if (v2) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

uint64_t sub_10033F798(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 129);
  }
  return result;
}

uint64_t sub_10033F7A4(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 130);
  }
  return result;
}

void *sub_10033F89C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v40.receiver = a1;
    v40.super_class = (Class)KmlBindingAttestation;
    id v4 = [super init];
    a1 = v4;
    if (v4)
    {
      uint64_t v5 = (void *)v4[1];
      v4[1] = 0;

      uint64_t v6 = (void *)a1[2];
      a1[2] = 0;

      long long v7 = (void *)a1[3];
      a1[3] = 0;

      if ([v3 length])
      {
        uint64_t v12 = sub_100315960((uint64_t)KmlTlv, v3);
        if ([v12 count])
        {
          long long v20 = [v12 objectAtIndexedSubscript:0];
          int v21 = sub_10005D5A8((uint64_t)v20);

          if (v21 == 48)
          {
            uint64_t v22 = [v12 objectAtIndexedSubscript:0];
            uint64_t v23 = sub_100315FB4(v22);
            uint64_t v24 = (void *)a1[1];
            a1[1] = v23;
          }
        }
        sub_10033F9EC((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19, (uint64_t)v40.receiver);
        sub_10033FC24(a1, v25, v26, v27, v28, v29, v30, v31, (uint64_t)v40.receiver);
        sub_10033FEA4((uint64_t)a1, v32, v33, v34, v35, v36, v37, v38, (uint64_t)v40.receiver);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBindingAttestation initWithData:]", 37, @"Null data provided", v8, v9, v10, v11, (uint64_t)v40.receiver);
      }
    }
  }

  return a1;
}

void sub_10033F9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if ([*(id *)(a1 + 8) length])
    {
      sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 8));
      id v39 = (id)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)[v39 count] > 3)
      {
        uint64_t v18 = [v39 objectAtIndexedSubscript:0];
        int v19 = sub_10005D5A8((uint64_t)v18);

        if (v19 == 48)
        {
          long long v20 = [v39 objectAtIndexedSubscript:0];
          uint64_t v21 = sub_100315FB4(v20);
          uint64_t v22 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v21;
        }
        uint64_t v23 = [v39 objectAtIndexedSubscript:1];
        int v24 = sub_10005D5A8((uint64_t)v23);

        if (v24 == 48)
        {
          uint64_t v25 = [v39 objectAtIndexedSubscript:1];
          uint64_t v26 = sub_100315FB4(v25);
          uint64_t v27 = *(void **)(a1 + 56);
          *(void *)(a1 + 56) = v26;
        }
        uint64_t v28 = [v39 objectAtIndexedSubscript:2];
        int v29 = sub_10005D5A8((uint64_t)v28);

        if (v29 == 48)
        {
          uint64_t v30 = [v39 objectAtIndexedSubscript:2];
          uint64_t v31 = sub_100315FB4(v30);
          uint64_t v32 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v31;
        }
        uint64_t v33 = [v39 objectAtIndexedSubscript:3];
        int v34 = sub_10005D5A8((uint64_t)v33);

        if (v34 == 4)
        {
          uint64_t v35 = [v39 objectAtIndexedSubscript:3];
          uint64_t v36 = sub_100315FB4(v35);
          uint64_t v37 = *(void **)(a1 + 40);
          *(void *)(a1 + 40) = v36;
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseBindingAttestationSequence]", 66, @"Not enough elements in the BindingAttestation Sequence", v14, v15, v16, v17, v38);
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseBindingAttestationSequence]", 58, @"Missing Binding Attestation sequence", v10, v11, v12, v13, a9);
    }
  }
}

void sub_10033FC24(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return;
  }
  if ([(id)a1[2] length])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBindingAttestation parseAttestationDataSequence]", 94, @"attestationDataSequence : %@", v10, v11, v12, v13, a1[2]);
    sub_100315960((uint64_t)KmlTlv, (void *)a1[2]);
    id v40 = (id)objc_claimAutoreleasedReturnValue();
    if ((unint64_t)[v40 count] > 4)
    {
      uint64_t v18 = [v40 objectAtIndexedSubscript:0];
      int v19 = sub_10005D5A8((uint64_t)v18);

      if (v19 == 4)
      {
        long long v20 = [v40 objectAtIndexedSubscript:0];
        uint64_t v21 = sub_100315FB4(v20);
        uint64_t v22 = (void *)a1[8];
        a1[8] = v21;
      }
      uint64_t v23 = [v40 objectAtIndexedSubscript:3];
      int v24 = sub_10005D5A8((uint64_t)v23);

      if (v24 == 4)
      {
        uint64_t v25 = [v40 objectAtIndexedSubscript:3];
        uint64_t v26 = sub_100315FB4(v25);
        uint64_t v27 = (void *)a1[9];
        a1[9] = v26;
      }
      uint64_t v28 = [v40 objectAtIndexedSubscript:4];
      int v29 = sub_10005D5A8((uint64_t)v28);

      uint64_t v30 = v40;
      if (v29 != 4) {
        goto LABEL_18;
      }
      uint64_t v31 = [v40 objectAtIndexedSubscript:4];
      uint64_t v32 = sub_100315FB4(v31);
      uint64_t v33 = sub_100315960((uint64_t)KmlTlv, v32);

      if ([v33 count])
      {
        int v34 = [v33 objectAtIndexedSubscript:0];
        int v35 = sub_10005D5A8((uint64_t)v34);

        if (v35 == 48)
        {
          uint64_t v36 = [v33 objectAtIndexedSubscript:0];
          uint64_t v37 = sub_100315FB4(v36);
          uint64_t v38 = (void *)a1[3];
          a1[3] = v37;
        }
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseAttestationDataSequence]", 100, @"Not enough elements in the AttestationData Sequence", v14, v15, v16, v17, v39);
    }
    uint64_t v30 = v40;
LABEL_18:

    return;
  }

  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseAttestationDataSequence]", 90, @"Missing Attestation Data Sequence", v10, v11, v12, v13, a9);
}

void sub_10033FEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if ([*(id *)(a1 + 24) length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBindingAttestation parseExtensionsSequence]", 135, @"extensionSequence : %@", v10, v11, v12, v13, *(void *)(a1 + 24));
      sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 24));
      id v27 = (id)objc_claimAutoreleasedReturnValue();
      if ((unint64_t)[v27 count] > 2)
      {
        uint64_t v18 = [v27 objectAtIndexedSubscript:1];
        int v19 = sub_10005D5A8((uint64_t)v18);

        if (v19 == 4)
        {
          long long v20 = [v27 objectAtIndexedSubscript:1];
          uint64_t v21 = sub_100315FB4(v20);
          uint64_t v22 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = v21;
        }
        uint64_t v23 = [v27 objectAtIndexedSubscript:2];
        int v24 = sub_10005D5A8((uint64_t)v23);

        if (v24 == 1)
        {
          uint64_t v25 = [v27 objectAtIndexedSubscript:2];
          *(unsigned char *)(a1 + 32) = sub_10031609C(v25) != 0;
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseExtensionsSequence]", 141, @"Not enough elements in the Extensions Sequence", v14, v15, v16, v17, v26);
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlBindingAttestation parseExtensionsSequence]", 131, @"Missing Extensions Sequence Data", v10, v11, v12, v13, a9);
    }
  }
}

id sub_1003400EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = +[NSMutableString stringWithString:@"DIGK."];
  unsigned int v4 = [v2 isEqualToString:@"FRND"];

  if (v4) {
    CFStringRef v5 = @"FRND";
  }
  else {
    CFStringRef v5 = @"OWNR";
  }
  [v3 appendString:v5];
  uint64_t v6 = randomStringWithLength(4);
  [v3 appendFormat:@".%@=", v6];
  long long v7 = +[NSDate date];
  id v8 = objc_alloc_init((Class)NSDateFormatter);
  uint64_t v9 = +[NSTimeZone timeZoneWithName:@"UTC"];
  [v8 setTimeZone:v9];

  [v8 setDateFormat:@"yyMMddHHmm"];
  uint64_t v10 = +[NSLocale localeWithLocaleIdentifier:@"en_US_POSIX"];
  [v8 setLocale:v10];

  uint64_t v11 = [v8 stringFromDate:v7];
  [v3 appendString:v11];

  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"+[KmlEndpointManager kmlUniqueEndpointId:]", 118, @"Unique Endpoint ID: %@", v12, v13, v14, v15, (uint64_t)v3);

  return v3;
}

CFStringRef sub_100340298(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [v2 componentsSeparatedByString:@"."];

  if ((unint64_t)[v3 count] < 3)
  {
    CFStringRef v5 = 0;
  }
  else
  {
    unsigned int v4 = [v3 objectAtIndexedSubscript:1];
    CFStringRef v5 = @"OWNR";
    unsigned __int8 v6 = [v4 isEqualToString:@"OWNR"];

    if ((v6 & 1) == 0)
    {
      long long v7 = [v3 objectAtIndexedSubscript:1];
      unsigned int v8 = [v7 isEqualToString:@"FRND"];

      if (v8) {
        CFStringRef v5 = @"FRND";
      }
      else {
        CFStringRef v5 = 0;
      }
    }
  }

  return v5;
}

uint64_t sub_100340370(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  if (v2)
  {
    uint64_t v32 = 0;
    long long v7 = SESEndPointList();
    id v8 = 0;
    uint64_t v13 = v8;
    if (v8)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager getTotalKeysFor:]", 155, @"Error in getting endpoint list: %@", v9, v10, v11, v12, (uint64_t)v8);
      uint64_t v18 = 0;
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      id v27 = v7;
      id v19 = v7;
      id v20 = [v19 countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v20)
      {
        id v21 = v20;
        uint64_t v18 = 0;
        uint64_t v22 = *(void *)v29;
        do
        {
          for (i = 0; i != v21; i = (char *)i + 1)
          {
            if (*(void *)v29 != v22) {
              objc_enumerationMutation(v19);
            }
            int v24 = [*(id *)(*((void *)&v28 + 1) + 8 * i) subjectIdentifier];
            uint64_t v25 = sub_100340298((uint64_t)KmlEndpointManager, v24);

            v18 += [v25 isEqualToString:v2];
          }
          id v21 = [v19 countByEnumeratingWithState:&v28 objects:v33 count:16];
        }
        while (v21);
      }
      else
      {
        uint64_t v18 = 0;
      }

      long long v7 = v27;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager getTotalKeysFor:]", 158, @"Total keys for %@ is %ld", v14, v15, v16, v17, (uint64_t)v2);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager getTotalKeysFor:]", 139, @"Invalid keyType - %@", v3, v4, v5, v6, 0);
    uint64_t v18 = 0;
  }

  return v18;
}

id sub_100340574(uint64_t a1, void *a2, char a3)
{
  id v4 = a2;
  self;
  uint64_t v5 = [v4 mailboxMapping];
  uint64_t v6 = (void *)sub_1002FFCE4((uint64_t)[KmlVersions alloc], v4);
  long long v7 = sub_100313018((char *)[KmlMailboxMappingData alloc], v5, (__int16)[v6 agreedKmlVehicleVersion]);
  if (sub_100313ABC((uint64_t)v7) == 128)
  {
    id v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v47 = NSLocalizedDescriptionKey;
    uint64_t v9 = +[NSString stringWithUTF8String:KmlErrorString(212)];
    uint64_t v48 = v9;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v48 forKeys:&v47 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v8 code:212 userInfo:v10];

    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager updateMailboxForEndpoint:withUsedSlotIdentifierIndex:]", 173, @"Can not update used slot identifiers due to : %@", v12, v13, v14, v15, (uint64_t)v11);
LABEL_5:
    id v33 = v11;
    goto LABEL_10;
  }
  unsigned int v16 = sub_100313B1C((uint64_t)v7);
  if (v16 < sub_100313AC8((uint64_t)v7))
  {
    uint64_t v17 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v45 = NSLocalizedDescriptionKey;
    uint64_t v18 = +[NSString stringWithUTF8String:KmlErrorString(212)];
    uint64_t v46 = v18;
    id v19 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v17 code:212 userInfo:v19];

    id v27 = sub_100313640((id *)v7, v20, v21, v22, v23, v24, v25, v26);
    long long v28 = [v27 asHexString];
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager updateMailboxForEndpoint:withUsedSlotIdentifierIndex:]", 179, @"Underflow detected in mailbox offsets %@", v29, v30, v31, v32, (uint64_t)v28);

    goto LABEL_5;
  }
  int v34 = [v4 publicKeyIdentifier];
  int v35 = kmlUtilHexStringFromData(v34);

  sub_100313AC8((uint64_t)v7);
  sub_100313B1C((uint64_t)v7);
  sub_100313AC8((uint64_t)v7);
  uint64_t v44 = 0;
  uint64_t v36 = SESEndPointGetPrivateData();
  id v37 = 0;
  if (v37 || (unint64_t)[v36 length] <= 1)
  {
    id v33 = v37;
  }
  else
  {
    id v39 = [objc_alloc((Class)NSMutableData) initWithData:v36];
    id v40 = v36;
    char v41 = *(unsigned char *)[v40 bytes];
    char v43 = v41 | sub_1003139E4((uint64_t)v7);
    [v39 replaceBytesInRange:0 withBytes:&v43];
    char v42 = *((unsigned char *)[v40 bytes] + 1) & ~(1 << a3);
    [v39 replaceBytesInRange:1 withBytes:&v42];
    sub_100313AC8((uint64_t)v7);
    SESEndPointSetPrivateData();
    id v33 = 0;
  }
LABEL_10:

  return v33;
}

id sub_1003409A4(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  id v6 = a4;
  self;
  uint64_t v72 = 0;
  long long v7 = SESEndPointList();
  id v8 = 0;
  if (v8)
  {
    uint64_t v13 = v8;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 229, @"Error in getting endpoint list: %@", v9, v10, v11, v12, (uint64_t)v8);
    goto LABEL_21;
  }
  if (![v7 count])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 234, @"No keys in the SE database", v14, v15, v16, v17, v65);
    NSErrorUserInfoKey v45 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v76 = NSLocalizedDescriptionKey;
    uint64_t v46 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v77 = v46;
    NSErrorUserInfoKey v47 = &v77;
    uint64_t v48 = &v76;
LABEL_18:
    uint64_t v49 = +[NSDictionary dictionaryWithObjects:v47 forKeys:v48 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v45 code:210 userInfo:v49];

    goto LABEL_21;
  }
  unsigned int v66 = a3;
  unsigned int v67 = a2;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  id v18 = v7;
  id v19 = [v18 countByEnumeratingWithState:&v68 objects:v75 count:16];
  if (!v19)
  {
LABEL_12:

LABEL_16:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 249, @"Owner key with id %@, does not exist", v29, v30, v31, v32, (uint64_t)v6);
    NSErrorUserInfoKey v45 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v73 = NSLocalizedDescriptionKey;
    uint64_t v46 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v74 = v46;
    NSErrorUserInfoKey v47 = &v74;
    uint64_t v48 = &v73;
    goto LABEL_18;
  }
  id v20 = v19;
  uint64_t v21 = *(void *)v69;
LABEL_6:
  uint64_t v22 = 0;
  while (1)
  {
    if (*(void *)v69 != v21) {
      objc_enumerationMutation(v18);
    }
    uint64_t v23 = *(void **)(*((void *)&v68 + 1) + 8 * v22);
    uint64_t v24 = [v23 publicKeyIdentifier];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 240, @"checking key with id: %@", v25, v26, v27, v28, (uint64_t)v24);
    if ([v24 isEqual:v6]) {
      break;
    }

    if (v20 == (id)++v22)
    {
      id v20 = [v18 countByEnumeratingWithState:&v68 objects:v75 count:16];
      if (v20) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
  }
  id v33 = v23;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 243, @"key with id %@ exists", v34, v35, v36, v37, (uint64_t)v6);

  if (!v33) {
    goto LABEL_16;
  }
  uint64_t v38 = [v33 sharingTokenAvailabilityBitmap];

  if (v38)
  {
    char v43 = [v33 sharingTokenAvailabilityBitmap];
    uint64_t v44 = (uint64_t)[v43 unsignedCharValue];
  }
  else
  {
    uint64_t v44 = 254;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 258, @"Available bitmap: %02X", v39, v40, v41, v42, v44);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 260, @"Reserved indices %02X", v50, v51, v52, v53, v66);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 263, @"Freed up indices %02X", v54, v55, v56, v57, v67);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager freeSlotIdIndices:reserveSlotIdIndices:forEndpointId:]", 266, @"BitMap with 0s for pending invitations: %02X", v58, v59, v60, v61, v44 & ~v66 | v67);
  uint64_t v62 = [v33 publicKeyIdentifier];
  uint64_t v63 = kmlUtilHexStringFromData(v62);
  uint64_t v13 = SESEndPointUpdateWithBlock();

LABEL_21:

  return v13;
}

void sub_100340E40(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 32);
  id v3 = a2;
  id v4 = +[NSNumber numberWithUnsignedChar:v2];
  [v3 setSharingTokenAvailabilityBitmap:v4];
}

id sub_100340EB8()
{
  self;
  byte_100468430 = 1;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager handleFirstUnlockNotification]", 276, @"Set up statistics reporting", v0, v1, v2, v3, v8);
  id v4 = [objc_alloc((Class)NSBackgroundActivityScheduler) initWithIdentifier:@"com.apple.sesd.kml.statsReportingActivity"];
  uint64_t v5 = (void *)qword_100468428;
  qword_100468428 = (uint64_t)v4;

  [(id)qword_100468428 setPreregistered:1];
  id v6 = (void *)qword_100468428;

  return _[v6 scheduleWithBlock:&stru_10041A850];
}

void sub_100340F50(id a1, id a2)
{
  id v7 = a2;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager handleFirstUnlockNotification]_block_invoke", 280, @"Handling statistics reporting", v2, v3, v4, v5, v6);
  sub_100340FB4((uint64_t)KmlEndpointManager, v7);
}

void sub_100340FB4(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  uint64_t v3 = dispatch_get_global_queue(21, 0);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034106C;
  block[3] = &unk_10040C108;
  id v6 = v2;
  id v4 = v2;
  dispatch_async(v3, block);
}

void sub_10034106C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (byte_100468430)
  {
    uint64_t v52 = 0;
    uint64_t v9 = SESEndPointList();
    id v14 = 0;
    if (v14)
    {
      LOBYTE(v15) = 0;
      int v16 = 0;
      unsigned __int8 v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      int v20 = 0;
      char v21 = 1;
    }
    else
    {
      uint64_t v42 = 0;
      char v43 = v9;
      uint64_t v44 = a1;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      id v22 = v9;
      id v23 = [v22 countByEnumeratingWithState:&v48 objects:v53 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v15 = 0;
        uint64_t v45 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        int v20 = 0;
        uint64_t v25 = *(void *)v49;
        unsigned __int8 v47 = 1;
        uint64_t v26 = (id *)&unk_100468000;
        while (2)
        {
          for (i = 0; i != v24; i = (char *)i + 1)
          {
            if (*(void *)v49 != v25) {
              objc_enumerationMutation(v22);
            }
            uint64_t v28 = *(void **)(*((void *)&v48 + 1) + 8 * i);
            if (objc_msgSend(v26[133], "shouldDefer", v42))
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager reportEndpointStatistics:]_block_invoke", 301, @"Honor Defer request from system", v29, v30, v31, v32, v42);
              (*(void (**)(void))(*(void *)(v44 + 32) + 16))();

              return;
            }
            id v33 = [v28 endPointType];
            if (v33 == (id)3)
            {
              ++v18;
            }
            else if (v33 == (id)2)
            {
              ++v19;
            }
            else if (v33 == (id)1)
            {
              id v34 = v22;
              uint64_t v46 = v19;
              uint64_t v35 = v18;
              uint64_t v36 = v15;
              uint64_t v37 = [v28 subjectIdentifier];
              uint64_t v38 = sub_100340298((uint64_t)KmlEndpointManager, v37);

              if ([v38 isEqualToString:@"OWNR"])
              {
                uint64_t v39 = [v28 bleAddress];

                if (v39) {
                  uint64_t v36 = (v36 + 1);
                }
                else {
                  ++v20;
                }
              }
              else if ([v38 isEqualToString:@"FRND"])
              {
                uint64_t v40 = [v28 bleAddress];

                if (v40) {
                  ++BYTE4(v45);
                }
                else {
                  LODWORD(v45) = v45 + 1;
                }
              }
              if (v47)
              {
                uint64_t v41 = [v28 environment];
                unsigned __int8 v47 = [v41 isEqualToString:@"P"];
              }
              else
              {
                unsigned __int8 v47 = 0;
              }
              id v22 = v34;

              uint64_t v15 = v36;
              uint64_t v18 = v35;
              uint64_t v19 = v46;
              uint64_t v26 = (id *)&unk_100468000;
            }
          }
          id v24 = [v22 countByEnumeratingWithState:&v48 objects:v53 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }
      else
      {
        LOBYTE(v15) = 0;
        uint64_t v45 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        int v20 = 0;
        unsigned __int8 v47 = 1;
      }

      uint64_t v9 = v43;
      a1 = v44;
      id v14 = (id)v42;
      int v16 = v45;
      unsigned __int8 v17 = BYTE4(v45);
      char v21 = v47;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager reportEndpointStatistics:]_block_invoke", 339, @"Reporting general statistics", v10, v11, v12, v13, v42);
    sub_1002F9638((uint64_t)KmlAnalyticsLogger, (v15 << 16) | (v20 << 24), (v16 << 24) | (v17 << 16), v18, v19, v21 & 1);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager reportEndpointStatistics:]_block_invoke", 346, @"Statistics reporting can only happen after first unlock", a5, a6, a7, a8, v42);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *sub_100341424(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  self;
  uint64_t v38 = 0;
  uint64_t v5 = SESEndPointList();
  id v6 = 0;
  uint64_t v11 = v6;
  if (v6)
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager getEndpointForKeyIdentifier:withError:]", 359, @"Error in getting endpoint list: %@", v7, v8, v9, v10, (uint64_t)v6);
    if (!a3) {
      goto LABEL_17;
    }
    id v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    uint64_t v13 = [v11 userInfo];
    *a3 = +[NSError errorWithDomain:v12 code:210 userInfo:v13];

    a3 = 0;
    goto LABEL_16;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v33 = v5;
  id v12 = v5;
  id v14 = [v12 countByEnumeratingWithState:&v34 objects:v41 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v35;
    while (2)
    {
      for (i = 0; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v35 != v16) {
          objc_enumerationMutation(v12);
        }
        uint64_t v18 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        uint64_t v19 = [v18 publicKeyIdentifier];
        unsigned __int8 v20 = [v19 isEqualToData:v4];

        if (v20)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlEndpointManager getEndpointForKeyIdentifier:withError:]", 368, @"Found our endpoint", v21, v22, v23, v24, v32);
          a3 = v18;
          goto LABEL_15;
        }
      }
      id v15 = [v12 countByEnumeratingWithState:&v34 objects:v41 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }

  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlEndpointManager getEndpointForKeyIdentifier:withError:]", 374, @"Failed to find endpoint", v25, v26, v27, v28, v32);
  if (a3)
  {
    id v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
    uint64_t v29 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v40 = v29;
    uint64_t v30 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
    *a3 = +[NSError errorWithDomain:v12 code:210 userInfo:v30];

    a3 = 0;
LABEL_15:
    uint64_t v5 = v33;
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v5 = v33;
LABEL_17:

  return a3;
}

id *sub_10034171C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v25.receiver = a1;
    v25.super_class = (Class)KmlEndpointManager;
    uint64_t v8 = (id *)[super init];
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      uint64_t v9 = kmlUtilDataForHexString(a1[1]);
      id v10 = a1[2];
      a1[2] = (id)v9;

      id v11 = a1[3];
      a1[3] = 0;

      id v12 = a1[5];
      a1[5] = 0;

      id v13 = a1[4];
      a1[4] = 0;

      id v14 = a1[6];
      a1[6] = 0;

      id v15 = a1[7];
      a1[7] = 0;

      id v16 = a1[8];
      a1[8] = 0;

      id v17 = a1[9];
      a1[9] = 0;

      id v18 = a1[10];
      a1[10] = 0;

      id v19 = a1[11];
      a1[11] = 0;

      id v20 = a1[12];
      a1[12] = 0;

      id v21 = a1[13];
      a1[13] = 0;

      id v22 = a1[14];
      a1[14] = 0;

      objc_storeStrong(a1 + 17, a3);
      *((unsigned char *)a1 + 121) = 0;
      id v23 = a1[16];
      a1[16] = 0;

      objc_storeWeak(a1 + 19, 0);
    }
  }

  return a1;
}

id sub_1003418CC(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = sub_100341C84(a1);
    if (v4)
    {
      id v9 = (id)v4;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 423, @"Error getting endpoint - %@", v5, v6, v7, v8, v4);
      if (a2)
      {
        id v9 = v9;
        id v10 = 0;
        *a2 = v9;
      }
      else
      {
        id v10 = 0;
      }
LABEL_20:

      goto LABEL_21;
    }
    id v11 = [*(id *)(a1 + 24) publicKeyIdentifier];
    [*(id *)(a1 + 24) endPointType];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 430, @"Revoke or delete key %@ with type %d", v12, v13, v14, v15, (uint64_t)v11);

    unint64_t v16 = (unint64_t)[*(id *)(a1 + 24) endPointType];
    if (v16 <= 5)
    {
      if (((1 << v16) & 0x26) != 0)
      {
        id v17 = +[NSMutableData dataWithLength:16];
        id v10 = SESEndPointRevoke();
        id v9 = 0;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 441, @"Asking seld to initiate delete with TSM", v18, v19, v20, v21, v42);
        id v22 = +[NFRemoteAdminManager sharedRemoteAdminManager];
        [v22 queueServerConnection:0];

        uint64_t v23 = sub_10030B000((uint64_t)KmlOwnerPairingManager, *(void **)(a1 + 8));
        uint64_t v24 = (void *)v23;
        if (v23)
        {
          sub_10030C110(v23);
        }
        else
        {
          objc_super v25 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 8));
          sub_10032EE30((uint64_t)v25);
        }
LABEL_17:
        long long v34 = [v9 userInfo];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 469, @"revokeOrDeleteKey error %@", v35, v36, v37, v38, (uint64_t)v34);

        if (a2 && v9)
        {
          NSErrorUserInfoKey v39 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
          uint64_t v40 = [v9 userInfo];
          *a2 = +[NSError errorWithDomain:v39 code:211 userInfo:v40];
        }
        goto LABEL_20;
      }
      if (((1 << v16) & 0x18) != 0)
      {
        SESEndPointDelete();
        id v9 = 0;
        id v10 = 0;
        goto LABEL_17;
      }
    }
    id v26 = [*(id *)(a1 + 24) endPointType];
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager revokeOrDeleteKeyWithError:]", 462, @"Unknown endpoint of type %d could not be deleted", v27, v28, v29, v30, (uint64_t)v26);
    if (a2)
    {
      uint64_t v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v43 = NSLocalizedDescriptionKey;
      uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(214)];
      uint64_t v44 = v32;
      id v33 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
      *a2 = +[NSError errorWithDomain:v31 code:214 userInfo:v33];
    }
    id v10 = 0;
    id v9 = 0;
    goto LABEL_17;
  }
  id v10 = 0;
LABEL_21:

  return v10;
}

id sub_100341C84(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 16);
    id v20 = 0;
    uint64_t v3 = sub_100341424((uint64_t)KmlEndpointManager, v2, &v20);
    id v4 = v20;
    uint64_t v5 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v3;

    uint64_t v6 = [*(id *)(a1 + 24) revocationAttestation];

    if (v6)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlEndpointManager *)"Found endpoint getUnRevokedEndpoint], v7, v8, v9, v10, (uint64_t)v20);
      id v11 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
      uint64_t v12 = +[NSString stringWithUTF8String:KmlErrorString(211)];
      id v22 = v12;
      uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      uint64_t v14 = +[NSError errorWithDomain:v11 code:211 userInfo:v13];

      id v4 = (id)v14;
    }
    if (!v4 && !*(void *)(a1 + 136))
    {
      uint64_t v15 = sub_1002FFCE4((uint64_t)[KmlVersions alloc], *(void **)(a1 + 24));
      unint64_t v16 = *(void **)(a1 + 136);
      *(void *)(a1 + 136) = v15;
    }
    uint64_t v17 = [*(id *)(a1 + 24) deviceConfiguration];
    uint64_t v18 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v17;
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

uint64_t *sub_100341E60(uint64_t *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = (void *)a1[2];
    id v11 = 0;
    uint64_t v3 = sub_100341424((uint64_t)KmlEndpointManager, v2, &v11);
    id v4 = v11;
    uint64_t v5 = (void *)v1[3];
    v1[3] = v3;

    if (v4)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager localDeleteKey]", 483, @"Error getting endpoint - %@", v6, v7, v8, v9, (uint64_t)v4);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlEndpointManager *)"Found Key with id %@ localDeleteKey], v6, v7, v8, v9, v1[1]);
      SESEndPointDelete();
      id v4 = 0;
    }
    uint64_t v1 = (uint64_t *)v4;
  }

  return v1;
}

id *sub_100341F54(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = sub_100341C84((uint64_t)a1);
    if (v7)
    {
      uint64_t v15 = (void *)v7;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 499, @"Error getting endpoint - %@", v11, v12, v13, v14, v7);
LABEL_15:
      sub_100342CB0((uint64_t)a1, v15);
      a1 = v15;
LABEL_16:

      goto LABEL_17;
    }
    if ((sub_100342F20((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14) & 1) == 0)
    {
      uint64_t v32 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v167 = NSLocalizedDescriptionKey;
      id v33 = +[NSString stringWithUTF8String:KmlErrorString(214)];
      uint64_t v168 = v33;
      long long v34 = +[NSDictionary dictionaryWithObjects:&v168 forKeys:&v167 count:1];
      uint64_t v15 = +[NSError errorWithDomain:v32 code:214 userInfo:v34];

      goto LABEL_15;
    }
    unint64_t v16 = +[NSMutableDictionary dictionary];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"additionalData"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"confidentialMailboxData"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"deviceType"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"ephemeralPublicKey"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"groupIdentifier"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"kBleIntroKey"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"kBleOobKey"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"ktsSignature"];
    [v16 setObject:objc_opt_class() forKeyedSubscript:@"slotIdentifier"];
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 527, @"otherJsonData : %@", v17, v18, v19, v20, (uint64_t)v6);
    if ([a1[17] agreedKmlVehicleVersion] != 768 || v6 == 0) {
      id v22 = 0;
    }
    else {
      id v22 = @"keyData";
    }
    id v162 = 0;
    uint64_t v23 = kmlUtilDecodeJson(v6, v16, v22, &v162);
    id v157 = v162;
    if ([a1[17] agreedKmlVehicleVersion] != 768)
    {
LABEL_27:
      uint64_t v41 = [v23 objectForKey:@"kBleIntroKey"];
      id v42 = a1[10];
      a1[10] = (id)v41;

      uint64_t v43 = [v23 objectForKey:@"kBleOobKey"];
      id v44 = a1[11];
      a1[11] = (id)v43;

      if (a1[10]) {
        CFStringRef v49 = @"Yes";
      }
      else {
        CFStringRef v49 = @"No";
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 553, @"Received: BleIntroKey - %@; BleOOBKey - %@;",
        v45,
        v46,
        v47,
        v48,
        (uint64_t)v49);
      uint64_t v50 = [v23 objectForKey:@"slotIdentifier"];
      id v51 = a1[12];
      a1[12] = (id)v50;

      kmlUtilLogLargeData(@"slot", a1[12]);
      uint64_t v52 = [v23 objectForKey:@"confidentialMailboxData"];
      kmlUtilLogLargeData(@"confidentialMailBox", v52);
      uint64_t v159 = [v23 objectForKey:@"ephemeralPublicKey"];
      kmlUtilLogLargeData(@"ephemeralPublicKey", v159);
      uint64_t v53 = [v23 objectForKey:@"additionalData"];
      kmlUtilLogLargeData(@"productPlanIdentifier", v53);
      if (!v5)
      {
        id v5 = [v23 objectForKey:@"ktsSignature"];
      }
      if (v5) {
        CFStringRef v58 = @"Yes";
      }
      else {
        CFStringRef v58 = @"No";
      }
      if (v52) {
        *((unsigned char *)a1 + 121) = 1;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 572, @"Received: Tracking receipt - %@; SlotId - %@; ImmoTokens - %@;",
        v54,
        v55,
        v56,
        v57,
        (uint64_t)v58);
      [v53 asHexString];
      uint64_t v60 = v59 = v53;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 574, @"PPID: %@", v61, v62, v63, v64, (uint64_t)v60);

      objc_storeStrong(a1 + 4, v5);
      uint64_t v158 = v59;
      if (!a1[4])
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 580, @"Missing Tracking Receipt", v65, v66, v67, v68, v149);
        uint64_t v82 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v165 = NSLocalizedDescriptionKey;
        uint64_t v83 = v23;
        uint64_t v84 = +[NSString stringWithUTF8String:KmlErrorString(208)];
        id v166 = v84;
        +[NSDictionary dictionaryWithObjects:&v166 forKeys:&v165 count:1];
        v86 = BOOL v85 = v52;
        id v87 = +[NSError errorWithDomain:v82 code:208 userInfo:v86];

        uint64_t v52 = v85;
        uint64_t v23 = v83;

        sub_100342CB0((uint64_t)a1, v87);
        a1 = v87;
        uint64_t v80 = v159;
LABEL_76:

        goto LABEL_16;
      }
      long long v69 = (id *)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], a1[8]);
      sub_100317554((uint64_t)v69, v59);
      uint64_t v70 = sub_100316988(v69);
      id v71 = a1[8];
      a1[8] = (id)v70;

      if (v59)
      {
        uint64_t v72 = sub_1002FEDB0((uint64_t)v69);
        id v73 = a1[9];
        a1[9] = (id)v72;

        objc_storeStrong(a1 + 18, v59);
      }
      uint64_t v74 = [a1[3] readerInfo];
      id v75 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v74];
      uint64_t v154 = v75;
      uint64_t v155 = (void *)v74;
      if (sub_100342FDC((uint64_t)a1))
      {
        uint64_t v80 = v159;
        if (sub_100316F5C((uint64_t)v69) && sub_100316F24((uint64_t)v69))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 603, @"Encrypted data in confidentia mailbox for friend key was obtained from server", v76, v77, v78, v79, v149);
          objc_storeStrong(a1 + 7, v159);
          id v81 = v52;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 607, @"Encrypted data in confidentia mailbox for friend key was obtained from owner", v76, v77, v78, v79, v149);
          uint64_t v110 = [a1[3] ownerEphemeralKey];
          id v111 = a1[7];
          a1[7] = (id)v110;

          id v81 = [a1[3] sharingEncryptedData];
        }
        id v112 = a1[6];
        a1[6] = v81;

        if ([a1[12] length])
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 612, @"Update slot Id for friend to server provided value", v113, v114, v115, v116, v150);
          v161[1] = v157;
          SESEndPointConfigureKeySlot();
          id v109 = v157;

          if (v109)
          {
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 615, @"Failed to save friend slotId - %@", v117, v118, v119, v120, (uint64_t)v109);
            goto LABEL_57;
          }
          uint64_t v156 = (uint64_t)v69;
          long long v121 = 0;
        }
        else
        {
          uint64_t v156 = (uint64_t)v69;
          long long v121 = v157;
        }
        uint64_t v130 = (uint64_t)a1[17];
        NSErrorUserInfoKey v131 = sub_1003128C8(v156);
        id v132 = sub_1003010CC(v130, v131);

        sub_100343064((uint64_t)a1);
        id v109 = (id)objc_claimAutoreleasedReturnValue();

        if (v109)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 627, @"Failed to create attestation package - %@", v133, v134, v135, v136, (uint64_t)v109);
LABEL_74:
          sub_100342CB0((uint64_t)a1, v109);
          long long v69 = (id *)v156;
          goto LABEL_75;
        }
        uint64_t v137 = [a1[3] additionalAttestationsDict];
        id v125 = a1[16];
        a1[16] = (id)v137;
      }
      else
      {
        id v152 = v52;
        uint64_t v153 = v16;
        v151 = v23;
        id v88 = objc_opt_new();
        uint64_t v89 = [v75 manufacturer];
        uint64_t v90 = [v75 brand];
        uint64_t v156 = (uint64_t)v69;
        uint64_t v91 = sub_1002FEDB0((uint64_t)v69);
        v161[0] = v157;
        uint64_t v92 = [v88 BOOLValueForSetting:5 manufacturer:v89 brand:v90 uuid:v91 error:v161];
        uint64_t v93 = v161[0];

        unsigned int v94 = [v92 BOOLValue];
        uint64_t v95 = v93;

        if (v93 || (v94 & 1) == 0)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 644, @"Pairing is blocked by configuration %d error %@", v96, v97, v98, v99, v94 ^ 1);
          uint64_t v52 = v152;
          unint64_t v16 = v153;
          uint64_t v80 = v159;
          if (v95)
          {
            sesErrorToKmlError(v95, 0x21u);
            id v109 = (id)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            uint64_t v146 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            v163[0] = NSLocalizedDescriptionKey;
            v147 = +[NSString stringWithUTF8String:KmlErrorString(33)];
            v163[1] = NSLocalizedFailureReasonErrorKey;
            v164[0] = v147;
            v164[1] = @"Pairing is blocked by configuration";
            unsigned __int8 v148 = +[NSDictionary dictionaryWithObjects:v164 forKeys:v163 count:2];
            uint64_t v95 = v146;
            unint64_t v16 = v153;
            id v109 = +[NSError errorWithDomain:v95 code:33 userInfo:v148];

            uint64_t v80 = v159;
          }
          uint64_t v23 = v151;
LABEL_73:

          goto LABEL_74;
        }
        long long v69 = (id *)v156;
        uint64_t v23 = v151;
        uint64_t v52 = v152;
        uint64_t v80 = v159;
        unint64_t v16 = v153;
        if (sub_100316F5C(v156) && sub_100316F44(v156))
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 656, @"Encrypted data in confidentia mailbox for owner key was ontained from server", v100, v101, v102, v103, v149);
          objc_storeStrong(a1 + 7, v159);
          objc_storeStrong(a1 + 6, v152);
        }
        if (a1[12])
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 661, @"Update slot Id for owner to server provided value - %@", v100, v101, v102, v103, (uint64_t)a1[12]);
          void block[5] = 0;
          SESEndPointConfigureKeySlot();
          id v104 = 0;
          if (v104)
          {
            id v109 = v104;
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 664, @"Failed to save owner slotId - %@", v105, v106, v107, v108, (uint64_t)v104);
LABEL_57:
            sub_100342CB0((uint64_t)a1, v109);
LABEL_75:
            a1 = (id *)v109;

            goto LABEL_76;
          }
        }
        long long v122 = sub_100315D20((uint64_t)KmlTlv, 69, a1[4]);
        uint64_t v123 = sub_100316294((uint64_t)v122);
        id v124 = a1[5];
        a1[5] = (id)v123;

        kmlUtilHexStringFromData(a1[5]);
        id v125 = (id)objc_claimAutoreleasedReturnValue();
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 672, @"Owner Attestation Package %@", v126, v127, v128, v129, (uint64_t)v125);
      }

      sub_10034336C((uint64_t)a1);
      id v109 = (id)objc_claimAutoreleasedReturnValue();
      if (v109) {
        goto LABEL_74;
      }
      uint64_t v138 = [a1[3] publicKeyIdentifier];
      id v139 = SESEndpointNotifyTracked();

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 679, @"SES notified about new tracked endpoint with error %@", v140, v141, v142, v143, (uint64_t)v139);
      if (!sub_100342FDC((uint64_t)a1)) {
        goto LABEL_74;
      }
      if (!sub_1003184F0(v156)) {
        goto LABEL_74;
      }
      uint64_t v144 = +[NISession deviceCapabilities];
      unsigned int v145 = [v144 supportsPreciseDistanceMeasurement];

      if (!v145) {
        goto LABEL_74;
      }
      uint64_t v95 = dispatch_get_global_queue(21, 0);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100343F20;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async(v95, block);
      goto LABEL_73;
    }
    uint64_t v24 = [v23 objectForKey:@"groupIdentifier"];
    id v25 = a1[13];
    a1[13] = (id)v24;

    id v26 = [v23 objectForKey:@"deviceType"];
    *((unsigned char *)a1 + 120) = -1;
    if ([v26 isEqualToString:@"PHONE"])
    {
      char v31 = 1;
    }
    else
    {
      if (![v26 isEqualToString:@"WATCH"])
      {
LABEL_23:
        if (a1[13]) {
          CFStringRef v36 = @"Yes";
        }
        else {
          CFStringRef v36 = @"No";
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 546, @"Received: groupIdentifier - %@;",
          v27,
          v28,
          v29,
          v30,
          (uint64_t)v36);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]", 547, @"Received: deviceType - %@;",
          v37,
          v38,
          v39,
          v40,
          (uint64_t)v26);

        goto LABEL_27;
      }
      char v31 = 2;
    }
    *((unsigned char *)a1 + 120) = v31;
    goto LABEL_23;
  }
LABEL_17:

  return a1;
}

void sub_100342CB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3) {
      id v5 = [v3 code];
    }
    else {
      id v5 = 0;
    }
    if (*(void *)(a1 + 88)) {
      BOOL v6 = *(void *)(a1 + 80) != 0;
    }
    else {
      BOOL v6 = 0;
    }
    BOOL v7 = *(void *)(a1 + 96) != 0;
    BOOL v8 = *(void *)(a1 + 72) != 0;
    id v9 = sub_100344CB4(a1);
    uint64_t v10 = [*(id *)(a1 + 24) configuration];
    unsigned int v11 = [v10 opt2];

    v22[0] = @"errorCode";
    uint64_t v12 = +[NSNumber numberWithUnsignedInt:v5];
    uint64_t v13 = (void *)v12;
    uint64_t v14 = &off_10042E548;
    if (v9) {
      uint64_t v14 = &off_10042E530;
    }
    v23[0] = v12;
    v23[1] = v14;
    v22[1] = @"accountRole";
    v22[2] = @"didReceiveProductPlanIdentifier";
    uint64_t v15 = +[NSNumber numberWithBool:v8];
    v23[2] = v15;
    v22[3] = @"didReceiveSlotIdentifier";
    unint64_t v16 = +[NSNumber numberWithBool:v7];
    v23[3] = v16;
    v22[4] = @"didReceiveImmoToken";
    uint64_t v17 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 121)];
    v23[4] = v17;
    void v22[5] = @"didReceiveOnlineBLEKeys";
    uint64_t v18 = +[NSNumber numberWithBool:v6];
    v23[5] = v18;
    v22[6] = @"isOwner";
    uint64_t v19 = +[NSNumber numberWithBool:v9];
    v23[6] = v19;
    v22[7] = @"keyClassOriginBitmap";
    uint64_t v20 = +[NSNumber numberWithUnsignedChar:kmlUtilKeyClassOriginBitmap(v11)];
    v23[7] = v20;
    NSErrorUserInfoKey v21 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:8];

    sub_1002F9404((uint64_t)KmlAnalyticsLogger, v21);
  }
}

uint64_t sub_100342F20(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    uint64_t v8 = result;
    id v9 = *(void **)(result + 24);
    if (v9)
    {
      uint64_t v10 = [v9 trackingRequest];

      if (v10)
      {
        unsigned int v11 = [*(id *)(v8 + 24) trackingReceipt];

        if (!v11) {
          return 1;
        }
        uint64_t v12 = @"We already have saved a tracking receipt. Not doing it again.";
        uint64_t v13 = 1580;
      }
      else
      {
        uint64_t v12 = @"We have not sent tracking request. Can't save a tracking receipt.";
        uint64_t v13 = 1575;
      }
    }
    else
    {
      uint64_t v12 = @"We don't have an endpoint to save tracking receipt";
      uint64_t v13 = 1570;
    }
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager isEndpointReadyForTrackingReceipt]", v13, v12, a5, a6, a7, a8, v14);
    return 0;
  }
  return result;
}

id sub_100342FDC(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 24);
  if (!v1) {
    return 0;
  }
  id v2 = [v1 subjectIdentifier];
  id v3 = sub_100340298((uint64_t)KmlEndpointManager, v2);
  id v4 = v3;
  if (v3) {
    id v5 = [v3 isEqualToString:@"FRND"];
  }
  else {
    id v5 = 0;
  }

  return v5;
}

id sub_100343064(uint64_t a1)
{
  if (a1)
  {
    BOOL v6 = [*(id *)(a1 + 24) sharingAttestationData];
    if (v6)
    {
      BOOL v7 = +[NSMutableData dataWithData:v6];
      uint64_t v8 = *(void **)(a1 + 96);
      if (v8)
      {
        id v9 = sub_100315D20((uint64_t)KmlTlv, 78, v8);
        uint64_t v10 = sub_100316294((uint64_t)v9);
        [v7 appendData:v10];
      }
      if ([*(id *)(a1 + 136) agreedKmlSharingVersion] == 768)
      {
        uint64_t v15 = *(void **)(a1 + 104);
        if (v15)
        {
          unint64_t v16 = sub_100315D20((uint64_t)KmlTlv, 79, v15);
          uint64_t v17 = sub_100316294((uint64_t)v16);
          [v7 appendData:v17];
        }
        if (*(unsigned __int8 *)(a1 + 120) != 255)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateFriendAttestationPackage]", 1618, @"Using device type from tracking receipt: %u", v11, v12, v13, v14, *(unsigned __int8 *)(a1 + 120));
          uint64_t v18 = sub_100315D88((uint64_t)KmlTlv, 72, *(unsigned char *)(a1 + 120));
          uint64_t v19 = sub_100316294((uint64_t)v18);
          [v7 appendData:v19];
        }
      }
      uint64_t v20 = sub_100315D20((uint64_t)KmlTlv, 69, *(void **)(a1 + 32));
      NSErrorUserInfoKey v21 = sub_100316294((uint64_t)v20);
      [v7 appendData:v21];

      id v22 = sub_100315D20((uint64_t)KmlTlv, 32565, v7);
      uint64_t v23 = sub_100316294((uint64_t)v22);
      uint64_t v24 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v23;

      id v25 = kmlUtilHexStringFromData(*(void **)(a1 + 40));
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateFriendAttestationPackage]", 1626, @"Friend Attestation Package %@", v26, v27, v28, v29, (uint64_t)v25);

      uint64_t v30 = 0;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager generateFriendAttestationPackage]", 1591, @"Missing saved attestation data", v2, v3, v4, v5, v35);
      char v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(214)];
      uint64_t v37 = v32;
      id v33 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      uint64_t v30 = +[NSError errorWithDomain:v31 code:214 userInfo:v33];
    }
  }
  else
  {
    uint64_t v30 = 0;
  }

  return v30;
}

id sub_10034336C(uint64_t a1)
{
  if (!a1)
  {
    uint64_t v30 = 0;
    goto LABEL_49;
  }
  if ((sub_100342FDC(a1) & 1) == 0 && (sub_100344CB4(a1) & 1) == 0)
  {
    id v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v139 = NSLocalizedDescriptionKey;
    id v9 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    id v140 = v9;
    BOOL v7 = +[NSDictionary dictionaryWithObjects:&v140 forKeys:&v139 count:1];
    id v10 = v8;
    uint64_t v11 = 210;
    id v12 = v7;
    goto LABEL_11;
  }
  if (*(void *)(a1 + 48))
  {
    if (*(void *)(a1 + 56))
    {
      uint64_t v134 = 0;
      SESEndPointSetConfidentialDataWithOffset();
      id v2 = 0;
      if (v2)
      {
        BOOL v7 = v2;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1646, @"Failed to set confidential mailbox - %@", v3, v4, v5, v6, (uint64_t)v2);
        id v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        id v9 = [v7 userInfo];
        id v10 = v8;
        uint64_t v11 = 207;
        id v12 = v9;
LABEL_11:
        uint64_t v30 = +[NSError errorWithDomain:v10 code:v11 userInfo:v12];
        goto LABEL_48;
      }
    }
  }
  id v13 = objc_alloc((Class)NSData);
  uint64_t v14 = [*(id *)(a1 + 24) mailboxMapping];
  id v9 = [v13 initWithData:v14];

  uint64_t v15 = kmlUtilHexStringFromData(v9);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1653, @"MailboxMappingData:%@", v16, v17, v18, v19, (uint64_t)v15);

  BOOL v7 = sub_100313018((char *)[KmlMailboxMappingData alloc], v9, (__int16)[*(id *)(a1 + 136) agreedKmlVehicleVersion]);
  sub_100313AD4((uint64_t)v7);
  sub_100313AC8((uint64_t)v7);
  sub_100313AC8((uint64_t)v7);
  uint64_t v133 = 0;
  uint64_t v20 = SESEndPointGetPrivateData();
  id v21 = 0;
  if (v21)
  {
    uint64_t v26 = v21;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1665, @"Error while getting signaling bitmap %@", v22, v23, v24, v25, (uint64_t)v21);
    uint64_t v27 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    uint64_t v28 = [v26 userInfo];
    uint64_t v29 = +[NSError errorWithDomain:v27 code:6 userInfo:v28];

    id v8 = v29;
    goto LABEL_47;
  }
  id v31 = [objc_alloc((Class)NSMutableData) initWithData:v20];
  kmlUtilLogLargeData(@"Private Mailbox Data", v31);
  int v32 = *(unsigned __int8 *)[v20 bytes];
  int v33 = sub_100313A8C((uint64_t)v7);
  int v34 = v32 | v33;
  char v132 = v32 | v33;
  if (*(void *)(a1 + 48) && *(void *)(a1 + 56) && sub_100313ABC((uint64_t)v7) != 128)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1679, @"Updating immo token bitmap", v35, v36, v37, v38, v118);
    char v131 = 1;
    [v31 replaceBytesInRange:1 withBytes:&v131];
  }
  int v39 = sub_100313B28((uint64_t)v7);
  int v40 = v39 - sub_100313AC8((uint64_t)v7);
  unsigned int v41 = sub_100313AF8((uint64_t)v7);
  if (sub_100313ABC((uint64_t)v7) != 128)
  {
    unsigned __int8 v61 = 0;
    goto LABEL_40;
  }
  int v46 = sub_100313B10((uint64_t)v7);
  LODWORD(v47) = v46 - sub_100313AC8((uint64_t)v7);
  unsigned int v129 = sub_100313AEC((uint64_t)v7);
  uint64_t v130 = v31;
  if (!sub_100342FDC(a1)
    || [*(id *)(a1 + 136) agreedKmlSharingVersion] != 768)
  {
    unsigned __int8 v61 = 0;
LABEL_32:
    uint64_t v77 = sub_1003488D4(a1, *(void **)(a1 + 40));
    if (![v77 length])
    {
      unsigned __int8 v128 = v61;
      id v78 = v9;
      __int16 v79 = (__int16)v47;
      if ([*(id *)(a1 + 96) length]) {
        uint64_t v80 = *(void **)(a1 + 96);
      }
      else {
        uint64_t v80 = 0;
      }
      id v47 = v80;

      uint64_t v77 = v47;
      LOWORD(v47) = v79;
      id v9 = v78;
      unsigned __int8 v61 = v128;
    }
    if ([v77 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1758, @"Set ourSlotId (%@)", v81, v82, v83, v84, (uint64_t)v77);
      id v31 = v130;
      [v130 replaceBytesInRange:(unsigned __int16)((_WORD)v47 + v61 * (_WORD)v129) withBytes:objc_msgSend(v77, "bytes")];
      BOOL v85 = sub_1003139E4((uint64_t)v7);
      v132 |= v85;
    }

LABEL_40:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1766, @"Set our own attestation package", v42, v43, v44, v45, v118);
    unsigned __int16 v86 = (unsigned __int16)[*(id *)(a1 + 40) length];
    if (v86 <= v41)
    {
      [v31 replaceBytesInRange:(unsigned __int16)(v40 + v41 * v61) withBytes:v86 bytes:[*(id *)(a1 + 40) bytes]];
      [v31 replaceBytesInRange:0 withBytes:&v132];
      kmlUtilLogLargeData(@"Private data to set", v31);
      sub_100313AC8((uint64_t)v7);
      SESEndPointSetPrivateData();
      id v96 = 0;
      if (v96)
      {
        uint64_t v101 = v96;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1791, @"Failed to set attestation package in private mailbox %@", v97, v98, v99, v100, (uint64_t)v96);
        uint64_t v102 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        uint64_t v103 = [v101 userInfo];
        id v104 = +[NSError errorWithDomain:v102 code:208 userInfo:v103];

        id v95 = v104;
        goto LABEL_45;
      }
      uint64_t v106 = SESEndPointUpdateWithBlock();
      if (v106)
      {
        id v111 = (void *)v106;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1835, @"Could not update endpoint", v107, v108, v109, v110, v120);
        id v112 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        uint64_t v113 = [v111 userInfo];
        unsigned int v94 = +[NSError errorWithDomain:v112 code:208 userInfo:v113];
      }
      else
      {
        unsigned int v94 = 0;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1771, @"Attestation length (%d) > max allowed length (%d)", v87, v88, v89, v90, v86);
      uint64_t v91 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      v135[0] = NSLocalizedDescriptionKey;
      uint64_t v92 = +[NSString stringWithUTF8String:KmlErrorString(212)];
      v135[1] = NSLocalizedFailureReasonErrorKey;
      v136[0] = v92;
      v136[1] = @"Max attestation length not enough";
      uint64_t v93 = +[NSDictionary dictionaryWithObjects:v136 forKeys:v135 count:2];
      unsigned int v94 = +[NSError errorWithDomain:v91 code:212 userInfo:v93];
    }
    id v95 = v94;
LABEL_45:
    id v8 = v95;
    goto LABEL_46;
  }
  int v127 = v34;
  __int16 v125 = v40;
  unsigned int v126 = v41;
  uint64_t v123 = v20;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1698, @"Initialize slotIDs to all FF bytes", v48, v49, v50, v51, v118);
  uint64_t v52 = sub_100313B1C((uint64_t)v7);
  uint64_t v53 = v31;
  size_t v54 = v52 - sub_100313B10((uint64_t)v7);
  id v122 = +[NSMutableData dataWithLength:v54];
  id v55 = [v122 mutableBytes];
  memset(v55, 255, v54);
  [v53 replaceBytesInRange:(unsigned __int16)v47 withBytes:v54 length:v55];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1707, @"Look for additional attestations", v56, v57, v58, v59, v119);
  long long v121 = (void *)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], *(void **)(a1 + 64));
  uint64_t v60 = (sub_100313ABC((uint64_t)v121) + 46);
  if (v60 < 0x30)
  {
    unsigned __int8 v61 = 0;
LABEL_31:

    uint64_t v20 = v123;
    id v31 = v130;
    unsigned int v41 = v126;
    LOWORD(v40) = v125;
    goto LABEL_32;
  }
  unsigned __int8 v61 = 0;
  id v124 = v9;
  uint64_t v62 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
  while (1)
  {
    uint64_t v63 = *(void **)(a1 + 128);
    uint64_t v64 = [v62[250] numberWithUnsignedChar:v60];
    uint64_t v65 = [v63 objectForKeyedSubscript:v64];

    uint64_t v66 = sub_1003488D4(a1, v65);
    if (![v65 length] || !objc_msgSend(v66, "length"))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1742, @"No additional attestations found with tag : %02x", v67, v68, v69, v70, v60);
      goto LABEL_26;
    }
    id v71 = v66;
    [v130 replaceBytesInRange:((unsigned __int16)((_WORD)v47 + v61 * (_WORD)v129), v129, [v71 bytes]);
    unsigned __int16 v72 = (unsigned __int16)[v65 length];
    if (v72 > v126) {
      break;
    }
    [v130 replaceBytesInRange:(unsigned __int16)(v125 + v126 * v61) withBytes:v72 bytes:[v65 bytes]];
    v127 |= sub_1003139E4((uint64_t)v7);
    char v132 = v127;
    ++v61;
    id v9 = v124;
    uint64_t v62 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
LABEL_26:

    uint64_t v60 = (v60 - 1);
    if (v60 <= 0x2Fu) {
      goto LABEL_31;
    }
  }
  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]", 1734, @"Attestation length (%d) > max allowed length (%d)", v73, v74, v75, v76, v72);
  uint64_t v114 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
  v137[0] = NSLocalizedDescriptionKey;
  uint64_t v115 = +[NSString stringWithUTF8String:KmlErrorString(212)];
  v137[1] = NSLocalizedFailureReasonErrorKey;
  v138[0] = v115;
  v138[1] = @"Max attestation length not enough";
  uint64_t v116 = +[NSDictionary dictionaryWithObjects:v138 forKeys:v137 count:2];
  uint64_t v117 = +[NSError errorWithDomain:v114 code:212 userInfo:v116];

  id v8 = v117;
  uint64_t v20 = v123;
  id v31 = v130;
  id v9 = v124;
LABEL_46:

LABEL_47:
  uint64_t v30 = v8;
LABEL_48:

LABEL_49:

  return v30;
}

void sub_100343F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager saveTrackingReceipt:otherJSONData:]_block_invoke", 690, @"Received tracking receipt for UWB capable friend key. Kick first approach.", a5, a6, a7, a8, v10);
  id v9 = *(void **)(*(void *)(a1 + 32) + 8);

  sub_100314F88((uint64_t)KmlPairingTransportFactory, v9);
}

id sub_100343F7C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  if (!a1)
  {
    uint64_t v18 = 0;
    goto LABEL_60;
  }
  uint64_t v12 = sub_100341C84(a1);
  if (v12)
  {
    id v17 = (id)v12;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 708, @"Error getting endpoint - %@", v13, v14, v15, v16, v12);
    if (a5)
    {
      id v17 = v17;
      uint64_t v18 = 0;
      *a5 = v17;
    }
    else
    {
      uint64_t v18 = 0;
    }
    goto LABEL_59;
  }
  uint64_t v137 = a5;
  id v140 = v11;
  uint64_t v146 = (void *)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], *(void **)(a1 + 64));
  uint64_t v19 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
  uint64_t v20 = +[NSMutableData data];
  NSErrorUserInfoKey v139 = sub_100315D20((uint64_t)KmlTlv, 24353, *(void **)(a1 + 16));
  id v21 = sub_100316294((uint64_t)v139);
  uint64_t v142 = v20;
  [v20 appendData:v21];

  uint64_t v143 = v9;
  uint64_t v153 = a1;
  if (![v9 count])
  {
    uint64_t v51 = +[NSMutableData data];
    long long v158 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    long long v161 = 0u;
    id v150 = v10;
    id v52 = [v150 countByEnumeratingWithState:&v158 objects:v169 count:16];
    if (v52)
    {
      id v53 = v52;
      uint64_t v54 = *(void *)v159;
      do
      {
        for (i = 0; i != v53; i = (char *)i + 1)
        {
          if (*(void *)v159 != v54) {
            objc_enumerationMutation(v150);
          }
          uint64_t v56 = kmlUtilDataForHexString(*(void **)(*((void *)&v158 + 1) + 8 * i));
          uint64_t v57 = sub_100315D20((uint64_t)KmlTlv, 79, v56);

          id v58 = objc_alloc((Class)NSMutableData);
          uint64_t v59 = sub_100316294((uint64_t)v57);
          id v60 = [v58 initWithData:v59];

          unsigned __int8 v61 = sub_100315D88((uint64_t)KmlTlv, 71, 0);
          uint64_t v62 = sub_100316294((uint64_t)v61);
          [v60 appendData:v62];

          uint64_t v63 = sub_100315D20((uint64_t)KmlTlv, 97, v60);
          uint64_t v64 = sub_100316294((uint64_t)v63);
          [v51 appendData:v64];

          uint64_t v19 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
        }
        id v53 = [v150 countByEnumeratingWithState:&v158 objects:v169 count:16];
      }
      while (v53);
    }

    long long v156 = 0u;
    long long v157 = 0u;
    long long v154 = 0u;
    long long v155 = 0u;
    id v151 = v140;
    id v65 = [v151 countByEnumeratingWithState:&v154 objects:v168 count:16];
    if (v65)
    {
      id v66 = v65;
      uint64_t v67 = *(void *)v155;
      do
      {
        for (j = 0; j != v66; j = (char *)j + 1)
        {
          if (*(void *)v155 != v67) {
            objc_enumerationMutation(v151);
          }
          uint64_t v69 = kmlUtilDataForHexString(*(void **)(*((void *)&v154 + 1) + 8 * (void)j));
          uint64_t v70 = sub_100315D20((uint64_t)KmlTlv, 79, v69);

          id v71 = objc_alloc((Class)v19[244]);
          unsigned __int16 v72 = sub_100316294((uint64_t)v70);
          id v73 = [v71 initWithData:v72];

          uint64_t v74 = sub_100315D88((uint64_t)KmlTlv, 71, 1);
          uint64_t v75 = sub_100316294((uint64_t)v74);
          [v73 appendData:v75];

          uint64_t v76 = sub_100315D20((uint64_t)KmlTlv, 97, v73);
          uint64_t v77 = sub_100316294((uint64_t)v76);
          [v51 appendData:v77];

          uint64_t v19 = &_s9SEService17JPKIInternalTypesO13InternalErrorO12typeMismatchyAESScAEmFWC_ptr;
        }
        id v66 = [v151 countByEnumeratingWithState:&v154 objects:v168 count:16];
      }
      while (v66);
    }

    uint64_t v22 = v51;
    uint64_t v43 = sub_100315D20((uint64_t)KmlTlv, 65315, v51);
    uint64_t v48 = sub_100316294((uint64_t)v43);
    uint64_t v50 = v142;
    [v142 appendData:v48];
LABEL_40:
    id v78 = v137;

    uint64_t v148 = kmlUtilSHA256(v50);
    __int16 v79 = SESEndPointSignDataWithAuth();
    uint64_t v80 = +[NSMutableData dataWithData:v50];
    uint64_t v81 = [v79 signedData];
    [v80 appendData:v81];

    uint64_t v82 = [v79 signature];
    uint64_t v83 = sub_100315D20((uint64_t)KmlTlv, 158, v82);

    uint64_t v136 = (void *)v83;
    uint64_t v84 = sub_100316294(v83);
    [v80 appendData:v84];

    uint64_t v138 = v80;
    uint64_t v85 = sub_100315D20((uint64_t)KmlTlv, 32576, v80);
    unsigned __int16 v86 = sub_100316294(v85);
    uint64_t v87 = kmlUtilHexStringFromData(v86);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 807, @"Remote Termination Request structure: %@", v88, v89, v90, v91, (uint64_t)v87);

    uint64_t v135 = (void *)v85;
    uint64_t v92 = sub_100316294(v85);
    uint64_t v93 = SESEndPointPrivacyEncryption();
    id v17 = 0;

    if (v17)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 812, @"Failed to encrypt friend tracking request with - %@", v94, v95, v96, v97, (uint64_t)v17);
      if (v78) {
        *id v78 = v17;
      }

      id obja = 0;
    }
    else
    {
      id obja = v93;
    }
    uint64_t v141 = [*(id *)(v153 + 24) readerInfo];
    id v98 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v141];
    BOOL v99 = sub_1003184DC((BOOL)v146);
    BOOL v100 = sub_1003184F0((BOOL)v146);
    uint64_t v105 = 2;
    if (!v100) {
      uint64_t v105 = 0;
    }
    uint64_t v129 = v105 | v99;
    uint64_t v134 = v98;
    if (v98)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 831, @" routingInfo = %@", v101, v102, v103, v104, (uint64_t)v98);
      uint64_t v106 = [v98 manufacturer];
      CFStringRef v107 = (const __CFString *)[v106 copy];

      uint64_t v108 = [v98 brand];
      CFStringRef v109 = (const __CFString *)[v108 copy];

      uint64_t v110 = v98;
      CFStringRef v111 = v109;
      id v112 = [v110 regionString];
      CFStringRef v113 = (const __CFString *)[v112 copy];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 836, @"No routing info available", v101, v102, v103, v104, v128);
      CFStringRef v107 = @"Unknown";
      CFStringRef v111 = @"Unknown";
      CFStringRef v113 = @"Unknown";
    }
    if (sub_100344CB4(v153)) {
      unsigned __int16 v114 = -30561;
    }
    else {
      unsigned __int16 v114 = 0;
    }
    v166[0] = @"numFriendKeys";
    uint64_t v130 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v143 count]);
    v167[0] = v130;
    v167[1] = v113;
    v166[1] = @"dataCenterCode";
    v166[2] = @"manufacturer";
    v167[2] = v107;
    v167[3] = v111;
    char v132 = (__CFString *)v111;
    v166[3] = @"brand";
    v166[4] = @"transportSupported";
    uint64_t v115 = +[NSNumber numberWithUnsignedInteger:v129];
    v167[4] = v115;
    v166[5] = @"status";
    id v152 = v79;
    uint64_t v133 = (__CFString *)v107;
    char v131 = (__CFString *)v113;
    if (v17) {
      id v116 = [v17 code];
    }
    else {
      id v116 = 0;
    }
    uint64_t v117 = +[NSNumber numberWithUnsignedInt:v116];
    v167[5] = v117;
    v166[6] = @"numGroupIDs";
    uint64_t v118 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v10 count]);
    v167[6] = v118;
    v166[7] = @"numSubTrees";
    uint64_t v119 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v140 count]);
    v167[7] = v119;
    v166[8] = @"accountRole";
    uint64_t v120 = +[NSNumber numberWithUnsignedShort:v114];
    v167[8] = v120;
    v166[9] = @"keyVersion";
    long long v121 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(v153 + 136) agreedKmlVehicleVersion]);
    v167[9] = v121;
    id v122 = +[NSDictionary dictionaryWithObjects:v167 forKeys:v166 count:10];

    id v11 = v140;
    sub_1002F957C((uint64_t)KmlAnalyticsLogger, v122);

    uint64_t v123 = v142;
    id v9 = v143;
    uint64_t v22 = (void *)v148;
    uint64_t v43 = v152;
    id v124 = v138;
    __int16 v125 = v135;
LABEL_57:

    goto LABEL_58;
  }
  uint64_t v22 = sub_100339C10((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 24));
  id v149 = +[NSMutableData data];
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v165 = 0u;
  id obj = v9;
  id v23 = [obj countByEnumeratingWithState:&v162 objects:v172 count:16];
  if (!v23) {
    goto LABEL_22;
  }
  id v24 = v23;
  uint64_t v25 = *(void *)v163;
  v147 = v22;
  do
  {
    for (k = 0; k != v24; k = (char *)k + 1)
    {
      if (*(void *)v163 != v25) {
        objc_enumerationMutation(obj);
      }
      uint64_t v27 = *(void **)(*((void *)&v162 + 1) + 8 * (void)k);
      uint64_t v28 = sub_10033A158((dispatch_queue_t *)v22, v27);
      if (v28 && (sub_100316F24((uint64_t)v146) & 1) == 0)
      {
        int v34 = sub_100313DEC((uint64_t)v28);
        int v33 = sub_100315D20((uint64_t)KmlTlv, 87, v34);
      }
      else
      {
        if ([v27 isEqualToString:*(void *)(a1 + 8)])
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 735, @"We don't allow creating RTR for our own key.", v29, v30, v31, v32, v127);
          goto LABEL_20;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 738, @"This is either owner swap or friend with online tokens.", v29, v30, v31, v32, v127);
        int v33 = 0;
      }
      uint64_t v35 = kmlUtilDataForHexString(v27);
      uint64_t v36 = sub_100315D20((uint64_t)KmlTlv, 80, v35);

      id v37 = objc_alloc((Class)NSMutableData);
      uint64_t v38 = sub_100316294((uint64_t)v36);
      id v39 = [v37 initWithData:v38];

      if (v33)
      {
        int v40 = sub_100316294((uint64_t)v33);
        [v39 appendData:v40];
      }
      unsigned int v41 = sub_100315D20((uint64_t)KmlTlv, 97, v39);
      uint64_t v42 = sub_100316294((uint64_t)v41);
      [v149 appendData:v42];

      uint64_t v22 = v147;
      a1 = v153;
LABEL_20:
    }
    id v24 = [obj countByEnumeratingWithState:&v162 objects:v172 count:16];
  }
  while (v24);
LABEL_22:

  uint64_t v43 = v149;
  if ([v149 length])
  {
    uint64_t v48 = sub_100315D20((uint64_t)KmlTlv, 32547, v149);
    uint64_t v49 = sub_100316294((uint64_t)v48);
    uint64_t v50 = v142;
    [v142 appendData:v49];

    goto LABEL_40;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager generateRemoteTerminationRequestForKeys:nodes:trees:withError:]", 756, @"There is nothing to create RTR", v44, v45, v46, v47, v127);
  uint64_t v123 = v142;
  id v9 = v143;
  if (v137)
  {
    id v124 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v170 = NSLocalizedDescriptionKey;
    uint64_t v136 = +[NSString stringWithUTF8String:KmlErrorString(206)];
    id v171 = v136;
    __int16 v125 = +[NSDictionary dictionaryWithObjects:&v171 forKeys:&v170 count:1];
    +[NSError errorWithDomain:v124 code:206 userInfo:v125];
    id v17 = 0;
    id obja = 0;
    *uint64_t v137 = (id)objc_claimAutoreleasedReturnValue();
    id v11 = v140;
    goto LABEL_57;
  }
  id v17 = 0;
  id obja = 0;
  id v11 = v140;
LABEL_58:

  uint64_t v18 = obja;
LABEL_59:

LABEL_60:

  return v18;
}

id sub_100344CB4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void **)(a1 + 24);
  if (!v1) {
    return 0;
  }
  id v2 = [v1 subjectIdentifier];
  uint64_t v3 = sub_100340298((uint64_t)KmlEndpointManager, v2);
  uint64_t v4 = v3;
  if (v3) {
    id v5 = [v3 isEqualToString:@"OWNR"];
  }
  else {
    id v5 = 0;
  }

  return v5;
}

void **sub_100344D3C(uint64_t a1, void *a2)
{
  id v2 = (void **)a1;
  if (a1)
  {
    uint64_t v4 = sub_100341C84(a1);
    id v9 = (void *)v4;
    if (v4)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager listSharingInvitationsWithError:]", 864, @"Error getting endpoint - %@", v5, v6, v7, v8, v4);
      id v2 = 0;
      if (a2) {
        *a2 = v9;
      }
    }
    else
    {
      sub_100339C10((uint64_t)KmlSharingRecordsUpdater, v2[3]);
      id v10 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
      sub_10033AA30(v10);
      id v2 = (void **)objc_claimAutoreleasedReturnValue();
    }
  }

  return v2;
}

id sub_100344E08(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_100341C84(a1);
    id v9 = (void *)v4;
    if (v4)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager removeSharedKeysWithIdentifiers:]", 879, @"Error getting endpoint - %@", v5, v6, v7, v8, v4);
      id v10 = v9;
    }
    else
    {
      sub_100339C10((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 24));
      id v11 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
      uint64_t v12 = sub_10033B458(v11, v3);
      sub_10033B264((uint64_t)v11, v3);
      sub_10033A3D8((uint64_t)v11);
      if ([v12 count])
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager removeSharedKeysWithIdentifiers:]", 888, @"cancelling pending invitations for uuid set: %@", v13, v14, v15, v16, (uint64_t)v12);
        sub_10034E1B8((uint64_t)KmlOwnerSharingManager, v12);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager removeSharedKeysWithIdentifiers:]", 891, @"Nothing to cancel - %@", v13, v14, v15, v16, 0);
      }
    }
  }
  else
  {
    id v9 = 0;
  }

  return v9;
}

void sub_100344F48(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    *a3 = 0;
    *a2 = 0;
    uint64_t v6 = sub_100341C84(a1);
    if (v6)
    {
      id v11 = (void *)v6;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 903, @"Error getting endpoint - %@", v7, v8, v9, v10, v6);
LABEL_28:

      return;
    }
    uint64_t v12 = [*(id *)(a1 + 24) mailboxMapping];
    uint64_t v13 = sub_100313018((char *)[KmlMailboxMappingData alloc], v12, (__int16)[*(id *)(a1 + 136) agreedKmlVehicleVersion]);
    unsigned int v14 = sub_100313B1C((uint64_t)v13);
    if (v14 < sub_100313AC8((uint64_t)v13))
    {
      uint64_t v22 = sub_100313640((id *)v13, v15, v16, v17, v18, v19, v20, v21);
      id v23 = [v22 asHexString];
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 912, @"Underflow detected in mailbox offsets %@", v24, v25, v26, v27, (uint64_t)v23);

      id v11 = 0;
LABEL_27:

      goto LABEL_28;
    }
    sub_100313AC8((uint64_t)v13);
    sub_100313B1C((uint64_t)v13);
    sub_100313AC8((uint64_t)v13);
    uint64_t v28 = SESEndPointGetPrivateData();
    id v29 = 0;
    id v11 = v29;
    if (v29)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 921, @"Error while getting signaling bitmap from mailbox %@", v30, v31, v32, v33, (uint64_t)v29);
LABEL_26:

      goto LABEL_27;
    }
    id v34 = v28;
    unsigned int v35 = *(unsigned __int8 *)[v34 bytes];
    uint64_t v36 = [KmlDeviceConfigurationData alloc];
    uint64_t v37 = (uint64_t)v36;
    uint64_t v38 = *(void **)(a1 + 64);
    if (v38)
    {
      id v39 = (void *)sub_1003163A8((uint64_t)v36, v38);
    }
    else
    {
      [*(id *)(a1 + 24) deviceConfiguration];
      uint64_t v85 = v28;
      id v40 = v34;
      v42 = unsigned int v41 = v35;
      id v39 = (void *)sub_1003163A8(v37, v42);

      unsigned int v35 = v41;
      id v34 = v40;
      uint64_t v28 = v85;
    }
    if (sub_100313ABC((uint64_t)v13) == 128
      && [*(id *)(a1 + 136) agreedKmlVehicleVersion] == 768)
    {
      if (sub_100316F24((uint64_t)v39) && sub_100313ABC((uint64_t)v39) > 1)
      {
        unsigned int v86 = v35;
        __int16 v80 = sub_100313B10((uint64_t)v13);
        __int16 v79 = sub_100313AC8((uint64_t)v13);
        unsigned int v47 = sub_100313AEC((uint64_t)v13);
        unint64_t v48 = (unint64_t)[v34 length];
        unsigned int v84 = v47;
        if (v48 >= sub_100313ABC((uint64_t)v39) * v47)
        {
          if (sub_100313A20((uint64_t)v13, v86))
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 948, @"Attestation(s) set. Let's count them", v62, v63, v64, v65, v77);
            uint64_t v83 = +[NSMutableData dataWithLength:v47];
            id v82 = +[NSMutableData dataWithLength:v47];
            memset([v82 mutableBytes], 255, v47);
            if (sub_100313ABC((uint64_t)v39))
            {
              __int16 v66 = 0;
              int v87 = 0;
              __int16 v81 = v80 - v79;
              while (1)
              {
                uint64_t v67 = [v34 subdataWithRange:(v81 + v66), v84];
                if (([v67 isEqualToData:v83] & 1) != 0
                  || [v67 isEqualToData:v82])
                {
                  break;
                }

                v66 += v84;
                if (++v87 >= sub_100313ABC((uint64_t)v39)) {
                  goto LABEL_40;
                }
              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 957, @"Found an empty slot", v68, v69, v70, v71, v78);
            }
            else
            {
              LOBYTE(v87) = 0;
            }
LABEL_40:

            uint64_t v72 = v87;
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 964, @"No attestations set in the mailbox", v62, v63, v64, v65, v77);
            uint64_t v72 = 0;
          }
          *a3 = sub_100313ABC((uint64_t)v39) - v72;
          *a2 = 7;
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 973, @"SharingInAChain capable endpoint. Tokens toShare = %lu, remainingDepth = %lu", v73, v74, v75, v76, 7);
          goto LABEL_25;
        }
        uint64_t v49 = @"Private data doesn't have enough length for slotIDs";
        os_log_type_t v50 = OS_LOG_TYPE_ERROR;
        uint64_t v51 = 942;
      }
      else
      {
        uint64_t v49 = @"Sharing in a Chain must support online slots/tokens with max offline count of at least 2";
        os_log_type_t v50 = OS_LOG_TYPE_ERROR;
        uint64_t v51 = 933;
      }
    }
    else
    {
      *a3 = 1;
      if (sub_100316F24((uint64_t)v39))
      {
        *a2 = 7;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", 983, @"Tokens are online, report all available for simplicity. Tokens toShare = %lu, remainingDepth = %lu", v52, v53, v54, v55, 7);
LABEL_25:

        goto LABEL_26;
      }
      uint64_t v56 = *((unsigned __int8 *)[v34 bytes] + 1);
      uint64_t v57 = [*(id *)(a1 + 24) sharingTokenAvailabilityBitmap];

      if (v57)
      {
        uint64_t v59 = [*(id *)(a1 + 24) sharingTokenAvailabilityBitmap];
        unsigned __int8 v60 = [v59 unsignedCharValue];
      }
      else
      {
        unsigned __int8 v60 = -2;
      }
      v58.i32[0] = v56 & v60 & 0xFE;
      uint8x8_t v61 = (uint8x8_t)vcnt_s8(v58);
      v61.i16[0] = vaddlv_u8(v61);
      *a2 = v61.u32[0];
      uint64_t v77 = v56;
      uint64_t v49 = @"BitmapInMailbox: %02X; BitmapOfOpenInvitations: %02X; toShare = %lu, remainingDepth = %lu";
      os_log_type_t v50 = OS_LOG_TYPE_INFO;
      uint64_t v51 = 1003;
    }
    KmlLogFunc2(v50, (uint64_t)"-[KmlEndpointManager countImmoTokensToShare:remainingDepth:]", v51, v49, v43, v44, v45, v46, v77);
    goto LABEL_25;
  }
}

void sub_1003454B8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  id v9 = a3;
  if (a1)
  {
    *a5 = a2;
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
    uint64_t v10 = sub_100341C84(a1);
    uint64_t v15 = (void *)v10;
    if (v10)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager hasUpgradeAvailableForType:versions:withError:]", 1014, @"Error getting endpoint - %@", v11, v12, v13, v14, v10);
      if (a4) {
        *a4 = v15;
      }
    }
    else
    {
      sub_100301A7C(*(void *)(a1 + 136), a2, v9, (uint64_t)v17);
      long long v16 = v17[1];
      *(_OWORD *)a5 = v17[0];
      *((_OWORD *)a5 + 1) = v16;
    }
  }
  else
  {
    *(_OWORD *)a5 = 0u;
    *((_OWORD *)a5 + 1) = 0u;
  }
}

void sub_100345588(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = sub_100341C84(a1);
    if (v9)
    {
      id v14 = (id)v9;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1031, @"Error getting endpoint - %@", v10, v11, v12, v13, v9);
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 152));
      [WeakRetained handleUpgradeCompletionWithStatus:v14];
    }
    else
    {
      long long v49 = 0u;
      long long v50 = 0u;
      uint64_t v16 = *(void *)(a1 + 136);
      uint64_t v17 = +[NSNumber numberWithUnsignedInteger:a3];
      uint64_t v53 = v17;
      uint64_t v18 = +[NSArray arrayWithObjects:&v53 count:1];
      sub_100301A7C(v16, a2, v18, (uint64_t)&v49);

      if (BYTE8(v49))
      {
        if (!a2)
        {
          uint64_t v27 = +[NSMutableDictionary dictionary];
          [v27 setObject:objc_opt_class() forKeyedSubscript:@"endpointCreationData"];
          [v27 setObject:objc_opt_class() forKeyedSubscript:@"mailboxMapping"];
          [v27 setObject:objc_opt_class() forKeyedSubscript:@"deviceConfiguration"];
          [v27 setObject:objc_opt_class() forKeyedSubscript:@"sharingConfiguration"];
          id v48 = 0;
          id WeakRetained = kmlUtilDecodeJson(v8, v27, 0, &v48);
          id v14 = v48;
          unsigned int v47 = [WeakRetained objectForKey:@"endpointCreationData"];
          kmlUtilLogLargeData(@"endpointCreationData", v47);
          uint64_t v28 = [WeakRetained objectForKey:@"mailboxMapping"];
          kmlUtilLogLargeData(@"mailboxMappingData", v28);
          id v29 = [WeakRetained objectForKey:@"deviceConfiguration"];
          kmlUtilLogLargeData(@"deviceConfigData", v29);
          uint64_t v30 = [WeakRetained objectForKey:@"sharingConfiguration"];
          kmlUtilLogLargeData(@"sharingConfigData", v30);
          if (!v14
            && [v47 length]
            && [v28 length]
            && ([v29 length] || objc_msgSend(v30, "length")))
          {
            objc_storeStrong((id *)(a1 + 112), a4);
            uint64_t v31 = [*(id *)(a1 + 24) readerInfo];
            id v32 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v31];
            if (sub_100344CB4(a1))
            {
              sub_100345BB4(a1);
            }
            else
            {
              [v32 manufacturer];
              id v46 = v32;
              uint64_t v38 = v27;
              id v39 = v31;
              id v40 = v30;
              unsigned int v41 = v29;
              uint64_t v43 = v42 = v28;
              SESEndPointPreWarm();

              uint64_t v28 = v42;
              id v29 = v41;
              uint64_t v30 = v40;
              uint64_t v31 = v39;
              uint64_t v27 = v38;
              id v32 = v46;
            }
          }
          else
          {
            uint64_t v31 = objc_loadWeakRetained((id *)(a1 + 152));
            id v32 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
            [v14 userInfo];
            uint64_t v45 = v27;
            uint64_t v33 = v30;
            id v34 = v29;
            v36 = unsigned int v35 = v28;
            uint64_t v37 = +[NSError errorWithDomain:v32 code:221 userInfo:v36];
            [v31 handleUpgradeCompletionWithStatus:v37];

            uint64_t v28 = v35;
            id v29 = v34;
            uint64_t v30 = v33;
            uint64_t v27 = v45;
          }

          goto LABEL_12;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1045, @"Only Framework version upgrade needs further work", v19, v20, v21, v22, v44);
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 152));
        [WeakRetained handleUpgradeCompletionWithStatus:0];
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]", 1039, @"There is no upgrade available from current version: 0x%04lx", v19, v20, v21, v22, v50);
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 152));
        id v23 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v51 = NSLocalizedDescriptionKey;
        uint64_t v24 = +[NSString stringWithUTF8String:KmlErrorString(220)];
        uint64_t v52 = v24;
        uint64_t v25 = +[NSDictionary dictionaryWithObjects:&v52 forKeys:&v51 count:1];
        uint64_t v26 = +[NSError errorWithDomain:v23 code:220 userInfo:v25];
        [WeakRetained handleUpgradeCompletionWithStatus:v26];
      }
      id v14 = 0;
    }
LABEL_12:
  }
}

void sub_100345B0C(uint64_t a1, void *a2)
{
  id v10 = a2;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager upgradeVersionType:version:upgradeInformation:]_block_invoke", 1088, @"Prewarm result : %@", v3, v4, v5, v6, (uint64_t)v10);
  uint64_t v7 = *(void *)(a1 + 32);
  if (v10)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v7 + 152));
    uint64_t v9 = sesErrorToKmlError(v10, 0x13u);
    [WeakRetained handleUpgradeCompletionWithStatus:v9];
  }
  else
  {
    sub_100345BB4(v7);
  }
}

void sub_100345BB4(uint64_t a1)
{
  if (a1)
  {
    id v2 = kmlUtilTimeNow();
    SESEndpointConvertWithSession();
    id v3 = (id)objc_claimAutoreleasedReturnValue();

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager convertEndpoint]", 1110, @"upgrade result : %@", v4, v5, v6, v7, (uint64_t)v3);
    if (v3)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 152));
      uint64_t v9 = sesErrorToKmlError(v3, 0xDEu);
      [WeakRetained handleUpgradeCompletionWithStatus:v9];
    }
    else
    {
      uint64_t v10 = sub_100341C84(a1);
      if (v10)
      {
        id v3 = (id)v10;
        id v11 = 0;
      }
      else
      {
        id v18 = 0;
        sub_100345D8C(a1, &v18);
        id v11 = (id)objc_claimAutoreleasedReturnValue();
        id v3 = v18;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager convertEndpoint]", 1122, @"Tracking request creation result: %@", v12, v13, v14, v15, (uint64_t)v3);
        if (!v3)
        {
          id v11 = v11;
          SESEndPointUpdateWithBlock();
          id v3 = (id)objc_claimAutoreleasedReturnValue();
        }
      }
      id v16 = objc_loadWeakRetained((id *)(a1 + 152));
      uint64_t v17 = sesErrorToKmlError(v3, 0xDEu);
      [v16 handleUpgradeCompletionWithStatus:v17];
    }
  }
}

id sub_100345D8C(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = +[NSMutableArray array];
    id v5 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
    unsigned int v6 = [v5 BOOLForKey:@"UseOldKeyTrackingTag"];
    if (v6) {
      __int16 v7 = 32574;
    }
    else {
      __int16 v7 = 32581;
    }
    id v8 = [*(id *)(a1 + 24) certificates];
    if ((unint64_t)[v8 count] <= 2)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1890, @"Missing certificates", v9, v10, v11, v12, v90);
      if (!a2)
      {
        id v16 = 0;
LABEL_54:

        goto LABEL_55;
      }
      uint64_t v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v112 = NSLocalizedDescriptionKey;
      uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(222)];
      CFStringRef v113 = v14;
      id v15 = +[NSDictionary dictionaryWithObjects:&v113 forKeys:&v112 count:1];
      +[NSError errorWithDomain:v13 code:222 userInfo:v15];
      id v16 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_52;
    }
    uint64_t v13 = [v8 objectAtIndexedSubscript:2];
    if (![v13 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1899, @"Missing Endpoint certificate", v17, v18, v19, v20, v90);
      if (!a2)
      {
        id v16 = 0;
LABEL_53:

        goto LABEL_54;
      }
      uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v110 = NSLocalizedDescriptionKey;
      id v15 = +[NSString stringWithUTF8String:KmlErrorString(222)];
      id v111 = v15;
      +[NSDictionary dictionaryWithObjects:&v111 forKeys:&v110 count:1];
      uint64_t v22 = a2;
      id v23 = (id)objc_claimAutoreleasedReturnValue();
      +[NSError errorWithDomain:v14 code:222 userInfo:v23];
      id v16 = 0;
      *uint64_t v22 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_51;
    }
    uint64_t v21 = sub_100315D20((uint64_t)KmlTlv, 32548, v13);
    [v4 addObject:v21];

    uint64_t v99 = [*(id *)(a1 + 24) readerInfo];
    id v15 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v99];
    uint64_t v97 = v13;
    id v98 = a2;
    id v100 = v15;
    if (sub_100344CB4(a1))
    {
      id v91 = v5;
      uint64_t v92 = 0;
    }
    else
    {
      if (v6) {
        __int16 v7 = 32568;
      }
      else {
        __int16 v7 = 32584;
      }
      id v23 = [v8 objectAtIndexedSubscript:1];
      if (![v23 length])
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1919, @"Missing Instance CA certificate", v24, v25, v26, v27, v90);
        if (!v98)
        {
          id v16 = 0;
          uint64_t v14 = (void *)v99;
LABEL_51:

LABEL_52:
          goto LABEL_53;
        }
        uint64_t v44 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v108 = NSLocalizedDescriptionKey;
        uint64_t v45 = +[NSString stringWithUTF8String:KmlErrorString(222)];
        CFStringRef v109 = v45;
        id v46 = +[NSDictionary dictionaryWithObjects:&v109 forKeys:&v108 count:1];
        +[NSError errorWithDomain:v44 code:222 userInfo:v46];
        id v16 = 0;
        *id v98 = (id)objc_claimAutoreleasedReturnValue();
        uint64_t v14 = (void *)v99;
LABEL_50:

        id v15 = v100;
        goto LABEL_51;
      }
      id v91 = v5;
      uint64_t v28 = sub_100315D20((uint64_t)KmlTlv, 32546, v23);
      [v4 addObject:v28];

      id v29 = v15;
      uint64_t v30 = objc_opt_new();
      uint64_t v31 = [v29 manufacturer];
      id v32 = [v29 brand];
      id v106 = 0;
      uint64_t v33 = [v30 intValueForSetting:0 manufacturer:v31 brand:v32 uuid:0 error:&v106];
      id v34 = v106;

      uint64_t v92 = v34;
      if (v34 || !v33)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1935, @"We don't have a default yet", v35, v36, v37, v38, v90);
        unsigned __int16 v39 = 2207;
      }
      else
      {
        unsigned __int16 v39 = (unsigned __int16)[v33 unsignedIntValue];
      }
      unsigned int v47 = v39;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1940, @"Key role added :%02x", v40, v41, v42, v43, v39);
      id v48 = sub_100315DFC((uint64_t)KmlTlv, 213, v47);
      [v4 addObject:v48];

      id v15 = v100;
    }
    long long v49 = [*(id *)(a1 + 24) anonymizedDsid];
    long long v50 = [v15 readerIdentifier];
    NSErrorUserInfoKey v51 = kmlUtilDataForHexString(v50);

    uint64_t v95 = v51;
    uint64_t v96 = v49;
    uint64_t v52 = kmlUtilGenerateAccountInfoHash(v49, v51);
    if ([v52 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1950, @"Add account info hash", v53, v54, v55, v56, v90);
      uint64_t v57 = sub_100315D20((uint64_t)KmlTlv, 94, v52);
      [v4 addObject:v57];
    }
    uint64_t v94 = v52;
    int8x8_t v58 = [*(id *)(a1 + 24) privacyPublicKey];
    uint64_t v59 = sub_100315D20((uint64_t)KmlTlv, 24393, v58);
    [v4 addObject:v59];

    unsigned __int8 v60 = [@"ECIES_v1" dataUsingEncoding:4];
    uint8x8_t v61 = sub_100315D20((uint64_t)KmlTlv, 218, v60);
    [v4 addObject:v61];

    uint64_t v62 = +[NSMutableData data];
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    id v63 = v4;
    id v64 = [v63 countByEnumeratingWithState:&v102 objects:v107 count:16];
    if (v64)
    {
      id v65 = v64;
      uint64_t v66 = *(void *)v103;
      do
      {
        for (i = 0; i != v65; i = (char *)i + 1)
        {
          if (*(void *)v103 != v66) {
            objc_enumerationMutation(v63);
          }
          uint64_t v68 = sub_100316294(*(void *)(*((void *)&v102 + 1) + 8 * i));
          [v62 appendData:v68];
        }
        id v65 = [v63 countByEnumeratingWithState:&v102 objects:v107 count:16];
      }
      while (v65);
    }

    uint64_t v69 = sub_100315D20((uint64_t)KmlTlv, v7, v62);
    uint64_t v70 = sub_100316294((uint64_t)v69);

    kmlUtilLogLargeData(@"plaintext tracking request", v70);
    v101[1] = v92;
    uint64_t v71 = SESEndPointPrivacyEncryption();
    id v23 = v92;

    if (v23)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1972, @"Failed to encrypt tracking request with - %@", v72, v73, v74, v75, (uint64_t)v23);
      if (v98)
      {
        sesErrorToKmlError(v23, 0xDEu);
        id v16 = 0;
        *id v98 = (id)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v16 = 0;
      }
      id v5 = v91;
    }
    else
    {
      id v76 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
      uint64_t v77 = [v71 version];
      uint64_t v78 = [v71 ephemeralPublicKeydata];
      __int16 v79 = [v71 receiverPublicKeyHash];
      __int16 v80 = [v71 cipherText];
      id v81 = [v76 initWithVersion:v77 ephemeralPublicKey:v78 publicKeyHash:v79 encryptedRequest:v80];

      id v82 = v81;
      v101[0] = 0;
      uint64_t v83 = [v81 encodeWithError:v101];
      id v84 = v101[0];
      id v23 = v84;
      if (v84 || !v83)
      {
        id v93 = v81;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager buildAndEncryptUpgradeTrackingRequestWithError:]", 1987, @"Encode key tracking request error %@, trackingRequestData=%@", v85, v86, v87, v88, (uint64_t)v84);
        id v5 = v91;
        if (v98)
        {
          sesErrorToKmlError(v23, 0xDEu);
          id v16 = 0;
          *id v98 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          id v16 = 0;
        }
        id v82 = v93;
      }
      else
      {
        id v16 = v83;
        id v5 = v91;
      }
    }
    uint64_t v13 = v97;

    uint64_t v14 = (void *)v99;
    uint64_t v45 = v95;
    uint64_t v44 = v96;
    id v46 = v94;
    goto LABEL_50;
  }
  id v16 = 0;
LABEL_55:

  return v16;
}

void sub_1003466F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setUpgradeEndpointJSONData:*(void *)(*(void *)(a1 + 32) + 112)];
  [v3 setTrackingRequest:*(void *)(a1 + 40)];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;
}

id sub_10034674C(id a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8 = a1;
  if (a1)
  {
    CFStringRef v12 = @"Upgrade";
    if (a4) {
      CFStringRef v12 = @"Revert";
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1140, @"Requested %@ for type:0x%04lx, version: 0x%04lx", a5, a6, a7, a8, (uint64_t)v12);
    uint64_t v13 = sub_100341C84((uint64_t)v8);
    if (v13)
    {
      uint64_t v18 = (void *)v13;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1143, @"Error getting endpoint - %@", v14, v15, v16, v17, v13);
      id v19 = v18;
LABEL_15:
      id v8 = v19;
LABEL_16:

      goto LABEL_17;
    }
    if (a4)
    {
      if (a2)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1155, @"Revert is a no-op for VehicleServer upgrade", v14, v15, v16, v17, v152);
        uint64_t v20 = 0;
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1149, @"Throw away saved info for framework upgrade", v14, v15, v16, v17, v152);
        v176 = _NSConcreteStackBlock;
        uint64_t v177 = 3221225472;
        v178 = sub_100347654;
        v179 = &unk_100419CA0;
        id v180 = v8;
        uint64_t v20 = SESEndPointUpdateWithBlock();
      }
      id v19 = v20;
      goto LABEL_15;
    }
    long long v174 = 0u;
    long long v175 = 0u;
    uint64_t v21 = *((void *)v8 + 17);
    uint64_t v22 = +[NSNumber numberWithUnsignedInteger:a3];
    uint64_t v191 = v22;
    id v23 = +[NSArray arrayWithObjects:&v191 count:1];
    sub_100301A7C(v21, a2, v23, (uint64_t)&v174);

    if (!BYTE8(v174))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1164, @"There is no upgrade available from current version: 0x%04lx", v24, v25, v26, v27, v175);
      uint64_t v33 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v189 = NSLocalizedDescriptionKey;
      id v34 = +[NSString stringWithUTF8String:KmlErrorString(220)];
      v190 = v34;
      uint64_t v35 = +[NSDictionary dictionaryWithObjects:&v190 forKeys:&v189 count:1];
      uint64_t v36 = +[NSError errorWithDomain:v33 code:220 userInfo:v35];

      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v36, &v172);
      id v19 = v36;
      goto LABEL_15;
    }
    sub_100301E8C(*((void *)v8 + 17), a2, a3);
    uint64_t v28 = sub_100301734(*((id *)v8 + 17));
    id v29 = v28;
    if (a2 == 2)
    {
      v169[1] = _NSConcreteStackBlock;
      v169[2] = (id)3221225472;
      v169[3] = sub_100347804;
      v169[4] = &unk_100419CF0;
      id v170 = v28;
      id v171 = v8;
      uint64_t v30 = SESEndPointUpdateWithBlock();
      uint64_t v31 = sesErrorToKmlError(v30, 0xDEu);

      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v31, &v172);
      id v8 = v31;
      id v32 = v170;
LABEL_25:

      goto LABEL_16;
    }
    id v32 = [*((id *)v8 + 3) upgradeEndpointJSONData];
    if (![v32 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1189, @"We don't have upgrade info saved on endpoint", v38, v39, v40, v41, v152);
      uint64_t v53 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v187 = NSLocalizedDescriptionKey;
      uint64_t v54 = +[NSString stringWithUTF8String:KmlErrorString(221)];
      v188 = v54;
      uint64_t v55 = +[NSDictionary dictionaryWithObjects:&v188 forKeys:&v187 count:1];
      uint64_t v56 = +[NSError errorWithDomain:v53 code:221 userInfo:v55];

      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v56, &v172);
      id v8 = v56;
      goto LABEL_25;
    }
    long long v162 = v29;
    uint64_t v42 = +[NSMutableDictionary dictionary];
    [v42 setObject:objc_opt_class() forKeyedSubscript:@"endpointCreationData"];
    [v42 setObject:objc_opt_class() forKeyedSubscript:@"mailboxMapping"];
    [v42 setObject:objc_opt_class() forKeyedSubscript:@"deviceConfiguration"];
    [v42 setObject:objc_opt_class() forKeyedSubscript:@"sharingConfiguration"];
    v169[0] = 0;
    uint64_t v43 = kmlUtilDecodeJson(v32, v42, 0, v169);
    id v44 = v169[0];
    long long v163 = [v43 objectForKey:@"endpointCreationData"];
    kmlUtilLogLargeData(@"endpointCreationData", v163);
    uint64_t v45 = [v43 objectForKey:@"mailboxMapping"];
    kmlUtilLogLargeData(@"mailboxMappingData", v45);
    id v46 = [v43 objectForKey:@"deviceConfiguration"];
    kmlUtilLogLargeData(@"deviceConfigData", v46);
    long long v161 = v43;
    unsigned int v47 = [v43 objectForKey:@"sharingConfiguration"];
    kmlUtilLogLargeData(@"sharingConfigData", v47);
    if (v44
      || ![v163 length]
      || ![v45 length]
      || ![v46 length] && !objc_msgSend(v47, "length"))
    {
      id v48 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      long long v49 = [v44 userInfo];
      long long v50 = +[NSError errorWithDomain:v48 code:221 userInfo:v49];

      NSErrorUserInfoKey v51 = v47;
      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v50, &v172);
      id v8 = v50;
      uint64_t v52 = v161;
      id v29 = v162;
LABEL_23:

      goto LABEL_25;
    }
    uint64_t v57 = objc_alloc_init(KmlEndpointCreationConfig);
    sub_10033C6F0((uint64_t)v57, v163);
    long long v160 = v57;
    if ((sub_10033D080((uint64_t)v57, v58, v59, v60, v61, v62, v63, v64) & 1) == 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1230, @"Endpoint creation data invalid", v65, v66, v67, v68, v152);
      id v82 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v185 = NSLocalizedDescriptionKey;
      uint64_t v83 = +[NSString stringWithUTF8String:KmlErrorString(4)];
      uint64_t v186 = v83;
      id v84 = +[NSDictionary dictionaryWithObjects:&v186 forKeys:&v185 count:1];
      uint64_t v85 = +[NSError errorWithDomain:v82 code:4 userInfo:v84];

      NSErrorUserInfoKey v51 = v47;
      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v85, &v172);
      id v8 = v85;
      uint64_t v52 = v161;
      id v29 = v162;
LABEL_59:

      goto LABEL_23;
    }
    long long v159 = sub_100313018((char *)[KmlMailboxMappingData alloc], v45, a3);
    if ((sub_10031380C((uint64_t)v159, v69, v70, v71, v72, v73, v74, v75) & 1) == 0)
    {
      uint64_t v86 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v183 = NSLocalizedDescriptionKey;
      uint64_t v87 = +[NSString stringWithUTF8String:KmlErrorString(212)];
      uint64_t v184 = v87;
      uint64_t v88 = +[NSDictionary dictionaryWithObjects:&v184 forKeys:&v183 count:1];
      uint64_t v89 = +[NSError errorWithDomain:v86 code:212 userInfo:v88];

      NSErrorUserInfoKey v51 = v47;
      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v89, &v172);
      id v8 = v89;
      uint64_t v52 = v161;
      id v29 = v162;
      uint64_t v90 = v159;
LABEL_58:

      goto LABEL_59;
    }
    uint64_t v76 = sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], *((void **)v8 + 8));
    if ([v46 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1251, @"Full device config was received. So that will be used.", v77, v78, v79, v80, v152);
      id v81 = (unsigned char *)sub_1003163B8((uint64_t)[KmlDeviceConfigurationData alloc], v46, 1);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1254, @"Only sharing config provided. Rest remains same", v77, v78, v79, v80, v152);
      id v81 = (unsigned char *)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], *((void **)v8 + 8));
      sub_10031722C(v81, v47);
    }
    id v91 = sub_1002FEDA4(v76);
    sub_100317554((uint64_t)v81, v91);

    if (sub_100318530(v76)) {
      sub_100317D44((uint64_t)v81, v92, v93, v94, v95, v96, v97, v98, v153);
    }
    BOOL v99 = sub_1003184F0(v76);
    long long v157 = (void *)v76;
    long long v158 = v81;
    if (v99 != sub_1003184F0((BOOL)v81))
    {
      BOOL v100 = sub_1003184F0(v76);
      sub_1003184F0((BOOL)v81);
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1265, @"Mismatch in BT/UWB support, Current (%d), New (%d)", v101, v102, v103, v104, v100);
      id v105 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
      id v106 = [v105 objectForKey:@"AllowRadioMismatchInUpgrade"];
      if (!isInternalBuild() || !v106)
      {
        long long v156 = v105;
        uint64_t v133 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v181 = NSLocalizedDescriptionKey;
        uint64_t v134 = +[NSString stringWithUTF8String:KmlErrorString(221)];
        v182 = v134;
        uint64_t v135 = +[NSDictionary dictionaryWithObjects:&v182 forKeys:&v181 count:1];
        long long v155 = v106;
        uint64_t v136 = (void *)v133;
        uint64_t v137 = +[NSError errorWithDomain:v133 code:221 userInfo:v135];

        NSErrorUserInfoKey v51 = v47;
        long long v172 = v174;
        long long v173 = v175;
        sub_1003476A0((uint64_t)v8, v137, &v172);
        id v8 = v137;

        uint64_t v52 = v161;
        id v29 = v162;
LABEL_57:
        uint64_t v90 = v159;

        goto LABEL_58;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1271, @"Allow upgrade to proceed based on user default", v107, v108, v109, v110, v154);

      id v81 = v158;
    }
    id v111 = v47;
    uint64_t v112 = sub_100316988((id *)v81);
    CFStringRef v113 = (void *)*((void *)v8 + 8);
    *((void *)v8 + 8) = v112;

    if ((sub_100316F24(v76) & 1) == 0) {
      sub_100347850((uint64_t)v8);
    }
    unsigned __int16 v114 = sub_100313DEC((uint64_t)v81);
    uint64_t v115 = sub_100313DE0((uint64_t)v81);
    v168[2] = 0;
    SESEndPointConfigureMailBoxes();
    id v116 = 0;

    if (v116)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1295, @"Upgrade commit failed with : %@", v117, v118, v119, v120, (uint64_t)v116);
      long long v121 = sesErrorToKmlError(v116, 0xDEu);

      long long v172 = v174;
      long long v173 = v175;
      sub_1003476A0((uint64_t)v8, v121, &v172);
      id v8 = v121;
      uint64_t v52 = v161;
      id v29 = v162;
    }
    else
    {
      id v29 = v162;
      if ([*((id *)v8 + 17) agreedKmlVehicleVersion] != 768) {
        goto LABEL_51;
      }
      id v122 = +[NSMutableData dataWithLength:2];
      LOBYTE(v172) = 0x80;
      [v122 replaceBytesInRange:0, 1, &v172];
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1310, @"First two bytes: %@", v123, v124, v125, v126, (uint64_t)v122);
      v168[1] = 0;
      SESEndPointSetPrivateDataWithSession();
      id v127 = 0;

      if (v127)
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1321, @"Upgrade commit failed with : %@", v128, v129, v130, v131, (uint64_t)v127);
        char v132 = sesErrorToKmlError(v127, 0xDEu);

        long long v172 = v174;
        long long v173 = v175;
        sub_1003476A0((uint64_t)v8, v132, &v172);
        id v8 = v132;
      }
      else
      {
LABEL_51:
        v168[0] = 0;
        uint64_t v138 = sub_100345D8C((uint64_t)v8, v168);
        id v139 = v168[0];
        if (v139)
        {
          uint64_t v144 = v139;
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1329, @"Failed to create tracking request : %@", v140, v141, v142, v143, (uint64_t)v139);
          unsigned int v145 = sesErrorToKmlError(v144, 0xDEu);

          long long v172 = v174;
          long long v173 = v175;
          sub_1003476A0((uint64_t)v8, v145, &v172);
          id v8 = v145;
        }
        else
        {
          id v164 = v45;
          id v165 = v162;
          id v166 = v138;
          NSErrorUserInfoKey v167 = v160;
          uint64_t v146 = SESEndPointUpdateWithBlock();
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager finalizeVersionType:version:revert:]", 1345, @"Upgrade commit result : %@", v147, v148, v149, v150, (uint64_t)v146);
          id v151 = sesErrorToKmlError(v146, 0xDEu);

          long long v172 = v174;
          long long v173 = v175;
          sub_1003476A0((uint64_t)v8, v151, &v172);
          id v8 = v151;
        }
      }
      uint64_t v52 = v161;
    }
    NSErrorUserInfoKey v51 = v111;
    goto LABEL_57;
  }
LABEL_17:

  return v8;
}

void sub_100347654(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setUpgradeEndpointJSONData:0];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;
}

void sub_1003476A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unsigned int v6 = v5;
  if (a1)
  {
    if (v5) {
      id v7 = [v5 code];
    }
    else {
      id v7 = 0;
    }
    v13[0] = @"status";
    id v8 = +[NSNumber numberWithUnsignedInt:v7];
    v14[0] = v8;
    v13[1] = @"versionType";
    uint64_t v9 = +[NSNumber numberWithUnsignedInteger:*a3];
    v14[1] = v9;
    v13[2] = @"toVersion";
    uint64_t v10 = +[NSNumber numberWithUnsignedInteger:a3[3]];
    v14[2] = v10;
    v13[3] = @"fromVersion";
    uint64_t v11 = +[NSNumber numberWithUnsignedInteger:a3[2]];
    v14[3] = v11;
    CFStringRef v12 = +[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:4];

    sub_1002F94C0((uint64_t)KmlAnalyticsLogger, v12);
  }
}

void sub_100347804(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setVehicleSupportedVersionsData:*(void *)(a1 + 32)];
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;
}

void sub_100347850(uint64_t a1)
{
  if (a1)
  {
    sub_100339C10((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 24));
    uint64_t v1 = (dispatch_queue_t *)objc_claimAutoreleasedReturnValue();
    id v2 = sub_10033AA30(v1);
    id v3 = +[NSMutableSet set];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v4 = v2;
    id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = [*(id *)(*((void *)&v14 + 1) + 8 * i) sharingSessionIdentifier:v14];
          [v3 addObject:v9];
        }
        id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v6);
    }

    if ([v3 count])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager cancelAllPendingInvitations]", 2007, @"canceling pending invitations", v10, v11, v12, v13, v14);
      sub_10034E1B8((uint64_t)KmlOwnerSharingManager, v3);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager cancelAllPendingInvitations]", 2010, @"No Pending invitations to cancel", v10, v11, v12, v13, v14);
    }
  }
}

void sub_1003479F4(void *a1, void *a2)
{
  id v3 = a2;
  [v3 setMailboxMapping:a1[4]];
  [v3 setDeviceConfiguration:*(void *)(a1[5] + 64)];
  [v3 setVehicleSupportedVersionsData:a1[6]];
  [v3 setTrackingRequest:a1[7]];
  id v4 = sub_10033E67C(a1[8]);
  [v3 setMailboxSizesPlusAdditionalData:v4];

  uint64_t v5 = a1[5];
  id v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = v3;
}

void **sub_100347A90(void **a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_100341C84((uint64_t)a1);
    if (v4)
    {
      uint64_t v9 = (void *)v4;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1357, @"Error getting endpoint - %@", v5, v6, v7, v8, v4);
      a1 = v9;
LABEL_29:

      goto LABEL_30;
    }
    uint64_t v90 = [a1[17] agreedKmlVehicleVersion];
    uint64_t v10 = [a1[17] agreedKmlVehicleVersion];
    uint64_t v11 = +[NSMutableDictionary dictionary];
    [v11 setObject:objc_opt_class() forKeyedSubscript:@"deviceConfiguration"];
    [v11 setObject:objc_opt_class() forKeyedSubscript:@"sharingConfiguration"];
    memset(v95, 0, 15);
    uint64_t v12 = kmlUtilDecodeJson(v3, v11, 0, v95);
    id v13 = v95[0];
    long long v14 = [v12 objectForKey:@"deviceConfiguration"];
    kmlUtilLogLargeData(@"deviceConfigData", v14);
    long long v15 = [v12 objectForKey:@"sharingConfiguration"];
    kmlUtilLogLargeData(@"sharingConfigData", v15);
    if (v13 || ![v14 length] && !objc_msgSend(v15, "length"))
    {
      uint64_t v87 = (uint64_t)a1;
      +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      v17 = uint64_t v16 = v10;
      uint64_t v18 = [v13 userInfo];
      id v19 = +[NSError errorWithDomain:v17 code:226 userInfo:v18];

      uint64_t v91 = 0;
      uint64_t v92 = 0;
      uint64_t v93 = v90;
      uint64_t v94 = v16;
      sub_1003476A0(v87, v19, &v91);
      a1 = v19;
LABEL_28:

      goto LABEL_29;
    }
    uint64_t v20 = a1 + 8;
    uint64_t v89 = (void *)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], a1[8]);
    uint64_t v86 = v10;
    if ([v14 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1391, @"Full device config was received. So that will be used.", v21, v22, v23, v24, v79);
      uint64_t v25 = (unsigned char *)sub_1003163B8((uint64_t)[KmlDeviceConfigurationData alloc], v14, 1);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1394, @"Only sharing config provided. Rest remains same", v21, v22, v23, v24, v79);
      uint64_t v25 = (unsigned char *)sub_1003163A8((uint64_t)[KmlDeviceConfigurationData alloc], *v20);
      sub_10031722C(v25, v15);
    }
    uint64_t v26 = sub_1002FEDA4((uint64_t)v89);
    sub_100317554((uint64_t)v25, v26);

    if (sub_100318530((BOOL)v89)) {
      sub_100317D44((uint64_t)v25, v27, v28, v29, v30, v31, v32, v33, v80);
    }
    BOOL v34 = sub_1003184F0((BOOL)v89);
    uint64_t v88 = v25;
    if (v34 != sub_1003184F0((BOOL)v25))
    {
      BOOL v35 = sub_1003184F0((BOOL)v89);
      sub_1003184F0((BOOL)v25);
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"[(KmlEndpointManager *)"Mismatch in BT/UWB support updateConfiguration:New (%d)""], v36, v37, v38, v39, v35);
      id v40 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
      uint64_t v41 = [v40 objectForKey:@"AllowRadioMismatchInUpgrade"];
      if (!isInternalBuild() || !v41)
      {
        uint64_t v83 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v100 = NSLocalizedDescriptionKey;
        id v82 = +[NSString stringWithUTF8String:KmlErrorString(226)];
        uint64_t v101 = v82;
        uint64_t v73 = +[NSDictionary dictionaryWithObjects:&v101 forKeys:&v100 count:1];
        +[NSError errorWithDomain:v83 code:226 userInfo:v73];
        uint64_t v74 = obja = v41;

        uint64_t v91 = 0;
        LOBYTE(v92) = 0;
        *(_DWORD *)((char *)&v92 + 1) = v95[1];
        HIDWORD(v92) = *(_DWORD *)((char *)&v95[1] + 3);
        uint64_t v93 = v90;
        uint64_t v94 = v86;
        sub_1003476A0((uint64_t)a1, v74, &v91);
        a1 = v74;

LABEL_27:
        goto LABEL_28;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1411, @"Allow update to proceed based on user default", v42, v43, v44, v45, v81);

      uint64_t v25 = v88;
    }
    sub_100316988((id *)v25);
    id obj = (id)objc_claimAutoreleasedReturnValue();
    if ([obj isEqualToData:*v20])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1422, @"New device config is identical to existing device config. Ignoring the update.", v46, v47, v48, v49, v80);
      long long v50 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v98 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v51 = +[NSString stringWithUTF8String:KmlErrorString(226)];
      BOOL v99 = v51;
      uint64_t v52 = +[NSDictionary dictionaryWithObjects:&v99 forKeys:&v98 count:1];
      uint64_t v53 = +[NSError errorWithDomain:v50 code:226 userInfo:v52];
    }
    else
    {
      int v54 = [a1[17] agreedKmlVehicleVersion];
      if (sub_100318010((uint64_t)v25, v54, 0, v55, v56, v57, v58, v59))
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1435, @"New device config is different. Saving it", v60, v61, v62, v63, v80);
        objc_storeStrong(a1 + 8, obj);
        uint64_t v64 = sub_100056FE4((uint64_t)v25);
        uint64_t v65 = a1[11];
        a1[11] = (void *)v64;

        uint64_t v66 = sub_10030ACB8((uint64_t)v25);
        uint64_t v67 = a1[10];
        a1[10] = (void *)v66;

        uint64_t v68 = SESEndPointUpdateWithBlock();
        if ((sub_100316F24((uint64_t)v89) & 1) == 0 && sub_100316F24((uint64_t)v88)) {
          sub_100347850((uint64_t)a1);
        }
        uint64_t v53 = sesErrorToKmlError(v68, 0xE2u);

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1456, @"Update endpoint result : %@", v69, v70, v71, v72, (uint64_t)v53);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager updateConfiguration:]", 1429, @"New device config is invalid.", v60, v61, v62, v63, v80);
        uint64_t v75 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v96 = NSLocalizedDescriptionKey;
        uint64_t v76 = +[NSString stringWithUTF8String:KmlErrorString(226)];
        uint64_t v97 = v76;
        uint64_t v77 = +[NSDictionary dictionaryWithObjects:&v97 forKeys:&v96 count:1];
        uint64_t v53 = +[NSError errorWithDomain:v75 code:226 userInfo:v77];
      }
    }
    uint64_t v91 = 0;
    LOBYTE(v92) = 0;
    *(_DWORD *)((char *)&v92 + 1) = v95[1];
    HIDWORD(v92) = *(_DWORD *)((char *)&v95[1] + 3);
    uint64_t v93 = v90;
    uint64_t v94 = v86;
    sub_1003476A0((uint64_t)a1, v53, &v91);
    a1 = v53;
    id v40 = obj;
    goto LABEL_27;
  }
LABEL_30:

  return a1;
}

void sub_1003482A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setDeviceConfiguration:*(void *)(*(void *)(a1 + 32) + 64)];
  if ([*(id *)(*(void *)(a1 + 32) + 80) length]) {
    [v3 setBleIntroKey:*(void *)(*(void *)(a1 + 32) + 80)];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 88) length]) {
    [v3 setBleOOBKey:*(void *)(*(void *)(a1 + 32) + 88)];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 24);
  *(void *)(v4 + 24) = v3;
}

id sub_100348334(uint64_t a1, void *a2)
{
  if (a1)
  {
    uint64_t v4 = sub_100341C84(a1);
    if (v4)
    {
      id v9 = (id)v4;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager requestBindingAttestationWithRetError:]", 1466, @"Error getting endpoint - %@", v5, v6, v7, v8, v4);
      if (a2)
      {
        id v9 = v9;
        id v10 = 0;
        *a2 = v9;
      }
      else
      {
        id v10 = 0;
      }
      goto LABEL_16;
    }
    uint64_t v11 = [*(id *)(a1 + 24) readerInfo];
    id v12 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v11];
    id v13 = [v12 manufacturer];
    long long v14 = SESEndpointGetBindingAttestationRequestWithSession();
    id v9 = 0;

    if (v9)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager requestBindingAttestationWithRetError:]", 1480, @"Failed to get binding attestation data with error : %@", v15, v16, v17, v18, (uint64_t)v9);
      if (!a2)
      {
        id v10 = 0;
        goto LABEL_15;
      }
      id v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      uint64_t v20 = [v9 userInfo];
      +[NSError errorWithDomain:v19 code:112 userInfo:v20];
      id v10 = 0;
      *a2 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v19 = +[NSUUID UUID];
      id v21 = objc_alloc((Class)DAKeyBindingAttestationRequestData);
      uint64_t v22 = [v14 subCAAttestation];
      uint64_t v23 = [v14 casdECDSACertificate];
      uint64_t v24 = [v14 casdRSACertificate];
      id v10 = [v21 initWithSharingSessionIdentifier:v19 subCaAttestation:v22 casd:v23 rsaCertData:v24];

      if (!a2 || v10) {
        goto LABEL_13;
      }
      uint64_t v20 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
      NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
      uint64_t v25 = +[NSString stringWithUTF8String:KmlErrorString(112)];
      uint64_t v29 = v25;
      uint64_t v26 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      *a2 = +[NSError errorWithDomain:v20 code:112 userInfo:v26];
    }
LABEL_13:

LABEL_15:
LABEL_16:

    goto LABEL_17;
  }
  id v10 = 0;
LABEL_17:

  return v10;
}

id sub_100348650(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_100341C84((uint64_t)a1);
    if (v4)
    {
      id v9 = (void *)v4;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlEndpointManager setBindingAttestation:]", 1506, @"Error getting endpoint - %@", v5, v6, v7, v8, v4);
      a1 = v9;
    }
    else
    {
      id v10 = sub_10033F89C([KmlBindingAttestation alloc], v3);
      uint64_t v11 = sub_10030ACC4((uint64_t)v10);
      id v12 = [v11 length];

      if (v12)
      {
        uint64_t v18 = v10;
        id v13 = SESEndPointUpdateWithBlock();
        long long v14 = v18;
      }
      else
      {
        long long v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
        NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
        uint64_t v15 = +[NSString stringWithUTF8String:KmlErrorString(112)];
        uint64_t v20 = v15;
        uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
        id v13 = +[NSError errorWithDomain:v14 code:112 userInfo:v16];
      }
      a1 = v13;
    }
  }

  return a1;
}

void sub_100348868(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_10030ACC4(*(void *)(a1 + 32));
  [v3 setAnonymizedDsid:v4];

  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(v5 + 24);
  *(void *)(v5 + 24) = v3;
}

id sub_1003488D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && [v3 length])
  {
    sub_100315960((uint64_t)KmlTlv, v4);
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v6 = [v5 countByEnumeratingWithState:&v24 objects:v29 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v25;
      while (2)
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v25 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(id **)(*((void *)&v24 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v9) == 32565)
          {
            sub_100315FB4(v9);
            id v6 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_13;
          }
        }
        id v6 = [v5 countByEnumeratingWithState:&v24 objects:v29 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_13:

    if ([v6 length])
    {
      sub_100315960((uint64_t)KmlTlv, v6);
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v14 = (id)objc_claimAutoreleasedReturnValue();
      id v15 = [v14 countByEnumeratingWithState:&v20 objects:v28 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v21;
        while (2)
        {
          for (j = 0; j != v15; j = (char *)j + 1)
          {
            if (*(void *)v21 != v16) {
              objc_enumerationMutation(v14);
            }
            uint64_t v18 = *(id **)(*((void *)&v20 + 1) + 8 * (void)j);
            if (sub_10005D5A8((uint64_t)v18) == 78)
            {
              sub_100315FB4(v18);
              id v15 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_25;
            }
          }
          id v15 = [v14 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }
LABEL_25:
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager getSlotIdFromAttestationPackage:]", 1861, @"Could not find friend attestation package in the data", v10, v11, v12, v13, v20);
      id v15 = 0;
    }
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

void sub_100348B34(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTrackingReceipt:*(void *)(*(void *)(a1 + 32) + 32)];
  [v3 setDeviceConfiguration:*(void *)(*(void *)(a1 + 32) + 64)];
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(void *)(v4 + 72))
  {
    [v3 setReaderConfigID:];
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if ([*(id *)(v4 + 80) length]) {
    [v3 setBleIntroKey:*(void *)(*(void *)(a1 + 32) + 80)];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 88) length]) {
    [v3 setBleOOBKey:*(void *)(*(void *)(a1 + 32) + 88)];
  }
  if ([*(id *)(*(void *)(a1 + 32) + 96) length])
  {
    [v3 setSlotIdentifier:*(void *)(*(void *)(a1 + 32) + 96)];
    if ([*(id *)(*(void *)(a1 + 32) + 88) length])
    {
      if ([*(id *)(*(void *)(a1 + 32) + 80) length])
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]_block_invoke", 1815, @"Calculate and save DCK ID", v5, v6, v7, v8, v16);
        id v9 = kmlUtilGetDckIdFromSlotId(*(void **)(*(void *)(a1 + 32) + 96));
        [v3 setBleDCKIdentifier:v9];
      }
    }
  }
  if (sub_100342FDC(*(void *)(a1 + 32)))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlEndpointManager updateEndpointWithTrackingData]_block_invoke", 1824, @"Removing sharing data that is no longer needed", v10, v11, v12, v13, v16);
    [v3 setSharingAttestationData:0];
    [v3 setOwnerEphemeralKey:0];
    [v3 setSharingEncryptedData:0];
    [v3 setAdditionalAttestationsDict:0];
  }
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = *(void **)(v14 + 24);
  *(void *)(v14 + 24) = v3;
}

id *sub_100348CC8(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 19, a2);
  }
  return result;
}

void sub_100348FC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100348FC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a1[1])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startSession_sync]", 473, @"Transport not ready to create session", a5, a6, a7, a8, v14);
      id v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      uint64_t v10 = +[NSString stringWithUTF8String:KmlErrorString(25)];
      uint64_t v16 = v10;
      uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      uint64_t v12 = +[NSError errorWithDomain:v9 code:25 userInfo:v11];

      uint64_t v13 = [a1 delegate];
      [v13 handleSessionStartResult:v12];
    }
    else
    {
      sub_100349B80((uint64_t)a1, 1);
    }
  }
}

void sub_1003491D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 1;
  sub_100348FC8(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_100349258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100349260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    switch(*(void *)(a1 + 8))
    {
      case 2:
      case 6:
        uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        BOOL v11 = *(unsigned char *)(a1 + 80) == 0;
        if (*(unsigned char *)(a1 + 80)) {
          uint64_t v12 = 23;
        }
        else {
          uint64_t v12 = 24;
        }
        NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
        if (v11) {
          int v13 = 24;
        }
        else {
          int v13 = 23;
        }
        uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(v13)];
        NSErrorUserInfoKey v19 = v14;
        NSErrorUserInfoKey v15 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
        uint64_t v16 = +[NSError errorWithDomain:v10 code:v12 userInfo:v15];
        uint64_t v17 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = v16;

        sub_100349B80(a1, 9);
        break;
      case 3:
      case 7:
        sub_100349B80(a1, 8);
        break;
      default:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport endSession_sync]", 488, @"session is not running. Ignore request to end it", a5, a6, a7, a8, a9);
        break;
    }
  }
}

void sub_1003494E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1003494F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = a1[1];
    if (v9 == 5)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport pauseSession_sync]", 508, @"Session already paused.", a5, a6, a7, a8, (uint64_t)v15);
      id v16 = [a1 delegate];
      [v16 handleSessionPauseResult:0];
    }
    else if (v9 == 3)
    {
      sub_100349B80((uint64_t)a1, 4);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport pauseSession_sync]", 512, @"Transport not running to pause", a5, a6, a7, a8, (uint64_t)v15);
      uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
      BOOL v11 = +[NSString stringWithUTF8String:KmlErrorString(25)];
      NSErrorUserInfoKey v18 = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
      int v13 = +[NSError errorWithDomain:v10 code:25 userInfo:v12];

      uint64_t v14 = [a1 delegate];
      [v14 handleSessionPauseResult:v13];
    }
  }
}

void sub_10034977C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 1;
  sub_100349790(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_100349790(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a1[1] == 5)
    {
      sub_100349B80((uint64_t)a1, 6);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport resumeSession_sync]", 497, @"Transport not ready to resume session", a5, a6, a7, a8, v14);
      uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      uint64_t v10 = +[NSString stringWithUTF8String:KmlErrorString(25)];
      id v16 = v10;
      BOOL v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      uint64_t v12 = +[NSError errorWithDomain:v9 code:25 userInfo:v11];

      int v13 = [a1 delegate];
      [v13 handleSessionResumeResult:v12];
    }
  }
}

void sub_1003499C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if ((*(void *)(v9 + 8) | 4) == 0xD)
  {
    objc_storeStrong((id *)(v9 + 88), *(id *)(a1 + 40));
    uint64_t v10 = *(void *)(a1 + 32);
    if (*(void *)(v10 + 8) == 13)
    {
      *(void *)(v10 + 8) = 9;
      uint64_t v10 = *(void *)(a1 + 32);
    }
    sub_100349B80(v10, 10);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startTransactionForKeyWithIdentifier:]_block_invoke", 162, @"Transport not ready to start transaction", a5, a6, a7, a8, v16);
    BOOL v11 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    uint64_t v12 = +[NSString stringWithUTF8String:KmlErrorString(25)];
    NSErrorUserInfoKey v18 = v12;
    int v13 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    uint64_t v14 = +[NSError errorWithDomain:v11 code:25 userInfo:v13];

    NSErrorUserInfoKey v15 = [*(id *)(a1 + 32) delegate];
    [v15 handleTransactionStartResult:v14];
  }
}

void sub_100349B80(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = *(NSObject **)(a1 + 56);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_10034A0A8;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    void v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100349C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100349C78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if ((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL) == 0xA) {
      sub_100349B80(a1, 12);
    }
    else {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport endTransaction_sync]", 464, @"Transaction session is not running. Ignore request to end it", a5, a6, a7, a8, a9);
    }
  }
}

id sub_100349D28(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) readAPDU];
}

id sub_100349DE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport sendApdu:]_block_invoke", 186, &stru_100421848, a5, a6, a7, a8, v10);
  return [*(id *)(*(void *)(a1 + 32) + 24) sendAPDU:*(void *)(a1 + 40)];
}

void sub_100349EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport reset]_block_invoke", 194, @"Reset requested", a5, a6, a7, a8, v10);
  uint64_t v9 = *(void *)(a1 + 32);

  sub_100349EFC(v9);
}

void sub_100349EFC(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 40) endSession];
    [*(id *)(a1 + 40) setDelegate:0];
    id v2 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    [*(id *)(a1 + 24) stopHceEmulation];
    [*(id *)(a1 + 24) stopTransactionEmulation];
    [*(id *)(a1 + 24) endSession];
    id v3 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = 0;

    uint64_t v4 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;

    sub_10034AB28(a1, v5, v6, v7, v8, v9, v10, v11, v23);
    sub_10034AEF8(a1, v12, v13, v14, v15, v16, v17, v18, v24);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cleanup]", 429, @"Resetting state to ready", v19, v20, v21, v22, v25);
    *(void *)(a1 + 8) = 0;
  }
}

id sub_10034A03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport pairingEndedWithResult:]_block_invoke", 202, @"Report pairing result (%@) to BT transport", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 24);

  return [v10 pairingEndedWithResult:v9];
}

void sub_10034A0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  if (v10 <= *(void *)(v9 + 8)) {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState:]_block_invoke", 218, @"Current state higher than new state. Do nothing", a5, a6, a7, a8, a9);
  }
  else {
    sub_10034A0D8(v9, v10, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_10034A0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 227, @"Current state %ld, new state %ld", a5, a6, a7, a8, *(void *)(a1 + 8));
    *(_DWORD *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = a2;
    switch(a2)
    {
      case 0:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 233, @"BT Pairing transport is ready", v11, v12, v13, v14, a9);
        return;
      case 1:
        uint64_t v15 = +[NFHardwareManager sharedHardwareManager];
        v46[0] = _NSConcreteStackBlock;
        v46[1] = 3221225472;
        v46[2] = sub_10034A5B0;
        v46[3] = &unk_10040DC78;
        v46[4] = a1;
        uint64_t v16 = [v15 startSecureElementManagerSession:v46];
        uint64_t v17 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v16;

        uint64_t v18 = [[BluetoothHCEAndTransactionSession alloc] initWithDelegate:a1];
        uint64_t v19 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = v18;

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 259, @"Waiting to get SEM session", v20, v21, v22, v23, v44);
        return;
      case 2:
        uint64_t v24 = @"Starting BT Host Card Emulation";
        uint64_t v25 = 264;
        goto LABEL_13;
      case 3:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 269, @"BT Host Card Emulation session started", v11, v12, v13, v14, v44);
        goto LABEL_33;
      case 4:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 274, @"Pause Hce session", v11, v12, v13, v14, v44);
        goto LABEL_18;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 279, @"BT Host Card Emulation session paused", v11, v12, v13, v14, v44);
        id v45 = [(id)a1 delegate];
        [v45 handleSessionPauseResult:*(void *)(a1 + 48)];
        goto LABEL_35;
      case 6:
        uint64_t v24 = @"Resuming Host Card Emulation";
        uint64_t v25 = 284;
LABEL_13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", v25, v24, v11, v12, v13, v14, v44);
        [*(id *)(a1 + 24) startHceEmulation];
        sub_10034AC40(a1, v26, v27, v28, v29, v30, v31, v32, a9);
        return;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 289, @"BT Host Card Emulation session resumed", v11, v12, v13, v14, v44);
        id v45 = [(id)a1 delegate];
        [v45 handleSessionResumeResult:0];
        goto LABEL_35;
      case 8:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 294, @"Stopping BT Host Card Emulation session", v11, v12, v13, v14, v44);
        [*(id *)(a1 + 40) endSession];
LABEL_18:
        uint64_t v33 = *(void **)(a1 + 24);
        [v33 stopHceEmulation];
        return;
      case 9:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 300, @"BT Host Card Emulation session stopped", v11, v12, v13, v14, v44);
        id v45 = [(id)a1 delegate];
        [v45 handleSessionEndResult:*(void *)(a1 + 48)];
        goto LABEL_35;
      case 10:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 305, @"Starting BT transaction session", v11, v12, v13, v14, v44);
        BOOL v34 = *(void **)(a1 + 24);
        uint64_t v35 = *(void *)(a1 + 88);
        _[v34 startTransactionEmulationForKeyWithIdentifier:v35];
        return;
      case 11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 310, @"BT transaction session started", v11, v12, v13, v14, v44);
        uint64_t v36 = [(id)a1 delegate];
        [v36 handleTransactionStartResult:*(void *)(a1 + 48)];

        sub_10034A778(a1, v37, v38, v39, v40, v41, v42, v43, a9);
        return;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 316, @"BT transaction session stop requested", v11, v12, v13, v14, v44);
        [*(id *)(a1 + 24) stopTransactionEmulation];
        sub_100349B80(a1, 13);
        return;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]", 322, @"BT Transaction session stopped", v11, v12, v13, v14, v44);
        id v45 = [(id)a1 delegate];
        [v45 handleTransactionEndResult:*(void *)(a1 + 48)];
        goto LABEL_35;
      case 14:
        sub_100349EFC(a1);
LABEL_33:
        id v45 = [(id)a1 delegate];
        [v45 handleSessionStartResult:*(void *)(a1 + 48)];
        goto LABEL_35;
      case 15:
        sub_100349EFC(a1);
        id v45 = [(id)a1 delegate];
        [v45 handleTransactionStartResult:*(void *)(a1 + 48)];
LABEL_35:

        break;
      default:
        return;
    }
  }
}

void sub_10034A5B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034A67C;
  block[3] = &unk_10040D2C0;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_10034A67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]_block_invoke_2", 241, @"startSecureElementManagerSession Error: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 48), *(id *)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = 14;
LABEL_5:
    sub_100349B80(v9, v10);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]_block_invoke_2", 246, @"SecureElementManagerSession started", a5, a6, a7, a8, v16);
  [*(id *)(a1 + 48) setDelegate:*(void *)(a1 + 40)];
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 40), *(id *)(a1 + 48));
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(v9 + 8) == 1)
  {
    uint64_t v10 = 2;
    goto LABEL_5;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport setCurrentState_sync:]_block_invoke_2", 250, @"state changed while we were trying to get SEM session. cleanup to make sure we are not leaking session", v11, v12, v13, v14, v17);
  uint64_t v15 = *(void *)(a1 + 40);

  sub_100349EFC(v15);
}

void sub_10034A778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 64))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startEndTransactionTimer]", 343, @"endTransactionTimer already running. Ignore another start", a5, a6, a7, a8, a9);
    }
    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10034A848;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startEndTransactionTimer]", 356, @"endTransactionTimer started", v9, v10, v11, v12, v13);
    }
  }
}

void sub_10034A848(uint64_t a1)
{
  double v2 = sub_10034A8F0(*(void *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10034A970;
  v6[3] = &unk_100419BB8;
  v6[4] = *(void *)(a1 + 32);
  uint64_t v3 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v6 block:v2];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 64);
  *(void *)(v4 + 64) = v3;
}

double sub_10034A8F0(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  id v1 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  [v1 doubleForKey:@"OPTransactionTimeout"];
  if (v2 < 1.0) {
    double v2 = 1.0;
  }
  double v3 = fmin(v2, 30.0);
  if (v2 <= 1.0) {
    double v4 = 20.0;
  }
  else {
    double v4 = v3;
  }

  return v4;
}

void sub_10034A970(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(NSObject **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034A9E4;
  block[3] = &unk_10040B880;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10034A9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startEndTransactionTimer]_block_invoke_3", 349, @"Transaction will be ended due to time out.", a5, a6, a7, a8, v24);
  uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
  NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
  uint64_t v10 = +[NSString stringWithUTF8String:KmlErrorString(23)];
  uint64_t v27 = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
  uint64_t v12 = +[NSError errorWithDomain:v9 code:23 userInfo:v11];
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 48);
  *(void *)(v13 + 48) = v12;

  sub_100349C78(*(void *)(a1 + 32), v15, v16, v17, v18, v19, v20, v21, v25);
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = *(void **)(v22 + 64);
  *(void *)(v22 + 64) = 0;
}

void sub_10034AB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 64))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10034ABDC;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelEndTransactionTimer]", 362, @"endTransactionTimer is not running.", a5, a6, a7, a8, a9);
    }
  }
}

void sub_10034ABDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  [*(id *)(*(void *)(a1 + 32) + 64) invalidate];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 64);
  *(void *)(v10 + 64) = 0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelEndTransactionTimer]_block_invoke", 368, @"endTransactionTimer cancelled", v12, v13, v14, v15, a9);
}

void sub_10034AC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 80))
    {
      if (!*(void *)(a1 + 72))
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10034AD34;
        block[3] = &unk_10040B880;
        void block[4] = a1;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]", 399, @"hceSessionTimer started", v11, v12, v13, v14, v15);
        return;
      }
      uint64_t v9 = @"A hceSessionTimer already running. Ignore another start";
      uint64_t v10 = 381;
    }
    else
    {
      uint64_t v9 = @"A timeout was not requested for this hce session";
      uint64_t v10 = 376;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]", v10, v9, a5, a6, a7, a8, a9);
  }
}

void sub_10034AD34(uint64_t a1)
{
  double v2 = sub_100304A60(*(void *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10034ADDC;
  v6[3] = &unk_100419BB8;
  v6[4] = *(void *)(a1 + 32);
  uint64_t v3 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v6 block:v2];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 72);
  *(void *)(v4 + 72) = v3;
}

void sub_10034ADDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(NSObject **)(v1 + 56);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034AE50;
  block[3] = &unk_10040B880;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10034AE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(void *)(*(void *)(a1 + 32) + 8) | 4) == 6)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport startHceTimer]_block_invoke_3", 389, @"Ending hce session due to time out.", a5, a6, a7, a8, v19);
    sub_100349260(*(void *)(a1 + 32), v10, v11, v12, v13, v14, v15, v16, v20);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 72);
    *(void *)(v17 + 72) = 0;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlBluetoothPairingTransport *)"hce session timer fired startHceTimer], a5, a6, a7, a8, a9);
  }
}

void sub_10034AEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 72))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10034AFAC;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelHceTimer]", 405, @"hceSessionTimer is not running.", a5, a6, a7, a8, a9);
    }
  }
}

void sub_10034AFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  [*(id *)(*(void *)(a1 + 32) + 72) invalidate];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 72);
  *(void *)(v10 + 72) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 80) = 0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport cancelHceTimer]_block_invoke", 412, @"hceSessionTimer cancelled", v12, v13, v14, v15, a9);
}

void sub_10034B0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport secureElementManagerSessionDidEndUnexpectedly:]_block_invoke", 535, @"Received SessionDidEndUnexpectedly callback for active session. Bailing out.", a5, a6, a7, a8, v19);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    BOOL v11 = *(unsigned char *)(*(void *)(a1 + 40) + 80) == 0;
    if (*(unsigned char *)(*(void *)(a1 + 40) + 80)) {
      uint64_t v12 = 23;
    }
    else {
      uint64_t v12 = 24;
    }
    NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
    if (v11) {
      int v13 = 24;
    }
    else {
      int v13 = 23;
    }
    uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(v13)];
    uint64_t v21 = v14;
    uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    uint64_t v16 = +[NSError errorWithDomain:v10 code:v12 userInfo:v15];
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void **)(v17 + 48);
    *(void *)(v17 + 48) = v16;

    sub_100349B80(*(void *)(a1 + 40), 9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport secureElementManagerSessionDidEndUnexpectedly:]_block_invoke", 531, @"Received SessionDidEndUnexpectedly callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_10034B2FC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleIncomingApdu:*(void *)(a1 + 40) error:0];
}

void sub_10034B418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) != *(void *)(*(void *)(a1 + 40) + 24))
  {
    uint64_t v9 = @"Received DidStartTransaction callback, but not for active session. Ignoring";
    uint64_t v10 = 556;
LABEL_10:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidStartTransaction:result:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidStartTransaction:result:]_block_invoke", 559, @"Received DidStartTransaction callback for active session.", a5, a6, a7, a8, v18);
  uint64_t v12 = *(void *)(a1 + 40);
  if (*(void *)(v12 + 8) != 10)
  {
    uint64_t v9 = @"We are not waiting for transaction to start. Ignore.";
    uint64_t v10 = 566;
    goto LABEL_10;
  }
  if (*(void *)(a1 + 48))
  {
    int v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    uint64_t v14 = [*(id *)(a1 + 48) userInfo];
    uint64_t v15 = +[NSError errorWithDomain:v13 code:24 userInfo:v14];
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void **)(v16 + 48);
    *(void *)(v16 + 48) = v15;

    uint64_t v12 = *(void *)(a1 + 40);
  }

  sub_100349B80(v12, 11);
}

void sub_10034B618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) != *(void *)(*(void *)(a1 + 40) + 24))
  {
    uint64_t v9 = @"Received DidEndTransaction callback, but not for active session. Ignoring";
    uint64_t v10 = 575;
LABEL_10:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidEndTransaction:result:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btTxnSessionDidEndTransaction:result:]_block_invoke", 578, @"Received DidEndTransaction callback for active session.", a5, a6, a7, a8, v25);
  sub_10034AB28(*(void *)(a1 + 40), v12, v13, v14, v15, v16, v17, v18, v26);
  uint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)(*(void *)(v19 + 8) - 11) > 1)
  {
    uint64_t v9 = @"We are not waiting for transaction to stop. Ignore.";
    uint64_t v10 = 586;
    goto LABEL_10;
  }
  if (*(void *)(a1 + 48))
  {
    NSErrorUserInfoKey v20 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    uint64_t v21 = [*(id *)(a1 + 48) userInfo];
    uint64_t v22 = +[NSError errorWithDomain:v20 code:24 userInfo:v21];
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(void **)(v23 + 48);
    *(void *)(v23 + 48) = v22;

    uint64_t v19 = *(void *)(a1 + 40);
  }

  sub_100349B80(v19, 12);
}

void sub_10034B824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v9 + 24))
  {
    if ((*(void *)(v9 + 8) | 4) == 6)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStartEmulation:result:]_block_invoke", 600, @"Received DidStartEmulation callback for Hce session.", a5, a6, a7, a8, v30);
      sub_10034AEF8(*(void *)(a1 + 40), v11, v12, v13, v14, v15, v16, v17, v31);
      if (*(void *)(a1 + 48))
      {
        uint64_t v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        uint64_t v19 = [*(id *)(a1 + 48) userInfo];
        uint64_t v20 = +[NSError errorWithDomain:v18 code:24 userInfo:v19];
        uint64_t v21 = *(void *)(a1 + 40);
        uint64_t v22 = *(void **)(v21 + 48);
        *(void *)(v21 + 48) = v20;
      }
      uint64_t v23 = *(void *)(a1 + 40);
      if (*(void *)(v23 + 8) == 2) {
        uint64_t v24 = 3;
      }
      else {
        uint64_t v24 = 7;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStartEmulation:result:]_block_invoke", 611, @"DidStartEmulation callback received  in wrong state.", a5, a6, a7, a8, v30);
      uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      uint64_t v26 = [*(id *)(a1 + 48) userInfo];
      uint64_t v27 = +[NSError errorWithDomain:v25 code:24 userInfo:v26];
      uint64_t v28 = *(void *)(a1 + 40);
      uint64_t v29 = *(void **)(v28 + 48);
      *(void *)(v28 + 48) = v27;

      uint64_t v23 = *(void *)(a1 + 40);
      uint64_t v24 = 9;
    }
    sub_100349B80(v23, v24);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStartEmulation:result:]_block_invoke", 595, @"Received DidStartEmulation callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_10034BAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) != *(void *)(*(void *)(a1 + 40) + 24))
  {
    uint64_t v9 = @"Received DidStopEmulation callback, but not for active session. Ignoring";
    uint64_t v10 = 622;
LABEL_3:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStopEmulation:result:]_block_invoke", v10, v9, a5, a6, a7, a8, a9);
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStopEmulation:result:]_block_invoke", 625, @"Received DidStopEmulation callback for active session.", a5, a6, a7, a8, v20);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(v12 + 8);
  if ((unint64_t)(v13 - 3) < 2)
  {
    uint64_t v14 = 5;
  }
  else if (v13 == 12)
  {
    uint64_t v14 = 13;
  }
  else
  {
    if (v13 == 13)
    {
      uint64_t v9 = @"Transaction emulation is already stopped. No-op.";
      uint64_t v10 = 631;
      goto LABEL_3;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidStopEmulation:result:]_block_invoke", 633, @"DidStopEmulation callback received  in wrong state.", a5, a6, a7, a8, v21);
    if (*(void *)(a1 + 48))
    {
      uint64_t v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      uint64_t v16 = [*(id *)(a1 + 48) userInfo];
      uint64_t v17 = +[NSError errorWithDomain:v15 code:24 userInfo:v16];
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void **)(v18 + 48);
      *(void *)(v18 + 48) = v17;
    }
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v14 = 9;
  }

  sub_100349B80(v12, v14);
}

void sub_10034BCE0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1[4] == *(void *)(a1[5] + 24))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidEndUnexpectedly:result:]_block_invoke", 649, @"Received DidEndUnexpectedly callback for active session. Result - %@", a5, a6, a7, a8, a1[6]);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    uint64_t v11 = [(id)a1[6] userInfo];
    uint64_t v12 = +[NSError errorWithDomain:v10 code:24 userInfo:v11];
    uint64_t v13 = a1[5];
    uint64_t v14 = *(void **)(v13 + 48);
    *(void *)(v13 + 48) = v12;

    uint64_t v15 = a1[5];
    if (*(uint64_t *)(v15 + 8) > 8) {
      uint64_t v16 = 13;
    }
    else {
      uint64_t v16 = 9;
    }
    sub_100349B80(v15, v16);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionDidEndUnexpectedly:result:]_block_invoke", 646, @"Received DidEndUnexpectedly callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_10034BEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionRadioIsDisabled:]_block_invoke", 668, @"Received Radio disabled callback for active session", a5, a6, a7, a8, v18);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(29)];
    uint64_t v20 = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v10 code:29 userInfo:v12];
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void **)(v14 + 48);
    *(void *)(v14 + 48) = v13;

    uint64_t v16 = *(void *)(a1 + 40);
    if (*(uint64_t *)(v16 + 8) > 8) {
      uint64_t v17 = 13;
    }
    else {
      uint64_t v17 = 9;
    }
    sub_100349B80(v16, v17);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionRadioIsDisabled:]_block_invoke", 664, @"Received Radio Disabled callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_10034C0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionUwbUnavailable:]_block_invoke", 687, @"Received UWB unavailable callback for active session", a5, a6, a7, a8, v18);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(30)];
    uint64_t v20 = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v10 code:30 userInfo:v12];
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void **)(v14 + 48);
    *(void *)(v14 + 48) = v13;

    uint64_t v16 = *(void *)(a1 + 40);
    if (*(uint64_t *)(v16 + 8) > 8) {
      uint64_t v17 = 13;
    }
    else {
      uint64_t v17 = 9;
    }
    sub_100349B80(v16, v17);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlBluetoothPairingTransport btHceTxnSessionUwbUnavailable:]_block_invoke", 683, @"Received UWB unavailable, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_10034C37C()
{
  self;
  if (qword_100468440 != -1)
  {
    dispatch_once(&qword_100468440, &stru_10041A870);
  }
}

void sub_10034C3CC(id a1)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlOwnerSharingManager initOsManagerArray]_block_invoke", 110, @"OwnerSharingManager: initializing osManagerArray", v1, v2, v3, v4, vars0);
  uint64_t v5 = +[NSMutableArray array];
  id v6 = (void *)qword_100468438;
  qword_100468438 = v5;
}

void sub_10034C428()
{
  self;
  uint64_t v0 = +[NSMutableIndexSet indexSet];
  id v1 = (id)qword_100468438;
  objc_sync_enter(v1);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = (id)qword_100468438;
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (v7 && *(void *)(v7 + 8) == 14) {
          [v0 addIndex:(char *)v6 + v4, (void)v8];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      v4 += (uint64_t)v6;
    }
    while (v3);
  }

  [(id)qword_100468438 removeObjectsAtIndexes:v0];
  objc_sync_exit(v1);
}

void sub_10034C58C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10034C5B4(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  self;
  uint64_t v27 = a4;
  uint64_t v28 = v8;
  if (!v8 || a4)
  {
    if (a4 == 1)
    {
      id v30 = v8;
      uint64_t v31 = 0;
      int v9 = 1;
    }
    else
    {
      int v9 = 0;
      id v30 = 0;
      uint64_t v31 = 0;
    }
  }
  else
  {
    id v30 = 0;
    uint64_t v31 = (void *)IDSCopyRawAddressForDestination();
    int v9 = 0;
  }
  sub_10034C37C();
  sub_10034C428();
  id obj = (id)qword_100468438;
  objc_sync_enter(obj);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v10 = (id)qword_100468438;
  id v11 = [v10 countByEnumeratingWithState:&v32 objects:v36 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v33;
LABEL_9:
    uint64_t v13 = 0;
    while (1)
    {
      if (*(void *)v33 != v12) {
        objc_enumerationMutation(v10);
      }
      if (v7)
      {
        uint64_t v14 = *(void **)(*((void *)&v32 + 1) + 8 * v13);
        uint64_t v15 = v14 ? (void *)v14[25] : 0;
        id v16 = v15;
        unsigned int v17 = [v16 isEqualToString:v7];

        if (v17)
        {
          if (v31)
          {
            if (v14) {
              uint64_t v18 = (void *)v14[26];
            }
            else {
              uint64_t v18 = 0;
            }
            id v4 = v18;
            if ([v4 isEqualToString:v31])
            {

LABEL_36:
              uint64_t v23 = v14;

              if (v14) {
                goto LABEL_46;
              }
              goto LABEL_37;
            }
            if (v30)
            {
LABEL_23:
              if (v14) {
                NSErrorUserInfoKey v19 = (void *)v14[27];
              }
              else {
                NSErrorUserInfoKey v19 = 0;
              }
              id v20 = v19;
              unsigned __int8 v21 = [v20 isEqualToString:v30];

              if (v31) {
              if (v21)
              }
                goto LABEL_36;
              goto LABEL_28;
            }
          }
          else if (v30)
          {
            goto LABEL_23;
          }
        }
      }
LABEL_28:
      if (v11 == (id)++v13)
      {
        id v22 = [v10 countByEnumeratingWithState:&v32 objects:v36 count:16];
        id v11 = v22;
        if (v22) {
          goto LABEL_9;
        }
        break;
      }
    }
  }

LABEL_37:
  if (v27) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = v31 == 0;
  }
  int v25 = v9;
  if (!v24) {
    int v25 = 1;
  }
  if (v25 == 1)
  {
    uint64_t v23 = sub_10034C8D4((id *)[KmlOwnerSharingManager alloc], v7, v31, v30);
    if (v23) {
      [(id)qword_100468438 addObject:v23];
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
LABEL_46:
  objc_sync_exit(obj);

  return v23;
}

void sub_10034C8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id obj)
{
}

id *sub_10034C8D4(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v37.receiver = a1;
    v37.super_class = (Class)KmlOwnerSharingManager;
    id v11 = (id *)[super init];
    a1 = v11;
    if (v11)
    {
      id v12 = [v11[24] UUIDString];
      id v13 = [v12 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 374, (uint64_t)v13, @"let's init", v14, v15, v16, (uint64_t)v37.receiver);

      a1[1] = 0;
      objc_storeStrong(a1 + 25, a2);
      uint64_t v17 = +[NSMutableArray array];
      id v18 = a1[28];
      a1[28] = (id)v17;

      uint64_t v19 = +[NSUUID UUID];
      id v20 = a1[24];
      a1[24] = (id)v19;

      objc_storeStrong(a1 + 26, a3);
      objc_storeStrong(a1 + 27, a4);
      if (a1[26])
      {
        uint64_t v21 = +[NSMutableArray array];
        id v22 = a1[14];
        a1[14] = (id)v21;

        id v23 = a1[15];
        a1[15] = 0;
      }
      else
      {
        id v24 = a1[14];
        a1[14] = 0;

        uint64_t v25 = +[NSMutableArray array];
        id v26 = a1[15];
        a1[15] = (id)v25;

        if (a1[27]) {
          goto LABEL_7;
        }
        uint64_t v36 = [a1[24] UUIDString];
        id v23 = a1[27];
        a1[27] = (id)v36;
      }

LABEL_7:
      uint64_t v27 = KmlSignpostLogger();
      a1[20] = (id)os_signpost_id_make_with_pointer(v27, a1[24]);

      *((unsigned char *)a1 + 168) = 0;
      a1[12] = (id)1;
      *((unsigned char *)a1 + 128) = -2;
      *((unsigned char *)a1 + 88) = 0;
      uint64_t v28 = sub_10034E3D0();
      id v29 = a1[10];
      a1[10] = (id)v28;

      id v30 = [a1[24] UUIDString];
      id v31 = [v30 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 408, (uint64_t)v31, @"ready to roll", v32, v33, v34, (uint64_t)v37.receiver);
    }
  }

  return a1;
}

void *sub_10034CB0C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  id v6 = 0;
  uint64_t v25 = v4;
  if (v4 && v5)
  {
    sub_10034C37C();
    sub_10034C428();
    id v22 = (id)qword_100468438;
    objc_sync_enter(v22);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    id obj = (id)qword_100468438;
    id v7 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
    if (v7)
    {
      uint64_t v24 = *(void *)v31;
      do
      {
        id v8 = 0;
        do
        {
          if (*(void *)v31 != v24) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v30 + 1) + 8 * (void)v8);
          if (v9) {
            id v10 = (void *)v9[25];
          }
          else {
            id v10 = 0;
          }
          id v11 = v10;
          unsigned int v12 = [v11 isEqualToString:v25];

          if (v12)
          {
            long long v28 = 0u;
            long long v29 = 0u;
            long long v26 = 0u;
            long long v27 = 0u;
            if (v9) {
              id v13 = (void *)v9[28];
            }
            else {
              id v13 = 0;
            }
            id v14 = v13;
            id v15 = [v14 countByEnumeratingWithState:&v26 objects:v34 count:16];
            if (v15)
            {
              uint64_t v16 = *(void *)v27;
LABEL_15:
              uint64_t v17 = 0;
              while (1)
              {
                if (*(void *)v27 != v16) {
                  objc_enumerationMutation(v14);
                }
                id v18 = sub_1002F3EF4(*(void *)(*((void *)&v26 + 1) + 8 * v17));
                unsigned __int8 v19 = [v18 isEqualToString:v5];

                if (v19) {
                  break;
                }
                if (v15 == (id)++v17)
                {
                  id v15 = [v14 countByEnumeratingWithState:&v26 objects:v34 count:16];
                  if (v15) {
                    goto LABEL_15;
                  }
                  goto LABEL_21;
                }
              }
              id v6 = v9;

              if (v9) {
                goto LABEL_29;
              }
            }
            else
            {
LABEL_21:
            }
          }
          id v8 = (char *)v8 + 1;
        }
        while (v8 != v7);
        id v20 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
        id v7 = v20;
      }
      while (v20);
    }
    id v6 = 0;
LABEL_29:

    objc_sync_exit(v22);
  }

  return v6;
}

void sub_10034CD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

id *sub_10034CDCC(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10034C37C();
  sub_10034C428();
  id v3 = (id)qword_100468438;
  objc_sync_enter(v3);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = (id)qword_100468438;
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      id v7 = 0;
      do
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v4);
        }
        if (v2)
        {
          id v8 = *(void **)(*((void *)&v16 + 1) + 8 * (void)v7);
          id v9 = v8 ? (void *)v8[24] : 0;
          id v10 = v9;
          unsigned int v11 = [v10 isEqual:v2];

          if (v11)
          {
            id v14 = v8;
            if (!v8) {
              goto LABEL_14;
            }
            id v13 = v14;
            *((unsigned char *)v14 + 168) = 1;

            goto LABEL_18;
          }
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v12 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      id v5 = v12;
      if (v12) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  id v13 = sub_10034CFC4((id *)[KmlOwnerSharingManager alloc], v2);
  if (v13) {
    [(id)qword_100468438 addObject:v13];
  }
LABEL_18:
  objc_sync_exit(v3);

  return v13;
}

void sub_10034CF9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10034CFC4(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v26.receiver = a1;
    v26.super_class = (Class)KmlOwnerSharingManager;
    id v5 = (const void **)[super init];
    a1 = (id *)v5;
    if (v5)
    {
      uint64_t v6 = v5 + 24;
      id v7 = [(id)v5[24] UUIDString];
      id v8 = [v7 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 417, (uint64_t)v8, @"let's init", v9, v10, v11, (uint64_t)v26.receiver);

      a1[1] = 0;
      uint64_t v12 = +[NSMutableArray array];
      id v13 = a1[28];
      a1[28] = (id)v12;

      uint64_t v14 = +[NSMutableArray array];
      id v15 = a1[14];
      a1[14] = (id)v14;

      id v16 = a1[15];
      a1[15] = 0;

      objc_storeStrong(a1 + 24, a2);
      long long v17 = KmlSignpostLogger();
      a1[20] = (id)os_signpost_id_make_with_pointer(v17, *v6);

      *((unsigned char *)a1 + 168) = 1;
      a1[12] = (id)2;
      *((unsigned char *)a1 + 128) = -2;
      *((unsigned char *)a1 + 88) = 0;
      uint64_t v18 = sub_10034E3D0();
      id v19 = a1[10];
      a1[10] = (id)v18;

      id v20 = [(id)*v6 UUIDString];
      id v21 = [v20 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 442, (uint64_t)v21, @"ready to roll", v22, v23, v24, (uint64_t)v26.receiver);
    }
  }

  return a1;
}

id sub_10034D160(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10034C37C();
  sub_10034C428();
  id v15 = (id)qword_100468438;
  objc_sync_enter(v15);
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id obj = (id)qword_100468438;
  id v3 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v3)
  {
    uint64_t v17 = *(void *)v23;
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v23 != v17) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        if (v5) {
          id v5 = (void *)v5[28];
        }
        uint64_t v6 = v5;
        id v7 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v7)
        {
          uint64_t v8 = *(void *)v19;
LABEL_10:
          uint64_t v9 = 0;
          while (1)
          {
            if (*(void *)v19 != v8) {
              objc_enumerationMutation(v6);
            }
            uint64_t v10 = *(void **)(*((void *)&v18 + 1) + 8 * v9);
            uint64_t v11 = sub_1002F3EF4((uint64_t)v10);
            unsigned __int8 v12 = [v11 isEqualToString:v2];

            if (v12) {
              break;
            }
            if (v7 == (id)++v9)
            {
              id v7 = [v6 countByEnumeratingWithState:&v18 objects:v26 count:16];
              if (v7) {
                goto LABEL_10;
              }
              goto LABEL_16;
            }
          }
          id v13 = v10;

          if (v13) {
            goto LABEL_21;
          }
        }
        else
        {
LABEL_16:
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
    }
    while (v3);
  }
  id v13 = 0;
LABEL_21:

  objc_sync_exit(v15);

  return v13;
}

void sub_10034D390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10034D3C0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v33 = a2;
  id v6 = a3;
  id v34 = a4;
  self;
  sub_10034C37C();
  id obj = (id)qword_100468438;
  objc_sync_enter(obj);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v7 = (id)qword_100468438;
  id v8 = [v7 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v40;
    while (2)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v40 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void **)(*((void *)&v39 + 1) + 8 * (void)v10);
        if (v11) {
          unsigned __int8 v12 = (void *)v11[24];
        }
        else {
          unsigned __int8 v12 = 0;
        }
        id v13 = v12;
        uint64_t v14 = sub_100014F20((uint64_t)v6);
        unsigned __int8 v15 = [v13 isEqual:v14];

        if (v15)
        {
          uint64_t v17 = v11;

          if (!v11) {
            goto LABEL_25;
          }
          long long v18 = sub_100014F20((uint64_t)v6);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlOwnerSharingManager regenerateOwnerSharingForEndpoint:config:updater:]", 280, @"Sharing Manager for  %@ already exists", v19, v20, v21, v22, (uint64_t)v18);

          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          id v23 = v17[28];
          id v24 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
          if (v24)
          {
            uint64_t v25 = *(void *)v36;
            while (2)
            {
              for (i = 0; i != v24; i = (char *)i + 1)
              {
                if (*(void *)v36 != v25) {
                  objc_enumerationMutation(v23);
                }
                uint64_t v27 = *(void *)(*((void *)&v35 + 1) + 8 * i);
                long long v28 = sub_1002F3EF4(v27);
                if (v28)
                {
                  long long v29 = sub_1002FEDB0((uint64_t)v6);
                  long long v30 = sub_1002F3EF4(v27);
                  unsigned __int8 v31 = [v29 isEqualToString:v30];

                  if (v31)
                  {

                    goto LABEL_29;
                  }
                }
              }
              id v24 = [v23 countByEnumeratingWithState:&v35 objects:v43 count:16];
              if (v24) {
                continue;
              }
              break;
            }
          }

          goto LABEL_27;
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v16 = [v7 countByEnumeratingWithState:&v39 objects:v44 count:16];
      id v8 = v16;
      if (v16) {
        continue;
      }
      break;
    }
  }

LABEL_25:
  uint64_t v17 = sub_10034D718((id *)[KmlOwnerSharingManager alloc], v33, v6, v34);
  if (v17)
  {
    [(id)qword_100468438 addObject:v17];
LABEL_27:
    sub_10034DA64((uint64_t)v17, v6);
  }
LABEL_29:
  objc_sync_exit(obj);
}

void sub_10034D6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id *sub_10034D718(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v57.receiver = a1;
    v57.super_class = (Class)KmlOwnerSharingManager;
    uint64_t v11 = (id *)[super init];
    a1 = v11;
    if (v11)
    {
      id v12 = [v11[24] UUIDString];
      id v13 = [v12 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 451, (uint64_t)v13, @"let's init", v14, v15, v16, (uint64_t)v57.receiver);

      if (sub_100313DE0((uint64_t)v9) == 3) {
        a1[1] = (id)8;
      }
      objc_storeStrong(a1 + 2, a2);
      uint64_t v17 = sub_1002FFCE4((uint64_t)[KmlVersions alloc], a1[2]);
      id v18 = a1[19];
      a1[19] = (id)v17;

      uint64_t v19 = [a1[2] publicKeyIdentifier];
      id v20 = a1[3];
      a1[3] = (id)v19;

      uint64_t v21 = kmlUtilHexStringFromData(a1[3]);
      id v22 = a1[25];
      a1[25] = (id)v21;

      uint64_t v23 = sub_100030AD8((uint64_t)v9);
      id v24 = a1[26];
      a1[26] = (id)v23;

      uint64_t v25 = sub_10001A584((uint64_t)v9);
      id v26 = a1[27];
      a1[27] = (id)v25;

      uint64_t v27 = sub_100313DC8((uint64_t)v9);
      id v28 = a1[5];
      a1[5] = (id)v27;

      uint64_t v29 = sub_1003128C8((uint64_t)v9);
      id v30 = a1[7];
      a1[7] = (id)v29;

      uint64_t v31 = sub_1002FEDBC((uint64_t)v9);
      id v32 = a1[8];
      a1[8] = (id)v31;

      *((unsigned char *)a1 + 88) = 0;
      uint64_t v33 = +[NSMutableArray array];
      id v34 = a1[28];
      a1[28] = (id)v33;

      if (a1[27])
      {
        id v35 = a1[14];
        a1[14] = 0;

        uint64_t v36 = +[NSMutableArray array];
      }
      else
      {
        uint64_t v37 = +[NSMutableArray array];
        id v38 = a1[14];
        a1[14] = (id)v37;

        uint64_t v36 = 0;
      }
      id v39 = a1[15];
      a1[15] = (id)v36;

      uint64_t v40 = sub_100014F20((uint64_t)v9);
      id v41 = a1[24];
      a1[24] = (id)v40;

      objc_storeStrong(a1 + 17, a4);
      long long v42 = [KmlDeviceConfigurationData alloc];
      uint64_t v43 = [a1[2] deviceConfiguration];
      uint64_t v44 = sub_1003163A8((uint64_t)v42, v43);
      id v45 = a1[18];
      a1[18] = (id)v44;

      uint64_t v46 = KmlSignpostLogger();
      a1[20] = (id)os_signpost_id_make_with_pointer(v46, a1[24]);

      *((_WORD *)a1 + 84) = 0;
      a1[12] = (id)2;
      *((unsigned char *)a1 + 128) = -2;
      uint64_t v47 = [a1[2] sharingTokenAvailabilityBitmap];

      if (v47)
      {
        uint64_t v48 = [a1[2] sharingTokenAvailabilityBitmap];
        *((unsigned char *)a1 + 128) = [v48 unsignedCharValue];
      }
      uint64_t v49 = sub_10034E3D0();
      id v50 = a1[10];
      a1[10] = (id)v49;

      id v51 = [a1[24] UUIDString];
      id v52 = [v51 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 501, (uint64_t)v52, @"ready to roll", v53, v54, v55, (uint64_t)v57.receiver);
    }
  }

  return a1;
}

void sub_10034DA64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 80);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10034E4E8;
    v6[3] = &unk_10040D1A0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

id sub_10034DB08(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  sub_10034C37C();
  sub_10034C428();
  id v6 = (id)qword_100468438;
  objc_sync_enter(v6);
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v7 = (id)qword_100468438;
  id v8 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v20;
    while (2)
    {
      id v10 = 0;
      do
      {
        if (*(void *)v20 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void **)(*((void *)&v19 + 1) + 8 * (void)v10);
        if (v11) {
          id v12 = (void *)v11[24];
        }
        else {
          id v12 = 0;
        }
        id v13 = v12;
        unsigned __int8 v14 = [v13 isEqual:v5];

        if (v14)
        {
          uint64_t v16 = v11;

          if (!v11) {
            goto LABEL_17;
          }
          uint64_t v17 = sub_10034DD20(v16, v4);
          if (v17)
          {
            objc_sync_exit(v6);

            goto LABEL_19;
          }
          goto LABEL_18;
        }
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v15 = [v7 countByEnumeratingWithState:&v19 objects:v23 count:16];
      id v8 = v15;
      if (v15) {
        continue;
      }
      break;
    }
  }

LABEL_17:
  uint64_t v16 = 0;
LABEL_18:
  objc_sync_exit(v6);

  uint64_t v16 = v16;
  uint64_t v17 = v16;
LABEL_19:

  return v17;
}

void sub_10034DCF8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_10034DD20(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v5 = a1[28];
      id v6 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v24;
        while (2)
        {
          for (i = 0; i != v7; i = (char *)i + 1)
          {
            if (*(void *)v24 != v8) {
              objc_enumerationMutation(v5);
            }
            id v10 = *(void **)(*((void *)&v23 + 1) + 8 * i);
            uint64_t v11 = sub_1002F3EF4((uint64_t)v10);
            unsigned __int8 v12 = [v11 isEqualToString:v4];

            if (v12)
            {
              id v13 = [a1[24] UUIDString];
              id v14 = [v13 UTF8String];
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 548, (uint64_t)v14, @"Found a session", v15, v16, v17, v23);

              a1 = v10;
              goto LABEL_15;
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v23 objects:v27 count:16];
          if (v7) {
            continue;
          }
          break;
        }
      }
    }
    else
    {
      id v5 = [a1[24] UUIDString];
      id v18 = [v5 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 542, (uint64_t)v18, @"Invitation ID needs to be non nil", v19, v20, v21, v23);
    }

    a1 = 0;
  }
LABEL_15:

  return a1;
}

void sub_10034DEF4(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  self;
  sub_10034C37C();
  id v6 = (id)qword_100468438;
  objc_sync_enter(v6);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v7 = (id)qword_100468438;
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v18;
    while (2)
    {
      id v10 = 0;
      do
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v10);
        if (v11) {
          unsigned __int8 v12 = (void *)v11[24];
        }
        else {
          unsigned __int8 v12 = 0;
        }
        id v13 = v12;
        unsigned __int8 v14 = [v13 isEqual:v4];

        if (v14)
        {
          uint64_t v16 = v11;

          if (!v11) {
            goto LABEL_16;
          }
          sub_10034E0CC((uint64_t)v16, v5);
          goto LABEL_17;
        }
        id v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      id v15 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
      id v8 = v15;
      if (v15) {
        continue;
      }
      break;
    }
  }

LABEL_16:
  uint64_t v16 = 0;
LABEL_17:
  objc_sync_exit(v6);
}

void sub_10034E0A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10034E0CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      id v5 = *(NSObject **)(a1 + 80);
      v11[0] = (uint64_t)_NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = (uint64_t)sub_100352A48;
      v11[3] = (uint64_t)&unk_10040D1A0;
      void v11[4] = a1;
      id v12 = v3;
      dispatch_async(v5, v11);
    }
    else
    {
      id v6 = [*(id *)(a1 + 192) UUIDString];
      id v7 = [v6 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 892, (uint64_t)v7, @"Missing invitation ID", v8, v9, v10, v11[0]);
    }
  }
}

void sub_10034E1B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10034C37C();
  id v3 = (id)qword_100468438;
  objc_sync_enter(v3);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = (id)qword_100468438;
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * (void)v7);
        if (v8) {
          uint64_t v9 = *(void **)(v8 + 192);
        }
        else {
          uint64_t v9 = 0;
        }
        id v10 = v9;
        unsigned int v11 = [v2 containsObject:v10, (void)v13];

        if (v11) {
          sub_10034E354(v8);
        }
        id v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v12 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      id v5 = v12;
    }
    while (v12);
  }

  objc_sync_exit(v3);
}

void sub_10034E330(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10034E354(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100352C8C;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

id sub_10034E3D0()
{
  self;
  if (qword_100468450 != -1) {
    dispatch_once(&qword_100468450, &stru_10041A890);
  }
  uint64_t v0 = (void *)qword_100468448;

  return v0;
}

void sub_10034E428(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.sesd.kml.ownerSharingManager", v3);
  id v2 = (void *)qword_100468448;
  qword_100468448 = (uint64_t)v1;
}

void sub_10034E4E8(uint64_t a1)
{
  id v2 = (void *)sub_1002F3A58((uint64_t)[KmlOwnerSharingSession alloc], *(void **)(a1 + 32), *(void **)(*(void *)(a1 + 40) + 16), *(void **)(a1 + 40), 1u, *(void **)(*(void *)(a1 + 40) + 152), 0);
  if (v2)
  {
    [*(id *)(*(void *)(a1 + 40) + 224) addObject:v2];
  }
  else
  {
    id v3 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v9 = NSLocalizedDescriptionKey;
    id v4 = +[NSString stringWithUTF8String:KmlErrorString(104)];
    id v10 = v4;
    id v5 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];
    uint64_t v6 = +[NSError errorWithDomain:v3 code:104 userInfo:v5];
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 72);
    *(void *)(v7 + 72) = v6;
  }
}

BOOL sub_10034E63C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 80));
    uint64_t v19 = 0;
    long long v20 = &v19;
    uint64_t v21 = 0x2020000000;
    char v22 = 1;
    id v10 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034E7D0;
    block[3] = &unk_10040D310;
    void block[4] = a1;
    void block[5] = &v19;
    dispatch_sync(v10, block);
    BOOL v11 = *((unsigned char *)v20 + 24) != 0;
    if (*((unsigned char *)v20 + 24))
    {
      id v12 = *(NSObject **)(a1 + 80);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_10034E848;
      v14[3] = &unk_100419A98;
      void v14[4] = a1;
      id v15 = v7;
      id v16 = v8;
      id v17 = v9;
      dispatch_async(v12, v14);
    }
    _Block_object_dispose(&v19, 8);
  }
  else
  {
    BOOL v11 = 0;
  }

  return v11;
}

void sub_10034E7D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(uint64_t *)(v1 + 8) >= 2)
  {
    id v3 = [*(id *)(v1 + 192) UUIDString];
    id v4 = [v3 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 566, (uint64_t)v4, @"Sharing already in progress, can't start again", v5, v6, v7, v8);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10034E848(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2) {
    id v2 = (void *)v2[24];
  }
  id v3 = v2;
  id v4 = [v3 UUIDString];
  id v5 = [v4 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 576, (uint64_t)v5, @"Start sharing Key: %@ with : %@", v6, v7, v8, *(void *)(*(void *)(a1 + 32) + 200));

  uint64_t v9 = kmlUtilDataForHexString(*(void **)(*(void *)(a1 + 32) + 200));
  uint64_t v10 = *(void *)(a1 + 32);
  BOOL v11 = *(void **)(v10 + 24);
  *(void *)(v10 + 24) = v9;

  id v12 = [*(id *)(a1 + 40) length];
  if (v12) {
    id v13 = [objc_alloc((Class)NSData) initWithData:*(void *)(a1 + 40)];
  }
  else {
    id v13 = 0;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), v13);
  if (v12) {

  }
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(void *)(a1 + 32) + 104), *(id *)(a1 + 56));
  sub_10034E9D4(*(void *)(a1 + 32), 2);
  long long v14 = KmlSignpostLogger();
  id v15 = v14;
  os_signpost_id_t v16 = *(void *)(*(void *)(a1 + 32) + 160);
  if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, v16, "OwnerSharingInit", "client", buf, 2u);
  }
}

void sub_10034E9D4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = *(NSObject **)(a1 + 80);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    void v3[2] = sub_10034F724;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    void v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

BOOL sub_10034EA50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 80));
    uint64_t v11 = 0;
    id v12 = &v11;
    uint64_t v13 = 0x2020000000;
    char v14 = 1;
    id v4 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10034EB9C;
    block[3] = &unk_10040D310;
    void block[4] = a1;
    void block[5] = &v11;
    dispatch_sync(v4, block);
    BOOL v5 = *((unsigned char *)v12 + 24) != 0;
    if (*((unsigned char *)v12 + 24))
    {
      uint64_t v6 = *(NSObject **)(a1 + 80);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_10034EC18;
      v8[3] = &unk_10040D1A0;
      v8[4] = a1;
      id v9 = v3;
      dispatch_async(v6, v8);
    }
    _Block_object_dispose(&v11, 8);
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

void sub_10034EB9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 168) || *(void *)(v2 + 104))
  {
    id v3 = [*(id *)(v2 + 192) UUIDString];
    id v4 = [v3 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 596, (uint64_t)v4, @"We are not ready for silent sharing", v5, v6, v7, v8);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10034EC18(uint64_t a1)
{
  uint64_t v2 = +[NSArray arrayWithObject:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 104);
  *(void *)(v3 + 104) = v2;

  sub_10034E9D4(*(void *)(a1 + 32), 4);
  uint64_t v5 = KmlSignpostLogger();
  uint64_t v6 = v5;
  os_signpost_id_t v7 = *(void *)(*(void *)(a1 + 32) + 160);
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, v7, "OwnerSharingInit", "silent", v8, 2u);
  }
}

BOOL sub_10034ECD4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 80));
  uint64_t v8 = 0;
  id v9 = &v8;
  uint64_t v10 = 0x2020000000;
  char v11 = 1;
  uint64_t v2 = *(NSObject **)(a1 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10034EDF8;
  block[3] = &unk_10040D310;
  void block[4] = a1;
  void block[5] = &v8;
  dispatch_sync(v2, block);
  BOOL v3 = *((unsigned char *)v9 + 24) != 0;
  if (*((unsigned char *)v9 + 24))
  {
    id v4 = *(NSObject **)(a1 + 80);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10034EE74;
    v6[3] = &unk_10040B880;
    void v6[4] = a1;
    dispatch_async(v4, v6);
  }
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_10034EDF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 168) || *(void *)(v2 + 8))
  {
    id v3 = [*(id *)(v2 + 192) UUIDString];
    id v4 = [v3 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 622, (uint64_t)v4, @"We are not ready for silent sharing over Cross Platform channel", v5, v6, v7, v8);

    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

void sub_10034EE74(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 169) = 1;
  sub_10034E9D4(*(void *)(a1 + 32), 1);
  uint64_t v2 = KmlSignpostLogger();
  id v3 = v2;
  os_signpost_id_t v4 = *(void *)(*(void *)(a1 + 32) + 160);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, v4, "OwnerSharingInit", "silentCrossPlatform", v5, 2u);
  }
}

void sub_10034EF18(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 80);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10034EFC0;
    v6[3] = &unk_10040D1A0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10034EFC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 192);
  }
  else {
    id v3 = 0;
  }
  id v4 = [v3 UUIDString];
  id v5 = [v4 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 644, (uint64_t)v5, @"Key sharing cancel requested", v6, v7, v8, v38);

  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v9 = *(id *)(*(void *)(a1 + 32) + 224);
  id v10 = [v9 countByEnumeratingWithState:&v41 objects:v47 count:16];
  if (!v10)
  {

LABEL_17:
    uint64_t v30 = *(void *)(a1 + 32);
    if (v30) {
      uint64_t v31 = *(void **)(v30 + 192);
    }
    else {
      uint64_t v31 = 0;
    }
    id v32 = [v31 UUIDString];
    id v33 = [v32 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 660, (uint64_t)v33, @"No Sharing session to cancel", v34, v35, v36, v39);

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176));
    [WeakRetained handleOwnerKeySharingCancelStatus:0];

    return;
  }
  id v11 = v10;
  char v12 = 0;
  uint64_t v13 = *(void *)v42;
  id v40 = v9;
  do
  {
    for (i = 0; i != v11; i = (char *)i + 1)
    {
      if (*(void *)v42 != v13) {
        objc_enumerationMutation(v9);
      }
      uint64_t v15 = *(void *)(*((void *)&v41 + 1) + 8 * i);
      os_signpost_id_t v16 = *(void **)(a1 + 40);
      id v17 = sub_1002F3EF4(v15);
      LODWORD(v16) = [v16 containsObject:v17];

      if (v16)
      {
        long long v18 = *(void **)(a1 + 32);
        if (v18) {
          long long v18 = (void *)v18[24];
        }
        uint64_t v19 = v18;
        id v20 = [v19 UUIDString];
        id v21 = [v20 UTF8String];
        char v22 = sub_1002F3EF4(v15);

        char v12 = 1;
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 651, (uint64_t)v21, @"Cancelling session with ID: %@", v23, v24, v25, (uint64_t)v22);

        long long v26 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        NSErrorUserInfoKey v45 = NSLocalizedDescriptionKey;
        uint64_t v27 = +[NSString stringWithUTF8String:KmlErrorString(103)];
        uint64_t v46 = v27;
        id v28 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
        uint64_t v29 = +[NSError errorWithDomain:v26 code:103 userInfo:v28];
        sub_1002F4428(v15, v29);

        id v9 = v40;
      }
    }
    id v11 = [v9 countByEnumeratingWithState:&v41 objects:v47 count:16];
  }
  while (v11);

  if ((v12 & 1) == 0) {
    goto LABEL_17;
  }
}

dispatch_queue_t *sub_10034F2DC(dispatch_queue_t *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[10]);
    uint64_t v13 = 0;
    char v14 = &v13;
    uint64_t v15 = 0x3032000000;
    os_signpost_id_t v16 = sub_10034F424;
    id v17 = sub_10034F434;
    id v18 = 0;
    uint64_t v7 = a1[10];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10034F43C;
    v9[3] = &unk_10041A8B8;
    v9[4] = a1;
    char v12 = &v13;
    id v10 = v6;
    id v11 = v5;
    dispatch_sync(v7, v9);
    a1 = (dispatch_queue_t *)(id)v14[5];

    _Block_object_dispose(&v13, 8);
  }

  return a1;
}

uint64_t sub_10034F424(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10034F434(uint64_t a1)
{
}

void sub_10034F43C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 216))
  {
    id v3 = [*(id *)(v2 + 192) UUIDString];
    id v4 = [v3 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 675, (uint64_t)v4, @"We are not initialized fo cross-platform sharing", v5, v6, v7, v35);

    uint64_t v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
    id v9 = +[NSString stringWithUTF8String:KmlErrorString(115)];
    id v40 = v9;
    id v10 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v8 code:115 userInfo:v10];
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    uint64_t v2 = *(void *)(a1 + 32);
  }
  char v14 = sub_10034DD20((id *)v2, *(void **)(a1 + 40));
  if (v14)
  {
    uint64_t v15 = *(void **)(a1 + 32);
    if (v15) {
      uint64_t v15 = (void *)v15[24];
    }
    os_signpost_id_t v16 = v15;
    id v17 = [v16 UUIDString];
    id v18 = [v17 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 685, (uint64_t)v18, @"updating xp mailbox identifier: %@ forInvitation:%@", v19, v20, v21, *(void *)(a1 + 48));

    sub_1002F4660((uint64_t)v14, *(void **)(a1 + 48));
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      uint64_t v23 = *(void **)(v22 + 192);
    }
    else {
      uint64_t v23 = 0;
    }
    id v24 = [v23 UUIDString];
    id v25 = [v24 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 687, (uint64_t)v25, @"saving sharing records", v26, v27, v28, v36);

    sub_10033A3D8(*(void *)(*(void *)(a1 + 32) + 136));
  }
  else
  {
    uint64_t v29 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
    uint64_t v30 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    uint64_t v38 = v30;
    uint64_t v31 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
    uint64_t v32 = +[NSError errorWithDomain:v29 code:109 userInfo:v31];
    uint64_t v33 = *(void *)(*(void *)(a1 + 56) + 8);
    uint64_t v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = v32;
  }
}

void sub_10034F724(uint64_t a1)
{
}

void sub_10034F730(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void **)(a1 + 192);
    if (v4 >= a2)
    {
      id v129 = [v5 UUIDString];
      id v21 = [v129 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 707, (uint64_t)v21, @"Current state higher than new state. Do nothing", v22, v23, v24, v127);
    }
    else
    {
      id v6 = v5;
      id v7 = [v6 UUIDString];
      id v8 = [v7 UTF8String];
      uint64_t v9 = *(void *)(a1 + 8);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 711, (uint64_t)v8, @"Current state %ld, new state %ld", v10, v11, v12, v9);
      *(void *)(a1 + 8) = a2;
      switch(a2)
      {
        case 1:
          id v25 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = 0;

          uint64_t v26 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = 0;

          uint64_t v27 = *(void **)(a1 + 200);
          *(void *)(a1 + 200) = 0;

          uint64_t v28 = *(void **)(a1 + 144);
          *(void *)(a1 + 144) = 0;

          uint64_t v29 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = 0;

          uint64_t v30 = *(void **)(a1 + 104);
          *(void *)(a1 + 104) = 0;

          [*(id *)(a1 + 224) removeAllObjects];
          uint64_t v31 = *(void **)(a1 + 136);
          *(void *)(a1 + 136) = 0;

          uint64_t v32 = *(void **)(a1 + 216);
          *(void *)(a1 + 216) = 0;

          if (*(unsigned char *)(a1 + 169))
          {
            uint64_t v33 = *(void **)(a1 + 120);
            if (v33)
            {
              [v33 removeAllObjects];
            }
            else
            {
              uint64_t v117 = +[NSMutableArray array];
              uint64_t v118 = *(void **)(a1 + 120);
              *(void *)(a1 + 120) = v117;
            }
            uint64_t v119 = *(void **)(a1 + 112);
            if (v119)
            {
              [v119 removeAllObjects];
              uint64_t v120 = *(void **)(a1 + 112);
            }
            else
            {
              uint64_t v120 = 0;
            }
            *(void *)(a1 + 112) = 0;

            uint64_t v121 = [*(id *)(a1 + 192) UUIDString];
            id v122 = *(void **)(a1 + 216);
            *(void *)(a1 + 216) = v121;

            uint64_t v123 = *(void **)(a1 + 208);
            *(void *)(a1 + 208) = 0;
          }
          else
          {
            objc_storeWeak((id *)(a1 + 176), 0);
            id v116 = *(void **)(a1 + 112);
            if (v116)
            {
              [v116 removeAllObjects];
            }
            else
            {
              uint64_t v124 = +[NSMutableArray array];
              uint64_t v125 = *(void **)(a1 + 112);
              *(void *)(a1 + 112) = v124;
            }
            uint64_t v126 = *(void **)(a1 + 120);
            if (v126) {
              [v126 removeAllObjects];
            }
            else {
              *(void *)(a1 + 120) = 0;
            }
          }
          sub_100350210(a1);
          return;
        case 2:
          id v34 = [*(id *)(a1 + 192) UUIDString];
          id v35 = [v34 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 781, (uint64_t)v35, @"Check for owner key", v36, v37, v38, v128);

          sub_100350374(a1);
          return;
        case 3:
          sub_1003504A4(a1);
          return;
        case 4:
          id v39 = [*(id *)(a1 + 192) UUIDString];
          id v40 = [v39 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 790, (uint64_t)v40, @"Check if everything is ready to initiate sharing", v41, v42, v43, v128);

          sub_10035092C(a1);
          return;
        case 5:
          id v44 = [*(id *)(a1 + 192) UUIDString];
          id v45 = [v44 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 795, (uint64_t)v45, @"Ready to create sharing sessions", v46, v47, v48, v128);

          sub_100350CC8(a1);
          uint64_t v49 = KmlSignpostLogger();
          id v50 = v49;
          os_signpost_id_t v51 = *(void *)(a1 + 160);
          if (v51 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v49)) {
            goto LABEL_30;
          }
          *(_WORD *)buf = 0;
          id v52 = "OwnerSharingCreateSessions";
          goto LABEL_29;
        case 6:
          id v53 = [*(id *)(a1 + 192) UUIDString];
          id v54 = [v53 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 801, (uint64_t)v54, @"Create invitations", v55, v56, v57, v128);

          sub_100351C44(a1);
          uint64_t v58 = KmlSignpostLogger();
          id v50 = v58;
          os_signpost_id_t v51 = *(void *)(a1 + 160);
          if (v51 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v58))
          {
            *(_WORD *)buf = 0;
            id v52 = "OwnerSharingCreateInvitations";
LABEL_29:
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v50, OS_SIGNPOST_EVENT, v51, v52, "", buf, 2u);
          }
LABEL_30:

          return;
        case 7:
          id v59 = *(id *)(a1 + 192);
          id v60 = [v59 UUIDString];
          id v61 = [v60 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 813, (uint64_t)v61, @"Failed to start sharing with error: %@", v62, v63, v64, *(void *)(a1 + 72));

          uint64_t v65 = KmlSignpostLogger();
          uint64_t v66 = v65;
          os_signpost_id_t v67 = *(void *)(a1 + 160);
          if (v67 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v65))
          {
            uint64_t v68 = *(void *)(a1 + 72);
            *(_DWORD *)buf = 138412290;
            uint64_t v131 = v68;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, OS_SIGNPOST_EVENT, v67, "OwnerSharingFailedToStart", "error - %@", buf, 0xCu);
          }

          uint64_t v69 = *(void *)(a1 + 208);
          id WeakRetained = objc_loadWeakRetained((id *)(a1 + 176));
          uint64_t v71 = WeakRetained;
          uint64_t v72 = *(void *)(a1 + 72);
          if (v69) {
            [WeakRetained handleOwnerKeySharingInvitations:0 withError:v72];
          }
          else {
            [WeakRetained handleOwnerCrossPlatformInvitations:0 withError:v72];
          }

          sub_100351F2C(a1);
          sub_10035242C((id *)a1);
          if (!*(unsigned char *)(a1 + 168)) {
            sub_100352528(a1);
          }
          goto LABEL_61;
        case 8:
          id v73 = [*(id *)(a1 + 192) UUIDString];
          id v74 = [v73 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 832, (uint64_t)v74, @"Let's send invitations", v75, v76, v77, v128);

          uint64_t v78 = KmlSignpostLogger();
          uint64_t v79 = v78;
          os_signpost_id_t v80 = *(void *)(a1 + 160);
          if (v80 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v78))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v79, OS_SIGNPOST_EVENT, v80, "OwnerSharingStartSessions", "", buf, 2u);
          }

          *(void *)(a1 + 184) = sub_10033ACF0(*(void *)(a1 + 136));
          uint64_t v81 = *(void *)(a1 + 208);
          id v82 = objc_loadWeakRetained((id *)(a1 + 176));
          uint64_t v83 = v82;
          if (v81) {
            [v82 handleOwnerKeySharingInvitations:*(void *)(a1 + 112) withError:0];
          }
          else {
            [v82 handleOwnerCrossPlatformInvitations:*(void *)(a1 + 120) withError:0];
          }

          sub_10035263C(a1);
          sub_10033A3D8(*(void *)(a1 + 136));
          return;
        case 9:
          id v84 = [*(id *)(a1 + 192) UUIDString];
          id v85 = [v84 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 850, (uint64_t)v85, @"At least one sharing session finished successfully", v86, v87, v88, v128);

          uint64_t v89 = KmlSignpostLogger();
          uint64_t v90 = v89;
          os_signpost_id_t v91 = *(void *)(a1 + 160);
          if (v91 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v89))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v90, OS_SIGNPOST_EVENT, v91, "OwnerSharingOneSuccessfulSharing", "", buf, 2u);
          }

          id v92 = (id)SESEndPointAddEndpointIdWithUuid();
          return;
        case 10:
        case 11:
          id v13 = [*(id *)(a1 + 192) UUIDString];
          id v14 = [v13 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 858, (uint64_t)v14, @"Cancel pending sessions", v15, v16, v17, v128);

          id v18 = KmlSignpostLogger();
          uint64_t v19 = v18;
          os_signpost_id_t v20 = *(void *)(a1 + 160);
          if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, v20, "OwnerSharingCancelPending", "", buf, 2u);
          }

          sub_100352748(a1);
          return;
        case 12:
          id v93 = [*(id *)(a1 + 192) UUIDString];
          id v94 = [v93 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 865, (uint64_t)v94, @"Cancel silent invite request", v95, v96, v97, v128);

          NSErrorUserInfoKey v98 = KmlSignpostLogger();
          BOOL v99 = v98;
          os_signpost_id_t v100 = *(void *)(a1 + 160);
          if (v100 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v98))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_EVENT, v100, "OwnerSharingCancelSilentInvite", "", buf, 2u);
          }

          sub_100352938(a1);
          goto LABEL_61;
        case 13:
          id v101 = [*(id *)(a1 + 192) UUIDString];
          id v102 = [v101 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 871, (uint64_t)v102, @"OKSManager: Error while sharing key.", v103, v104, v105, v128);

          id v106 = KmlSignpostLogger();
          uint64_t v107 = v106;
          os_signpost_id_t v108 = *(void *)(a1 + 160);
          if (v108 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v106))
          {
            uint64_t v109 = *(void *)(a1 + 72);
            *(_DWORD *)buf = 138412290;
            uint64_t v131 = v109;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v107, OS_SIGNPOST_EVENT, v108, "OwnerSharingError", "error - %@", buf, 0xCu);
          }

LABEL_61:
          sub_10034E9D4(a1, 14);
          break;
        case 14:
          id v110 = [*(id *)(a1 + 192) UUIDString];
          id v111 = [v110 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 879, (uint64_t)v111, @"OKSManager object can be safely removed.", v112, v113, v114, v128);

          [*(id *)(a1 + 112) removeAllObjects];
          uint64_t v115 = *(void **)(a1 + 120);
          [v115 removeAllObjects];
          break;
        default:
          return;
      }
    }
  }
}

void sub_100350210(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = SESEndPointGetEndpointIdWithUuid();
    id v3 = 0;
    uint64_t v4 = v3;
    if (v2) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    if (v5)
    {
      objc_storeStrong((id *)(a1 + 200), v2);
      uint64_t v15 = kmlUtilDataForHexString(*(void **)(a1 + 200));
      id v13 = *(id *)(a1 + 24);
      *(void *)(a1 + 24) = v15;
      uint64_t v14 = 2;
    }
    else
    {
      id v6 = *(id *)(a1 + 192);
      id v7 = [v6 UUIDString];
      id v8 = [v7 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 920, (uint64_t)v8, @"We have no record of sharing with uuid : %@", v9, v10, v11, *(void *)(a1 + 192));

      if (*(unsigned char *)(a1 + 169))
      {
        uint64_t v12 = sesErrorToKmlError(v4, 0xD2u);
        id v13 = *(id *)(a1 + 72);
        *(void *)(a1 + 72) = v12;
        uint64_t v14 = 7;
      }
      else
      {
        id v13 = [*(id *)(a1 + 192) UUIDString];
        id v16 = [v13 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 925, (uint64_t)v16, @"Dropping the re-invite request over IDS. Nothing to do here", v17, v18, v19, v20);
        uint64_t v14 = 13;
      }
    }

    sub_10034E9D4(a1, v14);
  }
}

void sub_100350374(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100352C94(a1);
    id v14 = v2;
    if (v2)
    {
      objc_storeStrong((id *)(a1 + 72), v2);
      uint64_t v3 = 4;
    }
    else
    {
      uint64_t v4 = sub_100339C10((uint64_t)KmlSharingRecordsUpdater, *(void **)(a1 + 16));
      BOOL v5 = *(void **)(a1 + 136);
      *(void *)(a1 + 136) = v4;

      id v6 = [*(id *)(a1 + 16) sharingTokenAvailabilityBitmap];

      if (v6)
      {
        id v7 = [*(id *)(a1 + 16) sharingTokenAvailabilityBitmap];
        *(unsigned char *)(a1 + 128) = [v7 unsignedCharValue];
      }
      id v8 = [KmlDeviceConfigurationData alloc];
      uint64_t v9 = [*(id *)(a1 + 16) deviceConfiguration];
      uint64_t v10 = sub_1003163A8((uint64_t)v8, v9);
      uint64_t v11 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v10;

      uint64_t v12 = sub_10035325C(a1);
      id v13 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v12;

      if (*(void *)(a1 + 72)) {
        uint64_t v3 = 4;
      }
      else {
        uint64_t v3 = 3;
      }
    }
    sub_10034E9D4(a1, v3);
  }
}

void sub_1003504A4(uint64_t a1)
{
  if (!a1) {
    return;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    sub_10033AE6C(*(dispatch_queue_t **)(a1 + 136), *(void **)(a1 + 192));
    id v64 = (id)objc_claimAutoreleasedReturnValue();
    id v2 = *(id *)(a1 + 192);
    id v3 = [v2 UUIDString];
    id v4 = [v3 UTF8String];
    if (v64)
    {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1029, (uint64_t)v4, @"We have a record of successful sharing with uuid : %@", v5, v6, v7, *(void *)(a1 + 192));

      uint64_t v8 = sub_100313DC8((uint64_t)v64);
      uint64_t v9 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v8;

      uint64_t v10 = sub_1003128C8((uint64_t)v64);
      uint64_t v11 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v10;

      uint64_t v12 = sub_1002FEDBC((uint64_t)v64);
      id v13 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v12;

      if (sub_1003535C8(a1))
      {
        if (sub_100339938((BOOL)v64))
        {
          id v14 = *(void **)(a1 + 208);
          uint64_t v15 = sub_100030AD8((uint64_t)v64);
          LOBYTE(v14) = [v14 isEqualToString:v15];

          if (v14) {
            goto LABEL_17;
          }
          id v16 = *(id *)(a1 + 192);
          id v17 = [v16 UUIDString];
          id v18 = [v17 UTF8String];
          uint64_t v19 = *(void *)(a1 + 208);
          uint64_t v63 = sub_100030AD8((uint64_t)v64);
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1050, (uint64_t)v18, @"Reinvite Request is from: %@, but in the past we shared with : %@", v20, v21, v22, v19);
        }
        else
        {
          id v17 = [*(id *)(a1 + 192) UUIDString];
          id v30 = [v17 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1054, (uint64_t)v30, @"Previous share was over cross platform channel.", v31, v32, v33, v61);
        }

LABEL_17:
        id v34 = [*(id *)(a1 + 192) UUIDString];
        id v35 = [v34 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1057, (uint64_t)v35, @"Proceed and let bindingAttestation validation verify the friend account", v36, v37, v38, v61);

        if (*(unsigned char *)(a1 + 169))
        {
          id v39 = [*(id *)(a1 + 192) UUIDString];
          id v40 = [v39 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1060, (uint64_t)v40, @"For silent re-share over CrossPlatform channel, generate sharing config from reference", v41, v42, v43, v62);

          id v44 = objc_alloc((Class)DAKeySharingConfiguration);
          uint64_t v45 = sub_100056FE4((uint64_t)v64);
          uint64_t v46 = sub_10030ACC4((uint64_t)v64);
          uint64_t v47 = (void *)v46;
          if (v46) {
            CFStringRef v48 = (const __CFString *)v46;
          }
          else {
            CFStringRef v48 = @"car key";
          }
          uint64_t v49 = +[NSData data];
          uint64_t v50 = *(void *)(a1 + 96);
          BOOL v51 = sub_100339180((BOOL)v64);
          id v52 = [v44 initWithProfile:v45 displayName:v48 metaData:v49 targetDeviceType:v50 enableVehiclePasscode:v51 maxRetriesForDevicePasscode:sub_1003128EC((uint64_t)v64) deviceEnteredPasscode:0 proprietaryEntitlements:0];

          uint64_t v53 = +[NSArray arrayWithObject:v52];
          id v54 = *(void **)(a1 + 104);
          *(void *)(a1 + 104) = v53;

          uint64_t v55 = a1;
          uint64_t v56 = 4;
        }
        else
        {
          id v52 = +[KmlClientReporterFactory getReporter];
          uint64_t v57 = *(void *)(a1 + 192);
          uint64_t v58 = *(void *)(a1 + 200);
          id v59 = sub_1002FEDA4((uint64_t)v64);
          LOBYTE(v57) = [v52 didReceiveInvitationRequestWithUuid:v57 ownerKeyIdentifier:v58 friendKeyIdentifier:v59 targetType:*(void *)(a1 + 96)];

          if (v57)
          {
LABEL_27:

            goto LABEL_28;
          }
          uint64_t v55 = a1;
          uint64_t v56 = 12;
        }
        sub_10034E9D4(v55, v56);
        goto LABEL_27;
      }
      if (!*(unsigned char *)(a1 + 169))
      {
        uint64_t v28 = a1;
        uint64_t v29 = 12;
        goto LABEL_23;
      }
    }
    else
    {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1018, (uint64_t)v4, @"We don't have a record of successful sharing with uuid : %@", v5, v6, v7, *(void *)(a1 + 192));

      if (!*(unsigned char *)(a1 + 169))
      {
        uint64_t v28 = a1;
        uint64_t v29 = 14;
LABEL_23:
        sub_10034E9D4(v28, v29);
LABEL_28:

        return;
      }
    }
    uint64_t v28 = a1;
    uint64_t v29 = 4;
    goto LABEL_23;
  }
  id v23 = [*(id *)(a1 + 192) UUIDString];
  id v24 = [v23 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1008, (uint64_t)v24, @"In regular sharing, we should have configs handed to us by client.", v25, v26, v27, v60);

  sub_10034E9D4(a1, 4);
}

uint64_t sub_10035092C(uint64_t location)
{
  if (location)
  {
    uint64_t v1 = location;
    if (!*(void *)(location + 104))
    {
      id v3 = (void **)(location + 72);
      id v2 = *(void **)(location + 72);
      if (v2)
      {
        objc_storeStrong((id *)(location + 72), v2);
      }
      else
      {
        id v4 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        NSErrorUserInfoKey v48 = NSLocalizedDescriptionKey;
        uint64_t v5 = +[NSString stringWithUTF8String:KmlErrorString(104)];
        uint64_t v49 = v5;
        uint64_t v6 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
        uint64_t v7 = +[NSError errorWithDomain:v4 code:104 userInfo:v6];
        uint64_t v8 = *v3;
        *id v3 = (void *)v7;
      }
    }
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    id v9 = *(id *)(v1 + 104);
    id v10 = [v9 countByEnumeratingWithState:&v41 objects:v47 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v12 = *(void *)v42;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v42 != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*((void *)&v41 + 1) + 8 * i);
          id v15 = *(id *)(v1 + 192);
          id v16 = [v15 UUIDString];
          id v17 = [v16 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1089, (uint64_t)v17, @"Config : %@", v18, v19, v20, (uint64_t)v14);

          if ([v14 enableVehicleEnteredPasscode] && !sub_100318504(*(void *)(v1 + 144)))
          {
            uint64_t v21 = *(void **)(v1 + 72);
            if (v21)
            {
              id v22 = v21;
              id v23 = *(void **)(v1 + 72);
              *(void *)(v1 + 72) = v22;
            }
            else
            {
              id v23 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
              NSErrorUserInfoKey v45 = NSLocalizedDescriptionKey;
              id v24 = +[NSString stringWithUTF8String:KmlErrorString(117)];
              uint64_t v46 = v24;
              uint64_t v25 = +[NSDictionary dictionaryWithObjects:&v46 forKeys:&v45 count:1];
              uint64_t v26 = +[NSError errorWithDomain:v23 code:117 userInfo:v25];
              uint64_t v27 = *(void **)(v1 + 72);
              *(void *)(v1 + 72) = v26;
            }
            goto LABEL_20;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v41 objects:v47 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
LABEL_20:

    uint64_t v28 = *(void **)(v1 + 192);
    if (*(void *)(v1 + 72))
    {
      id v29 = v28;
      id v30 = [v29 UUIDString];
      id v31 = [v30 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1097, (uint64_t)v31, @"Sharing can't proceed due to : %@", v32, v33, v34, *(void *)(v1 + 72));

      uint64_t v35 = 7;
    }
    else
    {
      id v30 = [v28 UUIDString];
      id v36 = [v30 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1100, (uint64_t)v36, @"All is well, begin sharing", v37, v38, v39, v40);
      uint64_t v35 = 5;
    }

    return sub_10034E9D4(v1, v35);
  }
  return location;
}

void sub_100350CC8(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 192);
    id v3 = [v2 UUIDString];
    id v4 = [v3 UTF8String];
    id v5 = [*(id *)(a1 + 104) count];

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1107, (uint64_t)v4, @"Number of sharing sessions requested : %ld", v6, v7, v8, (uint64_t)v5);
    *(void *)(a1 + 184) = sub_10033ACF0(*(void *)(a1 + 136));
    id v9 = [*(id *)(a1 + 16) mailboxMapping];
    id v10 = [*(id *)(a1 + 192) UUIDString];
    id v11 = [v10 UTF8String];
    uint64_t v12 = kmlUtilHexStringFromData(v9);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1114, (uint64_t)v11, @"Raw Mapping Data:%@", v13, v14, v15, (uint64_t)v12);

    id v16 = sub_100313018((char *)[KmlMailboxMappingData alloc], v9, (__int16)[*(id *)(a1 + 152) agreedKmlVehicleVersion]);
    LODWORD(v11) = sub_100313B1C((uint64_t)v16);
    if (v11 < sub_100313AC8((uint64_t)v16))
    {
      id v17 = [*(id *)(a1 + 192) UUIDString];
      id v18 = [v17 UTF8String];
      uint64_t v26 = sub_100313640((id *)v16, v19, v20, v21, v22, v23, v24, v25);
      uint64_t v27 = [v26 asHexString];
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1120, (uint64_t)v18, @"Underflow detected in mailbox offsets %@", v28, v29, v30, (uint64_t)v27);

      id v31 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v194 = NSLocalizedDescriptionKey;
      uint64_t v32 = +[NSString stringWithUTF8String:KmlErrorString(105)];
      v195 = v32;
      uint64_t v33 = +[NSDictionary dictionaryWithObjects:&v195 forKeys:&v194 count:1];
      uint64_t v34 = +[NSError errorWithDomain:v31 code:105 userInfo:v33];
      uint64_t v35 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v34;

      sub_10034E9D4(a1, 7);
LABEL_64:

      return;
    }
    sub_100313AC8((uint64_t)v16);
    sub_100313B1C((uint64_t)v16);
    sub_100313AC8((uint64_t)v16);
    id v36 = SESEndPointGetPrivateData();
    id v37 = 0;
    if (v37)
    {
      id v38 = *(id *)(a1 + 192);
      id v39 = [v38 UUIDString];
      id v40 = [v39 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1131, (uint64_t)v40, @"Error while getting signaling bitmap %@", v41, v42, v43, (uint64_t)v37);

      long long v44 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v45 = [v37 userInfo];
      uint64_t v46 = +[NSError errorWithDomain:v44 code:105 userInfo:v45];
      uint64_t v47 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v46;

      sub_10034E9D4(a1, 7);
LABEL_63:

      goto LABEL_64;
    }
    if (sub_100313ABC((uint64_t)v16) == 128) {
      unsigned int v48 = 0;
    }
    else {
      unsigned int v48 = *((unsigned __int8 *)[v36 bytes] + 1);
    }
    int v186 = sub_100313AE0((uint64_t)v16);
    unsigned int v184 = sub_100313AEC((uint64_t)v16);
    unsigned __int8 v187 = *(unsigned char *)(a1 + 128);
    int v49 = sub_100316F24(*(void *)(a1 + 144));
    id v50 = [*(id *)(a1 + 192) UUIDString];
    id v51 = [v50 UTF8String];
    id v180 = v9;
    if (v49)
    {
      unsigned __int8 v187 = -2;
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1154, (uint64_t)v51, @"The config says OnlineImmoTokens. Pretend like immoTokenAvailability is : %02X", v52, v53, v54, 254);
      unsigned int v48 = 254;
    }
    else
    {
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1156, (uint64_t)v51, @"immoToken/slotId BitMap from mailbox          : %02X", v52, v53, v54, v48);

      id v55 = *(id *)(a1 + 192);
      id v50 = [v55 UUIDString];
      id v56 = [v50 UTF8String];
      uint64_t v57 = *(unsigned __int8 *)(a1 + 128);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1157, (uint64_t)v56, @"immoToken/slotId BitMap available for sharing : %02X", v58, v59, v60, v57);
    }

    if (!*(void *)(a1 + 56))
    {
      uint64_t v61 = kmlUtilRandomDataWithSize(8uLL);
      uint64_t v62 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = v61;
    }
    if (!*(void *)(a1 + 64))
    {
      uint64_t v63 = [*(id *)(a1 + 16) longTermSharedSecret];
      id v64 = *(void **)(a1 + 56);
      unsigned int v65 = sub_100318518(*(void *)(a1 + 144));
      uint64_t v66 = kmlUtilGeneratePasscode(v63, v64, v65);
      os_signpost_id_t v67 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v66;
    }
    NSErrorUserInfoKey v181 = v36;
    uint64_t v182 = (uint64_t)v16;
    id v68 = *(id *)(a1 + 192);
    id v69 = [v68 UUIDString];
    id v70 = [v69 UTF8String];
    id v71 = [*(id *)(a1 + 64) length];

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1170, (uint64_t)v70, @"Length of VehicleEnteredPasscode : %d", v72, v73, v74, (uint64_t)v71);
    if ([*(id *)(a1 + 104) count])
    {
      uint64_t v75 = 0;
      int v76 = 0;
      unsigned __int8 v185 = 0;
      unsigned __int8 v183 = 0;
      while (2)
      {
        uint64_t v77 = objc_alloc_init(KmlSharingConfig);
        sub_1000162FC((uint64_t)v77, *(void **)(a1 + 192));
        sub_100017360((uint64_t)v77, *(void **)(a1 + 208));
        sub_100017370((uint64_t)v77, *(void **)(a1 + 216));
        uint64_t v78 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        sub_10033995C((uint64_t)v77, (uint64_t)[v78 profile]);

        uint64_t v79 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        sub_100339968((uint64_t)v77, (uint64_t)[v79 keyRole]);

        os_signpost_id_t v80 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        uint64_t v81 = [v80 displayName];
        id v82 = kmlUtilSanitizeFriendlyName(v81);
        sub_10031453C((uint64_t)v77, v82);

        uint64_t v83 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        id v84 = [v83 metaData];
        sub_10031454C((uint64_t)v77, v84);

        sub_10030ACDC((uint64_t)v77, *(void **)(a1 + 40));
        if (*(unsigned char *)(a1 + 168))
        {
          sub_100339974((uint64_t)v77, *(void *)(a1 + 96));
        }
        else
        {
          id v85 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
          sub_100339974((uint64_t)v77, (uint64_t)[v85 targetDeviceType]);
        }
        sub_100339980((uint64_t)v77, 2);
        uint64_t v86 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        sub_100339A08((uint64_t)v77, (char)[v86 enableVehicleEnteredPasscode]);

        sub_100339A24((uint64_t)v77, *(void **)(a1 + 56));
        sub_100339A14((uint64_t)v77, *(void **)(a1 + 64));
        uint64_t v87 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        uint64_t v88 = [v87 deviceEnteredPasscode];
        sub_100339A34((uint64_t)v77, v88);

        uint64_t v89 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        id v90 = [v89 maxRetriesForDeviceEnteredPasscode];
        sub_100339A44((uint64_t)v77, (uint64_t)v90);
        sub_100339A50((uint64_t)v77, (uint64_t)v90);

        os_signpost_id_t v91 = [*(id *)(a1 + 104) objectAtIndexedSubscript:v75];
        sub_100339A5C((uint64_t)v77, (char)[v91 mockRefreshInstanceCA]);

        uint64_t v92 = 1;
        unsigned __int16 v93 = v186;
        while (1)
        {
          int v94 = 1 << v92;
          if (((1 << v92) & v48) != 0 && ((1 << v92) & v187) != 0) {
            break;
          }
          uint64_t v92 = (v92 + 1);
          v93 += v186;
          if (v92 == 8) {
            goto LABEL_41;
          }
        }
        int v96 = sub_100316F24(*(void *)(a1 + 144));
        id v97 = [*(id *)(a1 + 192) UUIDString];
        id v98 = [v97 UTF8String];
        if (v96)
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1211, (uint64_t)v98, @"Get random slotId for online slotId case", v99, v100, v101, v179);

          id v102 = kmlUtilRandomDataWithSize(v184);
        }
        else
        {
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1214, (uint64_t)v98, @"Get slotId from private mailbox", v99, v100, v101, v179);

          char v103 = sub_100313B04(v182);
          char v104 = sub_100313AC8(v182);
          int v105 = (v103 - v104 + v184 * v92);
          id v102 = [v181 subdataWithRange:(v103 - v104 + v184 * v92), v184];
          unsigned __int8 v183 = v105;
        }
        if (sub_100316F5C(*(void *)(a1 + 144)))
        {
          char v106 = sub_100316F24(*(void *)(a1 + 144));
          if (v106) {
            unsigned __int16 v93 = 0;
          }
          int v107 = v186;
          if (v106) {
            int v107 = 0;
          }
        }
        else
        {
          unsigned __int16 v93 = 0;
          int v107 = 0;
        }
        v185 |= v94;
        v187 &= ~(_BYTE)v94;
        int v186 = v107;
        sub_10033998C((uint64_t)v77, v107);
        sub_100339998((uint64_t)v77, v93);
        sub_1003399B0((uint64_t)v77, v184);
        sub_1003399A4((uint64_t)v77, v92);
        sub_10031457C((uint64_t)v77, v102);
        sub_1003399BC((uint64_t)v77, v183);
        id v108 = [*(id *)(a1 + 192) UUIDString];
        id v109 = [v108 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1235, (uint64_t)v109, @"ImmoToken index        : %d", v110, v111, v112, v92);

        id v113 = [*(id *)(a1 + 192) UUIDString];
        id v114 = [v113 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1236, (uint64_t)v114, @"ImmoToken offset       : %d", v115, v116, v117, v93);

        id v118 = [*(id *)(a1 + 192) UUIDString];
        id v119 = [v118 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1237, (uint64_t)v119, @"SlotIdentifier offset  : %d", v120, v121, v122, v183);

        id v123 = [*(id *)(a1 + 192) UUIDString];
        id v124 = [v123 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1238, (uint64_t)v124, @"SlotIdentifier         : %@", v125, v126, v127, (uint64_t)v102);

        id v128 = [*(id *)(a1 + 192) UUIDString];
        id v129 = [v128 UTF8String];
        uint64_t v130 = sub_10030ACC4((uint64_t)v77);
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1239, (uint64_t)v129, @"Display name of key: %@", v131, v132, v133, (uint64_t)v130);

        uint64_t v134 = sub_1002F3A58((uint64_t)[KmlOwnerSharingSession alloc], v77, *(void **)(a1 + 16), (void *)a1, 0, *(void **)(a1 + 152), *(void **)(a1 + 48));
        if (v134)
        {
          uint64_t v135 = (void *)v134;
          [*(id *)(a1 + 224) addObject:v134];

LABEL_41:
          uint64_t v136 = [*(id *)(a1 + 16) subjectIdentifier];
          uint64_t v137 = sub_100340298((uint64_t)KmlEndpointManager, v136);

          unsigned int v138 = [v137 isEqualToString:@"OWNR"];
          if (!sub_100339180((BOOL)v77)
            || !sub_100318504(*(void *)(a1 + 144))
            || !sub_100318518(*(void *)(a1 + 144))
            || (!*(void *)(a1 + 64) ? (unsigned int v139 = v138) : (unsigned int v139 = 0), v139 != 1))
          {

            uint64_t v75 = ++v76;
            if ((unint64_t)[*(id *)(a1 + 104) count] > v76) {
              continue;
            }
LABEL_54:
            id v156 = [*(id *)(a1 + 192) UUIDString];
            id v157 = [v156 UTF8String];
            uint8x8_t v158 = (uint8x8_t)vcnt_s8((int8x8_t)v185);
            v158.i16[0] = vaddlv_u8(v158);
            id v159 = (id)v158.u32[0];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1272, (uint64_t)v157, @"%u tokens reserved", v160, v161, v162, v158.u32[0]);

            id v163 = [*(id *)(a1 + 104) count];
            uint64_t v164 = *(void *)(a1 + 72);
            id v16 = (char *)v182;
            if (v163 == v159)
            {
              id v9 = v180;
              id v37 = 0;
              id v36 = v181;
              if (!v164)
              {
                if ((sub_100316F24(*(void *)(a1 + 144)) & 1) == 0)
                {
                  *(unsigned char *)(a1 + 128) = v187;
                  sub_100353824(a1, 0, v185);
                }
                uint64_t v165 = 6;
                goto LABEL_62;
              }
            }
            else
            {
              id v9 = v180;
              id v37 = 0;
              id v36 = v181;
              if (!v164)
              {
                id v166 = *(id *)(a1 + 192);
                id v167 = [v166 UUIDString];
                id v168 = [v167 UTF8String];
                id v169 = [*(id *)(a1 + 104) count];

                KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1276, (uint64_t)v168, @"Failed to reserve %d tokens", v170, v171, v172, (uint64_t)v169);
                long long v173 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
                NSErrorUserInfoKey v188 = NSLocalizedDescriptionKey;
                id v37 = 0;
                long long v174 = +[NSString stringWithUTF8String:KmlErrorString(111)];
                NSErrorUserInfoKey v189 = v174;
                long long v175 = +[NSDictionary dictionaryWithObjects:&v189 forKeys:&v188 count:1];
                uint64_t v176 = +[NSError errorWithDomain:v173 code:111 userInfo:v175];
                uint64_t v177 = *(void **)(a1 + 72);
                *(void *)(a1 + 72) = v176;
              }
            }
            uint64_t v165 = 7;
LABEL_62:
            sub_10034E9D4(a1, v165);
            v178 = *(void **)(a1 + 104);
            *(void *)(a1 + 104) = 0;

            goto LABEL_63;
          }
          id v149 = [*(id *)(a1 + 192) UUIDString];
          id v150 = [v149 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1266, (uint64_t)v150, @"VEP is supported by vehicle, required for this share. But we failed to calculate it", v151, v152, v153, v179);

          unsigned int v145 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v190 = NSLocalizedDescriptionKey;
          uint64_t v146 = +[NSString stringWithUTF8String:KmlErrorString(116)];
          uint64_t v191 = v146;
          uint64_t v148 = +[NSDictionary dictionaryWithObjects:&v191 forKeys:&v190 count:1];
          uint64_t v154 = +[NSError errorWithDomain:v145 code:116 userInfo:v148];
          long long v155 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = v154;
        }
        else
        {
          id v140 = [*(id *)(a1 + 192) UUIDString];
          id v141 = [v140 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1253, (uint64_t)v141, @"Failed to create sharing session due to invalid config", v142, v143, v144, v179);

          uint64_t v137 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v192 = NSLocalizedDescriptionKey;
          unsigned int v145 = +[NSString stringWithUTF8String:KmlErrorString(104)];
          v193 = v145;
          uint64_t v146 = +[NSDictionary dictionaryWithObjects:&v193 forKeys:&v192 count:1];
          uint64_t v147 = +[NSError errorWithDomain:v137 code:104 userInfo:v146];
          uint64_t v148 = *(void **)(a1 + 72);
          *(void *)(a1 + 72) = v147;
        }
        break;
      }

      goto LABEL_54;
    }
    unsigned __int8 v185 = 0;
    goto LABEL_54;
  }
}

void sub_100351C44(uint64_t a1)
{
  if (a1)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v2 = *(id *)(a1 + 224);
    id v3 = [v2 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v29;
      while (2)
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v29 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = *(dispatch_queue_t **)(*((void *)&v28 + 1) + 8 * i);
          uint64_t v8 = sub_1002F3FF0(v7);
          if (v8)
          {
            uint64_t v19 = (void *)v8;
            id v20 = *(id *)(a1 + 192);
            id v21 = [v20 UUIDString];
            id v22 = [v21 UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1299, (uint64_t)v22, @"Failed to create invitation : %@", v23, v24, v25, (uint64_t)v19);

            uint64_t v26 = *(void **)(a1 + 72);
            *(void *)(a1 + 72) = v19;
            id v27 = v19;

            sub_10034E9D4(a1, 7);
            return;
          }
          if (*(void *)(a1 + 208))
          {
            id v9 = objc_alloc((Class)DAKeySharingInvitationData);
            uint64_t v10 = *(void *)(a1 + 192);
            id v11 = sub_1002F3EF4((uint64_t)v7);
            id v12 = [v9 initWithSessionUUID:v10 invitationIdentifier:v11 friendKeyIdentifier:0 sharingTarget:sub_1002F492C(v7) state:1 vehicleEnteredPasscode:*(void *)(a1 + 64)];

            [*(id *)(a1 + 112) addObject:v12];
          }
          else
          {
            id v13 = objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData);
            uint64_t v14 = sub_1002F3EF4((uint64_t)v7);
            uint64_t v15 = sub_1002F8714((uint64_t)v7);
            id v12 = [v13 initWithSharingIdentifier:v14 friendKeyIdentifier:0 sharingMessageType:1 message:v15];

            id v16 = [objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData) initWithSharingSessionUUID:*(void *)(a1 + 192) bindingAttestation:0 targetDeviceType:sub_1002F492C(v7) initiatorIdsPseudonym:0];
            id v17 = [objc_alloc((Class)DACarKeyPrivateCrossPlatformSharingData) initWithVehicleEnteredPasscode:*(void *)(a1 + 64) pairedEntityIdentifier:0];
            id v18 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:v12 additionalData:v16 privateData:v17];
            [*(id *)(a1 + 120) addObject:v18];
          }
        }
        id v4 = [v2 countByEnumeratingWithState:&v28 objects:v32 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }

    sub_10034E9D4(a1, 8);
  }
}

void sub_100351F2C(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 208))
    {
      id v2 = sub_10031DB48();
      BOOL v3 = sub_10031E1CC((uint64_t)v2, *(void **)(a1 + 208));

      if (v3) {
        uint64_t v4 = 1;
      }
      else {
        uint64_t v4 = 2;
      }
    }
    else
    {
      uint64_t v4 = 2;
    }
    uint64_t v43 = [*(id *)(a1 + 16) readerInfo];
    id v5 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v43];
    BOOL v6 = sub_1003184DC(*(void *)(a1 + 144));
    BOOL v7 = sub_1003184F0(*(void *)(a1 + 144));
    uint64_t v12 = 2;
    if (!v7) {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12 | v6;
    uint64_t v42 = v5;
    if (v5)
    {
      uint64_t v14 = [v5 manufacturer];
      CFStringRef v15 = (const __CFString *)[v14 copy];

      id v16 = [v5 brand];
      id v17 = (__CFString *)[v16 copy];

      id v18 = [v5 regionString];
      CFStringRef v19 = (const __CFString *)[v18 copy];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerSharingManager postStatistics]", 1525, @"No routing info available", v8, v9, v10, v11, v35);
      CFStringRef v15 = @"Unknown";
      id v17 = @"Unknown";
      CFStringRef v19 = @"Unknown";
    }
    id v37 = (__CFString *)v19;
    id v38 = (__CFString *)v15;
    int v20 = [*(id *)(a1 + 152) agreedKmlVehicleVersion] == 768;
    id v21 = [*(id *)(a1 + 16) configuration];
    unsigned int v39 = kmlUtilKeyClassOriginBitmap([v21 opt2]);

    uint64_t v22 = sub_100301934(*(void *)(a1 + 152));
    v44[0] = @"destination";
    uint64_t v41 = +[NSNumber numberWithUnsignedInt:v4];
    v45[0] = v41;
    v45[1] = &off_10042E560;
    v44[1] = @"type";
    v44[2] = @"targetDeviceType";
    v45[2] = &off_10042E578;
    v45[3] = &off_10042E590;
    v44[3] = @"step";
    v44[4] = @"dataCenterCode";
    v45[4] = v19;
    v45[5] = v15;
    v44[5] = @"manufacturer";
    v44[6] = @"brand";
    v45[6] = v17;
    v44[7] = @"transportSupported";
    id v40 = +[NSNumber numberWithUnsignedInteger:v13];
    v45[7] = v40;
    v44[8] = @"totalSharedKeysForOwnerKey";
    uint64_t v23 = +[NSNumber numberWithInteger:*(void *)(a1 + 184)];
    v45[8] = v23;
    v44[9] = @"status";
    uint64_t v24 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 72) code]);
    v45[9] = v24;
    v45[10] = &off_10042E5A8;
    v44[10] = @"activationOption";
    v44[11] = @"sharingTransport";
    if (*(void *)(a1 + 216)) {
      uint64_t v25 = 2;
    }
    else {
      uint64_t v25 = 1;
    }
    uint64_t v26 = +[NSNumber numberWithUnsignedInt:v25];
    v45[11] = v26;
    v45[12] = &off_10042E5C0;
    v44[12] = @"pinAttempts";
    v44[13] = @"appleToApple";
    uint64_t v27 = +[NSNumber numberWithInt:*(void *)(a1 + 208) != 0];
    long long v28 = (void *)v27;
    CFStringRef v29 = &stru_100421848;
    id v36 = (void *)v22;
    if (v22) {
      CFStringRef v29 = (const __CFString *)v22;
    }
    v45[13] = v27;
    v45[14] = v29;
    v44[14] = @"senderSupportedFrameworkVersions";
    v44[15] = @"receiverSupportedFrameworkVersions";
    long long v30 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%04X", [*(id *)(a1 + 152) agreedKmlSharingVersion]);
    v45[15] = v30;
    v45[16] = &off_10042E5C0;
    v44[16] = @"attestationChainLength";
    v44[17] = @"certificateChainLength";
    v45[17] = &off_10042E5C0;
    v45[18] = &off_10042E5C0;
    v44[18] = @"accountRole";
    v44[19] = @"isIntraAccountShare";
    v45[19] = &off_10042E5C0;
    v45[20] = &off_10042E5C0;
    v44[20] = @"wasUserAuthRequired";
    v44[21] = @"mailboxVersion";
    long long v31 = +[NSNumber numberWithUnsignedChar:(v20 << 7)];
    v45[21] = v31;
    v44[22] = @"frameworkVersion";
    uint64_t v32 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 152) agreedKmlSharingVersion]);
    v45[22] = v32;
    v45[23] = &off_10042E5C0;
    v44[23] = @"accessProfile";
    v44[24] = @"keyClassOriginBitmap";
    uint64_t v33 = +[NSNumber numberWithUnsignedChar:v39];
    v45[24] = v33;
    uint64_t v34 = +[NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:25];

    sub_1002F928C((uint64_t)KmlAnalyticsLogger, v34);
  }
}

id *sub_10035242C(id *result)
{
  if (result)
  {
    uint64_t v1 = result;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    id v2 = result[28];
    id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v8;
      do
      {
        BOOL v6 = 0;
        do
        {
          if (*(void *)v8 != v5) {
            objc_enumerationMutation(v2);
          }
          sub_1002F49F4(*(void *)(*((void *)&v7 + 1) + 8 * (void)v6));
          BOOL v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      }
      while (v4);
    }

    return (id *)[v1[28] removeAllObjects];
  }
  return result;
}

void sub_100352528(uint64_t a1)
{
  if (a1 && *(void *)(a1 + 40))
  {
    SESEndPointDeleteAuthorizationID();
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    if (v14)
    {
      id v2 = [*(id *)(a1 + 192) UUIDString];
      id v3 = [v2 UTF8String];
      id v4 = [v14 description];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1440, (uint64_t)v3, @"Failed in delete Auth. error: %@", v5, v6, v7, (uint64_t)v4);
    }
    else
    {
      long long v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;

      id v2 = [*(id *)(a1 + 192) UUIDString];
      id v9 = [v2 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1443, (uint64_t)v9, @"Auth deleted", v10, v11, v12, v13);
    }
  }
}

void sub_10035263C(uint64_t a1)
{
  if (a1)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    id v2 = *(id *)(a1 + 224);
    id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v9;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(void *)v9 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = *(void *)(*((void *)&v8 + 1) + 8 * i);
          sub_1002F471C(v7, *(void **)(a1 + 136));
          sub_1002F4418(v7);
        }
        id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      }
      while (v4);
    }
  }
}

void sub_100352748(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 192) UUIDString];
    id v3 = [v2 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1357, (uint64_t)v3, @"Cancelling all sessions", v4, v5, v6, v16);

    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id obj = *(id *)(a1 + 224);
    id v7 = [obj countByEnumeratingWithState:&v18 objects:v24 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v19;
      do
      {
        long long v10 = 0;
        do
        {
          if (*(void *)v19 != v9) {
            objc_enumerationMutation(obj);
          }
          uint64_t v11 = *(void *)(*((void *)&v18 + 1) + 8 * (void)v10);
          uint64_t v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
          uint64_t v13 = +[NSString stringWithUTF8String:KmlErrorString(123)];
          uint64_t v23 = v13;
          id v14 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
          CFStringRef v15 = +[NSError errorWithDomain:v12 code:123 userInfo:v14];
          sub_1002F4428(v11, v15);

          long long v10 = (char *)v10 + 1;
        }
        while (v8 != v10);
        id v8 = [obj countByEnumeratingWithState:&v18 objects:v24 count:16];
      }
      while (v8);
    }
  }
}

void sub_100352938(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 192);
    id v3 = [v2 UUIDString];
    id v4 = [v3 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1483, (uint64_t)v4, @"Sending invite request error response for uuid: %@", v5, v6, v7, *(void *)(a1 + 192));

    id v10 = +[NSMutableData dataWithLength:32];
    id v8 = sub_10031DB48();
    uint64_t v9 = [*(id *)(a1 + 192) UUIDString];
    sub_10031E4A0((uint64_t)v8, v10, 0, 0, v9, 0, *(void **)(a1 + 192), *(void **)(a1 + 208), *(void *)(a1 + 96), 9);
  }
}

void sub_100352A48(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 224);
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v23;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v23 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v22 + 1) + 8 * i);
        id v8 = sub_1002F3EF4(v7);
        unsigned int v9 = [v8 isEqualToString:*(void *)(a1 + 40)];

        if (v9)
        {
          id v10 = *(void **)(a1 + 32);
          if (v10) {
            id v10 = (void *)v10[24];
          }
          uint64_t v11 = v10;
          id v12 = [v11 UUIDString];
          id v13 = [v12 UTF8String];
          id v14 = sub_1002F3EF4(v7);

          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 899, (uint64_t)v13, @"Cancelling session with ID: %@", v15, v16, v17, (uint64_t)v14);
          long long v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
          long long v19 = +[NSString stringWithUTF8String:KmlErrorString(123)];
          uint64_t v27 = v19;
          long long v20 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
          long long v21 = +[NSError errorWithDomain:v18 code:123 userInfo:v20];
          sub_1002F4428(v7, v21);

          goto LABEL_13;
        }
      }
      id v4 = [v2 countByEnumeratingWithState:&v22 objects:v28 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_13:
}

void sub_100352C8C(uint64_t a1)
{
}

id sub_100352C94(uint64_t a1)
{
  if (a1)
  {
    id v3 = (id *)(a1 + 16);
    id v2 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;

    uint64_t v62 = 0;
    id v4 = SESEndPointList();
    id v5 = 0;
    if (v5)
    {
      id v6 = v5;
      id v7 = *(id *)(a1 + 192);
      id v8 = [v7 UUIDString];
      id v9 = [v8 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 943, (uint64_t)v9, @"Error in getting endpoint list: %@", v10, v11, v12, (uint64_t)v6);

      id v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      id v14 = [v6 userInfo];
      id v15 = v13;
    }
    else
    {
      if ([v4 count])
      {
        long long v60 = 0u;
        long long v61 = 0u;
        long long v58 = 0u;
        long long v59 = 0u;
        id obj = v4;
        id v18 = [obj countByEnumeratingWithState:&v58 objects:v67 count:16];
        if (v18)
        {
          id v19 = v18;
          id v56 = v4;
          uint64_t v20 = *(void *)v59;
          while (2)
          {
            for (i = 0; i != v19; i = (char *)i + 1)
            {
              if (*(void *)v59 != v20) {
                objc_enumerationMutation(obj);
              }
              long long v22 = *(void **)(*((void *)&v58 + 1) + 8 * i);
              long long v23 = [v22 publicKeyIdentifier];
              id v24 = [*(id *)(a1 + 192) UUIDString];
              id v25 = [v24 UTF8String];
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 954, (uint64_t)v25, @"checking key with id: %@", v26, v27, v28, (uint64_t)v23);

              if ([v23 isEqual:*(void *)(a1 + 24)])
              {
                uint64_t v16 = [v22 revocationAttestation];

                if (v16)
                {
                  id v29 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
                  NSErrorUserInfoKey v65 = NSLocalizedDescriptionKey;
                  id v30 = +[NSString stringWithUTF8String:KmlErrorString(211)];
                  id v66 = v30;
                  long long v31 = +[NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];
                  uint64_t v16 = +[NSError errorWithDomain:v29 code:211 userInfo:v31];
                }
                else
                {
                  objc_storeStrong(v3, v22);
                  id v30 = *(id *)(a1 + 192);
                  id v29 = [v30 UUIDString];
                  id v37 = [v29 UTF8String];
                  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 961, (uint64_t)v37, @"key with id %@ exists", v38, v39, v40, *(void *)(a1 + 200));
                }

                goto LABEL_25;
              }
            }
            id v19 = [obj countByEnumeratingWithState:&v58 objects:v67 count:16];
            if (v19) {
              continue;
            }
            break;
          }
          uint64_t v16 = 0;
LABEL_25:
          id v4 = v56;
        }
        else
        {
          uint64_t v16 = 0;
        }

        if (*v3)
        {
          uint64_t v41 = sub_1002FFCE4((uint64_t)[KmlVersions alloc], *(void **)(a1 + 16));
          uint64_t v42 = *(void **)(a1 + 152);
          *(void *)(a1 + 152) = v41;

          id v13 = *(id *)(a1 + 192);
          id v6 = [v13 UUIDString];
          id v43 = [v6 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 971, (uint64_t)v43, @"Version Information : %@", v44, v45, v46, *(void *)(a1 + 152));
        }
        else
        {
          id v47 = *(id *)(a1 + 192);
          id v48 = [v47 UUIDString];
          id v49 = [v48 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 967, (uint64_t)v49, @"Owner key with id %@, does not exist", v50, v51, v52, *(void *)(a1 + 200));

          id v6 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v63 = NSLocalizedDescriptionKey;
          id v13 = +[NSString stringWithUTF8String:KmlErrorString(210)];
          id v64 = v13;
          uint64_t v53 = +[NSDictionary dictionaryWithObjects:&v64 forKeys:&v63 count:1];
          uint64_t v54 = +[NSError errorWithDomain:v6 code:210 userInfo:v53];

          uint64_t v16 = (void *)v54;
        }
        goto LABEL_5;
      }
      id v32 = [*(id *)(a1 + 192) UUIDString];
      id v33 = [v32 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 948, (uint64_t)v33, @"No keys in the SE database", v34, v35, v36, v55);

      id v6 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v68 = NSLocalizedDescriptionKey;
      id v13 = +[NSString stringWithUTF8String:KmlErrorString(210)];
      id v69 = v13;
      id v14 = +[NSDictionary dictionaryWithObjects:&v69 forKeys:&v68 count:1];
      id v15 = v6;
    }
    uint64_t v16 = +[NSError errorWithDomain:v15 code:210 userInfo:v14];

LABEL_5:
    goto LABEL_6;
  }
  uint64_t v16 = 0;
LABEL_6:

  return v16;
}

id sub_10035325C(uint64_t a1)
{
  if (!a1) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a1 + 168))
  {
    id v2 = [*(id *)(a1 + 192) UUIDString];
    id v3 = [v2 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1399, (uint64_t)v3, @"For silent sharing retrieve AuthorizationId from saved sharing config.", v4, v5, v6, v38);

LABEL_4:
    id v7 = 0;
    goto LABEL_17;
  }
  *(unsigned char *)(a1 + 88) = 0;
  id v8 = sub_10033F89C([KmlBindingAttestation alloc], *(void **)(a1 + 48));
  id v9 = [*(id *)(a1 + 16) anonymizedDsid];
  if ([v9 length])
  {
    uint64_t v10 = sub_10030ACC4((uint64_t)v8);
    id v11 = [v10 length];

    if (v11)
    {
      uint64_t v12 = sub_10030ACC4((uint64_t)v8);
      unsigned int v13 = [v9 isEqualToData:v12];

      if (v13)
      {
        id v14 = [*(id *)(a1 + 192) UUIDString];
        id v15 = [v14 UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1408, (uint64_t)v15, @"Saved Anonymized DSID matches Anonymized DSID in ourBindingAttestation. Authless share possible", v16, v17, v18, v38);

        *(unsigned char *)(a1 + 88) = 1;
      }
    }
  }
  id v19 = SESEndPointCreateAuthorizationID();
  id v7 = 0;
  if (!v7)
  {
    if (v19)
    {
      uint64_t v20 = [v19 authorizationID];
      long long v21 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v20;

      long long v22 = sub_10032872C();
      long long v23 = [v19 authorizationInterval];
      [v23 doubleValue];
      sub_100328C4C((uint64_t)v22, v24);
      id v7 = 0;
    }
    else
    {
      long long v22 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      v40[0] = NSLocalizedDescriptionKey;
      long long v23 = +[NSString stringWithUTF8String:KmlErrorString(105)];
      v40[1] = NSLocalizedFailureReasonErrorKey;
      v41[0] = v23;
      v41[1] = @"Failed to get authorization from externalized auth";
      id v25 = +[NSDictionary dictionaryWithObjects:v41 forKeys:v40 count:2];
      id v7 = +[NSError errorWithDomain:v22 code:105 userInfo:v25];
    }
  }
  id v26 = *(id *)(a1 + 192);
  id v27 = [v26 UUIDString];
  id v28 = [v27 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1424, (uint64_t)v28, @"Status of getting authorization - %@", v29, v30, v31, (uint64_t)v7);

  if (*(unsigned char *)(a1 + 88))
  {
    id v32 = [*(id *)(a1 + 192) UUIDString];
    id v33 = [v32 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1427, (uint64_t)v33, @"authless share is possible, so ignore error (if any) in saving auth", v34, v35, v36, v39);

    id v7 = 0;
  }

LABEL_17:

  return v7;
}

uint64_t sub_1003535C8(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  if (!*(void *)(a1 + 40))
  {
    id v11 = [*(id *)(a1 + 192) UUIDString];
    id v12 = [v11 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1451, (uint64_t)v12, @"Failed to retrieve saved authorizationId", v13, v14, v15, v27);

    return 0;
  }
  uint64_t v32 = 0;
  id v2 = SESEndPointListAuthorizations();
  id v3 = 0;
  if (v3)
  {
    id v4 = *(id *)(a1 + 192);
    id v5 = [v4 UUIDString];
    id v6 = [v5 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1458, (uint64_t)v6, @"Error in getting saved authorizations : %@", v7, v8, v9, (uint64_t)v3);
    uint64_t v10 = 0;
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v16 = v2;
    uint64_t v10 = (uint64_t)[v16 countByEnumeratingWithState:&v28 objects:v33 count:16];
    if (v10)
    {
      uint64_t v17 = *(void *)v29;
      while (2)
      {
        for (uint64_t i = 0; i != v10; ++i)
        {
          if (*(void *)v29 != v17) {
            objc_enumerationMutation(v16);
          }
          id v19 = *(void **)(a1 + 40);
          uint64_t v20 = [*(id *)(*((void *)&v28 + 1) + 8 * i) authorizationID];
          LOBYTE(v19) = [v19 isEqualToData:v20];

          if (v19)
          {
            uint64_t v10 = 1;
            goto LABEL_17;
          }
        }
        uint64_t v10 = (uint64_t)[v16 countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v10) {
          continue;
        }
        break;
      }
    }
LABEL_17:

    id v21 = *(id *)(a1 + 192);
    id v5 = [v21 UUIDString];
    id v22 = [v5 UTF8String];
    kmlUtilHexStringFromData(*(void **)(a1 + 40));
    id v4 = (id)objc_claimAutoreleasedReturnValue();

    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1470, (uint64_t)v22, @"Authorization with ID %@, found - %d", v23, v24, v25, (uint64_t)v4);
  }

  return v10;
}

void sub_100353824(uint64_t a1, char a2, char a3)
{
  if (a1)
  {
    id v6 = sub_10032872C();
    sub_100328F28((uint64_t)v6, a2, a3, *(void **)(a1 + 24));
    id v13 = (id)objc_claimAutoreleasedReturnValue();

    if (v13)
    {
      id v7 = [*(id *)(a1 + 192) UUIDString];
      id v8 = [v7 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1392, (uint64_t)v8, @"Could not update endpoint", v9, v10, v11, v12);
    }
  }
}

void sub_1003538EC(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 192) UUIDString];
    id v3 = [v2 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1375, (uint64_t)v3, @"Resetting state", v4, v5, v6, v7);

    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 168) = 1;
    sub_10034E9D4(a1, 1);
  }
}

void sub_100353A70(uint64_t a1)
{
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 224);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v18;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v18 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v17 + 1) + 8 * v6);
      id v8 = sub_1002F3EF4((uint64_t)v7);
      unsigned __int8 v9 = [v8 isEqualToString:*(void *)(a1 + 40)];

      if (v9) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v17 objects:v21 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v10 = v7;

    if (!v10) {
      goto LABEL_12;
    }
    sub_1002F471C((uint64_t)v10, *(void **)(*(void *)(a1 + 32) + 136));
    sub_10033A3D8(*(void *)(*(void *)(a1 + 32) + 136));
  }
  else
  {
LABEL_9:

LABEL_12:
    uint64_t v11 = *(void **)(a1 + 32);
    if (v11) {
      uint64_t v11 = (void *)v11[24];
    }
    uint64_t v12 = v11;
    id v10 = [v12 UUIDString];
    id v13 = [v10 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1585, (uint64_t)v13, @"We don't have an active sharing session with invitation id %@", v14, v15, v16, *(void *)(a1 + 40));
  }
}

void sub_100353D14(uint64_t a1)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 224);
  id v3 = [v2 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v26;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v26 != v5) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void **)(*((void *)&v25 + 1) + 8 * v6);
      id v8 = sub_1002F3EF4((uint64_t)v7);
      unsigned __int8 v9 = [v8 isEqualToString:*(void *)(a1 + 40)];

      if (v9) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = [v2 countByEnumeratingWithState:&v25 objects:v29 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    id v10 = v7;

    if (!v10) {
      goto LABEL_14;
    }
    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      uint64_t v12 = *(void **)(v11 + 192);
    }
    else {
      uint64_t v12 = 0;
    }
    id v13 = [v12 UUIDString];
    id v14 = [v13 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_DEBUG, (uint64_t)"KmlOwnerSharingManager.m", 1615, (uint64_t)v14, @"Passcode retry requested from friend", v15, v16, v17, v24);

    sub_1002F471C((uint64_t)v10, *(void **)(*(void *)(a1 + 32) + 136));
    sub_10033A3D8(*(void *)(*(void *)(a1 + 32) + 136));
  }
  else
  {
LABEL_9:

LABEL_14:
    long long v18 = *(void **)(a1 + 32);
    if (v18) {
      long long v18 = (void *)v18[24];
    }
    long long v19 = v18;
    id v10 = [v19 UUIDString];
    id v20 = [v10 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1611, (uint64_t)v20, @"We don't have an active sharing session with invitation id %@", v21, v22, v23, *(void *)(a1 + 40));
  }
}

void sub_100354060(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 176));
  [WeakRetained handleOwnerKeySharingCancelStatus:*(void *)(a1 + 40)];
}

void sub_100354190(uint64_t a1)
{
}

void sub_1003541A8(uint64_t a1, void *a2, int a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  if (!a1) {
    goto LABEL_22;
  }
  if (!v9)
  {
    id v32 = [*(id *)(a1 + 192) UUIDString];
    id v37 = [v32 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1659, (uint64_t)v37, @"Invitation ID is nil", v38, v39, v40, v54);
LABEL_21:

    goto LABEL_22;
  }
  int v56 = a4;
  int v57 = a3;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v11 = *(id *)(a1 + 224);
  id v12 = [v11 countByEnumeratingWithState:&v58 objects:v62 count:16];
  if (!v12)
  {
LABEL_11:

LABEL_19:
    id v32 = [*(id *)(a1 + 192) UUIDString];
    id v33 = [v32 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1672, (uint64_t)v33, @"We don't have an active sharing session with invitation id %@", v34, v35, v36, (uint64_t)v9);
    goto LABEL_21;
  }
  id v13 = v12;
  uint64_t v14 = *(void *)v59;
LABEL_5:
  uint64_t v15 = 0;
  while (1)
  {
    if (*(void *)v59 != v14) {
      objc_enumerationMutation(v11);
    }
    uint64_t v16 = *(void **)(*((void *)&v58 + 1) + 8 * v15);
    uint64_t v17 = sub_1002F3EF4((uint64_t)v16);
    unsigned __int8 v18 = [v17 isEqualToString:v9];

    if (v18) {
      break;
    }
    if (v13 == (id)++v15)
    {
      id v13 = [v11 countByEnumeratingWithState:&v58 objects:v62 count:16];
      if (v13) {
        goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
  id v19 = v16;

  if (!v19) {
    goto LABEL_19;
  }
  if ((sub_100316F24(*(void *)(a1 + 144)) & 1) == 0)
  {
    unsigned int v20 = sub_1002F4990(v19);
    id v21 = [*(id *)(a1 + 192) UUIDString];
    id v22 = [v21 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1682, (uint64_t)v22, @"Free up slot identifier index %d", v23, v24, v25, v20);

    *(unsigned char *)(a1 + 128) |= 1 << v20;
    sub_100353824(a1, 1 << v20, 0);
  }
  sub_1002F471C((uint64_t)v19, *(void **)(a1 + 136));
  sub_10033A3D8(*(void *)(a1 + 136));
  sub_1002F49F4((uint64_t)v19);
  [*(id *)(a1 + 224) removeObject:v19];

  id v26 = [*(id *)(a1 + 192) UUIDString];
  id v27 = [v26 UTF8String];
  if (v10)
  {
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingManager.m", 1695, (uint64_t)v27, @"Sharing invitation %@, failed with error %@", v28, v29, v30, (uint64_t)v9);

    if ([*(id *)(a1 + 224) count]) {
      goto LABEL_22;
    }
    uint64_t v31 = *(void *)(a1 + 8);
    if (v31 == 10)
    {
      sub_1003538EC(a1);
      goto LABEL_22;
    }
    if (v31 > 8)
    {
      if (v31 != 11) {
        goto LABEL_33;
      }
    }
    else if (*(unsigned char *)(a1 + 168))
    {
      goto LABEL_33;
    }
LABEL_32:
    sub_100352528(a1);
LABEL_33:
    uint64_t v47 = a1;
    uint64_t v48 = 14;
    goto LABEL_34;
  }
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1710, (uint64_t)v27, @"Shared key successfully", v28, v29, v30, v54);

  *(void *)(a1 + 184) = sub_10033ACF0(*(void *)(a1 + 136));
  if (!v56)
  {
    int v41 = v57;
    if ([*(id *)(a1 + 224) count])
    {
      id v42 = [*(id *)(a1 + 192) UUIDString];
      id v43 = [v42 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1726, (uint64_t)v43, @"BindingAttestation not used. No more sharing possible with this auth.", v44, v45, v46, v55);

      uint64_t v47 = a1;
      uint64_t v48 = 11;
LABEL_34:
      sub_10034E9D4(v47, v48);
      goto LABEL_22;
    }
LABEL_30:
    id v49 = [*(id *)(a1 + 192) UUIDString];
    id v50 = [v49 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1719, (uint64_t)v50, @"All sessions completed", v51, v52, v53, v55);

    if (v56 && !v41) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  int v41 = v57;
  if (!*(unsigned char *)(a1 + 168)) {
    sub_10034E9D4(a1, 9);
  }
  if (![*(id *)(a1 + 224) count]) {
    goto LABEL_30;
  }
LABEL_22:
}

void sub_100354698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 56) != 8)
  {
    if (v2) {
      id v4 = *(void **)(v2 + 192);
    }
    else {
      id v4 = 0;
    }
    id v5 = [v4 UUIDString];
    id v6 = [v5 UTF8String];
    id v10 = @"We only handle re-invite request. Anything else we drop to floor";
    uint64_t v11 = 1746;
    goto LABEL_18;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (v3 != 9)
  {
    if (!v3)
    {
      objc_storeStrong((id *)(v2 + 208), *(id *)(a1 + 40));
      *(void *)(*(void *)(a1 + 32) + 96) = *(void *)(a1 + 64);
      sub_10034E9D4(*(void *)(a1 + 32), 1);
LABEL_19:
      sub_10031DB48();
      id v36 = (id)objc_claimAutoreleasedReturnValue();
      sub_10031E02C((uint64_t)v36, *(void **)(a1 + 40));

      return;
    }
    id v5 = [*(id *)(v2 + 192) UUIDString];
    id v6 = [v5 UTF8String];
    id v10 = @"We have never successfully shared with this friend. Can't re-share. Dropping the request";
    uint64_t v11 = 1764;
LABEL_18:
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", v11, (uint64_t)v6, v10, v7, v8, v9, v34);

    goto LABEL_19;
  }
  unsigned __int8 v12 = [*(id *)(v2 + 192) isEqual:*(void *)(a1 + 48)];
  uint64_t v13 = *(void *)(a1 + 32);
  if ((v12 & 1) == 0)
  {
    if (v13) {
      uint64_t v13 = *(void *)(v13 + 192);
    }
    id v28 = (id)v13;
    id v29 = [v28 UUIDString];
    id v30 = [v29 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1770, (uint64_t)v30, @"We expect uuid to be : %@, instead got request with uuid : %@", v31, v32, v33, *(void *)(*(void *)(a1 + 32) + 192));

    goto LABEL_19;
  }
  if (*(void *)(v13 + 216)
    && (objc_storeStrong((id *)(v13 + 208), *(id *)(a1 + 40)), (uint64_t v13 = *(void *)(a1 + 32)) == 0))
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = *(void **)(v13 + 192);
  }
  id v15 = [v14 UUIDString];
  id v16 = [v15 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1781, (uint64_t)v16, @"We have at least one successful sharing with this friend and some in flight.", v17, v18, v19, v34);

  uint64_t v20 = *(void *)(a1 + 32);
  if (v20) {
    id v21 = *(void **)(v20 + 192);
  }
  else {
    id v21 = 0;
  }
  id v22 = [v21 UUIDString];
  id v23 = [v22 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingManager.m", 1782, (uint64_t)v23, @"Cancel the ones that are in flight and reset the sharing manager to share again", v24, v25, v26, v35);

  *(void *)(*(void *)(a1 + 32) + 96) = *(void *)(a1 + 64);
  uint64_t v27 = *(void *)(a1 + 32);

  sub_10034E9D4(v27, 10);
}

id *sub_100354A5C(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 22, a2);
  }
  return result;
}

void sub_100354C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession deleteKey:callback:]_block_invoke", 54, @"key to revoke: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  id v12 = 0;
  id v10 = sub_1003418CC((uint64_t)v9, &v12);
  id v11 = v12;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100354DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession localDeleteKey:callback:]_block_invoke", 65, @"key to delete: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  id v10 = (uint64_t *)sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  uint64_t v9 = sub_100341E60(v10);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100354FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession remoteTerminateKeys:nodeGroupIdentifiers:treeGroupIdentifiers:adminKey:callback:]_block_invoke", 81, @"keys to delete: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession remoteTerminateKeys:nodeGroupIdentifiers:treeGroupIdentifiers:adminKey:callback:]_block_invoke", 82, @"groupIdentifiers for nodes to delete: %@", v9, v10, v11, v12, *(void *)(a1 + 40));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession remoteTerminateKeys:nodeGroupIdentifiers:treeGroupIdentifiers:adminKey:callback:]_block_invoke", 83, @"groupIdentifiers for trees to delete: %@", v13, v14, v15, v16, *(void *)(a1 + 48));
  uint64_t v17 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 56), 0);
  uint64_t v18 = *(void **)(a1 + 32);
  uint64_t v19 = *(void **)(a1 + 40);
  uint64_t v20 = *(void **)(a1 + 48);
  id v33 = 0;
  id v21 = sub_100343F7C((uint64_t)v17, v18, v19, v20, &v33);
  id v22 = v33;
  if (v21)
  {
    id v23 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
    uint64_t v24 = [v21 version];
    uint64_t v25 = [v21 ephemeralPublicKeydata];
    uint64_t v26 = [v21 receiverPublicKeyHash];
    uint64_t v27 = [v21 cipherText];
    id v28 = [v23 initWithVersion:v24 ephemeralPublicKey:v25 publicKeyHash:v26 encryptedRequest:v27];

    KmlLogFunc_InternalOnly(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlKeyManagementSession remoteTerminateKeys:nodeGroupIdentifiers:treeGroupIdentifiers:adminKey:callback:]_block_invoke", 97, @"EncryptedRequest=%@", v29, v30, v31, v32, (uint64_t)v28);
  }
  else
  {
    id v28 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_100355268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession listSharingInvitationsForKeyIdentifier:callback:]_block_invoke", 107, @"Owner key identifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  id v12 = 0;
  uint64_t v10 = sub_100344D3C((uint64_t)v9, &v12);
  id v11 = v12;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1003553C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession listReceivedSharingInvitationsWithCallback:]_block_invoke", 119, &stru_100421848, a5, a6, a7, a8, v18);
  sub_10032872C();
  uint64_t v9 = (id **)objc_claimAutoreleasedReturnValue();
  id v19 = 0;
  uint64_t v16 = sub_100329888(v9, &v19, v10, v11, v12, v13, v14, v15);
  id v17 = v19;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100355518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelAllFriendInvitationsWithCompletionHandler:]_block_invoke", 131, &stru_100421848, a5, a6, a7, a8, v17);
  sub_10032872C();
  id v18 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v16 = sub_100329ABC((uint64_t)v18, v9, v10, v11, v12, v13, v14, v15);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10035567C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession removeSharingInvitationWithId:completionHandler:]_block_invoke", 143, &stru_100421848, a5, a6, a7, a8, v10);
  sub_10032872C();
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v9 = sub_100329D18((uint64_t)v11, *(void **)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100355810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationsWithIdentifiers:sentByOwnerKeyWithIdentifier:callback:]_block_invoke", 157, @"Owner key ID: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationsWithIdentifiers:sentByOwnerKeyWithIdentifier:callback:]_block_invoke", 158, @"Invitations to cancel :%@", v9, v10, v11, v12, *(void *)(a1 + 40));
  if ([*(id *)(a1 + 40) count])
  {
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v17 = *(id *)(a1 + 40);
    id v18 = [v17 countByEnumeratingWithState:&v39 objects:v43 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v40;
      while (2)
      {
        for (uint64_t i = 0; i != v19; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v40 != v20) {
            objc_enumerationMutation(v17);
          }
          id v22 = *(void **)(*((void *)&v39 + 1) + 8 * i);
          uint64_t v23 = sub_10034CB0C((uint64_t)KmlOwnerSharingManager, *(void **)(a1 + 32), v22);
          uint64_t v24 = *(void *)(a1 + 48);
          uint64_t v25 = *(void **)(v24 + 64);
          *(void *)(v24 + 64) = v23;

          if (*(void *)(*(void *)(a1 + 48) + 64))
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationsWithIdentifiers:sentByOwnerKeyWithIdentifier:callback:]_block_invoke", 169, @"Found sharing manager to handle %@", v26, v27, v28, v29, (uint64_t)v22);

            goto LABEL_12;
          }
        }
        id v19 = [v17 countByEnumeratingWithState:&v39 objects:v43 count:16];
        if (v19) {
          continue;
        }
        break;
      }
    }

LABEL_12:
    if (*(void *)(*(void *)(a1 + 48) + 64))
    {
      id v34 = objc_retainBlock(*(id *)(a1 + 56));
      uint64_t v35 = *(void *)(a1 + 48);
      id v36 = *(void **)(v35 + 104);
      *(void *)(v35 + 104) = v34;

      sub_100354A5C(*(id **)(*(void *)(a1 + 48) + 64), *(void **)(a1 + 48));
      sub_10034EF18(*(void *)(*(void *)(a1 + 48) + 64), *(void **)(a1 + 40));
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationsWithIdentifiers:sentByOwnerKeyWithIdentifier:callback:]_block_invoke", 175, @"No sharing in progress", v30, v31, v32, v33, v38);
      (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationsWithIdentifiers:sentByOwnerKeyWithIdentifier:callback:]_block_invoke", 161, @"No invitation identifiers provided to cancel", v13, v14, v15, v16, v38);
    id v37 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    v37();
  }
}

void sub_100355B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationWithIdentifier:reason:callback:]_block_invoke", 191, @"Invitation to cancel :%@", a5, a6, a7, a8, *(void *)(a1 + 32));
  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v13 = sub_10034D160((uint64_t)KmlOwnerSharingManager, *(void **)(a1 + 32));
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void **)(v14 + 72);
    *(void *)(v14 + 72) = v13;

    if (*(void *)(*(void *)(a1 + 40) + 72))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationWithIdentifier:reason:callback:]_block_invoke", 201, @"Found Initiator sharing session to handle %@", v16, v17, v18, v19, *(void *)(a1 + 32));
      sub_1002F8704(*(id **)(*(void *)(a1 + 40) + 72), *(void **)(a1 + 40));
      uint64_t v20 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      NSErrorUserInfoKey v46 = NSLocalizedDescriptionKey;
      id v21 = +[NSString stringWithUTF8String:KmlErrorString(125)];
      uint64_t v47 = v21;
      id v22 = +[NSDictionary dictionaryWithObjects:&v47 forKeys:&v46 count:1];
      uint64_t v23 = +[NSError errorWithDomain:v20 code:125 userInfo:v22];

      uint64_t v24 = *(void *)(a1 + 56);
      if (v24 == 1)
      {
        uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
        uint64_t v26 = +[NSString stringWithUTF8String:KmlErrorString(103)];
        id v43 = v26;
        uint64_t v27 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
        uint64_t v28 = v25;
        uint64_t v29 = 103;
      }
      else
      {
        if (v24)
        {
LABEL_11:
          sub_1002F4428(*(void *)(*(void *)(a1 + 40) + 72), v23);
          id v37 = objc_retainBlock(*(id *)(a1 + 48));
          uint64_t v38 = *(void *)(a1 + 40);
          uint64_t v31 = *(void **)(v38 + 112);
          *(void *)(v38 + 112) = v37;
          goto LABEL_12;
        }
        uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        NSErrorUserInfoKey v44 = NSLocalizedDescriptionKey;
        uint64_t v26 = +[NSString stringWithUTF8String:KmlErrorString(124)];
        uint64_t v45 = v26;
        uint64_t v27 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
        uint64_t v28 = v25;
        uint64_t v29 = 124;
      }
      uint64_t v36 = +[NSError errorWithDomain:v28 code:v29 userInfo:v27];

      uint64_t v23 = (void *)v36;
      goto LABEL_11;
    }
    uint64_t v30 = *(void *)(a1 + 48);
    uint64_t v23 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
    uint64_t v31 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    long long v41 = v31;
    uint64_t v32 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
    uint64_t v33 = v23;
    uint64_t v34 = 109;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession cancelInvitationWithIdentifier:reason:callback:]_block_invoke", 194, @"No invitation identifiers provided to cancel", v9, v10, v11, v12, v39);
    uint64_t v30 = *(void *)(a1 + 48);
    uint64_t v23 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v48 = NSLocalizedDescriptionKey;
    uint64_t v31 = +[NSString stringWithUTF8String:KmlErrorString(206)];
    id v49 = v31;
    uint64_t v32 = +[NSDictionary dictionaryWithObjects:&v49 forKeys:&v48 count:1];
    uint64_t v33 = v23;
    uint64_t v34 = 206;
  }
  uint64_t v35 = +[NSError errorWithDomain:v33 code:v34 userInfo:v32];
  (*(void (**)(uint64_t, void, void *))(v30 + 16))(v30, 0, v35);

LABEL_12:
}

void sub_1003560E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession removeSharedKeysWithIdentifiers:ownerKeyWithIdentifier:callback:]_block_invoke", 232, @"Owner key identifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v10 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  uint64_t v9 = sub_100344E08((uint64_t)v10, *(void **)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_10035625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession countImmobilizerTokensForKeyWithIdentifier:callback:]_block_invoke", 244, @"Key identifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_100344F48((uint64_t)v9, &v11, &v10);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_10035640C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession consumeTrackingReceipt:otherJSONData:forKeyWithIdentifier:callback:]_block_invoke", 260, &stru_100421848, a5, a6, a7, a8, v16);
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlKeyManagementSession consumeTrackingReceipt:otherJSONData:forKeyWithIdentifier:callback:]_block_invoke", 261, @"otherJsonData : %@", v9, v10, v11, v12, *(void *)(a1 + 32));
  uint64_t v17 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 40), 0);
  uint64_t v13 = sub_100341F54(v17, *(void **)(a1 + 48), *(void **)(a1 + 32));
  uint64_t v14 = sub_10030B000((uint64_t)KmlOwnerPairingManager, *(void **)(a1 + 40));
  if (v14)
  {
    uint64_t v15 = sub_1002FEDBC((uint64_t)v17);
    sub_10030BEA0((uint64_t)v14, v13, v15);
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1003565F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession requestBindingAttestationDataForKeyWithIdentifier:callback:]_block_invoke", 278, &stru_100421848, a5, a6, a7, a8, (uint64_t)v16);
  uint64_t v9 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 80);
  if (v12)
  {
    id v17 = 0;
    uint64_t v13 = sub_10032E608(v12, &v17);
    id v14 = v17;
  }
  else
  {
    uint64_t v15 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 40), 0);
    id v16 = 0;
    uint64_t v13 = sub_100348334((uint64_t)v15, &v16);
    id v14 = v16;
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1003567FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession setBindingAttestation:forKeyWithIdentifier:callback:]_block_invoke", 297, @"Set Binding Attestation Data for key with id: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  uint64_t v12 = *(void **)(*(void *)(a1 + 40) + 80);
  if (v12)
  {
    uint64_t v13 = sub_10032E684(v12, *(void **)(a1 + 48));
  }
  else
  {
    id v14 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
    sub_100348650(v14, *(void **)(a1 + 48));
    id v15 = (id)objc_claimAutoreleasedReturnValue();

    uint64_t v13 = (uint64_t)v15;
  }
  id v16 = (id)v13;
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1003569C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession getPreTrackRequestForInvitationWithIdentifier:completionHandler:]_block_invoke", 316, @"Get pre-track request for invitation with id: %@", a5, a6, a7, a8, a1[4]);
  uint64_t v9 = sub_10032B90C((uint64_t)KmlFriendSharingManager, (void *)a1[4], 0);
  uint64_t v10 = a1[5];
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  uint64_t v12 = *(void **)(a1[5] + 80);
  if (v12)
  {
    id v18 = 0;
    uint64_t v13 = sub_10032E878(v12, &v18);
    id v14 = v18;
  }
  else
  {
    id v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    id v16 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v20 = v16;
    id v17 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v14 = +[NSError errorWithDomain:v15 code:210 userInfo:v17];

    uint64_t v13 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100356C4C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession getPreTrackRequestForKeyWithIdentifier:callback:]_block_invoke", 335, @"Get pre-track request for key with id: %@", a5, a6, a7, a8, a1[4]);
  uint64_t v9 = sub_10032C0B8((uint64_t)KmlFriendSharingManager, (void *)a1[4]);
  uint64_t v10 = a1[5];
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  uint64_t v12 = *(void **)(a1[5] + 80);
  if (v12)
  {
    id v18 = 0;
    uint64_t v13 = sub_10032E878(v12, &v18);
    id v14 = v18;
  }
  else
  {
    id v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    id v16 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v20 = v16;
    id v17 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
    id v14 = +[NSError errorWithDomain:v15 code:210 userInfo:v17];

    uint64_t v13 = 0;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100356EF4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession ppidRequestForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 354, @"Get ppid fetch request for Invitation with id: %@", a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession ppidRequestForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 355, @"mailboxIdentifier : %@", v9, v10, v11, v12, a1[5]);
  uint64_t v13 = sub_10032C500((uint64_t)KmlFriendSharingManager, (void *)a1[4], (void *)a1[5]);
  uint64_t v14 = a1[6];
  id v15 = *(void **)(v14 + 80);
  *(void *)(v14 + 80) = v13;

  id v16 = *(void **)(a1[6] + 80);
  if (v16)
  {
    id v22 = 0;
    id v17 = sub_10032E8F4(v16, &v22);
    id v18 = v22;
  }
  else
  {
    NSErrorUserInfoKey v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v23 = NSLocalizedDescriptionKey;
    uint64_t v20 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    uint64_t v24 = v20;
    id v21 = +[NSDictionary dictionaryWithObjects:&v24 forKeys:&v23 count:1];
    id v18 = +[NSError errorWithDomain:v19 code:109 userInfo:v21];

    id v17 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_1003571C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession setProductPlanIdentifier:forInvitationIdentifier:completion:]_block_invoke", 377, @"invitationIdentifier: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  uint64_t v9 = sub_10032B90C((uint64_t)KmlFriendSharingManager, *(void **)(a1 + 32), 0);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void **)(v10 + 80);
  *(void *)(v10 + 80) = v9;

  uint64_t v12 = *(dispatch_queue_t **)(*(void *)(a1 + 40) + 80);
  if (v12)
  {
    uint64_t v13 = sub_10032E970(v12, *(void **)(a1 + 48));
  }
  else
  {
    uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    id v15 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    id v18 = v15;
    id v16 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v14 code:109 userInfo:v16];
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_100357450(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession readerInformationForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 398, @"Get readerInformation for Invitation with id: %@", a5, a6, a7, a8, a1[4]);
  KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession readerInformationForInvitationWithIdentifier:fromMailboxIdentifier:completionHandler:]_block_invoke", 399, @"mailboxIdentifier : %@", v9, v10, v11, v12, a1[5]);
  uint64_t v13 = sub_10032C500((uint64_t)KmlFriendSharingManager, (void *)a1[4], (void *)a1[5]);
  uint64_t v14 = a1[6];
  id v15 = *(void **)(v14 + 80);
  *(void *)(v14 + 80) = v13;

  uint64_t v16 = *(void *)(a1[6] + 80);
  if (v16)
  {
    NSErrorUserInfoKey v17 = sub_10033749C(v16);
    id v18 = 0;
  }
  else
  {
    NSErrorUserInfoKey v19 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    uint64_t v20 = +[NSString stringWithUTF8String:KmlErrorString(109)];
    NSErrorUserInfoKey v23 = v20;
    id v21 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    id v18 = +[NSError errorWithDomain:v19 code:109 userInfo:v21];

    NSErrorUserInfoKey v17 = 0;
  }
  (*(void (**)(void))(a1[7] + 16))();
}

void sub_100357710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession hasUpgradeAvailableForKeyWithIdentifier:versionType:versions:completionHandler:]_block_invoke", 421, &stru_100421848, a5, a6, a7, a8, *(uint64_t *)&v15[0]);
  uint64_t v9 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void **)(a1 + 40);
  id v16 = 0;
  sub_1003454B8((uint64_t)v9, v10, v11, &v16, (uint64_t *)&v17);
  id v12 = v16;
  uint64_t v13 = *(void *)(a1 + 48);
  v15[0] = v17;
  v15[1] = v18;
  uint64_t v14 = +[NSValue valueWithDAAvailableVersionUpgrade:v15];
  (*(void (**)(uint64_t, void *, id))(v13 + 16))(v13, v14, v12);
}

void sub_100357900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession upgradeKeyWithIdentifier:versionType:version:upgradeInformation:completionHandler:]_block_invoke", 436, &stru_100421848, a5, a6, a7, a8, v29);
  uint64_t v10 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 40), 0);
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(v11 + 88);
  *(void *)(v11 + 88) = v10;

  if (*(void *)(*(void *)(a1 + 32) + 88))
  {
    id v17 = objc_retainBlock(*(id *)(a1 + 56));
    uint64_t v18 = *(void *)(a1 + 32);
    NSErrorUserInfoKey v19 = *(void **)(v18 + 96);
    *(void *)(v18 + 96) = v17;

    sub_100348CC8(*(id **)(*(void *)(a1 + 32) + 88), *(void **)(a1 + 32));
    sub_100345588(*(void *)(*(void *)(a1 + 32) + 88), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void **)(a1 + 48));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession upgradeKeyWithIdentifier:versionType:version:upgradeInformation:completionHandler:]_block_invoke", 449, @"Waiting for upgrade to finish", v20, v21, v22, v23, a9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlKeyManagementSession upgradeKeyWithIdentifier:versionType:version:upgradeInformation:completionHandler:]_block_invoke", 439, @"Failed to get Endpoint Manager", v13, v14, v15, v16, v30);
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml"];
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    uint64_t v26 = +[NSString stringWithUTF8String:KmlErrorString(210)];
    uint64_t v32 = v26;
    uint64_t v27 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
    uint64_t v28 = +[NSError errorWithDomain:v25 code:210 userInfo:v27];
    (*(void (**)(uint64_t, void *))(v24 + 16))(v24, v28);
  }
}

void sub_100357C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession finalizeUpgradeForKeyWithIdentifier:versionType:version:revert:completionHandler:]_block_invoke", 460, &stru_100421848, a5, a6, a7, a8, v14);
  uint64_t v15 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  uint64_t v13 = sub_10034674C(v15, *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), v9, v10, v11, v12);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_100357DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyManagementSession updateConfiguration:forKeyWithIdentifier:completionHandler:]_block_invoke", 474, &stru_100421848, a5, a6, a7, a8, v10);
  uint64_t v11 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(a1 + 32), 0);
  uint64_t v9 = sub_100347A90(v11, *(void **)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

id sub_100357F04(uint64_t a1)
{
  sub_100357F54(*(void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  v4.receiver = *(id *)(a1 + 32);
  v4.super_class = (Class)KmlKeyManagementSession;
  return [super endSessionWithCompletion:v2];
}

void sub_100357F54(uint64_t a1)
{
  if (a1)
  {
    sub_100354A5C(*(id **)(a1 + 64), 0);
    uint64_t v2 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;

    uint64_t v3 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;

    sub_100348CC8(*(id **)(a1 + 88), 0);
    objc_super v4 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = 0;

    id v5 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = 0;

    id v6 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = 0;

    uint64_t v7 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = 0;
  }
}

uint64_t sub_1003580F4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 104) + 16))();
}

uint64_t sub_100358218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 112) + 16))();
}

uint64_t sub_100358308(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 96) + 16))();
}

id *sub_1003583DC(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)KmlMessageToSend;
    uint64_t v11 = (id *)[super init];
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

id sub_1003584EC(uint64_t a1, void *a2)
{
  objc_initWeak(&location, a2);
  self;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1003585D4;
  v4[3] = &unk_10040D720;
  objc_copyWeak(&v5, &location);
  if (qword_100468460 != -1) {
    dispatch_once(&qword_100468460, v4);
  }
  id v2 = (id)qword_100468458;
  objc_destroyWeak(&v5);
  objc_destroyWeak(&location);
  return v2;
}

void sub_1003585C0(_Unwind_Exception *a1)
{
  objc_destroyWeak((id *)(v1 - 24));
  _Unwind_Resume(a1);
}

void sub_1003585D4(uint64_t a1)
{
  id v2 = [KmlPeerToPeerConnection alloc];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = sub_100358648((id *)&v2->super.isa, WeakRetained);
  objc_super v4 = (void *)qword_100468458;
  qword_100468458 = (uint64_t)v3;
}

id *sub_100358648(id *a1, void *a2)
{
  objc_initWeak(&location, a2);
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)KmlPeerToPeerConnection;
    a1 = (id *)[super init];
    if (a1)
    {
      id v3 = objc_loadWeakRetained(&location);
      objc_storeWeak(a1 + 3, v3);

      dispatch_queue_t v4 = dispatch_queue_create("com.apple.sesd.kml.p2pConnection", 0);
      id v5 = a1[2];
      a1[2] = v4;

      uint64_t v6 = +[NSMutableDictionary dictionary];
      id v7 = a1[4];
      a1[4] = (id)v6;

      uint64_t v8 = +[NSMutableDictionary dictionary];
      id v9 = a1[5];
      a1[5] = (id)v8;

      uint64_t v10 = +[NSCountedSet set];
      id v11 = a1[6];
      a1[6] = (id)v10;

      id v12 = [objc_alloc((Class)IDSService) initWithService:@"com.apple.private.alloy.keysharing"];
      id v13 = a1[1];
      a1[1] = v12;

      [a1[1] addDelegate:a1 queue:a1[2]];
      uint64_t v14 = +[NSMutableArray array];
      id v15 = a1[9];
      a1[9] = (id)v14;

      id v16 = a1[10];
      a1[10] = 0;

      *((unsigned char *)a1 + 64) = 0;
      uint64_t v17 = +[NWPathEvaluator sharedDefaultEvaluator];
      id v18 = a1[7];
      a1[7] = (id)v17;

      [a1[7] addObserver:a1 forKeyPath:@"path" options:5 context:0];
    }
  }
  objc_destroyWeak(&location);
  return a1;
}

void sub_1003587C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id location)
{
}

void sub_1003588E4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isEqualToString:@"path"])
  {
    uint64_t v2 = *(void *)(a1 + 40);
    sub_100358938(v2);
  }
}

void sub_100358938(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = [*(id *)(a1 + 56) path];
    unsigned int v3 = [v2 usesInterfaceType:1];

    dispatch_queue_t v4 = [*(id *)(a1 + 56) path];
    unsigned int v5 = [v4 usesInterfaceType:2];

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlPeerToPeerConnection *)"NWPath - Wifi : %d sync_updateConnectionState], v6, v7, v8, v9, v3);
    sub_10035A174(a1, v3 | v5, v10, v11, v12, v13, v14, v15);
  }
}

void sub_1003589F0(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    uint64_t v7 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100358AA0;
    block[3] = &unk_10041A9A8;
    char v10 = a3;
    void block[4] = a1;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_100358AA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || (uint64_t v2 = *(void *)(a1 + 32), *(unsigned char *)(v2 + 64))
    || ((uint64_t v3 = *(void *)(a1 + 40)) == 0 ? (v4 = 0) : (v4 = *(void **)(v3 + 24)), sub_100358C0C(v2, v4)))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      char v10 = *(void **)(v9 + 8);
    }
    else {
      char v10 = 0;
    }
    uint64_t v12 = *(id **)(a1 + 32);
    uint64_t v11 = *(void **)(a1 + 40);
    if (v11) {
      uint64_t v11 = (void *)v11[2];
    }
    uint64_t v13 = *(void *)(a1 + 40);
    if (v13) {
      uint64_t v14 = *(void **)(v13 + 24);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v11;
    id v22 = v10;
    sub_100358D8C(v12, v22, v15, v14);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection sendMessage:assumeInitialConnectivity:]_block_invoke", 153, @"Internet not reachable. Queue up the message", v5, v6, v7, v8, v21);
    [*(id *)(*(void *)(a1 + 32) + 72) addObject:*(void *)(a1 + 40)];
    if ((unint64_t)[*(id *)(*(void *)(a1 + 32) + 72) count] >= 0xB)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection sendMessage:assumeInitialConnectivity:]_block_invoke", 156, @"Max (%d) messages are already queued, drain the oldest message", v16, v17, v18, v19, 10);
      objc_super v20 = *(id **)(a1 + 32);
      sub_1003591D8(v20);
    }
  }
}

uint64_t sub_100358C0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    if (v3)
    {
      long long v25 = 0u;
      long long v26 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      uint64_t v9 = [*(id *)(a1 + 8) devices];
      id v10 = [v9 countByEnumeratingWithState:&v23 objects:v27 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v24;
        while (2)
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v24 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v14 = [*(id *)(*((void *)&v23 + 1) + 8 * i) uniqueIDOverride];
            unsigned int v15 = [v14 isEqualToString:v8];

            if (v15)
            {
              uint64_t v20 = 1;
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_isOurOwnDeviceWithId:]", 361, @"ID %@ is of our own device", v16, v17, v18, v19, (uint64_t)v8);

              goto LABEL_15;
            }
          }
          id v11 = [v9 countByEnumeratingWithState:&v23 objects:v27 count:16];
          if (v11) {
            continue;
          }
          break;
        }
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_isOurOwnDeviceWithId:]", 355, @"RemoteId should be non-nil to check this", v4, v5, v6, v7, v22);
    }
  }
  uint64_t v20 = 0;
LABEL_15:

  return v20;
}

void sub_100358D8C(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v14 = v9;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_sendMessage:withIdentifier:toRemoteIdsIdentifier:]", 465, @"Remote Id: %@", v10, v11, v12, v13, (uint64_t)v9);
    if (v14)
    {
      id v49 = v7;
      id v15 = v8;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      uint64_t v16 = [a1[1] devices];
      id v17 = [v16 countByEnumeratingWithState:&v53 objects:v59 count:16];
      if (v17)
      {
        id v18 = v17;
        uint64_t v19 = *(void *)v54;
LABEL_5:
        uint64_t v20 = 0;
        while (1)
        {
          if (*(void *)v54 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = *(void **)(*((void *)&v53 + 1) + 8 * v20);
          uint64_t v22 = [v21 uniqueIDOverride];
          unsigned __int8 v23 = [v22 isEqualToString:v14];

          if (v23) {
            break;
          }
          if (v18 == (id)++v20)
          {
            id v18 = [v16 countByEnumeratingWithState:&v53 objects:v59 count:16];
            if (v18) {
              goto LABEL_5;
            }
            goto LABEL_11;
          }
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_sendMessage:withIdentifier:toRemoteIdsIdentifier:]", 474, @"Found our own device with ID %@", v24, v25, v26, v27, (uint64_t)v14);
        id v28 = v21;

        id v8 = v15;
        id v7 = v49;
        if (!v28) {
          goto LABEL_14;
        }
        uint64_t v29 = (void *)IDSCopyIDForDevice();
        goto LABEL_19;
      }
LABEL_11:

      id v8 = v15;
      id v7 = v49;
    }
LABEL_14:
    if ([v14 _appearsToBeEmail])
    {
      uint64_t v30 = IDSCopyIDForEmailAddress();
    }
    else
    {
      if (![v14 _appearsToBePhoneNumber])
      {
        id v50 = 0;
        goto LABEL_26;
      }
      uint64_t v30 = IDSCopyIDForPhoneNumber();
    }
    uint64_t v29 = (void *)v30;
    id v28 = 0;
LABEL_19:
    id v50 = v28;
    if (v29)
    {
      uint64_t v48 = (uint64_t)v8;
      id v31 = v7;
      uint64_t v32 = +[NSSet setWithObject:v29];
      uint64_t v33 = +[NSMutableDictionary dictionary];
      [v33 setObject:&off_10042E5D8 forKeyedSubscript:IDSSendMessageOptionTimeoutKey];
      uint64_t v34 = [a1[5] objectForKeyedSubscript:v14];
      if (v34) {
        [v33 setObject:v34 forKeyedSubscript:IDSSendMessageOptionFromIDKey];
      }
      id v35 = a1[1];
      id v51 = 0;
      id v52 = 0;
      unsigned int v36 = [v35 sendMessage:v31 toDestinations:v32 priority:300 options:v33 identifier:&v52 error:&v51];
      id v37 = v52;
      id v38 = v51;
      sub_100359738((uint64_t)a1, v14);

      if (v36)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_sendMessage:withIdentifier:toRemoteIdsIdentifier:]", 509, @"P2PConnection: Requested to send message(%@) - uuid %@", v39, v40, v41, v42, v48);
        [a1[4] setObject:v48 forKeyedSubscript:v37];
        id v7 = v31;
        id v8 = (id)v48;
        id v43 = v50;
LABEL_28:

        goto LABEL_29;
      }
      id v7 = v31;
      id v8 = (id)v48;
LABEL_27:
      id v43 = v50;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlPeerToPeerConnection internal_sendMessage:withIdentifier:toRemoteIdsIdentifier:]", 512, @"P2PConnection: Failed to send with uuid %@ error %@", v39, v40, v41, v42, (uint64_t)v37);
      id WeakRetained = objc_loadWeakRetained(a1 + 3);
      [WeakRetained handleSendMessageResult:v38 forMessageIdentifier:v8];

      goto LABEL_28;
    }
LABEL_26:
    NSErrorUserInfoKey v44 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    v57[0] = NSLocalizedDescriptionKey;
    uint64_t v45 = +[NSString stringWithUTF8String:KmlErrorString(106)];
    v57[1] = NSLocalizedFailureReasonErrorKey;
    v58[0] = v45;
    v58[1] = @"Failed to get a destination from rawAddress";
    NSErrorUserInfoKey v46 = +[NSDictionary dictionaryWithObjects:v58 forKeys:v57 count:2];
    id v38 = +[NSError errorWithDomain:v44 code:106 userInfo:v46];

    id v37 = 0;
    uint64_t v29 = 0;
    goto LABEL_27;
  }
LABEL_29:
}

void sub_1003591D8(id *a1)
{
  if (a1 && [a1[9] count])
  {
    uint64_t v14 = [a1[9] firstObject];
    [a1[9] removeFirstObject];
    if (v14)
    {
      id v6 = v14[2];
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlPeerToPeerConnection *)"Message id - %@ sendFirstQueuedMessage], v7, v8, v9, v10, (uint64_t)v6);

      id v11 = v14[1];
      id v12 = v14[2];
      id v13 = v14[3];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlPeerToPeerConnection *)"Message id - %@ sendFirstQueuedMessage], v2, v3, v4, v5, 0);
      id v12 = 0;
      id v11 = 0;
      id v13 = 0;
    }
    sub_100358D8C(a1, v11, v12, v13);
  }
}

void sub_100359308(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100359384;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100359384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection checkForActiveAccounts]_block_invoke", 166, @"P2PConnection: Checking for active IDS accounts", a5, a6, a7, a8, v17);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  uint64_t v16 = sub_10035940C(*(void *)(a1 + 32), v9, v10, v11, v12, v13, v14, v15);
  [WeakRetained handleConnectionSetupResult:v16];
}

id sub_10035940C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    goto LABEL_4;
  }
  if (*(void *)(a1 + 80))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_getActiveAccount]", 388, @"We already active IDS account with login:%@", a5, a6, a7, a8, *(void *)(a1 + 80));
LABEL_4:
    uint64_t v9 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
  NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
  uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(107)];
  id v37 = v11;
  uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
  uint64_t v9 = +[NSError errorWithDomain:v10 code:107 userInfo:v12];

  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  uint64_t v13 = [*(id *)(a1 + 8) accounts];
  id v14 = [v13 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v32;
    while (2)
    {
      for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*((void *)&v31 + 1) + 8 * i);
        uint64_t v19 = [v18 loginID];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_getActiveAccount]", 394, @"P2PConnection: Checking IDS account with login:%@", v20, v21, v22, v23, (uint64_t)v19);

        if ([v18 canSend])
        {

          uint64_t v24 = [v18 loginID];
          uint64_t v25 = *(void **)(a1 + 80);
          *(void *)(a1 + 80) = v24;

          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection internal_getActiveAccount]", 398, @"P2PConnection: Found active IDS account with login:%@", v26, v27, v28, v29, *(void *)(a1 + 80));
          uint64_t v9 = 0;
          goto LABEL_15;
        }
      }
      id v15 = [v13 countByEnumeratingWithState:&v31 objects:v35 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }
LABEL_15:

LABEL_16:

  return v9;
}

void sub_100359684(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_10035972C;
    v6[3] = &unk_10040D1A0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10035972C(uint64_t a1)
{
}

void sub_100359738(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    [*(id *)(a1 + 48) removeObject:v7];
    if (![*(id *)(a1 + 48) countForObject:v7])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection sync_cleanupRemoteIdentifier:]", 345, @"cleaning up remoteAndOurIdentifierMap for remote id %@", v3, v4, v5, v6, (uint64_t)v7);
      [*(id *)(a1 + 40) removeObjectForKey:v7];
    }
  }
}

uint64_t sub_1003597CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    if (v3)
    {
      uint64_t v15 = 0;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x2020000000;
      char v18 = 0;
      dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 16));
      uint64_t v9 = *(NSObject **)(a1 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1003598F8;
      block[3] = &unk_100419E28;
      id v14 = &v15;
      void block[4] = a1;
      id v13 = v8;
      dispatch_sync(v9, block);
      a1 = *((unsigned char *)v16 + 24) != 0;

      _Block_object_dispose(&v15, 8);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection isOurOwnDeviceWithId:]", 181, @"RemoteId should be non-nil to check this", v4, v5, v6, v7, v11);
      a1 = 0;
    }
  }

  return a1;
}

void sub_1003598E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1003598F8(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = sub_100358C0C(*(void *)(a1 + 32), *(void **)(a1 + 40));
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) accounts];
    id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      id v4 = v3;
      uint64_t v5 = *(void *)v14;
      while (2)
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v5) {
            objc_enumerationMutation(v2);
          }
          uint64_t v7 = [*(id *)(*((void *)&v13 + 1) + 8 * i) loginID];
          unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 40)];

          if (v8)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection isOurOwnDeviceWithId:]_block_invoke", 191, @"%@ is our own account ID", v9, v10, v11, v12, *(void *)(a1 + 40));
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
            goto LABEL_12;
          }
        }
        id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v4) {
          continue;
        }
        break;
      }
    }
LABEL_12:
  }
}

dispatch_queue_t *sub_100359A74(dispatch_queue_t *a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    dispatch_assert_queue_not_V2(a1[2]);
    id v3 = v2[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100359B14;
    block[3] = &unk_10040B880;
    void block[4] = v2;
    dispatch_sync(v3, block);
    a1 = v2[10];
    uint64_t v1 = block[8];
  }
  return a1;
}

void sub_100359B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8 = sub_10035940C(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  if (v8)
  {
    id v13 = v8;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection ourActiveIDSId]_block_invoke", 219, @"Failed to find active IDS ID - %@", v9, v10, v11, v12, (uint64_t)v8);
    unsigned int v8 = v13;
  }
}

void sub_100359B74(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    unsigned int v8 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100359C38;
    block[3] = &unk_10040D2C0;
    id v10 = v6;
    uint64_t v11 = a1;
    id v12 = v5;
    dispatch_async(v8, block);
  }
}

void sub_100359C38(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _appearsToBeEmail])
  {
    uint64_t v2 = IDSCopyIDForEmailAddress();
  }
  else
  {
    if (![*(id *)(a1 + 32) _appearsToBePhoneNumber])
    {
      id v14 = 0;
      id v13 = 0;
      uint64_t v7 = 0;
      goto LABEL_10;
    }
    uint64_t v2 = IDSCopyIDForPhoneNumber();
  }
  uint64_t v7 = (void *)v2;
  if (!v2)
  {
    id v14 = 0;
    id v13 = 0;
    goto LABEL_10;
  }
  unsigned int v8 = +[NSSet setWithObject:v2];
  uint64_t v21 = IDSSendMessageOptionTimeoutKey;
  uint64_t v22 = &off_10042E5D8;
  uint64_t v9 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 8);
  id v19 = 0;
  id v20 = 0;
  unsigned int v12 = [v11 sendData:v10 toDestinations:v8 priority:300 options:v9 identifier:&v20 error:&v19];
  id v13 = v20;
  id v14 = v19;

  if (!v12)
  {
LABEL_10:
    long long v15 = @"Failed to send test data";
    os_log_type_t v16 = OS_LOG_TYPE_ERROR;
    uint64_t v17 = 250;
    goto LABEL_11;
  }
  long long v15 = @"Test data sent";
  os_log_type_t v16 = OS_LOG_TYPE_INFO;
  uint64_t v17 = 248;
LABEL_11:
  KmlLogFunc2(v16, (uint64_t)"-[KmlPeerToPeerConnection sendTestData:toRemoteIdentifier:]_block_invoke", v17, v15, v3, v4, v5, v6, v18);
}

void sub_100359EB8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection service:account:incomingData:fromID:context:]_block_invoke", 269, @"P2PConnection: Received data from:%@ context:%@", a5, a6, a7, a8, a1[4]);
  id v11 = (id)IDSCopyRawAddressForDestination();
  id v9 = [objc_alloc((Class)NSData) initWithData:a1[6]];
  id WeakRetained = objc_loadWeakRetained((id *)(a1[7] + 24));
  [WeakRetained handleIncomingTestData:v9 fromRemoteIdsIdentifier:v11];
}

void sub_10035A044(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 8) deviceForFromID:*(void *)(a1 + 40)];
  uint64_t v3 = v2;
  if (v2)
  {
    uint64_t v4 = [v2 uniqueIDOverride];
  }
  else
  {
    uint64_t v4 = IDSCopyRawAddressForDestination();
  }
  id v18 = (id)v4;
  id v5 = [objc_alloc((Class)NSDictionary) initWithDictionary:*(void *)(a1 + 48)];
  uint64_t v10 = [*(id *)(a1 + 56) toID];
  if (v10)
  {
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:v10 forKeyedSubscript:v18];
    [*(id *)(*(void *)(a1 + 32) + 48) addObject:v18];
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection service:account:incomingMessage:fromID:context:]_block_invoke", 297, @"P2PConnection: Received message from:%@ toOurId:%@", v6, v7, v8, v9, *(void *)(a1 + 40));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 24));
  [WeakRetained handleIncomingMessage:v5 fromRemoteIdsIdentifier:v18];

  if (!v3) {
    sub_10035A174(*(void *)(a1 + 32), 1, v12, v13, v14, v15, v16, v17);
  }
}

void sub_10035A174(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection sync_setInternetAvailability:]", 453, @"Internet available: before - %d, now - %d", a5, a6, a7, a8, *(unsigned __int8 *)(a1 + 64));
    if (*(unsigned __int8 *)(a1 + 64) != a2)
    {
      *(unsigned char *)(a1 + 64) = a2;
      if (a2)
      {
        sub_10035A4D8((id *)a1);
      }
    }
  }
}

void sub_10035A2D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v13 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 56)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection service:account:identifier:didSendWithSuccess:error:]_block_invoke", 311, @"P2PConnection: Sent data with identifier:%@ result:%@", v3, v4, v5, v6, v2);

  id v14 = [*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 32)];
  if (v14)
  {
    [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:*(void *)(a1 + 32)];
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 24));
    [WeakRetained handleSendMessageResult:*(void *)(a1 + 48) forMessageIdentifier:v14];
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlPeerToPeerConnection service:account:identifier:didSendWithSuccess:error:]_block_invoke", 318, @"P2PConnection: We didn't send anything, so dropping the send receipt", v7, v8, v9, v10, v12);
  }
}

void sub_10035A42C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 80);
  id v18 = v2;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 80) = 0;

  uint64_t v12 = sub_10035940C(*(void *)(a1 + 32), v5, v6, v7, v8, v9, v10, v11);
  uint64_t v17 = (void *)v12;
  if (v12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection service:activeAccountsChanged:]_block_invoke", 330, @"Keeping old ID as we failed to find changed active IDS ID - %@", v13, v14, v15, v16, v12);
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 80), v2);
  }
}

void sub_10035A4D8(id *a1)
{
  if (a1)
  {
    uint64_t v2 = (char *)[a1[9] count];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlPeerToPeerConnection drainQueuedMessages]", 409, @"Number of messages queued up : %lu", v3, v4, v5, v6, (uint64_t)v2);
    for (; v2; --v2)
      sub_1003591D8(a1);
  }
}

uint64_t SSEIsFeatureSupported(int a1)
{
  unsigned int v11 = 0;
  uint64_t v10 = 0;
  sub_10035AB4C();
  if (byte_100468490)
  {
    uint64_t v2 = SSEGetVersion(&v11);
    if (v2)
    {
      uint64_t v3 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10035EBA8();
      }
    }
    else
    {
      uint64_t v3 = 0;
      switch(a1)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 8:
        case 9:
        case 10:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
          return v3;
        case 7:
        case 11:
        case 15:
        case 26:
        case 27:
        case 28:
          unsigned int v4 = HIWORD(v11);
          goto LABEL_8;
        case 12:
        case 25:
          BOOL v5 = v11 > 1;
          goto LABEL_26;
        case 13:
        case 14:
          BOOL v5 = v11 > 2;
          goto LABEL_26;
        case 16:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
          unsigned int v4 = v11 >> 18;
          goto LABEL_8;
        case 17:
        case 40:
          unsigned int v6 = v11;
          unsigned int v7 = 393215;
          goto LABEL_25;
        case 29:
        case 30:
        case 31:
          unsigned int v4 = v11 >> 17;
          goto LABEL_8;
        case 32:
        case 45:
        case 46:
        case 47:
        case 48:
          unsigned int v4 = v11 >> 19;
LABEL_8:
          if (v4) {
            return 0;
          }
          else {
            return 4294967279;
          }
        case 33:
          unsigned int v6 = v11;
          unsigned int v7 = 655359;
          goto LABEL_25;
        case 34:
          uint64_t v8 = sub_10035A9C0(&v10);
          if (v8)
          {
            uint64_t v3 = v8;
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_10035EB10();
            }
          }
          else if (v10)
          {
            return 0;
          }
          else
          {
            return 4294967279;
          }
          return v3;
        case 41:
        case 42:
          BOOL v5 = HIWORD(v11) > 4u;
          goto LABEL_26;
        case 43:
        case 44:
          unsigned int v6 = v11;
          unsigned int v7 = 458751;
          goto LABEL_25;
        case 49:
          unsigned int v6 = v11;
          unsigned int v7 = 589823;
LABEL_25:
          BOOL v5 = v6 > v7;
LABEL_26:
          if (v5) {
            uint64_t v3 = 0;
          }
          else {
            uint64_t v3 = 4294967279;
          }
          break;
        default:
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10035EA78();
          }
          return 4294967279;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035E9E0();
    }
    return 4294967279;
  }
  return v3;
}

uint64_t SSEGetVersion(_DWORD *a1)
{
  if (dword_100468478)
  {
    uint64_t v2 = 0;
    goto LABEL_10;
  }
  uint64_t inputStruct = 0x153534563;
  unsigned int outputStruct = 0;
  uint64_t v3 = sub_10035AB4C();
  if (v3)
  {
    uint64_t v2 = v3;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035EE08();
    }
  }
  else
  {
    size_t outputStructCnt = 4;
    uint64_t v4 = IOConnectCallStructMethod(dword_10046847C, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!v4)
    {
      if (outputStructCnt == 4)
      {
        int v5 = outputStruct;
        if (outputStruct)
        {
          uint64_t v2 = 0;
          if (outputStruct >= 0xA0000) {
            int v5 = 655360;
          }
          dword_100468478 = v5;
          goto LABEL_10;
        }
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10035EC40();
        }
      }
      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10035ECD8();
      }
      uint64_t v2 = 4294967290;
      goto LABEL_10;
    }
    uint64_t v2 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035ED70();
    }
  }
LABEL_10:
  if (a1) {
    *a1 = dword_100468478;
  }
  return v2;
}

uint64_t sub_10035A9C0(void *a1)
{
  if (a1)
  {
    if (byte_1004684A0)
    {
LABEL_10:
      uint64_t v5 = 0;
      *a1 = qword_100468498;
      return v5;
    }
    unsigned int v10 = 0;
    uint64_t v2 = SSEGetVersion(&v10);
    if (v2)
    {
      uint64_t v5 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10035F100();
      }
    }
    else
    {
      if (v10 < 0x30000)
      {
LABEL_9:
        byte_1004684A0 = 1;
        goto LABEL_10;
      }
      uint64_t outputStruct = 0;
      uint64_t inputStruct = 0x1E53534563;
      uint64_t v3 = sub_10035AB4C();
      if (v3)
      {
        uint64_t v5 = v3;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10035F068();
        }
      }
      else
      {
        size_t v7 = 8;
        uint64_t v4 = IOConnectCallStructMethod(dword_10046847C, 0, &inputStruct, 8uLL, &outputStruct, &v7);
        if (v4)
        {
          uint64_t v5 = v4;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10035EFD0();
          }
        }
        else
        {
          if (v7 == 8)
          {
            qword_100468498 = outputStruct;
            goto LABEL_9;
          }
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10035EF38();
          }
          return 4294967290;
        }
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035EEA0();
    }
    return 4294967292;
  }
  return v5;
}

uint64_t sub_10035AB4C()
{
  if ((byte_1004684A1 & 1) == 0)
  {
    if (qword_1004684B8 != -1) {
      dispatch_once(&qword_1004684B8, &stru_10041A9E8);
    }
    if ((byte_1004684B4 & 1) != 0 || byte_100468AA8)
    {
      byte_100468490 = 1;
    }
    else
    {
      if (qword_1004684C8 != -1) {
        dispatch_once(&qword_1004684C8, &stru_10041AA08);
      }
      byte_100468490 = byte_1004684C0;
      if (!byte_1004684C0)
      {
        byte_1004684A1 = 1;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10035F3F8();
        }
        goto LABEL_13;
      }
    }
    CFDictionaryRef v1 = IOServiceMatching("AppleSSE");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10035F198();
      }
      uint64_t v0 = 4294967276;
      goto LABEL_14;
    }
    io_object_t v3 = MatchingService;
    uint64_t v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_10046847C);
    if (v4)
    {
      uint64_t v0 = v4;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10035F360();
      }
      IOObjectRelease(v3);
      goto LABEL_14;
    }
    uint64_t v5 = IONotificationPortCreate(kIOMasterPortDefault);
    qword_1004684A8 = (uint64_t)v5;
    if (v5) {
      goto LABEL_24;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F2C8();
    }
    uint64_t v5 = (IONotificationPort *)qword_1004684A8;
    if (qword_1004684A8)
    {
LABEL_24:
      unsigned int v6 = dispatch_get_global_queue(21, 0);
      IONotificationPortSetDispatchQueue(v5, v6);

      if (IOServiceAddInterestNotification((IONotificationPortRef)qword_1004684A8, v3, "IOGeneralInterest", (IOServiceInterestCallback)sub_10035E020, 0, (io_object_t *)&dword_1004684B0)&& os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10035F230();
      }
    }
    if (qword_1004684C8 != -1) {
      dispatch_once(&qword_1004684C8, &stru_10041AA08);
    }
    if (byte_1004684C1)
    {
      if (qword_1004684B8 != -1) {
        dispatch_once(&qword_1004684B8, &stru_10041A9E8);
      }
      if ((byte_1004684B4 & 1) == 0)
      {
        size_t v7 = fopen("/var/mobile/Library/Logs/AppleSSE.log", "a");
        qword_1004684D0 = (uint64_t)v7;
        if (v7)
        {
          if (ftell(v7) < 1) {
            chmod("/var/mobile/Library/Logs/AppleSSE.log", 0x1B6u);
          }
          else {
            fputs("\n", (FILE *)qword_1004684D0);
          }
          v18[1] = 0;
          *(void *)id v19 = 0x4100000001;
          size_t v17 = 16;
          v18[0] = 0;
          sysctl(v19, 2u, v18, &v17, 0, 0);
          sub_10035E398("AppleSSE Log Starts - System Version %s", v8, v9, v10, v11, v12, v13, v14, (char)v18);
          sub_10035E484(0, 0);
        }
      }
    }
    byte_1004684A1 = 1;
    uint64_t v15 = dispatch_get_global_queue(21, 0);
    dispatch_async(v15, &stru_10041A9C8);

    IOObjectRelease(v3);
    return 0;
  }
  if (byte_100468490) {
    return 0;
  }
LABEL_13:
  uint64_t v0 = 4294967279;
LABEL_14:
  if (dword_1004684B0)
  {
    IOObjectRelease(dword_1004684B0);
    dword_1004684B0 = 0;
  }
  if (qword_1004684A8)
  {
    IONotificationPortDestroy((IONotificationPortRef)qword_1004684A8);
    qword_1004684A8 = 0;
  }
  if (dword_10046847C)
  {
    IOServiceClose(dword_10046847C);
    dword_10046847C = 0;
  }
  return v0;
}

uint64_t SSEGetHostChallenge(CFDataRef *a1)
{
  uint64_t inputStruct = 0;
  uint64_t outputStruct = 0;
  size_t v10 = 0;
  if (a1)
  {
    uint64_t v2 = sub_10035AB4C();
    if (v2)
    {
      uint64_t v8 = v2;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10035F6F0();
      }
    }
    else
    {
      LODWORD(inputStruct) = 1397966179;
      WORD2(inputStruct) = 2;
      size_t v10 = 8;
      uint64_t v3 = IOConnectCallStructMethod(dword_10046847C, 0, &inputStruct, 8uLL, &outputStruct, &v10);
      if (v3)
      {
        uint64_t v8 = v3;
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10035F658();
        }
      }
      else if (v10 == 8)
      {
        CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&outputStruct, 8);
        *a1 = v4;
        if (v4)
        {
          uint64_t v8 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_10035F528();
          }
          uint64_t v8 = 4294967291;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10035F5C0();
        }
        uint64_t v8 = 4294967290;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F490();
    }
    uint64_t v8 = 4294967292;
  }
  sub_10035B114((uint64_t)"SSEGetHostChallenge", v8, 0, 0, 0, v5, v6, v7);
  return v8;
}

uint64_t sub_10035B114(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2 || a3) && qword_1004684D0)
  {
    sub_10035E398("%s() -> %d", a2, a3, a4, a5, a6, a7, a8, result);
    return sub_10035E484(a4, a5);
  }
  return result;
}

uint64_t SSEAuthorizeAndSignECommerceBlob(const __CFData *a1, int a2, const __CFData *a3, char a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, const __CFData **a9)
{
  int v32 = a2;
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F788();
    }
    goto LABEL_38;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F820();
    }
    goto LABEL_38;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F8B8();
    }
    goto LABEL_38;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F950();
    }
    goto LABEL_38;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035F9E8();
    }
    goto LABEL_38;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FA80();
    }
    goto LABEL_38;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FB18();
    }
LABEL_38:
    uint64_t v25 = 4294967292;
    goto LABEL_23;
  }
  size_t v17 = malloc_type_calloc(0x4000uLL, 1uLL, 0x27E86296uLL);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FBB0();
    }
    goto LABEL_44;
  }
  id v18 = v17;
  uint64_t outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x1855B243uLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FC48();
    }
    free(v18);
LABEL_44:
    uint64_t v25 = 4294967291;
    goto LABEL_23;
  }
  uint64_t v19 = sub_10035AB4C();
  if (v19)
  {
    uint64_t v25 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003602D0();
    }
    goto LABEL_60;
  }
  _DWORD *v18 = 1397966179;
  *((_WORD *)v18 + 2) = 15;
  if ((unint64_t)CFDataGetLength(a1) >= 0x41)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FCE0();
    }
    goto LABEL_59;
  }
  v33.length = CFDataGetLength(a1);
  v33.id location = 0;
  CFDataGetBytes(a1, v33, (UInt8 *)v18 + 12);
  void v18[2] = CFDataGetLength(a1);
  v18[19] = a2;
  if ((unint64_t)CFDataGetLength(a3) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FD78();
    }
    goto LABEL_59;
  }
  v34.length = CFDataGetLength(a3);
  v34.id location = 0;
  CFDataGetBytes(a3, v34, (UInt8 *)v18 + 80);
  *((unsigned char *)v18 + 104) = a4;
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360238();
    }
    goto LABEL_59;
  }
  v35.length = CFDataGetLength(a5);
  v35.id location = 0;
  CFDataGetBytes(a5, v35, (UInt8 *)v18 + 105);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003601A0();
    }
    goto LABEL_59;
  }
  v36.length = CFDataGetLength(a6);
  v36.id location = 0;
  CFDataGetBytes(a6, v36, (UInt8 *)v18 + 113);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360108();
    }
    goto LABEL_59;
  }
  v37.length = CFDataGetLength(a7);
  v37.id location = 0;
  CFDataGetBytes(a7, v37, (UInt8 *)v18 + 121);
  if ((unint64_t)CFDataGetLength(a8) >> 2 >= 0xFDD)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FE10();
    }
LABEL_59:
    uint64_t v25 = 4294967292;
LABEL_60:
    uint64_t v21 = outputStruct;
    goto LABEL_22;
  }
  *(_DWORD *)((char *)v18 + 137) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.id location = 0;
  CFDataGetBytes(a8, v38, (UInt8 *)v18 + 141);
  *(void *)((char *)v18 + 129) = 0;
  size_t v20 = *(unsigned int *)((char *)v18 + 137) + 141;
  size_t outputStructCnt = 0x4000;
  uint64_t v21 = outputStruct;
  uint64_t v22 = IOConnectCallStructMethod(dword_10046847C, 0, v18, v20, outputStruct, &outputStructCnt);
  if (v22)
  {
    uint64_t v25 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360070();
    }
    goto LABEL_22;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FEA8();
    }
  }
  else
  {
    CFIndex v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, outputStruct + 4, v23);
      if (v24)
      {
        uint64_t v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_10035FF40();
        }
        uint64_t v25 = 4294967291;
      }
      goto LABEL_22;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_10035FFD8();
    }
  }
  uint64_t v25 = 4294967290;
LABEL_22:
  free(v18);
  free(v21);
LABEL_23:
  sub_10035B114((uint64_t)"SSEAuthorizeAndSignECommerceBlob", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t sub_10035B6BC()
{
  if (qword_1004684E0 != -1) {
    dispatch_once(&qword_1004684E0, &stru_10041AA48);
  }
  uint64_t v0 = (void *)qword_1004684D8;
  if (!qword_1004684D8) {
    return 4294967290;
  }

  return (uint64_t)_[v0 prepare];
}

uint64_t sub_10035B720(int *a1, unint64_t a2, void *a3, _DWORD *a4)
{
  id v8 = +[NSMutableArray array];
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360368();
    }
    goto LABEL_32;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360400();
    }
    goto LABEL_32;
  }
  if ((unint64_t)a1 > a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360498();
    }
    goto LABEL_32;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360530();
    }
    goto LABEL_32;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003605C8();
    }
LABEL_32:
    uint64_t v16 = 4294967292;
    goto LABEL_16;
  }
  if ((unint64_t)a1 < a2)
  {
    if (a2 - (unint64_t)a1 <= 3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100360660();
      }
LABEL_21:
      uint64_t v16 = 4294967290;
      goto LABEL_16;
    }
    int v9 = *a1;
    if (*a1)
    {
      int v10 = 0;
      uint64_t v11 = (unsigned int *)(a1 + 1);
      while (a2 - (unint64_t)v11 > 3)
      {
        unsigned int v14 = *v11;
        uint64_t v12 = v11 + 1;
        uint64_t v13 = v14;
        if ((uint64_t)(a2 - (void)v12) < v14)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100360790();
          }
          goto LABEL_21;
        }
        uint64_t v15 = +[NSData dataWithBytes:v12 length:v13];
        [v8 addObject:v15];

        uint64_t v11 = (_DWORD *)((char *)v12 + v13);
        v10 += v13 + 4;
        if (!--v9) {
          goto LABEL_15;
        }
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1003606F8();
      }
      goto LABEL_21;
    }
  }
  int v10 = 0;
LABEL_15:
  uint64_t v16 = 0;
  *a3 = v8;
  *a4 = v10;
LABEL_16:

  return v16;
}

uint64_t SSEAuthorizeAndSignAPDU(int a1, const __CFData *a2, int a3, const __CFData *a4, const __CFData *a5, const __CFData *a6, const __CFData *a7, const __CFData *a8, CFDataRef *a9)
{
  int v32 = a3;
  size_t outputStructCnt = 0;
  if (a1 != 8 && !a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360828();
    }
    goto LABEL_41;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003608C0();
    }
    goto LABEL_41;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360958();
    }
    goto LABEL_41;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003609F0();
    }
    goto LABEL_41;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360A88();
    }
    goto LABEL_41;
  }
  if (!a8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360B20();
    }
    goto LABEL_41;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360BB8();
    }
LABEL_41:
    uint64_t v25 = 4294967292;
    goto LABEL_26;
  }
  size_t v17 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xE7B35AA9uLL);
  if (!v17)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360C50();
    }
    goto LABEL_47;
  }
  id v18 = v17;
  uint64_t outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x939AC92CuLL);
  if (!outputStruct)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360CE8();
    }
    free(v18);
LABEL_47:
    uint64_t v25 = 4294967291;
    goto LABEL_26;
  }
  uint64_t v19 = sub_10035AB4C();
  if (v19)
  {
    uint64_t v25 = v19;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361370();
    }
    goto LABEL_73;
  }
  *(_DWORD *)id v18 = 1397966179;
  *((_WORD *)v18 + 2) = 31;
  *((_DWORD *)v18 + 2) = a1;
  if (a1 != 8)
  {
    if ((unint64_t)CFDataGetLength(a2) >= 0x41)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1003612D8();
      }
      goto LABEL_72;
    }
    v33.length = CFDataGetLength(a2);
    v33.id location = 0;
    CFDataGetBytes(a2, v33, v18 + 16);
    *((_DWORD *)v18 + 3) = CFDataGetLength(a2);
  }
  *((_DWORD *)v18 + 20) = a3;
  if ((unint64_t)CFDataGetLength(a4) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360D80();
    }
    goto LABEL_72;
  }
  v34.length = CFDataGetLength(a4);
  v34.id location = 0;
  CFDataGetBytes(a4, v34, v18 + 84);
  if (CFDataGetLength(a5) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361240();
    }
    goto LABEL_72;
  }
  v35.length = CFDataGetLength(a5);
  v35.id location = 0;
  CFDataGetBytes(a5, v35, v18 + 108);
  if (CFDataGetLength(a6) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003611A8();
    }
    goto LABEL_72;
  }
  v36.length = CFDataGetLength(a6);
  v36.id location = 0;
  CFDataGetBytes(a6, v36, v18 + 116);
  if (CFDataGetLength(a7) != 8)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361110();
    }
    goto LABEL_72;
  }
  v37.length = CFDataGetLength(a7);
  v37.id location = 0;
  CFDataGetBytes(a7, v37, v18 + 124);
  if ((unint64_t)CFDataGetLength(a8) >= 0x3F79)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360E18();
    }
LABEL_72:
    uint64_t v25 = 4294967292;
LABEL_73:
    uint64_t v21 = outputStruct;
    goto LABEL_25;
  }
  *((_DWORD *)v18 + 33) = CFDataGetLength(a8);
  v38.length = CFDataGetLength(a8);
  v38.id location = 0;
  CFDataGetBytes(a8, v38, v18 + 136);
  size_t v20 = *((unsigned int *)v18 + 33) + 136;
  size_t outputStructCnt = 0x4000;
  uint64_t v21 = outputStruct;
  uint64_t v22 = IOConnectCallStructMethod(dword_10046847C, 0, v18, v20, outputStruct, &outputStructCnt);
  if (v22)
  {
    uint64_t v25 = v22;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361078();
    }
    goto LABEL_25;
  }
  if (outputStructCnt <= 3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360EB0();
    }
  }
  else
  {
    CFIndex v23 = *(unsigned int *)outputStruct;
    if (outputStructCnt == v23 + 4)
    {
      CFDataRef v24 = CFDataCreate(kCFAllocatorDefault, outputStruct + 4, v23);
      if (v24)
      {
        uint64_t v25 = 0;
        *a9 = v24;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          sub_100360F48();
        }
        uint64_t v25 = 4294967291;
      }
      goto LABEL_25;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100360FE0();
    }
  }
  uint64_t v25 = 4294967290;
LABEL_25:
  free(v18);
  free(v21);
LABEL_26:
  sub_10035B114((uint64_t)"SSEAuthorizeAndSignAPDU", v25, 0, (uint64_t)&v32, 0, v26, v27, v28);
  return v25;
}

uint64_t SSEGetSignedDeviceData(const __CFData *a1, CFDataRef *a2)
{
  uint64_t v16 = 0;
  memset(inputStruct, 0, sizeof(inputStruct));
  int v14 = 0;
  memset(outputStruct, 0, sizeof(outputStruct));
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361408();
    }
    goto LABEL_19;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003614A0();
    }
    goto LABEL_19;
  }
  uint64_t v4 = sub_10035AB4C();
  if (v4)
  {
    uint64_t v10 = v4;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361830();
    }
    goto LABEL_10;
  }
  inputStruct[0] = 1397966179;
  LOWORD(inputStruct[1]) = 16;
  if ((unint64_t)CFDataGetLength(a1) >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361538();
    }
LABEL_19:
    uint64_t v10 = 4294967292;
    goto LABEL_10;
  }
  v17.length = CFDataGetLength(a1);
  v17.id location = 0;
  CFDataGetBytes(a1, v17, (UInt8 *)&inputStruct[2]);
  uint64_t v16 = 0;
  size_t outputStructCnt = 260;
  uint64_t v5 = IOConnectCallStructMethod(dword_10046847C, 0, inputStruct, 0x28uLL, outputStruct, &outputStructCnt);
  if (!v5)
  {
    if (outputStructCnt <= 3)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1003615D0();
      }
    }
    else
    {
      if (outputStructCnt == LODWORD(outputStruct[0]) + 4)
      {
        CFDataRef v6 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)outputStruct + 4, LODWORD(outputStruct[0]));
        if (v6)
        {
          uint64_t v10 = 0;
          *a2 = v6;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100361668();
          }
          uint64_t v10 = 4294967291;
        }
        goto LABEL_10;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100361700();
      }
    }
    uint64_t v10 = 4294967290;
    goto LABEL_10;
  }
  uint64_t v10 = v5;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100361798();
  }
LABEL_10:
  sub_10035B114((uint64_t)"SSEGetSignedDeviceData", v10, 0, 0, (uint64_t)&inputStruct[2], v7, v8, v9);
  return v10;
}

uint64_t sub_10035C104()
{
  if (qword_1004684E0 != -1) {
    dispatch_once(&qword_1004684E0, &stru_10041AA48);
  }
  uint64_t v0 = (void *)qword_1004684D8;
  if (!qword_1004684D8) {
    return 4294967290;
  }

  return (uint64_t)_[v0 issueNewCertificate];
}

uint64_t SSECreateSecureElementACLRequest(int a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData **a5, const __CFData **a6)
{
  size_t outputStructCnt = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003618C8();
    }
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361960();
    }
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003619F8();
    }
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361A90();
    }
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361B28();
    }
    return 4294967292;
  }
  uint64_t v12 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xDB9775F9uLL);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361BC0();
    }
    return 4294967291;
  }
  uint64_t v13 = v12;
  int v14 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0x877EE47CuLL);
  if (!v14)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361C58();
    }
    free(v13);
    return 4294967291;
  }
  uint64_t v15 = v14;
  uint64_t v16 = sub_10035AB4C();
  if (v16)
  {
    uint64_t v30 = v16;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003622E0();
    }
    goto LABEL_20;
  }
  *(_DWORD *)uint64_t v13 = 1397966179;
  *((_WORD *)v13 + 2) = 26;
  *((_DWORD *)v13 + 2) = a1;
  unint64_t Length = CFDataGetLength(a2);
  if (Length >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361CF0();
    }
    goto LABEL_47;
  }
  v33.length = Length;
  v33.id location = 0;
  CFDataGetBytes(a2, v33, v13 + 12);
  unint64_t v18 = CFDataGetLength(a3);
  if (v18 >= 0x3FD5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361D88();
    }
    goto LABEL_47;
  }
  unint64_t v19 = v18;
  *((_DWORD *)v13 + 9) = v18;
  v34.id location = 0;
  v34.length = v18;
  CFDataGetBytes(a3, v34, v13 + 44);
  size_t v20 = &v13[v19 + 44];
  unint64_t v21 = CFDataGetLength(a4);
  if (v13 - v20 + 0x4000 < v21)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361E20();
    }
LABEL_47:
    uint64_t v30 = 4294967292;
    goto LABEL_20;
  }
  unint64_t v22 = v21;
  *((_DWORD *)v13 + 10) = v21;
  v35.id location = 0;
  v35.length = v21;
  CFDataGetBytes(a4, v35, v20);
  size_t outputStructCnt = 0x4000;
  uint64_t v23 = IOConnectCallStructMethod(dword_10046847C, 0, v13, &v20[v22] - v13, v15, &outputStructCnt);
  if (v23)
  {
    uint64_t v30 = v23;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362248();
    }
    goto LABEL_20;
  }
  size_t v24 = outputStructCnt;
  if (outputStructCnt <= 7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361EB8();
    }
    goto LABEL_56;
  }
  if (outputStructCnt > 0x4000)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361F50();
    }
    goto LABEL_56;
  }
  unint64_t v25 = *(unsigned int *)v15;
  if (outputStructCnt - 8 < v25)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100361FE8();
    }
LABEL_56:
    uint64_t v30 = 4294967290;
    goto LABEL_20;
  }
  CFDataRef v26 = CFDataCreate(kCFAllocatorDefault, v15 + 8, v25);
  if (!v26)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362080();
    }
    uint64_t v30 = 4294967291;
    goto LABEL_20;
  }
  CFDataRef v27 = v26;
  CFIndex v28 = *((unsigned int *)v15 + 1);
  if ((uint64_t)(v24 - (*(unsigned int *)v15 + 8)) < v28)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362118();
    }
    uint64_t v30 = 4294967290;
    goto LABEL_66;
  }
  CFDataRef v29 = CFDataCreate(kCFAllocatorDefault, &v15[*(unsigned int *)v15 + 8], v28);
  if (!v29)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003621B0();
    }
    uint64_t v30 = 4294967291;
LABEL_66:
    CFRelease(v27);
    goto LABEL_20;
  }
  uint64_t v30 = 0;
  *a5 = v27;
  *a6 = v29;
LABEL_20:
  free(v13);
  free(v15);
  return v30;
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, int a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFString *a6, const __CFData *a7, unsigned int a8, const __CFData **a9, const __CFData **a10)
{
  size_t outputStructCnt = 0;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362378();
    }
    return 4294967292;
  }
  if (!a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362410();
    }
    return 4294967292;
  }
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003624A8();
    }
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362540();
    }
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003625D8();
    }
    return 4294967292;
  }
  if (!a7)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362670();
    }
    return 4294967292;
  }
  if (a8 - 4 <= 0xFFFFFFFC)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362708();
    }
    return 4294967292;
  }
  if (!a9)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003627A0();
    }
    return 4294967292;
  }
  if (!a10)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100362838();
    }
    return 4294967292;
  }
  if (a8 < 2 || (uint64_t v18 = SSEIsFeatureSupported(32), !v18))
  {
    unint64_t v19 = (char *)malloc_type_calloc(0x4000uLL, 1uLL, 0x29CD736uLL);
    if (v19)
    {
      size_t v20 = v19;
      uint64_t outputStruct = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xAE84491FuLL);
      if (outputStruct)
      {
        uint64_t v21 = sub_10035AB4C();
        if (v21)
        {
          uint64_t v46 = v21;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100363250();
          }
          goto LABEL_73;
        }
        *(_DWORD *)size_t v20 = 1397966179;
        uint64_t v20[4] = 27;
        v20[5] = a8 > 1;
        unint64_t Length = CFDataGetLength(a1);
        if (Length >= 0x41)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100362A00();
          }
        }
        else
        {
          int v23 = Length;
          v50.id location = 0;
          v50.length = Length;
          CFDataGetBytes(a1, v50, (UInt8 *)v20 + 12);
          *((_DWORD *)v20 + 2) = v23;
          *((_DWORD *)v20 + 19) = a2;
          unint64_t v24 = CFDataGetLength(a3);
          if (v24 >= 0x19)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100362A98();
            }
          }
          else
          {
            v51.length = v24;
            v51.id location = 0;
            CFDataGetBytes(a3, v51, (UInt8 *)v20 + 80);
            unint64_t v25 = v20 + 0x4000;
            if (a8 < 2)
            {
              CFDataRef v26 = (UInt8 *)(v20 + 120);
            }
            else
            {
              v20[120] = a8;
              CFDataRef v26 = (UInt8 *)(v20 + 121);
            }
            unint64_t v27 = CFDataGetLength(a4);
            if (v25 - (char *)v26 < v27)
            {
              if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                sub_100362B30();
              }
            }
            else
            {
              unint64_t v28 = v27;
              *((_DWORD *)v20 + 26) = v27;
              v52.id location = 0;
              v52.length = v27;
              CFDataGetBytes(a4, v52, v26);
              CFDataRef v29 = &v26[v28];
              unint64_t v30 = CFDataGetLength(a5);
              if (v25 - (char *)v29 < v30)
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_100362BC8();
                }
              }
              else
              {
                unint64_t v31 = v30;
                *((_DWORD *)v20 + 27) = v30;
                v53.id location = 0;
                v53.length = v30;
                CFDataGetBytes(a5, v53, v29);
                int v32 = &v29[v31];
                unint64_t v33 = CFStringGetLength(a6);
                if (v25 - (char *)v32 >= v33)
                {
                  unint64_t v34 = v33;
                  v54.id location = 0;
                  v54.length = v33;
                  if (CFStringGetBytes(a6, v54, 0x8000100u, 0, 0, v32, v25 - (char *)v32, 0) == v33)
                  {
                    *((_DWORD *)v20 + 28) = v34;
                    CFRange v35 = &v32[v34];
                    unint64_t v36 = CFDataGetLength(a7);
                    if (v25 - (char *)v35 < v36)
                    {
                      CFRange v38 = outputStruct;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_100362CF8();
                      }
                      uint64_t v46 = 4294967292;
                      goto LABEL_33;
                    }
                    unint64_t v37 = v36;
                    *((_DWORD *)v20 + 29) = v36;
                    v55.id location = 0;
                    v55.length = v36;
                    CFDataGetBytes(a7, v55, v35);
                    size_t outputStructCnt = 0x4000;
                    CFRange v38 = outputStruct;
                    uint64_t v39 = IOConnectCallStructMethod(dword_10046847C, 0, v20, &v35[v37] - (UInt8 *)v20, outputStruct, &outputStructCnt);
                    if (v39)
                    {
                      uint64_t v46 = v39;
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_100363120();
                      }
                      goto LABEL_33;
                    }
                    size_t v40 = outputStructCnt;
                    if (outputStructCnt <= 7)
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_100362D90();
                      }
                    }
                    else if (outputStructCnt > 0x4000)
                    {
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_100362E28();
                      }
                    }
                    else
                    {
                      unint64_t v41 = *(unsigned int *)outputStruct;
                      if (outputStructCnt - 8 >= v41)
                      {
                        CFDataRef v42 = CFDataCreate(kCFAllocatorDefault, outputStruct + 8, v41);
                        if (!v42)
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            sub_100362F58();
                          }
                          uint64_t v46 = 4294967291;
                          goto LABEL_33;
                        }
                        CFDataRef v43 = v42;
                        CFIndex v44 = *((unsigned int *)outputStruct + 1);
                        if ((uint64_t)(v40 - (*(unsigned int *)outputStruct + 8)) < v44)
                        {
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            sub_100362FF0();
                          }
                          uint64_t v46 = 4294967290;
                        }
                        else
                        {
                          CFDataRef v45 = CFDataCreate(kCFAllocatorDefault, &outputStruct[*(unsigned int *)outputStruct + 8], v44);
                          if (v45)
                          {
                            uint64_t v46 = 0;
                            *a9 = v43;
                            *a10 = v45;
LABEL_33:
                            free(v20);
                            free(v38);
                            return v46;
                          }
                          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                            sub_100363088();
                          }
                          uint64_t v46 = 4294967291;
                        }
                        CFRelease(v43);
                        goto LABEL_33;
                      }
                      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                        sub_100362EC0();
                      }
                    }
                    uint64_t v46 = 4294967290;
                    goto LABEL_33;
                  }
                  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                    sub_1003631B8();
                  }
                  uint64_t v46 = 4294967290;
LABEL_73:
                  CFRange v38 = outputStruct;
                  goto LABEL_33;
                }
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_100362C60();
                }
              }
            }
          }
        }
        uint64_t v46 = 4294967292;
        goto LABEL_73;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100362968();
      }
      free(v20);
    }
    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1003628D0();
    }
    return 4294967291;
  }
  uint64_t v46 = v18;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_1003632E8();
  }
  return v46;
}

uint64_t sub_10035CC80(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, CFDataRef *a6)
{
  size_t outputStructCnt = 0;
  uint64_t v32 = 0;
  *(_OWORD *)buffer = 0u;
  long long v31 = 0u;
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363380();
    }
    goto LABEL_54;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363418();
    }
LABEL_54:
    unint64_t v19 = 0;
    uint64_t v26 = 4294967292;
    goto LABEL_42;
  }
  uint64_t v12 = malloc_type_calloc(0x4000uLL, 1uLL, 0xAA037781uLL);
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003634B0();
    }
    goto LABEL_60;
  }
  uint64_t v13 = v12;
  int v14 = (UInt8 *)malloc_type_calloc(0x4000uLL, 1uLL, 0xE079FC04uLL);
  if (!v14)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363548();
    }
    free(v13);
LABEL_60:
    unint64_t v19 = 0;
    uint64_t v26 = 4294967291;
    goto LABEL_42;
  }
  uint64_t v15 = v14;
  uint64_t v16 = sub_10035AB4C();
  if (v16)
  {
    uint64_t v26 = v16;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363D04();
    }
    unint64_t v19 = 0;
    goto LABEL_41;
  }
  unint64_t Length = CFDataGetLength(a1);
  if (Length >= 0x19)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_1003635E0();
    }
    goto LABEL_83;
  }
  v33.length = Length;
  v33.id location = 0;
  CFDataGetBytes(a1, v33, buffer);
  if (a2)
  {
    if (CFDataGetLength(a2) >= (uint64_t)&_mh_execute_header)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100363C6C();
      }
      goto LABEL_83;
    }
    DWORD2(v31) = CFDataGetLength(a2);
  }
  if (a3)
  {
    if (CFDataGetLength(a3) >= (uint64_t)&_mh_execute_header)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100363BD4();
      }
      goto LABEL_83;
    }
    HIDWORD(v31) = CFDataGetLength(a3);
  }
  if (a4)
  {
    if (CFDataGetLength(a4) >= (uint64_t)&_mh_execute_header)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100363B3C();
      }
      goto LABEL_83;
    }
    LODWORD(v32) = CFDataGetLength(a4);
  }
  if (!a5)
  {
LABEL_19:
    uint64_t v18 = +[NSMutableData dataWithBytes:buffer length:40];
    unint64_t v19 = v18;
    if (a2) {
      [(NSMutableData *)v18 appendData:a2];
    }
    if (a3) {
      [(NSMutableData *)v19 appendData:a3];
    }
    if (a4) {
      [(NSMutableData *)v19 appendData:a4];
    }
    if (a5) {
      [(NSMutableData *)v19 appendData:a5];
    }
    if (!([(NSMutableData *)v19 length] >> 32))
    {
      unint64_t v28 = a6;
      LODWORD(v20) = 0;
      while (1)
      {
        *uint64_t v13 = 1397966179;
        *((_WORD *)v13 + 2) = 29;
        unsigned int v21 = ([(NSMutableData *)v19 length]- v20) >> 2 > 0xFFA? 16364: [(NSMutableData *)v19 length] - v20;
        v13[2] = [(NSMutableData *)v19 length];
        v13[3] = v20;
        void v13[4] = v21;
        unint64_t v22 = v19;
        [(NSMutableData *)v22 bytes];
        __memcpy_chk();
        size_t outputStructCnt = 0x4000;
        uint64_t v23 = IOConnectCallStructMethod(dword_10046847C, 0, v13, v21 + 20, v15, &outputStructCnt);
        if (v23) {
          break;
        }
        if (outputStructCnt <= 3)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_100363710();
          }
          goto LABEL_49;
        }
        if (outputStructCnt > 0x4000)
        {
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
            sub_1003637A8();
          }
          goto LABEL_49;
        }
        unint64_t v20 = v20 + v21;
        if ([(NSMutableData *)v22 length] <= v20)
        {
          if (outputStructCnt <= 3)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100363840();
            }
          }
          else
          {
            CFIndex v24 = *(unsigned int *)v15;
            if (outputStructCnt - 4 == v24)
            {
              CFDataRef v25 = CFDataCreate(kCFAllocatorDefault, v15 + 4, v24);
              if (v25)
              {
                uint64_t v26 = 0;
                *unint64_t v28 = v25;
              }
              else
              {
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
                  sub_1003638D8();
                }
                uint64_t v26 = 4294967291;
              }
              goto LABEL_40;
            }
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_100363970();
            }
          }
LABEL_49:
          uint64_t v26 = 4294967290;
          goto LABEL_40;
        }
      }
      uint64_t v26 = v23;
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_100363A08();
      }
LABEL_40:
      unint64_t v19 = v22;
      goto LABEL_41;
    }
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363678();
    }
    goto LABEL_84;
  }
  if (CFDataGetLength(a5) < (uint64_t)&_mh_execute_header)
  {
    HIDWORD(v32) = CFDataGetLength(a5);
    goto LABEL_19;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100363AA4();
  }
LABEL_83:
  unint64_t v19 = 0;
LABEL_84:
  uint64_t v26 = 4294967292;
LABEL_41:
  free(v13);
  free(v15);
LABEL_42:

  return v26;
}

uint64_t SSEGetRosePairingInfo(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFData *a5, const __CFData **a6)
{
  if (!a1)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363D9C();
    }
    return 4294967292;
  }
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363E34();
    }
    return 4294967292;
  }
  if (!a5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363ECC();
    }
    return 4294967292;
  }
  if (!a6)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_100363F64();
    }
    return 4294967292;
  }
  uint64_t v6 = sub_10035CC80(a1, a2, a3, a4, a5, a6);
  if (v6 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
    sub_100363FFC();
  }
  return v6;
}

uint64_t SSEEvaluateSecureElementACL(const __CFData *a1, const __CFData *a2, const __CFData *a3, const __CFData *a4, const __CFString *a5, const __CFData *a6, unsigned int a7, const __CFData **a8, const __CFData **a9)
{
  return SSEEvaluateSecureElementACL(a1, -1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_10035E020(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == -469794813)
  {
    uint64_t v5 = (id)qword_100468488;
    uint64_t v6 = v5;
    if (!v5) {
      uint64_t v6 = dispatch_get_global_queue(21, 0);
    }
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10035E374;
    v9[3] = &unk_10040D278;
    v9[4] = a4;
    uint64_t v7 = v9;
    goto LABEL_10;
  }
  if (a3 == -469794814)
  {
    if (!byte_100468AA9)
    {
      uint64_t v8 = dispatch_get_global_queue(21, 0);
      dispatch_async(v8, &stru_10041AA28);
    }
    goto LABEL_14;
  }
  if (a3 != -469794815)
  {
LABEL_14:
    uint64_t v5 = 0;
    goto LABEL_15;
  }
  uint64_t v5 = (id)qword_100468480;
  uint64_t v6 = v5;
  if (!v5) {
    uint64_t v6 = dispatch_get_global_queue(21, 0);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10035E34C;
  v10[3] = &unk_10040D278;
  v10[4] = a4;
  uint64_t v7 = v10;
LABEL_10:
  dispatch_async(v6, v7);
  if (!v5) {

  }
LABEL_15:
}

void sub_10035E1DC(id a1)
{
  size_t v3 = 1024;
  if (!sysctlbyname("kern.bootargs", __str, &v3, 0, 0))
  {
    __lasts = 0;
    CFDictionaryRef v1 = strtok_r(__str, " \t", &__lasts);
    if (v1)
    {
      while (strcmp(v1, "rd=md0"))
      {
        CFDictionaryRef v1 = strtok_r(0, " \t", &__lasts);
        if (!v1) {
          return;
        }
      }
      byte_1004684B4 = 1;
    }
  }
}

void sub_10035E2BC(id a1)
{
  CFDictionaryRef v1 = dlopen("/usr/lib/libMobileGestalt.dylib", 1);
  if (v1)
  {
    uint64_t v2 = v1;
    size_t v3 = (uint64_t (*)(const __CFString *))dlsym(v1, "MGGetBoolAnswer");
    if (v3)
    {
      uint64_t v4 = v3;
      byte_1004684C0 = v3(@"0dnM19zBqLw5ZPhIo4GEkg");
      byte_1004684C1 = v4(@"InternalBuild");
    }
    dlclose(v2);
  }
}

uint64_t sub_10035E34C()
{
  uint64_t result = qword_100468468;
  if (qword_100468468) {
    return (*(uint64_t (**)(void))(qword_100468468 + 16))();
  }
  return result;
}

uint64_t sub_10035E374()
{
  uint64_t result = qword_100468470;
  if (qword_100468470) {
    return (*(uint64_t (**)(void))(qword_100468470 + 16))();
  }
  return result;
}

const char *sub_10035E398(const char *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (qword_1004684D0)
  {
    uint64_t v9 = result;
    *(_OWORD *)int v14 = 0u;
    long long v15 = 0u;
    time_t v13 = time(0);
    uint64_t v10 = localtime(&v13);
    strftime(v14, 0x20uLL, "%F %T (%z)", v10);
    uint64_t v11 = (FILE *)qword_1004684D0;
    uint64_t v12 = getprogname();
    fprintf(v11, "%s [%s]: ", v14, v12);
    vfprintf((FILE *)qword_1004684D0, v9, &a9);
    fputs("\n", (FILE *)qword_1004684D0);
    return (const char *)fflush((FILE *)qword_1004684D0);
  }
  return result;
}

uint64_t sub_10035E484(uint64_t result, uint64_t a2)
{
  if (qword_1004684D0)
  {
    size_t v3 = (_DWORD *)result;
    uint64_t inputStruct = 0x953534563;
    long long v7 = 0u;
    long long v8 = 0u;
    long long outputStruct = 0u;
    size_t outputStructCnt = 48;
    uint64_t result = IOConnectCallStructMethod(dword_10046847C, 0, &inputStruct, 8uLL, &outputStruct, &outputStructCnt);
    if (!result)
    {
      if (v3) {
        fprintf((FILE *)qword_1004684D0, "\tuserID        = %u\n", *v3);
      }
      if (a2)
      {
        fwrite("\tseid          = ", 0x11uLL, 1uLL, (FILE *)qword_1004684D0);
        for (uint64_t i = 0; i != 24; ++i)
          fprintf((FILE *)qword_1004684D0, "%02x", *(unsigned __int8 *)(a2 + i));
        fputs("\n", (FILE *)qword_1004684D0);
      }
      fprintf((FILE *)qword_1004684D0, "\tsseKey hash   = %016llx\n", (void)outputStruct);
      fprintf((FILE *)qword_1004684D0, "\tauthRand hash = %016llx\n", *((void *)&outputStruct + 1));
      fprintf((FILE *)qword_1004684D0, "\tsubcounter    = %llu\n", (void)v7);
      fprintf((FILE *)qword_1004684D0, "\tentropy hash  = %016llx\n", *((void *)&v7 + 1));
      fprintf((FILE *)qword_1004684D0, "\tkeybag hash   = %016llx\n", (void)v8);
      fprintf((FILE *)qword_1004684D0, "\tnoPasscodeCnt = %u\n", DWORD2(v8));
      return fflush((FILE *)qword_1004684D0);
    }
  }
  return result;
}

void sub_10035E618(id a1)
{
  if (qword_1004684B8 != -1) {
    dispatch_once(&qword_1004684B8, &stru_10041A9E8);
  }
  if ((byte_1004684B4 & 1) == 0)
  {
    sub_10035AB4C();
    if (byte_100468490)
    {
      if (qword_1004684F0 != -1) {
        dispatch_once(&qword_1004684F0, &stru_10041AA68);
      }
      if (byte_1004684E8 == 1)
      {
        if (dlopen("/usr/lib/libAppleSSEExt.dylib", 1))
        {
          Class Class = objc_getClass("BAASupport");
          qword_1004684D8 = (uint64_t)Class;
          if (!Class)
          {
            if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
              sub_10036555C();
            }
            Class Class = (Class)qword_1004684D8;
          }
          [(objc_class *)Class setDelegate:objc_opt_class()];
        }
        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1003654C4();
        }
      }
    }
  }
}

void sub_10035E73C(id a1)
{
  CFDictionaryRef v1 = +[NSProcessInfo processInfo];
  uint64_t v2 = [(NSProcessInfo *)v1 processName];
  unsigned int v3 = [(NSString *)v2 isEqualToString:@"nfcd"];

  if (v3)
  {
    byte_1004684E8 = 1;
  }
  else
  {
    uint64_t v4 = dlopen("/System/Library/Frameworks/Security.framework/Security", 1);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = (uint64_t (*)(const CFAllocatorRef))dlsym(v4, "SecTaskCreateFromSelf");
      if (v6)
      {
        uint64_t v7 = v6(kCFAllocatorDefault);
        if (v7)
        {
          long long v8 = (const void *)v7;
          uint64_t v9 = (uint64_t (*)(const void *, const __CFString *, void))dlsym(v5, "SecTaskCopyValueForEntitlement");
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = (void *)v9(v8, @"com.apple.private.applesse.allow", 0);
            uint64_t v12 = (void *)v10(v8, @"com.apple.private.applesse.baa", 0);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              if ([v11 BOOLValue])
              {
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  if ([v12 BOOLValue]) {
                    byte_1004684E8 = 1;
                  }
                }
              }
            }
          }
          CFRelease(v8);
        }
      }
      dlclose(v5);
    }
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = byte_1004684E8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "isEntitledForBAA(): entitled = %u", (uint8_t *)v13, 8u);
  }
}

void sub_10035E984(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x30u);
}

void sub_10035E9E0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EA78()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EB10()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EBA8()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EC40()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035ECD8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035ED70()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EE08()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EEA0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EF38()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035EFD0()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F068()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F100()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F198()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F230()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F2C8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F360()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F3F8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F490()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F528()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F5C0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F658()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F6F0()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F788()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F820()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F8B8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F950()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035F9E8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FA80()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FB18()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FBB0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FC48()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FCE0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FD78()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FE10()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FEA8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FF40()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10035FFD8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360070()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360108()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003601A0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360238()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003602D0()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360368()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360400()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360498()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360530()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003605C8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360660()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003606F8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360790()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360828()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003608C0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360958()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003609F0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360A88()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360B20()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360BB8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360C50()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360CE8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360D80()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360E18()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360EB0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360F48()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100360FE0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361078()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361110()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003611A8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361240()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003612D8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361370()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361408()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003614A0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361538()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003615D0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361668()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361700()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361798()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361830()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003618C8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361960()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003619F8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361A90()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361B28()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361BC0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361C58()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361CF0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361D88()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361E20()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361EB8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361F50()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100361FE8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362080()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362118()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003621B0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362248()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003622E0()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362378()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362410()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003624A8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362540()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003625D8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362670()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362708()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003627A0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362838()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003628D0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362968()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362A00()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362A98()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362B30()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362BC8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362C60()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362CF8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362D90()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362E28()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362EC0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362F58()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100362FF0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363088()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363120()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003631B8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363250()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003632E8()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363380()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363418()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003634B0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363548()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003635E0()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363678()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363710()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003637A8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363840()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003638D8()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363970()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363A08()
{
  sub_10035E9C0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, 2u);
}

void sub_100363AA4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363B3C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363BD4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363C6C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363D04()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363D9C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363E34()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363ECC()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363F64()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100363FFC()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364094()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036412C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003641C4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036425C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003642F4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036438C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364424()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003644BC()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364554()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003645EC()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364684()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036471C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003647B4()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036484C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003648E4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036497C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364A14()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364AAC()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364B44()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364BDC()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364C74()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364D0C()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364DA4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364E3C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364ED4()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100364F6C()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100365004()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036509C()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100365134()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003651CC()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100365264()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003652FC()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_100365394()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036542C()
{
  sub_10035E9A0();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003654C4()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_10036555C()
{
  sub_10035E950();
  sub_10035E970();
  sub_10035E984((void *)&_mh_execute_header, &_os_log_default, v0, "AssertMacros: %s (value = 0x%lx), %s file: %s, line: %d\n", v1, v2, v3, v4, v5);
}

void sub_1003655F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = sub_100039480(*(id *)(a2 + 48), (const char *)a2);
  int v4 = 138412546;
  uint64_t v5 = v2;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_fault_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_FAULT, "Selecting endpoint by name instead of PKID %@ client %@", (uint8_t *)&v4, 0x16u);
}

void sub_1003656A0(NSObject *a1)
{
  if (os_signpost_enabled(a1)) {
    sub_10004EC98((void *)&_mh_execute_header, v1, v2, v3, "PTA_CREATE_ENDPOINT", "", v4, v5, 0);
  }
}

void sub_1003656F0(NSObject *a1)
{
  if (os_signpost_enabled(a1)) {
    sub_10004EC98((void *)&_mh_execute_header, v1, v2, v3, "PTA_DELETE_ENDPOINT", "", v4, v5, 0);
  }
}

void sub_100365740(NSObject *a1)
{
  if (os_signpost_enabled(a1)) {
    sub_10004EC98((void *)&_mh_execute_header, v1, v2, v3, "PTA_CREATE_ENDPOINTCA", "", v4, v5, 0);
  }
}

void sub_100365790(NSObject *a1)
{
  if (os_signpost_enabled(a1)) {
    sub_10004EC98((void *)&_mh_execute_header, v1, v2, v3, "PTA_DELETE_ENDPOINTCA", "", v4, v5, 0);
  }
}

uint64_t URLRequest.httpMethod.setter()
{
  return URLRequest.httpMethod.setter();
}

uint64_t URLRequest.allHTTPHeaderFields.getter()
{
  return URLRequest.allHTTPHeaderFields.getter();
}

uint64_t URLRequest.init(url:cachePolicy:timeoutInterval:)()
{
  return URLRequest.init(url:cachePolicy:timeoutInterval:)();
}

uint64_t URLRequest.url.getter()
{
  return URLRequest.url.getter();
}

Swift::String_optional __swiftcall URLRequest.value(forHTTPHeaderField:)(Swift::String forHTTPHeaderField)
{
  uint64_t v1 = URLRequest.value(forHTTPHeaderField:)(forHTTPHeaderField._countAndFlagsBits, forHTTPHeaderField._object);
  result.value._object = v2;
  result.value._countAndFlagsBits = v1;
  return result;
}

Swift::Void __swiftcall URLRequest.addValue(_:forHTTPHeaderField:)(Swift::String _, Swift::String forHTTPHeaderField)
{
}

uint64_t URLRequest.httpBody.getter()
{
  return URLRequest.httpBody.getter();
}

uint64_t URLRequest.httpBody.setter()
{
  return URLRequest.httpBody.setter();
}

Swift::Void __swiftcall URLRequest.setValue(_:forHTTPHeaderField:)(Swift::String_optional _, Swift::String forHTTPHeaderField)
{
}

uint64_t type metadata accessor for URLRequest()
{
  return type metadata accessor for URLRequest();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of JSONDecoder.decode<A>(_:from:)();
}

uint64_t JSONDecoder.init()()
{
  return JSONDecoder.init()();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return type metadata accessor for JSONDecoder();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t JSONEncoder.init()()
{
  return JSONEncoder.init()();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return type metadata accessor for JSONEncoder();
}

uint64_t DataProtocol.copyBytes<A>(to:from:)()
{
  return DataProtocol.copyBytes<A>(to:from:)();
}

uint64_t __DataStorage.init(bytes:length:copy:deallocator:offset:)()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t __DataStorage.init(bytes:length:)()
{
  return __DataStorage.init(bytes:length:)();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage.init(length:)()
{
  return __DataStorage.init(length:)();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t __DataStorage.init(capacity:)()
{
  return __DataStorage.init(capacity:)();
}

uint64_t type metadata accessor for __DataStorage()
{
  return type metadata accessor for __DataStorage();
}

uint64_t dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)()
{
  return dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
}

uint64_t URLResourceValues.isRegularFile.getter()
{
  return URLResourceValues.isRegularFile.getter();
}

uint64_t type metadata accessor for URLResourceValues()
{
  return type metadata accessor for URLResourceValues();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return NSFastEnumerationIterator.next()();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t URL.description.getter()
{
  return URL.description.getter();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return type metadata accessor for URL.DirectoryHint();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

uint64_t URL.pathComponents.getter()
{
  return URL.pathComponents.getter();
}

uint64_t URL.resourceValues(forKeys:)()
{
  return URL.resourceValues(forKeys:)();
}

uint64_t URL.lastPathComponent.getter()
{
  return URL.lastPathComponent.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t URL.appending<A>(components:directoryHint:)()
{
  return URL.appending<A>(components:directoryHint:)();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return URL.appending<A>(path:directoryHint:)();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return URL.appending<A>(component:directoryHint:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

Swift::Void __swiftcall Data.LargeSlice.ensureUniqueReference()()
{
}

Swift::Void __swiftcall Data.InlineSlice.ensureUniqueReference()()
{
}

uint64_t Data.description.getter()
{
  return Data.description.getter();
}

uint64_t Data.init(base64Encoded:options:)()
{
  return Data.init(base64Encoded:options:)();
}

uint64_t type metadata accessor for Data.RangeReference()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t Data.RangeReference.__deallocating_deinit()
{
  return Data.RangeReference.__deallocating_deinit();
}

uint64_t Data._Representation.replaceSubrange(_:with:count:)()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

uint64_t Data._Representation.append(contentsOf:)()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t Data._Representation.subscript.getter()
{
  return Data._Representation.subscript.getter();
}

uint64_t Data._Representation.subscript.setter()
{
  return Data._Representation.subscript.setter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1 = Data.base64EncodedString(options:)(options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Data._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t Data.append(_:)()
{
  return Data.append(_:)();
}

uint64_t Data.subdata(in:)()
{
  return Data.subdata(in:)();
}

Swift::UInt8_optional __swiftcall Data.Iterator.next()()
{
  return (Swift::UInt8_optional)Data.Iterator.next()();
}

uint64_t type metadata accessor for Data.Iterator()
{
  return type metadata accessor for Data.Iterator();
}

uint64_t Data.Iterator.init(_:at:)()
{
  return Data.Iterator.init(_:at:)();
}

uint64_t Data.subscript.getter()
{
  return Data.subscript.getter();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t Date.timeIntervalSinceNow.getter()
{
  return Date.timeIntervalSinceNow.getter();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return Date.timeIntervalSince1970.getter();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t Date.init()()
{
  return Date.init()();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.init(uuidString:)()
{
  return UUID.init(uuidString:)();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.< infix(_:_:)()
{
  return static UUID.< infix(_:_:)();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init(uuid:)()
{
  return UUID.init(uuid:)();
}

uint64_t UUID.uuid.getter()
{
  return UUID.uuid.getter();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t type metadata accessor for Calendar.Identifier()
{
  return type metadata accessor for Calendar.Identifier();
}

uint64_t Calendar.init(identifier:)()
{
  return Calendar.init(identifier:)();
}

uint64_t Calendar.startOfDay(for:)()
{
  return Calendar.startOfDay(for:)();
}

uint64_t Calendar.timeZone.setter()
{
  return Calendar.timeZone.setter();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t TimeZone.init(abbreviation:)()
{
  return TimeZone.init(abbreviation:)();
}

uint64_t type metadata accessor for TimeZone()
{
  return type metadata accessor for TimeZone();
}

uint64_t dispatch thunk of CBOREncoder.encode<A>(_:)()
{
  return dispatch thunk of CBOREncoder.encode<A>(_:)();
}

uint64_t CBOREncoder.init()()
{
  return CBOREncoder.init()();
}

uint64_t type metadata accessor for CBOREncoder()
{
  return type metadata accessor for CBOREncoder();
}

uint64_t COSEKey.init(ec2CurveIdentifier:x:y:d:algorithm:keyOperations:keyIdentifier:)()
{
  return COSEKey.init(ec2CurveIdentifier:x:y:d:algorithm:keyOperations:keyIdentifier:)();
}

uint64_t type metadata accessor for COSEKey()
{
  return type metadata accessor for COSEKey();
}

uint64_t static OSEligibilityAnswer.== infix(_:_:)()
{
  return static OSEligibilityAnswer.== infix(_:_:)();
}

uint64_t type metadata accessor for OSEligibilityAnswer()
{
  return type metadata accessor for OSEligibilityAnswer();
}

uint64_t type metadata accessor for OSEligibilityDomain()
{
  return type metadata accessor for OSEligibilityDomain();
}

uint64_t OSEligibilityResult.answer.getter()
{
  return OSEligibilityResult.answer.getter();
}

uint64_t static OSEligibilityResult.result(for:auditToken:)()
{
  return static OSEligibilityResult.result(for:auditToken:)();
}

uint64_t static OSEligibilityResult.result(for:bundleID:persona:)()
{
  return static OSEligibilityResult.result(for:bundleID:persona:)();
}

uint64_t static OSEligibilityResult.result(for:)()
{
  return static OSEligibilityResult.result(for:)();
}

uint64_t type metadata accessor for OSEligibilityResult()
{
  return type metadata accessor for OSEligibilityResult();
}

uint64_t static _CFObject.== infix(_:_:)()
{
  return static _CFObject.== infix(_:_:)();
}

uint64_t _CFObject.hash(into:)()
{
  return _CFObject.hash(into:)();
}

uint64_t _CFObject.hashValue.getter()
{
  return _CFObject.hashValue.getter();
}

uint64_t Regex.init(_regexString:version:)()
{
  return Regex.init(_regexString:version:)();
}

uint64_t Regex.firstMatch(in:)()
{
  return Regex.firstMatch(in:)();
}

uint64_t Regex.Match.output.getter()
{
  return Regex.Match.output.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t Logger.init(subsystem:category:)()
{
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t XPC_BOOL_TRUE.getter()
{
  return XPC_BOOL_TRUE.getter();
}

uint64_t XPC_EVENT_KEY_NAME.getter()
{
  return XPC_EVENT_KEY_NAME.getter();
}

uint64_t static XPCListener.InitializationOptions.none.getter()
{
  return static XPCListener.InitializationOptions.none.getter();
}

uint64_t type metadata accessor for XPCListener.InitializationOptions()
{
  return type metadata accessor for XPCListener.InitializationOptions();
}

uint64_t dispatch thunk of XPCListener.IncomingSessionRequest.accept(incomingMessageHandler:cancellationHandler:)()
{
  return dispatch thunk of XPCListener.IncomingSessionRequest.accept(incomingMessageHandler:cancellationHandler:)();
}

uint64_t XPCListener.init(service:targetQueue:options:incomingSessionHandler:)()
{
  return XPCListener.init(service:targetQueue:options:incomingSessionHandler:)();
}

uint64_t type metadata accessor for XPCListener()
{
  return type metadata accessor for XPCListener();
}

uint64_t XPCReceivedMessage.auditToken.getter()
{
  return XPCReceivedMessage.auditToken.getter();
}

Swift::Void __swiftcall XPCReceivedMessage.detachHandoff()()
{
}

uint64_t XPCReceivedMessage.reply<A>(_:)()
{
  return XPCReceivedMessage.reply<A>(_:)();
}

uint64_t XPCReceivedMessage.decode<A>(as:)()
{
  return XPCReceivedMessage.decode<A>(as:)();
}

uint64_t type metadata accessor for XPCReceivedMessage()
{
  return type metadata accessor for XPCReceivedMessage();
}

uint64_t DispatchSpecificKey.init()()
{
  return DispatchSpecificKey.init()();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t static DispatchQoS.default.getter()
{
  return static DispatchQoS.default.getter();
}

uint64_t DispatchQoS.init(qosClass:relativePriority:)()
{
  return DispatchQoS.init(qosClass:relativePriority:)();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t static DispatchTime.now()()
{
  return static DispatchTime.now()();
}

uint64_t DispatchTime.advanced(by:)()
{
  return DispatchTime.advanced(by:)();
}

uint64_t type metadata accessor for DispatchTime()
{
  return type metadata accessor for DispatchTime();
}

uint64_t type metadata accessor for DispatchPredicate()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t + infix(_:_:)()
{
  return + infix(_:_:)();
}

{
  return + infix(_:_:)();
}

uint64_t _dispatchPreconditionTest(_:)()
{
  return _dispatchPreconditionTest(_:)();
}

uint64_t dispatch thunk of HashFunction.update(bufferPointer:)()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

uint64_t dispatch thunk of HashFunction.finalize()()
{
  return dispatch thunk of HashFunction.finalize()();
}

uint64_t dispatch thunk of HashFunction.init()()
{
  return dispatch thunk of HashFunction.init()();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return type metadata accessor for SHA256Digest();
}

uint64_t type metadata accessor for SHA384Digest()
{
  return type metadata accessor for SHA384Digest();
}

uint64_t SharedSecret.withUnsafeBytes<A>(_:)()
{
  return SharedSecret.withUnsafeBytes<A>(_:)();
}

uint64_t SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)()
{
  return SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
}

uint64_t type metadata accessor for SharedSecret()
{
  return type metadata accessor for SharedSecret();
}

uint64_t SymmetricKey.withUnsafeBytes<A>(_:)()
{
  return SymmetricKey.withUnsafeBytes<A>(_:)();
}

uint64_t SymmetricKey.init<A>(data:)()
{
  return SymmetricKey.init<A>(data:)();
}

uint64_t type metadata accessor for SymmetricKey()
{
  return type metadata accessor for SymmetricKey();
}

uint64_t static AES.GCM.open(_:using:)()
{
  return static AES.GCM.open(_:using:)();
}

uint64_t static AES.GCM.seal<A>(_:using:nonce:)()
{
  return static AES.GCM.seal<A>(_:using:nonce:)();
}

uint64_t AES.GCM.Nonce.init<A>(data:)()
{
  return AES.GCM.Nonce.init<A>(data:)();
}

uint64_t type metadata accessor for AES.GCM.Nonce()
{
  return type metadata accessor for AES.GCM.Nonce();
}

uint64_t AES.GCM.SealedBox.ciphertext.getter()
{
  return AES.GCM.SealedBox.ciphertext.getter();
}

uint64_t AES.GCM.SealedBox.tag.getter()
{
  return AES.GCM.SealedBox.tag.getter();
}

uint64_t AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)()
{
  return AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
}

uint64_t type metadata accessor for AES.GCM.SealedBox()
{
  return type metadata accessor for AES.GCM.SealedBox();
}

uint64_t HPKE.Ciphersuite.init(kem:kdf:aead:)()
{
  return HPKE.Ciphersuite.init(kem:kdf:aead:)();
}

uint64_t type metadata accessor for HPKE.Ciphersuite()
{
  return type metadata accessor for HPKE.Ciphersuite();
}

uint64_t type metadata accessor for HPKE.KDF()
{
  return type metadata accessor for HPKE.KDF();
}

uint64_t type metadata accessor for HPKE.KEM()
{
  return type metadata accessor for HPKE.KEM();
}

uint64_t type metadata accessor for HPKE.AEAD()
{
  return type metadata accessor for HPKE.AEAD();
}

uint64_t HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)()
{
  return HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
}

uint64_t HPKE.Sender.encapsulatedKey.getter()
{
  return HPKE.Sender.encapsulatedKey.getter();
}

uint64_t HPKE.Sender.seal<A, B>(_:authenticating:)()
{
  return HPKE.Sender.seal<A, B>(_:authenticating:)();
}

uint64_t type metadata accessor for HPKE.Sender()
{
  return type metadata accessor for HPKE.Sender();
}

uint64_t HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)()
{
  return HPKE.Recipient.init<A>(privateKey:ciphersuite:info:encapsulatedKey:)();
}

uint64_t HPKE.Recipient.open<A, B>(_:authenticating:)()
{
  return HPKE.Recipient.open<A, B>(_:authenticating:)();
}

uint64_t type metadata accessor for HPKE.Recipient()
{
  return type metadata accessor for HPKE.Recipient();
}

uint64_t P256.KeyAgreement.PublicKey.x963Representation.getter()
{
  return P256.KeyAgreement.PublicKey.x963Representation.getter();
}

uint64_t P256.KeyAgreement.PublicKey.init<A>(x963Representation:)()
{
  return P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
}

uint64_t type metadata accessor for P256.KeyAgreement.PublicKey()
{
  return type metadata accessor for P256.KeyAgreement.PublicKey();
}

uint64_t P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)()
{
  return P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
}

uint64_t P256.KeyAgreement.PrivateKey.publicKey.getter()
{
  return P256.KeyAgreement.PrivateKey.publicKey.getter();
}

uint64_t P256.KeyAgreement.PrivateKey.derRepresentation.getter()
{
  return P256.KeyAgreement.PrivateKey.derRepresentation.getter();
}

uint64_t P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)()
{
  return P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)();
}

uint64_t P256.KeyAgreement.PrivateKey.init()()
{
  return P256.KeyAgreement.PrivateKey.init()();
}

uint64_t type metadata accessor for P256.KeyAgreement.PrivateKey()
{
  return type metadata accessor for P256.KeyAgreement.PrivateKey();
}

uint64_t P256.Signing.ECDSASignature.init<A>(derRepresentation:)()
{
  return P256.Signing.ECDSASignature.init<A>(derRepresentation:)();
}

uint64_t type metadata accessor for P256.Signing.ECDSASignature()
{
  return type metadata accessor for P256.Signing.ECDSASignature();
}

uint64_t P256.Signing.PublicKey.isValidSignature<A>(_:for:)()
{
  return P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
}

uint64_t P256.Signing.PublicKey.init<A>(x963Representation:)()
{
  return P256.Signing.PublicKey.init<A>(x963Representation:)();
}

uint64_t type metadata accessor for P256.Signing.PublicKey()
{
  return type metadata accessor for P256.Signing.PublicKey();
}

uint64_t dispatch thunk of static Digest.byteCount.getter()
{
  return dispatch thunk of static Digest.byteCount.getter();
}

uint64_t type metadata accessor for SHA256()
{
  return type metadata accessor for SHA256();
}

uint64_t type metadata accessor for SHA384()
{
  return type metadata accessor for SHA384();
}

uint64_t type metadata accessor for SESFeature.RuntimeFlag()
{
  return type metadata accessor for SESFeature.RuntimeFlag();
}

uint64_t static SESFeature.isEnabled(_:)()
{
  return static SESFeature.isEnabled(_:)();
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SESnapshot.canFit(credentials:)(Swift::OpaquePointer credentials)
{
  return SESnapshot.canFit(credentials:)(credentials._rawValue);
}

uint64_t type metadata accessor for SESnapshot()
{
  return type metadata accessor for SESnapshot();
}

uint64_t TCCContext.TCCService.fallbackTCCService.getter()
{
  return TCCContext.TCCService.fallbackTCCService.getter();
}

uint64_t TCCContext.TCCService.serviceEntitlement.getter()
{
  return TCCContext.TCCService.serviceEntitlement.getter();
}

uint64_t TCCContext.TCCService.defaultAppEntitlement.getter()
{
  return TCCContext.TCCService.defaultAppEntitlement.getter();
}

uint64_t TCCContext.TCCService.rawValue.getter()
{
  return TCCContext.TCCService.rawValue.getter();
}

uint64_t TCCContext.TCCService.tccString.getter()
{
  return TCCContext.TCCService.tccString.getter();
}

uint64_t TCCContext.checkTCCAccess(to:for:)()
{
  return TCCContext.checkTCCAccess(to:for:)();
}

uint64_t TCCContext.getTCCKnownBundleIds(for:filter:)()
{
  return TCCContext.getTCCKnownBundleIds(for:filter:)();
}

uint64_t TCCContext.TCCAccess.description.getter()
{
  return TCCContext.TCCAccess.description.getter();
}

uint64_t TCCContext.TCCAccess.rawValue.getter()
{
  return TCCContext.TCCAccess.rawValue.getter();
}

uint64_t type metadata accessor for TCCContext()
{
  return type metadata accessor for TCCContext();
}

uint64_t dispatch thunk of MemoryUsage.__allocating_init(pHeap:cor:cod:usedIndices:)()
{
  return dispatch thunk of MemoryUsage.__allocating_init(pHeap:cor:cod:usedIndices:)();
}

uint64_t type metadata accessor for MemoryUsage()
{
  return type metadata accessor for MemoryUsage();
}

uint64_t Reservation.init(uuid:type:metadata:)()
{
  return Reservation.init(uuid:type:metadata:)();
}

uint64_t type metadata accessor for Reservation()
{
  return type metadata accessor for Reservation();
}

NSXPCInterface __swiftcall SERInterface()()
{
  return (NSXPCInterface)SERInterface()();
}

uint64_t StateInternal.Discriminant.rawValue.getter()
{
  return StateInternal.Discriminant.rawValue.getter();
}

uint64_t type metadata accessor for StateInternal.Discriminant()
{
  return type metadata accessor for StateInternal.Discriminant();
}

uint64_t StateInternal.discriminant.getter()
{
  return StateInternal.discriminant.getter();
}

uint64_t StateInternal.init(rawDiscriminant:instanceInfos:)()
{
  return StateInternal.init(rawDiscriminant:instanceInfos:)();
}

uint64_t type metadata accessor for StateInternal()
{
  return type metadata accessor for StateInternal();
}

uint64_t CredentialType.init(rawValue:)()
{
  return CredentialType.init(rawValue:)();
}

uint64_t CredentialType.rawValue.getter()
{
  return CredentialType.rawValue.getter();
}

uint64_t type metadata accessor for CredentialType()
{
  return type metadata accessor for CredentialType();
}

uint64_t type metadata accessor for JPKIXPCRequest.JPKIOperation()
{
  return type metadata accessor for JPKIXPCRequest.JPKIOperation();
}

uint64_t JPKIXPCRequest.passIdentifier.getter()
{
  return JPKIXPCRequest.passIdentifier.getter();
}

uint64_t JPKIXPCRequest.operation.getter()
{
  return JPKIXPCRequest.operation.getter();
}

uint64_t type metadata accessor for JPKIXPCRequest()
{
  return type metadata accessor for JPKIXPCRequest();
}

uint64_t type metadata accessor for JPKIXPCResponse()
{
  return type metadata accessor for JPKIXPCResponse();
}

uint64_t DeviceCapability.init(supportsUWB:)()
{
  return DeviceCapability.init(supportsUWB:)();
}

uint64_t type metadata accessor for DeviceCapability()
{
  return type metadata accessor for DeviceCapability();
}

uint64_t ReservationState.init(counts:reservations:)()
{
  return ReservationState.init(counts:reservations:)();
}

uint64_t type metadata accessor for ReservationState()
{
  return type metadata accessor for ReservationState();
}

uint64_t type metadata accessor for JPKIInternalTypes.InternalError()
{
  return type metadata accessor for JPKIInternalTypes.InternalError();
}

uint64_t JPKIInternalTypes.CertificateData.__allocating_init(certificateData:)()
{
  return JPKIInternalTypes.CertificateData.__allocating_init(certificateData:)();
}

uint64_t type metadata accessor for JPKIInternalTypes.CertificateData()
{
  return type metadata accessor for JPKIInternalTypes.CertificateData();
}

uint64_t JPKIInternalTypes.CertificateInfo.init(type:authTriesRemaining:)()
{
  return JPKIInternalTypes.CertificateInfo.init(type:authTriesRemaining:)();
}

uint64_t type metadata accessor for JPKIInternalTypes.CertificateInfo()
{
  return type metadata accessor for JPKIInternalTypes.CertificateInfo();
}

uint64_t type metadata accessor for JPKIInternalTypes.CertificateType()
{
  return type metadata accessor for JPKIInternalTypes.CertificateType();
}

uint64_t JPKIInternalTypes.DigitalSignature.__allocating_init(certificate:signature:)()
{
  return JPKIInternalTypes.DigitalSignature.__allocating_init(certificate:signature:)();
}

uint64_t type metadata accessor for JPKIInternalTypes.DigitalSignature()
{
  return type metadata accessor for JPKIInternalTypes.DigitalSignature();
}

uint64_t type metadata accessor for JPKIInternalTypes.UserAuthentication()
{
  return type metadata accessor for JPKIInternalTypes.UserAuthentication();
}

uint64_t type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal()
{
  return type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal();
}

uint64_t dispatch thunk of SERCredentialInfo.__allocating_init(moduleAIDs:packageAID:containerSize:requiredMemoryForCredential:)()
{
  return dispatch thunk of SERCredentialInfo.__allocating_init(moduleAIDs:packageAID:containerSize:requiredMemoryForCredential:)();
}

uint64_t type metadata accessor for SERCredentialInfo()
{
  return type metadata accessor for SERCredentialInfo();
}

uint64_t CredentialInternal.configUUID.getter()
{
  return CredentialInternal.configUUID.getter();
}

uint64_t CredentialInternal.identifier.getter()
{
  return CredentialInternal.identifier.getter();
}

uint64_t dispatch thunk of CredentialInternal.__allocating_init(identifier:friendlyName:ownerApplications:userApplications:state:configUUID:accessLevel:)()
{
  return dispatch thunk of CredentialInternal.__allocating_init(identifier:friendlyName:ownerApplications:userApplications:state:configUUID:accessLevel:)();
}

uint64_t CredentialInternal.accessLevel.getter()
{
  return CredentialInternal.accessLevel.getter();
}

uint64_t CredentialInternal.friendlyName.getter()
{
  return CredentialInternal.friendlyName.getter();
}

Swift::Bool __swiftcall CredentialInternal.isAccessible(appId:)(Swift::String appId)
{
  return CredentialInternal.isAccessible(appId:)(appId._countAndFlagsBits, appId._object);
}

uint64_t CredentialInternal.userApplications.getter()
{
  return CredentialInternal.userApplications.getter();
}

uint64_t CredentialInternal.ownerApplications.getter()
{
  return CredentialInternal.ownerApplications.getter();
}

uint64_t CredentialInternal.state.getter()
{
  return CredentialInternal.state.getter();
}

uint64_t CredentialInternal.state.setter()
{
  return CredentialInternal.state.setter();
}

uint64_t type metadata accessor for CredentialInternal()
{
  return type metadata accessor for CredentialInternal();
}

uint64_t AccessLevelInternal.rawValue.getter()
{
  return AccessLevelInternal.rawValue.getter();
}

uint64_t dispatch thunk of InstanceInfoInternal.__allocating_init(instanceAID:packageAID:moduleAID:securityDomainAID:securityDomainKeyInfo:lifeCycleState:)()
{
  return dispatch thunk of InstanceInfoInternal.__allocating_init(instanceAID:packageAID:moduleAID:securityDomainAID:securityDomainKeyInfo:lifeCycleState:)();
}

uint64_t InstanceInfoInternal.instanceAID.getter()
{
  return InstanceInfoInternal.instanceAID.getter();
}

uint64_t InstanceInfoInternal.LifeCycleState.description.getter()
{
  return InstanceInfoInternal.LifeCycleState.description.getter();
}

uint64_t InstanceInfoInternal.LifeCycleState.init(from:)()
{
  return InstanceInfoInternal.LifeCycleState.init(from:)();
}

uint64_t static InstanceInfoInternal.LifeCycleState.locked.getter()
{
  return static InstanceInfoInternal.LifeCycleState.locked.getter();
}

uint64_t type metadata accessor for InstanceInfoInternal.LifeCycleState()
{
  return type metadata accessor for InstanceInfoInternal.LifeCycleState();
}

uint64_t InstanceInfoInternal.lifeCycleState.getter()
{
  return InstanceInfoInternal.lifeCycleState.getter();
}

uint64_t InstanceInfoInternal.securityDomainAID.getter()
{
  return InstanceInfoInternal.securityDomainAID.getter();
}

uint64_t static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter()
{
  return static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter();
}

uint64_t type metadata accessor for InstanceInfoInternal()
{
  return type metadata accessor for InstanceInfoInternal();
}

uint64_t dispatch thunk of ApplicationInfoInternal.__allocating_init(applicationId:bundleId:gdprShownVersion:)()
{
  return dispatch thunk of ApplicationInfoInternal.__allocating_init(applicationId:bundleId:gdprShownVersion:)();
}

uint64_t ApplicationInfoInternal.applicationId.getter()
{
  return ApplicationInfoInternal.applicationId.getter();
}

uint64_t ApplicationInfoInternal.bundleId.getter()
{
  return ApplicationInfoInternal.bundleId.getter();
}

uint64_t type metadata accessor for ApplicationInfoInternal()
{
  return type metadata accessor for ApplicationInfoInternal();
}

uint64_t SERError.failureReason.getter()
{
  return SERError.failureReason.getter();
}

uint64_t type metadata accessor for SERError()
{
  return type metadata accessor for SERError();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._forceBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Dictionary.description.getter()
{
  return Dictionary.description.getter();
}

uint64_t Dictionary.debugDescription.getter()
{
  return Dictionary.debugDescription.getter();
}

uint64_t Dictionary.Keys.description.getter()
{
  return Dictionary.Keys.description.getter();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t Character.hexDigitValue.getter()
{
  return Character.hexDigitValue.getter();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return String.data(using:allowLossyConversion:)();
}

uint64_t String.init(format:_:)()
{
  return String.init(format:_:)();
}

uint64_t static String.Encoding.utf8.getter()
{
  return static String.Encoding.utf8.getter();
}

uint64_t static String.Encoding.ascii.getter()
{
  return static String.Encoding.ascii.getter();
}

uint64_t type metadata accessor for String.Encoding()
{
  return type metadata accessor for String.Encoding();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = String.lowercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::String __swiftcall String.uppercased()()
{
  uint64_t v0 = String.uppercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t String.utf8CString.getter()
{
  return String.utf8CString.getter();
}

uint64_t static String._fromSubstring(_:)()
{
  return static String._fromSubstring(_:)();
}

uint64_t static String._uncheckedFromUTF8(_:)()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

uint64_t String.count.getter()
{
  return String.count.getter();
}

uint64_t String.index(after:)()
{
  return String.index(after:)();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return String.index(_:offsetBy:limitedBy:)();
}

uint64_t String.append<A>(contentsOf:)()
{
  return String.append<A>(contentsOf:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::String_optional __swiftcall String.Iterator.next()()
{
  uint64_t v0 = String.Iterator.next()();
  result.value._object = v1;
  result.value._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

uint64_t String.UTF8View._foreignIndex(after:)()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t String.UTF8View._foreignIndex(_:offsetBy:)()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t String.UTF8View._foreignDistance(from:to:)()
{
  return String.UTF8View._foreignDistance(from:to:)();
}

uint64_t String.UTF8View._foreignSubscript(position:)()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t String.UTF16View.index(_:offsetBy:)()
{
  return String.UTF16View.index(_:offsetBy:)();
}

Swift::String __swiftcall String.init(repeating:count:)(Swift::String repeating, Swift::Int count)
{
  uint64_t v2 = String.init(repeating:count:)(repeating._countAndFlagsBits, repeating._object, count);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

uint64_t String.subscript.getter()
{
  return String.subscript.getter();
}

{
  return String.subscript.getter();
}

uint64_t String.init<A>(_:)()
{
  return String.init<A>(_:)();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return static Array._allocateBufferUninitialized(minimumCapacity:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)Bool._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return CheckedContinuation.resume(throwing:)();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

uint64_t Double.write<A>(to:)()
{
  return Double.write<A>(to:)();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return static Set._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static Set._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.init(minimumCapacity:)()
{
  return Set.init(minimumCapacity:)();
}

uint64_t Set.Index._asCocoa.modify()
{
  return Set.Index._asCocoa.modify();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)Int._bridgeToObjectiveC()();
}

uint64_t NSPredicate.init(format:_:)()
{
  return NSPredicate.init(format:_:)();
}

uint64_t NSDictionary.init(dictionaryLiteral:)()
{
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t NSEnumerator.makeIterator()()
{
  return NSEnumerator.makeIterator()();
}

uint64_t NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)()
{
  return NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
}

uint64_t static os_log_type_t.info.getter()
{
  return static os_log_type_t.info.getter();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

uint64_t static NSPersistentStore.StoreType.sqlite.getter()
{
  return static NSPersistentStore.StoreType.sqlite.getter();
}

uint64_t type metadata accessor for NSPersistentStore.StoreType()
{
  return type metadata accessor for NSPersistentStore.StoreType();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
}

uint64_t static OS_dispatch_queue.getSpecific<A>(key:)()
{
  return static OS_dispatch_queue.getSpecific<A>(key:)();
}

uint64_t OS_dispatch_queue.setSpecific<A>(key:value:)()
{
  return OS_dispatch_queue.setSpecific<A>(key:value:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t OS_dispatch_queue.sync<A>(execute:)()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return OS_dispatch_semaphore.signal()();
}

uint64_t NSManagedObjectContext.performAndWait<A>(_:)()
{
  return NSManagedObjectContext.performAndWait<A>(_:)();
}

uint64_t type metadata accessor for NSManagedObjectContext.ScheduledTaskType()
{
  return type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
}

uint64_t NSManagedObjectContext.fetch<A>(_:)()
{
  return NSManagedObjectContext.fetch<A>(_:)();
}

uint64_t NSManagedObjectContext.fetch(_:)()
{
  return NSManagedObjectContext.fetch(_:)();
}

uint64_t NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)()
{
  return NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)();
}

uint64_t NSSet.init(objects:)()
{
  return NSSet.init(objects:)();
}

uint64_t NSData.startIndex.getter()
{
  return NSData.startIndex.getter();
}

uint64_t NSData.endIndex.getter()
{
  return NSData.endIndex.getter();
}

uint64_t NSArray.makeIterator()()
{
  return NSArray.makeIterator()();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)NSNumber.init(integerLiteral:)(integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

Swift::String __swiftcall Substring.uppercased()()
{
  uint64_t v0 = Substring.uppercased()();
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

NSNumber __swiftcall UInt._bridgeToObjectiveC()()
{
  return (NSNumber)UInt._bridgeToObjectiveC()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return StringProtocol.components<A>(separatedBy:)();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t BinaryInteger.description.getter()
{
  return BinaryInteger.description.getter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return dispatch thunk of SetAlgebra.isSuperset(of:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.previousHole(before:)()
{
  return _HashTable.previousHole(before:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return __CocoaSet.startIndex.getter();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.Index.handleBitPattern.getter()
{
  return __CocoaSet.Index.handleBitPattern.getter();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return static __CocoaSet.Index.== infix(_:_:)();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return __CocoaSet.Index.age.getter();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return __CocoaSet.Index.element.getter();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.element(at:)()
{
  return __CocoaSet.element(at:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return __CocoaSet.endIndex.getter();
}

uint64_t __CocoaSet.formIndex(after:isUnique:)()
{
  return __CocoaSet.formIndex(after:isUnique:)();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t Identifiable<>.id.getter()
{
  return Identifiable<>.id.getter();
}

uint64_t dispatch thunk of _AnyIndexBox._typeID.getter()
{
  return dispatch thunk of _AnyIndexBox._typeID.getter();
}

uint64_t dispatch thunk of _AnyIndexBox._isEqual(to:)()
{
  return dispatch thunk of _AnyIndexBox._isEqual(to:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of _AnySequenceBox._filter(_:)()
{
  return dispatch thunk of _AnySequenceBox._filter(_:)();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t dispatch thunk of _AnyCollectionBox.subscript.getter()
{
  return dispatch thunk of _AnyCollectionBox.subscript.getter();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.count.getter()
{
  return __CocoaDictionary.count.getter();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.convert(_:capacity:)()
{
  return static _DictionaryStorage.convert(_:capacity:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return _minimumMergeRunLength(_:)(a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return _bridgeAnythingToObjectiveC<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

NSNumber __swiftcall UInt8._bridgeToObjectiveC()()
{
  return (NSNumber)UInt8._bridgeToObjectiveC()();
}

uint64_t static Hasher._hash(seed:bytes:count:)()
{
  return static Hasher._hash(seed:bytes:count:)();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Mirror.init(reflecting:)()
{
  return Mirror.init(reflecting:)();
}

uint64_t Mirror.children.getter()
{
  return Mirror.children.getter();
}

uint64_t type metadata accessor for Mirror()
{
  return type metadata accessor for Mirror();
}

NSNumber __swiftcall UInt16._bridgeToObjectiveC()()
{
  return (NSNumber)UInt16._bridgeToObjectiveC()();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _typeName(_:qualified:)()
{
  return _typeName(_:qualified:)();
}

uint64_t AMFDRDecodeCombined()
{
  return _AMFDRDecodeCombined();
}

uint64_t AMFDRSealingMapCopyLocalDataForClass()
{
  return _AMFDRSealingMapCopyLocalDataForClass();
}

uint64_t Any()
{
  return _Any();
}

uint64_t CCAESCmac()
{
  return _CCAESCmac();
}

CCCryptorStatus CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options, const void *key, size_t keyLength, const void *iv, const void *dataIn, size_t dataInLength, void *dataOut, size_t dataOutAvailable, size_t *dataOutMoved)
{
  return _CCCrypt(op, alg, options, key, keyLength, iv, dataIn, dataInLength, dataOut, dataOutAvailable, dataOutMoved);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA1(data, len, md);
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  return _CFAbsoluteTimeGetCurrent();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return _CFBooleanGetTypeID();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return _CFBooleanGetValue(BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return _CFDataCreate(allocator, bytes, length);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return _CFDataGetLength(theData);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return _CFErrorCopyDescription(err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return _CFGetTypeID(cf);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return _CFPreferencesCopyAppValue(key, applicationID);
}

void CFReadStreamSetDispatchQueue(CFReadStreamRef stream, dispatch_queue_t q)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return _CFRunLoopGetMain();
}

void CFRunLoopRun(void)
{
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return _CFStringCompare(theString1, theString2, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return _CFStringGetBytes(theString, range, encoding, lossByte, isExternalRepresentation, buffer, maxBufLen, usedBufLen);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return _CFStringGetLength(theString);
}

void CFWriteStreamSetDispatchQueue(CFWriteStreamRef stream, dispatch_queue_t q)
{
}

uint64_t DERDecodeAdvance()
{
  return _DERDecodeAdvance();
}

uint64_t DMPerformMigrationIfNeeded()
{
  return _DMPerformMigrationIfNeeded();
}

uint64_t DeviceIdentityCreateClientCertificateRequest()
{
  return _DeviceIdentityCreateClientCertificateRequest();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return _DeviceIdentityIssueClientCertificateWithCompletion();
}

uint64_t Filter()
{
  return _Filter();
}

uint64_t Find()
{
  return _Find();
}

uint64_t IDSCopyIDForDevice()
{
  return _IDSCopyIDForDevice();
}

uint64_t IDSCopyIDForEmailAddress()
{
  return _IDSCopyIDForEmailAddress();
}

uint64_t IDSCopyIDForPhoneNumber()
{
  return _IDSCopyIDForPhoneNumber();
}

uint64_t IDSCopyRawAddressForDestination()
{
  return _IDSCopyRawAddressForDestination();
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return _IOConnectCallScalarMethod(connection, selector, input, inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return _IOConnectCallStructMethod(connection, selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return _IONotificationPortCreate(mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return _IOObjectRelease(object);
}

IOReturn IOPMAssertionCreateWithName(CFStringRef AssertionType, IOPMAssertionLevel AssertionLevel, CFStringRef AssertionName, IOPMAssertionID *AssertionID)
{
  return _IOPMAssertionCreateWithName(AssertionType, AssertionLevel, AssertionName, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return _IOPMAssertionRelease(AssertionID);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return _IOServiceAddInterestNotification(notifyPort, service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return _IOServiceClose(connect);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return _IOServiceGetMatchingService(mainPort, matching);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return _IOServiceMatching(name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return _IOServiceNameMatching(name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return _IOServiceOpen(service, owningTask, type, connect);
}

uint64_t Img4DecodeGetPayload()
{
  return _Img4DecodeGetPayload();
}

uint64_t Img4DecodeInit()
{
  return _Img4DecodeInit();
}

uint64_t MGCopyAnswer()
{
  return _MGCopyAnswer();
}

uint64_t MGGetBoolAnswer()
{
  return _MGGetBoolAnswer();
}

uint64_t MGGetSInt32Answer()
{
  return _MGGetSInt32Answer();
}

uint64_t MKBDeviceUnlockedSinceBoot()
{
  return _MKBDeviceUnlockedSinceBoot();
}

uint64_t MSURetrievePreviousUpdateState()
{
  return _MSURetrievePreviousUpdateState();
}

uint64_t MobileGestalt_copy_buildVersion_obj()
{
  return _MobileGestalt_copy_buildVersion_obj();
}

uint64_t MobileGestalt_get_current_device()
{
  return _MobileGestalt_get_current_device();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return _NSStringFromClass(aClass);
}

uint64_t PKDoubleClickAllowed()
{
  return _PKDoubleClickAllowed();
}

uint64_t PLLogRegisteredEvent()
{
  return _PLLogRegisteredEvent();
}

uint64_t PRGetChipInfoAsync()
{
  return _PRGetChipInfoAsync();
}

uint64_t PRGetChipType()
{
  return _PRGetChipType();
}

uint64_t SESCreateAndLogError()
{
  return _SESCreateAndLogError();
}

uint64_t SESDefaultLogObject()
{
  return _SESDefaultLogObject();
}

uint64_t SESDesignatedKeyCommit()
{
  return _SESDesignatedKeyCommit();
}

uint64_t SESEndPointAddEndpointIdWithUuid()
{
  return _SESEndPointAddEndpointIdWithUuid();
}

uint64_t SESEndPointAddInvitationWithId()
{
  return _SESEndPointAddInvitationWithId();
}

uint64_t SESEndPointAuthorizeWithSession()
{
  return _SESEndPointAuthorizeWithSession();
}

uint64_t SESEndPointConfigureKeySlot()
{
  return _SESEndPointConfigureKeySlot();
}

uint64_t SESEndPointConfigureMailBoxes()
{
  return _SESEndPointConfigureMailBoxes();
}

uint64_t SESEndPointConfigureMailBoxesWithSession()
{
  return _SESEndPointConfigureMailBoxesWithSession();
}

uint64_t SESEndPointConfigureNFCExpressInLPM()
{
  return _SESEndPointConfigureNFCExpressInLPM();
}

uint64_t SESEndPointCreateAuthorizationID()
{
  return _SESEndPointCreateAuthorizationID();
}

uint64_t SESEndPointCreateEncryptionKey()
{
  return _SESEndPointCreateEncryptionKey();
}

uint64_t SESEndPointCreateForAlishaWithSession()
{
  return _SESEndPointCreateForAlishaWithSession();
}

uint64_t SESEndPointCreateKeyPair()
{
  return _SESEndPointCreateKeyPair();
}

uint64_t SESEndPointDelete()
{
  return _SESEndPointDelete();
}

uint64_t SESEndPointDeleteAuthorizationID()
{
  return _SESEndPointDeleteAuthorizationID();
}

uint64_t SESEndPointDeleteInvitationWithId()
{
  return _SESEndPointDeleteInvitationWithId();
}

uint64_t SESEndPointGetCAGeneralStatisticsInfo()
{
  return _SESEndPointGetCAGeneralStatisticsInfo();
}

uint64_t SESEndPointGetEndpointIdWithUuid()
{
  return _SESEndPointGetEndpointIdWithUuid();
}

uint64_t SESEndPointGetInvitations()
{
  return _SESEndPointGetInvitations();
}

uint64_t SESEndPointGetPrivateData()
{
  return _SESEndPointGetPrivateData();
}

uint64_t SESEndPointGetPrivateDataWithSession()
{
  return _SESEndPointGetPrivateDataWithSession();
}

uint64_t SESEndPointList()
{
  return _SESEndPointList();
}

uint64_t SESEndPointListAuthorizations()
{
  return _SESEndPointListAuthorizations();
}

uint64_t SESEndPointPreWarm()
{
  return _SESEndPointPreWarm();
}

uint64_t SESEndPointPrivacyDecryptionWithKeyPair()
{
  return _SESEndPointPrivacyDecryptionWithKeyPair();
}

uint64_t SESEndPointPrivacyEncryption()
{
  return _SESEndPointPrivacyEncryption();
}

uint64_t SESEndPointPrivacyEncryptionWithManufacturer()
{
  return _SESEndPointPrivacyEncryptionWithManufacturer();
}

uint64_t SESEndPointRevoke()
{
  return _SESEndPointRevoke();
}

uint64_t SESEndPointSetConfidentialDataWithOffset()
{
  return _SESEndPointSetConfidentialDataWithOffset();
}

uint64_t SESEndPointSetPrivateData()
{
  return _SESEndPointSetPrivateData();
}

uint64_t SESEndPointSetPrivateDataWithSession()
{
  return _SESEndPointSetPrivateDataWithSession();
}

uint64_t SESEndPointSignDataWithAuth()
{
  return _SESEndPointSignDataWithAuth();
}

uint64_t SESEndPointTriggerHeadUnitPairing()
{
  return _SESEndPointTriggerHeadUnitPairing();
}

uint64_t SESEndPointUpdateWithBlock()
{
  return _SESEndPointUpdateWithBlock();
}

uint64_t SESEndpointConvertWithSession()
{
  return _SESEndpointConvertWithSession();
}

uint64_t SESEndpointGetBindingAttestationRequestWithSession()
{
  return _SESEndpointGetBindingAttestationRequestWithSession();
}

uint64_t SESEndpointNotifyTracked()
{
  return _SESEndpointNotifyTracked();
}

uint64_t SESEndpointPreAuthorizeWithSession()
{
  return _SESEndpointPreAuthorizeWithSession();
}

uint64_t SESEnsureError()
{
  return _SESEnsureError();
}

uint64_t SESInternalVariant()
{
  return _SESInternalVariant();
}

uint64_t SESKeyGetDesignatedKeys()
{
  return _SESKeyGetDesignatedKeys();
}

uint64_t SESPrivateLogSERProtocolDetails()
{
  return _SESPrivateLogSERProtocolDetails();
}

uint64_t SecAccessControlCopyData()
{
  return _SecAccessControlCopyData();
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return _SecAccessControlCreateWithFlags(allocator, protection, flags, error);
}

uint64_t SecAccessControlSetConstraints()
{
  return _SecAccessControlSetConstraints();
}

OSStatus SecCertificateCopyCommonName(SecCertificateRef certificate, CFStringRef *commonName)
{
  return _SecCertificateCopyCommonName(certificate, commonName);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

uint64_t SecCertificateCopyExtensionValue()
{
  return _SecCertificateCopyExtensionValue();
}

uint64_t SecCertificateCopyIssuerSummary()
{
  return _SecCertificateCopyIssuerSummary();
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return _SecCertificateCopyKey(certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return _SecCertificateCreateWithData(allocator, data);
}

uint64_t SecCertificateGetAuthorityKeyID()
{
  return _SecCertificateGetAuthorityKeyID();
}

uint64_t SecCertificateIsValid()
{
  return _SecCertificateIsValid();
}

OSStatus SecItemAdd(CFDictionaryRef attributes, CFTypeRef *result)
{
  return _SecItemAdd(attributes, result);
}

OSStatus SecItemCopyMatching(CFDictionaryRef query, CFTypeRef *result)
{
  return _SecItemCopyMatching(query, result);
}

OSStatus SecItemDelete(CFDictionaryRef query)
{
  return _SecItemDelete(query);
}

OSStatus SecItemUpdate(CFDictionaryRef query, CFDictionaryRef attributesToUpdate)
{
  return _SecItemUpdate(query, attributesToUpdate);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return _SecKeyCopyExternalRepresentation(key, error);
}

uint64_t SecKeyCopyPublicBytes()
{
  return _SecKeyCopyPublicBytes();
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return _SecKeyCreateSignature(key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return _SecKeyCreateWithData(keyData, attributes, error);
}

CFTypeID SecKeyGetTypeID(void)
{
  return _SecKeyGetTypeID();
}

uint64_t SecPolicyCreateAlisha()
{
  return _SecPolicyCreateAlisha();
}

SecPolicyRef SecPolicyCreateBasicX509(void)
{
  return _SecPolicyCreateBasicX509();
}

int SecRandomCopyBytes(SecRandomRef rnd, size_t count, void *bytes)
{
  return _SecRandomCopyBytes(rnd, count, bytes);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return _SecTrustCreateWithCertificates(certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return _SecTrustSetAnchorCertificates(trust, anchorCertificates);
}

OSStatus SecTrustSetAnchorCertificatesOnly(SecTrustRef trust, Boolean anchorCertificatesOnly)
{
  return _SecTrustSetAnchorCertificatesOnly(trust, anchorCertificatesOnly);
}

uint64_t TCCAccessCheckAuditToken()
{
  return _TCCAccessCheckAuditToken();
}

uint64_t TCCAccessPreflightWithAuditToken()
{
  return _TCCAccessPreflightWithAuditToken();
}

uint64_t Transform()
{
  return _Transform();
}

uint64_t TransformIf()
{
  return _TransformIf();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFXPCCreateCFObjectFromXPCObject()
{
  return __CFXPCCreateCFObjectFromXPCObject();
}

uint64_t _CFXPCCreateXPCObjectFromCFObject()
{
  return __CFXPCCreateXPCObjectFromCFObject();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t DERDecodeData(NSData *a1)
{
  return DERDecodeData(a1);
}

uint64_t DERDecodeData(NSData *a1, unint64_t a2)
{
  return DERDecodeData(a1, a2);
}

uint64_t DERDecodeData(const DERItem *a1, unint64_t a2)
{
  return DERDecodeData(a1, a2);
}

uint64_t encodeSequence()
{
  return encodeSequence();
}

uint64_t encodeSequenceSpec()
{
  return encodeSequenceSpec();
}

{
  return encodeSequenceSpec();
}

uint64_t DERParseSequenceSpec()
{
  return DERParseSequenceSpec();
}

{
  return DERParseSequenceSpec();
}

{
  return DERParseSequenceSpec();
}

uint64_t encodeSequenceContentSpec()
{
  return encodeSequenceContentSpec();
}

uint64_t DERParseSequenceSpecContent()
{
  return DERParseSequenceSpecContent();
}

{
  return DERParseSequenceSpecContent();
}

double __exp10(double a1)
{
  return ___exp10(a1);
}

uint64_t __memcpy_chk()
{
  return ___memcpy_chk();
}

uint64_t __strlcpy_chk()
{
  return ___strlcpy_chk();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return ___toupper(a1);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return __swift_stdlib_bridgeErrorToNSError();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

uint32_t arc4random(void)
{
  return _arc4random();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

pid_t audit_token_to_pid(audit_token_t *atoken)
{
  return _audit_token_to_pid(atoken);
}

void bzero(void *a1, size_t a2)
{
}

uint64_t ccaes_ccm_decrypt_mode()
{
  return _ccaes_ccm_decrypt_mode();
}

uint64_t ccaes_ccm_encrypt_mode()
{
  return _ccaes_ccm_encrypt_mode();
}

uint64_t ccaes_gcm_decrypt_mode()
{
  return _ccaes_gcm_decrypt_mode();
}

uint64_t ccaes_gcm_encrypt_mode()
{
  return _ccaes_gcm_encrypt_mode();
}

uint64_t ccccm_one_shot()
{
  return _ccccm_one_shot();
}

uint64_t ccdigest()
{
  return _ccdigest();
}

uint64_t ccec_cp_256()
{
  return _ccec_cp_256();
}

uint64_t ccec_import_pub()
{
  return _ccec_import_pub();
}

uint64_t ccec_verify_composite()
{
  return _ccec_verify_composite();
}

uint64_t ccgcm_one_shot()
{
  return _ccgcm_one_shot();
}

uint64_t cchkdf()
{
  return _cchkdf();
}

uint64_t ccsha256_di()
{
  return _ccsha256_di();
}

int chmod(const char *a1, mode_t a2)
{
  return _chmod(a1, a2);
}

uint64_t decryptPrivacyData()
{
  return _decryptPrivacyData();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_assert_queue_not_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return _dispatch_get_global_queue(identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return _dispatch_group_wait(group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return _dispatch_queue_attr_make_with_qos_class(attr, qos_class, relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return _dispatch_source_create(type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

int dlclose(void *__handle)
{
  return _dlclose(__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return _dlopen(__path, __mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return _dlsym(__handle, __symbol);
}

uint64_t encodeItem()
{
  return _encodeItem();
}

uint64_t encryptPrivacyData()
{
  return _encryptPrivacyData();
}

int fflush(FILE *a1)
{
  return _fflush(a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return _fopen(__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return _fprintf(a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return _fputs(a1, a2);
}

void free(void *a1)
{
}

uint64_t ftell(FILE *a1)
{
  return _ftell(a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return _fwrite(__ptr, __size, __nitems, __stream);
}

uint64_t getCertificatePublicKey()
{
  return _getCertificatePublicKey();
}

pid_t getpid(void)
{
  return _getpid();
}

const char *getprogname(void)
{
  return _getprogname();
}

tm *__cdecl localtime(const time_t *a1)
{
  return _localtime(a1);
}

float log10f(float a1)
{
  return _log10f(a1);
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_calloc(count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return _malloc_type_malloc(size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return _memset(__b, __c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return _memset_s(__s, __smax, __c, __n);
}

uint32_t notify_post(const char *name)
{
  return _notify_post(name);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return _notify_register_dispatch(name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return _objc_getAssociatedObject(object, key);
}

Class objc_getClass(const char *name)
{
  return _objc_getClass(name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return _objc_getProperty(self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return _objc_initWeak(location, val);
}

id objc_loadWeakRetained(id *location)
{
  return _objc_loadWeakRetained(location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return [super a2];
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t objc_opt_respondsToSelector()
{
  return _objc_opt_respondsToSelector();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

id objc_retainBlock(id a1)
{
  return _objc_retainBlock(a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return _objc_storeWeak(location, obj);
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return _os_log_create(subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return _os_signpost_enabled(log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return _os_signpost_id_make_with_pointer(log, ptr);
}

uint64_t os_state_add_handler()
{
  return _os_state_add_handler();
}

uint64_t os_transaction_create()
{
  return _os_transaction_create();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_diagnostics()
{
  return _os_variant_has_internal_diagnostics();
}

int printf(const char *a1, ...)
{
  return _printf(a1);
}

int proc_name(int pid, void *buffer, uint32_t buffersize)
{
  return _proc_name(pid, buffer, buffersize);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return _proc_pidinfo(pid, flavor, arg, buffer, buffersize);
}

void (__cdecl *__cdecl signal(int a1, void (__cdecl *a2)(int)))(int)
{
  return _signal(a1, a2);
}

int sprintf(char *a1, const char *a2, ...)
{
  return _sprintf(a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return _strcmp(__s1, __s2);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return _strftime(a1, a2, a3, a4);
}

size_t strlen(const char *__s)
{
  return _strlen(__s);
}

char *__cdecl strtok_r(char *__str, const char *__sep, char **__lasts)
{
  return _strtok_r(__str, __sep, __lasts);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return _swift_allocateGenericClassMetadata();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_checkMetadataState()
{
  return _swift_checkMetadataState();
}

uint64_t swift_conformsToProtocol2()
{
  return _swift_conformsToProtocol2();
}

uint64_t swift_continuation_init()
{
  return _swift_continuation_init();
}

uint64_t swift_continuation_throwingResume()
{
  return _swift_continuation_throwingResume();
}

uint64_t swift_deallocClassInstance()
{
  return _swift_deallocClassInstance();
}

uint64_t swift_deallocPartialClassInstance()
{
  return _swift_deallocPartialClassInstance();
}

uint64_t swift_deallocUninitializedObject()
{
  return _swift_deallocUninitializedObject();
}

uint64_t swift_defaultActor_destroy()
{
  return _swift_defaultActor_destroy();
}

uint64_t swift_defaultActor_initialize()
{
  return _swift_defaultActor_initialize();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastMetatype()
{
  return _swift_dynamicCastMetatype();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getDynamicType()
{
  return _swift_getDynamicType();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getGenericMetadata()
{
  return _swift_getGenericMetadata();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initClassMetadata2()
{
  return _swift_initClassMetadata2();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return _swift_initEnumMetadataSingleCase();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return _swift_initEnumMetadataSinglePayload();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return _swift_isUniquelyReferenced_nonNull_bridgeObject();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_setDeallocating()
{
  return _swift_setDeallocating();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unexpectedError()
{
  return _swift_unexpectedError();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRelease_n()
{
  return _swift_unknownObjectRelease_n();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_unknownObjectRetain_n()
{
  return _swift_unknownObjectRetain_n();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return _swift_unknownObjectWeakAssign();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return _swift_unknownObjectWeakDestroy();
}

uint64_t swift_unknownObjectWeakInit()
{
  return _swift_unknownObjectWeakInit();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return _swift_unknownObjectWeakLoadStrong();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

uint64_t swift_willThrowTypedImpl()
{
  return _swift_willThrowTypedImpl();
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return _sysctl(a1, a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return _sysctlbyname(a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return _time(a1);
}

int timingsafe_bcmp(const void *__b1, const void *__b2, size_t __len)
{
  return _timingsafe_bcmp(__b1, __b2, __len);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return _vfprintf(a1, a2, a3);
}

uint64_t voucher_copy()
{
  return _voucher_copy();
}

void xpc_connection_activate(xpc_connection_t connection)
{
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return _xpc_connection_create_mach_service(name, targetq, flags);
}

uint64_t xpc_connection_send_notification()
{
  return _xpc_connection_send_notification();
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

size_t xpc_dictionary_get_count(xpc_object_t xdict)
{
  return _xpc_dictionary_get_count(xdict);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_value(xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return _xpc_equal(object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return _xpc_get_type(object);
}

int64_t xpc_int64_get_value(xpc_object_t xint)
{
  return _xpc_int64_get_value(xint);
}

uint64_t xpc_set_event()
{
  return _xpc_set_event();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}

const char *__cdecl xpc_type_get_name(xpc_type_t type)
{
  return _xpc_type_get_name(type);
}

id objc_msgSend_AID(void *a1, const char *a2, ...)
{
  return _[a1 AID];
}

id objc_msgSend_CKKSControlObject_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "CKKSControlObject:error:")];
}

id objc_msgSend_DERItem(void *a1, const char *a2, ...)
{
  return _[a1 DERItem];
}

id objc_msgSend_HTTPBody(void *a1, const char *a2, ...)
{
  return _[a1 HTTPBody];
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_KEnc(void *a1, const char *a2, ...)
{
  return _[a1 KEnc];
}

id objc_msgSend_KMac(void *a1, const char *a2, ...)
{
  return _[a1 KMac];
}

id objc_msgSend_KRMac(void *a1, const char *a2, ...)
{
  return _[a1 KRMac];
}

id objc_msgSend_Kble_intro(void *a1, const char *a2, ...)
{
  return [a1 Kble_intro];
}

id objc_msgSend_Kble_oob_master(void *a1, const char *a2, ...)
{
  return [a1 Kble_oob_master];
}

id objc_msgSend_M2(void *a1, const char *a2, ...)
{
  return _[a1 M2];
}

id objc_msgSend_PerformSEABAAWithAttestation_casdCertificate_nonce_OIDs_validityInterval_error_(void *a1, const char *a2, ...)
{
  return [a1 PerformSEABAAWithAttestation:x0 casdCertificate:x1 nonce:x2 OIDs:x3 validityInterval:x4 error:x5];
}

id objc_msgSend_PerformScriptWithName_seHandle_logSink_(void *a1, const char *a2, ...)
{
  return [a1 PerformScriptWithName:seHandle:logSink:];
}

id objc_msgSend_PerformScriptWithName_sefwPath_seHandle_logSink_(void *a1, const char *a2, ...)
{
  return [a1 PerformScriptWithName:sefwPath:seHandle:logSink:];
}

id objc_msgSend_SymmetricLTS(void *a1, const char *a2, ...)
{
  return _[a1 SymmetricLTS];
}

id objc_msgSend_TLVWithData_(void *a1, const char *a2, ...)
{
  return [a1 TLVWithData:];
}

id objc_msgSend_TLVWithTag_children_(void *a1, const char *a2, ...)
{
  return [a1 TLVWithTag:x0 children:x1];
}

id objc_msgSend_TLVWithTag_fromData_(void *a1, const char *a2, ...)
{
  return [a1 TLVWithTag:fromData:];
}

id objc_msgSend_TLVWithTag_unsignedChar_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "TLVWithTag:unsignedChar:");
}

id objc_msgSend_TLVWithTag_unsignedShort_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "TLVWithTag:unsignedShort:");
}

id objc_msgSend_TLVWithTag_value_(void *a1, const char *a2, ...)
{
  return [a1 TLVWithTag:value:];
}

id objc_msgSend_TLVsWithData_(void *a1, const char *a2, ...)
{
  return [a1 TLVsWithData:];
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return [a1 URLWithString:];
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _[a1 UTF8String];
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _[a1 UUID];
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _[a1 UUIDString];
}

id objc_msgSend__acl_containsOperation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_acl:containsOperation:");
}

id objc_msgSend__appearsToBeEmail(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBeEmail];
}

id objc_msgSend__appearsToBePhoneNumber(void *a1, const char *a2, ...)
{
  return _[a1 _appearsToBePhoneNumber];
}

id objc_msgSend__applyConfidentialMailboxContents_secureElement_instanceAID_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_applyConfidentialMailboxContents:secureElement:instanceAID:keyIdentifier:");
}

id objc_msgSend__applyPrivateMailboxContents_secureElement_instanceAID_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_applyPrivateMailboxContents:secureElement:instanceAID:keyIdentifier:");
}

id objc_msgSend__createEndPointCA_database_clientName_identifier_subjectIdentifier_forEndPointType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createEndPointCA:database:clientName:identifier:subjectIdentifier:forEndPointType:error:");
}

id objc_msgSend__createKey_acl_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createKey:acl:error:");
}

id objc_msgSend__createSynchronizableKey_extractedACLs_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_createSynchronizableKey:extractedACLs:error:");
}

id objc_msgSend__debugGetReaderIdentifiersForAllEndpoints_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_debugGetReaderIdentifiersForAllEndpoints:");
}

id objc_msgSend__deleteLoadedKey_instanceAID_loadedKey_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_deleteLoadedKey:instanceAID:loadedKey:error:");
}

id objc_msgSend__ensureCAExistsAndValid_clientName_secureElement_database_forEndPointType_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_ensureCAExistsAndValid:clientName:secureElement:database:forEndPointType:error:");
}

id objc_msgSend__existsDuplicateInDatabase_airInstanceEntity_withIdentifier_orReaderIdentifier_outError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_existsDuplicateInDatabase:airInstanceEntity:withIdentifier:orReaderIdentifier:outError:");
}

id objc_msgSend__extractedACLForFidoKey(void *a1, const char *a2, ...)
{
  return _[a1 _extractedACLForFidoKey];
}

id objc_msgSend__getBAACertificatesForKey_key_subjectIdentifier_nonce_OIDs_validityInterval_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getBAACertificatesForKey:key:subjectIdentifier:nonce:OIDs:validityInterval:error:")];
}

id objc_msgSend__getEndPointAndValidateAccess_identifier_clientInfo_outEndPointEntity_outEndPoint_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_getEndPointAndValidateAccess:identifier:clientInfo:outEndPointEntity:outEndPoint:");
}

id objc_msgSend__renewEndPointCAIfExpired_secureElement_forEndPointType_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_renewEndPointCAIfExpired:secureElement:forEndPointType:")];
}

id objc_msgSend__setQueue_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_setQueue:");
}

id objc_msgSend__withExportedBlob_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_withExportedBlob:error:");
}

id objc_msgSend__withNativePTData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "_withNativePTData:error:");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return [a1 aa_altDSID];
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return [a1 aa_primaryAppleAccount];
}

id objc_msgSend_accessControlConstraintsItem(void *a1, const char *a2, ...)
{
  return _[a1 accessControlConstraintsItem];
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _[a1 accounts];
}

id objc_msgSend_accountsWithAccountTypeIdentifiers_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "accountsWithAccountTypeIdentifiers:error:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return [a1 acquireWithError:];
}

id objc_msgSend_activateWithContext_(void *a1, const char *a2, ...)
{
  return [a1 activateWithContext:];
}

id objc_msgSend_activateWithToken_(void *a1, const char *a2, ...)
{
  return [a1 activateWithToken:];
}

id objc_msgSend_acwgSessionEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 acwgSessionEntitlement];
}

id objc_msgSend_addDelegate_queue_(void *a1, const char *a2, ...)
{
  return [a1 addDelegate:queue:];
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return [a1 addEntriesFromDictionary:];
}

id objc_msgSend_addHighPriorityRequestFor_client_(void *a1, const char *a2, ...)
{
  return [a1 addHighPriorityRequestFor:client:];
}

id objc_msgSend_addIndex_(void *a1, const char *a2, ...)
{
  return [a1 addIndex:];
}

id objc_msgSend_addItem_(void *a1, const char *a2, ...)
{
  return [a1 addItem:];
}

id objc_msgSend_addNewSession_firstInQueue_(void *a1, const char *a2, ...)
{
  return [a1 addNewSession:firstInQueue:];
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return [a1 addObject:];
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return [a1 addObjectsFromArray:];
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:forKeyPath:options:context:];
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return [a1 addObserver:a2 selector:a3 name:a4 object:a5];
}

id objc_msgSend_addPersistentStoreWithType_configuration_URL_options_error_(void *a1, const char *a2, ...)
{
  return [a1 addPersistentStoreWithType:configuration:URL:options:error:];
}

id objc_msgSend_addSession_forConnection_(void *a1, const char *a2, ...)
{
  return [a1 addSession:forConnection:];
}

id objc_msgSend_additionalAttestationsDict(void *a1, const char *a2, ...)
{
  return _[a1 additionalAttestationsDict];
}

id objc_msgSend_additionalData(void *a1, const char *a2, ...)
{
  return _[a1 additionalData];
}

id objc_msgSend_agreedKmlSharingVersion(void *a1, const char *a2, ...)
{
  return _[a1 agreedKmlSharingVersion];
}

id objc_msgSend_agreedKmlVehicleVersion(void *a1, const char *a2, ...)
{
  return _[a1 agreedKmlVehicleVersion];
}

id objc_msgSend_alishaKey(void *a1, const char *a2, ...)
{
  return _[a1 alishaKey];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _[a1 allObjects];
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _[a1 allValues];
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return [a1 allocWithZone:];
}

id objc_msgSend_anonymizedDsid(void *a1, const char *a2, ...)
{
  return _[a1 anonymizedDsid];
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 appendBytes:x0 length:x1];
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return [a1 appendData:];
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return [a1 appendFormat:];
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return [a1 appendString:];
}

id objc_msgSend_appendU16BE_(void *a1, const char *a2, ...)
{
  return [a1 appendU16BE:];
}

id objc_msgSend_appendU8_(void *a1, const char *a2, ...)
{
  return [a1 appendU8:];
}

id objc_msgSend_appletIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 appletIdentifier];
}

id objc_msgSend_appletLockStateDidChange_(void *a1, const char *a2, ...)
{
  return [a1 appletLockStateDidChange:];
}

id objc_msgSend_appletSupportedVersionsTlvForPairing(void *a1, const char *a2, ...)
{
  return _[a1 appletSupportedVersionsTlvForPairing];
}

id objc_msgSend_appletWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 appletWithIdentifier:];
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:")
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _[a1 array];
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithArray:];
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithCapacity:];
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObject:];
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return [a1 arrayWithObjects:];
}

id objc_msgSend_asAsciiData(void *a1, const char *a2, ...)
{
  return _[a1 asAsciiData];
}

id objc_msgSend_asCKKSExternalKey(void *a1, const char *a2, ...)
{
  return _[a1 asCKKSExternalKey];
}

id objc_msgSend_asCKKSExternalShare(void *a1, const char *a2, ...)
{
  return _[a1 asCKKSExternalShare];
}

id objc_msgSend_asData(void *a1, const char *a2, ...)
{
  return _[a1 asData];
}

id objc_msgSend_asDictionary(void *a1, const char *a2, ...)
{
  return _[a1 asDictionary];
}

id objc_msgSend_asHexString(void *a1, const char *a2, ...)
{
  return _[a1 asHexString];
}

id objc_msgSend_asOTPeerIdentity(void *a1, const char *a2, ...)
{
  return _[a1 asOTPeerIdentity];
}

id objc_msgSend_assetACL(void *a1, const char *a2, ...)
{
  return _[a1 assetACL];
}

id objc_msgSend_assetACLAttestation(void *a1, const char *a2, ...)
{
  return _[a1 assetACLAttestation];
}

id objc_msgSend_assetACLAttestationItem(void *a1, const char *a2, ...)
{
  return _[a1 assetACLAttestationItem];
}

id objc_msgSend_assetACLItem(void *a1, const char *a2, ...)
{
  return _[a1 assetACLItem];
}

id objc_msgSend_assetId(void *a1, const char *a2, ...)
{
  return _[a1 assetId];
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "attributeWithDomain:name:");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _[a1 attributes];
}

id objc_msgSend_auditToken(void *a1, const char *a2, ...)
{
  return _[a1 auditToken];
}

id objc_msgSend_authenticationTag(void *a1, const char *a2, ...)
{
  return _[a1 authenticationTag];
}

id objc_msgSend_authorizationID(void *a1, const char *a2, ...)
{
  return _[a1 authorizationID];
}

id objc_msgSend_authorizationInterval(void *a1, const char *a2, ...)
{
  return _[a1 authorizationInterval];
}

id objc_msgSend_authorizedKeys(void *a1, const char *a2, ...)
{
  return _[a1 authorizedKeys];
}

id objc_msgSend_available(void *a1, const char *a2, ...)
{
  return _[a1 available];
}

id objc_msgSend_base64(void *a1, const char *a2, ...)
{
  return _[a1 base64];
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return [a1 base64EncodedStringWithOptions:];
}

id objc_msgSend_bindingAttestation(void *a1, const char *a2, ...)
{
  return _[a1 bindingAttestation];
}

id objc_msgSend_bleAddress(void *a1, const char *a2, ...)
{
  return _[a1 bleAddress];
}

id objc_msgSend_bleIntroKey(void *a1, const char *a2, ...)
{
  return _[a1 bleIntroKey];
}

id objc_msgSend_bleOOBMasterKey(void *a1, const char *a2, ...)
{
  return _[a1 bleOOBMasterKey];
}

id objc_msgSend_bleUUID(void *a1, const char *a2, ...)
{
  return _[a1 bleUUID];
}

id objc_msgSend_blockRangingForReaderIdentifierWithReaderIdentifier_timeout_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "blockRangingForReaderIdentifierWithReaderIdentifier:timeout:error:")
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return [a1 BOOLForKey:];
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_BOOLValueForSetting_manufacturer_brand_uuid_error_(void *a1, const char *a2, ...)
{
  return [a1 BOOLValueForSetting:manufacturer:brand:uuid:error:];
}

id objc_msgSend_brand(void *a1, const char *a2, ...)
{
  return _[a1 brand];
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 bundleIdentifier];
}

id objc_msgSend_bundleRecordForAuditToken_error_(void *a1, const char *a2, ...)
{
  return [a1 bundleRecordForAuditToken:error:];
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_cacheProximityChipData_completion_(void *a1, const char *a2, ...)
{
  return [a1 cacheProximityChipData:completion:];
}

id objc_msgSend_callback(void *a1, const char *a2, ...)
{
  return _[a1 callback];
}

id objc_msgSend_callerError(void *a1, const char *a2, ...)
{
  return _[a1 callerError];
}

id objc_msgSend_canSend(void *a1, const char *a2, ...)
{
  return _[a1 canSend];
}

id objc_msgSend_cancelBackGroundTimer(void *a1, const char *a2, ...)
{
  return _[a1 cancelBackGroundTimer];
}

id objc_msgSend_cancelRKERequestWithFunctionIdentifier_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 cancelRKERequestWithFunctionIdentifier:keyIdentifier:];
}

id objc_msgSend_carOEMProprietaryData(void *a1, const char *a2, ...)
{
  return _[a1 carOEMProprietaryData];
}

id objc_msgSend_casdCertificate(void *a1, const char *a2, ...)
{
  return _[a1 casdCertificate];
}

id objc_msgSend_casdCertificateRSA(void *a1, const char *a2, ...)
{
  return _[a1 casdCertificateRSA];
}

id objc_msgSend_casdECDSACertificate(void *a1, const char *a2, ...)
{
  return _[a1 casdECDSACertificate];
}

id objc_msgSend_casdRSACertificate(void *a1, const char *a2, ...)
{
  return _[a1 casdRSACertificate];
}

id objc_msgSend_certificateAuthorities(void *a1, const char *a2, ...)
{
  return _[a1 certificateAuthorities];
}

id objc_msgSend_certificates(void *a1, const char *a2, ...)
{
  return _[a1 certificates];
}

id objc_msgSend_characterAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 characterAtIndex:];
}

id objc_msgSend_childWithTag_(void *a1, const char *a2, ...)
{
  return [a1 childWithTag:];
}

id objc_msgSend_children(void *a1, const char *a2, ...)
{
  return _[a1 children];
}

id objc_msgSend_cipherText(void *a1, const char *a2, ...)
{
  return _[a1 cipherText];
}

id objc_msgSend_cleanup(void *a1, const char *a2, ...)
{
  return _[a1 cleanup];
}

id objc_msgSend_clearAlarm_(void *a1, const char *a2, ...)
{
  return [a1 clearAlarm:];
}

id objc_msgSend_clientAppIsBackGrounded_(void *a1, const char *a2, ...)
{
  return [a1 clientAppIsBackGrounded:];
}

id objc_msgSend_clientAppIsForeGrounded_(void *a1, const char *a2, ...)
{
  return [a1 clientAppIsForeGrounded:];
}

id objc_msgSend_clientAppIsSuspended_(void *a1, const char *a2, ...)
{
  return [a1 clientAppIsSuspended:];
}

id objc_msgSend_clientBundleIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 clientBundleIdentifier];
}

id objc_msgSend_clientName(void *a1, const char *a2, ...)
{
  return _[a1 clientName];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _[a1 commit];
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return [a1 componentsSeparatedByString:];
}

id objc_msgSend_confidentialMailBoxSize(void *a1, const char *a2, ...)
{
  return _[a1 confidentialMailBoxSize];
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _[a1 configuration];
}

id objc_msgSend_configurationWithOpt1_opt2_(void *a1, const char *a2, ...)
{
  return [a1 configurationWithOpt1:opt2:];
}

id objc_msgSend_configurePrivateData_confidentialData_contactlessPersistentVisibility_wiredPersistentVisibility_nfcExpressOnlyInLPM_(void *a1, const char *a2, ...)
{
  return [a1 configurePrivateData:x0 confidentialData:x1 contactlessPersistentVisibility:x2 wiredPersistentVisibility:x3 nfcExpressOnlyInLPM:x4];
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return [a1 conformsToProtocol:];
}

id objc_msgSend_connection(void *a1, const char *a2, ...)
{
  return _[a1 connection];
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return [a1 containsObject:];
}

id objc_msgSend_containsWithFilter_(void *a1, const char *a2, ...)
{
  return [a1 containsWithFilter:];
}

id objc_msgSend_continueExecutingRKERequestWithFunctionIdentifier_actionIdentifier_arbitraryData_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 continueExecutingRKERequestWithFunctionIdentifier:actionIdentifier:arbitraryData:keyIdentifier:];
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_copyItemData_outData_updateToApplePayView_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "copyItemData:outData:updateToApplePayView:error:");
}

id objc_msgSend_copyMultipleItemData_outDatas_error_(void *a1, const char *a2, ...)
{
  return [a1 copyMultipleItemData:x0 outDatas:x1 error:x2];
}

id objc_msgSend_copyPathForPersonalizedData_error_(void *a1, const char *a2, ...)
{
  return [a1 copyPathForPersonalizedData:x0 error:x1];
}

id objc_msgSend_copyWithZone_(void *a1, const char *a2, ...)
{
  return [a1 copyWithZone:];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return [a1 countByEnumeratingWithState:x0 objects:x1 count:x2];
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return [a1 countForObject:];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return [a1 createDirectoryAtPath:withIntermediateDirectories:attributes:error:];
}

id objc_msgSend_createFidoAttestationWithSecureElement_instanceAID_fidoKey_relyingParty_relyingPartyAccountHash_challenge_error_(void *a1, const char *a2, ...)
{
  return [a1 createFidoAttestationWithSecureElement:x0 instanceAID:x1 fidoKey:x2 relyingParty:x3 relyingPartyAccountHash:x4 challenge:x5 error:x6];
}

id objc_msgSend_createPrivacyKeyWithGroupIdentifier_options_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "createPrivacyKeyWithGroupIdentifier:options:completion:");
}

id objc_msgSend_csn(void *a1, const char *a2, ...)
{
  return _[a1 csn];
}

id objc_msgSend_currentCompatibilityVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentCompatibilityVersion];
}

id objc_msgSend_currentConnection(void *a1, const char *a2, ...)
{
  return _[a1 currentConnection];
}

id objc_msgSend_currentContentVersion(void *a1, const char *a2, ...)
{
  return _[a1 currentContentVersion];
}

id objc_msgSend_currentState(void *a1, const char *a2, ...)
{
  return _[a1 currentState];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return [a1 dataTaskWithRequest:];
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 dataUsingEncoding:];
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytes:];
}

id objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(void *a1, const char *a2, ...)
{
  return [a1 dataWithBytesNoCopy:x0 length:x1 freeWhenDone:x2];
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dataWithCapacity:];
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfFile:];
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithContentsOfFile:x0 options:x1 error:x2];
}

id objc_msgSend_dataWithDERItem_(void *a1, const char *a2, ...)
{
  return [a1 dataWithDERItem:];
}

id objc_msgSend_dataWithData_(void *a1, const char *a2, ...)
{
  return [a1 dataWithData:];
}

id objc_msgSend_dataWithHexString_(void *a1, const char *a2, ...)
{
  return [a1 dataWithHexString:];
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return [a1 dataWithLength:];
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return [a1 dataWithPropertyList:x0 format:x1 options:x2 error:x3];
}

id objc_msgSend_dataWithTLVs_(void *a1, const char *a2, ...)
{
  return [a1 dataWithTLVs:];
}

id objc_msgSend_database(void *a1, const char *a2, ...)
{
  return _[a1 database];
}

id objc_msgSend_databaseService_reply_(void *a1, const char *a2, ...)
{
  return [a1 databaseService:reply:];
}

id objc_msgSend_databaseServiceWithProxy_isReconcileRequired_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 databaseServiceWithProxy:x0 isReconcileRequired:x1 reason:x2 reply:x3];
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateWithTimeIntervalSinceNow_(void *a1, const char *a2, ...)
{
  return [a1 dateWithTimeIntervalSinceNow:];
}

id objc_msgSend_dckSessionEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 dckSessionEntitlement];
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _[a1 debugDescription];
}

id objc_msgSend_decodeBoolForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeBoolForKey:];
}

id objc_msgSend_decodeIntegerForKey_(void *a1, const char *a2, ...)
{
  return [a1 decodeIntegerForKey:];
}

id objc_msgSend_decodeObjectOfClass_forKey_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decodeObjectOfClass:forKey:");
}

id objc_msgSend_decodeWithData_error_(void *a1, const char *a2, ...)
{
  return [a1 decodeWithData:x0 error:x1];
}

id objc_msgSend_decryptPayload_groupIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "decryptPayload:groupIdentifier:completion:");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _[a1 defaultCenter];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _[a1 defaultStore];
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _[a1 delegate];
}

id objc_msgSend_deleteEndPointLongTermPrivacyKey(void *a1, const char *a2, ...)
{
  return _[a1 deleteEndPointLongTermPrivacyKey];
}

id objc_msgSend_deleteItem_(void *a1, const char *a2, ...)
{
  return [a1 deleteItem:];
}

id objc_msgSend_deleteKeyWithRelyingParty_relyingPartyAccountHash_fidoKeyHash_error_(void *a1, const char *a2, ...)
{
  return [a1 deleteKeyWithRelyingParty:relyingPartyAccountHash:fidoKeyHash:error:];
}

id objc_msgSend_deleteObject_(void *a1, const char *a2, ...)
{
  return [a1 deleteObject:];
}

id objc_msgSend_deletePrivacyKey_completion_(void *a1, const char *a2, ...)
{
  return [a1 deletePrivacyKey:x0 completion:x1];
}

id objc_msgSend_deleteSEView_reply_(void *a1, const char *a2, ...)
{
  return [a1 deleteSEView:reply:];
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _[a1 description];
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _[a1 descriptor];
}

id objc_msgSend_designateKeyWithAid_slotNumber_keyIdentifier_assetACL_assetACLAttestation_operationApprovalVersion_designation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "designateKeyWithAid:slotNumber:keyIdentifier:assetACL:assetACLAttestation:operationApprovalVersion:designation:");
}

id objc_msgSend_designation(void *a1, const char *a2, ...)
{
  return _[a1 designation];
}

id objc_msgSend_deviceCapabilities(void *a1, const char *a2, ...)
{
  return _[a1 deviceCapabilities];
}

id objc_msgSend_deviceConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 deviceConfiguration];
}

id objc_msgSend_deviceEnteredPasscode(void *a1, const char *a2, ...)
{
  return _[a1 deviceEnteredPasscode];
}

id objc_msgSend_deviceForFromID_(void *a1, const char *a2, ...)
{
  return [a1 deviceForFromID:];
}

id objc_msgSend_deviceList(void *a1, const char *a2, ...)
{
  return _[a1 deviceList];
}

id objc_msgSend_deviceListWithContext_completion_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "deviceListWithContext:completion:");
}

id objc_msgSend_devicePrimaryPaymentApplication(void *a1, const char *a2, ...)
{
  return _[a1 devicePrimaryPaymentApplication];
}

id objc_msgSend_deviceType(void *a1, const char *a2, ...)
{
  return _[a1 deviceType];
}

id objc_msgSend_devices(void *a1, const char *a2, ...)
{
  return _[a1 devices];
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _[a1 dictionary];
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryForKey:];
}

id objc_msgSend_dictionaryWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithCapacity:];
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithDictionary:];
}

id objc_msgSend_dictionaryWithObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObject:forKey:];
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return [a1 dictionaryWithObjects:forKeys:count:];
}

id objc_msgSend_didAppEnterBackground_(void *a1, const char *a2, ...)
{
  return [a1 didAppEnterBackground:];
}

id objc_msgSend_didAppEnterForeground_(void *a1, const char *a2, ...)
{
  return [a1 didAppEnterForeground:];
}

id objc_msgSend_didAppGetSuspended_(void *a1, const char *a2, ...)
{
  return [a1 didAppGetSuspended:];
}

id objc_msgSend_didCloseConnection_(void *a1, const char *a2, ...)
{
  return [a1 didCloseConnection:];
}

id objc_msgSend_didCreateKey_(void *a1, const char *a2, ...)
{
  return [a1 didCreateKey:];
}

id objc_msgSend_didCreateKey_forVehicle_(void *a1, const char *a2, ...)
{
  return [a1 didCreateKey:forVehicle:];
}

id objc_msgSend_didEnd_(void *a1, const char *a2, ...)
{
  return [a1 didEnd:];
}

id objc_msgSend_didError(void *a1, const char *a2, ...)
{
  return _[a1 didError];
}

id objc_msgSend_didInvalidate(void *a1, const char *a2, ...)
{
  return _[a1 didInvalidate];
}

id objc_msgSend_didInvalidateWithError_(void *a1, const char *a2, ...)
{
  return [a1 didInvalidateWithError:];
}

id objc_msgSend_didLoadKey_(void *a1, const char *a2, ...)
{
  return [a1 didLoadKey:];
}

id objc_msgSend_didReceiveContinuationRequestFor_actionIdentifier_arbitraryData_fromVehicle_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveContinuationRequestFor:actionIdentifier arbitraryData:fromVehicle];
}

id objc_msgSend_didReceiveInvitationRequestWithUuid_ownerKeyIdentifier_friendKeyIdentifier_targetType_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveInvitationRequestWithUuid:x0 ownerKeyIdentifier:x1 friendKeyIdentifier:x2 targetType:x3];
}

id objc_msgSend_didReceivePassthroughMessage_(void *a1, const char *a2, ...)
{
  return [a1 didReceivePassthroughMessage:];
}

id objc_msgSend_didReceivePassthroughMessage_fromVehicle_(void *a1, const char *a2, ...)
{
  return [a1 didReceivePassthroughMessage:fromVehicle:];
}

id objc_msgSend_didReceivePassthroughMessage_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 didReceivePassthroughMessage:keyIdentifier:];
}

id objc_msgSend_didReceiveSharingInvitationRequest_withCompletion_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveSharingInvitationRequest:withCompletion:];
}

id objc_msgSend_didReceiveSharingInvitationWithIdentifier_uuid_metadata_ownerIdsId_(void *a1, const char *a2, ...)
{
  return [a1 didReceiveSharingInvitationWithIdentifier:uuid:metadata:ownerIdsId:];
}

id objc_msgSend_didStart_(void *a1, const char *a2, ...)
{
  return [a1 didStart:];
}

id objc_msgSend_didStartSession_(void *a1, const char *a2, ...)
{
  return [a1 didStartSession:];
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _[a1 displayName];
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_done(void *a1, const char *a2, ...)
{
  return _[a1 done];
}

id objc_msgSend_doubleForKey_(void *a1, const char *a2, ...)
{
  return [a1 doubleForKey:];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadAsset_(void *a1, const char *a2, ...)
{
  return [a1 downloadAsset:];
}

id objc_msgSend_downloadTimeoutInterval(void *a1, const char *a2, ...)
{
  return _[a1 downloadTimeoutInterval];
}

id objc_msgSend_dumpState(void *a1, const char *a2, ...)
{
  return _[a1 dumpState];
}

id objc_msgSend_ecdsaCertificate(void *a1, const char *a2, ...)
{
  return _[a1 ecdsaCertificate];
}

id objc_msgSend_embeddedSecureElementWithError_(void *a1, const char *a2, ...)
{
  return [a1 embeddedSecureElementWithError:];
}

id objc_msgSend_emptySlot_(void *a1, const char *a2, ...)
{
  return [a1 emptySlot:];
}

id objc_msgSend_enableVehicleEnteredPasscode(void *a1, const char *a2, ...)
{
  return _[a1 enableVehicleEnteredPasscode];
}

id objc_msgSend_enabledOnContactless(void *a1, const char *a2, ...)
{
  return _[a1 enabledOnContactless];
}

id objc_msgSend_enabledOnWire(void *a1, const char *a2, ...)
{
  return _[a1 enabledOnWire];
}

id objc_msgSend_encodeBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeBool:forKey:];
}

id objc_msgSend_encodeInteger_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeInteger:forKey:];
}

id objc_msgSend_encodeObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 encodeObject:forKey:];
}

id objc_msgSend_encodeWithError_(void *a1, const char *a2, ...)
{
  return [a1 encodeWithError:];
}

id objc_msgSend_encryptPayload_scheme_recipientPublicKey_completion_(void *a1, const char *a2, ...)
{
  return [a1 encryptPayload:x0 scheme:x1 recipientPublicKey:x2 completion:x3];
}

id objc_msgSend_encryptedData(void *a1, const char *a2, ...)
{
  return _[a1 encryptedData];
}

id objc_msgSend_encryptedRequest(void *a1, const char *a2, ...)
{
  return _[a1 encryptedRequest];
}

id objc_msgSend_encryptedWrappedKeyBlobItem(void *a1, const char *a2, ...)
{
  return _[a1 encryptedWrappedKeyBlobItem];
}

id objc_msgSend_encryptionPublicKeyData(void *a1, const char *a2, ...)
{
  return _[a1 encryptionPublicKeyData];
}

id objc_msgSend_endPointAction_clientInfo_reason_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "endPointAction:clientInfo:reason:reply:");
}

id objc_msgSend_endPointAction_proxy_clientInfo_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 endPointAction:proxy:clientInfo:reason:reply:];
}

id objc_msgSend_endPointAttestationData(void *a1, const char *a2, ...)
{
  return _[a1 endPointAttestationData];
}

id objc_msgSend_endPointCAData(void *a1, const char *a2, ...)
{
  return _[a1 endPointCAData];
}

id objc_msgSend_endPointCAWithIdentifier_subjectIdentifier_instanceAID_secureElementAttestation_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "endPointCAWithIdentifier:subjectIdentifier:instanceAID:secureElementAttestation:error:");
}

id objc_msgSend_endPointDBAction_clientInfo_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 endPointDBAction:clientInfo:reason:reply:];
}

id objc_msgSend_endPointData(void *a1, const char *a2, ...)
{
  return _[a1 endPointData];
}

id objc_msgSend_endPointServiceAvailable_reply_(void *a1, const char *a2, ...)
{
  return [a1 endPointServiceAvailable:x0 reply:x1];
}

id objc_msgSend_endPointServiceAvailableWithProxy_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 endPointServiceAvailableWithProxy:x0 reason:x1 reply:x2];
}

id objc_msgSend_endPointType(void *a1, const char *a2, ...)
{
  return _[a1 endPointType];
}

id objc_msgSend_endPointWithType_appletIdentifier_identifier_certificateData_error_(void *a1, const char *a2, ...)
{
  return [a1 endPointWithType:x0 appletIdentifier:x1 identifier:x2 certificateData:x3 error:x4];
}

id objc_msgSend_endPoints(void *a1, const char *a2, ...)
{
  return _[a1 endPoints];
}

id objc_msgSend_endSession(void *a1, const char *a2, ...)
{
  return _[a1 endSession];
}

id objc_msgSend_endSessionInternal_(void *a1, const char *a2, ...)
{
  return [a1 endSessionInternal:];
}

id objc_msgSend_endSessionWithCompletion_(void *a1, const char *a2, ...)
{
  return [a1 endSessionWithCompletion:];
}

id objc_msgSend_endowmentNamespaces(void *a1, const char *a2, ...)
{
  return _[a1 endowmentNamespaces];
}

id objc_msgSend_endpoint(void *a1, const char *a2, ...)
{
  return _[a1 endpoint];
}

id objc_msgSend_endpointId(void *a1, const char *a2, ...)
{
  return _[a1 endpointId];
}

id objc_msgSend_endpointIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 endpointIdentifier];
}

id objc_msgSend_enumerateKeysAndObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateKeysAndObjectsUsingBlock:];
}

id objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(void *a1, const char *a2, ...)
{
  return [a1 enumerateSubstringsInRange:options:usingBlock:];
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _[a1 environment];
}

id objc_msgSend_epAuthResponse(void *a1, const char *a2, ...)
{
  return _[a1 epAuthResponse];
}

id objc_msgSend_ephemeralPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralPublicKey];
}

id objc_msgSend_ephemeralPublicKeydata(void *a1, const char *a2, ...)
{
  return _[a1 ephemeralPublicKeydata];
}

id objc_msgSend_errorCount(void *a1, const char *a2, ...)
{
  return _[a1 errorCount];
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return [a1 errorWithDomain:code:userInfo:];
}

id objc_msgSend_eventPublisher(void *a1, const char *a2, ...)
{
  return _[a1 eventPublisher];
}

id objc_msgSend_eventPublisherQueue(void *a1, const char *a2, ...)
{
  return _[a1 eventPublisherQueue];
}

id objc_msgSend_executeFetchRequest_error_(void *a1, const char *a2, ...)
{
  return [a1 executeFetchRequest:error];
}

id objc_msgSend_expressModeControlState(void *a1, const char *a2, ...)
{
  return _[a1 expressModeControlState];
}

id objc_msgSend_expressPassConfigsWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "expressPassConfigsWithError:");
}

id objc_msgSend_fetchCliqueStatus_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchCliqueStatus:error:")];
}

id objc_msgSend_fetchRequest(void *a1, const char *a2, ...)
{
  return _[a1 fetchRequest];
}

id objc_msgSend_fetchSEViewKeyHierarchy_forceFetch_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "fetchSEViewKeyHierarchy:forceFetch:reply:");
}

id objc_msgSend_fetchTrustedSecureElementIdentities_(void *a1, const char *a2, ...)
{
  return [a1 fetchTrustedSecureElementIdentities:];
}

id objc_msgSend_fidoKeyFound(void *a1, const char *a2, ...)
{
  return _[a1 fidoKeyFound];
}

id objc_msgSend_fidoKeyHash(void *a1, const char *a2, ...)
{
  return _[a1 fidoKeyHash];
}

id objc_msgSend_fidoKeyNotFound(void *a1, const char *a2, ...)
{
  return _[a1 fidoKeyNotFound];
}

id objc_msgSend_fidoVerificationFailed(void *a1, const char *a2, ...)
{
  return _[a1 fidoVerificationFailed];
}

id objc_msgSend_fidoVerificationSucceeded(void *a1, const char *a2, ...)
{
  return _[a1 fidoVerificationSucceeded];
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return [a1 fileExistsAtPath:];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return [a1 fileURLWithPath:];
}

id objc_msgSend_filter_(void *a1, const char *a2, ...)
{
  return [a1 filter:];
}

id objc_msgSend_filterMap_(void *a1, const char *a2, ...)
{
  return [a1 filterMap:];
}

id objc_msgSend_find_(void *a1, const char *a2, ...)
{
  return [a1 find:];
}

id objc_msgSend_findKeyForRelyingParty_relyingPartyAccountHash_fidoKeyHash_secureElement_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "findKeyForRelyingParty:relyingPartyAccountHash:fidoKeyHash:secureElement:error:")];
}

id objc_msgSend_findKeyWithKeyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 findKeyWithKeyIdentifier:];
}

id objc_msgSend_finishedSharingForKey_result_(void *a1, const char *a2, ...)
{
  return [a1 finishedSharingForKey:x0 result:x1];
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _[a1 firstObject];
}

id objc_msgSend_friendKeyIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 friendKeyIdentifier];
}

id objc_msgSend_friendlyName(void *a1, const char *a2, ...)
{
  return _[a1 friendlyName];
}

id objc_msgSend_functionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 functionIdentifier];
}

id objc_msgSend_genericData(void *a1, const char *a2, ...)
{
  return _[a1 genericData];
}

id objc_msgSend_getActivePairedDevice(void *a1, const char *a2, ...)
{
  return _[a1 getActivePairedDevice];
}

id objc_msgSend_getAllEndpoints(void *a1, const char *a2, ...)
{
  return _[a1 getAllEndpoints];
}

id objc_msgSend_getAllowedVehicleIdentifiersForConnection_error_(void *a1, const char *a2, ...)
{
  return [a1 getAllowedVehicleIdentifiersForConnection:error];
}

id objc_msgSend_getAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 getAndReturnError:];
}

id objc_msgSend_getAvailableTLKForViewName_secureElement_(void *a1, const char *a2, ...)
{
  return [a1 getAvailableTLKForViewName:secureElement:];
}

id objc_msgSend_getBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 getBytes:x0 length:x1];
}

id objc_msgSend_getEncryptedCarOEMProprietaryData_withEndpointEntity_withSecureElement_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getEncryptedCarOEMProprietaryData:withEndpointEntity:withSecureElement:");
}

id objc_msgSend_getEncryptionCertificateFor_environment_region_error_(void *a1, const char *a2, ...)
{
  return [a1 getEncryptionCertificateFor:x0 environment:x1 region:x2 error:x3];
}

id objc_msgSend_getEndpointUser(void *a1, const char *a2, ...)
{
  return _[a1 getEndpointUser];
}

id objc_msgSend_getEndpointWithKeyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 getEndpointWithKeyIdentifier:];
}

id objc_msgSend_getEndpointWithReaderIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 getEndpointWithReaderIdentifier:];
}

id objc_msgSend_getEnduringRKERequestsInProgress(void *a1, const char *a2, ...)
{
  return _[a1 getEnduringRKERequestsInProgress];
}

id objc_msgSend_getExternalCACertificateFor_environment_prodSE_error_(void *a1, const char *a2, ...)
{
  return [a1 getExternalCACertificateFor:environment:prodSE:error:];
}

id objc_msgSend_getInstance(void *a1, const char *a2, ...)
{
  return _[a1 getInstance];
}

id objc_msgSend_getKeyHandle_key_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getKeyHandle:key:error:")];
}

id objc_msgSend_getLPEMFeaturesWithError_(void *a1, const char *a2, ...)
{
  return [a1 getLPEMFeaturesWithError:];
}

id objc_msgSend_getLocalFileUrl(void *a1, const char *a2, ...)
{
  return _[a1 getLocalFileUrl];
}

id objc_msgSend_getNFManager(void *a1, const char *a2, ...)
{
  return _[a1 getNFManager];
}

id objc_msgSend_getOccupiedLegacyKeySlots_(void *a1, const char *a2, ...)
{
  return [a1 getOccupiedLegacyKeySlots:];
}

id objc_msgSend_getPrivacyKeyWithGroupIdentifier_keyIdentifier_completion_(void *a1, const char *a2, ...)
{
  return [a1 getPrivacyKeyWithGroupIdentifier:keyIdentifier completion:completion];
}

id objc_msgSend_getReaderInformation(void *a1, const char *a2, ...)
{
  return _[a1 getReaderInformation];
}

id objc_msgSend_getReporter(void *a1, const char *a2, ...)
{
  return _[a1 getReporter];
}

id objc_msgSend_getReportsWithIsInternalClient_(void *a1, const char *a2, ...)
{
  return [a1 getReportsWithIsInternalClient:];
}

id objc_msgSend_getRootCertificateFor_keyID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getRootCertificateFor:keyID:error:");
}

id objc_msgSend_getRoutingInformation(void *a1, const char *a2, ...)
{
  return _[a1 getRoutingInformation];
}

id objc_msgSend_getSecureElementSession(void *a1, const char *a2, ...)
{
  return _[a1 getSecureElementSession];
}

id objc_msgSend_getSecureElementWithReason_callback_(void *a1, const char *a2, ...)
{
  return [a1 getSecureElementWithReason:x0 callback:x1];
}

id objc_msgSend_getSecureElementWithReason_handoffToken_completion_(void *a1, const char *a2, ...)
{
  return [a1 getSecureElementWithReason:x0 handoffToken:x1 completion:x2];
}

id objc_msgSend_getSettingForKey_error_(void *a1, const char *a2, ...)
{
  return [a1 getSettingForKey:error:];
}

id objc_msgSend_getSignatureCertificateFor_environment_region_error_(void *a1, const char *a2, ...)
{
  return [a1 getSignatureCertificateFor:x0 environment:x1 region:x2 error:x3];
}

id objc_msgSend_getSupportedLyonVersions(void *a1, const char *a2, ...)
{
  return _[a1 getSupportedLyonVersions];
}

id objc_msgSend_getTestReporter(void *a1, const char *a2, ...)
{
  return _[a1 getTestReporter];
}

id objc_msgSend_getTotalNumberOfSharedKeys(void *a1, const char *a2, ...)
{
  return _[a1 getTotalNumberOfSharedKeys];
}

id objc_msgSend_getType(void *a1, const char *a2, ...)
{
  return _[a1 getType];
}

id objc_msgSend_getUUIDBytes_(void *a1, const char *a2, ...)
{
  return [a1 getUUIDBytes:];
}

id objc_msgSend_getUsableKeySlot_(void *a1, const char *a2, ...)
{
  return [a1 getUsableKeySlot:];
}

id objc_msgSend_getUsableLegacyKeySlot_outError_(void *a1, const char *a2, ...)
{
  return [a1 getUsableLegacyKeySlot:outError];
}

id objc_msgSend_getValueWithSignificantDigits_value_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "getValueWithSignificantDigits:value:")];
}

id objc_msgSend_getWeeksTryingToDownload(void *a1, const char *a2, ...)
{
  return _[a1 getWeeksTryingToDownload];
}

id objc_msgSend_getX(void *a1, const char *a2, ...)
{
  return _[a1 getX];
}

id objc_msgSend_handleAvailableAsset_(void *a1, const char *a2, ...)
{
  return [a1 handleAvailableAsset:];
}

id objc_msgSend_handleConnectionSetupResult_(void *a1, const char *a2, ...)
{
  return [a1 handleConnectionSetupResult:];
}

id objc_msgSend_handleCrossPlatformParseInvitationStatus_(void *a1, const char *a2, ...)
{
  return [a1 handleCrossPlatformParseInvitationStatus:];
}

id objc_msgSend_handleCrossPlatformSharingMessage_fromMailboxIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 handleCrossPlatformSharingMessage:fromMailboxIdentifier:];
}

id objc_msgSend_handleCrossPlatformSigningRequest_status_keyInformation_(void *a1, const char *a2, ...)
{
  return [a1 handleCrossPlatformSigningRequest:status:keyInformation:];
}

id objc_msgSend_handleDownloadedAsset_(void *a1, const char *a2, ...)
{
  return [a1 handleDownloadedAsset:];
}

id objc_msgSend_handleEncryptionResult_trackingRequest_keyInformation_(void *a1, const char *a2, ...)
{
  return [a1 handleEncryptionResult:trackingRequest:keyInformation:];
}

id objc_msgSend_handleExchangeStartedWithFriendKey_status_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleExchangeStartedWithFriendKey:status:");
}

id objc_msgSend_handleFirstPostPairingTransactionEndResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleFirstPostPairingTransactionEndResult:");
}

id objc_msgSend_handleFirstTransactionCompletionResult_(void *a1, const char *a2, ...)
{
  return [a1 handleFirstTransactionCompletionResult:];
}

id objc_msgSend_handleFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 handleFirstUnlock];
}

id objc_msgSend_handleForIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 handleForIdentifier:error:];
}

id objc_msgSend_handleFriendSideKeySharingCancelStatus_(void *a1, const char *a2, ...)
{
  return [a1 handleFriendSideKeySharingCancelStatus:];
}

id objc_msgSend_handleIncomingApdu_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleIncomingApdu:error:");
}

id objc_msgSend_handleIncomingMessage_fromRemoteIdsIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 handleIncomingMessage:fromRemoteIdsIdentifier:];
}

id objc_msgSend_handleIncomingMessage_metaData_bindingAttestation_keyIdentifier_uuid_messageType_targetDeviceType_remoteIdsIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleIncomingMessage:metaData:bindingAttestation:keyIdentifier:uuid:messageType:targetDeviceType:remoteIdsIdentifier:");
}

id objc_msgSend_handleIncomingTestData_fromRemoteIdsIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 handleIncomingTestData:fromRemoteIdsIdentifier:];
}

id objc_msgSend_handleInitiatorMessageResult_(void *a1, const char *a2, ...)
{
  return [a1 handleInitiatorMessageResult:];
}

id objc_msgSend_handleKeyCreationCancellationResult_(void *a1, const char *a2, ...)
{
  return [a1 handleKeyCreationCancellationResult:];
}

id objc_msgSend_handleKeyCreationCompletionResult_(void *a1, const char *a2, ...)
{
  return [a1 handleKeyCreationCompletionResult:];
}

id objc_msgSend_handleKeyPairingCompletionResult_keyInformation_trackingRequest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleKeyPairingCompletionResult:keyInformation:trackingRequest:");
}

id objc_msgSend_handleKeysExchangeDoneWaitForMailboxes(void *a1, const char *a2, ...)
{
  return _[a1 handleKeysExchangeDoneWaitForMailboxes];
}

id objc_msgSend_handleKmlOwnerPairingCancellationResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleKmlOwnerPairingCancellationResult:");
}

id objc_msgSend_handleKmlOwnerPairingCompletionWithResult_keyInformation_keyTrackingRequest_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleKmlOwnerPairingCompletionWithResult:keyInformation:keyTrackingRequest:");
}

id objc_msgSend_handleKmlOwnerPairingDidStart(void *a1, const char *a2, ...)
{
  return _[a1 handleKmlOwnerPairingDidStart];
}

id objc_msgSend_handleKmlOwnerPairingFirstTransactionCompletionResult_(void *a1, const char *a2, ...)
{
  return [a1 handleKmlOwnerPairingFirstTransactionCompletionResult:];
}

id objc_msgSend_handleKmlOwnerPairingPreWarmCompletionResult_(void *a1, const char *a2, ...)
{
  return [a1 handleKmlOwnerPairingPreWarmCompletionResult:];
}

id objc_msgSend_handleKmlOwnerPairingProbingCompletionWithBrandCode_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleKmlOwnerPairingProbingCompletionWithBrandCode:error:");
}

id objc_msgSend_handleKmlOwnerPairingStartResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleKmlOwnerPairingStartResult:");
}

id objc_msgSend_handleKmlOwnerPairingTrackingReceiptSaveResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleKmlOwnerPairingTrackingReceiptSaveResult:");
}

id objc_msgSend_handleMailboxConfigurationDone(void *a1, const char *a2, ...)
{
  return _[a1 handleMailboxConfigurationDone];
}

id objc_msgSend_handleOwnerCrossPlatformInvitations_withError_(void *a1, const char *a2, ...)
{
  return [a1 handleOwnerCrossPlatformInvitations:withError:];
}

id objc_msgSend_handleOwnerKeySharingCancelStatus_(void *a1, const char *a2, ...)
{
  return [a1 handleOwnerKeySharingCancelStatus:];
}

id objc_msgSend_handleOwnerKeySharingCancelledWithStatus_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleOwnerKeySharingCancelledWithStatus:");
}

id objc_msgSend_handleOwnerKeySharingInvitations_withError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleOwnerKeySharingInvitations:withError:");
}

id objc_msgSend_handleOwnerPairingCancellationWithResult_(void *a1, const char *a2, ...)
{
  return [a1 handleOwnerPairingCancellationWithResult:];
}

id objc_msgSend_handlePairingDidStart(void *a1, const char *a2, ...)
{
  return _[a1 handlePairingDidStart];
}

id objc_msgSend_handlePairingTransportSessionFailedWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handlePairingTransportSessionFailedWithError:");
}

id objc_msgSend_handlePasscodeRetryRequestedForInvitation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handlePasscodeRetryRequestedForInvitation:");
}

id objc_msgSend_handlePreWarmCompletionResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handlePreWarmCompletionResult:");
}

id objc_msgSend_handlePreWarmResult_(void *a1, const char *a2, ...)
{
  return [a1 handlePreWarmResult:];
}

id objc_msgSend_handleProbingCompletionWithBrandCode_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleProbingCompletionWithBrandCode:error:");
}

id objc_msgSend_handleQuerySuccess_(void *a1, const char *a2, ...)
{
  return [a1 handleQuerySuccess:];
}

id objc_msgSend_handleRecipientMessageResult_(void *a1, const char *a2, ...)
{
  return [a1 handleRecipientMessageResult:];
}

id objc_msgSend_handleRemoteConfigurationReceived(void *a1, const char *a2, ...)
{
  return _[a1 handleRemoteConfigurationReceived];
}

id objc_msgSend_handleSendMessageResult_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleSendMessageResult:");
}

id objc_msgSend_handleSendMessageResult_forMessageIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleSendMessageResult:forMessageIdentifier:");
}

id objc_msgSend_handleSentInvitationWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 handleSentInvitationWithIdentifier:];
}

id objc_msgSend_handleSessionEndResult_(void *a1, const char *a2, ...)
{
  return [a1 handleSessionEndResult:];
}

id objc_msgSend_handleSessionPauseResult_(void *a1, const char *a2, ...)
{
  return [a1 handleSessionPauseResult:];
}

id objc_msgSend_handleSessionResumeResult_(void *a1, const char *a2, ...)
{
  return [a1 handleSessionResumeResult:];
}

id objc_msgSend_handleSessionStartResult_(void *a1, const char *a2, ...)
{
  return [a1 handleSessionStartResult:];
}

id objc_msgSend_handleSharingCancelledMessage_(void *a1, const char *a2, ...)
{
  return [a1 handleSharingCancelledMessage:];
}

id objc_msgSend_handleSharingCompleteForInvitationIdentifier_localShare_bindingAttestationUsed_status_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "handleSharingCompleteForInvitationIdentifier:localShare:bindingAttestationUsed:status:");
}

id objc_msgSend_handleTransactionEndResult_(void *a1, const char *a2, ...)
{
  return [a1 handleTransactionEndResult:];
}

id objc_msgSend_handleTransactionStartResult_(void *a1, const char *a2, ...)
{
  return [a1 handleTransactionStartResult:];
}

id objc_msgSend_handleTransportSetupResult_(void *a1, const char *a2, ...)
{
  return [a1 handleTransportSetupResult:];
}

id objc_msgSend_handleUpgradeCompletionWithStatus_(void *a1, const char *a2, ...)
{
  return [a1 handleUpgradeCompletionWithStatus:];
}

id objc_msgSend_hasChanges(void *a1, const char *a2, ...)
{
  return _[a1 hasChanges];
}

id objc_msgSend_haveAvailableTLKForEncryptedData_secureElement_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "haveAvailableTLKForEncryptedData:secureElement:error:")];
}

id objc_msgSend_hexStringAsData(void *a1, const char *a2, ...)
{
  return _[a1 hexStringAsData];
}

id objc_msgSend_homeDefaults(void *a1, const char *a2, ...)
{
  return _[a1 homeDefaults];
}

id objc_msgSend_hupData(void *a1, const char *a2, ...)
{
  return _[a1 hupData];
}

id objc_msgSend_hydraDefaults(void *a1, const char *a2, ...)
{
  return _[a1 hydraDefaults];
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _[a1 identifier];
}

id objc_msgSend_identifierWithPid_(void *a1, const char *a2, ...)
{
  return [a1 identifierWithPid:];
}

id objc_msgSend_identityForAngelJobLabel_(void *a1, const char *a2, ...)
{
  return [a1 identityForAngelJobLabel:];
}

id objc_msgSend_increaseLengthBy_(void *a1, const char *a2, ...)
{
  return [a1 increaseLengthBy:];
}

id objc_msgSend_indexSet(void *a1, const char *a2, ...)
{
  return _[a1 indexSet];
}

id objc_msgSend_info(void *a1, const char *a2, ...)
{
  return _[a1 info];
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _[a1 init];
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return [a1 init:];
}

id objc_msgSend_initCredentialProvisionedResultWithCredentialIdentifier_keyInformation_(void *a1, const char *a2, ...)
{
  return [a1 initCredentialProvisionedResultWithCredentialIdentifier:keyInformation:];
}

id objc_msgSend_initDataRequiredResultWithResponse_(void *a1, const char *a2, ...)
{
  return [a1 initDataRequiredResultWithResponse:];
}

id objc_msgSend_initFailureResultWithCrdentialIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 initFailureResultWithCrdentialIdentifier:error:];
}

id objc_msgSend_initFailureResultWithResponse_error_(void *a1, const char *a2, ...)
{
  return [a1 initFailureResultWithResponse:error:];
}

id objc_msgSend_initInviteAcceptedResultWithResponse_(void *a1, const char *a2, ...)
{
  return [a1 initInviteAcceptedResultWithResponse:];
}

id objc_msgSend_initPasscodeFailureResultWithCredentialIdentifier_retryCount_(void *a1, const char *a2, ...)
{
  return [a1 initPasscodeFailureResultWithCredentialIdentifier:retryCount:];
}

id objc_msgSend_initWithAID_(void *a1, const char *a2, ...)
{
  return [a1 initWithAID:];
}

id objc_msgSend_initWithAppBundleID_nonce_signedData_signature_(void *a1, const char *a2, ...)
{
  return [a1 initWithAppBundleID:nonce:signedData:signature:];
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return [a1 initWithArray:];
}

id objc_msgSend_initWithBase64EncodedData_options_(void *a1, const char *a2, ...)
{
  return [a1 initWithBase64EncodedData:options:];
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 initWithCapacity:];
}

id objc_msgSend_initWithConcurrencyType_(void *a1, const char *a2, ...)
{
  return [a1 initWithConcurrencyType:];
}

id objc_msgSend_initWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithContentsOfURL:];
}

id objc_msgSend_initWithContextData_(void *a1, const char *a2, ...)
{
  return [a1 initWithContextData:];
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:];
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return [a1 initWithData:x0 encoding:x1];
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return [a1 initWithDelegate:];
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 initWithDictionary:];
}

id objc_msgSend_initWithEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 initWithEndpoint:];
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return [a1 initWithExplanation:x0 target:x1 attributes:x2];
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:];
}

id objc_msgSend_initWithFormat_arguments_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:x0, x1];
}

id objc_msgSend_initWithFormat_type_genericSharingDict_appleSharingDict_(void *a1, const char *a2, ...)
{
  return [a1 initWithFormat:x0 type:x1 genericSharingDict:x2 appleSharingDict:x3];
}

id objc_msgSend_initWithGenericCrossPlatformSharingData_additionalData_privateData_(void *a1, const char *a2, ...)
{
  return [a1 initWithGenericCrossPlatformSharingData:x0 additionalData:x1 privateData:x2];
}

id objc_msgSend_initWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithIdentifier];
}

id objc_msgSend_initWithInformation_readerIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithInformation:x0 readerIdentifier:x1];
}

id objc_msgSend_initWithKeyInformation_(void *a1, const char *a2, ...)
{
  return [a1 initWithKeyInformation:];
}

id objc_msgSend_initWithLength_(void *a1, const char *a2, ...)
{
  return [a1 initWithLength:];
}

id objc_msgSend_initWithMachPort_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachPort:x0 queue:x1];
}

id objc_msgSend_initWithMachServiceName_(void *a1, const char *a2, ...)
{
  return [a1 initWithMachServiceName:];
}

id objc_msgSend_initWithManagedObjectModel_(void *a1, const char *a2, ...)
{
  return [a1 initWithManagedObjectModel:];
}

id objc_msgSend_initWithPassword_salt_authenticatedData_keyDerivationCost_(void *a1, const char *a2, ...)
{
  return [a1 initWithPassword:x0 salt:x1 authenticatedData:x2 keyDerivationCost:x3];
}

id objc_msgSend_initWithProfile_displayName_metaData_targetDeviceType_enableVehiclePasscode_maxRetriesForDevicePasscode_deviceEnteredPasscode_proprietaryEntitlements_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "initWithProfile:displayName:metaData:targetDeviceType:enableVehiclePasscode:maxRetriesForDevicePasscode:deviceEnteredPasscode:proprietaryEntitlements:");
}

id objc_msgSend_initWithPublicKey_secretKey_(void *a1, const char *a2, ...)
{
  return [a1 initWithPublicKey:x0 secretKey:x1];
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithQueue:];
}

id objc_msgSend_initWithReaderInformation_(void *a1, const char *a2, ...)
{
  return [a1 initWithReaderInformation:];
}

id objc_msgSend_initWithRemoteObject_connection_andQueue_(void *a1, const char *a2, ...)
{
  return [a1 initWithRemoteObject:x0 connection:x1 andQueue:x2];
}

id objc_msgSend_initWithRemoteObject_keyIdentifier_appletIdentifier_options_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithRemoteObject:x0 keyIdentifier:x1 appletIdentifier:x2 options:x3 queue:x4];
}

id objc_msgSend_initWithRemoteObject_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithRemoteObject:x0 queue:x1];
}

id objc_msgSend_initWithRemoteObject_subscriptionRange_queue_(void *a1, const char *a2, ...)
{
  return [a1 initWithRemoteObject:x0 subcriptionRange:x1 queue:x2];
}

id objc_msgSend_initWithSceneProvidingProcess_configurationIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithSceneProvidingProcess:configurationIdentifier:];
}

id objc_msgSend_initWithService_(void *a1, const char *a2, ...)
{
  return [a1 initWithService:];
}

id objc_msgSend_initWithSessionUUID_invitationIdentifier_friendKeyIdentifier_sharingTarget_state_vehicleEnteredPasscode_(void *a1, const char *a2, ...)
{
  return [a1 initWithSessionUUID:x0 invitationIdentifier:x1 friendKeyIdentifier:x2 sharingTarget:x3 state:x4 vehicleEnteredPasscode:x5];
}

id objc_msgSend_initWithSet_(void *a1, const char *a2, ...)
{
  return [a1 initWithSet:];
}

id objc_msgSend_initWithSharingIdentifier_friendKeyIdentifier_sharingMessageType_message_(void *a1, const char *a2, ...)
{
  return [a1 initWithSharingIdentifier:x0 friendKeyIdentifier:x1 sharingMessageType:x2 message:x3];
}

id objc_msgSend_initWithSharingSessionIdentifier_subCaAttestation_casd_rsaCertData_(void *a1, const char *a2, ...)
{
  return [a1 initWithSharingSessionIdentifier:subCaAttestation:casd:rsaCertData:];
}

id objc_msgSend_initWithSharingSessionUUID_bindingAttestation_targetDeviceType_initiatorIdsPseudonym_(void *a1, const char *a2, ...)
{
  return [a1 initWithSharingSessionUUID:x0 bindingAttestation:x1 targetDeviceType:x2 initiatorIdsPseudonym:x3];
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return [a1 initWithString:];
}

id objc_msgSend_initWithSuiteName_(void *a1, const char *a2, ...)
{
  return [a1 initWithSuiteName:];
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return [a1 initWithType:];
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return [a1 initWithURL:];
}

id objc_msgSend_initWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 initWithUTF8String:];
}

id objc_msgSend_initWithUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 initWithUUIDString:];
}

id objc_msgSend_initWithVehicleEnteredPasscode_pairedEntityIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 initWithVehicleEnteredPasscode:x0 pairedEntityIdentifier:x1];
}

id objc_msgSend_initWithVersion_ephemeralPublicKey_publicKeyHash_encryptedRequest_(void *a1, const char *a2, ...)
{
  return [a1 initWithVersion:x0 ephemeralPublicKey:x1 publicKeyHash:x2 encryptedRequest:x3];
}

id objc_msgSend_initializeRAMRepresentation_(void *a1, const char *a2, ...)
{
  return [a1 initializeRAMRepresentation:];
}

id objc_msgSend_initiatorIdsPseudonym(void *a1, const char *a2, ...)
{
  return _[a1 initiatorIdsPseudonym];
}

id objc_msgSend_insertNewObjectForEntityForName_inManagedObjectContext_(void *a1, const char *a2, ...)
{
  return [a1 insertNewObjectForEntityForName:inManagedObjectContext:];
}

id objc_msgSend_insertWithEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 insertWithEndpoint:];
}

id objc_msgSend_instance(void *a1, const char *a2, ...)
{
  return _[a1 instance];
}

id objc_msgSend_instanceRepresentations(void *a1, const char *a2, ...)
{
  return _[a1 instanceRepresentations];
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _[a1 intValue];
}

id objc_msgSend_intValueForSetting_manufacturer_brand_uuid_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "intValueForSetting:manufacturer:brand:uuid:error:");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return [a1 integerForKey:];
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _[a1 interface];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return [a1 interfaceWithProtocol:];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateInternal(void *a1, const char *a2, ...)
{
  return _[a1 invalidateInternal];
}

id objc_msgSend_invitationSet(void *a1, const char *a2, ...)
{
  return _[a1 invitationSet];
}

id objc_msgSend_invoke_(void *a1, const char *a2, ...)
{
  return [a1 invoke:];
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _[a1 isActive];
}

id objc_msgSend_isAlarmSet_(void *a1, const char *a2, ...)
{
  return [a1 isAlarmSet:];
}

id objc_msgSend_isBackgrounded(void *a1, const char *a2, ...)
{
  return _[a1 isBackgrounded];
}

id objc_msgSend_isCarKeyPass(void *a1, const char *a2, ...)
{
  return _[a1 isCarKeyPass];
}

id objc_msgSend_isDCKConfigurationAvailableFor_error_(void *a1, const char *a2, ...)
{
  return [a1 isDCKConfigurationAvailableFor:error];
}

id objc_msgSend_isDebugAllowAllEndpointsEnabled(void *a1, const char *a2, ...)
{
  return _[a1 isDebugAllowAllEndpointsEnabled];
}

id objc_msgSend_isEligibleAsset_(void *a1, const char *a2, ...)
{
  return [a1 isEligibleAsset:];
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return [a1 isEqual:];
}

id objc_msgSend_isEqualToData_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToData:];
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return [a1 isEqualToString:];
}

id objc_msgSend_isExportedData(void *a1, const char *a2, ...)
{
  return _[a1 isExportedData];
}

id objc_msgSend_isFirstLaunchAfterBootForKey_(void *a1, const char *a2, ...)
{
  return [a1 isFirstLaunchAfterBootForKey:];
}

id objc_msgSend_isPassLibraryAvailable(void *a1, const char *a2, ...)
{
  return _[a1 isPassLibraryAvailable];
}

id objc_msgSend_isPassiveEntryAvailableFor_(void *a1, const char *a2, ...)
{
  return [a1 isPassiveEntryAvailableFor:];
}

id objc_msgSend_isPeerConnectedWithClientUUID_(void *a1, const char *a2, ...)
{
  return [a1 isPeerConnectedWithClientUUID:];
}

id objc_msgSend_isPreArmed(void *a1, const char *a2, ...)
{
  return _[a1 isPreArmed];
}

id objc_msgSend_isProd(void *a1, const char *a2, ...)
{
  return _[a1 isProd];
}

id objc_msgSend_isProduction(void *a1, const char *a2, ...)
{
  return _[a1 isProduction];
}

id objc_msgSend_isReadableFileAtPath_(void *a1, const char *a2, ...)
{
  return [a1 isReadableFileAtPath:];
}

id objc_msgSend_isRunning(void *a1, const char *a2, ...)
{
  return _[a1 isRunning];
}

id objc_msgSend_isSubsetOfSet_(void *a1, const char *a2, ...)
{
  return [a1 isSubsetOfSet:];
}

id objc_msgSend_isSupported(void *a1, const char *a2, ...)
{
  return _[a1 isSupported];
}

id objc_msgSend_isWaitingForSecureElement(void *a1, const char *a2, ...)
{
  return _[a1 isWaitingForSecureElement];
}

id objc_msgSend_isWritableFileAtPath_(void *a1, const char *a2, ...)
{
  return [a1 isWritableFileAtPath:];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keyAttestationError(void *a1, const char *a2, ...)
{
  return _[a1 keyAttestationError];
}

id objc_msgSend_keyBlobItem(void *a1, const char *a2, ...)
{
  return _[a1 keyBlobItem];
}

id objc_msgSend_keyCreationError(void *a1, const char *a2, ...)
{
  return _[a1 keyCreationError];
}

id objc_msgSend_keyData(void *a1, const char *a2, ...)
{
  return _[a1 keyData];
}

id objc_msgSend_keyDecodeError(void *a1, const char *a2, ...)
{
  return _[a1 keyDecodeError];
}

id objc_msgSend_keyExportError(void *a1, const char *a2, ...)
{
  return _[a1 keyExportError];
}

id objc_msgSend_keyIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 keyIdentifier];
}

id objc_msgSend_keyNumber(void *a1, const char *a2, ...)
{
  return _[a1 keyNumber];
}

id objc_msgSend_keyOperation_handoffToken_keyData_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 keyOperation:handoffToken:keyData:reason:reply:];
}

id objc_msgSend_keyOperation_keyData_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 keyOperation:keyData:reason:reply:];
}

id objc_msgSend_keyRole(void *a1, const char *a2, ...)
{
  return _[a1 keyRole];
}

id objc_msgSend_keyRoleToShare(void *a1, const char *a2, ...)
{
  return _[a1 keyRoleToShare];
}

id objc_msgSend_keyServiceAvailable_handoffToken_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 keyServiceAvailable:x0 handoffToken:x1 reason:x2 reply:x3];
}

id objc_msgSend_keyServiceAvailable_reason_reply_(void *a1, const char *a2, ...)
{
  return [a1 keyServiceAvailable:reason:reply:];
}

id objc_msgSend_keychainAddError(void *a1, const char *a2, ...)
{
  return _[a1 keychainAddError];
}

id objc_msgSend_keys(void *a1, const char *a2, ...)
{
  return _[a1 keys];
}

id objc_msgSend_kickOff(void *a1, const char *a2, ...)
{
  return _[a1 kickOff];
}

id objc_msgSend_kickOffAndReturnError_(void *a1, const char *a2, ...)
{
  return [a1 kickOffAndReturnError:];
}

id objc_msgSend_kickoff(void *a1, const char *a2, ...)
{
  return _[a1 kickoff];
}

id objc_msgSend_kmlOverrideVersion(void *a1, const char *a2, ...)
{
  return _[a1 kmlOverrideVersion];
}

id objc_msgSend_kmlSupportedVersionsTlvForPairing(void *a1, const char *a2, ...)
{
  return _[a1 kmlSupportedVersionsTlvForPairing];
}

id objc_msgSend_kmlSupportedVersionsTlvForShareInitiator(void *a1, const char *a2, ...)
{
  return _[a1 kmlSupportedVersionsTlvForShareInitiator];
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _[a1 lastObject];
}

id objc_msgSend_legacyKeyServiceAvailable_reason_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "legacyKeyServiceAvailable:reason:reply:");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_lengthOfBytesUsingEncoding_(void *a1, const char *a2, ...)
{
  return [a1 lengthOfBytesUsingEncoding:];
}

id objc_msgSend_localPeerIdentity(void *a1, const char *a2, ...)
{
  return _[a1 localPeerIdentity];
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 localeWithLocaleIdentifier:];
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_localizedFailureReason(void *a1, const char *a2, ...)
{
  return _[a1 localizedFailureReason];
}

id objc_msgSend_logEncryptedAPDU_decrypted_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "logEncryptedAPDU:decrypted:");
}

id objc_msgSend_logOptions(void *a1, const char *a2, ...)
{
  return _[a1 logOptions];
}

id objc_msgSend_loginID(void *a1, const char *a2, ...)
{
  return _[a1 loginID];
}

id objc_msgSend_longTermSharedSecret(void *a1, const char *a2, ...)
{
  return _[a1 longTermSharedSecret];
}

id objc_msgSend_longValue(void *a1, const char *a2, ...)
{
  return _[a1 longValue];
}

id objc_msgSend_lyonHomeDefaults(void *a1, const char *a2, ...)
{
  return _[a1 lyonHomeDefaults];
}

id objc_msgSend_lyonHydraDefaults(void *a1, const char *a2, ...)
{
  return _[a1 lyonHydraDefaults];
}

id objc_msgSend_mailboxMapping(void *a1, const char *a2, ...)
{
  return _[a1 mailboxMapping];
}

id objc_msgSend_mailboxSizesPlusAdditionalData(void *a1, const char *a2, ...)
{
  return _[a1 mailboxSizesPlusAdditionalData];
}

id objc_msgSend_manufacturer(void *a1, const char *a2, ...)
{
  return _[a1 manufacturer];
}

id objc_msgSend_maxRetriesForDeviceEnteredPasscode(void *a1, const char *a2, ...)
{
  return _[a1 maxRetriesForDeviceEnteredPasscode];
}

id objc_msgSend_maybeQueryMetadata(void *a1, const char *a2, ...)
{
  return _[a1 maybeQueryMetadata];
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _[a1 message];
}

id objc_msgSend_messageQueue(void *a1, const char *a2, ...)
{
  return _[a1 messageQueue];
}

id objc_msgSend_messageType(void *a1, const char *a2, ...)
{
  return _[a1 messageType];
}

id objc_msgSend_metaData(void *a1, const char *a2, ...)
{
  return _[a1 metaData];
}

id objc_msgSend_metadataQueryInterval(void *a1, const char *a2, ...)
{
  return _[a1 metadataQueryInterval];
}

id objc_msgSend_minusSet_(void *a1, const char *a2, ...)
{
  return [a1 minusSet:];
}

id objc_msgSend_mobileAssetManager(void *a1, const char *a2, ...)
{
  return _[a1 mobileAssetManager];
}

id objc_msgSend_mockRefreshInstanceCA(void *a1, const char *a2, ...)
{
  return _[a1 mockRefreshInstanceCA];
}

id objc_msgSend_modifyTLKSharesForSEView_adding_deleting_reply_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "modifyTLKSharesForSEView:adding:deleting:reply:");
}

id objc_msgSend_monitor(void *a1, const char *a2, ...)
{
  return _[a1 monitor];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _[a1 name];
}

id objc_msgSend_newHandleWithDefinition_configurationContext_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "newHandleWithDefinition:configurationContext:");
}

id objc_msgSend_newSERequestWithReason_callback_(void *a1, const char *a2, ...)
{
  return [a1 newSERequestWithReason:callback:];
}

id objc_msgSend_nfcExpressOnlyInLPM(void *a1, const char *a2, ...)
{
  return _[a1 nfcExpressOnlyInLPM];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_number(void *a1, const char *a2, ...)
{
  return _[a1 number];
}

id objc_msgSend_numberFromString_(void *a1, const char *a2, ...)
{
  return [a1 numberFromString:];
}

id objc_msgSend_numberOfPairingSessionsQueued(void *a1, const char *a2, ...)
{
  return _[a1 numberOfPairingSessionsQueued];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return [a1 numberWithBool:];
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return [a1 numberWithDouble:];
}

id objc_msgSend_numberWithInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInt:];
}

id objc_msgSend_numberWithInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithInteger:];
}

id objc_msgSend_numberWithUnsignedChar_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedChar:];
}

id objc_msgSend_numberWithUnsignedInt_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInt:];
}

id objc_msgSend_numberWithUnsignedInteger_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedInteger:];
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return [a1 numberWithUnsignedShort:];
}

id objc_msgSend_objectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndex:];
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectAtIndexedSubscript:];
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return [a1 objectForKey:];
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 objectForKeyedSubscript:];
}

id objc_msgSend_observerWithDelegate_(void *a1, const char *a2, ...)
{
  return [a1 observerWithDelegate:];
}

id objc_msgSend_onAssertionAcquiredWithIdentifier_for_(void *a1, const char *a2, ...)
{
  return [a1 onAssertionAcquiredWithIdentifier:for:];
}

id objc_msgSend_onAssertionReleasedWithIdentifier_for_(void *a1, const char *a2, ...)
{
  return [a1 onAssertionReleasedWithIdentifier:for:];
}

id objc_msgSend_onDarwinNotification_(void *a1, const char *a2, ...)
{
  return [a1 onDarwinNotification:];
}

id objc_msgSend_onFirstUnlock(void *a1, const char *a2, ...)
{
  return _[a1 onFirstUnlock];
}

id objc_msgSend_onTrackingCompleteFor_(void *a1, const char *a2, ...)
{
  return [a1 onTrackingCompleteFor:];
}

id objc_msgSend_openApplication_withOptions_completion_(void *a1, const char *a2, ...)
{
  return [a1 openApplication:withOptions:completion:];
}

id objc_msgSend_opt1(void *a1, const char *a2, ...)
{
  return _[a1 opt1];
}

id objc_msgSend_opt2(void *a1, const char *a2, ...)
{
  return _[a1 opt2];
}

id objc_msgSend_optA(void *a1, const char *a2, ...)
{
  return _[a1 optA];
}

id objc_msgSend_optionsForInterval_(void *a1, const char *a2, ...)
{
  return [a1 optionsForInterval:];
}

id objc_msgSend_optionsWithDictionary_(void *a1, const char *a2, ...)
{
  return [a1 optionsWithDictionary:];
}

id objc_msgSend_otCliqueForAltDSID_(void *a1, const char *a2, ...)
{
  return [a1 otCliqueForAltDSID:];
}

id objc_msgSend_ourPreferredKmlVersion(void *a1, const char *a2, ...)
{
  return _[a1 ourPreferredKmlVersion];
}

id objc_msgSend_ownerCompletionHandler(void *a1, const char *a2, ...)
{
  return _[a1 ownerCompletionHandler];
}

id objc_msgSend_ownerEphemeralKey(void *a1, const char *a2, ...)
{
  return _[a1 ownerEphemeralKey];
}

id objc_msgSend_ownerIdsIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 ownerIdsIdentifier];
}

id objc_msgSend_pairedReaderIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 pairedReaderIdentifier];
}

id objc_msgSend_pairingEndedWithError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "pairingEndedWithError:");
}

id objc_msgSend_pairingEndedWithResult_(void *a1, const char *a2, ...)
{
  return [a1 pairingEndedWithResult:];
}

id objc_msgSend_parsePTAExtension_certificate_specification_output_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "parsePTAExtension:certificate:specification:output:");
}

id objc_msgSend_passUniqueIDsForAssociatedApplicationIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 passUniqueIDsForAssociatedApplicationIdentifier:];
}

id objc_msgSend_passcodeRetryRequestedFor_retriesLeft_(void *a1, const char *a2, ...)
{
  return [a1 passcodeRetryRequestedFor:x0 retriesLeft:x1];
}

id objc_msgSend_passes(void *a1, const char *a2, ...)
{
  return _[a1 passes];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_pauseRangingFor_(void *a1, const char *a2, ...)
{
  return [a1 pauseRangingFor:];
}

id objc_msgSend_peerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 peerIdentifier];
}

id objc_msgSend_performBlockAndWait_(void *a1, const char *a2, ...)
{
  return [a1 performBlockAndWait:];
}

id objc_msgSend_performFidoSignatureWithSecureElement_instanceAID_loadedKey_relyingParty_relyingPartyAccountHash_challenge_ptaEndPointIdentifierForExtension_externalizedAuth_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "performFidoSignatureWithSecureElement:instanceAID:loadedKey:relyingParty:relyingPartyAccountHash:challenge:ptaEndPointIdentifierForExtension:externalizedAuth:error:");
}

id objc_msgSend_performFidoVerificationWithPublicKey_signedChallenge_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "performFidoVerificationWithPublicKey:signedChallenge:error:");
}

id objc_msgSend_persistentConfigID(void *a1, const char *a2, ...)
{
  return _[a1 persistentConfigID];
}

id objc_msgSend_pid(void *a1, const char *a2, ...)
{
  return _[a1 pid];
}

id objc_msgSend_popFirst(void *a1, const char *a2, ...)
{
  return _[a1 popFirst];
}

id objc_msgSend_postCAEventFor_eventInput_(void *a1, const char *a2, ...)
{
  return [a1 postCAEventFor:eventInput];
}

id objc_msgSend_postNotificationName_object_userInfo_options_(void *a1, const char *a2, ...)
{
  return [a1 postNotificationName:object:userInfo:options:];
}

id objc_msgSend_predicateMatchingIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 predicateMatchingIdentifier:];
}

id objc_msgSend_prependCertificateChain_(void *a1, const char *a2, ...)
{
  return [a1 prependCertificateChain:];
}

id objc_msgSend_privacyEncryptionPK(void *a1, const char *a2, ...)
{
  return _[a1 privacyEncryptionPK];
}

id objc_msgSend_privacyKeyIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 privacyKeyIdentifier];
}

id objc_msgSend_privacyPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 privacyPublicKey];
}

id objc_msgSend_privateMailBoxSize(void *a1, const char *a2, ...)
{
  return _[a1 privateMailBoxSize];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_processName(void *a1, const char *a2, ...)
{
  return _[a1 processName];
}

id objc_msgSend_processResponseWithY_M1_(void *a1, const char *a2, ...)
{
  return [a1 processResponseWithY:M1];
}

id objc_msgSend_prodMode(void *a1, const char *a2, ...)
{
  return _[a1 prodMode];
}

id objc_msgSend_profile(void *a1, const char *a2, ...)
{
  return _[a1 profile];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return [a1 propertyListWithData:x0 options:x1 format:x2 error:x3];
}

id objc_msgSend_proposeTLKForSEView_proposedTLK_wrappedOldTLK_tlkShares_reply_(void *a1, const char *a2, ...)
{
  return [a1 proposeTLKForSEView:proposedTLK:wrappedOldTLK:tlkShares:reply:];
}

id objc_msgSend_ptcViewName(void *a1, const char *a2, ...)
{
  return _[a1 ptcViewName];
}

id objc_msgSend_publicKey(void *a1, const char *a2, ...)
{
  return _[a1 publicKey];
}

id objc_msgSend_publicKeyData(void *a1, const char *a2, ...)
{
  return _[a1 publicKeyData];
}

id objc_msgSend_publicKeyIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 publicKeyIdentifier];
}

id objc_msgSend_purge_(void *a1, const char *a2, ...)
{
  return [a1 purge:];
}

id objc_msgSend_pushLast_(void *a1, const char *a2, ...)
{
  return [a1 pushLast:];
}

id objc_msgSend_pushSecureElementToken_(void *a1, const char *a2, ...)
{
  return [a1 pushSecureElementToken:];
}

id objc_msgSend_queryMA(void *a1, const char *a2, ...)
{
  return _[a1 queryMA];
}

id objc_msgSend_queryMetaData_(void *a1, const char *a2, ...)
{
  return [a1 queryMetaData:];
}

id objc_msgSend_queryMetadata(void *a1, const char *a2, ...)
{
  return _[a1 queryMetadata];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_queueServerConnection_(void *a1, const char *a2, ...)
{
  return [a1 queueServerConnection:];
}

id objc_msgSend_randomData_(void *a1, const char *a2, ...)
{
  return [a1 randomData:];
}

id objc_msgSend_randomElement(void *a1, const char *a2, ...)
{
  return _[a1 randomElement];
}

id objc_msgSend_readAPDU(void *a1, const char *a2, ...)
{
  return _[a1 readAPDU];
}

id objc_msgSend_readAPDU_(void *a1, const char *a2, ...)
{
  return [a1 readAPDU:];
}

id objc_msgSend_readApdu(void *a1, const char *a2, ...)
{
  return _[a1 readApdu];
}

id objc_msgSend_readerConfigID(void *a1, const char *a2, ...)
{
  return _[a1 readerConfigID];
}

id objc_msgSend_readerIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 readerIdentifier];
}

id objc_msgSend_readerInfo(void *a1, const char *a2, ...)
{
  return _[a1 readerInfo];
}

id objc_msgSend_readerPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 readerPublicKey];
}

id objc_msgSend_reason(void *a1, const char *a2, ...)
{
  return _[a1 reason];
}

id objc_msgSend_receiverPublicKeyHash(void *a1, const char *a2, ...)
{
  return _[a1 receiverPublicKeyHash];
}

id objc_msgSend_regionString(void *a1, const char *a2, ...)
{
  return _[a1 regionString];
}

id objc_msgSend_registerAlarm_handler_(void *a1, const char *a2, ...)
{
  return [a1 registerAlarm:handler:];
}

id objc_msgSend_registerCrossPlatformMessageSendHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerCrossPlatformMessageSendHandler:];
}

id objc_msgSend_registerDelegate_forEvent_(void *a1, const char *a2, ...)
{
  return [a1 registerDelegate:forEvent:];
}

id objc_msgSend_registerForAppStateChanges_(void *a1, const char *a2, ...)
{
  return [a1 registerForAppStateChanges:];
}

id objc_msgSend_registerFriendSideInvitationUnusableHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerFriendSideInvitationUnusableHandler:];
}

id objc_msgSend_registerFriendSidePasscodeRetryRequestHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerFriendSidePasscodeRetryRequestHandler:];
}

id objc_msgSend_registerFriendSideSharingTestCompletion_(void *a1, const char *a2, ...)
{
  return [a1 registerFriendSideSharingTestCompletion:];
}

id objc_msgSend_registerFriendSideSharingTestInvitationUUIDHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerFriendSideSharingTestInvitationUUIDHandler];
}

id objc_msgSend_registerObserver_(void *a1, const char *a2, ...)
{
  return [a1 registerObserver:];
}

id objc_msgSend_registerOnStream_forEvent_handler_(void *a1, const char *a2, ...)
{
  return [a1 registerOnStream:forEvent:handler:];
}

id objc_msgSend_registerOwnerSideInvitationRequestHandler_(void *a1, const char *a2, ...)
{
  return [a1 registerOwnerSideInvitationRequestHandler:];
}

id objc_msgSend_registerOwnerSideSharingTestInvitations_callback_(void *a1, const char *a2, ...)
{
  return [a1 registerOwnerSideSharingTestInvitations:callback:];
}

id objc_msgSend_releaseRemoteObject(void *a1, const char *a2, ...)
{
  return _[a1 releaseRemoteObject];
}

id objc_msgSend_relyingParty(void *a1, const char *a2, ...)
{
  return _[a1 relyingParty];
}

id objc_msgSend_relyingPartyAccountHash(void *a1, const char *a2, ...)
{
  return _[a1 relyingPartyAccountHash];
}

id objc_msgSend_remainingTime(void *a1, const char *a2, ...)
{
  return _[a1 remainingTime];
}

id objc_msgSend_remoteObject(void *a1, const char *a2, ...)
{
  return _[a1 remoteObject];
}

id objc_msgSend_removeAllObjects(void *a1, const char *a2, ...)
{
  return _[a1 removeAllObjects];
}

id objc_msgSend_removeDelegate_(void *a1, const char *a2, ...)
{
  return [a1 removeDelegate:];
}

id objc_msgSend_removeDesignation_completion_(void *a1, const char *a2, ...)
{
  return [a1 removeDesignation:completion:];
}

id objc_msgSend_removeDesignationWithKeyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 removeDesignationWithKeyIdentifier:];
}

id objc_msgSend_removeFirstObject(void *a1, const char *a2, ...)
{
  return _[a1 removeFirstObject];
}

id objc_msgSend_removeHighPriorityRequestFor_client_(void *a1, const char *a2, ...)
{
  return [a1 removeHighPriorityRequestFor:client:];
}

id objc_msgSend_removeLocalSecureElementIdentityPeerID_error_(void *a1, const char *a2, ...)
{
  return [a1 removeLocalSecureElementIdentityPeerID:error];
}

id objc_msgSend_removeObject_(void *a1, const char *a2, ...)
{
  return [a1 removeObject:];
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectAtIndex:];
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectForKey:];
}

id objc_msgSend_removeObjectsAtIndexes_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsAtIndexes:];
}

id objc_msgSend_removeObjectsForKeys_(void *a1, const char *a2, ...)
{
  return [a1 removeObjectsForKeys:];
}

id objc_msgSend_removeObjectsInArray_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "removeObjectsInArray:");
}

id objc_msgSend_removeObserver_forKeyPath_(void *a1, const char *a2, ...)
{
  return [a1 removeObserver:forKeyPath:];
}

id objc_msgSend_removeSession_withError_(void *a1, const char *a2, ...)
{
  return [a1 removeSession:withError:];
}

id objc_msgSend_removeTestReporter(void *a1, const char *a2, ...)
{
  return _[a1 removeTestReporter];
}

id objc_msgSend_removeWithDesignation_(void *a1, const char *a2, ...)
{
  return [a1 removeWithDesignation:];
}

id objc_msgSend_removeWithEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 removeWithEndpoint:];
}

id objc_msgSend_replaceBytesInRange_withBytes_(void *a1, const char *a2, ...)
{
  return [a1 replaceBytesInRange:withBytes:];
}

id objc_msgSend_reportCAEvent_(void *a1, const char *a2, ...)
{
  return [a1 reportCAEvent:];
}

id objc_msgSend_reportUnusableInvitation_reason_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "reportUnusableInvitation:reason:");
}

id objc_msgSend_requestOwnerPairingWithSession_delegate_(void *a1, const char *a2, ...)
{
  return [a1 requestOwnerPairingWithSession:x0 delegate:x1];
}

id objc_msgSend_requestTapToRadar_client_(void *a1, const char *a2, ...)
{
  return [a1 requestTapToRadar:client:];
}

id objc_msgSend_reset(void *a1, const char *a2, ...)
{
  return _[a1 reset];
}

id objc_msgSend_resetBytesInRange_(void *a1, const char *a2, ...)
{
  return [a1 resetBytesInRange:];
}

id objc_msgSend_resetDisconnectionHistoryFor_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "resetDisconnectionHistoryFor:");
}

id objc_msgSend_resetLegacyToAvailable(void *a1, const char *a2, ...)
{
  return _[a1 resetLegacyToAvailable];
}

id objc_msgSend_resetToEmpty(void *a1, const char *a2, ...)
{
  return _[a1 resetToEmpty];
}

id objc_msgSend_responseWithCipherText_ephemeralPublicKeyData_receiverPublicKeyHash_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "responseWithCipherText:ephemeralPublicKeyData:receiverPublicKeyHash:");
}

id objc_msgSend_responseWithEndPointAttestationData_encryptionPublicKeyData_encryptedData_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "responseWithEndPointAttestationData:encryptionPublicKeyData:encryptedData:");
}

id objc_msgSend_responseWithSignedData_signature_(void *a1, const char *a2, ...)
{
  return [a1 responseWithSignedData:x0 signature:x1];
}

id objc_msgSend_results(void *a1, const char *a2, ...)
{
  return _[a1 results];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retryWithBackoff_(void *a1, const char *a2, ...)
{
  return [a1 retryWithBackoff:];
}

id objc_msgSend_revocationAttestation(void *a1, const char *a2, ...)
{
  return _[a1 revocationAttestation];
}

id objc_msgSend_revokeRemoteTerminationRequestEndPoints_sesDatabase_identifier_taskID_clientInfo_outError_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "revokeRemoteTerminationRequestEndPoints:sesDatabase:identifier:taskID:clientInfo:outError:");
}

id objc_msgSend_revokedEndpointWithPublicKeyIdentifier_appletIdentifier_revocationAttestation_error_(void *a1, const char *a2, ...)
{
  return [a1 revokedEndpointWithPublicKeyIdentifier:x0 appletIdentifier:x1 revocationAttestation:x2 error:x3];
}

id objc_msgSend_rkeSessionEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 rkeSessionEntitlement];
}

id objc_msgSend_rollback(void *a1, const char *a2, ...)
{
  return _[a1 rollback];
}

id objc_msgSend_rsaCertificate(void *a1, const char *a2, ...)
{
  return _[a1 rsaCertificate];
}

id objc_msgSend_save_(void *a1, const char *a2, ...)
{
  return [a1 save:];
}

id objc_msgSend_scheduledTimerWithTimeInterval_repeats_block_(void *a1, const char *a2, ...)
{
  return [a1 scheduledTimerWithTimeInterval:repeats:block:];
}

id objc_msgSend_seToken(void *a1, const char *a2, ...)
{
  return _[a1 seToken];
}

id objc_msgSend_secretKey(void *a1, const char *a2, ...)
{
  return _[a1 secretKey];
}

id objc_msgSend_secureElementAttestation(void *a1, const char *a2, ...)
{
  return _[a1 secureElementAttestation];
}

id objc_msgSend_secureElementInfo(void *a1, const char *a2, ...)
{
  return _[a1 secureElementInfo];
}

id objc_msgSend_secureElementPass(void *a1, const char *a2, ...)
{
  return _[a1 secureElementPass];
}

id objc_msgSend_secureElementService_reply_(void *a1, const char *a2, ...)
{
  return [a1 secureElementService:reply:];
}

id objc_msgSend_seid(void *a1, const char *a2, ...)
{
  return _[a1 seid];
}

id objc_msgSend_sendAPDU_(void *a1, const char *a2, ...)
{
  return [a1 sendAPDU:];
}

id objc_msgSend_sendApdu_(void *a1, const char *a2, ...)
{
  return [a1 sendApdu:];
}

id objc_msgSend_sendCrossPlatformSharingMessage_toMailboxIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 sendCrossPlatformSharingMessage:toMailboxIdentifier:];
}

id objc_msgSend_sendData_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return [a1 sendData:x0 toDestinations:x1 priority:x2 options:x3 identifier:x4 error:x5];
}

id objc_msgSend_sendDeviceIntentFor_(void *a1, const char *a2, ...)
{
  return [a1 sendDeviceIntentFor:];
}

id objc_msgSend_sendEvent_(void *a1, const char *a2, ...)
{
  return [a1 sendEvent:];
}

id objc_msgSend_sendEvent_fromVehicle_(void *a1, const char *a2, ...)
{
  return [a1 sendEvent:fromVehicle:];
}

id objc_msgSend_sendEvent_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 sendEvent:keyIdentifier:];
}

id objc_msgSend_sendMessage_toDestinations_priority_options_identifier_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "sendMessage:toDestinations:priority:options:identifier:error:");
}

id objc_msgSend_sendPassthroughWithMessage_clientUUID_(void *a1, const char *a2, ...)
{
  return [a1 sendPassthroughWithMessage:clientUUID:];
}

id objc_msgSend_sendRKERequestWithFunctionIdentifier_actionIdentifier_keyIdentifier_requestType_enduringRequestHandler_authorization_completion_(void *a1, const char *a2, ...)
{
  return [a1 sendRKERequestWithFunctionIdentifier:actionIdentifier:keyIdentifier:requestType:enduringRequestHandler:authorization:completion:];
}

id objc_msgSend_sequenceCounter(void *a1, const char *a2, ...)
{
  return _[a1 sequenceCounter];
}

id objc_msgSend_serialNumber(void *a1, const char *a2, ...)
{
  return _[a1 serialNumber];
}

id objc_msgSend_server(void *a1, const char *a2, ...)
{
  return _[a1 server];
}

id objc_msgSend_serviceError(void *a1, const char *a2, ...)
{
  return _[a1 serviceError];
}

id objc_msgSend_serviceName(void *a1, const char *a2, ...)
{
  return _[a1 serviceName];
}

id objc_msgSend_serviceWithDefaultShellEndpoint(void *a1, const char *a2, ...)
{
  return _[a1 serviceWithDefaultShellEndpoint];
}

id objc_msgSend_ses_isAllZero(void *a1, const char *a2, ...)
{
  return [a1 ses_isAllZero];
}

id objc_msgSend_ses_isEqualToBytes_length_(void *a1, const char *a2, ...)
{
  return [a1 ses_isEqualToBytes:length:];
}

id objc_msgSend_ses_isEqualToHexCString_(void *a1, const char *a2, ...)
{
  return [a1 ses_isEqualToHexCString:];
}

id objc_msgSend_ses_map_(void *a1, const char *a2, ...)
{
  return [a1 ses_map:];
}

id objc_msgSend_ses_sha1(void *a1, const char *a2, ...)
{
  return [a1 ses_sha1];
}

id objc_msgSend_ses_sha256(void *a1, const char *a2, ...)
{
  return [a1 ses_sha256];
}

id objc_msgSend_ses_withUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 ses_withUUIDString:];
}

id objc_msgSend_sessionManager(void *a1, const char *a2, ...)
{
  return _[a1 sessionManager];
}

id objc_msgSend_set(void *a1, const char *a2, ...)
{
  return _[a1 set];
}

id objc_msgSend_setAID_(void *a1, const char *a2, ...)
{
  return [a1 setAID:];
}

id objc_msgSend_setActivePaymentApplet_keys_error_(void *a1, const char *a2, ...)
{
  return [a1 setActivePaymentApplet:keys:error:];
}

id objc_msgSend_setAdditionalAttestationsDict_(void *a1, const char *a2, ...)
{
  return [a1 setAdditionalAttestationsDict:];
}

id objc_msgSend_setAlarm_secondsFromNow_(void *a1, const char *a2, ...)
{
  return [a1 setAlarm:secondsFromNow:];
}

id objc_msgSend_setAllowsCellularAccess_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsCellularAccess:];
}

id objc_msgSend_setAllowsExpensiveAccess_(void *a1, const char *a2, ...)
{
  return [a1 setAllowsExpensiveAccess:];
}

id objc_msgSend_setAltDSID_(void *a1, const char *a2, ...)
{
  return [a1 setAltDSID:];
}

id objc_msgSend_setAnonymizedDsid_(void *a1, const char *a2, ...)
{
  return [a1 setAnonymizedDsid:];
}

id objc_msgSend_setAppletLockState_(void *a1, const char *a2, ...)
{
  return [a1 setAppletLockState:];
}

id objc_msgSend_setAuth_(void *a1, const char *a2, ...)
{
  return [a1 setAuth:];
}

id objc_msgSend_setAuthority_(void *a1, const char *a2, ...)
{
  return [a1 setAuthority:];
}

id objc_msgSend_setAvailable_(void *a1, const char *a2, ...)
{
  return [a1 setAvailable:];
}

id objc_msgSend_setBleAddress_(void *a1, const char *a2, ...)
{
  return [a1 setBleAddress:];
}

id objc_msgSend_setBleDCKIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setBleDCKIdentifier:];
}

id objc_msgSend_setBleIntroKey_(void *a1, const char *a2, ...)
{
  return [a1 setBleIntroKey:];
}

id objc_msgSend_setBleOOBKey_(void *a1, const char *a2, ...)
{
  return [a1 setBleOOBKey:];
}

id objc_msgSend_setBleOOBMasterKey_(void *a1, const char *a2, ...)
{
  return [a1 setBleOOBMasterKey:];
}

id objc_msgSend_setBleUUID_(void *a1, const char *a2, ...)
{
  return [a1 setBleUUID:];
}

id objc_msgSend_setBool_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setBool:forKey:];
}

id objc_msgSend_setCarOEMProprietaryData_(void *a1, const char *a2, ...)
{
  return [a1 setCarOEMProprietaryData:];
}

id objc_msgSend_setCertificates_(void *a1, const char *a2, ...)
{
  return [a1 setCertificates:];
}

id objc_msgSend_setClass_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return [a1 setClass:forSelector:argumentIndex:ofReply:];
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return [a1 setClasses:forSelector:argumentIndex:ofReply:];
}

id objc_msgSend_setClientBundleIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setClientBundleIdentifier:];
}

id objc_msgSend_setClientName_(void *a1, const char *a2, ...)
{
  return [a1 setClientName:];
}

id objc_msgSend_setConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setConfiguration:];
}

id objc_msgSend_setConnection_(void *a1, const char *a2, ...)
{
  return [a1 setConnection:];
}

id objc_msgSend_setContext_(void *a1, const char *a2, ...)
{
  return [a1 setContext:];
}

id objc_msgSend_setCredentialIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setCredentialIdentifier:];
}

id objc_msgSend_setCurrentCompatibilityVersion_(void *a1, const char *a2, ...)
{
  return [a1 setCurrentCompatibilityVersion:];
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return [a1 setData:];
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return [a1 setDateFormat:];
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setDelegate:];
}

id objc_msgSend_setDesignation_(void *a1, const char *a2, ...)
{
  return [a1 setDesignation:];
}

id objc_msgSend_setDesignation_designation_handoffToken_completion_(void *a1, const char *a2, ...)
{
  return [a1 setDesignation:designation:handoffToken:completion:];
}

id objc_msgSend_setDeviceConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceConfiguration:];
}

id objc_msgSend_setDeviceType_(void *a1, const char *a2, ...)
{
  return [a1 setDeviceType:];
}

id objc_msgSend_setDidEndCallback_(void *a1, const char *a2, ...)
{
  return [a1 setDidEndCallback:];
}

id objc_msgSend_setDiscretionary_(void *a1, const char *a2, ...)
{
  return [a1 setDiscretionary:];
}

id objc_msgSend_setDoNotBlockBeforeFirstUnlock_(void *a1, const char *a2, ...)
{
  return [a1 setDoNotBlockBeforeFirstUnlock:];
}

id objc_msgSend_setDownloadTimeoutInterval_(void *a1, const char *a2, ...)
{
  return [a1 setDownloadTimeoutInterval:];
}

id objc_msgSend_setEndPointCAData_(void *a1, const char *a2, ...)
{
  return [a1 setEndPointCAData:];
}

id objc_msgSend_setEndPointData_(void *a1, const char *a2, ...)
{
  return [a1 setEndPointData:];
}

id objc_msgSend_setEndowmentNamespaces_(void *a1, const char *a2, ...)
{
  return [a1 setEndowmentNamespaces:];
}

id objc_msgSend_setEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 setEndpoint:];
}

id objc_msgSend_setEndpointId_(void *a1, const char *a2, ...)
{
  return [a1 setEndpointId:];
}

id objc_msgSend_setEnvironment_(void *a1, const char *a2, ...)
{
  return [a1 setEnvironment:];
}

id objc_msgSend_setEpAuthResponse_(void *a1, const char *a2, ...)
{
  return [a1 setEpAuthResponse:];
}

id objc_msgSend_setErrorCount_(void *a1, const char *a2, ...)
{
  return [a1 setErrorCount:];
}

id objc_msgSend_setEventPublisher_(void *a1, const char *a2, ...)
{
  return [a1 setEventPublisher:];
}

id objc_msgSend_setEventPublisherQueue_(void *a1, const char *a2, ...)
{
  return [a1 setEventPublisherQueue:];
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return [a1 setExportedInterface:];
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return [a1 setExportedObject:];
}

id objc_msgSend_setFirstLaunchAfterBootDoneForKey_(void *a1, const char *a2, ...)
{
  return [a1 setFirstLaunchAfterBootDoneForKey:];
}

id objc_msgSend_setFriendlyName_(void *a1, const char *a2, ...)
{
  return [a1 setFriendlyName:];
}

id objc_msgSend_setHTTPBody_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPBody:];
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return [a1 setHTTPMethod:];
}

id objc_msgSend_setHandoffToken_(void *a1, const char *a2, ...)
{
  return [a1 setHandoffToken:];
}

id objc_msgSend_setHomeUUIDString_(void *a1, const char *a2, ...)
{
  return [a1 setHomeUUIDString:];
}

id objc_msgSend_setIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setIdentifier:];
}

id objc_msgSend_setIncludeUntrustedDevices_(void *a1, const char *a2, ...)
{
  return [a1 setIncludeUntrustedDevices:];
}

id objc_msgSend_setInstance_(void *a1, const char *a2, ...)
{
  return [a1 setInstance:];
}

id objc_msgSend_setInstanceRepresentations_(void *a1, const char *a2, ...)
{
  return [a1 setInstanceRepresentations:];
}

id objc_msgSend_setInterface_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return [a1 setInterface:forSelector:argumentIndex:ofReply:];
}

id objc_msgSend_setInterruptionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInterruptionHandler:];
}

id objc_msgSend_setInvalidationHandler_(void *a1, const char *a2, ...)
{
  return [a1 setInvalidationHandler:];
}

id objc_msgSend_setInvitationIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setInvitationIdentifier:];
}

id objc_msgSend_setIsBackgrounded_(void *a1, const char *a2, ...)
{
  return [a1 setIsBackgrounded:];
}

id objc_msgSend_setIsWaitingForSecureElement_(void *a1, const char *a2, ...)
{
  return [a1 setIsWaitingForSecureElement:];
}

id objc_msgSend_setKey_(void *a1, const char *a2, ...)
{
  return [a1 setKey:];
}

id objc_msgSend_setKeys_(void *a1, const char *a2, ...)
{
  return [a1 setKeys:];
}

id objc_msgSend_setLength_(void *a1, const char *a2, ...)
{
  return [a1 setLength:];
}

id objc_msgSend_setLengthConfidentialMailBox_(void *a1, const char *a2, ...)
{
  return [a1 setLengthConfidentialMailBox:];
}

id objc_msgSend_setLengthPrivateMailBox_(void *a1, const char *a2, ...)
{
  return [a1 setLengthPrivateMailBox:];
}

id objc_msgSend_setLocalSecureElementIdentity_error_(void *a1, const char *a2, ...)
{
  return [a1 setLocalSecureElementIdentity:error:];
}

id objc_msgSend_setLocale_(void *a1, const char *a2, ...)
{
  return [a1 setLocale:];
}

id objc_msgSend_setLongTermSharedSecret_(void *a1, const char *a2, ...)
{
  return [a1 setLongTermSharedSecret:];
}

id objc_msgSend_setMailboxMapping_(void *a1, const char *a2, ...)
{
  return [a1 setMailboxMapping:];
}

id objc_msgSend_setMailboxSizesPlusAdditionalData_(void *a1, const char *a2, ...)
{
  return [a1 setMailboxSizesPlusAdditionalData:];
}

id objc_msgSend_setMetadataQueryInterval_(void *a1, const char *a2, ...)
{
  return [a1 setMetadataQueryInterval:];
}

id objc_msgSend_setMobileAssetManager_(void *a1, const char *a2, ...)
{
  return [a1 setMobileAssetManager:];
}

id objc_msgSend_setNfcExpressOnlyInLPM_(void *a1, const char *a2, ...)
{
  return [a1 setNfcExpressOnlyInLPM:];
}

id objc_msgSend_setNumCertificateAuthorityIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setNumCertificateAuthorityIdentifier:];
}

id objc_msgSend_setNumEndPointIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setNumEndPointIdentifier:];
}

id objc_msgSend_setObject_atIndexedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:atIndexedSubscript:];
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKey:];
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return [a1 setObject:forKeyedSubscript:];
}

id objc_msgSend_setOffsetConfidentialMailBox_(void *a1, const char *a2, ...)
{
  return [a1 setOffsetConfidentialMailBox:];
}

id objc_msgSend_setOffsetPrivateMailBox_(void *a1, const char *a2, ...)
{
  return [a1 setOffsetPrivateMailBox:];
}

id objc_msgSend_setOperatingSystems_(void *a1, const char *a2, ...)
{
  return [a1 setOperatingSystems:];
}

id objc_msgSend_setOwnerCompletionHandler_(void *a1, const char *a2, ...)
{
  return [a1 setOwnerCompletionHandler:];
}

id objc_msgSend_setOwnerEphemeralKey_(void *a1, const char *a2, ...)
{
  return [a1 setOwnerEphemeralKey:];
}

id objc_msgSend_setOwnerIDSIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setOwnerIDSIdentifier:];
}

id objc_msgSend_setPersistentStoreCoordinator_(void *a1, const char *a2, ...)
{
  return [a1 setPersistentStoreCoordinator:];
}

id objc_msgSend_setPreregistered_(void *a1, const char *a2, ...)
{
  return [a1 setPreregistered:];
}

id objc_msgSend_setPrivacyEncryptionPK_(void *a1, const char *a2, ...)
{
  return [a1 setPrivacyEncryptionPK:];
}

id objc_msgSend_setQueue_(void *a1, const char *a2, ...)
{
  return [a1 setQueue:];
}

id objc_msgSend_setQueueKey_(void *a1, const char *a2, ...)
{
  return [a1 setQueueKey:];
}

id objc_msgSend_setReaderConfigID_(void *a1, const char *a2, ...)
{
  return [a1 setReaderConfigID:];
}

id objc_msgSend_setReaderInfo_(void *a1, const char *a2, ...)
{
  return [a1 setReaderInfo:];
}

id objc_msgSend_setReaderLongTermPublicKeyCertificate_(void *a1, const char *a2, ...)
{
  return [a1 setReaderLongTermPublicKeyCertificate:];
}

id objc_msgSend_setRemoteObjectInterface_(void *a1, const char *a2, ...)
{
  return [a1 setRemoteObjectInterface:];
}

id objc_msgSend_setRequiresPowerPluggedIn_(void *a1, const char *a2, ...)
{
  return [a1 setRequiresPowerPluggedIn:];
}

id objc_msgSend_setRetryInProgress_(void *a1, const char *a2, ...)
{
  return [a1 setRetryInProgress:];
}

id objc_msgSend_setRevocationAttestation_(void *a1, const char *a2, ...)
{
  return [a1 setRevocationAttestation:];
}

id objc_msgSend_setSESServerDelegate_(void *a1, const char *a2, ...)
{
  return [a1 setSESServerDelegate:];
}

id objc_msgSend_setSeToken_(void *a1, const char *a2, ...)
{
  return [a1 setSeToken:];
}

id objc_msgSend_setServices_(void *a1, const char *a2, ...)
{
  return [a1 setServices:];
}

id objc_msgSend_setSharedCredentialIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setSharedCredentialIdentifier:];
}

id objc_msgSend_setSharingAttestationData_(void *a1, const char *a2, ...)
{
  return [a1 setSharingAttestationData:];
}

id objc_msgSend_setSharingEncryptedData_(void *a1, const char *a2, ...)
{
  return [a1 setSharingEncryptedData:];
}

id objc_msgSend_setSharingSessionIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setSharingSessionIdentifier:];
}

id objc_msgSend_setSharingSessionUUID_(void *a1, const char *a2, ...)
{
  return [a1 setSharingSessionUUID:];
}

id objc_msgSend_setSharingTokenAvailabilityBitmap_(void *a1, const char *a2, ...)
{
  return [a1 setSharingTokenAvailabilityBitmap:];
}

id objc_msgSend_setSignatureVerificationPK_(void *a1, const char *a2, ...)
{
  return [a1 setSignatureVerificationPK:];
}

id objc_msgSend_setSlot_(void *a1, const char *a2, ...)
{
  return [a1 setSlot:];
}

id objc_msgSend_setSlotIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 setSlotIdentifier:];
}

id objc_msgSend_setState_(void *a1, const char *a2, ...)
{
  return [a1 setState:];
}

id objc_msgSend_setStateDescriptor_(void *a1, const char *a2, ...)
{
  return [a1 setStateDescriptor:];
}

id objc_msgSend_setSupportedRKEFunctions_(void *a1, const char *a2, ...)
{
  return [a1 setSupportedRKEFunctions:];
}

id objc_msgSend_setTerminatedByTaskID_(void *a1, const char *a2, ...)
{
  return [a1 setTerminatedByTaskID:];
}

id objc_msgSend_setTerminationNotPersisted_(void *a1, const char *a2, ...)
{
  return [a1 setTerminationNotPersisted:];
}

id objc_msgSend_setTimeZone_(void *a1, const char *a2, ...)
{
  return [a1 setTimeZone:];
}

id objc_msgSend_setTimeoutInterval_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutInterval:];
}

id objc_msgSend_setTimeoutIntervalForResource_(void *a1, const char *a2, ...)
{
  return [a1 setTimeoutIntervalForResource:];
}

id objc_msgSend_setTrackingReceipt_(void *a1, const char *a2, ...)
{
  return [a1 setTrackingReceipt:];
}

id objc_msgSend_setTrackingRequest_(void *a1, const char *a2, ...)
{
  return [a1 setTrackingRequest:];
}

id objc_msgSend_setUpdateHandler_(void *a1, const char *a2, ...)
{
  return [a1 setUpdateHandler:];
}

id objc_msgSend_setUpgradeEndpointJSONData_(void *a1, const char *a2, ...)
{
  return [a1 setUpgradeEndpointJSONData:];
}

id objc_msgSend_setUseCachedAccountStatus_(void *a1, const char *a2, ...)
{
  return [a1 setUseCachedAccountStatus:];
}

id objc_msgSend_setUserDefaults_(void *a1, const char *a2, ...)
{
  return [a1 setUserDefaults:];
}

id objc_msgSend_setUserInfo_(void *a1, const char *a2, ...)
{
  return [a1 setUserInfo:];
}

id objc_msgSend_setUserInitiated_(void *a1, const char *a2, ...)
{
  return [a1 setUserInitiated:];
}

id objc_msgSend_setUuid_(void *a1, const char *a2, ...)
{
  return [a1 setUuid:];
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return [a1 setValue:forHTTPHeaderField:];
}

id objc_msgSend_setValues_(void *a1, const char *a2, ...)
{
  return [a1 setValues:];
}

id objc_msgSend_setVehicleSupportedVersionsData_(void *a1, const char *a2, ...)
{
  return [a1 setVehicleSupportedVersionsData:];
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return [a1 setWithArray:];
}

id objc_msgSend_setWithObject_(void *a1, const char *a2, ...)
{
  return [a1 setWithObject:];
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return [a1 setWithObjects:];
}

id objc_msgSend_setWithSet_(void *a1, const char *a2, ...)
{
  return [a1 setWithSet:];
}

id objc_msgSend_shared(void *a1, const char *a2, ...)
{
  return _[a1 shared];
}

id objc_msgSend_sharedDataAccessor(void *a1, const char *a2, ...)
{
  return _[a1 sharedDataAccessor];
}

id objc_msgSend_sharedDefaultEvaluator(void *a1, const char *a2, ...)
{
  return _[a1 sharedDefaultEvaluator];
}

id objc_msgSend_sharedHardwareManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedHardwareManager];
}

id objc_msgSend_sharedHardwareManager_(void *a1, const char *a2, ...)
{
  return [a1 sharedHardwareManager:];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_sharedLibrary(void *a1, const char *a2, ...)
{
  return _[a1 sharedLibrary];
}

id objc_msgSend_sharedManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedManager];
}

id objc_msgSend_sharedObject(void *a1, const char *a2, ...)
{
  return _[a1 sharedObject];
}

id objc_msgSend_sharedRemoteAdminManager(void *a1, const char *a2, ...)
{
  return _[a1 sharedRemoteAdminManager];
}

id objc_msgSend_sharedSession(void *a1, const char *a2, ...)
{
  return _[a1 sharedSession];
}

id objc_msgSend_sharedVersionsOverrides(void *a1, const char *a2, ...)
{
  return _[a1 sharedVersionsOverrides];
}

id objc_msgSend_sharingAttestationData(void *a1, const char *a2, ...)
{
  return _[a1 sharingAttestationData];
}

id objc_msgSend_sharingCompleteForInvitationIdentifier_friendKeyIdentifier_status_(void *a1, const char *a2, ...)
{
  return [a1 sharingCompleteForInvitationIdentifier:x0 friendKeyIdentifier:x1 status:x2];
}

id objc_msgSend_sharingEncryptedData(void *a1, const char *a2, ...)
{
  return _[a1 sharingEncryptedData];
}

id objc_msgSend_sharingIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharingIdentifier];
}

id objc_msgSend_sharingRecords(void *a1, const char *a2, ...)
{
  return _[a1 sharingRecords];
}

id objc_msgSend_sharingSessionIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 sharingSessionIdentifier];
}

id objc_msgSend_sharingSessionUUID(void *a1, const char *a2, ...)
{
  return _[a1 sharingSessionUUID];
}

id objc_msgSend_sharingTokenAvailabilityBitmap(void *a1, const char *a2, ...)
{
  return _[a1 sharingTokenAvailabilityBitmap];
}

id objc_msgSend_shortValue(void *a1, const char *a2, ...)
{
  return _[a1 shortValue];
}

id objc_msgSend_shouldDefer(void *a1, const char *a2, ...)
{
  return _[a1 shouldDefer];
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_signature_(void *a1, const char *a2, ...)
{
  return [a1 signature:];
}

id objc_msgSend_signatureError(void *a1, const char *a2, ...)
{
  return _[a1 signatureError];
}

id objc_msgSend_signatureVerificationPK(void *a1, const char *a2, ...)
{
  return _[a1 signatureVerificationPK];
}

id objc_msgSend_signedData(void *a1, const char *a2, ...)
{
  return _[a1 signedData];
}

id objc_msgSend_signingKeyType(void *a1, const char *a2, ...)
{
  return _[a1 signingKeyType];
}

id objc_msgSend_simpleTLVsWithData_(void *a1, const char *a2, ...)
{
  return [a1 simpleTLVsWithData:];
}

id objc_msgSend_singleton(void *a1, const char *a2, ...)
{
  return _[a1 singleton];
}

id objc_msgSend_slot(void *a1, const char *a2, ...)
{
  return _[a1 slot];
}

id objc_msgSend_slotIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 slotIdentifier];
}

id objc_msgSend_slotNumber(void *a1, const char *a2, ...)
{
  return _[a1 slotNumber];
}

id objc_msgSend_stageEndPointEntityUpdates_fromEndPoint_(void *a1, const char *a2, ...)
{
  return [a1 stageEndPointEntityUpdates:fromEndPoint:];
}

id objc_msgSend_stageEndPointEntityWithIdentifier_endPointCAEntity_airInstanceEntity_clientName_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "stageEndPointEntityWithIdentifier:endPointCAEntity:airInstanceEntity:clientName:error:");
}

id objc_msgSend_start(void *a1, const char *a2, ...)
{
  return _[a1 start];
}

id objc_msgSend_startBackGroundTimer(void *a1, const char *a2, ...)
{
  return _[a1 startBackGroundTimer];
}

id objc_msgSend_startCardEmulation_authorization_(void *a1, const char *a2, ...)
{
  return [a1 startCardEmulation:authorization];
}

id objc_msgSend_startCatalogDownload_options_then_(void *a1, const char *a2, ...)
{
  return [a1 startCatalogDownload:x0 options:x1 then:x2];
}

id objc_msgSend_startDownload_then_(void *a1, const char *a2, ...)
{
  return [a1 startDownload:x0 then:x1];
}

id objc_msgSend_startEmulation(void *a1, const char *a2, ...)
{
  return _[a1 startEmulation];
}

id objc_msgSend_startFirstApproachFor_(void *a1, const char *a2, ...)
{
  return [a1 startFirstApproachFor:];
}

id objc_msgSend_startFirstApproachForKeyWithIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 startFirstApproachForKeyWithIdentifier:];
}

id objc_msgSend_startHceEmulation(void *a1, const char *a2, ...)
{
  return _[a1 startHceEmulation];
}

id objc_msgSend_startLPEMConfigSession_(void *a1, const char *a2, ...)
{
  return [a1 startLPEMConfigSession:];
}

id objc_msgSend_startLoyaltyAndContactlessPaymentSession_(void *a1, const char *a2, ...)
{
  return [a1 startLoyaltyAndContactlessPaymentSession:];
}

id objc_msgSend_startSecureElementAndHCESession_(void *a1, const char *a2, ...)
{
  return [a1 startSecureElementAndHCESession:];
}

id objc_msgSend_startSecureElementManagerSession_(void *a1, const char *a2, ...)
{
  return [a1 startSecureElementManagerSession:];
}

id objc_msgSend_startService(void *a1, const char *a2, ...)
{
  return _[a1 startService];
}

id objc_msgSend_startTransactionEmulationFor_(void *a1, const char *a2, ...)
{
  return [a1 startTransactionEmulationFor:];
}

id objc_msgSend_startWithModule_(void *a1, const char *a2, ...)
{
  return [a1 startWithModule:];
}

id objc_msgSend_state(void *a1, const char *a2, ...)
{
  return _[a1 state];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_stepForAnalytics(void *a1, const char *a2, ...)
{
  return _[a1 stepForAnalytics];
}

id objc_msgSend_stop(void *a1, const char *a2, ...)
{
  return _[a1 stop];
}

id objc_msgSend_stopCardEmulation(void *a1, const char *a2, ...)
{
  return _[a1 stopCardEmulation];
}

id objc_msgSend_stopEmulation(void *a1, const char *a2, ...)
{
  return _[a1 stopEmulation];
}

id objc_msgSend_stopHceEmulation(void *a1, const char *a2, ...)
{
  return _[a1 stopHceEmulation];
}

id objc_msgSend_stopOwnerPairing(void *a1, const char *a2, ...)
{
  return _[a1 stopOwnerPairing];
}

id objc_msgSend_stopService(void *a1, const char *a2, ...)
{
  return _[a1 stopService];
}

id objc_msgSend_stopTransactionEmulation(void *a1, const char *a2, ...)
{
  return _[a1 stopTransactionEmulation];
}

id objc_msgSend_stopWithError_(void *a1, const char *a2, ...)
{
  return [a1 stopWithError:];
}

id objc_msgSend_storeKeyWithRelyingParty_relyingPartyAccountHash_fidoKeyHash_keyData_error_(void *a1, const char *a2, ...)
{
  return [a1 storeKeyWithRelyingParty:x0 relyingPartyAccountHash:x1 fidoKeyHash:x2 keyData:x3 error:x4];
}

id objc_msgSend_string(void *a1, const char *a2, ...)
{
  return _[a1 string];
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingPathComponent:];
}

id objc_msgSend_stringByAppendingString_(void *a1, const char *a2, ...)
{
  return [a1 stringByAppendingString:];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return [a1 stringByReplacingOccurrencesOfString:withString:];
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return [a1 stringForKey:];
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return [a1 stringFromDate:x0];
}

id objc_msgSend_stringWithAsciiData_(void *a1, const char *a2, ...)
{
  return [a1 stringWithAsciiData:];
}

id objc_msgSend_stringWithCapacity_(void *a1, const char *a2, ...)
{
  return [a1 stringWithCapacity:];
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return [a1 stringWithFormat:];
}

id objc_msgSend_stringWithString_(void *a1, const char *a2, ...)
{
  return [a1 stringWithString:];
}

id objc_msgSend_stringWithUTF8String_(void *a1, const char *a2, ...)
{
  return [a1 stringWithUTF8String:];
}

id objc_msgSend_strongToWeakObjectsMapTable(void *a1, const char *a2, ...)
{
  return _[a1 strongToWeakObjectsMapTable];
}

id objc_msgSend_subCAAttestation(void *a1, const char *a2, ...)
{
  return _[a1 subCAAttestation];
}

id objc_msgSend_subcredentials(void *a1, const char *a2, ...)
{
  return _[a1 subcredentials];
}

id objc_msgSend_subdataWithRange_(void *a1, const char *a2, ...)
{
  return [a1 subdataWithRange:];
}

id objc_msgSend_subjectIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 subjectIdentifier];
}

id objc_msgSend_subscribeToVehicleFunctionStatusEventsWithRange_peerUUID_(void *a1, const char *a2, ...)
{
  return [a1 subscribeToVehicleFunctionStatusEventsWithRange:peerUUID:];
}

id objc_msgSend_substringFromIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringFromIndex:];
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return [a1 substringToIndex:];
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return [a1 substringWithRange:];
}

id objc_msgSend_supportedRadioTechnologies(void *a1, const char *a2, ...)
{
  return _[a1 supportedRadioTechnologies];
}

id objc_msgSend_supportsCapability_(void *a1, const char *a2, ...)
{
  return [a1 supportsCapability:];
}

id objc_msgSend_supportsPreciseDistanceMeasurement(void *a1, const char *a2, ...)
{
  return _[a1 supportsPreciseDistanceMeasurement];
}

id objc_msgSend_sync_(void *a1, const char *a2, ...)
{
  return [a1 sync:];
}

id objc_msgSend_syncMobileAssetUserInitiated(void *a1, const char *a2, ...)
{
  return _[a1 syncMobileAssetUserInitiated];
}

id objc_msgSend_synchronizable(void *a1, const char *a2, ...)
{
  return _[a1 synchronizable];
}

id objc_msgSend_synchronousRemoteObjectProxyWithErrorHandler_(void *a1, const char *a2, ...)
{
  return [a1 synchronousRemoteObjectProxyWithErrorHandler:];
}

id objc_msgSend_tag(void *a1, const char *a2, ...)
{
  return _[a1 tag];
}

id objc_msgSend_targetDeviceType(void *a1, const char *a2, ...)
{
  return _[a1 targetDeviceType];
}

id objc_msgSend_targetWithPid_(void *a1, const char *a2, ...)
{
  return [a1 targetWithPid:];
}

id objc_msgSend_taskState(void *a1, const char *a2, ...)
{
  return _[a1 taskState];
}

id objc_msgSend_terminationNotPersisted(void *a1, const char *a2, ...)
{
  return _[a1 terminationNotPersisted];
}

id objc_msgSend_timeIntervalSinceNow(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSinceNow];
}

id objc_msgSend_timeZoneWithName_(void *a1, const char *a2, ...)
{
  return [a1 timeZoneWithName:];
}

id objc_msgSend_toID(void *a1, const char *a2, ...)
{
  return _[a1 toID];
}

id objc_msgSend_trackingReceipt(void *a1, const char *a2, ...)
{
  return _[a1 trackingReceipt];
}

id objc_msgSend_trackingRequest(void *a1, const char *a2, ...)
{
  return _[a1 trackingRequest];
}

id objc_msgSend_transceive_callback_(void *a1, const char *a2, ...)
{
  return [a1 transceive:x0 callback:x1];
}

id objc_msgSend_transceive_error_(void *a1, const char *a2, ...)
{
  return [a1 transceive:error:];
}

id objc_msgSend_transceive_forSEID_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "transceive:forSEID:error:");
}

id objc_msgSend_transceive_outError_(void *a1, const char *a2, ...)
{
  return [a1 transceive:x0 outError:x1];
}

id objc_msgSend_triggerHeadUnitPairingWith_keyIdentifier_(void *a1, const char *a2, ...)
{
  return [a1 triggerHeadUnitPairingWith:keyIdentifier];
}

id objc_msgSend_trustedPeerSecureElementIdentities(void *a1, const char *a2, ...)
{
  return _[a1 trustedPeerSecureElementIdentities];
}

id objc_msgSend_type(void *a1, const char *a2, ...)
{
  return _[a1 type];
}

id objc_msgSend_u16BE_(void *a1, const char *a2, ...)
{
  return [a1 u16BE:];
}

id objc_msgSend_u32BE_(void *a1, const char *a2, ...)
{
  return [a1 u32BE:];
}

id objc_msgSend_u8_(void *a1, const char *a2, ...)
{
  return [a1 u8:];
}

id objc_msgSend_unarchivedObjectOfClasses_fromData_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "unarchivedObjectOfClasses:fromData:error:")
}

id objc_msgSend_unblockRangingForReaderIdentifierWithReaderIdentifier_error_(void *a1, const char *a2, ...)
{
  return [a1 unblockRangingForReaderIdentifierWithReaderIdentifier:error:];
}

id objc_msgSend_underlyingErrors(void *a1, const char *a2, ...)
{
  return _[a1 underlyingErrors];
}

id objc_msgSend_uniqueID(void *a1, const char *a2, ...)
{
  return _[a1 uniqueID];
}

id objc_msgSend_uniqueIDOverride(void *a1, const char *a2, ...)
{
  return _[a1 uniqueIDOverride];
}

id objc_msgSend_unregisterForAppStateChanges_(void *a1, const char *a2, ...)
{
  return [a1 unregisterForAppStateChanges:];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_unspecifiedError(void *a1, const char *a2, ...)
{
  return _[a1 unspecifiedError];
}

id objc_msgSend_updateAllowlistedVehicles(void *a1, const char *a2, ...)
{
  return _[a1 updateAllowlistedVehicles];
}

id objc_msgSend_updateConfiguration_(void *a1, const char *a2, ...)
{
  return [a1 updateConfiguration:];
}

id objc_msgSend_updatePassSelectionState_(void *a1, const char *a2, ...)
{
  return [a1 updatePassSelectionState:];
}

id objc_msgSend_updatePreArmState_for_error_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "updatePreArmState:for:error:");
}

id objc_msgSend_updateToApplePayView_error_(void *a1, const char *a2, ...)
{
  return [a1 updateToApplePayView:error:];
}

id objc_msgSend_updateWithEndpoint_(void *a1, const char *a2, ...)
{
  return [a1 updateWithEndpoint:];
}

id objc_msgSend_upgradeEndpointJSONData(void *a1, const char *a2, ...)
{
  return _[a1 upgradeEndpointJSONData];
}

id objc_msgSend_uppercaseString(void *a1, const char *a2, ...)
{
  return _[a1 uppercaseString];
}

id objc_msgSend_userDefaults(void *a1, const char *a2, ...)
{
  return _[a1 userDefaults];
}

id objc_msgSend_userInfo(void *a1, const char *a2, ...)
{
  return _[a1 userInfo];
}

id objc_msgSend_usesInterfaceType_(void *a1, const char *a2, ...)
{
  return [a1 usesInterfaceType:];
}

id objc_msgSend_uuid(void *a1, const char *a2, ...)
{
  return _[a1 uuid];
}

id objc_msgSend_validateAuthorizedEndpointConfig_(void *a1, const char *a2, ...)
{
  return [a1 validateAuthorizedEndpointConfig:];
}

id objc_msgSend_validateEntitlements_(void *a1, const char *a2, ...)
{
  return [a1 validateEntitlements:];
}

id objc_msgSend_validateEntitlements_appletIdentifier_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "validateEntitlements:appletIdentifier:");
}

id objc_msgSend_validateForInsert_(void *a1, const char *a2, ...)
{
  return [a1 validateForInsert:];
}

id objc_msgSend_validatePairing_(void *a1, const char *a2, ...)
{
  return [a1 validatePairing:];
}

id objc_msgSend_validateSEPairings_(void *a1, const char *a2, ...)
{
  return [a1 validateSEPairings:];
}

id objc_msgSend_value(void *a1, const char *a2, ...)
{
  return _[a1 value];
}

id objc_msgSend_valueAsUnsignedShort(void *a1, const char *a2, ...)
{
  return _[a1 valueAsUnsignedShort];
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return [a1 valueForEntitlement:];
}

id objc_msgSend_valueWithDAAvailableVersionUpgrade_(void *a1, const char *a2, ...)
{
  return [a1 valueWithDAAvailableVersionUpgrade:];
}

id objc_msgSend_vehicleSupportedAppletVersionsTlvAsData(void *a1, const char *a2, ...)
{
  return _[a1 vehicleSupportedAppletVersionsTlvAsData];
}

id objc_msgSend_vehicleSupportedFrameworkVersionsForCA(void *a1, const char *a2, ...)
{
  return _[a1 vehicleSupportedFrameworkVersionsForCA];
}

id objc_msgSend_vehicleSupportedFrameworkVersionsTlvAsData(void *a1, const char *a2, ...)
{
  return _[a1 vehicleSupportedFrameworkVersionsTlvAsData];
}

id objc_msgSend_vehicleSupportedVersionsData(void *a1, const char *a2, ...)
{
  return _[a1 vehicleSupportedVersionsData];
}

id objc_msgSend_version(void *a1, const char *a2, ...)
{
  return _[a1 version];
}

id objc_msgSend_viewNotSyncedError(void *a1, const char *a2, ...)
{
  return _[a1 viewNotSyncedError];
}

id objc_msgSend_wakeUpClientIfBackgrounded(void *a1, const char *a2, ...)
{
  return _[a1 wakeUpClientIfBackgrounded];
}

id objc_msgSend_weakObjectsHashTable(void *a1, const char *a2, ...)
{
  return _[a1 weakObjectsHashTable];
}

id objc_msgSend_withAppletAID_isSuspended_(void *a1, const char *a2, ...)
{
  return [a1 withAppletAID:isSuspended:];
}

id objc_msgSend_withAuthorizationID_authorizationInterval_authorizationCount_(void *a1, const char *a2, ...)
{
  return [a1 withAuthorizationID:authorizationID authorizationInterval:authorizationInterval authorizationCount:authorizationCount];
}

id objc_msgSend_withCKKSExternalKey_(void *a1, const char *a2, ...)
{
  return [a1 withCKKSExternalKey:];
}

id objc_msgSend_withCipherText_authenticationTag_(void *a1, const char *a2, ...)
{
  return [a1 withCipherText:x0 authenticationTag:x1];
}

id objc_msgSend_withConnection_(void *a1, const char *a2, ...)
{
  return [a1 withConnection:];
}

id objc_msgSend_withData_error_(void *a1, const char *a2, ...)
{
  return [a1 withData:error:];
}

id objc_msgSend_withKeyData_state_(void *a1, const char *a2, ...)
{
  return [a1 withKeyData:x0 state:x1];
}

id objc_msgSend_withKeySlot_key_(void *a1, const char *a2, ...)
{
  return [a1 withKeySlot:x0 key:x1];
}

id objc_msgSend_withPublicKeyData_CASDSignature_keySlot_legacyKeyAttestation_(void *a1, const char *a2, ...)
{
  return [a1 withPublicKeyData:x0 CASDSignature:x1 keySlot:x2 legacyKeyAttestation:x3];
}

id objc_msgSend_withRelyingParty_relyingPartyAccountHash_fidoKeyHash_fidoAssertion_(void *a1, const char *a2, ...)
{
  return [a1 withRelyingParty:relyingPartyAccountHash:fidoKeyHash:fidoAssertion:];
}

id objc_msgSend_withRelyingParty_relyingPartyAccountHash_fidoPublicKey_fidoAttestation_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "withRelyingParty:relyingPartyAccountHash:fidoPublicKey:fidoAttestation:");
}

id objc_msgSend_withSEID_casdCertificate_casdCertificateRSA_isProd_isSkyOrLater_secureElementType_csn_chipID_(void *a1, const char *a2, ...)
{
  return [a1 withSEID:x0 casdCertificate:x1 casdCertificateRSA:x2 isProd:x3 isSkyOrLater:x4 secureElementType:x5 csn:x6 chipID:x7];
}

id objc_msgSend_withSignature_localValidationVerified_(void *a1, const char *a2, ...)
{
  return [a1 withSignature:localValidationVerified:];
}

id objc_msgSend_withState_passConfigs_(void *a1, const char *a2, ...)
{
  return [a1 withState:passConfigs:];
}

id objc_msgSend_withState_remaningCount_remainingTime_publicKeyIdentifier_authorizationID_anonymizedDSID_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "withState:remaningCount:remainingTime:publicKeyIdentifier:authorizationID:anonymizedDSID:");
}

id objc_msgSend_withSubCAAttestation_casdECDSACertificate_casdRSACertificate_(void *a1, const char *a2, ...)
{
  return [a1 withSubCAAttestation:casdECDSACertificate:casdRSACertificate:];
}

id objc_msgSend_withViewName_currentTLK_tlkShares_previousTLKs_(void *a1, const char *a2, ...)
{
  return [_objc_msgSend(a1, "withViewName:currentTLK:tlkShares:previousTLKs:");
}