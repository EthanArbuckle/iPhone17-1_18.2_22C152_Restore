uint64_t sub_1001E7F30(uint64_t a1, void *aBlock)
{
  void (*v2)(uint64_t (*)(), uint64_t);
  void *v3;
  uint64_t v4;
  uint64_t vars8;

  v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_1001F7BA0, v4);
  swift_release();

  return swift_release();
}

void *sub_1001E7FC4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1001F7BBC((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v17 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    result = (void *)swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v9 = (unint64_t)(v3 + 64) >> 6;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    type metadata accessor for Peer();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v5;
    if (!v18) {
      goto LABEL_37;
    }
LABEL_33:
    type metadata accessor for AlishaPeer();
    if (swift_dynamicCastClass())
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = (void *)specialized Array._endMutation()();
    }
    else
    {
      result = (void *)swift_release();
    }
    uint64_t v4 = v12;
    unint64_t v5 = v10;
  }
  if (v5)
  {
    uint64_t v10 = (v5 - 1) & v5;
    unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v12 = v4;
LABEL_32:
    uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 8 * v11);
    swift_retain();
    if (!v16) {
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  int64_t v13 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v13 >= v9) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    uint64_t v12 = v4 + 1;
    if (!v14)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v9) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v12);
      if (!v14)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v9) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v17 + 8 * v12);
        if (!v14)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v9) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v17 + 8 * v12);
          if (!v14)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v9) {
              goto LABEL_37;
            }
            unint64_t v14 = *(void *)(v17 + 8 * v12);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v9 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v12 = v15 - 1;
                  goto LABEL_31;
                }
              }
LABEL_37:
              sub_10008C4F0();
              return _swiftEmptyArrayStorage;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    goto LABEL_32;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E82F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v11 = v2 + OBJC_IVAR____TtC10seserviced6Alisha_logger;
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v56[3] = v11;
    *(_DWORD *)unint64_t v14 = 136315138;
    uint64_t v57 = v15;
    swift_retain();
    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    swift_release();
    v56[4] = sub_100290514(v16, v18, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Peer paired %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v19 = qword_1004536D8;
  swift_retain();
  if (v19 != -1) {
    goto LABEL_27;
  }
LABEL_8:
  uint64_t v20 = off_100455CB0;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_1001F7C8C;
  *(void *)(v21 + 24) = a1;
  uint64_t v23 = __chkstk_darwin(v21, v22);
  v56[-4] = sub_1000A97C0;
  v56[-3] = v23;
  v56[-2] = v20;
  __chkstk_darwin(v23, v24);
  v56[-2] = sub_1000AA878;
  v56[-1] = v25;
  v27 = v26 + 4;
  swift_retain();
  os_unfair_lock_lock(v27);
  sub_1000AA804(&v57);
  os_unfair_lock_unlock(v27);
  uint64_t v28 = v57;
  swift_release();
  swift_release();
  v29 = (void *)sub_1000BB0E4(v28);
  uint64_t result = swift_bridgeObjectRelease();
  if (v29)
  {
    id v31 = [objc_allocWithZone((Class)SESConfigDCK) init];
    uint64_t v32 = sub_1001EA16C(v29, v31);
    id v33 = [v29 getEndpointUser];
    if (!v33) {
      *(unsigned char *)(v32 + OBJC_IVAR____TtC10seserviced4Peer_expressState) = 1;
    }
    if (qword_100453910 != -1) {
      id v33 = (id)swift_once();
    }
    uint64_t v57 = v32;
    uint64_t v35 = __chkstk_darwin(v33, v34);
    v56[-2] = v36;
    v56[-1] = &v57;
    __chkstk_darwin(v35, v37);
    v56[-2] = sub_1001F7C94;
    v56[-1] = v38;
    v40 = v39 + 4;
    os_unfair_lock_lock(v39 + 4);
    sub_1000AA81C(v41);
    os_unfair_lock_unlock(v40);
    if (qword_1004537D8 != -1) {
      swift_once();
    }
    sub_100209764(v32, 0, 1);
    if (qword_1004537E0 != -1) {
      swift_once();
    }
    sub_10020E12C(v32);
    uint64_t v44 = __chkstk_darwin(v42, v43);
    v56[-4] = sub_1001F252C;
    v56[-3] = 0;
    v56[-2] = v45;
    __chkstk_darwin(v44, v46);
    v56[-2] = sub_1000B61A0;
    v56[-1] = v47;
    v49 = v48 + 4;
    os_unfair_lock_lock(v48 + 4);
    sub_1000AA804(&v57);
    os_unfair_lock_unlock(v49);
    sub_100209D3C(v57);
    swift_bridgeObjectRelease();
    uint64_t v50 = self;
    sub_100050018(v50, @"connectionCount");
    if (qword_100453738 != -1) {
      swift_once();
    }
    uint64_t result = sub_10011FE64(0xD00000000000001ALL, 0x80000001003B2B50);
    if (v51 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v52 = result;
      unint64_t v53 = v51;
      uint64_t v54 = sub_10019AF40(result, v51);
      sub_100075868(v52, v53);
      if (*(unsigned char *)(v54 + 16) == 1)
      {
        if (qword_100453660 != -1) {
          swift_once();
        }
        v55 = (long long *)swift_bridgeObjectRetain();
        sub_100076314(v55);

        swift_release();
        swift_release();
        return swift_bridgeObjectRelease();
      }
      else
      {

        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1001E8C54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_1001E8C7C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_1001E8C94(a1, a2, a3);
}

uint64_t sub_1001E8C94(uint64_t a1, uint64_t a2, void *a3)
{
  sub_10006C51C(&qword_100455720);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  swift_beginAccess();
  id v6 = a3;
  swift_retain();
  sub_1000E82C0(&v8, v5);
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1001E8D40(void **a1)
{
  return sub_1001F1848(*a1);
}

uint64_t sub_1001E8D48(int a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6, uint64_t a7, char *a8, char a9)
{
  unint64_t v80 = a4;
  uint64_t v75 = a7;
  v76 = a8;
  v79 = (char *)a3;
  int v78 = a2;
  LODWORD(v77) = a1;
  uint64_t v11 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v11 - 8, v12);
  unint64_t v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  v71 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v18, v20);
  v73 = (char *)&v70 - v22;
  __chkstk_darwin(v21, v23);
  v72 = (char *)&v70 - v24;
  uint64_t v25 = type metadata accessor for DispatchPredicate();
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (uint64_t *)((char *)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  v30 = (void *)qword_100468A38;
  void *v29 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v25);
  id v31 = v30;
  unint64_t v32 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v26 + 8))(v29, v25);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v33 = a5;
  if ((a6 & 1) == 0)
  {
LABEL_7:
    if ((a6 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  sub_10019366C(v75, (uint64_t)v14);
  uint64_t v34 = v16;
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v36 = v15;
  if (v35(v14, 1, v15) == 1)
  {
    sub_10008E734((uint64_t)v14, &qword_100455EB0);
    goto LABEL_7;
  }
  v40 = v72;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v72, v14, v36);
  uint64_t v41 = v33 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  uint64_t v43 = v73;
  uint64_t v75 = v41;
  v42(v73, v41, v36);
  LOBYTE(v41) = static UUID.== infix(_:_:)();
  uint64_t v45 = *(uint64_t (**)(char *, uint64_t))(v34 + 8);
  unint64_t v44 = v34 + 8;
  uint64_t v46 = v43;
  uint64_t v47 = v45;
  v45(v46, v36);
  if ((v41 & 1) == 0)
  {
    v81 = v47;
    unint64_t v51 = v71;
    v42(v71, (uint64_t)v40, v36);
    swift_retain_n();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    int v54 = v53;
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v55 = swift_slowAlloc();
      unint64_t v80 = v44;
      uint64_t v56 = v55;
      v79 = (char *)swift_slowAlloc();
      v84 = v79;
      *(_DWORD *)uint64_t v56 = 136315394;
      uint64_t v74 = v56 + 4;
      sub_1001F7BBC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v78 = v54;
      os_log_t v77 = v52;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v82 = sub_100290514(v57, v58, (uint64_t *)&v84);
      v76 = &v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v59 = v51;
      v60 = v81;
      v81(v59, v36);
      *(_WORD *)(v56 + 12) = 2080;
      uint64_t v74 = v56 + 14;
      v61 = v73;
      v42(v73, v75, v36);
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v64 = v63;
      v65 = v61;
      v66 = v60;
      v60(v65, v36);
      uint64_t v82 = sub_100290514(v62, v64, (uint64_t *)&v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v67 = v77;
      _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v78, "Connection identifier has changed %s %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v66 = v81;
      v81(v51, v36);
      swift_release_n();
    }
    sub_10007567C();
    swift_allocError();
    unsigned char *v69 = 2;
    swift_willThrow();
    return v66(v40, v36);
  }
  v47(v40, v36);
  if ((a6 & 2) == 0) {
    goto LABEL_10;
  }
LABEL_8:
  if ((a9 & 1) != 0
    || (uint64_t v37 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber,
        *(char **)(v33 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) == v76))
  {
LABEL_10:
    uint64_t v16 = sub_1001F28F8((char)v77, v78, (uint64_t)v79, v80);
    unint64_t v32 = v38;
    if (qword_1004536B0 == -1)
    {
LABEL_11:
      sub_1000CB6FC(v16, v32);
      return sub_10006D144(v16, v32);
    }
LABEL_24:
    swift_once();
    goto LABEL_11;
  }
  swift_retain();
  v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc();
    *(_DWORD *)uint64_t v50 = 134218240;
    v84 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v50 + 12) = 2048;
    v84 = *(char **)(v33 + v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Sequence number has changed %ld %ld", (uint8_t *)v50, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  sub_10007567C();
  swift_allocError();
  unsigned char *v68 = 2;
  return swift_willThrow();
}

uint64_t sub_1001E9540()
{
  type metadata accessor for Alisha(0);
  swift_allocObject();
  uint64_t result = sub_1001E95F0();
  qword_100468880 = result;
  return result;
}

void sub_1001E9580()
{
  id v0 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithIdentifier:v1];

  qword_1004581A8 = (uint64_t)v2;
}

uint64_t sub_1001E95F0()
{
  *(unsigned char *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_maxMessageLength) = 1024;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimerInterval) = 0x40DC200000000000;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_1001F2BBC;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100415608;
  NSString v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

_DWORD *sub_1001E9764()
{
  char v1 = *(unsigned char *)(v0 + 16);
  uint64_t v12 = &type metadata for Bool;
  LOBYTE(v11) = v1;
  sub_1000761D0(&v11, v10);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v10, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v3 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled);
  uint64_t v12 = &type metadata for Bool;
  LOBYTE(v11) = v3;
  sub_1000761D0(&v11, v10);
  char v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v10, 0xD000000000000015, 0x80000001003B7380, v4);
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress);
  uint64_t v12 = &type metadata for Bool;
  LOBYTE(v11) = v5;
  sub_1000761D0(&v11, v10);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v10, 0xD000000000000013, 0x80000001003B73A0, v6);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_1000190DC((uint64_t)"alisha.state", (uint64_t)isa);

  return v8;
}

void sub_1001E9920()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = (void *)((char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *char v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    uint64_t v15 = swift_once();
    goto LABEL_11;
  }
  char v9 = *(unsigned char *)(v1 + 16);
  id v10 = Logger.logObject.getter();
  if (v9)
  {
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Alisha is already running", v12, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v13, "Starting Alisha", v14, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v1 + 16) = 1;
  uint64_t v2 = qword_100468A38;
  if (qword_1004536D8 != -1) {
    goto LABEL_26;
  }
LABEL_11:
  uint64_t v17 = __chkstk_darwin(v15, v16);
  v34[-4] = v18;
  v34[-3] = v1;
  v34[-2] = v2;
  __chkstk_darwin(v17, v19);
  v34[-2] = sub_1001F7B44;
  v34[-1] = v20;
  uint64_t v22 = v21 + 4;
  os_unfair_lock_lock(v21 + 4);
  sub_1000AA81C(v23);
  os_unfair_lock_unlock(v22);
  uint64_t v24 = sub_1001F25A8(v1);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  v34[-4] = sub_1000A24C8;
  v34[-3] = 0;
  v34[-2] = v27;
  __chkstk_darwin(v26, v28);
  v34[-2] = sub_1000AA878;
  v34[-1] = v29;
  id v31 = v30 + 4;
  os_unfair_lock_lock(v30 + 4);
  sub_1000AA804(v34);
  os_unfair_lock_unlock(v31);
  uint64_t v32 = v34[0];
  if ((v34[0] & 0xC000000000000001) == 0)
  {
    if (*(void *)(v34[0] + 16)) {
      goto LABEL_13;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  if (!__CocoaSet.count.getter()) {
    goto LABEL_15;
  }
LABEL_13:
  id v33 = [objc_allocWithZone((Class)SESConfigDCK) init];
  swift_retain();
  sub_1001F2BD8(v32, v1, v33);
  swift_bridgeObjectRelease();

  swift_release();
LABEL_16:
  if (qword_1004537D8 != -1) {
    swift_once();
  }
  sub_100208F38();
  if (qword_100453898 != -1) {
    swift_once();
  }
  sub_100272394();
  if (qword_1004537E0 != -1) {
    swift_once();
  }
  sub_10020D084();
  if (qword_100453698 != -1) {
    swift_once();
  }
  sub_1000B449C();
  sub_1001F7718();
  sub_1001EA92C();
}

void sub_1001E9E2C(void **a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = sub_1001EA16C(*a1, a3);
  if (v3)
  {
    swift_errorRelease();
    id v7 = v4;
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v24 = v9;
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136315138;
      id v11 = [v7 publicKeyIdentifier:v10 + 4];
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_10023CDF4(v12, v14);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      sub_10006D144(v12, v14);
      sub_100290514(v15, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v24, "Failed to initialize peer for %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    uint64_t v18 = v5;
    if (qword_100453910 != -1) {
      uint64_t v5 = swift_once();
    }
    uint64_t v25 = v18;
    uint64_t v19 = __chkstk_darwin(v5, v6);
    __chkstk_darwin(v19, v20);
    uint64_t v22 = v21 + 4;
    os_unfair_lock_lock(v21 + 4);
    sub_1000AA81C(v23);
    os_unfair_lock_unlock(v22);
    swift_release();
  }
}

uint64_t sub_1001EA16C(void *a1, void *a2)
{
  id v92 = a2;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v94 = *(void *)(v5 - 8);
  uint64_t v95 = v5;
  __chkstk_darwin(v5, v6);
  v93 = (unint64_t *)((char *)v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v8 - 8, v9);
  id v11 = (char *)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  unint64_t v17 = (char *)v86 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)v86 - v20;
  __chkstk_darwin(v19, v22);
  v97 = (char *)v86 - v23;
  id v24 = [a1 bleUUID];
  if (!v24) {
    goto LABEL_6;
  }
  uint64_t v25 = v24;
  v96 = a1;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v99 = v13;
  uint64_t v98 = v12;

  UUID.init(uuidString:)();
  uint64_t v26 = v98;
  uint64_t v27 = v99;
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v26) == 1)
  {
    sub_10008E734((uint64_t)v11, &qword_100455EB0);
LABEL_6:
    sub_10007567C();
    swift_allocError();
    *uint64_t v34 = 0;
    swift_willThrow();
    return v2;
  }
  uint64_t v28 = v97;
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v97, v11, v26);
  uint64_t v29 = v96;
  v30 = sub_1001EF918(v96);
  if (v3)
  {
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v26);
    goto LABEL_6;
  }
  uint64_t v36 = (uint64_t)v30;
  uint64_t v88 = v33;
  uint64_t v89 = v32;
  uint64_t v90 = v31;
  v91 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
  v86[1] = v27 + 16;
  v91(v21, v28, v26);
  id v37 = [v29 readerConfigID];
  if (v37)
  {
    unint64_t v38 = v37;
    uint64_t v87 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v86[0] = v39;
  }
  else
  {
    uint64_t v87 = 0;
    v86[0] = 0xF000000000000000;
  }
  type metadata accessor for AlishaPeer();
  uint64_t v40 = swift_allocObject();
  type metadata accessor for AlishaPeer.Configuration();
  swift_allocObject();
  id v41 = v92;
  swift_retain();
  uint64_t v42 = v87;
  unint64_t v43 = v86[0];
  sub_1000758F4(v87, v86[0]);
  uint64_t v44 = sub_10023CB14(v36, v90, v89, v88, v42, v43, v41);

  sub_100075868(v42, v43);
  *(void *)(v40 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) = v44;
  swift_release();
  uint64_t v45 = v98;
  v91(v17, v21, v98);
  uint64_t v2 = sub_1002119A8((uint64_t)v17);
  sub_100075868(v42, v43);
  uint64_t v46 = *(void **)(v99 + 8);
  v99 += 8;
  id v92 = v46;
  ((void (*)(char *, uint64_t))v46)(v21, v45);
  swift_retain();
  uint64_t v47 = sub_10011FE64(0xD00000000000001ALL, 0x80000001003B2B50);
  v48 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  uint64_t v49 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  unint64_t v50 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  uint64_t *v48 = v47;
  v48[1] = v51;
  sub_100075868(v49, v50);
  swift_release();
  uint64_t v52 = qword_100453738;
  swift_retain();
  if (v52 != -1) {
    swift_once();
  }
  uint64_t v90 = qword_1004687C0;
  os_log_type_t v53 = v96;
  id v54 = [v96 publicKeyIdentifier:v86[0]];
  uint64_t v55 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v91 = v56;

  id v57 = [v53 appletIdentifier];
  uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v60 = v59;

  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v61 = qword_100468A38;
  unint64_t v63 = v93;
  uint64_t v62 = v94;
  void *v93 = qword_100468A38;
  uint64_t v64 = v95;
  (*(void (**)(void *, void, uint64_t))(v62 + 104))(v63, enum case for DispatchPredicate.onQueue(_:), v95);
  id v65 = (id)v61;
  LOBYTE(v61) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v62 + 8))(v63, v64);
  if (v61)
  {
    uint64_t v67 = v90;
    unint64_t v66 = (unint64_t)v91;
    if (*(unsigned char *)(v90 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress))
    {
      char v68 = 1;
    }
    else
    {
      sub_10006D0EC(v55, (unint64_t)v91);
      sub_10006D0EC(v58, v60);
      uint64_t v69 = swift_bridgeObjectRetain();
      char v70 = sub_100235E7C(v69, v55, v66, v58, v60);
      sub_10006D144(v58, v60);
      sub_10006D144(v55, v66);
      swift_bridgeObjectRelease();
      if (v70) {
        char v68 = *(unsigned char *)(v67 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
      }
      else {
        char v68 = 0;
      }
    }
    sub_10006D144(v58, v60);
    sub_10006D144(v55, v66);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_expressState) = v68;
    swift_release();
    swift_retain();
    v71 = v96;
    id v72 = [v96 trackingReceipt];
    if (v72)
    {
      v73 = v72;
      uint64_t v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v76 = v75;

      uint64_t v77 = v74;
      v71 = v96;
      sub_10006D144(v77, v76);
      char v78 = 2;
    }
    else
    {
      char v78 = 1;
    }
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) = v78;
    swift_release();
    swift_retain();
    id v79 = [v71 publicKeyIdentifier];
    uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v82 = v81;

    ((void (*)(char *, uint64_t))v92)(v97, v98);
    char v83 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    uint64_t v84 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v85 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    *char v83 = v80;
    v83[1] = v82;
    sub_100075868(v84, v85);
    swift_release();
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced4Peer_type) = 0;
    return v2;
  }
  __break(1u);
  return result;
}

void sub_1001EA92C()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (void *)((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    uint64_t v8 = (void *)qword_100468A38;
    uint64_t v9 = (NSObject **)objc_allocWithZone((Class)SESTimer);
    aBlock[4] = sub_1001F7B64;
    aBlock[5] = v0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007C0C4;
    aBlock[3] = &unk_100415680;
    uint64_t v10 = _Block_copy(aBlock);
    swift_retain();
    id v11 = sub_100052804(v9, v8, v10);
    _Block_release(v10);
    swift_release();
    uint64_t v12 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer);
    *(void *)(v0 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer) = v11;

    sub_1001F18EC();
  }
  else
  {
    __break(1u);
  }
}

void sub_1001EAB28()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void (**)(void *, uint64_t))((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  id v11 = *(void (**)(void *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  int v12 = *(unsigned __int8 *)(v1 + 16);
  uint64_t v13 = Logger.logObject.getter();
  if (v12 == 1)
  {
    uint64_t v46 = v9;
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Stopping Alisha", v15, 2u);
      swift_slowDealloc();
    }
    uint64_t v45 = v11;

    if (qword_1004536D8 == -1)
    {
LABEL_8:
      uint64_t v18 = __chkstk_darwin(v16, v17);
      *(&v45 - 2) = v19;
      *(&v45 - 1) = (void (*)(void *, uint64_t))v1;
      __chkstk_darwin(v18, v20);
      *(&v45 - 2) = (void (*)(void *, uint64_t))sub_1001F76FC;
      *(&v45 - 1) = v21;
      uint64_t v23 = v22 + 4;
      os_unfair_lock_lock(v22 + 4);
      sub_1000AA81C(v24);
      os_unfair_lock_unlock(v23);
      if (qword_100453680 != -1) {
        swift_once();
      }
      sub_100096B04();
      if (qword_1004537D8 != -1) {
        swift_once();
      }
      sub_100209400();
      if (qword_100453898 != -1) {
        swift_once();
      }
      sub_1002725CC();
      if (qword_1004537E0 != -1) {
        swift_once();
      }
      sub_10020D4E0();
      if (qword_100453698 != -1) {
        swift_once();
      }
      sub_1000B47C8();
      if (qword_100453878 != -1) {
        swift_once();
      }
      uint64_t v25 = qword_100468968;
      uint64_t v26 = qword_100468A38;
      *uint64_t v6 = qword_100468A38;
      v46(v6, v8, v2);
      id v27 = (id)v26;
      LOBYTE(v26) = _dispatchPreconditionTest(_:)();
      v45(v6, v2);
      if (v26)
      {
        unint64_t v28 = sub_1001DBABC((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v29 = (unint64_t *)(v25 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
        swift_beginAccess();
        unint64_t *v29 = v28;
        swift_bridgeObjectRelease();
        unint64_t v30 = sub_1001DBAC8((uint64_t)_swiftEmptyArrayStorage);
        uint64_t v31 = (unint64_t *)(v25 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
        swift_beginAccess();
        *uint64_t v31 = v30;
        uint64_t v32 = swift_bridgeObjectRelease();
        if (qword_100453910 == -1)
        {
LABEL_22:
          uint64_t v34 = __chkstk_darwin(v32, v33);
          *(&v45 - 4) = (void (*)(void *, uint64_t))sub_1000B5774;
          *(&v45 - 3) = 0;
          *(&v45 - 2) = v35;
          __chkstk_darwin(v34, v36);
          *(&v45 - 2) = (void (*)(void *, uint64_t))sub_1000B61A0;
          *(&v45 - 1) = v37;
          unint64_t v39 = v38 + 4;
          os_unfair_lock_lock(v38 + 4);
          sub_1000AA804(&v47);
          os_unfair_lock_unlock(v39);
          sub_1001E77DC(v47);
          swift_bridgeObjectRelease();
          if (qword_1004537A0 != -1) {
            swift_once();
          }
          [(id)qword_1004581A8 invalidate];
          uint64_t v40 = OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer;
          uint64_t v41 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer);
          if (v41)
          {
            sub_100052B14(v41);
            uint64_t v42 = *(void **)(v1 + v40);
          }
          else
          {
            uint64_t v42 = 0;
          }
          *(void *)(v1 + v40) = 0;

          *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) = 0;
          *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress) = 0;
          *(unsigned char *)(v1 + 16) = 0;
          return;
        }
      }
      else
      {
        __break(1u);
      }
      uint64_t v32 = swift_once();
      goto LABEL_22;
    }
LABEL_32:
    uint64_t v16 = swift_once();
    goto LABEL_8;
  }
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v43, "Alisha is not running", v44, 2u);
    swift_slowDealloc();
  }
}

void sub_1001EB1C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  int v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *int v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v13)
  {
    if (qword_100453938 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  sub_1002BCB40(a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a1, a2);
  if ((*(unsigned char *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) & 1) == 0)
  {
    if (qword_1004537D8 != -1) {
      swift_once();
    }
    sub_100209764(a3, *(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled), 0);
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000D797C(a3);
  }
}

void sub_1001EB414(unint64_t a1, int a2, char *a3, unint64_t a4, uint64_t a5, char *a6, unint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v140 = a5;
  unint64_t v143 = a4;
  v142 = a3;
  LODWORD(v141) = a2;
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)&v135 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (id *)((char *)&v135 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
LABEL_96:
  }
    swift_once();
  uint64_t v21 = (void *)qword_100468A38;
  *uint64_t v20 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = v21;
  char v23 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v20, v16);
  if ((v23 & 1) == 0)
  {
    __break(1u);
    goto LABEL_98;
  }
  v139 = a6;
  uint64_t v24 = OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress;
  if (*(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced6Alisha_isPairingInProgress)) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) != 2)
  {
    BOOL v41 = 0;
    if (a1 != 3 && a1 != 6)
    {
LABEL_4:
      swift_retain();
      swift_retain();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        int v28 = *(unsigned __int8 *)(v8 + v24);
        *(_DWORD *)uint64_t v27 = 67109376;
        LODWORD(v144) = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        int v29 = *(unsigned __int8 *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_pairingState);
        *(_WORD *)(v27 + 8) = 1024;
        LODWORD(v144) = v29 != 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Sending DEVICE_BUSY because pairing is in progress %{BOOL}d or peer is not fully paired %{BOOL}d", (uint8_t *)v27, 0xEu);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
        swift_release();
      }

      uint64_t v34 = &off_10040E5F8;
      goto LABEL_14;
    }
    goto LABEL_23;
  }
  unsigned int v30 = a1 - 1;
  if (*(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) == 1 && v30 < 2)
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Command blocked because of low power mode", v33, 2u);
      swift_slowDealloc();
    }

    uint64_t v34 = &off_10040E5D0;
    goto LABEL_14;
  }
  BOOL v41 = a1 == 1;
  if (v30 > 1
    || (uint64_t v42 = OBJC_IVAR____TtC10seserviced4Peer_expressState,
        *(unsigned char *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_expressState) == 1))
  {
LABEL_23:
    uint64_t v137 = a1;
    os_log_type_t v43 = self;
    id v44 = [v43 sessionManager];
    id v45 = [v44 getActiveDCKSessions];

    sub_10007582C(0, (unint64_t *)&qword_1004568A0);
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v138 = (char *)a7;
    id v135 = v43;
    BOOL v136 = v41;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      if (v16)
      {
LABEL_25:
        a7 = a1 & 0xC000000000000001;
        uint64_t v17 = 4;
        while (1)
        {
          if (a7) {
            uint64_t v46 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            uint64_t v46 = (char *)*(id *)(a1 + 8 * v17);
          }
          a6 = v46;
          uint64_t v20 = (void *)(v17 - 3);
          if (__OFADD__(v17 - 4, 1))
          {
            __break(1u);
            goto LABEL_96;
          }
          unsigned int v47 = [v46 isPreArmed];

          if (v47) {
            break;
          }
          ++v17;
          if (v20 == (void *)v16) {
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease_n();
        v48 = v138;
        if (v136)
        {
          uint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v52, v53))
          {
            id v54 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v54 = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "Device SE busy because a pass is pre-armed", v54, 2u);
            swift_slowDealloc();
          }

          uint64_t v34 = &off_10040E580;
LABEL_14:
          uint64_t v35 = sub_100088F40((uint64_t)v34);
          unint64_t v37 = v36;
          uint64_t v16 = sub_1001F28F8(3, 17, v35, v36);
          a1 = v38;
          sub_10006D144(v35, v37);
          if (qword_1004536B0 == -1)
          {
LABEL_15:
            sub_1000CB6FC(v16, a1);
LABEL_16:
            uint64_t v39 = v16;
            unint64_t v40 = a1;
LABEL_17:
            sub_10006D144(v39, v40);
            return;
          }
LABEL_98:
          swift_once();
          goto LABEL_15;
        }
        char v49 = v137;
        switch((int)v137)
        {
          case 0:
            goto LABEL_46;
          case 2:
            v125 = Logger.logObject.getter();
            os_log_type_t v126 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v125, v126))
            {
              v127 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v127 = 0;
              _os_log_impl((void *)&_mh_execute_header, v125, v126, "Device busy because a pass is pre-armed", v127, 2u);
              swift_slowDealloc();
            }

            uint64_t v34 = &off_10040E5A8;
            goto LABEL_14;
          case 3:
LABEL_62:
            if (v141 == 17)
            {
              sub_1001ECD0C((uint64_t)v142, v143, (unint64_t)v48);
              return;
            }
            id v57 = v142;
            unint64_t v58 = v143;
            sub_10006D0EC((uint64_t)v142, v143);
            sub_10006D0EC((uint64_t)v57, v58);
            unint64_t v59 = Logger.logObject.getter();
            os_log_type_t v60 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v59, v60)) {
              goto LABEL_85;
            }
            uint64_t v61 = swift_slowAlloc();
            uint64_t v144 = swift_slowAlloc();
            *(_DWORD *)uint64_t v61 = 16777730;
            LOBYTE(v146) = v141;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v61 + 5) = 2080;
            uint64_t v146 = (uint64_t)sub_10023CDF4((uint64_t)v57, v58);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v116 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v118 = v117;
            swift_bridgeObjectRelease();
            uint64_t v146 = sub_100290514(v116, v118, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144((uint64_t)v57, v58);
            sub_10006D144((uint64_t)v57, v58);
            id v65 = "Invalid event identifier %hhu payload %s";
            goto LABEL_48;
          case 4:
LABEL_64:
            if (v141 != 16)
            {
              unint64_t v59 = Logger.logObject.getter();
              os_log_type_t v119 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v59, v119))
              {
                v120 = (uint8_t *)swift_slowAlloc();
                *(_DWORD *)v120 = 16777472;
                LOBYTE(v144) = v141;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v59, v119, "Incorrect passthrough message identifier %hhu", v120, 5u);
                goto LABEL_84;
              }

              return;
            }
            v103 = (uint64_t *)&v48[OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier];
            unint64_t v104 = *(void *)&v48[OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8];
            if (v104 >> 60 == 15)
            {
              swift_retain_n();
              v105 = Logger.logObject.getter();
              os_log_type_t v106 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v105, v106))
              {
                v107 = (uint8_t *)swift_slowAlloc();
                uint64_t v108 = swift_slowAlloc();
                *(_DWORD *)v107 = 136315138;
                uint64_t v144 = v108;
                swift_retain();
                uint64_t v109 = UUID.uuidString.getter();
                unint64_t v111 = v110;
                swift_release();
                uint64_t v146 = sub_100290514(v109, v111, &v144);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v105, v106, "Peer missing key identifier %s", v107, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_release_n();
              }

              return;
            }
            uint64_t v128 = *v103;
            sub_10006D0EC(*v103, *(void *)&v48[OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8]);
            v129 = Logger.logObject.getter();
            os_log_type_t v130 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v129, v130))
            {
              v131 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v131 = 0;
              _os_log_impl((void *)&_mh_execute_header, v129, v130, "Passthrough message received", v131, 2u);
              swift_slowDealloc();
            }

            id v132 = [v135 sessionManager];
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            Class v134 = Data._bridgeToObjectiveC()().super.isa;
            [v132 didReceivePassthroughMessage:isa keyIdentifier:v134];

            uint64_t v100 = v128;
            unint64_t v101 = v104;
            goto LABEL_92;
          case 5:
LABEL_69:
            if (v141 == 20)
            {
              unint64_t v112 = v143;
              v113 = v142;
              if (qword_100453948 != -1) {
                swift_once();
              }
              sub_1002D8BC4((uint64_t)v113, v112, (uint64_t)v48);
              return;
            }
            id v57 = v142;
            unint64_t v58 = v143;
            sub_10006D0EC((uint64_t)v142, v143);
            sub_10006D0EC((uint64_t)v57, v58);
            unint64_t v59 = Logger.logObject.getter();
            os_log_type_t v102 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v59, v102)) {
              goto LABEL_85;
            }
LABEL_82:
            uint64_t v121 = swift_slowAlloc();
            uint64_t v144 = swift_slowAlloc();
            *(_DWORD *)uint64_t v121 = 16777986;
            LOBYTE(v146) = v49;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v121 + 5) = 256;
            LOBYTE(v146) = v141;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v121 + 8) = 2080;
            uint64_t v146 = (uint64_t)sub_10023CDF4((uint64_t)v57, v58);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v122 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v124 = v123;
            swift_bridgeObjectRelease();
            uint64_t v146 = sub_100290514(v122, v124, &v144);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144((uint64_t)v57, v58);
            sub_10006D144((uint64_t)v57, v58);
            id v65 = "Ignoring unknown message type %hhu identifier %hhu payload %s";
            unint64_t v66 = v59;
            os_log_type_t v67 = v102;
            char v68 = (uint8_t *)v121;
            uint32_t v69 = 18;
            break;
          case 6:
LABEL_73:
            if (qword_1004536E0 != -1) {
              swift_once();
            }
            uint64_t v114 = type metadata accessor for UUID();
            uint64_t v115 = *(void *)(v114 - 8);
            (*(void (**)(char *, uint64_t, uint64_t))(v115 + 16))(v15, v140, v114);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v115 + 56))(v15, 0, 1, v114);
            sub_10012E3B8(v141, v142, v143, v48, 1uLL, (uint64_t)v15, 0, 1);
            goto LABEL_76;
          default:
LABEL_60:
            id v57 = v142;
            unint64_t v58 = v143;
            sub_10006D0EC((uint64_t)v142, v143);
            sub_10006D0EC((uint64_t)v57, v58);
            unint64_t v59 = Logger.logObject.getter();
            os_log_type_t v102 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v59, v102)) {
              goto LABEL_85;
            }
            goto LABEL_82;
        }
LABEL_83:
        _os_log_impl((void *)&_mh_execute_header, v66, v67, v65, v68, v69);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_84:
        swift_slowDealloc();

        return;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v16) {
        goto LABEL_25;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease_n();
    v48 = v138;
    char v49 = v137;
    if (v137)
    {
      if (!v136)
      {
        switch((int)v137)
        {
          case 2:
            if (qword_1004537E0 != -1) {
              swift_once();
            }
            uint64_t v55 = type metadata accessor for UUID();
            uint64_t v56 = *(void *)(v55 - 8);
            (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v15, v140, v55);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v15, 0, 1, v55);
            sub_10020D7D8(v141, (uint64_t)v142, v143, (uint64_t)v48, 3, (uint64_t)v15, (uint64_t)v139, 0);
            goto LABEL_76;
          case 3:
            goto LABEL_62;
          case 4:
            goto LABEL_64;
          case 5:
            goto LABEL_69;
          case 6:
            goto LABEL_73;
          default:
            goto LABEL_60;
        }
      }
      if (qword_100453898 != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for UUID();
      uint64_t v51 = *(void *)(v50 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v15, v140, v50);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v15, 0, 1, v50);
      sub_10027194C(v141, (uint64_t)v142, v143, (uint64_t)v48, 3, (uint64_t)v15, v139, 0);
LABEL_76:
      sub_10008E734((uint64_t)v15, &qword_100455EB0);
      return;
    }
LABEL_46:
    id v57 = v142;
    unint64_t v58 = v143;
    sub_10006D0EC((uint64_t)v142, v143);
    sub_10006D0EC((uint64_t)v57, v58);
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v59, v60))
    {
LABEL_85:

      sub_10006D144((uint64_t)v57, v58);
      uint64_t v39 = (uint64_t)v57;
      unint64_t v40 = v58;
      goto LABEL_17;
    }
    uint64_t v61 = swift_slowAlloc();
    uint64_t v144 = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 16777730;
    LOBYTE(v146) = v141;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v61 + 5) = 2080;
    uint64_t v146 = (uint64_t)sub_10023CDF4((uint64_t)v57, v58);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v62 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v64 = v63;
    swift_bridgeObjectRelease();
    uint64_t v146 = sub_100290514(v62, v64, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144((uint64_t)v57, v58);
    sub_10006D144((uint64_t)v57, v58);
    id v65 = "Ignoring pairing message while not pairing %hhu payload %s";
LABEL_48:
    unint64_t v66 = v59;
    os_log_type_t v67 = v60;
    char v68 = (uint8_t *)v61;
    uint32_t v69 = 15;
    goto LABEL_83;
  }
  swift_retain_n();
  char v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v70, v71))
  {
    id v72 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)id v72 = 136315138;
    uint64_t v144 = v73;
    LOBYTE(v146) = *(unsigned char *)(a7 + v42);
    uint64_t v74 = String.init<A>(describing:)();
    uint64_t v146 = sub_100290514(v74, v75, &v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "Command blocked because of non express mode %s", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  uint64_t v76 = sub_100088F40((uint64_t)&off_10040E558);
  unint64_t v78 = v77;
  uint64_t v16 = sub_1001F28F8(3, 17, v76, v77);
  a1 = v79;
  sub_10006D144(v76, v78);
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  sub_1000CB6FC(v16, a1);
  if (*(unsigned char *)(a7 + v42) != 2) {
    goto LABEL_16;
  }
  char v80 = sub_1000CBD8C();
  if (v80 == 2) {
    goto LABEL_16;
  }
  if (v80) {
    goto LABEL_16;
  }
  uint64_t v81 = self;
  sub_100050018(v81, @"unlockNeededForCarActionCount");
  unint64_t v82 = *(void *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  if (v82 >> 60 == 15) {
    goto LABEL_16;
  }
  unint64_t v83 = *(void *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v83 >> 60 == 15) {
    goto LABEL_16;
  }
  unint64_t v143 = *(void *)(a7 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  uint64_t v84 = v143;
  v142 = *(char **)(a7 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v85 = v142;
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  *(void *)(inited + 32) = 0xD000000000000014;
  *(void *)(inited + 40) = 0x80000001003B74E0;
  sub_1000758F4(v84, v82);
  sub_1000758F4((uint64_t)v85, v83);
  sub_1000758F4(v84, v82);
  sub_1000758F4((uint64_t)v85, v83);
  uint64_t v144 = (uint64_t)sub_10023CDF4(v84, v82);
  uint64_t v141 = sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v87 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v89 = v88;
  swift_bridgeObjectRelease();
  uint64_t v144 = v87;
  uint64_t v145 = v89;
  v90._countAndFlagsBits = 58;
  v90._object = (void *)0xE100000000000000;
  String.append(_:)(v90);
  v91 = v142;
  uint64_t v146 = (uint64_t)sub_10023CDF4((uint64_t)v142, v83);
  uint64_t v92 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v94 = v93;
  swift_bridgeObjectRelease();
  v95._countAndFlagsBits = v92;
  v95._object = v94;
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  uint64_t v96 = v144;
  uint64_t v97 = v145;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v96;
  *(void *)(inited + 56) = v97;
  unint64_t v98 = sub_1001DB224(inited);
  uint64_t v99 = v143;
  sub_1002B9140(0xD000000000000025, 0x80000001003B74B0, v143, v82, (uint64_t)v91, v83, v98);
  sub_10006D144(v16, a1);
  swift_bridgeObjectRelease();
  sub_100075868((uint64_t)v91, v83);
  sub_100075868(v99, v82);
  sub_100075868((uint64_t)v91, v83);
  uint64_t v100 = v99;
  unint64_t v101 = v82;
LABEL_92:
  sub_100075868(v100, v101);
}

void sub_1001ECD0C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint8_t **)((char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v16)
  {
    sub_10006D0EC(a1, a2);
    int v18 = sub_10007D4A4(a1, a2, 0, 0, 0) - 1;
    unint64_t v19 = a2 >> 62;
    switch(v18)
    {
      case 0:
        switch((int)v19)
        {
          case 1:
            LODWORD(v20) = HIDWORD(a1) - a1;
            if (!__OFSUB__(HIDWORD(a1), a1))
            {
              uint64_t v20 = (int)v20;
              goto LABEL_22;
            }
            __break(1u);
            goto LABEL_66;
          case 2:
            uint64_t v33 = *(void *)(a1 + 16);
            uint64_t v32 = *(void *)(a1 + 24);
            BOOL v34 = __OFSUB__(v32, v33);
            uint64_t v20 = v32 - v33;
            if (v34) {
              goto LABEL_67;
            }
            goto LABEL_22;
          case 3:
            return;
          default:
            uint64_t v20 = BYTE6(a2);
LABEL_22:
            if (v20 < 2) {
              return;
            }
            sub_10006D0EC(a1, a2);
            if (sub_10007D4A4(a1, a2, 1, 0, 0))
            {
              sub_10006D0EC(a1, a2);
              sub_10006D0EC(a1, a2);
              uint64_t v25 = Logger.logObject.getter();
              os_log_type_t v26 = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v25, v26)) {
                goto LABEL_58;
              }
              uint64_t v27 = (uint8_t *)swift_slowAlloc();
              uint64_t v85 = swift_slowAlloc();
              *(_DWORD *)uint64_t v27 = 136315138;
              uint64_t v84 = v27 + 4;
              uint64_t v87 = (uint64_t)sub_10023CDF4(a1, a2);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
              uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v37 = v36;
              swift_bridgeObjectRelease();
              uint64_t v87 = sub_100290514(v35, v37, &v85);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006D144(a1, a2);
              sub_10006D144(a1, a2);
              uint64_t v31 = "Ignoring unknown Command Complete event %s";
              goto LABEL_16;
            }
            unint64_t v58 = Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v58, v59))
            {
              os_log_type_t v60 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)os_log_type_t v60 = 0;
              _os_log_impl((void *)&_mh_execute_header, v58, v59, "Received Deselect_SE", v60, 2u);
              swift_slowDealloc();
            }

            if (qword_100453710 != -1) {
              goto LABEL_69;
            }
            break;
        }
LABEL_40:
        sub_100177D1C(a3);
        return;
      case 1:
        switch((int)v19)
        {
          case 1:
            LODWORD(v23) = HIDWORD(a1) - a1;
            if (!__OFSUB__(HIDWORD(a1), a1))
            {
              uint64_t v23 = (int)v23;
              goto LABEL_27;
            }
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          case 2:
            uint64_t v39 = *(void *)(a1 + 16);
            uint64_t v38 = *(void *)(a1 + 24);
            BOOL v34 = __OFSUB__(v38, v39);
            uint64_t v23 = v38 - v39;
            if (!v34) {
              goto LABEL_27;
            }
LABEL_68:
            __break(1u);
LABEL_69:
            swift_once();
            goto LABEL_40;
          case 3:
            return;
          default:
            uint64_t v23 = BYTE6(a2);
LABEL_27:
            if (v23 >= 2)
            {
              sub_10006D0EC(a1, a2);
              switch(sub_10007D4A4(a1, a2, 1, 0, 0))
              {
                case 0u:
                  if (qword_100453898 != -1) {
                    swift_once();
                  }
                  uint64_t v40 = type metadata accessor for UUID();
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v10, 1, 1, v40);
                  uint64_t v41 = swift_allocObject();
                  *(void *)(v41 + 16) = v3;
                  *(void *)(v41 + 24) = a3;
                  swift_retain();
                  swift_retain();
                  sub_100272804(0x666552204B535255, 0xEC00000068736572, a3, 0, 1, (uint64_t)v10, (uint64_t)sub_1001F7D10, v41);
                  swift_release();
                  sub_10008E734((uint64_t)v10, &qword_100455EB0);
                  uint64_t v42 = qword_1004536D8;
                  swift_retain();
                  if (v42 != -1) {
                    swift_once();
                  }
                  os_log_type_t v43 = (uint8_t *)off_100455CB0;
                  uint64_t v44 = swift_allocObject();
                  *(void *)(v44 + 16) = sub_1001F7CB0;
                  *(void *)(v44 + 24) = a3;
                  uint64_t v46 = __chkstk_darwin(v44, v45);
                  *(&v84 - 4) = (uint8_t *)sub_1000AA894;
                  *(&v84 - 3) = (uint8_t *)v46;
                  *(&v84 - 2) = v43;
                  __chkstk_darwin(v46, v47);
                  *(&v84 - 2) = (uint8_t *)sub_1000AA878;
                  *(&v84 - 1) = v48;
                  uint64_t v50 = v49 + 4;
                  swift_retain();
                  os_unfair_lock_lock(v50);
                  sub_1000AA804(&v85);
                  os_unfair_lock_unlock(v50);
                  uint64_t v51 = v85;
                  swift_release();
                  swift_release();
                  uint64_t v52 = (void *)sub_1000BB0E4(v51);
                  swift_bridgeObjectRelease();
                  if (v52)
                  {
                    id v53 = [v52 readerInfo];
                    if (v53)
                    {
                      id v54 = v53;
                      uint64_t v55 = self;
                      id v56 = [v52 getEndpointUser];
                      UUID.uuidString.getter();
                      NSString v57 = String._bridgeToObjectiveC()();
                      swift_bridgeObjectRelease();
                      sub_10004FAD8(v55, 2, 0, v54, (unint64_t)v56, v57);
                    }
                  }
                  return;
                case 3u:
                  if (qword_1004537A8 != -1) {
                    swift_once();
                  }
                  uint64_t v62 = qword_100468890;
                  swift_retain();
                  uint64_t v63 = sub_100203774(v62, a3);
                  swift_release();
                  unint64_t v64 = (void *)sub_1000BB110(v63);
                  swift_bridgeObjectRelease();
                  if (v64)
                  {
                    sub_1001FF2E0();
                    sub_1001FF150();
                    uint64_t v65 = qword_1004536D8;
                    swift_retain();
                    if (v65 != -1) {
                      swift_once();
                    }
                    unint64_t v66 = (uint8_t *)off_100455CB0;
                    uint64_t v67 = swift_allocObject();
                    *(void *)(v67 + 16) = sub_1001F7CB0;
                    *(void *)(v67 + 24) = a3;
                    uint64_t v69 = __chkstk_darwin(v67, v68);
                    *(&v84 - 4) = (uint8_t *)sub_1000AA894;
                    *(&v84 - 3) = (uint8_t *)v69;
                    *(&v84 - 2) = v66;
                    __chkstk_darwin(v69, v70);
                    *(&v84 - 2) = (uint8_t *)sub_1000AA878;
                    *(&v84 - 1) = v71;
                    uint64_t v73 = v72 + 4;
                    swift_retain();
                    os_unfair_lock_lock(v73);
                    sub_1000AA804(&v85);
                    os_unfair_lock_unlock(v73);
                    uint64_t v74 = v85;
                    swift_release();
                    swift_release();
                    unint64_t v75 = (void *)sub_1000BB0E4(v74);
                    swift_bridgeObjectRelease();
                    if (v75)
                    {
                      id v76 = [v75 readerInfo];
                      if (v76)
                      {
                        unint64_t v77 = v76;
                        uint64_t v78 = self;
                        id v79 = [v75 getEndpointUser];
                        UUID.uuidString.getter();
                        NSString v80 = String._bridgeToObjectiveC()();
                        swift_bridgeObjectRelease();
                        sub_10004FAD8(v78, 2, 3, v77, (unint64_t)v79, v80);
                      }
                      else
                      {
                      }
                    }
                    else
                    {
                    }
                  }
                  return;
                case 4u:
                  if (qword_1004537E0 != -1) {
                    swift_once();
                  }
                  char v61 = 3;
                  goto LABEL_55;
                case 7u:
                  if (qword_1004537E0 != -1) {
                    swift_once();
                  }
                  char v61 = 2;
LABEL_55:
                  sub_10020CD38(v61, a3);
                  break;
                default:
                  sub_10006D0EC(a1, a2);
                  sub_10006D0EC(a1, a2);
                  uint64_t v25 = Logger.logObject.getter();
                  os_log_type_t v26 = static os_log_type_t.info.getter();
                  if (!os_log_type_enabled(v25, v26)) {
                    goto LABEL_58;
                  }
                  uint64_t v27 = (uint8_t *)swift_slowAlloc();
                  uint64_t v85 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v27 = 136315138;
                  uint64_t v84 = v27 + 4;
                  uint64_t v87 = (uint64_t)sub_10023CDF4(a1, a2);
                  sub_10006C51C((uint64_t *)&unk_100455EA0);
                  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                  uint64_t v81 = BidirectionalCollection<>.joined(separator:)();
                  unint64_t v83 = v82;
                  swift_bridgeObjectRelease();
                  uint64_t v87 = sub_100290514(v81, v83, &v85);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  sub_10006D144(a1, a2);
                  sub_10006D144(a1, a2);
                  uint64_t v31 = "Ignoring unknown Ranging Session Status Changed event %s";
                  goto LABEL_16;
              }
            }
            return;
        }
      case 3:
        if (qword_100453948 == -1) {
          goto LABEL_8;
        }
        goto LABEL_64;
      case 5:
        if (qword_1004536E0 != -1) {
          swift_once();
        }
        sub_10006D0EC(a1, a2);
        sub_100081790(1, a1, a2, &v85);
        uint64_t v24 = v85;
        a2 = v86;
        sub_10012F244(v85, v86, a3);
        uint64_t v22 = v24;
        goto LABEL_59;
      default:
        sub_10006D0EC(a1, a2);
        sub_10006D0EC(a1, a2);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v25, v26))
        {
LABEL_58:

          sub_10006D144(a1, a2);
          uint64_t v22 = a1;
          goto LABEL_59;
        }
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        uint64_t v84 = v27 + 4;
        uint64_t v87 = (uint64_t)sub_10023CDF4(a1, a2);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v30 = v29;
        swift_bridgeObjectRelease();
        uint64_t v87 = sub_100290514(v28, v30, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        uint64_t v31 = "Ignoring unknown event %s";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v25, v26, v31, v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        break;
    }
  }
  else
  {
    __break(1u);
LABEL_64:
    swift_once();
LABEL_8:
    sub_10006D0EC(a1, a2);
    sub_100081790(1, a1, a2, &v85);
    uint64_t v21 = v85;
    a2 = v86;
    sub_1002D9574(v85, v86, a3);
    uint64_t v22 = v21;
LABEL_59:
    sub_10006D144(v22, a2);
  }
}

void sub_1001EDCDC(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    osloga = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      id v43 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315138;
      sub_100075894();
      uint64_t v17 = Error.localizedDescription.getter();
      sub_100290514(v17, v18, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, osloga, v15, "Failed to get SE to clear URSKs %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    unint64_t v19 = osloga;
    goto LABEL_15;
  }
  sub_1001F7D1C(a1, 0);
  uint64_t v6 = sub_10011FE64(0xD000000000000014, 0x80000001003B7520);
  if (v7 >> 60 == 15)
  {
    __break(1u);
    return;
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100075868(v8, v9);
  id v11 = sub_100056638(a1, isa);

  if (!v11)
  {
    uint64_t v20 = (uint64_t *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v21 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *v20;
      sub_10006D0EC(*v20, *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
      Class v23 = Data._bridgeToObjectiveC()().super.isa;
      id v43 = 0;
      id v24 = sub_100056348(a1, 128, 48, 8, 0, v23, 0, &v43);

      if (v24)
      {
        id v25 = v43;

        sub_10006D0EC(v22, v21);
        sub_10006D0EC(v22, v21);
        os_log_type_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          id v43 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 136315138;
          sub_10023CDF4(v22, v21);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v31 = v30;
          swift_bridgeObjectRelease();
          sub_100290514(v29, v31, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100075868(v22, v21);
          sub_100075868(v22, v21);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "All keys for %s have been deleted from Sunsprite", v28, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100075868(v22, v21);
          sub_1000758E8(a1, 0);
        }
        else
        {
          sub_100075868(v22, v21);
          sub_1000758E8(a1, 0);

          sub_100075868(v22, v21);
          sub_100075868(v22, v21);
        }
      }
      else
      {
        id v32 = v43;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_1000758F4(v22, v21);
        swift_errorRetain();
        sub_1000758F4(v22, v21);
        swift_errorRetain();
        uint64_t v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          id v43 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v35 = 136315394;
          sub_10023CDF4(v22, v21);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v38 = v37;
          swift_bridgeObjectRelease();
          sub_100290514(v36, v38, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100075868(v22, v21);
          sub_100075868(v22, v21);
          *(_WORD *)(v35 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v39 = Error.localizedDescription.getter();
          sub_100290514(v39, v40, (uint64_t *)&v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to clear the keys for %s %s", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100075868(v22, v21);
          sub_1000758E8(a1, 0);
          swift_errorRelease();
        }
        else
        {
          sub_100075868(v22, v21);
          sub_1000758E8(a1, 0);
          swift_errorRelease();

          sub_100075868(v22, v21);
          sub_100075868(v22, v21);
          swift_errorRelease();
          swift_errorRelease();
        }
      }
      return;
    }
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v12)) {
      goto LABEL_14;
    }
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "Found peer with no key identifier";
    goto LABEL_13;
  }

  oslog = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "Failed to select Sunsprite";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, oslog, v12, v14, v13, 2u);
    swift_slowDealloc();
  }
LABEL_14:
  sub_1000758E8(a1, 0);
  unint64_t v19 = oslog;
LABEL_15:
}

void sub_1001EE56C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Peer connected", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = self;
  UUID.uuidString.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004EE34(v12, v13);

  sub_100050018(v12, @"connectionCount");
  if (qword_1004537D8 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  sub_10020827C(a1);
  if (qword_1004537E0 != -1) {
    swift_once();
  }
  sub_10020CD38(1, a1);
  uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  unint64_t v15 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  uint64_t v16 = a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  uint64_t v17 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v18 = *(void *)(v16 + 8);
  sub_1000758F4(v14, v15);
  sub_1000758F4(v17, v18);
  sub_1002B9140(0xD00000000000003CLL, 0x80000001003B7540, v14, v15, v17, v18, 0);
  sub_100075868(v17, v18);
  sub_100075868(v14, v15);
  unint64_t v19 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v19 bleLogVehicleConnected:isa];

  NSString v21 = String._bridgeToObjectiveC()();
  sub_10006C51C(&qword_1004587F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  *(void *)(inited + 32) = 0x4449555572656550;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = UUID.uuidString.getter();
  *(void *)(inited + 56) = v23;
  sub_1001DB39C(inited);
  Class v24 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  PLLogRegisteredEvent();
}

void sub_1001EE98C(void (*a1)(void *, uint64_t))
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_7;
  }
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Peer disconnected", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
  unint64_t v13 = *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
  *(_OWORD *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
  sub_100075868(v12, v13);
  *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) = 0;
  if (qword_100453898 != -1) {
    goto LABEL_17;
  }
LABEL_7:
  sub_100272B9C(a1);
  if (qword_1004537E0 != -1) {
    swift_once();
  }
  sub_10020DEBC((uint64_t)a1);
  if (qword_100453878 != -1) {
    swift_once();
  }
  sub_10025C678((uint64_t)a1);
  if (qword_100453948 != -1) {
    swift_once();
  }
  sub_1002D97F0((uint64_t)a1);
  if (qword_1004536E0 != -1) {
    swift_once();
  }
  sub_10012E05C((uint64_t)a1);
  uint64_t v14 = *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  unint64_t v15 = *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  uint64_t v16 = *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v17 = *(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  sub_1000758F4(v14, v15);
  sub_1000758F4(v16, v17);
  sub_1002B9140(0xD00000000000003FLL, 0x80000001003B7450, v14, v15, v16, v17, 0);
  sub_100075868(v16, v17);
  sub_100075868(v14, v15);
  uint64_t v18 = self;
  UUID.uuidString.getter();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004EF10(v18, v19);

  sub_100050018(v18, @"disconnectionCount");
  uint64_t v20 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v20 bleLogVehicleDisconnected:isa];

  NSString v22 = String._bridgeToObjectiveC()();
  sub_10006C51C(&qword_1004587F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  *(void *)(inited + 32) = 0x4449555572656550;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 48) = UUID.uuidString.getter();
  *(void *)(inited + 56) = v24;
  sub_1001DB39C(inited);
  Class v25 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  PLLogRegisteredEvent();
}

void sub_1001EEE84(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *id v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t v18 = v14;
    if (a1) {
      uint64_t v15 = 0x7964616572;
    }
    else {
      uint64_t v15 = 0x6461657220746F6ELL;
    }
    if (a1) {
      unint64_t v16 = 0xE500000000000000;
    }
    else {
      unint64_t v16 = 0xE900000000000079;
    }
    uint64_t v17 = sub_100290514(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Driving readiness changed %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a1)
  {
    if (qword_100453938 == -1)
    {
LABEL_14:
      sub_1002BD708(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
      if (qword_1004536B0 != -1) {
        swift_once();
      }
      sub_1000D797C(a2);
      if (qword_1004537E0 != -1) {
        swift_once();
      }
      sub_10020CD38(6, a2);
      return;
    }
LABEL_23:
    swift_once();
    goto LABEL_14;
  }
  if (qword_100453938 != -1) {
    swift_once();
  }
  sub_1002BDDDC(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
}

void sub_1001EF220(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (void *)((char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *id v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once();
    goto LABEL_32;
  }
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t v51 = v14;
    if (a1) {
      uint64_t v15 = 0x64656B636F6CLL;
    }
    else {
      uint64_t v15 = 0x64656B636F6C6E75;
    }
    if (a1) {
      unint64_t v16 = 0xE600000000000000;
    }
    else {
      unint64_t v16 = 0xE800000000000000;
    }
    v50[1] = sub_100290514(v15, v16, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Lock state changed %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a1)
  {
    if (qword_100453938 != -1) {
      swift_once();
    }
    sub_1002BD708(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
    uint64_t v17 = qword_1004536D8;
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    uint64_t v18 = off_100455CB0;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = sub_1001F7CB0;
    *(void *)(v19 + 24) = a2;
    uint64_t v21 = __chkstk_darwin(v19, v20);
    v50[-4] = sub_1000AA894;
    v50[-3] = v21;
    v50[-2] = v18;
    __chkstk_darwin(v21, v22);
    v50[-2] = sub_1000AA878;
    v50[-1] = v23;
    Class v25 = v24 + 4;
    swift_retain();
    os_unfair_lock_lock(v25);
    sub_1000AA804(&v51);
    os_unfair_lock_unlock(v25);
    uint64_t v26 = v51;
    swift_release();
    swift_release();
    os_log_type_t v27 = (void *)sub_1000BB0E4(v26);
    swift_bridgeObjectRelease();
    if (v27)
    {
      id v28 = [v27 readerInfo];
      if (v28)
      {
        uint64_t v29 = v28;
        uint64_t v30 = self;
        id v31 = [v27 getEndpointUser];
        UUID.uuidString.getter();
        NSString v32 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_10004FAD8(v30, 0x8000, 0, v29, (unint64_t)v31, v32);

        os_log_type_t v27 = v32;
      }
    }
    uint64_t v33 = qword_1004537E0;
    a1 = 4;
  }
  else
  {
    if (qword_100453938 != -1) {
      swift_once();
    }
    sub_1002BDDDC(a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
    uint64_t v34 = qword_1004536D8;
    swift_retain();
    if (v34 != -1) {
      swift_once();
    }
    uint64_t v35 = off_100455CB0;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = sub_1001F7CB0;
    *(void *)(v36 + 24) = a2;
    uint64_t v38 = __chkstk_darwin(v36, v37);
    v50[-4] = sub_1000AA894;
    v50[-3] = v38;
    v50[-2] = v35;
    __chkstk_darwin(v38, v39);
    v50[-2] = sub_1000AA878;
    v50[-1] = v40;
    uint64_t v42 = v41 + 4;
    swift_retain();
    os_unfair_lock_lock(v42);
    sub_1000AA804(&v51);
    os_unfair_lock_unlock(v42);
    uint64_t v43 = v51;
    swift_release();
    swift_release();
    uint64_t v44 = (void *)sub_1000BB0E4(v43);
    swift_bridgeObjectRelease();
    if (v44)
    {
      id v45 = [v44 readerInfo];
      if (v45)
      {
        uint64_t v46 = v45;
        uint64_t v47 = self;
        id v48 = [v44 getEndpointUser];
        UUID.uuidString.getter();
        NSString v49 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_10004FAD8(v47, 0x8000, 1, v46, (unint64_t)v48, v49);

        uint64_t v44 = v49;
      }
    }
    uint64_t v33 = qword_1004537E0;
    a1 = 5;
  }
  if (v33 != -1) {
    goto LABEL_34;
  }
LABEL_32:
  sub_10020CD38(a1, a2);
}

NSObject *sub_1001EF918(void *a1)
{
  id v2 = [a1 readerInfo];
  if (!v2)
  {
    id v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      buf = v20;
      id v21 = [v8 publicKeyIdentifier];
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      sub_10023CDF4(v22, v24);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      sub_10006D144(v22, v24);
      sub_100290514(v25, v27, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v19, "Missing reader info from %s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_7;
    }
LABEL_8:

    goto LABEL_9;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  v32[0] = v4;
  v32[1] = v6;
  sub_1001150C4();
  uint64_t v7 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v7 + 16) >= 4uLL)
  {
    uint64_t v9 = *(NSObject **)(v7 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return v9;
  }
  swift_bridgeObjectRelease();
  id v8 = a1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v9, v10)) {
    goto LABEL_8;
  }
  os_log_type_t type = v10;
  id v11 = (uint8_t *)swift_slowAlloc();
  v32[0] = swift_slowAlloc();
  *(_DWORD *)id v11 = 136315138;
  id v12 = [v8 publicKeyIdentifier];
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  sub_10023CDF4(v13, v15);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  sub_10006D144(v13, v15);
  sub_100290514(v16, v18, v32);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v9, type, "Invalid reader info from %s", v11, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
LABEL_7:
  swift_slowDealloc();
LABEL_9:

  sub_10007567C();
  swift_allocError();
  *id v28 = 0;
  swift_willThrow();
  return v9;
}

uint64_t sub_1001EFDEC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v9, v10);
  id v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10006C51C(&qword_100455EB0);
  uint64_t v15 = __chkstk_darwin(v13 - 8, v14);
  unint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v15, v18);
  id v21 = (char *)&v39 - v20;
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)&v39 - v23;
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  uint64_t v42 = v5;
  uint64_t result = (uint64_t)[a1 bleUUID];
  if (!result) {
    return result;
  }
  uint64_t v40 = v8;

  id v41 = a1;
  uint64_t result = (uint64_t)[a1 bleUUID];
  if (!result)
  {
    __break(1u);
    return result;
  }
  unint64_t v26 = (void *)result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v21, a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v21, 0, 1, v4);
  uint64_t v28 = (uint64_t)&v12[*(int *)(v9 + 48)];
  sub_10019366C((uint64_t)v24, (uint64_t)v12);
  sub_10019366C((uint64_t)v21, v28);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v29((uint64_t)v12, 1, v4) == 1)
  {
    sub_10008E734((uint64_t)v21, &qword_100455EB0);
    sub_10008E734((uint64_t)v24, &qword_100455EB0);
    if (v29(v28, 1, v4) == 1)
    {
      sub_10008E734((uint64_t)v12, &qword_100455EB0);
LABEL_11:
      id v34 = [v41 revocationAttestation];
      if (!v34) {
        return 1;
      }
      uint64_t v35 = v34;
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      sub_10006D144(v36, v38);
      return 0;
    }
    goto LABEL_9;
  }
  sub_10019366C((uint64_t)v12, (uint64_t)v17);
  if (v29(v28, 1, v4) == 1)
  {
    sub_10008E734((uint64_t)v21, &qword_100455EB0);
    sub_10008E734((uint64_t)v24, &qword_100455EB0);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v17, v4);
LABEL_9:
    sub_10008E734((uint64_t)v12, &qword_10045BEE0);
    return 0;
  }
  uint64_t v30 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v40, v28, v4);
  sub_1001F7BBC((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v31 = v27;
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v31 + 8);
  v33(v30, v4);
  sub_10008E734((uint64_t)v21, &qword_100455EB0);
  sub_10008E734((uint64_t)v24, &qword_100455EB0);
  v33(v17, v4);
  sub_10008E734((uint64_t)v12, &qword_100455EB0);
  if (v32) {
    goto LABEL_11;
  }
  return 0;
}

void sub_1001F0298(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_36:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v13 = v2 + OBJC_IVAR____TtC10seserviced6Alisha_logger;
  sub_10006D0EC(a1, a2);
  sub_10006D0EC(a1, a2);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v70 = v13;
  if (v16)
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    uint64_t v72 = v69;
    *(_DWORD *)unint64_t v17 = 136315138;
    v68[1] = v17 + 4;
    uint64_t v9 = 0;
    uint64_t v71 = (uint64_t)sub_10023CDF4(a1, a2);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v71 = sub_100290514(v18, v20, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a1, a2);
    sub_10006D144(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Key tracking completed %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D144(a1, a2);
    sub_10006D144(a1, a2);
    uint64_t v9 = 0;
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  sub_10006D0EC(a1, a2);
  if (qword_100453910 != -1) {
    goto LABEL_36;
  }
LABEL_8:
  id v21 = off_10045AEC8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1001F7D44;
  *(void *)(v22 + 24) = v12;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  v68[-4] = sub_1000AA894;
  v68[-3] = v24;
  v68[-2] = v21;
  __chkstk_darwin(v24, v25);
  v68[-2] = sub_1000B61A0;
  v68[-1] = v26;
  uint64_t v28 = v27 + 4;
  swift_retain();
  os_unfair_lock_lock(v28);
  sub_1000AA804(&v72);
  os_unfair_lock_unlock(v28);
  uint64_t v29 = v72;
  swift_release();
  swift_release();
  uint64_t v30 = sub_1000BB13C(v29);
  swift_bridgeObjectRelease();
  if (v30)
  {
    type metadata accessor for AlishaPeer();
    uint64_t v31 = swift_dynamicCastClass();
    if (v31
      && (uint64_t v32 = v31,
          uint64_t v33 = OBJC_IVAR____TtC10seserviced4Peer_pairingState,
          *(unsigned char *)(v31 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 1))
    {
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = a1;
      *(void *)(v34 + 24) = a2;
      sub_10006D0EC(a1, a2);
      if (qword_1004536D8 != -1) {
        swift_once();
      }
      uint64_t v35 = off_100455CB0;
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = sub_1000A9EC0;
      *(void *)(v36 + 24) = v34;
      uint64_t v38 = __chkstk_darwin(v36, v37);
      v68[-4] = sub_1000AA894;
      v68[-3] = v38;
      v68[-2] = v35;
      __chkstk_darwin(v38, v39);
      v68[-2] = sub_1000AA878;
      v68[-1] = v40;
      uint64_t v42 = v41 + 4;
      swift_retain();
      os_unfair_lock_lock(v42);
      sub_1000AA804(&v72);
      os_unfair_lock_unlock(v42);
      uint64_t v43 = v72;
      swift_release();
      swift_release();
      uint64_t v44 = (void *)sub_1000BB0E4(v43);
      swift_bridgeObjectRelease();
      if (v44)
      {
        id v45 = [objc_allocWithZone((Class)SESConfigDCK) init];
        swift_retain();
        id v46 = [v44 readerConfigID];
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v50 = v49;
        }
        else
        {
          uint64_t v48 = 0;
          unint64_t v50 = 0xF000000000000000;
        }
        sub_10023BBF0(v45, v48, v50);
        sub_100075868(v48, v50);
        swift_release();
        *(unsigned char *)(v32 + v33) = 2;
        if (*(unsigned char *)(v32 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1)
        {
          id v54 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v54, v55))
          {
            id v56 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v56 = 0;
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "Sending REQUEST_STANDARD_TRANSACTION", v56, 2u);
            swift_slowDealloc();
          }

          if (qword_100453798 != -1) {
            swift_once();
          }
          uint64_t v57 = sub_100088F40((uint64_t)&off_10040F2E0);
          unint64_t v59 = v58;
          uint64_t v60 = sub_1001F28F8(3, 17, v57, v58);
          unint64_t v62 = v61;
          sub_10006D144(v57, v59);
          if (qword_1004536B0 != -1) {
            swift_once();
          }
          sub_1000CB6FC(v60, v62);
          if (v9)
          {
            uint64_t v63 = Logger.logObject.getter();
            os_log_type_t v64 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v63, v64))
            {
              uint64_t v65 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v65 = 0;
              _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed to send REQUEST_STANDARD_TRANSACTION event", v65, 2u);
              swift_slowDealloc();
            }
            sub_10006D144(v60, v62);
            swift_errorRelease();
          }
          else
          {
            sub_10006D144(v60, v62);
          }
        }
        uint64_t v66 = self;
        UUID.uuidString.getter();
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        sub_10004F4C8(v66, 4, v67);
        swift_release();
      }
      else
      {
        uint64_t v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          id v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failed to retrieve endpoint", v53, 2u);
          swift_slowDealloc();
        }
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_1001F0BFC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v6 >> 60 == 15)
  {
    sub_10006D0EC(a2, a3);
    sub_100075868(v5, v6);
    sub_100075868(a2, a3);
    return 0;
  }
  else
  {
    sub_1000758F4(*(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), v6);
    sub_10006D0EC(a2, a3);
    char v8 = sub_100088AE4(v5, v6, a2, a3);
    sub_10006D144(a2, a3);
    sub_100075868(v5, v6);
    return v8 & 1;
  }
}

void sub_1001F0CC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = (void *)((char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *unint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = qword_1004536D8;
    swift_retain();
    if (v9 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v10 = off_100455CB0;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1001F7CB0;
  *(void *)(v11 + 24) = a1;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  v33[-4] = sub_1000AA894;
  v33[-3] = v13;
  v33[-2] = v10;
  __chkstk_darwin(v13, v14);
  v33[-2] = sub_1000AA878;
  v33[-1] = v15;
  unint64_t v17 = v16 + 4;
  swift_retain();
  os_unfair_lock_lock(v17);
  sub_1000AA804(&v34);
  os_unfair_lock_unlock(v17);
  uint64_t v18 = v34;
  swift_release();
  swift_release();
  unint64_t v19 = sub_1000BB0E4(v18);
  swift_bridgeObjectRelease();
  if (!v19) {
    goto LABEL_13;
  }
  id v20 = [v19 readerInfo];
  if (!v20)
  {

LABEL_13:
    swift_retain_n();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v34 = v29;
      swift_retain();
      uint64_t v30 = UUID.uuidString.getter();
      unint64_t v32 = v31;
      swift_release();
      v33[1] = sub_100290514(v30, v32, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v27, "Missing endpoint reader information %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    goto LABEL_16;
  }
  id v21 = v20;
  uint64_t v22 = self;
  UUID.uuidString.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004EFC0(v22, 1u, v23);

  UUID.uuidString.getter();
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004FAD8(v22, 0x8000, 0xFFFF, v21, 0, v24);

  type metadata accessor for AlishaPeer();
  uint64_t v25 = swift_dynamicCastClass();
  if (v25 && (*(unsigned char *)(*(void *)(v25 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 112) & 1) == 0)
  {
    uint64_t v26 = qword_1004536B0;
    swift_retain();
    if (v26 != -1) {
      swift_once();
    }
    sub_1000CAD08();
    swift_release();
  }
LABEL_16:
}

uint64_t sub_1001F11DC(void *a1)
{
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  id v2 = [a1 bleUUID];
  if (v2)
  {

    return 0;
  }
  id v4 = [a1 blePairingRequest];

  if (!v4) {
    return 0;
  }
  id v5 = [a1 revocationAttestation];
  if (v5)
  {
    unint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    sub_10006D144(v7, v9);
    return 0;
  }
  return 1;
}

uint64_t sub_1001F12A8(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1004537B0 != -1) {
    swift_once();
  }
  if (byte_100468898 == 1)
  {
    if (qword_100453928 != -1) {
      swift_once();
    }
    v17[0] = qword_100468A38;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a1;
    *(void *)(v14 + 24) = a2;
    aBlock[4] = sub_1001F7BB4;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007C0C4;
    aBlock[3] = &unk_100415720;
    uint64_t v15 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v17[1] = _swiftEmptyArrayStorage;
    sub_1001F7BBC((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10006C51C((uint64_t *)&unk_100455710);
    sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return swift_release();
  }
  else
  {
    if (qword_1004537A0 != -1) {
      swift_once();
    }
    [(id)qword_1004581A8 invalidate];
    return a1(1);
  }
}

uint64_t sub_1001F1634(uint64_t (*a1)(uint64_t))
{
  if (qword_100453920 != -1) {
    swift_once();
  }
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting CA General Transaction Statistics", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v15 = 0;
  uint64_t v16 = 0;
  unsigned __int8 v14 = 1;
  if (qword_1004536D8 != -1) {
    uint64_t v5 = swift_once();
  }
  uint64_t v7 = __chkstk_darwin(v5, v6);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = v9 + 4;
  os_unfair_lock_lock(v9 + 4);
  sub_1000AA804(&v13);
  os_unfair_lock_unlock(v10);
  sub_1001E7B8C(v13, &v16, &v15, &v14);
  swift_bridgeObjectRelease();
  uint64_t v11 = self;
  sub_100051200(v11, v16, v15, v14);
  return a1(1);
}

uint64_t sub_1001F1848(void *a1)
{
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  id v2 = [a1 revocationAttestation];
  if (v2)
  {
    os_log_type_t v3 = v2;
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    sub_10006D144(v4, v6);
    return 0;
  }
  uint64_t result = (uint64_t)[a1 bleUUID];
  if (result)
  {

    return 1;
  }
  return result;
}

void sub_1001F18EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_100468A38;
  *unint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  uint64_t v9 = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v10 = v3 + 8;
  v11(v6, v2);
  if (v9)
  {
    uint64_t v9 = (uint64_t)String._bridgeToObjectiveC()();
    sub_10006C51C(&qword_1004582C0);
    uint64_t inited = swift_initStackObject();
    uint64_t v10 = inited;
    *(_OWORD *)(inited + 16) = xmmword_100378290;
    *(void *)(inited + 32) = 0xD000000000000012;
    *(void *)(inited + 40) = 0x80000001003B7430;
    if (qword_1004536D8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t inited = swift_once();
LABEL_5:
  uint64_t v14 = __chkstk_darwin(inited, v13);
  *(void *)&v26[-32] = sub_1000A24C8;
  *(void *)&v26[-24] = 0;
  *(void *)&v26[-16] = v15;
  __chkstk_darwin(v14, v16);
  *(void *)&v26[-16] = sub_1000AA878;
  *(void *)&v26[-8] = v17;
  unint64_t v19 = v18 + 4;
  os_unfair_lock_lock(v18 + 4);
  sub_1000AA804(&v27);
  os_unfair_lock_unlock(v19);
  if ((v27 & 0xC000000000000001) != 0) {
    uint64_t v20 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v20 = *(void *)(v27 + 16);
  }
  swift_bridgeObjectRelease();
  *(void *)(v10 + 48) = v20;
  sub_1001DBAB0(v10);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  PLLogRegisteredEvent();

  uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced6Alisha_powerLogTimer);
  if (v22)
  {
    sub_1000529D8(v22, 28800.0);
  }
  else
  {
    NSString v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Power log timer not initialized", v25, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001F1C90()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced6Alisha_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1001F1D40()
{
  return type metadata accessor for Alisha(0);
}

uint64_t type metadata accessor for Alisha(uint64_t a1)
{
  return sub_100087C90(a1, qword_100458200);
}

uint64_t sub_1001F1D68()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001F1E20()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v12[0] - 8);
  __chkstk_darwin(v12[0], v7);
  uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  aBlock[4] = sub_1001F7DD0;
  aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004159F0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v12[1] = _swiftEmptyArrayStorage;
  sub_1001F7BBC((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, void))(v6 + 8))(v9, v12[0]);
  return swift_release();
}

id sub_1001F20F4(id result, uint64_t a2)
{
  if (*((unsigned char *)result + 16) == 1)
  {
    if (qword_100453910 != -1) {
      uint64_t result = (id)swift_once();
    }
    uint64_t v2 = __chkstk_darwin(result, a2);
    __chkstk_darwin(v2, v3);
    uint64_t v5 = v4 + 4;
    os_unfair_lock_lock(v4 + 4);
    sub_1000AA804(&v17);
    os_unfair_lock_unlock(v5);
    unint64_t v6 = (unint64_t)sub_1001E7FC4(v17);
    swift_bridgeObjectRelease();
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v7)
      {
LABEL_6:
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "Applying updated asset", v10, 2u);
          swift_slowDealloc();
        }

        uint64_t result = [objc_allocWithZone((Class)SESConfigDCK) init];
        if (v7 < 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v11 = result;
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0)
          {
            uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v13 = *(void *)(v6 + 8 * i + 32);
            swift_retain();
          }
          uint64_t v14 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration);
          sub_10023BBF0(v11, 0, 0xF000000000000000);
          uint64_t v16 = *(void *)(v14 + 96);
          uint64_t v15 = *(void *)(v14 + 104);
          if (qword_1004536B0 != -1) {
            swift_once();
          }
          sub_1000D591C(v16, v15);
          swift_release();
        }

        swift_bridgeObjectRelease();
      }
    }
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001F2420(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type)) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  sub_1000758F4(v3, v4);
  id v5 = [a2 publicKeyIdentifier];
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  if (v4 >> 60 == 15)
  {
    sub_100075868(v3, v4);
    sub_100075868(v6, v8);
    return 0;
  }
  sub_1000758F4(v3, v4);
  char v10 = sub_100088AE4(v3, v4, v6, v8);
  sub_10006D144(v6, v8);
  sub_100075868(v3, v4);
  sub_100075868(v3, v4);
  return v10 & 1;
}

BOOL sub_1001F2530(void *a1)
{
  return !*(unsigned char *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type)
      && *(unsigned char *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) != 0;
}

BOOL sub_1001F256C(void *a1)
{
  return !*(unsigned char *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_type)
      && *(unsigned char *)(*a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2;
}

uint64_t sub_1001F25A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SESAssetManager();
  if (qword_100453890 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void **)(qword_10045A040 + OBJC_IVAR____TtC10seserviced15SESAssetManager_queue);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1001F7D28;
  *(void *)(v5 + 24) = v4;
  v10[4] = sub_1001D2AE4;
  v10[5] = v5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  _OWORD v10[2] = sub_1001E8C54;
  v10[3] = &unk_1004158B0;
  uint64_t v6 = _Block_copy(v10);
  unint64_t v7 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v7, v6);

  _Block_release(v6);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F2754(uint64_t a1, uint64_t a2)
{
  if (qword_100453890 != -1) {
    swift_once();
  }
  uint64_t v4 = *(void **)(qword_10045A040 + OBJC_IVAR____TtC10seserviced15SESAssetManager_queue);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_1001F84D0;
  *(void *)(v6 + 24) = v5;
  v11[4] = sub_1001F84D4;
  v11[5] = v6;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1001E8C54;
  v11[3] = &unk_1004159C8;
  unint64_t v7 = _Block_copy(v11);
  unint64_t v8 = v4;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v7);

  _Block_release(v7);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F28F8(char a1, char a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 62;
  unsigned __int8 v5 = BYTE6(a4);
  uint64_t v9 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      LODWORD(v9) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_16;
      }
      uint64_t v9 = (int)v9;
LABEL_6:
      if (__OFADD__(v9, 4))
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
      }
      uint64_t v23 = sub_100089000(v9 + 4);
      uint64_t v24 = v13;
      LOBYTE(v18) = a1;
      id v21 = &type metadata for UnsafeRawBufferPointer;
      uint64_t v22 = &protocol witness table for UnsafeRawBufferPointer;
      unint64_t v19 = &v18;
      uint64_t v20 = (__int16 **)((char *)&v18 + 1);
      sub_100075908(&v19, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.append(contentsOf:)();
      sub_10007594C((uint64_t)&v19);
      LOBYTE(v18) = a2;
      id v21 = &type metadata for UnsafeRawBufferPointer;
      uint64_t v22 = &protocol witness table for UnsafeRawBufferPointer;
      unint64_t v19 = &v18;
      uint64_t v20 = (__int16 **)((char *)&v18 + 1);
      sub_100075908(&v19, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.append(contentsOf:)();
      sub_10007594C((uint64_t)&v19);
      LODWORD(v14) = 0;
      switch((int)v4)
      {
        case 1:
          LODWORD(v14) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_18;
          }
          unint64_t v14 = (int)v14;
LABEL_12:
          if ((v14 & 0x8000000000000000) != 0 || v14 >= 0x10000)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x1001F2B9CLL);
          }
LABEL_14:
          __int16 v18 = bswap32(v14) >> 16;
          id v21 = &type metadata for UnsafeRawBufferPointer;
          uint64_t v22 = &protocol witness table for UnsafeRawBufferPointer;
          unint64_t v19 = &v18;
          uint64_t v20 = &v19;
          sub_100075908(&v19, (uint64_t)&type metadata for UnsafeRawBufferPointer);
          Data._Representation.append(contentsOf:)();
          sub_10007594C((uint64_t)&v19);
          Data.append(_:)();
          return v23;
        case 2:
          uint64_t v16 = *(void *)(a3 + 16);
          uint64_t v15 = *(void *)(a3 + 24);
          BOOL v12 = __OFSUB__(v15, v16);
          unint64_t v14 = v15 - v16;
          if (!v12) {
            goto LABEL_12;
          }
          goto LABEL_19;
        case 3:
          goto LABEL_14;
        default:
          LODWORD(v14) = v5;
          goto LABEL_14;
      }
    case 2uLL:
      uint64_t v11 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      BOOL v12 = __OFSUB__(v10, v11);
      uint64_t v9 = v10 - v11;
      if (!v12) {
        goto LABEL_6;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v9 = BYTE6(a4);
      goto LABEL_6;
  }
}

uint64_t sub_1001F2BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001F2BD0()
{
  return swift_release();
}

void sub_1001F2BD8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_1001F7C04();
    Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v24;
    uint64_t v22 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v22 = a1 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v21 = (unint64_t)(v7 + 64) >> 6;
  if ((v6 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v29;
    swift_unknownObjectRelease();
    int64_t v15 = v8;
    uint64_t v16 = v9;
    while (v14)
    {
      uint64_t v29 = v14;
      sub_1001E9E2C(&v29, a2, a3);

      if (v4) {
        break;
      }
      int64_t v8 = v15;
      unint64_t v9 = v16;
      if (v6 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v9)
      {
        uint64_t v16 = (v9 - 1) & v9;
        unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
        int64_t v15 = v8;
      }
      else
      {
        int64_t v15 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          return;
        }
        if (v15 >= v21) {
          break;
        }
        unint64_t v18 = *(void *)(v22 + 8 * v15);
        if (!v18)
        {
          int64_t v19 = v8 + 2;
          if (v8 + 2 >= v21) {
            break;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 3;
          if (v8 + 3 >= v21) {
            break;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18) {
            goto LABEL_22;
          }
          int64_t v19 = v8 + 4;
          if (v8 + 4 >= v21) {
            break;
          }
          unint64_t v18 = *(void *)(v22 + 8 * v19);
          if (v18)
          {
LABEL_22:
            int64_t v15 = v19;
          }
          else
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v21) {
              break;
            }
            unint64_t v18 = *(void *)(v22 + 8 * v15);
            if (!v18)
            {
              int64_t v20 = v8 + 6;
              while (v21 != v20)
              {
                unint64_t v18 = *(void *)(v22 + 8 * v20++);
                if (v18)
                {
                  int64_t v15 = v20 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v16 = (v18 - 1) & v18;
        unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      id v14 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
    }
  }
  sub_10008C4F0();
}

uint64_t sub_1001F2ED8(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v96 = a6;
  uint64_t v97 = a4;
  int v98 = a3;
  uint64_t v95 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v95, v9);
  uint64_t v11 = (char *)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (void *)((char *)v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_98;
  }
LABEL_2:
  uint64_t v17 = qword_100468A38;
  *uint64_t v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    JUMPOUT(0x1001F3D38);
  }
  v93[1] = a2;
  v93[0] = a1;
  v93[2] = a5;
  if (v98)
  {
    uint64_t v13 = v97;
    unint64_t v20 = *(void *)(v97 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
    uint64_t v102 = *(void *)(v97 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
    uint64_t v19 = v102;
    unint64_t v103 = v20;
    *(_OWORD *)(v97 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
    sub_1000758F4(v19, v20);
    sub_100075868(v19, v20);
    if (v20 >> 60 == 15 || (Data.append(_:)(), uint64_t v19 = v102, v20 = v103, v21 = v102, v22 = v103, v103 >> 60 == 15))
    {
      sub_10006D0EC(a1, a2);
      uint64_t v21 = a1;
      unint64_t v22 = a2;
    }
    *(void *)&long long v104 = v21;
    *((void *)&v104 + 1) = v22;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    sub_1000758F4(v19, v20);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (_DWORD *)swift_slowAlloc();
      *uint64_t v25 = 134218240;
      uint64_t v26 = v25;
      switch(a2 >> 62)
      {
        case 1uLL:
          sub_10006D144(a1, a2);
          LODWORD(v27) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_101;
          }
          uint64_t v27 = (int)v27;
LABEL_18:
          uint64_t v13 = v97;
LABEL_20:
          uint64_t v101 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10006D144(a1, a2);
          *((_WORD *)v26 + 6) = 2048;
          swift_beginAccess();
          uint64_t v36 = 0;
          switch(*((void *)&v104 + 1) >> 62)
          {
            case 1:
              LODWORD(v36) = DWORD1(v104) - v104;
              if (__OFSUB__(DWORD1(v104), v104)) {
                goto LABEL_105;
              }
              uint64_t v36 = (int)v36;
LABEL_29:
              uint64_t v101 = v36;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v23, v24, "Processing %ld bytes; %ld bytes including accumulated",
                (uint8_t *)v26,
                0x16u);
              swift_slowDealloc();

              break;
            case 2:
              uint64_t v41 = *(void *)(v104 + 16);
              uint64_t v40 = *(void *)(v104 + 24);
              BOOL v39 = __OFSUB__(v40, v41);
              uint64_t v36 = v40 - v41;
              if (!v39) {
                goto LABEL_29;
              }
              goto LABEL_106;
            case 3:
              goto LABEL_29;
            default:
              uint64_t v36 = BYTE14(v104);
              goto LABEL_29;
          }
          break;
        case 2uLL:
          uint64_t v35 = *(void *)(a1 + 16);
          uint64_t v34 = *(void *)(a1 + 24);
          sub_10006D144(a1, a2);
          uint64_t v27 = v34 - v35;
          if (!__OFSUB__(v34, v35)) {
            goto LABEL_18;
          }
          goto LABEL_102;
        case 3uLL:
          sub_10006D144(a1, a2);
          uint64_t v27 = 0;
          goto LABEL_20;
        default:
          sub_10006D144(a1, a2);
          uint64_t v27 = BYTE6(a2);
          goto LABEL_20;
      }
    }
    else
    {
      sub_10006D144(a1, a2);

      sub_10006D144(a1, a2);
    }
    sub_100075868(v19, v20);
  }
  else
  {
    *(void *)&long long v104 = a1;
    *((void *)&v104 + 1) = a2;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v13 = v97;
    if (v30)
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 134217984;
      unint64_t v32 = v31;
      uint64_t v33 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v33) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_103;
          }
          uint64_t v33 = (int)v33;
LABEL_25:
          uint64_t v102 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10006D144(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Processing %ld bytes", v32, 0xCu);
          swift_slowDealloc();

          break;
        case 2uLL:
          uint64_t v38 = *(void *)(a1 + 16);
          uint64_t v37 = *(void *)(a1 + 24);
          BOOL v39 = __OFSUB__(v37, v38);
          uint64_t v33 = v37 - v38;
          if (!v39) {
            goto LABEL_25;
          }
          goto LABEL_104;
        case 3uLL:
          goto LABEL_25;
        default:
          uint64_t v33 = BYTE6(a2);
          goto LABEL_25;
      }
    }
    else
    {

      sub_10006D144(a1, a2);
    }
  }
  uint64_t v99 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
  uint64_t v12 = v13 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  uint64_t v94 = v12;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = 0;
  while (2)
  {
    a5 = *((void *)&v104 + 1);
    a2 = v104;
    a1 = *((void *)&v104 + 1) >> 62;
    switch(*((void *)&v104 + 1) >> 62)
    {
      case 1:
        if (!(((unint64_t)v104 ^ ((void)v104 << 32)) >> 32)) {
          goto LABEL_88;
        }
        goto LABEL_42;
      case 2:
        uint64_t v44 = *(void *)(v104 + 16);
        uint64_t v45 = *(void *)(v104 + 24);
        if (v44 == v45) {
          goto LABEL_88;
        }
        if (a1 == 2)
        {
          BOOL v39 = __OFSUB__(v45, v44);
          uint64_t v43 = v45 - v44;
          if (v39) {
            goto LABEL_100;
          }
        }
        else
        {
LABEL_42:
          LODWORD(v43) = DWORD1(v104) - v104;
          if (__OFSUB__(DWORD1(v104), v104)) {
            goto LABEL_93;
          }
          uint64_t v43 = (int)v43;
        }
LABEL_44:
        if (v43 < 4)
        {
          uint64_t v65 = Logger.logObject.getter();
          os_log_type_t v66 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v65, v66))
          {
            NSString v67 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)NSString v67 = 134217984;
            a5 = *((void *)&v104 + 1);
            a2 = v104;
            uint64_t v68 = v67;
            uint64_t v69 = 0;
            switch(*((void *)&v104 + 1) >> 62)
            {
              case 1:
                LODWORD(v69) = DWORD1(v104) - v104;
                if (__OFSUB__(DWORD1(v104), v104)) {
                  goto LABEL_107;
                }
                uint64_t v69 = (int)v69;
LABEL_80:
                *(void *)&long long v100 = v69;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                os_log_type_t v81 = v66;
                unint64_t v82 = "Got partial data of size %ld < header size";
                unint64_t v83 = v65;
                uint64_t v84 = v68;
                uint32_t v85 = 12;
                break;
              case 2:
                uint64_t v80 = *(void *)(v104 + 16);
                uint64_t v79 = *(void *)(v104 + 24);
                BOOL v39 = __OFSUB__(v79, v80);
                uint64_t v69 = v79 - v80;
                if (!v39) {
                  goto LABEL_80;
                }
                goto LABEL_108;
              case 3:
                goto LABEL_80;
              default:
                uint64_t v69 = BYTE14(v104);
                goto LABEL_80;
            }
LABEL_85:
            _os_log_impl((void *)&_mh_execute_header, v83, v81, v82, v84, v85);
            swift_slowDealloc();
          }
LABEL_86:

          if (v98)
          {
            sub_10006D0EC(a2, a5);
            uint64_t v88 = sub_100080770(a2, a5);
            uint64_t v89 = (uint64_t *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            uint64_t v90 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            unint64_t v91 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
            *uint64_t v89 = v88;
            v89[1] = v92;
            sub_100075868(v90, v91);
          }
LABEL_88:
          uint64_t v73 = a2;
          unint64_t v74 = a5;
          return sub_10006D144(v73, v74);
        }
        sub_10006D0EC(v104, *((unint64_t *)&v104 + 1));
        uint64_t v12 = sub_10007D4A4(a2, a5, 0, 0, 0);
        sub_10006D0EC(a2, a5);
        unsigned int v46 = sub_10007D4A4(a2, a5, 1, 0, 0);
        sub_10006D0EC(a2, a5);
        uint64_t v47 = (unsigned __int16)sub_10007D08C(a2, a5, 2, 0, 0);
        uint64_t v48 = v47 + 4;
        if (v47 <= 0x3FC)
        {
          if (a1)
          {
            uint64_t v49 = v99;
            if (a1 == 1)
            {
              LODWORD(v50) = HIDWORD(a2) - a2;
              if (__OFSUB__(HIDWORD(a2), a2)) {
                goto LABEL_95;
              }
              uint64_t v50 = (int)v50;
            }
            else
            {
              uint64_t v52 = *(void *)(a2 + 16);
              uint64_t v51 = *(void *)(a2 + 24);
              BOOL v39 = __OFSUB__(v51, v52);
              uint64_t v50 = v51 - v52;
              if (v39) {
                goto LABEL_96;
              }
            }
          }
          else
          {
            uint64_t v50 = BYTE6(a5);
            uint64_t v49 = v99;
          }
          if (v50 < v48)
          {
            uint64_t v65 = Logger.logObject.getter();
            os_log_type_t v75 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v65, v75))
            {
              id v76 = (_DWORD *)swift_slowAlloc();
              _DWORD *v76 = 134218240;
              a5 = *((void *)&v104 + 1);
              a2 = v104;
              unint64_t v77 = v76;
              uint64_t v78 = 0;
              switch(*((void *)&v104 + 1) >> 62)
              {
                case 1:
                  LODWORD(v78) = DWORD1(v104) - v104;
                  if (__OFSUB__(DWORD1(v104), v104)) {
                    goto LABEL_109;
                  }
                  uint64_t v78 = (int)v78;
LABEL_84:
                  *(void *)&long long v100 = v78;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *((_WORD *)v77 + 6) = 2048;
                  *(void *)&long long v100 = v48;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  os_log_type_t v81 = v75;
                  unint64_t v82 = "Got partial data of size %ld expected %ld";
                  unint64_t v83 = v65;
                  uint64_t v84 = (uint8_t *)v77;
                  uint32_t v85 = 22;
                  break;
                case 2:
                  uint64_t v87 = *(void *)(v104 + 16);
                  uint64_t v86 = *(void *)(v104 + 24);
                  BOOL v39 = __OFSUB__(v86, v87);
                  uint64_t v78 = v86 - v87;
                  if (!v39) {
                    goto LABEL_84;
                  }
                  goto LABEL_110;
                case 3:
                  goto LABEL_84;
                default:
                  uint64_t v78 = BYTE14(v104);
                  goto LABEL_84;
              }
              goto LABEL_85;
            }
            goto LABEL_86;
          }
          if ((v98 & 1) != 0 && v12 <= 5u && ((1 << v12) & 0x27) != 0)
          {
            uint64_t v53 = *(void *)(v13 + v49);
            BOOL v39 = __OFADD__(v53, 1);
            uint64_t v54 = v53 + 1;
            if (v39) {
              goto LABEL_94;
            }
            *(void *)(v13 + v49) = v54;
          }
          if (a1)
          {
            if (a1 == 1)
            {
              uint64_t v13 = (int)a2;
              a1 = (int)a2 + 4;
            }
            else
            {
              uint64_t v13 = *(void *)(a2 + 16);
              a1 = v13 + 4;
              if (__OFADD__(v13, 4)) {
                goto LABEL_97;
              }
              swift_retain();
            }
            swift_retain();
          }
          else
          {
            uint64_t v13 = 0;
            a1 = 4;
          }
          if (!__OFADD__(v13 + 4, v47))
          {
            if (v13 + 4 + v47 < a1) {
              goto LABEL_92;
            }
            uint64_t v55 = Data.subdata(in:)();
            unint64_t v57 = v56;
            sub_10006D144(a2, a5);
            uint64_t v58 = v95;
            uint64_t v59 = (uint64_t)&v11[*(int *)(v95 + 28)];
            uint64_t v60 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v59, v94, v60);
            uint64_t v13 = v97;
            uint64_t v61 = *(void *)(v97 + v99);
            *uint64_t v11 = v12;
            v11[1] = v46;
            *((void *)v11 + 1) = v55;
            *((void *)v11 + 2) = v57;
            *(void *)&v11[*(int *)(v58 + 32)] = v61;
            *(void *)&v11[*(int *)(v58 + 36)] = v13;
            swift_retain();
            sub_1000A6C88(v12, v46, v55, v57, v59, v13);
            sub_1000AA1C8((uint64_t)v11);
            unint64_t v62 = *((void *)&v104 + 1);
            uint64_t v12 = v104;
            sub_10006D0EC(v104, *((unint64_t *)&v104 + 1));
            sub_100081790(v48, v12, v62, (uint64_t *)&v100);
            unint64_t v64 = *((void *)&v104 + 1);
            uint64_t v63 = v104;
            long long v104 = v100;
            uint64_t result = sub_10006D144(v63, v64);
            continue;
          }
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_once();
          goto LABEL_2;
        }
        swift_retain();
        uint64_t v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v70, v71))
        {
          swift_release();

          goto LABEL_88;
        }
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = 134218240;
        *(void *)&long long v100 = v47 + 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v72 + 12) = 2048;
        *(void *)&long long v100 = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Discarding message exceeding max size %ld > %ld", (uint8_t *)v72, 0x16u);
        swift_slowDealloc();

        unint64_t v74 = *((void *)&v104 + 1);
        uint64_t v73 = v104;
        return sub_10006D144(v73, v74);
      case 3:
        return result;
      default:
        if ((*((void *)&v104 + 1) & 0xFF000000000000) == 0) {
          return result;
        }
        uint64_t v43 = BYTE14(v104);
        goto LABEL_44;
    }
  }
}

uint64_t sub_1001F3D98(unint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v99 = a7;
  uint64_t v98 = a6;
  uint64_t v101 = a4;
  int v100 = a3;
  uint64_t v97 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v97, v10);
  uint64_t v12 = (char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  unint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (void *)((char *)v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_98;
  }
LABEL_2:
  uint64_t v18 = qword_100468A38;
  *uint64_t v17 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  unint64_t v20 = *(void (**)(void *, uint64_t))(v14 + 8);
  v14 += 8;
  v20(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    JUMPOUT(0x1001F4BF4);
  }
  v95[2] = a2;
  v95[1] = a1;
  v95[3] = a5;
  if (v100)
  {
    unint64_t v14 = *(void *)((char *)v101 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
    uint64_t v105 = *(void *)((char *)v101 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
    uint64_t v21 = v105;
    unint64_t v106 = v14;
    *(_OWORD *)((char *)v101 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
    sub_1000758F4(v21, v14);
    sub_100075868(v21, v14);
    if (v14 >> 60 == 15 || (Data.append(_:)(), v21 = v105, unint64_t v14 = v106, v22 = v105, v23 = v106, v106 >> 60 == 15))
    {
      sub_10006D0EC(a1, a2);
      unint64_t v22 = a1;
      unint64_t v23 = a2;
    }
    *(void *)&long long v107 = v22;
    *((void *)&v107 + 1) = v23;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    sub_1000758F4(v21, v14);
    os_log_type_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (_DWORD *)swift_slowAlloc();
      _DWORD *v26 = 134218240;
      uint64_t v27 = v26;
      switch(a2 >> 62)
      {
        case 1uLL:
          sub_10006D144(a1, a2);
          LODWORD(v28) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_101;
          }
          uint64_t v28 = (int)v28;
          break;
        case 2uLL:
          uint64_t v34 = a1;
          unint64_t v37 = a1 + 16;
          uint64_t v36 = *(void *)(a1 + 16);
          uint64_t v35 = *(void *)(v37 + 8);
          unint64_t v38 = v34;
          sub_10006D144(v34, a2);
          uint64_t v28 = v35 - v36;
          if (__OFSUB__(v35, v36)) {
            goto LABEL_102;
          }
          a1 = v38;
          break;
        case 3uLL:
          sub_10006D144(a1, a2);
          uint64_t v28 = 0;
          break;
        default:
          sub_10006D144(a1, a2);
          uint64_t v28 = BYTE6(a2);
          break;
      }
      uint64_t v104 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10006D144(a1, a2);
      *((_WORD *)v27 + 6) = 2048;
      swift_beginAccess();
      uint64_t v39 = 0;
      switch(*((void *)&v107 + 1) >> 62)
      {
        case 1:
          LODWORD(v39) = DWORD1(v107) - v107;
          if (__OFSUB__(DWORD1(v107), v107)) {
            goto LABEL_105;
          }
          uint64_t v39 = (int)v39;
LABEL_29:
          uint64_t v104 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Processing %ld bytes; %ld bytes including accumulated",
            (uint8_t *)v27,
            0x16u);
          swift_slowDealloc();

          break;
        case 2:
          uint64_t v44 = *(void *)(v107 + 16);
          uint64_t v43 = *(void *)(v107 + 24);
          BOOL v42 = __OFSUB__(v43, v44);
          uint64_t v39 = v43 - v44;
          if (!v42) {
            goto LABEL_29;
          }
          goto LABEL_106;
        case 3:
          goto LABEL_29;
        default:
          uint64_t v39 = BYTE14(v107);
          goto LABEL_29;
      }
    }
    else
    {
      sub_10006D144(a1, a2);

      sub_10006D144(a1, a2);
    }
    sub_100075868(v21, v14);
  }
  else
  {
    *(void *)&long long v107 = a1;
    *((void *)&v107 + 1) = a2;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v14 = a2 >> 62;
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 134217984;
      unint64_t v32 = v31;
      uint64_t v33 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v33) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_103;
          }
          uint64_t v33 = (int)v33;
LABEL_25:
          uint64_t v105 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10006D144(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Processing %ld bytes", v32, 0xCu);
          swift_slowDealloc();

          break;
        case 2uLL:
          uint64_t v41 = *(void *)(a1 + 16);
          uint64_t v40 = *(void *)(a1 + 24);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v33 = v40 - v41;
          if (!v42) {
            goto LABEL_25;
          }
          goto LABEL_104;
        case 3uLL:
          goto LABEL_25;
        default:
          uint64_t v33 = BYTE6(a2);
          goto LABEL_25;
      }
    }
    else
    {

      sub_10006D144(a1, a2);
    }
  }
  uint64_t v17 = v101;
  uint64_t v102 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
  uint64_t v13 = (uint64_t)v101 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  uint64_t v96 = v13;
  uint64_t result = swift_beginAccess();
  while (2)
  {
    a1 = *((void *)&v107 + 1);
    a2 = v107;
    a5 = *((void *)&v107 + 1) >> 62;
    switch(*((void *)&v107 + 1) >> 62)
    {
      case 1:
        if (!(((unint64_t)v107 ^ ((void)v107 << 32)) >> 32)) {
          goto LABEL_88;
        }
        goto LABEL_42;
      case 2:
        uint64_t v47 = *(void *)(v107 + 16);
        uint64_t v48 = *(void *)(v107 + 24);
        if (v47 == v48) {
          goto LABEL_88;
        }
        if (a5 == 2)
        {
          BOOL v42 = __OFSUB__(v48, v47);
          uint64_t v46 = v48 - v47;
          if (v42) {
            goto LABEL_100;
          }
        }
        else
        {
LABEL_42:
          LODWORD(v46) = DWORD1(v107) - v107;
          if (__OFSUB__(DWORD1(v107), v107)) {
            goto LABEL_93;
          }
          uint64_t v46 = (int)v46;
        }
LABEL_44:
        if (v46 < 4)
        {
          NSString v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v69 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v69 = 134217984;
            a1 = *((void *)&v107 + 1);
            a2 = v107;
            uint64_t v70 = v69;
            uint64_t v71 = 0;
            switch(*((void *)&v107 + 1) >> 62)
            {
              case 1:
                LODWORD(v71) = DWORD1(v107) - v107;
                if (__OFSUB__(DWORD1(v107), v107)) {
                  goto LABEL_107;
                }
                uint64_t v71 = (int)v71;
LABEL_80:
                *(void *)&long long v103 = v71;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                os_log_type_t v83 = v68;
                uint64_t v84 = "Got partial data of size %ld < header size";
                uint32_t v85 = v67;
                uint64_t v86 = v70;
                uint32_t v87 = 12;
                break;
              case 2:
                uint64_t v82 = *(void *)(v107 + 16);
                uint64_t v81 = *(void *)(v107 + 24);
                BOOL v42 = __OFSUB__(v81, v82);
                uint64_t v71 = v81 - v82;
                if (!v42) {
                  goto LABEL_80;
                }
                goto LABEL_108;
              case 3:
                goto LABEL_80;
              default:
                uint64_t v71 = BYTE14(v107);
                goto LABEL_80;
            }
LABEL_85:
            _os_log_impl((void *)&_mh_execute_header, v85, v83, v84, v86, v87);
            swift_slowDealloc();
          }
LABEL_86:

          if (v100)
          {
            sub_10006D0EC(a2, a1);
            uint64_t v90 = sub_100080770(a2, a1);
            unint64_t v91 = (void *)((char *)v101 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            uint64_t v92 = *(void *)((char *)v101 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            unint64_t v93 = *(void *)((char *)v101 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
            uint64_t *v91 = v90;
            v91[1] = v94;
            sub_100075868(v92, v93);
          }
LABEL_88:
          uint64_t v75 = a2;
          unint64_t v76 = a1;
          return sub_10006D144(v75, v76);
        }
        sub_10006D0EC(v107, *((unint64_t *)&v107 + 1));
        unsigned __int8 v49 = sub_10007D4A4(a2, a1, 0, 0, 0);
        sub_10006D0EC(a2, a1);
        uint64_t v13 = sub_10007D4A4(a2, a1, 1, 0, 0);
        sub_10006D0EC(a2, a1);
        uint64_t v50 = (unsigned __int16)sub_10007D08C(a2, a1, 2, 0, 0);
        unint64_t v14 = v50 + 4;
        if (v50 <= 0x3FC)
        {
          if (a5)
          {
            uint64_t v51 = v102;
            if (a5 == 1)
            {
              LODWORD(v52) = HIDWORD(a2) - a2;
              if (__OFSUB__(HIDWORD(a2), a2)) {
                goto LABEL_95;
              }
              int64_t v52 = (int)v52;
            }
            else
            {
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v53 = *(void *)(a2 + 24);
              BOOL v42 = __OFSUB__(v53, v54);
              int64_t v52 = v53 - v54;
              if (v42) {
                goto LABEL_96;
              }
            }
          }
          else
          {
            int64_t v52 = BYTE6(a1);
            uint64_t v51 = v102;
          }
          if (v52 < (uint64_t)v14)
          {
            NSString v67 = Logger.logObject.getter();
            os_log_type_t v77 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v67, v77))
            {
              uint64_t v78 = (_DWORD *)swift_slowAlloc();
              *uint64_t v78 = 134218240;
              a1 = *((void *)&v107 + 1);
              a2 = v107;
              uint64_t v79 = v78;
              uint64_t v80 = 0;
              switch(*((void *)&v107 + 1) >> 62)
              {
                case 1:
                  LODWORD(v80) = DWORD1(v107) - v107;
                  if (__OFSUB__(DWORD1(v107), v107)) {
                    goto LABEL_109;
                  }
                  uint64_t v80 = (int)v80;
LABEL_84:
                  *(void *)&long long v103 = v80;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *((_WORD *)v79 + 6) = 2048;
                  *(void *)&long long v103 = v50 + 4;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  os_log_type_t v83 = v77;
                  uint64_t v84 = "Got partial data of size %ld expected %ld";
                  uint32_t v85 = v67;
                  uint64_t v86 = (uint8_t *)v79;
                  uint32_t v87 = 22;
                  break;
                case 2:
                  uint64_t v89 = *(void *)(v107 + 16);
                  uint64_t v88 = *(void *)(v107 + 24);
                  BOOL v42 = __OFSUB__(v88, v89);
                  uint64_t v80 = v88 - v89;
                  if (!v42) {
                    goto LABEL_84;
                  }
                  goto LABEL_110;
                case 3:
                  goto LABEL_84;
                default:
                  uint64_t v80 = BYTE14(v107);
                  goto LABEL_84;
              }
              goto LABEL_85;
            }
            goto LABEL_86;
          }
          if ((v100 & 1) != 0 && v49 <= 5u && ((1 << v49) & 0x27) != 0)
          {
            uint64_t v55 = *(void *)((char *)v17 + v51);
            BOOL v42 = __OFADD__(v55, 1);
            uint64_t v56 = v55 + 1;
            if (v42) {
              goto LABEL_94;
            }
            *(void *)((char *)v17 + v51) = v56;
          }
          if (a5)
          {
            if (a5 == 1)
            {
              uint64_t v17 = (void *)(int)a2;
              a5 = (int)a2 + 4;
            }
            else
            {
              uint64_t v17 = *(void **)(a2 + 16);
              a5 = (uint64_t)v17 + 4;
              if (__OFADD__(v17, 4)) {
                goto LABEL_97;
              }
              swift_retain();
            }
            swift_retain();
          }
          else
          {
            uint64_t v17 = 0;
            a5 = 4;
          }
          if (!__OFADD__((char *)v17 + 4, v50))
          {
            if ((uint64_t)v17 + v50 + 4 < a5) {
              goto LABEL_92;
            }
            uint64_t v57 = Data.subdata(in:)();
            uint64_t v59 = v58;
            sub_10006D144(a2, a1);
            uint64_t v60 = v97;
            uint64_t v61 = &v12[*(int *)(v97 + 28)];
            uint64_t v62 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(v61, v96, v62);
            uint64_t v17 = v101;
            uint64_t v63 = *(void *)((char *)v101 + v102);
            *uint64_t v12 = v49;
            v12[1] = v13;
            *((void *)v12 + 1) = v57;
            *((void *)v12 + 2) = v59;
            *(void *)&v12[*(int *)(v60 + 32)] = v63;
            *(void *)&v12[*(int *)(v60 + 36)] = v17;
            swift_retain();
            sub_10009EC74((unsigned __int8 *)v12, v98, v99);
            sub_1000AA1C8((uint64_t)v12);
            unint64_t v64 = *((void *)&v107 + 1);
            uint64_t v13 = v107;
            sub_10006D0EC(v107, *((unint64_t *)&v107 + 1));
            sub_100081790(v14, v13, v64, (uint64_t *)&v103);
            unint64_t v66 = *((void *)&v107 + 1);
            uint64_t v65 = v107;
            long long v107 = v103;
            uint64_t result = sub_10006D144(v65, v66);
            continue;
          }
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_once();
          goto LABEL_2;
        }
        swift_retain();
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v72, v73))
        {
          swift_release();

          goto LABEL_88;
        }
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 134218240;
        *(void *)&long long v103 = v50 + 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v74 + 12) = 2048;
        *(void *)&long long v103 = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Discarding message exceeding max size %ld > %ld", (uint8_t *)v74, 0x16u);
        swift_slowDealloc();

        unint64_t v76 = *((void *)&v107 + 1);
        uint64_t v75 = v107;
        return sub_10006D144(v75, v76);
      case 3:
        return result;
      default:
        if ((*((void *)&v107 + 1) & 0xFF000000000000) == 0) {
          return result;
        }
        uint64_t v46 = BYTE14(v107);
        goto LABEL_44;
    }
  }
}

uint64_t sub_1001F4C54(uint64_t a1, unint64_t a2, int a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v98 = a6;
  unint64_t v99 = a4;
  int v100 = a3;
  uint64_t v97 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v97, v9);
  uint64_t v11 = (char *)v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  unint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (void *)((char *)v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_98;
  }
LABEL_2:
  uint64_t v17 = qword_100468A38;
  *uint64_t v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_100:
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
    JUMPOUT(0x1001F5ABCLL);
  }
  v95[1] = a2;
  v95[0] = a1;
  v95[2] = a5;
  if (v100)
  {
    unint64_t v13 = v99;
    unint64_t v20 = *(void *)(v99 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
    uint64_t v104 = *(void *)(v99 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
    uint64_t v19 = v104;
    unint64_t v105 = v20;
    *(_OWORD *)(v99 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
    sub_1000758F4(v19, v20);
    sub_100075868(v19, v20);
    if (v20 >> 60 == 15 || (Data.append(_:)(), uint64_t v19 = v104, v20 = v105, v21 = v104, v22 = v105, v105 >> 60 == 15))
    {
      sub_10006D0EC(a1, a2);
      uint64_t v21 = a1;
      unint64_t v22 = a2;
    }
    *(void *)&long long v106 = v21;
    *((void *)&v106 + 1) = v22;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    sub_1000758F4(v19, v20);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (_DWORD *)swift_slowAlloc();
      *os_log_type_t v25 = 134218240;
      uint64_t v26 = v25;
      switch(a2 >> 62)
      {
        case 1uLL:
          sub_10006D144(a1, a2);
          LODWORD(v27) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_101;
          }
          uint64_t v27 = (int)v27;
LABEL_18:
          unint64_t v13 = v99;
LABEL_20:
          uint64_t v103 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10006D144(a1, a2);
          *((_WORD *)v26 + 6) = 2048;
          swift_beginAccess();
          uint64_t v36 = 0;
          switch(*((void *)&v106 + 1) >> 62)
          {
            case 1:
              LODWORD(v36) = DWORD1(v106) - v106;
              if (__OFSUB__(DWORD1(v106), v106)) {
                goto LABEL_105;
              }
              uint64_t v36 = (int)v36;
LABEL_29:
              uint64_t v103 = v36;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v23, v24, "Processing %ld bytes; %ld bytes including accumulated",
                (uint8_t *)v26,
                0x16u);
              swift_slowDealloc();

              break;
            case 2:
              uint64_t v41 = *(void *)(v106 + 16);
              uint64_t v40 = *(void *)(v106 + 24);
              BOOL v39 = __OFSUB__(v40, v41);
              uint64_t v36 = v40 - v41;
              if (!v39) {
                goto LABEL_29;
              }
              goto LABEL_106;
            case 3:
              goto LABEL_29;
            default:
              uint64_t v36 = BYTE14(v106);
              goto LABEL_29;
          }
          break;
        case 2uLL:
          uint64_t v35 = *(void *)(a1 + 16);
          uint64_t v34 = *(void *)(a1 + 24);
          sub_10006D144(a1, a2);
          uint64_t v27 = v34 - v35;
          if (!__OFSUB__(v34, v35)) {
            goto LABEL_18;
          }
          goto LABEL_102;
        case 3uLL:
          sub_10006D144(a1, a2);
          uint64_t v27 = 0;
          goto LABEL_20;
        default:
          sub_10006D144(a1, a2);
          uint64_t v27 = BYTE6(a2);
          goto LABEL_20;
      }
    }
    else
    {
      sub_10006D144(a1, a2);

      sub_10006D144(a1, a2);
    }
    sub_100075868(v19, v20);
  }
  else
  {
    *(void *)&long long v106 = a1;
    *((void *)&v106 + 1) = a2;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    unint64_t v13 = v99;
    if (v30)
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v31 = 134217984;
      unint64_t v32 = v31;
      uint64_t v33 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v33) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_103;
          }
          uint64_t v33 = (int)v33;
LABEL_25:
          uint64_t v104 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10006D144(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Processing %ld bytes", v32, 0xCu);
          swift_slowDealloc();

          break;
        case 2uLL:
          uint64_t v38 = *(void *)(a1 + 16);
          uint64_t v37 = *(void *)(a1 + 24);
          BOOL v39 = __OFSUB__(v37, v38);
          uint64_t v33 = v37 - v38;
          if (!v39) {
            goto LABEL_25;
          }
          goto LABEL_104;
        case 3uLL:
          goto LABEL_25;
        default:
          uint64_t v33 = BYTE6(a2);
          goto LABEL_25;
      }
    }
    else
    {

      sub_10006D144(a1, a2);
    }
  }
  uint64_t v101 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
  uint64_t v12 = v13 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  uint64_t v96 = v12;
  uint64_t result = swift_beginAccess();
  uint64_t v16 = 0;
  while (2)
  {
    a5 = *((void *)&v106 + 1);
    a2 = v106;
    a1 = *((void *)&v106 + 1) >> 62;
    switch(*((void *)&v106 + 1) >> 62)
    {
      case 1:
        if (!(((unint64_t)v106 ^ ((void)v106 << 32)) >> 32)) {
          goto LABEL_88;
        }
        goto LABEL_42;
      case 2:
        uint64_t v44 = *(void *)(v106 + 16);
        uint64_t v45 = *(void *)(v106 + 24);
        if (v44 == v45) {
          goto LABEL_88;
        }
        if (a1 == 2)
        {
          BOOL v39 = __OFSUB__(v45, v44);
          uint64_t v43 = v45 - v44;
          if (v39) {
            goto LABEL_100;
          }
        }
        else
        {
LABEL_42:
          LODWORD(v43) = DWORD1(v106) - v106;
          if (__OFSUB__(DWORD1(v106), v106)) {
            goto LABEL_93;
          }
          uint64_t v43 = (int)v43;
        }
LABEL_44:
        if (v43 < 4)
        {
          NSString v67 = Logger.logObject.getter();
          os_log_type_t v68 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v67, v68))
          {
            uint64_t v69 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v69 = 134217984;
            a5 = *((void *)&v106 + 1);
            a2 = v106;
            uint64_t v70 = v69;
            uint64_t v71 = 0;
            switch(*((void *)&v106 + 1) >> 62)
            {
              case 1:
                LODWORD(v71) = DWORD1(v106) - v106;
                if (__OFSUB__(DWORD1(v106), v106)) {
                  goto LABEL_107;
                }
                uint64_t v71 = (int)v71;
LABEL_80:
                *(void *)&long long v102 = v71;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                os_log_type_t v83 = v68;
                uint64_t v84 = "Got partial data of size %ld < header size";
                uint32_t v85 = v67;
                uint64_t v86 = v70;
                uint32_t v87 = 12;
                break;
              case 2:
                uint64_t v82 = *(void *)(v106 + 16);
                uint64_t v81 = *(void *)(v106 + 24);
                BOOL v39 = __OFSUB__(v81, v82);
                uint64_t v71 = v81 - v82;
                if (!v39) {
                  goto LABEL_80;
                }
                goto LABEL_108;
              case 3:
                goto LABEL_80;
              default:
                uint64_t v71 = BYTE14(v106);
                goto LABEL_80;
            }
LABEL_85:
            _os_log_impl((void *)&_mh_execute_header, v85, v83, v84, v86, v87);
            swift_slowDealloc();
          }
LABEL_86:

          if (v100)
          {
            sub_10006D0EC(a2, a5);
            uint64_t v90 = sub_100080770(a2, a5);
            unint64_t v91 = (uint64_t *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            uint64_t v92 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            unint64_t v93 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
            uint64_t *v91 = v90;
            v91[1] = v94;
            sub_100075868(v92, v93);
          }
LABEL_88:
          uint64_t v75 = a2;
          unint64_t v76 = a5;
          return sub_10006D144(v75, v76);
        }
        sub_10006D0EC(v106, *((unint64_t *)&v106 + 1));
        uint64_t v12 = sub_10007D4A4(a2, a5, 0, 0, 0);
        sub_10006D0EC(a2, a5);
        int v46 = sub_10007D4A4(a2, a5, 1, 0, 0);
        sub_10006D0EC(a2, a5);
        uint64_t v47 = (unsigned __int16)sub_10007D08C(a2, a5, 2, 0, 0);
        uint64_t v48 = v47 + 4;
        if (v47 <= 0x3FC)
        {
          if (a1)
          {
            uint64_t v49 = v101;
            if (a1 == 1)
            {
              LODWORD(v50) = HIDWORD(a2) - a2;
              if (__OFSUB__(HIDWORD(a2), a2)) {
                goto LABEL_95;
              }
              uint64_t v50 = (int)v50;
            }
            else
            {
              uint64_t v52 = *(void *)(a2 + 16);
              uint64_t v51 = *(void *)(a2 + 24);
              BOOL v39 = __OFSUB__(v51, v52);
              uint64_t v50 = v51 - v52;
              if (v39) {
                goto LABEL_96;
              }
            }
          }
          else
          {
            uint64_t v50 = BYTE6(a5);
            uint64_t v49 = v101;
          }
          if (v50 < v48)
          {
            NSString v67 = Logger.logObject.getter();
            os_log_type_t v77 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v67, v77))
            {
              uint64_t v78 = (_DWORD *)swift_slowAlloc();
              *uint64_t v78 = 134218240;
              a5 = *((void *)&v106 + 1);
              a2 = v106;
              uint64_t v79 = v78;
              uint64_t v80 = 0;
              switch(*((void *)&v106 + 1) >> 62)
              {
                case 1:
                  LODWORD(v80) = DWORD1(v106) - v106;
                  if (__OFSUB__(DWORD1(v106), v106)) {
                    goto LABEL_109;
                  }
                  uint64_t v80 = (int)v80;
LABEL_84:
                  *(void *)&long long v102 = v80;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *((_WORD *)v79 + 6) = 2048;
                  *(void *)&long long v102 = v48;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  os_log_type_t v83 = v77;
                  uint64_t v84 = "Got partial data of size %ld expected %ld";
                  uint32_t v85 = v67;
                  uint64_t v86 = (uint8_t *)v79;
                  uint32_t v87 = 22;
                  break;
                case 2:
                  uint64_t v89 = *(void *)(v106 + 16);
                  uint64_t v88 = *(void *)(v106 + 24);
                  BOOL v39 = __OFSUB__(v88, v89);
                  uint64_t v80 = v88 - v89;
                  if (!v39) {
                    goto LABEL_84;
                  }
                  goto LABEL_110;
                case 3:
                  goto LABEL_84;
                default:
                  uint64_t v80 = BYTE14(v106);
                  goto LABEL_84;
              }
              goto LABEL_85;
            }
            goto LABEL_86;
          }
          if ((v100 & 1) != 0 && v12 <= 5u && ((1 << v12) & 0x27) != 0)
          {
            uint64_t v53 = *(void *)(v13 + v49);
            BOOL v39 = __OFADD__(v53, 1);
            uint64_t v54 = v53 + 1;
            if (v39) {
              goto LABEL_94;
            }
            *(void *)(v13 + v49) = v54;
          }
          if (a1)
          {
            if (a1 == 1)
            {
              unint64_t v13 = (int)a2;
              a1 = (int)a2 + 4;
            }
            else
            {
              unint64_t v13 = *(void *)(a2 + 16);
              a1 = v13 + 4;
              if (__OFADD__(v13, 4)) {
                goto LABEL_97;
              }
              swift_retain();
            }
            swift_retain();
          }
          else
          {
            unint64_t v13 = 0;
            a1 = 4;
          }
          if (!__OFADD__(v13 + 4, v47))
          {
            if ((uint64_t)(v13 + 4 + v47) < a1) {
              goto LABEL_92;
            }
            uint64_t v55 = (char *)Data.subdata(in:)();
            unint64_t v57 = v56;
            sub_10006D144(a2, a5);
            uint64_t v58 = v97;
            uint64_t v59 = (uint64_t)&v11[*(int *)(v97 + 28)];
            uint64_t v60 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(v59, v96, v60);
            unint64_t v61 = v99;
            uint64_t v62 = *(char **)(v99 + v101);
            *uint64_t v11 = v12;
            v11[1] = v46;
            *((void *)v11 + 1) = v55;
            *((void *)v11 + 2) = v57;
            *(void *)&v11[*(int *)(v58 + 32)] = v62;
            uint64_t v63 = *(int *)(v58 + 36);
            unint64_t v13 = v61;
            *(void *)&v11[v63] = v61;
            swift_retain();
            sub_1001EB414(v12, v46, v55, v57, v59, v62, v13);
            sub_1000AA1C8((uint64_t)v11);
            unint64_t v64 = *((void *)&v106 + 1);
            uint64_t v12 = v106;
            sub_10006D0EC(v106, *((unint64_t *)&v106 + 1));
            sub_100081790(v48, v12, v64, (uint64_t *)&v102);
            unint64_t v66 = *((void *)&v106 + 1);
            uint64_t v65 = v106;
            long long v106 = v102;
            uint64_t result = sub_10006D144(v65, v66);
            continue;
          }
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          swift_once();
          goto LABEL_2;
        }
        swift_retain();
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v72, v73))
        {
          swift_release();

          goto LABEL_88;
        }
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 134218240;
        *(void *)&long long v102 = v47 + 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v74 + 12) = 2048;
        *(void *)&long long v102 = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Discarding message exceeding max size %ld > %ld", (uint8_t *)v74, 0x16u);
        swift_slowDealloc();

        unint64_t v76 = *((void *)&v106 + 1);
        uint64_t v75 = v106;
        return sub_10006D144(v75, v76);
      case 3:
        return result;
      default:
        if ((*((void *)&v106 + 1) & 0xFF000000000000) == 0) {
          return result;
        }
        uint64_t v43 = BYTE14(v106);
        goto LABEL_44;
    }
  }
}

uint64_t sub_1001F5B1C(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v101 = a6;
  uint64_t v98 = a5;
  uint64_t v103 = a4;
  int v102 = a3;
  uint64_t v100 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v100, v8);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (unint64_t *)((char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_99;
  }
LABEL_2:
  uint64_t v16 = qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    __break(1u);
LABEL_103:
    __break(1u);
LABEL_104:
    __break(1u);
LABEL_105:
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    __break(1u);
    JUMPOUT(0x1001F6998);
  }
  unint64_t v97 = a1;
  unint64_t v96 = a2;
  if (v102)
  {
    unint64_t v19 = *(void *)((char *)v103 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
    uint64_t v107 = *(void *)((char *)v103 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
    uint64_t v18 = v107;
    unint64_t v108 = v19;
    *(_OWORD *)((char *)v103 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
    sub_1000758F4(v18, v19);
    sub_100075868(v18, v19);
    if (v19 >> 60 == 15 || (Data.append(_:)(), uint64_t v18 = v107, v19 = v108, v20 = v107, v21 = v108, v108 >> 60 == 15))
    {
      sub_10006D0EC(a1, a2);
      uint64_t v20 = a1;
      unint64_t v21 = a2;
    }
    *(void *)&long long v109 = v20;
    *((void *)&v109 + 1) = v21;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    sub_1000758F4(v18, v19);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (_DWORD *)swift_slowAlloc();
      *os_log_type_t v24 = 134218240;
      os_log_type_t v25 = v24;
      switch(a2 >> 62)
      {
        case 1uLL:
          int v33 = v97;
          unint64_t v34 = HIDWORD(v97);
          sub_10006D144(v97, a2);
          LODWORD(v27) = v34 - v33;
          if (__OFSUB__(v34, v33)) {
            goto LABEL_102;
          }
          uint64_t v27 = (int)v27;
          break;
        case 2uLL:
          unint64_t v35 = a2;
          uint64_t v37 = *(void *)(v97 + 16);
          uint64_t v36 = *(void *)(v97 + 24);
          unint64_t v38 = v35;
          sub_10006D144(v97, v35);
          uint64_t v27 = v36 - v37;
          if (__OFSUB__(v36, v37)) {
            goto LABEL_103;
          }
          a2 = v38;
          break;
        case 3uLL:
          uint64_t v26 = v97;
          sub_10006D144(v97, a2);
          uint64_t v27 = 0;
          goto LABEL_21;
        default:
          uint64_t v26 = v97;
          sub_10006D144(v97, a2);
          uint64_t v27 = BYTE6(a2);
          goto LABEL_21;
      }
      uint64_t v26 = v97;
LABEL_21:
      uint64_t v106 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10006D144(v26, a2);
      *((_WORD *)v25 + 6) = 2048;
      swift_beginAccess();
      uint64_t v39 = 0;
      switch(*((void *)&v109 + 1) >> 62)
      {
        case 1:
          LODWORD(v39) = DWORD1(v109) - v109;
          if (__OFSUB__(DWORD1(v109), v109)) {
            goto LABEL_106;
          }
          uint64_t v39 = (int)v39;
LABEL_30:
          uint64_t v106 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Processing %ld bytes; %ld bytes including accumulated",
            (uint8_t *)v25,
            0x16u);
          swift_slowDealloc();

          break;
        case 2:
          uint64_t v44 = *(void *)(v109 + 16);
          uint64_t v43 = *(void *)(v109 + 24);
          BOOL v42 = __OFSUB__(v43, v44);
          uint64_t v39 = v43 - v44;
          if (!v42) {
            goto LABEL_30;
          }
          goto LABEL_107;
        case 3:
          goto LABEL_30;
        default:
          uint64_t v39 = BYTE14(v109);
          goto LABEL_30;
      }
    }
    else
    {
      sub_10006D144(a1, a2);

      sub_10006D144(a1, a2);
    }
    sub_100075868(v18, v19);
  }
  else
  {
    *(void *)&long long v109 = a1;
    *((void *)&v109 + 1) = a2;
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      BOOL v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v30 = 134217984;
      unint64_t v31 = v30;
      uint64_t v32 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          LODWORD(v32) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1)) {
            goto LABEL_104;
          }
          uint64_t v32 = (int)v32;
LABEL_26:
          uint64_t v107 = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_10006D144(a1, a2);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Processing %ld bytes", v31, 0xCu);
          swift_slowDealloc();

          break;
        case 2uLL:
          uint64_t v41 = *(void *)(a1 + 16);
          uint64_t v40 = *(void *)(a1 + 24);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v32 = v40 - v41;
          if (!v42) {
            goto LABEL_26;
          }
          goto LABEL_105;
        case 3uLL:
          goto LABEL_26;
        default:
          uint64_t v32 = BYTE6(a2);
          goto LABEL_26;
      }
    }
    else
    {

      sub_10006D144(a1, a2);
    }
  }
  uint64_t v15 = v103;
  uint64_t v104 = OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber;
  uint64_t v11 = (uint64_t)v103 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
  swift_beginAccess();
  uint64_t v99 = v11;
  uint64_t result = swift_beginAccess();
  while (2)
  {
    a2 = *((void *)&v109 + 1);
    uint64_t v12 = v109;
    a1 = *((void *)&v109 + 1) >> 62;
    switch(*((void *)&v109 + 1) >> 62)
    {
      case 1:
        if (!(((unint64_t)v109 ^ ((void)v109 << 32)) >> 32)) {
          goto LABEL_89;
        }
        goto LABEL_43;
      case 2:
        uint64_t v47 = *(void *)(v109 + 16);
        uint64_t v48 = *(void *)(v109 + 24);
        if (v47 == v48) {
          goto LABEL_89;
        }
        if (a1 == 2)
        {
          BOOL v42 = __OFSUB__(v48, v47);
          uint64_t v46 = v48 - v47;
          if (v42) {
            goto LABEL_101;
          }
        }
        else
        {
LABEL_43:
          LODWORD(v46) = DWORD1(v109) - v109;
          if (__OFSUB__(DWORD1(v109), v109)) {
            goto LABEL_94;
          }
          uint64_t v46 = (int)v46;
        }
LABEL_45:
        if (v46 < 4)
        {
          os_log_type_t v68 = Logger.logObject.getter();
          os_log_type_t v69 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v68, v69))
          {
            uint64_t v70 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v70 = 134217984;
            a2 = *((void *)&v109 + 1);
            uint64_t v12 = v109;
            uint64_t v71 = v70;
            uint64_t v72 = 0;
            switch(*((void *)&v109 + 1) >> 62)
            {
              case 1:
                LODWORD(v72) = DWORD1(v109) - v109;
                if (__OFSUB__(DWORD1(v109), v109)) {
                  goto LABEL_108;
                }
                uint64_t v72 = (int)v72;
LABEL_81:
                *(void *)&long long v105 = v72;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                os_log_type_t v84 = v69;
                uint32_t v85 = "Got partial data of size %ld < header size";
                uint64_t v86 = v68;
                uint32_t v87 = v71;
                uint32_t v88 = 12;
                break;
              case 2:
                uint64_t v83 = *(void *)(v109 + 16);
                uint64_t v82 = *(void *)(v109 + 24);
                BOOL v42 = __OFSUB__(v82, v83);
                uint64_t v72 = v82 - v83;
                if (!v42) {
                  goto LABEL_81;
                }
                goto LABEL_109;
              case 3:
                goto LABEL_81;
              default:
                uint64_t v72 = BYTE14(v109);
                goto LABEL_81;
            }
LABEL_86:
            _os_log_impl((void *)&_mh_execute_header, v86, v84, v85, v87, v88);
            swift_slowDealloc();
          }
LABEL_87:

          if (v102)
          {
            sub_10006D0EC(v12, a2);
            uint64_t v91 = sub_100080770(v12, a2);
            uint64_t v92 = (void *)((char *)v103 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            uint64_t v93 = *(void *)((char *)v103 + OBJC_IVAR____TtC10seserviced4Peer_buffer);
            unint64_t v94 = *(void *)((char *)v103 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8);
            *uint64_t v92 = v91;
            v92[1] = v95;
            sub_100075868(v93, v94);
          }
LABEL_89:
          uint64_t v76 = v12;
          unint64_t v77 = a2;
          return sub_10006D144(v76, v77);
        }
        sub_10006D0EC(v109, *((unint64_t *)&v109 + 1));
        unsigned __int8 v49 = sub_10007D4A4(v12, a2, 0, 0, 0);
        sub_10006D0EC(v12, a2);
        uint64_t v11 = sub_10007D4A4(v12, a2, 1, 0, 0);
        sub_10006D0EC(v12, a2);
        uint64_t v50 = (unsigned __int16)sub_10007D08C(v12, a2, 2, 0, 0);
        uint64_t v51 = v50 + 4;
        if (v50 <= 0x3FC)
        {
          if (a1)
          {
            uint64_t v52 = v104;
            if (a1 == 1)
            {
              LODWORD(v53) = HIDWORD(v12) - v12;
              if (__OFSUB__(HIDWORD(v12), v12)) {
                goto LABEL_96;
              }
              uint64_t v53 = (int)v53;
            }
            else
            {
              uint64_t v55 = *(void *)(v12 + 16);
              uint64_t v54 = *(void *)(v12 + 24);
              BOOL v42 = __OFSUB__(v54, v55);
              uint64_t v53 = v54 - v55;
              if (v42) {
                goto LABEL_97;
              }
            }
          }
          else
          {
            uint64_t v53 = BYTE6(a2);
            uint64_t v52 = v104;
          }
          if (v53 < v51)
          {
            os_log_type_t v68 = Logger.logObject.getter();
            os_log_type_t v78 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v68, v78))
            {
              uint64_t v79 = (_DWORD *)swift_slowAlloc();
              _DWORD *v79 = 134218240;
              a2 = *((void *)&v109 + 1);
              uint64_t v12 = v109;
              uint64_t v80 = v79;
              uint64_t v81 = 0;
              switch(*((void *)&v109 + 1) >> 62)
              {
                case 1:
                  LODWORD(v81) = DWORD1(v109) - v109;
                  if (__OFSUB__(DWORD1(v109), v109)) {
                    goto LABEL_110;
                  }
                  uint64_t v81 = (int)v81;
LABEL_85:
                  *(void *)&long long v105 = v81;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *((_WORD *)v80 + 6) = 2048;
                  *(void *)&long long v105 = v50 + 4;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  os_log_type_t v84 = v78;
                  uint32_t v85 = "Got partial data of size %ld expected %ld";
                  uint64_t v86 = v68;
                  uint32_t v87 = (uint8_t *)v80;
                  uint32_t v88 = 22;
                  break;
                case 2:
                  uint64_t v90 = *(void *)(v109 + 16);
                  uint64_t v89 = *(void *)(v109 + 24);
                  BOOL v42 = __OFSUB__(v89, v90);
                  uint64_t v81 = v89 - v90;
                  if (!v42) {
                    goto LABEL_85;
                  }
                  goto LABEL_111;
                case 3:
                  goto LABEL_85;
                default:
                  uint64_t v81 = BYTE14(v109);
                  goto LABEL_85;
              }
              goto LABEL_86;
            }
            goto LABEL_87;
          }
          if ((v102 & 1) != 0 && v49 <= 5u && ((1 << v49) & 0x27) != 0)
          {
            uint64_t v56 = *(void *)((char *)v15 + v52);
            BOOL v42 = __OFADD__(v56, 1);
            uint64_t v57 = v56 + 1;
            if (v42) {
              goto LABEL_95;
            }
            *(void *)((char *)v15 + v52) = v57;
          }
          if (a1)
          {
            if (a1 == 1)
            {
              uint64_t v15 = (void *)(int)v12;
              a1 = (int)v12 + 4;
            }
            else
            {
              uint64_t v15 = *(void **)(v12 + 16);
              a1 = (uint64_t)v15 + 4;
              if (__OFADD__(v15, 4)) {
                goto LABEL_98;
              }
              swift_retain();
            }
            swift_retain();
          }
          else
          {
            uint64_t v15 = 0;
            a1 = 4;
          }
          if (!__OFADD__((char *)v15 + 4, v50))
          {
            if ((uint64_t)v15 + v50 + 4 < a1) {
              goto LABEL_93;
            }
            uint64_t v58 = Data.subdata(in:)();
            uint64_t v60 = v59;
            sub_10006D144(v12, a2);
            uint64_t v61 = v100;
            uint64_t v62 = &v10[*(int *)(v100 + 28)];
            uint64_t v63 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16))(v62, v99, v63);
            uint64_t v15 = v103;
            uint64_t v64 = *(void *)((char *)v103 + v104);
            *uint64_t v10 = v49;
            v10[1] = v11;
            *((void *)v10 + 1) = v58;
            *((void *)v10 + 2) = v60;
            *(void *)&v10[*(int *)(v61 + 32)] = v64;
            *(void *)&v10[*(int *)(v61 + 36)] = v15;
            swift_retain();
            sub_10020F340((unsigned __int8 *)v10, v101);
            sub_1000AA1C8((uint64_t)v10);
            unint64_t v65 = *((void *)&v109 + 1);
            uint64_t v11 = v109;
            sub_10006D0EC(v109, *((unint64_t *)&v109 + 1));
            sub_100081790(v51, v11, v65, (uint64_t *)&v105);
            unint64_t v67 = *((void *)&v109 + 1);
            uint64_t v66 = v109;
            long long v109 = v105;
            uint64_t result = sub_10006D144(v66, v67);
            continue;
          }
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          swift_once();
          goto LABEL_2;
        }
        swift_retain();
        os_log_type_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v73, v74))
        {
          swift_release();

          goto LABEL_89;
        }
        uint64_t v75 = swift_slowAlloc();
        *(_DWORD *)uint64_t v75 = 134218240;
        *(void *)&long long v105 = v50 + 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v75 + 12) = 2048;
        *(void *)&long long v105 = 1024;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Discarding message exceeding max size %ld > %ld", (uint8_t *)v75, 0x16u);
        swift_slowDealloc();

        unint64_t v77 = *((void *)&v109 + 1);
        uint64_t v76 = v109;
        return sub_10006D144(v76, v77);
      case 3:
        return result;
      default:
        if ((*((void *)&v109 + 1) & 0xFF000000000000) == 0) {
          return result;
        }
        uint64_t v46 = BYTE14(v109);
        goto LABEL_45;
    }
  }
}

void sub_1001F69F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v104 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v103 = (char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 - 8);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(v12 - 1);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100468A38;
  *uint64_t v16 = qword_100468A38;
  uint64_t v18 = *(void (**)(void))(v13 + 104);
  unsigned int v102 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v101 = (void (*)(uint64_t *, void, void *))v18;
  v18(v16);
  id v19 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  uint64_t v100 = *(void (**)(uint64_t *, void *))(v13 + 8);
  v100(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    uint64_t v28 = swift_once();
LABEL_9:
    uint64_t v30 = __chkstk_darwin(v28, v29);
    *(&v99 - 4) = (uint64_t)sub_1000A24C8;
    *(&v99 - 3) = 0;
    *(&v99 - 2) = v31;
    __chkstk_darwin(v30, v32);
    *(&v99 - 2) = (uint64_t)sub_1000A2ABC;
    *(&v99 - 1) = v33;
    unint64_t v35 = v34 + 4;
    os_unfair_lock_lock(v34 + 4);
    sub_100079ACC(&v105);
    os_unfair_lock_unlock(v35);
    if ((v105 & 0xC000000000000001) != 0) {
      uint64_t v36 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v36 = *(void *)(v105 + 16);
    }
    swift_bridgeObjectRelease();
    if (!v36)
    {
      if (qword_100453660 != -1) {
        goto LABEL_58;
      }
      goto LABEL_15;
    }
    uint64_t v37 = v99;
    while (1)
    {
      id v49 = [v11 blePairingRequest];

      if (v49)
      {
        id v50 = [v11 bleUUID];
        if (v50)
        {
        }
        else
        {
          if (qword_100453680 != -1) {
            swift_once();
          }
          id v51 = [v11 publicKeyIdentifier];
          uint64_t v52 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v54 = v53;

          sub_10009DABC(v52, v54);
          sub_10006D144(v52, v54);
        }
      }
      uint64_t v55 = swift_allocObject();
      *(void *)(v55 + 16) = v11;
      uint64_t v56 = qword_100453910;
      uint64_t v11 = v11;
      if (v56 != -1) {
        swift_once();
      }
      uint64_t v57 = off_10045AEC8;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = sub_1001F76D8;
      *(void *)(v58 + 24) = v55;
      uint64_t v60 = __chkstk_darwin(v58, v59);
      *(&v99 - 4) = (uint64_t)sub_1000A97C0;
      *(&v99 - 3) = v60;
      *(&v99 - 2) = (uint64_t)v57;
      __chkstk_darwin(v60, v61);
      *(&v99 - 2) = (uint64_t)sub_100079AAC;
      *(&v99 - 1) = v62;
      uint64_t v64 = v63 + 4;
      swift_retain();
      os_unfair_lock_lock(v64);
      sub_100079ACC(&v105);
      os_unfair_lock_unlock(v64);
      int64_t v65 = v105;
      swift_release();
      swift_release();
      uint64_t v12 = (void *)sub_1000BB13C(v65);
      swift_bridgeObjectRelease();
      if (!v12) {
        goto LABEL_51;
      }
      if (qword_1004536B0 != -1) {
        swift_once();
      }
      sub_1000CAD08();
      if (qword_1004536B8 != -1) {
        swift_once();
      }
      unint64_t v67 = v103;
      uint64_t v66 = v104;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v103, (uint64_t)v12 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v37);
      type metadata accessor for DSKBLEPairing.BLEUnpairingRequest(0);
      uint64_t v68 = swift_allocObject();
      (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v68 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_peerIdentifier, v67, v37);
      os_log_type_t v69 = (void *)(v68 + OBJC_IVAR____TtCC10seserviced13DSKBLEPairing19BLEUnpairingRequest_tag);
      void *v69 = 0xD000000000000011;
      v69[1] = 0x80000001003B0C70;
      sub_1000CC9C8(v68);
      swift_release();
      if (qword_1004537A8 != -1) {
        swift_once();
      }
      uint64_t v70 = qword_100468890;
      swift_retain();
      uint64_t v71 = sub_100203774(v70, (uint64_t)v12);
      swift_release();
      uint64_t v72 = (void *)sub_1000BB110(v71);
      uint64_t v73 = swift_bridgeObjectRelease();
      if (v72)
      {
        sub_1001FF6A0();
      }
      unint64_t v105 = (unint64_t)v12;
      uint64_t v75 = __chkstk_darwin(v73, v74);
      *(&v99 - 2) = v76;
      *(&v99 - 1) = (uint64_t)&v105;
      __chkstk_darwin(v75, v77);
      *(&v99 - 2) = (uint64_t)sub_1001F76E0;
      *(&v99 - 1) = v78;
      uint64_t v80 = v79 + 4;
      os_unfair_lock_lock(v79 + 4);
      sub_10008C114(v81);
      os_unfair_lock_unlock(v80);
      uint64_t v16 = &v99;
      uint64_t v84 = __chkstk_darwin(v82, v83);
      *(&v99 - 4) = (uint64_t)sub_1001F252C;
      *(&v99 - 3) = 0;
      *(&v99 - 2) = v85;
      __chkstk_darwin(v84, v86);
      *(&v99 - 2) = (uint64_t)sub_1000B61A0;
      *(&v99 - 1) = v87;
      uint64_t v89 = v88 + 4;
      os_unfair_lock_lock(v88 + 4);
      sub_1000AA804(&v105);
      os_unfair_lock_unlock(v89);
      int64_t v90 = v105;
      if (qword_1004537D8 != -1) {
        swift_once();
      }
      sub_100209D3C(v90);
      swift_bridgeObjectRelease();
      id v91 = [self sessionManager];
      id v92 = [v91 getActiveRKESessions];

      sub_10007582C(0, &qword_1004582B8);
      unint64_t v93 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v93 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
        if (!v94) {
          goto LABEL_56;
        }
      }
      else
      {
        uint64_t v94 = *(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (!v94) {
          goto LABEL_56;
        }
      }
      if (v94 >= 1)
      {
        uint64_t v95 = 0;
        do
        {
          if ((v93 & 0xC000000000000001) != 0) {
            id v96 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v96 = *(id *)(v93 + 8 * v95 + 32);
          }
          unint64_t v97 = v96;
          ++v95;
          id v98 = [v96 updateAllowlistedVehicles];
        }
        while (v94 != v95);
LABEL_56:

        swift_bridgeObjectRelease_n();
        swift_release();
        return;
      }
      __break(1u);
LABEL_58:
      swift_once();
LABEL_15:
      uint64_t v38 = qword_100468A38;
      *uint64_t v16 = qword_100468A38;
      v101(v16, v102, v12);
      id v39 = (id)v38;
      LOBYTE(v38) = _dispatchPreconditionTest(_:)();
      v100(v16, v12);
      if ((v38 & 1) == 0) {
        break;
      }
      if (qword_100453940 != -1) {
        goto LABEL_60;
      }
LABEL_17:
      sub_1002D6F5C(0);
      uint64_t v42 = __chkstk_darwin(v40, v41);
      *(&v99 - 4) = (uint64_t)sub_1000A2570;
      *(&v99 - 3) = 0;
      *(&v99 - 2) = v43;
      __chkstk_darwin(v42, v44);
      *(&v99 - 2) = (uint64_t)sub_1000AA878;
      *(&v99 - 1) = v45;
      uint64_t v47 = v46 + 4;
      os_unfair_lock_lock(v46 + 4);
      sub_1000AA804(&v105);
      os_unfair_lock_unlock(v47);
      if ((v105 & 0xC000000000000001) != 0) {
        uint64_t v48 = __CocoaSet.count.getter();
      }
      else {
        uint64_t v48 = *(void *)(v105 + 16);
      }
      uint64_t v37 = v99;
      swift_bridgeObjectRelease();
      if (!v48)
      {
        if (qword_1004537A8 != -1) {
          swift_once();
        }
        sub_1001F9B00(0);
      }
    }
    __break(1u);
LABEL_60:
    swift_once();
    goto LABEL_17;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, a2);
  sub_10007582C(0, (unint64_t *)&qword_100458810);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  uint64_t v99 = v4;
  uint64_t v11 = (char *)v105;
  id v20 = [(id)v105 appletIdentifier];
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  uint64_t v24 = sub_10011FE64(0xD00000000000001ALL, 0x80000001003B2B50);
  unint64_t v26 = v25;
  if (v25 >> 60 != 15)
  {
    sub_10006D0EC(v21, v23);
    char v27 = sub_100088AE4(v21, v23, v24, v26);
    sub_100075868(v24, v26);
    sub_10006D144(v21, v23);
    uint64_t v28 = sub_10006D144(v21, v23);
    if ((v27 & 1) == 0) {
      goto LABEL_51;
    }
    if (qword_1004536D8 == -1) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
  sub_100075868(v21, v23);
  sub_100075868(v24, v26);
LABEL_51:
}

uint64_t sub_1001F76A0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F76D8(uint64_t a1)
{
  return sub_1001F2420(a1, *(void **)(v1 + 16));
}

uint64_t sub_1001F76E0()
{
  return sub_1001E63DC(*(void *)(v0 + 16));
}

uint64_t sub_1001F76FC()
{
  return sub_1000A2424(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1001F7718()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (void *)((char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468A38;
  *uint64_t v4 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (qword_1004537A0 != -1) {
LABEL_7:
  }
    swift_once();
  uint64_t v7 = (void *)qword_1004581A8;
  [(id)qword_1004581A8 setPreregistered:1];
  aBlock[4] = sub_1001F12A8;
  aBlock[5] = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E7F30;
  aBlock[3] = &unk_1004156A8;
  uint64_t v8 = _Block_copy(aBlock);
  [v7 scheduleWithBlock:v8];
  _Block_release(v8);
}

uint64_t sub_1001F791C()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468A38;
  *uint64_t v4 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
  if (v5)
  {
    if (qword_1004537B0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v7 = byte_100468898;
  if ((byte_100468898 & 1) == 0)
  {
    if (qword_100453920 != -1) {
      swift_once();
    }
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Alisha can't start because UWB is not supported on this device", v10, 2u);
      swift_slowDealloc();
    }
  }
  return v7;
}

uint64_t sub_1001F7B44()
{
  return sub_1001E8C94(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1001F7B68()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F7BA0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1001F7BB4()
{
  return sub_1001F1634(*(uint64_t (**)(uint64_t))(v0 + 16));
}

uint64_t sub_1001F7BBC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001F7C04()
{
  unint64_t result = qword_1004556F0;
  if (!qword_1004556F0)
  {
    sub_10007582C(255, (unint64_t *)&qword_100458810);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004556F0);
  }
  return result;
}

uint64_t type metadata accessor for Alisha.DKMessage(uint64_t a1)
{
  return sub_100087C90(a1, qword_100458320);
}

uint64_t sub_1001F7C8C(void *a1)
{
  return sub_1001EFDEC(a1, v1);
}

uint64_t sub_1001F7C94()
{
  return sub_1001E63C0(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_1001F7CB0(void *a1)
{
  return sub_100096D7C(a1, v1) & 1;
}

uint64_t sub_1001F7CD0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001F7D10(void *a1, char a2)
{
  sub_1001EDCDC(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

id sub_1001F7D1C(id result, char a2)
{
  if ((a2 & 1) == 0) {
    return result;
  }
  return result;
}

uint64_t sub_1001F7D28()
{
  return sub_1002698FC();
}

uint64_t sub_1001F7D30()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F7D44(uint64_t a1)
{
  return sub_1001F0BFC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1001F7D4C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F7D88()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F7DC0()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_1001F7DD0(uint64_t a1, uint64_t a2)
{
  return sub_1001F20F4(v2, a2);
}

uint64_t *sub_1001F7DD8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_10006D0EC(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v13) = *(uint64_t *)((char *)a2 + v13);
  }
  swift_retain();
  return v4;
}

uint64_t sub_1001F7EDC(uint64_t a1, uint64_t a2)
{
  sub_10006D144(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

uint64_t sub_1001F7F6C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_10006D0EC(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_retain();
  return a1;
}

uint64_t sub_1001F8024(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_10006D0EC(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_10006D144(v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_1001F80FC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  return a1;
}

uint64_t sub_1001F81A4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10006D144(v6, v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  swift_release();
  return a1;
}

uint64_t sub_1001F8260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F8274);
}

uint64_t sub_1001F8274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1001F8338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F834C);
}

uint64_t sub_1001F834C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 28);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1001F840C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001F8530()
{
  return sub_1001F76E0();
}

uint64_t sub_1001F8548()
{
  return sub_1001F7C94();
}

uint64_t sub_1001F8560(uint64_t a1, Swift::UInt a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    sub_10010197C((long long *)a1, (uint64_t)&v18);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    uint64_t v6 = sub_10019E154((uint64_t)&v18, *((uint64_t *)&v19 + 1));
    __chkstk_darwin(v6, v6);
    uint64_t v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v9 + 16))(v8);
    sub_100203594(*v8, a2, isUniquelyReferenced_nonNull_native, &v17);
    sub_10007594C((uint64_t)&v18);
    *uint64_t v2 = v17;
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10008E734(a1, &qword_100458800);
    unint64_t v11 = sub_1002C0AFC(a2);
    if (v12)
    {
      unint64_t v13 = v11;
      char v14 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v15 = *v3;
      uint64_t v17 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v14 & 1) == 0)
      {
        sub_1002CC120();
        uint64_t v15 = v17;
      }
      sub_10010197C((long long *)(*(void *)(v15 + 56) + 40 * v13), (uint64_t)&v18);
      sub_100180870(v13, v15);
      *uint64_t v3 = v15;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
    }
    return sub_10008E734((uint64_t)&v18, &qword_100458800);
  }
}

uint64_t sub_1001F8738(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10010197C((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_1002C9804(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return sub_10006D144(a2, a3);
  }
  else
  {
    sub_10008E734(a1, (uint64_t *)&unk_100458820);
    sub_10017FD60(a2, a3, (uint64_t)v9);
    sub_10006D144(a2, a3);
    return sub_10008E734((uint64_t)v9, (uint64_t *)&unk_100458820);
  }
}

void sub_1001F8814(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_1001F7C04();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v26;
    uint64_t v25 = v27;
    uint64_t v2 = v28;
    uint64_t v3 = v29;
    unint64_t v4 = v30;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v6 = ~v5;
    uint64_t v7 = -v5;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v4 = v8 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = v6;
    uint64_t v3 = 0;
  }
  int64_t v24 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v25 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v24) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v25 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v24) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v25 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v24) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v25 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v24) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v25 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v24 != v15)
              {
                unint64_t v14 = *(void *)(v25 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      id v16 = [v12 appletIdentifier];
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      id v20 = [v12 publicKeyIdentifier];
      uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v23 = v22;

      sub_1002B9140(0xD00000000000003BLL, 0x80000001003B7A60, v17, v19, v21, v23, 0);
      sub_10006D144(v21, v23);
      sub_10006D144(v17, v19);

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10007582C(0, (unint64_t *)&qword_100458810);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v31;
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v31) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1001F8B84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_1001F7C04();
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = v32;
    uint64_t v29 = v33;
    uint64_t v3 = v34;
    uint64_t v4 = v35;
    unint64_t v5 = v36;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v29 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v28 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v30 = v2;
  if (v2 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v12 = v4;
      goto LABEL_29;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v14 >= v28) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    uint64_t v12 = v4 + 1;
    if (!v15)
    {
      uint64_t v12 = v4 + 2;
      if (v4 + 2 >= v28) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v12);
      if (!v15)
      {
        uint64_t v12 = v4 + 3;
        if (v4 + 3 >= v28) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v12);
        if (!v15)
        {
          uint64_t v12 = v4 + 4;
          if (v4 + 4 >= v28) {
            goto LABEL_32;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v12);
          if (!v15)
          {
            uint64_t v12 = v4 + 5;
            if (v4 + 5 >= v28) {
              goto LABEL_32;
            }
            unint64_t v15 = *(void *)(v29 + 8 * v12);
            if (!v15)
            {
              uint64_t v16 = v4 + 6;
              while (v28 != v16)
              {
                unint64_t v15 = *(void *)(v29 + 8 * v16++);
                if (v15)
                {
                  uint64_t v12 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v10 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_29:
    id v13 = *(id *)(*(void *)(v2 + 48) + 8 * v11);
    if (!v13) {
      goto LABEL_32;
    }
    while (1)
    {
      id v17 = [v13 appletIdentifier];
      uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v20 = v19;

      id v21 = [v13 publicKeyIdentifier];
      uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v24 = v23;

      sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378290;
      uint64_t v4 = v12;
      *(void *)(inited + 32) = 0xD000000000000018;
      *(void *)(inited + 40) = 0x80000001003B7960;
      *(void *)(inited + 72) = &type metadata for UInt;
      *(void *)(inited + 48) = a2;
      unint64_t v26 = sub_1001DB224(inited);
      sub_1002B9140(0xD00000000000003CLL, 0x80000001003B7AA0, v18, v20, v22, v24, v26);
      swift_bridgeObjectRelease();
      unint64_t v27 = v24;
      uint64_t v2 = v30;
      sub_10006D144(v22, v27);
      sub_10006D144(v18, v20);

      unint64_t v5 = v10;
      if ((v30 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10007582C(0, (unint64_t *)&qword_100458810);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v13 = v37;
        swift_unknownObjectRelease();
        uint64_t v12 = v4;
        uint64_t v10 = v5;
        if (v37) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1001F8F68(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UWBSession();
    sub_100204FC0();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v17;
    uint64_t v16 = v18;
    uint64_t v2 = v19;
    uint64_t v3 = v20;
    unint64_t v4 = v21;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_1001FF6A0();

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for UWBSession();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v22;
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v22) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_1001F91E8(Swift::UInt a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (Swift::UInt *)((char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *unint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) != 1)
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Not running", v21, 2u);
      swift_slowDealloc();
    }
    goto LABEL_18;
  }
  swift_beginAccess();
  char v13 = sub_1000E81A0(v28, a1);
  swift_endAccess();
  if ((v13 & 1) == 0) {
    return;
  }
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    if (!a1)
    {
      unint64_t v17 = 0xE600000000000000;
      uint64_t v18 = 0x616873696C41;
LABEL_13:
      v28[0] = sub_100290514(v18, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "UWB power assertion added for %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_14;
    }
    if (a1 == 1)
    {
      unint64_t v17 = 0xE400000000000000;
      uint64_t v18 = 1852799308;
      goto LABEL_13;
    }
LABEL_21:
    v28[0] = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
LABEL_14:

  sub_100205030(a2, (uint64_t)v29);
  swift_beginAccess();
  sub_1001F8560((uint64_t)v29, a1);
  swift_endAccess();
  uint64_t v22 = OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion;
  if (*(void *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion)) {
    return;
  }
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Powering on UWB", v25, 2u);
    swift_slowDealloc();
  }

  id v26 = objc_allocWithZone((Class)type metadata accessor for UWBPrewarmSession());
  swift_retain_n();
  unint64_t v27 = sub_100201E34((uint64_t)sub_100206FCC, v3, (uint64_t)sub_100206FB0, v3, (uint64_t)sub_100206FB8, v3, (uint64_t)sub_100206FB4, v3);
  uint64_t v19 = *(NSObject **)(v3 + v22);
  *(void *)(v3 + v22) = v27;
LABEL_18:
}

void *sub_1001F969C(uint64_t a1)
{
  return sub_1001F96CC(a1, sub_100202B58);
}

void *sub_1001F96B4(uint64_t a1)
{
  return sub_1001F96CC(a1, sub_100202D84);
}

void *sub_1001F96CC(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      swift_beginAccess();
      uint64_t v12 = swift_bridgeObjectRetain();
      return (void *)a2(v12);
    }
    else
    {
      char v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not running", v15, 2u);
        swift_slowDealloc();
      }

      return &_swiftEmptySetSingleton;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1001F98E0(uint64_t (*a1)(id))
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      swift_beginAccess();
      uint64_t v11 = swift_bridgeObjectRetain();
      return (void *)sub_100204D60(v11, a1);
    }
    else
    {
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Not running", v14, 2u);
        swift_slowDealloc();
      }

      return &_swiftEmptySetSingleton;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001F9B00(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  id v9 = (void *)qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  uint64_t v10 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v12 = v9;
  unint64_t v13 = _dispatchPreconditionTest(_:)();
  os_log_type_t v14 = *(void (**)(void *, uint64_t))(v5 + 8);
  v14(v8, v4);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    sub_1002CC2E8();
    uint64_t v21 = v45;
    goto LABEL_9;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) != 1)
  {
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Not running", v35, 2u);
LABEL_24:
      swift_slowDealloc();
    }
LABEL_25:

    return;
  }
  uint64_t v43 = v11;
  Swift::UInt v44 = a1;
  uint64_t v15 = OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion;
  if (!*(void *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion)
    || (uint64_t v11 = (void (*)(void *, uint64_t, uint64_t))(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases),
        swift_beginAccess(),
        sub_1000F5C70(v44),
        char v17 = v16,
        swift_endAccess(),
        (v17 & 1) != 0))
  {
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(void *)&v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      Swift::UInt v31 = v44;
      if (v44)
      {
        if (v44 != 1)
        {
LABEL_32:
          uint64_t v45 = v31;
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
          return;
        }
        unint64_t v38 = 0xE400000000000000;
        uint64_t v39 = 1852799308;
      }
      else
      {
        unint64_t v38 = 0xE600000000000000;
        uint64_t v39 = 0x616873696C41;
      }
      uint64_t v45 = sub_100290514(v39, v38, (uint64_t *)v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v36, "UWB is not powered on for %s", v37, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  uint64_t v42 = v14;
  os_log_type_t v14 = (void (*)(void *, uint64_t))(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions);
  swift_beginAccess();
  unint64_t v18 = sub_1002C0AFC(v44);
  if ((v19 & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v13 = v18;
  uint64_t v41 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *(void *)v14;
  uint64_t v45 = *(void *)v14;
  *(void *)os_log_type_t v14 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_30;
  }
LABEL_9:
  sub_100180A40(v13, v21);
  *(void *)os_log_type_t v14 = v21;
  swift_bridgeObjectRelease();
  uint64_t v15 = v41;
LABEL_10:
  swift_endAccess();
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  swift_beginAccess();
  sub_1001F8560((uint64_t)v46, v44);
  swift_endAccess();
  if (!*(void *)(*(void *)v11 + 16))
  {
    uint64_t v22 = (void *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
    swift_beginAccess();
    *uint64_t v22 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Powering off UWB", v25, 2u);
      swift_slowDealloc();
    }

    id v26 = *(void **)(v2 + v15);
    if (!v26)
    {
      uint64_t v32 = 0;
      goto LABEL_28;
    }
    unint64_t v27 = (void *)qword_100468A38;
    *uint64_t v8 = qword_100468A38;
    v43(v8, v10, v4);
    int64_t v28 = v26;
    id v29 = v27;
    char v30 = _dispatchPreconditionTest(_:)();
    v42(v8, v4);
    if (v30)
    {
      [*(id *)&v28[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session] invalidate];

      uint64_t v32 = *(void **)(v2 + v15);
LABEL_28:
      *(void *)(v2 + v15) = 0;

      return;
    }
    __break(1u);
    goto LABEL_32;
  }
}

void sub_1001FA098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (void *)((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v4 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
  {
    id v14 = *(id *)(v4 + OBJC_IVAR____TtC10seserviced10UWBSession_session);
    v15.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a3;
    *(void *)(v16 + 24) = a4;
    aBlock[4] = sub_100205A78;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100200740;
    aBlock[3] = &unk_100415BD8;
    char v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    [v14 processDCKMessage:v15.super.isa responseCallback:v17];
    _Block_release(v17);

    goto LABEL_9;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  v15.super.Class isa = (Class)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled((os_log_t)v15.super.isa, v18))
  {
    char v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v15.super.isa, v18, "Session is not running", v19, 2u);
    swift_slowDealloc();
  }
LABEL_9:
}

uint64_t sub_1001FA398(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v60 = a2;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (void *)((char *)v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100468A38;
  *uint64_t v21 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v22)
  {
    if (*(unsigned char *)(v13 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      uint64_t v59 = a7;
      swift_beginAccess();
      swift_retain();
      uint64_t v25 = swift_bridgeObjectRetain();
      char v26 = sub_100203D5C(v25);
      swift_bridgeObjectRelease();
      swift_release();
      swift_retain_n();
      unint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      BOOL v29 = os_log_type_enabled(v27, v28);
      if ((v26 & 1) == 0)
      {
        uint64_t v57 = a12;
        uint64_t v58 = a13;
        uint64_t v55 = a10;
        uint64_t v56 = a11;
        uint64_t v54 = a9;
        if (v29)
        {
          uint64_t v37 = swift_slowAlloc();
          uint64_t v53 = a8;
          unint64_t v38 = (uint8_t *)v37;
          uint64_t v39 = swift_slowAlloc();
          v52[2] = v39;
          *(_DWORD *)unint64_t v38 = 136315138;
          v65[0] = v39;
          v52[1] = v38 + 4;
          swift_retain();
          uint64_t v40 = UUID.uuidString.getter();
          unint64_t v42 = v41;
          swift_release();
          id v66 = (id)sub_100290514(v40, v42, v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting new UWB Alisha session for %s", v38, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          a8 = v53;
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        id v44 = objc_allocWithZone((Class)type metadata accessor for UWBAlishaSession());
        swift_retain();
        uint64_t v45 = v61;
        swift_retain();
        uint64_t v46 = v63;
        swift_retain();
        uint64_t v47 = v59;
        swift_retain();
        uint64_t v48 = v54;
        swift_retain();
        uint64_t v49 = v56;
        swift_retain();
        uint64_t v50 = swift_retain();
        id v51 = (void *)sub_1001FFBA0((uint64_t)a1, v60, v45, v62, v46, v64, v47, a8, v48, v55, v49, v57, v50);
        swift_beginAccess();
        a1 = v51;
        sub_1000EA168(&v66, a1);
        swift_endAccess();

        return (uint64_t)a1;
      }
      if (v29)
      {
        char v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        *(_DWORD *)char v30 = 136315138;
        v65[0] = v31;
        swift_retain();
        uint64_t v32 = UUID.uuidString.getter();
        unint64_t v34 = v33;
        swift_release();
        id v66 = (id)sub_100290514(v32, v34, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "UWB Alisha session for %s already exists", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_100204F6C();
    }
    else
    {
      a1 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(a1, v35))
      {
        os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, a1, v35, "Not running", v36, 2u);
        swift_slowDealloc();
      }

      sub_10007567C();
    }
    swift_allocError();
    *uint64_t v43 = 1;
    swift_willThrow();
    return (uint64_t)a1;
  }
  __break(1u);
  return result;
}

void sub_1001FA9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v3 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (v4[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 4)
  {
    [*(id *)&v4[OBJC_IVAR____TtC10seserviced10UWBSession_session] suspendAcwgRanging:a1 withSuspendTriggerReason:a2];
    return;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  id v14 = v4;
  NSData v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v22 = v18;
    LOBYTE(v21) = v4[v3];
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v21 = sub_100290514(v19, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "UWB session is in %s, not suspending ranging", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1001FACB4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 1)
  {
    uint64_t v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                                           + OBJC_IVAR____TtC10seserviced10UWBSession_session), "deleteURSKs"));
    goto LABEL_9;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Session is invalidated, not deleting URSK", v10, 2u);
    swift_slowDealloc();
  }
LABEL_9:
}

id sub_1001FAEDC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  os_log_type_t v9 = (uint64_t *)((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *os_log_type_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4) {
    return [*(id *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_session) processAcwgM1Msg:a1 withSessionTriggerReason:a2];
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    NSData v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSData v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Session is not running", v15, 2u);
    swift_slowDealloc();
  }

  sub_10007567C();
  swift_allocError();
  *os_log_type_t v16 = 0;
  return (id)swift_willThrow();
}

id sub_1001FB144(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4) {
    return [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) processAcwgM3Msg:a1];
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Session is not running", v13, 2u);
    swift_slowDealloc();
  }

  sub_10007567C();
  swift_allocError();
  *os_log_type_t v14 = 0;
  return (id)swift_willThrow();
}

id sub_1001FB3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (uint64_t *)((char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *id v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v3 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (v4[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 4) {
    return [*(id *)&v4[OBJC_IVAR____TtC10seserviced10UWBSession_session] processAcwgRangingSessionResumeRequestMsg:a1 withResumeTriggerReason:a2];
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_12;
  }
LABEL_7:
  uint64_t v15 = v4;
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v25 = v19;
    LOBYTE(v24) = v4[v3];
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v24 = sub_100290514(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "UWB session is in %s, not requesting resume ranging", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10007567C();
  swift_allocError();
  *uint64_t v22 = 0;
  return (id)swift_willThrow();
}

uint64_t sub_1001FB6D8(NSObject *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v97 = a4;
  uint64_t v98 = a6;
  uint64_t v95 = a3;
  uint64_t v96 = a5;
  int v94 = a2;
  uint64_t v33 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v37 = (uint64_t *)((char *)&v70 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v38 = qword_100468A38;
  *uint64_t v37 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v37, enum case for DispatchPredicate.onQueue(_:), v33);
  id v39 = (id)v38;
  LOBYTE(v38) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v34 + 8))(v37, v33);
  if (v38)
  {
    if (*(unsigned char *)(v28 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      uint64_t v92 = a7;
      uint64_t v93 = a8;
      uint64_t v41 = v28 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions;
      swift_beginAccess();
      swift_retain();
      uint64_t v42 = swift_bridgeObjectRetain();
      char v43 = sub_100203D5C(v42);
      swift_bridgeObjectRelease();
      swift_release();
      swift_retain_n();
      id v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      BOOL v46 = os_log_type_enabled(v44, v45);
      if ((v43 & 1) == 0)
      {
        uint64_t v73 = v29;
        uint64_t v83 = v41;
        uint64_t v90 = a27;
        uint64_t v91 = a28;
        uint64_t v88 = a25;
        uint64_t v89 = a26;
        uint64_t v86 = a23;
        uint64_t v87 = a24;
        uint64_t v84 = a21;
        uint64_t v85 = a22;
        uint64_t v81 = a20;
        uint64_t v82 = a19;
        uint64_t v79 = a18;
        uint64_t v80 = a17;
        uint64_t v77 = a16;
        uint64_t v78 = a15;
        uint64_t v75 = a14;
        uint64_t v76 = a13;
        uint64_t v70 = a12;
        uint64_t v74 = a11;
        uint64_t v72 = a9;
        if (v46)
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = swift_slowAlloc();
          *(_DWORD *)uint64_t v54 = 136315138;
          v99[0] = v55;
          id v71 = v54 + 4;
          swift_retain();
          uint64_t v56 = UUID.uuidString.getter();
          unint64_t v58 = v57;
          swift_release();
          id v100 = (id)sub_100290514(v56, v58, v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Starting new UWB Lyon session for %s", v54, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        id v71 = objc_allocWithZone((Class)type metadata accessor for UWBLyonSession());
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v60 = v70;
        swift_retain();
        uint64_t v61 = v75;
        swift_retain();
        uint64_t v62 = v77;
        swift_retain();
        uint64_t v63 = v79;
        swift_retain();
        uint64_t v64 = v81;
        swift_retain();
        uint64_t v65 = v85;
        swift_retain();
        uint64_t v66 = v87;
        swift_retain();
        uint64_t v67 = v89;
        swift_retain();
        uint64_t v68 = swift_retain();
        os_log_type_t v69 = (void *)sub_100200C58((uint64_t)a1, v94, v95, v97, v96, v98, v92, v93, v72, a10, v74, v60, v76, v61, v78, v62, v80, v63, v82,
                        v64,
                        v84,
                        v65,
                        v86,
                        v66,
                        v88,
                        v67,
                        v90,
                        v68);
        swift_beginAccess();
        a1 = v69;
        sub_1000EA168(&v100, a1);
        swift_endAccess();

        return (uint64_t)a1;
      }
      if (v46)
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 136315138;
        v99[0] = v48;
        swift_retain();
        uint64_t v49 = UUID.uuidString.getter();
        unint64_t v51 = v50;
        swift_release();
        id v100 = (id)sub_100290514(v49, v51, v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "UWB Lyon session for %s already exists", v47, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_100204F6C();
    }
    else
    {
      a1 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(a1, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, a1, v52, "Not running", v53, 2u);
        swift_slowDealloc();
      }

      sub_10007567C();
    }
    swift_allocError();
    unsigned char *v59 = 1;
    swift_willThrow();
    return (uint64_t)a1;
  }
  __break(1u);
  return result;
}

id sub_1001FBE50(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v2 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  if (v3[OBJC_IVAR____TtC10seserviced10UWBSession_state] == 4) {
    return [*(id *)&v3[OBJC_IVAR____TtC10seserviced10UWBSession_session] prefetchAcwgUrsk:a1];
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_12;
  }
LABEL_7:
  id v13 = v3;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v16 = 136315138;
    uint64_t v23 = v17;
    LOBYTE(v22) = v3[v2];
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v22 = sub_100290514(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "UWB session is in %s, cannot prefetch URSK, disconnecting peer", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10007567C();
  swift_allocError();
  *uint64_t v20 = 0;
  return (id)swift_willThrow();
}

void sub_1001FC17C(unsigned __int8 a1, __int16 a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_state) != 1)
  {
    uint64_t v12 = [*(id *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_session) acwgEventNotifier];
    [v12 notifyLockStatusChanged:(unsigned __int16)(a1 | (unsigned __int16)(a2 << 8))];
    goto LABEL_9;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Session is invalidated, not notifying lock status change", v14, 2u);
    swift_slowDealloc();
  }
LABEL_9:
}

void sub_1001FC3C8(uint64_t a1, Swift::UInt a2)
{
  uint64_t v47 = a1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
LABEL_53:
  }
    swift_once();
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  uint64_t v10 = enum case for DispatchPredicate.onQueue(_:);
  id v11 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v12 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  os_log_type_t v14 = *(void (**)(void *, uint64_t))(v5 + 8);
  v5 += 8;
  os_log_type_t v13 = v14;
  v14(v8, v4);
  if (v9)
  {
    if (*((unsigned char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) != 1)
    {
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v34, v35))
      {
LABEL_44:

        return;
      }
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Not running", v36, 2u);
LABEL_43:
      swift_slowDealloc();
      goto LABEL_44;
    }
    BOOL v46 = v13;
    uint64_t v15 = *(void **)((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion);
    if (v15)
    {
      os_log_type_t v16 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases);
      swift_beginAccess();
      if (sub_1000B6E14(a2, *v16))
      {
        uint64_t v17 = v11;
        uint64_t v18 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions);
        swift_beginAccess();
        unint64_t v19 = v15;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v49 = *v18;
        *uint64_t v18 = 0x8000000000000000;
        uint64_t v2 = &v49;
        sub_1002C9518(v47, a2, isUniquelyReferenced_nonNull_native);
        *uint64_t v18 = v49;
        swift_bridgeObjectRelease();
        swift_endAccess();
        int64_t v21 = 0;
        a2 = 0;
        uint64_t v22 = *v18;
        uint64_t v23 = 1 << *(unsigned char *)(*v18 + 32);
        uint64_t v24 = -1;
        if (v23 < 64) {
          uint64_t v24 = ~(-1 << v23);
        }
        uint64_t v26 = *(void *)(v22 + 64);
        uint64_t v25 = v22 + 64;
        unint64_t v27 = v24 & v26;
        int64_t v28 = (unint64_t)(v23 + 63) >> 6;
        while (1)
        {
          if (v27)
          {
            unint64_t v29 = __clz(__rbit64(v27));
            v27 &= v27 - 1;
            unint64_t v30 = v29 | (v21 << 6);
          }
          else
          {
            int64_t v31 = v21 + 1;
            if (__OFADD__(v21, 1))
            {
              __break(1u);
              goto LABEL_53;
            }
            if (v31 >= v28) {
              goto LABEL_35;
            }
            unint64_t v32 = *(void *)(v25 + 8 * v31);
            ++v21;
            if (!v32)
            {
              int64_t v21 = v31 + 1;
              if (v31 + 1 >= v28) {
                goto LABEL_35;
              }
              unint64_t v32 = *(void *)(v25 + 8 * v21);
              if (!v32)
              {
                int64_t v21 = v31 + 2;
                if (v31 + 2 >= v28) {
                  goto LABEL_35;
                }
                unint64_t v32 = *(void *)(v25 + 8 * v21);
                if (!v32)
                {
                  int64_t v21 = v31 + 3;
                  if (v31 + 3 >= v28) {
                    goto LABEL_35;
                  }
                  unint64_t v32 = *(void *)(v25 + 8 * v21);
                  if (!v32)
                  {
                    int64_t v21 = v31 + 4;
                    if (v31 + 4 >= v28) {
                      goto LABEL_35;
                    }
                    unint64_t v32 = *(void *)(v25 + 8 * v21);
                    if (!v32)
                    {
                      int64_t v33 = v31 + 5;
                      if (v33 >= v28)
                      {
LABEL_35:
                        uint64_t v41 = qword_100468A38;
                        *uint64_t v8 = qword_100468A38;
                        v17(v8, v10, v4);
                        id v42 = (id)v41;
                        LOBYTE(v41) = _dispatchPreconditionTest(_:)();
                        v46(v8, v4);
                        if ((v41 & 1) == 0) {
                          goto LABEL_55;
                        }
                        if (a2)
                        {
                          if ((a2 & 2) != 0) {
                            uint64_t v43 = 6;
                          }
                          else {
                            uint64_t v43 = 2;
                          }
                        }
                        else
                        {
                          if ((a2 & 2) == 0)
                          {
                            uint64_t v43 = 0;
                            if ((a2 & 4) == 0) {
                              goto LABEL_51;
                            }
LABEL_50:
                            uint64_t v43 = v43 | 1;
LABEL_51:
                            id v44 = [*(id *)&v19[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session] systemEventNotifier];
                            [v44 notifyPassiveAccessIntent:v43];

                            return;
                          }
                          uint64_t v43 = 4;
                        }
                        if ((a2 & 4) != 0) {
                          goto LABEL_50;
                        }
                        goto LABEL_51;
                      }
                      unint64_t v32 = *(void *)(v25 + 8 * v33);
                      if (!v32)
                      {
                        while (1)
                        {
                          int64_t v21 = v33 + 1;
                          if (__OFADD__(v33, 1)) {
                            goto LABEL_56;
                          }
                          if (v21 >= v28) {
                            goto LABEL_35;
                          }
                          unint64_t v32 = *(void *)(v25 + 8 * v21);
                          ++v33;
                          if (v32) {
                            goto LABEL_29;
                          }
                        }
                      }
                      int64_t v21 = v33;
                    }
                  }
                }
              }
            }
LABEL_29:
            unint64_t v27 = (v32 - 1) & v32;
            unint64_t v30 = __clz(__rbit64(v32)) + (v21 << 6);
          }
          a2 |= *(void *)(*(void *)(*v18 + 56) + 8 * v30);
        }
      }
    }
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v34, v37)) {
      goto LABEL_44;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315138;
    if (!a2)
    {
      unint64_t v39 = 0xE600000000000000;
      uint64_t v40 = 0x616873696C41;
LABEL_42:
      uint64_t v49 = sub_100290514(v40, v39, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v37, "UWB is not powered on for %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_43;
    }
    if (a2 == 1)
    {
      unint64_t v39 = 0xE400000000000000;
      uint64_t v40 = 1852799308;
      goto LABEL_42;
    }
  }
  else
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  uint64_t v49 = a2;
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
}

BOOL sub_1001FC988(id *a1)
{
  return [*a1 endPointType] == (id)4;
}

uint64_t sub_1001FC9B4()
{
  type metadata accessor for DSKUWB();
  swift_allocObject();
  uint64_t result = sub_1001FCA84();
  qword_100468890 = result;
  return result;
}

uint64_t sub_1001FC9F4(uint64_t a1)
{
  return sub_1001FCA1C(a1, (SEL *)&selRef_supportsPreciseDistanceMeasurement, (unsigned __int8 *)&byte_100468898);
}

uint64_t sub_1001FCA08(uint64_t a1)
{
  return sub_1001FCA1C(a1, (SEL *)&selRef_supportsExtendedDistanceMeasurement, (unsigned __int8 *)&byte_100468899);
}

uint64_t sub_1001FCA1C(uint64_t a1, SEL *a2, unsigned __int8 *a3)
{
  unsigned __int8 v4 = [self deviceCapabilities][*a2];
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v4;
  return result;
}

uint64_t sub_1001FCA84()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions) = &_swiftEmptySetSingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases) = &_swiftEmptySetSingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates) = &_swiftEmptyDictionarySingleton;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded) = &_swiftEmptySetSingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion) = 0;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_100205014;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100415B88;
  uint64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

uint64_t sub_1001FCC1C()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeSessions);
  swift_beginAccess();
  uint64_t v2 = *v1;
  unint64_t v78 = *v1 & 0xC000000000000001;
  if (v78)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = __CocoaSet.count.getter();
    if (v3) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1002CFA20(0, v3 & ~(v3 >> 63), 0);
  if (v78)
  {
    uint64_t v4 = __CocoaSet.startIndex.getter();
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v4 = sub_1000FCB1C(v2);
    uint64_t v6 = v7 & 1;
  }
  *(void *)&long long v79 = v4;
  *((void *)&v79 + 1) = v5;
  unsigned __int8 v80 = v6;
  if ((v3 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        long long v13 = v79;
        uint64_t v14 = v80;
        sub_1000FB478(v79, SDWORD2(v79), v80, v2);
        os_log_type_t v16 = v15;
        sub_10006C51C(&qword_1004587F0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100378470;
        *(void *)(inited + 32) = 0xD000000000000011;
        *(void *)(inited + 40) = 0x80000001003B3590;
        swift_retain();
        uint64_t v18 = UUID.uuidString.getter();
        uint64_t v20 = v19;
        swift_release();
        *(void *)(inited + 48) = v18;
        *(void *)(inited + 56) = v20;
        *(void *)(inited + 64) = 1701869940;
        *(void *)(inited + 72) = 0xE400000000000000;
        type metadata accessor for UWBAlishaSession();
        uint64_t v21 = swift_dynamicCastClass();
        uint64_t v22 = 0x616873696C41;
        if (!v21) {
          uint64_t v22 = 1852799308;
        }
        unint64_t v23 = 0xE600000000000000;
        if (!v21) {
          unint64_t v23 = 0xE400000000000000;
        }
        *(void *)(inited + 80) = v22;
        *(void *)(inited + 88) = v23;
        *(void *)(inited + 96) = 0x6574617473;
        *(void *)(inited + 104) = 0xE500000000000000;
        LOBYTE(v81) = v16[OBJC_IVAR____TtC10seserviced10UWBSession_state];
        *(void *)(inited + 112) = String.init<A>(describing:)();
        *(void *)(inited + 120) = v24;
        unint64_t v25 = sub_1001DB39C(inited);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002CFA20(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v27 = _swiftEmptyArrayStorage[2];
        unint64_t v26 = _swiftEmptyArrayStorage[3];
        if (v27 >= v26 >> 1) {
          sub_1002CFA20(v26 > 1, v27 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v27 + 1;
        _swiftEmptyArrayStorage[v27 + 4] = v25;
        uint64_t v6 = v78;
        if (v78) {
          break;
        }
        uint64_t v8 = sub_1000FAE78(v13, *((void *)&v13 + 1), v14, v2);
        uint64_t v10 = v9;
        char v12 = v11;
        sub_10008B004(v13, *((uint64_t *)&v13 + 1), v14);
        *(void *)&long long v79 = v8;
        *((void *)&v79 + 1) = v10;
        unsigned __int8 v80 = v12 & 1;
        if (!--v3) {
          goto LABEL_24;
        }
      }
      if ((v14 & 1) == 0) {
        goto LABEL_65;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C(&qword_1004587F8);
      int64_t v28 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v28(&v81, 0);
      --v3;
    }
    while (v3);
LABEL_24:
    sub_10008B004(v79, *((uint64_t *)&v79 + 1), v80);
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v82 = (void *)sub_10006C51C((uint64_t *)&unk_100455780);
    *(void *)&long long v81 = _swiftEmptyArrayStorage;
    sub_1000761D0(&v81, &v79);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v79, 0x6553657669746361, 0xEE00736E6F697373, isUniquelyReferenced_nonNull_native);
    unint64_t v30 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    int64_t v31 = (void **)(v76 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases);
    swift_beginAccess();
    unint64_t v32 = *v31;
    int64_t v33 = v32[2];
    uint64_t v34 = _swiftEmptyArrayStorage;
    if (v33)
    {
      *(void *)&long long v81 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1002CF974(0, v33, 0);
      uint64_t v34 = (void *)v81;
      uint64_t v35 = sub_100203454((uint64_t)v32);
      uint64_t v37 = v36;
      char v39 = v38 & 1;
      while ((v35 & 0x8000000000000000) == 0 && v35 < 1 << *((unsigned char *)v32 + 32))
      {
        if (((*(void *)((char *)v32 + (((unint64_t)v35 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) >> v35) & 1) == 0) {
          goto LABEL_58;
        }
        if (*((_DWORD *)v32 + 9) != v37) {
          goto LABEL_59;
        }
        uint64_t v6 = *(void *)(v32[6] + 8 * v35);
        if (v6)
        {
          if (v6 != 1) {
            goto LABEL_66;
          }
          unint64_t v30 = (void *)0xE400000000000000;
          uint64_t v40 = 1852799308;
        }
        else
        {
          unint64_t v30 = (void *)0xE600000000000000;
          uint64_t v40 = 0x616873696C41;
        }
        *(void *)&long long v81 = v34;
        unint64_t v42 = v34[2];
        unint64_t v41 = v34[3];
        if (v42 >= v41 >> 1)
        {
          sub_1002CF974(v41 > 1, v42 + 1, 1);
          uint64_t v34 = (void *)v81;
        }
        void v34[2] = v42 + 1;
        uint64_t v43 = &v34[2 * v42];
        v43[4] = v40;
        v43[5] = v30;
        uint64_t v44 = sub_1000FAE78(v35, v37, v39 & 1, v32);
        uint64_t v35 = v44;
        uint64_t v37 = v45;
        char v39 = v46 & 1;
        if (!--v33)
        {
          sub_10008B004(v44, v45, v46 & 1);
          swift_bridgeObjectRelease();
          goto LABEL_39;
        }
      }
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
    }
    else
    {
LABEL_39:
      uint64_t v47 = sub_10006C51C((uint64_t *)&unk_100455EA0);
      uint64_t v82 = (void *)v47;
      *(void *)&long long v81 = v34;
      sub_1000761D0(&v81, &v79);
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      sub_1002C9648(&v79, 0x7355657669746361, 0xEE00736573614365, v48);
      swift_bridgeObjectRelease();
      char v49 = *(unsigned char *)(v76 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable);
      unint64_t v30 = &type metadata for Bool;
      uint64_t v82 = &type metadata for Bool;
      LOBYTE(v81) = v49;
      sub_1000761D0(&v81, &v79);
      char v50 = swift_isUniquelyReferenced_nonNull_native();
      sub_1002C9648(&v79, 0x616C696176417369, 0xEB00000000656C62, v50);
      swift_bridgeObjectRelease();
      char v51 = *(unsigned char *)(v76 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning);
      uint64_t v82 = &type metadata for Bool;
      LOBYTE(v81) = v51;
      sub_1000761D0(&v81, &v79);
      char v52 = swift_isUniquelyReferenced_nonNull_native();
      sub_1002C9648(&v79, 0x6E696E6E75527369, 0xE900000000000067, v52);
      swift_bridgeObjectRelease();
      uint64_t v53 = (void **)(v76 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
      swift_beginAccess();
      unint64_t v32 = *v53;
      int64_t v54 = v32[2];
      uint64_t v55 = _swiftEmptyArrayStorage;
      if (!v54)
      {
LABEL_53:
        uint64_t v82 = (void *)v47;
        *(void *)&long long v81 = v55;
        sub_1000761D0(&v81, &v79);
        char v68 = swift_isUniquelyReferenced_nonNull_native();
        sub_1002C9648(&v79, 0xD000000000000014, 0x80000001003B75F0, v68);
        unint64_t v32 = &_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease();
        if (qword_1004537B8 == -1)
        {
LABEL_54:
          uint64_t v82 = v30;
          LOBYTE(v81) = byte_100468899;
          sub_1000761D0(&v81, &v79);
          char v69 = swift_isUniquelyReferenced_nonNull_native();
          sub_1002C9648(&v79, 0xD000000000000011, 0x80000001003B78D0, v69);
          swift_bridgeObjectRelease();
          if (qword_1004537B0 != -1) {
            swift_once();
          }
          uint64_t v82 = v30;
          LOBYTE(v81) = byte_100468898;
          sub_1000761D0(&v81, &v79);
          char v70 = swift_isUniquelyReferenced_nonNull_native();
          sub_1002C9648(&v79, 0xD000000000000015, 0x80000001003B78F0, v70);
          swift_bridgeObjectRelease();
          BOOL v71 = *(void *)(v76 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion) != 0;
          uint64_t v82 = v30;
          LOBYTE(v81) = v71;
          sub_1000761D0(&v81, &v79);
          char v72 = swift_isUniquelyReferenced_nonNull_native();
          sub_1002C9648(&v79, 0xD000000000000011, 0x80000001003B7610, v72);
          swift_bridgeObjectRelease();
          sub_1002BA7F8((uint64_t)v32);
          swift_bridgeObjectRelease();
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          uint64_t v74 = sub_1000190DC((uint64_t)"dskuwb.state", (uint64_t)isa);

          return (uint64_t)v74;
        }
LABEL_63:
        swift_once();
        goto LABEL_54;
      }
      uint64_t v77 = v47;
      *(void *)&long long v81 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1002CF974(0, v54, 0);
      uint64_t v55 = (void *)v81;
      uint64_t v56 = sub_100203454((uint64_t)v32);
      uint64_t v58 = v57;
      char v60 = v59 & 1;
      while ((v56 & 0x8000000000000000) == 0 && v56 < 1 << *((unsigned char *)v32 + 32))
      {
        if (((*(void *)((char *)v32 + (((unint64_t)v56 >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) >> v56) & 1) == 0) {
          goto LABEL_61;
        }
        if (*((_DWORD *)v32 + 9) != v58) {
          goto LABEL_62;
        }
        uint64_t v6 = *(void *)(v32[6] + 8 * v56);
        if (v6)
        {
          if (v6 != 1) {
            goto LABEL_66;
          }
          unint64_t v30 = (void *)0xE400000000000000;
          uint64_t v61 = 1852799308;
        }
        else
        {
          unint64_t v30 = (void *)0xE600000000000000;
          uint64_t v61 = 0x616873696C41;
        }
        *(void *)&long long v81 = v55;
        unint64_t v63 = v55[2];
        unint64_t v62 = v55[3];
        if (v63 >= v62 >> 1)
        {
          sub_1002CF974(v62 > 1, v63 + 1, 1);
          uint64_t v55 = (void *)v81;
        }
        v55[2] = v63 + 1;
        uint64_t v64 = &v55[2 * v63];
        v64[4] = v61;
        v64[5] = v30;
        uint64_t v65 = sub_1000FAE78(v56, v58, v60 & 1, v32);
        uint64_t v56 = v65;
        uint64_t v58 = v66;
        char v60 = v67 & 1;
        if (!--v54)
        {
          sub_10008B004(v65, v66, v67 & 1);
          swift_bridgeObjectRelease();
          unint64_t v30 = &type metadata for Bool;
          uint64_t v47 = v77;
          goto LABEL_53;
        }
      }
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  *(void *)&long long v79 = v6;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_1001FD6F4()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_23:
    swift_once();
    goto LABEL_15;
  }
  uint64_t v1 = OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning;
  char v11 = *(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning);
  char v12 = Logger.logObject.getter();
  if (v11)
  {
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "DSKUWB is already running", v14, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v15 = static os_log_type_t.info.getter();
  uint64_t v2 = (unsigned __int8 *)&unk_100468000;
  if (os_log_type_enabled(v12, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 67109376;
    if (qword_1004537B0 != -1) {
      swift_once();
    }
    v23[3] = byte_100468898;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 8) = 1024;
    if (qword_1004537B8 != -1) {
      swift_once();
    }
    v23[2] = byte_100468899;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v15, "Supports secure ranging %{BOOL}d deep sleep %{BOOL}d", (uint8_t *)v16, 0xEu);
    swift_slowDealloc();
  }

  if (qword_1004537B0 != -1) {
    goto LABEL_23;
  }
LABEL_15:
  int v17 = v2[2200];
  uint64_t v18 = Logger.logObject.getter();
  if (v17 == 1)
  {
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Starting DSKUWB", v20, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)(v3 + v1) = 1;
  }
  else
  {
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v21, "UWB does not support secure ranging", v22, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1001FDAFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning;
    int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning);
    char v11 = Logger.logObject.getter();
    if (v10 == 1)
    {
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping DSKUWB", v13, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v14 = swift_bridgeObjectRetain();
      sub_1001F8F68(v14);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      swift_retain();
      uint64_t v15 = swift_bridgeObjectRetain();
      sub_100203BAC(v15);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v16 = (void *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions);
      swift_beginAccess();
      *uint64_t v16 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v1 + v9) = 0;
    }
    else
    {
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v17, "DSKUWB is not running", v18, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001FDDF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
LABEL_46:
  }
    swift_once();
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  os_log_type_t v12 = *(uint64_t (**)(void *, uint64_t))(v3 + 8);
  v3 += 8;
  char v11 = v12;
  v12(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_48:
    uint64_t v36 = swift_once();
    goto LABEL_44;
  }
  int64_t v54 = v11;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "UWB is powered on", v15, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) = 1;
  uint64_t v16 = v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeExceptions;
  uint64_t result = swift_beginAccess();
  int64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = *(void *)v16 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(*(void *)v16 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & *(void *)(*(void *)v16 + 64);
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  while (1)
  {
    if (v23)
    {
      unint64_t v25 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      unint64_t v26 = v25 | (v18 << 6);
      goto LABEL_9;
    }
    int64_t v27 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v27 >= v24) {
      break;
    }
    unint64_t v28 = *(void *)(v20 + 8 * v27);
    ++v18;
    if (!v28)
    {
      int64_t v18 = v27 + 1;
      if (v27 + 1 >= v24) {
        break;
      }
      unint64_t v28 = *(void *)(v20 + 8 * v18);
      if (!v28)
      {
        int64_t v18 = v27 + 2;
        if (v27 + 2 >= v24) {
          break;
        }
        unint64_t v28 = *(void *)(v20 + 8 * v18);
        if (!v28)
        {
          int64_t v18 = v27 + 3;
          if (v27 + 3 >= v24) {
            break;
          }
          unint64_t v28 = *(void *)(v20 + 8 * v18);
          if (!v28)
          {
            int64_t v18 = v27 + 4;
            if (v27 + 4 >= v24) {
              break;
            }
            unint64_t v28 = *(void *)(v20 + 8 * v18);
            if (!v28)
            {
              int64_t v29 = v27 + 5;
              if (v29 >= v24) {
                break;
              }
              unint64_t v28 = *(void *)(v20 + 8 * v29);
              if (!v28)
              {
                while (1)
                {
                  int64_t v18 = v29 + 1;
                  if (__OFADD__(v29, 1)) {
                    break;
                  }
                  if (v18 >= v24) {
                    goto LABEL_29;
                  }
                  unint64_t v28 = *(void *)(v20 + 8 * v18);
                  ++v29;
                  if (v28) {
                    goto LABEL_28;
                  }
                }
                __break(1u);
                goto LABEL_50;
              }
              int64_t v18 = v29;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v23 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v18 << 6);
LABEL_9:
    v19 |= *(void *)(*(void *)(*(void *)v16 + 56) + 8 * v26);
  }
LABEL_29:
  unint64_t v30 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion);
  if (v30)
  {
    uint64_t v31 = qword_100468A38;
    *uint64_t v6 = qword_100468A38;
    v9(v6, v8, v2);
    unint64_t v32 = v30;
    id v33 = (id)v31;
    LOBYTE(v31) = _dispatchPreconditionTest(_:)();
    uint64_t result = v54(v6, v2);
    if ((v31 & 1) == 0)
    {
LABEL_50:
      __break(1u);
      return result;
    }
    if (v19)
    {
      if ((v19 & 2) != 0)
      {
        uint64_t v34 = 6;
        if ((v19 & 4) == 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      uint64_t v34 = 2;
      if ((v19 & 4) != 0) {
LABEL_41:
      }
        uint64_t v34 = v34 | 1;
    }
    else
    {
      if ((v19 & 2) == 0)
      {
        uint64_t v34 = 0;
        if ((v19 & 4) == 0) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      uint64_t v34 = 4;
      if ((v19 & 4) != 0) {
        goto LABEL_41;
      }
    }
LABEL_42:
    id v35 = [*(id *)&v32[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session] systemEventNotifier];
    [v35 notifyPassiveAccessIntent:v34];
  }
  sub_1002B9140(0xD000000000000037, 0x80000001003B7980, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
  if (qword_1004536D8 != -1) {
    goto LABEL_48;
  }
LABEL_44:
  uint64_t v38 = __chkstk_darwin(v36, v37);
  *(&v53 - 4) = (uint64_t)sub_1000A24C8;
  *(&v53 - 3) = 0;
  *(&v53 - 2) = v39;
  __chkstk_darwin(v38, v40);
  *(&v53 - 2) = (uint64_t)sub_1000AA878;
  *(&v53 - 1) = v41;
  uint64_t v43 = v42 + 4;
  os_unfair_lock_lock(v42 + 4);
  sub_1000AA804(&v56);
  os_unfair_lock_unlock(v43);
  uint64_t v46 = __chkstk_darwin(v44, v45);
  *(&v53 - 4) = (uint64_t)sub_100206FC8;
  *(&v53 - 3) = 0;
  *(&v53 - 2) = v47;
  __chkstk_darwin(v46, v48);
  *(&v53 - 2) = (uint64_t)sub_1000AA878;
  *(&v53 - 1) = v49;
  char v51 = v50 + 4;
  os_unfair_lock_lock(v50 + 4);
  sub_1000AA804(&v55);
  os_unfair_lock_unlock(v51);
  sub_1000D9374(v55);
  uint64_t v52 = swift_bridgeObjectRetain();
  sub_1001F8814(v52);
  return swift_bridgeObjectRelease_n();
}

void sub_1001FE3C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (unint64_t)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v9 = qword_100468A38;
    *(void *)unint64_t v8 = qword_100468A38;
    (*(void (**)(unint64_t, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
    id v10 = (id)v9;
    LOBYTE(v9) = _dispatchPreconditionTest(_:)();
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v8, v4);
    if ((v9 & 1) == 0) {
      break;
    }
    if (!*(void *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion)) {
      return;
    }
    uint64_t v11 = OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) == 1 && a1 == 0) {
      return;
    }
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = sub_1002014D4(a1);
      uint64_t v45 = sub_100290514(v16, v17, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "UWB state updated with suspension reasons [%s]", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    unint64_t v8 = a1 != 0;
    *(unsigned char *)(v2 + v11) = a1 == 0;
    uint64_t v4 = v2 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates;
    swift_beginAccess();
    uint64_t v2 = *(void *)v4;
    uint64_t v5 = *(void *)v4 + 64;
    uint64_t v18 = 1 << *(unsigned char *)(*(void *)v4 + 32);
    uint64_t v19 = -1;
    if (v18 < 64) {
      uint64_t v19 = ~(-1 << v18);
    }
    uint64_t v20 = v19 & *(void *)(*(void *)v4 + 64);
    int64_t v21 = (unint64_t)(v18 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    int64_t v22 = 0;
    if (v20) {
      goto LABEL_30;
    }
    while (1)
    {
      int64_t v23 = v22 + 1;
      if (__OFADD__(v22, 1)) {
        break;
      }
      if (v23 >= v21) {
        goto LABEL_34;
      }
      uint64_t v20 = *(void *)(v5 + 8 * v23);
      ++v22;
      if (!v20)
      {
        int64_t v22 = v23 + 1;
        if (v23 + 1 >= v21) {
          goto LABEL_34;
        }
        uint64_t v20 = *(void *)(v5 + 8 * v22);
        if (!v20)
        {
          int64_t v22 = v23 + 2;
          if (v23 + 2 >= v21) {
            goto LABEL_34;
          }
          uint64_t v20 = *(void *)(v5 + 8 * v22);
          if (!v20)
          {
            int64_t v22 = v23 + 3;
            if (v23 + 3 >= v21) {
              goto LABEL_34;
            }
            uint64_t v20 = *(void *)(v5 + 8 * v22);
            if (!v20)
            {
              int64_t v22 = v23 + 4;
              if (v23 + 4 >= v21) {
                goto LABEL_34;
              }
              uint64_t v20 = *(void *)(v5 + 8 * v22);
              if (!v20)
              {
                int64_t v24 = v23 + 5;
                if (v24 >= v21)
                {
LABEL_34:
                  swift_release();
                  swift_bridgeObjectRelease();
                  if (a1)
                  {
                    sub_10006C51C(&qword_1004555D0);
                    uint64_t inited = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_100378290;
                    *(void *)(inited + 32) = 0xD000000000000018;
                    *(void *)(inited + 40) = 0x80000001003B7960;
                    *(void *)(inited + 72) = &type metadata for UInt;
                    *(void *)(inited + 48) = a1;
                    unint64_t v26 = sub_1001DB224(inited);
                    sub_1002B9140(0xD000000000000038, 0x80000001003B7920, 0, 0xF000000000000000, 0, 0xF000000000000000, v26);
                    uint64_t v27 = swift_bridgeObjectRelease();
                  }
                  else
                  {
                    sub_1002B9140(0xD000000000000037, 0x80000001003B7980, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
                  }
                  if (qword_1004536D8 != -1) {
                    goto LABEL_46;
                  }
                  goto LABEL_38;
                }
                uint64_t v20 = *(void *)(v5 + 8 * v24);
                if (!v20)
                {
                  while (1)
                  {
                    int64_t v22 = v24 + 1;
                    if (__OFADD__(v24, 1)) {
                      break;
                    }
                    if (v22 >= v21) {
                      goto LABEL_34;
                    }
                    uint64_t v20 = *(void *)(v5 + 8 * v22);
                    ++v24;
                    if (v20) {
                      goto LABEL_30;
                    }
                  }
                  __break(1u);
                  return;
                }
                int64_t v22 = v24;
              }
            }
          }
        }
      }
      do
      {
LABEL_30:
        if (qword_100453830 != -1) {
          swift_once();
        }
        v20 &= v20 - 1;
        uint64_t v4 = qword_100468950;
        sub_100255268(2, a1 != 0, 2, 0, 2);
      }
      while (v20);
    }
    __break(1u);
LABEL_44:
    swift_once();
  }
  __break(1u);
LABEL_46:
  uint64_t v27 = swift_once();
LABEL_38:
  uint64_t v29 = __chkstk_darwin(v27, v28);
  v44[-4] = (unint64_t)sub_1000A24C8;
  v44[-3] = 0;
  v44[-2] = v30;
  __chkstk_darwin(v29, v31);
  v44[-2] = (unint64_t)sub_1000A2ABC;
  v44[-1] = v32;
  uint64_t v34 = v33 + 4;
  os_unfair_lock_lock(v33 + 4);
  sub_100079ACC(&v45);
  os_unfair_lock_unlock(v34);
  uint64_t v37 = __chkstk_darwin(v35, v36);
  v44[-4] = (unint64_t)sub_1001FC988;
  v44[-3] = 0;
  v44[-2] = v38;
  __chkstk_darwin(v37, v39);
  v44[-2] = (unint64_t)sub_1000AA878;
  v44[-1] = v40;
  unint64_t v42 = v41 + 4;
  os_unfair_lock_lock(v41 + 4);
  sub_1000AA804(v44);
  os_unfair_lock_unlock(v42);
  sub_1000D9374(v44[0]);
  uint64_t v43 = swift_bridgeObjectRetain();
  if (a1) {
    sub_1001F8B84(v43, a1);
  }
  else {
    sub_1001F8814(v43);
  }
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1001FEA40(char a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(__objc2_prot **)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (uint64_t *)((char *)&v29[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_44;
  }
  while (1)
  {
    uint64_t v11 = qword_100468A38;
    *id v10 = qword_100468A38;
    ((void (*)(void *, void, uint64_t))v7[1].class_meths)(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    id v12 = (id)v11;
    LOBYTE(v11) = _dispatchPreconditionTest(_:)();
    ((void (*)(void *, uint64_t))v7->name)(v10, v6);
    if ((v11 & 1) == 0) {
      break;
    }
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      if (a1) {
        uint64_t v16 = 0x6465646565637865;
      }
      else {
        uint64_t v16 = 0x6563786520746F6ELL;
      }
      if (a1) {
        unint64_t v17 = 0xE800000000000000;
      }
      else {
        unint64_t v17 = 0xEC00000064656465;
      }
      uint64_t v28 = sub_100290514(v16, v17, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      if (a2)
      {
        if (a2 != (uint64_t *)1) {
          goto LABEL_47;
        }
        unint64_t v18 = 0xE400000000000000;
        uint64_t v19 = 1852799308;
      }
      else
      {
        unint64_t v18 = 0xE600000000000000;
        uint64_t v19 = 0x616873696C41;
      }
      uint64_t v28 = sub_100290514(v19, v18, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ranging limit %s for %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    if (a1) {
      sub_1000E81A0((Swift::UInt *)&v28, (Swift::UInt)a2);
    }
    else {
      sub_1000F5C70((Swift::UInt)a2);
    }
    swift_endAccess();
    uint64_t v6 = v3 + OBJC_IVAR____TtC10seserviced6DSKUWB_delegates;
    swift_beginAccess();
    uint64_t v3 = *(void *)v6;
    id v10 = (void *)(*(void *)v6 + 64);
    uint64_t v20 = 1 << *(unsigned char *)(*(void *)v6 + 32);
    uint64_t v21 = -1;
    if (v20 < 64) {
      uint64_t v21 = ~(-1 << v20);
    }
    uint64_t v22 = v21 & *(void *)(*(void *)v6 + 64);
    int64_t v23 = (unint64_t)(v20 + 63) >> 6;
    a1 &= 1u;
    swift_bridgeObjectRetain_n();
    int64_t v24 = 0;
    uint64_t v7 = &OBJC_PROTOCOL___SEServerProtocol;
    a2 = &qword_100453830;
    if (v22) {
      goto LABEL_38;
    }
    while (1)
    {
      int64_t v25 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      if (v25 >= v23) {
        goto LABEL_42;
      }
      uint64_t v22 = v10[v25];
      ++v24;
      if (!v22)
      {
        int64_t v24 = v25 + 1;
        if (v25 + 1 >= v23) {
          goto LABEL_42;
        }
        uint64_t v22 = v10[v24];
        if (!v22)
        {
          int64_t v24 = v25 + 2;
          if (v25 + 2 >= v23) {
            goto LABEL_42;
          }
          uint64_t v22 = v10[v24];
          if (!v22)
          {
            int64_t v24 = v25 + 3;
            if (v25 + 3 >= v23) {
              goto LABEL_42;
            }
            uint64_t v22 = v10[v24];
            if (!v22)
            {
              int64_t v24 = v25 + 4;
              if (v25 + 4 >= v23) {
                goto LABEL_42;
              }
              uint64_t v22 = v10[v24];
              if (!v22)
              {
                int64_t v26 = v25 + 5;
                if (v26 >= v23)
                {
LABEL_42:
                  swift_release();
                  return swift_bridgeObjectRelease();
                }
                uint64_t v22 = v10[v26];
                if (!v22)
                {
                  while (1)
                  {
                    int64_t v24 = v26 + 1;
                    if (__OFADD__(v26, 1)) {
                      goto LABEL_46;
                    }
                    if (v24 >= v23) {
                      goto LABEL_42;
                    }
                    uint64_t v22 = v10[v24];
                    ++v26;
                    if (v22) {
                      goto LABEL_38;
                    }
                  }
                }
                int64_t v24 = v26;
              }
            }
          }
        }
      }
      do
      {
LABEL_38:
        if (qword_100453830 != -1) {
          swift_once();
        }
        v22 &= v22 - 1;
        uint64_t v6 = qword_100468950;
        sub_100255268(2, 2, a1, 0, 2);
      }
      while (v22);
    }
    __break(1u);
LABEL_44:
    swift_once();
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t v28 = (uint64_t)a2;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1001FEF40()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced6DSKUWB_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1001FF040()
{
  return type metadata accessor for DSKUWB();
}

uint64_t type metadata accessor for DSKUWB()
{
  uint64_t result = qword_1004583D8;
  if (!qword_1004583D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001FF094()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_1001FF150()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if (v6)
  {
    int v9 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state);
    if ((v9 - 2) < 2 || v9 == 0)
    {
      return [*(id *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_session) runWithConfiguration:*(void *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_configuration)];
    }
    else if (v9 == 6)
    {
      *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = 5;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001FF2E0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v9 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
  int v10 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state);
  if ((v10 - 3) >= 2)
  {
    if (v10 != 5) {
      return result;
    }
    char v11 = 6;
  }
  else
  {
    id result = [*(id *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_session) pause];
    char v11 = 2;
  }
  *(unsigned char *)(v0 + v9) = v11;
  return result;
}

void sub_1001FF464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *char v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
  {
    [*(id *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_session) processBluetoothHostTimeSyncWithType:a1 btcClockTicks:a2 eventCounter:a3];
    return;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Session is not running", v16, 2u);
    swift_slowDealloc();
  }
}

void sub_1001FF6A0()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (void *)((char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = &unk_100468000;
  uint64_t v7 = (void *)qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  unsigned int v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, void, uint64_t))(v2 + 104);
  v9(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v2 + 8);
  v12(v5, v1);
  if (v11)
  {
    uint64_t v29 = v9;
    unsigned int v30 = v8;
    if (qword_1004537A8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v28 = v12;
  id v13 = v0;
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v27 = v1;
    uint64_t v17 = (uint8_t *)v16;
    uint64_t v25 = swift_slowAlloc();
    v32[0] = v25;
    *(_DWORD *)uint64_t v17 = 136315138;
    v24[1] = v17 + 4;
    swift_retain();
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v26 = v2 + 104;
    unint64_t v20 = v19;
    swift_release();
    uint64_t v31 = sub_100290514(v18, v20, v32);
    uint64_t v6 = (void *)&unk_100468000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Invalidating session for %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v27;
    swift_slowDealloc();
  }
  else
  {
  }
  [*(id *)&v13[OBJC_IVAR____TtC10seserviced10UWBSession_session] invalidate];
  v13[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 1;
  uint64_t v21 = (void *)v6[327];
  *uint64_t v5 = v21;
  v29(v5, v30, v1);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  v28(v5, v1);
  if (v21)
  {
    swift_beginAccess();
    int64_t v23 = (void *)sub_1000F5AA0(v13);
    swift_endAccess();
  }
  else
  {
    __break(1u);
  }
}

id sub_1001FFA9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UWBSession();
  return [super dealloc];
}

uint64_t type metadata accessor for UWBSession()
{
  return self;
}

uint64_t sub_1001FFBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  id v61 = a6;
  uint64_t v62 = a7;
  uint64_t v59 = a2;
  uint64_t v60 = a4;
  uint64_t v63 = a3;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (void *)((char *)v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = qword_100453928;
  int64_t v23 = v13;
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100468A38;
  *uint64_t v21 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v24)
  {
    uint64_t v55 = a8;
    uint64_t v58 = a9;
    uint64_t v27 = &v23[OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage];
    *(void *)uint64_t v27 = a10;
    *((void *)v27 + 1) = a11;
    uint64_t v28 = &v23[OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate];
    *(void *)uint64_t v28 = a12;
    *((void *)v28 + 1) = a13;
    uint64_t v56 = a11;
    swift_retain();
    uint64_t v57 = a13;
    swift_retain();

    UUID.uuidString.getter();
    id v29 = objc_allocWithZone((Class)NICarKeyConfiguration);
    NSString v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v31 = [v29 initWithVehicleIdentifier:v30];

    unint64_t v72 = 0xD000000000000014;
    unint64_t v73 = 0x80000001003B1620;
    unint64_t v74 = 0xD000000000000019;
    unint64_t v75 = 0x80000001003B7AE0;
    __int16 v76 = 256;
    sub_1001AF4B4();
    char v33 = v32;
    unint64_t v67 = 0xD000000000000014;
    unint64_t v68 = 0x80000001003B1620;
    unint64_t v69 = 0xD000000000000027;
    unint64_t v70 = 0x80000001003B7B00;
    __int16 v71 = 256;
    sub_1001AF4B4();
    char v35 = v34;
    if (v33 & 1) != 0 || (v34)
    {
      sub_10006C51C(&qword_100455670);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1003782A0;
      unint64_t v64 = 0xD000000000000017;
      unint64_t v65 = 0x80000001003B7B30;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for Bool;
      *(unsigned char *)(inited + 72) = v33 & 1;
      unint64_t v64 = 0xD000000000000010;
      unint64_t v65 = 0x80000001003B7B50;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 168) = &type metadata for Bool;
      *(unsigned char *)(inited + 144) = v35 & 1;
      sub_1001DB24C(inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v31 setDebugOptions:isa];
    }
    *(void *)&v23[OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons] = 0;
    *(void *)&v23[OBJC_IVAR____TtC10seserviced10UWBSession_configuration] = v31;
    *(void *)&v23[OBJC_IVAR____TtC10seserviced10UWBSession_peer] = a1;
    unint64_t v38 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onStart];
    v54[1] = a1;
    uint64_t v39 = v63;
    *(void *)unint64_t v38 = v59;
    *((void *)v38 + 1) = v39;
    unint64_t v40 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension];
    *(void *)unint64_t v40 = v60;
    *((void *)v40 + 1) = a5;
    uint64_t v41 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onResumption];
    uint64_t v42 = v62;
    *(void *)uint64_t v41 = v61;
    *((void *)v41 + 1) = v42;
    uint64_t v43 = &v23[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation];
    uint64_t v44 = v58;
    *(void *)uint64_t v43 = v55;
    *((void *)v43 + 1) = v44;
    v23[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 0;
    id v45 = objc_allocWithZone((Class)NISession);
    uint64_t v46 = v23;
    id v61 = v31;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v47 = [v45 init];
    *(void *)&v46[OBJC_IVAR____TtC10seserviced10UWBSession_session] = v47;
    uint64_t v48 = qword_100468A38;
    id v49 = v47;
    [v49 setDelegateQueue:v48];

    char v50 = (objc_class *)type metadata accessor for UWBSession();
    v66.receiver = v46;
    v66.super_class = v50;
    char v51 = (char *)[super init];
    uint64_t v52 = *(void **)&v51[OBJC_IVAR____TtC10seserviced10UWBSession_session];
    uint64_t v53 = v51;
    [v52 setDelegate:v53];
    sub_1001FF150();

    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v53;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002000E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v54 = a6;
  uint64_t v55 = a7;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (uint64_t *)((char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_100468A38;
  *uint64_t v21 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = v22;
  char v24 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v24)
  {
    uint64_t v49 = a8;
    uint64_t v56 = v13;
    if (qword_1004537A8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  swift_retain_n();
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v48 = v14;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v58 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_retain();
    uint64_t v29 = UUID.uuidString.getter();
    unint64_t v31 = v30;
    swift_release();
    uint64_t v57 = sub_100290514(v29, v31, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Replacing existing peer with %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v32 = OBJC_IVAR____TtC10seserviced10UWBSession_peer;
  uint64_t v33 = v56;
  if (static UUID.== infix(_:_:)())
  {
    *(void *)(v33 + v32) = a1;
    swift_retain();
    swift_release();
    char v34 = (void *)(v33 + OBJC_IVAR____TtC10seserviced10UWBSession_onStart);
    uint64_t v35 = v51;
    *char v34 = v50;
    v34[1] = v35;
    swift_retain();
    swift_release();
    uint64_t v36 = (void *)(v33 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension);
    uint64_t v37 = v53;
    *uint64_t v36 = v52;
    v36[1] = v37;
    swift_retain();
    swift_release();
    unint64_t v38 = (void *)(v33 + OBJC_IVAR____TtC10seserviced10UWBSession_onResumption);
    uint64_t v39 = v55;
    *unint64_t v38 = v54;
    v38[1] = v39;
    swift_retain();
    swift_release();
    unint64_t v40 = (void *)(v33 + OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation);
    void *v40 = v49;
    v40[1] = a9;
    swift_retain();
    swift_release();
    uint64_t v41 = (void *)(v33 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage);
    *uint64_t v41 = a10;
    v41[1] = a11;
    swift_retain();
    swift_release();
    uint64_t v42 = (void *)(v33 + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate);
    *uint64_t v42 = a12;
    v42[1] = a13;
    swift_retain();
    return swift_release();
  }
  else
  {
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Wrong peer", v46, 2u);
      swift_slowDealloc();
    }

    sub_100204F6C();
    swift_allocError();
    *id v47 = 2;
    return swift_willThrow();
  }
}

uint64_t sub_1002005CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v13) {
    return a4(a1, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_100200740(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_100075868((uint64_t)v4, v8);

  return swift_release();
}

void sub_1002007EC(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *unint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_8;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
  {
    switch(a1)
    {
      case 1:
        uint64_t v13 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        uint64_t v10 = v13;
        id v14 = "notifyRangingIntentSentToVehicleWithReason:";
        goto LABEL_15;
      case 2:
        uint64_t v10 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        [v10 notifyVehicleSentRangingSuspendedSubEvent];
        goto LABEL_18;
      case 3:
        uint64_t v10 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        [v10 notifyVehicleTerminatedRangingSession];
        goto LABEL_18;
      case 4:
        uint64_t v13 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        uint64_t v10 = v13;
        id v14 = "notifyVehicleLockedWithReason:";
        goto LABEL_15;
      case 5:
        uint64_t v13 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        uint64_t v10 = v13;
        id v14 = "notifyVehicleUnlockedWithReason:";
LABEL_15:
        uint64_t v15 = 1;
        goto LABEL_17;
      case 6:
        uint64_t v13 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        uint64_t v10 = v13;
        id v14 = "notifyVehicleReadyToDriveWithReason:";
        uint64_t v15 = 0;
LABEL_17:
        [v13 v14:v15];
        break;
      default:
        uint64_t v10 = [*(id *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_session) carKeyEventNotifier];
        [v10 notifyRangingIntentSentToVehicleWithReason:2];
        break;
    }
    goto LABEL_18;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_20;
  }
LABEL_8:
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Session is not running", v12, 2u);
    swift_slowDealloc();
  }
LABEL_18:
}

uint64_t sub_100200B98()
{
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for UWBAlishaSession()
{
  return self;
}

uint64_t sub_100200C58(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v87 = a8;
  uint64_t v88 = a4;
  uint64_t v86 = a3;
  int v85 = a2;
  uint64_t v33 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v37 = (uint64_t *)((char *)&v74 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v38 = qword_100453928;
  uint64_t v39 = v28;
  if (v38 != -1) {
    swift_once();
  }
  uint64_t v40 = qword_100468A38;
  *uint64_t v37 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v37, enum case for DispatchPredicate.onQueue(_:), v33);
  id v41 = (id)v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v34 + 8))(v37, v33);
  if (v40)
  {
    uint64_t v89 = a6;
    uint64_t v90 = a10;
    uint64_t v76 = a9;
    uint64_t v77 = a12;
    uint64_t v43 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onTimeSync];
    *(void *)uint64_t v43 = a11;
    *((void *)v43 + 1) = a12;
    uint64_t v44 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onM2Message];
    *(void *)uint64_t v44 = a13;
    *((void *)v44 + 1) = a14;
    uint64_t v83 = a16;
    uint64_t v84 = a14;
    os_log_type_t v45 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onM4Message];
    *(void *)os_log_type_t v45 = a15;
    *((void *)v45 + 1) = a16;
    uint64_t v46 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onResumeResponse];
    *(void *)uint64_t v46 = a17;
    *((void *)v46 + 1) = a18;
    uint64_t v81 = a20;
    uint64_t v82 = a18;
    id v47 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onPauseRequest];
    *(void *)id v47 = a19;
    *((void *)v47 + 1) = a20;
    uint64_t v74 = a5;
    uint64_t v75 = a7;
    uint64_t v48 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onResumeRequest];
    *(void *)uint64_t v48 = a21;
    *((void *)v48 + 1) = a22;
    uint64_t v79 = a24;
    uint64_t v80 = a22;
    uint64_t v49 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onRangingStart];
    *(void *)uint64_t v49 = a23;
    *((void *)v49 + 1) = a24;
    uint64_t v50 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onRangingPause];
    *(void *)uint64_t v50 = a25;
    *((void *)v50 + 1) = a26;
    uint64_t v78 = a26;
    uint64_t v51 = &v39[OBJC_IVAR____TtC10seserviced14UWBLyonSession_onURSKPrefetch];
    *(void *)uint64_t v51 = a27;
    *((void *)v51 + 1) = a28;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();

    UUID.uuidString.getter();
    uint64_t v52 = v88;
    uint64_t v53 = a1;
    id v54 = objc_allocWithZone((Class)NIAcwgConfiguration);
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v56 = [v54 initWithLockIdentifier:v55];

    [v56 setLockBtConnHandle:(unsigned __int16)v85];
    *(void *)&v39[OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons] = 0;
    *(void *)&v39[OBJC_IVAR____TtC10seserviced10UWBSession_configuration] = v56;
    *(void *)&v39[OBJC_IVAR____TtC10seserviced10UWBSession_peer] = v53;
    uint64_t v57 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onStart];
    uint64_t v58 = v87;
    *(void *)uint64_t v57 = v86;
    *((void *)v57 + 1) = v52;
    uint64_t v59 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension];
    uint64_t v61 = v89;
    uint64_t v60 = v90;
    *(void *)uint64_t v59 = v74;
    *((void *)v59 + 1) = v61;
    uint64_t v62 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onResumption];
    *(void *)uint64_t v62 = v75;
    *((void *)v62 + 1) = v58;
    uint64_t v63 = &v39[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation];
    *(void *)uint64_t v63 = v76;
    *((void *)v63 + 1) = v60;
    v39[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 0;
    id v64 = objc_allocWithZone((Class)NISession);
    unint64_t v65 = v39;
    id v66 = v56;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v67 = [v64 init];
    *(void *)&v65[OBJC_IVAR____TtC10seserviced10UWBSession_session] = v67;
    uint64_t v68 = qword_100468A38;
    id v69 = v67;
    [v69 setDelegateQueue:v68];

    unint64_t v70 = (objc_class *)type metadata accessor for UWBSession();
    v91.receiver = v65;
    v91.super_class = v70;
    __int16 v71 = (char *)[super init];
    unint64_t v72 = *(void **)&v71[OBJC_IVAR____TtC10seserviced10UWBSession_session];
    unint64_t v73 = v71;
    [v72 setDelegate:v73];
    sub_1001FF150();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v73;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10020114C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t type metadata accessor for UWBLyonSession()
{
  return self;
}

uint64_t sub_1002014D4(uint64_t a1)
{
  if ((a1 & 1) == 0)
  {
    objc_super v2 = _swiftEmptyArrayStorage;
    if ((a1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }
  objc_super v2 = sub_1002591F8(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    objc_super v2 = sub_1002591F8((void *)(v3 > 1), v4 + 1, 1, v2);
  }
  v2[2] = v4 + 1;
  uint64_t v5 = &v2[2 * v4];
  v5[4] = 0xD000000000000015;
  v5[5] = 0x80000001003B7A40;
  if ((a1 & 2) != 0)
  {
LABEL_7:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
    }
    unint64_t v7 = v2[2];
    unint64_t v6 = v2[3];
    if (v7 >= v6 >> 1) {
      objc_super v2 = sub_1002591F8((void *)(v6 > 1), v7 + 1, 1, v2);
    }
    v2[2] = v7 + 1;
    uint64_t v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000012;
    v8[5] = 0x80000001003B7A20;
  }
LABEL_12:
  if ((a1 & 4) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
    }
    unint64_t v10 = v2[2];
    unint64_t v9 = v2[3];
    if (v10 >= v9 >> 1) {
      objc_super v2 = sub_1002591F8((void *)(v9 > 1), v10 + 1, 1, v2);
    }
    v2[2] = v10 + 1;
    os_log_type_t v11 = &v2[2 * v10];
    v11[4] = 0xD00000000000001CLL;
    v11[5] = 0x80000001003B7A00;
    if ((a1 & 8) == 0)
    {
LABEL_14:
      if ((a1 & 0x10) == 0) {
        goto LABEL_15;
      }
      goto LABEL_29;
    }
  }
  else if ((a1 & 8) == 0)
  {
    goto LABEL_14;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
  }
  unint64_t v13 = v2[2];
  unint64_t v12 = v2[3];
  if (v13 >= v12 >> 1) {
    objc_super v2 = sub_1002591F8((void *)(v12 > 1), v13 + 1, 1, v2);
  }
  v2[2] = v13 + 1;
  id v14 = &v2[2 * v13];
  v14[4] = 0xD000000000000014;
  v14[5] = 0x80000001003B79E0;
  if ((a1 & 0x10) == 0)
  {
LABEL_15:
    if ((a1 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_29:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
  }
  unint64_t v16 = v2[2];
  unint64_t v15 = v2[3];
  if (v16 >= v15 >> 1) {
    objc_super v2 = sub_1002591F8((void *)(v15 > 1), v16 + 1, 1, v2);
  }
  v2[2] = v16 + 1;
  uint64_t v17 = (char *)&v2[2 * v16];
  strcpy(v17 + 32, "errorHandling");
  *((_WORD *)v17 + 23) = -4864;
  if ((a1 & 0x20) == 0)
  {
LABEL_16:
    if ((a1 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_34:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
  }
  unint64_t v19 = v2[2];
  unint64_t v18 = v2[3];
  if (v19 >= v18 >> 1) {
    objc_super v2 = sub_1002591F8((void *)(v18 > 1), v19 + 1, 1, v2);
  }
  v2[2] = v19 + 1;
  uint64_t v20 = (char *)&v2[2 * v19];
  strcpy(v20 + 32, "systemNotReady");
  v20[47] = -18;
  if ((a1 & 0x40) == 0)
  {
LABEL_17:
    if ((a1 & 0x8000000000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_44;
  }
LABEL_39:
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
  }
  unint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  if (v22 >= v21 >> 1) {
    objc_super v2 = sub_1002591F8((void *)(v21 > 1), v22 + 1, 1, v2);
  }
  v2[2] = v22 + 1;
  id v23 = &v2[2 * v22];
  _DWORD v23[4] = 0xD00000000000001CLL;
  v23[5] = 0x80000001003B79C0;
  if (a1 < 0)
  {
LABEL_44:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      objc_super v2 = sub_1002591F8(0, v2[2] + 1, 1, v2);
    }
    unint64_t v25 = v2[2];
    unint64_t v24 = v2[3];
    if (v25 >= v24 >> 1) {
      objc_super v2 = sub_1002591F8((void *)(v24 > 1), v25 + 1, 1, v2);
    }
    v2[2] = v25 + 1;
    os_log_type_t v26 = &v2[2 * v25];
    v26[4] = 0x6E776F6E6B6E75;
    v26[5] = 0xE700000000000000;
  }
LABEL_49:
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v27;
}

uint64_t sub_100201984()
{
  return sub_1002014D4(*v0);
}

uint64_t sub_10020198C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100203D24(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void sub_100201AEC(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a1;
  id v13 = a5;
  sub_1002067C8((uint64_t)a4, (uint64_t)a5, a6);
}

char *sub_100201E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = v8;
  ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v19 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStart];
  *(void *)unint64_t v19 = a1;
  *((void *)v19 + 1) = a2;
  uint64_t v20 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate];
  *(void *)uint64_t v20 = a3;
  *((void *)v20 + 1) = a4;
  unint64_t v21 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onRangingLimitUpdate];
  *(void *)unint64_t v21 = a5;
  *((void *)v21 + 1) = a6;
  unint64_t v22 = &v9[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onInvalidation];
  *(void *)unint64_t v22 = a7;
  *((void *)v22 + 1) = a8;
  id v23 = objc_allocWithZone((Class)NISession);
  unint64_t v24 = v9;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v25 = [v23 init];
  *(void *)&v24[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session] = v25;
  uint64_t v26 = qword_100453928;
  id v27 = v25;
  if (v26 != -1) {
    swift_once();
  }
  [v27 setDelegateQueue:qword_100468A38];

  v34.receiver = v24;
  v34.super_class = ObjectType;
  uint64_t v28 = (char *)[super init];
  uint64_t v29 = *(void **)&v28[OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_session];
  unint64_t v30 = v28;
  [v29 setDelegate:v30];
  id v31 = [objc_allocWithZone((Class)NISystemConfiguration) init];
  [v31 setPrewarmUWB:1];
  [v31 setPrewarmSecureElementChannel:1];
  id v32 = v29;
  [v32 runWithConfiguration:v31];

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v30;
}

uint64_t type metadata accessor for UWBPrewarmSession()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for UWBAlishaSession.SessionHealth(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002025FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UWBAlishaSession.SessionHealth()
{
  return &type metadata for UWBAlishaSession.SessionHealth;
}

uint64_t getEnumTagSinglePayload for UWBSession.State(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for UWBSession.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    void *result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100202790);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UWBSession.State()
{
  return &type metadata for UWBSession.State;
}

ValueMetadata *type metadata accessor for UWBSession.SuspensionReasons()
{
  return &type metadata for UWBSession.SuspensionReasons;
}

ValueMetadata *type metadata accessor for DSKUWB.Exceptions()
{
  return &type metadata for DSKUWB.Exceptions;
}

unint64_t sub_1002027EC()
{
  unint64_t result = qword_100458788;
  if (!qword_100458788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458788);
  }
  return result;
}

unint64_t sub_100202844()
{
  unint64_t result = qword_100458790;
  if (!qword_100458790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458790);
  }
  return result;
}

unint64_t sub_10020289C()
{
  unint64_t result = qword_100458798;
  if (!qword_100458798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458798);
  }
  return result;
}

unint64_t sub_1002028F4()
{
  unint64_t result = qword_1004587A0;
  if (!qword_1004587A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587A0);
  }
  return result;
}

unint64_t sub_10020294C()
{
  unint64_t result = qword_1004587A8;
  if (!qword_1004587A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587A8);
  }
  return result;
}

unint64_t sub_1002029A4()
{
  unint64_t result = qword_1004587B0;
  if (!qword_1004587B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587B0);
  }
  return result;
}

unint64_t sub_1002029FC()
{
  unint64_t result = qword_1004587B8;
  if (!qword_1004587B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587B8);
  }
  return result;
}

unint64_t sub_100202A54()
{
  unint64_t result = qword_1004587C0;
  if (!qword_1004587C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587C0);
  }
  return result;
}

unint64_t sub_100202AAC()
{
  unint64_t result = qword_1004587C8;
  if (!qword_1004587C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587C8);
  }
  return result;
}

unint64_t sub_100202B04()
{
  unint64_t result = qword_1004587D0;
  if (!qword_1004587D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587D0);
  }
  return result;
}

Swift::Int sub_100202B58(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_100202FAC(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100203124);
  }
  uint64_t v1 = &_swiftEmptySetSingleton;
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for UWBSession();
    do
    {
      swift_dynamicCast();
      if (*(unsigned char *)(*(void *)&v13[OBJC_IVAR____TtC10seserviced10UWBSession_peer]
                    + OBJC_IVAR____TtC10seserviced4Peer_type) == 3)
      {
        unint64_t v2 = *((void *)&_swiftEmptySetSingleton + 2);
        if (*((void *)&_swiftEmptySetSingleton + 3) <= v2) {
          sub_1000EC644(v2 + 1);
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
        unsigned int v4 = (char *)&_swiftEmptySetSingleton + 56;
        uint64_t v5 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*((void *)&_swiftEmptySetSingleton + (v6 >> 6) + 7)) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*((void *)&_swiftEmptySetSingleton + (v6 >> 6) + 7))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)&v4[8 * v7];
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)&v4[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
        *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v8) = v13;
        ++*((void *)&_swiftEmptySetSingleton + 2);
      }
      else
      {
      }
    }
    while (__CocoaSet.Iterator.next()());
    uint64_t v1 = &_swiftEmptySetSingleton;
  }
  swift_release();
  return (Swift::Int)v1;
}

Swift::Int sub_100202D84(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_100202FAC(a1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1002032BC);
  }
  uint64_t v1 = &_swiftEmptySetSingleton;
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for UWBSession();
    do
    {
      swift_dynamicCast();
      if (*(unsigned char *)(*(void *)&v13[OBJC_IVAR____TtC10seserviced10UWBSession_peer]
                    + OBJC_IVAR____TtC10seserviced4Peer_type))
      {
      }
      else
      {
        unint64_t v2 = *((void *)&_swiftEmptySetSingleton + 2);
        if (*((void *)&_swiftEmptySetSingleton + 3) <= v2) {
          sub_1000EC644(v2 + 1);
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
        unsigned int v4 = (char *)&_swiftEmptySetSingleton + 56;
        uint64_t v5 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*((void *)&_swiftEmptySetSingleton + (v6 >> 6) + 7)) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*((void *)&_swiftEmptySetSingleton + (v6 >> 6) + 7))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)&v4[8 * v7];
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)&v4[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
        *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v8) = v13;
        ++*((void *)&_swiftEmptySetSingleton + 2);
      }
    }
    while (__CocoaSet.Iterator.next()());
    uint64_t v1 = &_swiftEmptySetSingleton;
  }
  swift_release();
  return (Swift::Int)v1;
}

uint64_t sub_100202FAC(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = a2((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v6, v4);
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    char v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    uint64_t v8 = a2((char *)v9, v6, v4);
    swift_release();
    swift_slowDealloc();
  }
  return v8;
}

uint64_t sub_100203124(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (unint64_t *)result;
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_7:
    Swift::Int result = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a3 + 48) + 8 * v15)
                                            + OBJC_IVAR____TtC10seserviced10UWBSession_peer)
                                + OBJC_IVAR____TtC10seserviced4Peer_type);
    if (result == 3)
    {
      *(unint64_t *)((char *)v5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v6++, 1)) {
        goto LABEL_26;
      }
    }
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_23:
    swift_retain();
    return sub_1000F9048(v5, a2, v6, a3);
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_1002032BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  char v5 = (unint64_t *)result;
  uint64_t v6 = 0;
  int64_t v7 = 0;
  uint64_t v8 = a3 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    int64_t v16 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v16 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v7;
    if (!v17)
    {
      int64_t v7 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v7);
      if (!v17)
      {
        int64_t v7 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v7);
        if (!v17) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
LABEL_7:
    Swift::Int result = *(unsigned __int8 *)(*(void *)(*(void *)(*(void *)(a3 + 48) + 8 * v15)
                                            + OBJC_IVAR____TtC10seserviced10UWBSession_peer)
                                + OBJC_IVAR____TtC10seserviced4Peer_type);
    if (!*(unsigned char *)(*(void *)(*(void *)(*(void *)(a3 + 48) + 8 * v15)
                               + OBJC_IVAR____TtC10seserviced10UWBSession_peer)
                   + OBJC_IVAR____TtC10seserviced4Peer_type))
    {
      *(unint64_t *)((char *)v5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v6++, 1)) {
        goto LABEL_26;
      }
    }
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v12)
  {
LABEL_23:
    swift_retain();
    return sub_1000F9048(v5, a2, v6, a3);
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100203454(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1002034F4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = type metadata accessor for LyonUWB();
  unint64_t v14 = &off_100411410;
  *(void *)&long long v12 = a3;
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_10010197C(&v12, a4[7] + 40 * a1);
  uint64_t v9 = a4[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

uint64_t sub_100203594(uint64_t a1, Swift::UInt a2, char a3, void *a4)
{
  uint64_t v8 = type metadata accessor for LyonUWB();
  uint64_t v28 = v8;
  uint64_t v29 = &off_100411410;
  *(void *)&long long v27 = a1;
  uint64_t v9 = (void *)*a4;
  unint64_t v11 = sub_1002C0AFC(a2);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v15 = v10;
  uint64_t v16 = v9[3];
  if (v16 >= v14 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v17 = (void *)*a4;
    if (v15)
    {
LABEL_8:
      uint64_t v18 = v17[7] + 40 * v11;
      sub_10007594C(v18);
      return sub_10010197C(&v27, v18);
    }
    goto LABEL_11;
  }
  if (v16 >= v14 && (a3 & 1) == 0)
  {
    sub_1002CC120();
    goto LABEL_7;
  }
  sub_1002C3168(v14, a3 & 1);
  unint64_t v20 = sub_1002C0AFC(a2);
  if ((v15 & 1) != (v21 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v11 = v20;
  unint64_t v17 = (void *)*a4;
  if (v15) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = sub_10019E154((uint64_t)&v27, v8);
  __chkstk_darwin(v22, v22);
  unint64_t v24 = (uint64_t *)((char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  sub_1002034F4(v11, a2, *v24, v17);
  return sub_10007594C((uint64_t)&v27);
}

uint64_t sub_100203774(uint64_t a1, uint64_t a2)
{
  return sub_100203958(a1, a2, sub_10020476C);
}

uint64_t sub_10020378C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, unint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = v3;
  char v8 = *(unsigned char *)(a1 + 32);
  unsigned int v9 = v8 & 0x3F;
  unint64_t v10 = (unint64_t)((1 << v8) + 63) >> 6;
  size_t v11 = 8 * v10;
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (v9 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v13);
    bzero((char *)&v18 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v11);
    swift_retain();
    uint64_t v14 = v5;
    uint64_t v15 = a3((char *)&v18 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0), v10, a1, a2);
    swift_release();
    swift_release();
    if (v14) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v16 = (void *)swift_slowAlloc();
    bzero(v16, v11);
    swift_retain();
    uint64_t v15 = a3((char *)v16, v10, a1, a2);
    swift_release();
    swift_release();
    swift_slowDealloc();
  }
  swift_release_n();
  return v15;
}

uint64_t sub_100203958(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = qword_100453928;
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *unint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v12)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      swift_beginAccess();
      swift_retain();
      uint64_t v15 = swift_bridgeObjectRetain();
      uint64_t v16 = (void *)a3(v15, a2);
      swift_release();
    }
    else
    {
      unint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        unint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not running", v19, 2u);
        swift_slowDealloc();
      }

      uint64_t v16 = &_swiftEmptySetSingleton;
    }
    swift_release();
    return (uint64_t)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100203BAC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v6) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11)
        {
          int64_t v7 = v10 + 3;
          if (v10 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v11 = *(void *)(v2 + 8 * v7);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_5:
    sub_1001F9B00(*(void *)(*(void *)(a1 + 48) + 8 * v9));
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_23;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100203D08(uint64_t a1, uint64_t a2)
{
  return sub_100203958(a1, a2, sub_10020428C);
}

uint64_t sub_100203D24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_100203D5C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UWBSession();
    sub_100204FC0();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v19;
    uint64_t v18 = v20;
    uint64_t v3 = v21;
    uint64_t v4 = v22;
    unint64_t v5 = v23;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v17 = (unint64_t)(v3 + 64) >> 6;
  while (1)
  {
    uint64_t v13 = v4;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for UWBSession();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v11 = v24;
      swift_unknownObjectRelease();
      if (!v24) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
    if (!v5) {
      break;
    }
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_9:
    uint64_t v11 = (uint64_t)*(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_34;
    }
LABEL_10:
    swift_retain();
    char v12 = static UUID.== infix(_:_:)();

    uint64_t result = swift_release();
    if (v12)
    {
      uint64_t v11 = 1;
      goto LABEL_34;
    }
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v17) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    ++v4;
    if (!v15)
    {
      uint64_t v4 = v13 + 2;
      if (v13 + 2 >= v17) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v4);
      if (!v15)
      {
        uint64_t v4 = v13 + 3;
        if (v13 + 3 >= v17) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v4);
        if (!v15)
        {
          uint64_t v4 = v13 + 4;
          if (v13 + 4 >= v17) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v4);
          if (!v15)
          {
            uint64_t v4 = v13 + 5;
            if (v13 + 5 >= v17) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v4);
            if (!v15)
            {
              uint64_t v16 = v13 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v4 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_33:
              uint64_t v11 = 0;
LABEL_34:
              sub_10008C4F0();
              return v11;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10020404C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 56);
  int64_t v23 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_retain();
  uint64_t v21 = 0;
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v23) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v23) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v22 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v23) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v22 + 8 * v8);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void **)(*(void *)(a3 + 48) + 8 * v10);
    swift_retain();
    id v12 = v11;
    swift_retain();
    char v13 = static UUID.== infix(_:_:)();

    swift_release();
    uint64_t result = swift_release();
    if (v13)
    {
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        uint64_t v18 = sub_1000F9048(a1, a2, v21, a3);
        swift_release();
        return v18;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v23) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v22 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v23) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_10020428C(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    swift_retain_n();
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for UWBSession();
      do
      {
        swift_dynamicCast();
        swift_retain();
        swift_retain();
        char v5 = static UUID.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v5)
        {
          unint64_t v6 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v6) {
            sub_1000EC644(v6 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          int64_t v8 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v9 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v10 = result & ~v9;
          unint64_t v11 = v10 >> 6;
          if (((-1 << v10) & ~*((void *)&_swiftEmptySetSingleton + (v10 >> 6) + 7)) != 0)
          {
            unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*((void *)&_swiftEmptySetSingleton + (v10 >> 6) + 7))) | v10 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v13 = 0;
            unint64_t v14 = (unint64_t)(63 - v9) >> 6;
            do
            {
              if (++v11 == v14 && (v13 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v15 = v11 == v14;
              if (v11 == v14) {
                unint64_t v11 = 0;
              }
              v13 |= v15;
              uint64_t v16 = *(void *)&v8[8 * v11];
            }
            while (v16 == -1);
            unint64_t v12 = __clz(__rbit64(~v16)) + (v11 << 6);
          }
          *(void *)&v8[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v12) = v17;
          ++*((void *)&_swiftEmptySetSingleton + 2);
        }
        else
        {
        }
      }
      while (__CocoaSet.Iterator.next()());
      uint64_t v4 = &_swiftEmptySetSingleton;
    }
    swift_release_n();
  }
  else
  {
    swift_retain();
    uint64_t v4 = (void *)sub_10020378C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_10020404C);
  }
  swift_release();
  return (Swift::Int)v4;
}

uint64_t sub_100204520(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a3 + 56);
  int64_t v23 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_retain();
  uint64_t v21 = 0;
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v14 >= v23) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v23) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v22 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v23) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v22 + 8 * v8);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_5:
    unint64_t v11 = *(void **)(*(void *)(a3 + 48) + 8 * v10);
    swift_retain();
    id v12 = v11;
    swift_retain();
    char v13 = static UUID.== infix(_:_:)();

    swift_release();
    uint64_t result = swift_release();
    if (v13)
    {
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        uint64_t v18 = sub_1000F9048(a1, a2, v21, a3);
        swift_release();
        return v18;
      }
    }
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v23) {
    goto LABEL_24;
  }
  unint64_t v15 = *(void *)(v22 + 8 * v16);
  if (v15)
  {
    int64_t v8 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v8 >= v23) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v22 + 8 * v8);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_10020476C(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = &_swiftEmptySetSingleton;
    swift_retain_n();
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for UWBSession();
      do
      {
        swift_dynamicCast();
        swift_retain();
        swift_retain();
        char v5 = static UUID.== infix(_:_:)();
        swift_release();
        swift_release();
        if (v5)
        {
          unint64_t v6 = *((void *)&_swiftEmptySetSingleton + 2);
          if (*((void *)&_swiftEmptySetSingleton + 3) <= v6) {
            sub_1000EC644(v6 + 1);
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
          int64_t v8 = (char *)&_swiftEmptySetSingleton + 56;
          uint64_t v9 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
          unint64_t v10 = result & ~v9;
          unint64_t v11 = v10 >> 6;
          if (((-1 << v10) & ~*((void *)&_swiftEmptySetSingleton + (v10 >> 6) + 7)) != 0)
          {
            unint64_t v12 = __clz(__rbit64((-1 << v10) & ~*((void *)&_swiftEmptySetSingleton + (v10 >> 6) + 7))) | v10 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v13 = 0;
            unint64_t v14 = (unint64_t)(63 - v9) >> 6;
            do
            {
              if (++v11 == v14 && (v13 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v15 = v11 == v14;
              if (v11 == v14) {
                unint64_t v11 = 0;
              }
              v13 |= v15;
              uint64_t v16 = *(void *)&v8[8 * v11];
            }
            while (v16 == -1);
            unint64_t v12 = __clz(__rbit64(~v16)) + (v11 << 6);
          }
          *(void *)&v8[(v12 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v12;
          *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v12) = v17;
          ++*((void *)&_swiftEmptySetSingleton + 2);
        }
        else
        {
        }
      }
      while (__CocoaSet.Iterator.next()());
      uint64_t v4 = &_swiftEmptySetSingleton;
    }
    swift_release_n();
  }
  else
  {
    swift_retain();
    uint64_t v4 = (void *)sub_10020378C(a1, a2, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t))sub_100204520);
  }
  swift_release();
  return (Swift::Int)v4;
}

void sub_100204A0C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id))
{
  int64_t v6 = 0;
  uint64_t v22 = a3 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v10) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v22 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v22 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    id v13 = *(id *)(*(void *)(a3 + 48) + 8 * v12);
    char v14 = a4(v13);

    if (v14)
    {
      *(unint64_t *)((char *)a1 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_1000F9048(a1, a2, v21, a3);
        return;
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v10) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v10) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_100204BDC(uint64_t isStackAllocationSafe, uint64_t (*a2)(id))
{
  uint64_t v4 = isStackAllocationSafe;
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    sub_100204A0C((unint64_t *)((char *)&v13 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    uint64_t v9 = v8;
    swift_release();
    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    int64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v7);
    sub_100204A0C((unint64_t *)v10, v6, v4, a2);
    uint64_t v9 = v11;
    swift_release();
    swift_slowDealloc();
  }
  return v9;
}

Swift::Int sub_100204D60(uint64_t a1, uint64_t (*a2)(id))
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_100204BDC(a1, a2);
  }
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for UWBSession();
    do
    {
      swift_dynamicCast();
      if (((uint64_t (*)())a2)())
      {
        unint64_t v3 = *((void *)&_swiftEmptySetSingleton + 2);
        if (*((void *)&_swiftEmptySetSingleton + 3) <= v3) {
          sub_1000EC644(v3 + 1);
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
        char v5 = (char *)&_swiftEmptySetSingleton + 56;
        uint64_t v6 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v7 = result & ~v6;
        unint64_t v8 = v7 >> 6;
        if (((-1 << v7) & ~*((void *)&_swiftEmptySetSingleton + (v7 >> 6) + 7)) != 0)
        {
          unint64_t v9 = __clz(__rbit64((-1 << v7) & ~*((void *)&_swiftEmptySetSingleton + (v7 >> 6) + 7))) | v7 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v10 = 0;
          unint64_t v11 = (unint64_t)(63 - v6) >> 6;
          do
          {
            if (++v8 == v11 && (v10 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v12 = v8 == v11;
            if (v8 == v11) {
              unint64_t v8 = 0;
            }
            v10 |= v12;
            uint64_t v13 = *(void *)&v5[8 * v8];
          }
          while (v13 == -1);
          unint64_t v9 = __clz(__rbit64(~v13)) + (v8 << 6);
        }
        *(void *)&v5[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
        *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v9) = v14;
        ++*((void *)&_swiftEmptySetSingleton + 2);
      }
      else
      {
      }
    }
    while (__CocoaSet.Iterator.next()());
  }
  swift_release();
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t sub_100204F6C()
{
  unint64_t result = qword_1004587E0;
  if (!qword_1004587E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004587E0);
  }
  return result;
}

unint64_t sub_100204FC0()
{
  unint64_t result = qword_100454E18;
  if (!qword_100454E18)
  {
    type metadata accessor for UWBSession();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100454E18);
  }
  return result;
}

uint64_t sub_100205018(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100205028()
{
  return swift_release();
}

uint64_t sub_100205030(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100458800);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100205098(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UWBSession();
    sub_100204FC0();
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v3 = v22;
    uint64_t v4 = v23;
    unint64_t v5 = v24;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    swift_retain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v17 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v19 = v1;
  while (1)
  {
    uint64_t v13 = v4;
    if (v1 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_33;
      }
      type metadata accessor for UWBSession();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v11 = v25;
      swift_unknownObjectRelease();
      if (!v25) {
        goto LABEL_34;
      }
      goto LABEL_10;
    }
    if (!v5) {
      break;
    }
    unint64_t v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_9:
    uint64_t v11 = (uint64_t)*(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v11) {
      goto LABEL_34;
    }
LABEL_10:
    swift_retain();
    swift_retain();
    char v12 = static UUID.== infix(_:_:)();

    swift_release();
    uint64_t result = swift_release();
    uint64_t v1 = v19;
    if (v12)
    {
      uint64_t v11 = 1;
      goto LABEL_34;
    }
  }
  int64_t v14 = v4 + 1;
  if (!__OFADD__(v4, 1))
  {
    if (v14 >= v17) {
      goto LABEL_33;
    }
    unint64_t v15 = *(void *)(v18 + 8 * v14);
    ++v4;
    if (!v15)
    {
      uint64_t v4 = v13 + 2;
      if (v13 + 2 >= v17) {
        goto LABEL_33;
      }
      unint64_t v15 = *(void *)(v18 + 8 * v4);
      if (!v15)
      {
        uint64_t v4 = v13 + 3;
        if (v13 + 3 >= v17) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v18 + 8 * v4);
        if (!v15)
        {
          uint64_t v4 = v13 + 4;
          if (v13 + 4 >= v17) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v18 + 8 * v4);
          if (!v15)
          {
            uint64_t v4 = v13 + 5;
            if (v13 + 5 >= v17) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v18 + 8 * v4);
            if (!v15)
            {
              uint64_t v16 = v13 + 6;
              while (v17 != v16)
              {
                unint64_t v15 = *(void *)(v18 + 8 * v16++);
                if (v15)
                {
                  uint64_t v4 = v16 - 1;
                  goto LABEL_28;
                }
              }
LABEL_33:
              uint64_t v11 = 0;
LABEL_34:
              sub_10008C4F0();
              swift_release();
              return v11;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v10 = __clz(__rbit64(v15)) + (v4 << 6);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1002053B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB is powered off", v11, 2u);
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) = 0;
    uint64_t v12 = v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_activeUseCases;
    swift_beginAccess();
    if (*(void *)(*(void *)v12 + 16))
    {
      swift_retain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        *(_DWORD *)unint64_t v15 = 136315138;
        sub_1002057A4();
        swift_bridgeObjectRetain();
        uint64_t v16 = Set.description.getter();
        unint64_t v18 = v17;
        swift_bridgeObjectRelease();
        v22[1] = sub_100290514(v16, v18, &v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Powering on UWB for %s", v15, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      id v19 = objc_allocWithZone((Class)type metadata accessor for UWBPrewarmSession());
      swift_retain_n();
      uint64_t v20 = sub_100201E34((uint64_t)sub_100205794, v1, (uint64_t)sub_100205798, v1, (uint64_t)sub_10020579C, v1, (uint64_t)sub_1002057A0, v1);
      uint64_t v21 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion);
      *(void *)(v1 + OBJC_IVAR____TtC10seserviced6DSKUWB_uwbPowerAssertion) = v20;
    }
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1002057A4()
{
  unint64_t result = qword_100458808;
  if (!qword_100458808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458808);
  }
  return result;
}

uint64_t sub_1002057F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = qword_100453928;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v8)
  {
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced6DSKUWB_isRunning) == 1)
    {
      swift_beginAccess();
      swift_retain();
      uint64_t v11 = swift_bridgeObjectRetain();
      char v12 = sub_100205098(v11);
      swift_bridgeObjectRelease();
      swift_release_n();
    }
    else
    {
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not running", v15, 2u);
        swift_slowDealloc();
      }
      swift_release();

      char v12 = 0;
    }
    return v12 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100205A40()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100205A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002005CC(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_100205A80()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  int v9 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state);
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = 4;
  if (v9 == 3)
  {
    uint64_t v10 = OBJC_IVAR____TtC10seserviced10UWBSession_onResumption;
  }
  else
  {
    if (v9) {
      return result;
    }
    uint64_t v10 = OBJC_IVAR____TtC10seserviced10UWBSession_onStart;
  }
  uint64_t v11 = *(void (**)(uint64_t))(v0 + v10);
  swift_retain();
  uint64_t v12 = swift_retain();
  v11(v12);
  swift_release();
  return swift_release();
}

uint64_t sub_100205C30(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v21 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = (uint64_t *)((char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_100468A38;
  *id v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = v8;
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v4 + 8);
  v13(v7, v3);
  if (v12)
  {
    v2[OBJC_IVAR____TtC10seserviced10UWBSession_state] = 1;
    if (qword_1004537A8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  os_log_type_t v14 = (void *)qword_100468A38;
  *id v7 = qword_100468A38;
  v10(v7, v9, v3);
  id v15 = v14;
  char v16 = _dispatchPreconditionTest(_:)();
  uint64_t result = ((uint64_t (*)(void *, uint64_t))v13)(v7, v3);
  if (v16)
  {
    swift_beginAccess();
    unint64_t v18 = (void *)sub_1000F5AA0(v2);
    swift_endAccess();

    id v19 = *(void (**)(uint64_t, uint64_t))&v2[OBJC_IVAR____TtC10seserviced10UWBSession_onInvalidation];
    uint64_t v20 = *(void *)&v2[OBJC_IVAR____TtC10seserviced10UWBSession_peer];
    swift_retain();
    swift_retain();
    v19(v21, v20);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100205EA4(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = (uint64_t *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *id v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 2) {
      char v11 = 6;
    }
    else {
      char v11 = 5;
    }
    *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = v11;
    if (a1 > 6) {
      unint64_t v12 = 0x8000000000000000;
    }
    else {
      unint64_t v12 = qword_10037BFD0[a1];
    }
    uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons);
    if ((v13 & v12) == 0)
    {
      v13 |= v12;
      *(void *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons) = v13;
    }
    os_log_type_t v14 = *(void (**)(uint64_t, uint64_t))(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension);
    uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain();
    swift_retain();
    v14(v13, v15);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100206088(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  id result = (id)(*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
LABEL_10:
    sub_1001FE3C8(0);
    *(unsigned char *)(v3 + a2) = 3;
    return sub_1001FF150();
  }
  if (a2)
  {
    *(void *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons) = 0;
    a2 = OBJC_IVAR____TtC10seserviced10UWBSession_state;
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 6)
    {
      *(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_state) = 2;
      return result;
    }
    if (qword_1004537A8 == -1) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
  if (a1 > 6) {
    unint64_t v14 = 0x8000000000000000;
  }
  else {
    unint64_t v14 = qword_10037BFD0[a1];
  }
  uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons);
  if ((v15 & v14) != 0)
  {
    v15 &= ~v14;
    *(void *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_suspensionReasons) = v15;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_onSuspension);
  uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
  swift_retain();
  swift_retain();
  v16(v15, v17);
  swift_release();
  return (id)swift_release();
}

uint64_t sub_1002062E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2
                                                           + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onOutgoingMessage);
    uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain();
    swift_retain();
    v13(a1, a2, v14);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100206484(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    if ((unint64_t)(a1 - 1) <= 3)
    {
      id v11 = *(void (**)(void, uint64_t))(v1
                                                   + OBJC_IVAR____TtC10seserviced16UWBAlishaSession_onSessionHealthUpdate);
      uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
      swift_retain();
      swift_retain();
      v11(0x3020001u >> (8 * (a1 - 1)), v12);
      swift_release();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100206630(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *id v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + *a3);
    uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain();
    v15(a1, a2, v16);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002067C8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (uint64_t *)((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *id v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + *a3);
    uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain();
    v15(a1, a2, v16);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100206958(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    id v13 = *(void (**)(uint64_t, uint64_t))(v2 + *a2);
    uint64_t v14 = *(void *)(v2 + OBJC_IVAR____TtC10seserviced10UWBSession_peer);
    swift_retain();
    v13(a1, v14);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100206AE0(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if (v8)
  {
    unsigned __int8 v11 = [a1 uwbPreciseDistanceAvailability];
    if ((v11 & 8) != 0)
    {
      if (v11)
      {
        uint64_t v12 = 34;
        if ((v11 & 2) == 0)
        {
LABEL_16:
          if ((v11 & 4) == 0 || (v12 & 0x10) != 0) {
            return (*(uint64_t (**)(uint64_t))(v1
          }
                                                      + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate))(v12);
LABEL_18:
          v12 |= 0x10uLL;
          return (*(uint64_t (**)(uint64_t))(v1
                                                    + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate))(v12);
        }
      }
      else
      {
        uint64_t v12 = 32;
        if ((v11 & 2) == 0) {
          goto LABEL_10;
        }
      }
    }
    else if (v11)
    {
      uint64_t v12 = 2;
      if ((v11 & 2) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v12 = 0;
      if ((v11 & 2) == 0)
      {
LABEL_10:
        if ((v11 & 4) == 0) {
          return (*(uint64_t (**)(uint64_t))(v1
        }
                                                    + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onStateUpdate))(v12);
        goto LABEL_18;
      }
    }
    v12 |= 4uLL;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_100206C98(char a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  sub_10007582C(0, &qword_100458830);
  uint64_t v11 = swift_dynamicCastMetatype();
  uint64_t v12 = 0;
  if (!v11)
  {
    sub_10007582C(0, &qword_100458838);
    uint64_t result = swift_dynamicCastMetatype();
    if (!result) {
      return result;
    }
    uint64_t v12 = 1;
  }
  return (*(uint64_t (**)(void, uint64_t))(v1
                                                    + OBJC_IVAR____TtC10seservicedP33_4D3BC54BA96E8438A66520691EE354E617UWBPrewarmSession_onRangingLimitUpdate))(a1 & 1, v12);
}

unsigned char *storeEnumTagSinglePayload for DSKUWB.UWBError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100206F20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKUWB.UWBError()
{
  return &type metadata for DSKUWB.UWBError;
}

unint64_t sub_100206F5C()
{
  unint64_t result = qword_100458840;
  if (!qword_100458840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458840);
  }
  return result;
}

void sub_100206FD0()
{
  qword_1004688A8 = (uint64_t)&off_10040F308;
}

void sub_100206FE4()
{
  qword_1004688B0 = (uint64_t)&off_10040F2B8;
}

void sub_100206FF8()
{
  qword_1004688B8 = (uint64_t)&off_10040E290;
}

unint64_t sub_10020700C(unsigned __int8 a1)
{
  int v1 = a1;
  unint64_t result = 17747;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 4347733;
      break;
    case 2:
      unint64_t result = 0x6163696669746F4ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x7261506472696854;
      break;
    case 5:
      unint64_t result = 0x6465767265736552;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0x2064696C61766E69;
      break;
  }
  return result;
}

uint64_t sub_100207178(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t result = 0x314D7075746573;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x324D7075746573;
      break;
    case 2:
      uint64_t result = 0x334D7075746573;
      break;
    case 3:
      uint64_t result = 0x344D7075746573;
      break;
    case 4:
    case 5:
      uint64_t result = 0x52646E6570737573;
      break;
    case 6:
    case 7:
      uint64_t result = 0x6552656D75736572;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      uint64_t result = 0x2064696C61766E69;
      break;
  }
  return result;
}

unint64_t sub_100207324(unsigned __int8 a1)
{
  int v1 = a1;
  unint64_t result = 0x746E657665;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x45676E69676E6172;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000023;
      break;
    case 4:
      unint64_t result = 0x6575716552656B72;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0x2064696C61766E69;
      break;
  }
  return result;
}

unint64_t sub_1002074C4(int a1)
{
  unint64_t result = 0xD000000000000016;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000020;
      break;
    case 3:
      unint64_t result = 0xD000000000000021;
      break;
    case 4:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0x2064696C61766E69;
      break;
  }
  return result;
}

uint64_t sub_100207614(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t result = 0x64657275636573;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x6572756365736E75;
      break;
    case 2:
      uint64_t result = 0x746375727473626FLL;
      break;
    case 3:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      uint64_t result = 0x2064696C61766E69;
      break;
  }
  return result;
}

unint64_t sub_100207750(unsigned __int8 a1)
{
  int v1 = a1;
  unint64_t result = 0x6669636570736E75;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      unint64_t result = 0x6C61756E616DLL;
      break;
    case 2:
      unint64_t result = 1869903201;
      break;
    case 3:
      unint64_t result = 0x656C756465686373;
      break;
    case 4:
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      unint64_t result = 0x2064696C61766E69;
      break;
  }
  return result;
}

uint64_t sub_1002078F4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_10020BFE4((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v16 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v11 = v4;
      goto LABEL_29;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v13 >= v16) {
      return sub_10008C4F0();
    }
    unint64_t v14 = *(void *)(v17 + 8 * v13);
    uint64_t v11 = v4 + 1;
    if (!v14)
    {
      uint64_t v11 = v4 + 2;
      if (v4 + 2 >= v16) {
        return sub_10008C4F0();
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v4 + 3;
        if (v4 + 3 >= v16) {
          return sub_10008C4F0();
        }
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v4 + 4;
          if (v4 + 4 >= v16) {
            return sub_10008C4F0();
          }
          unint64_t v14 = *(void *)(v17 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v4 + 5;
            if (v4 + 5 >= v16) {
              return sub_10008C4F0();
            }
            unint64_t v14 = *(void *)(v17 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v4 + 6;
              while (v16 != v15)
              {
                unint64_t v14 = *(void *)(v17 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
              return sub_10008C4F0();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    uint64_t v12 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v12) {
      return sub_10008C4F0();
    }
    while (1)
    {
      if (qword_1004537D8 != -1) {
        swift_once();
      }
      sub_100209764(v12, 0, 0);
      uint64_t result = swift_release();
      uint64_t v4 = v11;
      unint64_t v5 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for Peer();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v12 = v23;
        swift_unknownObjectRelease();
        uint64_t v11 = v4;
        uint64_t v9 = v5;
        if (v23) {
          continue;
        }
      }
      return sub_10008C4F0();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100207C14(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_10020BFE4((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v3 = v20;
    uint64_t v4 = v21;
    unint64_t v5 = v22;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v3 = ~v6;
    uint64_t v7 = -v6;
    if (v7 < 64) {
      uint64_t v8 = ~(-1 << v7);
    }
    else {
      uint64_t v8 = -1;
    }
    unint64_t v5 = v8 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v16 = (unint64_t)(v3 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v5)
    {
      uint64_t v9 = (v5 - 1) & v5;
      unint64_t v10 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v11 = v4;
      goto LABEL_29;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v12 >= v16) {
      return sub_10008C4F0();
    }
    unint64_t v13 = *(void *)(v17 + 8 * v12);
    uint64_t v11 = v4 + 1;
    if (!v13)
    {
      uint64_t v11 = v4 + 2;
      if (v4 + 2 >= v16) {
        return sub_10008C4F0();
      }
      unint64_t v13 = *(void *)(v17 + 8 * v11);
      if (!v13)
      {
        uint64_t v11 = v4 + 3;
        if (v4 + 3 >= v16) {
          return sub_10008C4F0();
        }
        unint64_t v13 = *(void *)(v17 + 8 * v11);
        if (!v13)
        {
          uint64_t v11 = v4 + 4;
          if (v4 + 4 >= v16) {
            return sub_10008C4F0();
          }
          unint64_t v13 = *(void *)(v17 + 8 * v11);
          if (!v13)
          {
            uint64_t v11 = v4 + 5;
            if (v4 + 5 >= v16) {
              return sub_10008C4F0();
            }
            unint64_t v13 = *(void *)(v17 + 8 * v11);
            if (!v13)
            {
              uint64_t v14 = v4 + 6;
              while (v16 != v14)
              {
                unint64_t v13 = *(void *)(v17 + 8 * v14++);
                if (v13)
                {
                  uint64_t v11 = v14 - 1;
                  goto LABEL_28;
                }
              }
              return sub_10008C4F0();
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v10);
    swift_retain();
    if (!v15) {
      return sub_10008C4F0();
    }
    while (1)
    {
      if (qword_1004536B0 != -1) {
        swift_once();
      }
      sub_1000CAD08();
      uint64_t result = swift_release();
      uint64_t v4 = v11;
      unint64_t v5 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for Peer();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v11 = v4;
        uint64_t v9 = v5;
        if (v23) {
          continue;
        }
      }
      return sub_10008C4F0();
    }
  }
  __break(1u);
  return result;
}

void sub_100207F2C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10012AE84();
    sub_10020BFE4((unint64_t *)&qword_1004556F0, (void (*)(uint64_t))sub_10012AE84);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v22;
    uint64_t v21 = v23;
    uint64_t v2 = v24;
    uint64_t v3 = v25;
    unint64_t v4 = v26;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v21 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v19 = v2;
  int64_t v20 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v8 = (v4 - 1) & v4;
      unint64_t v9 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v10 = v3;
      goto LABEL_29;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v12 >= v20) {
      goto LABEL_34;
    }
    unint64_t v13 = *(void *)(v21 + 8 * v12);
    uint64_t v10 = v3 + 1;
    if (!v13)
    {
      uint64_t v10 = v3 + 2;
      if (v3 + 2 >= v20) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v21 + 8 * v10);
      if (!v13)
      {
        uint64_t v10 = v3 + 3;
        if (v3 + 3 >= v20) {
          goto LABEL_34;
        }
        unint64_t v13 = *(void *)(v21 + 8 * v10);
        if (!v13)
        {
          uint64_t v10 = v3 + 4;
          if (v3 + 4 >= v20) {
            goto LABEL_34;
          }
          unint64_t v13 = *(void *)(v21 + 8 * v10);
          if (!v13)
          {
            uint64_t v10 = v3 + 5;
            if (v3 + 5 >= v20) {
              goto LABEL_34;
            }
            unint64_t v13 = *(void *)(v21 + 8 * v10);
            if (!v13)
            {
              uint64_t v14 = v3 + 6;
              while (v20 != v14)
              {
                unint64_t v13 = *(void *)(v21 + 8 * v14++);
                if (v13)
                {
                  uint64_t v10 = v14 - 1;
                  goto LABEL_28;
                }
              }
LABEL_34:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
LABEL_29:
    id v11 = *(id *)(*(void *)(v1 + 48) + 8 * v9);
    if (!v11) {
      goto LABEL_34;
    }
    while (1)
    {
      if (qword_100453680 != -1) {
        swift_once();
      }
      id v15 = [v11 publicKeyIdentifier:v19];
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v18 = v17;

      sub_10009BBC4(v16, v18);
      sub_10006D144(v16, (unint64_t)v18);

      uint64_t v3 = v10;
      unint64_t v4 = v8;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        sub_10012AE84();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v11 = v27;
        swift_unknownObjectRelease();
        uint64_t v10 = v3;
        uint64_t v8 = v4;
        if (v27) {
          continue;
        }
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t sub_10020827C(uint64_t a1)
{
  uint64_t v88 = a1;
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  uint64_t v7 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 104);
  v8(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v9 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  uint64_t v10 = *(void (**)(void *, uint64_t))(v2 + 8);
  v10(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_52:
    swift_once();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v89 + 24) != 1)
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not running", v16, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    char v13 = 1;
    goto LABEL_37;
  }
  if (*(unsigned char *)(v88 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) != 1)
  {
    sub_1000C7D10();
    swift_allocError();
    char v13 = 4;
    goto LABEL_37;
  }
  if (qword_1004536B0 != -1) {
    goto LABEL_52;
  }
LABEL_7:
  int v11 = sub_1000CBD8C();
  if (v11 == 2)
  {
LABEL_8:
    sub_1000C7D10();
    swift_allocError();
    char v13 = 3;
LABEL_37:
    *int64_t v12 = v13;
    return swift_willThrow();
  }
  LODWORD(v86) = v11;
  if (qword_1004537A8 != -1) {
    swift_once();
  }
  uint64_t v85 = qword_100468890;
  uint64_t v17 = (void *)qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  v8(v5, v7, v1);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  v10(v5, v1);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_54:
    swift_once();
    goto LABEL_47;
  }
  int v20 = v86 & 1;
  uint64_t v21 = (uint64_t *)(v85 + OBJC_IVAR____TtC10seserviced6DSKUWB_rangingLimitExceeded);
  swift_beginAccess();
  BOOL v22 = sub_1000B6E14(0, *v21);
  uint64_t v23 = self;
  uint64_t v24 = OBJC_IVAR____TtC10seserviced4Peer_expressState;
  uint64_t v25 = v88;
  BOOL v26 = *(unsigned __int8 *)(v88 + OBJC_IVAR____TtC10seserviced4Peer_expressState) == 2;
  uint64_t v86 = v88 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  UUID.uuidString.getter();
  NSString v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10004F0E0(v23, v26, v22, v27);

  int v28 = *(unsigned __int8 *)(v25 + v24);
  if (v28 != 1)
  {
    if (v28 == 2 && !v20)
    {
      sub_100050018(v23, @"unlockNeededForCarActionCount");
      unint64_t v29 = *(void *)(v88 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
      if (v29 >> 60 != 15)
      {
        unint64_t v30 = *(void *)(v88 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        if (v30 >> 60 != 15)
        {
          uint64_t v32 = *(void *)(v88 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          uint64_t v88 = *(void *)(v88 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
          uint64_t v31 = v88;
          *(void *)&long long v89 = v32;
          sub_10006C51C(&qword_1004555D0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100378290;
          *(void *)(inited + 32) = 0xD000000000000014;
          *(void *)(inited + 40) = 0x80000001003B74E0;
          sub_1000758F4(v31, v29);
          sub_1000758F4(v32, v30);
          sub_1000758F4(v31, v29);
          sub_1000758F4(v32, v30);
          uint64_t v34 = v87;
          uint64_t v35 = sub_10023CDF4(v31, v29);
          uint64_t v87 = v34;
          uint64_t v90 = (uint64_t)v35;
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_1000756D0();
          uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v38 = v37;
          swift_bridgeObjectRelease();
          uint64_t v90 = v36;
          uint64_t v91 = v38;
          v39._countAndFlagsBits = 58;
          v39._object = (void *)0xE100000000000000;
          String.append(_:)(v39);
          uint64_t v92 = (uint64_t)sub_10023CDF4(v89, v30);
          uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v42 = v41;
          swift_bridgeObjectRelease();
          v43._countAndFlagsBits = v40;
          v43._object = v42;
          String.append(_:)(v43);
          swift_bridgeObjectRelease();
          uint64_t v44 = v90;
          uint64_t v45 = v91;
          *(void *)(inited + 72) = &type metadata for String;
          *(void *)(inited + 48) = v44;
          *(void *)(inited + 56) = v45;
          unint64_t v46 = sub_1001DB224(inited);
          uint64_t v47 = v88;
          uint64_t v48 = v89;
          sub_1002B9140(0xD000000000000025, 0x80000001003B74B0, v88, v29, v89, v30, v46);
          swift_bridgeObjectRelease();
          sub_100075868(v48, v30);
          sub_100075868(v47, v29);
          sub_100075868(v48, v30);
          sub_100075868(v47, v29);
        }
      }
      goto LABEL_8;
    }
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 136315138;
      uint64_t v90 = v52;
      *(void *)&long long v89 = v51 + 4;
      LOBYTE(v92) = *(unsigned char *)(v25 + v24);
      uint64_t v53 = String.init<A>(describing:)();
      uint64_t v92 = sub_100290514(v53, v54, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Not sending device intent because of express state %s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_35:
      swift_slowDealloc();
      goto LABEL_36;
    }
    swift_release_n();
LABEL_36:

    sub_1000C7D10();
    swift_allocError();
    char v13 = 2;
    goto LABEL_37;
  }
  uint64_t v55 = qword_100468890;
  if (*(unsigned char *)(qword_100468890 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable) != 1)
  {
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v49, v57)) {
      goto LABEL_36;
    }
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    uint64_t v59 = "Not sending device intent because ranging is not available";
    goto LABEL_34;
  }
  swift_retain();
  char v56 = sub_100203BA8(v55, v25);
  swift_release();
  if ((v56 & 1) == 0)
  {
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v49, v57)) {
      goto LABEL_36;
    }
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    uint64_t v59 = "Not sending device intent because of no UWB session";
    goto LABEL_34;
  }
  if (v22)
  {
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v49, v57)) {
      goto LABEL_36;
    }
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v58 = 0;
    uint64_t v59 = "Not sending device intent because of ranging limit reached";
LABEL_34:
    _os_log_impl((void *)&_mh_execute_header, v49, v57, v59, v58, 2u);
    goto LABEL_35;
  }
  LOBYTE(v5) = v20 ^ 1;
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.info.getter();
  BOOL v63 = os_log_type_enabled(v61, v62);
  uint64_t v85 = v23;
  if (v63)
  {
    id v64 = (uint8_t *)swift_slowAlloc();
    uint64_t v65 = swift_slowAlloc();
    *(_DWORD *)id v64 = 136315138;
    uint64_t v90 = v65;
    if (v20) {
      uint64_t v66 = 7827308;
    }
    else {
      uint64_t v66 = 0x6D756964656DLL;
    }
    if (v20) {
      unint64_t v67 = 0xE300000000000000;
    }
    else {
      unint64_t v67 = 0xE600000000000000;
    }
    uint64_t v92 = sub_100290514(v66, v67, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Sending device intent with %s confidence", v64, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_100453798 != -1) {
    goto LABEL_54;
  }
LABEL_47:
  sub_10006C51C(&qword_1004568A8);
  uint64_t v68 = swift_allocObject();
  long long v89 = xmmword_1003782A0;
  *(_OWORD *)(v68 + 16) = xmmword_1003782A0;
  *(unsigned char *)(v68 + 32) = 3;
  *(unsigned char *)(v68 + 33) = (_BYTE)v5;
  uint64_t v69 = sub_100088F40(v68);
  unint64_t v71 = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = sub_1001F28F8(3, 17, v69, v71);
  unint64_t v74 = v73;
  sub_10006D144(v69, v71);
  uint64_t v75 = v87;
  sub_1000CB6FC(v72, v74);
  if (v75)
  {
    sub_1000C7D10();
    swift_allocError();
    unsigned char *v76 = 2;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    UUID.uuidString.getter();
    char v78 = (char)v5;
    NSString v79 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v80 = v85;
    sub_10004F274(v85, isa, v79);

    sub_100050018(v80, @"deviceIntentCount");
    NSString v81 = String._bridgeToObjectiveC()();
    sub_10006C51C(&qword_1004555D0);
    uint64_t v82 = swift_initStackObject();
    *(_OWORD *)(v82 + 16) = v89;
    *(void *)(v82 + 32) = 0x4449555572656550;
    *(void *)(v82 + 40) = 0xE800000000000000;
    *(void *)(v82 + 48) = UUID.uuidString.getter();
    *(void *)(v82 + 56) = v83;
    *(void *)(v82 + 72) = &type metadata for String;
    *(void *)(v82 + 80) = 0x6E656469666E6F43;
    *(void *)(v82 + 88) = 0xEF6C6576654C6563;
    *(void *)(v82 + 120) = &type metadata for UInt8;
    *(unsigned char *)(v82 + 96) = v78;
    sub_1001DB224(v82);
    Class v84 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    PLLogRegisteredEvent();
  }
  return sub_10006D144(v72, v74);
}

void sub_100208F38()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void (**)(void *, void, uint64_t))((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  unsigned int v8 = enum case for DispatchPredicate.onQueue(_:);
  id v9 = *(void (**)(void *, void, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  int v11 = *(void (**)(void *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  char v12 = *(unsigned char *)(v1 + 24);
  char v13 = Logger.logObject.getter();
  if ((v12 & 1) == 0)
  {
    uint64_t v37 = v9;
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v16, "Starting AlishaBLE", v17, 2u);
      swift_slowDealloc();
    }
    unsigned int v38 = v8;

    *(unsigned char *)(v1 + 24) = 1;
    if (qword_100453910 == -1)
    {
LABEL_11:
      uint64_t v20 = __chkstk_darwin(v18, v19);
      *(&v37 - 4) = (void (*)(void *, void, uint64_t))sub_1001F2530;
      *(&v37 - 3) = 0;
      *(&v37 - 2) = v21;
      __chkstk_darwin(v20, v22);
      *(&v37 - 2) = (void (*)(void *, void, uint64_t))sub_1000B61A0;
      *(&v37 - 1) = v23;
      uint64_t v25 = v24 + 4;
      os_unfair_lock_lock(v24 + 4);
      sub_1000AA804(&v39);
      os_unfair_lock_unlock(v25);
      uint64_t v26 = v39;
      sub_1002078F4(v39);
      sub_100209D3C(v26);
      uint64_t v27 = swift_bridgeObjectRelease();
      if (qword_1004536D8 != -1) {
        uint64_t v27 = swift_once();
      }
      uint64_t v29 = __chkstk_darwin(v27, v28);
      *(&v37 - 4) = (void (*)(void *, void, uint64_t))sub_1000A2570;
      *(&v37 - 3) = 0;
      *(&v37 - 2) = v30;
      __chkstk_darwin(v29, v31);
      *(&v37 - 2) = (void (*)(void *, void, uint64_t))sub_1000A2ABC;
      *(&v37 - 1) = v32;
      uint64_t v34 = v33 + 4;
      os_unfair_lock_lock(v33 + 4);
      sub_100079ACC(&v39);
      os_unfair_lock_unlock(v34);
      sub_100207F2C(v39);
      swift_bridgeObjectRelease();
      uint64_t v35 = qword_100468A38;
      *uint64_t v6 = qword_100468A38;
      v37(v6, v38, v2);
      id v36 = (id)v35;
      LOBYTE(v35) = _dispatchPreconditionTest(_:)();
      v11(v6, v2);
      if (v35)
      {
        if (qword_1004536B8 == -1)
        {
LABEL_15:
          sub_1000CF2A0(0xD000000000000011, 0x80000001003B0C70, (void *)qword_100468688);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      swift_once();
      goto LABEL_15;
    }
LABEL_17:
    uint64_t v18 = swift_once();
    goto LABEL_11;
  }
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "AlishaBLE is already running", v15, 2u);
    swift_slowDealloc();
  }
}

void sub_100209400()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    uint64_t v13 = swift_once();
LABEL_8:
    uint64_t v15 = __chkstk_darwin(v13, v14);
    *(&v23 - 4) = (uint64_t)sub_1000B5774;
    *(&v23 - 3) = 0;
    *(&v23 - 2) = v16;
    __chkstk_darwin(v15, v17);
    *(&v23 - 2) = (uint64_t)sub_100079AAC;
    *(&v23 - 1) = v18;
    uint64_t v20 = v19 + 4;
    os_unfair_lock_lock(v19 + 4);
    sub_100079ACC(&v24);
    os_unfair_lock_unlock(v20);
    sub_100207C14(v24);
    swift_bridgeObjectRelease();
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000D8144(0, (uint64_t)&_swiftEmptySetSingleton, 128);
    *(unsigned char *)(v1 + 24) = 0;
    return;
  }
  int v9 = *(unsigned __int8 *)(v1 + 24);
  id v10 = Logger.logObject.getter();
  if (v9 == 1)
  {
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping AlishaBLE", v12, 2u);
      swift_slowDealloc();
    }

    if (qword_100453910 == -1) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v21, "AlishaBLE is not running", v22, 2u);
    swift_slowDealloc();
  }
}

void sub_100209764(uint64_t a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  char v12 = (void *)((char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *char v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_26:
    swift_once();
LABEL_7:
    v44[0] = qword_100468680;
    sub_10006C51C(&qword_1004548C0);
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_100378290;
    unint64_t v22 = v21 + v20;
    if (qword_1004538E8 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_10008E55C(v18, (uint64_t)qword_100468A00);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v22, v23, v18);
    uint64_t v24 = *(void *)(v4 + 16);
    int v25 = a2 & 1;
    if (v25) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v8;
    }
    if (v25) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = (uint64_t)v12;
    }
    type metadata accessor for DSKBLE.BLEConnectionRequest();
    swift_allocObject();
    *(void *)&long long v43 = sub_10020BFD8;
    *((void *)&v43 + 1) = v4;
    *(void *)&long long v42 = sub_10020BFD4;
    *((void *)&v42 + 1) = v4;
    *(void *)&long long v41 = sub_10020BFCC;
    *((void *)&v41 + 1) = v4;
    *(void *)&long long v40 = sub_10020BFC8;
    *((void *)&v40 + 1) = v4;
    *(void *)&long long v39 = sub_10020BFB0;
    *((void *)&v39 + 1) = v4;
    uint64_t v28 = sub_1000DAA98(a1, 893797958, 0xE400000000000000, v21, v24, v26, v27, v25, 0, v39, v40, v41, v42, v43, (uint64_t)sub_10020BFDC, v4);
    swift_retain_n();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1000CE648(v28, a3 & 1);
    swift_release();
    if (a3) {
      sub_1000D5BEC(v8, (uint64_t)v12, 0, 256);
    }
    swift_release();
    return;
  }
  if (*(unsigned char *)(v4 + 24) == 1)
  {
    type metadata accessor for AlishaPeer();
    uint64_t v15 = swift_dynamicCastClass();
    if (!v15)
    {
      swift_retain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        uint64_t v45 = v35;
        swift_retain();
        uint64_t v36 = UUID.uuidString.getter();
        unint64_t v38 = v37;
        swift_release();
        unint64_t v44[2] = sub_100290514(v36, v38, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to cast Peer to AlishaPeer %s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      return;
    }
    uint64_t v16 = *(void *)(v15 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration);
    uint64_t v8 = *(void *)(v16 + 96);
    char v12 = *(void **)(v16 + 104);
    uint64_t v17 = qword_1004536B0;
    swift_retain();
    if (v17 == -1) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Not running", v31, 2u);
    swift_slowDealloc();
  }
}

void sub_100209D3C(uint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (!__CocoaSet.count.getter()) {
      return;
    }
  }
  else if (!*(void *)(a1 + 16))
  {
    return;
  }
  swift_retain();
  sub_10020BA8C(a1);
  uint64_t v3 = v2;
  swift_release();
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(v3 + 32);
    unint64_t v6 = v4 - 1;
    if (v4 == 1) {
      goto LABEL_21;
    }
    if (v4 >= 5)
    {
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v10 = vdupq_n_s64(v5);
      uint64_t v11 = (int64x2_t *)(v3 + 56);
      unint64_t v12 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v13 = v10;
      do
      {
        int64x2_t v10 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v10, v11[-1]), (int8x16_t)v11[-1], (int8x16_t)v10);
        int64x2_t v13 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, *v11), *(int8x16_t *)v11, (int8x16_t)v13);
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      int8x16_t v14 = vbslq_s8((int8x16_t)vcgtq_s64(v13, v10), (int8x16_t)v10, (int8x16_t)v13);
      uint64_t v15 = vextq_s8(v14, v14, 8uLL).u64[0];
      uint64_t v5 = (uint64_t)vbsl_s8((int8x8_t)vcgtd_s64(v15, v14.i64[0]), *(int8x8_t *)v14.i8, (int8x8_t)v15);
      if (v6 == (v6 & 0xFFFFFFFFFFFFFFFCLL)) {
        goto LABEL_21;
      }
    }
    else
    {
      unint64_t v7 = 1;
    }
    unint64_t v16 = v4 - v7;
    uint64_t v17 = (uint64_t *)(v3 + 8 * v7 + 32);
    do
    {
      uint64_t v19 = *v17++;
      uint64_t v18 = v19;
      if (v19 < v5) {
        uint64_t v5 = v18;
      }
      --v16;
    }
    while (v16);
LABEL_21:
    swift_bridgeObjectRelease();
    if (qword_1004536B0 == -1)
    {
      if (v5 >= -128) {
        goto LABEL_23;
      }
    }
    else
    {
      swift_once();
      if (v5 >= -128)
      {
LABEL_23:
        if (v5 <= 127)
        {
          sub_1000D8144(0, a1, v5);
          return;
        }
LABEL_28:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  oslog = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Failed to get RSSI hint", v9, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100209F68()
{
  type metadata accessor for AlishaBLE();
  swift_allocObject();
  uint64_t result = sub_100209FA8();
  qword_1004688C0 = result;
  return result;
}

uint64_t sub_100209FA8()
{
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378470;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v3;
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 96) = 6;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v4;
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = 21;
  *(void *)(v0 + 16) = sub_1001DB224(inited);
  *(unsigned char *)(v0 + 24) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  if (qword_100453928 != -1) {
    swift_once();
  }
  aBlock[4] = sub_10020BA70;
  aBlock[5] = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002B9D80;
  aBlock[3] = &unk_100415C90;
  uint64_t v5 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v5);
  return v0;
}

_DWORD *sub_10020A17C()
{
  char v1 = *(unsigned char *)(v0 + 24);
  os_log_type_t v8 = &type metadata for Bool;
  LOBYTE(v7) = v1;
  sub_1000761D0(&v7, v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v6, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1000190DC((uint64_t)"alishable.state", (uint64_t)isa);

  return v4;
}

uint64_t sub_10020A268(uint64_t a1, NSObject *a2)
{
  uint64_t v44 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  long long v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (void *)((char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Read characteristics", v17, 2u);
    swift_slowDealloc();
  }

  if (qword_1004538E8 != -1) {
    goto LABEL_27;
  }
LABEL_7:
  uint64_t v18 = sub_10008E55C(v3, (uint64_t)qword_100468A00);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v18, v3);
  if (*(void *)(a1 + 16) && (unint64_t v19 = sub_1002C09FC((uint64_t)v7), (v20 & 1) != 0))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_10006D0EC(*v21, v23);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    switch(v23 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v22) - v22;
        if (__OFSUB__(HIDWORD(v22), v22))
        {
          __break(1u);
LABEL_29:
          __break(1u);
          JUMPOUT(0x10020A9CCLL);
        }
        uint64_t v24 = (int)v24;
LABEL_18:
        if (v24 == 2)
        {
          if (qword_1004537E0 != -1) {
            swift_once();
          }
          sub_10020E3C8(v44);
          uint64_t result = sub_10007D08C(v22, v23, 0, 0, 0);
        }
        else
        {
LABEL_22:
          sub_10006D0EC(v22, v23);
          sub_10006D0EC(v22, v23);
          uint64_t v36 = Logger.logObject.getter();
          os_log_type_t v37 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v36, v37))
          {
            unint64_t v38 = (uint8_t *)swift_slowAlloc();
            uint64_t v44 = swift_slowAlloc();
            unint64_t v46 = v44;
            *(_DWORD *)unint64_t v38 = 136315138;
            v43[1] = v38 + 4;
            uint64_t v45 = (uint64_t)sub_10023CDF4(v22, v23);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_1000756D0();
            uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v41 = v40;
            swift_bridgeObjectRelease();
            uint64_t v45 = sub_100290514(v39, v41, (uint64_t *)&v46);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v22, v23);
            sub_10006D144(v22, v23);
            _os_log_impl((void *)&_mh_execute_header, v36, v37, "Incorrect PSM length %s", v38, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            sub_10006D144(v22, v23);
            sub_10006D144(v22, v23);
          }
          sub_10007567C();
          swift_allocError();
          *long long v42 = 0;
          swift_willThrow();
          uint64_t result = sub_10006D144(v22, v23);
        }
        break;
      case 2uLL:
        uint64_t v34 = *(void *)(v22 + 16);
        uint64_t v33 = *(void *)(v22 + 24);
        BOOL v35 = __OFSUB__(v33, v34);
        uint64_t v24 = v33 - v34;
        if (!v35) {
          goto LABEL_18;
        }
        goto LABEL_29;
      case 3uLL:
        goto LABEL_22;
      default:
        uint64_t v24 = BYTE6(v23);
        goto LABEL_18;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain_n();
    int v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      unint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315138;
      sub_10020BFE4((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v28 = Dictionary.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v45 = sub_100290514(v28, v30, (uint64_t *)&v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "PSM characteristic not found %s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10007567C();
    swift_allocError();
    *uint64_t v31 = 0;
    return swift_willThrow();
  }
  return result;
}

void sub_10020A9DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Channel established", v13, 2u);
    swift_slowDealloc();
  }

  if (!a1)
  {
    if (qword_100453798 == -1)
    {
LABEL_10:
      sub_1001EE56C(a2);
      return;
    }
LABEL_13:
    swift_once();
    goto LABEL_10;
  }
  swift_errorRetain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  swift_retain();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    swift_retain();
    uint64_t v17 = UUID.uuidString.getter();
    unint64_t v19 = v18;
    swift_release();
    uint64_t v23 = sub_100290514(v17, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v20 = Error.localizedDescription.getter();
    uint64_t v23 = sub_100290514(v20, v21, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error during connection attempt to %s %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_release_n();

    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_10020ADD8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v22 = a2;
  unint64_t v23 = a3;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (unint64_t *)((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  uint64_t v10 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v11 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v12 = v9;
  char v13 = _dispatchPreconditionTest(_:)();
  id v14 = *(void (**)(void *, uint64_t))(v5 + 8);
  v14(v8, v4);
  if (v13)
  {
    if (qword_100453798 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v15 = qword_100468880;
  uint64_t v16 = (void *)qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  v11(v8, v10, v4);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  v14(v8, v4);
  if (v18)
  {
    if (*(unsigned char *)(v15 + 16) == 1)
    {
      swift_retain();
      sub_1001F4C54(a1, v22, 1, v23, v15, v15);
      swift_release();
    }
    else
    {
      unint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        unint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Not running", v21, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10020B06C(void (*a1)(void *, uint64_t))
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Disconnected", v11, 2u);
    swift_slowDealloc();
  }

  if (qword_100453798 != -1) {
    goto LABEL_9;
  }
LABEL_7:
  sub_1001EE98C(a1);
}

void sub_10020B264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  os_log_type_t v10 = (uint64_t *)((char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_100468A38;
  *os_log_type_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = v11;
  char v13 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_8;
  }
  swift_retain_n();
  id v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v23 = a1;
    uint64_t v24 = v17;
    *(_DWORD *)uint64_t v16 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2048;
    uint64_t v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2048;
    uint64_t v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 32) = 2080;
    swift_retain();
    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v20 = v19;
    swift_release();
    uint64_t v23 = sub_100290514(v18, v20, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Time sync event type %ld ticks %llu counter %llu peer %s", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (qword_1004537E0 != -1) {
    goto LABEL_10;
  }
LABEL_8:
  sub_10020C608(a1, v21, v22, a4);
}

void sub_10020B5B4(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once();
    goto LABEL_10;
  }
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) != 2) {
    return;
  }
  if ((a1 & 1) == 0)
  {
    sub_10020827C(a2);
    if (qword_1004537E0 != -1) {
      swift_once();
    }
    sub_10020CD38(0, a2);
    return;
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Sending RANGING_SESSION_NOT_REQUIRED", v13, 2u);
    swift_slowDealloc();
  }

  if (qword_100453798 != -1) {
    goto LABEL_18;
  }
LABEL_10:
  uint64_t v14 = sub_100088F40((uint64_t)&off_10040F330);
  unint64_t v16 = v15;
  uint64_t v17 = sub_1001F28F8(3, 17, v14, v15);
  unint64_t v19 = v18;
  sub_10006D144(v14, v16);
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  sub_1000CB6FC(v17, v19);
  sub_10006D144(v17, v19);
}

uint64_t sub_10020B8CC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced9AlishaBLE_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10020B974()
{
  return type metadata accessor for AlishaBLE();
}

uint64_t type metadata accessor for AlishaBLE()
{
  uint64_t result = qword_1004588E0;
  if (!qword_1004588E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10020B9C8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10020BA74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10020BA84()
{
  return swift_release();
}

void sub_10020BA8C(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_10020BFE4((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v31;
    uint64_t v30 = v32;
    uint64_t v3 = v33;
    uint64_t v2 = v34;
    unint64_t v4 = v35;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v3 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
  }
  int64_t v29 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v28 = (char *)_swiftEmptyArrayStorage;
  while (v1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_41;
    }
    type metadata accessor for Peer();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v11 = v36;
    swift_unknownObjectRelease();
    uint64_t v10 = v2;
    uint64_t v8 = v4;
    if (!v11) {
      goto LABEL_41;
    }
LABEL_32:
    type metadata accessor for AlishaPeer();
    uint64_t v16 = swift_dynamicCastClass();
    if (v16)
    {
      uint64_t v22 = v10;
      uint64_t v23 = *(void *)(*(void *)(v16 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 104);
      swift_release();
      uint64_t v24 = v28;
      unint64_t v25 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v24 = sub_1002590E8(0, *((void *)v28 + 2) + 1, 1, v28);
      }
      unint64_t v27 = *((void *)v24 + 2);
      unint64_t v26 = *((void *)v24 + 3);
      if (v27 >= v26 >> 1) {
        uint64_t v24 = sub_1002590E8((char *)(v26 > 1), v27 + 1, 1, v24);
      }
      *((void *)v24 + 2) = v27 + 1;
      uint64_t v28 = v24;
      *(void *)&v24[8 * v27 + 32] = v23;
      uint64_t v2 = v22;
      unint64_t v4 = v25;
    }
    else
    {
      swift_retain_n();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136315138;
        type metadata accessor for UUID();
        sub_10020BFE4((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v19 + 4) = sub_100290514(v20, v21, &v36);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to cast Peer to AlishaPeer %s", (uint8_t *)v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_release_n();
      }

      uint64_t v2 = v10;
      unint64_t v4 = v8;
    }
  }
  if (v4)
  {
    uint64_t v8 = (v4 - 1) & v4;
    unint64_t v9 = __clz(__rbit64(v4)) | (v2 << 6);
    uint64_t v10 = v2;
LABEL_31:
    uint64_t v15 = *(void *)(*(void *)(v1 + 48) + 8 * v9);
    swift_retain();
    if (!v15) {
      goto LABEL_41;
    }
    goto LABEL_32;
  }
  int64_t v12 = v2 + 1;
  if (!__OFADD__(v2, 1))
  {
    if (v12 >= v29) {
      goto LABEL_41;
    }
    unint64_t v13 = *(void *)(v30 + 8 * v12);
    uint64_t v10 = v2 + 1;
    if (!v13)
    {
      uint64_t v10 = v2 + 2;
      if (v2 + 2 >= v29) {
        goto LABEL_41;
      }
      unint64_t v13 = *(void *)(v30 + 8 * v10);
      if (!v13)
      {
        uint64_t v10 = v2 + 3;
        if (v2 + 3 >= v29) {
          goto LABEL_41;
        }
        unint64_t v13 = *(void *)(v30 + 8 * v10);
        if (!v13)
        {
          uint64_t v10 = v2 + 4;
          if (v2 + 4 >= v29) {
            goto LABEL_41;
          }
          unint64_t v13 = *(void *)(v30 + 8 * v10);
          if (!v13)
          {
            uint64_t v10 = v2 + 5;
            if (v2 + 5 >= v29) {
              goto LABEL_41;
            }
            unint64_t v13 = *(void *)(v30 + 8 * v10);
            if (!v13)
            {
              uint64_t v14 = v2 + 6;
              while (v29 != v14)
              {
                unint64_t v13 = *(void *)(v30 + 8 * v14++);
                if (v13)
                {
                  uint64_t v10 = v14 - 1;
                  goto LABEL_30;
                }
              }
LABEL_41:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_30:
    uint64_t v8 = (v13 - 1) & v13;
    unint64_t v9 = __clz(__rbit64(v13)) + (v10 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t sub_10020BFB0(uint64_t a1, NSObject *a2)
{
  return sub_10020A268(a1, a2);
}

void sub_10020BFCC(uint64_t a1, unint64_t a2, unint64_t a3)
{
}

void sub_10020BFDC(char a1, uint64_t a2)
{
}

uint64_t sub_10020BFE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10020C02C(uint64_t a1)
{
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v46 - 8);
  uint64_t v5 = __chkstk_darwin(v46, v4);
  uint64_t v45 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v44 = (char *)v34 - v8;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = _swiftEmptyArrayStorage;
  if (!v9) {
    return (uint64_t)v10;
  }
  v34[1] = v1;
  uint64_t v47 = _swiftEmptyArrayStorage;
  sub_1002CF974(0, v9, 0);
  uint64_t result = sub_1000C6190(a1);
  uint64_t v13 = result;
  uint64_t v14 = 0;
  uint64_t v15 = a1 + 64;
  uint64_t v41 = v3 + 32;
  uint64_t v42 = v3 + 16;
  uint64_t v39 = a1 + 64;
  uint64_t v40 = v3 + 8;
  uint64_t v35 = a1 + 80;
  int64_t v36 = v9;
  uint64_t v43 = a1;
  uint64_t v37 = v3;
  uint64_t v38 = v12;
  while ((v13 & 0x8000000000000000) == 0 && v13 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v18 = (unint64_t)v13 >> 6;
    if ((*(void *)(v15 + 8 * ((unint64_t)v13 >> 6)) & (1 << v13)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v12) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(a1 + 48) + *(void *)(v3 + 72) * v13;
    uint64_t v20 = v44;
    uint64_t v21 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v44, v19, v46);
    uint64_t v22 = v45;
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v45, v20, v21);
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v22, v21);
    uint64_t v10 = v47;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1002CF974(0, v10[2] + 1, 1);
      uint64_t v10 = v47;
    }
    unint64_t v27 = v10[2];
    unint64_t v26 = v10[3];
    if (v27 >= v26 >> 1)
    {
      uint64_t result = sub_1002CF974(v26 > 1, v27 + 1, 1);
      uint64_t v10 = v47;
    }
    _OWORD v10[2] = v27 + 1;
    uint64_t v28 = &v10[2 * v27];
    v28[4] = v23;
    v28[5] = v25;
    a1 = v43;
    int64_t v16 = 1 << *(unsigned char *)(v43 + 32);
    if (v13 >= v16) {
      goto LABEL_27;
    }
    uint64_t v15 = v39;
    uint64_t v29 = *(void *)(v39 + 8 * v18);
    if ((v29 & (1 << v13)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v12) = v38;
    if (*(_DWORD *)(v43 + 36) != v38) {
      goto LABEL_29;
    }
    unint64_t v30 = v29 & (-2 << (v13 & 0x3F));
    if (v30)
    {
      int64_t v16 = __clz(__rbit64(v30)) | v13 & 0xFFFFFFFFFFFFFFC0;
      int64_t v17 = v36;
      uint64_t v3 = v37;
    }
    else
    {
      unint64_t v31 = v18 + 1;
      unint64_t v32 = (unint64_t)(v16 + 63) >> 6;
      int64_t v17 = v36;
      uint64_t v3 = v37;
      if (v18 + 1 < v32)
      {
        unint64_t v33 = *(void *)(v39 + 8 * v31);
        if (v33)
        {
LABEL_22:
          int64_t v16 = __clz(__rbit64(v33)) + (v31 << 6);
        }
        else
        {
          while (v32 - 2 != v18)
          {
            unint64_t v33 = *(void *)(v35 + 8 * v18++);
            if (v33)
            {
              unint64_t v31 = v18 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    ++v14;
    uint64_t v13 = v16;
    if (v14 == v17) {
      return (uint64_t)v10;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_10020C380(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UWBSession();
    sub_100204FC0();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v17;
    uint64_t v16 = v18;
    uint64_t v2 = v19;
    uint64_t v3 = v20;
    unint64_t v4 = v21;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v16 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
  while (1)
  {
    if (v4)
    {
      uint64_t v9 = (v4 - 1) & v4;
      unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
      uint64_t v11 = v3;
      goto LABEL_29;
    }
    int64_t v13 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v13 >= v8) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v16 + 8 * v13);
    uint64_t v11 = v3 + 1;
    if (!v14)
    {
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v16 + 8 * v11);
      if (!v14)
      {
        uint64_t v11 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v16 + 8 * v11);
        if (!v14)
        {
          uint64_t v11 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v16 + 8 * v11);
          if (!v14)
          {
            uint64_t v11 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_32;
            }
            unint64_t v14 = *(void *)(v16 + 8 * v11);
            if (!v14)
            {
              uint64_t v15 = v3 + 6;
              while (v8 != v15)
              {
                unint64_t v14 = *(void *)(v16 + 8 * v15++);
                if (v14)
                {
                  uint64_t v11 = v15 - 1;
                  goto LABEL_28;
                }
              }
LABEL_32:
              sub_10008C4F0();
              return;
            }
          }
        }
      }
    }
LABEL_28:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_32;
    }
    while (1)
    {
      sub_1001FF6A0();

      uint64_t v3 = v11;
      unint64_t v4 = v9;
      if ((v1 & 0x8000000000000000) == 0) {
        break;
      }
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for UWBSession();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v12 = v22;
        swift_unknownObjectRelease();
        uint64_t v11 = v3;
        uint64_t v9 = v4;
        if (v22) {
          continue;
        }
      }
      goto LABEL_32;
    }
  }
  __break(1u);
}

void sub_10020C608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *unint64_t v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if (v15)
  {
    uint64_t v17 = a4 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
    uint64_t v18 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v18;
    *uint64_t v18 = 0x8000000000000000;
    sub_1002C935C(a1, a2, a3, v17, isUniquelyReferenced_nonNull_native);
    *uint64_t v18 = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_10020C7F4(a4);
  }
  else
  {
    __break(1u);
  }
}

void sub_10020C7F4(uint64_t a1)
{
  uint64_t v5 = v1;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (void *)((char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_7;
  }
  unint64_t v14 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents);
  swift_beginAccess();
  uint64_t v15 = *v14;
  if (!*(void *)(*v14 + 16)
    || (uint64_t v11 = (void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier),
        unint64_t v16 = sub_1002C09FC(a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier),
        (v17 & 1) == 0))
  {
    swift_endAccess();
    return;
  }
  uint64_t v18 = (uint64_t *)(*(void *)(v15 + 56) + 24 * v16);
  uint64_t v2 = *v18;
  uint64_t v3 = v18[1];
  uint64_t v4 = v18[2];
  swift_endAccess();
  if (qword_1004537A8 != -1) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v19 = qword_100468890;
  swift_retain();
  uint64_t v20 = sub_100203774(v19, a1);
  swift_release();
  unint64_t v21 = (void *)sub_1000BB110(v20);
  swift_bridgeObjectRelease();
  if (v21)
  {
    if (*((unsigned char *)v21 + OBJC_IVAR____TtC10seserviced10UWBSession_state) == 4)
    {
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v38 = v3;
        uint64_t v25 = (uint8_t *)v24;
        uint64_t v36 = swift_slowAlloc();
        v41[0] = v36;
        uint64_t v37 = v4;
        *(_DWORD *)uint64_t v25 = 136315138;
        v35[1] = v25 + 4;
        swift_retain();
        uint64_t v26 = UUID.uuidString.getter();
        uint64_t v39 = v2;
        unint64_t v28 = v27;
        swift_release();
        uint64_t v40 = sub_100290514(v26, v28, v41);
        uint64_t v4 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v2 = v39;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Processing time sync event for %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v3 = v38;
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      sub_1001FF464(v2, v3, v4);
      swift_beginAccess();
      sub_10017FB1C((uint64_t)v11);
      swift_endAccess();

      return;
    }
  }
  swift_retain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, v30))
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc();
    v41[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v31 = 136315138;
    swift_retain();
    uint64_t v32 = UUID.uuidString.getter();
    unint64_t v34 = v33;
    swift_release();
    uint64_t v40 = sub_100290514(v32, v34, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "No active UWB Alisha session for %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

void sub_10020CD38(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (qword_1004537A8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v11 = qword_100468890;
  swift_retain();
  uint64_t v12 = sub_100203774(v11, a2);
  swift_release();
  id v13 = (void *)sub_1000BB110(v12);
  swift_bridgeObjectRelease();
  if (v13)
  {
    type metadata accessor for UWBAlishaSession();
    if (swift_dynamicCastClass())
    {
      sub_1002007EC(a1);

      return;
    }
  }
  swift_retain_n();
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)unint64_t v16 = 136315138;
    uint64_t v22 = v17;
    swift_retain();
    uint64_t v18 = UUID.uuidString.getter();
    unint64_t v20 = v19;
    swift_release();
    uint64_t v21 = sub_100290514(v18, v20, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "No active UWB Alisha session for %s", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

void sub_10020D084()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    uint64_t v15 = swift_once();
    goto LABEL_11;
  }
  char v9 = *(unsigned char *)(v1 + 16);
  id v10 = Logger.logObject.getter();
  if (v9)
  {
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "AlishaUWB is already running", v12, 2u);
      swift_slowDealloc();
    }

    return;
  }
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v13, "Starting AlishaUWB", v14, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v1 + 16) = 1;
  if (qword_1004536D8 != -1) {
    goto LABEL_24;
  }
LABEL_11:
  uint64_t v17 = __chkstk_darwin(v15, v16);
  *(void *)&v33[-2] = sub_1000A24C8;
  *((void *)&v33[-2] + 1) = 0;
  *(void *)&v33[-1] = v18;
  __chkstk_darwin(v17, v19);
  *(void *)&v33[-1] = sub_1000A2ABC;
  *((void *)&v33[-1] + 1) = v20;
  uint64_t v22 = v21 + 4;
  os_unfair_lock_lock(v21 + 4);
  sub_100079ACC(v33);
  os_unfair_lock_unlock(v22);
  if ((*(void *)&v33[0] & 0xC000000000000001) != 0) {
    uint64_t v23 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v23 = *(void *)(*(void *)&v33[0] + 16);
  }
  uint64_t v24 = swift_bridgeObjectRelease();
  if (v23) {
    goto LABEL_19;
  }
  uint64_t v26 = __chkstk_darwin(v24, v25);
  *(void *)&v33[-2] = sub_1000A2570;
  *((void *)&v33[-2] + 1) = 0;
  *(void *)&v33[-1] = v27;
  __chkstk_darwin(v26, v28);
  *(void *)&v33[-1] = sub_1000AA878;
  *((void *)&v33[-1] + 1) = v29;
  unint64_t v31 = v30 + 4;
  os_unfair_lock_lock(v30 + 4);
  sub_1000AA804(v33);
  os_unfair_lock_unlock(v31);
  uint64_t v32 = (*(void *)&v33[0] & 0xC000000000000001) != 0
      ? __CocoaSet.count.getter()
      : *(void *)(*(void *)&v33[0] + 16);
  swift_bridgeObjectRelease();
  if (v32)
  {
LABEL_19:
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    uint64_t v34 = 0;
    memset(v33, 0, sizeof(v33));
    sub_1001F91E8(0, (uint64_t)v33);
    sub_1000C9864((uint64_t)v33);
  }
}

void sub_10020D4E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
LABEL_8:
    os_log_type_t v13 = sub_1001F96B4(qword_100468890);
    sub_10020C380((uint64_t)v13);
    swift_bridgeObjectRelease();
    unint64_t v14 = (void *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers);
    swift_beginAccess();
    *unint64_t v14 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents);
    swift_beginAccess();
    *uint64_t v15 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease();
    sub_1001F9B00(0);
    *(unsigned char *)(v1 + 16) = 0;
    return;
  }
  int v9 = *(unsigned __int8 *)(v1 + 16);
  id v10 = Logger.logObject.getter();
  if (v9 == 1)
  {
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping AlishaUWB", v12, 2u);
      swift_slowDealloc();
    }

    if (qword_1004537A8 == -1) {
      goto LABEL_8;
    }
    goto LABEL_13;
  }
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v16, "AlishaUWB is not running", v17, 2u);
    swift_slowDealloc();
  }
}

void sub_10020D7D8(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v9 = v8;
  int v62 = a8;
  uint64_t v60 = a5;
  uint64_t v61 = a7;
  unint64_t v58 = a3;
  uint64_t v59 = a6;
  uint64_t v57 = a2;
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v56 + 64);
  __chkstk_darwin(v12 - 8, v14);
  uint64_t v15 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (uint64_t *)((char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_100468A38;
  *uint64_t v20 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = v21;
  char v23 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v20, v16);
  if (v23)
  {
    if (qword_1004537A8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v24 = qword_100468890;
  swift_retain();
  uint64_t v25 = sub_100203774(v24, a4);
  swift_release();
  uint64_t v26 = (void *)sub_1000BB110(v25);
  swift_bridgeObjectRelease();
  if (!v26)
  {
LABEL_16:
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v64 = v40;
      swift_retain();
      uint64_t v41 = UUID.uuidString.getter();
      unint64_t v43 = v42;
      swift_release();
      uint64_t v63 = sub_100290514(v41, v43, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No active UWB Alisha session for %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    return;
  }
  type metadata accessor for UWBAlishaSession();
  uint64_t v27 = swift_dynamicCastClass();
  if (!v27)
  {

    goto LABEL_16;
  }
  if (*(unsigned __int8 *)(v27 + OBJC_IVAR____TtC10seserviced10UWBSession_state) - 5 < 2)
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Command temporarily blocked because the UWB session is suspended", v30, 2u);
      swift_slowDealloc();
    }

    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v31 = sub_100088F40((uint64_t)&off_10040E4B8);
    unint64_t v33 = v32;
    uint64_t v34 = sub_1001F28F8(3, 17, v31, v32);
    unint64_t v36 = v35;
    sub_10006D144(v31, v33);
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000CB6FC(v34, v36);

    sub_10006D144(v34, v36);
    return;
  }
  if (a1 == 18 || a1 == 9)
  {
    uint64_t v48 = self;
    UUID.uuidString.getter();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v46 = v48;
    unsigned int v47 = 3;
    goto LABEL_25;
  }
  if (a1 == 3)
  {
    uint64_t v44 = self;
    UUID.uuidString.getter();
    NSString v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v46 = v44;
    unsigned int v47 = 2;
LABEL_25:
    sub_10004EFC0(v46, v47, v45);
  }
  if (qword_100453798 != -1) {
    swift_once();
  }
  uint64_t v49 = sub_1001F28F8(2, a1, v57, v58);
  unint64_t v51 = v50;
  sub_10019366C(v59, (uint64_t)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v52 = (*(unsigned __int8 *)(v56 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  unint64_t v53 = (v13 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = (void *)swift_allocObject();
  void v54[2] = v9;
  v54[3] = a4;
  v54[4] = v60;
  sub_100211850((uint64_t)v15, (uint64_t)v54 + v52);
  uint64_t v55 = (char *)v54 + v53;
  *(void *)uint64_t v55 = v61;
  v55[8] = v62 & 1;
  swift_retain();
  swift_retain();
  sub_1001FA098(v49, v51, (uint64_t)sub_1002118B8, (uint64_t)v54);

  sub_10006D144(v49, v51);
  swift_release();
}

void sub_10020DEBC(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  v12(v6, v2);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v13 = (void *)qword_100468A38;
    *uint64_t v6 = qword_100468A38;
    v9(v6, v8, v2);
    id v14 = v13;
    char v15 = _dispatchPreconditionTest(_:)();
    v12(v6, v2);
    if (v15)
    {
      uint64_t v16 = v20 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_beginAccess();
      sub_10017FB1C(v16);
      swift_endAccess();
      return;
    }
    goto LABEL_11;
  }
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Not running", v19, 2u);
    swift_slowDealloc();
  }
}

void sub_10020E12C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (qword_1004537A8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v11 = qword_100468890;
  swift_retain();
  uint64_t v12 = sub_100203774(v11, a1);
  swift_release();
  uint64_t v13 = (void *)sub_1000BB110(v12);
  swift_bridgeObjectRelease();
  if (v13)
  {
    type metadata accessor for UWBAlishaSession();
    if (swift_dynamicCastClass())
    {
      swift_retain_n();
      sub_1002000E4(a1, (uint64_t)sub_1002113F4, v2, (uint64_t)sub_1002113F8, v2, (uint64_t)sub_1002113FC, v2, (uint64_t)sub_100211400, v2, (uint64_t)sub_100211408, v2, (uint64_t)sub_10021140C, v2);
      swift_release_n();
    }
  }
}

void sub_10020E3C8(NSObject *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v2 + 16) != 1)
  {
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Not running", v21, 2u);
      swift_slowDealloc();
    }
    goto LABEL_14;
  }
  if (qword_1004537A8 != -1) {
    goto LABEL_16;
  }
LABEL_6:
  uint64_t v11 = qword_100468890;
  swift_retain();
  LOBYTE(v11) = sub_100203BA8(v11, a1);
  swift_release();
  if ((v11 & 1) == 0)
  {
    swift_retain_n();
    uint64_t v19 = sub_1001FA398(a1, (uint64_t)sub_100211980, v2, (uint64_t)sub_100211988, v2, sub_100211984, v2, (uint64_t)sub_10021198C, v2, (uint64_t)sub_1002119A4, v2, (uint64_t)sub_100211990, v2);
    swift_release_n();
LABEL_14:

    return;
  }
  swift_retain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v23 = v15;
    swift_retain();
    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    swift_release();
    v22[1] = sub_100290514(v16, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "UWB Alisha session already exists for %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

uint64_t sub_10020E984()
{
  type metadata accessor for AlishaUWB();
  swift_allocObject();
  uint64_t result = sub_10020E9C4();
  qword_1004688C8 = result;
  return result;
}

uint64_t sub_10020E9C4()
{
  *(unsigned char *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_pendingTimeSyncEvents) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers) = &_swiftEmptySetSingleton;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_1002113D8;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100415CB8;
  uint64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

uint64_t sub_10020EB20()
{
  char v1 = *(unsigned char *)(v0 + 16);
  unint64_t v35 = &type metadata for Bool;
  LOBYTE(v34) = v1;
  sub_1000761D0(&v34, &v32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v32, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10020C02C(v3);
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_10006C51C((uint64_t *)&unk_100455EA0);
  unint64_t v35 = (void *)v30;
  *(void *)&long long v34 = v4;
  sub_1000761D0(&v34, &v32);
  char v5 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v32, 0xD000000000000015, 0x80000001003B2BD0, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_rangingPeers);
  swift_beginAccess();
  uint64_t v7 = *v6;
  unint64_t v31 = *v6 & 0xC000000000000001;
  if (v31)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = __CocoaSet.count.getter();
    if (v8) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_21:
    unint64_t v35 = (void *)v30;
    *(void *)&long long v34 = _swiftEmptyArrayStorage;
    sub_1000761D0(&v34, &v32);
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(&v32, 0x50676E69676E6172, 0xEC00000073726565, v27);
    swift_bridgeObjectRelease();
    sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    os_log_type_t v29 = sub_1000190DC((uint64_t)"alishauwb.state", (uint64_t)isa);

    return (uint64_t)v29;
  }
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1002CF974(0, v8 & ~(v8 >> 63), 0);
  if (v31)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v11 = 1;
  }
  else
  {
    uint64_t result = sub_1000FCB1C(v7);
    unsigned __int8 v11 = v12 & 1;
  }
  *(void *)&long long v32 = result;
  *((void *)&v32 + 1) = v10;
  unsigned __int8 v33 = v11;
  if ((v8 & 0x8000000000000000) == 0)
  {
    do
    {
      while (1)
      {
        long long v18 = v32;
        uint64_t v19 = v33;
        sub_1000FB6D0(v32, SDWORD2(v32), v33, v7);
        uint64_t v20 = UUID.uuidString.getter();
        uint64_t v22 = v21;
        swift_release();
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0) {
          uint64_t result = sub_1002CF974(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v24 = _swiftEmptyArrayStorage[2];
        unint64_t v23 = _swiftEmptyArrayStorage[3];
        if (v24 >= v23 >> 1) {
          uint64_t result = sub_1002CF974(v23 > 1, v24 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v24 + 1;
        uint64_t v25 = &_swiftEmptyArrayStorage[2 * v24];
        v25[4] = v20;
        v25[5] = v22;
        if (v31) {
          break;
        }
        uint64_t v13 = sub_1000FAE78(v18, *((void *)&v18 + 1), v19, v7);
        uint64_t v15 = v14;
        char v17 = v16;
        sub_10008B004(v18, *((uint64_t *)&v18 + 1), v19);
        *(void *)&long long v32 = v13;
        *((void *)&v32 + 1) = v15;
        unsigned __int8 v33 = v17 & 1;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      if ((v19 & 1) == 0) {
        goto LABEL_23;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C(&qword_100454580);
      uint64_t v26 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v26(&v34, 0);
      --v8;
    }
    while (v8);
LABEL_20:
    sub_10008B004(v32, *((uint64_t *)&v32 + 1), v33);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_10020EFB8(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6, uint64_t a7, char *a8, char a9)
{
  if (a3)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v24 = a8;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_getErrorValue();
      uint64_t v16 = Error.localizedDescription.getter();
      sub_100290514(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to process DK UWB message %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a8 = v24;
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_100088F40((uint64_t)&off_10040F358);
    unint64_t v23 = v22;
    sub_1001E8D48(3, 17, v21, v22, (uint64_t)a5, a6, a7, a8, a9 & 1);
    swift_errorRelease();
    return sub_10006D144(v21, v23);
  }
  else if (a2 >> 60 != 15)
  {
    uint64_t v19 = result;
    sub_10006D0EC(result, a2);
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000CB6FC(v19, a2);
    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_100468880;
    swift_retain();
    sub_1001F5B1C(v19, a2, 0, a5, v20, (uint64_t)a5);
    swift_release();
    return sub_100075868(v19, a2);
  }
  return result;
}

void sub_10020F340(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Alisha.DKMessage(0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *((void *)a1 + 1);
  unint64_t v9 = *((void *)a1 + 2);
  sub_10006D0EC(v8, v9);
  char v10 = sub_10007D4A4(v8, v9, 0, 0, 0);
  sub_10006D0EC(v8, v9);
  char v11 = sub_10007D4A4(v8, v9, 1, 0, 0);
  LODWORD(v9) = *a1;
  sub_1000AA164((uint64_t)a1, (uint64_t)v7);
  if (v9 != 3)
  {
    sub_1000AA1C8((uint64_t)v7);
    return;
  }
  int v12 = v7[1];
  sub_1000AA1C8((uint64_t)v7);
  if (v12 == 17 && v10 == 2)
  {
    if (v11 == 6)
    {
      uint64_t v32 = qword_1004536D8;
      swift_retain();
      if (v32 != -1) {
        swift_once();
      }
      unsigned __int8 v33 = off_100455CB0;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_1001F7CB0;
      *(void *)(v34 + 24) = a2;
      uint64_t v36 = __chkstk_darwin(v34, v35);
      v44[-4] = sub_1000AA894;
      v44[-3] = v36;
      v44[-2] = v33;
      __chkstk_darwin(v36, v37);
      v44[-2] = sub_1000AA878;
      v44[-1] = v38;
      uint64_t v40 = v39 + 4;
      swift_retain();
      os_unfair_lock_lock(v40);
      sub_1000AA804(v44);
      os_unfair_lock_unlock(v40);
      uint64_t v41 = v44[0];
      swift_release();
      swift_release();
      unint64_t v24 = (void *)sub_1000BB0E4(v41);
      swift_bridgeObjectRelease();
      if (!v24) {
        return;
      }
      id v42 = [v24 readerInfo];
      if (v42)
      {
        uint64_t v26 = v42;
        uint64_t v43 = self;
        id v28 = [v24 getEndpointUser];
        UUID.uuidString.getter();
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v30 = v43;
        int v31 = 6;
        goto LABEL_21;
      }
    }
    else
    {
      if (v11 != 1) {
        return;
      }
      uint64_t v14 = qword_1004536D8;
      swift_retain();
      if (v14 != -1) {
        swift_once();
      }
      uint64_t v15 = off_100455CB0;
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = sub_1001F7CB0;
      *(void *)(v16 + 24) = a2;
      uint64_t v18 = __chkstk_darwin(v16, v17);
      v44[-4] = sub_1000AA894;
      v44[-3] = v18;
      v44[-2] = v15;
      __chkstk_darwin(v18, v19);
      v44[-2] = sub_1000AA878;
      v44[-1] = v20;
      unint64_t v22 = v21 + 4;
      swift_retain();
      os_unfair_lock_lock(v22);
      sub_1000AA804(v44);
      os_unfair_lock_unlock(v22);
      uint64_t v23 = v44[0];
      swift_release();
      swift_release();
      unint64_t v24 = (void *)sub_1000BB0E4(v23);
      swift_bridgeObjectRelease();
      if (!v24) {
        return;
      }
      id v25 = [v24 readerInfo];
      if (v25)
      {
        uint64_t v26 = v25;
        uint64_t v27 = self;
        id v28 = [v24 getEndpointUser];
        UUID.uuidString.getter();
        NSString v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        uint64_t v30 = v27;
        int v31 = 1;
LABEL_21:
        sub_10004FAD8(v30, 2, v31, v26, (unint64_t)v28, v29);
      }
    }
  }
}

void sub_10020F824(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      char v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)char v11 = 136315138;
      uint64_t v17 = v12;
      swift_retain();
      uint64_t v13 = UUID.uuidString.getter();
      unint64_t v15 = v14;
      swift_release();
      uint64_t v16 = sub_100290514(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session started running for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_10020C7F4(a1);
  }
  else
  {
    __break(1u);
  }
}

void sub_10020FAD8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_retain_n();
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      swift_retain();
      uint64_t v12 = UUID.uuidString.getter();
      unint64_t v14 = v13;
      swift_release();
      uint64_t v17 = sub_100290514(v12, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      uint64_t v15 = sub_1002014D4(a1);
      uint64_t v17 = sub_100290514(v15, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session suspended for %s %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10020FDBC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
    goto LABEL_8;
  }
  swift_retain_n();
  unint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v18 = v12;
    swift_retain();
    uint64_t v13 = UUID.uuidString.getter();
    unint64_t v15 = v14;
    swift_release();
    v17[1] = sub_100290514(v13, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session resumed for %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_10020C7F4(a1);
  if (qword_1004536B0 != -1) {
    goto LABEL_17;
  }
LABEL_8:
  char v16 = sub_1000CBD8C();
  if (v16 != 2 && (v16 & 1) == 0)
  {
    if (qword_1004537D8 != -1) {
      swift_once();
    }
    sub_10020827C(a1);
    if (qword_1004537E0 != -1) {
      swift_once();
    }
    sub_10020CD38(0, a1);
  }
}

void sub_100210158(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (uint64_t *)((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *unint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v10)
  {
    uint64_t v12 = v2 + OBJC_IVAR____TtC10seserviced9AlishaUWB_logger;
    swift_retain();
    sub_10006D0EC(a1, a2);
    swift_retain();
    sub_10006D0EC(a1, a2);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      v32[0] = v29;
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_retain();
      uint64_t v16 = UUID.uuidString.getter();
      uint64_t v30 = v12;
      unint64_t v18 = v17;
      swift_release();
      uint64_t v31 = sub_100290514(v16, v18, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      uint64_t v28 = v15 + 14;
      uint64_t v5 = 0;
      uint64_t v31 = (uint64_t)sub_10023CDF4(a1, a2);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_100290514(v19, v21, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "UWB Alisha session message for %s %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();

      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      uint64_t v5 = 0;
    }
    if (qword_1004536B0 == -1) {
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_8:
  sub_1000CB6FC(a1, a2);
  if (v5)
  {
    sub_10006D0EC(a1, a2);
    sub_10006D0EC(a1, a2);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v32[0] = v30;
      *(_DWORD *)unint64_t v24 = 136315138;
      uint64_t v29 = (uint64_t)(v24 + 4);
      uint64_t v31 = (uint64_t)sub_10023CDF4(a1, a2);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_100290514(v25, v27, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to send %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      sub_10006D144(a1, a2);
      sub_10006D144(a1, a2);
    }
  }
}

void sub_100210700(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v13 = v3 + OBJC_IVAR____TtC10seserviced9AlishaUWB_logger;
  swift_retain_n();
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    v87[1] = v13;
    uint64_t v17 = v16;
    v89[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    LOBYTE(v88) = a1;
    uint64_t v18 = String.init<A>(describing:)();
    v87[0] = v3;
    uint64_t v88 = sub_100290514(v18, v19, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_retain();
    uint64_t v20 = UUID.uuidString.getter();
    unint64_t v22 = v21;
    swift_release();
    uint64_t v88 = sub_100290514(v20, v22, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "UWB Alisha session health update %s for %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (a1 == 3)
  {
    swift_beginAccess();
    uint64_t v47 = sub_1000F5D98();
    swift_endAccess();
    swift_release();
    if (!v47)
    {
LABEL_20:
      uint64_t v70 = qword_1004536D8;
      swift_retain();
      if (v70 != -1) {
        swift_once();
      }
      unint64_t v71 = off_100455CB0;
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = sub_1001F7CB0;
      *(void *)(v72 + 24) = a2;
      uint64_t v74 = __chkstk_darwin(v72, v73);
      v87[-4] = sub_1000A97C0;
      v87[-3] = v74;
      v87[-2] = v71;
      __chkstk_darwin(v74, v75);
      v87[-2] = sub_1000AA878;
      v87[-1] = v76;
      char v78 = v77 + 4;
      swift_retain();
      os_unfair_lock_lock(v78);
      sub_1000AA804(v89);
      os_unfair_lock_unlock(v78);
      uint64_t v79 = v89[0];
      swift_release();
      swift_release();
      uint64_t v34 = sub_1000BB0E4(v79);
      swift_bridgeObjectRelease();
      if (v34)
      {
        id v80 = [v34 readerInfo];
        if (v80)
        {
          NSString v81 = v80;
          uint64_t v82 = self;
          id v83 = [v34 getEndpointUser];
          UUID.uuidString.getter();
          Class v84 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          sub_10004FAD8(v82, 0x8000, 0xFFFF, v81, (unint64_t)v83, v84);

          uint64_t v34 = v84;
        }
        goto LABEL_29;
      }
      return;
    }
    uint64_t v48 = qword_1004536D8;
    swift_retain();
    if (v48 == -1)
    {
LABEL_17:
      uint64_t v49 = off_100455CB0;
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = sub_1001F7CB0;
      *(void *)(v50 + 24) = a2;
      uint64_t v52 = __chkstk_darwin(v50, v51);
      v87[-4] = sub_1000AA894;
      v87[-3] = v52;
      v87[-2] = v49;
      __chkstk_darwin(v52, v53);
      v87[-2] = sub_1000AA878;
      v87[-1] = v54;
      uint64_t v56 = v55 + 4;
      swift_retain();
      os_unfair_lock_lock(v56);
      sub_1000AA804(v89);
      os_unfair_lock_unlock(v56);
      uint64_t v57 = v89[0];
      swift_release();
      swift_release();
      unint64_t v58 = (void *)sub_1000BB0E4(v57);
      swift_bridgeObjectRelease();
      if (!v58) {
        goto LABEL_27;
      }
      id v59 = [v58 readerIdentifier];
      if (!v59)
      {

        goto LABEL_27;
      }
      uint64_t v60 = v59;
      uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v63 = v62;

      uint64_t v64 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
      unint64_t v65 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
      uint64_t v66 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      unint64_t v67 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378290;
      *(void *)(inited + 32) = 0xD000000000000010;
      *(void *)(inited + 40) = 0x80000001003B0CF0;
      *(void *)(inited + 72) = &type metadata for Data;
      *(void *)(inited + 48) = v61;
      *(void *)(inited + 56) = v63;
      sub_1000758F4(v64, v65);
      sub_1000758F4(v66, v67);
      sub_10006D0EC(v61, v63);
      unint64_t v69 = sub_1001DB224(inited);
      sub_1002B9140(0xD000000000000040, 0x80000001003B7E60, v64, v65, v66, v67, v69);
      swift_bridgeObjectRelease();
      sub_100075868(v66, v67);
      sub_100075868(v64, v65);
      sub_10006D144(v61, v63);

      goto LABEL_20;
    }
LABEL_32:
    swift_once();
    goto LABEL_17;
  }
  if (a1 == 1)
  {
    swift_beginAccess();
    swift_retain();
    char v23 = sub_1000E851C(&v88, a2);
    swift_endAccess();
    swift_release();
    if (v23)
    {
      uint64_t v24 = qword_1004536D8;
      swift_retain();
      if (v24 != -1) {
        swift_once();
      }
      uint64_t v25 = off_100455CB0;
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = sub_1001F7CB0;
      *(void *)(v26 + 24) = a2;
      uint64_t v28 = __chkstk_darwin(v26, v27);
      v87[-4] = sub_1000AA894;
      v87[-3] = v28;
      v87[-2] = v25;
      __chkstk_darwin(v28, v29);
      v87[-2] = sub_1000AA878;
      v87[-1] = v30;
      uint64_t v32 = v31 + 4;
      swift_retain();
      os_unfair_lock_lock(v32);
      sub_1000AA804(v89);
      os_unfair_lock_unlock(v32);
      uint64_t v33 = v89[0];
      swift_release();
      swift_release();
      uint64_t v34 = sub_1000BB0E4(v33);
      swift_bridgeObjectRelease();
      if (v34)
      {
        id v35 = [v34 readerIdentifier];
        if (v35)
        {
          uint64_t v36 = v35;
          uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v39 = v38;

          uint64_t v40 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
          unint64_t v41 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
          uint64_t v42 = a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
          uint64_t v43 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          unint64_t v44 = *(void *)(v42 + 8);
          sub_10006C51C(&qword_1004555D0);
          uint64_t v45 = swift_initStackObject();
          *(_OWORD *)(v45 + 16) = xmmword_1003782A0;
          *(void *)(v45 + 32) = 0xD000000000000010;
          *(void *)(v45 + 40) = 0x80000001003B0CF0;
          *(void *)(v45 + 48) = v37;
          *(void *)(v45 + 56) = v39;
          *(void *)(v45 + 72) = &type metadata for Data;
          *(void *)(v45 + 80) = 0xD000000000000011;
          *(void *)(v45 + 120) = &type metadata for Int;
          *(void *)(v45 + 88) = 0x80000001003B7F00;
          *(void *)(v45 + 96) = 180;
          sub_1000758F4(v40, v41);
          sub_1000758F4(v43, v44);
          sub_10006D0EC(v37, v39);
          unint64_t v46 = sub_1001DB224(v45);
          sub_1002B9140(0xD000000000000042, 0x80000001003B7EB0, v40, v41, v43, v44, v46);
          swift_bridgeObjectRelease();
          sub_100075868(v43, v44);
          sub_100075868(v40, v41);
          sub_10006D144(v37, v39);
LABEL_29:

          return;
        }
      }
LABEL_27:
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v85))
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v86 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v85, "Failed to retrieve endpoint", v86, 2u);
        swift_slowDealloc();
      }
      goto LABEL_29;
    }
  }
}

uint64_t sub_100211218()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced9AlishaUWB_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002112D8()
{
  return type metadata accessor for AlishaUWB();
}

uint64_t type metadata accessor for AlishaUWB()
{
  uint64_t result = qword_1004589B8;
  if (!qword_1004589B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10021132C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002113DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002113EC()
{
  return swift_release();
}

void sub_100211400(uint64_t a1, NSObject *a2)
{
}

uint64_t sub_100211410()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100211448(NSObject *a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v17 = v12;
      swift_retain();
      uint64_t v13 = UUID.uuidString.getter();
      unint64_t v15 = v14;
      swift_release();
      uint64_t v16 = sub_100290514(v13, v15, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "UWB Alisha session invalidated for %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (*((unsigned char *)&a1->isa + OBJC_IVAR____TtC10seserviced4Peer_isConnected) == 1) {
      sub_10020E3C8(a1);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100211714()
{
  uint64_t v1 = *(void *)(sub_10006C51C(&qword_100455EB0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_100211850(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002118B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(sub_10006C51C(&qword_100455EB0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10020EFB8(a1, a2, a3, *(void *)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), v3 + v8, *(char **)(v3 + v9), *(unsigned char *)(v3 + v9 + 8));
}

uint64_t sub_1002119A8(uint64_t a1)
{
  UUID.init()();
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_expressState) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) = 0;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_type) = 4;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier) = xmmword_100378280;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier) = xmmword_100378280;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber) = 0;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced4Peer_buffer) = xmmword_100378280;
  uint64_t v3 = v1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t sub_100211A98()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v2);
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8));

  return swift_deallocClassInstance();
}

uint64_t sub_100211BA4()
{
  return type metadata accessor for Peer();
}

uint64_t type metadata accessor for Peer()
{
  uint64_t result = qword_100458A80;
  if (!qword_100458A80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100211BF8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Peer.PeerType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100211D90);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Peer.PeerType()
{
  return &type metadata for Peer.PeerType;
}

unsigned char *storeEnumTagSinglePayload for Peer.PairingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100211E94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Peer.PairingState()
{
  return &type metadata for Peer.PairingState;
}

unint64_t sub_100211ED0()
{
  unint64_t result = qword_100458C40;
  if (!qword_100458C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458C40);
  }
  return result;
}

unint64_t sub_100211F28()
{
  unint64_t result = qword_100458C48;
  if (!qword_100458C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458C48);
  }
  return result;
}

Swift::Int sub_100211F7C()
{
  return Hasher._finalize()();
}

uint64_t sub_100212014()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10021209C()
{
  return Hasher._finalize()();
}

uint64_t sub_100212130()
{
  return UUID.uuidString.getter();
}

uint64_t sub_100212160()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_10021217C()
{
  return sub_1002121C4(&qword_100458C50, (void (*)(uint64_t))type metadata accessor for Peer);
}

uint64_t sub_1002121C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10021220C(char a1)
{
  unint64_t v2 = v1[5];
  if (!v2)
  {
    if (qword_1004537F8 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_100458C58);
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cannot restart when in idle state", v10, 2u);
      swift_slowDealloc();
    }

    goto LABEL_15;
  }
  int v3 = v1;
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[3] & 1;
  if (v5 != (a1 & 1))
  {
    uint64_t v11 = qword_1004537F8;
    swift_bridgeObjectRetain();
    if (v11 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E55C(v12, (uint64_t)qword_100458C58);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315650;
      swift_bridgeObjectRetain();
      sub_100290514(v4, v2, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      uint64_t v16 = String.init<A>(describing:)();
      sub_100290514(v16, v17, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 22) = 2080;
      uint64_t v18 = String.init<A>(describing:)();
      sub_100290514(v18, v19, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Waiting for message %s of type %s, cannot restart timer for %s message", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
LABEL_15:
    sub_100213B9C();
    swift_allocError();
    *uint64_t v20 = 2;
    swift_willThrow();
    return;
  }
  uint64_t v6 = v1[2];
  swift_bridgeObjectRetain();
  if (v6) {
    sub_100052B14(v6);
  }
  if (qword_1004537F8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10008E55C(v21, (uint64_t)qword_100458C58);
  swift_bridgeObjectRetain();
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = String.init<A>(describing:)();
    sub_100290514(v25, v26, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_100290514(v4, v2, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Restarted timer for %s message: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v27 = (void *)v3[2];
    if (!v27) {
      return;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v27 = (void *)v3[2];
    if (!v27) {
      return;
    }
  }
  if (v5)
  {
    uint64_t v31 = qword_1004537F0;
    id v32 = v27;
    if (v31 != -1) {
      swift_once();
    }
    uint64_t v30 = &qword_100468928;
  }
  else
  {
    uint64_t v28 = qword_1004537E8;
    id v29 = v27;
    if (v28 != -1) {
      swift_once();
    }
    uint64_t v30 = &qword_100468920;
  }
  sub_1000529D8((uint64_t)v27, *(double *)v30);
}

void sub_1002127E0(char a1)
{
  unint64_t v2 = v1[5];
  if (v2)
  {
    int v3 = v1 + 3;
    if ((v1[3] & 1) == (a1 & 1))
    {
      uint64_t v4 = v1[4];
      uint64_t v5 = v1[2];
      swift_bridgeObjectRetain();
      if (v5) {
        sub_100052B14(v5);
      }
      if (qword_1004537F8 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E55C(v19, (uint64_t)qword_100458C58);
      swift_bridgeObjectRetain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315394;
        uint64_t v23 = String.init<A>(describing:)();
        sub_100290514(v23, v24, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_100290514(v4, v2, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Ended timer for %s message: %s", (uint8_t *)v22, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      *int v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_1004537F8 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10008E55C(v10, (uint64_t)qword_100458C58);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        *(_DWORD *)uint64_t v13 = 136315394;
        uint64_t v14 = String.init<A>(describing:)();
        sub_100290514(v14, v15, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v13 + 12) = 2080;
        uint64_t v16 = String.init<A>(describing:)();
        sub_100290514(v16, v17, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Waiting for message type %s, cannot stop timer for %s", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_100213B9C();
      swift_allocError();
      *uint64_t v18 = 2;
      swift_willThrow();
    }
  }
  else
  {
    if (qword_1004537F8 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_100458C58);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Not waiting for message, nothing to register", v9, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100212CB8(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v9 = a1 & 1;
  unint64_t v10 = v5[5];
  if (v10)
  {
    uint64_t v11 = v5[4];
    uint64_t v12 = qword_1004537F8;
    swift_bridgeObjectRetain();
    if (v12 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_100458C58);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315906;
      swift_bridgeObjectRetain();
      sub_100290514(v11, v10, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v17 = String.init<A>(describing:)();
      sub_100290514(v17, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_100290514(a2, a3, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 32) = 2080;
      uint64_t v19 = String.init<A>(describing:)();
      sub_100290514(v19, v20, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Waiting for message %s of type %s, cannot start timer for %s in %s", (uint8_t *)v16, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    sub_100213B9C();
    swift_allocError();
    *id v32 = 1;
    swift_willThrow();
  }
  else
  {
    v6[3] = v9;
    v6[4] = a2;
    v6[5] = a3;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v23 = v6[6];
    v6[6] = a4;
    v6[7] = a5;
    sub_10008BECC(v23);
    uint64_t v24 = qword_1004537F8;
    swift_retain();
    if (v24 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E55C(v25, (uint64_t)qword_100458C58);
    swift_bridgeObjectRetain_n();
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = String.init<A>(describing:)();
      sub_100290514(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_100290514(a2, a3, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Started timer for %s message: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v31 = (void *)v6[2];
      if (!v31) {
        return;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v31 = (void *)v6[2];
      if (!v31) {
        return;
      }
    }
    if (v9)
    {
      uint64_t v36 = qword_1004537F0;
      id v37 = v31;
      if (v36 != -1) {
        swift_once();
      }
      id v35 = &qword_100468928;
    }
    else
    {
      uint64_t v33 = qword_1004537E8;
      id v34 = v31;
      if (v33 != -1) {
        swift_once();
      }
      id v35 = &qword_100468920;
    }
    sub_1000529D8((uint64_t)v31, *(double *)v35);
  }
}

void sub_100213254(uint64_t a1)
{
}

void sub_10021327C(uint64_t a1)
{
}

void sub_10021329C(uint64_t a1, uint64_t a2, void *a3)
{
  sub_1001AF368();
  *a3 = v4;
}

_OWORD *sub_1002132FC()
{
  v0[2] = 0u;
  v0[3] = 0u;
  v0[1] = 0u;
  uint64_t v1 = swift_allocObject();
  swift_weakInit();
  if (qword_100453928 != -1) {
    swift_once();
  }
  unint64_t v2 = (void *)qword_100468A38;
  int v3 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  v8[4] = sub_100213C28;
  v8[5] = v1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_10007C0C4;
  v8[3] = &unk_100415FA8;
  uint64_t v4 = _Block_copy(v8);
  swift_retain();
  uint64_t v5 = sub_100052804(v3, v2, v4);
  _Block_release(v4);
  swift_release();
  uint64_t v6 = (void *)*((void *)v0 + 2);
  *((void *)v0 + 2) = v5;
  swift_release();

  return v0;
}

void sub_100213450()
{
  swift_beginAccess();
  Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    unint64_t v2 = Strong[5];
    if (v2)
    {
      int v3 = (uint64_t (*)(uint64_t))Strong[6];
      if (v3)
      {
        uint64_t v4 = Strong[3];
        uint64_t v5 = Strong[4];
        swift_bridgeObjectRetain();
        uint64_t v6 = sub_10008BEBC((uint64_t)v3);
        if ((v3(v6) & 1) == 0)
        {
          sub_10008BECC((uint64_t)v3);
          swift_bridgeObjectRelease();
          v1[3] = 0;
          v1[4] = 0;
          v1[5] = 0;
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v7 = v4 & 1;
        if (qword_1004537F8 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_10008E55C(v8, (uint64_t)qword_100458C58);
        swift_bridgeObjectRetain();
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v25 = v5;
          uint64_t v11 = swift_slowAlloc();
          uint64_t v26 = swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 136315394;
          uint64_t v12 = String.init<A>(describing:)();
          sub_100290514(v12, v13, &v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v11 + 12) = 2080;
          swift_bridgeObjectRetain();
          sub_100290514(v25, v2, &v26);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "Restarted timer for %s message: %s", (uint8_t *)v11, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v14 = v1[2];
          if (v14)
          {
LABEL_9:
            if (v7)
            {
              uint64_t v23 = qword_1004537F0;
              uint64_t v24 = v14;
              if (v23 != -1) {
                swift_once();
              }
              uint64_t v17 = &qword_100468928;
            }
            else
            {
              uint64_t v15 = qword_1004537E8;
              uint64_t v16 = v14;
              if (v15 != -1) {
                swift_once();
              }
              uint64_t v17 = &qword_100468920;
            }
            sub_1000529D8((uint64_t)v14, *(double *)v17);
            sub_10008BECC((uint64_t)v3);
            goto LABEL_29;
          }
        }
        else
        {

          swift_bridgeObjectRelease_n();
          uint64_t v14 = v1[2];
          if (v14) {
            goto LABEL_9;
          }
        }
        sub_10008BECC((uint64_t)v3);
        swift_release();
        return;
      }
      if (qword_1004537F8 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10008E55C(v22, (uint64_t)qword_100458C58);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v14, v19)) {
        goto LABEL_29;
      }
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      os_log_type_t v21 = "Timer completed with no completion block";
    }
    else
    {
      if (qword_1004537F8 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E55C(v18, (uint64_t)qword_100458C58);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v14, v19)) {
        goto LABEL_29;
      }
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v20 = 0;
      os_log_type_t v21 = "Timer completed when extension is in idle state";
    }
    _os_log_impl((void *)&_mh_execute_header, v14, v19, v21, v20, 2u);
    swift_slowDealloc();
LABEL_29:
    swift_release();
  }
}

uint64_t sub_1002138F8()
{
  swift_bridgeObjectRelease();
  sub_10008BECC(*(void *)(v0 + 48));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LyonTimeExtension()
{
  return self;
}

uint64_t destroy for LyonTimeExtension.State()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10seserviced17LyonTimeExtensionC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LyonTimeExtension.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LyonTimeExtension.State(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LyonTimeExtension.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LyonTimeExtension.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

uint64_t sub_100213AD8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100213AF0(void *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    void *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[2] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonTimeExtension.State()
{
  return &type metadata for LyonTimeExtension.State;
}

uint64_t sub_100213B24()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100458C58);
  sub_10008E55C(v0, (uint64_t)qword_100458C58);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

unint64_t sub_100213B9C()
{
  unint64_t result = qword_100458D20;
  if (!qword_100458D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458D20);
  }
  return result;
}

uint64_t sub_100213BF0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100213C28()
{
}

uint64_t sub_100213C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100213C40()
{
  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for LyonTimeExtension.TimeExtensionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100213D14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonTimeExtension.TimeExtensionError()
{
  return &type metadata for LyonTimeExtension.TimeExtensionError;
}

unsigned char *storeEnumTagSinglePayload for LyonTimeExtension.MessageDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100213E18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonTimeExtension.MessageDirection()
{
  return &type metadata for LyonTimeExtension.MessageDirection;
}

unint64_t sub_100213E54()
{
  unint64_t result = qword_100458D28;
  if (!qword_100458D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458D28);
  }
  return result;
}

unint64_t sub_100213EAC()
{
  unint64_t result = qword_100458D30;
  if (!qword_100458D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458D30);
  }
  return result;
}

uint64_t sub_100213F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v15);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453800 != -1) {
    swift_once();
  }
  uint64_t v18 = *(void **)(qword_100458D38 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  os_log_type_t v19 = (void *)swift_allocObject();
  v19[2] = v5;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  v19[6] = v23;
  v19[7] = a5;
  aBlock[4] = sub_100219CD8;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100416340;
  unint64_t v20 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v21 = v18;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100219418((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v24);
  return swift_release();
}

void sub_100214224(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4, void (*a5)(void *, void))
{
  if (qword_100453800 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)sub_100219D08(a2, a3);
  id v9 = v8;
  a5(v8, 0);
}

uint64_t sub_100214434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v28 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v16);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453800 != -1) {
    swift_once();
  }
  os_log_type_t v19 = *(void **)(qword_100458D38 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  unint64_t v20 = (void *)swift_allocObject();
  v20[2] = v25[1];
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  uint64_t v21 = v26;
  v20[6] = a4;
  v20[7] = v21;
  v20[8] = a6;
  aBlock[4] = sub_100219C7C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004162C8;
  uint64_t v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v23 = v19;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v29 = _swiftEmptyArrayStorage;
  sub_100219418((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v27);
  return swift_release();
}

void sub_100214764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(id, void), uint64_t a7)
{
  v42[1] = a7;
  uint64_t v43 = a6;
  uint64_t v54 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v11 = *(void *)(v54 - 8);
  __chkstk_darwin(v54, v12);
  uint64_t v53 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v14 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v15);
  uint64_t v17 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v51 = (uint64_t)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453800 != -1) {
    swift_once();
  }
  unint64_t v21 = sub_100214CA4(a2, a3, a4, a5);
  unint64_t v22 = v21;
  if (!(v21 >> 62))
  {
    uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v23) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_14:
    sub_1002D9C38((unint64_t)v38);
    swift_bridgeObjectRelease();
    id v39 = objc_allocWithZone((Class)NSArray);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v41 = [v39 initWithArray:isa];

    v43(v41, 0);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_13;
  }
LABEL_5:
  uint64_t v55 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = self;
    uint64_t v25 = 0;
    unint64_t v47 = v22 & 0xC000000000000001;
    id v48 = v24;
    uint64_t v45 = (void (**)(char *, uint64_t))(v11 + 8);
    unint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    unint64_t v44 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v49 = v23;
    unint64_t v50 = v22;
    do
    {
      if (v47)
      {
        uint64_t v26 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v26 = *(void *)(v22 + 8 * v25 + 32);
        swift_retain();
      }
      ++v25;
      uint64_t v27 = v51;
      sub_10021AF38(v26+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, v51, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      uint64_t v28 = v52;
      (*v46)(v17, v27, v52);
      uint64_t v29 = v53;
      P256.KeyAgreement.PrivateKey.publicKey.getter();
      uint64_t v30 = P256.KeyAgreement.PublicKey.x963Representation.getter();
      unint64_t v32 = v31;
      (*v45)(v29, v54);
      (*v44)(v17, v28);
      sub_10006D0EC(v30, v32);
      NSString v33 = String._bridgeToObjectiveC()();
      NSString v34 = String._bridgeToObjectiveC()();
      Class v35 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v30, v32);
      Class v36 = Date._bridgeToObjectiveC()().super.isa;
      id v37 = [v48 withGroupIdentifier:v33 keyIdentifier:v34 publicKey:v35 creationDate:v36];
      sub_10006D144(v30, v32);
      swift_release();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v22 = v50;
    }
    while (v49 != v25);
    uint64_t v38 = v55;
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_100214CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v35 = a1;
  uint64_t v5 = v4;
  uint64_t v34 = a3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)((char *)v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v15)
  {
    sub_10006C51C(&qword_100455670);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378460;
    v40[0] = kSecClass;
    type metadata accessor for CFString(0);
    uint64_t v19 = v18;
    sub_100219418((unint64_t *)&qword_100453E48, type metadata accessor for CFString);
    CFStringRef v20 = (id)kSecClass;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = v19;
    *(void *)(inited + 72) = kSecClassGenericPassword;
    v40[0] = kSecAttrAccount;
    CFStringRef v21 = (id)kSecClassGenericPassword;
    CFStringRef v22 = (id)kSecAttrAccount;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v35;
    *(void *)(inited + 152) = a2;
    v40[0] = kSecAttrAccessGroup;
    swift_bridgeObjectRetain();
    CFStringRef v23 = (id)kSecAttrAccessGroup;
    AnyHashable.init<A>(_:)();
    uint64_t v25 = *(void *)((char *)v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup);
    uint64_t v24 = *(void *)((char *)v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup + 8);
    *(void *)(inited + 240) = &type metadata for String;
    *(void *)(inited + 216) = v25;
    *(void *)(inited + 224) = v24;
    v40[0] = kSecAttrSynchronizable;
    swift_bridgeObjectRetain();
    CFStringRef v26 = (id)kSecAttrSynchronizable;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 312) = &type metadata for Bool;
    *(unsigned char *)(inited + 288) = 1;
    unint64_t v27 = sub_1001DB24C(inited);
    if (a4)
    {
      *(void *)&long long v38 = kSecAttrService;
      swift_bridgeObjectRetain();
      CFStringRef v28 = (id)kSecAttrService;
      AnyHashable.init<A>(_:)();
      id v39 = &type metadata for String;
      *(void *)&long long v38 = v34;
      *((void *)&v38 + 1) = a4;
      sub_1000761D0(&v38, v37);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v40[47] = v27;
      sub_1002CAEE8(v37, (uint64_t)v40, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      sub_1000AE724((uint64_t)v40);
    }
    swift_bridgeObjectRetain();
    uint64_t v30 = v36;
    unint64_t v31 = sub_100217958();
    swift_bridgeObjectRelease();
    if (v30)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v32 = v5;
      uint64_t v5 = sub_100219530((uint64_t)v31, (uint64_t)v32);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return (uint64_t)v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100215060()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unsigned int v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v12 - 8, v13);
  char v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021AF38(v1+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, (uint64_t)v15, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v15, v7);
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v16 = P256.KeyAgreement.PublicKey.x963Representation.getter();
  unint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  uint64_t v19 = self;
  sub_10006D0EC(v16, v18);
  NSString v20 = String._bridgeToObjectiveC()();
  NSString v21 = String._bridgeToObjectiveC()();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v16, v18);
  Class v23 = Date._bridgeToObjectiveC()().super.isa;
  id v24 = [v19 withGroupIdentifier:v20 keyIdentifier:v21 publicKey:isa creationDate:v23];
  sub_10006D144(v16, v18);

  return v24;
}

uint64_t sub_10021542C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[0] = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v22[0] - 8);
  __chkstk_darwin(v22[0], v13);
  char v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453800 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void **)(qword_100458D38 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  unint64_t v17 = (void *)swift_allocObject();
  void v17[2] = v3;
  v17[3] = a1;
  v17[4] = a2;
  v17[5] = a3;
  aBlock[4] = sub_100219C28;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100416250;
  unint64_t v18 = _Block_copy(aBlock);
  id v19 = v16;
  id v20 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v22[1] = _swiftEmptyArrayStorage;
  sub_100219418((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, void))(v12 + 8))(v15, v22[0]);
  return swift_release();
}

uint64_t sub_100215730(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  if (qword_100453800 != -1) {
    swift_once();
  }
  sub_100215808(a2);
  return a3(0);
}

void sub_100215808(void *a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *uint64_t v8 = v9;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v11)
  {
    sub_10006C51C(&qword_100455670);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100379160;
    v35[1] = v2;
    CFStringRef v36 = kSecClass;
    type metadata accessor for CFString(0);
    uint64_t v14 = v13;
    sub_100219418((unint64_t *)&qword_100453E48, type metadata accessor for CFString);
    CFStringRef v15 = (id)kSecClass;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = v14;
    *(void *)(inited + 72) = kSecClassGenericPassword;
    CFStringRef v36 = kSecAttrAccount;
    CFStringRef v16 = (id)kSecClassGenericPassword;
    CFStringRef v17 = (id)kSecAttrAccount;
    AnyHashable.init<A>(_:)();
    id v18 = [a1 groupIdentifier];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v19;
    *(void *)(inited + 152) = v21;
    CFStringRef v36 = kSecAttrService;
    CFStringRef v22 = (id)kSecAttrService;
    AnyHashable.init<A>(_:)();
    id v23 = [a1 keyIdentifier];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    *(void *)(inited + 240) = &type metadata for String;
    *(void *)(inited + 216) = v24;
    *(void *)(inited + 224) = v26;
    CFStringRef v36 = kSecAttrAccessGroup;
    CFStringRef v27 = (id)kSecAttrAccessGroup;
    AnyHashable.init<A>(_:)();
    uint64_t v29 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup);
    uint64_t v28 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup + 8);
    *(void *)(inited + 312) = &type metadata for String;
    *(void *)(inited + 288) = v29;
    *(void *)(inited + 296) = v28;
    CFStringRef v36 = kSecAttrSynchronizable;
    swift_bridgeObjectRetain();
    CFStringRef v30 = (id)kSecAttrSynchronizable;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 384) = &type metadata for Bool;
    *(unsigned char *)(inited + 360) = 1;
    sub_1001DB24C(inited);
    unint64_t v31 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainWrapper);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned int v33 = [v31 deleteItem:isa];

    if (v33)
    {
      sub_10007582C(0, (unint64_t *)&qword_100454598);
      CFStringRef v36 = 0;
      uint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      CFStringRef v36 = (CFStringRef)0xD000000000000016;
      uint64_t v37 = 0x80000001003B8220;
      unsigned int v38 = v33;
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      sub_100299FAC(0, 1, (uint64_t)v36, v37, 0);
      swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100215CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v15);
  CFStringRef v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453800 != -1) {
    swift_once();
  }
  id v18 = *(void **)(qword_100458D38 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v5;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = a3;
  v19[6] = v23;
  v19[7] = a5;
  aBlock[4] = sub_100219A98;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004161D8;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_100219418((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v24);
  return swift_release();
}

uint64_t sub_100216014(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, unint64_t, void))
{
  if (qword_100453800 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_100216148(a2, a3, a4);
  unint64_t v11 = v10;
  sub_10006D0EC(v9, v10);
  a5(v9, v11, 0);
  sub_10006D144(v9, v11);

  return sub_10006D144(v9, v11);
}

uint64_t sub_100216148(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v96 = a3;
  uint64_t v7 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v85 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v87 = (uint64_t)&v80 - v13;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v80 - v15;
  uint64_t v17 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v88 = *(void *)(v17 - 8);
  uint64_t v89 = v17;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  Class v84 = (void (*)(char *, uint64_t))((char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v86 = (void (*)(char *, uint64_t))((char *)&v80 - v23);
  __chkstk_darwin(v22, v24);
  uint64_t v26 = (void (*)(char *, uint64_t))((char *)&v80 - v25);
  uint64_t v27 = type metadata accessor for DispatchPredicate();
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  unint64_t v31 = (uint64_t *)((char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v32 = *(void **)(v4 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *unint64_t v31 = v32;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v27);
  id v33 = v32;
  uint64_t v34 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v31, v27);
  if ((v34 & 1) == 0)
  {
    __break(1u);
    goto LABEL_48;
  }
  strcpy((char *)v91, "version");
  v91[1] = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v35 = sub_1002C0B68((uint64_t)&v92);
    uint64_t v36 = a2;
    if (v37)
    {
      sub_1000AA580(*(void *)(a1 + 56) + 32 * v35, (uint64_t)&v94);
    }
    else
    {
      long long v94 = 0u;
      long long v95 = 0u;
    }
  }
  else
  {
    long long v94 = 0u;
    long long v95 = 0u;
    uint64_t v36 = a2;
  }
  sub_1000AE724((uint64_t)&v92);
  if (!*((void *)&v95 + 1))
  {
    sub_10008E734((uint64_t)&v94, (uint64_t *)&unk_1004556C0);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v42 = 0x20676E697373694DLL;
    uint64_t v43 = 0xEF6E6F6973726576;
LABEL_22:
    sub_100299FAC(0, 1, v42, v43, 0);
    swift_willThrow();
    return v4;
  }
  uint64_t v39 = v91[0];
  uint64_t v38 = v91[1];
  strcpy((char *)v91, "publicKeyHash");
  HIWORD(v91[1]) = -4864;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v40 = sub_1002C0B68((uint64_t)&v92), (v41 & 1) != 0))
  {
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v40, (uint64_t)&v94);
  }
  else
  {
    long long v94 = 0u;
    long long v95 = 0u;
  }
  sub_1000AE724((uint64_t)&v92);
  if (!*((void *)&v95 + 1))
  {
    swift_bridgeObjectRelease();
    sub_10008E734((uint64_t)&v94, (uint64_t *)&unk_1004556C0);
LABEL_21:
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v42 = 0xD000000000000018;
    uint64_t v43 = 0x80000001003B81E0;
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  uint64_t v82 = v39;
  uint64_t v83 = v38;
  uint64_t v44 = v91[0];
  uint64_t v45 = v91[1];
  swift_bridgeObjectRetain();
  id v46 = v96;
  unint64_t v47 = v90;
  uint64_t v48 = sub_100214CA4(v36, (uint64_t)v96, v44, v45);
  if (v47)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return v4;
  }
  unint64_t v50 = v48;
  uint64_t v81 = v44;
  uint64_t v90 = (void *)v45;
  uint64_t result = swift_bridgeObjectRelease();
  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v79 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v51 = v79;
  }
  else
  {
    uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v52 = v46;
  uint64_t v34 = v83;
  if (!v51)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v92 = 0;
    uint64_t v93 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    uint64_t v92 = 0xD00000000000001CLL;
    uint64_t v93 = 0x80000001003B8200;
    v58._countAndFlagsBits = v36;
    v58._object = v52;
    String.append(_:)(v58);
    v59._countAndFlagsBits = 543451424;
    v59._object = (void *)0xE400000000000000;
    String.append(_:)(v59);
    v60._countAndFlagsBits = v81;
    v60._object = v90;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    uint64_t v42 = v92;
    uint64_t v43 = v93;
    goto LABEL_22;
  }
  if ((v50 & 0xC000000000000001) != 0)
  {
    uint64_t v81 = specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    NSString v53 = String._bridgeToObjectiveC()();
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v56 = v55;
    id v96 = v53;
    if (v54 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v56 == v57)
    {
      swift_bridgeObjectRelease_n();
LABEL_35:
      swift_bridgeObjectRelease();

      sub_10021AF38(v81+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, (uint64_t)v16, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      uint64_t v63 = v88;
      uint64_t v62 = v89;
      (*(void (**)(void (*)(char *, uint64_t), char *, uint64_t))(v88 + 32))(v26, v16, v89);
      uint64_t v64 = sub_1000AE120(a1, (uint64_t)v26);
LABEL_36:
      uint64_t v4 = v64;
      (*(void (**)(void, uint64_t))(v63 + 8))(v26, v62);
      swift_release();
      return v4;
    }
    char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v61) {
      goto LABEL_35;
    }
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;
    if (v65 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v67 == v68)
    {
      swift_bridgeObjectRelease_n();
LABEL_41:
      swift_bridgeObjectRelease();

      uint64_t v70 = v87;
      sub_10021AF38(v81+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, v87, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      uint64_t v63 = v88;
      uint64_t v62 = v89;
      uint64_t v26 = v86;
      (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v88 + 32))(v86, v70, v89);
      uint64_t v64 = (uint64_t)sub_100188428(a1, (uint64_t)v26);
      goto LABEL_36;
    }
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v69) {
      goto LABEL_41;
    }
    uint64_t v71 = v81;
    uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v74 = v73;
    if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v74 == v75)
    {

      swift_bridgeObjectRelease_n();
LABEL_46:
      swift_bridgeObjectRelease();
      uint64_t v77 = v85;
      sub_10021AF38(v71+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, v85, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      uint64_t v63 = v88;
      uint64_t v62 = v89;
      uint64_t v26 = v84;
      (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(v88 + 32))(v84, v77, v89);
      uint64_t v64 = sub_1002D2DD0(a1, v26);
      goto LABEL_36;
    }
    char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v76) {
      goto LABEL_46;
    }
LABEL_48:
    uint64_t v4 = sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v92 = 0;
    uint64_t v93 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    uint64_t v92 = 0xD000000000000012;
    uint64_t v93 = 0x80000001003B81C0;
    v78._countAndFlagsBits = v82;
    v78._object = (void *)v34;
    String.append(_:)(v78);
    swift_bridgeObjectRelease();
    sub_100299FAC(0, 1, v92, v93, 0);
    swift_willThrow();
    swift_release();
    return v4;
  }
  if (*(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v81 = *(void *)(v50 + 32);
    swift_retain();
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t sub_100216C94(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a6;
  unint64_t v31 = a5;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v34 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v13);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v16 - 8);
  uint64_t v33 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453800 != -1) {
    swift_once();
  }
  uint64_t v20 = *(void **)(qword_100458D38 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v7;
  v21[3] = a1;
  v21[4] = a2;
  v21[5] = a3;
  unint64_t v22 = v31;
  v21[6] = a4;
  v21[7] = v22;
  v21[8] = v29;
  v21[9] = a7;
  aBlock[4] = sub_100219504;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100416160;
  uint64_t v23 = _Block_copy(aBlock);
  id v24 = v20;
  sub_10006D0EC(a1, a2);
  id v25 = a3;
  sub_10006D0EC(a4, v22);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v35 = _swiftEmptyArrayStorage;
  sub_100219418((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  uint64_t v26 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v33);
  return swift_release();
}

void sub_100216FD8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(id, void))
{
  if (qword_100453800 != -1) {
    swift_once();
  }
  sub_100217164(a2, a3, a4, a5, a6);
  id v13 = objc_allocWithZone((Class)NSDictionary);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v15 = [v13 initWithDictionary:isa];

  a7(v15, 0);
}

char *sub_100217164(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  id v15 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(v5 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *id v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = (char *)(*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
    return sub_1000ADB84(a1, a2, a4, a5);
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24) {
    return sub_1000ADB84(a1, a2, a4, a5);
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
    return sub_1001879D4(a1, a2, a4, a5);
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v30) {
    return sub_1001879D4(a1, a2, a4, a5);
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;
  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
  {
    swift_bridgeObjectRelease_n();
    return (char *)sub_1002D3554(a1, a2, a4, a5);
  }
  char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35) {
    return (char *)sub_1002D3554(a1, a2, a4, a5);
  }
  sub_10007582C(0, (unint64_t *)&qword_100454598);
  uint64_t v38 = 0;
  uint64_t v39 = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  v36._object = (void *)0x80000001003B81C0;
  v36._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v36);
  uint64_t v40 = a3;
  type metadata accessor for SESPrivacyEncryptionScheme(0);
  _print_unlocked<A, B>(_:_:)();
  sub_100299FAC(0, 1, v38, v39, 0);
  return (char *)swift_willThrow();
}

id sub_100217614()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SESPrivacyKeyImplementation(0)) init];
  qword_100458D38 = (uint64_t)result;
  return result;
}

uint64_t sub_100217648()
{
  uint64_t v1 = v0;
  uint64_t v27 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
  __chkstk_darwin(v27, v2);
  uint64_t v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10021AF38(v1+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, (uint64_t)v13, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v13, v5);
  uint64_t v14 = P256.KeyAgreement.PrivateKey.derRepresentation.getter();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v17 = *(void *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier);
  uint64_t v18 = *(void *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier
                  + 8);
  uint64_t v19 = *(void *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier);
  uint64_t v20 = *(void *)(v1
                  + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier
                  + 8);
  uint64_t v21 = v1
      + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate;
  uint64_t v22 = (char *)v4 + *(int *)(v27 + 32);
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v22, v21, v23);
  *uint64_t v4 = v14;
  v4[1] = v16;
  v4[2] = v17;
  v4[3] = v18;
  v4[4] = v19;
  v4[5] = v20;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  sub_10006D0EC(v14, v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyListEncoder.init()();
  sub_100219418(&qword_100458F18, (void (*)(uint64_t))type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
  uint64_t v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  sub_100219B24((uint64_t)v4, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
  sub_10006D144(v14, v16);
  swift_release();
  return v24;
}

void *sub_100217958()
{
  uint64_t v2 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v35 = 0;
  *(void *)&long long v33 = 0;
  unsigned int v8 = [v0 copyMultipleItemData:isa outDatas:&v35 error:&v33];

  uint64_t v9 = (void *)v33;
  uint64_t v10 = (void *)v35;
  if (v8)
  {
    if ((void)v35)
    {
      id v11 = (id)v33;
      id v12 = v10;
      uint64_t v13 = (uint64_t)[v12 count];
      uint64_t v32 = _swiftEmptyArrayStorage;
      sub_1002CFA80(0, v13 & ~(v13 >> 63), 0);
      id v14 = v12;
      NSArray.makeIterator()();

      if (v13 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      id v28 = v14;
      uint64_t v29 = v3;
      uint64_t v30 = v1;
      if (v13)
      {
        sub_100219418(&qword_100458F00, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
        while (1)
        {
          dispatch thunk of IteratorProtocol.next()();
          if (!v36) {
            break;
          }
          sub_1000AA580((uint64_t)&v35, (uint64_t)&v33);
          swift_dynamicCast();
          sub_10007594C((uint64_t)&v35);
          long long v31 = v37;
          unint64_t v15 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002CFA80(0, v15[2] + 1, 1);
            unint64_t v15 = v32;
          }
          unint64_t v17 = v15[2];
          unint64_t v16 = v15[3];
          if (v17 >= v16 >> 1)
          {
            sub_1002CFA80(v16 > 1, v17 + 1, 1);
            unint64_t v15 = v32;
          }
          v15[2] = v17 + 1;
          *(_OWORD *)&v15[2 * v17 + 4] = v31;
          if (!--v13) {
            goto LABEL_14;
          }
        }
LABEL_24:
        __break(1u);
      }
LABEL_14:
      sub_100219418(&qword_100458F00, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
      dispatch thunk of IteratorProtocol.next()();
      while (v34)
      {
        sub_1000761D0(&v33, &v35);
        sub_1000AA580((uint64_t)&v35, (uint64_t)&v33);
        swift_dynamicCast();
        sub_10007594C((uint64_t)&v35);
        long long v31 = v37;
        uint64_t v20 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFA80(0, v20[2] + 1, 1);
          uint64_t v20 = v32;
        }
        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1)
        {
          sub_1002CFA80(v21 > 1, v22 + 1, 1);
          uint64_t v20 = v32;
        }
        v20[2] = v22 + 1;
        *(_OWORD *)&v20[2 * v22 + 4] = v31;
        dispatch thunk of IteratorProtocol.next()();
      }
      (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v2);
      sub_10008E734((uint64_t)&v33, (uint64_t *)&unk_1004556C0);
      id v23 = v28;

      uint64_t v9 = v32;
    }
    else
    {
      uint64_t v24 = sub_10007582C(0, (unint64_t *)&qword_100454598);
      id v25 = v9;
      uint64_t v9 = (void *)v24;
      sub_100299FAC(0, 1, 0xD000000000000033, 0x80000001003B8120, 0);
      swift_willThrow();
    }
  }
  else
  {
    id v18 = (id)v33;
    id v19 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v9;
}

uint64_t sub_100217E3C()
{
  return 1;
}

Swift::Int sub_100217E44()
{
  return Hasher._finalize()();
}

uint64_t sub_100217E90()
{
  return String.hash(into:)();
}

Swift::Int sub_100217EA0()
{
  return Hasher._finalize()();
}

uint64_t sub_100217EE8@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10040F380, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100217F3C(void *a1@<X8>)
{
  *a1 = 909455952;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_100217F50()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100217FB0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100218000(void *a1)
{
  Swift::Int v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_100458FD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_10021AE90();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  sub_10021AFA0();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = *v3;
    v11[15] = 1;
    sub_1001A6A8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
    LOBYTE(v12) = 4;
    type metadata accessor for Date();
    sub_100219418(&qword_1004575C0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_100218254@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10006C51C(&qword_100458FC0);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v33 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
  __chkstk_darwin(v11, v12);
  id v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v34 = a1;
  sub_100075908(a1, v15);
  sub_10021AE90();
  uint64_t v16 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return sub_10007594C((uint64_t)v34);
  }
  unint64_t v17 = v14;
  id v18 = v6;
  uint64_t v19 = v32;
  LOBYTE(v36) = 0;
  sub_10021AEE4();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v38 = 1;
  sub_1001A6880();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v20 = v19;
  unint64_t v21 = v17;
  uint64_t v22 = v37;
  *unint64_t v21 = v36;
  v21[1] = v22;
  LOBYTE(v36) = 2;
  v21[2] = KeyedDecodingContainer.decode(_:forKey:)();
  v21[3] = v23;
  uint64_t v35 = v23;
  LOBYTE(v36) = 3;
  v29[1] = 0;
  v21[4] = KeyedDecodingContainer.decode(_:forKey:)();
  v21[5] = v24;
  LOBYTE(v36) = 4;
  sub_100219418(&qword_100457558, (void (*)(uint64_t))&type metadata accessor for Date);
  id v25 = v18;
  uint64_t v26 = (uint64_t)v21;
  uint64_t v27 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v26 + *(int *)(v11 + 32), v25, v3);
  sub_10021AF38(v26, v31, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
  sub_10007594C((uint64_t)v34);
  return sub_100219B24(v26, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
}

uint64_t sub_1002186BC()
{
  uint64_t result = 0x6570795479656BLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4B65746176697270;
      break;
    case 2:
      uint64_t result = 0x746E65644979656BLL;
      break;
    case 3:
      uint64_t result = 0x65644970756F7267;
      break;
    case 4:
      uint64_t result = 0x6E6F697461657263;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100218794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10021B380(a1, a2);
  *a3 = result;
  return result;
}

void sub_1002187BC(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1002187C8(uint64_t a1)
{
  unint64_t v2 = sub_10021AE90();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100218804(uint64_t a1)
{
  unint64_t v2 = sub_10021AE90();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100218840@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100218254(a1, a2);
}

uint64_t sub_100218858(void *a1)
{
  return sub_100218000(a1);
}

uint64_t sub_100218870()
{
  sub_100219B24(v0+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

id sub_10021895C()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1, v2);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v20 = OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue;
  uint64_t v19 = sub_10007582C(0, (unint64_t *)&qword_1004566E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v15 = v0;
  DispatchQoS.init(qosClass:relativePriority:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_100219418((unint64_t *)&qword_1004566E8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10006C51C(&qword_1004566F0);
  sub_100176E90((unint64_t *)&qword_1004566F8, &qword_1004566F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v20] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainWrapper;
  *(void *)&v15[v16] = [self sharedInstance];
  unint64_t v17 = &v15[OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup];
  *(void *)unint64_t v17 = 0xD000000000000028;
  *((void *)v17 + 1) = 0x80000001003B8190;
  Logger.init(subsystem:category:)();

  v22.receiver = v15;
  v22.super_class = ObjectType;
  return [super init];
}

uint64_t sub_100218DEC()
{
  return type metadata accessor for SESPrivacyKeyImplementation(0);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_100458D88);
}

uint64_t sub_100218E14()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100218EC8()
{
  return type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(0);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(uint64_t a1)
{
  return sub_100087C90(a1, qword_100458DE0);
}

uint64_t sub_100218EF0()
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t *sub_100218FC8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = type metadata accessor for P256.KeyAgreement.PrivateKey();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  return a1;
}

uint64_t sub_100219078(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1002190DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_100219140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1002191A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100219208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10021926C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1002192D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_100458EF0);
}

uint64_t sub_100219374(uint64_t a1)
{
  uint64_t result = type metadata accessor for P256.KeyAgreement.PrivateKey();
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t sub_100219418(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100219460()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100219498(uint64_t a1, uint64_t a2)
{
  sub_10012544C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1002194B4()
{
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));

  sub_10006D144(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_100219504()
{
  sub_100216FD8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void (**)(id, void))(v0 + 64));
}

uint64_t sub_100219518(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100219528()
{
  return swift_release();
}

void *sub_100219530(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v52 - 8);
  __chkstk_darwin(v52, v6);
  uint64_t v51 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v47 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v43 - v14;
  __chkstk_darwin(v13, v16);
  uint64_t v46 = (uint64_t)&v43 - v17;
  uint64_t v56 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(0);
  __chkstk_darwin(v56, v18);
  uint64_t v54 = (uint64_t *)((char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v59 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    NSString v53 = v15;
    uint64_t v55 = a2 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_logger;
    uint64_t v44 = (void (**)(uint64_t, char *, uint64_t))(v5 + 32);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v5 + 16);
    type metadata accessor for PropertyListDecoder();
    swift_bridgeObjectRetain();
    uint64_t v43 = a1;
    objc_super v22 = (unint64_t *)(a1 + 40);
    uint64_t v23 = v2;
    uint64_t v24 = v54;
    do
    {
      uint64_t v25 = *(v22 - 1);
      unint64_t v26 = *v22;
      swift_allocObject();
      sub_10006D0EC(v25, v26);
      PropertyListDecoder.init()();
      sub_100219418(&qword_100458F08, (void (*)(uint64_t))type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      if (v23)
      {
        swift_release();
        swift_errorRelease();
        uint64_t v23 = 0;
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to deserialize keychain data?", v32, 2u);
          uint64_t v23 = 0;
          uint64_t v24 = v54;
          swift_slowDealloc();
        }

        sub_10006D144(v25, v26);
      }
      else
      {
        swift_release();
        unint64_t v27 = v24[1];
        uint64_t v57 = *v24;
        unint64_t v58 = v27;
        sub_10006D0EC(v57, v27);
        sub_100219AD0();
        id v28 = v24;
        uint64_t v29 = (uint64_t)v53;
        P256.KeyAgreement.PrivateKey.init<A>(derRepresentation:)();
        uint64_t v50 = 0;
        uint64_t v33 = v29;
        uint64_t v34 = v46;
        sub_100219B84(v33, v46);
        uint64_t v35 = v34;
        uint64_t v36 = v47;
        sub_100219B84(v35, v47);
        uint64_t v37 = v28[3];
        uint64_t v38 = v28[4];
        uint64_t v39 = v28[5];
        uint64_t v48 = v28[2];
        uint64_t v49 = v38;
        (*v45)(v51, (char *)v28 + *(int *)(v56 + 32), v52);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100219B24((uint64_t)v28, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation);
        type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(0);
        uint64_t v40 = swift_allocObject();
        sub_100219B84(v36, v40+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey);
        char v41 = (uint64_t *)(v40
                        + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier);
        *char v41 = v48;
        v41[1] = v37;
        uint64_t v42 = (uint64_t *)(v40
                        + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier);
        *uint64_t v42 = v49;
        v42[1] = v39;
        (*v44)(v40+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate, v51, v52);
        sub_10006D144(v25, v26);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v59 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v23 = v50;
        uint64_t v24 = v54;
      }
      v22 += 2;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    return (void *)v59;
  }
  return result;
}

void sub_100219A48(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_100240924(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_100219A50()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100219A98()
{
  return sub_100219CF0((uint64_t (*)(void, void, void, void, void, void))sub_100216014);
}

uint64_t type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation(uint64_t a1)
{
  return sub_100087C90(a1, qword_100458F78);
}

unint64_t sub_100219AD0()
{
  unint64_t result = qword_100458F10;
  if (!qword_100458F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458F10);
  }
  return result;
}

uint64_t sub_100219B24(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100219B84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100219BE8()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100219C28()
{
  return sub_100215730(*(void *)(v0 + 16), *(void **)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_100219C34()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_100219C7C()
{
  sub_100214764(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void (**)(id, void))(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_100219C90()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100219CD8()
{
  return sub_100219CF0((uint64_t (*)(void, void, void, void, void, void))sub_100214224);
}

uint64_t sub_100219CF0(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100219D08(__CFString *a1, uint64_t a2)
{
  uint64_t v84 = a2;
  uint64_t v83 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v86 = v3;
  uint64_t v87 = v4;
  __chkstk_darwin(v3, v5);
  uint64_t v82 = (__CFString *)((char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey(0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v81 = (__CFString *)((char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (__CFString *)type metadata accessor for P256.KeyAgreement.PublicKey();
  length = (__CFString *)v10[-1].length;
  countAndFlagsBits = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = (__CFString *)type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v14 = v80[-1].length;
  __chkstk_darwin(v80, v15);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  objc_super v22 = (uint64_t *)((char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = v2;
  uint64_t v23 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_queue);
  *objc_super v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  id v24 = v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  P256.KeyAgreement.PrivateKey.init()();
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v26 = P256.KeyAgreement.PublicKey.x963Representation.getter();
  unint64_t v28 = v27;
  ((void (*)(char *, __CFString *))length->info)(v13, countAndFlagsBits);
  uint64_t v29 = sub_1002B3BD0(v26, v28);
  unint64_t v31 = v30;
  sub_10006D144(v26, v28);
  Swift::String v32 = Data.base64EncodedString(options:)(0);
  length = (__CFString *)v32._object;
  countAndFlagsBits = (__CFString *)v32._countAndFlagsBits;
  sub_10006D144(v29, v31);
  uint64_t v34 = v80;
  uint64_t v33 = v81;
  (*(void (**)(__CFString *, char *, __CFString *))(v14 + 16))(v81, v17, v80);
  uint64_t v35 = v84;
  swift_bridgeObjectRetain();
  uint64_t v36 = v82;
  static Date.now.getter();
  (*(void (**)(char *, __CFString *))(v14 + 8))(v17, v34);
  type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey(0);
  uint64_t v37 = swift_allocObject();
  sub_100219B84((uint64_t)v33, v37+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey);
  *(Swift::String *)(v37
                   + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_keyIdentifier) = v32;
  uint64_t v38 = (__CFString **)(v37
                      + OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_groupIdentifier);
  uint64_t v39 = v83;
  *uint64_t v38 = v83;
  v38[1] = (__CFString *)v35;
  (*(void (**)(uint64_t, __CFString *, uint64_t))(v87 + 32))(v37+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate, v36, v86);
  sub_10006C51C(&qword_100455670);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10037B540;
  CFStringRef v89 = kSecClass;
  type metadata accessor for CFString(0);
  uint64_t v42 = v41;
  sub_100219418((unint64_t *)&qword_100453E48, type metadata accessor for CFString);
  uint64_t v82 = (id)(id)kSecClass;
  uint64_t v77 = (__CFString *)(inited + 32);
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v42;
  *(void *)(inited + 72) = kSecClassGenericPassword;
  CFStringRef v89 = kSecAttrAccessible;
  uint64_t v81 = (id)(id)kSecAttrAccessible;
  CFStringRef v43 = (id)kSecClassGenericPassword;
  uint64_t v76 = inited + 104;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v42;
  *(void *)(inited + 144) = kSecAttrAccessibleAfterFirstUnlock;
  CFStringRef v89 = kSecAttrAccount;
  uint64_t v80 = (id)(id)kSecAttrAccount;
  CFStringRef v44 = (id)kSecAttrAccessibleAfterFirstUnlock;
  uint64_t v75 = inited + 176;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 240) = &type metadata for String;
  *(void *)(inited + 216) = v39;
  *(void *)(inited + 224) = v35;
  CFStringRef v89 = kSecAttrService;
  uint64_t v45 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  uint64_t v83 = v45;
  uint64_t v74 = inited + 248;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 312) = &type metadata for String;
  uint64_t v46 = length;
  *(void *)(inited + 288) = countAndFlagsBits;
  *(void *)(inited + 296) = v46;
  CFStringRef v89 = kSecAttrAccessGroup;
  countAndFlagsBits = (id)(id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain();
  uint64_t v73 = inited + 320;
  AnyHashable.init<A>(_:)();
  uint64_t v47 = *(void *)(v88 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup);
  uint64_t v48 = *(void *)(v88 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainGroup + 8);
  *(void *)(inited + 384) = &type metadata for String;
  *(void *)(inited + 360) = v47;
  *(void *)(inited + 368) = v48;
  CFStringRef v89 = kSecAttrSynchronizable;
  length = (id)(id)kSecAttrSynchronizable;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 456) = &type metadata for Bool;
  *(unsigned char *)(inited + 432) = 1;
  CFStringRef v89 = kSecValueData;
  uint64_t v49 = (id)(id)kSecValueData;
  AnyHashable.init<A>(_:)();
  uint64_t v84 = v37;
  uint64_t v50 = v85;
  uint64_t v51 = sub_100217648();
  uint64_t v85 = v50;
  if (v50)
  {

    sub_1000AE724(inited + 464);
    NSString v53 = &qword_100458110;
    sub_10008E734(inited + 392, &qword_100458110);
    sub_10008E734(v73, &qword_100458110);
    sub_10008E734(v74, &qword_100458110);
    sub_10008E734(v75, &qword_100458110);
    sub_10008E734(v76, &qword_100458110);
    sub_10008E734((uint64_t)v77, &qword_100458110);
    swift_setDeallocating();
    sub_10006C51C(&qword_100458110);
    swift_arrayDestroy();
    goto LABEL_10;
  }
  uint64_t v54 = v51;
  unint64_t v55 = v52;
  uint64_t v77 = v49;
  uint64_t v56 = v82;
  uint64_t v57 = v88;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v54, v55);
  uint64_t result = sub_10007582C(0, (unint64_t *)&qword_100457A58);
  *(void *)(inited + 528) = result;
  *(void *)(inited + 504) = isa;
  if (!kSecAttrSyncViewHint) {
    goto LABEL_14;
  }
  CFStringRef v89 = kSecAttrSyncViewHint;
  unint64_t v59 = (id)(id)kSecAttrSyncViewHint;
  uint64_t result = AnyHashable.init<A>(_:)();
  if (kSecAttrViewHintApplePay)
  {
    id v60 = kSecAttrViewHintApplePay;

    *(void *)(inited + 600) = v42;
    *(void *)(inited + 576) = v60;
    sub_1001DB24C(inited);
    char v61 = *(void **)(v57 + OBJC_IVAR____TtC10seserviced27SESPrivacyKeyImplementation_keychainWrapper);
    Class v62 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unsigned int v63 = [v61 addItem:v62];

    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v66 = 67109120;
      LODWORD(v89) = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Added keychain item %d", v66, 8u);
      swift_slowDealloc();
    }

    uint64_t v67 = v86;
    uint64_t v68 = v87;
    if (!v63)
    {
      uint64_t v71 = v84;
      NSString v53 = (uint64_t *)sub_100215060();
      swift_setDeallocating();
      sub_100219B24(v71+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_privateKey, type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKey);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v71+ OBJC_IVAR____TtCC10seserviced27SESPrivacyKeyImplementationP33_01F92E85A5349E347722992BF9B9F8DA10PrivacyKey_creationDate, v67);
      swift_deallocClassInstance();
      return (uint64_t)v53;
    }
    uint64_t v69 = sub_10007582C(0, (unint64_t *)&qword_100454598);
    CFStringRef v89 = 0;
    uint64_t v90 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    CFStringRef v89 = (CFStringRef)0xD00000000000001ALL;
    uint64_t v90 = 0x80000001003B8240;
    unsigned int v91 = v63;
    v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v70);
    swift_bridgeObjectRelease();
    NSString v53 = (uint64_t *)v69;
    sub_100299FAC(0, 1, (uint64_t)v89, v90, 0);
    swift_willThrow();
LABEL_10:
    swift_release();
    return (uint64_t)v53;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t *sub_10021A7E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10006D0EC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a2[4];
    uint64_t v11 = a2[5];
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    a1[4] = v10;
    a1[5] = v11;
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_10021A8FC(uint64_t a1, uint64_t a2)
{
  sub_10006D144(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_10021A988(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  uint64_t v9 = a2[4];
  uint64_t v10 = a2[5];
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  a1[4] = v9;
  a1[5] = v10;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t *sub_10021AA4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10006D144(v8, v9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_10021AB2C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 32);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10021ABB0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10006D144(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_10021AC60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10021AC74);
}

uint64_t sub_10021AC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10021AD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10021AD38);
}

uint64_t sub_10021AD38(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10021ADE0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10021AE90()
{
  unint64_t result = qword_100458FC8;
  if (!qword_100458FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458FC8);
  }
  return result;
}

unint64_t sub_10021AEE4()
{
  unint64_t result = qword_100458FD0;
  if (!qword_100458FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458FD0);
  }
  return result;
}

uint64_t sub_10021AF38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10021AFA0()
{
  unint64_t result = qword_100458FE0;
  if (!qword_100458FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458FE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    void *result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10021B0C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys()
{
  return &type metadata for SESPrivacyKeyImplementation.PrivacyKey.KeychainRepresentation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10021B1E8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType()
{
  return &type metadata for SESPrivacyKeyImplementation.PrivacyKey.PrivateKeyType;
}

unint64_t sub_10021B224()
{
  unint64_t result = qword_100458FE8;
  if (!qword_100458FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458FE8);
  }
  return result;
}

unint64_t sub_10021B27C()
{
  unint64_t result = qword_100458FF0;
  if (!qword_100458FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458FF0);
  }
  return result;
}

unint64_t sub_10021B2D4()
{
  unint64_t result = qword_100458FF8;
  if (!qword_100458FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100458FF8);
  }
  return result;
}

unint64_t sub_10021B32C()
{
  unint64_t result = qword_100459000;
  if (!qword_100459000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459000);
  }
  return result;
}

uint64_t sub_10021B380(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570795479656BLL && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEE00617461447965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65644979656BLL && a2 == 0xED00007265696669 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65644970756F7267 && a2 == 0xEF7265696669746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xEC00000065746144)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_10021B624()
{
  unint64_t result = qword_100459008;
  if (!qword_100459008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459008);
  }
  return result;
}

uint64_t type metadata accessor for SingleCallback()
{
  return self;
}

Swift::Int sub_10021B810()
{
  return Hasher._finalize()();
}

Swift::Int sub_10021B8AC()
{
  return Hasher._finalize()();
}

uint64_t sub_10021B990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for PresentmentInfo();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v51 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v52 = (uint64_t)&v46 - v17;
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v21 - 8);
  uint64_t v48 = v21;
  objc_super v22 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 16);
  uint64_t v49 = a1;
  uint64_t v50 = a3;
  uint64_t result = v22(a3, a1);
  id v24 = _swiftEmptyArrayStorage;
  uint64_t v54 = v6;
  unint64_t v55 = _swiftEmptyArrayStorage;
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v53 = v25;
  if (v25)
  {
    unint64_t v26 = 0;
    unint64_t v27 = _swiftEmptyArrayStorage;
    while (v26 < *(void *)(a2 + 16))
    {
      unint64_t v28 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v29 = *(void *)(v7 + 72);
      sub_100220298(a2 + v28 + v29 * v26, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      if (v20[*(int *)(v6 + 20)])
      {
        uint64_t result = sub_100220300((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      }
      else
      {
        sub_100220360((uint64_t)v20, v52, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002CFC80(0, v27[2] + 1, 1);
        }
        unint64_t v27 = v55;
        unint64_t v31 = v55[2];
        unint64_t v30 = v55[3];
        if (v31 >= v30 >> 1)
        {
          sub_1002CFC80(v30 > 1, v31 + 1, 1);
          unint64_t v27 = v55;
        }
        v27[2] = v31 + 1;
        uint64_t result = sub_100220360(v52, (uint64_t)v27 + v28 + v31 * v29, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        uint64_t v25 = v53;
        uint64_t v6 = v54;
      }
      if (v25 == ++v26)
      {
        Swift::String v32 = v55;
        id v24 = _swiftEmptyArrayStorage;
        goto LABEL_14;
      }
    }
    __break(1u);
  }
  else
  {
    Swift::String v32 = _swiftEmptyArrayStorage;
LABEL_14:
    uint64_t v33 = v32[2];
    swift_release();
    uint64_t result = type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(0);
    uint64_t v52 = result;
    uint64_t v34 = (uint64_t)v51;
    *(void *)(v50 + *(int *)(result + 20)) = v33;
    unint64_t v55 = _swiftEmptyArrayStorage;
    if (!v25)
    {
LABEL_26:
      uint64_t v42 = v48;
      uint64_t v41 = v49;
      uint64_t v43 = v47;
      uint64_t v44 = v52;
      swift_bridgeObjectRelease();
      uint64_t v45 = v24[2];
      swift_release();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
      *(void *)(v50 + *(int *)(v44 + 24)) = v45;
      return result;
    }
    unint64_t v35 = 0;
    uint64_t v36 = _swiftEmptyArrayStorage;
    while (v35 < *(void *)(a2 + 16))
    {
      unint64_t v37 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v38 = *(void *)(v7 + 72);
      sub_100220298(a2 + v37 + v38 * v35, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      if (v14[*(int *)(v6 + 20)] == 1)
      {
        sub_100220360((uint64_t)v14, v34, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFC80(0, v36[2] + 1, 1);
          uint64_t v34 = (uint64_t)v51;
        }
        uint64_t v36 = v55;
        unint64_t v40 = v55[2];
        unint64_t v39 = v55[3];
        if (v40 >= v39 >> 1)
        {
          sub_1002CFC80(v39 > 1, v40 + 1, 1);
          uint64_t v34 = (uint64_t)v51;
          uint64_t v36 = v55;
        }
        v36[2] = v40 + 1;
        uint64_t result = sub_100220360(v34, (uint64_t)v36 + v37 + v40 * v38, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        uint64_t v25 = v53;
        uint64_t v6 = v54;
      }
      else
      {
        uint64_t result = sub_100220300((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      }
      if (v25 == ++v35)
      {
        id v24 = v55;
        goto LABEL_26;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10021BE20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10014097C(*a1, *a2);
}

Swift::Int sub_10021BE2C()
{
  return sub_10021B810();
}

uint64_t sub_10021BE34()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10021BEBC()
{
  return sub_1002BC084();
}

unint64_t sub_10021BEC4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10040F3B8;
  unint64_t result = sub_100221AAC(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10021BEFC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 0x80000001003B11E0;
  unint64_t v5 = 0xD000000000000016;
  if (v2 != 1)
  {
    unint64_t v5 = 0xD000000000000019;
    unint64_t v4 = 0x80000001003B1200;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 25705;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10021BF54()
{
  unint64_t v0 = sub_10021C368();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_1002CFCBC(0, v1, 0);
    uint64_t v2 = sub_10019CFB8(v0);
    if ((v2 & 0x8000000000000000) == 0)
    {
      unint64_t v4 = v2;
      if (v2 < 1 << *(unsigned char *)(v0 + 32))
      {
        uint64_t v5 = 0;
        unint64_t v6 = v0 + 64;
        uint64_t v7 = &v34;
        int v30 = v3;
        unint64_t v31 = v0 + 64;
        do
        {
          unint64_t v8 = v4 >> 6;
          if ((*(void *)(v6 + 8 * (v4 >> 6)) & (1 << v4)) == 0) {
            goto LABEL_38;
          }
          if (*(_DWORD *)(v0 + 36) != v3) {
            goto LABEL_39;
          }
          char v9 = *(unsigned char *)(*(void *)(v0 + 48) + v4);
          sub_1000AA580(*(void *)(v0 + 56) + 32 * v4, (uint64_t)v40);
          v39[0] = v9;
          LOBYTE(v37[0]) = v9;
          sub_1000AA580((uint64_t)v40, (uint64_t)v37 + 8);
          v35[0] = v37[0];
          v35[1] = v37[1];
          uint64_t v36 = v38;
          sub_10008E734((uint64_t)v39, &qword_100459068);
          int v10 = LOBYTE(v35[0]);
          char v33 = v35[0];
          sub_1000AA580((uint64_t)v35 + 8, (uint64_t)v7);
          if (v10)
          {
            if (v10 == 1)
            {
              unint64_t v11 = 0x80000001003B11E0;
              unint64_t v12 = 0xD000000000000016;
            }
            else
            {
              unint64_t v12 = 0xD000000000000019;
              unint64_t v11 = 0x80000001003B1200;
            }
          }
          else
          {
            unint64_t v11 = 0xE200000000000000;
            unint64_t v12 = 25705;
          }
          *(void *)&long long v41 = v12;
          *((void *)&v41 + 1) = v11;
          sub_1000AA580((uint64_t)v35 + 8, (uint64_t)v32);
          sub_1000761D0(v32, v42);
          uint64_t v13 = v7;
          sub_10007594C((uint64_t)v7);
          sub_10008E734((uint64_t)v35, &qword_100459068);
          uint64_t v14 = v43;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002CFCBC(0, v14[2] + 1, 1);
            uint64_t v14 = v43;
          }
          unint64_t v16 = v14[2];
          unint64_t v15 = v14[3];
          if (v16 >= v15 >> 1)
          {
            sub_1002CFCBC(v15 > 1, v16 + 1, 1);
            uint64_t v14 = v43;
          }
          v14[2] = v16 + 1;
          uint64_t v17 = &v14[6 * v16];
          long long v18 = v41;
          long long v19 = v42[1];
          v17[3] = v42[0];
          v17[4] = v19;
          void v17[2] = v18;
          uint64_t v20 = 1 << *(unsigned char *)(v0 + 32);
          if ((uint64_t)v4 >= v20) {
            goto LABEL_40;
          }
          unint64_t v6 = v0 + 64;
          uint64_t v21 = *(void *)(v31 + 8 * v8);
          if ((v21 & (1 << v4)) == 0) {
            goto LABEL_41;
          }
          int v3 = v30;
          if (*(_DWORD *)(v0 + 36) != v30) {
            goto LABEL_42;
          }
          unint64_t v22 = v21 & (-2 << (v4 & 0x3F));
          if (v22)
          {
            unint64_t v4 = __clz(__rbit64(v22)) | v4 & 0xFFFFFFFFFFFFFFC0;
            int64_t v23 = v1;
            goto LABEL_28;
          }
          unint64_t v24 = v8 + 1;
          unint64_t v25 = (unint64_t)(v20 + 63) >> 6;
          int64_t v23 = v1;
          if (v8 + 1 < v25)
          {
            unint64_t v26 = *(void *)(v31 + 8 * v24);
            if (v26)
            {
LABEL_26:
              unint64_t v4 = __clz(__rbit64(v26)) + (v24 << 6);
              goto LABEL_28;
            }
            while (v25 - 2 != v8)
            {
              unint64_t v26 = *(void *)(v0 + 80 + 8 * v8++);
              if (v26)
              {
                unint64_t v24 = v8 + 1;
                goto LABEL_26;
              }
            }
          }
          unint64_t v4 = 1 << *(unsigned char *)(v0 + 32);
LABEL_28:
          if (++v5 == v23)
          {
            swift_bridgeObjectRelease();
            if (!v14[2]) {
              goto LABEL_35;
            }
            goto LABEL_33;
          }
          uint64_t v7 = v13;
        }
        while ((v4 & 0x8000000000000000) == 0 && (uint64_t)v4 < v20);
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_33:
      sub_10006C51C((uint64_t *)&unk_100455760);
      unint64_t v27 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
LABEL_35:
      unint64_t v27 = &_swiftEmptyDictionarySingleton;
    }
    *(void *)&long long v41 = v27;
    uint64_t v28 = swift_bridgeObjectRetain();
    sub_10021EE6C(v28, 1, &v41);
    swift_bridgeObjectRelease();
    return v41;
  }
  return result;
}

unint64_t sub_10021C368()
{
  sub_10006C51C(&qword_100459070);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378470;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v2 = UUID.uuidString.getter();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v3;
  *(unsigned char *)(inited + 72) = 1;
  uint64_t v4 = type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(0);
  uint64_t v5 = *(void *)(v0 + *(int *)(v4 + 20));
  *(void *)(inited + 104) = &type metadata for Int;
  *(void *)(inited + 80) = v5;
  *(unsigned char *)(inited + 112) = 2;
  uint64_t v6 = *(void *)(v0 + *(int *)(v4 + 24));
  *(void *)(inited + 144) = &type metadata for Int;
  *(void *)(inited + 120) = v6;
  return sub_1001DBBF0(inited);
}

uint64_t sub_10021C410(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_100459240);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_100221970();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  type metadata accessor for UUID();
  sub_100221810(&qword_1004591F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(0);
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10021C5F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  unint64_t v26 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10006C51C(&qword_100459230);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v7);
  char v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_100221970();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)a1);
  }
  uint64_t v14 = (uint64_t)v13;
  uint64_t v15 = v24;
  char v29 = 0;
  sub_100221810(&qword_100459218, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v16 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = *(void (**)(uint64_t, char *, uint64_t))(v15 + 32);
  long long v18 = v26;
  unint64_t v26 = (char *)v4;
  v17(v14, v18, v4);
  char v28 = 1;
  *(void *)(v14 + *(int *)(v10 + 20)) = KeyedDecodingContainer.decode(_:forKey:)();
  char v27 = 2;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v16);
  *(void *)(v14 + *(int *)(v10 + 24)) = v19;
  sub_100220298(v14, v22, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
  sub_10007594C((uint64_t)a1);
  return sub_100220300(v14, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
}

uint64_t sub_10021C984()
{
  unint64_t v1 = 0xD000000000000013;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000016;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_10021C9D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10021F868(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10021CA00(uint64_t a1)
{
  unint64_t v2 = sub_100221970();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10021CA3C(uint64_t a1)
{
  unint64_t v2 = sub_100221970();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10021CA78@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10021C5F4(a1, a2);
}

uint64_t sub_10021CA90(void *a1)
{
  return sub_10021C410(a1);
}

uint64_t sub_10021CAA8(unsigned __int8 *a1, char *a2)
{
  return sub_100140A70(*a1, *a2);
}

Swift::Int sub_10021CAB4()
{
  return sub_10021B8AC();
}

uint64_t sub_10021CABC()
{
  return sub_1002BBED4();
}

Swift::Int sub_10021CAC4()
{
  return sub_1002BBFA4();
}

unint64_t sub_10021CACC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1002203F8(*a1);
  *a2 = result;
  return result;
}

void sub_10021CAFC(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x64496D616461;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x656D614E707061;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000013;
      a1[1] = 0x80000001003B1230;
      break;
    case 3:
      *a1 = 0xD000000000000015;
      a1[1] = 0x80000001003B1250;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10021CBA0()
{
  unint64_t v0 = sub_10021CFF4();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v42 = _swiftEmptyArrayStorage;
    sub_1002CFCBC(0, v1, 0);
    uint64_t v2 = sub_10019CFB8(v0);
    if (v2 < 0 || (unint64_t v4 = v2, v2 >= 1 << *(unsigned char *)(v0 + 32)))
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x10021CFE4);
    }
    uint64_t v5 = 0;
    unint64_t v6 = v0 + 64;
    int64_t v28 = v1;
    int v29 = v3;
    unint64_t v30 = v0 + 64;
    while (1)
    {
      unint64_t v7 = v4 >> 6;
      if ((*(void *)(v6 + 8 * (v4 >> 6)) & (1 << v4)) == 0) {
        goto LABEL_37;
      }
      if (*(_DWORD *)(v0 + 36) != v3) {
        goto LABEL_38;
      }
      char v8 = *(unsigned char *)(*(void *)(v0 + 48) + v4);
      sub_1000AA580(*(void *)(v0 + 56) + 32 * v4, (uint64_t)v39);
      v38[0] = v8;
      LOBYTE(v36[0]) = v8;
      sub_1000AA580((uint64_t)v39, (uint64_t)v36 + 8);
      v34[0] = v36[0];
      v34[1] = v36[1];
      uint64_t v35 = v37;
      sub_10008E734((uint64_t)v38, &qword_100459058);
      uint64_t v9 = LOBYTE(v34[0]);
      char v32 = v34[0];
      sub_1000AA580((uint64_t)v34 + 8, (uint64_t)v33);
      unint64_t v10 = 0xE600000000000000;
      unint64_t v11 = 0x64496D616461;
      switch(v9)
      {
        case 1:
          unint64_t v10 = 0xE700000000000000;
          unint64_t v11 = 0x656D614E707061;
          break;
        case 2:
          unint64_t v10 = 0x80000001003B1230;
          unint64_t v11 = 0xD000000000000013;
          break;
        case 3:
          unint64_t v11 = 0xD000000000000015;
          unint64_t v10 = 0x80000001003B1250;
          break;
        default:
          break;
      }
      *(void *)&long long v40 = v11;
      *((void *)&v40 + 1) = v10;
      sub_1000AA580((uint64_t)v34 + 8, (uint64_t)v31);
      sub_1000761D0(v31, v41);
      sub_10007594C((uint64_t)v33);
      sub_10008E734((uint64_t)v34, &qword_100459058);
      uint64_t v12 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFCBC(0, v12[2] + 1, 1);
        uint64_t v12 = v42;
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1)
      {
        sub_1002CFCBC(v13 > 1, v14 + 1, 1);
        uint64_t v12 = v42;
      }
      void v12[2] = v14 + 1;
      uint64_t v15 = &v12[6 * v14];
      long long v16 = v40;
      long long v17 = v41[1];
      v15[3] = v41[0];
      v15[4] = v17;
      v15[2] = v16;
      uint64_t v18 = 1 << *(unsigned char *)(v0 + 32);
      if ((uint64_t)v4 >= v18) {
        goto LABEL_39;
      }
      unint64_t v6 = v0 + 64;
      uint64_t v19 = *(void *)(v30 + 8 * v7);
      if ((v19 & (1 << v4)) == 0) {
        goto LABEL_40;
      }
      int v3 = v29;
      if (*(_DWORD *)(v0 + 36) != v29) {
        goto LABEL_41;
      }
      unint64_t v20 = v19 & (-2 << (v4 & 0x3F));
      if (v20)
      {
        unint64_t v4 = __clz(__rbit64(v20)) | v4 & 0xFFFFFFFFFFFFFFC0;
        int64_t v21 = v28;
        goto LABEL_27;
      }
      unint64_t v22 = v7 + 1;
      unint64_t v23 = (unint64_t)(v18 + 63) >> 6;
      int64_t v21 = v28;
      if (v7 + 1 < v23)
      {
        unint64_t v24 = *(void *)(v30 + 8 * v22);
        if (v24)
        {
LABEL_25:
          unint64_t v4 = __clz(__rbit64(v24)) + (v22 << 6);
          goto LABEL_27;
        }
        while (v23 - 2 != v7)
        {
          unint64_t v24 = *(void *)(v0 + 80 + 8 * v7++);
          if (v24)
          {
            unint64_t v22 = v7 + 1;
            goto LABEL_25;
          }
        }
      }
      unint64_t v4 = 1 << *(unsigned char *)(v0 + 32);
LABEL_27:
      if (++v5 == v21)
      {
        swift_bridgeObjectRelease();
        if (v12[2]) {
          goto LABEL_32;
        }
LABEL_34:
        uint64_t v25 = &_swiftEmptyDictionarySingleton;
        goto LABEL_35;
      }
      if ((v4 & 0x8000000000000000) != 0 || (uint64_t)v4 >= v18) {
        goto LABEL_36;
      }
    }
  }
  swift_bridgeObjectRelease();
  if (!_swiftEmptyArrayStorage[2]) {
    goto LABEL_34;
  }
LABEL_32:
  sub_10006C51C((uint64_t *)&unk_100455760);
  uint64_t v25 = (void *)static _DictionaryStorage.allocate(capacity:)();
LABEL_35:
  *(void *)&long long v40 = v25;
  uint64_t v26 = swift_bridgeObjectRetain();
  sub_10021EE6C(v26, 1, &v40);
  swift_bridgeObjectRelease();
  return v40;
}

unint64_t sub_10021CFF4()
{
  uint64_t v1 = type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(0);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1 - 8, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_100459060);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378460;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v7 = *v0;
  *(void *)(inited + 64) = &type metadata for UInt64;
  *(void *)(inited + 40) = v7;
  *(unsigned char *)(inited + 72) = 1;
  long long v20 = *(_OWORD *)(v0 + 1);
  long long v8 = v20;
  *(void *)(inited + 104) = &type metadata for String;
  *(_OWORD *)(inited + 80) = v8;
  *(unsigned char *)(inited + 112) = 2;
  *(void *)(inited + 144) = &type metadata for UInt64;
  uint64_t v9 = v0[4];
  *(void *)(inited + 120) = v0[3];
  *(unsigned char *)(inited + 152) = 3;
  uint64_t v19 = v9;
  int64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    sub_100079AE8((uint64_t)&v20);
    sub_10018F86C((uint64_t)&v19);
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1002CFA50(0, v10, 0);
    uint64_t v11 = v9 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v12 = *(void *)(v2 + 72);
    unint64_t v13 = v18;
    do
    {
      sub_100220298(v11, (uint64_t)v5, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
      uint64_t v14 = sub_10021BF54();
      sub_100220300((uint64_t)v5, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA50(0, v13[2] + 1, 1);
        unint64_t v13 = v18;
      }
      unint64_t v16 = v13[2];
      unint64_t v15 = v13[3];
      if (v16 >= v15 >> 1)
      {
        sub_1002CFA50(v15 > 1, v16 + 1, 1);
        unint64_t v13 = v18;
      }
      v13[2] = v16 + 1;
      v13[v16 + 4] = v14;
      v11 += v12;
      --v10;
    }
    while (v10);
    sub_10016FC34((uint64_t)&v19);
  }
  else
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  *(void *)(inited + 184) = sub_10006C51C(&qword_1004555E0);
  *(void *)(inited + 160) = v13;
  return sub_1001DBC18(inited);
}

uint64_t sub_10021D26C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_100459270);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_1002219C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + 32);
    v11[15] = 3;
    sub_10006C51C(&qword_100459258);
    sub_100221A18(&qword_100459278, &qword_100459280);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_10021D478()
{
  unint64_t result = 0x64496D616461;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656D614E707061;
      break;
    case 2:
      unint64_t result = 0x437972746E756F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10021D510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100220444(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10021D538(uint64_t a1)
{
  unint64_t v2 = sub_1002219C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10021D574(uint64_t a1)
{
  unint64_t v2 = sub_1002219C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10021D5B0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10022060C(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10021D5F8(void *a1)
{
  return sub_10021D26C(a1);
}

uint64_t sub_10021D610@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v3 = sub_10006C51C(&qword_100459088);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v49 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  char v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v45 - v17;
  uint64_t v19 = type metadata accessor for SECPresentmentReport(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  unint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  char v27 = (char *)&v45 - v26;
  id v51 = a1;
  id v28 = [a1 reportUUID];
  if (!v28)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    goto LABEL_6;
  }
  int v29 = v28;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v30 = v15;
  unint64_t v31 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v31(v9, v30, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
LABEL_6:
    sub_10008E734((uint64_t)v9, &qword_100455EB0);
    goto LABEL_7;
  }
  v31(v18, v9, v10);
  id v32 = [v51 rawPayload];
  if (v32)
  {
    char v33 = v32;
    uint64_t v46 = v31;
    uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    sub_100221810(&qword_100459090, (void (*)(uint64_t))type metadata accessor for SECPresentmentReport);
    unint64_t v47 = v35;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10006D144(v48, v47);
    swift_release();
    long long v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
    uint64_t v41 = (uint64_t)v49;
    v40(v49, 0, 1, v19);

    sub_100220360(v41, (uint64_t)v24, type metadata accessor for SECPresentmentReport);
    v46(v27, v18, v10);
    *(void *)&v27[*(int *)(v19 + 20)] = *(void *)&v24[*(int *)(v19 + 20)];
    uint64_t v42 = *(void *)&v24[*(int *)(v19 + 24)];
    swift_bridgeObjectRetain();
    sub_100220300((uint64_t)v24, type metadata accessor for SECPresentmentReport);
    *(void *)&v27[*(int *)(v19 + 24)] = v42;
    uint64_t v43 = v50;
    sub_100220360((uint64_t)v27, v50, type metadata accessor for SECPresentmentReport);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v40)(v43, 0, 1, v19);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
LABEL_7:
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_10008E55C(v36, (uint64_t)qword_1004686A8);
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v37, v38))
  {
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Corrupted field in report database", v39, 2u);
    swift_slowDealloc();
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v50, 1, 1, v19);
}

uint64_t sub_10021DBF4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v30 = a2;
  uint64_t v5 = type metadata accessor for PresentmentInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)v29 - v12;
  uint64_t v14 = *a1;
  char v15 = _swiftEmptyArrayStorage;
  char v33 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = swift_bridgeObjectRetain();
  if (v16)
  {
    uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v19 = *(void *)(v6 + 72);
    v29[1] = v17;
    uint64_t v32 = (v18 + 32) & ~v18;
    uint64_t v20 = v17 + v32;
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v31 = v14;
    do
    {
      sub_100220298(v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      if (*(void *)&v13[*(int *)(v5 + 28)] == v14)
      {
        sub_100220360((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002CFC80(0, v21[2] + 1, 1);
        }
        uint64_t v21 = v33;
        unint64_t v23 = v33[2];
        unint64_t v22 = v33[3];
        if (v23 >= v22 >> 1)
        {
          sub_1002CFC80(v22 > 1, v23 + 1, 1);
          uint64_t v21 = v33;
        }
        v21[2] = v23 + 1;
        sub_100220360((uint64_t)v10, (uint64_t)v21 + v32 + v23 * v19, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        uint64_t v14 = v31;
      }
      else
      {
        sub_100220300((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      }
      v20 += v19;
      --v16;
    }
    while (v16);
    char v15 = v33;
  }
  swift_bridgeObjectRelease();
  unint64_t v24 = v30;
  uint64_t v25 = *v30;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *unint64_t v24 = v25;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10025A69C(0, *(void *)(v25 + 16) + 1, 1, (char *)v25);
    uint64_t v25 = result;
    *unint64_t v24 = result;
  }
  unint64_t v28 = *(void *)(v25 + 16);
  unint64_t v27 = *(void *)(v25 + 24);
  if (v28 >= v27 >> 1)
  {
    uint64_t result = (uint64_t)sub_10025A69C((char *)(v27 > 1), v28 + 1, 1, (char *)v25);
    uint64_t v25 = result;
    *unint64_t v24 = result;
  }
  *(void *)(v25 + 16) = v28 + 1;
  *(void *)(v25 + 8 * v28 + 32) = v15;
  return result;
}

uint64_t sub_10021DEC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100140848(*a1, *a2);
}

Swift::Int sub_10021DECC()
{
  return Hasher._finalize()();
}

uint64_t sub_10021DF7C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10021E018()
{
  return Hasher._finalize()();
}

unint64_t sub_10021E0C4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10040F4A0;
  unint64_t result = sub_100221AAC(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10021E0FC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xEC00000079614470;
  uint64_t v5 = 0x6D617473656D6974;
  if (v2 != 1)
  {
    uint64_t v5 = 0x7461676572676761;
    unint64_t v4 = 0xEA00000000007365;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x644974726F706572;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10021E168()
{
  unint64_t v0 = sub_10021E57C();
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_1002CFCBC(0, v1, 0);
    uint64_t v2 = sub_10019CFB8(v0);
    if ((v2 & 0x8000000000000000) == 0)
    {
      unint64_t v4 = v2;
      if (v2 < 1 << *(unsigned char *)(v0 + 32))
      {
        uint64_t v5 = 0;
        unint64_t v6 = v0 + 64;
        uint64_t v7 = &v34;
        int v30 = v3;
        unint64_t v31 = v0 + 64;
        do
        {
          unint64_t v8 = v4 >> 6;
          if ((*(void *)(v6 + 8 * (v4 >> 6)) & (1 << v4)) == 0) {
            goto LABEL_38;
          }
          if (*(_DWORD *)(v0 + 36) != v3) {
            goto LABEL_39;
          }
          char v9 = *(unsigned char *)(*(void *)(v0 + 48) + v4);
          sub_1000AA580(*(void *)(v0 + 56) + 32 * v4, (uint64_t)v40);
          v39[0] = v9;
          LOBYTE(v37[0]) = v9;
          sub_1000AA580((uint64_t)v40, (uint64_t)v37 + 8);
          v35[0] = v37[0];
          v35[1] = v37[1];
          uint64_t v36 = v38;
          sub_10008E734((uint64_t)v39, &qword_100459048);
          int v10 = LOBYTE(v35[0]);
          char v33 = v35[0];
          sub_1000AA580((uint64_t)v35 + 8, (uint64_t)v7);
          if (v10)
          {
            if (v10 == 1)
            {
              unint64_t v11 = 0xEC00000079614470;
              uint64_t v12 = 0x6D617473656D6974;
            }
            else
            {
              unint64_t v11 = 0xEA00000000007365;
              uint64_t v12 = 0x7461676572676761;
            }
          }
          else
          {
            unint64_t v11 = 0xE800000000000000;
            uint64_t v12 = 0x644974726F706572;
          }
          *(void *)&long long v41 = v12;
          *((void *)&v41 + 1) = v11;
          sub_1000AA580((uint64_t)v35 + 8, (uint64_t)v32);
          sub_1000761D0(v32, v42);
          uint64_t v13 = v7;
          sub_10007594C((uint64_t)v7);
          sub_10008E734((uint64_t)v35, &qword_100459048);
          uint64_t v14 = v43;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002CFCBC(0, v14[2] + 1, 1);
            uint64_t v14 = v43;
          }
          unint64_t v16 = v14[2];
          unint64_t v15 = v14[3];
          if (v16 >= v15 >> 1)
          {
            sub_1002CFCBC(v15 > 1, v16 + 1, 1);
            uint64_t v14 = v43;
          }
          v14[2] = v16 + 1;
          uint64_t v17 = &v14[6 * v16];
          long long v18 = v41;
          long long v19 = v42[1];
          v17[3] = v42[0];
          v17[4] = v19;
          void v17[2] = v18;
          uint64_t v20 = 1 << *(unsigned char *)(v0 + 32);
          if ((uint64_t)v4 >= v20) {
            goto LABEL_40;
          }
          unint64_t v6 = v0 + 64;
          uint64_t v21 = *(void *)(v31 + 8 * v8);
          if ((v21 & (1 << v4)) == 0) {
            goto LABEL_41;
          }
          int v3 = v30;
          if (*(_DWORD *)(v0 + 36) != v30) {
            goto LABEL_42;
          }
          unint64_t v22 = v21 & (-2 << (v4 & 0x3F));
          if (v22)
          {
            unint64_t v4 = __clz(__rbit64(v22)) | v4 & 0xFFFFFFFFFFFFFFC0;
            int64_t v23 = v1;
            goto LABEL_28;
          }
          unint64_t v24 = v8 + 1;
          unint64_t v25 = (unint64_t)(v20 + 63) >> 6;
          int64_t v23 = v1;
          if (v8 + 1 < v25)
          {
            unint64_t v26 = *(void *)(v31 + 8 * v24);
            if (v26)
            {
LABEL_26:
              unint64_t v4 = __clz(__rbit64(v26)) + (v24 << 6);
              goto LABEL_28;
            }
            while (v25 - 2 != v8)
            {
              unint64_t v26 = *(void *)(v0 + 80 + 8 * v8++);
              if (v26)
              {
                unint64_t v24 = v8 + 1;
                goto LABEL_26;
              }
            }
          }
          unint64_t v4 = 1 << *(unsigned char *)(v0 + 32);
LABEL_28:
          if (++v5 == v23)
          {
            swift_bridgeObjectRelease();
            if (!v14[2]) {
              goto LABEL_35;
            }
            goto LABEL_33;
          }
          uint64_t v7 = v13;
        }
        while ((v4 & 0x8000000000000000) == 0 && (uint64_t)v4 < v20);
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_33:
      sub_10006C51C((uint64_t *)&unk_100455760);
      unint64_t v27 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
LABEL_35:
      unint64_t v27 = &_swiftEmptyDictionarySingleton;
    }
    *(void *)&long long v41 = v27;
    uint64_t v28 = swift_bridgeObjectRetain();
    sub_10021EE6C(v28, 1, &v41);
    swift_bridgeObjectRelease();
    return v41;
  }
  return result;
}

unint64_t sub_10021E57C()
{
  sub_10006C51C(&qword_100459050);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378470;
  *(unsigned char *)(inited + 32) = 0;
  uint64_t v2 = UUID.uuidString.getter();
  *(void *)(inited + 64) = &type metadata for String;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v3;
  *(unsigned char *)(inited + 72) = 1;
  uint64_t v4 = type metadata accessor for SECPresentmentReport(0);
  uint64_t v5 = *(void *)(v0 + *(int *)(v4 + 20));
  *(void *)(inited + 104) = &type metadata for Double;
  *(void *)(inited + 80) = v5;
  *(unsigned char *)(inited + 112) = 2;
  uint64_t v6 = *(void *)(v0 + *(int *)(v4 + 24));
  int64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    sub_1002CFA50(0, v7, 0);
    uint64_t v8 = v6 + 64;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_10021CBA0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        sub_1002CFA50(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      _swiftEmptyArrayStorage[v11 + 4] = v9;
      v8 += 40;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  *(void *)(inited + 144) = sub_10006C51C(&qword_1004555E0);
  *(void *)(inited + 120) = _swiftEmptyArrayStorage;
  return sub_1001DBD70(inited);
}

uint64_t sub_10021E724(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_1004591E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v12[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_1002217BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  type metadata accessor for UUID();
  sub_100221810(&qword_1004591F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SECPresentmentReport(0);
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 24));
    v12[15] = 2;
    sub_10006C51C(&qword_1004591F8);
    sub_1002218AC(&qword_100459200, (void (*)(void))sub_100221858);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10021E95C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  int64_t v23 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10006C51C(&qword_100459210);
  uint64_t v20 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SECPresentmentReport(0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002217BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)a1);
  }
  uint64_t v14 = (uint64_t)v13;
  uint64_t v15 = v21;
  char v27 = 0;
  sub_100221810(&qword_100459218, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v16 = v22;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v23, v4);
  char v26 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v14 + *(int *)(v10 + 20)) = v17;
  sub_10006C51C(&qword_1004591F8);
  char v25 = 2;
  sub_1002218AC(&qword_100459220, (void (*)(void))sub_10022191C);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v16);
  *(void *)(v14 + *(int *)(v10 + 24)) = v24;
  sub_100220298(v14, v19, type metadata accessor for SECPresentmentReport);
  sub_10007594C((uint64_t)a1);
  return sub_100220300(v14, type metadata accessor for SECPresentmentReport);
}

uint64_t sub_10021ED34()
{
  uint64_t v1 = 0x6D617473656D6974;
  if (*v0 != 1) {
    uint64_t v1 = 0x7461676572676761;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x644974726F706572;
  }
}

uint64_t sub_10021ED9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100222024(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10021EDC4(uint64_t a1)
{
  unint64_t v2 = sub_1002217BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10021EE00(uint64_t a1)
{
  unint64_t v2 = sub_1002217BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10021EE3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10021E95C(a1, a2);
}

uint64_t sub_10021EE54(void *a1)
{
  return sub_10021E724(a1);
}

uint64_t sub_10021EE6C(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_10010DAB8(a1 + 32, (uint64_t)&v46);
  uint64_t v7 = v46;
  uint64_t v8 = v47;
  uint64_t v44 = v46;
  uint64_t v45 = v47;
  sub_1000761D0(v48, v43);
  uint64_t v9 = (void *)*a3;
  unint64_t v11 = sub_1002C0AD0(v7, v8);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1002CC478();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v11);
    *uint64_t v21 = v7;
    v21[1] = v8;
    sub_1000761D0(v43, (_OWORD *)(v20[7] + 32 * v11));
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    uint64_t v25 = v4 - 1;
    if (!v25) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 80; ; i += 48)
    {
      sub_10010DAB8(i, (uint64_t)&v46);
      uint64_t v27 = v46;
      uint64_t v28 = v47;
      uint64_t v44 = v46;
      uint64_t v45 = v47;
      sub_1000761D0(v48, v43);
      int v29 = (void *)*a3;
      unint64_t v30 = sub_1002C0AD0(v27, v28);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v23 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v23) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_1002C3718(v34, 1);
        unint64_t v30 = sub_1002C0AD0(v27, v28);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      uint64_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
      *uint64_t v38 = v27;
      v38[1] = v28;
      sub_1000761D0(v43, (_OWORD *)(v37[7] + 32 * v30));
      uint64_t v39 = v37[2];
      BOOL v23 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v23) {
        goto LABEL_24;
      }
      _OWORD v37[2] = v40;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002C3718(v14, a2 & 1);
  uint64_t v16 = sub_1002C0AD0(v7, v8);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v19 = swift_allocError();
    swift_willThrow();
    uint64_t v49 = v19;
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_10007594C((uint64_t)v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000001003B4890;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SECPresentmentReport(uint64_t a1)
{
  return sub_100087C90(a1, qword_100459188);
}

uint64_t type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(uint64_t a1)
{
  return sub_100087C90(a1, qword_1004590F0);
}

uint64_t sub_10021F26C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v44 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v43 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  Swift::String v42 = (char *)&v37 - v11;
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v47 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v38 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v48 = v6 + 16;
  uint64_t v49 = a1;
  uint64_t v45 = v6 + 48;
  uint64_t v46 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  Swift::String v41 = (void (**)(char *, char *, uint64_t))(v6 + 32);
  int64_t v39 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v40 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v20 = 0;
  uint64_t v21 = v42;
  if (!v18) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v22 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v23 = v22 | (v20 << 6);
  uint64_t v24 = v47;
  while (1)
  {
    uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    v28(v24, *(void *)(v49 + 48) + *(void *)(v6 + 72) * v23, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v24, 0, 1, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v24, 1, v5) == 1) {
      return swift_release();
    }
    (*v41)(v21, v24, v5);
    uint64_t v29 = (uint64_t)v43;
    uint64_t v30 = ((uint64_t (*)(char *, char *, uint64_t))v28)(v43, v21, v5);
    __chkstk_darwin(v30, v31);
    *(&v37 - 2) = (uint64_t)v21;
    uint64_t v32 = v44;
    swift_bridgeObjectRetain();
    uint64_t v33 = v50;
    uint64_t v34 = sub_1002B9FA4((uint64_t (*)(char *))sub_1002203C8, (uint64_t)(&v37 - 4), v32);
    uint64_t v50 = v33;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v51 = *a2;
    *a2 = 0x8000000000000000;
    sub_1002CB034(v34, v29, isUniquelyReferenced_nonNull_native);
    *a2 = v51;
    swift_bridgeObjectRelease();
    char v36 = *v40;
    (*v40)(v29, v5);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v21, v5);
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v20++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v24 = v47;
    if (v20 >= v39) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v38 + 8 * v20);
    if (!v26) {
      break;
    }
LABEL_17:
    unint64_t v18 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
  }
  int64_t v27 = v20 + 1;
  if (v20 + 1 >= v39) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v38 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  int64_t v27 = v20 + 2;
  if (v20 + 2 >= v39) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v38 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  int64_t v27 = v20 + 3;
  if (v20 + 3 >= v39) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v38 + 8 * v27);
  if (v26) {
    goto LABEL_16;
  }
  int64_t v27 = v20 + 4;
  if (v20 + 4 >= v39)
  {
LABEL_26:
    (*v46)(v47, 1, 1, v5);
    return swift_release();
  }
  unint64_t v26 = *(void *)(v38 + 8 * v27);
  if (v26)
  {
LABEL_16:
    int64_t v20 = v27;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v20 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v20 >= v39) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v38 + 8 * v20);
    ++v27;
    if (v26) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10021F6E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v7 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v10)
  {
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_5:
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8 * v15);
    uint64_t result = sub_10021DBF4(&v20, a2, a3);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v13);
  if (v17)
  {
LABEL_17:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_5;
  }
  int64_t v18 = v13 + 1;
  if (v13 + 1 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 2;
  if (v13 + 2 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 3;
  if (v13 + 3 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v13 = v18;
    goto LABEL_17;
  }
  int64_t v19 = v13 + 4;
  if (v13 + 4 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v19);
  v13 += 4;
  if (v17) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v13 >= v11) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v19;
    if (v17) {
      goto LABEL_17;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10021F868(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003B82A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x80000001003B82C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

void *sub_10021F99C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresentmentInfo();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v4);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  int64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v12 = *(void *)(a1 + 16);
  int64_t v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_1002CF9C4(0, v12, 0);
    unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v22 = a1;
    uint64_t v15 = a1 + v14;
    uint64_t v16 = *(void *)(v3 + 72);
    uint64_t v23 = v8 + 32;
    uint64_t v24 = v16;
    do
    {
      sub_100220298(v15, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v6, v7);
      sub_100220300((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      int64_t v13 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CF9C4(0, v13[2] + 1, 1);
        int64_t v13 = v25;
      }
      unint64_t v18 = v13[2];
      unint64_t v17 = v13[3];
      if (v18 >= v17 >> 1)
      {
        sub_1002CF9C4(v17 > 1, v18 + 1, 1);
        int64_t v13 = v25;
      }
      v13[2] = v18 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))((unint64_t)v13+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v18, v11, v7);
      uint64_t v25 = v13;
      v15 += v24;
      --v12;
    }
    while (v12);
    a1 = v22;
  }
  uint64_t v19 = sub_100089E64((uint64_t)v13);
  swift_bridgeObjectRelease();
  uint64_t v25 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain();
  sub_10021F26C(v19, (uint64_t *)&v25, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_10021FC64@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v5);
  char v61 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount(0);
  uint64_t v60 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10006C51C(&qword_100459078);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  unint64_t v18 = (char *)&v50 - v17;
  if (!*(void *)(a1 + 16))
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v48 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v49 = 0;
    uint64_t v32 = 0;
    goto LABEL_34;
  }
  unint64_t v55 = a2;
  uint64_t v19 = (int *)type metadata accessor for PresentmentInfo();
  uint64_t v20 = *((void *)v19 - 1);
  v19 -= 2;
  unint64_t v21 = a1 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  uint64_t v22 = (uint64_t *)(v21 + v19[10]);
  uint64_t v23 = *v22;
  uint64_t v53 = v22[1];
  uint64_t v54 = v23;
  uint64_t v24 = *(void *)(v21 + v19[9]);
  uint64_t v51 = *(void *)(v21 + v19[8]);
  uint64_t v52 = v24;
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_10021F99C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v62 = 0;
  uint64_t v27 = v25[8];
  uint64_t v56 = v25 + 8;
  uint64_t v28 = 1 << *((unsigned char *)v25 + 32);
  uint64_t v29 = -1;
  if (v28 < 64) {
    uint64_t v29 = ~(-1 << v28);
  }
  unint64_t v30 = v29 & v27;
  uint64_t v58 = v4 + 16;
  uint64_t v59 = v4;
  uint64_t v31 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  int64_t v57 = (unint64_t)(v28 + 63) >> 6;
  int64_t v50 = v57 - 1;
  uint64_t v32 = _swiftEmptyArrayStorage;
  if ((v29 & v27) == 0) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v33 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  unint64_t v34 = v33 | (v62 << 6);
  while (2)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v59 + 16))(v15, v25[6] + *(void *)(v59 + 72) * v34, v63);
    uint64_t v35 = v25[7];
    uint64_t v36 = sub_10006C51C(&qword_100459080);
    *(void *)&v15[*(int *)(v36 + 48)] = *(void *)(v35 + 8 * v34);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v15, 0, 1, v36);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100220230((uint64_t)v15, (uint64_t)v18);
      uint64_t v41 = sub_10006C51C(&qword_100459080);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v18, 1, v41) == 1)
      {
        uint64_t result = swift_release();
        uint64_t v46 = v54;
        a2 = v55;
        uint64_t v48 = v52;
        uint64_t v47 = v53;
        uint64_t v49 = v51;
LABEL_34:
        *a2 = v48;
        a2[1] = v46;
        a2[2] = v47;
        a2[3] = v49;
        a2[4] = v32;
        return result;
      }
      uint64_t v42 = *(void *)&v18[*(int *)(v41 + 48)];
      uint64_t v43 = (uint64_t)v61;
      (*v31)(v61, v18, v63);
      sub_10021B990(v43, v42, (uint64_t)v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v32 = (void *)sub_10025A544(0, v32[2] + 1, 1, (unint64_t)v32);
      }
      unint64_t v45 = v32[2];
      unint64_t v44 = v32[3];
      if (v45 >= v44 >> 1) {
        uint64_t v32 = (void *)sub_10025A544(v44 > 1, v45 + 1, 1, (unint64_t)v32);
      }
      _OWORD v32[2] = v45 + 1;
      uint64_t result = sub_100220360((uint64_t)v10, (uint64_t)v32+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v45, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
      if (v30) {
        goto LABEL_5;
      }
LABEL_7:
      int64_t v37 = v62 + 1;
      if (__OFADD__(v62, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v37 < v57)
      {
        unint64_t v38 = v56[v37];
        if (v38) {
          goto LABEL_10;
        }
        int64_t v39 = v62 + 2;
        ++v62;
        if (v37 + 1 < v57)
        {
          unint64_t v38 = v56[v39];
          if (v38) {
            goto LABEL_13;
          }
          int64_t v62 = v37 + 1;
          if (v37 + 2 < v57)
          {
            unint64_t v38 = v56[v37 + 2];
            if (v38)
            {
              v37 += 2;
              goto LABEL_10;
            }
            int64_t v39 = v37 + 3;
            int64_t v62 = v37 + 2;
            if (v37 + 3 < v57) {
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v40 = sub_10006C51C(&qword_100459080);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v15, 1, 1, v40);
      unint64_t v30 = 0;
    }
    unint64_t v38 = v56[v39];
    if (v38)
    {
LABEL_13:
      int64_t v37 = v39;
LABEL_10:
      unint64_t v30 = (v38 - 1) & v38;
      unint64_t v34 = __clz(__rbit64(v38)) + (v37 << 6);
      int64_t v62 = v37;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v37 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      break;
    }
    if (v37 >= v57)
    {
      int64_t v62 = v50;
      goto LABEL_24;
    }
    unint64_t v38 = v56[v37];
    ++v39;
    if (v38) {
      goto LABEL_10;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100220230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100459078);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100220298(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100220300(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100220360(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1002203C8()
{
  return static UUID.== infix(_:_:)() & 1;
}

unint64_t sub_1002203F8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10040F420, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_100220444(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x64496D616461 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E707061 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003B82E0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_10022060C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10006C51C(&qword_100459248);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002219C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)a1);
  }
  char v25 = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v24 = 1;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v20 = v11;
  char v23 = 2;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_10006C51C(&qword_100459258);
  char v22 = 3;
  sub_100221A18(&qword_100459260, &qword_100459268);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v14 = v21;
  swift_bridgeObjectRetain();
  sub_10007594C((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v16 = v20;
  *a2 = v10;
  a2[1] = v16;
  uint64_t v17 = v19;
  a2[2] = v13;
  a2[3] = v17;
  a2[4] = v14;
  return result;
}

void *sub_1002208C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PresentmentInfo();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  if (v7)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    sub_1002CFCDC(0, v7, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    uint64_t v10 = v17;
    do
    {
      sub_100220298(v8, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      uint64_t v11 = *(void *)&v6[*(int *)(v2 + 28)];
      sub_100220300((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFCDC(0, v10[2] + 1, 1);
        uint64_t v10 = v17;
      }
      unint64_t v13 = v10[2];
      unint64_t v12 = v10[3];
      if (v13 >= v12 >> 1)
      {
        sub_1002CFCDC(v12 > 1, v13 + 1, 1);
        uint64_t v10 = v17;
      }
      _OWORD v10[2] = v13 + 1;
      v10[v13 + 4] = v11;
      v8 += v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v14 = sub_10008C390((uint64_t)v10);
  swift_bridgeObjectRelease();
  uint64_t v17 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_10021F6E4(v14, (uint64_t *)&v17, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount.PresentmentCountKeys()
{
  return &type metadata for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount.PresentmentCountKeys;
}

uint64_t *sub_100220AE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
  }
  return a1;
}

uint64_t sub_100220BB8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100220C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100220CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100220D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_100220DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100220DC4);
}

uint64_t sub_100220DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100220E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100220E44);
}

uint64_t sub_100220E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_100220EB4()
{
  return sub_100221614();
}

uint64_t destroy for SECPresentmentReport.SECPresentmentAggregate()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SECPresentmentReport.SECPresentmentAggregate(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SECPresentmentReport.SECPresentmentAggregate(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SECPresentmentReport.SECPresentmentAggregate(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SECPresentmentReport.SECPresentmentAggregate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SECPresentmentReport.SECPresentmentAggregate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.SECPresentmentAggregate()
{
  return &type metadata for SECPresentmentReport.SECPresentmentAggregate;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.SECPresentmentAggregateKeys()
{
  return &type metadata for SECPresentmentReport.SECPresentmentAggregate.SECPresentmentAggregateKeys;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.SECPresentmentReportKeys()
{
  return &type metadata for SECPresentmentReport.SECPresentmentReportKeys;
}

uint64_t *sub_1002210D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1002211B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100221224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1002212AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100221344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t sub_1002213C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100221454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100221468);
}

uint64_t sub_100221468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100221528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022153C);
}

uint64_t sub_10022153C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1002215F8()
{
  return sub_100221614();
}

uint64_t sub_100221614()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_1002216B8()
{
  unint64_t result = qword_1004591C8;
  if (!qword_1004591C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004591C8);
  }
  return result;
}

unint64_t sub_100221710()
{
  unint64_t result = qword_1004591D0;
  if (!qword_1004591D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004591D0);
  }
  return result;
}

unint64_t sub_100221768()
{
  unint64_t result = qword_1004591D8;
  if (!qword_1004591D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004591D8);
  }
  return result;
}

unint64_t sub_1002217BC()
{
  unint64_t result = qword_1004591E8;
  if (!qword_1004591E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004591E8);
  }
  return result;
}

uint64_t sub_100221810(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100221858()
{
  unint64_t result = qword_100459208;
  if (!qword_100459208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459208);
  }
  return result;
}

uint64_t sub_1002218AC(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(&qword_1004591F8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10022191C()
{
  unint64_t result = qword_100459228;
  if (!qword_100459228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459228);
  }
  return result;
}

unint64_t sub_100221970()
{
  unint64_t result = qword_100459238;
  if (!qword_100459238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459238);
  }
  return result;
}

unint64_t sub_1002219C4()
{
  unint64_t result = qword_100459250;
  if (!qword_100459250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459250);
  }
  return result;
}

uint64_t sub_100221A18(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(&qword_100459258);
    sub_100221810(a2, (void (*)(uint64_t))type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100221AAC(Swift::String string, Swift::OpaquePointer cases)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 >= 3) {
    return 3;
  }
  else {
    return v5;
  }
}

unsigned char *_s10seserviced20SECPresentmentReportV23SECPresentmentAggregateV27SECPresentmentAggregateKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100221BC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.CodingKeys()
{
  return &type metadata for SECPresentmentReport.SECPresentmentAggregate.CodingKeys;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount.CodingKeys()
{
  return &type metadata for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount.CodingKeys;
}

unsigned char *_s10seserviced20SECPresentmentReportV23SECPresentmentAggregateV16PresentmentCountV20PresentmentCountKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100221CD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECPresentmentReport.CodingKeys()
{
  return &type metadata for SECPresentmentReport.CodingKeys;
}

unint64_t sub_100221D10()
{
  unint64_t result = qword_100459288;
  if (!qword_100459288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459288);
  }
  return result;
}

unint64_t sub_100221D68()
{
  unint64_t result = qword_100459290;
  if (!qword_100459290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459290);
  }
  return result;
}

unint64_t sub_100221DC0()
{
  unint64_t result = qword_100459298;
  if (!qword_100459298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459298);
  }
  return result;
}

unint64_t sub_100221E18()
{
  unint64_t result = qword_1004592A0;
  if (!qword_1004592A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592A0);
  }
  return result;
}

unint64_t sub_100221E70()
{
  unint64_t result = qword_1004592A8;
  if (!qword_1004592A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592A8);
  }
  return result;
}

unint64_t sub_100221EC8()
{
  unint64_t result = qword_1004592B0;
  if (!qword_1004592B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592B0);
  }
  return result;
}

unint64_t sub_100221F20()
{
  unint64_t result = qword_1004592B8;
  if (!qword_1004592B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592B8);
  }
  return result;
}

unint64_t sub_100221F78()
{
  unint64_t result = qword_1004592C0;
  if (!qword_1004592C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592C0);
  }
  return result;
}

unint64_t sub_100221FD0()
{
  unint64_t result = qword_1004592C8;
  if (!qword_1004592C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592C8);
  }
  return result;
}

uint64_t sub_100222024(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x644974726F706572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xEC00000079614470 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7461676572676761 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002221A0()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(55);
  v2._countAndFlagsBits = 0x20444955556B6C74;
  v2._object = (void *)0xEB00000000202020;
  String.append(_:)(v2);
  sub_10023CDF4(*(void *)v1, *(void *)(v1 + 8));
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_1002406B4(8);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4._object = (void *)0xEC00000020444955;
  v4._countAndFlagsBits = 0x55746E657261700ALL;
  String.append(_:)(v4);
  sub_10023CDF4(*(void *)(v1 + 16), *(void *)(v1 + 24));
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_1002406B4(8);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x44495344746C610ALL;
  v6._object = (void *)0xEC00000020202020;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)(v0 + 32);
  unint64_t v8 = *(void *)(v0 + 40);
  sub_10006D0EC(*(void *)(v1 + 32), *(void *)(v1 + 40));
  v9._countAndFlagsBits = Data.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  sub_10006D144(v7, v8);
  v10._countAndFlagsBits = 0x6465776F6C6C610ALL;
  v10._object = (void *)0xEC00000020444941;
  String.append(_:)(v10);
  sub_10023CDF4(*(void *)(v1 + 48), *(void *)(v1 + 56));
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100222474()
{
  uint64_t v2 = v0;
  uint64_t v19 = &_s16CommandCreateTLKVN;
  uint64_t v20 = &off_100416B20;
  uint64_t v3 = swift_allocObject();
  v18[0] = v3;
  long long v4 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v0;
  *(_OWORD *)(v3 + 32) = v4;
  *(unsigned char *)(v3 + 48) = *(unsigned char *)(v0 + 32);
  sub_100224AA0((uint64_t)&v21);
  uint64_t v5 = v23;
  uint64_t v6 = v24;
  uint64_t v7 = v21;
  int v8 = v22;
  int v9 = v25;
  sub_10022705C((uint64_t *)v2);
  unint64_t v10 = sub_10018DB70((uint64_t)v18, v7, v8, v5, v6, v9);
  sub_10016FC10(v5, v6, v9);
  if (v1)
  {
    uint64_t v28 = v26;
    sub_10016FC34((uint64_t)&v28);
    return sub_10007594C((uint64_t)v18);
  }
  uint64_t v27 = v26;
  sub_10016FC34((uint64_t)&v27);
  sub_10007594C((uint64_t)v18);
  if (__OFADD__(v10, 5))
  {
    __break(1u);
  }
  else
  {
    uint64_t v17 = sub_100089000(v10 + 5);
    if ((v10 & 0x8000000000000000) == 0 && v10 < 0x100)
    {
      Data._Representation.append(contentsOf:)();
      uint64_t v19 = &_s16CommandCreateTLKVN;
      uint64_t v20 = &off_100416B20;
      uint64_t v11 = swift_allocObject();
      v18[0] = v11;
      long long v12 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v11 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v11 + 32) = v12;
      *(unsigned char *)(v11 + 48) = *(unsigned char *)(v2 + 32);
      sub_10022705C((uint64_t *)v2);
      uint64_t v14 = sub_100188DF0(v18);
      unint64_t v16 = v15;
      sub_10007594C((uint64_t)v18);
      Data.append(_:)();
      sub_10006D144(v14, v16);
      return v17;
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double sub_1002226DC@<D0>(_OWORD *a1@<X8>)
{
  sub_100224AA0((uint64_t)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

Swift::Int sub_10022271C()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  sub_10006D0EC(*(void *)v0, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  sub_10006D0EC(v3, v4);
  Data.hash(into:)();
  sub_10006D144(v3, v4);
  uint64_t v5 = *(void *)(v0 + 32);
  unint64_t v6 = *(void *)(v0 + 40);
  sub_10006D0EC(v5, v6);
  Data.hash(into:)();
  sub_10006D144(v5, v6);
  uint64_t v7 = *(void *)(v0 + 48);
  unint64_t v8 = *(void *)(v0 + 56);
  sub_10006D0EC(v7, v8);
  Data.hash(into:)();
  sub_10006D144(v7, v8);
  Hasher._combine(_:)(*(unsigned char *)(v0 + 64) & 1);
  return Hasher._finalize()();
}

double sub_10022281C@<D0>(_OWORD *a1@<X8>)
{
  sub_100222D90((uint64_t)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

void sub_100222860()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  unint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  unint64_t v8 = *(void *)(v0 + 56);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 64);
  sub_10006D0EC(v1, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  sub_10006D0EC(v3, v4);
  Data.hash(into:)();
  sub_10006D144(v3, v4);
  sub_10006D0EC(v6, v5);
  Data.hash(into:)();
  sub_10006D144(v6, v5);
  sub_10006D0EC(v7, v8);
  Data.hash(into:)();
  sub_10006D144(v7, v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_100222960()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  unint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  unint64_t v7 = *(void *)(v0 + 56);
  Swift::UInt8 v9 = *(unsigned char *)(v0 + 64);
  Hasher.init(_seed:)();
  sub_10006D0EC(v1, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  sub_10006D0EC(v3, v4);
  Data.hash(into:)();
  sub_10006D144(v3, v4);
  sub_10006D0EC(v5, v6);
  Data.hash(into:)();
  sub_10006D144(v5, v6);
  sub_10006D0EC(v8, v7);
  Data.hash(into:)();
  sub_10006D144(v8, v7);
  Hasher._combine(_:)(v9);
  return Hasher._finalize()();
}

uint64_t sub_100222A78(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  unint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v14 = *(void *)(a2 + 16);
  unint64_t v15 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 56);
  int v11 = *(unsigned __int8 *)(a2 + 64);
  if ((sub_100088AE4(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0
    || (sub_100088AE4(v16, v15, v14, v13) & 1) == 0
    || (sub_100088AE4(v2, v4, v7, v8) & 1) == 0)
  {
    return 0;
  }
  if (sub_100088AE4(v3, v5, v9, v10)) {
    return v6 ^ v11 ^ 1u;
  }
  return 0;
}

double sub_100222B70@<D0>(_OWORD *a1@<X8>)
{
  sub_100225318((uint64_t)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

uint64_t sub_100222BB0@<X0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1003782A0;
  strcpy((char *)(result + 32), "ptAttestation");
  *(_WORD *)(result + 46) = -4864;
  *(void *)(result + 48) = 196;
  *(_WORD *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = -64;
  *(void *)(result + 88) = _swiftEmptyArrayStorage;
  *(void *)(result + 96) = 0x7472654364736163;
  *(void *)(result + 104) = 0xEF65746163696669;
  *(void *)(result + 112) = 197;
  *(_WORD *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = -64;
  *(void *)(result + 152) = _swiftEmptyArrayStorage;
  *(void *)a1 = 231;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_100222C94@<D0>(_OWORD *a1@<X8>)
{
  sub_100225400((uint64_t)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_100222CD4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 48;
  *(_WORD *)(v2 + 24) = 0;
  *(void *)&double result = 3;
  *(_OWORD *)(v2 + 32) = xmmword_10037CDC0;
  *(unsigned char *)(v2 + 48) = -64;
  *(void *)(v2 + 56) = _swiftEmptyArrayStorage;
  *(void *)a1 = 232;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0x80;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_100222D50@<D0>(_OWORD *a1@<X8>)
{
  sub_100224BB8((uint64_t)v4);
  long long v2 = v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  double result = *(double *)&v5;
  a1[2] = v5;
  return result;
}

double sub_100222D90@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100379160;
  *(void *)(v2 + 32) = 0x444955556B6C74;
  *(void *)(v2 + 40) = 0xE700000000000000;
  *(void *)(v2 + 48) = 212;
  *(_WORD *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = &off_10040E828;
  strcpy((char *)(v2 + 96), "parentTLKUUID");
  *(_WORD *)(v2 + 110) = -4864;
  *(void *)(v2 + 112) = 213;
  *(_WORD *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = -64;
  *(void *)(v2 + 152) = &off_10040E878;
  *(void *)(v2 + 160) = 0x44495344746C61;
  *(void *)(v2 + 168) = 0xE700000000000000;
  *(void *)(v2 + 176) = 193;
  *(_WORD *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(v2 + 208) = -64;
  *(void *)(v2 + 216) = &off_10040E8C8;
  *(void *)(v2 + 224) = 0x416465776F6C6C61;
  *(void *)(v2 + 232) = 0xEA00000000004449;
  *(void *)(v2 + 240) = 214;
  *(_WORD *)(v2 + 248) = 0;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  *(unsigned char *)(v2 + 272) = -64;
  *(void *)(v2 + 280) = &off_10040E918;
  *(void *)(v2 + 288) = 0xD000000000000011;
  *(void *)(v2 + 296) = 0x80000001003B8300;
  *(void *)(v2 + 304) = 215;
  *(_WORD *)(v2 + 312) = 0;
  *(void *)&double result = 2;
  *(_OWORD *)(v2 + 320) = xmmword_10037CDD0;
  *(unsigned char *)(v2 + 336) = -64;
  *(void *)(v2 + 344) = _swiftEmptyArrayStorage;
  *(void *)a1 = 225;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_100222F18@<X0>(unint64_t a1@<X0>, unint64_t a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0;
    *(void *)uint64_t v31 = 4;
    *(unsigned char *)(v31 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v3 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1002C0AD0(0x444955556B6C74, 0xE700000000000000);
  if ((v6 & 1) == 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
  if (v7 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0;
    *(void *)uint64_t v32 = 4;
    *(unsigned char *)(v32 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v8 = *(void *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v9, v8);
  sub_10006D0EC(v9, v8);
  uint64_t v10 = sub_1002C0AD0(0x4C54746E65726170, 0xED0000444955554BLL);
  if ((v11 & 1) == 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v12 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
  if (v12 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v33 + 8) = 0;
    *(void *)(v33 + 16) = 0;
    *(void *)uint64_t v33 = 4;
    *(unsigned char *)(v33 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v9, v8);
    swift_release();
    uint64_t v34 = v9;
    unint64_t v35 = v8;
    return sub_10006D144(v34, v35);
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_35;
  }
  uint64_t v14 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v13 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v14, v13);
  sub_10006D0EC(v14, v13);
  uint64_t v15 = sub_1002C0AD0(0x44495344746C61, 0xE700000000000000);
  if ((v16 & 1) == 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v17 = *(void *)(*(void *)(v4 + 56) + 8 * v15);
  unint64_t v47 = v17 & 0xE000000000000000;
  if ((v17 & 0xE000000000000000) != 0x2000000000000000)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v36 + 8) = 0;
    *(void *)(v36 + 16) = 0;
    *(void *)uint64_t v36 = 4;
    *(unsigned char *)(v36 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    int v37 = 0;
    goto LABEL_23;
  }
  uint64_t v46 = v14;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_37;
  }
  uint64_t v18 = v17 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v20 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v19 = *(void *)(v18 + 24);
  sub_10006D0EC(v20, v19);
  unint64_t v42 = v19;
  uint64_t v43 = v20;
  sub_10006D0EC(v20, v19);
  uint64_t v21 = sub_1002C0AD0(0x416465776F6C6C61, 0xEA00000000004449);
  if ((v22 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v23 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
  uint64_t v14 = v46;
  if (v23 >> 61 == 1)
  {
    unint64_t v41 = v13;
    uint64_t v24 = v23 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v26 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v25 = *(void *)(v24 + 24);
    uint64_t v40 = *(void *)(v4 + 16);
    sub_10006D0EC(v26, v25);
    unint64_t v44 = v25;
    uint64_t v45 = v26;
    sub_10006D0EC(v26, v25);
    if (v40)
    {
      uint64_t v27 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B8300);
      if (v28)
      {
        unint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v27);
        swift_retain();
        swift_bridgeObjectRelease();
        if (!(v29 >> 61))
        {
          char v48 = *(unsigned char *)(v29 + 16);
          swift_release();
          swift_release();
          sub_10006D0EC(v9, v8);
          sub_10006D0EC(v46, v41);
          sub_10006D0EC(v43, v42);
          sub_10006D0EC(v26, v44);
          sub_10006D144(v26, v44);
          sub_10006D144(v43, v42);
          sub_10006D144(v46, v41);
          sub_10006D144(v9, v8);
          sub_10006D144(v9, v8);
          sub_10006D144(v46, v41);
          sub_10006D144(v43, v42);
          uint64_t result = sub_10006D144(v26, v44);
          *(void *)a2 = v9;
          *(void *)(a2 + 8) = v8;
          *(void *)(a2 + 16) = v46;
          *(void *)(a2 + 24) = v41;
          *(void *)(a2 + 32) = v43;
          *(void *)(a2 + 40) = v42;
          *(void *)(a2 + 48) = v26;
          *(void *)(a2 + 56) = v44;
          *(unsigned char *)(a2 + 64) = v48;
          return result;
        }
        sub_10007BF50();
        swift_allocError();
        *(void *)(v39 + 8) = 0;
        *(void *)(v39 + 16) = 0;
        *(void *)uint64_t v39 = 4;
        *(unsigned char *)(v39 + 24) = 3;
        swift_willThrow();
        swift_release();
        sub_10006D144(v26, v44);
        a2 = v42;
        uint64_t v3 = v43;
        sub_10006D144(v43, v42);
        int v37 = 1;
        unint64_t v13 = v41;
        goto LABEL_23;
      }
    }
LABEL_39:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  sub_10007BF50();
  swift_allocError();
  *(void *)(v38 + 8) = 0;
  *(void *)(v38 + 16) = 0;
  *(void *)uint64_t v38 = 4;
  *(unsigned char *)(v38 + 24) = 3;
  swift_retain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  a2 = v42;
  uint64_t v3 = v43;
  sub_10006D144(v43, v42);
  int v37 = 0;
LABEL_23:
  sub_10006D144(v14, v13);
  sub_10006D144(v9, v8);
  swift_release();
  sub_10006D144(v9, v8);
  uint64_t result = sub_10006D144(v14, v13);
  if (v47 == 0x2000000000000000)
  {
    uint64_t result = sub_10006D144(v3, a2);
    if ((v37 & 1) == 0) {
      return result;
    }
  }
  else if (!v37)
  {
    return result;
  }
  unint64_t v35 = v44;
  uint64_t v34 = v45;
  return sub_10006D144(v34, v35);
}

double sub_100223544@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100378480;
  *(void *)(v2 + 32) = 0x6E6F6973726576;
  *(void *)(v2 + 40) = 0xE700000000000000;
  *(void *)(v2 + 48) = 2;
  *(_WORD *)(v2 + 56) = 0;
  *(_OWORD *)(v2 + 64) = xmmword_100379B30;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 96) = 1684628851;
  *(void *)(v2 + 104) = 0xE400000000000000;
  *(void *)(v2 + 112) = 4;
  *(_WORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(unsigned char *)(v2 + 144) = -64;
  *(void *)(v2 + 152) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 160) = 1684628325;
  *(void *)(v2 + 168) = 0xE400000000000000;
  *(void *)(v2 + 176) = 4;
  *(_WORD *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  *(unsigned char *)(v2 + 208) = -64;
  *(void *)(v2 + 216) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 224) = 0x444970696863;
  *(void *)(v2 + 232) = 0xE600000000000000;
  *(void *)(v2 + 240) = 4;
  *(_WORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 256) = 0u;
  *(unsigned char *)(v2 + 272) = -64;
  *(void *)(v2 + 280) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 288) = 0x44496472616F62;
  *(void *)(v2 + 296) = 0xE700000000000000;
  *(void *)(v2 + 304) = 4;
  *(_WORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 320) = 0u;
  *(unsigned char *)(v2 + 336) = -64;
  *(void *)(v2 + 344) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 352) = 0xD000000000000010;
  *(void *)(v2 + 360) = 0x80000001003B83E0;
  *(void *)(v2 + 368) = 4;
  *(_WORD *)(v2 + 376) = 0;
  *(_OWORD *)(v2 + 384) = 0u;
  *(unsigned char *)(v2 + 400) = -64;
  *(void *)(v2 + 408) = _swiftEmptyArrayStorage;
  strcpy((char *)(v2 + 416), "publicKeyInfo");
  *(_WORD *)(v2 + 430) = -4864;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003782A0;
  *(void *)(v3 + 32) = 0x4449676C61;
  *(void *)(v3 + 40) = 0xE500000000000000;
  *(void *)(v3 + 48) = 48;
  *(_WORD *)(v3 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(unsigned char *)(v3 + 80) = -64;
  *(void *)(v3 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 96) = 0x79654B627570;
  *(void *)(v3 + 104) = 0xE600000000000000;
  *(void *)(v3 + 112) = 3;
  *(_WORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(unsigned char *)(v3 + 144) = -64;
  *(void *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 432) = 48;
  *(_WORD *)(v2 + 440) = 0;
  *(void *)(v2 + 448) = v3;
  *(void *)(v2 + 456) = 1;
  *(unsigned char *)(v2 + 464) = 64;
  *(void *)(v2 + 472) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 480) = 0x4E7463656A627573;
  *(void *)(v2 + 488) = 0xEB00000000656D61;
  *(void *)(v2 + 496) = 0;
  *(_WORD *)(v2 + 504) = 1;
  *(_OWORD *)(v2 + 512) = 0u;
  *(unsigned char *)(v2 + 528) = -64;
  *(void *)(v2 + 536) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 544) = 0x6F69736E65747865;
  *(void *)(v2 + 552) = 0xEA0000000000736ELL;
  *(void *)(v2 + 560) = 0;
  *(_WORD *)(v2 + 568) = 1;
  *(_OWORD *)(v2 + 576) = 0u;
  *(unsigned char *)(v2 + 592) = -64;
  *(void *)(v2 + 600) = _swiftEmptyArrayStorage;
  *(void *)a1 = 48;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

void sub_1002237C0(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100378470;
  *(void *)(v2 + 32) = 0xD000000000000011;
  *(void *)(v2 + 40) = 0x80000001003B83A0;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003782A0;
  *(void *)(v3 + 32) = 0x614474656C707061;
  *(void *)(v3 + 40) = 0xEA00000000006174;
  sub_100223544((uint64_t)v5);
  long long v4 = v5[1];
  *(_OWORD *)(v3 + 48) = v5[0];
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = v5[2];
  strcpy((char *)(v3 + 96), "platformData");
  *(unsigned char *)(v3 + 109) = 0;
  *(_WORD *)(v3 + 110) = -5120;
  *(void *)(v3 + 112) = 48;
  *(_WORD *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(unsigned char *)(v3 + 144) = -64;
  *(void *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 48) = 48;
  *(_WORD *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 72) = 1;
  *(unsigned char *)(v2 + 80) = 64;
  *(void *)(v2 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 96) = 0xD000000000000010;
  *(void *)(v2 + 104) = 0x80000001003B83C0;
  *(void *)(v2 + 112) = 48;
  *(_WORD *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = -64;
  *(void *)(v2 + 152) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 160) = 0x727574616E676973;
  *(void *)(v2 + 168) = 0xE900000000000065;
  *(void *)(v2 + 176) = 3;
  *(_WORD *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(v2 + 208) = -64;
  *(void *)(v2 + 216) = _swiftEmptyArrayStorage;
  *(void *)a1 = 48;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
}

uint64_t sub_100223958(unint64_t a1)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)uint64_t v9 = 4;
    *(unsigned char *)(v9 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v1 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (*(void *)(v1 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1002C0AD0(0x79654B627570, 0xE600000000000000);
    if (v3)
    {
      unint64_t v4 = *(void *)(*(void *)(v1 + 56) + 8 * v2);
      uint64_t v5 = v4 & 0x1FFFFFFFFFFFFFFFLL;
      swift_retain();
      swift_bridgeObjectRelease();
      if (v4 >> 61 == 1)
      {
        uint64_t v6 = *(void *)((v4 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        unint64_t v7 = *(void *)((v4 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
        sub_10006D0EC(*(void *)(v5 + 16), *(void *)(v5 + 24));
        swift_release();
        sub_100081790(1, v6, v7, &v11);
        swift_release();
        return v11;
      }
      sub_10007BF50();
      swift_allocError();
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 4;
      *(unsigned char *)(v10 + 24) = 3;
      swift_willThrow();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_100223ADC@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v47 + 8) = 0;
    *(void *)(v47 + 16) = 0;
    *(void *)uint64_t v47 = 4;
    *(unsigned char *)(v47 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v4 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v5 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1002C0AD0(0x6E6F6973726576, 0xE700000000000000);
  if ((v7 & 1) == 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  unint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8 * v6);
  if (v8 >> 61 != 2)
  {
LABEL_25:
    sub_10007BF50();
    swift_allocError();
    *(void *)(v48 + 8) = 0;
    *(void *)(v48 + 16) = 0;
    *(void *)uint64_t v48 = 4;
    *(unsigned char *)(v48 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = *(void *)((v8 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v10 = sub_1002C0AD0(1684628851, 0xE400000000000000);
  if ((v11 & 1) == 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  unint64_t v12 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
  if (v12 >> 61 != 1) {
    goto LABEL_25;
  }
  if (!*(void *)(v4 + 16))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v14 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v13 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v14, v13);
  sub_10006D0EC(v14, v13);
  uint64_t v15 = sub_1002C0AD0(1684628325, 0xE400000000000000);
  if ((v16 & 1) == 0)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  unint64_t v17 = *(void *)(*(void *)(v4 + 56) + 8 * v15);
  if (v17 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v50 + 8) = 0;
    *(void *)(v50 + 16) = 0;
    *(void *)uint64_t v50 = 4;
    *(unsigned char *)(v50 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v14, v13);
    swift_release();
    uint64_t v51 = v14;
    unint64_t v52 = v13;
    return sub_10006D144(v51, v52);
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_47;
  }
  uint64_t v18 = v17 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v20 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v19 = *(void *)(v18 + 24);
  sub_10006D0EC(v20, v19);
  uint64_t v68 = v20;
  unint64_t v67 = v19;
  sub_10006D0EC(v20, v19);
  uint64_t v21 = sub_1002C0AD0(0x444970696863, 0xE600000000000000);
  if ((v22 & 1) == 0)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v23 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
  unint64_t v65 = v23 & 0xE000000000000000;
  if ((v23 & 0xE000000000000000) != 0x2000000000000000)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v53 + 8) = 0;
    *(void *)(v53 + 16) = 0;
    *(void *)uint64_t v53 = 4;
    *(unsigned char *)(v53 + 24) = 3;
    uint64_t v43 = v23 & 0x1FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v44 = v68;
    unint64_t v42 = v19;
    sub_10006D144(v68, v19);
    sub_10006D144(v14, v13);
    swift_release();
    int v45 = 0;
    int v46 = 0;
    goto LABEL_31;
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_49;
  }
  uint64_t v24 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v25 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v24, v25);
  uint64_t v61 = v24;
  unint64_t v63 = v25;
  sub_10006D0EC(v24, v25);
  uint64_t v26 = sub_1002C0AD0(0x44496472616F62, 0xE700000000000000);
  if ((v27 & 1) == 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  unint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
  if (v28 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v54 + 8) = 0;
    *(void *)(v54 + 16) = 0;
    *(void *)uint64_t v54 = 4;
    *(unsigned char *)(v54 + 24) = 3;
    uint64_t v43 = v28 & 0x1FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = v24;
    sub_10006D144(v24, v63);
    uint64_t v44 = v68;
    unint64_t v42 = v67;
    sub_10006D144(v68, v67);
    sub_10006D144(v14, v13);
    swift_release();
    int v45 = 0;
    int v46 = 0;
    goto LABEL_31;
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_51;
  }
  uint64_t v29 = *(void *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v30 = *(void *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v29, v30);
  uint64_t v62 = v29;
  unint64_t v64 = v30;
  sub_10006D0EC(v29, v30);
  uint64_t v31 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B83E0);
  if ((v32 & 1) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v33 = *(void *)(*(void *)(v4 + 56) + 8 * v31);
  if (v33 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v56 + 8) = 0;
    *(void *)(v56 + 16) = 0;
    *(void *)uint64_t v56 = 4;
    *(unsigned char *)(v56 + 24) = 3;
    uint64_t v43 = v33 & 0x1FFFFFFFFFFFFFFFLL;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v29, v64);
    uint64_t v5 = v61;
    sub_10006D144(v61, v63);
    uint64_t v44 = v68;
    unint64_t v42 = v67;
    sub_10006D144(v68, v67);
    sub_10006D144(v14, v13);
    swift_release();
    int v46 = 0;
    int v45 = 1;
    goto LABEL_31;
  }
  uint64_t v34 = v33 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v36 = *(void *)((v33 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v35 = *(void *)(v34 + 24);
  uint64_t v57 = *(void *)(v4 + 16);
  sub_10006D0EC(v36, v35);
  uint64_t v59 = v36;
  unint64_t v60 = v35;
  sub_10006D0EC(v36, v35);
  if (!v57 || (uint64_t v37 = sub_1002C0AD0(0x654B63696C627570, 0xED00006F666E4979), (v38 & 1) == 0))
  {
LABEL_53:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  unint64_t v39 = *(void *)(*(void *)(v4 + 56) + 8 * v37);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_100223958(v39);
  unint64_t v42 = v67;
  if (!v2)
  {
    uint64_t v66 = v40;
    unint64_t v58 = v41;
    swift_release();
    sub_10006D0EC(v14, v13);
    sub_10006D0EC(v68, v67);
    sub_10006D0EC(v61, v63);
    sub_10006D0EC(v62, v64);
    sub_10006D0EC(v59, v60);
    sub_10006D0EC(v66, v58);
    sub_10006D144(v59, v60);
    sub_10006D144(v62, v64);
    sub_10006D144(v61, v63);
    sub_10006D144(v68, v67);
    sub_10006D144(v14, v13);
    sub_10006D144(v14, v13);
    sub_10006D144(v68, v67);
    sub_10006D144(v61, v63);
    sub_10006D144(v62, v64);
    sub_10006D144(v59, v60);
    uint64_t result = sub_10006D144(v66, v58);
    *a2 = v9;
    a2[1] = v14;
    a2[2] = v13;
    a2[3] = v68;
    a2[4] = v67;
    a2[5] = v61;
    a2[6] = v63;
    a2[7] = v62;
    a2[8] = v64;
    a2[9] = v59;
    a2[10] = v60;
    a2[11] = v66;
    a2[12] = v58;
    return result;
  }
  swift_release();
  uint64_t v43 = v59;
  sub_10006D144(v59, v60);
  sub_10006D144(v62, v64);
  uint64_t v5 = v61;
  sub_10006D144(v61, v63);
  uint64_t v44 = v68;
  sub_10006D144(v68, v67);
  sub_10006D144(v14, v13);
  int v45 = 1;
  int v46 = 1;
LABEL_31:
  sub_10006D144(v14, v13);
  sub_10006D144(v44, v42);
  if (v65 == 0x2000000000000000)
  {
    sub_10006D144(v5, v63);
    uint64_t result = v62;
    unint64_t v55 = v64;
    if ((v45 & 1) == 0) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t result = v62;
    unint64_t v55 = v64;
    if (!v45)
    {
LABEL_33:
      if (v46) {
        goto LABEL_37;
      }
      return result;
    }
  }
  uint64_t result = sub_10006D144(result, v55);
  if (v46)
  {
LABEL_37:
    uint64_t v51 = v43;
    unint64_t v52 = v60;
    return sub_10006D144(v51, v52);
  }
  return result;
}

uint64_t sub_1002242F8@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)uint64_t v9 = 4;
    *(unsigned char *)(v9 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v4 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1002C0AD0(0x614474656C707061, 0xEA00000000006174);
  if ((v7 & 1) == 0)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  unint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8 * v6);
  swift_retain();
  sub_100223ADC(v8, v31);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  uint64_t v12 = v31[0];
  uint64_t v11 = v31[1];
  unint64_t v13 = v31[2];
  uint64_t v22 = v31[3];
  unint64_t v23 = v31[4];
  uint64_t v24 = v31[5];
  unint64_t v25 = v31[6];
  uint64_t v26 = v31[7];
  unint64_t v27 = v31[8];
  uint64_t v28 = v31[9];
  unint64_t v29 = v31[10];
  uint64_t v30 = v31[11];
  unint64_t v32 = v31[12];
  uint64_t v14 = *(void *)(v4 + 16);
  sub_10022728C(v31, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
  if (!v14) {
    goto LABEL_15;
  }
  uint64_t v15 = sub_1002C0AD0(0x6D726F6674616C70, 0xEC00000061746144);
  if ((v16 & 1) == 0) {
    goto LABEL_15;
  }
  unint64_t v17 = *(void *)(*(void *)(v4 + 56) + 8 * v15);
  uint64_t v18 = v17 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_bridgeObjectRelease();
  if (v17 >> 61 == 1)
  {
    uint64_t v19 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    uint64_t v20 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    sub_10006D0EC(*(void *)(v18 + 16), *(void *)(v18 + 24));
    swift_release();
    swift_release();
    uint64_t result = (uint64_t)sub_10022728C(v31, (void (*)(uint64_t, uint64_t))sub_10006D144);
    *a2 = v12;
    a2[1] = v11;
    a2[2] = v13;
    a2[3] = v22;
    a2[4] = v23;
    a2[5] = v24;
    a2[6] = v25;
    a2[7] = v26;
    a2[8] = v27;
    a2[9] = v28;
    a2[10] = v29;
    a2[11] = v30;
    a2[12] = v32;
    a2[13] = v19;
    a2[14] = v20;
  }
  else
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v21 + 8) = 0;
    *(void *)(v21 + 16) = 0;
    *(void *)uint64_t v21 = 4;
    *(unsigned char *)(v21 + 24) = 3;
    swift_willThrow();
    swift_release();
    sub_10022728C(v31, (void (*)(uint64_t, uint64_t))sub_10006D144);
    swift_release();
    sub_10006D144(v11, v13);
    sub_10006D144(v22, v23);
    sub_10006D144(v24, v25);
    sub_10006D144(v26, v27);
    sub_10006D144(v28, v29);
    return sub_10006D144(v30, v32);
  }
  return result;
}

uint64_t sub_100224600@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v9 + 8) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)uint64_t v9 = 4;
    *(unsigned char *)(v9 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v4 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v5 = v2;
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B83A0);
  if ((v7 & 1) == 0)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v8 = *(void *)(*(void *)(v4 + 56) + 8 * v6);
  swift_retain();
  sub_1002242F8(v8, v51);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_22;
  }
  uint64_t v33 = v51[0];
  uint64_t v36 = v51[1];
  long long v37 = v52;
  long long v38 = v53;
  long long v39 = v54;
  unint64_t v40 = v55;
  unint64_t v11 = v57;
  uint64_t v62 = v56;
  uint64_t v13 = v58;
  uint64_t v12 = v59;
  uint64_t v14 = v60;
  unint64_t v15 = v61;
  sub_1002270A4(v51, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
  uint64_t v16 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B83C0);
  if ((v17 & 1) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  *(void *)&long long v34 = v11;
  *((void *)&v34 + 1) = v13;
  *(void *)&long long v35 = v12;
  *((void *)&v35 + 1) = v14;
  uint64_t v18 = *(void *)(*(void *)(v4 + 56) + 8 * v16);
  unint64_t v19 = v18 & 0xE000000000000000;
  if ((v18 & 0xE000000000000000) == 0x2000000000000000)
  {
    unint64_t v32 = v15;
    uint64_t v13 = *(void *)((v18 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v11 = *(void *)((v18 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v20 = *(void *)(v4 + 16);
    sub_10006D0EC(v13, v11);
    sub_10006D0EC(v13, v11);
    if (v20)
    {
      uint64_t v21 = sub_1002C0AD0(0x727574616E676973, 0xE900000000000065);
      if (v22)
      {
        unint64_t v23 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
        swift_retain();
        swift_bridgeObjectRelease();
        if (v23 >> 61 == 1)
        {
          uint64_t v24 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v25 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          sub_10006D0EC(v24, v25);
          swift_release();
          swift_release();
          *(void *)&long long v41 = v33;
          *((void *)&v41 + 1) = v36;
          long long v42 = v37;
          long long v43 = v38;
          long long v44 = v39;
          *(void *)&long long v45 = v40;
          *((void *)&v45 + 1) = v62;
          long long v46 = v34;
          long long v47 = v35;
          *(void *)&long long v48 = v32;
          *((void *)&v48 + 1) = v13;
          *(void *)&long long v49 = v11;
          *((void *)&v49 + 1) = v24;
          unint64_t v50 = v25;
          sub_100227180(&v41, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
          sub_10006D144(v13, v11);
          sub_1002270A4(v51, (void (*)(uint64_t, uint64_t))sub_10006D144);
          uint64_t result = (uint64_t)sub_100227180(&v41, (void (*)(uint64_t, uint64_t))sub_10006D144);
          long long v26 = v48;
          *(_OWORD *)(a2 + 96) = v47;
          *(_OWORD *)(a2 + 112) = v26;
          *(_OWORD *)(a2 + 128) = v49;
          *(void *)(a2 + 144) = v50;
          long long v27 = v44;
          *(_OWORD *)(a2 + 32) = v43;
          *(_OWORD *)(a2 + 48) = v27;
          long long v28 = v46;
          *(_OWORD *)(a2 + 64) = v45;
          *(_OWORD *)(a2 + 80) = v28;
          long long v29 = v42;
          *(_OWORD *)a2 = v41;
          *(_OWORD *)(a2 + 16) = v29;
          return result;
        }
        sub_10007BF50();
        swift_allocError();
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0;
        *(void *)uint64_t v31 = 4;
        *(unsigned char *)(v31 + 24) = 3;
        swift_willThrow();
        swift_release();
        sub_10006D144(v13, v11);
        unint64_t v15 = v32;
        goto LABEL_18;
      }
    }
LABEL_24:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  sub_10007BF50();
  swift_allocError();
  *(void *)(v30 + 8) = 0;
  *(void *)(v30 + 16) = 0;
  *(void *)uint64_t v30 = 4;
  *(unsigned char *)(v30 + 24) = 3;
  swift_retain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_18:
  sub_1002270A4(v51, (void (*)(uint64_t, uint64_t))sub_10006D144);
  swift_release();
  sub_10006D144(v36, v37);
  sub_10006D144(*((uint64_t *)&v37 + 1), v38);
  sub_10006D144(*((uint64_t *)&v38 + 1), v39);
  sub_10006D144(*((uint64_t *)&v39 + 1), v40);
  sub_10006D144(v62, v34);
  sub_10006D144(*((uint64_t *)&v34 + 1), v35);
  uint64_t result = sub_10006D144(*((uint64_t *)&v35 + 1), v15);
  if (v19 == 0x2000000000000000) {
    return sub_10006D144(v13, v11);
  }
  return result;
}

double sub_100224AA0@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_100378470;
  *(void *)(v2 + 32) = 0x444955556B6C74;
  *(void *)(v2 + 40) = 0xE700000000000000;
  *(void *)(v2 + 48) = 212;
  *(_WORD *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = &off_10040EA60;
  *(void *)(v2 + 96) = 0x416465776F6C6C61;
  *(void *)(v2 + 104) = 0xEA00000000004449;
  *(void *)(v2 + 112) = 214;
  *(_WORD *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = -64;
  *(void *)(v2 + 152) = &off_10040EAB0;
  *(void *)(v2 + 160) = 0xD000000000000011;
  *(void *)(v2 + 168) = 0x80000001003B8300;
  *(void *)(v2 + 176) = 215;
  *(_WORD *)(v2 + 184) = 0;
  *(void *)&double result = 2;
  *(_OWORD *)(v2 + 192) = xmmword_10037CDD0;
  *(unsigned char *)(v2 + 208) = -64;
  *(void *)(v2 + 216) = _swiftEmptyArrayStorage;
  *(void *)a1 = 233;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_100224BB8@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1003782A0;
  *(void *)(v2 + 32) = 0xD000000000000011;
  *(void *)(v2 + 40) = 0x80000001003B8440;
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1003782A0;
  strcpy((char *)(v3 + 32), "ptAttestation");
  *(_WORD *)(v3 + 46) = -4864;
  *(void *)(v3 + 48) = 196;
  *(_WORD *)(v3 + 56) = 0;
  *(void *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = 0;
  *(unsigned char *)(v3 + 80) = -64;
  *(void *)(v3 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v3 + 96) = 0x7472654364736163;
  *(void *)(v3 + 104) = 0xEF65746163696669;
  *(void *)(v3 + 112) = 197;
  *(_WORD *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 136) = 0;
  *(unsigned char *)(v3 + 144) = -64;
  *(void *)(v3 + 152) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 48) = 231;
  *(_WORD *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = v3;
  *(void *)(v2 + 72) = 1;
  *(unsigned char *)(v2 + 80) = 64;
  *(void *)(v2 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 96) = 0xD000000000000016;
  *(void *)(v2 + 104) = 0x80000001003B8460;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 48;
  *(_WORD *)(v4 + 24) = 0;
  *(void *)&double result = 3;
  *(_OWORD *)(v4 + 32) = xmmword_10037CDC0;
  *(unsigned char *)(v4 + 48) = -64;
  *(void *)(v4 + 56) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 112) = 232;
  *(_WORD *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = v4;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = 0x80;
  *(void *)(v2 + 152) = _swiftEmptyArrayStorage;
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_100224D70@<X0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_10037B540;
  strcpy((char *)(result + 32), "formatVersion");
  *(_WORD *)(result + 46) = -4864;
  *(void *)(result + 48) = 192;
  *(_WORD *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(unsigned char *)(result + 80) = -64;
  *(void *)(result + 88) = _swiftEmptyArrayStorage;
  *(void *)(result + 96) = 0x444955556B6C74;
  *(void *)(result + 104) = 0xE700000000000000;
  *(void *)(result + 112) = 212;
  *(_WORD *)(result + 120) = 0;
  *(_OWORD *)(result + 128) = 0u;
  *(unsigned char *)(result + 144) = -64;
  *(void *)(result + 152) = &off_10040EB00;
  strcpy((char *)(result + 160), "parentTLKUUID");
  *(_WORD *)(result + 174) = -4864;
  *(void *)(result + 176) = 213;
  *(_WORD *)(result + 184) = 0;
  *(_OWORD *)(result + 192) = 0u;
  *(unsigned char *)(result + 208) = -64;
  *(void *)(result + 216) = &off_10040EB50;
  *(void *)(result + 224) = 0x416465776F6C6C61;
  *(void *)(result + 232) = 0xEA00000000004449;
  *(void *)(result + 240) = 214;
  *(_WORD *)(result + 248) = 0;
  *(_OWORD *)(result + 256) = 0u;
  *(unsigned char *)(result + 272) = -64;
  *(void *)(result + 280) = &off_10040EBA0;
  *(void *)(result + 288) = 0xD000000000000011;
  *(void *)(result + 296) = 0x80000001003B8300;
  *(void *)(result + 304) = 215;
  *(_WORD *)(result + 312) = 0;
  *(_OWORD *)(result + 320) = xmmword_10037CDD0;
  *(unsigned char *)(result + 336) = -64;
  *(void *)(result + 344) = _swiftEmptyArrayStorage;
  *(void *)(result + 352) = 0x5649736561;
  *(void *)(result + 360) = 0xE500000000000000;
  *(void *)(result + 368) = 216;
  *(_WORD *)(result + 376) = 256;
  *(_OWORD *)(result + 384) = 0u;
  *(unsigned char *)(result + 400) = -64;
  *(void *)(result + 408) = &off_10040EBF0;
  strcpy((char *)(result + 416), "encryptedKey");
  *(unsigned char *)(result + 429) = 0;
  *(_WORD *)(result + 430) = -5120;
  *(void *)(result + 432) = 217;
  *(_WORD *)(result + 440) = 256;
  *(_OWORD *)(result + 448) = 0u;
  *(unsigned char *)(result + 464) = -64;
  *(void *)(result + 472) = &off_10040EC40;
  *(void *)(result + 480) = 0xD000000000000011;
  *(void *)(result + 488) = 0x80000001003B8380;
  *(void *)(result + 496) = 218;
  *(_WORD *)(result + 504) = 256;
  *(_OWORD *)(result + 512) = 0u;
  *(unsigned char *)(result + 528) = -64;
  *(void *)(result + 536) = &off_10040EC90;
  *(void *)a1 = 228;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_100224FA0@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(void *)&double result = 5;
  *(_OWORD *)(v2 + 16) = xmmword_100379160;
  *(void *)(v2 + 32) = 1684632949;
  *(void *)(v2 + 40) = 0xE400000000000000;
  *(void *)(v2 + 48) = 212;
  *(_WORD *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = &off_10040ECE0;
  *(void *)(v2 + 96) = 0x5555746E65726170;
  *(void *)(v2 + 104) = 0xEA00000000004449;
  *(void *)(v2 + 112) = 213;
  *(_WORD *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 136) = 0;
  *(unsigned char *)(v2 + 144) = -64;
  *(void *)(v2 + 152) = &off_10040ED30;
  *(void *)(v2 + 160) = 0x44495344746C61;
  *(void *)(v2 + 168) = 0xE700000000000000;
  *(void *)(v2 + 176) = 193;
  *(_WORD *)(v2 + 184) = 0;
  *(void *)(v2 + 192) = 0;
  *(void *)(v2 + 200) = 0;
  *(unsigned char *)(v2 + 208) = -64;
  *(void *)(v2 + 216) = &off_10040ED80;
  *(void *)(v2 + 224) = 0x416465776F6C6C61;
  *(void *)(v2 + 232) = 0xEA00000000004449;
  *(void *)(v2 + 240) = 214;
  *(_WORD *)(v2 + 248) = 0;
  *(void *)(v2 + 256) = 0;
  *(void *)(v2 + 264) = 0;
  *(unsigned char *)(v2 + 272) = -64;
  *(void *)(v2 + 280) = &off_10040EDD0;
  *(void *)(v2 + 288) = 0xD000000000000011;
  *(void *)(v2 + 296) = 0x80000001003B8300;
  *(void *)(v2 + 304) = 215;
  *(_WORD *)(v2 + 312) = 0;
  *(void *)(v2 + 320) = 0;
  *(void *)(v2 + 328) = 0;
  *(unsigned char *)(v2 + 336) = -64;
  *(void *)(v2 + 344) = _swiftEmptyArrayStorage;
  *(void *)a1 = 239;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_10022510C@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_10037B540;
  strcpy((char *)(v2 + 32), "formatVersion");
  *(_WORD *)(v2 + 46) = -4864;
  *(void *)(v2 + 48) = 192;
  *(_WORD *)(v2 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = &off_10040EE20;
  *(void *)(v2 + 96) = 0xD00000000000001ALL;
  *(void *)(v2 + 104) = 0x80000001003B8320;
  *(void *)(v2 + 112) = 204;
  *(_WORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 128) = 0u;
  *(unsigned char *)(v2 + 144) = -64;
  *(void *)(v2 + 152) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 160) = 0xD000000000000016;
  *(void *)(v2 + 168) = 0x80000001003B8340;
  *(void *)(v2 + 176) = 205;
  *(_WORD *)(v2 + 184) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  *(unsigned char *)(v2 + 208) = -64;
  *(void *)(v2 + 216) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 224) = 0xD000000000000019;
  *(void *)(v2 + 232) = 0x80000001003B8360;
  *(void *)(v2 + 240) = 206;
  *(_WORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 256) = 0u;
  *(unsigned char *)(v2 + 272) = -64;
  *(void *)(v2 + 280) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 288) = 0x617461446174656DLL;
  *(void *)(v2 + 296) = 0xE800000000000000;
  *(void *)(v2 + 304) = 239;
  *(_WORD *)(v2 + 312) = 0;
  *(_OWORD *)(v2 + 320) = xmmword_10037CDC0;
  *(unsigned char *)(v2 + 336) = -64;
  *(void *)(v2 + 344) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 352) = 0x6574726568706963;
  *(void *)(v2 + 360) = 0xEA00000000007478;
  *(void *)(v2 + 368) = 208;
  *(_WORD *)(v2 + 376) = 0;
  *(_OWORD *)(v2 + 384) = 0u;
  *(unsigned char *)(v2 + 400) = -64;
  *(void *)(v2 + 408) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 416) = 0xD000000000000011;
  *(void *)(v2 + 424) = 0x80000001003B8380;
  *(void *)(v2 + 432) = 209;
  *(_WORD *)(v2 + 440) = 0;
  *(_OWORD *)(v2 + 448) = 0u;
  *(unsigned char *)(v2 + 464) = -64;
  *(void *)(v2 + 472) = &off_10040EE70;
  *(void *)(v2 + 480) = 0x69537265646E6573;
  *(void *)(v2 + 488) = 0xEF65727574616E67;
  *(void *)(v2 + 496) = 210;
  *(_WORD *)(v2 + 504) = 0;
  *(_OWORD *)(v2 + 512) = 0u;
  *(unsigned char *)(v2 + 528) = -64;
  *(void *)(v2 + 536) = _swiftEmptyArrayStorage;
  *(void *)a1 = 224;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_100225318@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1003782A0;
  *(void *)(v2 + 32) = 0x444955556B6C74;
  *(void *)(v2 + 40) = 0xE700000000000000;
  *(void *)(v2 + 48) = 212;
  *(_WORD *)(v2 + 56) = 0;
  *(void *)(v2 + 64) = 0;
  *(void *)(v2 + 72) = 0;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = &off_10040EEC0;
  *(void *)(v2 + 96) = 0xD000000000000012;
  *(void *)(v2 + 104) = 0x80000001003B8420;
  sub_100224BB8((uint64_t)v5);
  long long v3 = v5[1];
  *(_OWORD *)(v2 + 112) = v5[0];
  *(_OWORD *)(v2 + 128) = v3;
  double result = *(double *)&v6;
  *(_OWORD *)(v2 + 144) = v6;
  *(void *)a1 = 238;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

double sub_100225400@<D0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1003782A0;
  strcpy((char *)(v2 + 32), "encryptedBlob");
  *(_WORD *)(v2 + 46) = -4864;
  sub_10022510C((uint64_t)&v7);
  uint64_t v3 = v7;
  char v4 = v8;
  sub_10016FB80(&v9, &v14);
  sub_10016FBDC((uint64_t)&v14);
  uint64_t v13 = v10;
  sub_10016FC34((uint64_t)&v13);
  *(void *)(v2 + 48) = v3;
  *(unsigned char *)(v2 + 56) = v4;
  *(unsigned char *)(v2 + 57) = 0;
  *(_OWORD *)(v2 + 64) = xmmword_10037CDC0;
  *(unsigned char *)(v2 + 80) = -64;
  *(void *)(v2 + 88) = _swiftEmptyArrayStorage;
  *(void *)(v2 + 96) = 0xD000000000000012;
  *(void *)(v2 + 104) = 0x80000001003B8420;
  sub_100224BB8((uint64_t)v11);
  long long v5 = v11[1];
  *(_OWORD *)(v2 + 112) = v11[0];
  *(_OWORD *)(v2 + 128) = v5;
  double result = *(double *)&v12;
  *(_OWORD *)(v2 + 144) = v12;
  *(void *)a1 = 237;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

unint64_t sub_10022553C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0;
    *(void *)uint64_t v32 = 4;
    *(unsigned char *)(v32 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v3 = *(void *)((result & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_56;
  }
  swift_bridgeObjectRetain();
  double result = sub_1002C0AD0(0x655674616D726F66, 0xED00006E6F697372);
  if ((v4 & 1) == 0)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  unint64_t v5 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  if (v5 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v33 + 8) = 0;
    *(void *)(v33 + 16) = 0;
    *(void *)uint64_t v33 = 4;
    *(unsigned char *)(v33 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_57;
  }
  uint64_t v7 = *(void *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v6 = *(void *)((v5 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v7, v6);
  sub_10006D0EC(v7, v6);
  double result = sub_1002C0AD0(0x444955556B6C74, 0xE700000000000000);
  if ((v8 & 1) == 0)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  unint64_t v9 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  if (v9 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v34 + 8) = 0;
    *(void *)(v34 + 16) = 0;
    *(void *)uint64_t v34 = 4;
    *(unsigned char *)(v34 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v7, v6);
    swift_release();
    return sub_10006D144(v7, v6);
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_59;
  }
  uint64_t v11 = *(void *)((v9 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v10 = *(void *)((v9 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v11, v10);
  sub_10006D0EC(v11, v10);
  double result = sub_1002C0AD0(0x4C54746E65726170, 0xED0000444955554BLL);
  if ((v12 & 1) == 0)
  {
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v13 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  unint64_t v68 = v13 & 0xE000000000000000;
  if ((v13 & 0xE000000000000000) != 0x2000000000000000)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v35 + 8) = 0;
    *(void *)(v35 + 16) = 0;
    *(void *)uint64_t v35 = 4;
    *(unsigned char *)(v35 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    int v36 = 0;
    int v37 = 0;
    int v38 = 0;
    goto LABEL_28;
  }
  uint64_t v63 = v11;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_61;
  }
  unint64_t v14 = v10;
  uint64_t v15 = v13 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v17 = *(void *)((v13 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v16 = *(void *)(v15 + 24);
  sub_10006D0EC(v17, v16);
  unint64_t v66 = v16;
  uint64_t v67 = v17;
  sub_10006D0EC(v17, v16);
  double result = sub_1002C0AD0(0x416465776F6C6C61, 0xEA00000000004449);
  if ((v18 & 1) == 0)
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  unint64_t v19 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  unint64_t v10 = v14;
  if (v19 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0;
    *(void *)uint64_t v39 = 4;
    *(unsigned char *)(v39 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v67, v66);
    int v36 = 0;
    int v37 = 0;
    int v38 = 0;
LABEL_27:
    uint64_t v11 = v63;
    goto LABEL_28;
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_63;
  }
  uint64_t v20 = v19 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v22 = *(void *)((v19 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v21 = *(void *)(v20 + 24);
  sub_10006D0EC(v22, v21);
  uint64_t v64 = v22;
  unint64_t v65 = v21;
  sub_10006D0EC(v22, v21);
  double result = sub_1002C0AD0(0xD000000000000011, 0x80000001003B8300);
  if ((v23 & 1) == 0)
  {
LABEL_64:
    __break(1u);
    return result;
  }
  unint64_t v24 = *(void *)(*(void *)(v3 + 56) + 8 * result);
  unint64_t v10 = v14;
  if (v24 >> 61)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v40 + 8) = 0;
    *(void *)(v40 + 16) = 0;
    *(void *)uint64_t v40 = 4;
    *(unsigned char *)(v40 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v64, v65);
    sub_10006D144(v67, v66);
    int v37 = 0;
    int v38 = 0;
    int v36 = 1;
    goto LABEL_27;
  }
  char v54 = *(unsigned char *)(v24 + 16);
  uint64_t v11 = v63;
  if (!*(void *)(v3 + 16))
  {
    uint64_t v31 = 0;
    unint64_t v30 = 0xF000000000000000;
LABEL_44:
    unint64_t v60 = v30;
    uint64_t v61 = v31;
    sub_1000758F4(v31, v30);
    goto LABEL_45;
  }
  uint64_t v25 = sub_1002C0AD0(0x5649736561, 0xE500000000000000);
  if (v26)
  {
    unint64_t v27 = *(void *)(*(void *)(v3 + 56) + 8 * v25);
    if (v27 >> 61 != 1)
    {
      sub_10007BF50();
      swift_allocError();
      *(void *)(v51 + 8) = 0;
      *(void *)(v51 + 16) = 0;
      *(void *)uint64_t v51 = 4;
      *(unsigned char *)(v51 + 24) = 3;
      swift_retain();
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_release();
      sub_10006D144(v64, v65);
      sub_10006D144(v67, v66);
      int v37 = 0;
      int v38 = 0;
      int v36 = 1;
      goto LABEL_28;
    }
    uint64_t v28 = *(void *)((v27 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v29 = *(void *)((v27 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v62 = v28;
    sub_10006D0EC(v28, v29);
    unint64_t v30 = v29;
    uint64_t v31 = v62;
  }
  else
  {
    uint64_t v31 = 0;
    unint64_t v30 = 0xF000000000000000;
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_44;
  }
  unint64_t v60 = v30;
  uint64_t v61 = v31;
  sub_1000758F4(v31, v30);
  uint64_t v41 = sub_1002C0AD0(0x6574707972636E65, 0xEC00000079654B64);
  if ((v42 & 1) == 0)
  {
LABEL_45:
    uint64_t v47 = 0;
    unint64_t v46 = 0xF000000000000000;
    goto LABEL_46;
  }
  unint64_t v43 = *(void *)(*(void *)(v3 + 56) + 8 * v41);
  if (v43 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v53 + 8) = 0;
    *(void *)(v53 + 16) = 0;
    *(void *)uint64_t v53 = 4;
    *(unsigned char *)(v53 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100075868(v61, v60);
    sub_10006D144(v64, v65);
    sub_10006D144(v67, v66);
    int v38 = 0;
    int v36 = 1;
    int v37 = 1;
    goto LABEL_28;
  }
  uint64_t v44 = *(void *)((v43 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v45 = *(void *)((v43 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v58 = v44;
  sub_10006D0EC(v44, v45);
  unint64_t v46 = v45;
  uint64_t v47 = v58;
LABEL_46:
  uint64_t v48 = *(void *)(v3 + 16);
  uint64_t v57 = v47;
  unint64_t v59 = v46;
  sub_1000758F4(v47, v46);
  if (!v48 || (uint64_t v49 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B8380), (v50 & 1) == 0))
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v69 = 0;
    unint64_t v56 = 0xF000000000000000;
    goto LABEL_51;
  }
  unint64_t v55 = *(void *)(*(void *)(v3 + 56) + 8 * v49);
  swift_retain();
  swift_bridgeObjectRelease();
  if (v55 >> 61 == 1)
  {
    uint64_t v69 = *(void *)((v55 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v56 = *(void *)((v55 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    sub_10006D0EC(v69, v56);
    swift_release();
    swift_release();
LABEL_51:
    sub_10006D0EC(v7, v6);
    sub_10006D0EC(v63, v10);
    sub_10006D0EC(v67, v66);
    sub_10006D0EC(v64, v65);
    sub_1000758F4(v61, v60);
    sub_1000758F4(v57, v59);
    sub_1000758F4(v69, v56);
    sub_100075868(v57, v59);
    sub_100075868(v61, v60);
    sub_10006D144(v64, v65);
    sub_10006D144(v67, v66);
    sub_10006D144(v63, v10);
    sub_10006D144(v7, v6);
    sub_10006D144(v7, v6);
    sub_10006D144(v63, v10);
    sub_10006D144(v67, v66);
    sub_10006D144(v64, v65);
    sub_100075868(v61, v60);
    sub_100075868(v57, v59);
    double result = sub_100075868(v69, v56);
    *(void *)a2 = v7;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v63;
    *(void *)(a2 + 24) = v10;
    *(void *)(a2 + 32) = v67;
    *(void *)(a2 + 40) = v66;
    *(void *)(a2 + 48) = v64;
    *(void *)(a2 + 56) = v65;
    *(unsigned char *)(a2 + 64) = v54;
    *(void *)(a2 + 72) = v61;
    *(void *)(a2 + 80) = v60;
    *(void *)(a2 + 88) = v57;
    *(void *)(a2 + 96) = v59;
    *(void *)(a2 + 104) = v69;
    *(void *)(a2 + 112) = v56;
    return result;
  }
  sub_10007BF50();
  swift_allocError();
  *(void *)(v52 + 8) = 0;
  *(void *)(v52 + 16) = 0;
  *(void *)uint64_t v52 = 4;
  *(unsigned char *)(v52 + 24) = 3;
  swift_willThrow();
  swift_release();
  sub_100075868(v57, v59);
  sub_100075868(v61, v60);
  sub_10006D144(v64, v65);
  sub_10006D144(v67, v66);
  int v36 = 1;
  int v37 = 1;
  int v38 = 1;
LABEL_28:
  sub_10006D144(v11, v10);
  sub_10006D144(v7, v6);
  swift_release();
  sub_10006D144(v7, v6);
  double result = sub_10006D144(v11, v10);
  if (v68 == 0x2000000000000000)
  {
    double result = sub_10006D144(v67, v66);
    if ((v36 & 1) == 0) {
      goto LABEL_30;
    }
  }
  else if (!v36)
  {
LABEL_30:
    if (v37) {
      goto LABEL_31;
    }
LABEL_35:
    if (!v38) {
      return result;
    }
    return sub_100075868(v57, v59);
  }
  double result = sub_10006D144(v64, v65);
  if ((v37 & 1) == 0) {
    goto LABEL_35;
  }
LABEL_31:
  double result = sub_100075868(v61, v60);
  if ((v38 & 1) == 0) {
    return result;
  }
  return sub_100075868(v57, v59);
}

uint64_t sub_100225EDC@<X0>(unint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v52 + 8) = 0;
    *(void *)(v52 + 16) = 0;
    *(void *)uint64_t v52 = 4;
    *(unsigned char *)(v52 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v3 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1002C0AD0(0x655674616D726F66, 0xED00006E6F697372);
  if ((v5 & 1) == 0)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  unint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  if (v6 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v53 + 8) = 0;
    *(void *)(v53 + 16) = 0;
    *(void *)uint64_t v53 = 4;
    *(unsigned char *)(v53 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_51;
  }
  uint64_t v8 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v7 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v8, v7);
  sub_10006D0EC(v8, v7);
  uint64_t v9 = sub_1002C0AD0(0xD00000000000001ALL, 0x80000001003B8320);
  if ((v10 & 1) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v11 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
  if (v11 >> 61 == 1)
  {
    if (*(void *)(v3 + 16))
    {
      uint64_t v12 = v11 & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v13 = *(void *)((v11 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v14 = *(void *)(v12 + 24);
      sub_10006D0EC(v13, v14);
      uint64_t v92 = v13;
      unint64_t v83 = v14;
      sub_10006D0EC(v13, v14);
      uint64_t v15 = sub_1002C0AD0(0xD000000000000016, 0x80000001003B8340);
      if (v16)
      {
        uint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v15);
        unint64_t v80 = v17 & 0xE000000000000000;
        if ((v17 & 0xE000000000000000) != 0x2000000000000000)
        {
          sub_10007BF50();
          swift_allocError();
          *(void *)(v57 + 8) = 0;
          *(void *)(v57 + 16) = 0;
          *(void *)uint64_t v57 = 4;
          *(unsigned char *)(v57 + 24) = 3;
          swift_retain();
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_release();
          int v58 = 0;
          int v59 = 0;
          int v60 = 0;
          int v61 = 0;
          goto LABEL_32;
        }
        if (*(void *)(v3 + 16))
        {
          uint64_t v18 = v17 & 0x1FFFFFFFFFFFFFFFLL;
          uint64_t v20 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v19 = *(void *)(v18 + 24);
          sub_10006D0EC(v20, v19);
          unint64_t v79 = v19;
          sub_10006D0EC(v20, v19);
          uint64_t v21 = sub_1002C0AD0(0xD000000000000019, 0x80000001003B8360);
          if (v22)
          {
            unint64_t v23 = *(void *)(*(void *)(v3 + 56) + 8 * v21);
            uint64_t v75 = v20;
            if (v23 >> 61 != 1)
            {
              sub_10007BF50();
              swift_allocError();
              *(void *)(v62 + 8) = 0;
              *(void *)(v62 + 16) = 0;
              *(void *)uint64_t v62 = 4;
              *(unsigned char *)(v62 + 24) = 3;
              swift_retain();
              swift_willThrow();
              swift_bridgeObjectRelease();
              swift_release();
              sub_10006D144(v20, v19);
              int v58 = 0;
              int v59 = 0;
              int v60 = 0;
              int v61 = 0;
              goto LABEL_32;
            }
            if (*(void *)(v3 + 16))
            {
              uint64_t v25 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
              unint64_t v24 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
              sub_10006D0EC(v25, v24);
              *((void *)&v78 + 1) = v24;
              sub_10006D0EC(v25, v24);
              uint64_t v26 = sub_1002C0AD0(0x617461446174656DLL, 0xE800000000000000);
              if (v27)
              {
                unint64_t v28 = *(void *)(*(void *)(v3 + 56) + 8 * v26);
                *(void *)&long long v78 = v25;
                if (v28 >> 61 != 1)
                {
                  sub_10007BF50();
                  swift_allocError();
                  *(void *)(v68 + 8) = 0;
                  *(void *)(v68 + 16) = 0;
                  *(void *)uint64_t v68 = 4;
                  *(unsigned char *)(v68 + 24) = 3;
                  swift_retain();
                  swift_willThrow();
                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_10006D144(v25, *((unint64_t *)&v78 + 1));
                  sub_10006D144(v20, v79);
                  int v59 = 0;
                  int v60 = 0;
                  int v61 = 0;
                  int v58 = 1;
                  goto LABEL_32;
                }
                if (*(void *)(v3 + 16))
                {
                  uint64_t v29 = v28 & 0x1FFFFFFFFFFFFFFFLL;
                  uint64_t v30 = *(void *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
                  unint64_t v31 = *(void *)(v29 + 24);
                  sub_10006D0EC(v30, v31);
                  *(void *)&long long v77 = v30;
                  *((void *)&v77 + 1) = v31;
                  sub_10006D0EC(v30, v31);
                  uint64_t v32 = sub_1002C0AD0(0x6574726568706963, 0xEA00000000007478);
                  if (v33)
                  {
                    unint64_t v34 = *(void *)(*(void *)(v3 + 56) + 8 * v32);
                    if (v34 >> 61 != 1)
                    {
                      sub_10007BF50();
                      swift_allocError();
                      *(void *)(v69 + 8) = 0;
                      *(void *)(v69 + 16) = 0;
                      *(void *)uint64_t v69 = 4;
                      *(unsigned char *)(v69 + 24) = 3;
                      swift_retain();
                      swift_willThrow();
                      swift_bridgeObjectRelease();
                      swift_release();
                      sub_10006D144(v77, v31);
                      sub_10006D144(v78, *((unint64_t *)&v78 + 1));
                      sub_10006D144(v20, v79);
                      int v60 = 0;
                      int v61 = 0;
                      int v58 = 1;
                      int v59 = 1;
                      goto LABEL_32;
                    }
                    if (*(void *)(v3 + 16))
                    {
                      uint64_t v36 = *(void *)((v34 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
                      unint64_t v35 = *(void *)((v34 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
                      sub_10006D0EC(v36, v35);
                      *((void *)&v76 + 1) = v35;
                      sub_10006D0EC(v36, v35);
                      uint64_t v37 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B8380);
                      if (v38)
                      {
                        unint64_t v39 = *(void *)(*(void *)(v3 + 56) + 8 * v37);
                        *(void *)&long long v76 = v36;
                        if (v39 >> 61 != 1)
                        {
                          sub_10007BF50();
                          swift_allocError();
                          *(void *)(v70 + 8) = 0;
                          *(void *)(v70 + 16) = 0;
                          *(void *)uint64_t v70 = 4;
                          *(unsigned char *)(v70 + 24) = 3;
                          swift_retain();
                          swift_willThrow();
                          swift_bridgeObjectRelease();
                          swift_release();
                          sub_10006D144(v36, *((unint64_t *)&v76 + 1));
                          sub_10006D144(v77, *((unint64_t *)&v77 + 1));
                          sub_10006D144(v78, *((unint64_t *)&v78 + 1));
                          sub_10006D144(v20, v79);
                          int v61 = 0;
                          int v58 = 1;
                          int v59 = 1;
                          int v60 = 1;
                          goto LABEL_32;
                        }
                        uint64_t v41 = *(void *)((v39 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
                        unint64_t v40 = *(void *)((v39 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
                        uint64_t v82 = *(void *)(v3 + 16);
                        sub_10006D0EC(v41, v40);
                        uint64_t v74 = v41;
                        uint64_t v42 = v41;
                        unint64_t v43 = v40;
                        sub_10006D0EC(v42, v40);
                        if (v82)
                        {
                          uint64_t v44 = sub_1002C0AD0(0x69537265646E6573, 0xEF65727574616E67);
                          if (v45)
                          {
                            unint64_t v46 = *(void *)(*(void *)(v3 + 56) + 8 * v44);
                            swift_retain();
                            swift_bridgeObjectRelease();
                            if (v46 >> 61 == 1)
                            {
                              uint64_t v81 = *(void *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
                              unint64_t v73 = *(void *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
                              sub_10006D0EC(v81, v73);
                              swift_release();
                              swift_release();
                              *(void *)&long long v84 = v8;
                              *((void *)&v84 + 1) = v7;
                              *(void *)&long long v85 = v92;
                              *((void *)&v85 + 1) = v83;
                              *(void *)&long long v86 = v20;
                              *((void *)&v86 + 1) = v79;
                              long long v87 = v78;
                              long long v88 = v77;
                              long long v89 = v76;
                              *(void *)&long long v90 = v74;
                              *((void *)&v90 + 1) = v43;
                              *(void *)&long long v91 = v81;
                              *((void *)&v91 + 1) = v73;
                              sub_100226F28((uint64_t *)&v84, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
                              sub_10006D144(v74, v43);
                              sub_10006D144(v76, *((unint64_t *)&v76 + 1));
                              sub_10006D144(v77, *((unint64_t *)&v77 + 1));
                              sub_10006D144(v78, *((unint64_t *)&v78 + 1));
                              sub_10006D144(v20, v79);
                              sub_10006D144(v92, v83);
                              sub_10006D144(v8, v7);
                              uint64_t result = (uint64_t)sub_100226F28((uint64_t *)&v84, (void (*)(uint64_t, uint64_t))sub_10006D144);
                              long long v48 = v89;
                              a2[4] = v88;
                              a2[5] = v48;
                              long long v49 = v91;
                              a2[6] = v90;
                              a2[7] = v49;
                              long long v50 = v85;
                              *a2 = v84;
                              a2[1] = v50;
                              long long v51 = v87;
                              a2[2] = v86;
                              a2[3] = v51;
                              return result;
                            }
                            sub_10007BF50();
                            swift_allocError();
                            *(void *)(v71 + 8) = 0;
                            *(void *)(v71 + 16) = 0;
                            *(void *)uint64_t v71 = 4;
                            *(unsigned char *)(v71 + 24) = 3;
                            swift_willThrow();
                            swift_release();
                            unint64_t v72 = v43;
                            sub_10006D144(v74, v43);
                            sub_10006D144(v76, *((unint64_t *)&v76 + 1));
                            sub_10006D144(v77, *((unint64_t *)&v77 + 1));
                            sub_10006D144(v78, *((unint64_t *)&v78 + 1));
                            sub_10006D144(v20, v79);
                            int v58 = 1;
                            int v59 = 1;
                            int v60 = 1;
                            int v61 = 1;
LABEL_32:
                            sub_10006D144(v92, v83);
                            sub_10006D144(v8, v7);
                            swift_release();
                            sub_10006D144(v8, v7);
                            sub_10006D144(v92, v83);
                            if (v80 == 0x2000000000000000)
                            {
                              sub_10006D144(v75, v79);
                              unint64_t v63 = *((void *)&v78 + 1);
                              uint64_t result = v78;
                              unint64_t v65 = *((void *)&v77 + 1);
                              uint64_t v64 = v77;
                              unint64_t v66 = *((void *)&v76 + 1);
                              if ((v58 & 1) == 0) {
                                goto LABEL_34;
                              }
                            }
                            else
                            {
                              unint64_t v63 = *((void *)&v78 + 1);
                              uint64_t result = v78;
                              unint64_t v65 = *((void *)&v77 + 1);
                              uint64_t v64 = v77;
                              unint64_t v66 = *((void *)&v76 + 1);
                              if (!v58)
                              {
LABEL_34:
                                uint64_t v67 = v76;
                                if (v59) {
                                  goto LABEL_35;
                                }
                                goto LABEL_40;
                              }
                            }
                            uint64_t result = sub_10006D144(result, v63);
                            uint64_t v67 = v76;
                            if (v59)
                            {
LABEL_35:
                              uint64_t result = sub_10006D144(v64, v65);
                              if ((v60 & 1) == 0) {
                                goto LABEL_36;
                              }
                              goto LABEL_41;
                            }
LABEL_40:
                            if (!v60)
                            {
LABEL_36:
                              if (!v61) {
                                return result;
                              }
LABEL_42:
                              unint64_t v56 = v72;
                              uint64_t v55 = v74;
                              return sub_10006D144(v55, v56);
                            }
LABEL_41:
                            uint64_t result = sub_10006D144(v67, v66);
                            if ((v61 & 1) == 0) {
                              return result;
                            }
                            goto LABEL_42;
                          }
                        }
LABEL_63:
                        uint64_t result = swift_bridgeObjectRelease();
                        __break(1u);
                        return result;
                      }
LABEL_62:
                      __break(1u);
                      goto LABEL_63;
                    }
LABEL_61:
                    __break(1u);
                    goto LABEL_62;
                  }
LABEL_60:
                  __break(1u);
                  goto LABEL_61;
                }
LABEL_59:
                __break(1u);
                goto LABEL_60;
              }
LABEL_58:
              __break(1u);
              goto LABEL_59;
            }
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  sub_10007BF50();
  swift_allocError();
  *(void *)(v54 + 8) = 0;
  *(void *)(v54 + 16) = 0;
  *(void *)uint64_t v54 = 4;
  *(unsigned char *)(v54 + 24) = 3;
  swift_retain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10006D144(v8, v7);
  swift_release();
  uint64_t v55 = v8;
  unint64_t v56 = v7;
  return sub_10006D144(v55, v56);
}

uint64_t sub_1002268D0@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v30 + 8) = 0;
    *(void *)(v30 + 16) = 0;
    *(void *)uint64_t v30 = 4;
    *(unsigned char *)(v30 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v3 = a1 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v4 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_32;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1002C0AD0(1684632949, 0xE400000000000000);
  if ((v6 & 1) == 0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
  if (v7 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0;
    *(void *)uint64_t v31 = 4;
    *(unsigned char *)(v31 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_33;
  }
  uint64_t v9 = *(void *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v8 = *(void *)((v7 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v9, v8);
  sub_10006D0EC(v9, v8);
  uint64_t v10 = sub_1002C0AD0(0x5555746E65726170, 0xEA00000000004449);
  if ((v11 & 1) == 0)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  unint64_t v12 = *(void *)(*(void *)(v4 + 56) + 8 * v10);
  if (v12 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v32 + 8) = 0;
    *(void *)(v32 + 16) = 0;
    *(void *)uint64_t v32 = 4;
    *(unsigned char *)(v32 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v9, v8);
    swift_release();
    uint64_t v33 = v9;
    unint64_t v34 = v8;
    return sub_10006D144(v33, v34);
  }
  if (!*(void *)(v4 + 16)) {
    goto LABEL_35;
  }
  uint64_t v14 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v13 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v14, v13);
  sub_10006D0EC(v14, v13);
  uint64_t v15 = sub_1002C0AD0(0x44495344746C61, 0xE700000000000000);
  if ((v16 & 1) == 0)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  uint64_t v17 = *(void *)(*(void *)(v4 + 56) + 8 * v15);
  unint64_t v47 = v17 & 0xE000000000000000;
  if ((v17 & 0xE000000000000000) != 0x2000000000000000)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v35 + 8) = 0;
    *(void *)(v35 + 16) = 0;
    *(void *)uint64_t v35 = 4;
    *(unsigned char *)(v35 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    int v36 = 0;
    goto LABEL_23;
  }
  uint64_t v44 = v14;
  if (!*(void *)(v4 + 16)) {
    goto LABEL_37;
  }
  uint64_t v18 = v17 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v20 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v19 = *(void *)(v18 + 24);
  sub_10006D0EC(v20, v19);
  uint64_t v46 = v20;
  unint64_t v43 = v19;
  sub_10006D0EC(v20, v19);
  uint64_t v21 = sub_1002C0AD0(0x416465776F6C6C61, 0xEA00000000004449);
  if ((v22 & 1) == 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  unint64_t v23 = *(void *)(*(void *)(v4 + 56) + 8 * v21);
  uint64_t v14 = v44;
  if (v23 >> 61 == 1)
  {
    unint64_t v41 = v13;
    uint64_t v24 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v25 = *(void *)((v23 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v39 = *(void *)(v4 + 16);
    sub_10006D0EC(v24, v25);
    uint64_t v42 = v24;
    unint64_t v45 = v25;
    sub_10006D0EC(v24, v25);
    if (v39)
    {
      uint64_t v26 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B8300);
      if (v27)
      {
        unint64_t v28 = *(void *)(*(void *)(v4 + 56) + 8 * v26);
        swift_retain();
        swift_bridgeObjectRelease();
        if (v28 >> 61 == 1)
        {
          uint64_t v48 = *(void *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v40 = *(void *)((v28 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          sub_10006D0EC(v48, v40);
          swift_release();
          swift_release();
          sub_10006D0EC(v9, v8);
          sub_10006D0EC(v44, v41);
          sub_10006D0EC(v46, v43);
          sub_10006D0EC(v42, v25);
          sub_10006D0EC(v48, v40);
          sub_10006D144(v42, v25);
          sub_10006D144(v46, v43);
          sub_10006D144(v44, v41);
          sub_10006D144(v9, v8);
          sub_10006D144(v9, v8);
          sub_10006D144(v44, v41);
          sub_10006D144(v46, v43);
          sub_10006D144(v42, v25);
          uint64_t result = sub_10006D144(v48, v40);
          *a2 = v9;
          a2[1] = v8;
          a2[2] = v44;
          a2[3] = v41;
          a2[4] = v46;
          a2[5] = v43;
          a2[6] = v42;
          a2[7] = v25;
          a2[8] = v48;
          a2[9] = v40;
          return result;
        }
        sub_10007BF50();
        swift_allocError();
        *(void *)(v38 + 8) = 0;
        *(void *)(v38 + 16) = 0;
        *(void *)uint64_t v38 = 4;
        *(unsigned char *)(v38 + 24) = 3;
        swift_willThrow();
        swift_release();
        sub_10006D144(v42, v25);
        uint64_t v3 = v46;
        a2 = (void *)v43;
        sub_10006D144(v46, v43);
        int v36 = 1;
        unint64_t v13 = v41;
        goto LABEL_23;
      }
    }
LABEL_39:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  sub_10007BF50();
  swift_allocError();
  *(void *)(v37 + 8) = 0;
  *(void *)(v37 + 16) = 0;
  *(void *)uint64_t v37 = 4;
  *(unsigned char *)(v37 + 24) = 3;
  swift_retain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v46;
  a2 = (void *)v43;
  sub_10006D144(v46, v43);
  int v36 = 0;
LABEL_23:
  sub_10006D144(v14, v13);
  sub_10006D144(v9, v8);
  swift_release();
  sub_10006D144(v9, v8);
  uint64_t result = sub_10006D144(v14, v13);
  if (v47 == 0x2000000000000000)
  {
    uint64_t result = sub_10006D144(v3, (unint64_t)a2);
    if ((v36 & 1) == 0) {
      return result;
    }
  }
  else if (!v36)
  {
    return result;
  }
  uint64_t v33 = v42;
  unint64_t v34 = v45;
  return sub_10006D144(v33, v34);
}

uint64_t *sub_100226F28(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  return a1;
}

uint64_t sub_10022701C()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t *sub_10022705C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  sub_10006D0EC(*a1, a1[1]);
  sub_10006D0EC(v2, v3);
  return a1;
}

void *sub_1002270A4(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[10];
  uint64_t v13 = a1[12];
  uint64_t v14 = a1[11];
  uint64_t v15 = a1[14];
  uint64_t v16 = a1[13];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  return a1;
}

void *sub_100227180(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[10];
  uint64_t v13 = a1[12];
  uint64_t v14 = a1[11];
  uint64_t v15 = a1[14];
  uint64_t v16 = a1[13];
  uint64_t v17 = a1[16];
  uint64_t v18 = a1[15];
  uint64_t v19 = a1[18];
  uint64_t v20 = a1[17];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  return a1;
}

void *sub_10022728C(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[10];
  uint64_t v13 = a1[12];
  uint64_t v14 = a1[11];
  a2(a1[1], a1[2]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  return a1;
}

uint64_t sub_100227350@<X0>(uint64_t a1@<X8>)
{
  sub_10006C51C(&qword_10045B6F0);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_100379170;
  strcpy((char *)(result + 32), "formatVersion");
  *(_WORD *)(result + 46) = -4864;
  *(void *)(result + 48) = 192;
  *(_WORD *)(result + 56) = 0;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(unsigned char *)(result + 80) = -64;
  *(void *)(result + 88) = &off_10040EFB0;
  *(void *)(result + 96) = 0x444955556B6C74;
  *(void *)(result + 104) = 0xE700000000000000;
  *(void *)(result + 112) = 212;
  *(_WORD *)(result + 120) = 0;
  *(void *)(result + 128) = 0;
  *(void *)(result + 136) = 0;
  *(unsigned char *)(result + 144) = -64;
  *(void *)(result + 152) = &off_10040F000;
  strcpy((char *)(result + 160), "clientMetadata");
  *(unsigned char *)(result + 175) = -18;
  *(void *)(result + 176) = 220;
  *(_WORD *)(result + 184) = 0;
  *(void *)(result + 192) = 0;
  *(void *)(result + 200) = 0;
  *(unsigned char *)(result + 208) = -64;
  *(void *)(result + 216) = _swiftEmptyArrayStorage;
  *(void *)(result + 224) = 0x5649736561;
  *(void *)(result + 232) = 0xE500000000000000;
  *(void *)(result + 240) = 216;
  *(_WORD *)(result + 248) = 0;
  *(void *)(result + 256) = 0;
  *(void *)(result + 264) = 0;
  *(unsigned char *)(result + 272) = -64;
  *(void *)(result + 280) = _swiftEmptyArrayStorage;
  *(void *)(result + 288) = 0xD000000000000013;
  *(void *)(result + 296) = 0x80000001003B8400;
  *(void *)(result + 304) = 221;
  *(_WORD *)(result + 312) = 0;
  *(void *)(result + 320) = 0;
  *(void *)(result + 328) = 0;
  *(unsigned char *)(result + 336) = -64;
  *(void *)(result + 344) = _swiftEmptyArrayStorage;
  *(void *)(result + 352) = 0xD000000000000011;
  *(void *)(result + 360) = 0x80000001003B8380;
  *(void *)(result + 368) = 218;
  *(_WORD *)(result + 376) = 0;
  *(void *)(result + 384) = 0;
  *(void *)(result + 392) = 0;
  *(unsigned char *)(result + 400) = -64;
  *(void *)(result + 408) = _swiftEmptyArrayStorage;
  *(void *)a1 = 230;
  *(_WORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = 1;
  *(unsigned char *)(a1 + 32) = 64;
  *(void *)(a1 + 40) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1002274F0@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v37 + 8) = 0;
    *(void *)(v37 + 16) = 0;
    *(void *)uint64_t v37 = 4;
    *(unsigned char *)(v37 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v3 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v3 + 16))
  {
    __break(1u);
    goto LABEL_38;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1002C0AD0(0x655674616D726F66, 0xED00006E6F697372);
  if ((v5 & 1) == 0)
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  unint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  if (v6 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v38 + 8) = 0;
    *(void *)(v38 + 16) = 0;
    *(void *)uint64_t v38 = 4;
    *(unsigned char *)(v38 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v7 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v8, v7);
  sub_10006D0EC(v8, v7);
  uint64_t v9 = sub_1002C0AD0(0x444955556B6C74, 0xE700000000000000);
  if ((v10 & 1) == 0)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  unint64_t v11 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
  if (v11 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v39 + 8) = 0;
    *(void *)(v39 + 16) = 0;
    *(void *)uint64_t v39 = 4;
    *(unsigned char *)(v39 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v8, v7);
    swift_release();
    uint64_t result = v8;
    unint64_t v40 = v7;
    return sub_10006D144(result, v40);
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = *(void *)((v11 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v12 = *(void *)((v11 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  sub_10006D0EC(v13, v12);
  unint64_t v57 = v12;
  sub_10006D0EC(v13, v12);
  uint64_t v14 = sub_1002C0AD0(0x654D746E65696C63, 0xEE00617461646174);
  if ((v15 & 1) == 0)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v16 = *(void *)(*(void *)(v3 + 56) + 8 * v14);
  unint64_t v17 = v16 & 0xE000000000000000;
  if ((v16 & 0xE000000000000000) != 0x2000000000000000)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v41 + 8) = 0;
    *(void *)(v41 + 16) = 0;
    *(void *)uint64_t v41 = 4;
    *(unsigned char *)(v41 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    int v42 = 0;
    int v43 = 0;
    goto LABEL_28;
  }
  if (!*(void *)(v3 + 16)) {
    goto LABEL_43;
  }
  uint64_t v18 = v13;
  uint64_t v19 = v16 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v21 = *(void *)((v16 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v20 = *(void *)(v19 + 24);
  sub_10006D0EC(v21, v20);
  unint64_t v55 = v20;
  uint64_t v56 = v21;
  sub_10006D0EC(v21, v20);
  uint64_t v22 = sub_1002C0AD0(0x5649736561, 0xE500000000000000);
  if ((v23 & 1) == 0)
  {
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  unint64_t v24 = *(void *)(*(void *)(v3 + 56) + 8 * v22);
  uint64_t v13 = v18;
  if (v24 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v44 + 8) = 0;
    *(void *)(v44 + 16) = 0;
    *(void *)uint64_t v44 = 4;
    *(unsigned char *)(v44 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v56, v55);
    int v42 = 0;
    int v43 = 0;
LABEL_27:
    unint64_t v17 = 0x2000000000000000;
    goto LABEL_28;
  }
  uint64_t v49 = v18;
  unint64_t v17 = 0x2000000000000000;
  if (!*(void *)(v3 + 16)) {
    goto LABEL_45;
  }
  uint64_t v25 = v24 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v27 = *(void *)((v24 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v26 = *(void *)(v25 + 24);
  sub_10006D0EC(v27, v26);
  unint64_t v50 = v26;
  uint64_t v51 = v27;
  sub_10006D0EC(v27, v26);
  uint64_t v28 = sub_1002C0AD0(0xD000000000000013, 0x80000001003B8400);
  if ((v29 & 1) == 0)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  unint64_t v30 = *(void *)(*(void *)(v3 + 56) + 8 * v28);
  uint64_t v13 = v49;
  if (v30 >> 61 == 1)
  {
    uint64_t v31 = *(void *)((v30 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v32 = *(void *)((v30 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    uint64_t v47 = *(void *)(v3 + 16);
    sub_10006D0EC(v31, v32);
    uint64_t v53 = v31;
    unint64_t v54 = v32;
    sub_10006D0EC(v31, v32);
    if (v47)
    {
      uint64_t v33 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B8380);
      if (v34)
      {
        unint64_t v35 = *(void *)(*(void *)(v3 + 56) + 8 * v33);
        swift_retain();
        swift_bridgeObjectRelease();
        if (v35 >> 61 == 1)
        {
          uint64_t v52 = *(void *)((v35 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v48 = *(void *)((v35 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          sub_10006D0EC(v52, v48);
          swift_release();
          swift_release();
          sub_10006D0EC(v8, v7);
          sub_10006D0EC(v49, v57);
          sub_10006D0EC(v56, v55);
          sub_10006D0EC(v51, v50);
          sub_10006D0EC(v53, v32);
          sub_10006D0EC(v52, v48);
          sub_10006D144(v53, v32);
          sub_10006D144(v51, v50);
          sub_10006D144(v56, v55);
          sub_10006D144(v49, v57);
          sub_10006D144(v8, v7);
          sub_10006D144(v8, v7);
          sub_10006D144(v49, v57);
          sub_10006D144(v56, v55);
          sub_10006D144(v51, v50);
          sub_10006D144(v53, v32);
          uint64_t result = sub_10006D144(v52, v48);
          *a2 = v8;
          a2[1] = v7;
          a2[2] = v49;
          a2[3] = v57;
          a2[4] = v56;
          a2[5] = v55;
          a2[6] = v51;
          a2[7] = v50;
          a2[8] = v53;
          a2[9] = v32;
          a2[10] = v52;
          a2[11] = v48;
          return result;
        }
        sub_10007BF50();
        swift_allocError();
        *(void *)(v46 + 8) = 0;
        *(void *)(v46 + 16) = 0;
        *(void *)uint64_t v46 = 4;
        *(unsigned char *)(v46 + 24) = 3;
        swift_willThrow();
        swift_release();
        sub_10006D144(v53, v32);
        sub_10006D144(v51, v50);
        sub_10006D144(v56, v55);
        int v42 = 1;
        int v43 = 1;
        goto LABEL_27;
      }
    }
LABEL_47:
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
    return result;
  }
  sub_10007BF50();
  swift_allocError();
  *(void *)(v45 + 8) = 0;
  *(void *)(v45 + 16) = 0;
  *(void *)uint64_t v45 = 4;
  *(unsigned char *)(v45 + 24) = 3;
  swift_retain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  sub_10006D144(v51, v50);
  sub_10006D144(v56, v55);
  int v43 = 0;
  int v42 = 1;
LABEL_28:
  sub_10006D144(v13, v57);
  sub_10006D144(v8, v7);
  swift_release();
  sub_10006D144(v8, v7);
  sub_10006D144(v13, v57);
  if (v17 == 0x2000000000000000)
  {
    sub_10006D144(v56, v55);
    if ((v42 & 1) == 0) {
      goto LABEL_30;
    }
  }
  else if (!v42)
  {
LABEL_30:
    uint64_t result = v53;
    unint64_t v40 = v54;
    if (!v43) {
      return result;
    }
    return sub_10006D144(result, v40);
  }
  sub_10006D144(v51, v50);
  uint64_t result = v53;
  unint64_t v40 = v54;
  if (v43) {
    return sub_10006D144(result, v40);
  }
  return result;
}

uint64_t _s16CommandCreateTLKVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10006D0EC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_10006D0EC(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t _s16CommandCreateTLKVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10006D0EC(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10006D144(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_10006D0EC(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10006D144(v10, v11);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t _s16CommandCreateTLKVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10006D144(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10006D144(v6, v7);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t _s16CommandCreateTLKVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s16CommandCreateTLKVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *_s16CommandCreateTLKVMa()
{
  return &_s16CommandCreateTLKVN;
}

ValueMetadata *_s14ImportTLKInputVMa()
{
  return &_s14ImportTLKInputVN;
}

uint64_t _s14ImportTLKInputVwxx_0(uint64_t *a1)
{
  sub_10006D144(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];

  return sub_1001861A8(v2, v3, v4, v5);
}

uint64_t *_s14ImportTLKInputVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10006D0EC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  uint64_t v9 = a2[4];
  unint64_t v8 = a2[5];
  sub_1001861FC(v6, v7, v9, v8);
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *_s14ImportTLKInputVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10006D0EC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10006D144(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  uint64_t v11 = a2[4];
  unint64_t v10 = a2[5];
  sub_1001861FC(v8, v9, v11, v10);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v11;
  a1[5] = v10;
  sub_1001861A8(v12, v13, v14, v15);
  return a1;
}

uint64_t *_s14ImportTLKInputVwta_0(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10006D144(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  long long v10 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v10;
  sub_1001861A8(v6, v7, v8, v9);
  return a1;
}

uint64_t _s14ImportTLKInputVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 15);
  }
  unsigned int v3 = (((*(void *)(a1 + 40) >> 58) >> 3) & 1 | (2
                                                               * ((*(void *)(a1 + 40) >> 58) & 4 | (*(void *)(a1 + 24) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s14ImportTLKInputVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 15;
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2)
    {
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (unint64_t)((-a2 >> 1) & 3) << 60;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = ((unint64_t)((-a2 >> 1) & 7 | (8 * (-a2 & 0xF))) << 58) & 0x3000000000000000;
    }
  }
  return result;
}

ValueMetadata *_s14ExportTLKInputVMa()
{
  return &_s14ExportTLKInputVN;
}

uint64_t _s13ListTLKOutputVwxx(uint64_t *a1)
{
  sub_10006D144(*a1, a1[1]);
  sub_10006D144(a1[2], a1[3]);
  sub_10006D144(a1[4], a1[5]);
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];

  return sub_10006D144(v2, v3);
}

uint64_t _s13ListTLKOutputVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10006D0EC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_10006D0EC(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_10006D0EC(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_10006D0EC(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t _s13ListTLKOutputVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10006D0EC(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10006D144(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_10006D0EC(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10006D144(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_10006D0EC(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_10006D144(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  sub_10006D0EC(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  sub_10006D144(v18, v19);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

__n128 _s13ListTLKOutputVwtk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s13ListTLKOutputVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10006D144(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10006D144(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10006D144(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10006D144(v10, v11);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t _s13ListTLKOutputVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s13ListTLKOutputVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *_s13ListTLKOutputVMa()
{
  return &_s13ListTLKOutputVN;
}

unint64_t sub_1002283A4()
{
  unint64_t result = qword_1004592D0;
  if (!qword_1004592D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004592D0);
  }
  return result;
}

uint64_t sub_1002283F8()
{
  sub_10016FC10(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t _s18HenosisAttestationOwxx(uint64_t a1)
{
  return sub_1001861A8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t *_s18HenosisAttestationOwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1001861FC(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *_s18HenosisAttestationOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1001861FC(*a2, v4, v5, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1001861A8(v7, v8, v9, v10);
  return a1;
}

uint64_t *_s18HenosisAttestationOwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1001861A8(v3, v5, v4, v6);
  return a1;
}

uint64_t _s18HenosisAttestationOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 15);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 58) >> 3) & 1 | (2
                                                               * ((*(void *)(a1 + 24) >> 58) & 4 | (*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s18HenosisAttestationOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 15;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((-a2 >> 1) & 3) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = ((unint64_t)((-a2 >> 1) & 7 | (8 * (-a2 & 0xF))) << 58) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_100228608(uint64_t a1)
{
  return (*(void *)(a1 + 24) >> 61) & 1;
}

uint64_t sub_100228614(uint64_t result)
{
  *(void *)(result + 24) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_100228624(uint64_t result, char a2)
{
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  return result;
}

ValueMetadata *_s18HenosisAttestationOMa()
{
  return &_s18HenosisAttestationON;
}

ValueMetadata *_s16CertificateChainVMa()
{
  return &_s16CertificateChainVN;
}

ValueMetadata *_s17AppletAttestationVMa()
{
  return &_s17AppletAttestationVN;
}

id sub_1002286F4()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SECReportManager()) init];
  qword_1004592D8 = (uint64_t)result;
  return result;
}

void sub_10022877C()
{
  uint64_t v1 = self;
  id v2 = [v1 sharedScheduler];
  uint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC10seserviced16SECReportManager_presentmentReportingTaskIdentifier];
  unint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC10seserviced16SECReportManager_presentmentReportingTaskIdentifier + 8];
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 taskRequestForIdentifier:v5];

  if (!v6)
  {
    id v11 = objc_allocWithZone((Class)BGRepeatingSystemTaskRequest);
    swift_bridgeObjectRetain();
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v13 = [v11 initWithIdentifier:v12];

    [v13 setRequiresNetworkConnectivity:1];
    [v13 setRequiresExternalPower:0];
    [v13 setInterval:86400.0];
    [v13 setMinDurationBetweenInstances:69120.0];
    [v13 setPriority:1];
    id v14 = [v1 sharedScheduler];
    NSString v15 = String._bridgeToObjectiveC()();
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v0;
    aBlock[4] = sub_10022A484;
    aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_10009A314;
    aBlock[3] = &unk_100416D68;
    unint64_t v17 = _Block_copy(aBlock);
    uint64_t v18 = v0;
    swift_release();
    unsigned int v19 = [v14 registerForTaskWithIdentifier:v15 usingQueue:0 launchHandler:v17];
    _Block_release(v17);

    if (v19)
    {
      id v20 = [v1 sharedScheduler];
      aBlock[0] = 0;
      unsigned int v21 = [v20 submitTaskRequest:v13 error:aBlock];

      if (v21)
      {
        id v22 = aBlock[0];
      }
      else
      {
        id v28 = aBlock[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_10008E55C(v29, (uint64_t)qword_1004686A8);
        unint64_t v30 = v18;
        swift_errorRetain();
        uint64_t v31 = v30;
        swift_errorRetain();
        unint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v32, v33))
        {

          swift_errorRelease();
          swift_errorRelease();
          swift_errorRelease();

          return;
        }
        uint64_t v34 = swift_slowAlloc();
        uint64_t v37 = v31;
        unint64_t v35 = (void *)swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 138412546;
        swift_errorRetain();
        uint64_t v36 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v35 = v36;
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v34 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_100290514(v4, v3, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error %@ encountered when submitting task with identifier %s, trying again next launch", (uint8_t *)v34, 0x16u);
        sub_10006C51C(&qword_100455620);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E55C(v23, (uint64_t)qword_1004686A8);
      unint64_t v24 = v18;
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 136315138;
        swift_bridgeObjectRetain();
        sub_100290514(v4, v3, (uint64_t *)aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Unable to register task with identifier %s", v27, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
    }
    return;
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E55C(v7, (uint64_t)qword_1004686A8);
  uint64_t v38 = v0;
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = (id)swift_slowAlloc();
    *(_DWORD *)unint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    sub_100290514(v4, v3, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Returning registered task with identifier %s already exists", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_100228FCC(void *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = a1;
  v8[3] = v1;
  v8[4] = ObjectType;
  aBlock[4] = sub_10022A500;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100416DB8;
  os_log_type_t v9 = _Block_copy(aBlock);
  id v10 = a1;
  id v11 = v1;
  swift_release();
  [v10 setExpirationHandler:v9];
  _Block_release(v9);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
  id v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v10;
  id v14 = v10;
  sub_10028E720((uint64_t)v7, (uint64_t)&unk_100459320, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100229194(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  id v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453810 != -1) {
    swift_once();
  }
  v19[0] = qword_100468930;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  aBlock[4] = sub_10022A638;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100416E30;
  NSString v15 = _Block_copy(aBlock);
  id v16 = a1;
  id v17 = a2;
  static DispatchQoS.unspecified.getter();
  v19[1] = _swiftEmptyArrayStorage;
  sub_100176E48((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return swift_release();
}

void sub_100229478(void *a1, void *a2)
{
  id v24 = 0;
  if ([a1 setTaskExpiredWithRetryAfter:&v24 error:60.0])
  {
    uint64_t v4 = qword_1004536D0;
    id v5 = v24;
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    uint64_t v7 = a2;
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      id v24 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = *(void *)&v7[OBJC_IVAR____TtC10seserviced16SECReportManager_presentmentReportingTaskIdentifier];
      unint64_t v12 = *(void *)&v7[OBJC_IVAR____TtC10seserviced16SECReportManager_presentmentReportingTaskIdentifier + 8];
      swift_bridgeObjectRetain();
      sub_100290514(v11, v12, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Task with identifier %s expired -- trying again after 60s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    id v13 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686A8);
    id v15 = a2;
    swift_errorRetain();
    id v16 = (char *)v15;
    swift_errorRetain();
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      id v24 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412546;
      swift_errorRetain();
      uint64_t v20 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v23 = v20;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v22 = *(void *)&v16[OBJC_IVAR____TtC10seserviced16SECReportManager_presentmentReportingTaskIdentifier];
      unint64_t v21 = *(void *)&v16[OBJC_IVAR____TtC10seserviced16SECReportManager_presentmentReportingTaskIdentifier + 8];
      swift_bridgeObjectRetain();
      sub_100290514(v22, v21, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error %@ encountered while retrying background task %s", (uint8_t *)v19, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    [a1 setTaskCompleted:v23];
    swift_errorRelease();
  }
}

uint64_t sub_1002298EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  return _swift_task_switch(sub_10022990C, 0, 0);
}

uint64_t sub_10022990C()
{
  type metadata accessor for SECNetworkController();
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  uint64_t v3 = type metadata accessor for SECNetworkConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_platformIdentifierLengthWithTag) = 19;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_jsblSequenceCounterLastByteIndex) = 38;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_platformIdTag) = 57120;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_jsblSeqCounterTag) = 57137;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_signatureTag) = 24375;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC10seserviced20SECNetworkController_rndDevTag) = 133;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100229A60;
  return sub_100280E60();
}

uint64_t sub_100229A60()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100229DC4;
  }
  else {
    uint64_t v2 = sub_100229B74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100229B74()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100229C40;
  return sub_100284420(v1);
}

uint64_t sub_100229C40()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100229FCC;
  }
  else {
    uint64_t v2 = sub_100229D54;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100229D54()
{
  [*(id *)(v0 + 24) setTaskCompleted];
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100229DC4()
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %@ encountered when sending daily presentment report, Trying tomorrow", v4, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  [*(id *)(v0 + 24) setTaskCompleted];
  swift_errorRelease();
  swift_release();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100229FCC()
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    id v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %@ encountered when sending daily presentment report, Trying tomorrow", v4, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  [*(id *)(v0 + 24) setTaskCompleted];
  swift_errorRelease();
  swift_release();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10022A1D4()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  sub_10007BEB4();
  static DispatchQoS.unspecified.getter();
  v10[1] = _swiftEmptyArrayStorage;
  sub_100176E48((unint64_t *)&qword_1004566E8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10006C51C(&qword_1004566F0);
  sub_100176E90((unint64_t *)&qword_1004566F8, &qword_1004566F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100468930 = result;
  return result;
}

uint64_t type metadata accessor for SECReportManager()
{
  return self;
}

uint64_t sub_10022A44C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10022A484(void *a1)
{
  return sub_100228FCC(a1);
}

uint64_t sub_10022A4A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10022A4B8()
{
  return swift_release();
}

uint64_t sub_10022A4C0()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10022A500()
{
  return sub_100229194(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10022A50C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10022A54C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011F7E8;
  v3[3] = v2;
  return _swift_task_switch(sub_10022990C, 0, 0);
}

uint64_t sub_10022A5F8()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10022A638()
{
  sub_100229478(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10022A650()
{
  *(void *)(v1 + 40) = v0;
  return _swift_task_switch(sub_10022A670, 0, 0);
}

uint64_t sub_10022A670()
{
  id v17 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[5];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v16 = v9;
    uint64_t v10 = UUID.uuidString.getter();
    v0[2] = sub_100290514(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Starting SECServerAdminSession %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v12 = v0[5] + OBJC_IVAR____TtC10seserviced15SECAdminSession_sessionManagementDelegate;
  swift_beginAccess();
  id v13 = *(void (**)(void, void))v12;
  if (*(void *)v12)
  {
    v13(v0[5], 0);
    sub_10008BECC((uint64_t)v13);
  }
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  swift_endAccess();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10022A8A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  return _swift_task_switch(sub_10022A8CC, 0, 0);
}

uint64_t sub_10022A8CC()
{
  uint64_t v18 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[5];
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[5];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v17 = v9;
    uint64_t v10 = UUID.uuidString.getter();
    v0[2] = sub_100290514(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Ending SECServerAdminSession %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v12 = (void (*)(uint64_t))v0[6];
  id v13 = (void *)v0[5];
  swift_beginAccess();
  sub_1001BED14(v13, 0, 1);
  uint64_t v14 = swift_endAccess();
  v12(v14);
  id v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_10022AAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  v7[13] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v7[14] = swift_task_alloc();
  return _swift_task_switch(sub_10022AC00, 0, 0);
}

uint64_t sub_10022AC00()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v0 + 168) = v3;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << v3;
  if (-(-1 << v3) < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    uint64_t v9 = (v6 - 1) & v6;
    goto LABEL_5;
  }
  unint64_t v17 = 63 - v5;
  if ((unint64_t)(63 - v5) <= 0x7F) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v2 + 64);
  if (!v18)
  {
    if (v17 >= 0xC0)
    {
      unint64_t v18 = *(void *)(v2 + 72);
      if (v18)
      {
        uint64_t v7 = 2;
        goto LABEL_12;
      }
      if (v17 >= 0x100)
      {
        unint64_t v18 = *(void *)(v2 + 80);
        if (v18)
        {
          uint64_t v7 = 3;
          goto LABEL_12;
        }
        if (v17 >= 0x140)
        {
          unint64_t v18 = *(void *)(v2 + 88);
          if (v18)
          {
            uint64_t v7 = 4;
            goto LABEL_12;
          }
          uint64_t v19 = 0;
          uint64_t v20 = v17 >> 6;
          if (v20 <= 5) {
            uint64_t v20 = 5;
          }
          uint64_t v21 = v20 - 5;
          while (v21 != v19)
          {
            unint64_t v18 = *(void *)(v2 + 96 + 8 * v19++);
            if (v18)
            {
              uint64_t v7 = v19 + 4;
              goto LABEL_12;
            }
          }
        }
      }
    }
LABEL_28:
    (*(void (**)(void, uint64_t, uint64_t, void))(v1 + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 80));
    goto LABEL_29;
  }
  uint64_t v7 = 1;
LABEL_12:
  uint64_t v9 = (v18 - 1) & v18;
  unint64_t v8 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_5:
  *(void *)(v0 + 120) = v7;
  *(void *)(v0 + 128) = v9;
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v11 = *(void *)(v0 + 80);
  unint64_t v12 = *(void *)(v2 + 48) + *(void *)(v1 + 72) * v8;
  id v13 = *(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16);
  *(void *)(v0 + 136) = v13;
  *(void *)(v0 + 144) = (v1 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v10, v12, v11);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v10, 1, v11) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 32))(*(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 80));
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10022AEE4;
    uint64_t v15 = *(void *)(v0 + 104);
    return sub_10022B7B0(v15);
  }
LABEL_29:
  uint64_t v22 = swift_release();
  (*(void (**)(uint64_t))(v0 + 64))(v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t sub_10022AEE4()
{
  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10022B2B8;
  }
  else {
    uint64_t v2 = sub_10022AFF8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10022AFF8()
{
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
  int64_t v2 = *(void *)(v0 + 120);
  unint64_t v3 = *(void *)(v0 + 128);
  if (v3)
  {
    uint64_t v4 = (v3 - 1) & v3;
    unint64_t v5 = __clz(__rbit64(v3)) | (v2 << 6);
    uint64_t v6 = *(void *)(v0 + 48);
    goto LABEL_3;
  }
  int64_t v14 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  int64_t v15 = (unint64_t)((1 << *(unsigned char *)(v0 + 168)) + 63) >> 6;
  uint64_t v6 = *(void *)(v0 + 48);
  if (v14 >= v15)
  {
LABEL_21:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 80));
    goto LABEL_22;
  }
  uint64_t v16 = v6 + 56;
  unint64_t v17 = *(void *)(v6 + 56 + 8 * v14);
  ++v2;
  if (!v17)
  {
    int64_t v2 = v14 + 1;
    if (v14 + 1 < v15)
    {
      unint64_t v17 = *(void *)(v16 + 8 * v2);
      if (v17) {
        goto LABEL_10;
      }
      int64_t v2 = v14 + 2;
      if (v14 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * v2);
        if (v17) {
          goto LABEL_10;
        }
        int64_t v18 = v14 + 3;
        if (v18 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (v17)
          {
            int64_t v2 = v18;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v2 = v18 + 1;
            if (__OFADD__(v18, 1)) {
              break;
            }
            if (v2 >= v15) {
              goto LABEL_21;
            }
            unint64_t v17 = *(void *)(v16 + 8 * v2);
            ++v18;
            if (v17) {
              goto LABEL_10;
            }
          }
LABEL_26:
          __break(1u);
          return result;
        }
      }
    }
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v4 = (v17 - 1) & v17;
  unint64_t v5 = __clz(__rbit64(v17)) + (v2 << 6);
LABEL_3:
  *(void *)(v0 + 120) = v2;
  *(void *)(v0 + 128) = v4;
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  unint64_t v10 = *(void *)(v6 + 48) + *(void *)(v9 + 72) * v5;
  uint64_t v11 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
  *(void *)(v0 + 136) = v11;
  *(void *)(v0 + 144) = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v11(v7, v10, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 32))(*(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 80));
    unint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_10022AEE4;
    uint64_t v13 = *(void *)(v0 + 104);
    return sub_10022B7B0(v13);
  }
LABEL_22:
  uint64_t v19 = swift_release();
  (*(void (**)(uint64_t))(v0 + 64))(v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_10022B2B8()
{
  uint64_t v44 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E55C(v5, (uint64_t)qword_1004686A8);
  v1(v3, v2, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 88);
  if (v8)
  {
    uint64_t v42 = *(void *)(v0 + 104);
    uint64_t v41 = *(void *)(v0 + 80);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    *(void *)(v13 + 4) = sub_100290514(v14, v15, &v43);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v16 = UUID.uuidString.getter();
    *(void *)(v13 + 14) = sub_100290514(v16, v17, &v43);
    swift_bridgeObjectRelease();
    int64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v41);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error %s encountered when deleting credential %s in Admin Session", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    uint64_t v19 = v42;
    uint64_t v20 = v41;
  }
  else
  {

    int64_t v18 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v18(v10, v12);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    uint64_t v19 = v9;
    uint64_t v20 = v12;
  }
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v18)(v19, v20);
  int64_t v22 = *(void *)(v0 + 120);
  unint64_t v23 = *(void *)(v0 + 128);
  if (v23)
  {
    uint64_t v24 = (v23 - 1) & v23;
    unint64_t v25 = __clz(__rbit64(v23)) | (v22 << 6);
    uint64_t v26 = *(void *)(v0 + 48);
    goto LABEL_8;
  }
  int64_t v34 = v22 + 1;
  if (__OFADD__(v22, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  int64_t v35 = (unint64_t)((1 << *(unsigned char *)(v0 + 168)) + 63) >> 6;
  uint64_t v26 = *(void *)(v0 + 48);
  if (v34 >= v35)
  {
LABEL_26:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 80));
    goto LABEL_27;
  }
  uint64_t v36 = v26 + 56;
  unint64_t v37 = *(void *)(v26 + 56 + 8 * v34);
  ++v22;
  if (!v37)
  {
    int64_t v22 = v34 + 1;
    if (v34 + 1 < v35)
    {
      unint64_t v37 = *(void *)(v36 + 8 * v22);
      if (v37) {
        goto LABEL_15;
      }
      int64_t v22 = v34 + 2;
      if (v34 + 2 < v35)
      {
        unint64_t v37 = *(void *)(v36 + 8 * v22);
        if (v37) {
          goto LABEL_15;
        }
        int64_t v38 = v34 + 3;
        if (v38 < v35)
        {
          unint64_t v37 = *(void *)(v36 + 8 * v38);
          if (v37)
          {
            int64_t v22 = v38;
            goto LABEL_15;
          }
          while (1)
          {
            int64_t v22 = v38 + 1;
            if (__OFADD__(v38, 1)) {
              break;
            }
            if (v22 >= v35) {
              goto LABEL_26;
            }
            unint64_t v37 = *(void *)(v36 + 8 * v22);
            ++v38;
            if (v37) {
              goto LABEL_15;
            }
          }
LABEL_31:
          __break(1u);
          return result;
        }
      }
    }
    goto LABEL_26;
  }
LABEL_15:
  uint64_t v24 = (v37 - 1) & v37;
  unint64_t v25 = __clz(__rbit64(v37)) + (v22 << 6);
LABEL_8:
  *(void *)(v0 + 120) = v22;
  *(void *)(v0 + 128) = v24;
  uint64_t v27 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 80);
  uint64_t v29 = *(void *)(v0 + 88);
  unint64_t v30 = *(void *)(v26 + 48) + *(void *)(v29 + 72) * v25;
  uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 16);
  *(void *)(v0 + 136) = v31;
  *(void *)(v0 + 144) = (v29 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v31(v27, v30, v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) != 1)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 88) + 32))(*(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 80));
    unint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v32;
    *unint64_t v32 = v0;
    v32[1] = sub_10022AEE4;
    uint64_t v33 = *(void *)(v0 + 104);
    return sub_10022B7B0(v33);
  }
LABEL_27:
  uint64_t v39 = swift_release();
  (*(void (**)(uint64_t))(v0 + 64))(v39);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

uint64_t sub_10022B7B0(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = *(void *)(v4 + 64);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_10022B888, 0, 0);
}

uint64_t sub_10022B888()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10022B954;
  uint64_t v2 = *(void *)(v0 + 104);
  return sub_1002EBB90(v2);
}

uint64_t sub_10022B954()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10022BA94, 0, 0);
  }
}

uint64_t sub_10022BA94()
{
  uint64_t v22 = v0;
  uint64_t v1 = *(void *)(v0 + 112) + OBJC_IVAR____TtC10seserviced15SECAdminSession_useNetworkShim;
  __int16 v2 = *(_WORD *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 32) = v3;
  *(_WORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 72) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 56) = v3;
  sub_100079AE8(v0 + 72);
  sub_100079AE8(v0 + 56);
  sub_1001AF4B4();
  char v5 = v4;
  sub_100079B14(v0 + 72);
  sub_100079B14(v0 + 56);
  if (v5)
  {
    if (qword_1004538A8 != -1) {
      swift_once();
    }
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10022BD88;
    uint64_t v7 = *(void *)(v0 + 104);
    return sub_10027F0A0(v7);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 104);
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    strcpy((char *)v21, "Admin session ");
    HIBYTE(v21[1]) = -18;
    v13._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._object = (void *)0x80000001003B85D0;
    v14._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v14);
    uint64_t v15 = v21[0];
    uint64_t v16 = v21[1];
    *(void *)(v0 + 176) = v21[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v18 = swift_allocObject();
    *(void *)(v0 + 184) = v18;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 32))(v18 + v17, v9, v10);
    uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10045AFA0
                                                                              + dword_10045AFA0);
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_10022C174;
    return v20((uint64_t)v20, v15, v16, (uint64_t)&unk_1004593C0, v18);
  }
}

uint64_t sub_10022BD88()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    long long v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10022BEC8, 0, 0);
  }
}

uint64_t sub_10022BEC8()
{
  unint64_t v25 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = (void *)v0[14];
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E55C(v6, (uint64_t)qword_1004686A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  id v7 = v5;
  BOOL v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[19];
  uint64_t v13 = v0[15];
  uint64_t v12 = v0[16];
  Swift::String v14 = (void *)v0[14];
  if (v10)
  {
    uint64_t v23 = v0[15];
    os_log_type_t type = v9;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v16 = UUID.uuidString.getter();
    v0[11] = sub_100290514(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v18 = UUID.uuidString.getter();
    v0[12] = sub_100290514(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v23);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "%s: Successfully deleted credential %s with SHIM", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10022C174()
{
  *(void *)(*(void *)v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10022C304;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10022C298;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10022C298()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10022C304()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10022C380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  void v3[6] = a3;
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_10022C46C, 0, 0);
}

uint64_t sub_10022C46C()
{
  uint64_t v30 = v0;
  *(void *)(v0 + 16) = 0;
  id v1 = [*(id *)(v0 + 40) listAppletsAndRefreshCache:0 outError:v0 + 16];
  uint64_t v2 = *(void **)(v0 + 16);
  if (!v1) {
    goto LABEL_6;
  }
  uint64_t v3 = v1;
  uint64_t v4 = *(void *)(v0 + 48);
  sub_10011FB68();
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v2;

  id v7 = (void *)swift_task_alloc();
  v7[2] = v4;
  unint64_t v8 = (unint64_t)sub_1002B9DD0(sub_10022D4AC, v7, v5);
  swift_task_dealloc();
  if (!(v8 >> 62))
  {
    if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_8:
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 48);
    uint64_t v16 = *(void *)(v0 + 56);
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E55C(v18, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v14, v17, v16);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v23 = *(void *)(v0 + 64);
    uint64_t v22 = *(void *)(v0 + 72);
    if (v21)
    {
      uint64_t v28 = *(void *)(v0 + 56);
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v25 = UUID.uuidString.getter();
      *(void *)(v0 + 32) = sub_100290514(v25, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v28);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Nothing to delete in the SE when deleting %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v23 + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
    }

    goto LABEL_14;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_8;
  }
LABEL_4:
  os_log_type_t v9 = *(void **)(v0 + 40);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 24) = 0;
  LODWORD(v9) = [v9 deleteApplets:isa queueServerConnection:1 outError:v0 + 24];

  uint64_t v2 = *(void **)(v0 + 24);
  if (!v9)
  {
LABEL_6:
    id v12 = v2;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_15;
  }
  id v11 = v2;
LABEL_14:
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
  return v13();
}

uint64_t sub_10022C834(void **a1, uint64_t a2)
{
  uint64_t v5 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v5 - 8, v6);
  unint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  uint64_t v18 = (char *)v27 - v17;
  __chkstk_darwin(v16, v19);
  BOOL v21 = (char *)v27 - v20;
  uint64_t v22 = *a1;
  sub_10012018C((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100132C18((uint64_t)v8);
    LOBYTE(v23) = 0;
  }
  else
  {
    v27[1] = v2;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v8, v9);
    unsigned int v23 = [v22 managedBySP];
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v24(v18, a2, v9);
    v24(v14, (uint64_t)v21, v9);
    if (v23) {
      LOBYTE(v23) = static UUID.== infix(_:_:)();
    }
    uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v14, v9);
    v25(v18, v9);
    v25(v21, v9);
  }
  return v23 & 1;
}

uint64_t sub_10022CBC8()
{
  return type metadata accessor for SECAdminSession();
}

uint64_t type metadata accessor for SECAdminSession()
{
  uint64_t result = qword_100459378;
  if (!qword_100459378) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10022CC1C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10022CCE0@<X0>(uint64_t a1@<X8>)
{
  return sub_10022CFD4(v1 + OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo, a1);
}

uint64_t sub_10022CCF4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10022CD04()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10011FE60;
  v2[5] = v0;
  return _swift_task_switch(sub_10022A670, 0, 0);
}

uint64_t sub_10022CDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v5 - 8, v6);
  unint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  v10[3] = 0;
  v10[4] = v2;
  v10[5] = a1;
  void v10[6] = a2;
  id v11 = v2;
  swift_retain();
  sub_10028E720((uint64_t)v8, (uint64_t)&unk_100456738, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_10022CEC0(char a1)
{
  *(void *)(v2 + 40) = v1;
  *(unsigned char *)(v2 + 48) = a1;
  return _swift_task_switch(sub_10022CEE4, 0, 0);
}

uint64_t sub_10022CEE4()
{
  uint64_t v1 = *(void **)(v0 + 40);
  char v2 = *(unsigned char *)(v0 + 48);
  swift_beginAccess();
  sub_1001BED14(v1, 0, v2);
  swift_endAccess();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10022CF8C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10022CFD4(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_10022D030(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v4[OBJC_IVAR____TtC10seserviced15SECAdminSession_remoteNotificationProxy] = 0;
  *(void *)&long long v33 = 0xD000000000000014;
  *((void *)&v33 + 1) = 0x80000001003B1620;
  *(void *)&long long v34 = 0xD00000000000001DLL;
  *((void *)&v34 + 1) = 0x80000001003B6A10;
  __int16 v35 = 256;
  uint64_t v14 = &v4[OBJC_IVAR____TtC10seserviced15SECAdminSession_useNetworkShim];
  long long v15 = v34;
  *(_OWORD *)uint64_t v14 = v33;
  *((_OWORD *)v14 + 1) = v15;
  *((_WORD *)v14 + 16) = 256;
  uint64_t v16 = &v4[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo];
  long long v17 = a1[1];
  *(_OWORD *)uint64_t v16 = *a1;
  *((_OWORD *)v16 + 1) = v17;
  *(_OWORD *)(v16 + 74) = *(_OWORD *)((char *)a1 + 74);
  long long v18 = a1[4];
  long long v19 = a1[2];
  *((_OWORD *)v16 + 3) = a1[3];
  *((_OWORD *)v16 + 4) = v18;
  *((_OWORD *)v16 + 2) = v19;
  uint64_t v20 = (uint64_t *)&v4[OBJC_IVAR____TtC10seserviced15SECAdminSession_sessionManagementDelegate];
  *uint64_t v20 = a2;
  v20[1] = a3;
  BOOL v21 = v4;
  sub_10008BEBC(a2);
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v21[OBJC_IVAR____TtC10seserviced15SECAdminSession_sessionIdentifier], v13, v9);
  sub_1001AF4B4();
  if (v22)
  {
    uint64_t v23 = type metadata accessor for SECNetworkShim();
    swift_allocObject();
    uint64_t v24 = sub_1002D6640();
    uint64_t v25 = &off_100419180;
  }
  else
  {
    uint64_t v23 = type metadata accessor for SECNetworkController();
    uint64_t v24 = swift_allocObject();
    uint64_t v26 = v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
    uint64_t v27 = type metadata accessor for SECNetworkConfiguration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
    *(void *)(v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_platformIdentifierLengthWithTag) = 19;
    *(void *)(v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_jsblSequenceCounterLastByteIndex) = 38;
    *(_DWORD *)(v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_platformIdTag) = 57120;
    *(_DWORD *)(v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_jsblSeqCounterTag) = 57137;
    *(_DWORD *)(v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_signatureTag) = 24375;
    *(_DWORD *)(v24 + OBJC_IVAR____TtC10seserviced20SECNetworkController_rndDevTag) = 133;
    uint64_t v25 = &off_1004180A0;
  }
  uint64_t v31 = v23;
  unint64_t v32 = v25;
  *(void *)&long long v30 = v24;
  sub_10010197C(&v30, (uint64_t)&v21[OBJC_IVAR____TtC10seserviced15SECAdminSession_networkController]);

  v29.receiver = v21;
  v29.super_class = ObjectType;
  return [super init];
}

uint64_t sub_10022D334()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10022D3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  unint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *unint64_t v8 = v3;
  v8[1] = sub_10011F7E8;
  return sub_10022C380(a1, a2, v7);
}

uint64_t sub_10022D4AC(void **a1)
{
  return sub_10022C834(a1, *(void *)(v1 + 16)) & 1;
}

void sub_10022D4CC()
{
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v115 = *(void *)(v117 - 8);
  uint64_t v1 = __chkstk_darwin(v117, v0);
  uint64_t v3 = &v109[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __chkstk_darwin(v1, v4);
  uint64_t v7 = &v109[-v6];
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = &v109[-v10];
  uint64_t v13 = __chkstk_darwin(v9, v12);
  long long v15 = &v109[-v14];
  uint64_t v17 = __chkstk_darwin(v13, v16);
  long long v19 = &v109[-v18];
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = &v109[-v22];
  uint64_t v25 = __chkstk_darwin(v21, v24);
  uint64_t v114 = &v109[-v26];
  uint64_t v28 = __chkstk_darwin(v25, v27);
  v113 = &v109[-v29];
  uint64_t v31 = __chkstk_darwin(v28, v30);
  long long v33 = &v109[-v32];
  __chkstk_darwin(v31, v34);
  uint64_t v36 = &v109[-v35];
  if (qword_1004536C8 != -1) {
    swift_once();
  }
  if (sub_1001204E0())
  {
    uint64_t v37 = type metadata accessor for SECDefaultAppReconciler();
    uint64_t v38 = v115;
    uint64_t v39 = v117;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v3, v116 + *(int *)(v37 + 20), v117);
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "reconcileDefaultContactlessApp: pending migration -- no op", v42, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v3, v39);
    return;
  }
  sub_1002A6088(v120);
  sub_1001212F4((uint64_t)v120, (uint64_t)v121);
  if (*((void *)&v121[0] + 1))
  {
    long long v123 = v121[0];
    v124[0] = v121[1];
    *(void *)&v124[1] = v122;
    if (sub_1000ACEA0())
    {
      long long v43 = v123;
      if (v123 == __PAIR128__(0x80000001003B5960, 0xD000000000000012))
      {
        uint64_t v44 = *(void *)&v124[0];
      }
      else
      {
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v44 = *(void *)&v124[0];
        if ((v58 & 1) == 0) {
          goto LABEL_24;
        }
      }
      if (v44 == 3)
      {
        swift_bridgeObjectRelease();
        long long v129 = *(_OWORD *)((char *)v124 + 8);
        sub_100079B14((uint64_t)&v129);
        uint64_t v59 = type metadata accessor for SECDefaultAppReconciler();
        uint64_t v60 = v115;
        uint64_t v61 = v117;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v15, v116 + *(int *)(v59 + 20), v117);
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v64 = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Passbook is default -- no op", v64, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(unsigned char *, uint64_t))(v60 + 8))(v15, v61);
        return;
      }
LABEL_24:
      if (v44 == 2)
      {
        unint64_t v65 = (unsigned char *)v43;
        long long v129 = 0u;
        long long v130 = 0u;
        char v131 = 1;
        if (sub_1002973F0(5, (uint64_t)&v129, 0, 0))
        {
          long long v126 = 0u;
          long long v127 = 0u;
          char v128 = 1;
          int v66 = sub_1002973F0(7, (uint64_t)&v126, 0, 0);
          goto LABEL_30;
        }
      }
      else
      {
        if (v44 != 1)
        {
          uint64_t v83 = type metadata accessor for SECDefaultAppReconciler();
          uint64_t v84 = v115;
          uint64_t v85 = v117;
          (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v19, v116 + *(int *)(v83 + 20), v117);
          long long v129 = *(_OWORD *)((char *)v124 + 8);
          swift_bridgeObjectRetain();
          sub_100079AE8((uint64_t)&v129);
          swift_bridgeObjectRetain();
          sub_100079AE8((uint64_t)&v129);
          swift_bridgeObjectRetain();
          sub_100079AE8((uint64_t)&v129);
          long long v86 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v86, v87))
          {
            uint64_t v88 = swift_slowAlloc();
            uint64_t v116 = swift_slowAlloc();
            *(void *)&long long v126 = v116;
            *(_DWORD *)uint64_t v88 = 136315394;
            swift_bridgeObjectRetain();
            *(void *)&long long v125 = sub_100290514(v43, *((unint64_t *)&v43 + 1), (uint64_t *)&v126);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            sub_100079B14((uint64_t)&v129);
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);
            *(_WORD *)(v88 + 12) = 2048;
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);
            *(void *)&long long v125 = v44;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);
            _os_log_impl((void *)&_mh_execute_header, v86, v87, "Unexpected default app info has no tcc string %s, domain %lu", (uint8_t *)v88, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v19, v117);
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v129);

            (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v19, v85);
          }
          return;
        }
        unint64_t v65 = (unsigned char *)v43;
        long long v129 = 0u;
        long long v130 = 0u;
        char v131 = 1;
        if (sub_1002973F0(3, (uint64_t)&v129, 0, 0))
        {
          long long v126 = 0u;
          long long v127 = 0u;
          char v128 = 1;
          int v66 = sub_1002973F0(0, (uint64_t)&v126, 0, 0);
LABEL_30:
          uint64_t v67 = v116;
          uint64_t v68 = v65;
          uint64_t v69 = TCCContext.checkTCCAccess(to:for:)();
          switch(v69)
          {
            case 0:
              uint64_t v89 = type metadata accessor for SECDefaultAppReconciler();
              long long v90 = v114;
              uint64_t v91 = v115;
              uint64_t v92 = v117;
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v114, v67 + *(int *)(v89 + 20), v117);
              long long v125 = *(_OWORD *)((char *)v124 + 8);
              swift_bridgeObjectRetain();
              sub_100079AE8((uint64_t)&v125);
              uint64_t v93 = Logger.logObject.getter();
              os_log_type_t v94 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v93, v94))
              {
                uint64_t v95 = (uint64_t)v68;
                id v96 = (uint8_t *)swift_slowAlloc();
                uint64_t v119 = swift_slowAlloc();
                *(_DWORD *)id v96 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v118 = sub_100290514(v95, *((unint64_t *)&v43 + 1), &v119);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                sub_100079B14((uint64_t)&v125);
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
                _os_log_impl((void *)&_mh_execute_header, v93, v94, "Default app %s still eligible to use HCE first time after restore -- no op", v96, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v114, v117);
              }
              else
              {
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);

                (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v90, v92);
              }
              return;
            case 2:
              uint64_t v114 = v65;
              uint64_t v70 = v67 + *(int *)(type metadata accessor for SECDefaultAppReconciler() + 20);
              uint64_t v71 = v115;
              unint64_t v111 = *(void (**)(unsigned char *))(v115 + 16);
              uint64_t v112 = v70;
              v111(v33);
              long long v125 = *(_OWORD *)((char *)v124 + 8);
              swift_bridgeObjectRetain();
              sub_100079AE8((uint64_t)&v125);
              swift_bridgeObjectRetain();
              sub_100079AE8((uint64_t)&v125);
              unint64_t v72 = Logger.logObject.getter();
              os_log_type_t v73 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v72, v73))
              {
                uint64_t v74 = (uint8_t *)swift_slowAlloc();
                uint64_t v75 = swift_slowAlloc();
                int v110 = v66;
                uint64_t v119 = v75;
                *(_DWORD *)uint64_t v74 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v118 = sub_100290514((uint64_t)v114, *((unint64_t *)&v43 + 1), &v119);
                uint64_t v71 = v115;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                sub_100079B14((uint64_t)&v125);
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
                _os_log_impl((void *)&_mh_execute_header, v72, v73, "Default app %s found after restore", v74, 0xCu);
                swift_arrayDestroy();
                LOBYTE(v66) = v110;
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
              }

              uint64_t v104 = *(void (**)(unsigned char *, uint64_t))(v71 + 8);
              uint64_t v105 = v117;
              v104(v33, v117);
              if ((v66 & 1) == 0)
              {
                ((void (*)(unsigned char *, uint64_t, uint64_t))v111)(v113, v112, v105);
                uint64_t v106 = Logger.logObject.getter();
                os_log_type_t v107 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v106, v107))
                {
                  unint64_t v108 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)unint64_t v108 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v106, v107, "Ineligible to use app after restore, attempt to fallback to counterpart service", v108, 2u);
                  swift_slowDealloc();
                }

                v104(v113, v105);
                sub_10022E55C((uint64_t)&v123, 1);
              }
              break;
            case 1:
              uint64_t v97 = type metadata accessor for SECDefaultAppReconciler();
              uint64_t v98 = v115;
              uint64_t v99 = v117;
              (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v36, v67 + *(int *)(v97 + 20), v117);
              long long v125 = *(_OWORD *)((char *)v124 + 8);
              swift_bridgeObjectRetain();
              sub_100079AE8((uint64_t)&v125);
              swift_bridgeObjectRetain();
              sub_100079AE8((uint64_t)&v125);
              id v100 = Logger.logObject.getter();
              os_log_type_t v101 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v100, v101))
              {
                uint64_t v102 = swift_slowAlloc();
                uint64_t v114 = v68;
                uint64_t v103 = (uint8_t *)v102;
                uint64_t v119 = swift_slowAlloc();
                *(_DWORD *)uint64_t v103 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v118 = sub_100290514((uint64_t)v114, *((unint64_t *)&v43 + 1), &v119);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                sub_100079B14((uint64_t)&v125);
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
                _os_log_impl((void *)&_mh_execute_header, v100, v101, "Default app %s TCC revoked, attempt to fallback to counterpart service", v103, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();

                (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v36, v117);
              }
              else
              {
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);
                swift_bridgeObjectRelease();
                sub_100079B14((uint64_t)&v125);

                (*(void (**)(unsigned char *, uint64_t))(v98 + 8))(v36, v99);
              }
              sub_10022E55C((uint64_t)&v123, 0);
              break;
            default:
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return;
          }
          swift_bridgeObjectRelease();
          uint64_t v82 = &v125;
LABEL_55:
          sub_100079B14((uint64_t)v82);
          return;
        }
      }
      uint64_t v76 = type metadata accessor for SECDefaultAppReconciler();
      uint64_t v77 = v115;
      uint64_t v78 = v117;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16))(v23, v116 + *(int *)(v76 + 20), v117);
      unint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v81 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Reconcile Default Contactless: Ineligible to use default app, attempt to fallback to counterpart service", v81, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(unsigned char *, uint64_t))(v77 + 8))(v23, v78);
      sub_10022E55C((uint64_t)&v123, 1);
      swift_bridgeObjectRelease();
      long long v126 = *(_OWORD *)((char *)v124 + 8);
      uint64_t v82 = &v126;
      goto LABEL_55;
    }
    long long v126 = v123;
    sub_100079B14((uint64_t)&v126);
    long long v129 = *(_OWORD *)((char *)v124 + 8);
    sub_100079B14((uint64_t)&v129);
  }
  unsigned __int8 v45 = sub_1002A6EB8();
  uint64_t v46 = type metadata accessor for SECDefaultAppReconciler();
  uint64_t v47 = v115;
  uint64_t v48 = v116 + *(int *)(v46 + 20);
  uint64_t v49 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 16);
  if (v45)
  {
    uint64_t v50 = v117;
    v49(v11, v48, v117);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Default app not installed -- configuring none as default", v53, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v11, v50);
    sub_1002A6BCC();
  }
  else
  {
    uint64_t v54 = v117;
    v49(v7, v48, v117);
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      unint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "No default app found in user default before first reconciliation after restore -- configuring passbook as default", v57, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(unsigned char *, uint64_t))(v47 + 8))(v7, v54);
    sub_1002A5444();
  }
}

void sub_10022E55C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v9, v12);
  long long v15 = (char *)&v50 - v14;
  uint64_t v17 = __chkstk_darwin(v13, v16);
  long long v19 = (char *)&v50 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23 != 2 && v23 != 1)
  {
    __break(1u);
    __break(1u);
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v24 = TCCContext.TCCService.fallbackTCCService.getter();
  if (v24 == 1)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    char v62 = 1;
    uint64_t v25 = 0;
    goto LABEL_7;
  }
  if (v24)
  {
LABEL_29:
    *(void *)&long long v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    *(void *)&long long v56 = 0xD000000000000023;
    *((void *)&v56 + 1) = 0x80000001003B8620;
    uint64_t v47 = *(void *)a1;
    uint64_t v48 = *(void **)(a1 + 8);
    swift_bridgeObjectRetain();
    v49._countAndFlagsBits = v47;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  long long v60 = 0u;
  long long v61 = 0u;
  char v62 = 1;
  uint64_t v25 = 7;
LABEL_7:
  if ((sub_1002973F0(v25, (uint64_t)&v60, 0, 0) & 1) == 0)
  {
    uint64_t v26 = v3 + *(int *)(type metadata accessor for SECDefaultAppReconciler() + 20);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    if ((a2 & 1) == 0)
    {
      v27(v11, v26, v6);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Default app ineligible for both services, configuring None as default due to TCC revocation", v30, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      sub_1002A6BCC();
      return;
    }
    v27(v15, v26, v6);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Default app ineligible for both services, configuring Passbook as default due to ineligibility", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
LABEL_19:
    sub_1002A5444();
    return;
  }
  TCCContext.TCCService.fallbackTCCService.getter();
  uint64_t v35 = *(void *)a1;
  unint64_t v34 = *(void *)(a1 + 8);
  uint64_t v36 = TCCContext.checkTCCAccess(to:for:)();
  if ((unint64_t)(v36 - 1) < 2)
  {
    uint64_t v37 = type metadata accessor for SECDefaultAppReconciler();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v22, v3 + *(int *)(v37 + 20), v6);
    long long v56 = *(_OWORD *)(a1 + 24);
    swift_bridgeObjectRetain();
    sub_100079AE8((uint64_t)&v56);
    swift_bridgeObjectRetain();
    sub_100079AE8((uint64_t)&v56);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v53 = v6;
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      *(_DWORD *)unint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_100290514(v35, v34, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_100079B14((uint64_t)&v56);
      swift_bridgeObjectRelease();
      sub_100079B14((uint64_t)&v56);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Default app %s TCC denied/unknown for fallback TCC, overwriting passbook as default due to ineligibility", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v53);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100079B14((uint64_t)&v56);
      swift_bridgeObjectRelease();
      sub_100079B14((uint64_t)&v56);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
    }
    goto LABEL_19;
  }
  if (v36)
  {
LABEL_30:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  uint64_t v41 = type metadata accessor for SECDefaultAppReconciler();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v19, v3 + *(int *)(v41 + 20), v6);
  uint64_t v42 = *(void *)(a1 + 32);
  uint64_t v52 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  long long v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    unsigned __int8 v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(void *)&long long v56 = v51;
    uint64_t v53 = v6;
    *(_DWORD *)unsigned __int8 v45 = 136315138;
    uint64_t v50 = v45 + 4;
    swift_bridgeObjectRetain();
    uint64_t v55 = sub_100290514(v35, v34, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Default app %s is granted for fallback TCC Service, pivoting", v45, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v53);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v19, v6);
  }
  if (v23 == 1) {
    uint64_t v46 = 2;
  }
  else {
    uint64_t v46 = 1;
  }
  *(void *)&long long v56 = v35;
  *((void *)&v56 + 1) = v34;
  uint64_t v57 = v46;
  uint64_t v58 = v52;
  uint64_t v59 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1002A68E0((uint64_t)&v56);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SECDefaultAppReconciler()
{
  uint64_t result = qword_100459420;
  if (!qword_100459420) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void **sub_10022ED64(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v4;
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_10022EE44(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void **sub_10022EEBC(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  id v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

void **sub_10022EF50(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  id v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

void *sub_10022EFE0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **sub_10022F05C(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Logger();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10022F0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10022F0FC);
}

uint64_t sub_10022F0FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10022F1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10022F1C0);
}

void *sub_10022F1C0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    void *result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10022F268()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_10022F304(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (!v1) {
    return (unint64_t)v2;
  }
  uint64_t v3 = a1;
  sub_1002CFA20(0, v1, 0);
  uint64_t v2 = _swiftEmptyArrayStorage;
  unint64_t result = sub_10019CFB8(v3);
  uint64_t v6 = 0;
  uint64_t v7 = v3 + 64;
  uint64_t v37 = v3 + 80;
  uint64_t v36 = v3;
  int64_t v33 = v1;
  int v34 = v5;
  uint64_t v35 = v3 + 64;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << *(unsigned char *)(v3 + 32))
  {
    unint64_t v10 = result >> 6;
    if ((*(void *)(v7 + 8 * (result >> 6)) & (1 << result)) == 0) {
      goto LABEL_24;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_25;
    }
    uint64_t v38 = v6;
    uint64_t v39 = 1 << result;
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * result);
    uint64_t v13 = *v11;
    unint64_t v12 = v11[1];
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 56) + 24 * result);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v40 = *v14;
    int64_t v41 = result;
    sub_10006D0EC(v13, v12);
    sub_10006D0EC(v16, v15);
    sub_10006D0EC(v13, v12);
    sub_10006D0EC(v16, v15);
    sub_10006D144(v13, v12);
    sub_10006D144(v16, v15);
    sub_10006C51C(&qword_1004587F0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003782A0;
    *(void *)(inited + 32) = 0xD000000000000021;
    *(void *)(inited + 40) = 0x80000001003B86B0;
    sub_10023CDF4(v13, v12);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v42 = v2;
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    *(void *)(inited + 48) = v18;
    *(void *)(inited + 56) = v20;
    *(void *)(inited + 64) = 0x44492079654BLL;
    *(void *)(inited + 72) = 0xE600000000000000;
    sub_10023CDF4(v40, v15);
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    *(void *)(inited + 80) = v21;
    *(void *)(inited + 88) = v23;
    uint64_t v2 = v42;
    unint64_t v24 = sub_1001DB39C(inited);
    sub_10006D144(v13, v12);
    unint64_t result = sub_10006D144(v40, v15);
    unint64_t v26 = v42[2];
    unint64_t v25 = v42[3];
    if (v26 >= v25 >> 1)
    {
      unint64_t result = sub_1002CFA20(v25 > 1, v26 + 1, 1);
      uint64_t v2 = v42;
    }
    v2[2] = v26 + 1;
    v2[v26 + 4] = v24;
    uint64_t v3 = v36;
    int64_t v8 = 1 << *(unsigned char *)(v36 + 32);
    if (v41 >= v8) {
      goto LABEL_26;
    }
    uint64_t v7 = v35;
    uint64_t v27 = *(void *)(v35 + 8 * v10);
    if ((v27 & v39) == 0) {
      goto LABEL_27;
    }
    int v5 = v34;
    if (*(_DWORD *)(v36 + 36) != v34) {
      goto LABEL_28;
    }
    unint64_t v28 = v27 & (-2 << (v41 & 0x3F));
    if (v28)
    {
      int64_t v8 = __clz(__rbit64(v28)) | v41 & 0xFFFFFFFFFFFFFFC0;
      int64_t v29 = v33;
      uint64_t v9 = v38;
    }
    else
    {
      unint64_t v30 = v10 + 1;
      unint64_t v31 = (unint64_t)(v8 + 63) >> 6;
      int64_t v29 = v33;
      if (v10 + 1 < v31)
      {
        unint64_t v32 = *(void *)(v35 + 8 * v30);
        if (v32)
        {
LABEL_3:
          int64_t v8 = __clz(__rbit64(v32)) + (v30 << 6);
        }
        else
        {
          while (v31 - 2 != v10)
          {
            unint64_t v32 = *(void *)(v37 + 8 * v10++);
            if (v32)
            {
              unint64_t v30 = v10 + 1;
              goto LABEL_3;
            }
          }
        }
      }
      uint64_t v9 = v38;
    }
    uint64_t v6 = v9 + 1;
    unint64_t result = v8;
    if (v6 == v29) {
      return (unint64_t)v2;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void sub_10022F6D0()
{
  int64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (void *)((char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once();
LABEL_9:
    uint64_t v13 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
    if (v14 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      sub_10019AC80(&off_10040E2E8, v13, v14);
      sub_100075868(v15, v16);
      v27[3] = v2;
      v27[4] = &off_100416ED8;
      v27[0] = v1;
      swift_retain();
      uint64_t v17 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
      if (v18 >> 60 != 15)
      {
        uint64_t v19 = v17;
        unint64_t v20 = v18;
        sub_100197EB4((uint64_t)v27, v17, v18);
        sub_100075868(v19, v20);
        sub_10007594C((uint64_t)v27);
        *((unsigned char *)v1 + 16) = 1;
        uint64_t v21 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
        if (v22 >> 60 != 15)
        {
          uint64_t v23 = v21;
          unint64_t v24 = v22;
          unint64_t v25 = sub_10019AF40(v21, v22);
          sub_100075868(v23, v24);
          sub_10023191C(v25);
          swift_release();
          return;
        }
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    return;
  }
  if ((v1[2] & 1) == 0)
  {
    if (qword_100453738 == -1) {
      goto LABEL_9;
    }
    goto LABEL_14;
  }
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "LyonExpress is already running", v12, 2u);
    swift_slowDealloc();
  }
}

uint8_t *sub_10022FA44(uint64_t a1, unint64_t a2)
{
  uint64_t v66 = a1;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = v8;
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v4 + 8);
  v13(v7, v3);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_45:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v68 + 16) != 1)
  {
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "LyonExpress is not running", v37, 2u);
      swift_slowDealloc();
    }

    return (uint8_t *)_swiftEmptyArrayStorage;
  }
  if (qword_100453738 != -1) {
    goto LABEL_45;
  }
LABEL_6:
  unint64_t v65 = a2;
  uint64_t v63 = qword_1004687C0;
  unint64_t result = (uint8_t *)sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
  uint64_t v64 = result;
  if (v15 >> 60 != 15)
  {
    unint64_t v16 = v15;
    uint64_t v17 = (void *)qword_100468A38;
    *uint64_t v7 = qword_100468A38;
    v10(v7, v9, v3);
    unint64_t v18 = v17;
    uint64_t v19 = _dispatchPreconditionTest(_:)();
    v13(v7, v3);
    if (v19)
    {
      uint64_t v20 = *(void *)(v63 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      swift_bridgeObjectRetain();
      unint64_t v22 = v65;
      uint64_t v21 = v66;
      sub_10006D0EC(v66, v65);
      uint64_t v23 = v64;
      sub_1000758F4((uint64_t)v64, v16);
      unint64_t v24 = (void (*)(void *, uint64_t))v67;
      unint64_t v25 = sub_100234E3C(v20, v21, v22, (uint64_t)v23, v16);
      uint64_t v13 = v24;
      sub_100075868((uint64_t)v23, v16);
      sub_10006D144(v21, v22);
      swift_bridgeObjectRelease();
      if (v25)
      {
        uint64_t v19 = v25[6];
        swift_bridgeObjectRetain();
        swift_release();
        sub_100075868((uint64_t)v23, v16);
        if (v19)
        {
          os_log_type_t v73 = _swiftEmptyArrayStorage;
          if (!*(void *)(v19 + 16)
            || (uint64_t v26 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B0CF0), (v27 & 1) == 0)
            || (sub_1000AA580(*(void *)(v19 + 56) + 32 * v26, (uint64_t)&v71), (swift_dynamicCast() & 1) == 0)
            || (uint64_t v28 = sub_10011FE64(v69, v70), v29 >> 60 == 15))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            unint64_t v30 = Logger.logObject.getter();
            os_log_type_t v31 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v30, v31))
            {
              unint64_t v32 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v71 = swift_slowAlloc();
              *(_DWORD *)unint64_t v32 = 136315138;
              uint64_t v68 = (uint64_t)(v32 + 4);
              swift_bridgeObjectRetain();
              uint64_t v17 = (void *)Dictionary.description.getter();
              unint64_t v34 = v33;
              swift_bridgeObjectRelease();
              uint64_t v69 = sub_100290514((uint64_t)v17, v34, (uint64_t *)&v71);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v30, v31, "Cannot get data representation of primary reader identifier in %s", v32, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            goto LABEL_25;
          }
          unint64_t v16 = v28;
          uint64_t v7 = (void *)v29;
          sub_10006D0EC(v28, v29);
          sub_10023CC58(8, v16, (unint64_t)v7, (uint64_t *)&v71);
          long long v67 = v71;
          uint64_t v17 = _swiftEmptyArrayStorage;
          if (swift_isUniquelyReferenced_nonNull_native())
          {
LABEL_28:
            unint64_t v46 = v17[2];
            unint64_t v45 = v17[3];
            if (v46 >= v45 >> 1) {
              uint64_t v17 = sub_100258EB0((char *)(v45 > 1), v46 + 1, 1, (char *)v17);
            }
            long long v47 = v67;
            void v17[2] = v46 + 1;
            *(_OWORD *)&v17[2 * v46 + 4] = v47;
            os_log_type_t v73 = v17;
            if (*(void *)(v19 + 16))
            {
              uint64_t v48 = sub_1002C0AD0(0xD00000000000001BLL, 0x80000001003B86E0);
              uint64_t v49 = v66;
              if (v50)
              {
                sub_1000AA580(*(void *)(v19 + 56) + 32 * v48, (uint64_t)&v71);
              }
              else
              {
                long long v71 = 0u;
                long long v72 = 0u;
              }
            }
            else
            {
              long long v71 = 0u;
              long long v72 = 0u;
              uint64_t v49 = v66;
            }
            swift_bridgeObjectRelease();
            if (*((void *)&v72 + 1))
            {
              sub_10006C51C(&qword_1004555E0);
              if (swift_dynamicCast())
              {
                uint64_t v51 = v69;
                swift_retain();
                uint64_t v52 = sub_100235A58(v51);
                if (v13)
                {
                  swift_release();
                  sub_100075868(v16, (unint64_t)v7);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v62 = (uint64_t)v52;
                  swift_bridgeObjectRelease();
                  swift_release();
                  sub_1002308A8(v62);
                  sub_100075868(v16, (unint64_t)v7);
                  return (uint8_t *)v73;
                }
                return (uint8_t *)v17;
              }
            }
            else
            {
              sub_1000AE778((uint64_t)&v71);
            }
            unint64_t v53 = v65;
            sub_10006D0EC(v49, v65);
            sub_10006D0EC(v49, v53);
            uint64_t v54 = Logger.logObject.getter();
            os_log_type_t v55 = static os_log_type_t.debug.getter();
            int v56 = v55;
            if (os_log_type_enabled(v54, v55))
            {
              LODWORD(v68) = v56;
              uint64_t v57 = (uint8_t *)swift_slowAlloc();
              uint64_t v66 = swift_slowAlloc();
              *(void *)&long long v71 = v66;
              *(_DWORD *)uint64_t v57 = 136315138;
              uint64_t v63 = (uint64_t)(v57 + 4);
              uint64_t v64 = v57;
              uint64_t v58 = sub_10023CDF4(v49, v53);
              *(void *)&long long v67 = v16;
              uint64_t v69 = (uint64_t)v58;
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_1000756D0();
              uint64_t v59 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v61 = v60;
              swift_bridgeObjectRelease();
              uint64_t v69 = sub_100290514(v59, v61, (uint64_t *)&v71);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006D144(v49, v53);
              sub_10006D144(v49, v53);
              _os_log_impl((void *)&_mh_execute_header, v54, (os_log_type_t)v68, "No aux keys found for endpoint %s", v64, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
              sub_100075868(v67, (unint64_t)v7);

              return (uint8_t *)v73;
            }
            else
            {
              sub_100075868(v16, (unint64_t)v7);

              sub_10006D144(v49, v53);
              sub_10006D144(v49, v53);
            }
            return (uint8_t *)v17;
          }
LABEL_47:
          uint64_t v17 = sub_100258EB0(0, v17[2] + 1, 1, (char *)v17);
          goto LABEL_28;
        }
      }
      else
      {
        sub_100075868((uint64_t)v23, v16);
      }
      sub_10006D0EC(v21, v22);
      sub_10006D0EC(v21, v22);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        *(void *)&long long v71 = v68;
        *(_DWORD *)uint64_t v40 = 136315138;
        uint64_t v17 = v40 + 12;
        *(void *)&long long v67 = v40 + 4;
        uint64_t v69 = (uint64_t)sub_10023CDF4(v21, v22);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v43 = v42;
        swift_bridgeObjectRelease();
        uint64_t v69 = sub_100290514(v41, v43, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v21, v22);
        sub_10006D144(v21, v22);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Configured items missing for key %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144(v21, v22);
        sub_10006D144(v21, v22);
      }
LABEL_25:
      sub_10007567C();
      swift_allocError();
      *os_log_type_t v44 = 0;
      swift_willThrow();
      return (uint8_t *)v17;
    }
    __break(1u);
    goto LABEL_47;
  }
  __break(1u);
  return result;
}

uint64_t sub_100230530(uint64_t a1, unint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (unint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  uint64_t v10 = enum case for DispatchPredicate.onQueue(_:);
  id v11 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 104);
  v11(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v12 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v5 + 8);
  v13(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_6;
  }
  if (*(unsigned char *)(v2 + 16) != 1)
  {
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "LyonExpress is not running", v24, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  unint64_t v29 = a2;
  if (qword_100453738 != -1) {
    goto LABEL_19;
  }
LABEL_6:
  uint64_t v30 = qword_1004687C0;
  uint64_t result = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
  if (v15 >> 60 != 15)
  {
    uint64_t v16 = result;
    unint64_t v17 = v15;
    uint64_t v18 = qword_100468A38;
    *uint64_t v8 = qword_100468A38;
    v11(v8, v10, v4);
    id v19 = (id)v18;
    LOBYTE(v18) = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(void *, uint64_t))v13)(v8, v4);
    if (v18)
    {
      uint64_t v20 = v30;
      if (*(unsigned char *)(v30 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) == 1)
      {
        sub_100075868(v16, v17);
        return 1;
      }
      uint64_t v25 = v31;
      unint64_t v26 = v29;
      sub_10006D0EC(v31, v29);
      sub_1000758F4(v16, v17);
      uint64_t v27 = swift_bridgeObjectRetain();
      char v28 = sub_100235E7C(v27, v25, v26, v16, v17);
      sub_100075868(v16, v17);
      sub_10006D144(v25, v26);
      swift_bridgeObjectRelease();
      if (v28)
      {
        uint64_t v21 = *(unsigned __int8 *)(v20 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
        sub_100075868(v16, v17);
        return v21;
      }
      sub_100075868(v16, v17);
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002308A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100258EB0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[16 * v8 + 32];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *int64_t v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002309FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100259B60(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100230B58(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    if (*(unsigned char *)(v3 + 16) == 1)
    {
      int64_t v14 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints);
      swift_beginAccess();
      uint64_t v15 = *v14;
      if (*(void *)(v15 + 16))
      {
        sub_10006D0EC(a1, a2);
        uint64_t v16 = sub_1002C0BAC(a1, a2);
        if (v17)
        {
          uint64_t v18 = (uint64_t *)(*(void *)(v15 + 56) + 24 * v16);
          uint64_t v19 = *v18;
          unint64_t v20 = v18[1];
          swift_endAccess();
          sub_10006D0EC(v19, v20);
          sub_10006D144(a1, a2);
          return v19;
        }
        sub_10006D144(a1, a2);
      }
      swift_endAccess();
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(a1, a2);
      unint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v26 = (uint8_t *)swift_slowAlloc();
        v32[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v26 = 136315138;
        v30[1] = v26 + 4;
        uint64_t v31 = (uint64_t)sub_10023CDF4(a1, a2);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v29 = v28;
        swift_bridgeObjectRelease();
        uint64_t v31 = sub_100290514(v27, v29, v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalid pass %s not an active express endpoint", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
      }
    }
    else
    {
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "LyonExpress is not running", v23, 2u);
        swift_slowDealloc();
      }
    }
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_100230F84(uint64_t a1, unint64_t a2)
{
  uint64_t v47 = a1;
  unint64_t v48 = a2;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = (void *)qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = v8;
  char v12 = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(void *, uint64_t))(v4 + 8);
  v13(v7, v3);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_6;
  }
  if (v2[16] != 1)
  {
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "LyonExpress is not running", v31, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  unint64_t v46 = v2;
  if (qword_100453738 != -1) {
    goto LABEL_30;
  }
LABEL_6:
  uint64_t v14 = qword_1004687C0;
  uint64_t result = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
  uint64_t v45 = result;
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = v16;
    uint64_t v18 = (void *)qword_100468A38;
    *uint64_t v7 = qword_100468A38;
    v10(v7, v9, v3);
    id v19 = v18;
    char v20 = _dispatchPreconditionTest(_:)();
    uint64_t result = ((uint64_t (*)(void *, uint64_t))v13)(v7, v3);
    if (v20)
    {
      uint64_t v21 = *(void *)(v14 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      swift_bridgeObjectRetain();
      uint64_t v23 = v47;
      unint64_t v22 = v48;
      sub_10006D0EC(v47, v48);
      uint64_t v24 = v45;
      sub_1000758F4(v45, v17);
      os_log_type_t v25 = sub_100234E3C(v21, v23, v22, v24, v17);
      sub_100075868(v24, v17);
      sub_10006D144(v23, v22);
      swift_bridgeObjectRelease();
      if (v25)
      {
        uint64_t v26 = v25[6];
        swift_bridgeObjectRetain();
        swift_release();
        sub_100075868(v24, v17);
        if (v26)
        {
          if (*(void *)(v26 + 16)
            && (uint64_t v27 = sub_1002C0AD0(0xD000000000000017, 0x80000001003B0CD0), (v28 & 1) != 0))
          {
            sub_1000AA580(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v49);
          }
          else
          {
            long long v49 = 0u;
            long long v50 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v50 + 1))
          {
            sub_10006C51C(&qword_100459528);
            if (swift_dynamicCast()) {
              return v51;
            }
          }
          else
          {
            sub_1000AE778((uint64_t)&v49);
          }
          sub_10006D0EC(v23, v22);
          sub_10006D0EC(v23, v22);
          unint64_t v32 = Logger.logObject.getter();
          os_log_type_t v33 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v32, v33))
          {
            unint64_t v34 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v49 = swift_slowAlloc();
            *(_DWORD *)unint64_t v34 = 136315138;
            unint64_t v46 = v34 + 4;
            uint64_t v51 = (uint64_t)sub_10023CDF4(v23, v22);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            uint64_t v40 = v23;
            sub_1000756D0();
            uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v43 = v42;
            swift_bridgeObjectRelease();
            uint64_t v51 = sub_100290514(v41, v43, (uint64_t *)&v49);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v40, v22);
            sub_10006D144(v40, v22);
            os_log_type_t v39 = "GRKs missing for %s";
            goto LABEL_26;
          }
          goto LABEL_27;
        }
      }
      else
      {
        sub_100075868(v24, v17);
      }
      sub_10006D0EC(v23, v22);
      sub_10006D0EC(v23, v22);
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        unint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(void *)&long long v49 = swift_slowAlloc();
        *(_DWORD *)unint64_t v34 = 136315138;
        unint64_t v46 = v34 + 4;
        uint64_t v51 = (uint64_t)sub_10023CDF4(v23, v22);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        uint64_t v35 = v23;
        sub_1000756D0();
        uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v38 = v37;
        swift_bridgeObjectRelease();
        uint64_t v51 = sub_100290514(v36, v38, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v35, v22);
        sub_10006D144(v35, v22);
        os_log_type_t v39 = "Configured items missing for key %s";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v32, v33, v39, v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return 0;
      }
LABEL_27:

      sub_10006D144(v23, v22);
      sub_10006D144(v23, v22);
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100231654()
{
  type metadata accessor for LyonExpress();
  swift_allocObject();
  uint64_t result = sub_100231694();
  qword_100468940 = result;
  return result;
}

uint64_t sub_100231694()
{
  *(unsigned char *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  uint64_t v1 = OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints;
  *(void *)(v0 + v1) = sub_1001DB4C0((uint64_t)_swiftEmptyArrayStorage);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v4[4] = sub_100236A78;
  v4[5] = v0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  _OWORD v4[2] = sub_1002B9D80;
  v4[3] = &unk_100416EE8;
  uint64_t v2 = _Block_copy(v4);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v2);
  return v0;
}

_DWORD *sub_1002317E4()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  unint64_t v1 = sub_10022F304(v0);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_10006C51C((uint64_t *)&unk_100455780);
  *(void *)&long long v7 = v1;
  sub_1000761D0(&v7, v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v6, 0xD000000000000016, 0x80000001003B8670, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_1000190DC((uint64_t)"lyonexpress.state", (uint64_t)isa);

  return v4;
}

void sub_10023191C(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(char **)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t)v206 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    goto LABEL_271;
  }
LABEL_2:
  uint64_t v7 = qword_100468A38;
  *(void *)uint64_t v6 = qword_100468A38;
  uint64_t v8 = (void (*)(void))*((void *)v3 + 13);
  unsigned int v228 = enum case for DispatchPredicate.onQueue(_:);
  v227 = v3 + 104;
  v226 = (void (*)(uint64_t, void, uint64_t))v8;
  v8(v6);
  id v9 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  id v11 = (void (*)(uint64_t, uint64_t))*((void *)v3 + 1);
  uint64_t v10 = v3 + 8;
  v225 = v11;
  v11(v6, v2);
  if (v7)
  {
    uint64_t v12 = v209 + OBJC_IVAR____TtC10seserviced11LyonExpress_logger;
    if (*(unsigned char *)(v209 + 16) != 1)
    {
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "LyonExpress is not running", v21, 2u);
        swift_slowDealloc();
      }

      return;
    }
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    v217 = v10;
    uint64_t v229 = v12;
    if (v15)
    {
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v261 = swift_slowAlloc();
      *(_DWORD *)unint64_t v16 = 136315138;
      uint64_t v17 = sub_10019B5E0();
      v260 = (__objc2_class **)sub_100290514(v17, v18, &v261);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    if (qword_100453910 == -1) {
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
LABEL_273:
    __break(1u);
LABEL_274:
    __break(1u);
LABEL_275:
    __break(1u);
  }
  uint64_t v22 = swift_once();
LABEL_11:
  uint64_t v24 = __chkstk_darwin(v22, v23);
  v206[-4] = sub_100088848;
  v206[-3] = 0;
  v206[-2] = v25;
  __chkstk_darwin(v24, v26);
  v206[-2] = sub_100079AAC;
  v206[-1] = v27;
  unint64_t v29 = v28 + 4;
  os_unfair_lock_lock(v28 + 4);
  sub_100079ACC(&v261);
  v214 = 0;
  os_unfair_lock_unlock(v29);
  uint64_t v31 = v261;
  unint64_t v32 = v261 & 0xC000000000000001;
  uint64_t v3 = (char *)&type metadata for Swift.AnyObject;
  int v207 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v211 = v2;
  uint64_t v215 = v6;
  unint64_t v247 = a1;
  if (v207 != 2)
  {
    if (v32)
    {
      __CocoaSet.makeIterator()();
      type metadata accessor for Peer();
      sub_100236B04((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
      Set.Iterator.init(_cocoa:)();
      uint64_t v31 = v261;
      uint64_t v36 = v262;
      uint64_t v37 = (uint64_t)v263;
      uint64_t v2 = v264;
      unint64_t v38 = v265;
    }
    else
    {
      uint64_t v2 = 0;
      uint64_t v54 = -1 << *(unsigned char *)(v261 + 32);
      uint64_t v36 = (void *)(v261 + 56);
      uint64_t v55 = ~v54;
      uint64_t v56 = -v54;
      if (v56 < 64) {
        uint64_t v57 = ~(-1 << v56);
      }
      else {
        uint64_t v57 = -1;
      }
      unint64_t v38 = v57 & *(void *)(v261 + 56);
      uint64_t v37 = v55;
    }
    unint64_t v249 = v31 & 0x7FFFFFFFFFFFFFFFLL;
    *(void *)&long long v245 = v37;
    uint64_t v250 = (unint64_t)(v37 + 64) >> 6;
    *(void *)&long long v30 = 136315138;
    long long v244 = v30;
    v243 = (char *)&type metadata for Any + 8;
    *(void *)&long long v248 = (char *)&type metadata for Swift.AnyObject + 8;
    v246 = v36;
    while (1)
    {
      if (v31 < 0)
      {
        uint64_t v60 = __CocoaSet.Iterator.next()();
        if (!v60) {
          goto LABEL_94;
        }
        v252 = (void *)v60;
        uint64_t v3 = (char *)type metadata accessor for Peer();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        unint64_t v61 = v260;
        swift_unknownObjectRelease();
        uint64_t v6 = v2;
        uint64_t v58 = v38;
        if (!v61) {
          goto LABEL_94;
        }
      }
      else
      {
        if (v38)
        {
          uint64_t v58 = (v38 - 1) & v38;
          unint64_t v59 = __clz(__rbit64(v38)) | (v2 << 6);
          uint64_t v6 = v2;
        }
        else
        {
          uint64_t v62 = v2 + 1;
          if (__OFADD__(v2, 1)) {
            goto LABEL_270;
          }
          if (v62 >= v250)
          {
LABEL_94:
            sub_10008C4F0();
            uint64_t v6 = v215;
            goto LABEL_95;
          }
          unint64_t v63 = v36[v62];
          uint64_t v6 = v2 + 1;
          if (!v63)
          {
            uint64_t v6 = v2 + 2;
            if (v2 + 2 >= v250) {
              goto LABEL_94;
            }
            unint64_t v63 = v36[v6];
            if (!v63)
            {
              uint64_t v6 = v2 + 3;
              if (v2 + 3 >= v250) {
                goto LABEL_94;
              }
              unint64_t v63 = v36[v6];
              if (!v63)
              {
                uint64_t v6 = v2 + 4;
                if (v2 + 4 >= v250) {
                  goto LABEL_94;
                }
                unint64_t v63 = v36[v6];
                if (!v63)
                {
                  uint64_t v64 = v2 + 5;
                  do
                  {
                    if (v250 == v64) {
                      goto LABEL_94;
                    }
                    unint64_t v63 = v36[v64++];
                  }
                  while (!v63);
                  uint64_t v6 = v64 - 1;
                }
              }
            }
          }
          uint64_t v58 = (v63 - 1) & v63;
          unint64_t v59 = __clz(__rbit64(v63)) + (v6 << 6);
        }
        unint64_t v61 = *(__objc2_class ***)(*(void *)(v31 + 48) + 8 * v59);
        swift_retain();
        if (!v61) {
          goto LABEL_94;
        }
      }
      if (*v61 == _TtC10seserviced8LyonPeer)
      {
        unint64_t v65 = *(unint64_t *)((char *)v61 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        if (v65 >> 60 != 15)
        {
          uint64_t v66 = *(uint64_t *)((char *)v61 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          uint64_t v67 = *(void *)(a1 + 24);
          swift_retain();
          sub_1000758F4(v66, v65);
          if ((sub_1000B6444(v66, v65, v67) & 1) == 0)
          {
            swift_retain_n();
            uint64_t v3 = (char *)Logger.logObject.getter();
            os_log_type_t v68 = static os_log_type_t.error.getter();
            if (os_log_type_enabled((os_log_t)v3, v68))
            {
              uint64_t v69 = (_DWORD *)swift_slowAlloc();
              v241 = v69;
              uint64_t v242 = swift_slowAlloc();
              v260 = (__objc2_class **)v242;
              _DWORD *v69 = v244;
              type metadata accessor for UUID();
              sub_100236B04((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
              uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
              uint64_t v72 = sub_100290514(v70, v71, (uint64_t *)&v260);
              os_log_type_t v73 = (uint8_t *)v241;
              *(void *)(v241 + 1) = v72;
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, (os_log_t)v3, v68, "Disconnecting %s because it is no longer an express key", v73, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_release_n();
            }

            a1 = v247;
            if (qword_100453668 != -1) {
              swift_once();
            }
            sub_10007C594((uint64_t)v61, 0);
          }
          if (*((unsigned char *)v61 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) == 1)
          {
            if (qword_100453658 != -1) {
              swift_once();
            }
            uint64_t v74 = *(void *)(qword_100468500 + OBJC_IVAR____TtC10seserviced6LyonSE_urskSlotManager);
            uint64_t v3 = (char *)(id)qword_100468500;
            sub_10007599C((uint64_t)v61, v74, v3);
            swift_release();
          }
          else
          {
            swift_release();
          }
          sub_100075868(v66, v65);
          uint64_t v36 = v246;
        }
      }
      swift_release();
      uint64_t v2 = v6;
      unint64_t v38 = v58;
    }
  }
  if (v32)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_100236B04((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v31 = v261;
    os_log_type_t v33 = v262;
    unint64_t v34 = v263;
    a1 = v264;
    unint64_t v35 = v265;
  }
  else
  {
    a1 = 0;
    uint64_t v39 = -1 << *(unsigned char *)(v261 + 32);
    os_log_type_t v33 = (void *)(v261 + 56);
    uint64_t v40 = ~v39;
    uint64_t v41 = -v39;
    if (v41 < 64) {
      uint64_t v42 = ~(-1 << v41);
    }
    else {
      uint64_t v42 = -1;
    }
    unint64_t v35 = v42 & *(void *)(v261 + 56);
    unint64_t v34 = (char *)v40;
  }
  unint64_t v249 = v31 & 0x7FFFFFFFFFFFFFFFLL;
  v243 = v34;
  uint64_t v250 = (unint64_t)(v34 + 64) >> 6;
  *(void *)&long long v30 = 136315138;
  long long v245 = v30;
  *(void *)&long long v244 = (char *)&type metadata for Any + 8;
  *(void *)&long long v248 = (char *)&type metadata for Swift.AnyObject + 8;
  v246 = v33;
  while (v31 < 0)
  {
    uint64_t v45 = __CocoaSet.Iterator.next()();
    if (!v45) {
      goto LABEL_93;
    }
    v252 = (void *)v45;
    uint64_t v3 = (char *)type metadata accessor for Peer();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v46 = v260;
    swift_unknownObjectRelease();
    uint64_t v2 = a1;
    uint64_t v43 = v35;
    if (!v46) {
      goto LABEL_93;
    }
LABEL_47:
    if (*v46 == _TtC10seserviced8LyonPeer
      && *((unsigned char *)v46 + OBJC_IVAR____TtC10seserviced8LyonPeer_sessionState) != 1)
    {
      swift_retain_n();
      long long v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v3 = (char *)swift_slowAlloc();
        v260 = (__objc2_class **)swift_slowAlloc();
        *(_DWORD *)uint64_t v3 = v245;
        type metadata accessor for UUID();
        sub_100236B04((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v3 + 4) = sub_100290514(v52, v53, (uint64_t *)&v260);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Disconnecting %s due to biolockout", (uint8_t *)v3, 0xCu);
        swift_arrayDestroy();
        uint64_t v6 = v215;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      *(_DWORD *)((char *)v46 + OBJC_IVAR____TtC10seserviced8LyonPeer_disconnectionReason) = 3;
      os_log_type_t v33 = v246;
      if (qword_100453668 != -1) {
        swift_once();
      }
      sub_10007C594((uint64_t)v46, 0);
      swift_release();
    }
    swift_release();
    a1 = v2;
    unint64_t v35 = v43;
  }
  if (v35)
  {
    uint64_t v43 = (v35 - 1) & v35;
    unint64_t v44 = __clz(__rbit64(v35)) | (a1 << 6);
    uint64_t v2 = a1;
    goto LABEL_46;
  }
  uint64_t v47 = a1 + 1;
  if (__OFADD__(a1, 1)) {
    goto LABEL_269;
  }
  if (v47 >= v250) {
    goto LABEL_93;
  }
  unint64_t v48 = v33[v47];
  uint64_t v2 = a1 + 1;
  if (v48) {
    goto LABEL_45;
  }
  uint64_t v2 = a1 + 2;
  if ((uint64_t)(a1 + 2) >= v250) {
    goto LABEL_93;
  }
  unint64_t v48 = v33[v2];
  if (v48) {
    goto LABEL_45;
  }
  uint64_t v2 = a1 + 3;
  if ((uint64_t)(a1 + 3) >= v250) {
    goto LABEL_93;
  }
  unint64_t v48 = v33[v2];
  if (v48) {
    goto LABEL_45;
  }
  uint64_t v2 = a1 + 4;
  if ((uint64_t)(a1 + 4) >= v250) {
    goto LABEL_93;
  }
  unint64_t v48 = v33[v2];
  if (v48)
  {
LABEL_45:
    uint64_t v43 = (v48 - 1) & v48;
    unint64_t v44 = __clz(__rbit64(v48)) + (v2 << 6);
LABEL_46:
    unint64_t v46 = *(__objc2_class ***)(*(void *)(v31 + 48) + 8 * v44);
    swift_retain();
    if (!v46) {
      goto LABEL_93;
    }
    goto LABEL_47;
  }
  unint64_t v49 = a1 + 5;
  while (v250 != v49)
  {
    unint64_t v48 = v33[v49++];
    if (v48)
    {
      uint64_t v2 = v49 - 1;
      goto LABEL_45;
    }
  }
LABEL_93:
  sub_10008C4F0();
  a1 = v247;
LABEL_95:
  unint64_t v75 = sub_1001DB4C0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v76 = (unint64_t *)(v209 + OBJC_IVAR____TtC10seserviced11LyonExpress_activeExpressEndpoints);
  swift_beginAccess();
  v208 = (uint64_t *)v76;
  unint64_t *v76 = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = *(void *)(a1 + 24);
  uint64_t v78 = *(void *)(v77 + 56);
  uint64_t v221 = v77 + 56;
  uint64_t v79 = 1 << *(unsigned char *)(v77 + 32);
  uint64_t v80 = -1;
  if (v79 < 64) {
    uint64_t v80 = ~(-1 << v79);
  }
  unint64_t v81 = v80 & v78;
  int64_t v222 = (unint64_t)(v79 + 63) >> 6;
  v206[1] = &v253;
  uint64_t v224 = v77;
  swift_bridgeObjectRetain();
  int64_t v82 = 0;
  unint64_t v223 = 0x80000001003B1A40;
  *(void *)&long long v83 = 136315138;
  long long v213 = v83;
  long long v248 = xmmword_100378290;
  v212 = (char *)&type metadata for Any + 8;
  v216 = _swiftEmptyArrayStorage;
  uint64_t v3 = v214;
  uint64_t v2 = v211;
  while (2)
  {
    if (v81)
    {
      unint64_t v84 = __clz(__rbit64(v81));
      uint64_t v85 = (v81 - 1) & v81;
      int64_t v234 = v82;
      unint64_t v86 = v84 | (v82 << 6);
      goto LABEL_113;
    }
    BOOL v87 = __OFADD__(v82, 1);
    int64_t v88 = v82 + 1;
    if (v87) {
      goto LABEL_263;
    }
    if (v88 < v222)
    {
      unint64_t v89 = *(void *)(v221 + 8 * v88);
      if (!v89)
      {
        int64_t v90 = v88 + 1;
        if (v88 + 1 >= v222) {
          break;
        }
        unint64_t v89 = *(void *)(v221 + 8 * v90);
        if (!v89)
        {
          int64_t v90 = v88 + 2;
          if (v88 + 2 >= v222) {
            break;
          }
          unint64_t v89 = *(void *)(v221 + 8 * v90);
          if (!v89)
          {
            int64_t v90 = v88 + 3;
            if (v88 + 3 >= v222) {
              break;
            }
            unint64_t v89 = *(void *)(v221 + 8 * v90);
            if (!v89)
            {
              while (1)
              {
                int64_t v88 = v90 + 1;
                if (__OFADD__(v90, 1)) {
                  goto LABEL_265;
                }
                if (v88 >= v222) {
                  goto LABEL_211;
                }
                unint64_t v89 = *(void *)(v221 + 8 * v88);
                ++v90;
                if (v89) {
                  goto LABEL_112;
                }
              }
            }
          }
        }
        int64_t v88 = v90;
      }
LABEL_112:
      uint64_t v85 = (v89 - 1) & v89;
      int64_t v234 = v88;
      unint64_t v86 = __clz(__rbit64(v89)) + (v88 << 6);
LABEL_113:
      unint64_t v233 = v85;
      uint64_t v91 = (unint64_t *)(*(void *)(v224 + 48) + 16 * v86);
      a1 = *v91;
      uint64_t v92 = *v91;
      unint64_t v249 = v91[1];
      sub_10006D0EC(v92, v249);
      if (qword_100453738 != -1) {
        swift_once();
      }
      uint64_t v93 = qword_1004687C0;
      uint64_t v94 = sub_10011FE64(0xD000000000000012, v223);
      if (v95 >> 60 == 15) {
        goto LABEL_292;
      }
      uint64_t v96 = v94;
      unint64_t v97 = v95;
      uint64_t v98 = qword_100468A38;
      *(void *)uint64_t v6 = qword_100468A38;
      v226(v6, v228, v2);
      id v99 = (id)v98;
      LOBYTE(v98) = _dispatchPreconditionTest(_:)();
      v225(v6, v2);
      if ((v98 & 1) == 0) {
        goto LABEL_261;
      }
      unint64_t v100 = v249;
      unint64_t v247 = v249 >> 62;
      uint64_t v101 = *(void *)(v93 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
      sub_10006D0EC(a1, v249);
      swift_bridgeObjectRetain();
      sub_1000758F4(v96, v97);
      uint64_t v102 = sub_100234E3C(v101, a1, v100, v96, v97);
      sub_100075868(v96, v97);
      sub_10006D144(a1, v100);
      swift_bridgeObjectRelease();
      *(void *)&long long v245 = a1 >> 8;
      *(void *)&long long v244 = a1 >> 16;
      v243 = (char *)(a1 >> 24);
      v246 = (void *)HIDWORD(a1);
      uint64_t v242 = a1 >> 40;
      v241 = (_DWORD *)HIWORD(a1);
      uint64_t v250 = a1;
      unint64_t v240 = HIBYTE(a1);
      unint64_t v239 = v100 >> 8;
      unint64_t v238 = v100 >> 16;
      unint64_t v237 = v100 >> 24;
      unint64_t v236 = HIDWORD(v100);
      unint64_t v235 = v100 >> 40;
      if (v102)
      {
        a1 = v102[6];
        swift_bridgeObjectRetain();
        swift_release();
        sub_100075868(v96, v97);
        if (!a1) {
          goto LABEL_125;
        }
        uint64_t v103 = swift_allocObject();
        unint64_t v105 = v249;
        uint64_t v104 = v250;
        *(void *)(v103 + 16) = v250;
        *(void *)(v103 + 24) = v105;
        sub_10006D0EC(v104, v105);
        if (qword_1004536D8 != -1) {
          swift_once();
        }
        uint64_t v106 = off_100455CB0;
        uint64_t v107 = swift_allocObject();
        *(void *)(v107 + 16) = sub_1000A9EC0;
        *(void *)(v107 + 24) = v103;
        uint64_t v109 = __chkstk_darwin(v107, v108);
        v206[-4] = sub_1000A97C0;
        v206[-3] = v109;
        v206[-2] = v106;
        __chkstk_darwin(v109, v110);
        v206[-2] = sub_1000A2ABC;
        v206[-1] = v111;
        v113 = v112 + 4;
        swift_retain();
        os_unfair_lock_lock(v113);
        sub_100079ACC(&v252);
        os_unfair_lock_unlock(v113);
        uint64_t v114 = (uint64_t)v252;
        swift_release();
        swift_release();
        uint64_t v115 = (void *)sub_1000BB0E4(v114);
        swift_bridgeObjectRelease();
        if (!v115)
        {
          swift_bridgeObjectRelease();
          uint64_t v116 = Logger.logObject.getter();
          os_log_type_t v117 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v116, v117))
          {
            uint64_t v118 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v118 = 0;
            _os_log_impl((void *)&_mh_execute_header, v116, v117, "Failed to retrieve endpoint", v118, 2u);
            swift_slowDealloc();
          }
          sub_10006D144(v250, v249);

          goto LABEL_99;
        }
        id v147 = [v115 homeUUIDString];
        if (v147)
        {
          v148 = v147;
          uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v151 = v150;

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v216 = sub_1002591F8(0, v216[2] + 1, 1, v216);
          }
          unint64_t v153 = v216[2];
          unint64_t v152 = v216[3];
          if (v153 >= v152 >> 1) {
            v216 = sub_1002591F8((void *)(v152 > 1), v153 + 1, 1, v216);
          }
          v154 = v216;
          v216[2] = v153 + 1;
          v155 = &v154[2 * v153];
          v155[4] = v149;
          v155[5] = v151;
          unint64_t v119 = v249;
          uint64_t v156 = v250;
          goto LABEL_210;
        }
        unint64_t v119 = v249;
        uint64_t v156 = v250;
        sub_10006D0EC(v250, v249);
        sub_10006D0EC(v156, v119);
        v157 = Logger.logObject.getter();
        int v158 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v157, (os_log_type_t)v158))
        {

          sub_10006D144(v156, v119);
          sub_10006D144(v156, v119);
          goto LABEL_210;
        }
        os_log_t v218 = v157;
        LODWORD(v210) = v158;
        uint64_t v120 = swift_slowAlloc();
        v206[0] = swift_slowAlloc();
        os_log_t v259 = (os_log_t)v206[0];
        *(_DWORD *)uint64_t v120 = v213;
        v159 = _swiftEmptyArrayStorage;
        uint64_t v219 = v120;
        switch((int)v247)
        {
          case 1:
            if (__OFSUB__(v246, v250)) {
              goto LABEL_294;
            }
            uint64_t v160 = (int)v246 - (int)v250;
LABEL_181:
            if (!v160) {
              goto LABEL_209;
            }
            v251 = _swiftEmptyArrayStorage;
            int64_t v163 = v160 & ~(v160 >> 63);
            sub_1002CF974(0, v163, 0);
            int v164 = v247;
            v159 = v251;
            uint64_t v231 = (int)v250;
            if (v247)
            {
              if (v247 == 1) {
                uint64_t v165 = v231;
              }
              else {
                uint64_t v165 = *(void *)(v250 + 16);
              }
              if (v160 < 0) {
                goto LABEL_293;
              }
            }
            else
            {
              if (v160 < 0) {
                goto LABEL_296;
              }
              uint64_t v165 = 0;
            }
            int64_t v232 = v249 & 0x3FFFFFFFFFFFFFFFLL;
            uint64_t v220 = v250 >> 32;
            uint64_t v230 = BYTE6(v249);
            v214 = v3;
            break;
          case 2:
            uint64_t v162 = *(void *)(v250 + 16);
            uint64_t v161 = *(void *)(v250 + 24);
            uint64_t v160 = v161 - v162;
            if (!__OFSUB__(v161, v162)) {
              goto LABEL_181;
            }
            goto LABEL_295;
          case 3:
            goto LABEL_209;
          default:
            uint64_t v160 = BYTE6(v249);
            goto LABEL_181;
        }
        do
        {
          if (!v163) {
            goto LABEL_275;
          }
          if (v164)
          {
            if (v164 == 1)
            {
              if (v165 < v231 || v165 >= v220)
              {
                __break(1u);
LABEL_285:
                __break(1u);
LABEL_286:
                __break(1u);
LABEL_287:
                __break(1u);
LABEL_288:
                __break(1u);
LABEL_289:
                __break(1u);
LABEL_290:
                sub_10006D144(v120, v249);
                __break(1u);
LABEL_291:
                sub_10006D144(v120, v249);
                __break(1u);
LABEL_292:
                __break(1u);
LABEL_293:
                __break(1u);
LABEL_294:
                __break(1u);
LABEL_295:
                __break(1u);
LABEL_296:
                __break(1u);
              }
              v166 = v159;
              uint64_t v167 = __DataStorage._bytes.getter();
              if (!v167)
              {
                sub_10006D144(v250, v249);
                __break(1u);
LABEL_298:
                sub_10006D144(v250, v249);
                __break(1u);
                JUMPOUT(0x100233C4CLL);
              }
              uint64_t v168 = v167;
              uint64_t v169 = __DataStorage._offset.getter();
              uint64_t v170 = v165 - v169;
              if (__OFSUB__(v165, v169)) {
                goto LABEL_287;
              }
              uint64_t v120 = v160;
            }
            else
            {
              if (v165 < *(void *)(v250 + 16)) {
                goto LABEL_286;
              }
              if (v165 >= *(void *)(v250 + 24)) {
                goto LABEL_288;
              }
              v166 = v159;
              uint64_t v120 = v160;
              uint64_t v172 = __DataStorage._bytes.getter();
              if (!v172) {
                goto LABEL_298;
              }
              uint64_t v168 = v172;
              uint64_t v173 = __DataStorage._offset.getter();
              uint64_t v170 = v165 - v173;
              if (__OFSUB__(v165, v173)) {
                goto LABEL_289;
              }
            }
            char v171 = *(unsigned char *)(v168 + v170);
          }
          else
          {
            if (v165 >= v230) {
              goto LABEL_285;
            }
            v166 = v159;
            uint64_t v120 = v160;
            LOBYTE(v252) = v250;
            BYTE1(v252) = v245;
            BYTE2(v252) = v244;
            BYTE3(v252) = (_BYTE)v243;
            BYTE4(v252) = (_BYTE)v246;
            BYTE5(v252) = v242;
            BYTE6(v252) = (_BYTE)v241;
            HIBYTE(v252) = v240;
            char v253 = v249;
            char v254 = v239;
            char v255 = v238;
            char v256 = v237;
            char v257 = v236;
            char v258 = v235;
            char v171 = *((unsigned char *)&v252 + v165);
          }
          sub_10006C51C(&qword_100457200);
          uint64_t v174 = swift_allocObject();
          *(_OWORD *)(v174 + 16) = v248;
          *(void *)(v174 + 56) = &type metadata for UInt8;
          *(void *)(v174 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v174 + 32) = v171;
          uint64_t v175 = String.init(format:_:)();
          uint64_t v177 = v176;
          v159 = v166;
          v251 = v166;
          unint64_t v178 = v166[2];
          unint64_t v179 = v159[3];
          if (v178 >= v179 >> 1)
          {
            sub_1002CF974(v179 > 1, v178 + 1, 1);
            v159 = v251;
          }
          v159[2] = v178 + 1;
          v180 = &v159[2 * v178];
          v180[4] = v175;
          v180[5] = v177;
          ++v165;
          --v163;
          uint64_t v160 = v120 - 1;
          uint64_t v3 = v214;
          uint64_t v2 = v211;
          uint64_t v6 = v215;
          int v164 = v247;
        }
        while (v120 != 1);
        uint64_t v120 = v219;
LABEL_209:
        unint64_t v247 = v120 + 4;
        v252 = v159;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v181 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v183 = v182;
        swift_bridgeObjectRelease();
        uint64_t v184 = sub_100290514(v181, v183, (uint64_t *)&v259);
        v185 = (uint8_t *)v120;
        v252 = (void *)v184;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v119 = v249;
        uint64_t v156 = v250;
        sub_10006D144(v250, v249);
        sub_10006D144(v156, v119);
        os_log_t v186 = v218;
        _os_log_impl((void *)&_mh_execute_header, v218, (os_log_type_t)v210, "%s has no home UUID set", v185, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_210:
        v187 = v208;
        swift_beginAccess();
        sub_100233C6C(v187, a1, v156, v119);
        swift_endAccess();
        swift_bridgeObjectRelease();

        uint64_t v124 = v156;
LABEL_129:
        sub_10006D144(v124, v119);
LABEL_99:
        int64_t v82 = v234;
        unint64_t v81 = v233;
        continue;
      }
      sub_100075868(v96, v97);
LABEL_125:
      unint64_t v119 = v249;
      uint64_t v120 = v250;
      sub_10006D0EC(v250, v249);
      sub_10006D0EC(v120, v119);
      uint64_t v121 = Logger.logObject.getter();
      int v122 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v121, (os_log_type_t)v122))
      {
        sub_10006D144(v120, v119);

        sub_10006D144(v120, v119);
        uint64_t v124 = v120;
        goto LABEL_129;
      }
      LODWORD(v219) = v122;
      long long v123 = (_DWORD *)swift_slowAlloc();
      os_log_t v218 = (os_log_t)swift_slowAlloc();
      os_log_t v259 = v218;
      uint64_t v220 = (uint64_t)v123;
      *long long v123 = v213;
      uint64_t v6 = (uint64_t)_swiftEmptyArrayStorage;
      switch((int)v247)
      {
        case 1:
          if (__OFSUB__(v246, v120)) {
            goto LABEL_267;
          }
          uint64_t v2 = (int)v246 - (int)v120;
LABEL_137:
          if (!v2)
          {
            uint64_t v2 = v211;
LABEL_167:
            v252 = (void *)v6;
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_1000756D0();
            uint64_t v142 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v144 = v143;
            swift_bridgeObjectRelease();
            uint64_t v145 = sub_100290514(v142, v144, (uint64_t *)&v259);
            uint64_t v146 = (uint8_t *)v220;
            *(void *)(v220 + 4) = v145;
            swift_bridgeObjectRelease();
            sub_10006D144(v120, v119);
            sub_10006D144(v120, v119);
            _os_log_impl((void *)&_mh_execute_header, v121, (os_log_type_t)v219, "Configured items missing for key %s", v146, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            sub_10006D144(v120, v119);

            uint64_t v6 = v215;
            goto LABEL_99;
          }
          v214 = v3;
          v210 = v121;
          v251 = _swiftEmptyArrayStorage;
          int64_t v127 = v2 & ~(v2 >> 63);
          sub_1002CF974(0, v127, 0);
          int v128 = v247;
          uint64_t v6 = (uint64_t)v251;
          if (!v247)
          {
            if ((v2 & 0x8000000000000000) == 0)
            {
              int64_t v129 = 0;
              goto LABEL_146;
            }
            goto LABEL_273;
          }
          if (v247 == 1) {
            int64_t v129 = (int)v120;
          }
          else {
            int64_t v129 = *(void *)(v120 + 16);
          }
          if ((v2 & 0x8000000000000000) == 0)
          {
LABEL_146:
            int64_t v232 = (int)v120;
            uint64_t v230 = v120 >> 32;
            uint64_t v231 = BYTE6(v119);
            while (v127)
            {
              if (v128)
              {
                if (v128 == 1)
                {
                  if (v129 < v232 || v129 >= v230) {
                    goto LABEL_255;
                  }
                  uint64_t v130 = __DataStorage._bytes.getter();
                  if (!v130) {
                    goto LABEL_290;
                  }
                  uint64_t v131 = v130;
                  uint64_t v132 = __DataStorage._offset.getter();
                  int64_t v133 = v129 - v132;
                  if (__OFSUB__(v129, v132)) {
                    goto LABEL_258;
                  }
                }
                else
                {
                  if (v129 < *(void *)(v120 + 16)) {
                    goto LABEL_257;
                  }
                  if (v129 >= *(void *)(v120 + 24)) {
                    goto LABEL_259;
                  }
                  uint64_t v135 = __DataStorage._bytes.getter();
                  if (!v135) {
                    goto LABEL_291;
                  }
                  uint64_t v131 = v135;
                  uint64_t v136 = __DataStorage._offset.getter();
                  int64_t v133 = v129 - v136;
                  if (__OFSUB__(v129, v136)) {
                    goto LABEL_260;
                  }
                }
                char v134 = *(unsigned char *)(v131 + v133);
                int v128 = v247;
              }
              else
              {
                if (v129 >= v231) {
                  goto LABEL_256;
                }
                LOBYTE(v252) = v120;
                BYTE1(v252) = v245;
                BYTE2(v252) = v244;
                BYTE3(v252) = (_BYTE)v243;
                BYTE4(v252) = (_BYTE)v246;
                BYTE5(v252) = v242;
                BYTE6(v252) = (_BYTE)v241;
                HIBYTE(v252) = v240;
                char v253 = v249;
                char v254 = v239;
                char v255 = v238;
                char v256 = v237;
                char v257 = v236;
                char v258 = v235;
                char v134 = *((unsigned char *)&v252 + v129);
              }
              sub_10006C51C(&qword_100457200);
              uint64_t v137 = swift_allocObject();
              *(_OWORD *)(v137 + 16) = v248;
              *(void *)(v137 + 56) = &type metadata for UInt8;
              *(void *)(v137 + 64) = &protocol witness table for UInt8;
              *(unsigned char *)(v137 + 32) = v134;
              uint64_t v3 = (char *)String.init(format:_:)();
              a1 = v138;
              v251 = (void *)v6;
              unint64_t v140 = *(void *)(v6 + 16);
              unint64_t v139 = *(void *)(v6 + 24);
              if (v140 >= v139 >> 1)
              {
                sub_1002CF974(v139 > 1, v140 + 1, 1);
                int v128 = v247;
                uint64_t v6 = (uint64_t)v251;
              }
              *(void *)(v6 + 16) = v140 + 1;
              unint64_t v141 = v6 + 16 * v140;
              *(void *)(v141 + 32) = v3;
              *(void *)(v141 + 40) = a1;
              ++v129;
              --v127;
              --v2;
              uint64_t v120 = v250;
              if (!v2)
              {
                uint64_t v3 = v214;
                uint64_t v2 = v211;
                unint64_t v119 = v249;
                uint64_t v121 = v210;
                goto LABEL_167;
              }
            }
            __break(1u);
LABEL_255:
            __break(1u);
LABEL_256:
            __break(1u);
LABEL_257:
            __break(1u);
LABEL_258:
            __break(1u);
LABEL_259:
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
LABEL_264:
            __break(1u);
LABEL_265:
            __break(1u);
          }
          __break(1u);
LABEL_267:
          __break(1u);
LABEL_268:
          __break(1u);
LABEL_269:
          __break(1u);
LABEL_270:
          __break(1u);
LABEL_271:
          swift_once();
          break;
        case 2:
          uint64_t v126 = *(void *)(v120 + 16);
          uint64_t v125 = *(void *)(v120 + 24);
          uint64_t v2 = v125 - v126;
          if (!__OFSUB__(v125, v126)) {
            goto LABEL_137;
          }
          goto LABEL_268;
        case 3:
          goto LABEL_167;
        default:
          uint64_t v2 = BYTE6(v119);
          goto LABEL_137;
      }
      goto LABEL_2;
    }
    break;
  }
LABEL_211:
  swift_release();
  if (qword_100453758 != -1) {
    swift_once();
  }
  unint64_t v247 = qword_1004687D0;
  v188 = (uint64_t *)(qword_1004687D0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
  swift_beginAccess();
  uint64_t v189 = *v188;
  if ((unint64_t)v189 >> 62)
  {
    if (v189 < 0) {
      uint64_t v3 = (char *)v189;
    }
    else {
      uint64_t v3 = (char *)(v189 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v190 = _CocoaArrayWrapper.endIndex.getter();
    if (!v190) {
      goto LABEL_281;
    }
LABEL_215:
    unint64_t v191 = 0;
    uint64_t v2 = v216[2];
    a1 = v189 & 0xC000000000000001;
    unint64_t v249 = v189 + 32;
    uint64_t v250 = v189 & 0xFFFFFFFFFFFFFF8;
    v246 = v216 + 11;
    while (1)
    {
      if (a1)
      {
        v193 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v191 >= *(void *)(v250 + 16)) {
          goto LABEL_264;
        }
        v193 = (char *)*(id *)(v249 + 8 * v191);
      }
      v194 = v193;
      BOOL v87 = __OFADD__(v191++, 1);
      if (v87) {
        goto LABEL_262;
      }
      if (v2)
      {
        uint64_t v3 = *(char **)&v193[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
        uint64_t v195 = *(void *)&v193[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
        BOOL v196 = (char *)v216[4] == v3 && v216[5] == v195;
        if (!v196)
        {
          char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v192 & 1) != 0 || v2 == 1) {
            goto LABEL_217;
          }
          if ((char *)v216[6] != v3 || v216[7] != v195)
          {
            char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((v192 & 1) != 0 || v2 == 2) {
              goto LABEL_217;
            }
            if ((char *)v216[8] != v3 || v216[9] != v195)
            {
              char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((v192 & 1) == 0 && v2 != 3)
              {
                uint64_t v6 = (uint64_t)v246;
                uint64_t v199 = 3;
                *(void *)&long long v248 = v190;
                while (1)
                {
                  unint64_t v200 = a1;
                  a1 = v189;
                  uint64_t v201 = v199 + 1;
                  if (__OFADD__(v199, 1)) {
                    goto LABEL_274;
                  }
                  BOOL v202 = *(char **)(v6 - 8) == v3 && *(void *)v6 == v195;
                  if (v202 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    break;
                  }
                  char v192 = 0;
                  v6 += 16;
                  ++v199;
                  BOOL v196 = v201 == v2;
                  uint64_t v189 = a1;
                  a1 = v200;
                  uint64_t v190 = v248;
                  if (v196) {
                    goto LABEL_217;
                  }
                }
                char v192 = 1;
                uint64_t v189 = a1;
                a1 = v200;
                uint64_t v190 = v248;
              }
              goto LABEL_217;
            }
          }
        }
        char v192 = 1;
      }
      else
      {
        char v192 = 0;
      }
LABEL_217:
      v194[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] = v192 & 1;

      if (v191 == v190) {
        goto LABEL_281;
      }
    }
  }
  uint64_t v190 = *(void *)((v189 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v190) {
    goto LABEL_215;
  }
LABEL_281:
  swift_bridgeObjectRelease();
  sub_1001B0458();
  swift_bridgeObjectRelease();
  if (qword_100453830 != -1) {
    swift_once();
  }
  char v203 = v207 == 2;
  uint64_t v204 = swift_bridgeObjectRetain();
  uint64_t v205 = sub_1000886A8(v204);
  sub_100255268(v203, 2, 2, v205, 2);
  swift_bridgeObjectRelease();
}

void sub_100233C6C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!*(void *)(a2 + 16)
    || (uint64_t v8 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B0CF0), (v9 & 1) == 0)
    || (sub_1000AA580(*(void *)(a2 + 56) + 32 * v8, (uint64_t)&v95), (swift_dynamicCast() & 1) == 0))
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
    {
LABEL_10:

      return;
    }
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v95 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    sub_100290514(0xD000000000000010, 0x80000001003B0CF0, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    BOOL v15 = "Primary reader identifier with key: %s expected to be a string";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v15, v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10011FE64((uint64_t)v93, v94);
  if (v11 >> 60 == 15)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v13))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_10;
    }
    os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v95 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v14 = 136315138;
    swift_bridgeObjectRetain();
    sub_100290514((uint64_t)v93, v94, (uint64_t *)&v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    BOOL v15 = "Cannot get data representation of %s";
    goto LABEL_9;
  }
  unint64_t v16 = v11;
  uint64_t v17 = v10;
  swift_bridgeObjectRelease();
  sub_10006D0EC(v17, v16);
  uint64_t v91 = v17;
  unint64_t v92 = v16;
  sub_10023CC58(8, v17, v16, (uint64_t *)&v95);
  unint64_t v19 = *((void *)&v95 + 1);
  uint64_t v18 = v95;
  sub_10006D0EC(v95, *((unint64_t *)&v95 + 1));
  sub_10006D0EC(a3, a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&long long v95 = *a1;
  *a1 = 0x8000000000000000;
  sub_1002C99B0(a3, a4, -1, v18, v19, isUniquelyReferenced_nonNull_native);
  *a1 = v95;
  swift_bridgeObjectRelease();
  uint64_t v90 = v18;
  sub_10006D144(v18, v19);
  if (!*(void *)(a2 + 16)
    || (uint64_t v21 = sub_1002C0AD0(0x6F666E4932504345, 0xE800000000000000), (v22 & 1) == 0)
    || (sub_1000AA580(*(void *)(a2 + 56) + 32 * v21, (uint64_t)&v95),
        sub_10006C51C(&qword_100457240),
        (swift_dynamicCast() & 1) == 0))
  {
    sub_10006D0EC(a3, a4);
    sub_10006D0EC(a3, a4);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      *(void *)&long long v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      sub_100290514(0x6F666E4932504345, 0xE800000000000000, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2080;
      sub_10023CDF4(a3, a4);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      sub_100290514(v28, v30, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "No ecp2info with key %s found for endpoint %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100075868(v91, v92);
      unint64_t v32 = v19;
      uint64_t v31 = v90;
LABEL_19:
      sub_10006D144(v31, v32);

      return;
    }
LABEL_72:
    sub_100075868(v91, v92);
    sub_10006D144(v90, v19);

    sub_10006D144(a3, a4);
    sub_10006D144(a3, a4);
    return;
  }
  if (v93[2] && (uint64_t v23 = sub_1002C0AD0(0xD00000000000001BLL, 0x80000001003B86E0), (v24 & 1) != 0))
  {
    sub_1000AA580(v93[7] + 32 * v23, (uint64_t)&v95);
  }
  else
  {
    long long v95 = 0u;
    long long v96 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v96 + 1))
  {
    sub_1000AE778((uint64_t)&v95);
LABEL_70:
    sub_10006D0EC(a3, a4);
    sub_10006D0EC(a3, a4);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      *(void *)&long long v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 136315394;
      os_log_type_t typea = v79;
      sub_100290514(0xD00000000000001BLL, 0x80000001003B86E0, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2080;
      sub_10023CDF4(a3, a4);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      unint64_t v81 = v19;
      sub_1000756D0();
      uint64_t v82 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v84 = v83;
      swift_bridgeObjectRelease();
      sub_100290514(v82, v84, (uint64_t *)&v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v25, typea, "No aux keys with key: %s found for endpoint %s", (uint8_t *)v80, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100075868(v91, v92);
      uint64_t v31 = v18;
      unint64_t v32 = v81;
      goto LABEL_19;
    }
    goto LABEL_72;
  }
  sub_10006C51C(&qword_1004555E0);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_70;
  }
  uint64_t v33 = v93[2];
  if (v33)
  {
    unint64_t v34 = v93 + 4;
    *(void *)os_log_type_t type = v19;
    while (1)
    {
      uint64_t v35 = *v34;
      if (!*(void *)(*v34 + 16)) {
        goto LABEL_32;
      }
      swift_bridgeObjectRetain();
      uint64_t v36 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B0CF0);
      if ((v37 & 1) == 0) {
        break;
      }
      sub_1000AA580(*(void *)(v35 + 56) + 32 * v36, (uint64_t)&v95);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v38 = (uint64_t)v93;
      switch(v94 >> 62)
      {
        case 1uLL:
          LODWORD(v39) = HIDWORD(v93) - v93;
          if (__OFSUB__(HIDWORD(v93), v93))
          {
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            JUMPOUT(0x100234ACCLL);
          }
          uint64_t v39 = (int)v39;
LABEL_40:
          if (v39 != 8)
          {
LABEL_44:
            swift_bridgeObjectRelease();
            sub_10006D144((uint64_t)v93, v94);
            goto LABEL_32;
          }
          if (*(void *)(v35 + 16)
            && (uint64_t v46 = sub_1002C0AD0(0x797469726F697270, 0xE800000000000000), (v47 & 1) != 0))
          {
            sub_1000AA580(*(void *)(v35 + 56) + 32 * v46, (uint64_t)&v95);
          }
          else
          {
            long long v95 = 0u;
            long long v96 = 0u;
          }
          swift_bridgeObjectRelease();
          if (!*((void *)&v96 + 1))
          {
            sub_1000AE778((uint64_t)&v95);
LABEL_54:
            uint64_t v40 = Logger.logObject.getter();
            os_log_type_t v58 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v40, v58))
            {
              uint64_t v59 = swift_slowAlloc();
              *(void *)&long long v95 = swift_slowAlloc();
              *(_DWORD *)uint64_t v59 = 136315138;
              *(void *)(v59 + 4) = sub_100290514(0x797469726F697270, 0xE800000000000000, (uint64_t *)&v95);
              _os_log_impl((void *)&_mh_execute_header, v40, v58, "Priority with key %s expected as NSNumber", (uint8_t *)v59, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t v19 = *(void *)type;
              swift_slowDealloc();
            }
            sub_10006D144((uint64_t)v93, v94);
            goto LABEL_34;
          }
          sub_100132B84();
          if ((swift_dynamicCast() & 1) == 0) {
            goto LABEL_54;
          }
          unint64_t v48 = v93;
          uint64_t v49 = *a1;
          if (!*(void *)(*a1 + 16)) {
            goto LABEL_58;
          }
          sub_10006D0EC((uint64_t)v93, v94);
          uint64_t v50 = sub_1002C0BAC((uint64_t)v93, v94);
          if ((v51 & 1) == 0)
          {
            sub_10006D144((uint64_t)v93, v94);
LABEL_58:
            sub_10006D0EC(a3, a4);
            sub_10006D0EC(v38, v94);
            id v87 = [v48 integerValue];
            char v60 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v61 = v38;
            char v62 = v60;
            *(void *)&long long v95 = *a1;
            uint64_t v63 = v95;
            *a1 = 0x8000000000000000;
            unint64_t v65 = sub_1002C0BAC(v61, v94);
            uint64_t v66 = *(void *)(v63 + 16);
            BOOL v67 = (v64 & 1) == 0;
            uint64_t v68 = v66 + v67;
            if (__OFADD__(v66, v67)) {
              goto LABEL_76;
            }
            if (*(void *)(v63 + 24) >= v68)
            {
              if ((v62 & 1) == 0)
              {
                char v78 = v64;
                sub_1002CC85C();
                char v64 = v78;
              }
              uint64_t v69 = (uint64_t)v93;
              uint64_t v72 = (void *)v95;
              if ((v64 & 1) == 0) {
                goto LABEL_62;
              }
            }
            else
            {
              char v85 = v64;
              sub_1002C3D34(v68, v62);
              uint64_t v69 = (uint64_t)v93;
              uint64_t v70 = sub_1002C0BAC((uint64_t)v93, v94);
              if ((v85 & 1) != (v71 & 1)) {
                goto LABEL_78;
              }
              unint64_t v65 = v70;
              uint64_t v72 = (void *)v95;
              if ((v85 & 1) == 0)
              {
LABEL_62:
                v72[(v65 >> 6) + 8] |= 1 << v65;
                os_log_type_t v73 = (uint64_t *)(v72[6] + 16 * v65);
                uint64_t *v73 = v69;
                v73[1] = v94;
                uint64_t v74 = (uint64_t *)(v72[7] + 24 * v65);
                *uint64_t v74 = a3;
                v74[1] = a4;
                v74[2] = (uint64_t)v87;
                uint64_t v75 = v72[2];
                BOOL v45 = __OFADD__(v75, 1);
                uint64_t v76 = v75 + 1;
                if (v45) {
                  goto LABEL_77;
                }
                v72[2] = v76;
                sub_10006D0EC(v69, v94);
                goto LABEL_68;
              }
            }
            uint64_t v77 = (uint64_t *)(v72[7] + 24 * v65);
            sub_10006D144(*v77, v77[1]);
            *uint64_t v77 = a3;
            v77[1] = a4;
            v77[2] = (uint64_t)v87;
            uint64_t v69 = (uint64_t)v93;
LABEL_68:
            unint64_t v19 = *(void *)type;
            *a1 = (uint64_t)v72;
            swift_bridgeObjectRelease();
            sub_10006D144(v69, v94);
            sub_10006D144(v69, v94);

            goto LABEL_35;
          }
          uint64_t v52 = (uint64_t *)(*(void *)(v49 + 56) + 24 * v50);
          uint64_t v53 = *v52;
          unint64_t v54 = v52[1];
          uint64_t v86 = v52[2];
          sub_10006D0EC(*v52, v54);
          sub_10006D144((uint64_t)v93, v94);
          id v55 = [v93 integerValue];
          unint64_t v56 = v54;
          uint64_t v38 = (uint64_t)v93;
          sub_10006D144(v53, v56);
          BOOL v57 = v86 < (uint64_t)v55;
          unint64_t v48 = v93;
          if (!v57) {
            goto LABEL_58;
          }

          sub_10006D144((uint64_t)v93, v94);
          unint64_t v19 = *(void *)type;
LABEL_35:
          ++v34;
          if (!--v33) {
            goto LABEL_73;
          }
          break;
        case 2uLL:
          uint64_t v44 = v93[2];
          uint64_t v43 = v93[3];
          BOOL v45 = __OFSUB__(v43, v44);
          uint64_t v39 = v43 - v44;
          if (!v45) {
            goto LABEL_40;
          }
          goto LABEL_75;
        case 3uLL:
          goto LABEL_44;
        default:
          uint64_t v39 = BYTE6(v94);
          goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();
LABEL_32:
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      *(void *)&long long v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315394;
      *(void *)(v42 + 4) = sub_100290514(0xD000000000000010, 0x80000001003B0CF0, (uint64_t *)&v95);
      *(_WORD *)(v42 + 12) = 2048;
      *(void *)(v42 + 14) = 8;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Auxiliary reader identifier with key %s expected to be a Data of length %ld", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v19 = *(void *)type;
      swift_slowDealloc();
    }
LABEL_34:

    goto LABEL_35;
  }
LABEL_73:
  swift_bridgeObjectRelease();
  sub_100075868(v91, v92);
  sub_10006D144(v90, v19);
}

uint64_t sub_100234ADC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced11LyonExpress_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100234B8C()
{
  return type metadata accessor for LyonExpress();
}

uint64_t type metadata accessor for LyonExpress()
{
  uint64_t result = qword_100459490;
  if (!qword_100459490) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100234BE0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100234C88(unint64_t a1)
{
}

uint64_t sub_100234CAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_1001E5240((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100234D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_1001E5240(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

void *sub_100234E3C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v9 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKExpress.ExpressKey();
    sub_100236B04(&qword_1004545D0, (void (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey);
    Set.Iterator.init(_cocoa:)();
    uint64_t v9 = __s1[2];
    uint64_t v70 = __s1[3];
    uint64_t v10 = __s1[4];
    int64_t v11 = __s1[5];
    unint64_t v12 = __s1[6];
  }
  else
  {
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v70 = a1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v11 = 0;
  }
  int64_t v68 = (unint64_t)(v10 + 64) >> 6;
  BOOL v16 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v64 = v16;
  uint64_t v75 = BYTE6(a3);
  BOOL v17 = __OFSUB__(HIDWORD(a4), a4);
  BOOL v62 = v17;
  unint64_t v74 = a3 >> 62;
  uint64_t v63 = v9;
  unint64_t v69 = a3;
  while (1)
  {
    int64_t v18 = v11;
    if ((v9 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21) {
      goto LABEL_108;
    }
    uint64_t v76 = v21;
    type metadata accessor for DSKExpress.ExpressKey();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    char v22 = (void *)__s1[0];
    swift_unknownObjectRelease();
    if (!v22) {
      goto LABEL_110;
    }
LABEL_35:
    uint64_t v25 = v22[2];
    uint64_t v26 = v22[3];
    uint64_t v27 = 0;
    switch((unint64_t)v26 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v25) - v25;
        if (__OFSUB__(HIDWORD(v25), v25)) {
          goto LABEL_112;
        }
        uint64_t v27 = (int)v27;
LABEL_40:
        uint64_t v31 = v75;
        switch(v74)
        {
          case 1uLL:
            uint64_t v31 = HIDWORD(a2) - (int)a2;
            if (v64) {
              goto LABEL_113;
            }
            goto LABEL_44;
          case 2uLL:
            uint64_t v33 = *(void *)(a2 + 16);
            uint64_t v32 = *(void *)(a2 + 24);
            BOOL v30 = __OFSUB__(v32, v33);
            uint64_t v31 = v32 - v33;
            if (!v30) {
              goto LABEL_44;
            }
            goto LABEL_114;
          case 3uLL:
            if (!v27) {
              goto LABEL_69;
            }
            goto LABEL_16;
          default:
LABEL_44:
            if (v27 != v31) {
              goto LABEL_16;
            }
            if (v27 < 1) {
              goto LABEL_69;
            }
            break;
        }
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v25 + 16);
        uint64_t v28 = *(void *)(v25 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_112:
        __break(1u);
LABEL_113:
        __break(1u);
LABEL_114:
        __break(1u);
        goto LABEL_115;
      case 3uLL:
        goto LABEL_40;
      default:
        uint64_t v27 = BYTE6(v26);
        goto LABEL_40;
    }
    switch((unint64_t)v26 >> 62)
    {
      case 1uLL:
        uint64_t v9 = (v25 >> 32) - (int)v25;
        if (v25 >> 32 < (int)v25) {
          goto LABEL_120;
        }
        unint64_t v72 = v12;
        sub_10006D0EC(a2, a3);
        sub_10006D0EC(v25, v26);
        uint64_t v41 = __DataStorage._bytes.getter();
        if (!v41) {
          goto LABEL_62;
        }
        uint64_t v42 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v25, v42)) {
          goto LABEL_123;
        }
        v41 += (int)v25 - v42;
LABEL_62:
        __DataStorage._length.getter();
        uint64_t v43 = v41;
        uint64_t v35 = (char *)a2;
        a3 = v69;
        sub_1001E5240(v43, a2, v69, (char *)__s1);
        if (v6) {
          goto LABEL_134;
        }
        uint64_t v6 = 0;
        sub_10006D144(a2, v69);
        sub_10006D144(v25, v26);
        uint64_t v9 = v63;
        unint64_t v12 = v72;
        if (__s1[0]) {
          goto LABEL_69;
        }
        goto LABEL_16;
      case 2uLL:
        uint64_t v36 = *(void *)(v25 + 16);
        uint64_t v66 = *(void *)(v25 + 24);
        sub_10006D0EC(a2, a3);
        swift_retain();
        swift_retain();
        uint64_t v37 = __DataStorage._bytes.getter();
        if (v37)
        {
          uint64_t v38 = __DataStorage._offset.getter();
          if (__OFSUB__(v36, v38)) {
            goto LABEL_122;
          }
          uint64_t v39 = v6;
          v37 += v36 - v38;
        }
        else
        {
          uint64_t v39 = v6;
        }
        if (__OFSUB__(v66, v36)) {
          goto LABEL_121;
        }
        __DataStorage._length.getter();
        uint64_t v44 = v37;
        uint64_t v9 = a2;
        uint64_t v26 = v69;
        sub_1001E5240(v44, a2, v69, (char *)__s1);
        if (v39) {
          goto LABEL_135;
        }
        uint64_t v6 = 0;
        sub_10006D144(a2, v69);
        swift_release();
        swift_release();
        uint64_t v9 = v63;
        a3 = v69;
        if (__s1[0]) {
          goto LABEL_69;
        }
        goto LABEL_16;
      case 3uLL:
        uint64_t v25 = v6;
        unint64_t v40 = v12;
        memset(__s1, 0, 14);
        uint64_t v35 = (char *)a2;
        sub_10006D0EC(a2, a3);
        sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v76);
        if (v25)
        {
LABEL_128:
          uint64_t v60 = (uint64_t)v35;
          goto LABEL_133;
        }
        sub_10006D144(a2, a3);
        unint64_t v12 = v40;
        uint64_t v6 = 0;
        if ((v76 & 1) == 0) {
          goto LABEL_16;
        }
LABEL_69:
        unint64_t v73 = v12;
        uint64_t v26 = v22[4];
        uint64_t v25 = v22[5];
        uint64_t v45 = 0;
        switch((unint64_t)v25 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v26), v26)) {
              goto LABEL_116;
            }
            uint64_t v45 = HIDWORD(v26) - (int)v26;
LABEL_74:
            sub_10006D0EC(v22[4], v22[5]);
            break;
          case 2uLL:
            uint64_t v47 = *(void *)(v26 + 16);
            uint64_t v46 = *(void *)(v26 + 24);
            uint64_t v45 = v46 - v47;
            if (!__OFSUB__(v46, v47)) {
              goto LABEL_74;
            }
            goto LABEL_117;
          case 3uLL:
            goto LABEL_75;
          default:
            uint64_t v45 = BYTE6(v25);
            goto LABEL_75;
        }
        break;
      default:
        uint64_t v65 = v6;
        unint64_t v34 = v12;
        __s1[0] = v22[2];
        LOWORD(__s1[1]) = v26;
        BYTE2(__s1[1]) = BYTE2(v26);
        BYTE3(__s1[1]) = BYTE3(v26);
        BYTE4(__s1[1]) = BYTE4(v26);
        BYTE5(__s1[1]) = BYTE5(v26);
        uint64_t v35 = (char *)__s1 + BYTE6(v26);
        uint64_t v25 = a2;
        sub_10006D0EC(a2, a3);
        sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v76);
        if (v65) {
          goto LABEL_132;
        }
        sub_10006D144(a2, a3);
        unint64_t v12 = v34;
        uint64_t v6 = 0;
        if (v76) {
          goto LABEL_69;
        }
        goto LABEL_16;
    }
LABEL_75:
    uint64_t v48 = BYTE6(a5);
    switch(a5 >> 62)
    {
      case 1uLL:
        uint64_t v48 = HIDWORD(a4) - (int)a4;
        if (v62) {
          goto LABEL_118;
        }
        goto LABEL_79;
      case 2uLL:
        uint64_t v50 = *(void *)(a4 + 16);
        uint64_t v49 = *(void *)(a4 + 24);
        BOOL v30 = __OFSUB__(v49, v50);
        uint64_t v48 = v49 - v50;
        if (!v30) {
          goto LABEL_79;
        }
        goto LABEL_119;
      case 3uLL:
        if (v45) {
          goto LABEL_15;
        }
        goto LABEL_109;
      default:
LABEL_79:
        if (v45 == v48)
        {
          if (v45 < 1)
          {
LABEL_109:
            sub_10006D144(v26, v25);
            goto LABEL_110;
          }
          switch((unint64_t)v25 >> 62)
          {
            case 1uLL:
              if (v26 >> 32 < (int)v26) {
                goto LABEL_124;
              }
              sub_10006D0EC(v26, v25);
              sub_10006D0EC(a4, a5);
              a3 = __DataStorage._bytes.getter();
              if (!a3) {
                goto LABEL_97;
              }
              uint64_t v57 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v26, v57)) {
                goto LABEL_127;
              }
              a3 += (int)v26 - v57;
LABEL_97:
              __DataStorage._length.getter();
              uint64_t v9 = a4;
              uint64_t v35 = (char *)a5;
              sub_1001E5240(a3, a4, a5, (char *)__s1);
              if (v6) {
                goto LABEL_131;
              }
              uint64_t v6 = 0;
              sub_10006D144(a4, a5);
              sub_10006D144(v26, v25);
              goto LABEL_99;
            case 2uLL:
              uint64_t v35 = (char *)(v25 & 0x3FFFFFFFFFFFFFFFLL);
              uint64_t v52 = *(void *)(v26 + 16);
              uint64_t v61 = *(void *)(v26 + 24);
              sub_10006D0EC(a4, a5);
              swift_retain();
              swift_retain();
              uint64_t v53 = __DataStorage._bytes.getter();
              if (!v53) {
                goto LABEL_87;
              }
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v52, v54)) {
                goto LABEL_126;
              }
              v53 += v52 - v54;
LABEL_87:
              if (__OFSUB__(v61, v52)) {
                goto LABEL_125;
              }
              __DataStorage._length.getter();
              uint64_t v55 = v53;
              a3 = a4;
              uint64_t v9 = a5;
              sub_1001E5240(v55, a4, a5, (char *)__s1);
              if (v6)
              {
                sub_10006D144(a4, a5);
                swift_release();
                uint64_t v56 = swift_release();
                __break(1u);
LABEL_130:
                sub_10006D144(v56, (unint64_t)v35);
                __break(1u);
LABEL_131:
                sub_10006D144(v9, (unint64_t)v35);
                sub_10006D144(v26, v25);
                __break(1u);
LABEL_132:
                uint64_t v60 = v25;
LABEL_133:
                sub_10006D144(v60, a3);
                __break(1u);
LABEL_134:
                sub_10006D144((uint64_t)v35, a3);
                sub_10006D144(v25, v26);
                __break(1u);
LABEL_135:
                sub_10006D144(v9, v26);
                swift_release();
                swift_release();
                __break(1u);
                JUMPOUT(0x1002359F8);
              }
              uint64_t v6 = 0;
              sub_10006D144(a4, a5);
              swift_release();
              swift_release();
LABEL_99:
              sub_10006D144(v26, v25);
              char v51 = __s1[0];
              uint64_t v9 = v63;
LABEL_100:
              a3 = v69;
              unint64_t v12 = v73;
              if (v51) {
                goto LABEL_110;
              }
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              uint64_t v35 = (char *)a5;
              sub_10006D0EC(a4, a5);
              sub_1001E5240((uint64_t)__s1, a4, a5, (char *)&v76);
              uint64_t v56 = a4;
              a3 = v69;
              if (v6) {
                goto LABEL_130;
              }
              uint64_t v6 = 0;
              sub_10006D144(a4, a5);
              sub_10006D144(v26, v25);
              unint64_t v12 = v73;
              if (v76 == 1) {
                goto LABEL_110;
              }
              break;
            default:
              __s1[0] = v26;
              LOWORD(__s1[1]) = v25;
              BYTE2(__s1[1]) = BYTE2(v25);
              BYTE3(__s1[1]) = BYTE3(v25);
              BYTE4(__s1[1]) = BYTE4(v25);
              BYTE5(__s1[1]) = BYTE5(v25);
              uint64_t v35 = (char *)a4;
              a3 = a5;
              sub_10006D0EC(a4, a5);
              sub_1001E5240((uint64_t)__s1, a4, a5, (char *)&v76);
              if (v6) {
                goto LABEL_128;
              }
              uint64_t v6 = 0;
              sub_10006D144(a4, a5);
              sub_10006D144(v26, v25);
              char v51 = v76;
              goto LABEL_100;
          }
        }
        else
        {
LABEL_15:
          sub_10006D144(v26, v25);
          a3 = v69;
        }
LABEL_16:
        swift_release();
        break;
    }
  }
  if (v12)
  {
    unint64_t v19 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v20 = v19 | (v11 << 6);
    goto LABEL_34;
  }
  ++v11;
  if (__OFADD__(v18, 1))
  {
LABEL_115:
    __break(1u);
LABEL_116:
    __break(1u);
LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
  }
  if (v11 >= v68) {
    goto LABEL_108;
  }
  unint64_t v23 = *(void *)(v70 + 8 * v11);
  if (v23)
  {
LABEL_33:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v11 << 6);
LABEL_34:
    char v22 = *(void **)(*(void *)(v9 + 48) + 8 * v20);
    swift_retain();
    if (!v22) {
      goto LABEL_110;
    }
    goto LABEL_35;
  }
  int64_t v24 = v18 + 2;
  if (v18 + 2 >= v68) {
    goto LABEL_108;
  }
  unint64_t v23 = *(void *)(v70 + 8 * v24);
  if (v23) {
    goto LABEL_32;
  }
  int64_t v24 = v18 + 3;
  if (v18 + 3 >= v68) {
    goto LABEL_108;
  }
  unint64_t v23 = *(void *)(v70 + 8 * v24);
  if (v23) {
    goto LABEL_32;
  }
  int64_t v24 = v18 + 4;
  if (v18 + 4 >= v68) {
    goto LABEL_108;
  }
  unint64_t v23 = *(void *)(v70 + 8 * v24);
  if (v23)
  {
LABEL_32:
    int64_t v11 = v24;
    goto LABEL_33;
  }
  int64_t v11 = v18 + 5;
  if (v18 + 5 < v68)
  {
    unint64_t v23 = *(void *)(v70 + 8 * v11);
    if (!v23)
    {
      int64_t v58 = v18 + 6;
      do
      {
        if (v68 == v58) {
          goto LABEL_108;
        }
        unint64_t v23 = *(void *)(v70 + 8 * v58++);
      }
      while (!v23);
      int64_t v11 = v58 - 1;
    }
    goto LABEL_33;
  }
LABEL_108:
  char v22 = 0;
LABEL_110:
  sub_10008C4F0();
  return v22;
}

void *sub_100235A58(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    unint64_t v34 = _swiftEmptyArrayStorage;
    sub_1002CFA80(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    while (1)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(void *)(*v4 + 16);
      swift_bridgeObjectRetain();
      if (!v6) {
        break;
      }
      uint64_t v7 = sub_1002C0AD0(0xD000000000000010, 0x80000001003B0CF0);
      if ((v8 & 1) == 0) {
        break;
      }
      sub_1000AA580(*(void *)(v5 + 56) + 32 * v7, (uint64_t)v33);
      if (!swift_dynamicCast()) {
        break;
      }
      unint64_t v9 = v32 >> 62;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      switch(v32 >> 62)
      {
        case 1uLL:
          uint64_t v11 = (int)v31;
          uint64_t v10 = v31 >> 32;
          if (v31 >> 32 < (int)v31) {
            goto LABEL_39;
          }
          goto LABEL_12;
        case 2uLL:
          uint64_t v11 = *(void *)(v31 + 16);
          uint64_t v10 = *(void *)(v31 + 24);
          if (v10 < v11)
          {
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
            JUMPOUT(0x100235E3CLL);
          }
          uint64_t v12 = *(void *)(v31 + 24);
          uint64_t v13 = *(void *)(v31 + 16);
          if (v9 != 2)
          {
LABEL_12:
            uint64_t v13 = (int)v31;
            uint64_t v12 = v31 >> 32;
          }
LABEL_13:
          if (v12 < v10 || v10 < v13) {
            goto LABEL_40;
          }
          BOOL v14 = __OFSUB__(v10, v11);
          unint64_t v15 = v10 - v11;
          if (v14) {
            goto LABEL_41;
          }
          if (v15 < 8)
          {
            switch((int)v9)
            {
              case 1:
                uint64_t v16 = v31 >> 32;
                goto LABEL_28;
              case 2:
                uint64_t v16 = *(void *)(v31 + 24);
                goto LABEL_29;
              default:
                goto LABEL_31;
            }
          }
          uint64_t v16 = v11 + 8;
          if (__OFADD__(v11, 8)) {
            goto LABEL_43;
          }
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          switch((int)v9)
          {
            case 1:
              uint64_t v18 = (int)v31;
              uint64_t v17 = v31 >> 32;
              break;
            case 2:
              uint64_t v18 = *(void *)(v31 + 16);
              uint64_t v17 = *(void *)(v31 + 24);
              break;
            case 3:
              break;
            default:
              uint64_t v18 = 0;
              uint64_t v17 = BYTE6(v32);
              break;
          }
          if (v17 < v16 || v16 < v18) {
            goto LABEL_44;
          }
          uint64_t v19 = 0;
          switch((int)v9)
          {
            case 1:
LABEL_28:
              uint64_t v19 = (int)v31;
              break;
            case 2:
LABEL_29:
              uint64_t v19 = *(void *)(v31 + 16);
              break;
            default:
              break;
          }
          if (v16 < v19) {
            goto LABEL_42;
          }
LABEL_31:
          uint64_t v20 = Data._Representation.subscript.getter();
          uint64_t v22 = v21;
          sub_10006D144(v31, v32);
          swift_bridgeObjectRelease();
          unint64_t v34 = v2;
          unint64_t v24 = v2[2];
          unint64_t v23 = v2[3];
          if (v24 >= v23 >> 1)
          {
            sub_1002CFA80(v23 > 1, v24 + 1, 1);
            uint64_t v2 = v34;
          }
          v2[2] = v24 + 1;
          uint64_t v25 = &v2[2 * v24];
          v25[4] = v20;
          v25[5] = v22;
          ++v4;
          if (!--v1) {
            return v2;
          }
          break;
        case 3uLL:
          goto LABEL_13;
        default:
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          uint64_t v10 = BYTE6(v32);
          uint64_t v12 = BYTE6(v32);
          goto LABEL_13;
      }
    }
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Aux Reader identifier expected to be of type Data", v28, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    unsigned char *v29 = 0;
    swift_willThrow();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t sub_100235E7C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKExpress.ExpressKey();
    sub_100236B04(&qword_1004545D0, (void (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey);
    Set.Iterator.init(_cocoa:)();
    uint64_t v9 = __s1[2];
    uint64_t v77 = __s1[3];
    uint64_t v10 = __s1[4];
    int64_t v11 = __s1[5];
    unint64_t v12 = __s1[6];
  }
  else
  {
    uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v77 = a1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1 << v14);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v11 = 0;
  }
  int64_t v75 = (unint64_t)(v10 + 64) >> 6;
  BOOL v16 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v70 = v16;
  unint64_t v68 = a5;
  uint64_t v69 = HIDWORD(a2) - (int)a2;
  uint64_t v80 = BYTE6(a3);
  uint64_t v71 = a4;
  BOOL v17 = __OFSUB__(HIDWORD(a4), a4);
  BOOL v66 = v17;
  uint64_t v65 = HIDWORD(a4) - (int)a4;
  uint64_t v74 = BYTE6(a5);
  unint64_t v79 = a3 >> 62;
  uint64_t v72 = a2;
  unint64_t v73 = a5 >> 62;
  uint64_t v67 = v9;
  unint64_t v76 = a3;
  while (2)
  {
    unint64_t v18 = v12;
    int64_t v19 = v11;
    if (v9 < 0)
    {
      uint64_t v22 = __CocoaSet.Iterator.next()();
      uint64_t v23 = v22;
      if (!v22) {
        goto LABEL_112;
      }
      uint64_t v81 = v22;
      type metadata accessor for DSKExpress.ExpressKey();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      unint64_t v24 = (void *)__s1[0];
      swift_unknownObjectRelease();
      unint64_t v12 = v18;
      if (!v24)
      {
LABEL_108:
        uint64_t v23 = 0;
        goto LABEL_112;
      }
    }
    else
    {
      if (v12)
      {
        unint64_t v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v21 = v20 | (v11 << 6);
      }
      else
      {
        ++v11;
        if (__OFADD__(v19, 1))
        {
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
        }
        if (v11 >= v75) {
          goto LABEL_109;
        }
        unint64_t v25 = *(void *)(v77 + 8 * v11);
        if (!v25)
        {
          int64_t v26 = v19 + 2;
          if (v19 + 2 >= v75) {
            goto LABEL_109;
          }
          unint64_t v25 = *(void *)(v77 + 8 * v26);
          if (v25) {
            goto LABEL_32;
          }
          int64_t v26 = v19 + 3;
          if (v19 + 3 >= v75) {
            goto LABEL_109;
          }
          unint64_t v25 = *(void *)(v77 + 8 * v26);
          if (v25) {
            goto LABEL_32;
          }
          int64_t v26 = v19 + 4;
          if (v19 + 4 >= v75) {
            goto LABEL_109;
          }
          unint64_t v25 = *(void *)(v77 + 8 * v26);
          if (v25)
          {
LABEL_32:
            int64_t v11 = v26;
          }
          else
          {
            int64_t v11 = v19 + 5;
            if (v19 + 5 >= v75)
            {
LABEL_109:
              uint64_t v23 = 0;
              goto LABEL_112;
            }
            unint64_t v25 = *(void *)(v77 + 8 * v11);
            if (!v25)
            {
              int64_t v62 = v19 + 6;
              do
              {
                if (v75 == v62) {
                  goto LABEL_109;
                }
                unint64_t v25 = *(void *)(v77 + 8 * v62++);
              }
              while (!v25);
              int64_t v11 = v62 - 1;
            }
          }
        }
        unint64_t v12 = (v25 - 1) & v25;
        unint64_t v21 = __clz(__rbit64(v25)) + (v11 << 6);
      }
      unint64_t v24 = *(void **)(*(void *)(v9 + 48) + 8 * v21);
      swift_retain();
      if (!v24) {
        goto LABEL_108;
      }
    }
    uint64_t v27 = v24[2];
    uint64_t v28 = v24[3];
    uint64_t v29 = 0;
    switch((unint64_t)v28 >> 62)
    {
      case 1uLL:
        LODWORD(v29) = HIDWORD(v27) - v27;
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_114;
        }
        uint64_t v29 = (int)v29;
LABEL_40:
        uint64_t v33 = v80;
        switch(v79)
        {
          case 1uLL:
            uint64_t v33 = v69;
            if (v70) {
              goto LABEL_116;
            }
            goto LABEL_44;
          case 2uLL:
            uint64_t v35 = *(void *)(a2 + 16);
            uint64_t v34 = *(void *)(a2 + 24);
            BOOL v32 = __OFSUB__(v34, v35);
            uint64_t v33 = v34 - v35;
            if (!v32) {
              goto LABEL_44;
            }
            goto LABEL_115;
          case 3uLL:
            if (!v29) {
              goto LABEL_69;
            }
            goto LABEL_16;
          default:
LABEL_44:
            if (v29 != v33) {
              goto LABEL_16;
            }
            if (v29 < 1) {
              goto LABEL_69;
            }
            break;
        }
        break;
      case 2uLL:
        uint64_t v31 = *(void *)(v27 + 16);
        uint64_t v30 = *(void *)(v27 + 24);
        BOOL v32 = __OFSUB__(v30, v31);
        uint64_t v29 = v30 - v31;
        if (!v32) {
          goto LABEL_40;
        }
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
        goto LABEL_117;
      case 3uLL:
        goto LABEL_40;
      default:
        uint64_t v29 = BYTE6(v28);
        goto LABEL_40;
    }
    switch((unint64_t)v28 >> 62)
    {
      case 1uLL:
        if (v27 >> 32 < (int)v27) {
          goto LABEL_122;
        }
        sub_10006D0EC(v72, a3);
        sub_10006D0EC(v27, v28);
        uint64_t v39 = __DataStorage._bytes.getter();
        if (!v39) {
          goto LABEL_62;
        }
        uint64_t v40 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v27, v40)) {
          goto LABEL_125;
        }
        v39 += (int)v27 - v40;
LABEL_62:
        __DataStorage._length.getter();
        uint64_t v41 = v39;
        a2 = v72;
        a3 = v76;
        sub_1001E5240(v41, v72, v76, (char *)__s1);
        if (v78)
        {
          sub_10006D144(v72, v76);
          sub_10006D144(v27, v28);
          __break(1u);
LABEL_131:
          sub_10006D144(a2, v28);
          swift_release();
          swift_release();
          __break(1u);
LABEL_132:
          uint64_t v54 = sub_10006D144(a2, a3);
          __break(1u);
LABEL_133:
          sub_10006D144(v54, v55);
          swift_release();
          uint64_t v56 = swift_release();
          __break(1u);
LABEL_134:
          uint64_t v60 = sub_10006D144(v56, v57);
          __break(1u);
LABEL_135:
          sub_10006D144(v60, v61);
          sub_10006D144(v28, v27);
          __break(1u);
          JUMPOUT(0x100236A18);
        }
        sub_10006D144(v72, v76);
        sub_10006D144(v27, v28);
        uint64_t v9 = v67;
        if (__s1[0]) {
          goto LABEL_69;
        }
        goto LABEL_16;
      case 2uLL:
        uint64_t v36 = *(void *)(v27 + 16);
        uint64_t v64 = *(void *)(v27 + 24);
        sub_10006D0EC(a2, a3);
        swift_retain();
        swift_retain();
        uint64_t v37 = __DataStorage._bytes.getter();
        if (v37)
        {
          uint64_t v38 = __DataStorage._offset.getter();
          if (__OFSUB__(v36, v38)) {
            goto LABEL_124;
          }
          a3 = v78;
          v37 += v36 - v38;
        }
        else
        {
          a3 = v78;
        }
        if (__OFSUB__(v64, v36)) {
          goto LABEL_123;
        }
        __DataStorage._length.getter();
        uint64_t v42 = v37;
        a2 = v72;
        uint64_t v28 = v76;
        sub_1001E5240(v42, v72, v76, (char *)__s1);
        unint64_t v78 = a3;
        if (a3) {
          goto LABEL_131;
        }
        sub_10006D144(v72, v76);
        swift_release();
        swift_release();
        uint64_t v9 = v67;
        a3 = v76;
        if ((__s1[0] & 1) == 0) {
          goto LABEL_16;
        }
LABEL_69:
        uint64_t v28 = v24[4];
        uint64_t v27 = v24[5];
        uint64_t v43 = 0;
        switch((unint64_t)v27 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v28), v28)) {
              goto LABEL_118;
            }
            uint64_t v43 = HIDWORD(v28) - (int)v28;
LABEL_74:
            sub_10006D0EC(v24[4], v24[5]);
            break;
          case 2uLL:
            uint64_t v45 = *(void *)(v28 + 16);
            uint64_t v44 = *(void *)(v28 + 24);
            uint64_t v43 = v44 - v45;
            if (!__OFSUB__(v44, v45)) {
              goto LABEL_74;
            }
            goto LABEL_119;
          case 3uLL:
            goto LABEL_75;
          default:
            uint64_t v43 = BYTE6(v27);
            goto LABEL_75;
        }
        break;
      case 3uLL:
        memset(__s1, 0, 14);
        sub_10006D0EC(a2, a3);
        sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v81);
        if (v78) {
          goto LABEL_132;
        }
        sub_10006D144(a2, a3);
        if (v81) {
          goto LABEL_69;
        }
        goto LABEL_16;
      default:
        __s1[0] = v24[2];
        LOWORD(__s1[1]) = v28;
        BYTE2(__s1[1]) = BYTE2(v28);
        BYTE3(__s1[1]) = BYTE3(v28);
        BYTE4(__s1[1]) = BYTE4(v28);
        BYTE5(__s1[1]) = BYTE5(v28);
        sub_10006D0EC(a2, a3);
        sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v81);
        if (v78) {
          goto LABEL_132;
        }
        sub_10006D144(a2, a3);
        if (v81) {
          goto LABEL_69;
        }
        goto LABEL_16;
    }
LABEL_75:
    uint64_t v46 = v74;
    switch(v73)
    {
      case 1uLL:
        uint64_t v46 = v65;
        if (v66) {
          goto LABEL_121;
        }
        goto LABEL_79;
      case 2uLL:
        uint64_t v48 = *(void *)(v71 + 16);
        uint64_t v47 = *(void *)(v71 + 24);
        BOOL v32 = __OFSUB__(v47, v48);
        uint64_t v46 = v47 - v48;
        if (!v32) {
          goto LABEL_79;
        }
        goto LABEL_120;
      case 3uLL:
        if (v43) {
          goto LABEL_15;
        }
        goto LABEL_110;
      default:
LABEL_79:
        if (v43 != v46)
        {
LABEL_15:
          sub_10006D144(v28, v27);
          a3 = v76;
LABEL_16:
          swift_release();
          continue;
        }
        if (v43 >= 1)
        {
          switch((unint64_t)v27 >> 62)
          {
            case 1uLL:
              if (v28 >> 32 < (int)v28) {
                goto LABEL_126;
              }
              sub_10006D0EC(v28, v27);
              sub_10006D0EC(v71, v68);
              uint64_t v58 = __DataStorage._bytes.getter();
              if (!v58) {
                goto LABEL_97;
              }
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v28, v59)) {
                goto LABEL_129;
              }
              v58 += (int)v28 - v59;
LABEL_97:
              __DataStorage._length.getter();
              sub_1001E5240(v58, v71, v68, (char *)__s1);
              uint64_t v60 = v71;
              unint64_t v61 = v68;
              if (v78) {
                goto LABEL_135;
              }
              sub_10006D144(v71, v68);
              sub_10006D144(v28, v27);
              break;
            case 2uLL:
              uint64_t v51 = *(void *)(v28 + 16);
              uint64_t v50 = *(void *)(v28 + 24);
              sub_10006D0EC(v71, v68);
              swift_retain();
              swift_retain();
              uint64_t v52 = __DataStorage._bytes.getter();
              if (!v52) {
                goto LABEL_87;
              }
              uint64_t v53 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v53)) {
                goto LABEL_128;
              }
              v52 += v51 - v53;
LABEL_87:
              if (__OFSUB__(v50, v51)) {
                goto LABEL_127;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v52, v71, v68, (char *)__s1);
              uint64_t v54 = v71;
              unint64_t v55 = v68;
              if (v78) {
                goto LABEL_133;
              }
              sub_10006D144(v71, v68);
              swift_release();
              swift_release();
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              sub_10006D0EC(v71, v68);
              sub_1001E5240((uint64_t)__s1, v71, v68, (char *)&v81);
              a3 = v76;
              uint64_t v56 = v71;
              unint64_t v57 = v68;
              if (v78) {
                goto LABEL_134;
              }
              sub_10006D144(v71, v68);
              sub_10006D144(v28, v27);
              swift_release();
              a2 = v72;
              if (v81 == 1) {
                goto LABEL_111;
              }
              continue;
            default:
              __s1[0] = v28;
              LOWORD(__s1[1]) = v27;
              BYTE2(__s1[1]) = BYTE2(v27);
              BYTE3(__s1[1]) = BYTE3(v27);
              BYTE4(__s1[1]) = BYTE4(v27);
              BYTE5(__s1[1]) = BYTE5(v27);
              a2 = v71;
              a3 = v68;
              sub_10006D0EC(v71, v68);
              sub_1001E5240((uint64_t)__s1, v71, v68, (char *)&v81);
              if (v78) {
                goto LABEL_132;
              }
              sub_10006D144(v71, v68);
              sub_10006D144(v28, v27);
              swift_release();
              char v49 = v81;
              goto LABEL_100;
          }
          sub_10006D144(v28, v27);
          swift_release();
          char v49 = __s1[0];
          uint64_t v9 = v67;
LABEL_100:
          a3 = v76;
          a2 = v72;
          if (v49) {
            goto LABEL_111;
          }
          continue;
        }
LABEL_110:
        sub_10006D144(v28, v27);
        swift_release();
LABEL_111:
        uint64_t v23 = 1;
LABEL_112:
        sub_10008C4F0();
        return v23;
    }
  }
}

uint64_t sub_100236A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100236A8C()
{
  return swift_release();
}

uint64_t sub_100236A94()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100236ACC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100236B04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100236B4C()
{
  [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP10seserviced32CredentialServerInternalProtocol_];
  sub_10007582C(0, &qword_100457E20);
  sub_10006C51C(&qword_100455FA8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10037B8C0;
  uint64_t v1 = type metadata accessor for CredentialInternal();
  *(void *)(v0 + 56) = sub_10006C51C(&qword_100457E28);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = type metadata accessor for InstanceInfoInternal();
  *(void *)(v0 + 88) = sub_10006C51C(&qword_100457E30);
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for ApplicationInfoInternal();
  *(void *)(v0 + 120) = sub_10006C51C(&qword_100457E38);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = sub_10007582C(0, &qword_100457E40);
  *(void *)(v0 + 152) = sub_10006C51C(&qword_100457E48);
  *(void *)(v0 + 128) = v4;
  uint64_t v5 = sub_10007582C(0, &qword_100457E50);
  *(void *)(v0 + 184) = sub_10006C51C(&qword_100457E58);
  *(void *)(v0 + 160) = v5;
  uint64_t v6 = sub_10007582C(0, &qword_100457E60);
  *(void *)(v0 + 216) = sub_10006C51C(&qword_100457E68);
  *(void *)(v0 + 192) = v6;
  uint64_t v7 = sub_10007582C(0, (unint64_t *)&qword_100457A58);
  *(void *)(v0 + 248) = sub_10006C51C(&qword_100457E70);
  *(void *)(v0 + 224) = v7;
  NSSet.init(objects:)();
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

void sub_100236D94()
{
  uint64_t v2 = sub_10006C51C(&qword_100459690);
  uint64_t v65 = *(void *)(v2 - 8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v64 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10006C51C(&qword_100456220);
  __chkstk_darwin(v5 - 8, v6);
  char v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CredentialType();
  unint64_t v69 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  unint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10006C51C((uint64_t *)&unk_10045B7E0);
  unint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v0;
  sub_100237990(v16, v20);
  uint64_t v22 = v1;
  if (v1) {
    return;
  }
  uint64_t v23 = v21;
  uint64_t v63 = v19;
  uint64_t v74 = v8;
  unint64_t v75 = v18;
  uint64_t v71 = v12;
  unint64_t v72 = v14;
  uint64_t v70 = v13;
  uint64_t v73 = v9;
  if (v21 >> 62) {
    goto LABEL_42;
  }
  uint64_t v24 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    unint64_t v25 = v69;
    if (!v24)
    {
      uint64_t v42 = v22;
      swift_bridgeObjectRelease();
      uint64_t v18 = (uint64_t)_swiftEmptyArrayStorage;
      if (_swiftEmptyArrayStorage[2]) {
        goto LABEL_20;
      }
      goto LABEL_23;
    }
    int64_t v62 = v22;
    uint64_t v77 = _swiftEmptyArrayStorage;
    uint64_t v22 = &v77;
    sub_1002CFAF8(0, v24 & ~(v24 >> 63), 0);
    if (v24 < 0) {
      break;
    }
    uint64_t v26 = 0;
    uint64_t v18 = (uint64_t)v77;
    unint64_t v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    unint64_t v69 = v23 & 0xC000000000000001;
    uint64_t v66 = v24;
    unint64_t v67 = v25 + 32;
    uint64_t v27 = (void (**)(char *, uint64_t, uint64_t))(v25 + 32);
    do
    {
      if (v24 == v26)
      {
        __break(1u);
        goto LABEL_41;
      }
      if (v69) {
        uint64_t v28 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v28 = (void **)*(id *)(v23 + 8 * v26 + 32);
      }
      uint64_t v22 = v28;
      uint64_t v29 = v23;
      id v30 = [v28 type];
      if (!v30) {
        goto LABEL_50;
      }
      uint64_t v31 = v30;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v32 = (uint64_t)v74;
      CredentialType.init(rawValue:)();
      uint64_t v33 = v73;
      if ((*v68)(v32, 1, v73) == 1)
      {
        sub_10008E734(v32, &qword_100456220);
        id v44 = objc_allocWithZone((Class)NSError);
        NSString v45 = String._bridgeToObjectiveC()();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        [v44 initWithDomain:v45 code:23 userInfo:isa];

        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_release();
        return;
      }
      uint64_t v34 = *v27;
      uint64_t v35 = v71;
      (*v27)(v71, v32, v33);
      uint64_t v36 = *(int *)(v70 + 48);
      uint64_t v37 = v35;
      uint64_t v38 = v75;
      v34((char *)v75, (uint64_t)v37, v33);

      *(void *)(v38 + v36) = 1;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v77 = (void *)v18;
      uint64_t v23 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v22 = &v77;
        sub_1002CFAF8(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = (uint64_t)v77;
      }
      unint64_t v40 = v72;
      unint64_t v14 = *(void *)(v18 + 16);
      unint64_t v41 = *(void *)(v18 + 24);
      if (v14 >= v41 >> 1)
      {
        uint64_t v22 = &v77;
        sub_1002CFAF8(v41 > 1, v14 + 1, 1);
        unint64_t v40 = v72;
        uint64_t v18 = (uint64_t)v77;
      }
      ++v26;
      *(void *)(v18 + 16) = v14 + 1;
      sub_100076148(v38, v18+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v14, (uint64_t *)&unk_10045B7E0);
      uint64_t v24 = v66;
    }
    while (v66 != v26);
    swift_bridgeObjectRelease();
    uint64_t v42 = v62;
    if (*(void *)(v18 + 16))
    {
LABEL_20:
      sub_10006C51C(&qword_10045B7C0);
      uint64_t v43 = (void *)static _DictionaryStorage.allocate(capacity:)();
      goto LABEL_24;
    }
LABEL_23:
    uint64_t v43 = &_swiftEmptyDictionarySingleton;
LABEL_24:
    uint64_t v77 = v43;
    sub_10023A8D4(v18, 1, (uint64_t *)&v77);
    if (v42) {
      goto LABEL_51;
    }
    uint64_t v47 = swift_bridgeObjectRelease();
    unint64_t v14 = (unint64_t)v77;
    sub_100237990(v47, v48);
    uint64_t v22 = 0;
    uint64_t v18 = v49;
    if (v49 >> 62) {
      goto LABEL_44;
    }
    uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v50) {
      goto LABEL_45;
    }
LABEL_29:
    uint64_t v74 = (void *)v14;
    uint64_t v51 = v22;
    uint64_t v77 = _swiftEmptyArrayStorage;
    uint64_t v22 = &v77;
    sub_1002CFAC8(0, v50 & ~(v50 >> 63), 0);
    if (v50 < 0)
    {
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      swift_bridgeObjectRelease();
      swift_release();
      __break(1u);
      goto LABEL_52;
    }
    unint64_t v14 = 0;
    uint64_t v52 = v77;
    unint64_t v75 = v18 & 0xC000000000000001;
    uint64_t v53 = v64;
    uint64_t v23 = v18;
    while (v50 != v14)
    {
      if (v75) {
        uint64_t v54 = (void **)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v54 = (void **)*(id *)(v18 + 8 * v14 + 32);
      }
      uint64_t v22 = v54;
      id v76 = v54;
      sub_10023758C(&v76, v53);

      uint64_t v77 = v52;
      uint64_t v55 = (uint64_t)v53;
      unint64_t v57 = v52[2];
      unint64_t v56 = v52[3];
      if (v57 >= v56 >> 1)
      {
        uint64_t v22 = &v77;
        sub_1002CFAC8(v56 > 1, v57 + 1, 1);
        uint64_t v52 = v77;
      }
      ++v14;
      v52[2] = v57 + 1;
      sub_100076148(v55, (uint64_t)v52+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v57, &qword_100459690);
      uint64_t v53 = (char *)v55;
      uint64_t v18 = v23;
      if (v50 == v14)
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = v51;
        if (!v52[2]) {
          goto LABEL_46;
        }
        goto LABEL_39;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  swift_bridgeObjectRetain();
  uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v50) {
    goto LABEL_29;
  }
LABEL_45:
  swift_bridgeObjectRelease();
  if (_swiftEmptyArrayStorage[2])
  {
LABEL_39:
    sub_10006C51C(&qword_100459698);
    uint64_t v58 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
LABEL_46:
    uint64_t v58 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v77 = v58;
  uint64_t v59 = swift_bridgeObjectRetain();
  sub_10023A380(v59, 1, &v77);
  if (!v22)
  {
    swift_bridgeObjectRelease();
    id v60 = objc_allocWithZone((Class)type metadata accessor for ReservationState());
    ReservationState.init(counts:reservations:)();
    return;
  }
LABEL_52:
  swift_unexpectedError();
  __break(1u);
}

id sub_10023758C@<X0>(id *a1@<X0>, char *a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v4 = sub_10006C51C(&qword_100456220);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v35 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v33 - v17;
  id v37 = *a1;
  id v19 = [v37 uuid];
  if (!v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v18, 1, 1, v7);
    goto LABEL_10;
  }
  uint64_t v20 = v19;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v21(v18, v11, v7);
  uint64_t v2 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v2(v18, 0, 1, v7);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v22(v18, 1, v7) == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v21(v36, v18, v7);
  id v23 = [v37 uuid];
  if (!v23)
  {
LABEL_11:
    id result = (id)v2(v35, 1, 1, v7);
    goto LABEL_12;
  }
  uint64_t v24 = v23;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v25 = v35;
  v21(v35, v11, v7);
  v2(v25, 0, 1, v7);
  id result = (id)((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v25, 1, v7);
  if (result == 1)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  id result = [v37 type];
  uint64_t v27 = v34;
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v28 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  CredentialType.init(rawValue:)();
  uint64_t v29 = type metadata accessor for CredentialType();
  id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v27, 1, v29);
  if (result == 1)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  id result = [v37 metadata];
  if (result)
  {
    id v30 = result;
    uint64_t v31 = *(int *)(sub_10006C51C(&qword_100459690) + 48);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    id v32 = objc_allocWithZone((Class)type metadata accessor for Reservation());
    id result = (id)Reservation.init(uuid:type:metadata:)();
    *(void *)&v36[v31] = result;
    return result;
  }
LABEL_15:
  __break(1u);
  return result;
}

void sub_100237990(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 112))
  {
    __chkstk_darwin(a1, a2);
    id v4 = v3;
    sub_10006C51C(&qword_100459688);
    NSManagedObjectContext.performAndWait<A>(_:)();
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSError);
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [v5 initWithDomain:v6 code:21 userInfo:isa];

    swift_willThrow();
  }
}

void sub_100237AD8(uint64_t *a1@<X8>)
{
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithEntityName:v4];

  type metadata accessor for Item();
  uint64_t v6 = NSManagedObjectContext.fetch<A>(_:)();

  if (!v1) {
    *a1 = v6;
  }
}

uint64_t sub_100237B80(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v35 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v36 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  id v19 = (char *)&v35 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v35 - v21;
  id v23 = [*a1 uuid];
  if (v23)
  {
    uint64_t v24 = v23;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v25(v22, 0, 1, v4);
  }
  else
  {
    unint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v25(v22, 1, 1, v4);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v19, a2, v4);
  v25(v19, 0, 1, v4);
  uint64_t v26 = (uint64_t)&v11[*(int *)(v8 + 48)];
  sub_100170994((uint64_t)v22, (uint64_t)v11, &qword_100455EB0);
  sub_100170994((uint64_t)v19, v26, &qword_100455EB0);
  uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v27((uint64_t)v11, 1, v4) == 1)
  {
    sub_10008E734((uint64_t)v19, &qword_100455EB0);
    sub_10008E734((uint64_t)v22, &qword_100455EB0);
    int v28 = v27(v26, 1, v4);
    if (v28 == 1) {
      uint64_t v29 = &qword_100455EB0;
    }
    else {
      uint64_t v29 = &qword_10045BEE0;
    }
    if (v28 == 1) {
      char v30 = -1;
    }
    else {
      char v30 = 0;
    }
  }
  else
  {
    uint64_t v31 = v36;
    sub_100170994((uint64_t)v11, v36, &qword_100455EB0);
    if (v27(v26, 1, v4) == 1)
    {
      sub_10008E734((uint64_t)v19, &qword_100455EB0);
      sub_10008E734((uint64_t)v22, &qword_100455EB0);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v4);
      char v30 = 0;
      uint64_t v29 = &qword_10045BEE0;
    }
    else
    {
      id v32 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v35, v26, v4);
      sub_10023A2E8();
      char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
      v33(v32, v4);
      uint64_t v29 = &qword_100455EB0;
      sub_10008E734((uint64_t)v19, &qword_100455EB0);
      sub_10008E734((uint64_t)v22, &qword_100455EB0);
      v33((char *)v31, v4);
    }
  }
  sub_10008E734((uint64_t)v11, v29);
  return v30 & 1;
}

char *sub_100237F90(uint64_t a1)
{
  uint64_t v3 = sub_10006C51C(&qword_100456220);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100237990(v14, v17);
  if (v1) {
    return v6;
  }
  __chkstk_darwin(v18, v19);
  v32[-2] = a1;
  unint64_t v21 = (unint64_t)sub_1002B9DD0(sub_10023AD88, &v32[-4], v20);
  unint64_t v22 = v21;
  if (!(v21 >> 62))
  {
    if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_14;
  }
LABEL_4:
  if ((v22 & 0xC000000000000001) != 0)
  {
    id v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_18;
    }
    id v23 = *(id *)(v22 + 32);
  }
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  id v25 = [v24 uuid];
  if (!v25)
  {
LABEL_18:
    id result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v16, 1, 1, v7);
    goto LABEL_19;
  }
  uint64_t v26 = v25;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v11, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
  id result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7);
  if (result == 1)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  id result = (char *)[v24 type];
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  int v28 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  CredentialType.init(rawValue:)();
  uint64_t v29 = type metadata accessor for CredentialType();
  id result = (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v6, 1, v29);
  if (result == 1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id result = (char *)[v24 metadata];
  if (result)
  {
    char v30 = result;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    id v31 = objc_allocWithZone((Class)type metadata accessor for Reservation());
    uint64_t v6 = (char *)Reservation.init(uuid:type:metadata:)();

    return v6;
  }
LABEL_22:
  __break(1u);
  return result;
}

void sub_100238368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v3 + 112);
  if (v12)
  {
    id v13 = v12;
    uint64_t v14 = UUID.init()();
    v19[1] = v19;
    __chkstk_darwin(v14, v15);
    v19[-6] = v13;
    v19[-5] = a1;
    v19[-4] = v11;
    v19[-3] = a2;
    v19[-2] = a3;
    type metadata accessor for Reservation();
    NSManagedObjectContext.performAndWait<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    id v16 = objc_allocWithZone((Class)NSError);
    NSString v17 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [v16 initWithDomain:v17 code:21 userInfo:isa];

    swift_willThrow();
  }
}

void sub_10023859C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v33 = a6;
  unint64_t v38 = a5;
  uint64_t v39 = a3;
  uint64_t v34 = type metadata accessor for CredentialType();
  uint64_t v9 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v10);
  uint64_t v35 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  id v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v17 - 8, v18);
  unint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Item();
  id v21 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v37 = a1;
  id v22 = [v21 initWithContext:a1];
  uint64_t v36 = a2;
  CredentialType.rawValue.getter();
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v22 setType:v23];

  unint64_t v24 = v38;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v22 setUuid:isa];

  uint64_t v39 = a4;
  Class v26 = Data._bridgeToObjectiveC()().super.isa;
  [v22 setMetadata:v26];

  id v27 = [v22 uuid];
  if (!v27)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, 1, 1, v12);
LABEL_8:
    __break(1u);
  }
  int v28 = v27;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v16, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v20, 1, v12) == 1) {
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v35, v36, v34);
  id v29 = objc_allocWithZone((Class)type metadata accessor for Reservation());
  sub_10006D0EC(v39, v24);
  char v30 = (void *)Reservation.init(uuid:type:metadata:)();
  id v40 = 0;
  if ([v37 save:&v40])
  {
    id v31 = v40;

    *uint64_t v33 = v30;
  }
  else
  {
    id v32 = v40;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_100238988(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(v2 + 112);
  if (v3)
  {
    __chkstk_darwin(a1, a2);
    type metadata accessor for Reservation();
    id v4 = v3;
    NSManagedObjectContext.performAndWait<A>(_:)();
  }
  else
  {
    id v5 = objc_allocWithZone((Class)NSError);
    NSString v6 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    [v5 initWithDomain:v6 code:21 userInfo:isa];

    swift_willThrow();
  }
}

void sub_100238ADC(uint64_t a1@<X1>, void *a2@<X2>, unint64_t a3@<X3>, void *a4@<X4>, void *a5@<X8>)
{
  unint64_t v67 = a3;
  id v68 = a4;
  uint64_t v69 = a1;
  id v70 = a2;
  uint64_t v65 = a5;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_100456220);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CredentialType();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  NSString v23 = (char *)&v58 - v22;
  sub_100237990(v21, v24);
  if (v5) {
    return;
  }
  int64_t v62 = v23;
  uint64_t v63 = v13;
  uint64_t v59 = v19;
  uint64_t v60 = v6;
  uint64_t v61 = v9;
  uint64_t v64 = v15;
  __chkstk_darwin(v25, v26);
  uint64_t v27 = v69;
  *(&v58 - 2) = v69;
  unint64_t v29 = (unint64_t)sub_1002B9DD0(sub_10023A2C8, &v58 - 4, v28);
  unint64_t v30 = v29;
  if (v29 >> 62)
  {
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v31 = (uint64_t)v70;
    if (v55) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    sub_1000AE7D8();
    id v71 = 0;
    uint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    id v71 = (id)0xD000000000000020;
    uint64_t v72 = 0x80000001003B8790;
    v56._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._countAndFlagsBits = 46;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    sub_100299FAC(22, 0, (uint64_t)v71, v72, 0);
    swift_willThrow();
    return;
  }
  uint64_t v31 = (uint64_t)v70;
  if (!*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v30 & 0xC000000000000001) != 0)
  {
    id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v32 = *(id *)(v30 + 32);
  }
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  id v70 = v33;
  id v34 = [v33 type];
  if (!v34)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return;
  }
  uint64_t v35 = v34;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v36 = (uint64_t)v63;
  CredentialType.init(rawValue:)();
  uint64_t v37 = v64;
  uint64_t v38 = v14;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v36, 1, v14) == 1)
  {
    sub_10008E734(v36, &qword_100456220);
    id v71 = 0;
    uint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    id v71 = (id)0xD000000000000012;
    uint64_t v72 = 0x80000001003B48B0;
    id v39 = v70;
    id v40 = [v70 type];
    if (v40)
    {
      unint64_t v41 = v40;
      sub_1000AE7D8();
      uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v44 = v43;

      v45._countAndFlagsBits = v42;
      v45._object = v44;
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46._countAndFlagsBits = 0xD000000000000017;
      v46._object = (void *)0x80000001003B8770;
      String.append(_:)(v46);
      sub_100299FAC(23, 0, (uint64_t)v71, v72, 0);
      swift_willThrow();

      return;
    }
    goto LABEL_19;
  }
  uint64_t v47 = v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v62, v36, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v61, v27, v60);
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v59, v47, v14);
  id v48 = objc_allocWithZone((Class)type metadata accessor for Reservation());
  sub_10006D0EC(v31, v67);
  unint64_t v49 = (void *)Reservation.init(uuid:type:metadata:)();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v51 = v70;
  [v70 setMetadata:isa];

  id v71 = 0;
  if ([v68 save:&v71])
  {
    uint64_t v52 = *(void (**)(char *, uint64_t))(v37 + 8);
    id v53 = v71;
    v52(v47, v14);

    void *v65 = v49;
  }
  else
  {
    id v54 = v71;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v47, v38);
  }
}

void sub_100239100(uint64_t a1, uint64_t a2, void *a3)
{
  sub_100237990(a1, a2);
  if (v3) {
    return;
  }
  __chkstk_darwin(v6, v7);
  void v17[2] = a2;
  unint64_t v9 = (unint64_t)sub_1002B9DD0(sub_10023AD88, v17, v8);
  unint64_t v10 = v9;
  if (v9 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    sub_1000AE7D8();
    id v18 = 0;
    uint64_t v19 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    id v18 = (id)0xD000000000000020;
    uint64_t v19 = 0x80000001003B8790;
    v15._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    sub_100299FAC(22, 0, (uint64_t)v18, v19, 0);
    swift_willThrow();
    return;
  }
  if (!*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_12;
  }
LABEL_4:
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      __break(1u);
    }
    id v11 = *(id *)(v10 + 32);
  }
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  [a3 deleteObject:v12];
  id v18 = 0;
  if ([a3 save:&v18])
  {
    id v13 = v18;
  }
  else
  {
    id v14 = v18;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_100239330(uint64_t a1, void *a2)
{
  sub_100237990(a1, (uint64_t)a2);
  if (!v2)
  {
    unint64_t v5 = v4;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v6) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6)
      {
LABEL_4:
        if (v6 < 1) {
          __break(1u);
        }
        for (uint64_t i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(v5 + 8 * i + 32);
          }
          unint64_t v9 = v8;
          [a2 deleteObject:v8];
        }
      }
    }
    swift_bridgeObjectRelease();
    id v12 = 0;
    if ([a2 save:&v12])
    {
      id v10 = v12;
    }
    else
    {
      id v11 = v12;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_1002394A4(uint64_t a1)
{
  return sub_1002394EC(a1, qword_100459538);
}

uint64_t sub_1002394C8(uint64_t a1)
{
  return sub_1002394EC(a1, qword_100459550);
}

uint64_t sub_1002394EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v8 - 8, v9);
  id v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  sub_1000AD8C8(v12, a2);
  sub_10008E55C(v12, (uint64_t)a2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
  return URL.init(filePath:directoryHint:relativeTo:)();
}

void *sub_100239688()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for NSPersistentStore.StoreType();
  uint64_t v78 = *(void *)(v2 - 8);
  uint64_t v79 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v77 = &v70[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for URL.DirectoryHint();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  unint64_t v75 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = __chkstk_darwin(v13, v15);
  id v18 = &v70[-v17];
  __chkstk_darwin(v16, v19);
  unint64_t v83 = &v70[-v20];
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0;
  uint64_t v74 = v1 + OBJC_IVAR____TtC10seserviced24SERPersistenceController_logger;
  Logger.init(subsystem:category:)();
  if (qword_100453820 != -1) {
    swift_once();
  }
  uint64_t v84 = v10;
  sub_10008E55C(v10, (uint64_t)qword_100459538);
  id v21 = objc_allocWithZone((Class)NSManagedObjectModel);
  URL._bridgeToObjectiveC()(v22);
  uint64_t v24 = v23;
  id v25 = [v21 initWithContentsOfURL:v23];

  id v81 = v25;
  if (!v25)
  {
    swift_release();
    sub_1000AE7D8();
    sub_100299FAC(21, 0, 0xD00000000000001ELL, 0x80000001003B87E0, 0);
    swift_willThrow();
    return (void *)v1;
  }
  uint64_t v73 = v1;
  if (qword_100453828 != -1) {
    swift_once();
  }
  uint64_t v26 = v84;
  uint64_t v72 = sub_10008E55C(v84, (uint64_t)qword_100459550);
  uint64_t v80 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16);
  v80(v18, v72, v26);
  v86[0] = (id)0xD000000000000022;
  v86[1] = (id)0x80000001003B8800;
  (*(void (**)(unsigned char *, void, uint64_t))(v6 + 104))(v9, enum case for URL.DirectoryHint.inferFromPath(_:), v5);
  sub_1001150C4();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  swift_bridgeObjectRelease();
  uint64_t v82 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v82(v18, v26);
  uint64_t v27 = self;
  URL.pathComponents.getter();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = [v27 pathWithComponents:isa];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = self;
  id v31 = [v30 defaultManager];
  uint64_t v32 = v72;
  uint64_t v72 = v11 + 16;
  v80(v18, v32, v26);
  uint64_t v33 = v82;
  URL._bridgeToObjectiveC()(v34);
  uint64_t v36 = v35;
  v33(v18, v26);
  v86[0] = 0;
  LODWORD(v26) = [v31 createDirectoryAtURL:v36 withIntermediateDirectories:1 attributes:0 error:v86];

  id v37 = v86[0];
  if (!v26)
  {
    Swift::String v56 = v37;
    uint64_t v1 = v73;
    swift_release();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v33(v83, v84);
    return (void *)v1;
  }
  id v38 = [v30 defaultManager];
  NSString v39 = String._bridgeToObjectiveC()();
  unsigned int v40 = [v38 fileExistsAtPath:v39];

  id v41 = [v30 defaultManager];
  NSString v42 = String._bridgeToObjectiveC()();
  unsigned int v71 = [v41 isReadableFileAtPath:v42];

  id v43 = [v30 defaultManager];
  NSString v44 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v45 = [v43 isWritableFileAtPath:v44];

  Swift::String v46 = v75;
  id v48 = v83;
  uint64_t v47 = v84;
  v80(v75, (uint64_t)v83, v84);
  unint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = swift_slowAlloc();
    uint64_t v80 = (void (*)(unsigned char *, uint64_t, uint64_t))swift_slowAlloc();
    v86[0] = v80;
    *(_DWORD *)uint64_t v51 = 136315906;
    uint64_t v52 = URL.description.getter();
    uint64_t v85 = sub_100290514(v52, v53, (uint64_t *)v86);
    LODWORD(v74) = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v82(v46, v84);
    *(_WORD *)(v51 + 12) = 2080;
    if (v40) {
      uint64_t v54 = 1702195828;
    }
    else {
      uint64_t v54 = 0x65736C6166;
    }
    if (v40) {
      unint64_t v55 = 0xE400000000000000;
    }
    else {
      unint64_t v55 = 0xE500000000000000;
    }
    uint64_t v85 = sub_100290514(v54, v55, (uint64_t *)v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v51 + 22) = 1024;
    LODWORD(v85) = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v51 + 28) = 1024;
    LODWORD(v85) = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Storage path %s for ReservationsManager exists %s R_OK %{BOOL}d W_OK %{BOOL}d ", (uint8_t *)v51, 0x22u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v48 = v83;
    uint64_t v47 = v84;
    swift_slowDealloc();
  }
  else
  {

    v82(v46, v47);
  }
  Swift::String v57 = v77;
  sub_10006C51C(&qword_1004596A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003782A0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v59;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 64) = v60;
  *(unsigned char *)(inited + 72) = 1;
  unint64_t v61 = sub_1001DB704(inited);
  id v62 = objc_allocWithZone((Class)NSPersistentStoreCoordinator);
  id v63 = v81;
  id v64 = [v62 initWithManagedObjectModel:v81];
  static NSPersistentStore.StoreType.sqlite.getter();
  sub_1002BAF80(v61);
  swift_bridgeObjectRelease();
  uint64_t v65 = v76;
  uint64_t v66 = NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)();
  if (v65)
  {

    uint64_t v1 = v73;
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v57, v79);
LABEL_22:
    v82(v48, v47);
    return (void *)v1;
  }

  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v57, v79);
  id v67 = [objc_allocWithZone((Class)NSManagedObjectContext) initWithConcurrencyType:1];
  uint64_t v1 = v73;
  id v68 = *(void **)(v73 + 112);
  *(void *)(v73 + 112) = v67;

  id result = *(void **)(v1 + 112);
  if (result)
  {
    [result setPersistentStoreCoordinator:v64];

    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t sub_10023A128()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced24SERPersistenceController_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10023A1AC()
{
  return type metadata accessor for SERPersistenceController();
}

uint64_t type metadata accessor for SERPersistenceController()
{
  uint64_t result = qword_100459598;
  if (!qword_100459598) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10023A200()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10023A2A4(void *a1@<X8>)
{
  sub_100238ADC(*(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), a1);
}

uint64_t sub_10023A2C8(id *a1)
{
  return sub_100237B80(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t sub_10023A2E8()
{
  unint64_t result = qword_1004556E0;
  if (!qword_1004556E0)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004556E0);
  }
  return result;
}

void sub_10023A340(void *a1@<X8>)
{
  sub_10023859C(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_10023A364(uint64_t *a1@<X8>)
{
}

uint64_t sub_10023A380(uint64_t a1, int a2, void *a3)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10006C51C(&qword_100459690);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v17 = (char *)v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return swift_bridgeObjectRelease();
  }
  LODWORD(v61) = a2;
  uint64_t v19 = *(int *)(v14 + 48);
  v58[0] = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v58[1] = v3;
  uint64_t v20 = a1 + v58[0];
  uint64_t v63 = *(void *)(v15 + 72);
  uint64_t v60 = a1;
  swift_bridgeObjectRetain();
  sub_100170994(v20, (uint64_t)v17, &qword_100459690);
  uint64_t v59 = v8;
  id v21 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v64 = v7;
  uint64_t v65 = v21;
  v21((unint64_t)v11, v17, v7);
  uint64_t v62 = v19;
  uint64_t v22 = *(void **)&v17[v19];
  uint64_t v66 = a3;
  uint64_t v23 = *a3;
  unint64_t v25 = sub_1002C09FC((uint64_t)v11);
  uint64_t v26 = *(void *)(v23 + 16);
  BOOL v27 = (v24 & 1) == 0;
  uint64_t v28 = v26 + v27;
  if (__OFADD__(v26, v27)) {
    goto LABEL_24;
  }
  char v29 = v24;
  if (*(void *)(v23 + 24) >= v28)
  {
    if (v61)
    {
      if (v24) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1002CD3F0();
      if (v29) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v36 = (void *)*v66;
    *(void *)(*v66 + 8 * (v25 >> 6) + 64) |= 1 << v25;
    uint64_t v37 = v36[6];
    uint64_t v61 = *(void *)(v59 + 72);
    uint64_t v38 = v64;
    v65(v37 + v61 * v25, v11, v64);
    *(void *)(v36[7] + 8 * v25) = v22;
    uint64_t v39 = v36[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    _OWORD v36[2] = v41;
    uint64_t v42 = v18 - 1;
    if (v18 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    uint64_t v43 = v60 + v63 + v58[0];
    while (1)
    {
      sub_100170994(v43, (uint64_t)v17, &qword_100459690);
      v65((unint64_t)v11, v17, v38);
      uint64_t v22 = *(void **)&v17[v62];
      NSString v44 = (void *)*v66;
      unint64_t v46 = sub_1002C09FC((uint64_t)v11);
      uint64_t v47 = v44[2];
      BOOL v48 = (v45 & 1) == 0;
      uint64_t v49 = v47 + v48;
      if (__OFADD__(v47, v48)) {
        break;
      }
      char v50 = v45;
      if (v44[3] < v49)
      {
        sub_1002C5080(v49, 1);
        unint64_t v51 = sub_1002C09FC((uint64_t)v11);
        if ((v50 & 1) != (v52 & 1)) {
          goto LABEL_26;
        }
        unint64_t v46 = v51;
      }
      if (v50) {
        goto LABEL_10;
      }
      unint64_t v53 = (void *)*v66;
      *(void *)(*v66 + 8 * (v46 >> 6) + 64) |= 1 << v46;
      uint64_t v38 = v64;
      v65(v53[6] + v61 * v46, v11, v64);
      *(void *)(v53[7] + 8 * v46) = v22;
      uint64_t v54 = v53[2];
      BOOL v40 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      if (v40) {
        goto LABEL_25;
      }
      v53[2] = v55;
      v43 += v63;
      if (!--v42) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_1002C5080(v28, v61 & 1);
  unint64_t v30 = sub_1002C09FC((uint64_t)v11);
  if ((v29 & 1) == (v31 & 1))
  {
    unint64_t v25 = v30;
    if ((v29 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v33 = swift_allocError();
    swift_willThrow();
    uint64_t v69 = v33;
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    char v34 = swift_dynamicCast();
    uint64_t v35 = v64;
    if ((v34 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v11, v35);
      swift_bridgeObjectRelease();
      return swift_errorRelease();
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_27:
  uint64_t v67 = 0;
  unint64_t v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v56._object = (void *)0x80000001003B4890;
  v56._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v56);
  _print_unlocked<A, B>(_:_:)();
  v57._countAndFlagsBits = 39;
  v57._object = (void *)0xE100000000000000;
  String.append(_:)(v57);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10023A8D4(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v7 = (uint64_t *)type metadata accessor for CredentialType();
  uint64_t v8 = *(v7 - 1);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10006C51C((uint64_t *)&unk_10045B7E0);
  uint64_t result = __chkstk_darwin(v12, v13);
  uint64_t v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = *(void *)(a1 + 16);
  if (!v18) {
    return result;
  }
  LODWORD(v55) = a2;
  v53[1] = v3;
  uint64_t v54 = a1;
  uint64_t v19 = *(int *)(result + 48);
  v53[0] = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = a1 + v53[0];
  uint64_t v59 = *(void *)(v15 + 72);
  swift_bridgeObjectRetain();
  sub_100170994(v20, (uint64_t)v17, (uint64_t *)&unk_10045B7E0);
  uint64_t v56 = v8;
  id v21 = (void *)(v8 + 32);
  uint64_t v22 = *(char **)(v8 + 32);
  uint64_t v60 = v7;
  uint64_t v61 = v21;
  ((void (*)(char *, char *, uint64_t *))v22)(v11, v17, v7);
  Swift::String v57 = v17;
  uint64_t v58 = v19;
  uint64_t v23 = *(void *)&v17[v19];
  uint64_t v62 = a3;
  uint64_t v24 = *a3;
  unint64_t v26 = sub_1002C0E44((uint64_t)v11);
  uint64_t v27 = *(void *)(v24 + 16);
  BOOL v28 = (v25 & 1) == 0;
  uint64_t v29 = v27 + v28;
  if (__OFADD__(v27, v28)) {
    goto LABEL_26;
  }
  LOBYTE(a3) = v25;
  if (*(void *)(v24 + 24) >= v29)
  {
    uint64_t v7 = v61;
    if ((v55 & 1) == 0) {
      goto LABEL_29;
    }
LABEL_7:
    while (1)
    {
      uint64_t v55 = (void (**)(char *, uint64_t *))(v7 - 3);
      uint64_t v32 = (void *)*v62;
      if ((a3 & 1) == 0) {
        break;
      }
      uint64_t v33 = *(void *)(v32[7] + 8 * v26);
      uint64_t v34 = v33 + v23;
      if (!__OFADD__(v33, v23))
      {
        a3 = v60;
        (*v55)(v11, v60);
        uint64_t v35 = v62;
        *(void *)(*(void *)(*v62 + 56) + 8 * v26) = v34;
        uint64_t v22 = (char *)(v18 - 1);
        if (v18 == 1) {
          return swift_bridgeObjectRelease();
        }
        goto LABEL_15;
      }
LABEL_28:
      __break(1u);
LABEL_29:
      sub_1002CD688();
    }
    v32[(v26 >> 6) + 8] |= 1 << v26;
    a3 = v60;
    ((void (*)(unint64_t, char *, uint64_t *))v22)(v32[6] + *(void *)(v56 + 72) * v26, v11, v60);
    *(void *)(v32[7] + 8 * v26) = v23;
    uint64_t v36 = v32[2];
    BOOL v37 = __OFADD__(v36, 1);
    uint64_t v38 = v36 + 1;
    if (!v37)
    {
      void v32[2] = v38;
      uint64_t v35 = v62;
      uint64_t v22 = (char *)(v18 - 1);
      if (v18 == 1) {
        return swift_bridgeObjectRelease();
      }
LABEL_15:
      unint64_t v26 = v54 + v59 + v53[0];
      while (1)
      {
        uint64_t v39 = (uint64_t)v57;
        sub_100170994(v26, (uint64_t)v57, (uint64_t *)&unk_10045B7E0);
        BOOL v40 = (void (*)(void, void, void))*v7;
        ((void (*)(char *, uint64_t, uint64_t *))*v7)(v11, v39, a3);
        uint64_t v23 = *(void *)(v39 + v58);
        uint64_t v41 = *v35;
        unint64_t v18 = sub_1002C0E44((uint64_t)v11);
        uint64_t v43 = *(void *)(v41 + 16);
        BOOL v44 = (v42 & 1) == 0;
        uint64_t v45 = v43 + v44;
        if (__OFADD__(v43, v44)) {
          break;
        }
        LOBYTE(a3) = v42;
        if (*(void *)(v41 + 24) < v45)
        {
          sub_1002C54A4(v45, 1);
          unint64_t v46 = sub_1002C0E44((uint64_t)v11);
          if ((a3 & 1) != (v47 & 1)) {
            goto LABEL_30;
          }
          unint64_t v18 = v46;
        }
        BOOL v48 = (void *)*v62;
        if (a3)
        {
          uint64_t v49 = *(void *)(v48[7] + 8 * v18);
          uint64_t v50 = v49 + v23;
          uint64_t v7 = v61;
          if (__OFADD__(v49, v23)) {
            goto LABEL_28;
          }
          a3 = v60;
          (*v55)(v11, v60);
          uint64_t v35 = v62;
          *(void *)(*(void *)(*v62 + 56) + 8 * v18) = v50;
        }
        else
        {
          v48[(v18 >> 6) + 8] |= 1 << v18;
          a3 = v60;
          uint64_t v7 = v61;
          v40(v48[6] + *(void *)(v56 + 72) * v18, v11, v60);
          *(void *)(v48[7] + 8 * v18) = v23;
          uint64_t v51 = v48[2];
          BOOL v37 = __OFADD__(v51, 1);
          uint64_t v52 = v51 + 1;
          if (v37) {
            goto LABEL_27;
          }
          _OWORD v48[2] = v52;
          uint64_t v35 = v62;
        }
        v26 += v59;
        if (!--v22) {
          return swift_bridgeObjectRelease();
        }
      }
LABEL_26:
      __break(1u);
    }
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  sub_1002C54A4(v29, v55 & 1);
  unint64_t v30 = sub_1002C0E44((uint64_t)v11);
  if ((a3 & 1) == (v31 & 1))
  {
    unint64_t v26 = v30;
    uint64_t v7 = v61;
    goto LABEL_7;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10023AD88(id *a1)
{
  return sub_10023A2C8(a1) & 1;
}

uint64_t sub_10023ADA4()
{
  v1[23] = v0;
  sub_10006C51C(&qword_100456480);
  v1[24] = swift_task_alloc();
  sub_10006C51C(&qword_1004564D0);
  v1[25] = swift_task_alloc();
  return _swift_task_switch(sub_10023AE68, v0, 0);
}

uint64_t sub_10023AE68()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10016B960(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for SESPeerIdentityData(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v4 = &qword_100456480;
LABEL_5:
    uint64_t result = sub_10008E734(v3, v4);
    double v12 = 0.0;
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 200);
  sub_10023B948(v5 + *(int *)(v2 + 32), v6);
  sub_1001862B4(v5);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  uint64_t v10 = *(void *)(v0 + 200);
  if (v9 == 1)
  {
    uint64_t v4 = &qword_1004564D0;
    uint64_t v3 = *(void *)(v0 + 200);
    goto LABEL_5;
  }
  Date.timeIntervalSinceNow.getter();
  double v12 = v13;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
LABEL_7:
  double v14 = fabs(v12) / 3600.0;
  if ((~*(void *)&v14 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v14 <= -1.0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v14 >= 4294967300.0)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v0 + 184);
  uint64_t v17 = *(unsigned char *)(v16 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_preconditionsMet) & 1;
  uint64_t v37 = *(unsigned char *)(v16 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) & 1;
  swift_retain();
  unint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v0 + 184);
  if (v20)
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 67109888;
    *(_DWORD *)(v0 + 52) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 8) = 1024;
    *(_DWORD *)(v0 + 92) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 14) = 1024;
    uint64_t v23 = (_OWORD *)(v21 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
    long long v25 = *(_OWORD *)(v21 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
    long long v24 = *(_OWORD *)(v21 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 16);
    *(_WORD *)(v0 + 88) = *(_WORD *)(v21 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 32);
    *(_OWORD *)(v0 + 56) = v25;
    *(_OWORD *)(v0 + 72) = v24;
    *(_OWORD *)(v0 + 120) = *v23;
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 72);
    sub_100079AE8(v0 + 120);
    sub_100079AE8(v0 + 136);
    sub_1001AF4B4();
    char v27 = v26;
    sub_100079B14(v0 + 120);
    sub_100079B14(v0 + 136);
    *(_DWORD *)(v0 + 208) = v27 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v22 + 20) = 1024;
    *(_DWORD *)(v0 + 212) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reporting state preconditions %{BOOL}d allViewsSynchronized %{BOOL}d serverRecovery %{BOOL}d identityAge %u", (uint8_t *)v22, 0x1Au);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
  uint64_t v28 = *(void *)(v0 + 184);

  uint64_t v29 = (_OWORD *)(v28 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
  long long v31 = *(_OWORD *)(v28 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK);
  long long v30 = *(_OWORD *)(v28 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 16);
  *(_WORD *)(v0 + 48) = *(_WORD *)(v28 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__didRecoverTLK + 32);
  *(_OWORD *)(v0 + 16) = v31;
  *(_OWORD *)(v0 + 32) = v30;
  *(_OWORD *)(v0 + 168) = *v29;
  *(_OWORD *)(v0 + 152) = *(_OWORD *)(v0 + 32);
  sub_100079AE8(v0 + 168);
  sub_100079AE8(v0 + 152);
  sub_1001AF4B4();
  char v33 = v32;
  sub_100079B14(v0 + 168);
  sub_100079B14(v0 + 152);
  uint64_t v34 = self;
  uint64_t v35 = 0x10000;
  if ((v33 & 1) == 0) {
    uint64_t v35 = 0;
  }
  sub_100050764(v34, v35 | (v15 << 32) | (v37 << 8) | v17);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

unint64_t sub_10023B324(char a1)
{
  unint64_t result = 0x74616572436B6C74;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x766F6365526B6C74;
      break;
    case 2:
      unint64_t result = 0x65726168536B6C74;
      break;
    case 3:
      unint64_t result = 0x726F706D496B6C74;
      break;
    case 4:
      unint64_t result = 0x6C6569467261656ELL;
      break;
    case 5:
      unint64_t result = 0x676E69646F636E65;
      break;
    case 6:
      unint64_t result = 0x676E69646F636564;
      break;
    case 7:
    case 10:
    case 22:
    case 25:
    case 26:
    case 27:
    case 32:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x666E6F436D616C73;
      break;
    case 9:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000013;
      break;
    case 12:
      unint64_t result = 0x457473694C6B6C74;
      break;
    case 13:
      unint64_t result = 0xD000000000000011;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 15:
      unint64_t result = 0xD000000000000013;
      break;
    case 16:
      unint64_t result = 0xD000000000000015;
      break;
    case 17:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 18:
      unint64_t result = 0xD000000000000013;
      break;
    case 19:
      unint64_t result = 0xD000000000000013;
      break;
    case 20:
      unint64_t result = 0xD000000000000012;
      break;
    case 21:
      unint64_t result = 0xD000000000000015;
      break;
    case 23:
      unint64_t result = 0xD000000000000015;
      break;
    case 24:
      unint64_t result = 0xD000000000000014;
      break;
    case 28:
      unint64_t result = 0xD000000000000011;
      break;
    case 29:
      unint64_t result = 0x6D73694D64697364;
      break;
    case 30:
      unint64_t result = 0xD000000000000015;
      break;
    case 31:
      unint64_t result = 0xD000000000000012;
      break;
    case 33:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 34:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10023B748(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10023B324(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10023B324(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10023B7D4()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10023B324(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10023B838()
{
  sub_10023B324(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10023B88C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_10023B324(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_10023B8EC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10023BB9C();
  *a1 = result;
  return result;
}

unint64_t sub_10023B91C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10023B324(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10023B948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_1004564D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for KeySyncEvent(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 34 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 34) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 34;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v8 = v6 - 35;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for KeySyncEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 34 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 34) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDD)
  {
    unsigned int v6 = ((a2 - 222) >> 8) + 1;
    void *result = a2 + 34;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10023BB0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 34;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncEvent()
{
  return &type metadata for KeySyncEvent;
}

unint64_t sub_10023BB48()
{
  unint64_t result = qword_1004596B0;
  if (!qword_1004596B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004596B0);
  }
  return result;
}

uint64_t sub_10023BB9C()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x23) {
    return 35;
  }
  else {
    return v0;
  }
}

void sub_10023BBF0(void *a1, uint64_t a2, unint64_t a3)
{
  unsigned int v4 = a1;
  if (a3 >> 60 != 15)
  {
    unint64_t v5 = *(void *)(v3 + 56);
    if (v5 >> 60 == 15)
    {
      uint64_t v6 = *(void *)(v3 + 48);
      *(void *)(v3 + 48) = a2;
      *(void *)(v3 + 56) = a3;
      sub_10006D0EC(a2, a3);
      uint64_t v7 = v6;
      unsigned int v4 = a1;
      sub_100075868(v7, v5);
    }
  }
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  unint64_t v10 = *(void *)(v3 + 56);
  if (v10 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    uint64_t v12 = *(void *)(v3 + 48);
    sub_10006D0EC(v12, *(void *)(v3 + 56));
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v12, v10);
  }
  id v85 = 0;
  id v13 = [v4 BOOLValueForSetting:2 manufacturer:v8 brand:v9 uuid:isa error:&v85];

  if (v13)
  {
    id v14 = v85;
    unsigned __int8 v15 = [v13 BOOLValue];

    *(unsigned char *)(v3 + 64) = v15;
  }
  else
  {
    id v16 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v17 = String._bridgeToObjectiveC()();
  NSString v18 = String._bridgeToObjectiveC()();
  unint64_t v19 = *(void *)(v3 + 56);
  if (v19 >> 60 == 15)
  {
    Class v20 = 0;
  }
  else
  {
    uint64_t v21 = *(void *)(v3 + 48);
    sub_10006D0EC(v21, *(void *)(v3 + 56));
    Class v20 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v21, v19);
  }
  id v85 = 0;
  id v22 = [v4 BOOLValueForSetting:4 manufacturer:v17 brand:v18 uuid:v20 error:&v85];

  if (v22)
  {
    id v23 = v85;
    unsigned __int8 v24 = [v22 BOOLValue];

    *(unsigned char *)(v3 + 65) = v24;
  }
  else
  {
    id v25 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v26 = String._bridgeToObjectiveC()();
  NSString v27 = String._bridgeToObjectiveC()();
  unint64_t v28 = *(void *)(v3 + 56);
  if (v28 >> 60 == 15)
  {
    Class v29 = 0;
  }
  else
  {
    uint64_t v30 = *(void *)(v3 + 48);
    sub_10006D0EC(v30, *(void *)(v3 + 56));
    Class v29 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v30, v28);
  }
  id v85 = 0;
  id v31 = [a1 intValueForSetting:1 manufacturer:v26 brand:v27 uuid:v29 error:&v85];

  if (v31)
  {
    id v32 = v85;
    id v33 = [v31 integerValue];

    *(void *)(v3 + 96) = v33;
  }
  else
  {
    id v34 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v35 = String._bridgeToObjectiveC()();
  NSString v36 = String._bridgeToObjectiveC()();
  unint64_t v37 = *(void *)(v3 + 56);
  if (v37 >> 60 == 15)
  {
    Class v38 = 0;
  }
  else
  {
    uint64_t v39 = *(void *)(v3 + 48);
    sub_10006D0EC(v39, *(void *)(v3 + 56));
    Class v38 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v39, v37);
  }
  id v85 = 0;
  id v40 = [a1 intValueForSetting:2 manufacturer:v35 brand:v36 uuid:v38 error:&v85];

  if (v40)
  {
    id v41 = v85;
    id v42 = [v40 integerValue];

    *(void *)(v3 + 104) = v42;
  }
  else
  {
    id v43 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v44 = String._bridgeToObjectiveC()();
  NSString v45 = String._bridgeToObjectiveC()();
  unint64_t v46 = *(void *)(v3 + 56);
  if (v46 >> 60 == 15)
  {
    Class v47 = 0;
  }
  else
  {
    uint64_t v48 = *(void *)(v3 + 48);
    sub_10006D0EC(v48, *(void *)(v3 + 56));
    Class v47 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v48, v46);
  }
  id v85 = 0;
  id v49 = [a1 BOOLValueForSetting:6 manufacturer:v44 brand:v45 uuid:v47 error:&v85];

  if (v49)
  {
    id v50 = v85;
    unsigned __int8 v51 = [v49 BOOLValue];

    *(unsigned char *)(v3 + 80) = v51;
  }
  else
  {
    id v52 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v53 = String._bridgeToObjectiveC()();
  NSString v54 = String._bridgeToObjectiveC()();
  unint64_t v55 = *(void *)(v3 + 56);
  if (v55 >> 60 == 15)
  {
    Class v56 = 0;
  }
  else
  {
    uint64_t v57 = *(void *)(v3 + 48);
    sub_10006D0EC(v57, *(void *)(v3 + 56));
    Class v56 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v57, v55);
  }
  id v85 = 0;
  id v58 = [a1 arrayValueForSetting:0 manufacturer:v53 brand:v54 uuid:v56 error:&v85];

  id v59 = v85;
  if (v58)
  {
    uint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v61 = v59;

    uint64_t v62 = sub_1000E6BA8(v60);
    swift_bridgeObjectRelease();
    if (v62)
    {
      *(void *)(v3 + 72) = v62;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v63 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v64 = String._bridgeToObjectiveC()();
  NSString v65 = String._bridgeToObjectiveC()();
  unint64_t v66 = *(void *)(v3 + 56);
  if (v66 >> 60 == 15)
  {
    Class v67 = 0;
  }
  else
  {
    uint64_t v68 = *(void *)(v3 + 48);
    sub_10006D0EC(v68, *(void *)(v3 + 56));
    Class v67 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v68, v66);
  }
  id v85 = 0;
  id v69 = [a1 dictValueForSetting:0 manufacturer:v64 brand:v65 uuid:v67 error:&v85];

  id v70 = v85;
  if (v69)
  {
    uint64_t v71 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    id v72 = v70;

    uint64_t v73 = sub_10023C4C8(v71);
    swift_bridgeObjectRelease();
    if (v73)
    {
      *(void *)(v3 + 88) = v73;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    id v74 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  NSString v75 = String._bridgeToObjectiveC()();
  NSString v76 = String._bridgeToObjectiveC()();
  unint64_t v77 = *(void *)(v3 + 56);
  if (v77 >> 60 == 15)
  {
    Class v78 = 0;
  }
  else
  {
    uint64_t v79 = *(void *)(v3 + 48);
    sub_10006D0EC(v79, *(void *)(v3 + 56));
    Class v78 = Data._bridgeToObjectiveC()().super.isa;
    sub_100075868(v79, v77);
  }
  id v85 = 0;
  id v80 = [a1 BOOLValueForSetting:7 manufacturer:v75 brand:v76 uuid:v78 error:&v85];

  if (v80)
  {
    id v81 = v85;
    unsigned __int8 v82 = [v80 BOOLValue];

    *(unsigned char *)(v3 + 112) = v82;
  }
  else
  {
    id v83 = v85;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
}

uint64_t sub_10023C4C8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C(&qword_100459A80);
    int v2 = (unsigned char *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    int v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v24 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v8 << 6);
      int64_t v12 = v8;
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v13 >= v23) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v13);
    int64_t v12 = v8 + 1;
    if (!v14)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v23) {
        goto LABEL_41;
      }
      unint64_t v14 = *(void *)(v24 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v23) {
          goto LABEL_41;
        }
        unint64_t v14 = *(void *)(v24 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v8 + 4;
          if (v8 + 4 >= v23) {
            goto LABEL_41;
          }
          unint64_t v14 = *(void *)(v24 + 8 * v12);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_28:
    sub_10023CB9C(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v30);
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v31 + 8);
    v28[0] = v31[0];
    v28[1] = v31[1];
    uint64_t v29 = v32;
    v27[0] = v30[0];
    v27[1] = v30[1];
    sub_10023CB9C((uint64_t)v27, (uint64_t)v26);
    if (!swift_dynamicCast())
    {
      sub_10023CBF8((uint64_t)v27);
LABEL_40:
      swift_release();
      sub_10008C4F0();
      swift_release();
      return 0;
    }
    sub_1000AA580((uint64_t)v28 + 8, (uint64_t)v26);
    sub_10023CBF8((uint64_t)v27);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t result = static Hasher._hash(seed:bytes:count:)();
    uint64_t v16 = -1 << v2[32];
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)&v6[8 * (v17 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v17) & ~*(void *)&v6[8 * (v17 >> 6)])) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v19 = 0;
      unint64_t v20 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v20 && (v19 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        BOOL v21 = v18 == v20;
        if (v18 == v20) {
          unint64_t v18 = 0;
        }
        v19 |= v21;
        uint64_t v22 = *(void *)&v6[8 * v18];
      }
      while (v22 == -1);
      unint64_t v9 = __clz(__rbit64(~v22)) + (v18 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(_WORD *)(*((void *)v2 + 6) + 2 * v9) = v25;
    *(void *)(*((void *)v2 + 7) + 8 * v9) = v25;
    ++*((void *)v2 + 2);
    int64_t v8 = v12;
    unint64_t v5 = v10;
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v23)
  {
LABEL_41:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v24 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v23) {
      goto LABEL_41;
    }
    unint64_t v14 = *(void *)(v24 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_10023C8BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100075868(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10023C914()
{
  return swift_release();
}

uint64_t sub_10023C924()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier, v2);
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8));
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer), *(void *)(v0 + OBJC_IVAR____TtC10seserviced4Peer_buffer + 8));
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_10023CA54()
{
  return type metadata accessor for AlishaPeer();
}

uint64_t type metadata accessor for AlishaPeer()
{
  uint64_t result = qword_1004596E0;
  if (!qword_1004596E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10023CAA8()
{
  return swift_updateClassMetadata2();
}

uint64_t type metadata accessor for AlishaPeer.Configuration()
{
  return self;
}

uint64_t sub_10023CB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, void *a7)
{
  *(_WORD *)(v7 + 64) = 0;
  *(void *)(v7 + 72) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + 80) = 0;
  *(void *)(v7 + 88) = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)(v7 + 96) = xmmword_10037D290;
  *(unsigned char *)(v7 + 112) = 0;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 48) = a5;
  *(void *)(v7 + 56) = a6;
  sub_1000758F4(a5, a6);
  sub_100075868(0, 0xF000000000000000);
  sub_10023BBF0(a7, 0, 0xF000000000000000);
  return v7;
}

uint64_t sub_10023CB9C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10023CBF8(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100459A88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10023CC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_100088988(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_10008890C(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x10023CDC4);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_10006D144(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

unint64_t *sub_10023CDF4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_43;
      }
      uint64_t v4 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (!v4) {
        return v3;
      }
      uint64_t v29 = (unint64_t *)&_swiftEmptyArrayStorage;
      int64_t v7 = v4 & ~(v4 >> 63);
      sub_1002CF974(0, v7, 0);
      uint64_t v3 = (unint64_t *)&_swiftEmptyArrayStorage;
      if (v2)
      {
        if (v2 == 1) {
          uint64_t v8 = (int)a1;
        }
        else {
          uint64_t v8 = *(void *)(a1 + 16);
        }
        if (v4 < 0)
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
        }
      }
      else
      {
        if (v4 < 0) {
          goto LABEL_45;
        }
        uint64_t v8 = 0;
      }
      int v25 = v2;
      do
      {
        if (!v7)
        {
          __break(1u);
LABEL_36:
          __break(1u);
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
        if (v2)
        {
          if (v2 == 1)
          {
            if (v8 < (int)a1 || v8 >= a1 >> 32) {
              goto LABEL_36;
            }
            uint64_t v9 = __DataStorage._bytes.getter();
            if (!v9) {
              goto LABEL_46;
            }
            uint64_t v10 = v9;
            uint64_t v11 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v11;
            if (__OFSUB__(v8, v11)) {
              goto LABEL_39;
            }
          }
          else
          {
            if (v8 < *(void *)(a1 + 16)) {
              goto LABEL_38;
            }
            if (v8 >= *(void *)(a1 + 24)) {
              goto LABEL_40;
            }
            uint64_t v14 = __DataStorage._bytes.getter();
            if (!v14) {
              goto LABEL_47;
            }
            uint64_t v10 = v14;
            uint64_t v15 = __DataStorage._offset.getter();
            uint64_t v12 = v8 - v15;
            if (__OFSUB__(v8, v15)) {
              goto LABEL_41;
            }
          }
          char v13 = *(unsigned char *)(v10 + v12);
        }
        else
        {
          if (v8 >= BYTE6(a2)) {
            goto LABEL_37;
          }
          uint64_t v26 = a1;
          int v27 = a2;
          __int16 v28 = WORD2(a2);
          char v13 = *((unsigned char *)&v26 + v8);
        }
        sub_10006C51C(&qword_100457200);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = xmmword_100378290;
        *(void *)(v16 + 56) = &type metadata for UInt8;
        *(void *)(v16 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v16 + 32) = v13;
        unint64_t v2 = String.init(format:_:)();
        unint64_t v18 = v17;
        uint64_t v29 = v3;
        unint64_t v20 = v3[2];
        unint64_t v19 = v3[3];
        if (v20 >= v19 >> 1)
        {
          sub_1002CF974(v19 > 1, v20 + 1, 1);
          uint64_t v3 = v29;
        }
        v3[2] = v20 + 1;
        BOOL v21 = &v3[2 * v20];
        v21[4] = v2;
        v21[5] = v18;
        ++v8;
        --v7;
        --v4;
        LODWORD(v2) = v25;
      }
      while (v4);
      return v3;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t v4 = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        goto LABEL_6;
      }
      goto LABEL_44;
    case 3uLL:
      return v3;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_10023D19C(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t result = _swiftEmptyArrayStorage;
    if (!v2) {
      break;
    }
    uint64_t result = (void *)specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(a1 + 8 * v4 + 32);
      }
      uint64_t v6 = v5;
      ++v4;
      id v7 = [v5 dumpState];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v2 == v4) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10023D2E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v2 - 8, v3);
  id v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10006C51C(&qword_1004564D0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_100459A90);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_100378470;
  *(void *)(v10 + 56) = &type metadata for String;
  strcpy((char *)(v10 + 32), "peerIdentifier");
  *(unsigned char *)(v10 + 47) = -18;
  v21[0] = (uint64_t)sub_10023CDF4(*(void *)v0, *(void *)(v0 + 8));
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  *(void *)(v10 + 64) = v11;
  *(void *)(v10 + 72) = v13;
  *(void *)(v10 + 120) = &type metadata for String;
  *(void *)(v10 + 88) = &type metadata for String;
  strcpy((char *)(v10 + 96), "creationTime");
  *(unsigned char *)(v10 + 109) = 0;
  *(_WORD *)(v10 + 110) = -5120;
  uint64_t v14 = type metadata accessor for SESPeerIdentityData(0);
  sub_100170994(v1 + *(int *)(v14 + 32), (uint64_t)v9, &qword_1004564D0);
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15) == 1)
  {
    sub_10008E734((uint64_t)v9, &qword_1004564D0);
    *(void *)(v10 + 152) = &type metadata for String;
    *(void *)(v10 + 128) = 0x3E6C696E3CLL;
    *(void *)(v10 + 136) = 0xE500000000000000;
  }
  else
  {
    uint64_t v22 = v15;
    unint64_t v17 = sub_1001883A8(v21);
    (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 32))(v17, v9, v15);
    sub_1000761D0(v21, (_OWORD *)(v10 + 128));
  }
  *(void *)(v10 + 184) = &type metadata for String;
  *(void *)(v10 + 160) = 0xD000000000000010;
  *(void *)(v10 + 168) = 0x80000001003B5CD0;
  sub_100170994(v1 + *(int *)(v14 + 36), (uint64_t)v5, &qword_1004572C0);
  uint64_t v18 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v5, 1, v18) == 1)
  {
    sub_10008E734((uint64_t)v5, &qword_1004572C0);
    *(void *)(v10 + 216) = &type metadata for String;
    *(void *)(v10 + 192) = 0x3E6C696E3CLL;
    *(void *)(v10 + 200) = 0xE500000000000000;
  }
  else
  {
    uint64_t v19 = sub_10023E988();
    uint64_t v22 = sub_10007582C(0, &qword_100456648);
    v21[0] = v19;
    sub_1002407B4((uint64_t)v5, type metadata accessor for CreationMetadata);
    sub_1000761D0(v21, (_OWORD *)(v10 + 192));
  }
  sub_10007582C(0, &qword_100456648);
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t sub_10023D68C(uint64_t a1)
{
  v19._countAndFlagsBits = 8315;
  v19._object = (void *)0xE200000000000000;
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1002CF974(0, v1, 0);
    uint64_t v4 = a1 + 32;
    uint64_t v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_10010DDC4(v4, (uint64_t)v17);
      sub_100075908(v17, v17[3]);
      uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v7 = v6;
      sub_10007594C((uint64_t)v17);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CF974(0, v2[2] + 1, 1);
        uint64_t v2 = v18;
      }
      unint64_t v9 = v2[2];
      unint64_t v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_1002CF974(v8 > 1, v9 + 1, 1);
        uint64_t v2 = v18;
      }
      v2[2] = v9 + 1;
      uint64_t v10 = &v2[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  v17[0] = v2;
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 32032;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  String.append(_:)(v19);
  return swift_bridgeObjectRelease();
}

uint64_t SESViewInformation.description.getter()
{
  int64_t v1 = v0;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  strcpy((char *)v16, "Current TLK ");
  BYTE5(v16[1]) = 0;
  HIWORD(v16[1]) = -5120;
  id v2 = [v0 currentTLK];
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = [v2 description];

    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v7 = (void *)0xE500000000000000;
    uint64_t v5 = 0x3E6C696E3CLL;
  }
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x616853204B4C540ALL;
  v9._object = (void *)0xEC00000020736572;
  String.append(_:)(v9);
  id v10 = [v1 tlkShares];
  sub_10007582C(0, &qword_100456488);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v11._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x756F69766572500ALL;
  v12._object = (void *)0xEF20734B4C542073;
  String.append(_:)(v12);
  id v13 = [v1 previousTLKs];
  sub_10007582C(0, &qword_100456510);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v14._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16[0];
}

uint64_t sub_10023DAC8()
{
  sub_10006C51C(&qword_100459A90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100378460;
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 32) = 2003134838;
  *(void *)(v1 + 40) = 0xE400000000000000;
  id v2 = [v0 viewName];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  *(void *)(v1 + 64) = v3;
  *(void *)(v1 + 72) = v5;
  *(void *)(v1 + 120) = &type metadata for String;
  *(void *)(v1 + 88) = &type metadata for String;
  *(void *)(v1 + 96) = 0x54746E6572727563;
  *(void *)(v1 + 104) = 0xEA00000000004B4CLL;
  id v6 = [v0 currentTLK];
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 dumpState];

    uint64_t v18 = sub_10007582C(0, &qword_100456648);
    *(void *)&long long v17 = v8;
    sub_1000761D0(&v17, (_OWORD *)(v1 + 128));
  }
  else
  {
    *(void *)(v1 + 152) = &type metadata for String;
    *(void *)(v1 + 128) = 0x3E6C696E3CLL;
    *(void *)(v1 + 136) = 0xE500000000000000;
  }
  *(void *)(v1 + 184) = &type metadata for String;
  *(void *)(v1 + 160) = 0x72616853736B6C74;
  *(void *)(v1 + 168) = 0xEA00000000007365;
  id v9 = [v0 tlkShares];
  sub_10007582C(0, &qword_100456488);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v11 = sub_10023D19C(v10);
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_10006C51C((uint64_t *)&unk_100459A98);
  *(void *)(v1 + 192) = v11;
  *(void *)(v1 + 248) = &type metadata for String;
  *(void *)(v1 + 216) = v12;
  strcpy((char *)(v1 + 224), "previousTLKS");
  *(unsigned char *)(v1 + 237) = 0;
  *(_WORD *)(v1 + 238) = -5120;
  id v13 = [v0 previousTLKs];
  sub_10007582C(0, &qword_100456510);
  unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v15 = sub_10023D19C(v14);
  swift_bridgeObjectRelease();
  *(void *)(v1 + 280) = v12;
  *(void *)(v1 + 256) = v15;
  sub_10007582C(0, &qword_100456648);
  return NSDictionary.init(dictionaryLiteral:)();
}

unint64_t SESPeerIdentity.description.getter()
{
  uint64_t v1 = sub_10006C51C(&qword_100456480);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  id v10 = [v0 peerData];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_100240814(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10006D144(v11, v13);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  sub_100240750((uint64_t)v4, (uint64_t)v9);
  unint64_t v14 = sub_10023E134();
  sub_1002407B4((uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  return v14;
}

unint64_t sub_10023E134()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  unint64_t v25 = 0xD000000000000019;
  unint64_t v26 = 0x80000001003B8AA0;
  uint64_t v6 = *v0;
  unint64_t v7 = v1[1];
  sub_10006D0EC(*v1, v7);
  sub_10023CC58(4, v6, v7, &v23);
  uint64_t v8 = v23;
  unint64_t v9 = v24;
  v22[1] = sub_10023CDF4(v23, v24);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  sub_10006D144(v8, v9);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  uint64_t v15 = type metadata accessor for SESPeerIdentityData(0);
  sub_100170994((uint64_t)v1 + *(int *)(v15 + 36), (uint64_t)v5, &qword_1004572C0);
  uint64_t v16 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v5, 1, v16) == 1)
  {
    sub_10008E734((uint64_t)v5, &qword_1004572C0);
    long long v17 = (void *)0xE500000000000000;
    uint64_t v18 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v18 = sub_10023E730();
    long long v17 = v19;
    sub_1002407B4((uint64_t)v5, type metadata accessor for CreationMetadata);
  }
  v20._countAndFlagsBits = v18;
  v20._object = v17;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_10023E3C0()
{
  uint64_t v1 = sub_10006C51C(&qword_100456480);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  id v10 = [v0 peerData];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_100240814(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10006D144(v11, v13);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  sub_100240750((uint64_t)v4, (uint64_t)v9);
  uint64_t v14 = sub_10023D2E0();
  sub_1002407B4((uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  return v14;
}

uint64_t sub_10023E730()
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v1 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v2 = (uint64_t *)((char *)v0 + v1[7]);
  uint64_t v3 = *v2;
  uint64_t v4 = (void *)v2[1];
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  uint64_t v7 = (uint64_t *)((char *)v0 + v1[6]);
  uint64_t v8 = *v7;
  unint64_t v9 = (void *)v7[1];
  swift_bridgeObjectRetain();
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  uint64_t v12 = *v0;
  unint64_t v13 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 544108320;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  type metadata accessor for Date();
  sub_100240814(&qword_100456500, (void (*)(uint64_t))&type metadata accessor for Date);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x746E756F6363410ALL;
  v17._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v17);
  uint64_t v18 = (uint64_t *)((char *)v0 + v1[8]);
  if (v18[1])
  {
    uint64_t v19 = *v18;
    Swift::String v20 = (void *)v18[1];
  }
  else
  {
    Swift::String v20 = (void *)0xE500000000000000;
    uint64_t v19 = 0x3E6C696E3CLL;
  }
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x20746C6120;
  v22._object = (void *)0xE500000000000000;
  String.append(_:)(v22);
  uint64_t v23 = (uint64_t *)((char *)v0 + v1[9]);
  uint64_t v24 = v23[1];
  if (v24) {
    uint64_t v25 = *v23;
  }
  else {
    uint64_t v25 = 0x3E6C696E3CLL;
  }
  if (v24) {
    unint64_t v26 = (void *)v23[1];
  }
  else {
    unint64_t v26 = (void *)0xE500000000000000;
  }
  swift_bridgeObjectRetain();
  v27._countAndFlagsBits = v25;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  return 0x203A656369766544;
}

uint64_t sub_10023E988()
{
  sub_10006C51C(&qword_100459A90);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_100379170;
  *(void *)(v1 + 32) = 0x6F69737265567773;
  *(void *)(v1 + 40) = 0xE90000000000006ELL;
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  *(void *)(v1 + 56) = &type metadata for String;
  *(void *)(v1 + 64) = v2;
  *(void *)(v1 + 72) = v3;
  *(void *)(v1 + 120) = &type metadata for String;
  *(void *)(v1 + 88) = &type metadata for String;
  *(void *)(v1 + 96) = 1702125924;
  *(void *)(v1 + 104) = 0xE400000000000000;
  uint64_t v4 = (int *)type metadata accessor for CreationMetadata(0);
  Swift::String v5 = (char *)v0 + v4[5];
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v1 + 152) = v6;
  uint64_t v7 = sub_1001883A8((uint64_t *)(v1 + 128));
  (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v6 - 8) + 16))(v7, v5, v6);
  *(void *)(v1 + 184) = &type metadata for String;
  unint64_t v8 = 0xE500000000000000;
  *(void *)(v1 + 160) = 0x6C65646F6DLL;
  *(void *)(v1 + 168) = 0xE500000000000000;
  unint64_t v9 = (uint64_t *)((char *)v0 + v4[6]);
  uint64_t v10 = v9[1];
  *(void *)(v1 + 192) = *v9;
  *(void *)(v1 + 200) = v10;
  *(void *)(v1 + 248) = &type metadata for String;
  *(void *)(v1 + 216) = &type metadata for String;
  *(void *)(v1 + 224) = 0x656369766564;
  *(void *)(v1 + 232) = 0xE600000000000000;
  Swift::String v11 = (uint64_t *)((char *)v0 + v4[7]);
  uint64_t v12 = v11[1];
  *(void *)(v1 + 256) = *v11;
  *(void *)(v1 + 264) = v12;
  *(void *)(v1 + 312) = &type metadata for String;
  *(void *)(v1 + 280) = &type metadata for String;
  *(void *)(v1 + 288) = 1684632420;
  *(void *)(v1 + 296) = 0xE400000000000000;
  unint64_t v13 = (uint64_t *)((char *)v0 + v4[8]);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  uint64_t v16 = 0x3E6C696E3CLL;
  if (v15)
  {
    unint64_t v17 = v15;
  }
  else
  {
    uint64_t v14 = 0x3E6C696E3CLL;
    unint64_t v17 = 0xE500000000000000;
  }
  *(void *)(v1 + 320) = v14;
  *(void *)(v1 + 328) = v17;
  *(void *)(v1 + 376) = &type metadata for String;
  *(void *)(v1 + 344) = &type metadata for String;
  *(void *)(v1 + 352) = 0x44495344746C61;
  *(void *)(v1 + 360) = 0xE700000000000000;
  uint64_t v18 = (uint64_t *)((char *)v0 + v4[9]);
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  *(void *)(v1 + 408) = &type metadata for String;
  if (v20)
  {
    uint64_t v16 = v19;
    unint64_t v8 = v20;
  }
  *(void *)(v1 + 384) = v16;
  *(void *)(v1 + 392) = v8;
  sub_10007582C(0, &qword_100456648);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return NSDictionary.init(dictionaryLiteral:)();
}

unint64_t SESTLKShare.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_100456540);
  __chkstk_darwin(v2 - 8, v3);
  id v49 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v53 = 0;
  unint64_t v54 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  unint64_t v53 = 0xD000000000000014;
  unint64_t v54 = 0x80000001003B89A0;
  id v5 = [v0 tlkUUID];
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  sub_10023CC58(4, v6, v8, &v51);
  uint64_t v9 = v51;
  unint64_t v10 = v52;
  id v50 = sub_10023CDF4(v51, v52);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  sub_10006D144(v9, v10);
  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 2120480;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  id v16 = [v1 sourcePeerIdentifier];
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  sub_10023CC58(4, v17, v19, &v51);
  uint64_t v20 = v51;
  unint64_t v21 = v52;
  id v50 = sub_10023CDF4(v51, v52);
  uint64_t v22 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  sub_10006D144(v20, v21);
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 540945696;
  v26._object = (void *)0xE400000000000000;
  String.append(_:)(v26);
  id v27 = [v1 targetPeerIdentifier];
  uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  sub_10023CC58(4, v28, v30, &v51);
  uint64_t v31 = v51;
  unint64_t v32 = v52;
  id v50 = sub_10023CDF4(v51, v52);
  uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
  NSString v35 = v34;
  swift_bridgeObjectRelease();
  sub_10006D144(v31, v32);
  v36._countAndFlagsBits = v33;
  v36._object = v35;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 0x65726168530A5D20;
  v37._object = (void *)0xED00002061746144;
  String.append(_:)(v37);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v38 = type metadata accessor for SESTLKShareData(0);
  id v39 = [v1 shareData];
  uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v41;

  uint64_t v43 = (uint64_t)v49;
  sub_100240814(&qword_100456508, (void (*)(uint64_t))type metadata accessor for SESTLKShareData);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10006D144(v40, v42);
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v43, 0, 1, v38);
  uint64_t v44 = sub_10023F0B8();
  unint64_t v46 = v45;
  sub_1002407B4(v43, type metadata accessor for SESTLKShareData);
  v47._countAndFlagsBits = v44;
  v47._object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  return v53;
}

uint64_t sub_10023F0B8()
{
  uint64_t v1 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  uint64_t v16 = 0x203A20637253;
  unint64_t v17 = 0xE600000000000000;
  v5._countAndFlagsBits = sub_10023E134();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x203A207473440ALL;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  uint64_t v7 = type metadata accessor for SESTLKShareData(0);
  v8._countAndFlagsBits = sub_10023E134();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x646574616572430ALL;
  v9._object = (void *)0xEB00000000203A20;
  String.append(_:)(v9);
  sub_100170994(v0 + *(int *)(v7 + 28), (uint64_t)v4, &qword_1004572C0);
  uint64_t v10 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v4, 1, v10) == 1)
  {
    sub_10008E734((uint64_t)v4, &qword_1004572C0);
    uint64_t v11 = (void *)0xE500000000000000;
    uint64_t v12 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v12 = sub_10023E730();
    uint64_t v11 = v13;
    sub_1002407B4((uint64_t)v4, type metadata accessor for CreationMetadata);
  }
  v14._countAndFlagsBits = v12;
  v14._object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_10023F2F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_100456540);
  __chkstk_darwin(v2 - 8, v3);
  Swift::String v36 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_100459A90);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100378460;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 32) = 0x444955554B4C54;
  *(void *)(v5 + 40) = 0xE700000000000000;
  id v6 = [v0 tlkUUID];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  *(void *)&long long v37 = sub_10023CDF4(v7, v9);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  sub_10006D144(v7, v9);
  *(void *)(v5 + 64) = v10;
  *(void *)(v5 + 72) = v12;
  *(void *)(v5 + 120) = &type metadata for String;
  *(void *)(v5 + 88) = &type metadata for String;
  *(void *)(v5 + 96) = 0xD000000000000014;
  *(void *)(v5 + 104) = 0x80000001003B8A20;
  id v13 = [v1 sourcePeerIdentifier];
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  *(void *)&long long v37 = sub_10023CDF4(v14, v16);
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  sub_10006D144(v14, v16);
  *(void *)(v5 + 128) = v17;
  *(void *)(v5 + 136) = v19;
  *(void *)(v5 + 184) = &type metadata for String;
  *(void *)(v5 + 152) = &type metadata for String;
  *(void *)(v5 + 160) = 0xD000000000000014;
  *(void *)(v5 + 168) = 0x80000001003B8A40;
  id v20 = [v1 targetPeerIdentifier];
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  *(void *)&long long v37 = sub_10023CDF4(v21, v23);
  uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  sub_10006D144(v21, v23);
  *(void *)(v5 + 192) = v24;
  *(void *)(v5 + 200) = v26;
  *(void *)(v5 + 248) = &type metadata for String;
  *(void *)(v5 + 216) = &type metadata for String;
  *(void *)(v5 + 224) = 0x7461446572616873;
  *(void *)(v5 + 232) = 0xE900000000000061;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v27 = type metadata accessor for SESTLKShareData(0);
  id v28 = [v1 shareData];
  uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  uint64_t v32 = (uint64_t)v36;
  sub_100240814(&qword_100456508, (void (*)(uint64_t))type metadata accessor for SESTLKShareData);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  sub_10006D144(v29, v31);
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v32, 0, 1, v27);
  uint64_t v33 = sub_10023F7EC();
  uint64_t v38 = sub_10007582C(0, &qword_100456648);
  *(void *)&long long v37 = v33;
  sub_1002407B4(v32, type metadata accessor for SESTLKShareData);
  sub_1000761D0(&v37, (_OWORD *)(v5 + 256));
  sub_10007582C(0, &qword_100456648);
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t sub_10023F7EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_100459A90);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_100378470;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 32) = 0xD000000000000013;
  *(void *)(v6 + 40) = 0x80000001003B5CF0;
  uint64_t v7 = sub_10023D2E0();
  uint64_t v8 = sub_10007582C(0, &qword_100456648);
  *(void *)(v6 + 64) = v7;
  *(void *)(v6 + 120) = &type metadata for String;
  *(void *)(v6 + 88) = v8;
  *(void *)(v6 + 96) = 0xD000000000000013;
  *(void *)(v6 + 104) = 0x80000001003B5D10;
  uint64_t v9 = type metadata accessor for SESTLKShareData(0);
  *(void *)(v6 + 128) = sub_10023D2E0();
  *(void *)(v6 + 184) = &type metadata for String;
  *(void *)(v6 + 152) = v8;
  *(void *)(v6 + 160) = 0xD000000000000010;
  *(void *)(v6 + 168) = 0x80000001003B8A60;
  sub_100170994(v1 + *(int *)(v9 + 28), (uint64_t)v5, &qword_1004572C0);
  uint64_t v10 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_10008E734((uint64_t)v5, &qword_1004572C0);
    *(void *)(v6 + 216) = &type metadata for String;
    *(void *)(v6 + 192) = 0x3E6C696E3CLL;
    *(void *)(v6 + 200) = 0xE500000000000000;
  }
  else
  {
    uint64_t v11 = sub_10023E988();
    uint64_t v14 = v8;
    *(void *)&long long v13 = v11;
    sub_1002407B4((uint64_t)v5, type metadata accessor for CreationMetadata);
    sub_1000761D0(&v13, (_OWORD *)(v6 + 192));
  }
  return NSDictionary.init(dictionaryLiteral:)();
}

id sub_10023FA38(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();

  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t SESTLKRecord.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v40 = (uint64_t)&v41[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10006C51C(&qword_1004575E0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (void *)((char *)&v41[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v42 = 0;
  unint64_t v43 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v9._object = (void *)0x80000001003B89C0;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  id v10 = [v0 view];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  long long v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x444955556B6C740ALL;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  id v16 = [v1 tlkUUID];
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  v41[0] = sub_10023CDF4(v17, v19);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v17, v19);
  sub_1002406B4(8);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x54746E657261700ALL;
  v21._object = (void *)0xEF20444955554B4CLL;
  String.append(_:)(v21);
  id v22 = [v1 tlkUUID];
  uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  v41[0] = sub_10023CDF4(v23, v25);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v23, v25);
  sub_1002406B4(8);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = static String._fromSubstring(_:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x4464726F6365720ALL;
  v27._object = (void *)0xEC00000020617461;
  String.append(_:)(v27);
  sub_1001A3F20(v8);
  uint64_t v28 = type metadata accessor for SESTLKRecordData(0);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v8, 0, 1, v28);
  strcpy((char *)v41, "Created by: ");
  BYTE5(v41[1]) = 0;
  HIWORD(v41[1]) = -5120;
  uint64_t v29 = (uint64_t)v8 + *(int *)(v28 + 20);
  uint64_t v30 = v40;
  sub_100170994(v29, v40, &qword_1004572C0);
  uint64_t v31 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31) == 1)
  {
    sub_10008E734(v30, &qword_1004572C0);
    uint64_t v32 = (void *)0xE500000000000000;
    uint64_t v33 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v33 = sub_10023E730();
    uint64_t v32 = v34;
    sub_1002407B4(v30, type metadata accessor for CreationMetadata);
  }
  v35._countAndFlagsBits = v33;
  v35._object = v32;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  uint64_t v37 = v41[0];
  Swift::String v36 = (void *)v41[1];
  sub_1002407B4((uint64_t)v8, type metadata accessor for SESTLKRecordData);
  v38._countAndFlagsBits = v37;
  v38._object = v36;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  return v42;
}

uint64_t sub_10024000C()
{
  uint64_t v1 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  strcpy((char *)v12, "Created by: ");
  BYTE5(v12[1]) = 0;
  HIWORD(v12[1]) = -5120;
  uint64_t v5 = type metadata accessor for SESTLKRecordData(0);
  sub_100170994(v0 + *(int *)(v5 + 20), (uint64_t)v4, &qword_1004572C0);
  uint64_t v6 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6) == 1)
  {
    sub_10008E734((uint64_t)v4, &qword_1004572C0);
    uint64_t v7 = (void *)0xE500000000000000;
    uint64_t v8 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v8 = sub_10023E730();
    uint64_t v7 = v9;
    sub_1002407B4((uint64_t)v4, type metadata accessor for CreationMetadata);
  }
  v10._countAndFlagsBits = v8;
  v10._object = v7;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  return v12[0];
}

uint64_t sub_1002401B4()
{
  uint64_t v1 = sub_10006C51C(&qword_1004575E0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006C51C(&qword_100459A90);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100378460;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 32) = 2003134838;
  *(void *)(v5 + 40) = 0xE400000000000000;
  id v6 = [v0 view];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  *(void *)(v5 + 64) = v7;
  *(void *)(v5 + 72) = v9;
  *(void *)(v5 + 120) = &type metadata for String;
  *(void *)(v5 + 88) = &type metadata for String;
  *(void *)(v5 + 96) = 0x444955556B6C74;
  *(void *)(v5 + 104) = 0xE700000000000000;
  id v10 = [v0 tlkUUID];
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  *(void *)(v5 + 128) = v11;
  *(void *)(v5 + 136) = v13;
  *(void *)(v5 + 184) = &type metadata for String;
  *(void *)(v5 + 152) = &type metadata for Data;
  strcpy((char *)(v5 + 160), "parentTLKUUID");
  *(_WORD *)(v5 + 174) = -4864;
  id v14 = [v0 parentTLKUUID];
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  *(void *)(v5 + 192) = v15;
  *(void *)(v5 + 200) = v17;
  *(void *)(v5 + 248) = &type metadata for String;
  *(void *)(v5 + 216) = &type metadata for Data;
  *(void *)(v5 + 224) = 0x614464726F636572;
  *(void *)(v5 + 232) = 0xEA00000000006174;
  sub_1001A3F20(v4);
  uint64_t v18 = type metadata accessor for SESTLKRecordData(0);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 0, 1, v18);
  uint64_t v19 = sub_1002404D4();
  uint64_t v23 = sub_10007582C(0, &qword_100456648);
  *(void *)&long long v22 = v19;
  sub_1002407B4((uint64_t)v4, type metadata accessor for SESTLKRecordData);
  sub_1000761D0(&v22, (_OWORD *)(v5 + 256));
  sub_10007582C(0, &qword_100456648);
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t sub_1002404D4()
{
  uint64_t v1 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_100459A90);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_100378290;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 32) = 0xD000000000000010;
  *(void *)(v5 + 40) = 0x80000001003B5CD0;
  uint64_t v6 = type metadata accessor for SESTLKRecordData(0);
  sub_100170994(v0 + *(int *)(v6 + 20), (uint64_t)v4, &qword_1004572C0);
  uint64_t v7 = type metadata accessor for CreationMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v4, 1, v7) == 1)
  {
    sub_10008E734((uint64_t)v4, &qword_1004572C0);
    *(void *)(v5 + 88) = &type metadata for String;
    *(void *)(v5 + 64) = 0x3E6C696E3CLL;
    *(void *)(v5 + 72) = 0xE500000000000000;
  }
  else
  {
    uint64_t v8 = sub_10023E988();
    uint64_t v11 = sub_10007582C(0, &qword_100456648);
    *(void *)&long long v10 = v8;
    sub_1002407B4((uint64_t)v4, type metadata accessor for CreationMetadata);
    sub_1000761D0(&v10, (_OWORD *)(v5 + 64));
  }
  sub_10007582C(0, &qword_100456648);
  return NSDictionary.init(dictionaryLiteral:)();
}

uint64_t sub_1002406B4(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

uint64_t sub_100240750(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SESPeerIdentityData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002407B4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100240814(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10024085C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return _swift_continuation_throwingResumeWithError(v3, v5);
  }
  else
  {
    uint64_t v10 = a2;
    uint64_t v8 = *(void *)(*(void *)(v3 + 64) + 40);
    swift_unknownObjectRetain();
    sub_10025224C((uint64_t)&v10, v8);
    return swift_continuation_throwingResume();
  }
}

void sub_100240924(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

uint64_t sub_1002409BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[63] = a6;
  v7[64] = a7;
  v7[61] = a4;
  v7[62] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[65] = v8;
  v7[66] = *(void *)(v8 - 8);
  v7[67] = swift_task_alloc();
  v7[68] = swift_task_alloc();
  v7[69] = swift_task_alloc();
  v7[70] = swift_task_alloc();
  v7[71] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for StateInternal();
  v7[72] = v9;
  v7[73] = *(void *)(v9 - 8);
  v7[74] = swift_task_alloc();
  return _swift_task_switch(sub_100240B3C, 0, 0);
}

uint64_t sub_100240B3C()
{
  id v83 = v0;
  uint64_t v1 = v0[61];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24);
  if (v2 < 0
    && (v2 != 0x8000000000000000
     || (*(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8) | *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16) | *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState)) != 0))
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E55C(v4, (uint64_t)qword_1004686A8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Attempted to enter wired mode in invalid state", v7, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    uint64_t v9 = swift_allocError();
    uint64_t v10 = 10;
    goto LABEL_37;
  }
  uint64_t v11 = v0[62];
  uint64_t v12 = (unint64_t *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  unint64_t v13 = *v12;
  id v14 = (void *)swift_task_alloc();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v11;
  swift_bridgeObjectRetain();
  unint64_t v15 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_1001D4E98, v14, v13);
  swift_task_dealloc();
  if (!(v15 >> 62))
  {
    uint64_t v16 = v0 + 59;
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_13;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    if (qword_1004536D0 == -1)
    {
LABEL_33:
      uint64_t v64 = v0[71];
      uint64_t v65 = v0[66];
      uint64_t v66 = v0[65];
      uint64_t v67 = v0[62];
      uint64_t v68 = type metadata accessor for Logger();
      sub_10008E55C(v68, (uint64_t)qword_1004686A8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v64, v67, v66);
      id v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      BOOL v71 = os_log_type_enabled(v69, v70);
      uint64_t v72 = v0[71];
      uint64_t v73 = v0[66];
      if (v71)
      {
        uint64_t v81 = v0[65];
        uint64_t v74 = swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 136315394;
        *uint64_t v16 = sub_100290514(0xD000000000000025, 0x80000001003B8C30, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v74 + 12) = 2080;
        uint64_t v75 = UUID.uuidString.getter();
        v0[60] = sub_100290514(v75, v76, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v81);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s: Credential %s not found", (uint8_t *)v74, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v73 + 8))(v0[71], v0[65]);
      }

      sub_10008E594();
      uint64_t v9 = swift_allocError();
      uint64_t v10 = 1;
LABEL_37:
      *uint64_t v8 = v10;
      swift_willThrow();
LABEL_38:
      v0[93] = v9;
      unint64_t v77 = (void *)swift_task_alloc();
      v0[94] = v77;
      *unint64_t v77 = v0;
      v77[1] = sub_10024395C;
      return sub_1001BDE44();
    }
LABEL_43:
    swift_once();
    goto LABEL_33;
  }
  uint64_t v16 = v0 + 59;
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_32;
  }
LABEL_13:
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v17 = *(id *)(v15 + 32);
      goto LABEL_16;
    }
    __break(1u);
    goto LABEL_43;
  }
  id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_16:
  uint64_t v18 = v17;
  v0[75] = v17;
  uint64_t v19 = v0[74];
  uint64_t v20 = v0[73];
  uint64_t v21 = v0[72];
  swift_bridgeObjectRelease();
  CredentialInternal.state.getter();
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21);
  uint64_t v23 = (void *)v0[74];
  uint64_t v24 = v0[73];
  uint64_t v25 = v0[72];
  if (v22 != enum case for StateInternal.installed(_:))
  {
    (*(void (**)(void, uint64_t))(v24 + 8))(v0[74], v25);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v47 = v0[70];
    uint64_t v48 = v0[66];
    uint64_t v49 = v0[65];
    uint64_t v50 = v0[62];
    uint64_t v51 = type metadata accessor for Logger();
    sub_10008E55C(v51, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v50, v49);
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v55 = v0[70];
    uint64_t v56 = v0[66];
    uint64_t v57 = v0[65];
    if (v54)
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v82 = swift_slowAlloc();
      *(_DWORD *)uint64_t v58 = 136315394;
      v0[46] = sub_100290514(0xD000000000000025, 0x80000001003B8C30, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v58 + 12) = 2080;
      uint64_t v59 = UUID.uuidString.getter();
      v0[41] = sub_100290514(v59, v60, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s: Credential %s not installed", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v56 + 8))(v0[70], v0[65]);
    }

    sub_10008E594();
    uint64_t v9 = swift_allocError();
    *id v63 = 7;
    swift_willThrow();

    goto LABEL_38;
  }
  (*(void (**)(void, uint64_t))(v24 + 96))(v0[74], v25);
  v0[76] = *v23;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v26 = v0[69];
  uint64_t v27 = v0[66];
  uint64_t v28 = v0[65];
  uint64_t v30 = (void *)v0[61];
  uint64_t v29 = v0[62];
  uint64_t v31 = type metadata accessor for Logger();
  v0[77] = sub_10008E55C(v31, (uint64_t)qword_1004686A8);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16);
  v0[78] = v32;
  v0[79] = (v27 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v32(v26, v29, v28);
  id v33 = v30;
  id v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = v0[69];
  uint64_t v38 = v0[66];
  uint64_t v39 = v0[65];
  uint64_t v40 = (void *)v0[61];
  if (v36)
  {
    uint64_t v79 = v0[65];
    id v80 = v18;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(_DWORD *)uint64_t v41 = 136315394;
    os_log_type_t type = v35;
    uint64_t v42 = UUID.uuidString.getter();
    v0[57] = sub_100290514(v42, v43, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v44 = UUID.uuidString.getter();
    v0[58] = sub_100290514(v44, v45, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v46(v37, v79);
    _os_log_impl((void *)&_mh_execute_header, v34, type, "Session %s: Setting credential %s in Wired Mode", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v18 = v80;
    swift_slowDealloc();
  }
  else
  {

    unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v46(v37, v39);
  }

  v0[80] = v46;
  id v61 = (void *)swift_task_alloc();
  v0[81] = v61;
  void *v61 = v0;
  v61[1] = sub_1002415BC;
  return sub_1001BC3F8((uint64_t)v18);
}

uint64_t sub_1002415BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v6 = (void *)*v5;
  v6[82] = a1;
  v6[83] = a2;
  v6[84] = a3;
  v6[85] = a4;
  v6[86] = v4;
  swift_task_dealloc();
  if (v4) {
    uint64_t v7 = sub_100243B88;
  }
  else {
    uint64_t v7 = sub_10024170C;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_10024170C()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void **)(v0 + 664);
  if (v1)
  {
    id v2 = *(id *)(v0 + 600);
    id v35 = v1;
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void **)(v0 + 600);
      uint64_t v6 = *(void *)(v0 + 544);
      uint64_t v33 = *(void *)(v0 + 520);
      id v34 = *(void (**)(uint64_t, uint64_t))(v0 + 640);
      uint64_t v7 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v0 + 440) = sub_100290514(0xD000000000000025, 0x80000001003B8C30, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      CredentialInternal.identifier.getter();
      uint64_t v8 = UUID.uuidString.getter();
      unint64_t v10 = v9;
      v34(v6, v33);
      *(void *)(v0 + 448) = sub_100290514(v8, v10, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Starting new wired mode handle for credential %s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      int v22 = *(void **)(v0 + 600);
    }
    unint64_t v23 = *(void *)(v0 + 680);
    uint64_t v24 = *(void **)(v0 + 672);
    uint64_t v25 = *(void **)(v0 + 664);
    uint64_t v26 = *(void **)(v0 + 656);
    unint64_t v27 = v23 | 0x4000000000000000;
    id v28 = v24;
    id v29 = (id)v23;
    id v30 = v35;
    id v31 = v26;
    sub_1001BDB6C(v26, v25, v24, v27);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 360;
    *(void *)(v0 + 88) = sub_100241C30;
    uint64_t v32 = swift_continuation_init();
    *(void *)(v0 + 184) = _NSConcreteStackBlock;
    *(void *)(v0 + 192) = 0x40000000;
    *(void *)(v0 + 200) = sub_10024085C;
    *(void *)(v0 + 208) = &unk_1004172C8;
    *(void *)(v0 + 216) = v32;
    [v30 requestSETransceiverWithCompletion:v0 + 184];
    return _swift_continuation_await(v0 + 80);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136315138;
      *(void *)(v0 + 392) = sub_100290514(0xD000000000000025, 0x80000001003B8C30, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: NFCredentialSession in handle has been invalidated", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v14 = *(void **)(v0 + 680);
    unint64_t v15 = *(void **)(v0 + 672);
    uint64_t v16 = *(void **)(v0 + 656);
    id v17 = *(void **)(v0 + 600);
    sub_10008E594();
    uint64_t v18 = swift_allocError();
    *uint64_t v19 = 9;
    swift_willThrow();

    *(void *)(v0 + 744) = v18;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 752) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10024395C;
    return sub_1001BDE44();
  }
}

uint64_t sub_100241C30()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 696) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    id v2 = sub_100243C60;
  }
  else
  {
    id v2 = sub_100241D74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100241D74()
{
  uint64_t v168 = v0;
  id v2 = *(objc_class **)(v0 + 360);
  *(void *)(v0 + 704) = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v162 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315138;
      *(void *)(v0 + 296) = sub_100290514(0xD000000000000025, 0x80000001003B8C30, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s: Unable to get transceiver", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    Class v27 = *(Class *)(v0 + 680);
    Class v28 = *(Class *)(v0 + 672);
    Class v29 = *(Class *)(v0 + 664);
    Class v30 = *(Class *)(v0 + 656);
    Class v31 = *(Class *)(v0 + 600);
    sub_10008E594();
    uint64_t v32 = swift_allocError();
    *uint64_t v33 = 9;
    swift_willThrow();

    goto LABEL_186;
  }
  uint64_t v3 = (NSArray *)(v0 + 344);
  *(void *)(v0 + 304) = 0;
  id v4 = [(objc_class *)v2 listAppletsAndRefreshCache:0 outError:v0 + 304];
  Class v5 = *(Class *)(v0 + 304);
  v148 = (NSArray *)v0;
  if (!v4)
  {
    uint64_t v44 = v5;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v162 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136315394;
      *(void *)(v0 + 312) = sub_100290514(0xD000000000000025, 0x80000001003B8C30, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v48 = Error.localizedDescription.getter();
      *(void *)(v0 + 336) = sub_100290514(v48, v49, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s: Nearfield error %s encountered when listing applets", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    Class v50 = *(Class *)(v0 + 680);
    Class v51 = *(Class *)(v0 + 672);
    Class v52 = *(Class *)(v0 + 664);
    Class v53 = *(Class *)(v0 + 656);
    Class v54 = *(Class *)(v0 + 600);
    [(objc_class *)v2 invalidate];
    sub_10008E594();
    uint64_t v32 = swift_allocError();
    void *v55 = 8;
    swift_willThrow();
    swift_errorRelease();
    swift_unknownObjectRelease();

LABEL_186:
    *(void *)(v0 + 744) = v32;
    uint64_t v136 = (objc_class *)swift_task_alloc();
    *(void *)(v0 + 752) = v136;
    *(void *)uint64_t v136 = v0;
    *((void *)v136 + 1) = sub_10024395C;
    return sub_1001BDE44();
  }
  uint64_t v6 = v4;
  unint64_t v7 = *(void *)(v0 + 608);
  sub_10011FB68();
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v5;

  [(objc_class *)v2 invalidate];
  unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
  *(void *)(v0 + 344) = _swiftEmptyArrayStorage;
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v154 = v8;
    if (v11) {
      goto LABEL_5;
    }
LABEL_29:
    id v35 = _swiftEmptyArrayStorage;
    sub_1002308A8((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v154 = v8;
  if (!v11) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v162 = _swiftEmptyArrayStorage;
  int v158 = (NSArray *)(v0 + 344);
  sub_1002CFA80(0, v11 & ~(v11 >> 63), 0);
  if (v11 < 0) {
    goto LABEL_214;
  }
  uint64_t v12 = 0;
  uint64_t v13 = (uint64_t)v162;
  unint64_t v14 = v7 & 0xC000000000000001;
  uint64_t v15 = *(void *)(v0 + 608) + 32;
  do
  {
    if (v14) {
      id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v16 = *(id *)(v15 + 8 * v12);
    }
    id v17 = v16;
    uint64_t v18 = InstanceInfoInternal.securityDomainAID.getter();
    uint64_t v20 = v19;

    uint64_t v162 = (void *)v13;
    unint64_t v22 = *(void *)(v13 + 16);
    unint64_t v21 = *(void *)(v13 + 24);
    if (v22 >= v21 >> 1)
    {
      sub_1002CFA80(v21 > 1, v22 + 1, 1);
      uint64_t v13 = (uint64_t)v162;
    }
    ++v12;
    *(void *)(v13 + 16) = v22 + 1;
    uint64_t v23 = v13 + 16 * v22;
    *(void *)(v23 + 32) = v18;
    *(void *)(v23 + 40) = v20;
  }
  while (v11 != v12);
  sub_1002308A8(v13);
  uint64_t v162 = _swiftEmptyArrayStorage;
  sub_1002CFA80(0, v11 & ~(v11 >> 63), 0);
  uint64_t v34 = 0;
  id v35 = _swiftEmptyArrayStorage;
  do
  {
    if (v14) {
      id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v36 = *(id *)(v15 + 8 * v34);
    }
    uint64_t v37 = v36;
    uint64_t v38 = InstanceInfoInternal.instanceAID.getter();
    uint64_t v40 = v39;

    uint64_t v162 = v35;
    unint64_t v42 = v35[2];
    unint64_t v41 = v35[3];
    if (v42 >= v41 >> 1)
    {
      sub_1002CFA80(v41 > 1, v42 + 1, 1);
      id v35 = v162;
    }
    ++v34;
    _OWORD v35[2] = v42 + 1;
    unint64_t v43 = &v35[2 * v42];
    v43[4] = v38;
    v43[5] = v40;
  }
  while (v11 != v34);
  uint64_t v0 = (uint64_t)v148;
  swift_bridgeObjectRelease();
  uint64_t v8 = v154;
  uint64_t v3 = v158;
  unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_30:
  sub_1002308A8((uint64_t)v35);
  unint64_t v138 = (NSArray *)(v0 + 352);
  *(void *)(v0 + 352) = _swiftEmptyArrayStorage;
  Class isa = v3->super.isa;
  uint64_t v141 = *((void *)v3->super.isa + 2);
  if (!v141)
  {
    swift_bridgeObjectRelease();
    if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
      goto LABEL_181;
    }
LABEL_171:
    if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_172;
    }
LABEL_182:
    unint64_t v119 = *(void (**)(Class, Class, Class))(v0 + 624);
    Class v120 = *(Class *)(v0 + 536);
    Class v121 = *(Class *)(v0 + 520);
    Class v122 = *(Class *)(v0 + 496);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v119(v120, v122, v121);
    long long v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    BOOL v125 = os_log_type_enabled(v123, v124);
    Class v126 = *(Class *)(v0 + 536);
    if (v125)
    {
      Class v157 = *(Class *)(v0 + 520);
      uint64_t v160 = *(void (**)(Class, Class))(v0 + 640);
      uint64_t v127 = swift_slowAlloc();
      uint64_t v162 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v127 = 136315394;
      *(void *)(v0 + 424) = sub_100290514(0xD000000000000025, 0x80000001003B8C30, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v127 + 12) = 2080;
      uint64_t v128 = UUID.uuidString.getter();
      *(void *)(v0 + 432) = sub_100290514(v128, v129, (uint64_t *)&v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v160(v126, v157);
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "%s: No applets are associated with credential with UUID %s", (uint8_t *)v127, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 640))(*(void *)(v0 + 536), *(void *)(v0 + 520));
    }

    Class v130 = *(Class *)(v0 + 680);
    Class v131 = *(Class *)(v0 + 672);
    Class v132 = *(Class *)(v0 + 664);
    Class v133 = *(Class *)(v0 + 656);
    Class v134 = *(Class *)(v0 + 600);
    sub_10008E594();
    uint64_t v32 = swift_allocError();
    *uint64_t v135 = 5;
    swift_willThrow();

    swift_unknownObjectRelease();
    goto LABEL_186;
  }
  if ((unint64_t)v8 >> 62) {
    goto LABEL_215;
  }
  uint64_t v56 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v57 = 0;
    uint64_t v140 = (uint64_t)isa + 32;
    unint64_t v156 = v8 & 0xC000000000000001;
    uint64_t v152 = v56;
    unint64_t v139 = isa;
LABEL_37:
    if (v57 >= *((void *)isa + 2)) {
      goto LABEL_194;
    }
    if (!v56) {
      goto LABEL_36;
    }
    unint64_t v142 = v57;
    uint64_t v58 = v140 + 16 * v57;
    uint64_t v0 = *(void *)v58;
    unint64_t v59 = *(void *)(v58 + 8);
    unint64_t v159 = v59 >> 62;
    swift_bridgeObjectRetain_n();
    sub_10006D0EC(v0, v59);
    uint64_t v60 = 0;
    uint64_t v151 = BYTE6(v59);
    unint64_t v153 = v59;
    uint64_t v147 = (int)v0;
    uint64_t v143 = v0 >> 32;
    unint64_t v144 = HIDWORD(v0);
    uint64_t v155 = v0;
    BOOL v61 = __OFSUB__(HIDWORD(v0), v0);
    BOOL v150 = v61;
    uint64_t v149 = HIDWORD(v0) - (int)v0;
LABEL_46:
    id v62 = v156 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v8 + 8 * v60 + 32);
    id v63 = v62;
    Class isa = (Class)(v60 + 1);
    if (!__OFADD__(v60, 1)) {
      break;
    }
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  id v64 = [v62 identifierAsData];
  uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v67 = v66;

  uint64_t v68 = 0;
  switch((int)v159)
  {
    case 1:
      uint64_t v68 = v149;
      if (v150) {
        goto LABEL_190;
      }
      break;
    case 2:
      uint64_t v70 = *(void *)(v155 + 16);
      uint64_t v69 = *(void *)(v155 + 24);
      BOOL v71 = __OFSUB__(v69, v70);
      uint64_t v68 = v69 - v70;
      if (!v71) {
        break;
      }
      goto LABEL_191;
    case 3:
      break;
    default:
      uint64_t v68 = v151;
      break;
  }
  uint64_t v0 = v67 >> 62;
  switch(v67 >> 62)
  {
    case 1uLL:
      LODWORD(v72) = HIDWORD(v65) - v65;
      if (__OFSUB__(HIDWORD(v65), v65)) {
        goto LABEL_193;
      }
      uint64_t v72 = (int)v72;
LABEL_62:
      if (v68 != v72)
      {
LABEL_44:
        sub_10006D144(v65, v67);
LABEL_45:

        ++v60;
        if (isa == (Class)v56)
        {
          swift_bridgeObjectRelease_n();
          sub_10006D144(v155, v153);
          goto LABEL_35;
        }
        goto LABEL_46;
      }
      if (v68 >= 1)
      {
        switch((int)v159)
        {
          case 1:
            if (v143 < v147) {
              goto LABEL_195;
            }
            sub_10006D0EC(v155, v153);
            uint64_t v78 = __DataStorage._bytes.getter();
            if (v78)
            {
              uint64_t v8 = v78;
              uint64_t v79 = __DataStorage._offset.getter();
              if (__OFSUB__(v147, v79)) {
                goto LABEL_197;
              }
              uint64_t __s1 = (void *)(v8 + v147 - v79);
            }
            else
            {
              uint64_t __s1 = 0;
            }
            uint64_t v8 = v154;
            __DataStorage._length.getter();
            if (!v0)
            {
              uint64_t v162 = (void *)v65;
              __int16 v163 = v67;
              char v164 = BYTE2(v67);
              char v165 = BYTE3(v67);
              char v166 = BYTE4(v67);
              char v167 = BYTE5(v67);
              if (!__s1) {
                goto LABEL_231;
              }
              int v88 = memcmp(__s1, &v162, BYTE6(v67));
              goto LABEL_147;
            }
            if (v0 == 1)
            {
              uint64_t v8 = (int)v65;
              if (v65 >> 32 < (int)v65) {
                goto LABEL_206;
              }
              swift_retain();
              uint64_t v0 = __DataStorage._bytes.getter();
              if (v0)
              {
                uint64_t v92 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v65, v92)) {
                  goto LABEL_213;
                }
                v0 += (int)v65 - v92;
              }
              uint64_t v93 = __DataStorage._length.getter();
              if (v93 >= (v65 >> 32) - (int)v65) {
                size_t v94 = (v65 >> 32) - (int)v65;
              }
              else {
                size_t v94 = v93;
              }
              uint64_t v8 = v154;
              if (!__s1) {
                goto LABEL_224;
              }
              uint64_t v56 = v152;
              if (!v0) {
                goto LABEL_225;
              }
              int v88 = memcmp(__s1, (const void *)v0, v94);
              sub_10006D144(v65, v67);
LABEL_147:
              sub_10006D144(v155, v153);
LABEL_148:
              sub_10006D144(v65, v67);
              if (!v88) {
                goto LABEL_163;
              }
              goto LABEL_45;
            }
            uint64_t v105 = *(void *)(v65 + 16);
            uint64_t v8 = *(void *)(v65 + 24);
            swift_retain();
            swift_retain();
            uint64_t v0 = __DataStorage._bytes.getter();
            if (v0)
            {
              uint64_t v106 = __DataStorage._offset.getter();
              if (__OFSUB__(v105, v106)) {
                goto LABEL_212;
              }
              v0 += v105 - v106;
            }
            BOOL v71 = __OFSUB__(v8, v105);
            v8 -= v105;
            if (v71) {
              goto LABEL_207;
            }
            uint64_t v107 = __DataStorage._length.getter();
            if (v107 >= v8) {
              size_t v108 = v8;
            }
            else {
              size_t v108 = v107;
            }
            if (!__s1) {
              goto LABEL_232;
            }
            uint64_t v8 = v154;
            uint64_t v56 = v152;
            if (!v0) {
              goto LABEL_233;
            }
            uint64_t v0 = memcmp(__s1, (const void *)v0, v108);
            swift_release();
            swift_release();
            sub_10006D144(v155, v153);
LABEL_160:
            sub_10006D144(v65, v67);
            if (!v0) {
              goto LABEL_163;
            }
            break;
          case 2:
            uint64_t v80 = *(void *)(v155 + 16);
            swift_retain();
            swift_retain();
            uint64_t v81 = __DataStorage._bytes.getter();
            if (v81)
            {
              uint64_t v8 = v81;
              uint64_t v82 = __DataStorage._offset.getter();
              if (__OFSUB__(v80, v82)) {
                goto LABEL_196;
              }
              __s1a = (void *)(v8 + v80 - v82);
            }
            else
            {
              __s1a = 0;
            }
            __DataStorage._length.getter();
            uint64_t v8 = v154;
            uint64_t v56 = v152;
            if (!v0)
            {
              uint64_t v162 = (void *)v65;
              __int16 v163 = v67;
              char v164 = BYTE2(v67);
              char v165 = BYTE3(v67);
              char v166 = BYTE4(v67);
              char v167 = BYTE5(v67);
              if (!__s1a) {
                goto LABEL_228;
              }
              int v88 = memcmp(__s1a, &v162, BYTE6(v67));
LABEL_134:
              swift_release();
              swift_release();
              goto LABEL_148;
            }
            if (v0 == 1)
            {
              uint64_t v8 = (int)v65;
              if (v65 >> 32 < (int)v65) {
                goto LABEL_200;
              }
              swift_retain();
              uint64_t v0 = __DataStorage._bytes.getter();
              if (v0)
              {
                uint64_t v89 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v65, v89)) {
                  goto LABEL_211;
                }
                v0 += (int)v65 - v89;
              }
              uint64_t v90 = __DataStorage._length.getter();
              if (v90 >= (v65 >> 32) - (int)v65) {
                size_t v91 = (v65 >> 32) - (int)v65;
              }
              else {
                size_t v91 = v90;
              }
              uint64_t v8 = v154;
              if (!__s1a) {
                goto LABEL_222;
              }
              uint64_t v56 = v152;
              if (!v0) {
                goto LABEL_223;
              }
              int v88 = memcmp(__s1a, (const void *)v0, v91);
              sub_10006D144(v65, v67);
              goto LABEL_134;
            }
            uint64_t v101 = *(void *)(v65 + 16);
            uint64_t v8 = *(void *)(v65 + 24);
            swift_retain();
            swift_retain();
            uint64_t v0 = __DataStorage._bytes.getter();
            if (v0)
            {
              uint64_t v102 = __DataStorage._offset.getter();
              if (__OFSUB__(v101, v102)) {
                goto LABEL_210;
              }
              v0 += v101 - v102;
            }
            BOOL v71 = __OFSUB__(v8, v101);
            v8 -= v101;
            if (v71) {
              goto LABEL_205;
            }
            uint64_t v103 = __DataStorage._length.getter();
            if (v103 >= v8) {
              size_t v104 = v8;
            }
            else {
              size_t v104 = v103;
            }
            if (!__s1a) {
              goto LABEL_229;
            }
            uint64_t v8 = v154;
            uint64_t v56 = v152;
            if (!v0) {
              goto LABEL_230;
            }
            uint64_t v0 = memcmp(__s1a, (const void *)v0, v104);
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            goto LABEL_160;
          case 3:
            memset(v161, 0, 14);
            if (!v0) {
              goto LABEL_89;
            }
            if (v0 == 1)
            {
              uint64_t v8 = (v65 >> 32) - (int)v65;
              if (v65 >> 32 < (int)v65) {
                goto LABEL_199;
              }
              sub_10006D0EC(v65, v67);
              uint64_t v83 = __DataStorage._bytes.getter();
              if (!v83) {
                goto LABEL_221;
              }
              uint64_t v0 = v83;
              uint64_t v84 = __DataStorage._offset.getter();
              uint64_t v77 = (int)v65 - v84;
              if (__OFSUB__((int)v65, v84)) {
                goto LABEL_204;
              }
LABEL_84:
              uint64_t v85 = __DataStorage._length.getter();
              if (v85 >= v8) {
                size_t v86 = v8;
              }
              else {
                size_t v86 = v85;
              }
              int v87 = memcmp(v161, (const void *)(v0 + v77), v86);
              sub_10006D144(v65, v67);
              sub_10006D144(v65, v67);
              uint64_t v8 = v154;
              uint64_t v56 = v152;
              if (!v87) {
                goto LABEL_163;
              }
            }
            else
            {
              uint64_t v8 = *(void *)(v65 + 16);
              uint64_t v98 = *(void *)(v65 + 24);
              swift_retain();
              swift_retain();
              uint64_t v0 = __DataStorage._bytes.getter();
              if (v0)
              {
                uint64_t v99 = __DataStorage._offset.getter();
                if (__OFSUB__(v8, v99)) {
                  goto LABEL_209;
                }
                v0 += v8 - v99;
              }
              BOOL v71 = __OFSUB__(v98, v8);
              uint64_t v8 = v98 - v8;
              if (v71) {
                goto LABEL_202;
              }
              uint64_t v97 = __DataStorage._length.getter();
              if (!v0) {
                goto LABEL_227;
              }
LABEL_127:
              if (v97 >= v8) {
                size_t v100 = v8;
              }
              else {
                size_t v100 = v97;
              }
              uint64_t v0 = memcmp(v161, (const void *)v0, v100);
              swift_release();
              swift_release();
              sub_10006D144(v65, v67);
              uint64_t v8 = v154;
              uint64_t v56 = v152;
              if (!v0) {
                goto LABEL_163;
              }
            }
            goto LABEL_45;
          default:
            v161[0] = v155;
            LOBYTE(v161[1]) = v144;
            *(_WORD *)((char *)&v161[1] + 1) = *(_WORD *)((char *)&v155 + 5);
            HIBYTE(v161[1]) = HIBYTE(v155);
            v161[2] = v153;
            LOWORD(v161[3]) = WORD2(v153);
            if (!v0)
            {
LABEL_89:
              uint64_t v162 = (void *)v65;
              __int16 v163 = v67;
              char v164 = BYTE2(v67);
              char v165 = BYTE3(v67);
              char v166 = BYTE4(v67);
              char v167 = BYTE5(v67);
              int v88 = memcmp(v161, &v162, BYTE6(v67));
              goto LABEL_148;
            }
            if (v0 == 1)
            {
              uint64_t v8 = (v65 >> 32) - (int)v65;
              if (v65 >> 32 < (int)v65) {
                goto LABEL_198;
              }
              sub_10006D0EC(v65, v67);
              uint64_t v75 = __DataStorage._bytes.getter();
              if (!v75) {
                goto LABEL_220;
              }
              uint64_t v0 = v75;
              uint64_t v76 = __DataStorage._offset.getter();
              uint64_t v77 = (int)v65 - v76;
              if (__OFSUB__((int)v65, v76)) {
                goto LABEL_203;
              }
              goto LABEL_84;
            }
            uint64_t v8 = *(void *)(v65 + 16);
            uint64_t v95 = *(void *)(v65 + 24);
            swift_retain();
            swift_retain();
            uint64_t v0 = __DataStorage._bytes.getter();
            if (v0)
            {
              uint64_t v96 = __DataStorage._offset.getter();
              if (__OFSUB__(v8, v96)) {
                goto LABEL_208;
              }
              v0 += v8 - v96;
            }
            BOOL v71 = __OFSUB__(v95, v8);
            uint64_t v8 = v95 - v8;
            if (v71) {
              goto LABEL_201;
            }
            uint64_t v97 = __DataStorage._length.getter();
            if (!v0) {
              goto LABEL_226;
            }
            goto LABEL_127;
        }
        goto LABEL_45;
      }
LABEL_162:
      sub_10006D144(v65, v67);
LABEL_163:
      swift_bridgeObjectRelease_n();
      if (([v63 managedBySP] & 1) == 0
        || (id v109 = [v63 rawGPState],
            type metadata accessor for InstanceInfoInternal(),
            v109 == (id)static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter())
        || ([v63 isGPLocked] & 1) != 0)
      {
        sub_10006D144(v155, v153);
      }
      else
      {
        id v110 = v63;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((uint64_t)v138->super.isa & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((uint64_t)v138->super.isa & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        sub_10006D144(v155, v153);
      }
LABEL_35:
      uint64_t v0 = (uint64_t)v148;
      Class isa = v139;
      unint64_t v57 = v142;
LABEL_36:
      if (++v57 != v141) {
        goto LABEL_37;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = (unint64_t)v138->super.isa;
      if (!((unint64_t)v138->super.isa >> 62)) {
        goto LABEL_171;
      }
LABEL_181:
      swift_bridgeObjectRetain();
      uint64_t v118 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v118) {
        goto LABEL_182;
      }
LABEL_172:
      swift_bridgeObjectRetain();
      v111.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(NSArray *)(v0 + 712) = v111;
      swift_bridgeObjectRelease();
      unint64_t v112 = *(void *)(v0 + 352);
      *(void *)(v0 + 720) = v112;
      if (!(v112 >> 62))
      {
        uint64_t v113 = *(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v113) {
          goto LABEL_174;
        }
LABEL_217:
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_218;
      }
      swift_bridgeObjectRetain();
      if (!_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_217;
      }
LABEL_174:
      if ((v112 & 0xC000000000000001) != 0)
      {
LABEL_218:
        uint64_t v114 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v112 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_220:
          __DataStorage._length.getter();
          __break(1u);
LABEL_221:
          __DataStorage._length.getter();
          __break(1u);
LABEL_222:
          __break(1u);
LABEL_223:
          __break(1u);
LABEL_224:
          __break(1u);
LABEL_225:
          __break(1u);
LABEL_226:
          __break(1u);
LABEL_227:
          __break(1u);
LABEL_228:
          __break(1u);
LABEL_229:
          __break(1u);
LABEL_230:
          __break(1u);
LABEL_231:
          __break(1u);
LABEL_232:
          __break(1u);
LABEL_233:
          __break(1u);
        }
        uint64_t v114 = (objc_class *)*(id *)(v112 + 32);
      }
      uint64_t v115 = v114;
      *(void *)(v0 + 728) = v114;
      Class v116 = *(Class *)(v0 + 664);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1002433D0;
      uint64_t v117 = swift_continuation_init();
      *(void *)(v0 + 144) = _NSConcreteStackBlock;
      *(void *)(v0 + 152) = 0x40000000;
      *(void *)(v0 + 160) = sub_1001BDDAC;
      *(void *)(v0 + 168) = &unk_1004172E0;
      *(void *)(v0 + 176) = v117;
      [(objc_class *)v116 startWiredModeWithApplets:v111.super.isa selectOnStart:v115 externalAuth:0 completion:v0 + 144];
      return _swift_continuation_await(v0 + 16);
    case 2uLL:
      uint64_t v74 = *(void *)(v65 + 16);
      uint64_t v73 = *(void *)(v65 + 24);
      BOOL v71 = __OFSUB__(v73, v74);
      uint64_t v72 = v73 - v74;
      if (!v71) {
        goto LABEL_62;
      }
      goto LABEL_192;
    case 3uLL:
      if (v68) {
        goto LABEL_44;
      }
      goto LABEL_162;
    default:
      uint64_t v72 = BYTE6(v67);
      goto LABEL_62;
  }
}

uint64_t sub_1002433D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 736) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    id v2 = sub_100243D70;
  }
  else
  {
    id v2 = sub_100243514;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100243514()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void **)(v0 + 712);
  id v2 = *(void **)(v0 + 488);

  id v3 = v2;
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = *(void *)(v0 + 720);
    unint64_t v7 = *(void **)(v0 + 488);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = UUID.uuidString.getter();
    *(void *)(v0 + 408) = sub_100290514(v9, v10, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    id v35 = (uint8_t *)v8;
    *(_WORD *)(v8 + 12) = 2080;
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v11 = *(void *)((*(void *)(v0 + 720) & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    log = v4;
    os_log_type_t v34 = v5;
    if (v11)
    {
      sub_1002CF974(0, v11 & ~(v11 >> 63), 0);
      if (v11 < 0) {
        __break(1u);
      }
      uint64_t v12 = 0;
      uint64_t v13 = *(void *)(v0 + 720) + 32;
      do
      {
        if ((*(void *)(v0 + 720) & 0xC000000000000001) != 0) {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v14 = *(id *)(v13 + 8 * v12);
        }
        uint64_t v15 = v14;
        id v16 = [v14 identifier];
        uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v19 = v18;

        unint64_t v21 = _swiftEmptyArrayStorage[2];
        unint64_t v20 = _swiftEmptyArrayStorage[3];
        if (v21 >= v20 >> 1) {
          sub_1002CF974(v20 > 1, v21 + 1, 1);
        }
        ++v12;
        _swiftEmptyArrayStorage[2] = v21 + 1;
        unint64_t v22 = &_swiftEmptyArrayStorage[2 * v21];
        v22[4] = v17;
        v22[5] = v19;
      }
      while (v11 != v12);
    }
    swift_bridgeObjectRelease();
    uint64_t v24 = Array.description.getter();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 416) = sub_100290514(v24, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, v34, "Session %s: Started wired mode with allowed applets: %s", v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v23 = *(void **)(v0 + 488);

    swift_bridgeObjectRelease_n();
  }
  Class v27 = *(void **)(v0 + 680);
  Class v28 = *(void **)(v0 + 672);
  Class v29 = *(void **)(v0 + 664);
  Class v30 = *(void **)(v0 + 656);
  Class v31 = *(void **)(v0 + 600);
  (*(void (**)(void))(v0 + 504))(0);

  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_10024395C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100243A84, 0, 0);
}

uint64_t sub_100243A84()
{
  uint64_t v1 = v0[93];
  id v2 = (void (*)(uint64_t))v0[63];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100243B88()
{
  swift_bridgeObjectRelease();
  *(void *)(v0 + 744) = *(void *)(v0 + 688);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10024395C;
  return sub_1001BDE44();
}

uint64_t sub_100243C60()
{
  uint64_t v1 = (void *)v0[85];
  id v2 = (void *)v0[84];
  uint64_t v3 = (void *)v0[83];
  uint64_t v4 = (void *)v0[82];
  uint64_t v5 = (void *)v0[75];
  swift_willThrow();

  v0[93] = v0[87];
  unint64_t v6 = (void *)swift_task_alloc();
  v0[94] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_10024395C;
  return sub_1001BDE44();
}

uint64_t sub_100243D70()
{
  uint64_t v18 = v0;
  uint64_t v1 = (void *)v0[91];
  id v2 = (void *)v0[89];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    v0[47] = sub_100290514(0xD000000000000025, 0x80000001003B8C30, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[50] = sub_100290514(v6, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: Nearfield error %s when starting wired mode", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void *)v0[85];
  uint64_t v9 = (void *)v0[84];
  unint64_t v10 = (void *)v0[83];
  uint64_t v11 = (void *)v0[82];
  uint64_t v12 = (void *)v0[75];
  sub_10008E594();
  uint64_t v13 = swift_allocError();
  *id v14 = 8;
  swift_willThrow();

  swift_unknownObjectRelease();
  swift_errorRelease();
  v0[93] = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  v0[94] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_10024395C;
  return sub_1001BDE44();
}

uint64_t sub_100244308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 840) = v20;
  *(_OWORD *)(v8 + 824) = v19;
  *(void *)(v8 + 816) = a8;
  *(void *)(v8 + 808) = a7;
  *(void *)(v8 + 800) = a6;
  *(void *)(v8 + 792) = a5;
  *(void *)(v8 + 784) = a4;
  uint64_t v9 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  *(void *)(v8 + 848) = v9;
  *(void *)(v8 + 856) = *(void *)(v9 - 8);
  *(void *)(v8 + 864) = swift_task_alloc();
  sub_10006C51C((uint64_t *)&unk_100459AD0);
  *(void *)(v8 + 872) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Calendar.Identifier();
  *(void *)(v8 + 880) = v10;
  *(void *)(v8 + 888) = *(void *)(v10 - 8);
  *(void *)(v8 + 896) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Calendar();
  *(void *)(v8 + 904) = v11;
  *(void *)(v8 + 912) = *(void *)(v11 - 8);
  *(void *)(v8 + 920) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Date();
  *(void *)(v8 + 928) = v12;
  *(void *)(v8 + 936) = *(void *)(v12 - 8);
  *(void *)(v8 + 944) = swift_task_alloc();
  *(void *)(v8 + 952) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for PresentmentInfo();
  *(void *)(v8 + 960) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v8 + 968) = v14;
  *(void *)(v8 + 976) = *(void *)(v14 + 64);
  *(void *)(v8 + 984) = swift_task_alloc();
  *(void *)(v8 + 992) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  *(void *)(v8 + 1000) = v15;
  *(void *)(v8 + 1008) = *(void *)(v15 - 8);
  *(void *)(v8 + 1016) = swift_task_alloc();
  *(void *)(v8 + 1024) = swift_task_alloc();
  *(void *)(v8 + 1032) = swift_task_alloc();
  *(void *)(v8 + 1040) = swift_task_alloc();
  *(void *)(v8 + 1048) = swift_task_alloc();
  *(void *)(v8 + 1056) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for StateInternal();
  *(void *)(v8 + 1064) = v16;
  *(void *)(v8 + 1072) = *(void *)(v16 - 8);
  *(void *)(v8 + 1080) = swift_task_alloc();
  return _swift_task_switch(sub_1002446DC, 0, 0);
}

uint64_t sub_1002446DC()
{
  int v87 = v0;
  uint64_t v1 = v0[98];
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24);
  if (v2 >> 62)
  {
    if (v2 >> 62 == 1
      || (v2 == 0x8000000000000000
        ? (BOOL v3 = (*(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8) | *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16) | *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState)) == 0)
        : (BOOL v3 = 0),
          !v3))
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_10008E55C(v4, (uint64_t)qword_1004686A8);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        unint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Attempted to enter wired mode in invalid state", v7, 2u);
        swift_slowDealloc();
      }

      sub_10008E594();
      uint64_t v9 = swift_allocError();
      uint64_t v10 = 10;
      goto LABEL_42;
    }
  }
  uint64_t v11 = v0[99];
  uint64_t v12 = (unint64_t *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  unint64_t v13 = *v12;
  uint64_t v14 = (void *)swift_task_alloc();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v11;
  swift_bridgeObjectRetain();
  unint64_t v15 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_10011FB44, v14, v13);
  swift_task_dealloc();
  if (!(v15 >> 62))
  {
    uint64_t v16 = v0 + 96;
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_14;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    if (qword_1004536D0 == -1)
    {
LABEL_38:
      uint64_t v70 = v0[132];
      uint64_t v71 = v0[126];
      uint64_t v72 = v0[125];
      uint64_t v73 = v0[99];
      uint64_t v74 = type metadata accessor for Logger();
      sub_10008E55C(v74, (uint64_t)qword_1004686A8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 16))(v70, v73, v72);
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.error.getter();
      BOOL v77 = os_log_type_enabled(v75, v76);
      uint64_t v78 = v0[132];
      uint64_t v79 = v0[126];
      if (v77)
      {
        uint64_t v85 = v0[125];
        uint64_t v80 = swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        *(_DWORD *)uint64_t v80 = 136315394;
        *uint64_t v16 = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v80 + 12) = 2080;
        uint64_t v81 = UUID.uuidString.getter();
        v0[97] = sub_100290514(v81, v82, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v85);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "%s: Credential %s not found", (uint8_t *)v80, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(void, void))(v79 + 8))(v0[132], v0[125]);
      }

      sub_10008E594();
      uint64_t v9 = swift_allocError();
      uint64_t v10 = 1;
LABEL_42:
      *uint64_t v8 = v10;
      swift_willThrow();
LABEL_49:
      v0[174] = v9;
      uint64_t v83 = (void *)swift_task_alloc();
      v0[175] = v83;
      *uint64_t v83 = v0;
      v83[1] = sub_100248AF4;
      return sub_1001BDE44();
    }
LABEL_45:
    swift_once();
    goto LABEL_38;
  }
  uint64_t v16 = v0 + 96;
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_37;
  }
LABEL_14:
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v17 = *(id *)(v15 + 32);
      goto LABEL_17;
    }
    __break(1u);
    goto LABEL_45;
  }
  id v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_17:
  uint64_t v18 = v17;
  v0[136] = v17;
  uint64_t v19 = v0[135];
  uint64_t v20 = v0[134];
  uint64_t v21 = v0[133];
  swift_bridgeObjectRelease();
  CredentialInternal.state.getter();
  int v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21);
  uint64_t v23 = (unint64_t *)v0[135];
  uint64_t v24 = v0[134];
  uint64_t v25 = v0[133];
  if (v22 != enum case for StateInternal.installed(_:))
  {
    (*(void (**)(void, uint64_t))(v24 + 8))(v0[135], v25);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v52 = v0[131];
    uint64_t v53 = v0[126];
    uint64_t v54 = v0[125];
    uint64_t v55 = v0[99];
    uint64_t v56 = type metadata accessor for Logger();
    sub_10008E55C(v56, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v52, v55, v54);
    unint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v60 = v0[131];
    uint64_t v61 = v0[126];
    uint64_t v62 = v0[125];
    if (v59)
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315394;
      v0[82] = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 12) = 2080;
      uint64_t v64 = UUID.uuidString.getter();
      v0[80] = sub_100290514(v64, v65, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s: Credential %s not installed", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v61 + 8))(v0[131], v0[125]);
    }

    sub_10008E594();
    uint64_t v9 = swift_allocError();
    uint64_t v67 = 7;
    goto LABEL_48;
  }
  unint64_t v26 = v0[101];
  uint64_t v27 = v0[100];
  (*(void (**)(void, uint64_t))(v24 + 96))(v0[135], v25);
  unint64_t v28 = *v23;
  sub_10006D0EC(v27, v26);
  unint64_t v29 = (unint64_t)sub_100252694(v28, v27, v26);
  sub_10006D144(v27, v26);
  swift_bridgeObjectRelease();
  if (!(v29 >> 62))
  {
    if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
  if (!_CocoaArrayWrapper.endIndex.getter())
  {
LABEL_47:
    swift_bridgeObjectRelease();
    sub_10008E594();
    uint64_t v9 = swift_allocError();
    uint64_t v67 = 5;
LABEL_48:
    *unint64_t v66 = v67;
    swift_willThrow();

    goto LABEL_49;
  }
LABEL_20:
  if ((v29 & 0xC000000000000001) != 0)
  {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_54;
    }
    id v30 = *(id *)(v29 + 32);
  }
  v0[137] = v30;
  swift_bridgeObjectRelease();
  if (qword_1004536D0 != -1) {
LABEL_54:
  }
    swift_once();
  uint64_t v31 = v0[130];
  uint64_t v32 = v0[126];
  uint64_t v33 = v0[125];
  uint64_t v34 = v0[99];
  id v35 = (void *)v0[98];
  uint64_t v36 = type metadata accessor for Logger();
  v0[138] = sub_10008E55C(v36, (uint64_t)qword_1004686A8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  v0[139] = v37;
  v0[140] = (v32 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v37(v31, v34, v33);
  id v38 = v35;
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v42 = v0[130];
  uint64_t v43 = v0[126];
  uint64_t v44 = v0[125];
  unint64_t v45 = (void *)v0[98];
  if (v41)
  {
    uint64_t v46 = swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136315394;
    os_log_type_t type = v40;
    uint64_t v47 = UUID.uuidString.getter();
    v0[94] = sub_100290514(v47, v48, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v46 + 12) = 2080;
    uint64_t v49 = UUID.uuidString.getter();
    v0[95] = sub_100290514(v49, v50, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Class v51 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v51(v42, v44);
    _os_log_impl((void *)&_mh_execute_header, v39, type, "Session %s: Authorizing credential %s in wired mode", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    Class v51 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v51(v42, v44);
  }

  v0[141] = v51;
  uint64_t v68 = (void *)swift_task_alloc();
  v0[142] = v68;
  void *v68 = v0;
  v68[1] = sub_100245234;
  return sub_1001BC3F8((uint64_t)v18);
}

uint64_t sub_100245234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v6 = (void *)*v5;
  v6[143] = a1;
  v6[144] = a2;
  v6[145] = a3;
  v6[146] = a4;
  v6[147] = v4;
  swift_task_dealloc();
  if (v4) {
    unint64_t v7 = sub_100248DAC;
  }
  else {
    unint64_t v7 = sub_100245384;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100245384()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void **)(v0 + 1152);
  if (v1)
  {
    id v2 = *(id *)(v0 + 1088);
    id v36 = v1;
    BOOL v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void **)(v0 + 1088);
      uint64_t v6 = *(void *)(v0 + 1032);
      uint64_t v34 = *(void *)(v0 + 1000);
      id v35 = *(void (**)(uint64_t, uint64_t))(v0 + 1128);
      uint64_t v7 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315394;
      *(void *)(v0 + 736) = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2080;
      CredentialInternal.identifier.getter();
      uint64_t v8 = UUID.uuidString.getter();
      unint64_t v10 = v9;
      v35(v6, v34);
      *(void *)(v0 + 744) = sub_100290514(v8, v10, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s; Starting new wired mode handle for credential %s",
        (uint8_t *)v7,
        0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v23 = *(void **)(v0 + 1088);
    }
    unint64_t v24 = *(void *)(v0 + 1168);
    uint64_t v25 = *(void **)(v0 + 1160);
    unint64_t v26 = *(void **)(v0 + 1152);
    uint64_t v27 = *(void **)(v0 + 1144);
    unint64_t v28 = v24 | 0x4000000000000000;
    id v29 = v25;
    id v30 = (id)v24;
    id v31 = v36;
    id v32 = v27;
    sub_1001BDB6C(v27, v26, v25, v28);
    *(void *)(v0 + 80) = v0;
    *(void *)(v0 + 120) = v0 + 584;
    *(void *)(v0 + 88) = sub_1002458A8;
    uint64_t v33 = swift_continuation_init();
    *(void *)(v0 + 352) = _NSConcreteStackBlock;
    *(void *)(v0 + 360) = 0x40000000;
    *(void *)(v0 + 368) = sub_10024085C;
    *(void *)(v0 + 376) = &unk_100417208;
    *(void *)(v0 + 384) = v33;
    [v31 requestSETransceiverWithCompletion:v0 + 352];
    return _swift_continuation_await(v0 + 80);
  }
  else
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136315138;
      *(void *)(v0 + 632) = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: NFCredentialSession in handle has been invalidated", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v14 = *(void **)(v0 + 1168);
    unint64_t v15 = *(void **)(v0 + 1160);
    uint64_t v16 = *(void **)(v0 + 1144);
    id v17 = *(void **)(v0 + 1096);
    uint64_t v18 = *(void **)(v0 + 1088);
    sub_10008E594();
    uint64_t v19 = swift_allocError();
    *uint64_t v20 = 9;
    swift_willThrow();

    *(void *)(v0 + 1392) = v19;
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 1400) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100248AF4;
    return sub_1001BDE44();
  }
}

uint64_t sub_1002458A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 1184) = v1;
  if (v1) {
    id v2 = sub_100248E80;
  }
  else {
    id v2 = sub_1002459E4;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_1002459E4()
{
  char v192 = v0;
  uint64_t v1 = (void *)v0[73];
  v0[149] = v1;
  if (!v1)
  {
    uint64_t v83 = v0;
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v190 = swift_slowAlloc();
      *(_DWORD *)uint64_t v86 = 136315138;
      v83[76] = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "%s: Unable to get transceiver", v86, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    int v87 = (void *)v83[146];
    uint64_t v88 = (void *)v83[145];
    uint64_t v89 = (void *)v83[144];
    uint64_t v90 = (void *)v83[143];
    size_t v91 = (void *)v83[137];
    uint64_t v92 = (void *)v83[136];
    sub_10008E594();
    uint64_t v93 = swift_allocError();
    *size_t v94 = 9;
    swift_willThrow();

    goto LABEL_195;
  }
  v0[78] = 0;
  id v2 = [v1 listAppletsAndRefreshCache:0 outError:v0 + 78];
  BOOL v3 = (void *)v167[78];
  id v165 = v1;
  if (!v2)
  {
    uint64_t v83 = v167;
    id v107 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    size_t v108 = Logger.logObject.getter();
    os_log_type_t v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = swift_slowAlloc();
      uint64_t v190 = swift_slowAlloc();
      *(_DWORD *)uint64_t v110 = 136315394;
      v167[85] = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v110 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v111 = Error.localizedDescription.getter();
      v167[81] = sub_100290514(v111, v112, &v190);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v108, v109, "%s: Nearfield error %s encountered when listing applets", (uint8_t *)v110, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v113 = (void *)v167[146];
    uint64_t v114 = (void *)v167[145];
    uint64_t v115 = (void *)v167[144];
    Class v116 = (void *)v167[143];
    uint64_t v117 = (void *)v167[137];
    v187 = (void *)v167[136];
    [v165 invalidate];
    sub_10008E594();
    uint64_t v93 = swift_allocError();
    *uint64_t v118 = 8;
    swift_willThrow();
    swift_errorRelease();
    swift_unknownObjectRelease();

    goto LABEL_195;
  }
  uint64_t v4 = v2;
  v167[150] = sub_10011FB68();
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v3;

  [v1 invalidate];
  sub_10006C51C(&qword_100459B10);
  uint64_t inited = swift_initStackObject();
  v167[151] = inited;
  *(_OWORD *)(inited + 16) = xmmword_1003782A0;
  *(void *)(inited + 32) = InstanceInfoInternal.securityDomainAID.getter();
  uint64_t v168 = inited + 32;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = InstanceInfoInternal.instanceAID.getter();
  *(void *)(inited + 56) = v9;
  v167[74] = _swiftEmptyArrayStorage;
  if ((unint64_t)v5 >> 62) {
    goto LABEL_189;
  }
  uint64_t v10 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_5:
  char v11 = 0;
  uint64_t v12 = 0;
  unint64_t v13 = v167 + 49;
  char v166 = v167 + 74;
  unint64_t v184 = v5 & 0xC000000000000001;
  uint64_t v178 = v5;
  uint64_t v182 = v10;
LABEL_9:
  char v14 = v11;
  if (!v10) {
    goto LABEL_8;
  }
  char v169 = v11;
  unint64_t v15 = (uint64_t *)(v168 + 16 * v12);
  uint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  unint64_t v186 = v16 >> 62;
  swift_bridgeObjectRetain_n();
  sub_10006D0EC(v17, v16);
  uint64_t v18 = 0;
  uint64_t v177 = BYTE6(v16);
  unint64_t v180 = v16;
  uint64_t v174 = (int)v17;
  uint64_t v170 = v17 >> 32;
  unint64_t v171 = HIDWORD(v17);
  uint64_t v183 = v17;
  BOOL v19 = __OFSUB__(HIDWORD(v17), v17);
  BOOL v176 = v19;
  uint64_t v175 = HIDWORD(v17) - (int)v17;
  while (2)
  {
    if (v184) {
      id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v20 = *(id *)(v5 + 8 * v18 + 32);
    }
    uint64_t v21 = v20;
    uint64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_165;
    }
    id v23 = [v20 identifierAsData];
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v27 = 0;
    switch((int)v186)
    {
      case 1:
        uint64_t v27 = v175;
        if (!v176) {
          break;
        }
        __break(1u);
LABEL_167:
        __break(1u);
LABEL_168:
        __break(1u);
LABEL_169:
        __break(1u);
LABEL_170:
        __break(1u);
        goto LABEL_171;
      case 2:
        uint64_t v29 = *(void *)(v183 + 16);
        uint64_t v28 = *(void *)(v183 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          break;
        }
        goto LABEL_167;
      case 3:
        break;
      default:
        uint64_t v27 = v177;
        break;
    }
    unint64_t v31 = v26 >> 62;
    switch(v26 >> 62)
    {
      case 1uLL:
        LODWORD(v32) = HIDWORD(v24) - v24;
        if (__OFSUB__(HIDWORD(v24), v24)) {
          goto LABEL_169;
        }
        uint64_t v32 = (int)v32;
LABEL_33:
        if (v27 != v32)
        {
LABEL_15:
          sub_10006D144(v24, v26);
LABEL_16:

          ++v18;
          if (v22 == v10)
          {
            swift_bridgeObjectRelease_n();
            sub_10006D144(v183, v180);
            goto LABEL_7;
          }
          continue;
        }
        if (v27 >= 1)
        {
          switch((int)v186)
          {
            case 1:
              if (v170 < v174) {
                goto LABEL_170;
              }
              sub_10006D0EC(v183, v180);
              uint64_t v39 = __DataStorage._bytes.getter();
              if (v39)
              {
                uint64_t v40 = v39;
                uint64_t v41 = __DataStorage._offset.getter();
                if (__OFSUB__(v174, v41)) {
                  goto LABEL_172;
                }
                uint64_t __s1 = (void *)(v40 + v174 - v41);
              }
              else
              {
                uint64_t __s1 = 0;
              }
              uint64_t v10 = v182;
              __DataStorage._length.getter();
              if (!v31)
              {
                uint64_t v190 = v24;
                LOWORD(v191) = v26;
                BYTE2(v191) = BYTE2(v26);
                BYTE3(v191) = BYTE3(v26);
                BYTE4(v191) = BYTE4(v26);
                BYTE5(v191) = BYTE5(v26);
                if (!__s1) {
                  goto LABEL_209;
                }
                int v50 = memcmp(__s1, &v190, BYTE6(v26));
LABEL_118:
                sub_10006D144(v183, v180);
                goto LABEL_119;
              }
              if (v31 == 1)
              {
                uint64_t v5 = (v24 >> 32) - (int)v24;
                if (v24 >> 32 < (int)v24) {
                  goto LABEL_181;
                }
                swift_retain();
                uint64_t v55 = (char *)__DataStorage._bytes.getter();
                if (v55)
                {
                  uint64_t v56 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v24, v56)) {
                    goto LABEL_188;
                  }
                  v55 += (int)v24 - v56;
                }
                uint64_t v57 = __DataStorage._length.getter();
                if (v57 >= v5) {
                  size_t v58 = (v24 >> 32) - (int)v24;
                }
                else {
                  size_t v58 = v57;
                }
                uint64_t v10 = v182;
                if (!__s1) {
                  goto LABEL_202;
                }
                uint64_t v5 = v178;
                if (!v55) {
                  goto LABEL_203;
                }
                int v50 = memcmp(__s1, v55, v58);
                sub_10006D144(v24, v26);
                goto LABEL_118;
              }
              uint64_t v5 = *(void *)(v24 + 16);
              uint64_t v75 = *(void *)(v24 + 24);
              swift_retain();
              swift_retain();
              os_log_type_t v76 = (char *)__DataStorage._bytes.getter();
              if (v76)
              {
                uint64_t v77 = __DataStorage._offset.getter();
                if (__OFSUB__(v5, v77)) {
                  goto LABEL_187;
                }
                v76 += v5 - v77;
              }
              BOOL v30 = __OFSUB__(v75, v5);
              int64_t v78 = v75 - v5;
              if (v30) {
                goto LABEL_182;
              }
              uint64_t v79 = __DataStorage._length.getter();
              if (v79 >= v78) {
                size_t v80 = v78;
              }
              else {
                size_t v80 = v79;
              }
              if (!__s1) {
                goto LABEL_210;
              }
              uint64_t v5 = v178;
              uint64_t v10 = v182;
              if (!v76) {
                goto LABEL_211;
              }
              int v74 = memcmp(__s1, v76, v80);
              swift_release();
              swift_release();
              sub_10006D144(v183, v180);
              goto LABEL_131;
            case 2:
              uint64_t v5 = *(void *)(v183 + 16);
              swift_retain();
              swift_retain();
              uint64_t v42 = __DataStorage._bytes.getter();
              if (v42)
              {
                uint64_t v43 = v42;
                uint64_t v44 = __DataStorage._offset.getter();
                if (__OFSUB__(v5, v44))
                {
LABEL_171:
                  __break(1u);
LABEL_172:
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
LABEL_184:
                  __break(1u);
LABEL_185:
                  __break(1u);
LABEL_186:
                  __break(1u);
LABEL_187:
                  __break(1u);
LABEL_188:
                  __break(1u);
LABEL_189:
                  swift_bridgeObjectRetain();
                  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_5;
                }
                __s1a = (void *)(v43 + v5 - v44);
              }
              else
              {
                __s1a = 0;
              }
              __DataStorage._length.getter();
              uint64_t v5 = v178;
              uint64_t v10 = v182;
              if (!v31)
              {
                uint64_t v190 = v24;
                LOWORD(v191) = v26;
                BYTE2(v191) = BYTE2(v26);
                BYTE3(v191) = BYTE3(v26);
                BYTE4(v191) = BYTE4(v26);
                BYTE5(v191) = BYTE5(v26);
                if (!__s1a) {
                  goto LABEL_206;
                }
                int v50 = memcmp(__s1a, &v190, BYTE6(v26));
                goto LABEL_105;
              }
              if (v31 == 1)
              {
                uint64_t v5 = (v24 >> 32) - (int)v24;
                if (v24 >> 32 < (int)v24) {
                  goto LABEL_175;
                }
                swift_retain();
                Class v51 = (char *)__DataStorage._bytes.getter();
                if (v51)
                {
                  uint64_t v52 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v24, v52)) {
                    goto LABEL_186;
                  }
                  v51 += (int)v24 - v52;
                }
                uint64_t v53 = __DataStorage._length.getter();
                if (v53 >= v5) {
                  size_t v54 = (v24 >> 32) - (int)v24;
                }
                else {
                  size_t v54 = v53;
                }
                uint64_t v10 = v182;
                if (!__s1a) {
                  goto LABEL_200;
                }
                uint64_t v5 = v178;
                if (!v51) {
                  goto LABEL_201;
                }
                int v50 = memcmp(__s1a, v51, v54);
                sub_10006D144(v24, v26);
LABEL_105:
                swift_release();
                swift_release();
LABEL_119:
                sub_10006D144(v24, v26);
                if (!v50) {
                  goto LABEL_134;
                }
                goto LABEL_16;
              }
              uint64_t v5 = *(void *)(v24 + 16);
              uint64_t v68 = *(void *)(v24 + 24);
              swift_retain();
              swift_retain();
              uint64_t v69 = (char *)__DataStorage._bytes.getter();
              if (v69)
              {
                uint64_t v70 = __DataStorage._offset.getter();
                if (__OFSUB__(v5, v70)) {
                  goto LABEL_185;
                }
                v69 += v5 - v70;
              }
              BOOL v30 = __OFSUB__(v68, v5);
              int64_t v71 = v68 - v5;
              if (v30) {
                goto LABEL_180;
              }
              uint64_t v72 = __DataStorage._length.getter();
              if (v72 >= v71) {
                size_t v73 = v71;
              }
              else {
                size_t v73 = v72;
              }
              if (!__s1a) {
                goto LABEL_207;
              }
              uint64_t v5 = v178;
              uint64_t v10 = v182;
              if (!v69) {
                goto LABEL_208;
              }
              int v74 = memcmp(__s1a, v69, v73);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
LABEL_131:
              sub_10006D144(v24, v26);
              if (!v74) {
                goto LABEL_134;
              }
              break;
            case 3:
              memset(v189, 0, 14);
              if (!v31) {
                goto LABEL_60;
              }
              if (v31 == 1)
              {
                uint64_t v5 = (int)v24;
                uint64_t v35 = (v24 >> 32) - (int)v24;
                if (v24 >> 32 < (int)v24) {
                  goto LABEL_174;
                }
                sub_10006D0EC(v24, v26);
                uint64_t v45 = __DataStorage._bytes.getter();
                if (!v45) {
                  goto LABEL_199;
                }
                uint64_t v37 = v45;
                uint64_t v46 = __DataStorage._offset.getter();
                uint64_t v5 = (int)v24 - v46;
                if (__OFSUB__((int)v24, v46)) {
                  goto LABEL_179;
                }
LABEL_55:
                uint64_t v47 = __DataStorage._length.getter();
                if (v47 >= v35) {
                  size_t v48 = v35;
                }
                else {
                  size_t v48 = v47;
                }
                int v49 = memcmp(v189, (const void *)(v37 + v5), v48);
                sub_10006D144(v24, v26);
                sub_10006D144(v24, v26);
                uint64_t v5 = v178;
                uint64_t v10 = v182;
                if (!v49) {
                  goto LABEL_134;
                }
              }
              else
              {
                uint64_t v64 = *(void *)(v24 + 16);
                uint64_t v5 = *(void *)(v24 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v64, v65)) {
                    goto LABEL_184;
                  }
                  v60 += v64 - v65;
                }
                BOOL v30 = __OFSUB__(v5, v64);
                int64_t v62 = v5 - v64;
                if (v30) {
                  goto LABEL_177;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (!v60) {
                  goto LABEL_205;
                }
LABEL_98:
                if (v63 >= v62) {
                  size_t v66 = v62;
                }
                else {
                  size_t v66 = v63;
                }
                int v67 = memcmp(v189, v60, v66);
                swift_release();
                swift_release();
                sub_10006D144(v24, v26);
                uint64_t v5 = v178;
                uint64_t v10 = v182;
                if (!v67) {
                  goto LABEL_134;
                }
              }
              goto LABEL_16;
            default:
              v189[0] = v183;
              LOBYTE(v189[1]) = v171;
              *(_WORD *)((char *)&v189[1] + 1) = *(_WORD *)((char *)&v183 + 5);
              HIBYTE(v189[1]) = HIBYTE(v183);
              v189[2] = v180;
              LOWORD(v189[3]) = WORD2(v180);
              if (!v31)
              {
LABEL_60:
                uint64_t v190 = v24;
                LOWORD(v191) = v26;
                BYTE2(v191) = BYTE2(v26);
                BYTE3(v191) = BYTE3(v26);
                BYTE4(v191) = BYTE4(v26);
                BYTE5(v191) = BYTE5(v26);
                int v50 = memcmp(v189, &v190, BYTE6(v26));
                goto LABEL_119;
              }
              if (v31 == 1)
              {
                uint64_t v5 = (int)v24;
                uint64_t v35 = (v24 >> 32) - (int)v24;
                if (v24 >> 32 < (int)v24) {
                  goto LABEL_173;
                }
                sub_10006D0EC(v24, v26);
                uint64_t v36 = __DataStorage._bytes.getter();
                if (!v36)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_199:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_200:
                  __break(1u);
LABEL_201:
                  __break(1u);
LABEL_202:
                  __break(1u);
LABEL_203:
                  __break(1u);
LABEL_204:
                  __break(1u);
LABEL_205:
                  __break(1u);
LABEL_206:
                  __break(1u);
LABEL_207:
                  __break(1u);
LABEL_208:
                  __break(1u);
LABEL_209:
                  __break(1u);
LABEL_210:
                  __break(1u);
LABEL_211:
                  __break(1u);
                }
                uint64_t v37 = v36;
                uint64_t v38 = __DataStorage._offset.getter();
                uint64_t v5 = (int)v24 - v38;
                if (__OFSUB__((int)v24, v38)) {
                  goto LABEL_178;
                }
                goto LABEL_55;
              }
              uint64_t v59 = *(void *)(v24 + 16);
              uint64_t v5 = *(void *)(v24 + 24);
              swift_retain();
              swift_retain();
              uint64_t v60 = (char *)__DataStorage._bytes.getter();
              if (v60)
              {
                uint64_t v61 = __DataStorage._offset.getter();
                if (__OFSUB__(v59, v61)) {
                  goto LABEL_183;
                }
                v60 += v59 - v61;
              }
              BOOL v30 = __OFSUB__(v5, v59);
              int64_t v62 = v5 - v59;
              if (v30) {
                goto LABEL_176;
              }
              uint64_t v63 = __DataStorage._length.getter();
              if (!v60) {
                goto LABEL_204;
              }
              goto LABEL_98;
          }
          goto LABEL_16;
        }
LABEL_133:
        sub_10006D144(v24, v26);
LABEL_134:
        swift_bridgeObjectRelease_n();
        if (([v21 managedBySP] & 1) == 0
          || (id v81 = [v21 rawGPState],
              type metadata accessor for InstanceInfoInternal(),
              v81 == (id)static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter())
          || ([v21 isGPLocked] & 1) != 0)
        {
          sub_10006D144(v183, v180);
        }
        else
        {
          id v82 = v21;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((*v166 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v166 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_10006D144(v183, v180);
        }
LABEL_7:
        unint64_t v13 = v167 + 49;
        char v14 = v169;
LABEL_8:
        char v11 = 1;
        uint64_t v12 = 1;
        if ((v14 & 1) == 0) {
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*v166 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v135 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v135) {
            goto LABEL_191;
          }
LABEL_146:
          if ((sub_10026863C() & 1) == 0)
          {
            uint64_t v119 = v167[147];
            uint64_t v120 = v167[98];
            *unint64_t v13 = 0u;
            v13[1] = 0u;
            uint64_t v121 = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
            v167[157] = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
            Class v122 = (os_unfair_lock_s **)(v120 + v121);
            swift_beginAccess();
            long long v123 = *v122;
            os_log_type_t v124 = *v122 + 4;
            swift_retain();
            os_unfair_lock_lock(v123 + 5);
            sub_1000B3ED0(v124);
            os_unfair_lock_unlock(v123 + 5);
            if (!v119)
            {
              uint64_t v125 = v167[98];
              swift_release();
              int v126 = *(_DWORD *)(v125 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 48);
              uint64_t v127 = CredentialInternal.friendlyName.getter();
              uint64_t v129 = v128;
              v167[158] = v128;
              Class v130 = (void *)swift_task_alloc();
              v167[159] = v130;
              *Class v130 = v167;
              v130[1] = sub_1002476A0;
              uint64_t v131 = v167[103];
              uint64_t v132 = v167[102];
              sub_1000AA898(v132, v131, v126, v127, v129);
            }
            return;
          }
          if (SESInternalVariant())
          {
            unint64_t v95 = v167[103];
            uint64_t v96 = v167[102];
            v167[71] = 95;
            v167[72] = 0xE100000000000000;
            uint64_t v97 = swift_task_alloc();
            *(void *)(v97 + 16) = v167 + 71;
            swift_bridgeObjectRetain();
            uint64_t v98 = sub_100251A3C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1002521E8, v97, v96, v95);
            swift_task_dealloc();
            if (*(void *)(v98 + 16))
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v99 = static String._fromSubstring(_:)();
              unint64_t v101 = v100;
              swift_bridgeObjectRelease();
              v167[152] = sub_10011FE64(v99, v101);
              v167[153] = v102;
              if (v102 >> 60 != 15)
              {
                uint64_t v103 = (void *)v167[144];
                Class isa = Array._bridgeToObjectiveC()().super.isa;
                v167[154] = isa;
                swift_bridgeObjectRelease();
                Class v105 = Data._bridgeToObjectiveC()().super.isa;
                v167[155] = v105;
                v167[2] = v167;
                v167[3] = sub_10024725C;
                uint64_t v106 = swift_continuation_init();
                v167[34] = _NSConcreteStackBlock;
                v167[35] = 0x40000000;
                v167[36] = sub_1001BDDAC;
                v167[37] = &unk_100417260;
                v167[38] = v106;
                [v103 startWiredModeWithApplets:isa externalAuth:v105 completion:v167 + 34];
                _swift_continuation_await(v167 + 2);
                return;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            uint64_t v190 = 0;
            unint64_t v191 = 0xE000000000000000;
            _StringGuts.grow(_:)(51);
            v133._object = (void *)0x80000001003B8BE0;
            v133._countAndFlagsBits = 0xD000000000000047;
            String.append(_:)(v133);
            v134._countAndFlagsBits = 0xD000000000000031;
            v134._object = (void *)0x80000001003B3CA0;
            String.append(_:)(v134);
          }
LABEL_165:
          _assertionFailure(_:_:file:line:flags:)();
          return;
        }
        if (*(void *)((*v166 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_146;
        }
LABEL_191:
        uint64_t v83 = v167;
        uint64_t v136 = (void (*)(uint64_t, uint64_t, uint64_t))v167[139];
        uint64_t v137 = v167[127];
        uint64_t v138 = v167[125];
        unint64_t v139 = v167[101];
        uint64_t v140 = v167[100];
        uint64_t v141 = v167[99];
        swift_bridgeObjectRelease();
        v136(v137, v141, v138);
        sub_10006D0EC(v140, v139);
        sub_10006D0EC(v140, v139);
        unint64_t v142 = Logger.logObject.getter();
        os_log_type_t v143 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v142, v143))
        {
          uint64_t v179 = v167[127];
          uint64_t v185 = v167[125];
          v188 = (void (*)(uint64_t, uint64_t))v167[141];
          unint64_t v144 = v167[101];
          uint64_t v145 = v167[100];
          uint64_t v146 = swift_slowAlloc();
          uint64_t v190 = swift_slowAlloc();
          *(_DWORD *)uint64_t v146 = 136315650;
          os_log_type_t v181 = v143;
          v167[87] = sub_100290514(0xD000000000000047, 0x80000001003B8BE0, &v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v146 + 12) = 2080;
          v167[89] = sub_10023CDF4(v145, v144);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_1000756D0();
          uint64_t v147 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v149 = v148;
          swift_bridgeObjectRelease();
          v167[90] = sub_100290514(v147, v149, &v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v145, v144);
          sub_10006D144(v145, v144);
          *(_WORD *)(v146 + 22) = 2080;
          uint64_t v150 = UUID.uuidString.getter();
          v167[91] = sub_100290514(v150, v151, &v190);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v188(v179, v185);
          _os_log_impl((void *)&_mh_execute_header, v142, v181, "%s: Instance AID %s is not found under credential %s", (uint8_t *)v146, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v152 = (void (*)(uint64_t, uint64_t))v167[141];
          uint64_t v153 = v167[127];
          uint64_t v154 = v167[125];
          unint64_t v155 = v167[101];
          uint64_t v156 = v167[100];
          sub_10006D144(v156, v155);
          sub_10006D144(v156, v155);
          v152(v153, v154);
        }

        Class v157 = (void *)v167[146];
        int v158 = (void *)v167[145];
        unint64_t v159 = (void *)v167[144];
        uint64_t v160 = (void *)v167[143];
        uint64_t v161 = (void *)v167[137];
        uint64_t v162 = (void *)v167[136];
        sub_10008E594();
        uint64_t v93 = swift_allocError();
        *__int16 v163 = 5;
        swift_willThrow();

        swift_unknownObjectRelease();
LABEL_195:
        v83[174] = v93;
        char v164 = (void *)swift_task_alloc();
        v83[175] = v164;
        *char v164 = v83;
        v164[1] = sub_100248AF4;
        sub_1001BDE44();
        return;
      case 2uLL:
        uint64_t v34 = *(void *)(v24 + 16);
        uint64_t v33 = *(void *)(v24 + 24);
        BOOL v30 = __OFSUB__(v33, v34);
        uint64_t v32 = v33 - v34;
        if (!v30) {
          goto LABEL_33;
        }
        goto LABEL_168;
      case 3uLL:
        if (v27) {
          goto LABEL_15;
        }
        goto LABEL_133;
      default:
        uint64_t v32 = BYTE6(v26);
        goto LABEL_33;
    }
  }
}

uint64_t sub_10024725C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 1248) = v1;
  if (v1) {
    id v2 = sub_100248F98;
  }
  else {
    id v2 = sub_100247398;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100247398()
{
  uint64_t v1 = (void *)v0[155];
  id v2 = (void *)v0[154];
  sub_100075868(v0[152], v0[153]);

  uint64_t v3 = v0[112];
  uint64_t v4 = v0[111];
  uint64_t v5 = v0[110];
  uint64_t v6 = v0[109];
  uint64_t v7 = v0[98];
  CredentialInternal.configUUID.getter();
  uint64_t v27 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
  uint64_t v28 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
  uint64_t v29 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
  uint64_t v30 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
  swift_bridgeObjectRetain();
  static Date.now.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v5);
  Calendar.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  TimeZone.init(abbreviation:)();
  uint64_t v8 = type metadata accessor for TimeZone();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1) {
    __break(1u);
  }
  uint64_t v9 = v0[126];
  uint64_t v25 = v0[125];
  uint64_t v26 = v0[128];
  uint64_t v10 = v0[124];
  char v11 = (int *)v0[120];
  uint64_t v12 = v0[119];
  uint64_t v13 = v0[118];
  uint64_t v14 = v0[117];
  uint64_t v24 = v0[116];
  uint64_t v15 = v0[115];
  uint64_t v16 = v0[114];
  uint64_t v17 = v0[113];
  Calendar.timeZone.setter();
  Calendar.startOfDay(for:)();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v18(v12, v24);
  Date.timeIntervalSince1970.getter();
  double v20 = v19 * 1000.0;
  v18(v13, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v10, v26, v25);
  *(unsigned char *)(v10 + v11[5]) = 1;
  uint64_t v21 = (void *)(v10 + v11[8]);
  *uint64_t v21 = v27;
  v21[1] = v28;
  *(void *)(v10 + v11[7]) = v29;
  *(void *)(v10 + v11[6]) = v30;
  *(double *)(v10 + v11[9]) = v20;
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100468A98;
  v0[169] = qword_100468A98;
  return _swift_task_switch(sub_10024835C, v22, 0);
}

uint64_t sub_1002476A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[160] = a1;
  v4[161] = a2;
  v4[162] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = sub_100249428;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1002477F8;
  }
  return _swift_task_switch(v5, 0, 0);
}

void sub_1002477F8()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 1296);
  uint64_t v2 = (os_unfair_lock_s **)(*(void *)(v0 + 784) + *(void *)(v0 + 1256));
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 4;
  uint64_t v5 = v3 + 5;
  os_unfair_lock_lock(v3 + 5);
  sub_10025203C(v4, &v38);
  *(void *)(v0 + 1304) = v1;
  os_unfair_lock_unlock(v5);
  if (v1) {
    return;
  }
  char v6 = v38;
  swift_endAccess();
  if (v6)
  {
    swift_bridgeObjectRetain();
    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(NSArray *)(v0 + 1312) = v7;
    swift_bridgeObjectRelease();
    unint64_t v8 = *(void *)(v0 + 592);
    *(void *)(v0 + 1320) = v8;
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_5:
        if ((v8 & 0xC000000000000001) == 0)
        {
          if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            __break(1u);
          }
          id v10 = *(id *)(v8 + 32);
          goto LABEL_8;
        }
LABEL_21:
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_8:
        id v11 = v10;
        *(void *)(v0 + 1328) = v10;
        uint64_t v12 = *(void **)(v0 + 1152);
        swift_bridgeObjectRelease();
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1336) = isa;
        *(void *)(v0 + 144) = v0;
        *(void *)(v0 + 152) = sub_100247E5C;
        uint64_t v14 = swift_continuation_init();
        *(void *)(v0 + 312) = _NSConcreteStackBlock;
        *(void *)(v0 + 320) = 0x40000000;
        *(void *)(v0 + 328) = sub_1001BDDAC;
        *(void *)(v0 + 336) = &unk_100417220;
        *(void *)(v0 + 344) = v14;
        [v12 startWiredModeWithApplets:v7.super.isa selectOnStart:v11 externalAuth:isa completion:v0 + 312];
        _swift_continuation_await(v0 + 144);
        return;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v9) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "End Wired Mode has been called while presenting auth sheet", v17, 2u);
    swift_slowDealloc();
  }
  unint64_t v18 = *(void *)(v0 + 1288);
  uint64_t v19 = *(void *)(v0 + 1280);

  sub_1000ABF88(0);
  sub_10008E594();
  swift_allocError();
  *double v20 = 10;
  swift_willThrow();
  sub_10006D144(v19, v18);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    id v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)id v23 = 136315138;
    swift_getErrorValue();
    uint64_t v24 = Error.localizedDescription.getter();
    *(void *)(v0 + 616) = sub_100290514(v24, v25, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error %s encountered when authorizing in wired mode", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v26 = *(void *)(v0 + 1256);
  uint64_t v27 = *(void *)(v0 + 784);
  sub_1000ABF88(0);
  uint64_t v28 = *(void *)(v27 + v26);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v28 + 20));
  sub_1000B3EE8((unsigned char *)(v28 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v28 + 20));
  uint64_t v29 = *(void **)(v0 + 1160);
  uint64_t v30 = *(void **)(v0 + 1152);
  uint64_t v31 = *(void **)(v0 + 1144);
  uint64_t v32 = *(void **)(v0 + 1096);
  uint64_t v36 = *(void **)(v0 + 1088);
  uint64_t v37 = *(void **)(v0 + 1168);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v33 = swift_allocError();
  *uint64_t v34 = 8;
  swift_willThrow();

  swift_unknownObjectRelease();
  swift_errorRelease();

  sub_10008BECC(*(void *)(v0 + 392));
  *(void *)(v0 + 1392) = v33;
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 1400) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100248AF4;
  sub_1001BDE44();
}

uint64_t sub_100247E5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 1344) = v1;
  if (v1) {
    uint64_t v2 = sub_10024979C;
  }
  else {
    uint64_t v2 = sub_100247F98;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100247F98()
{
  uint64_t v1 = *(void **)(v0 + 1328);
  uint64_t v2 = *(void **)(v0 + 1312);
  uint64_t v3 = *(void *)(v0 + 1304);
  uint64_t v4 = *(void *)(v0 + 1256);
  uint64_t v5 = *(void *)(v0 + 784);

  sub_1000ABF88(1);
  uint64_t v6 = *(void *)(v5 + v4);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 20));
  sub_1000B3EE8((unsigned char *)(v6 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 20));
  if (!v3)
  {
    sub_10006D144(*(void *)(v0 + 1280), *(void *)(v0 + 1288));
    swift_release();
    sub_10008BECC(*(void *)(v0 + 392));

    NSArray v7 = *(void **)(v0 + 416);
    swift_bridgeObjectRelease();

    uint64_t v8 = *(void *)(v0 + 896);
    uint64_t v9 = *(void *)(v0 + 888);
    uint64_t v10 = *(void *)(v0 + 880);
    uint64_t v11 = *(void *)(v0 + 872);
    uint64_t v12 = *(void *)(v0 + 784);
    CredentialInternal.configUUID.getter();
    uint64_t v33 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
    uint64_t v34 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
    uint64_t v35 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
    uint64_t v36 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
    swift_bridgeObjectRetain();
    static Date.now.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for Calendar.Identifier.gregorian(_:), v10);
    Calendar.init(identifier:)();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    TimeZone.init(abbreviation:)();
    uint64_t v13 = type metadata accessor for TimeZone();
    uint64_t v14 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13);
    if (v14 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v17 = *(void *)(v0 + 1008);
      uint64_t v31 = *(void *)(v0 + 1000);
      uint64_t v32 = *(void *)(v0 + 1024);
      uint64_t v18 = *(void *)(v0 + 992);
      uint64_t v19 = *(int **)(v0 + 960);
      uint64_t v20 = *(void *)(v0 + 952);
      uint64_t v21 = *(void *)(v0 + 944);
      uint64_t v22 = *(void *)(v0 + 936);
      uint64_t v30 = *(void *)(v0 + 928);
      uint64_t v23 = *(void *)(v0 + 920);
      uint64_t v24 = *(void *)(v0 + 912);
      uint64_t v25 = *(void *)(v0 + 904);
      Calendar.timeZone.setter();
      Calendar.startOfDay(for:)();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v26(v20, v30);
      Date.timeIntervalSince1970.getter();
      double v28 = v27 * 1000.0;
      v26(v21, v30);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v18, v32, v31);
      *(unsigned char *)(v18 + v19[5]) = 1;
      uint64_t v29 = (void *)(v18 + v19[8]);
      void *v29 = v33;
      v29[1] = v34;
      *(void *)(v18 + v19[7]) = v35;
      *(void *)(v18 + v19[6]) = v36;
      *(double *)(v18 + v19[9]) = v28;
      if (qword_100453958 != -1) {
        swift_once();
      }
      uint64_t v15 = qword_100468A98;
      *(void *)(v0 + 1352) = qword_100468A98;
      uint64_t v14 = sub_10024835C;
      uint64_t v16 = 0;
    }
    _swift_task_switch(v14, v15, v16);
  }
}

uint64_t sub_10024835C()
{
  uint64_t v1 = v0[124];
  uint64_t v2 = v0[123];
  uint64_t v3 = v0[121];
  uint64_t v4 = v0[108];
  uint64_t v5 = v0[107];
  uint64_t v6 = v0[106];
  id v7 = [*(id *)(v0[169] + 112) viewContext];
  v0[170] = v7;
  sub_10011FBA8(v1, v2);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[171] = v9;
  *(void *)(v9 + 16) = v7;
  sub_10011FD08(v2, v9 + v8);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
  v7;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[172] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100248518;
  uint64_t v11 = v0[108];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_100252178, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_100248518()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1384) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[169];
  (*(void (**)(void, void))(v2[107] + 8))(v2[108], v2[106]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_100248938;
  }
  else {
    uint64_t v4 = sub_1002486E4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002486E4()
{
  return _swift_task_switch(sub_100248778, 0, 0);
}

uint64_t sub_100248778()
{
  uint64_t v1 = *(void **)(v0 + 1168);
  uint64_t v2 = *(void **)(v0 + 1160);
  uint64_t v3 = *(void **)(v0 + 1152);
  uint64_t v4 = *(void **)(v0 + 1144);
  uint64_t v5 = *(void **)(v0 + 1096);
  uint64_t v6 = *(void **)(v0 + 1088);
  uint64_t v7 = *(void *)(v0 + 992);
  (*(void (**)(void))(v0 + 832))(0);

  swift_unknownObjectRelease();
  sub_10011FDDC(v7);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100248938()
{
  return _swift_task_switch(sub_1002489CC, 0, 0);
}

uint64_t sub_1002489CC()
{
  uint64_t v1 = *(void **)(v0 + 1168);
  uint64_t v2 = *(void **)(v0 + 1160);
  uint64_t v3 = *(void **)(v0 + 1152);
  uint64_t v4 = *(void **)(v0 + 1144);
  uint64_t v5 = *(void **)(v0 + 1088);
  uint64_t v6 = *(void *)(v0 + 992);

  swift_unknownObjectRelease();
  sub_10011FDDC(v6);
  *(void *)(v0 + 1392) = *(void *)(v0 + 1384);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 1400) = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100248AF4;
  return sub_1001BDE44();
}

uint64_t sub_100248AF4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100248C1C, 0, 0);
}

uint64_t sub_100248C1C()
{
  uint64_t v1 = v0[174];
  uint64_t v2 = (void (*)(uint64_t))v0[104];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100248DAC()
{
  uint64_t v1 = *(void **)(v0 + 1096);

  *(void *)(v0 + 1392) = *(void *)(v0 + 1176);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 1400) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100248AF4;
  return sub_1001BDE44();
}

uint64_t sub_100248E80()
{
  uint64_t v1 = (void *)v0[146];
  uint64_t v2 = (void *)v0[145];
  uint64_t v3 = (void *)v0[144];
  uint64_t v4 = (void *)v0[143];
  uint64_t v5 = (void *)v0[137];
  uint64_t v6 = (void *)v0[136];
  swift_willThrow();

  v0[174] = v0[148];
  uint64_t v7 = (void *)swift_task_alloc();
  v0[175] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100248AF4;
  return sub_1001BDE44();
}

uint64_t sub_100248F98()
{
  uint64_t v39 = v0;
  uint64_t v1 = (void *)v0[155];
  uint64_t v2 = (void *)v0[154];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v36 = v0[153];
    uint64_t v34 = v0[152];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[86] = sub_100290514(v6, v7, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "NearField Error %s encountered when authorizing in wired mode -- CAM path", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100075868(v34, v36);

    swift_errorRelease();
  }
  else
  {
    sub_100075868(v0[152], v0[153]);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[112];
  uint64_t v9 = v0[111];
  uint64_t v10 = v0[110];
  uint64_t v11 = v0[109];
  uint64_t v12 = v0[98];
  CredentialInternal.configUUID.getter();
  uint64_t v32 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
  uint64_t v33 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
  uint64_t v35 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
  uint64_t v37 = *(void *)(v12 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
  swift_bridgeObjectRetain();
  static Date.now.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, enum case for Calendar.Identifier.gregorian(_:), v10);
  Calendar.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  TimeZone.init(abbreviation:)();
  uint64_t v13 = type metadata accessor for TimeZone();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v11, 1, v13) == 1) {
    __break(1u);
  }
  uint64_t v14 = v0[126];
  uint64_t v30 = v0[125];
  uint64_t v31 = v0[128];
  uint64_t v15 = v0[124];
  uint64_t v16 = (int *)v0[120];
  uint64_t v17 = v0[119];
  uint64_t v18 = v0[118];
  uint64_t v19 = v0[117];
  uint64_t v29 = v0[116];
  uint64_t v20 = v0[115];
  uint64_t v21 = v0[114];
  uint64_t v22 = v0[113];
  Calendar.timeZone.setter();
  Calendar.startOfDay(for:)();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  v23(v17, v29);
  Date.timeIntervalSince1970.getter();
  double v25 = v24 * 1000.0;
  v23(v18, v29);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v15, v31, v30);
  *(unsigned char *)(v15 + v16[5]) = 1;
  uint64_t v26 = (void *)(v15 + v16[8]);
  void *v26 = v32;
  v26[1] = v33;
  *(void *)(v15 + v16[7]) = v35;
  *(void *)(v15 + v16[6]) = v37;
  *(double *)(v15 + v16[9]) = v25;
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_100468A98;
  v0[169] = qword_100468A98;
  return _swift_task_switch(sub_10024835C, v27, 0);
}

uint64_t sub_100249428()
{
  uint64_t v20 = v0;
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 616) = sub_100290514(v4, v5, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error %s encountered when authorizing in wired mode", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = *(void *)(v0 + 1256);
  uint64_t v7 = *(void *)(v0 + 784);
  sub_1000ABF88(0);
  uint64_t v8 = *(void *)(v7 + v6);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 20));
  sub_1000B3EE8((unsigned char *)(v8 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 20));
  uint64_t v9 = *(void **)(v0 + 1168);
  uint64_t v10 = *(void **)(v0 + 1152);
  uint64_t v17 = *(void **)(v0 + 1160);
  uint64_t v18 = *(void **)(v0 + 1144);
  uint64_t v11 = *(void **)(v0 + 1096);
  uint64_t v12 = *(void **)(v0 + 1088);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10008E594();
  uint64_t v13 = swift_allocError();
  *uint64_t v14 = 8;
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_10008BECC(*(void *)(v0 + 392));

  *(void *)(v0 + 1392) = v13;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 1400) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100248AF4;
  return sub_1001BDE44();
}

uint64_t sub_10024979C()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void **)(v0 + 1336);
  os_log_type_t v2 = *(void **)(v0 + 1328);
  uint64_t v3 = *(void **)(v0 + 1312);
  unint64_t v4 = *(void *)(v0 + 1288);
  uint64_t v5 = *(void *)(v0 + 1280);
  swift_willThrow();
  sub_10006D144(v5, v4);

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    *(void *)(v0 + 616) = sub_100290514(v9, v10, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error %s encountered when authorizing in wired mode", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v11 = *(void *)(v0 + 1256);
  uint64_t v12 = *(void *)(v0 + 784);
  sub_1000ABF88(0);
  uint64_t v13 = *(void *)(v12 + v11);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 20));
  sub_1000B3EE8((unsigned char *)(v13 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 20));
  uint64_t v14 = *(void **)(v0 + 1168);
  uint64_t v15 = *(void **)(v0 + 1152);
  uint64_t v22 = *(void **)(v0 + 1160);
  uint64_t v23 = *(void **)(v0 + 1144);
  uint64_t v16 = *(void **)(v0 + 1096);
  uint64_t v17 = *(void **)(v0 + 1088);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10008E594();
  uint64_t v18 = swift_allocError();
  *uint64_t v19 = 8;
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_10008BECC(*(void *)(v0 + 392));

  *(void *)(v0 + 1392) = v18;
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 1400) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100248AF4;
  return sub_1001BDE44();
}

uint64_t sub_100249E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 152) = a8;
  *(void *)(v8 + 160) = v12;
  *(void *)(v8 + 136) = a6;
  *(void *)(v8 + 144) = a7;
  *(_DWORD *)(v8 + 208) = a5;
  *(void *)(v8 + 128) = a4;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 168) = v9;
  *(void *)(v8 + 176) = *(void *)(v9 - 8);
  *(void *)(v8 + 184) = swift_task_alloc();
  return _swift_task_switch(sub_100249F78, 0, 0);
}

uint64_t sub_100249F78()
{
  uint64_t v87 = v0;
  uint64_t v1 = (id *)(v0 + 128);
  os_log_type_t v2 = *(char **)(v0 + 128);
  uint64_t v3 = &v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
  if (v4 >> 62 == 1)
  {
    uint64_t v5 = *(void **)v3;
    uint64_t v6 = (void *)*((void *)v3 + 1);
    os_log_type_t v7 = (void *)(v4 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v8 = (void *)*((void *)v3 + 2);
    if (v6)
    {
      Strong = (void *)swift_unknownObjectWeakLoadStrong();
      id v10 = v6;
      sub_1001D05A4(v5, v6, v8, v4);
      if (Strong)
      {
        sub_1001A8590(*(_DWORD *)(v0 + 208));
      }
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10008E55C(v11, (uint64_t)qword_1004686A8);
      id v12 = v8;
      id v13 = v7;
      id v14 = v10;
      id v15 = v5;
      id v83 = v12;
      id v84 = v13;
      id v16 = v14;
      id v17 = v15;
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = v17;
        log = v18;
        uint64_t v21 = *(void *)(v0 + 176);
        uint64_t v22 = *(void *)(v0 + 184);
        uint64_t v79 = *(void *)(v0 + 168);
        os_log_type_t type = v19;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        v86[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        CredentialInternal.identifier.getter();
        uint64_t v24 = UUID.uuidString.getter();
        unint64_t v26 = v25;
        uint64_t v27 = v22;
        id v17 = v20;
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v27, v79);
        *(void *)(v0 + 120) = sub_100290514(v24, v26, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, log, type, "Transceiving to instance of credential %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 80) = 0;
      id v48 = [v16 wiredModeTransceive:isa outError:v0 + 80];

      id v49 = *(id *)(v0 + 80);
      if (v48)
      {
        int v50 = *(void (**)(uint64_t, unint64_t, void))(v0 + 152);
        uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v53 = v52;

        sub_10006D0EC(v51, v53);
        v50(v51, v53, 0);

        sub_10006D144(v51, v53);
        sub_10006D144(v51, v53);

LABEL_44:
        swift_task_dealloc();
        uint64_t v72 = *(uint64_t (**)(void))(v0 + 8);
        return v72();
      }
      size_t v54 = v49;
      id v82 = v17;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        v86[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 136315394;
        *(void *)(v0 + 88) = sub_100290514(0xD000000000000014, 0x80000001003B8BC0, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v57 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v58 = Error.localizedDescription.getter();
        *(void *)(v0 + 112) = sub_100290514(v58, v59, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s: Nearfield error %s encountered when transceiving in wired mode", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_10008E594();
      uint64_t v45 = swift_allocError();
      *int64_t v78 = 8;
      swift_willThrow();

      swift_errorRelease();
    }
    else
    {
      uint64_t v37 = qword_1004536D0;
      id v38 = v5;
      id v39 = v8;
      id v40 = v7;
      if (v37 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      sub_10008E55C(v41, (uint64_t)qword_1004686A8);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        id v85 = v38;
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        v86[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 136315138;
        *(void *)(v0 + 72) = sub_100290514(0xD000000000000014, 0x80000001003B8BC0, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s: NFCredentialSession has been invalidated", v44, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v38 = v85;
        swift_slowDealloc();
      }

      sub_10008E594();
      uint64_t v45 = swift_allocError();
      *uint64_t v46 = 9;
      swift_willThrow();
    }
  }
  else
  {
    if (qword_1004536D0 != -1)
    {
      swift_once();
      os_log_type_t v2 = (char *)*v1;
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E55C(v28, (uint64_t)qword_1004686A8);
    uint64_t v29 = v2;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      unint64_t v33 = *((void *)v3 + 3);
      if (v33 >> 62)
      {
        if (v33 >> 62 == 1)
        {
          unint64_t v34 = 0xE500000000000000;
          uint64_t v35 = 0x6465726957;
        }
        else
        {
          BOOL v60 = (*((void *)v3 + 2) | *(void *)v3 | *((void *)v3 + 1)) == 0;
          BOOL v61 = v33 == 0x8000000000000000;
          if (v61 && v60) {
            uint64_t v35 = 0x656D6567616E614DLL;
          }
          else {
            uint64_t v35 = 0x64696C61766E49;
          }
          if (v61 && v60) {
            unint64_t v34 = 0xEA0000000000746ELL;
          }
          else {
            unint64_t v34 = 0xE700000000000000;
          }
        }
      }
      else
      {
        unint64_t v34 = 0xED00006E6F697461;
        uint64_t v35 = 0x6C756D4564726143;
      }
      id v62 = *v1;
      *(void *)(v0 + 64) = sub_100290514(v35, v34, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unexpected state %s while trying to transceive in wired mode", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v36 = *v1;
    }
    sub_10008E594();
    uint64_t v45 = swift_allocError();
    *uint64_t v63 = 10;
    swift_willThrow();
  }
  uint64_t v64 = (void *)(v0 + 40);
  *(void *)(v0 + 104) = v45;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (!swift_dynamicCast()) {
    goto LABEL_43;
  }
  if (*v64 == 9)
  {
    swift_errorRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    sub_10008E55C(v74, (uint64_t)qword_1004686A8);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      v86[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v77 = 136315138;
      *(void *)(v0 + 48) = sub_100290514(0xD000000000000014, 0x80000001003B8BC0, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "%s: Transitioning to management state because of unavailable nearfield resource", v77, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v69 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v69;
    void *v69 = v0;
    uint64_t v70 = sub_10024AF98;
    goto LABEL_52;
  }
  if (*v64 != 8)
  {
LABEL_43:
    int64_t v71 = *(void (**)(void, unint64_t, uint64_t))(v0 + 152);
    swift_errorRelease();
    swift_errorRetain();
    v71(0, 0xF000000000000000, v45);
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_44;
  }
  swift_errorRelease();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v65 = type metadata accessor for Logger();
  sub_10008E55C(v65, (uint64_t)qword_1004686A8);
  size_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    v86[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 136315138;
    *(void *)(v0 + 56) = sub_100290514(0xD000000000000014, 0x80000001003B8BC0, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s: Transitioning to management state because of nearfield error", v68, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v69 = (void *)swift_task_alloc();
  *(void *)(v0 + 192) = v69;
  void *v69 = v0;
  uint64_t v70 = sub_10024AD8C;
LABEL_52:
  v69[1] = v70;
  return sub_1001BDE44();
}

uint64_t sub_10024AD8C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10024AEB4, 0, 0);
}

uint64_t sub_10024AEB4()
{
  uint64_t v1 = *(void (**)(void, unint64_t, uint64_t))(v0 + 152);
  sub_10008E594();
  uint64_t v2 = swift_allocError();
  *uint64_t v3 = 8;
  v1(0, 0xF000000000000000, v2);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10024AF98()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10024B0C0, 0, 0);
}

uint64_t sub_10024B0C0()
{
  uint64_t v1 = *(void (**)(void, unint64_t, uint64_t))(v0 + 152);
  sub_10008E594();
  uint64_t v2 = swift_allocError();
  *uint64_t v3 = 32;
  v1(0, 0xF000000000000000, v2);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_10024B398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[88] = a8;
  v8[87] = a7;
  v8[86] = a6;
  v8[85] = a5;
  v8[84] = a4;
  uint64_t v9 = type metadata accessor for Logger();
  v8[89] = v9;
  v8[90] = *(void *)(v9 - 8);
  v8[91] = swift_task_alloc();
  v8[92] = swift_task_alloc();
  v8[93] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v8[94] = v10;
  v8[95] = *(void *)(v10 - 8);
  v8[96] = swift_task_alloc();
  sub_10006C51C((uint64_t *)&unk_100459AD0);
  v8[97] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Calendar.Identifier();
  v8[98] = v11;
  v8[99] = *(void *)(v11 - 8);
  v8[100] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Calendar();
  v8[101] = v12;
  v8[102] = *(void *)(v12 - 8);
  v8[103] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Date();
  v8[104] = v13;
  v8[105] = *(void *)(v13 - 8);
  v8[106] = swift_task_alloc();
  v8[107] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for PresentmentInfo();
  v8[108] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v8[109] = v15;
  v8[110] = *(void *)(v15 + 64);
  v8[111] = swift_task_alloc();
  v8[112] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for StateInternal();
  v8[113] = v16;
  v8[114] = *(void *)(v16 - 8);
  v8[115] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for UUID();
  v8[116] = v17;
  v8[117] = *(void *)(v17 - 8);
  v8[118] = swift_task_alloc();
  v8[119] = swift_task_alloc();
  return _swift_task_switch(sub_10024B79C, 0, 0);
}

uint64_t sub_10024B79C()
{
  uint64_t v77 = v0;
  uint64_t v1 = (id *)(v0 + 84);
  uint64_t v2 = (char *)v0[84];
  uint64_t v3 = &v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  v0[120] = v4;
  uint64_t v5 = (void *)*((void *)v3 + 1);
  v0[121] = v5;
  uint64_t v6 = (void *)*((void *)v3 + 2);
  v0[122] = v6;
  unint64_t v7 = *((void *)v3 + 3);
  v0[123] = v7;
  if (v7 >> 62)
  {
    if (v7 >> 62 == 1)
    {
      uint64_t v8 = (void *)(v7 & 0x3FFFFFFFFFFFFFFFLL);
      id v9 = v5;
      id v10 = v4;
      id v11 = v9;
      id v12 = v10;
      sub_1001D05A4(v4, v5, v6, v7);
      uint64_t v13 = qword_1004536D0;
      id v14 = v6;
      id v15 = v8;
      if (v13 != -1) {
        swift_once();
      }
      uint64_t v16 = (void *)v0[84];
      v0[124] = sub_10008E55C(v0[89], (uint64_t)qword_1004686A8);
      id v17 = v16;
      id v18 = v12;
      id v19 = v11;
      id v20 = v14;
      id v21 = v15;
      id v22 = v17;
      id v23 = v18;
      id v24 = v19;
      id v25 = v20;
      id v26 = v21;
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        size_t v73 = v25;
        uint64_t v74 = v26;
        uint64_t v29 = v0[119];
        uint64_t v75 = v23;
        uint64_t v30 = v0[117];
        uint64_t v71 = v0[116];
        os_log_type_t v31 = (void *)v0[84];
        uint64_t v32 = swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = 136315394;
        uint64_t v72 = v24;
        uint64_t v33 = UUID.uuidString.getter();
        v0[79] = sub_100290514(v33, v34, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v32 + 12) = 2080;
        CredentialInternal.identifier.getter();
        uint64_t v35 = UUID.uuidString.getter();
        unint64_t v37 = v36;
        uint64_t v38 = v29;
        id v25 = v73;
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v38, v71);
        id v23 = v75;
        v0[80] = sub_100290514(v35, v37, v76);
        id v26 = v74;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        id v24 = v72;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Session %s: Arming Current credential %s for card emulation", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (v5)
        {
LABEL_7:
          v0[18] = v0;
          v0[23] = v0 + 73;
          v0[19] = sub_10024C320;
          uint64_t v39 = swift_continuation_init();
          v0[36] = _NSConcreteStackBlock;
          v0[37] = 0x40000000;
          v0[38] = sub_10024085C;
          v0[39] = &unk_1004170A8;
          v0[40] = v39;
          [v24 requestSETransceiverWithCompletion:v0 + 36];
          return _swift_continuation_await(v0 + 18);
        }
      }
      else
      {
        id v55 = *v1;

        if (v5) {
          goto LABEL_7;
        }
      }

      os_log_type_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136315138;
        v0[66] = sub_100290514(0xD00000000000003CLL, 0x80000001003B8AC0, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s: NFCredentialSession has been invalidated", v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_10008E594();
      uint64_t v59 = swift_allocError();
      *BOOL v60 = 9;
      swift_willThrow();
    }
    else
    {
      if (qword_1004536D0 != -1)
      {
        swift_once();
        uint64_t v2 = (char *)*v1;
      }
      sub_10008E55C(v0[89], (uint64_t)qword_1004686A8);
      id v48 = v2;
      id v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        v76[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v51 = 136315138;
        unint64_t v52 = *((void *)v3 + 3);
        if (v52 >> 62)
        {
          if (v52 >> 62 == 1)
          {
            unint64_t v53 = 0xE500000000000000;
            uint64_t v54 = 0x6465726957;
          }
          else
          {
            BOOL v65 = (*((void *)v3 + 2) | *(void *)v3 | *((void *)v3 + 1)) == 0;
            BOOL v66 = v52 == 0x8000000000000000;
            if (v66 && v65) {
              uint64_t v54 = 0x656D6567616E614DLL;
            }
            else {
              uint64_t v54 = 0x64696C61766E49;
            }
            if (v66 && v65) {
              unint64_t v53 = 0xEA0000000000746ELL;
            }
            else {
              unint64_t v53 = 0xE700000000000000;
            }
          }
        }
        else
        {
          unint64_t v53 = 0xED00006E6F697461;
          uint64_t v54 = 0x6C756D4564726143;
        }
        id v67 = *v1;
        v0[83] = sub_100290514(v54, v53, v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unexpected state %s when arming current credential for card emulation", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        id v64 = *v1;
      }
      sub_10008E594();
      uint64_t v59 = swift_allocError();
      void *v68 = 10;
      swift_willThrow();
    }
    v0[148] = v59;
    uint64_t v69 = (void *)swift_task_alloc();
    v0[149] = v69;
    void *v69 = v0;
    v69[1] = sub_10024FC28;
    return sub_1001BDE44();
  }
  else
  {
    if (qword_1004536D0 != -1)
    {
      swift_once();
      uint64_t v2 = (char *)*v1;
    }
    sub_10008E55C(v0[89], (uint64_t)qword_1004686A8);
    id v40 = v2;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = (void *)v0[84];
    if (v43)
    {
      uint64_t v45 = swift_slowAlloc();
      v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v46 = UUID.uuidString.getter();
      v0[81] = sub_100290514(v46, v47, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v45 + 12) = 2080;
      v0[82] = sub_100290514(0xD00000000000003CLL, 0x80000001003B8AC0, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Session %s: %s: Current Credential already in Card Emulation", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    BOOL v61 = (void (*)(void))v0[85];
    sub_10008E594();
    swift_allocError();
    *id v62 = 10;
    v61();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v63 = (uint64_t (*)(void))v0[1];
    return v63();
  }
}

uint64_t sub_10024C320()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  *(void *)(*v0 + 1000) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 984);
    unint64_t v4 = *(void **)(v1 + 968);
    uint64_t v5 = *(void **)(v1 + 960);

    uint64_t v6 = sub_10024FED0;
  }
  else
  {
    uint64_t v6 = sub_10024C494;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10024C494()
{
  unint64_t v264 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[73];
  v0[126] = v2;
  if (!v2)
  {
    uint64_t v29 = v0[123];
    uint64_t v30 = (void *)v1[121];
    os_log_type_t v31 = (void *)v1[120];

    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      v262 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v34 = 136315138;
      v1[71] = sub_100290514(0xD00000000000003CLL, 0x80000001003B8AC0, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: Unable to get transceiver", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v35 = (void *)v1[122];
    unint64_t v36 = (void *)v1[121];
    unint64_t v37 = (void *)v1[120];
    uint64_t v38 = (void *)(v1[123] & 0x3FFFFFFFFFFFFFFFLL);
    sub_10008E594();
    uint64_t v39 = swift_allocError();
    void *v40 = 9;
    swift_willThrow();

    goto LABEL_227;
  }
  v0[70] = 0;
  id v3 = [v2 listAppletsAndRefreshCache:0 outError:v0 + 70];
  unint64_t v4 = (void *)v0[70];
  uint64_t v5 = &selRef_fetchTrustedSecureElementIdentities_;
  id v232 = v2;
  if (!v3)
  {
    uint64_t v41 = (void *)v1[122];
    os_log_type_t v42 = (void *)v1[121];
    BOOL v43 = (void *)v1[120];
    uint64_t v44 = (void *)(v1[123] & 0x3FFFFFFFFFFFFFFFLL);
    id v45 = v4;

    _convertNSErrorToError(_:)();
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      v262 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315394;
      v1[69] = sub_100290514(0xD00000000000003CLL, 0x80000001003B8AC0, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v49 = Error.localizedDescription.getter();
      v1[67] = sub_100290514(v49, v50, (uint64_t *)&v262);
      uint64_t v5 = &selRef_fetchTrustedSecureElementIdentities_;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s: Nearfield error %s encountered when listing applets", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v71 = (void *)v1[122];
    uint64_t v72 = (void *)v1[121];
    size_t v73 = (void *)v1[120];
    uint64_t v74 = (void *)(v1[123] & 0x3FFFFFFFFFFFFFFFLL);
    [v232 v5[200]];
    sub_10008E594();
    uint64_t v39 = swift_allocError();
    *uint64_t v75 = 8;
    swift_willThrow();

    swift_errorRelease();
    goto LABEL_226;
  }
  uint64_t v6 = v3;
  unint64_t v7 = (void *)v1[120];
  uint64_t v8 = v1[115];
  uint64_t v9 = v1[114];
  uint64_t v10 = v1[113];
  v1[127] = sub_10011FB68();
  os_log_t log = (os_log_t)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = v4;

  [v2 invalidate];
  uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
  v1[64] = _swiftEmptyArrayStorage;
  CredentialInternal.state.getter();

  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 88))(v8, v10);
  if (v13 != enum case for StateInternal.installed(_:))
  {
    if (v13 == enum case for StateInternal.installationPending(_:)
      || v13 == enum case for StateInternal.installationFailed(_:)
      || v13 == enum case for StateInternal.terminated(_:))
    {
      uint64_t v76 = v1[123];
      uint64_t v77 = (void *)v1[122];
      uint64_t v78 = (void *)v1[121];
      uint64_t v79 = (void *)v1[120];
      swift_bridgeObjectRelease();

      id v80 = v79;
      id v81 = v78;
      id v82 = v77;
      id v83 = (id)(v76 & 0x3FFFFFFFFFFFFFFFLL);
      id v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      BOOL v86 = os_log_type_enabled(v84, v85);
      uint64_t v87 = v1[123];
      uint64_t v88 = (void *)v1[122];
      uint64_t v89 = (void *)v1[121];
      uint64_t v90 = (void *)v1[120];
      if (v86)
      {
        uint64_t v91 = v1[119];
        os_log_type_t v257 = v85;
        uint64_t v92 = v1[117];
        v252 = (void *)(v87 & 0x3FFFFFFFFFFFFFFFLL);
        uint64_t v248 = v1[116];
        uint64_t v93 = swift_slowAlloc();
        v262 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v93 = 136315394;
        v1[77] = sub_100290514(0xD00000000000003CLL, 0x80000001003B8AC0, (uint64_t *)&v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v93 + 12) = 2080;
        CredentialInternal.identifier.getter();
        uint64_t v94 = UUID.uuidString.getter();
        unint64_t v96 = v95;
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v91, v248);
        v1[78] = sub_100290514(v94, v96, (uint64_t *)&v262);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v84, v257, "%s: Current Credential %s is not installed", (uint8_t *)v93, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v188 = (void *)(v87 & 0x3FFFFFFFFFFFFFFFLL);
      }
      uint64_t v189 = (void *)v1[122];
      uint64_t v190 = (void *)v1[121];
      unint64_t v191 = (void *)v1[120];
      char v192 = (void *)(v1[123] & 0x3FFFFFFFFFFFFFFFLL);
      sub_10008E594();
      uint64_t v39 = swift_allocError();
      uint64_t v194 = 7;
      goto LABEL_225;
    }
    uint64_t v51 = v1[123];
    unint64_t v52 = (void *)v1[122];
    unint64_t v53 = (void *)v1[121];
    uint64_t v54 = (void *)v1[120];
    uint64_t v55 = v1[115];
    uint64_t v56 = v1[114];
    uint64_t v57 = v1[113];
    swift_bridgeObjectRelease();

    uint64_t v58 = (void *)(v51 & 0x3FFFFFFFFFFFFFFFLL);
    sub_10008E594();
    uint64_t v39 = swift_allocError();
    void *v59 = 6;
    swift_willThrow();

    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    goto LABEL_227;
  }
  id v14 = (uint64_t *)v1[115];
  uint64_t v231 = v1;
  (*(void (**)(uint64_t *, void))(v1[114] + 96))(v14, v1[113]);
  uint64_t v15 = *v14;
  if ((unint64_t)*v14 >> 62) {
    goto LABEL_219;
  }
  uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    os_log_t v17 = log;
    if (v16)
    {
      v262 = (void *)v12;
      sub_1002CFA80(0, v16 & ~(v16 >> 63), 0);
      if (v16 < 0)
      {
        __break(1u);
LABEL_231:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v97 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
      uint64_t v18 = 0;
      uint64_t v19 = (uint64_t)v262;
      unint64_t v20 = v15 & 0xC000000000000001;
      do
      {
        if (v20) {
          id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v21 = *(id *)(v15 + 8 * v18 + 32);
        }
        id v22 = v21;
        uint64_t v23 = InstanceInfoInternal.securityDomainAID.getter();
        uint64_t v25 = v24;

        v262 = (void *)v19;
        unint64_t v27 = *(void *)(v19 + 16);
        unint64_t v26 = *(void *)(v19 + 24);
        if (v27 >= v26 >> 1)
        {
          sub_1002CFA80(v26 > 1, v27 + 1, 1);
          uint64_t v19 = (uint64_t)v262;
        }
        ++v18;
        *(void *)(v19 + 16) = v27 + 1;
        uint64_t v28 = v19 + 16 * v27;
        *(void *)(v28 + 32) = v23;
        *(void *)(v28 + 40) = v25;
      }
      while (v16 != v18);
      sub_1002308A8(v19);
      v262 = _swiftEmptyArrayStorage;
      sub_1002CFA80(0, v16 & ~(v16 >> 63), 0);
      uint64_t v60 = 0;
      BOOL v61 = v262;
      do
      {
        if (v20) {
          id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v62 = *(id *)(v15 + 8 * v60 + 32);
        }
        uint64_t v63 = v62;
        uint64_t v64 = InstanceInfoInternal.instanceAID.getter();
        uint64_t v66 = v65;

        v262 = v61;
        unint64_t v68 = v61[2];
        unint64_t v67 = v61[3];
        if (v68 >= v67 >> 1)
        {
          sub_1002CFA80(v67 > 1, v68 + 1, 1);
          BOOL v61 = v262;
        }
        ++v60;
        v61[2] = v68 + 1;
        uint64_t v69 = &v61[2 * v68];
        v69[4] = v64;
        v69[5] = v66;
      }
      while (v16 != v60);
      swift_bridgeObjectRelease();
      os_log_t v17 = log;
      uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v70 = v231 + 64;
    }
    else
    {
      BOOL v61 = _swiftEmptyArrayStorage;
      uint64_t v70 = v231 + 64;
      sub_1002308A8((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = (uint64_t)(v231 + 62);
    sub_1002308A8((uint64_t)v61);
    v231[62] = v12;
    uint64_t v16 = *v70;
    uint64_t v235 = *(void *)(v16 + 16);
    if (!v235) {
      break;
    }
    uint64_t v230 = (void **)(v231 + 62);
    if ((unint64_t)v17 >> 62) {
      goto LABEL_231;
    }
    uint64_t v97 = *(void *)(((unint64_t)v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
LABEL_40:
    unint64_t v98 = 0;
    uint64_t v234 = v16 + 32;
    unint64_t v255 = (unint64_t)v17 & 0xC000000000000001;
    uint64_t v247 = v97;
    uint64_t v233 = v16;
    while (v98 < *(void *)(v16 + 16))
    {
      if (!v97) {
        goto LABEL_43;
      }
      unint64_t v236 = v98;
      uint64_t v99 = (uint64_t *)(v234 + 16 * v98);
      uint64_t v15 = *v99;
      unint64_t v100 = v99[1];
      unint64_t v258 = v100 >> 62;
      swift_bridgeObjectRetain_n();
      sub_10006D0EC(v15, v100);
      uint64_t v101 = 0;
      uint64_t v245 = BYTE6(v100);
      unint64_t v249 = v100;
      uint64_t v241 = (int)v15;
      uint64_t v237 = v15 >> 32;
      unint64_t v238 = HIDWORD(v15);
      uint64_t v253 = v15;
      BOOL v102 = __OFSUB__(HIDWORD(v15), v15);
      BOOL type = v102;
      uint64_t v242 = HIDWORD(v15) - (int)v15;
      while (2)
      {
        if (v255) {
          uint64_t v103 = (objc_class *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          uint64_t v103 = v17[v101 + 4].isa;
        }
        size_t v104 = v103;
        uint64_t v105 = v101 + 1;
        if (__OFADD__(v101, 1))
        {
          __break(1u);
LABEL_193:
          swift_bridgeObjectRelease();
          goto LABEL_194;
        }
        id v106 = [(objc_class *)v103 identifierAsData];
        uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v108 = v107;

        uint64_t v109 = 0;
        switch((int)v258)
        {
          case 1:
            uint64_t v109 = v242;
            if (!type) {
              break;
            }
            __break(1u);
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
            goto LABEL_199;
          case 2:
            uint64_t v111 = *(void *)(v253 + 16);
            uint64_t v110 = *(void *)(v253 + 24);
            BOOL v112 = __OFSUB__(v110, v111);
            uint64_t v109 = v110 - v111;
            if (!v112) {
              break;
            }
            goto LABEL_196;
          case 3:
            break;
          default:
            uint64_t v109 = v245;
            break;
        }
        uint64_t v15 = v108 >> 62;
        switch(v108 >> 62)
        {
          case 1uLL:
            LODWORD(v113) = HIDWORD(v12) - v12;
            if (__OFSUB__(HIDWORD(v12), v12)) {
              goto LABEL_197;
            }
            uint64_t v113 = (int)v113;
LABEL_67:
            if (v109 != v113)
            {
LABEL_51:
              sub_10006D144(v12, v108);
LABEL_52:

              ++v101;
              if (v105 == v97)
              {
                swift_bridgeObjectRelease_n();
                sub_10006D144(v253, v249);
                goto LABEL_42;
              }
              continue;
            }
            if (v109 >= 1)
            {
              switch((int)v258)
              {
                case 1:
                  if (v237 < v241) {
                    goto LABEL_200;
                  }
                  sub_10006D0EC(v253, v249);
                  uint64_t v120 = __DataStorage._bytes.getter();
                  if (v120)
                  {
                    uint64_t v121 = v120;
                    uint64_t v122 = __DataStorage._offset.getter();
                    if (__OFSUB__(v241, v122)) {
                      goto LABEL_202;
                    }
                    uint64_t __s1 = (void *)(v121 + v241 - v122);
                  }
                  else
                  {
                    uint64_t __s1 = 0;
                  }
                  os_log_t v17 = log;
                  __DataStorage._length.getter();
                  if (!v15)
                  {
                    v262 = (void *)v12;
                    LOWORD(v263) = v108;
                    BYTE2(v263) = BYTE2(v108);
                    BYTE3(v263) = BYTE3(v108);
                    BYTE4(v263) = BYTE4(v108);
                    BYTE5(v263) = BYTE5(v108);
                    if (!__s1) {
                      goto LABEL_243;
                    }
                    int v132 = memcmp(__s1, &v262, BYTE6(v108));
                    goto LABEL_152;
                  }
                  if (v15 == 1)
                  {
                    if (v12 >> 32 < (int)v12) {
                      goto LABEL_211;
                    }
                    swift_retain();
                    uint64_t v15 = __DataStorage._bytes.getter();
                    if (v15)
                    {
                      uint64_t v136 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v12, v136)) {
                        goto LABEL_218;
                      }
                      v15 += (int)v12 - v136;
                    }
                    uint64_t v137 = __DataStorage._length.getter();
                    if (v137 >= (v12 >> 32) - (int)v12) {
                      size_t v138 = (v12 >> 32) - (int)v12;
                    }
                    else {
                      size_t v138 = v137;
                    }
                    os_log_t v17 = log;
                    if (!__s1) {
                      goto LABEL_236;
                    }
                    uint64_t v97 = v247;
                    if (!v15) {
                      goto LABEL_237;
                    }
                    int v132 = memcmp(__s1, (const void *)v15, v138);
                    sub_10006D144(v12, v108);
LABEL_152:
                    sub_10006D144(v253, v249);
LABEL_153:
                    sub_10006D144(v12, v108);
                    if (!v132) {
                      goto LABEL_168;
                    }
                    goto LABEL_52;
                  }
                  uint64_t v155 = *(void *)(v12 + 16);
                  uint64_t v154 = *(void *)(v12 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v15 = __DataStorage._bytes.getter();
                  if (v15)
                  {
                    uint64_t v156 = __DataStorage._offset.getter();
                    if (__OFSUB__(v155, v156)) {
                      goto LABEL_217;
                    }
                    v15 += v155 - v156;
                  }
                  BOOL v112 = __OFSUB__(v154, v155);
                  int64_t v157 = v154 - v155;
                  if (v112) {
                    goto LABEL_212;
                  }
                  uint64_t v158 = __DataStorage._length.getter();
                  if (v158 >= v157) {
                    size_t v159 = v157;
                  }
                  else {
                    size_t v159 = v158;
                  }
                  if (!__s1) {
                    goto LABEL_244;
                  }
                  os_log_t v17 = log;
                  uint64_t v97 = v247;
                  if (!v15) {
                    goto LABEL_245;
                  }
                  uint64_t v15 = memcmp(__s1, (const void *)v15, v159);
                  swift_release();
                  swift_release();
                  sub_10006D144(v253, v249);
LABEL_165:
                  sub_10006D144(v12, v108);
                  if (!v15) {
                    goto LABEL_168;
                  }
                  break;
                case 2:
                  uint64_t v123 = *(void *)(v253 + 16);
                  swift_retain();
                  swift_retain();
                  uint64_t v124 = __DataStorage._bytes.getter();
                  if (v124)
                  {
                    uint64_t v125 = v124;
                    uint64_t v126 = __DataStorage._offset.getter();
                    if (__OFSUB__(v123, v126)) {
                      goto LABEL_201;
                    }
                    __s1a = (void *)(v125 + v123 - v126);
                  }
                  else
                  {
                    __s1a = 0;
                  }
                  __DataStorage._length.getter();
                  os_log_t v17 = log;
                  uint64_t v97 = v247;
                  if (!v15)
                  {
                    v262 = (void *)v12;
                    LOWORD(v263) = v108;
                    BYTE2(v263) = BYTE2(v108);
                    BYTE3(v263) = BYTE3(v108);
                    BYTE4(v263) = BYTE4(v108);
                    BYTE5(v263) = BYTE5(v108);
                    if (!__s1a) {
                      goto LABEL_240;
                    }
                    int v132 = memcmp(__s1a, &v262, BYTE6(v108));
LABEL_139:
                    swift_release();
                    swift_release();
                    goto LABEL_153;
                  }
                  if (v15 == 1)
                  {
                    if (v12 >> 32 < (int)v12) {
                      goto LABEL_205;
                    }
                    swift_retain();
                    uint64_t v15 = __DataStorage._bytes.getter();
                    if (v15)
                    {
                      uint64_t v133 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v12, v133)) {
                        goto LABEL_216;
                      }
                      v15 += (int)v12 - v133;
                    }
                    uint64_t v134 = __DataStorage._length.getter();
                    if (v134 >= (v12 >> 32) - (int)v12) {
                      size_t v135 = (v12 >> 32) - (int)v12;
                    }
                    else {
                      size_t v135 = v134;
                    }
                    os_log_t v17 = log;
                    if (!__s1a) {
                      goto LABEL_234;
                    }
                    uint64_t v97 = v247;
                    if (!v15) {
                      goto LABEL_235;
                    }
                    int v132 = memcmp(__s1a, (const void *)v15, v135);
                    sub_10006D144(v12, v108);
                    goto LABEL_139;
                  }
                  uint64_t v149 = *(void *)(v12 + 16);
                  uint64_t v148 = *(void *)(v12 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v15 = __DataStorage._bytes.getter();
                  if (v15)
                  {
                    uint64_t v150 = __DataStorage._offset.getter();
                    if (__OFSUB__(v149, v150)) {
                      goto LABEL_215;
                    }
                    v15 += v149 - v150;
                  }
                  BOOL v112 = __OFSUB__(v148, v149);
                  int64_t v151 = v148 - v149;
                  if (v112) {
                    goto LABEL_210;
                  }
                  uint64_t v152 = __DataStorage._length.getter();
                  if (v152 >= v151) {
                    size_t v153 = v151;
                  }
                  else {
                    size_t v153 = v152;
                  }
                  if (!__s1a) {
                    goto LABEL_241;
                  }
                  os_log_t v17 = log;
                  uint64_t v97 = v247;
                  if (!v15) {
                    goto LABEL_242;
                  }
                  uint64_t v15 = memcmp(__s1a, (const void *)v15, v153);
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  goto LABEL_165;
                case 3:
                  memset(v261, 0, 14);
                  if (!v15) {
                    goto LABEL_94;
                  }
                  if (v15 == 1)
                  {
                    uint64_t v116 = (v12 >> 32) - (int)v12;
                    if (v12 >> 32 < (int)v12) {
                      goto LABEL_204;
                    }
                    sub_10006D0EC(v12, v108);
                    uint64_t v127 = __DataStorage._bytes.getter();
                    if (!v127) {
                      goto LABEL_233;
                    }
                    uint64_t v15 = v127;
                    uint64_t v128 = __DataStorage._offset.getter();
                    uint64_t v119 = (int)v12 - v128;
                    if (__OFSUB__((int)v12, v128)) {
                      goto LABEL_209;
                    }
LABEL_89:
                    uint64_t v129 = __DataStorage._length.getter();
                    if (v129 >= v116) {
                      size_t v130 = v116;
                    }
                    else {
                      size_t v130 = v129;
                    }
                    int v131 = memcmp(v261, (const void *)(v15 + v119), v130);
                    sub_10006D144(v12, v108);
                    sub_10006D144(v12, v108);
                    os_log_t v17 = log;
                    uint64_t v97 = v247;
                    if (!v131) {
                      goto LABEL_168;
                    }
                  }
                  else
                  {
                    uint64_t v144 = *(void *)(v12 + 16);
                    uint64_t v145 = *(void *)(v12 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v15 = __DataStorage._bytes.getter();
                    if (v15)
                    {
                      uint64_t v146 = __DataStorage._offset.getter();
                      if (__OFSUB__(v144, v146)) {
                        goto LABEL_214;
                      }
                      v15 += v144 - v146;
                    }
                    BOOL v112 = __OFSUB__(v145, v144);
                    int64_t v142 = v145 - v144;
                    if (v112) {
                      goto LABEL_207;
                    }
                    uint64_t v143 = __DataStorage._length.getter();
                    if (!v15) {
                      goto LABEL_239;
                    }
LABEL_132:
                    if (v143 >= v142) {
                      size_t v147 = v142;
                    }
                    else {
                      size_t v147 = v143;
                    }
                    uint64_t v15 = memcmp(v261, (const void *)v15, v147);
                    swift_release();
                    swift_release();
                    sub_10006D144(v12, v108);
                    os_log_t v17 = log;
                    uint64_t v97 = v247;
                    if (!v15) {
                      goto LABEL_168;
                    }
                  }
                  goto LABEL_52;
                default:
                  v261[0] = v253;
                  LOBYTE(v261[1]) = v238;
                  *(_WORD *)((char *)&v261[1] + 1) = *(_WORD *)((char *)&v253 + 5);
                  HIBYTE(v261[1]) = HIBYTE(v253);
                  v261[2] = v249;
                  LOWORD(v261[3]) = WORD2(v249);
                  if (!v15)
                  {
LABEL_94:
                    v262 = (void *)v12;
                    LOWORD(v263) = v108;
                    BYTE2(v263) = BYTE2(v108);
                    BYTE3(v263) = BYTE3(v108);
                    BYTE4(v263) = BYTE4(v108);
                    BYTE5(v263) = BYTE5(v108);
                    int v132 = memcmp(v261, &v262, BYTE6(v108));
                    goto LABEL_153;
                  }
                  if (v15 == 1)
                  {
                    uint64_t v116 = (v12 >> 32) - (int)v12;
                    if (v12 >> 32 < (int)v12) {
                      goto LABEL_203;
                    }
                    sub_10006D0EC(v12, v108);
                    uint64_t v117 = __DataStorage._bytes.getter();
                    if (!v117)
                    {
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_233:
                      __DataStorage._length.getter();
                      __break(1u);
LABEL_234:
                      __break(1u);
LABEL_235:
                      __break(1u);
LABEL_236:
                      __break(1u);
LABEL_237:
                      __break(1u);
LABEL_238:
                      __break(1u);
LABEL_239:
                      __break(1u);
LABEL_240:
                      __break(1u);
LABEL_241:
                      __break(1u);
LABEL_242:
                      __break(1u);
LABEL_243:
                      __break(1u);
LABEL_244:
                      __break(1u);
LABEL_245:
                      __break(1u);
                    }
                    uint64_t v15 = v117;
                    uint64_t v118 = __DataStorage._offset.getter();
                    uint64_t v119 = (int)v12 - v118;
                    if (__OFSUB__((int)v12, v118)) {
                      goto LABEL_208;
                    }
                    goto LABEL_89;
                  }
                  uint64_t v139 = *(void *)(v12 + 16);
                  uint64_t v140 = *(void *)(v12 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v15 = __DataStorage._bytes.getter();
                  if (v15)
                  {
                    uint64_t v141 = __DataStorage._offset.getter();
                    if (__OFSUB__(v139, v141)) {
                      goto LABEL_213;
                    }
                    v15 += v139 - v141;
                  }
                  BOOL v112 = __OFSUB__(v140, v139);
                  int64_t v142 = v140 - v139;
                  if (v112) {
                    goto LABEL_206;
                  }
                  uint64_t v143 = __DataStorage._length.getter();
                  if (!v15) {
                    goto LABEL_238;
                  }
                  goto LABEL_132;
              }
              goto LABEL_52;
            }
LABEL_167:
            sub_10006D144(v12, v108);
LABEL_168:
            swift_bridgeObjectRelease_n();
            if (([(objc_class *)v104 managedBySP] & 1) == 0
              || (uint64_t v15 = (uint64_t)[(objc_class *)v104 rawGPState],
                  type metadata accessor for InstanceInfoInternal(),
                  v15 == static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter())
              || ([(objc_class *)v104 isGPLocked] & 1) != 0)
            {
              sub_10006D144(v253, v249);
            }
            else
            {
              uint64_t v15 = v104;
              uint64_t v160 = v230;
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              if (*(void *)((*v160 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v160 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              {
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v160 = v230;
              }
              uint64_t v12 = (uint64_t)v160;
              specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized Array._endMutation()();
              sub_10006D144(v253, v249);
            }
LABEL_42:
            uint64_t v16 = v233;
            unint64_t v98 = v236;
LABEL_43:
            if (++v98 == v235)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v161 = (unint64_t)*v230;
              goto LABEL_177;
            }
            break;
          case 2uLL:
            uint64_t v115 = *(void *)(v12 + 16);
            uint64_t v114 = *(void *)(v12 + 24);
            BOOL v112 = __OFSUB__(v114, v115);
            uint64_t v113 = v114 - v115;
            if (!v112) {
              goto LABEL_67;
            }
            goto LABEL_198;
          case 3uLL:
            if (v109) {
              goto LABEL_51;
            }
            goto LABEL_167;
          default:
            uint64_t v113 = BYTE6(v108);
            goto LABEL_67;
        }
        break;
      }
    }
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  unint64_t v161 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_177:
  if (v161 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v197 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v197) {
      goto LABEL_221;
    }
LABEL_179:
    if (sub_10026863C())
    {

      if (SESInternalVariant())
      {
        unint64_t v162 = v231[88];
        uint64_t v163 = v231[87];
        v231[60] = 95;
        v231[61] = 0xE100000000000000;
        uint64_t v164 = swift_task_alloc();
        *(void *)(v164 + 16) = v231 + 60;
        swift_bridgeObjectRetain();
        uint64_t v165 = sub_100251A3C(0x7FFFFFFFFFFFFFFFLL, 1, sub_1002521E8, v164, v163, v162);
        swift_task_dealloc();
        if (!*(void *)(v165 + 16)) {
          goto LABEL_193;
        }
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v166 = static String._fromSubstring(_:)();
        unint64_t v168 = v167;
        swift_bridgeObjectRelease();
        v231[128] = sub_10011FE64(v166, v168);
        v231[129] = v169;
        if (v169 >> 60 != 15)
        {
          uint64_t v170 = (void *)v231[121];
          swift_bridgeObjectRelease();
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          v231[130] = isa;
          swift_bridgeObjectRelease();
          Class v172 = Data._bridgeToObjectiveC()().super.isa;
          v231[131] = v172;
          v231[2] = v231;
          v231[3] = sub_10024E2F0;
          uint64_t v173 = swift_continuation_init();
          v231[31] = _NSConcreteStackBlock;
          v231[32] = 0x40000000;
          v231[33] = sub_1001BDDAC;
          v231[34] = &unk_100417100;
          v231[35] = v173;
          [v170 startCardEmulationWithApplets:isa externalAuth:v172 completion:v231 + 31];
          return _swift_continuation_await(v231 + 2);
        }
LABEL_194:
        v262 = 0;
        unint64_t v263 = 0xE000000000000000;
        _StringGuts.grow(_:)(51);
        v195._object = (void *)0x80000001003B8AC0;
        v195._countAndFlagsBits = 0xD00000000000003CLL;
        String.append(_:)(v195);
        v196._countAndFlagsBits = 0xD000000000000031;
        v196._object = (void *)0x80000001003B3CA0;
        String.append(_:)(v196);
      }
      return _assertionFailure(_:_:file:line:flags:)();
    }
    uint64_t v174 = v231[84];
    *(_OWORD *)(v231 + 41) = 0u;
    *(_OWORD *)(v231 + 43) = 0u;
    uint64_t v175 = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
    v231[133] = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
    BOOL v176 = (os_unfair_lock_s **)(v174 + v175);
    swift_beginAccess();
    uint64_t v177 = *v176;
    uint64_t v178 = *v176 + 4;
    swift_retain();
    os_unfair_lock_lock(v177 + 5);
    sub_1000B3EA4(v178);
    os_unfair_lock_unlock(v177 + 5);
    uint64_t v179 = (void *)v231[120];
    uint64_t v180 = v231[84];
    swift_release();
    int v181 = *(_DWORD *)(v180 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 48);
    uint64_t v182 = CredentialInternal.friendlyName.getter();
    uint64_t v184 = v183;

    v231[134] = v184;
    uint64_t v185 = (void *)swift_task_alloc();
    v231[135] = v185;
    void *v185 = v231;
    v185[1] = sub_10024E764;
    uint64_t v186 = v231[88];
    uint64_t v187 = v231[87];
    return sub_1000AA898(v187, v186, v181, v182, v184);
  }
  else
  {
    if (*(void *)((v161 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_179;
    }
LABEL_221:
    uint64_t v198 = v231[124];
    uint64_t v199 = v231[123];
    os_log_t v259 = (void *)v231[122];
    unint64_t v200 = (void *)v231[121];
    uint64_t v201 = (void *)v231[120];
    uint64_t v202 = v231[93];
    uint64_t v203 = v231[90];
    uint64_t v204 = v231[89];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v203 + 16))(v202, v198, v204);
    id v205 = v201;
    id v206 = v200;
    id v207 = v259;
    id v208 = (id)(v199 & 0x3FFFFFFFFFFFFFFFLL);
    uint64_t v209 = Logger.logObject.getter();
    os_log_type_t v210 = static os_log_type_t.error.getter();
    BOOL v211 = os_log_type_enabled(v209, v210);
    unint64_t v212 = v231[123];
    long long v213 = (void *)v231[122];
    v214 = (void *)v231[121];
    uint64_t v215 = (void *)v231[120];
    if (v211)
    {
      uint64_t v216 = v231[119];
      loga = v209;
      uint64_t v217 = v231[117];
      uint64_t v246 = v231[116];
      v260 = (void *)v231[93];
      uint64_t v254 = v231[90];
      uint64_t v256 = v231[89];
      uint64_t v218 = swift_slowAlloc();
      v262 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v218 = 136315394;
      v231[75] = sub_100290514(0xD00000000000003CLL, 0x80000001003B8AC0, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v218 + 12) = 2080;
      CredentialInternal.identifier.getter();
      uint64_t v219 = UUID.uuidString.getter();
      os_log_type_t typea = v210;
      unint64_t v221 = v220;
      (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v216, v246);
      uint64_t v222 = v219;
      unint64_t v223 = v231;
      v231[76] = sub_100290514(v222, v221, (uint64_t *)&v262);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D0630(v215, v214, v213, v212);

      _os_log_impl((void *)&_mh_execute_header, loga, typea, "%s: No applets are associated with credential with UUID %s", (uint8_t *)v218, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(void *, uint64_t))(v254 + 8))(v260, v256);
    }
    else
    {
      uint64_t v224 = v231[93];
      uint64_t v225 = v231[90];
      uint64_t v226 = v231[89];
      sub_1001D0630(v215, v214, v213, v212);

      uint64_t v227 = v224;
      unint64_t v223 = v231;
      (*(void (**)(uint64_t, uint64_t))(v225 + 8))(v227, v226);
    }
    uint64_t v189 = (void *)v223[122];
    uint64_t v190 = (void *)v223[121];
    unint64_t v191 = (void *)v223[120];
    char v192 = (void *)(v223[123] & 0x3FFFFFFFFFFFFFFFLL);
    sub_10008E594();
    uint64_t v1 = v223;
    uint64_t v39 = swift_allocError();
    uint64_t v194 = 5;
LABEL_225:
    uint64_t *v193 = v194;
    swift_willThrow();

LABEL_226:
    swift_unknownObjectRelease();
LABEL_227:
    v1[148] = v39;
    unsigned int v228 = (void *)swift_task_alloc();
    v1[149] = v228;
    *unsigned int v228 = v1;
    v228[1] = sub_10024FC28;
    return sub_1001BDE44();
  }
}

uint64_t sub_10024E2F0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 1056) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 984);
    unint64_t v4 = *(void **)(v1 + 968);
    uint64_t v5 = *(void **)(v1 + 960);

    uint64_t v6 = sub_10024FFD4;
  }
  else
  {
    uint64_t v6 = sub_10024E45C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_10024E45C()
{
  uint64_t v1 = (void *)v0[131];
  uint64_t v2 = (void *)v0[130];
  sub_100075868(v0[128], v0[129]);

  uint64_t v3 = (void *)v0[120];
  uint64_t v4 = v0[100];
  uint64_t v5 = v0[99];
  uint64_t v6 = v0[98];
  uint64_t v7 = v0[97];
  uint64_t v8 = v0[84];
  CredentialInternal.configUUID.getter();

  uint64_t v28 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
  uint64_t v29 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
  uint64_t v30 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
  uint64_t v31 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
  swift_bridgeObjectRetain();
  static Date.now.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for Calendar.Identifier.gregorian(_:), v6);
  Calendar.init(identifier:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  TimeZone.init(abbreviation:)();
  uint64_t v9 = type metadata accessor for TimeZone();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) == 1) {
    __break(1u);
  }
  uint64_t v10 = v0[117];
  uint64_t v26 = v0[116];
  uint64_t v27 = v0[118];
  uint64_t v11 = v0[112];
  uint64_t v12 = (int *)v0[108];
  uint64_t v13 = v0[107];
  uint64_t v14 = v0[106];
  uint64_t v15 = v0[105];
  uint64_t v25 = v0[104];
  uint64_t v16 = v0[103];
  uint64_t v17 = v0[102];
  uint64_t v18 = v0[101];
  Calendar.timeZone.setter();
  Calendar.startOfDay(for:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v19(v13, v25);
  Date.timeIntervalSince1970.getter();
  double v21 = v20 * 1000.0;
  v19(v14, v25);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v11, v27, v26);
  *(unsigned char *)(v11 + v12[5]) = 0;
  id v22 = (void *)(v11 + v12[8]);
  *id v22 = v28;
  v22[1] = v29;
  *(void *)(v11 + v12[7]) = v30;
  *(void *)(v11 + v12[6]) = v31;
  *(double *)(v11 + v12[9]) = v21;
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100468A98;
  v0[143] = qword_100468A98;
  return _swift_task_switch(sub_10024F474, v23, 0);
}

uint64_t sub_10024E764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[136] = a1;
  v4[137] = a2;
  v4[138] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[123];
    uint64_t v6 = (void *)v4[122];
    uint64_t v7 = (void *)v4[121];
    uint64_t v8 = (void *)v4[120];
    swift_bridgeObjectRelease();

    uint64_t v9 = sub_100250328;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_10024E908;
  }
  return _swift_task_switch(v9, 0, 0);
}

void sub_10024E908()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 1104);
  uint64_t v2 = (os_unfair_lock_s **)(*(void *)(v0 + 672) + *(void *)(v0 + 1064));
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v4 = *v2 + 4;
  uint64_t v5 = v3 + 5;
  os_unfair_lock_lock(v3 + 5);
  sub_10025203C(v4, &v39);
  *(void *)(v0 + 1112) = v1;
  os_unfair_lock_unlock(v5);
  if (!v1)
  {
    char v6 = v39;
    swift_endAccess();
    uint64_t v7 = *(void **)(v0 + 968);
    if (v6)
    {
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1120) = isa;
      swift_bridgeObjectRelease();
      Class v9 = Data._bridgeToObjectiveC()().super.isa;
      *(void *)(v0 + 1128) = v9;
      *(void *)(v0 + 80) = v0;
      *(void *)(v0 + 88) = sub_10024EF48;
      uint64_t v10 = swift_continuation_init();
      *(void *)(v0 + 208) = _NSConcreteStackBlock;
      *(void *)(v0 + 216) = 0x40000000;
      *(void *)(v0 + 224) = sub_1001BDDAC;
      *(void *)(v0 + 232) = &unk_1004170C0;
      *(void *)(v0 + 240) = v10;
      [v7 startCardEmulationWithApplets:isa externalAuth:v9 completion:v0 + 208];
      _swift_continuation_await(v0 + 80);
    }
    else
    {
      uint64_t v11 = *(void *)(v0 + 984);
      uint64_t v12 = *(void **)(v0 + 960);

      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "End Card Emulation has been called while presenting auth sheet", v15, 2u);
        swift_slowDealloc();
      }
      unint64_t v16 = *(void *)(v0 + 1096);
      uint64_t v17 = *(void *)(v0 + 1088);

      sub_1000ABF88(0);
      sub_10008E594();
      swift_allocError();
      *uint64_t v18 = 10;
      swift_willThrow();
      sub_10006D144(v17, v16);
      (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 16))(*(void *)(v0 + 728), *(void *)(v0 + 992), *(void *)(v0 + 712));
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      BOOL v21 = os_log_type_enabled(v19, v20);
      uint64_t v22 = *(void *)(v0 + 728);
      uint64_t v23 = *(void *)(v0 + 720);
      uint64_t v24 = *(void *)(v0 + 712);
      if (v21)
      {
        uint64_t v38 = *(void *)(v0 + 728);
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        swift_getErrorValue();
        uint64_t v26 = Error.localizedDescription.getter();
        *(void *)(v0 + 520) = sub_100290514(v26, v27, &v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error %s encountered when arming current credential for card emulation", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v38, v24);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();

        (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      }
      uint64_t v28 = *(void *)(v0 + 1064);
      uint64_t v29 = *(void *)(v0 + 672);
      sub_1000ABF88(0);
      uint64_t v30 = *(void *)(v29 + v28);
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v30 + 20));
      sub_1000B3EE8((unsigned char *)(v30 + 16));
      os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 20));
      uint64_t v31 = *(void *)(v0 + 984);
      uint64_t v32 = *(void **)(v0 + 976);
      os_log_type_t v33 = *(void **)(v0 + 968);
      unint64_t v34 = *(void **)(v0 + 960);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = swift_allocError();
      *unint64_t v36 = 8;
      swift_willThrow();

      swift_unknownObjectRelease();
      swift_errorRelease();
      sub_10008BECC(*(void *)(v0 + 328));

      *(void *)(v0 + 1184) = v35;
      unint64_t v37 = (void *)swift_task_alloc();
      *(void *)(v0 + 1192) = v37;
      *unint64_t v37 = v0;
      v37[1] = sub_10024FC28;
      sub_1001BDE44();
    }
  }
}

uint64_t sub_10024EF48()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  *(void *)(*v0 + 1136) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 984);
    uint64_t v4 = *(void **)(v1 + 968);
    uint64_t v5 = *(void **)(v1 + 960);

    char v6 = sub_1002506F4;
  }
  else
  {
    char v6 = sub_10024F0B4;
  }
  return _swift_task_switch(v6, 0, 0);
}

void sub_10024F0B4()
{
  uint64_t v1 = *(void **)(v0 + 1120);
  uint64_t v2 = *(void *)(v0 + 1112);
  uint64_t v3 = *(void *)(v0 + 1064);
  uint64_t v4 = *(void *)(v0 + 672);

  sub_1000ABF88(1);
  uint64_t v5 = *(void *)(v4 + v3);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 20));
  sub_1000B3EB0((unsigned char *)(v5 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 20));
  if (!v2)
  {
    sub_10006D144(*(void *)(v0 + 1088), *(void *)(v0 + 1096));
    swift_release();
    sub_10008BECC(*(void *)(v0 + 328));

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v6 = *(void **)(v0 + 960);
    uint64_t v7 = *(void *)(v0 + 800);
    uint64_t v8 = *(void *)(v0 + 792);
    uint64_t v9 = *(void *)(v0 + 784);
    uint64_t v10 = *(void *)(v0 + 776);
    uint64_t v11 = *(void *)(v0 + 672);
    CredentialInternal.configUUID.getter();

    uint64_t v32 = *(void *)(v11 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 72);
    uint64_t v33 = *(void *)(v11 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 80);
    uint64_t v34 = *(void *)(v11 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 56);
    uint64_t v35 = *(void *)(v11 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64);
    swift_bridgeObjectRetain();
    static Date.now.getter();
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v7, enum case for Calendar.Identifier.gregorian(_:), v9);
    Calendar.init(identifier:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    TimeZone.init(abbreviation:)();
    uint64_t v12 = type metadata accessor for TimeZone();
    uint64_t v13 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12);
    if (v13 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 936);
      uint64_t v30 = *(void *)(v0 + 928);
      uint64_t v31 = *(void *)(v0 + 944);
      uint64_t v17 = *(void *)(v0 + 896);
      uint64_t v18 = *(int **)(v0 + 864);
      uint64_t v19 = *(void *)(v0 + 856);
      uint64_t v20 = *(void *)(v0 + 848);
      uint64_t v21 = *(void *)(v0 + 840);
      uint64_t v29 = *(void *)(v0 + 832);
      uint64_t v22 = *(void *)(v0 + 824);
      uint64_t v23 = *(void *)(v0 + 816);
      uint64_t v24 = *(void *)(v0 + 808);
      Calendar.timeZone.setter();
      Calendar.startOfDay(for:)();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v25(v19, v29);
      Date.timeIntervalSince1970.getter();
      double v27 = v26 * 1000.0;
      v25(v20, v29);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v17, v31, v30);
      *(unsigned char *)(v17 + v18[5]) = 0;
      uint64_t v28 = (void *)(v17 + v18[8]);
      *uint64_t v28 = v32;
      v28[1] = v33;
      *(void *)(v17 + v18[7]) = v34;
      *(void *)(v17 + v18[6]) = v35;
      *(double *)(v17 + v18[9]) = v27;
      if (qword_100453958 != -1) {
        swift_once();
      }
      uint64_t v14 = qword_100468A98;
      *(void *)(v0 + 1144) = qword_100468A98;
      uint64_t v13 = sub_10024F474;
      uint64_t v15 = 0;
    }
    _swift_task_switch(v13, v14, v15);
  }
}

uint64_t sub_10024F474()
{
  uint64_t v1 = v0[112];
  uint64_t v2 = v0[111];
  uint64_t v3 = v0[109];
  uint64_t v4 = v0[96];
  uint64_t v5 = v0[95];
  uint64_t v6 = v0[94];
  id v7 = [*(id *)(v0[143] + 112) viewContext];
  v0[144] = v7;
  sub_10011FBA8(v1, v2);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[145] = v9;
  *(void *)(v9 + 16) = v7;
  sub_10011FD08(v2, v9 + v8);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
  v7;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[146] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10024F630;
  uint64_t v11 = v0[96];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_100252178, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_10024F630()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1176) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[143];
  (*(void (**)(void, void))(v2[95] + 8))(v2[96], v2[94]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_10024FA50;
  }
  else {
    uint64_t v4 = sub_10024F7FC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10024F7FC()
{
  return _swift_task_switch(sub_10024F890, 0, 0);
}

uint64_t sub_10024F890()
{
  uint64_t v1 = (void *)v0[122];
  uint64_t v2 = (void *)v0[121];
  uint64_t v3 = (void *)v0[120];
  uint64_t v4 = v0[112];
  uint64_t v5 = (void (*)(void))v0[85];
  uint64_t v6 = (void *)(v0[123] & 0x3FFFFFFFFFFFFFFFLL);
  sub_1001BDB6C(v3, v2, v1, (unint64_t)v6);
  v5(0);

  swift_unknownObjectRelease();
  sub_10011FDDC(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_10024FA50()
{
  uint64_t v1 = *(void *)(v0 + 984);
  uint64_t v2 = *(void **)(v0 + 976);
  uint64_t v3 = *(void **)(v0 + 968);
  uint64_t v4 = *(void **)(v0 + 960);

  return _swift_task_switch(sub_10024FB18, 0, 0);
}

uint64_t sub_10024FB18()
{
  uint64_t v1 = v0[123];
  uint64_t v2 = (void *)v0[122];
  uint64_t v3 = (void *)v0[121];
  uint64_t v4 = (void *)v0[120];
  uint64_t v5 = v0[112];
  swift_unknownObjectRelease();

  sub_10011FDDC(v5);
  v0[148] = v0[147];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[149] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10024FC28;
  return sub_1001BDE44();
}

uint64_t sub_10024FC28()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10024FD50, 0, 0);
}

uint64_t sub_10024FD50()
{
  uint64_t v1 = v0[148];
  uint64_t v2 = (void (*)(uint64_t))v0[85];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10024FED0()
{
  uint64_t v1 = (void *)v0[122];
  uint64_t v2 = (void *)v0[121];
  uint64_t v3 = (void *)v0[120];
  uint64_t v4 = (void *)(v0[123] & 0x3FFFFFFFFFFFFFFFLL);
  swift_willThrow();

  v0[148] = v0[125];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[149] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10024FC28;
  return sub_1001BDE44();
}

uint64_t sub_10024FFD4()
{
  uint64_t v29 = v0;
  uint64_t v1 = (void *)v0[131];
  uint64_t v2 = (void *)v0[130];
  uint64_t v3 = v0[124];
  uint64_t v4 = v0[92];
  uint64_t v5 = v0[90];
  uint64_t v6 = v0[89];
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v25 = v0[90];
    uint64_t v26 = v0[89];
    uint64_t v27 = v0[92];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    v0[74] = sub_100290514(v10, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "NearField Error %s encountered when arming current credential for card emulation -- CAM path", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v26);
  }
  else
  {
    uint64_t v12 = v0[92];
    uint64_t v13 = v0[90];
    uint64_t v14 = v0[89];
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }
  unint64_t v15 = v0[129];
  uint64_t v16 = v0[128];
  uint64_t v17 = (void *)v0[122];
  uint64_t v18 = (void *)v0[121];
  uint64_t v19 = (void *)v0[120];
  uint64_t v20 = (void *)(v0[123] & 0x3FFFFFFFFFFFFFFFLL);
  sub_10008E594();
  uint64_t v21 = swift_allocError();
  *uint64_t v22 = 8;
  swift_willThrow();

  sub_100075868(v16, v15);
  swift_errorRelease();
  swift_unknownObjectRelease();
  v0[148] = v21;
  uint64_t v23 = (void *)swift_task_alloc();
  v0[149] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_10024FC28;
  return sub_1001BDE44();
}

uint64_t sub_100250328()
{
  uint64_t v24 = v0;
  (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 16))(*(void *)(v0 + 728), *(void *)(v0 + 992), *(void *)(v0 + 712));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = *(void *)(v0 + 720);
    uint64_t v21 = *(void *)(v0 + 712);
    uint64_t v22 = *(void *)(v0 + 728);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 520) = sub_100290514(v4, v5, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error %s encountered when arming current credential for card emulation", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 728);
    uint64_t v7 = *(void *)(v0 + 720);
    uint64_t v8 = *(void *)(v0 + 712);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  uint64_t v9 = *(void *)(v0 + 1064);
  uint64_t v10 = *(void *)(v0 + 672);
  sub_1000ABF88(0);
  uint64_t v11 = *(void *)(v10 + v9);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 20));
  sub_1000B3EE8((unsigned char *)(v11 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 20));
  uint64_t v12 = *(void *)(v0 + 984);
  uint64_t v13 = *(void **)(v0 + 976);
  uint64_t v14 = *(void **)(v0 + 968);
  unint64_t v15 = *(void **)(v0 + 960);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008E594();
  uint64_t v16 = swift_allocError();
  *uint64_t v17 = 8;
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_10008BECC(*(void *)(v0 + 328));

  *(void *)(v0 + 1184) = v16;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 1192) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10024FC28;
  return sub_1001BDE44();
}

uint64_t sub_1002506F4()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void **)(v0 + 1128);
  os_log_type_t v2 = *(void **)(v0 + 1120);
  unint64_t v3 = *(void *)(v0 + 1096);
  uint64_t v4 = *(void *)(v0 + 1088);
  swift_willThrow();
  sub_10006D144(v4, v3);

  (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 16))(*(void *)(v0 + 728), *(void *)(v0 + 992), *(void *)(v0 + 712));
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v24 = *(void *)(v0 + 720);
    uint64_t v25 = *(void *)(v0 + 712);
    uint64_t v26 = *(void *)(v0 + 728);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    *(void *)(v0 + 520) = sub_100290514(v8, v9, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error %s encountered when arming current credential for card emulation", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 728);
    uint64_t v11 = *(void *)(v0 + 720);
    uint64_t v12 = *(void *)(v0 + 712);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  uint64_t v13 = *(void *)(v0 + 1064);
  uint64_t v14 = *(void *)(v0 + 672);
  sub_1000ABF88(0);
  uint64_t v15 = *(void *)(v14 + v13);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v15 + 20));
  sub_1000B3EE8((unsigned char *)(v15 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 20));
  uint64_t v16 = *(void *)(v0 + 984);
  uint64_t v17 = *(void **)(v0 + 976);
  uint64_t v18 = *(void **)(v0 + 968);
  uint64_t v19 = *(void **)(v0 + 960);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10008E594();
  uint64_t v20 = swift_allocError();
  *uint64_t v21 = 8;
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_10008BECC(*(void *)(v0 + 328));

  *(void *)(v0 + 1184) = v20;
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 1192) = v22;
  *uint64_t v22 = v0;
  v22[1] = sub_10024FC28;
  return sub_1001BDE44();
}

uint64_t sub_100250C7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[23] = a5;
  v6[24] = a6;
  v6[22] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[25] = v7;
  v6[26] = *(void *)(v7 - 8);
  v6[27] = swift_task_alloc();
  return _swift_task_switch(sub_100250D40, 0, 0);
}

uint64_t sub_100250D40()
{
  uint64_t v69 = v0;
  uint64_t v1 = (id *)(v0 + 22);
  os_log_type_t v2 = (char *)v0[22];
  unint64_t v3 = &v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  uint64_t v4 = *(void **)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8];
  v0[28] = v4;
  unint64_t v5 = (void *)*((void *)v3 + 2);
  v0[29] = v5;
  unint64_t v6 = *((void *)v3 + 3);
  v0[30] = v6;
  if (v6 >> 62 != 1)
  {
    if (qword_1004536D0 != -1)
    {
      swift_once();
      os_log_type_t v2 = (char *)*v1;
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_1004686A8);
    uint64_t v12 = v2;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    id v16 = *v1;
    if (!v15)
    {

LABEL_28:
      uint64_t v55 = (void (*)(uint64_t))v0[23];
      sub_10008E594();
      uint64_t v56 = swift_allocError();
      *uint64_t v57 = 10;
      swift_willThrow();
      swift_errorRetain();
      v55(v56);
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_29;
    }
    os_log_type_t v64 = v14;
    uint64_t v17 = swift_slowAlloc();
    v68[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v18 = UUID.uuidString.getter();
    v0[18] = sub_100290514(v18, v19, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v17 + 12) = 2080;
    unint64_t v20 = *((void *)v3 + 3);
    if (v20 >> 62)
    {
      if (v20 >> 62 != 1)
      {
        os_log_type_t v51 = v14;
        BOOL v52 = (*((void *)v3 + 2) | *(void *)v3 | *((void *)v3 + 1)) == 0;
        BOOL v53 = v20 == 0x8000000000000000;
        if (v53 && v52) {
          uint64_t v22 = 0x656D6567616E614DLL;
        }
        else {
          uint64_t v22 = 0x64696C61766E49;
        }
        if (v53 && v52) {
          unint64_t v21 = 0xEA0000000000746ELL;
        }
        else {
          unint64_t v21 = 0xE700000000000000;
        }
        goto LABEL_27;
      }
      unint64_t v21 = 0xE500000000000000;
      uint64_t v22 = 0x6465726957;
    }
    else
    {
      unint64_t v21 = 0xED00006E6F697461;
      uint64_t v22 = 0x6C756D4564726143;
    }
    os_log_type_t v51 = v64;
LABEL_27:
    id v54 = *v1;
    v0[19] = sub_100290514(v22, v21, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v13, v51, "Session %s: Unexpected state %s while trying to end wired mode", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_28;
  }
  uint64_t v7 = *(void **)v3;
  v0[31] = v7;
  uint64_t v8 = (os_unfair_lock_s **)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet];
  swift_beginAccess();
  uint64_t v9 = *v8;
  uint64_t v10 = *v8 + 4;
  sub_1001D05A4(v7, v4, v5, v6);
  swift_retain();
  os_unfair_lock_lock(v9 + 5);
  sub_1000B3EE8(v10);
  v0[32] = 0;
  os_unfair_lock_unlock(v9 + 5);
  uint64_t v23 = (void *)(v6 & 0x3FFFFFFFFFFFFFFFLL);
  swift_release();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  id v24 = *v1;
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E55C(v25, (uint64_t)qword_1004686A8);
  id v26 = v5;
  id v27 = v23;
  id v28 = v24;
  id v29 = v7;
  id v30 = v4;
  id v66 = v26;
  id v67 = v27;
  id v31 = v28;
  id v32 = v29;
  id v33 = v30;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v65 = v33;
    uint64_t v36 = v0[26];
    uint64_t v60 = v0[27];
    uint64_t v61 = v0[25];
    unint64_t v37 = (void *)v0[22];
    uint64_t v38 = swift_slowAlloc();
    v68[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315394;
    os_log_t log = v34;
    os_log_type_t type = v35;
    uint64_t v39 = UUID.uuidString.getter();
    v0[20] = sub_100290514(v39, v40, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v38 + 12) = 2080;
    CredentialInternal.identifier.getter();
    uint64_t v41 = UUID.uuidString.getter();
    unint64_t v43 = v42;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v60, v61);
    id v33 = v65;
    v0[21] = sub_100290514(v41, v43, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, type, "Session %s: Ending wired mode for credential %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (v4)
    {
LABEL_14:
      v0[2] = v0;
      v0[3] = sub_100251548;
      uint64_t v44 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_1001BE804;
      v0[13] = &unk_100417040;
      v0[14] = v44;
      [v33 endSessionWithCompletion:v0 + 10];
      return _swift_continuation_await(v0 + 2);
    }
  }
  else
  {
    id v45 = *v1;

    if (v4) {
      goto LABEL_14;
    }
  }
  uint64_t v46 = (void *)v0[31];
  uint64_t v48 = (void *)v0[28];
  os_log_type_t v47 = (void *)v0[29];
  uint64_t v49 = (void (*)(void))v0[23];
  unint64_t v50 = (void *)(v0[30] & 0x3FFFFFFFFFFFFFFFLL);
  sub_1001BDB6C(0, 0, 0, 0x8000000000000000);
  v49(0);

LABEL_29:
  swift_task_dealloc();
  uint64_t v58 = (uint64_t (*)(void))v0[1];
  return v58();
}

uint64_t sub_100251548()
{
  return _swift_task_switch(sub_100251628, 0, 0);
}

void sub_100251628()
{
  uint64_t v12 = v0;
  if (qword_1004538F8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[32];
  os_log_type_t v2 = (void *)(qword_10045AAE8 + 16);
  unint64_t v3 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
  swift_retain();
  os_unfair_lock_lock(v3);
  sub_100127B64(v2, &v11);
  os_unfair_lock_unlock(v3);
  if (!v1)
  {
    uint64_t v4 = (void *)v0[28];
    swift_release();
    sub_100298A58();
    swift_release();

    unint64_t v5 = (void *)v0[31];
    uint64_t v7 = (void *)v0[28];
    unint64_t v6 = (void *)v0[29];
    uint64_t v8 = (void (*)(void))v0[23];
    uint64_t v9 = (void *)(v0[30] & 0x3FFFFFFFFFFFFFFFLL);
    sub_1001BDB6C(0, 0, 0, 0x8000000000000000);
    v8(0);

    swift_task_dealloc();
    uint64_t v10 = (void (*)(void))v0[1];
    v10();
  }
}

uint64_t sub_1002518F4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025192C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100251974(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10011FE60;
  return sub_100250C7C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100251A3C(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  void v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_100251EE0(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = String.index(after:)();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = String.index(after:)();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = String.subscript.getter();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_1002597FC(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_1002597FC((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  v13[2] = v27 + 1;
  id v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = String.index(after:)();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_1002597FC(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_1002597FC((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    v13[2] = v39 + 1;
    unint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_42:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100251EE0(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v14 = sub_1002597FC(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      unint64_t v14 = sub_1002597FC((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char *sub_10025203C@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100252048()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100252098(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10011FE60;
  return sub_10024B398(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_100252178()
{
}

uint64_t sub_100252190(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1002521E8(void *a1)
{
  return sub_100252D68(a1) & 1;
}

uint64_t sub_100252204()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025223C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025224C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C((uint64_t *)&unk_100459AE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002522B4()
{
  swift_unknownObjectRelease();

  sub_10006D144(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100252304(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  int v7 = *(_DWORD *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 56);
  uint64_t v10 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_10011F7E8;
  return sub_100249E78(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1002523F4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_10006D144(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_100252518(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[3];
  uint64_t v14 = v1[2];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + v4;
  uint64_t v9 = *(void *)((char *)v1 + v5);
  uint64_t v10 = *(void *)((char *)v1 + v5 + 8);
  uint64_t v11 = *(void *)((char *)v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_10011FE60;
  return sub_100244308(a1, v14, v6, v7, v8, v9, v10, v11);
}

void *sub_100252694(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v43 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_62;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    unint64_t v8 = 0;
    unint64_t v31 = HIDWORD(a2);
    uint64_t v39 = HIDWORD(a2) - (int)a2;
    uint64_t v40 = v7;
    BOOL v9 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v38 = v9;
    uint64_t v34 = (int)a2;
    uint64_t v29 = a2;
    uint64_t v30 = a2 >> 32;
LABEL_11:
    if ((a1 & 0xC000000000000001) != 0) {
      break;
    }
    if (v8 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v10 = *(id *)(a1 + 8 * v8 + 32);
      goto LABEL_14;
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      return _swiftEmptyArrayStorage;
    }
  }
  id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_14:
  uint64_t v11 = v10;
  unint64_t v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v13 = InstanceInfoInternal.instanceAID.getter();
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  uint64_t v17 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v17 = v39;
      if (v38) {
        goto LABEL_56;
      }
      break;
    case 2uLL:
      uint64_t v19 = *(void *)(a2 + 16);
      uint64_t v18 = *(void *)(a2 + 24);
      BOOL v20 = __OFSUB__(v18, v19);
      uint64_t v17 = v18 - v19;
      if (v20) {
        goto LABEL_57;
      }
      break;
    case 3uLL:
      break;
    default:
      uint64_t v17 = BYTE6(a3);
      break;
  }
  switch(v14 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v13), v13)) {
        goto LABEL_58;
      }
      if (v17 != HIDWORD(v13) - v13) {
        goto LABEL_8;
      }
      goto LABEL_28;
    case 2uLL:
      uint64_t v22 = *(void *)(v13 + 16);
      uint64_t v21 = *(void *)(v13 + 24);
      BOOL v20 = __OFSUB__(v21, v22);
      uint64_t v23 = v21 - v22;
      if (v20) {
        goto LABEL_59;
      }
      if (v17 == v23) {
        goto LABEL_28;
      }
      goto LABEL_8;
    case 3uLL:
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_31;
    default:
      if (v17 == BYTE6(v14))
      {
LABEL_28:
        if (v17 >= 1)
        {
          switch(a3 >> 62)
          {
            case 1uLL:
              if (v30 < v34) {
                goto LABEL_60;
              }
              uint64_t v36 = v4;
              sub_10006D0EC(v13, v14);
              sub_10006D0EC(a2, a3);
              uint64_t v26 = __DataStorage._bytes.getter();
              if (!v26) {
                goto LABEL_44;
              }
              uint64_t v27 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v27)) {
                goto LABEL_65;
              }
              v26 += v34 - v27;
LABEL_44:
              __DataStorage._length.getter();
              sub_1001E5240(v26, v15, v16, (char *)__s1);
              if (v36) {
                goto LABEL_67;
              }
              uint64_t v4 = 0;
              sub_10006D144(v15, v16);
              sub_10006D144(a2, a3);
              goto LABEL_50;
            case 2uLL:
              uint64_t v35 = v4;
              uint64_t v32 = *(void *)(a2 + 24);
              uint64_t v33 = *(void *)(a2 + 16);
              sub_10006D0EC(v13, v14);
              swift_retain();
              swift_retain();
              uint64_t v4 = __DataStorage._bytes.getter();
              if (v4)
              {
                uint64_t v24 = __DataStorage._offset.getter();
                uint64_t v25 = v33;
                if (__OFSUB__(v33, v24))
                {
                  __break(1u);
LABEL_65:
                  __break(1u);
                }
                v4 += v33 - v24;
              }
              else
              {
                uint64_t v25 = v33;
              }
              a2 = v32 - v25;
              if (__OFSUB__(v32, v25)) {
                goto LABEL_61;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v4, v15, v16, (char *)__s1);
              if (v35) {
                goto LABEL_68;
              }
              uint64_t v4 = 0;
              sub_10006D144(v15, v16);
              swift_release();
              a2 = v29;
              swift_release();
LABEL_50:
              sub_10006D144(v15, v16);
              if (__s1[0]) {
                goto LABEL_32;
              }
              goto LABEL_9;
            case 3uLL:
              memset(__s1, 0, 14);
              sub_10006D0EC(v13, v14);
              goto LABEL_37;
            default:
              LOWORD(__s1[0]) = a2;
              BYTE2(__s1[0]) = BYTE2(a2);
              BYTE3(__s1[0]) = BYTE3(a2);
              BYTE4(__s1[0]) = v31;
              BYTE5(__s1[0]) = BYTE5(a2);
              BYTE6(__s1[0]) = BYTE6(a2);
              HIBYTE(__s1[0]) = HIBYTE(a2);
              LODWORD(__s1[1]) = a3;
              WORD2(__s1[1]) = WORD2(a3);
              sub_10006D0EC(v13, v14);
LABEL_37:
              sub_1001E5240((uint64_t)__s1, v15, v16, &v41);
              if (v4)
              {
                sub_10006D144(v15, v16);
                __break(1u);
LABEL_67:
                sub_10006D144(v15, v16);
                sub_10006D144(a2, a3);
                __break(1u);
LABEL_68:
                sub_10006D144(v15, v16);
                swift_release();
                swift_release();
                __break(1u);
                JUMPOUT(0x100252C38);
              }
              uint64_t v4 = 0;
              sub_10006D144(v15, v16);
              sub_10006D144(v15, v16);
              if (v41) {
                goto LABEL_32;
              }
              goto LABEL_9;
          }
        }
LABEL_31:
        sub_10006D144(v13, v14);
LABEL_32:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
LABEL_8:
        sub_10006D144(v13, v14);
LABEL_9:
      }
      ++v8;
      if (v12 != v40) {
        goto LABEL_11;
      }
      uint64_t result = v43;
      break;
  }
  return result;
}

uint64_t sub_100252C6C()
{
  uint64_t v1 = *(void *)(type metadata accessor for PresentmentInfo() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100252D68(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_100252DC0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100252EB4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  id v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10011FE60;
  return sub_1002409BC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100253000@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1 >> 61 != 3)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v25 + 8) = 0;
    *(void *)(v25 + 16) = 0;
    *(void *)uint64_t v25 = 4;
    *(unsigned char *)(v25 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  uint64_t v3 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  if (!*(void *)(v3 + 16))
  {
LABEL_17:
    sub_10007BF50();
    swift_allocError();
    *(void *)(v26 + 8) = 0;
    *(void *)(v26 + 16) = 0;
    *(void *)uint64_t v26 = 3;
    *(unsigned char *)(v26 + 24) = 3;
    swift_willThrow();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1002C0AD0(0x754E6C6169726573, 0xEC0000007265626DLL);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  unint64_t v6 = *(void *)(*(void *)(v3 + 56) + 8 * v4);
  if (v6 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v27 + 8) = 0;
    *(void *)(v27 + 16) = 0;
    *(void *)uint64_t v27 = 4;
    *(unsigned char *)(v27 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  uint64_t v8 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v7 = *(void *)((v6 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  uint64_t v9 = *(void *)(v3 + 16);
  sub_10006D0EC(v8, v7);
  swift_retain();
  sub_10006D0EC(v8, v7);
  if (!v9 || (uint64_t v10 = sub_1002C0AD0(0x69746E6564496163, 0xEC00000072656966), (v11 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    sub_10006D144(v8, v7);
    sub_10007BF50();
    swift_allocError();
    *(void *)(v28 + 8) = 0;
    *(void *)(v28 + 16) = 0;
    *(void *)uint64_t v28 = 3;
    *(unsigned char *)(v28 + 24) = 3;
    swift_willThrow();
    swift_release();
LABEL_22:
    swift_release();
    return sub_10006D144(v8, v7);
  }
  unint64_t v12 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
  if (v12 >> 61 != 1)
  {
    sub_10007BF50();
    swift_allocError();
    *(void *)(v29 + 8) = 0;
    *(void *)(v29 + 16) = 0;
    *(void *)uint64_t v29 = 4;
    *(unsigned char *)(v29 + 24) = 3;
    swift_retain();
    swift_willThrow();
    swift_release();
    sub_10006D144(v8, v7);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_22;
  }
  unint64_t v40 = v7;
  uint64_t v14 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v13 = *(void *)((v12 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  unint64_t v39 = *(void *)(v3 + 16);
  sub_10006D0EC(v14, v13);
  swift_retain();
  unint64_t v41 = v13;
  sub_10006D0EC(v14, v13);
  if (v39 && (uint64_t v15 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B4C60), (v16 & 1) != 0))
  {
    unint64_t v17 = *(void *)(*(void *)(v3 + 56) + 8 * v15);
    if (v17 >> 61 == 1)
    {
      uint64_t v18 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      unint64_t v19 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v36 = *(void *)(v3 + 16);
      sub_10006D0EC(v18, v19);
      swift_retain();
      uint64_t v38 = v18;
      unint64_t v39 = v19;
      sub_10006D0EC(v18, v19);
      if (v36 && (uint64_t v20 = sub_1002C0AD0(0xD000000000000011, 0x80000001003B4C80), (v21 & 1) != 0))
      {
        unint64_t v22 = *(void *)(*(void *)(v3 + 56) + 8 * v20);
        swift_retain();
        swift_bridgeObjectRelease();
        unint64_t v7 = v40;
        if (v22 >> 61 == 1)
        {
          uint64_t v23 = *(void *)((v22 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
          unint64_t v37 = *(void *)((v22 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
          sub_10006D0EC(v23, v37);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          sub_10006D0EC(v8, v40);
          sub_10006D0EC(v14, v41);
          sub_10006D0EC(v38, v39);
          sub_10006D0EC(v23, v37);
          sub_10006D144(v38, v39);
          sub_10006D144(v14, v41);
          sub_10006D144(v8, v40);
          sub_10006D144(v8, v40);
          sub_10006D144(v14, v41);
          sub_10006D144(v38, v39);
          uint64_t result = sub_10006D144(v23, v37);
          *a2 = v8;
          a2[1] = v40;
          a2[2] = v14;
          a2[3] = v41;
          a2[4] = v38;
          a2[5] = v39;
          a2[6] = v23;
          a2[7] = v37;
          return result;
        }
        sub_10007BF50();
        swift_allocError();
        *(void *)(v35 + 8) = 0;
        *(void *)(v35 + 16) = 0;
        *(void *)uint64_t v35 = 4;
        *(unsigned char *)(v35 + 24) = 3;
        swift_willThrow();
        swift_release();
        a2 = (void *)v38;
        sub_10006D144(v38, v39);
        uint64_t v30 = v14;
        sub_10006D144(v14, v41);
        sub_10006D144(v8, v40);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        a2 = (void *)v18;
        sub_10006D144(v18, v19);
        uint64_t v30 = v14;
        sub_10006D144(v14, v41);
        unint64_t v7 = v40;
        sub_10006D144(v8, v40);
        sub_10007BF50();
        swift_allocError();
        *(void *)(v34 + 8) = 0;
        *(void *)(v34 + 16) = 0;
        *(void *)uint64_t v34 = 3;
        *(unsigned char *)(v34 + 24) = 3;
        swift_willThrow();
        swift_release();
        swift_release();
        swift_release();
      }
      swift_release();
      int v32 = 1;
      goto LABEL_26;
    }
    sub_10007BF50();
    swift_allocError();
    *(void *)(v33 + 8) = 0;
    *(void *)(v33 + 16) = 0;
    *(void *)uint64_t v33 = 4;
    *(unsigned char *)(v33 + 24) = 3;
    a2 = (void *)(v17 & 0x1FFFFFFFFFFFFFFFLL);
    swift_retain();
    swift_willThrow();
    swift_release();
    uint64_t v30 = v14;
    sub_10006D144(v14, v41);
    sub_10006D144(v8, v7);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = v14;
    sub_10006D144(v14, v41);
    sub_10006D144(v8, v7);
    sub_10007BF50();
    swift_allocError();
    *(void *)(v31 + 8) = 0;
    *(void *)(v31 + 16) = 0;
    *(void *)uint64_t v31 = 3;
    *(unsigned char *)(v31 + 24) = 3;
    swift_willThrow();
    swift_release();
    swift_release();
  }
  swift_release();
  int v32 = 0;
LABEL_26:
  sub_10006D144(v8, v7);
  uint64_t result = sub_10006D144(v30, v41);
  if (v32) {
    return sub_10006D144((uint64_t)a2, v39);
  }
  return result;
}

void sub_100253740()
{
  int64_t v1 = v0;
  uint64_t v2 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(v2 - 1);
  __chkstk_darwin(v2, v4);
  unint64_t v6 = (unint64_t)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    goto LABEL_57;
  }
  while (1)
  {
    uint64_t v7 = qword_100468A38;
    *(void *)unint64_t v6 = qword_100468A38;
    (*(void (**)(unint64_t, void, void *))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
    id v8 = (id)v7;
    LOBYTE(v7) = _dispatchPreconditionTest(_:)();
    (*(void (**)(unint64_t, void *))(v3 + 8))(v6, v2);
    if ((v7 & 1) == 0)
    {
      __break(1u);
      goto LABEL_59;
    }
    if (*(unsigned char *)(v1 + 24)) {
      break;
    }
    if (qword_100453870 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_100459B58);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Lyon Power started", v16, 2u);
      swift_slowDealloc();
    }

    if (qword_100453748 != -1) {
      swift_once();
    }
    unint64_t v17 = (void *)qword_1004687C8;
    uint64_t v18 = (void *)(v1 + 48);
    swift_beginAccess();
    unint64_t v19 = *(void **)(v1 + 48);
    id v20 = v17;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 48) = v19;
    int64_t v55 = v1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v19 = sub_100259418(0, v19[2] + 1, 1, v19);
      *uint64_t v18 = v19;
    }
    unint64_t v23 = v19[2];
    unint64_t v22 = v19[3];
    if (v23 >= v22 >> 1)
    {
      unint64_t v19 = sub_100259418((void *)(v22 > 1), v23 + 1, 1, v19);
      *uint64_t v18 = v19;
    }
    void v19[2] = v23 + 1;
    uint64_t v24 = &v19[3 * v23];
    *((unsigned char *)v24 + 32) = 2;
    v24[5] = v20;
    v24[6] = &off_1004147E0;
    swift_endAccess();
    if (qword_100453758 != -1) {
      swift_once();
    }
    uint64_t v25 = (void *)qword_1004687D0;
    swift_beginAccess();
    uint64_t v26 = (void *)*v18;
    id v27 = v25;
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v18 = v26;
    if ((v28 & 1) == 0)
    {
      uint64_t v26 = sub_100259418(0, v26[2] + 1, 1, v26);
      *uint64_t v18 = v26;
    }
    unint64_t v30 = v26[2];
    unint64_t v29 = v26[3];
    if (v30 >= v29 >> 1)
    {
      uint64_t v26 = sub_100259418((void *)(v29 > 1), v30 + 1, 1, v26);
      *uint64_t v18 = v26;
    }
    v26[2] = v30 + 1;
    uint64_t v31 = &v26[3 * v30];
    *((unsigned char *)v31 + 32) = 1;
    v31[5] = v27;
    v31[6] = &off_100414888;
    uint64_t v32 = swift_endAccess();
    if (qword_1004536D8 != -1) {
      uint64_t v32 = swift_once();
    }
    uint64_t v34 = __chkstk_darwin(v32, v33);
    v54[-4] = sub_1001FC988;
    v54[-3] = 0;
    v54[-2] = v35;
    __chkstk_darwin(v34, v36);
    uint64_t v2 = &v54[-4];
    v54[-2] = sub_1000A2ABC;
    v54[-1] = v37;
    unint64_t v39 = v38 + 4;
    os_unfair_lock_lock(v38 + 4);
    sub_100079ACC(v59);
    os_unfair_lock_unlock(v39);
    unint64_t v6 = v59[0];
    if ((v59[0] & 0xC000000000000001) != 0)
    {
      uint64_t v2 = (void *)__CocoaSet.makeIterator()();
      sub_10012AE84();
      sub_10025BEB8((unint64_t *)&qword_1004556F0, (void (*)(uint64_t))sub_10012AE84);
      Set.Iterator.init(_cocoa:)();
      unint64_t v6 = v59[0];
      uint64_t v40 = v59[1];
      uint64_t v41 = v59[2];
      uint64_t v3 = v59[3];
      unint64_t v42 = v59[4];
    }
    else
    {
      uint64_t v3 = 0;
      uint64_t v43 = -1 << *(unsigned char *)(v59[0] + 32);
      uint64_t v40 = v59[0] + 56;
      uint64_t v41 = ~v43;
      uint64_t v44 = -v43;
      if (v44 < 64) {
        uint64_t v45 = ~(-1 << v44);
      }
      else {
        uint64_t v45 = -1;
      }
      unint64_t v42 = v45 & *(void *)(v59[0] + 56);
    }
    v54[1] = v41;
    int64_t v1 = (unint64_t)(v41 + 64) >> 6;
    for (i = (char *)&type metadata for Swift.AnyObject + 8; (v6 & 0x8000000000000000) != 0; unint64_t v42 = v46)
    {
      uint64_t v49 = __CocoaSet.Iterator.next()();
      if (!v49) {
        goto LABEL_55;
      }
      uint64_t v57 = v49;
      sub_10012AE84();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v50 = v58;
      swift_unknownObjectRelease();
      uint64_t v48 = v3;
      uint64_t v46 = v42;
      if (!v50) {
        goto LABEL_55;
      }
LABEL_53:
      uint64_t v2 = (void *)qword_1004687D0;
      sub_1001B091C(v50);

      uint64_t v3 = v48;
    }
    if (v42)
    {
      uint64_t v46 = (v42 - 1) & v42;
      unint64_t v47 = __clz(__rbit64(v42)) | (v3 << 6);
      uint64_t v48 = v3;
LABEL_52:
      id v50 = *(id *)(*(void *)(v6 + 48) + 8 * v47);
      if (v50) {
        goto LABEL_53;
      }
      goto LABEL_55;
    }
    int64_t v51 = v3 + 1;
    if (!__OFADD__(v3, 1))
    {
      if (v51 < v1)
      {
        unint64_t v52 = *(void *)(v40 + 8 * v51);
        uint64_t v48 = v3 + 1;
        if (!v52)
        {
          uint64_t v48 = v3 + 2;
          if (v3 + 2 >= v1) {
            goto LABEL_55;
          }
          unint64_t v52 = *(void *)(v40 + 8 * v48);
          if (!v52)
          {
            uint64_t v48 = v3 + 3;
            if (v3 + 3 >= v1) {
              goto LABEL_55;
            }
            unint64_t v52 = *(void *)(v40 + 8 * v48);
            if (!v52)
            {
              uint64_t v48 = v3 + 4;
              if (v3 + 4 >= v1) {
                goto LABEL_55;
              }
              unint64_t v52 = *(void *)(v40 + 8 * v48);
              if (!v52)
              {
                uint64_t v53 = v3 + 5;
                while (v1 != v53)
                {
                  unint64_t v52 = *(void *)(v40 + 8 * v53++);
                  if (v52)
                  {
                    uint64_t v48 = v53 - 1;
                    goto LABEL_51;
                  }
                }
                goto LABEL_55;
              }
            }
          }
        }
LABEL_51:
        uint64_t v46 = (v52 - 1) & v52;
        unint64_t v47 = __clz(__rbit64(v52)) + (v48 << 6);
        goto LABEL_52;
      }
LABEL_55:
      sub_10008C4F0();
      *(unsigned char *)(v55 + 24) = 1;
      return;
    }
    __break(1u);
LABEL_57:
    swift_once();
  }
  if (qword_100453870 == -1) {
    goto LABEL_5;
  }
LABEL_59:
  swift_once();
LABEL_5:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E55C(v9, (uint64_t)qword_100459B58);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "LyonPower is already running", v12, 2u);
    swift_slowDealloc();
  }
}

void sub_100253EE4()
{
  int64_t v1 = v0;
  if (qword_100453870 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_100459B58);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Resetting connection RSSI backoff for seconds for Lyon", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = v1[4];
  if (v6)
  {
    sub_100052B14(v6);
    uint64_t v7 = (void *)v1[4];
  }
  else
  {
    uint64_t v7 = 0;
  }
  v1[4] = 0;

  v1[5] = 0;
  if (qword_100453838 != -1) {
    swift_once();
  }
  v1[11] = qword_100468958;

  sub_100256DC4();
}

void sub_100254030(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  id v8 = (void *)((char *)v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_100468A38;
  *id v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  char v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once();
    goto LABEL_6;
  }
  unint64_t v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v13 >> 60 != 15)
  {
    uint64_t v21 = *v12;
    char v22 = *(unsigned char *)(v1 + 81);
    sub_10006D0EC(*v12, v13);
    if (v22)
    {
      if (qword_100453870 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E55C(v23, (uint64_t)qword_100459B58);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "We are already in biolockout backoff, should not have connected to a peer", v26, 2u);
        swift_slowDealloc();

        sub_100075868(v21, v13);
        return;
      }
    }
    else
    {
      if (qword_100453870 != -1) {
        swift_once();
      }
      uint64_t v66 = v1;
      uint64_t v28 = type metadata accessor for Logger();
      uint64_t v29 = sub_10008E55C(v28, (uint64_t)qword_100459B58);
      sub_10006D0EC(v21, v13);
      sub_10006D0EC(v21, v13);
      uint64_t v65 = v29;
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v64 = (void **)swift_slowAlloc();
        aBlock = v64;
        *(_DWORD *)uint64_t v32 = 136315138;
        v63[1] = v32 + 4;
        uint64_t v33 = sub_10023CDF4(v21, v13);
        uint64_t v67 = v2;
        uint64_t v74 = (uint64_t)v33;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v34 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v36 = v35;
        swift_bridgeObjectRelease();
        uint64_t v37 = v34;
        uint64_t v38 = v67;
        uint64_t v74 = sub_100290514(v37, v36, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100075868(v21, v13);
        sub_100075868(v21, v13);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Sending biolockout event for %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100075868(v21, v13);
        sub_100075868(v21, v13);

        uint64_t v38 = v2;
      }
      sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378290;
      *(void *)(inited + 32) = 0xD000000000000014;
      *(void *)(inited + 40) = 0x80000001003B74E0;
      aBlock = (void **)0xD000000000000013;
      unint64_t v69 = 0x80000001003B8F90;
      sub_1000758F4(v21, v13);
      uint64_t v40 = sub_10023CDF4(v21, v13);
      uint64_t v67 = v38;
      uint64_t v74 = (uint64_t)v40;
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      v44._countAndFlagsBits = v41;
      v44._object = v43;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      uint64_t v45 = aBlock;
      unint64_t v46 = v69;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v45;
      *(void *)(inited + 56) = v46;
      unint64_t v47 = sub_1001DB224(inited);
      sub_1002B9140(0xD000000000000025, 0x80000001003B74B0, 0, 0xF000000000000000, v21, v13, v47);
      swift_bridgeObjectRelease();
      sub_100075868(v21, v13);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v49))
      {
        id v50 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v50 = 134217984;
        if (qword_100453868 != -1) {
          swift_once();
        }
        aBlock = (void **)qword_100459B50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Starting biolockout backoff for %f seconds for Lyon", v50, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v51 = v66;
      *(unsigned char *)(v66 + 81) = 1;
      sub_100256DC4();
      if (qword_100453868 != -1) {
        swift_once();
      }
      if (*(double *)&qword_100459B50 != 0.0)
      {
        uint64_t v54 = swift_allocObject();
        swift_weakInit();
        int64_t v55 = (void *)qword_100468A38;
        uint64_t v56 = (NSObject **)objc_allocWithZone((Class)SESTimer);
        uint64_t v72 = sub_10025BEAC;
        uint64_t v73 = v54;
        aBlock = _NSConcreteStackBlock;
        unint64_t v69 = 1107296256;
        uint64_t v70 = sub_10007C0C4;
        uint64_t v71 = &unk_1004174E0;
        uint64_t v57 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v58 = sub_100052804(v56, v55, v57);
        _Block_release(v57);
        swift_release();
        uint64_t v59 = *(void **)(v51 + 16);
        *(void *)(v51 + 16) = v58;

        uint64_t v60 = *(void **)(v51 + 16);
        if (v60)
        {
          double v61 = *(double *)&qword_100459B50;
          id v62 = v60;
          sub_1000529D8((uint64_t)v62, v61);
          sub_100075868(v21, v13);
          swift_release();
        }
        else
        {
          sub_100075868(v21, v13);
          swift_release();
        }
        return;
      }
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v52, "Scanning disabled till device exits biolockout", v53, 2u);
        swift_slowDealloc();

        sub_100075868(v21, v13);
        return;
      }
    }
    sub_100075868(v21, v13);

    return;
  }
  if (qword_100453870 != -1) {
    goto LABEL_35;
  }
LABEL_6:
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E55C(v14, (uint64_t)qword_100459B58);
  swift_retain_n();
  os_log_type_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void **)swift_slowAlloc();
    *(_DWORD *)unint64_t v17 = 136315138;
    aBlock = v18;
    type metadata accessor for UUID();
    sub_10025BEB8((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v74 = sub_100290514(v19, v20, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Key identifier not set for peer %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  sub_10007567C();
  swift_allocError();
  unsigned char *v27 = 0;
  swift_willThrow();
}

void sub_100254AB0()
{
  uint64_t v1 = v0;
  if (v0[11])
  {
    if (qword_100453858 != -1) {
      swift_once();
    }
    if (byte_100459B40 == 1)
    {
      uint64_t v2 = v0[5];
      uint64_t v3 = v2 + 1;
      if (__OFADD__(v2, 1))
      {
        __break(1u);
      }
      else
      {
        v1[5] = v3;
        if (qword_100453850 == -1) {
          goto LABEL_7;
        }
      }
      swift_once();
LABEL_7:
      if (v3 == qword_100459B38)
      {
        v1[5] = 0;
        if (!v1[4])
        {
          uint64_t v4 = swift_allocObject();
          swift_weakInit();
          if (qword_100453928 != -1) {
            swift_once();
          }
          uint64_t v5 = (void *)qword_100468A38;
          uint64_t v6 = (NSObject **)objc_allocWithZone((Class)SESTimer);
          v33[4] = sub_10025BEA4;
          v33[5] = v4;
          v33[0] = _NSConcreteStackBlock;
          v33[1] = 1107296256;
          _OWORD v33[2] = sub_10007C0C4;
          void v33[3] = &unk_1004174B8;
          uint64_t v7 = _Block_copy(v33);
          swift_retain();
          id v8 = sub_100052804(v6, v5, v7);
          _Block_release(v7);
          swift_release();
          uint64_t v9 = (void *)v1[4];
          v1[4] = v8;

          id v10 = (void *)v1[4];
          if (v10)
          {
            uint64_t v11 = qword_100453848;
            id v12 = v10;
            if (v11 != -1) {
              swift_once();
            }
            sub_1000529D8((uint64_t)v12, *(double *)&qword_100459B30);
            swift_release();
          }
          else
          {
            swift_release();
          }
        }
        uint64_t v25 = v1[11];
        if (qword_100453840 != -1) {
          swift_once();
        }
        if (v25 >= qword_100468960)
        {
          v1[11] = 0;
          if (qword_100453870 == -1)
          {
LABEL_34:
            uint64_t v29 = type metadata accessor for Logger();
            sub_10008E55C(v29, (uint64_t)qword_100459B58);
            unint64_t v30 = Logger.logObject.getter();
            os_log_type_t v31 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v30, v31))
            {
              uint64_t v32 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v32 = 0;
              _os_log_impl((void *)&_mh_execute_header, v30, v31, "Sending passive entry disabled event to wallet", v32, 2u);
              swift_slowDealloc();
            }

            goto LABEL_37;
          }
        }
        else
        {
          uint64_t v26 = v1[11];
          BOOL v27 = __OFADD__(v26, 12);
          uint64_t v28 = v26 + 12;
          if (!v27)
          {
            v1[11] = v28;
LABEL_37:
            sub_100256DC4();
            return;
          }
          __break(1u);
        }
        swift_once();
        goto LABEL_34;
      }
      if (qword_100453870 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10008E55C(v22, (uint64_t)qword_100459B58);
      swift_retain();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v24 + 12) = 2048;
        v33[0] = qword_100459B38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        unint64_t v17 = "Number of error disconnects incremented to %ld, shrinking every %ld errors";
        uint64_t v18 = v14;
        os_log_type_t v19 = v23;
        unint64_t v20 = (uint8_t *)v24;
        uint32_t v21 = 22;
        goto LABEL_19;
      }
      goto LABEL_24;
    }
  }
  if (qword_100453870 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E55C(v13, (uint64_t)qword_100459B58);
  swift_retain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v16 = 134217984;
    v33[0] = v1[11];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    unint64_t v17 = "Current threshold %ld, not shrinking";
    uint64_t v18 = v14;
    os_log_type_t v19 = v15;
    unint64_t v20 = v16;
    uint32_t v21 = 12;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v17, v20, v21);
    swift_slowDealloc();

    return;
  }
LABEL_24:

  swift_release();
}

void *sub_100255040()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_7;
  }
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    swift_beginAccess();
    return (void *)swift_bridgeObjectRetain();
  }
  if (qword_100453870 != -1) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E55C(v9, (uint64_t)qword_100459B58);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not running", v12, 2u);
    swift_slowDealloc();
  }

  return _swiftEmptyArrayStorage;
}

void sub_100255268(char a1, char a2, char a3, uint64_t a4, int a5)
{
  unint64_t v6 = (unint64_t)v5;
  LODWORD(v7) = a5;
  uint64_t v114 = a4;
  LOBYTE(v8) = a3;
  LOBYTE(v9) = a2;
  LOBYTE(v5) = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v107 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v113 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = type metadata accessor for DispatchPredicate();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  unint64_t v17 = (uint8_t *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    goto LABEL_120;
  }
LABEL_2:
  uint64_t v18 = qword_100468A38;
  *(void *)unint64_t v17 = qword_100468A38;
  (*(void (**)(uint8_t *, void, unint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  id v19 = (id)v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint8_t *, unint64_t))(v14 + 8))(v17, v13);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    swift_once();
    goto LABEL_5;
  }
  if (*(unsigned char *)(v6 + 24) != 1)
  {
    if (qword_100453870 != -1) {
      swift_once();
    }
    sub_10008E55C(v10, (uint64_t)qword_100459B58);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      unint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Not running", v30, 2u);
      swift_slowDealloc();
    }

    return;
  }
  if (qword_100453870 != -1) {
    goto LABEL_125;
  }
LABEL_5:
  int v20 = v5;
  uint64_t v106 = sub_10008E55C(v10, (uint64_t)qword_100459B58);
  uint32_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v14 = v114;
  if (v23)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating configuration", v24, 2u);
    swift_slowDealloc();
  }
  int v25 = v9;

  if (v20 != 2)
  {
    int v26 = v20 & 1;
    if (v26 != *(unsigned __int8 *)(v6 + 64))
    {
      *(unsigned char *)(v6 + 64) = v26;
      if (v26)
      {
        char v27 = *(unsigned char *)(v6 + 81);
        *(unsigned char *)(v6 + 81) = v27;
        if (v27)
        {
LABEL_21:
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v33, v34))
          {
            unint64_t v35 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)unint64_t v35 = 67109120;
            uint64_t v14 = v114;
            int v128 = v26;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Biolockout %{BOOL}d", v35, 8u);
            swift_slowDealloc();
          }

          if ((*(unsigned char *)(v6 + 64) & 1) == 0) {
            sub_100253EE4();
          }
          char v31 = 1;
          goto LABEL_26;
        }
      }
      else
      {
        *(unsigned char *)(v6 + 81) = 0;
      }
      uint64_t v32 = *(void *)(v6 + 16);
      if (v32) {
        sub_100052B14(v32);
      }
      goto LABEL_21;
    }
  }
  char v31 = 0;
LABEL_26:
  int v36 = v8;
  if (v25 != 2)
  {
    int v37 = v25 & 1;
    if (v37 != *(unsigned __int8 *)(v6 + 65))
    {
      *(unsigned char *)(v6 + 65) = v37;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 67109120;
        int v128 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "UWB suspended %{BOOL}d", v40, 8u);
        swift_slowDealloc();
      }

      char v31 = 1;
    }
  }
  if (v36 == 2)
  {
    uint64_t v41 = v113;
  }
  else
  {
    int v42 = v36 & 1;
    uint64_t v41 = v113;
    if (v42 != *(unsigned __int8 *)(v6 + 80))
    {
      *(unsigned char *)(v6 + 80) = v42;
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 67109120;
        int v128 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Ranging limit exceeded %{BOOL}d", v45, 8u);
        swift_slowDealloc();
      }

      char v31 = 1;
    }
  }
  if (!v14) {
    goto LABEL_105;
  }
  uint64_t v46 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v47 = sub_1001E54B4(v14, v46);
  swift_bridgeObjectRelease();
  if (v47)
  {
    swift_bridgeObjectRelease();
    goto LABEL_105;
  }
  uint64_t v48 = *(void *)(*(void *)(v6 + 72) + 16);
  if (*(void *)(v14 + 16))
  {
    uint64_t v49 = v107;
    if (v48) {
      goto LABEL_57;
    }
    swift_beginAccess();
    uint64_t v50 = *(void *)(v6 + 48);
    uint64_t v51 = *(void *)(v50 + 16);
    if (v51)
    {
      swift_bridgeObjectRetain();
      os_log_type_t v52 = (uint64_t *)(v50 + 48);
      do
      {
        uint64_t v53 = *(v52 - 1);
        uint64_t v54 = *v52;
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v123 = v53;
        (*(void (**)(uint64_t, uint64_t))(v54 + 8))(ObjectType, v54);
        v52 += 3;
        --v51;
      }
      while (v51);
      swift_bridgeObjectRelease();
      uint64_t v49 = v107;
    }
    if (*(unsigned char *)(v6 + 83)) {
      goto LABEL_57;
    }
    if (qword_1004536A0 != -1) {
      swift_once();
    }
    sub_1000BB93C();
LABEL_56:
    uint64_t v49 = v107;
    goto LABEL_57;
  }
  uint64_t v49 = v107;
  if (v48)
  {
    if (qword_1004536A0 != -1) {
      goto LABEL_130;
    }
    goto LABEL_52;
  }
LABEL_57:
  while (2)
  {
    *(void *)(v6 + 72) = v14;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t, uint64_t))(v49 + 16))(v41, v106, v10);
    swift_bridgeObjectRetain();
    uint64_t v62 = v49;
    uint64_t v63 = Logger.logObject.getter();
    LODWORD(v8) = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v63, (os_log_type_t)v8))
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(void *, uint64_t))(v62 + 8))(v41, v10);
      char v31 = 1;
      goto LABEL_105;
    }
    int v99 = v8;
    os_log_t v100 = v63;
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    uint64_t v129 = v98;
    *(_DWORD *)unint64_t v17 = 136315138;
    int64_t v9 = *(void *)(v14 + 16);
    if (!v9) {
      goto LABEL_104;
    }
    uint64_t v97 = v17;
    uint64_t v127 = _swiftEmptyArrayStorage;
    sub_1002CF974(0, v9, 0);
    uint64_t v5 = v127;
    uint64_t v64 = sub_100203450(v14);
    uint64_t v66 = 0;
    int v68 = v67 & 1;
    uint64_t v105 = v14 + 56;
    long long v120 = xmmword_100378290;
    unint64_t v102 = v6;
    int v101 = v7;
    uint64_t v104 = v10;
    int64_t v103 = v9;
LABEL_60:
    if (v64 < 0 || v64 >= 1 << *(unsigned char *)(v14 + 32)) {
      goto LABEL_122;
    }
    if (((*(void *)(v105 + (((unint64_t)v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v64) & 1) == 0) {
      goto LABEL_123;
    }
    if (*(_DWORD *)(v14 + 36) != v65) {
      goto LABEL_124;
    }
    int v108 = v68;
    uint64_t v109 = v65;
    BOOL v112 = v5;
    uint64_t v111 = v66 + 1;
    uint64_t v69 = *(void *)(v14 + 48);
    uint64_t v110 = v64;
    uint64_t v70 = (uint64_t *)(v69 + 16 * v64);
    uint64_t v10 = *v70;
    unint64_t v119 = v70[1];
    unint64_t v8 = v119 >> 62;
    uint64_t v41 = _swiftEmptyArrayStorage;
    unint64_t v13 = HIDWORD(v10);
    switch(v119 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v10), v10)) {
          goto LABEL_127;
        }
        int64_t v9 = HIDWORD(v10) - (int)v10;
LABEL_70:
        sub_10006D0EC(v10, v119);
        if (!v9)
        {
LABEL_66:
          uint64_t v41 = _swiftEmptyArrayStorage;
          goto LABEL_99;
        }
LABEL_71:
        unint64_t v115 = HIDWORD(v10);
        uint64_t v126 = _swiftEmptyArrayStorage;
        uint64_t v14 = v9 & ~(v9 >> 63);
        sub_1002CF974(0, v14, 0);
        uint64_t v41 = v126;
        uint64_t v118 = (int)v10;
        if (!v8)
        {
          if (v9 < 0) {
            goto LABEL_129;
          }
          uint64_t v7 = 0;
          goto LABEL_78;
        }
        if (v8 == 1) {
          uint64_t v7 = v118;
        }
        else {
          uint64_t v7 = *(void *)(v10 + 16);
        }
        if (v9 < 0)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          swift_once();
LABEL_52:
          sub_1000B7250();
          swift_beginAccess();
          uint64_t v56 = *(void *)(v6 + 48);
          uint64_t v57 = *(void *)(v56 + 16);
          uint64_t v49 = v107;
          if (v57)
          {
            swift_bridgeObjectRetain();
            uint64_t v58 = (uint64_t *)(v56 + 48);
            do
            {
              uint64_t v59 = *(v58 - 1);
              uint64_t v60 = *v58;
              uint64_t v61 = swift_getObjectType();
              uint64_t v123 = v59;
              (*(void (**)(uint64_t, uint64_t))(v60 + 16))(v61, v60);
              v58 += 3;
              --v57;
            }
            while (v57);
            swift_bridgeObjectRelease();
            goto LABEL_56;
          }
          continue;
        }
LABEL_78:
        LOBYTE(v5) = v119;
        uint64_t v116 = v10 >> 32;
        uint64_t v117 = BYTE6(v119);
        unint64_t v121 = v119 & 0x3FFFFFFFFFFFFFFFLL;
        unint64_t v122 = v8;
        while (2)
        {
          if (!v14)
          {
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            swift_once();
            goto LABEL_2;
          }
          if (v8)
          {
            if (v8 == 1)
            {
              if (v7 < v118 || v7 >= v116) {
                goto LABEL_114;
              }
              uint64_t v73 = __DataStorage._bytes.getter();
              if (!v73)
              {
                swift_bridgeObjectRelease();
                __break(1u);
LABEL_132:
                swift_bridgeObjectRelease();
                __break(1u);
              }
              unint64_t v8 = v73;
              uint64_t v74 = __DataStorage._offset.getter();
              uint64_t v75 = v7 - v74;
              if (__OFSUB__(v7, v74)) {
                goto LABEL_117;
              }
            }
            else
            {
              if (v7 < *(void *)(v10 + 16)) {
                goto LABEL_116;
              }
              if (v7 >= *(void *)(v10 + 24)) {
                goto LABEL_118;
              }
              uint64_t v77 = __DataStorage._bytes.getter();
              if (!v77) {
                goto LABEL_132;
              }
              unint64_t v8 = v77;
              uint64_t v78 = __DataStorage._offset.getter();
              uint64_t v75 = v7 - v78;
              if (__OFSUB__(v7, v78)) {
                goto LABEL_119;
              }
            }
            char v76 = *(unsigned char *)(v8 + v75);
          }
          else
          {
            if (v7 >= v117) {
              goto LABEL_115;
            }
            LOWORD(v123) = v10;
            BYTE2(v123) = BYTE2(v10);
            BYTE3(v123) = BYTE3(v10);
            BYTE4(v123) = v115;
            BYTE5(v123) = BYTE5(v10);
            BYTE6(v123) = BYTE6(v10);
            HIBYTE(v123) = HIBYTE(v10);
            int v124 = v119;
            __int16 v125 = WORD2(v119);
            char v76 = *((unsigned char *)&v123 + v7);
          }
          sub_10006C51C(&qword_100457200);
          uint64_t v79 = swift_allocObject();
          *(_OWORD *)(v79 + 16) = v120;
          *(void *)(v79 + 56) = &type metadata for UInt8;
          *(void *)(v79 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v79 + 32) = v76;
          unint64_t v8 = String.init(format:_:)();
          unint64_t v17 = v80;
          uint64_t v126 = v41;
          unint64_t v13 = v41[2];
          unint64_t v81 = v41[3];
          unint64_t v6 = v13 + 1;
          if (v13 >= v81 >> 1)
          {
            sub_1002CF974(v81 > 1, v13 + 1, 1);
            uint64_t v41 = v126;
          }
          void v41[2] = v6;
          id v82 = &v41[2 * v13];
          v82[4] = v8;
          v82[5] = v17;
          ++v7;
          --v14;
          --v9;
          LOBYTE(v5) = v121;
          LODWORD(v8) = v122;
          if (v9) {
            continue;
          }
          break;
        }
        unint64_t v6 = v102;
        LODWORD(v7) = v101;
LABEL_99:
        uint64_t v123 = (uint64_t)v41;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        int64_t v9 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v84 = v83;
        swift_bridgeObjectRelease();
        sub_10006D144(v10, v119);
        uint64_t v5 = v112;
        uint64_t v127 = v112;
        unint64_t v86 = v112[2];
        unint64_t v85 = v112[3];
        unint64_t v8 = v86 + 1;
        if (v86 >= v85 >> 1)
        {
          sub_1002CF974(v85 > 1, v86 + 1, 1);
          uint64_t v5 = v127;
        }
        _OWORD v5[2] = v8;
        uint64_t v87 = &v5[2 * v86];
        v87[4] = v9;
        v87[5] = v84;
        uint64_t v14 = v114;
        uint64_t v64 = sub_1000FAE78(v110, v109, v108 & 1, v114);
        int v68 = v88 & 1;
        LOBYTE(v9) = v103;
        uint64_t v66 = v111;
        uint64_t v10 = v104;
        uint64_t v41 = v113;
        if (v111 != v103) {
          goto LABEL_60;
        }
        sub_10008B004(v64, v65, v68);
        unint64_t v17 = v97;
LABEL_104:
        uint64_t v89 = Array.description.getter();
        unint64_t v91 = v90;
        swift_bridgeObjectRelease();
        uint64_t v123 = sub_100290514(v89, v91, &v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        os_log_t v92 = v100;
        _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v99, "Express reader group identifiers %s", v17, 0xCu);
        char v31 = 1;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(void *, uint64_t))(v107 + 8))(v41, v10);
LABEL_105:
        if (v7 == 2 || (v7 & 1) == *(unsigned char *)(v6 + 82))
        {
          if (v31) {
            goto LABEL_111;
          }
        }
        else
        {
          *(unsigned char *)(v6 + 82) = v7 & 1;
          uint64_t v93 = Logger.logObject.getter();
          os_log_type_t v94 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v93, v94))
          {
            unint64_t v95 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)unint64_t v95 = 67109120;
            LODWORD(v123) = v7 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v93, v94, "Device is out of all geofence bubbles %{BOOL}d", v95, 8u);
            swift_slowDealloc();
          }

LABEL_111:
          sub_100256DC4();
        }
        return;
      case 2uLL:
        uint64_t v72 = *(void *)(v10 + 16);
        uint64_t v71 = *(void *)(v10 + 24);
        int64_t v9 = v71 - v72;
        if (!__OFSUB__(v71, v72)) {
          goto LABEL_70;
        }
        goto LABEL_128;
      case 3uLL:
        goto LABEL_99;
      default:
        int64_t v9 = BYTE6(v119);
        if (!BYTE6(v119)) {
          goto LABEL_66;
        }
        goto LABEL_71;
    }
  }
}

char *sub_1002561F0(char a1, double a2, double a3)
{
  *(void *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer] = 0;
  *(double *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceDuration] = a2;
  *(double *)&v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionDuration] = a3;
  v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive] = 0;
  v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive] = 0;
  v3[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus] = a1;
  v25.receiver = v3;
  v25.super_class = (Class)type metadata accessor for LyonPowerExceptionHandlerClass();
  id v4 = [super init];
  uint64_t v5 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v6 = qword_100453928;
  uint64_t v7 = (char *)v4;
  if (v6 != -1) {
    swift_once();
  }
  unint64_t v8 = (void *)qword_100468A38;
  int64_t v9 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  BOOL v23 = sub_100258E88;
  uint64_t v24 = v5;
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint32_t v21 = sub_10007C0C4;
  os_log_type_t v22 = &unk_100417440;
  uint64_t v10 = _Block_copy(&v19);
  swift_retain();
  uint64_t v11 = sub_100052804(v9, v8, v10);
  _Block_release(v10);
  swift_release();
  uint64_t v12 = *(void **)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer];
  *(void *)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer] = v11;

  unint64_t v13 = (void *)qword_100468A38;
  uint64_t v14 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  BOOL v23 = sub_100258EA8;
  uint64_t v24 = v5;
  id v19 = _NSConcreteStackBlock;
  uint64_t v20 = 1107296256;
  uint32_t v21 = sub_10007C0C4;
  os_log_type_t v22 = &unk_100417468;
  uint64_t v15 = _Block_copy(&v19);
  swift_retain();
  uint64_t v16 = sub_100052804(v14, v13, v15);
  _Block_release(v15);

  swift_release();
  unint64_t v17 = *(void **)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer];
  *(void *)&v7[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer] = v16;
  swift_release();

  return v7;
}

void sub_100256478()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void (**)(void *, uint64_t))((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  int64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = *(void (**)(void *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if (v7)
  {
    objc_super v25 = v11;
    int v26 = v9;
    if (qword_100453870 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v12 = type metadata accessor for Logger();
  sub_10008E55C(v12, (uint64_t)qword_100459B58);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Exception status active", v15, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) != 1)
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) = 1;
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive)) {
      return;
    }
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint32_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint32_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Starting debounce", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = qword_100468A38;
    *uint64_t v6 = qword_100468A38;
    v26(v6, v8, v2);
    id v23 = (id)v22;
    LOBYTE(v22) = _dispatchPreconditionTest(_:)();
    v25(v6, v2);
    if (v22)
    {
      uint64_t v24 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer);
      if (v24)
      {
        sub_1000529D8(v24, *(double *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceDuration));
        *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive) = 1;
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Exception status has not changed; doing nothing", v18, 2u);
    swift_slowDealloc();
  }
}

void sub_10025681C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void (**)(void *, void, uint64_t))((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  unsigned int v8 = enum case for DispatchPredicate.onQueue(_:);
  int64_t v9 = *(void (**)(void *, void, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  v12(v6, v2);
  if (v11)
  {
    id v23 = v9;
    unsigned int v24 = v8;
    if (qword_100453870 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E55C(v13, (uint64_t)qword_100459B58);
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Exception status inactive", v16, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus))
  {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) = 0;
    uint64_t v17 = qword_100468A38;
    *uint64_t v6 = qword_100468A38;
    v23(v6, v24, v2);
    id v18 = (id)v17;
    LOBYTE(v17) = _dispatchPreconditionTest(_:)();
    v12(v6, v2);
    if (v17)
    {
      uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceTimer);
      if (v19)
      {
        sub_100052B14(v19);
        *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive) = 0;
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    os_log_type_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Exception status has not changed; doing nothing", v22, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100256B34()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus);
}

uint64_t sub_100256B44()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive);
}

uint64_t sub_100256B54()
{
  type metadata accessor for LyonPower();
  swift_allocObject();
  uint64_t result = sub_100257AEC();
  qword_100468950 = result;
  return result;
}

void sub_100256B90(uint64_t a1)
{
}

void sub_100256BB8(uint64_t a1)
{
}

void sub_100256BE0(uint64_t a1)
{
}

void sub_100256C10(uint64_t a1)
{
}

void sub_100256C38()
{
  SESInternalVariant();
  sub_1001AF4B4();
  byte_100459B40 = v0 & 1;
}

void sub_100256CB4(uint64_t a1)
{
}

void sub_100256CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_1001AF748();
  *a5 = v6;
}

void sub_100256D38(uint64_t a1)
{
}

void sub_100256D68(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_1001AF368();
  *a4 = v5;
}

void sub_100256DC4()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A38;
  *uint64_t v5 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v7 = (id)v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v5, v1);
  if ((v6 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
LABEL_12:
    if (v5)
    {
      uint64_t v8 = *(void *)(v0 + 72);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = 0;
    }
    if (*(unsigned char *)(v0 + 64) == 1)
    {
      if (qword_100453860 != -1) {
        swift_once();
      }
      uint64_t v13 = &qword_100459B48;
    }
    else
    {
      uint64_t v13 = (uint64_t *)(v0 + 88);
    }
    uint64_t v14 = *v13;
    swift_beginAccess();
    uint64_t v15 = *(void *)(*(void *)(v0 + 56) + 16);
    if (v15) {
      LOBYTE(v15) = *(unsigned char *)(v0 + 80) ^ 1;
    }
    sub_1001DEAA4(v8, v14, v15 & 1);
    swift_bridgeObjectRelease();
    return;
  }
  if (*(unsigned char *)(v0 + 24) == 1)
  {
    LODWORD(v5) = (*(unsigned char *)(v0 + 83) & 1) == 0
               && (*(unsigned char *)(v0 + 65) & 1) == 0
               && (*(unsigned char *)(v0 + 81) & 1) == 0
               && *(void *)(*(void *)(v0 + 72) + 16)
               && (*(unsigned char *)(v0 + 82) & 1) == 0
               && *(void *)(v0 + 88) != 0;
    if (qword_100453790 == -1) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
  if (qword_100453870 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E55C(v9, (uint64_t)qword_100459B58);
  id v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Not running", v12, 2u);
    swift_slowDealloc();
  }
}

void sub_1002570EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint8_t **)((char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  id v7 = (void *)qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  unsigned int v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = v3 + 104;
  uint64_t v57 = *(void (**)(void *, void, uint64_t))(v3 + 104);
  v57(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v3 + 8);
  uint64_t v13 = v3 + 8;
  uint64_t v12 = v14;
  v14(v6, v2);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_42:
    swift_once();
LABEL_15:
    uint64_t v26 = type metadata accessor for Logger();
    sub_10008E55C(v26, (uint64_t)qword_100459B58);
    char v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not running", v29, 2u);
      swift_slowDealloc();
    }
    goto LABEL_38;
  }
  if (*(unsigned char *)(v1 + 24) != 1)
  {
    if (qword_100453870 == -1) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
  unsigned int v52 = v8;
  uint64_t v53 = v9;
  uint64_t v54 = v12;
  uint64_t v55 = v13;
  uint64_t v56 = v2;
  uint64_t v15 = v1 + 56;
  swift_beginAccess();
  *(void *)(v1 + 56) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v16 = *(void *)(*(void *)(v1 + 48) + 16);
  if (v16)
  {
    uint64_t v51 = v1;
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v50 = (uint8_t *)v17;
    id v18 = (void **)(v17 + 40);
    do
    {
      char v19 = *((unsigned char *)v18 - 8);
      os_log_type_t v20 = *v18;
      uint64_t v17 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **v18) + 0xE8))(v17);
      if (v17)
      {
        swift_beginAccess();
        os_log_type_t v21 = *(void **)v15;
        uint64_t v22 = v20;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v15 = v21;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          os_log_type_t v21 = sub_10025A418(0, v21[2] + 1, 1, v21, &qword_100459CB8);
          *(void *)uint64_t v15 = v21;
        }
        unint64_t v25 = v21[2];
        unint64_t v24 = v21[3];
        if (v25 >= v24 >> 1)
        {
          os_log_type_t v21 = sub_10025A418((void *)(v24 > 1), v25 + 1, 1, v21, &qword_100459CB8);
          *(void *)uint64_t v15 = v21;
        }
        void v21[2] = v25 + 1;
        *((unsigned char *)v21 + v25 + 32) = v19;
        swift_endAccess();
      }
      v18 += 3;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  if (qword_100453870 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_10008E55C(v30, (uint64_t)qword_100459B58);
  swift_retain_n();
  char v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    v58[0] = v51;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v50 = v33 + 4;
    swift_bridgeObjectRetain();
    uint64_t v34 = Array.description.getter();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    v58[3] = sub_100290514(v34, v36, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Active Exceptions %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v37 = v52;
  if (*(void *)(*(void *)v15 + 16)) {
    sub_100253EE4();
  }
  else {
    sub_100256DC4();
  }
  if (qword_1004536A0 != -1) {
    swift_once();
  }
  uint64_t v38 = qword_100468660;
  uint64_t v39 = *(void *)v15;
  uint64_t v40 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  uint64_t v41 = v37;
  uint64_t v42 = v56;
  v57(v6, v41, v56);
  swift_bridgeObjectRetain();
  id v43 = (id)v40;
  LOBYTE(v40) = _dispatchPreconditionTest(_:)();
  v54(v6, v42);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  if (*(unsigned char *)(v38 + 16) != 1)
  {
    char v27 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v48, "LyonUWB is not running", v49, 2u);
      swift_slowDealloc();
    }
    swift_bridgeObjectRelease();
LABEL_38:

    return;
  }
  if (qword_1004537A8 != -1) {
LABEL_44:
  }
    swift_once();
  uint64_t v44 = *(void *)(v39 + 16);
  if (v44)
  {
    uint64_t v45 = 0;
    uint64_t v46 = (char *)(v39 + 32);
    do
    {
      uint64_t v47 = *v46++;
      v45 |= qword_10037D500[v47];
      --v44;
    }
    while (v44);
  }
  else
  {
    uint64_t v45 = 0;
  }
  sub_1001FC3C8(v45, 1uLL);
  swift_bridgeObjectRelease();
}

uint64_t sub_1002577E8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (qword_100453870 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E55C(v1, (uint64_t)qword_100459B58);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 134217984;
      if (qword_100453848 != -1) {
        swift_once();
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Ending connection RSSI backoff for %f seconds for Lyon", v4, 0xCu);
      swift_slowDealloc();
    }

    sub_100253EE4(v5);
    return swift_release();
  }
  return result;
}

uint64_t sub_100257968()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (qword_100453870 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E55C(v2, (uint64_t)qword_100459B58);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 134217984;
      if (qword_100453868 != -1) {
        swift_once();
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Ending biolockout backoff for %f seconds for Lyon", v5, 0xCu);
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + 81) = 0;
    sub_100256DC4();
    return swift_release();
  }
  return result;
}

uint64_t sub_100257AEC()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 56) = _swiftEmptyArrayStorage;
  *(_WORD *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = &_swiftEmptySetSingleton;
  *(_DWORD *)(v0 + 80) = 0;
  if (qword_100453838 != -1) {
    swift_once();
  }
  *(void *)(v0 + 88) = qword_100468958;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_10025BEB4;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100417508;
  uint64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

_DWORD *sub_100257C48()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 56);
  int64_t v3 = *(void *)(v2 + 16);
  os_log_type_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v49 = v1;
    *(void *)&long long v54 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CFA20(0, v3, 0);
    sub_10006C51C(&qword_100455770);
    uint64_t v5 = 0;
    uint64_t v6 = v51;
    while (1)
    {
      uint64_t v7 = v2;
      char v8 = *(unsigned char *)(v2 + v5 + 32);
      strcpy((char *)v51, "exception type");
      HIBYTE(v51[1]) = -18;
      LOBYTE(v50[0]) = v8;
      uint64_t v52 = String.init<A>(describing:)();
      uint64_t v53 = v9;
      id v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
      char v11 = (void *)v51[0];
      uint64_t v12 = v51[1];
      uint64_t v13 = v52;
      uint64_t v14 = v53;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v15 = sub_1002C0AD0((uint64_t)v11, v12);
      if (v16) {
        break;
      }
      v10[(v15 >> 6) + 8] |= 1 << v15;
      uint64_t v17 = (void *)(v10[6] + 16 * v15);
      *uint64_t v17 = v11;
      v17[1] = v12;
      id v18 = (uint64_t *)(v10[7] + 16 * v15);
      *id v18 = v13;
      v18[1] = v14;
      uint64_t v19 = v10[2];
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_34;
      }
      void v10[2] = v21;
      sub_10006C51C(&qword_100455778);
      swift_arrayDestroy();
      swift_release();
      os_log_type_t v4 = (void *)v54;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA20(0, v4[2] + 1, 1);
        os_log_type_t v4 = (void *)v54;
      }
      uint64_t v2 = v7;
      unint64_t v23 = v4[2];
      unint64_t v22 = v4[3];
      if (v23 >= v22 >> 1)
      {
        sub_1002CFA20(v22 > 1, v23 + 1, 1);
        os_log_type_t v4 = (void *)v54;
      }
      ++v5;
      _OWORD v4[2] = v23 + 1;
      v4[v23 + 4] = v10;
      if (v3 == v5)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v49;
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
LABEL_11:
  uint64_t v6 = (void *)0xD00000000000001ELL;
  uint64_t v55 = (void *)sub_10006C51C((uint64_t *)&unk_100455780);
  *(void *)&long long v54 = v4;
  sub_1000761D0(&v54, v50);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, 0xD000000000000010, 0x80000001003B75A0, isUniquelyReferenced_nonNull_native);
  char v11 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v25 = *(void *)(v1 + 48);
  int64_t v26 = *(void *)(v25 + 16);
  char v27 = _swiftEmptyArrayStorage;
  if (v26)
  {
    *(void *)&long long v54 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CFA50(0, v26, 0);
    char v27 = (void *)v54;
    os_log_type_t v28 = (void **)(v25 + 40);
    do
    {
      char v29 = *((unsigned char *)v28 - 8);
      uint64_t v30 = *v28;
      sub_10006C51C(&qword_1004555D0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1003782A0;
      strcpy((char *)(inited + 32), "exception type");
      *(unsigned char *)(inited + 47) = -18;
      LOBYTE(v50[0]) = v29;
      os_log_type_t v32 = v30;
      *(void *)(inited + 48) = String.init<A>(describing:)();
      *(void *)(inited + 56) = v33;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 80) = 0xD000000000000018;
      *(void *)(inited + 88) = 0x80000001003B9010;
      char v34 = (*(uint64_t (**)(void))((swift_isaMask & *v32) + 0xD0))();
      *(void *)(inited + 120) = &type metadata for Bool;
      *(unsigned char *)(inited + 96) = v34 & 1;
      unint64_t v35 = sub_1001DB224(inited);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA50(0, v27[2] + 1, 1);
        char v27 = (void *)v54;
      }
      unint64_t v37 = v27[2];
      unint64_t v36 = v27[3];
      if (v37 >= v36 >> 1)
      {
        sub_1002CFA50(v36 > 1, v37 + 1, 1);
        char v27 = (void *)v54;
      }
      _OWORD v27[2] = v37 + 1;
      v27[v37 + 4] = v35;
      v28 += 3;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)0xD00000000000001ELL;
    char v11 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v55 = (void *)sub_10006C51C(&qword_1004555E0);
  *(void *)&long long v54 = v27;
  sub_1000761D0(&v54, v50);
  char v38 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, 0xD000000000000013, 0x80000001003B9030, v38);
  swift_bridgeObjectRelease();
  if (qword_100453868 != -1) {
LABEL_35:
  }
    swift_once();
  uint64_t v55 = &type metadata for Double;
  *(void *)&long long v54 = qword_100459B50;
  sub_1000761D0(&v54, v50);
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, (uint64_t)v6 - 5, 0x80000001003B9050, v39);
  swift_bridgeObjectRelease();
  if (qword_100453860 != -1) {
    swift_once();
  }
  uint64_t v55 = &type metadata for Int;
  *(void *)&long long v54 = qword_100459B48;
  sub_1000761D0(&v54, v50);
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, (uint64_t)v6 - 7, 0x80000001003B9070, v40);
  swift_bridgeObjectRelease();
  if (qword_100453838 != -1) {
    swift_once();
  }
  uint64_t v55 = &type metadata for Int;
  *(void *)&long long v54 = qword_100468958;
  sub_1000761D0(&v54, v50);
  char v41 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, 0xD00000000000001ELL, 0x80000001003B9090, v41);
  swift_bridgeObjectRelease();
  if (qword_100453848 != -1) {
    swift_once();
  }
  uint64_t v55 = &type metadata for Double;
  *(void *)&long long v54 = qword_100459B30;
  sub_1000761D0(&v54, v50);
  char v42 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, (uint64_t)v6 - 3, 0x80000001003B90B0, v42);
  swift_bridgeObjectRelease();
  if (qword_100453840 != -1) {
    swift_once();
  }
  uint64_t v55 = &type metadata for Int;
  *(void *)&long long v54 = qword_100468960;
  sub_1000761D0(&v54, v50);
  char v43 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, 0xD00000000000001ELL, 0x80000001003B90D0, v43);
  swift_bridgeObjectRelease();
  if (qword_100453850 != -1) {
    swift_once();
  }
  uint64_t v55 = &type metadata for Int;
  *(void *)&long long v54 = qword_100459B38;
  sub_1000761D0(&v54, v50);
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, (uint64_t)v6 + 1, 0x80000001003B90F0, v44);
  swift_bridgeObjectRelease();
  if (qword_100453858 != -1) {
    swift_once();
  }
  uint64_t v55 = &type metadata for Bool;
  LOBYTE(v54) = byte_100459B40;
  sub_1000761D0(&v54, v50);
  char v45 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v50, (uint64_t)v6 - 4, 0x80000001003B9110, v45);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)v11);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_1000190DC((uint64_t)"lyonPower.state", (uint64_t)isa);

  return v47;
}

uint64_t sub_100258558()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LyonPower()
{
  return self;
}

void sub_1002585D4()
{
  uint64_t v0 = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  os_log_type_t v4 = (uint64_t *)((char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = (unsigned char *)Strong;
    *(unsigned char *)(Strong + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_debounceActive) = 0;
    if ((*(unsigned char *)(Strong + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTriggerStatus) & 1) == 0)
    {
      if (qword_100453870 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10008E55C(v7, (uint64_t)qword_100459B58);
      char v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        id v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "If exception source status is false, debounce should have been cancelled; we should not be here",
          v10,
          2u);
        swift_slowDealloc();
      }
    }
    if (qword_100453870 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_100459B58);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting exception", v14, 2u);
      swift_slowDealloc();
    }

    if (qword_100453928 != -1) {
      swift_once();
    }
    uint64_t v15 = qword_100468A38;
    *os_log_type_t v4 = qword_100468A38;
    (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v0);
    id v16 = (id)v15;
    LOBYTE(v15) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v1 + 8))(v4, v0);
    if (v15)
    {
      uint64_t v17 = *(void *)&v6[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionTimer];
      if (!v17)
      {
        __break(1u);
        return;
      }
      sub_1000529D8(v17, *(double *)&v6[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionDuration]);
      v6[OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive] = 1;
      if (qword_100453830 == -1) {
        goto LABEL_17;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
LABEL_17:
    sub_1002570EC();
  }
}

void sub_10025893C()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    *(unsigned char *)(Strong + OBJC_IVAR____TtC10seserviced30LyonPowerExceptionHandlerClass_exceptionActive) = 0;
    if (qword_100453830 != -1) {
      swift_once();
    }
    sub_1002570EC();
  }
}

id sub_100258A04()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LyonPowerExceptionHandlerClass();
  return [super dealloc];
}

uint64_t type metadata accessor for LyonPowerExceptionHandlerClass()
{
  return self;
}

uint64_t destroy for LyonPowerConfigStates()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10seserviced21LyonPowerConfigStatesVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LyonPowerConfigStates(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

__n128 initializeWithTake for LyonPowerConfigStates(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_DWORD *)(a1 + 15) = *(_DWORD *)(a2 + 15);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LyonPowerConfigStates(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(unsigned char *)(a1 + 18) = *(unsigned char *)(a2 + 18);
  return a1;
}

uint64_t getEnumTagSinglePayload for LyonPowerConfigStates(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 19)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LyonPowerConfigStates(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 18) = 0;
    *(_WORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 19) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 19) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonPowerConfigStates()
{
  return &type metadata for LyonPowerConfigStates;
}

unsigned char *storeEnumTagSinglePayload for LyonException(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100258D48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LyonException()
{
  return &type metadata for LyonException;
}

unint64_t sub_100258D84()
{
  unint64_t result = qword_100459CB0;
  if (!qword_100459CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459CB0);
  }
  return result;
}

uint64_t sub_100258DD8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100258E10()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100459B58);
  sub_10008E55C(v0, (uint64_t)qword_100459B58);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

void sub_100258E88()
{
}

uint64_t sub_100258E90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100258EA0()
{
  return swift_release();
}

void sub_100258EA8()
{
}

char *sub_100258EB0(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459B10);
      id v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (char *)&_swiftEmptyArrayStorage;
      os_log_type_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10025AA34(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100258FC0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459CC0);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025AC14(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1002590E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459CD8);
      id v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 3);
      os_log_type_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = (char *)&_swiftEmptyArrayStorage;
      os_log_type_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 32]) {
          memmove(v13, a4 + 32, 8 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10025AB28(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1002591F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_10045B590);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025A940(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100259308(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459CD0);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025AF44(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100259418(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459D00);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025AE34(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100259540(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_100459D80, (uint64_t (*)(void))type metadata accessor for SECCredentialConfig, (uint64_t (*)(void))type metadata accessor for SECCredentialConfig);
}

char *sub_100259574(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100259A44(a1, a2, a3, a4, &qword_100459CF0, &qword_100459CF8);
}

char *sub_100259588(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10025A6B0(a1, a2, a3, a4, (uint64_t *)&unk_10045B5B0, &qword_100457240);
}

void *sub_10025959C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C((uint64_t *)&unk_10045B600);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025AD24(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1002596C8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_1004555D0);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025B22C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1002597F0(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_10025A418(a1, a2, a3, a4, &qword_1004568A8);
}

void *sub_1002597FC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459D60);
      id v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025B448(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_10025990C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100454A48);
      id v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      id v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025B634(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_100259A30(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100259A44(a1, a2, a3, a4, &qword_100459CE0, &qword_100459CE8);
}

char *sub_100259A44(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10006C51C(a5);
      os_log_type_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 17;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 4);
      id v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      os_log_type_t v13 = (char *)&_swiftEmptyArrayStorage;
      id v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[16 * v11 + 32]) {
          memmove(v16, a4 + 32, 16 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10025B72C(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_100259B60(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459D78);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025B53C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100259C8C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459D30);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      os_log_type_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      os_log_type_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025B92C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100259D9C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_10045B710);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[9 * v8 + 4]) {
          memmove(v12, a4 + 4, 72 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025B834(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_100259EC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C((uint64_t *)&unk_10045B700);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025BA20(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100259FEC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_100459D20, type metadata accessor for SESTLKShareData, type metadata accessor for SESTLKShareData);
}

uint64_t sub_10025A020(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10006C51C(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_10025BC28(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_10025A2A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459D10);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 31;
      }
      void v10[2] = v8;
      v10[3] = 2 * (v12 >> 6);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[8 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 6);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025B33C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10025A3B0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_1004548C0, (uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_10025A3E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_100459D68, (uint64_t (*)(void))&type metadata accessor for JPKIInternalTypes.CertificateInfo, (uint64_t (*)(void))&type metadata accessor for JPKIInternalTypes.CertificateInfo);
}

void *sub_10025A418(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  int64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v8 = a2;
    }
LABEL_8:
    int64_t v9 = a4[2];
    if (v8 <= v9) {
      int64_t v10 = a4[2];
    }
    else {
      int64_t v10 = v8;
    }
    if (v10)
    {
      sub_10006C51C(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = j__malloc_size(v11);
      _OWORD v11[2] = v9;
      v11[3] = 2 * v12 - 64;
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (void *)((char *)a4 + v9 + 32)) {
          memmove(v13, a4 + 4, v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025BD84(0, v9, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10025A510(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_100459D70, (uint64_t (*)(void))&type metadata accessor for CredentialType, (uint64_t (*)(void))&type metadata accessor for CredentialType);
}

uint64_t sub_10025A544(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_100459D48, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount, type metadata accessor for SECPresentmentReport.SECPresentmentAggregate.PresentmentCount);
}

void *sub_10025A578(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C(&qword_100459D38);
      int64_t v10 = (void *)swift_allocObject();
      size_t v11 = j__malloc_size(v10);
      void v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      size_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v10 = _swiftEmptyArrayStorage;
      size_t v12 = &_swiftEmptyArrayStorage[4];
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10025BB30(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_10025A69C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_10025A6B0(a1, a2, a3, a4, &qword_100459D50, &qword_100459D58);
}

char *sub_10025A6B0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_10006C51C(a5);
      uint64_t v13 = (char *)swift_allocObject();
      int64_t v14 = j__malloc_size(v13);
      uint64_t v15 = v14 - 32;
      if (v14 < 32) {
        uint64_t v15 = v14 - 25;
      }
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * (v15 >> 3);
      uint64_t v16 = v13 + 32;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v16 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[8 * v11 + 32]) {
          memmove(v16, a4 + 32, 8 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10025B124(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10025A7CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_100459D40, type metadata accessor for SECPresentmentReport, type metadata accessor for SECPresentmentReport);
}

uint64_t sub_10025A800(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_10025A020(a1, a2, a3, a4, &qword_10045B750, (uint64_t (*)(void))type metadata accessor for PresentmentInfo, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
}

void *sub_10025A834(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_10006C51C((uint64_t *)&unk_10045B6B0);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      int64_t v12 = v11 - 32;
      if (v11 < 32) {
        int64_t v12 = v11 - 31;
      }
      void v10[2] = v8;
      v10[3] = v12 & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= (void *)((char *)a4 + 2 * v8 + 32)) {
          memmove(v13, a4 + 4, 2 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10025B038(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_10025A940(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AA34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10025AB28(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AC14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10006C51C(&qword_100459CC8);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AD24(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      sub_10006C51C(&qword_100454148);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AE34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      sub_10006C51C(&qword_100459D08);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025AF44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10025B038(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 2 * a1 + 32);
    size_t v6 = 2 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B124(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      sub_10006C51C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B22C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_10006C51C(&qword_10045B740);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B33C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      sub_10006C51C(&qword_100459D18);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B448(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B53C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B634(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B72C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v5;
    if (v6 >= v7 || v6 + 16 * v5 <= a3)
    {
      sub_10006C51C(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B834(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 72 * a1 + 32;
    unint64_t v6 = a3 + 72 * v4;
    if (v5 >= v6 || v5 + 72 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025B92C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025BA20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_10006C51C(&qword_100459D28);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025BB30(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025BC28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_10025BD84(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10025BE6C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10025BEA4()
{
  return sub_1002577E8();
}

uint64_t sub_10025BEAC()
{
  return sub_100257968();
}

uint64_t sub_10025BEB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10025BF20(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = a1;
  sub_1002CFD54(0, v3, 0);
  uint64_t result = (void *)sub_10019CFB8(v4);
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = 0;
  uint64_t v9 = v4 + 64;
  uint64_t v29 = v4 + 80;
  int64_t v30 = v3;
  int v31 = v6;
  uint64_t v32 = v4 + 64;
  uint64_t v33 = v4;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(unsigned char *)(v4 + 32))
  {
    unint64_t v12 = (unint64_t)v7 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v4 + 36) != v6) {
      goto LABEL_24;
    }
    uint64_t v34 = v8;
    uint64_t v13 = *(void *)(v4 + 56);
    int64_t v14 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v7);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(v13 + 8 * v7);
    sub_10006D0EC(*v14, v16);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v15, v16);
    swift_bridgeObjectRetain();
    sub_10006D144(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t v35 = v2;
    sub_10023CDF4(v15, v16);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_10006D144(v15, v16);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v22 = _swiftEmptyArrayStorage[2];
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1) {
      uint64_t result = (void *)sub_1002CFD54(v21 > 1, v22 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v22 + 1;
    unint64_t v23 = &_swiftEmptyArrayStorage[3 * v22];
    _DWORD v23[4] = v18;
    v23[5] = v20;
    v23[6] = v17;
    uint64_t v4 = v33;
    int64_t v10 = 1 << *(unsigned char *)(v33 + 32);
    if (v7 >= v10) {
      goto LABEL_25;
    }
    uint64_t v9 = v32;
    uint64_t v24 = *(void *)(v32 + 8 * v12);
    if ((v24 & (1 << v7)) == 0) {
      goto LABEL_26;
    }
    int v6 = v31;
    if (*(_DWORD *)(v33 + 36) != v31) {
      goto LABEL_27;
    }
    unint64_t v25 = v24 & (-2 << (v7 & 0x3F));
    if (v25)
    {
      int64_t v10 = __clz(__rbit64(v25)) | v7 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v2 = v35;
      int64_t v11 = v30;
    }
    else
    {
      unint64_t v26 = v12 + 1;
      unint64_t v27 = (unint64_t)(v10 + 63) >> 6;
      uint64_t v2 = v35;
      int64_t v11 = v30;
      if (v12 + 1 < v27)
      {
        unint64_t v28 = *(void *)(v32 + 8 * v26);
        if (v28)
        {
LABEL_20:
          int64_t v10 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v12)
          {
            unint64_t v28 = *(void *)(v29 + 8 * v12++);
            if (v28)
            {
              unint64_t v26 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v8 = v34 + 1;
    uint64_t v7 = v10;
    if (v34 + 1 == v11) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void *sub_10025C204(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = a1;
  sub_1002CFD24(0, v3, 0);
  uint64_t result = (void *)sub_10019CFB8(v4);
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = 0;
  uint64_t v9 = v4 + 64;
  uint64_t v29 = v4 + 80;
  int64_t v30 = v3;
  int v31 = v6;
  uint64_t v32 = v4 + 64;
  uint64_t v33 = v4;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(unsigned char *)(v4 + 32))
  {
    unint64_t v12 = (unint64_t)v7 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v4 + 36) != v6) {
      goto LABEL_24;
    }
    uint64_t v34 = v8;
    uint64_t v13 = *(void *)(v4 + 56);
    int64_t v14 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v7);
    uint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    uint64_t v17 = *(void *)(v13 + 8 * v7);
    sub_10006D0EC(*v14, v16);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v15, v16);
    swift_bridgeObjectRetain();
    sub_10006D144(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t v35 = v2;
    sub_10023CDF4(v15, v16);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_10006D144(v15, v16);
    uint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v22 = _swiftEmptyArrayStorage[2];
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1) {
      uint64_t result = (void *)sub_1002CFD24(v21 > 1, v22 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v22 + 1;
    unint64_t v23 = &_swiftEmptyArrayStorage[3 * v22];
    _DWORD v23[4] = v18;
    v23[5] = v20;
    v23[6] = v17;
    uint64_t v4 = v33;
    int64_t v10 = 1 << *(unsigned char *)(v33 + 32);
    if (v7 >= v10) {
      goto LABEL_25;
    }
    uint64_t v9 = v32;
    uint64_t v24 = *(void *)(v32 + 8 * v12);
    if ((v24 & (1 << v7)) == 0) {
      goto LABEL_26;
    }
    int v6 = v31;
    if (*(_DWORD *)(v33 + 36) != v31) {
      goto LABEL_27;
    }
    unint64_t v25 = v24 & (-2 << (v7 & 0x3F));
    if (v25)
    {
      int64_t v10 = __clz(__rbit64(v25)) | v7 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v2 = v35;
      int64_t v11 = v30;
    }
    else
    {
      unint64_t v26 = v12 + 1;
      unint64_t v27 = (unint64_t)(v10 + 63) >> 6;
      uint64_t v2 = v35;
      int64_t v11 = v30;
      if (v12 + 1 < v27)
      {
        unint64_t v28 = *(void *)(v32 + 8 * v26);
        if (v28)
        {
LABEL_20:
          int64_t v10 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v12)
          {
            unint64_t v28 = *(void *)(v29 + 8 * v12++);
            if (v28)
            {
              unint64_t v26 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v8 = v34 + 1;
    uint64_t v7 = v10;
    if (v34 + 1 == v11) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void (*sub_10025C4E8(void *a1, uint64_t a2, unint64_t a3))(void *a1)
{
  int v6 = malloc(0x38uLL);
  *a1 = v6;
  v6[4] = a2;
  v6[5] = a3;
  sub_10006D0EC(a2, a3);
  v6[6] = sub_10025F4C4(v6, a2, a3);
  return sub_10025C56C;
}

void sub_10025C56C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  unint64_t v2 = *(void *)(*a1 + 40);
  uint64_t v3 = *(void *)(*a1 + 32);
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  sub_10006D144(v3, v2);

  free(v1);
}

uint64_t sub_10025C5D0(id *a1)
{
  id v1 = *a1;
  if ([*a1 endPointType] != (id)1) {
    return 0;
  }
  uint64_t result = (uint64_t)[v1 supportedRKEFunctions];
  if (result)
  {

    uint64_t result = (uint64_t)[v1 readerIdentifier];
    if (result)
    {
      uint64_t v3 = (void *)result;
      uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v6 = v5;

      sub_10006D144(v4, v6);
      return 1;
    }
  }
  return result;
}

void sub_10025C678(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (a1)
    {
      unint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      if (v11 >> 60 == 15)
      {
        swift_retain();
        unint64_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v12, v13))
        {
          int64_t v14 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int64_t v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing peer key identifier", v14, 2u);
          swift_slowDealloc();
        }
        swift_release();
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        swift_beginAccess();
        sub_1000758F4(v19, v11);
        sub_1000758F4(v19, v11);
        swift_retain();
        sub_100180340(v19, v11);
        swift_endAccess();
        sub_100075868(v19, v11);
        swift_bridgeObjectRelease();
        swift_beginAccess();
        sub_10006D0EC(v19, v11);
        sub_100180248(v19, v11);
        swift_endAccess();
        sub_100075868(v19, v11);
        swift_bridgeObjectRelease();
        sub_100075868(v19, v11);
        swift_release();
      }
    }
    else
    {
      unint64_t v15 = sub_1001DBABC((uint64_t)_swiftEmptyArrayStorage);
      unint64_t v16 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
      swift_beginAccess();
      *unint64_t v16 = v15;
      swift_bridgeObjectRelease();
      unint64_t v17 = sub_1001DBAC8((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v18 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
      swift_beginAccess();
      *uint64_t v18 = v17;
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10025C9C8()
{
  type metadata accessor for AlishaVehicle();
  swift_allocObject();
  uint64_t result = sub_10025CA08();
  qword_100468968 = result;
  return result;
}

uint64_t sub_10025CA08()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData) = &_swiftEmptyDictionarySingleton;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_10025F0F4;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100417530;
  uint64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

_DWORD *sub_10025CB60()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_10025BF20(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = &_swiftEmptyDictionarySingleton;
  if (v1[2])
  {
    sub_10006C51C(&qword_10045B660);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }
  *(void *)&long long v16 = v3;
  uint64_t v4 = (void *)swift_bridgeObjectRetain();
  sub_10025F110(v4, 1, &v16, (void (*)(void))sub_1002CE940, (void (*)(void))sub_1002C7760);
  swift_bridgeObjectRelease();
  uint64_t v5 = v16;
  uint64_t v17 = sub_10006C51C(&qword_100459E60);
  *(void *)&long long v16 = v5;
  sub_1000761D0(&v16, v15);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v15, 0x737574617473, 0xE600000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10025C204(v7);
  swift_bridgeObjectRelease();
  if (v8[2])
  {
    sub_10006C51C(&qword_100459E68);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  *(void *)&long long v16 = v2;
  uint64_t v9 = (void *)swift_bridgeObjectRetain();
  sub_10025F110(v9, 1, &v16, (void (*)(void))sub_1002CE934, (void (*)(void))sub_1002C7754);
  swift_bridgeObjectRelease();
  uint64_t v10 = v16;
  uint64_t v17 = sub_10006C51C(&qword_100459E70);
  *(void *)&long long v16 = v10;
  sub_1000761D0(&v16, v15);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v15, 0x74656972706F7270, 0xEF61746144797261, v11);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  os_log_type_t v13 = sub_1000190DC((uint64_t)"alishavehicle.state", (uint64_t)isa);

  return v13;
}

void sub_10025CE58(char a1, unsigned __int16 a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (uint64_t *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  os_log_type_t v13 = (void *)qword_100468A38;
  *unint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = v13;
  uint64_t v15 = _dispatchPreconditionTest(_:)();
  long long v16 = *(void (**)(void *, uint64_t))(v9 + 8);
  LOBYTE(v9) = v9 + 8;
  v16(v12, v8);
  if ((v15 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 33554944;
    unsigned __int16 v42 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 6) = 256;
    LOBYTE(v42) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Vehicle function %hu status %hhu", (uint8_t *)v9, 9u);
    swift_slowDealloc();
  }

  uint64_t v19 = (void **)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  a3 = *(void *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (a3 >> 60 != 15)
  {
    unint64_t v12 = *v19;
    uint64_t v4 = (uint64_t *)((char *)v4 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status);
    swift_beginAccess();
    uint64_t v23 = *(void *)(*v4 + 16);
    sub_10006D0EC((uint64_t)v12, a3);
    if (v23)
    {
      sub_10006D0EC((uint64_t)v12, a3);
      sub_1002C0BAC((uint64_t)v12, a3);
      if (v24)
      {
        swift_endAccess();
        sub_100075868((uint64_t)v12, a3);
        swift_beginAccess();
        sub_10006D0EC((uint64_t)v12, a3);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v41 = *v4;
        uint64_t v26 = v41;
        *uint64_t v4 = 0x8000000000000000;
        sub_10006D0EC((uint64_t)v12, a3);
        uint64_t v15 = sub_1002C0BAC((uint64_t)v12, a3);
        uint64_t v28 = *(void *)(v26 + 16);
        BOOL v29 = (v27 & 1) == 0;
        uint64_t v30 = v28 + v29;
        if (!__OFADD__(v28, v29))
        {
          LOBYTE(v9) = v27;
          if (*(void *)(v26 + 24) < v30)
          {
            sub_1002C64BC(v30, isUniquelyReferenced_nonNull_native);
            uint64_t v31 = sub_1002C0BAC((uint64_t)v12, a3);
            if ((v9 & 1) != (v32 & 1))
            {
LABEL_27:
              KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return;
            }
            uint64_t v15 = v31;
            if ((v9 & 1) == 0)
            {
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
            goto LABEL_21;
          }
          if (isUniquelyReferenced_nonNull_native)
          {
            if ((v27 & 1) == 0) {
              goto LABEL_26;
            }
            goto LABEL_21;
          }
LABEL_25:
          sub_1002CDDD4();
          if ((v9 & 1) == 0) {
            goto LABEL_26;
          }
LABEL_21:
          uint64_t v36 = *(void *)(*(void *)(v41 + 56) + 8 * v15);
          char v37 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v39 = v36;
          sub_1002CB1DC(a1, a2, v37);
          uint64_t v40 = v39;
          swift_bridgeObjectRelease();
          sub_10025F7E8(&v40, 1, &v41, v15, (uint64_t)v12, a3, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1002CBB60, (void (*)(uint64_t, void))sub_100181820);
          swift_bridgeObjectRelease();
          sub_100075868((uint64_t)v12, a3);
          *uint64_t v4 = v41;
          swift_endAccess();
          sub_100075868((uint64_t)v12, a3);
          goto LABEL_22;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      sub_100075868((uint64_t)v12, a3);
    }
    swift_endAccess();
    sub_10006C51C(&qword_100459E88);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378290;
    *(_WORD *)(inited + 32) = a2;
    *(unsigned char *)(inited + 34) = a1;
    unint64_t v34 = sub_1001E6E38(inited);
    swift_setDeallocating();
    swift_beginAccess();
    sub_1000758F4((uint64_t)v12, a3);
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    sub_1002CABA4(v34, (uint64_t)v12, a3, v35);
    *uint64_t v4 = v41;
    swift_bridgeObjectRelease();
    sub_100075868((uint64_t)v12, a3);
    swift_endAccess();
LABEL_22:
    sub_100075868((uint64_t)v12, a3);
    return;
  }
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing peer key identifier", v22, 2u);
    swift_slowDealloc();
  }
}

void sub_10025D3D0(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v6 = v4;
  int v64 = a3;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (unint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_100468A38;
  *(void *)unint64_t v14 = qword_100468A38;
  (*(void (**)(unint64_t, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = v15;
  uint64_t v17 = _dispatchPreconditionTest(_:)();
  uint64_t v19 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  uint64_t v18 = v11 + 8;
  v19(v14, v10);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_46;
  }
  char v5 = (_BYTE)v6 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_logger;
  sub_1000758F4(a1, a2);
  sub_1000758F4(a1, a2);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v62 = a4;
    uint64_t v22 = swift_slowAlloc();
    v67[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 33554946;
    LOWORD(v68[0]) = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 6) = 2080;
    uint64_t v63 = v6;
    if (a2 >> 60 == 15)
    {
      unint64_t v23 = 0xE300000000000000;
      uint64_t v24 = 7104878;
    }
    else
    {
      v68[0] = (uint64_t)sub_10023CDF4(a1, a2);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v24 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v23 = v25;
      swift_bridgeObjectRelease();
    }
    v68[0] = sub_100290514(v24, v23, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(a1, a2);
    sub_100075868(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Vehicle function %hu proprietary data %s", (uint8_t *)v22, 0x10u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    a4 = v62;
    uint64_t v6 = v63;
  }
  else
  {

    sub_100075868(a1, a2);
    sub_100075868(a1, a2);
  }
  unint64_t v14 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v14 >> 60 != 15)
  {
    uint64_t v18 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    uint64_t v6 = (uint64_t *)((char *)v6 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
    if (a2 >> 60 == 15)
    {
      swift_beginAccess();
      uint64_t v29 = *v6;
      uint64_t v30 = *(void *)(*v6 + 16);
      sub_10006D0EC(v18, v14);
      if (v30)
      {
        sub_10006D0EC(v18, v14);
        uint64_t v31 = sub_1002C0BAC(v18, v14);
        if (v32)
        {
          uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 8 * v31);
          swift_bridgeObjectRetain();
          sub_100075868(v18, v14);
          if (*(void *)(v33 + 16))
          {
            sub_1002C0C6C(v64);
            if (v34)
            {
              swift_endAccess();
              swift_bridgeObjectRelease();
              swift_beginAccess();
              sub_10006D0EC(v18, v14);
              uint64_t v36 = sub_10025C4E8(v67, v18, v14);
              if (*v35)
              {
                char v37 = v35;
                unint64_t v38 = sub_1002C0C6C(v64);
                if (v39)
                {
                  unint64_t v40 = v38;
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  uint64_t v66 = *v37;
                  *char v37 = 0x8000000000000000;
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                    sub_1002CEC8C();
                  }
                  uint64_t v42 = v66;
                  char v43 = (uint64_t *)(*(void *)(v66 + 56) + 16 * v40);
                  uint64_t v44 = *v43;
                  unint64_t v45 = v43[1];
                  sub_100181E14(v40, v66);
                  *char v37 = v42;
                  swift_bridgeObjectRelease();
                  sub_10006D144(v44, v45);
                }
              }
              ((void (*)(uint64_t *, void))v36)(v67, 0);
              swift_endAccess();
              goto LABEL_42;
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          sub_100075868(v18, v14);
        }
      }
      swift_endAccess();
LABEL_43:
      uint64_t v58 = v18;
      unint64_t v59 = v14;
      goto LABEL_44;
    }
    swift_beginAccess();
    if (!*(void *)(*v6 + 16)) {
      goto LABEL_32;
    }
    sub_1000758F4(v18, v14);
    sub_1000758F4(a1, a2);
    sub_1000758F4(v18, v14);
    sub_1002C0BAC(v18, v14);
    if ((v46 & 1) == 0)
    {
      sub_100075868(v18, v14);
      goto LABEL_35;
    }
    swift_endAccess();
    sub_100075868(v18, v14);
    swift_beginAccess();
    sub_1000758F4(a1, a2);
    sub_1000758F4(v18, v14);
    char v47 = swift_isUniquelyReferenced_nonNull_native();
    v68[0] = *v6;
    uint64_t v48 = v68[0];
    *uint64_t v6 = 0x8000000000000000;
    sub_10006D0EC(v18, v14);
    uint64_t v17 = sub_1002C0BAC(v18, v14);
    uint64_t v50 = *(void *)(v48 + 16);
    BOOL v51 = (v49 & 1) == 0;
    uint64_t v52 = v50 + v51;
    if (!__OFADD__(v50, v51))
    {
      char v5 = v49;
      if (*(void *)(v48 + 24) < v52)
      {
        sub_1002C64B0(v52, v47);
        uint64_t v53 = sub_1002C0BAC(v18, v14);
        if ((v5 & 1) != (v54 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        uint64_t v17 = v53;
        if ((v5 & 1) == 0) {
          goto LABEL_31;
        }
LABEL_40:
        uint64_t v60 = *(void *)(*(void *)(v68[0] + 56) + 8 * v17);
        char v61 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v65 = v60;
        sub_1002CB308(a1, a2, v64, v61);
        uint64_t v66 = v65;
        swift_bridgeObjectRelease();
        sub_10025F7E8(&v66, 1, v68, v17, v18, v14, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1002CBB60, (void (*)(uint64_t, void))sub_100181820);
        swift_bridgeObjectRelease();
        sub_100075868(v18, v14);
        *uint64_t v6 = v68[0];
        swift_endAccess();
        sub_100075868(a1, a2);
LABEL_42:
        sub_100075868(v18, v14);
        goto LABEL_43;
      }
      if (v47)
      {
        if (v49) {
          goto LABEL_40;
        }
LABEL_31:
        __break(1u);
LABEL_32:
        sub_1000758F4(a1, a2);
        sub_1000758F4(v18, v14);
LABEL_35:
        swift_endAccess();
        sub_10006C51C(&qword_100459E78);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100378290;
        *(_WORD *)(inited + 32) = v64;
        *(void *)(inited + 40) = a1;
        *(void *)(inited + 48) = a2;
        unint64_t v56 = sub_1001E6F10(inited);
        swift_setDeallocating();
        sub_1000758F4(a1, a2);
        sub_1000758F4(v18, v14);
        sub_10006C51C(&qword_100459E80);
        swift_arrayDestroy();
        swift_beginAccess();
        char v57 = swift_isUniquelyReferenced_nonNull_native();
        v68[0] = *v6;
        *uint64_t v6 = 0x8000000000000000;
        sub_1002CA9BC(v56, v18, v14, v57);
        *uint64_t v6 = v68[0];
        swift_bridgeObjectRelease();
        sub_100075868(v18, v14);
        swift_endAccess();
        sub_100075868(v18, v14);
        uint64_t v58 = a1;
        unint64_t v59 = a2;
LABEL_44:
        sub_100075868(v58, v59);
        return;
      }
LABEL_47:
      sub_1002CDDC8();
      if (v5) {
        goto LABEL_40;
      }
      goto LABEL_31;
    }
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Missing peer key identifier", v28, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10025DCAC(uint64_t a1)
{
  return sub_10025DCEC(a1, &OBJC_IVAR____TtC10seserviced13AlishaVehicle_status, (uint64_t (*)(void *))sub_1001E6E38);
}

uint64_t sub_10025DCCC(uint64_t a1)
{
  return sub_10025DCEC(a1, &OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData, (uint64_t (*)(void *))sub_1001E6F10);
}

uint64_t sub_10025DCEC(uint64_t a1, void *a2, uint64_t (*a3)(void *))
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *uint64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    uint64_t v15 = (uint64_t *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v16 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v16 >> 60 == 15)
    {
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing peer key identifier", v19, 2u);
        swift_slowDealloc();
      }

      return a3(_swiftEmptyArrayStorage);
    }
    uint64_t v21 = *v15;
    uint64_t v22 = (uint64_t *)(v3 + *a2);
    swift_beginAccess();
    uint64_t v23 = *v22;
    uint64_t v24 = *(void *)(v23 + 16);
    sub_10006D0EC(v21, v16);
    if (v24)
    {
      sub_10006D0EC(v21, v16);
      uint64_t v25 = sub_1002C0BAC(v21, v16);
      if (v26)
      {
        uint64_t v20 = *(void *)(*(void *)(v23 + 56) + 8 * v25);
        swift_endAccess();
        swift_bridgeObjectRetain();
        sub_100075868(v21, v16);
LABEL_13:
        sub_100075868(v21, v16);
        return v20;
      }
      sub_100075868(v21, v16);
    }
    swift_endAccess();
    uint64_t v20 = a3(_swiftEmptyArrayStorage);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

unint64_t sub_10025DFA4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    if (qword_1004536D8 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v11 = swift_once();
LABEL_5:
  uint64_t v13 = __chkstk_darwin(v11, v12);
  *(&v21 - 4) = (uint64_t)sub_10025C5D0;
  *(&v21 - 3) = 0;
  *(&v21 - 2) = v14;
  __chkstk_darwin(v13, v15);
  *(&v21 - 2) = (uint64_t)sub_1000A2ABC;
  *(&v21 - 1) = v16;
  os_log_type_t v18 = v17 + 4;
  os_unfair_lock_lock(v17 + 4);
  sub_100079ACC(&v22);
  os_unfair_lock_unlock(v18);
  uint64_t v19 = v22;
  if ((v22 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_7:
      uint64_t v22 = (uint64_t)&_swiftEmptyDictionarySingleton;
      swift_retain();
      sub_1002602A8(v19, v2, a1 & 1, &v22);
      swift_bridgeObjectRelease();
      swift_release();
      return v22;
    }
  }
  else if (*(void *)(v22 + 16))
  {
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  return sub_1001DBD98((uint64_t)_swiftEmptyArrayStorage);
}

void sub_10025E238(void **a1, uint64_t a2, int a3, uint64_t *a4)
{
  os_log_type_t v94 = a4;
  LODWORD(v96) = a3;
  uint64_t v97 = a2;
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  unint64_t v95 = *(void **)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (uint64_t *)((char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v10 = *a1;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v10;
  uint64_t v12 = qword_100453910;
  id v13 = v10;
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v14 = off_10045AEC8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1002605F8;
  *(void *)(v15 + 24) = v11;
  uint64_t v17 = __chkstk_darwin(v15, v16);
  *(&v89 - 4) = (uint64_t)sub_1000A97C0;
  *(&v89 - 3) = v17;
  *(&v89 - 2) = (uint64_t)v14;
  __chkstk_darwin(v17, v18);
  *(&v89 - 2) = (uint64_t)sub_100079AAC;
  *(&v89 - 1) = v19;
  uint64_t v21 = v20 + 4;
  swift_retain();
  os_unfair_lock_lock(v21);
  sub_100079ACC(v101);
  uint64_t v98 = v4;
  uint64_t v22 = v21;
  if (v4) {
    goto LABEL_40;
  }
  os_unfair_lock_unlock(v21);
  uint64_t v23 = v101[0];
  swift_release();
  swift_release();
  uint64_t v24 = sub_1000BB13C(v23);
  swift_bridgeObjectRelease();
  uint64_t v25 = v13;
  if (v24)
  {
    type metadata accessor for AlishaPeer();
    uint64_t v26 = swift_dynamicCastClass();
    if (!v26
      || (uint64_t v27 = v26,
          uint64_t v28 = (uint64_t *)(v26 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier),
          unint64_t v29 = *(void *)(v26 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8),
          v29 >> 60 == 15))
    {
      swift_release();
      goto LABEL_8;
    }
    uint64_t v43 = *v28;
    uint64_t v93 = *v28;
    char v44 = (char)v96;
    if ((v96 & 1) != 0
      && *(unsigned char *)(*(void *)(v27 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 80) != 1)
    {
      unint64_t v102 = _swiftEmptyArrayStorage;
      sub_10006D0EC(v43, v29);
    }
    else
    {
      sub_10006D0EC(v43, v29);
      uint64_t v22 = (os_unfair_lock_s *)[v25 supportedRKEFunctions];
      if (!v22)
      {
LABEL_39:
        __break(1u);
LABEL_40:
        os_unfair_lock_unlock(v22);
        __break(1u);
        return;
      }
      unint64_t v45 = v22;
      sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
      char v46 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v102 = v46;
      if ((v44 & 1) == 0)
      {
LABEL_20:
        uint64_t v50 = v93;
        if (qword_100453948 != -1) {
          swift_once();
        }
        if (qword_100453928 != -1) {
          swift_once();
        }
        uint64_t v51 = qword_100468A38;
        *uint64_t v9 = qword_100468A38;
        uint64_t v52 = v95;
        ((void (*)(void *, void, uint64_t))v95[13])(v9, enum case for DispatchPredicate.onQueue(_:), v6);
        id v53 = (id)v51;
        LOBYTE(v51) = _dispatchPreconditionTest(_:)();
        uint64_t v22 = (os_unfair_lock_s *)((uint64_t (*)(void *, uint64_t))v52[1])(v9, v6);
        if (v51)
        {
          swift_beginAccess();
          sub_1000758F4(v50, v29);
          unint64_t v54 = swift_bridgeObjectRetain();
          uint64_t v55 = v98;
          unint64_t v95 = sub_10025FA74(v54, v50, v29, (unint64_t *)&v102);
          sub_100075868(v50, v29);
          swift_bridgeObjectRelease();
          uint64_t v100 = (uint64_t)sub_10023CDF4(v50, v29);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          unint64_t v56 = sub_1000756D0();
          uint64_t v98 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v96 = v57;
          swift_bridgeObjectRelease();
          uint64_t v22 = (os_unfair_lock_s *)[v25 readerIdentifier];
          if (v22)
          {
            uint64_t v58 = v22;
            uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v61 = v60;

            uint64_t v62 = sub_10023CDF4(v59, v61);
            uint64_t v91 = v55;
            unint64_t v92 = v56;
            uint64_t v100 = (uint64_t)v62;
            uint64_t v63 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v89 = v64;
            uint64_t v90 = v63;
            swift_bridgeObjectRelease();
            sub_10006D144(v59, v61);
            uint64_t v65 = (uint64_t)v102;
            swift_bridgeObjectRetain();
            uint64_t v66 = sub_1002D9E9C((uint64_t)v95);
            swift_bridgeObjectRelease();
            uint64_t v67 = v97 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_status;
            swift_beginAccess();
            uint64_t v68 = *(void *)v67;
            uint64_t v69 = v93;
            if (*(void *)(*(void *)v67 + 16))
            {
              sub_10006D0EC(v93, v29);
              uint64_t v70 = sub_1002C0BAC(v69, v29);
              if (v71)
              {
                uint64_t v72 = *(void *)(*(void *)(v68 + 56) + 8 * v70);
                swift_endAccess();
                swift_bridgeObjectRetain();
                sub_100075868(v69, v29);
                uint64_t v100 = v72;
                sub_10006C51C(&qword_100459EA0);
                sub_10006C51C(&qword_100459EA8);
                swift_dynamicCast();
                uint64_t v73 = v99;
                goto LABEL_31;
              }
              sub_100075868(v69, v29);
            }
            swift_endAccess();
            uint64_t v73 = 0;
LABEL_31:
            uint64_t v74 = (uint64_t *)(v97 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_proprietaryData);
            swift_beginAccess();
            uint64_t v75 = *v74;
            if (*(void *)(v75 + 16))
            {
              sub_10006D0EC(v69, v29);
              uint64_t v76 = sub_1002C0BAC(v69, v29);
              if (v77)
              {
                uint64_t v78 = *(void *)(*(void *)(v75 + 56) + 8 * v76);
                swift_endAccess();
                swift_bridgeObjectRetain();
                sub_100075868(v69, v29);
                uint64_t v100 = v78;
                sub_10006C51C(&qword_100459E90);
                sub_10006C51C(&qword_100459E98);
                swift_dynamicCast();
                uint64_t v79 = v99;
LABEL_36:
                id v80 = objc_allocWithZone((Class)SESVehicleReport);
                id v81 = sub_10025EF40(v98, (uint64_t)v96, v90, v89, v65, (uint64_t)v66, v73, v79);
                uint64_t v100 = (uint64_t)sub_10023CDF4(v69, v29);
                uint64_t v82 = v69;
                uint64_t v83 = BidirectionalCollection<>.joined(separator:)();
                uint64_t v85 = v84;
                swift_bridgeObjectRelease();
                id v86 = v81;
                uint64_t v87 = v94;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v100 = *v87;
                *uint64_t v87 = 0x8000000000000000;
                sub_1002CB448((uint64_t)v86, v83, v85, isUniquelyReferenced_nonNull_native);
                *uint64_t v87 = v100;
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_100075868(v82, v29);

                swift_bridgeObjectRelease();
                return;
              }
              sub_100075868(v69, v29);
            }
            swift_endAccess();
            uint64_t v79 = 0;
            goto LABEL_36;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_39;
      }
    }
    if (*(void *)(*(void *)(*(void *)(v27 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 72) + 16))
    {
      swift_retain();
      unint64_t v47 = swift_bridgeObjectRetain();
      uint64_t v48 = v98;
      char v49 = sub_10025F8B0(v47, v27);
      uint64_t v98 = v48;
      swift_bridgeObjectRelease_n();
      swift_release();
      unint64_t v102 = v49;
    }
    goto LABEL_20;
  }
LABEL_8:
  id v30 = v13;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    v101[0] = v97;
    *(_DWORD *)uint64_t v33 = 136315138;
    unint64_t v95 = v33 + 4;
    uint64_t v96 = v33;
    id v34 = [v30 publicKeyIdentifier];
    uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v37 = v36;

    uint64_t v38 = v98;
    char v39 = sub_10023CDF4(v35, v37);
    uint64_t v98 = v38;
    uint64_t v100 = (uint64_t)v39;
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v40 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    sub_10006D144(v35, v37);
    uint64_t v100 = sub_100290514(v40, v42, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to retrieve AlishaPeer for %s", v96, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

BOOL sub_10025EC64(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
  {
    uint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    sub_1000758F4(v4, v5);
    id v6 = [a2 publicKeyIdentifier];
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    if (v5 >> 60 == 15)
    {
      sub_100075868(v4, v5);
      sub_100075868(v7, v9);
    }
    else
    {
      sub_1000758F4(v4, v5);
      char v10 = sub_100088AE4(v4, v5, v7, v9);
      sub_10006D144(v7, v9);
      sub_100075868(v4, v5);
      sub_100075868(v4, v5);
      if (v10) {
        return *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_pairingState) == 2;
      }
    }
  }
  return 0;
}

uint64_t sub_10025ED8C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced13AlishaVehicle_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10025EE4C()
{
  return type metadata accessor for AlishaVehicle();
}

uint64_t type metadata accessor for AlishaVehicle()
{
  uint64_t result = qword_100459DC8;
  if (!qword_100459DC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10025EEA0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

id sub_10025EF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a6)
  {
    v15.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a7) {
      goto LABEL_3;
    }
LABEL_6:
    v16.super.Class isa = 0;
    if (a8) {
      goto LABEL_4;
    }
LABEL_7:
    v17.super.Class isa = 0;
    goto LABEL_8;
  }
  v15.super.Class isa = 0;
  if (!a7) {
    goto LABEL_6;
  }
LABEL_3:
  sub_10008C060(&qword_100459EB0, (unint64_t *)&qword_10045BEC0);
  v16.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (!a8) {
    goto LABEL_7;
  }
LABEL_4:
  sub_10008C060(&qword_100459EB0, (unint64_t *)&qword_10045BEC0);
  v17.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_8:
  id v18 = [v8 initWithKeyIdentifier:v12 readerIdentifier:v13 supportedFunctions:v14.super.isa functionsInProgress:v15.super.isa status:v16.super.isa proprietaryData:v17.super.isa];

  return v18;
}

uint64_t sub_10025F0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10025F108()
{
  return swift_release();
}

uint64_t sub_10025F110(void *a1, char a2, void *a3, void (*a4)(void), void (*a5)(void))
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v45 = a1[2];
  uint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v10 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v13 = sub_1002C0AD0(v9, v8);
  uint64_t v14 = v11[2];
  BOOL v15 = (v12 & 1) == 0;
  if (__OFADD__(v14, v15)) {
    goto LABEL_23;
  }
  char v16 = v12;
  if (v11[3] >= v14 + v15)
  {
    if (a2)
    {
      if (v12) {
        goto LABEL_10;
      }
    }
    else
    {
      a4();
      if (v16) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    uint64_t v21 = (uint64_t *)(v20[6] + 16 * v13);
    *uint64_t v21 = v9;
    v21[1] = v8;
    *(void *)(v20[7] + 8 * v13) = v10;
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v20[2] = v24;
    uint64_t v25 = v45 - 1;
    if (v45 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 9; ; i += 3)
    {
      uint64_t v28 = *(i - 2);
      uint64_t v27 = *(i - 1);
      uint64_t v29 = *i;
      id v30 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v31 = sub_1002C0AD0(v28, v27);
      uint64_t v33 = v30[2];
      BOOL v34 = (v32 & 1) == 0;
      BOOL v23 = __OFADD__(v33, v34);
      uint64_t v35 = v33 + v34;
      if (v23) {
        break;
      }
      char v36 = v32;
      if (v30[3] < v35)
      {
        ((void (*)(uint64_t, uint64_t))a5)(v35, 1);
        unint64_t v31 = sub_1002C0AD0(v28, v27);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }
      if (v36) {
        goto LABEL_10;
      }
      uint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      char v39 = (uint64_t *)(v38[6] + 16 * v31);
      uint64_t *v39 = v28;
      v39[1] = v27;
      *(void *)(v38[7] + 8 * v31) = v29;
      uint64_t v40 = v38[2];
      BOOL v23 = __OFADD__(v40, 1);
      uint64_t v41 = v40 + 1;
      if (v23) {
        goto LABEL_24;
      }
      v38[2] = v41;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  a5();
  uint64_t v17 = sub_1002C0AD0(v9, v8);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v13 = v17;
    if ((v16 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v42._object = (void *)0x80000001003B4890;
  v42._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v42);
  _print_unlocked<A, B>(_:_:)();
  v43._countAndFlagsBits = 39;
  v43._object = (void *)0xE100000000000000;
  String.append(_:)(v43);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*sub_10025F4C4(void *a1, uint64_t a2, unint64_t a3))(uint64_t a1)
{
  id v6 = malloc(0x60uLL);
  *a1 = v6;
  v6[8] = a2;
  v6[9] = a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10006D0EC(a2, a3);
  v6[10] = sub_10025F7AC(v6);
  v6[11] = sub_10025F5EC(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return sub_10025F574;
}

void sub_10025F574(uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  uint64_t v4 = *(void *)(*(void *)a1 + 64);
  unint64_t v3 = *(void *)(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 88))();
  sub_10006D144(v4, v3);
  v2(v1, 0);

  free(v1);
}

void (*sub_10025F5EC(void *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  unint64_t v5 = v4;
  uint64_t v10 = malloc(0x30uLL);
  *a1 = v10;
  void v10[2] = a3;
  v10[3] = v4;
  v10[1] = a2;
  uint64_t v11 = *v4;
  uint64_t v13 = sub_1002C0BAC(a2, a3);
  *((unsigned char *)v10 + 40) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*(void *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *uint64_t v10 = v19;
        return sub_10025F734;
      }
LABEL_11:
      uint64_t v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      sub_1002CDDC8();
      goto LABEL_7;
    }
    sub_1002C64B0(v16, a4 & 1);
    uint64_t v20 = sub_1002C0BAC(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      uint64_t v13 = v20;
      v10[4] = v20;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10025F734(uint64_t **a1)
{
  unint64_t v1 = *a1;
  sub_10025F7E8(*a1, *((unsigned char *)*a1 + 40), (void *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2], (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_1002CBB60, (void (*)(uint64_t, void))sub_100181820);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t (*sub_10025F7AC(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  *unint64_t v1 = 0x8000000000000000;
  return sub_10025F7DC;
}

uint64_t sub_10025F7DC(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_10025F7E8(uint64_t *a1, char a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t), void (*a8)(uint64_t, void))
{
  uint64_t v10 = *a1;
  if (*a1)
  {
    uint64_t v12 = *a3;
    if (a2)
    {
      *(void *)(*(void *)(v12 + 56) + 8 * a4) = v10;
    }
    else
    {
      a7(a4, a5, a6, v10, v12);
      sub_10006D0EC(a5, a6);
    }
  }
  else if (a2)
  {
    swift_arrayDestroy();
    a8(a4, *a3);
  }

  return swift_bridgeObjectRetain();
}

void *sub_10025F8B0(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_24;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = 0;
    uint64_t v5 = OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration;
    unint64_t v6 = v2 & 0xC000000000000001;
    uint64_t v7 = v2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v8 = (void **)(v2 + 32);
    while (1)
    {
      if (v6)
      {
        uint64_t v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v4 >= *(void *)(v7 + 16)) {
          goto LABEL_22;
        }
        uint64_t v9 = v8[v4];
      }
      uint64_t v10 = v9;
      if (__OFADD__(v4++, 1)) {
        goto LABEL_23;
      }
      unint64_t v2 = *(void *)(*(void *)(a2 + v5) + 72);
      swift_bridgeObjectRetain();
      uint64_t v12 = [v10 unsignedIntegerValue];
      uint64_t v13 = *(void **)(v2 + 16);
      if (v13)
      {
        if (*(void **)(v2 + 32) == v12)
        {
LABEL_12:

          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        if (v13 != (void *)1) {
          break;
        }
      }
LABEL_4:
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t v2 = (unint64_t)&v18;
      specialized ContiguousArray._endMutation()();
LABEL_5:
      if (v4 == i) {
        return v18;
      }
    }
    uint64_t v14 = 5;
    while (1)
    {
      uint64_t v15 = v14 - 3;
      if (__OFADD__(v14 - 4, 1)) {
        break;
      }
      if (*(void **)(v2 + 8 * v14) == v12) {
        goto LABEL_12;
      }
      ++v14;
      if ((void *)v15 == v13) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    ;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_10025FA74(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t *a4)
{
  unint64_t v5 = v4;
  uint64_t v8 = a1;
  if (a1 >> 62) {
    goto LABEL_89;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9)
  {
LABEL_90:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  while (2)
  {
    uint64_t v10 = 0;
    unint64_t v11 = v8 & 0xC000000000000001;
    BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v50 = v12;
    uint64_t v49 = HIDWORD(a2) - (int)a2;
    uint64_t v59 = BYTE6(a3);
    char v57 = _swiftEmptyArrayStorage;
    unint64_t v58 = a3 >> 62;
    uint64_t v54 = a2;
    unint64_t v55 = v8 & 0xC000000000000001;
    uint64_t v52 = v8;
    uint64_t v56 = v9;
    unint64_t v48 = a3;
LABEL_10:
    if (v11)
    {
      uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v14 = __OFADD__(v10++, 1);
      if (v14) {
        goto LABEL_80;
      }
    }
    else
    {
      uint64_t v13 = swift_retain();
      BOOL v14 = __OFADD__(v10++, 1);
      if (v14)
      {
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
    uint64_t v16 = *(void *)(v13 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    unint64_t v15 = *(void *)(v13 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    uint64_t v17 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        LODWORD(v17) = HIDWORD(v16) - v16;
        if (__OFSUB__(HIDWORD(v16), v16)) {
          goto LABEL_84;
        }
        uint64_t v17 = (int)v17;
LABEL_20:
        uint64_t v20 = v59;
        switch(v58)
        {
          case 1uLL:
            uint64_t v20 = v49;
            if (v50) {
              goto LABEL_85;
            }
            goto LABEL_24;
          case 2uLL:
            uint64_t v22 = *(void *)(a2 + 16);
            uint64_t v21 = *(void *)(a2 + 24);
            BOOL v14 = __OFSUB__(v21, v22);
            uint64_t v20 = v21 - v22;
            if (!v14) {
              goto LABEL_24;
            }
            goto LABEL_86;
          case 3uLL:
            if (v17) {
              goto LABEL_8;
            }
            goto LABEL_49;
          default:
LABEL_24:
            if (v17 != v20) {
              goto LABEL_8;
            }
            if (v17 < 1) {
              goto LABEL_49;
            }
            break;
        }
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(v16 + 16);
        uint64_t v18 = *(void *)(v16 + 24);
        BOOL v14 = __OFSUB__(v18, v19);
        uint64_t v17 = v18 - v19;
        if (!v14) {
          goto LABEL_20;
        }
        goto LABEL_83;
      case 3uLL:
        goto LABEL_20;
      default:
        uint64_t v17 = BYTE6(v15);
        goto LABEL_20;
    }
    switch(v15 >> 62)
    {
      case 1uLL:
        if (v16 >> 32 < (int)v16) {
          goto LABEL_87;
        }
        uint64_t v60 = v13;
        sub_10006D0EC(a2, a3);
        sub_10006D0EC(v16, v15);
        uint64_t v29 = __DataStorage._bytes.getter();
        if (v29)
        {
          uint64_t v30 = v29;
          uint64_t v31 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v16, v31)) {
            goto LABEL_93;
          }
          uint64_t v32 = v30 + (int)v16 - v31;
        }
        else
        {
          uint64_t v32 = 0;
        }
        __DataStorage._length.getter();
        a2 = v54;
        sub_1001E5240(v32, v54, a3, (char *)__s1);
        if (v5) {
          goto LABEL_96;
        }
        unint64_t v5 = 0;
        sub_10006D144(v54, a3);
        sub_10006D144(v16, v15);
        goto LABEL_48;
      case 2uLL:
        uint64_t v60 = v13;
        uint64_t v8 = v15 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v24 = *(void *)(v16 + 16);
        uint64_t v25 = *(void *)(v16 + 24);
        sub_10006D0EC(a2, a3);
        swift_retain();
        swift_retain();
        uint64_t v26 = __DataStorage._bytes.getter();
        if (v26)
        {
          uint64_t v27 = v26;
          uint64_t v28 = __DataStorage._offset.getter();
          if (__OFSUB__(v24, v28))
          {
            __break(1u);
LABEL_93:
            __break(1u);
          }
          unint64_t v15 = v27 + v24 - v28;
          a2 = v25 - v24;
          if (__OFSUB__(v25, v24)) {
            goto LABEL_88;
          }
        }
        else
        {
          unint64_t v15 = 0;
          a2 = v25 - v24;
          if (__OFSUB__(v25, v24)) {
            goto LABEL_88;
          }
        }
        __DataStorage._length.getter();
        a2 = v54;
        sub_1001E5240(v15, v54, a3, (char *)__s1);
        if (v5) {
          goto LABEL_95;
        }
        unint64_t v5 = 0;
        sub_10006D144(v54, a3);
        swift_release();
        swift_release();
LABEL_48:
        uint64_t v8 = v52;
        unint64_t v11 = v55;
        uint64_t v9 = v56;
        uint64_t v13 = v60;
        if (__s1[0]) {
          goto LABEL_49;
        }
        goto LABEL_8;
      case 3uLL:
        unint64_t v15 = v13;
        memset(__s1, 0, 14);
        sub_10006D0EC(a2, a3);
        sub_1001E5240((uint64_t)__s1, a2, a3, &v62);
        if (v5) {
          goto LABEL_94;
        }
        unint64_t v5 = 0;
        sub_10006D144(a2, a3);
        uint64_t v13 = v15;
        if (v62) {
          goto LABEL_49;
        }
        goto LABEL_8;
      default:
        unint64_t v46 = v5;
        uint64_t v23 = v13;
        __s1[0] = *(void *)(v13 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
        LOWORD(__s1[1]) = v15;
        BYTE2(__s1[1]) = BYTE2(v15);
        BYTE3(__s1[1]) = BYTE3(v15);
        BYTE4(__s1[1]) = BYTE4(v15);
        BYTE5(__s1[1]) = BYTE5(v15);
        sub_10006D0EC(v54, a3);
        a2 = v54;
        sub_1001E5240((uint64_t)__s1, v54, a3, &v62);
        if (v46)
        {
LABEL_94:
          sub_10006D144(a2, a3);
          __break(1u);
LABEL_95:
          sub_10006D144(a2, a3);
          swift_release();
          swift_release();
          __break(1u);
LABEL_96:
          sub_10006D144(a2, a3);
          sub_10006D144(v16, v15);
          __break(1u);
          JUMPOUT(0x100260278);
        }
        sub_10006D144(v54, a3);
        uint64_t v13 = v23;
        unint64_t v5 = 0;
        if ((v62 & 1) == 0)
        {
LABEL_8:
          swift_release();
          goto LABEL_9;
        }
LABEL_49:
        unint64_t v33 = *a4;
        uint64_t v34 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
        uint64_t v61 = v13;
        swift_bridgeObjectRetain();
        v35.super.super.Class isa = UInt16._bridgeToObjectiveC()().super.super.isa;
        if (v33 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
          if (!v36)
          {
LABEL_76:
            swift_release();

            swift_bridgeObjectRelease_n();
            goto LABEL_77;
          }
        }
        else
        {
          uint64_t v36 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (!v36) {
            goto LABEL_76;
          }
        }
        uint64_t v51 = v34;
        if ((v33 & 0xC000000000000001) != 0) {
          id v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v37 = *(id *)(v33 + 32);
        }
        a3 = (unint64_t)v37;
        uint64_t v8 = sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
        a2 = static NSObject.== infix(_:_:)();

        if ((a2 & 1) == 0)
        {
          if (v36 != 1)
          {
            unint64_t v47 = v5;
            if ((v33 & 0xC000000000000001) != 0)
            {
              a3 = 1;
              while (1)
              {
                uint64_t v38 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                unint64_t v5 = a3 + 1;
                if (__OFADD__(a3, 1)) {
                  break;
                }
                a2 = v38;
                char v39 = static NSObject.== infix(_:_:)();
                swift_unknownObjectRelease();
                if (v39) {
                  goto LABEL_69;
                }
                ++a3;
                if (v5 == v36) {
                  goto LABEL_67;
                }
              }
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              swift_bridgeObjectRetain();
              uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
              if (!v9) {
                goto LABEL_90;
              }
              continue;
            }
            uint64_t v40 = 5;
            while (1)
            {
              unint64_t v5 = v40 - 3;
              if (__OFADD__(v40 - 4, 1)) {
                goto LABEL_82;
              }
              a2 = (uint64_t)*(id *)(v33 + 8 * v40);
              a3 = static NSObject.== infix(_:_:)();

              if (a3) {
                break;
              }
              ++v40;
              if (v5 == v36)
              {
LABEL_67:
                swift_release();

                swift_bridgeObjectRelease_n();
                unint64_t v5 = v47;
                goto LABEL_68;
              }
            }
LABEL_69:

            swift_bridgeObjectRelease();
            unint64_t v5 = v47;
            goto LABEL_70;
          }
          swift_release();

          swift_bridgeObjectRelease_n();
LABEL_68:
          a3 = v48;
          a2 = v54;
          uint64_t v8 = v52;
LABEL_77:
          unint64_t v11 = v55;
          uint64_t v9 = v56;
          goto LABEL_9;
        }

        swift_bridgeObjectRelease();
LABEL_70:
        swift_bridgeObjectRelease();
        __int16 v41 = *(_WORD *)(v61 + v51);
        swift_release();
        unint64_t v11 = v55;
        unint64_t v42 = v5;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v57 = sub_10025A834(0, v57[2] + 1, 1, v57);
        }
        a3 = v48;
        unint64_t v44 = v57[2];
        unint64_t v43 = v57[3];
        if (v44 >= v43 >> 1) {
          char v57 = sub_10025A834((void *)(v43 > 1), v44 + 1, 1, v57);
        }
        v57[2] = v44 + 1;
        *((_WORD *)v57 + v44 + 16) = v41;
        unint64_t v5 = v42;
        a2 = v54;
        uint64_t v8 = v52;
        uint64_t v9 = v56;
LABEL_9:
        if (v10 != v9) {
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        return v57;
    }
  }
}

void sub_1002602A8(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_10008C060((unint64_t *)&qword_1004556F0, (unint64_t *)&qword_100458810);
    Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v26;
    uint64_t v23 = v27;
    uint64_t v8 = v28;
    int64_t v9 = v29;
    unint64_t v10 = v30;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
  }
  int64_t v22 = (unint64_t)(v8 + 64) >> 6;
  int v14 = a3 & 1;
  if ((v7 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v15 = v31;
    swift_unknownObjectRelease();
    int64_t v16 = v9;
    uint64_t v17 = v10;
    while (v15)
    {
      uint64_t v31 = v15;
      sub_10025E238(&v31, a2, v14, a4);

      if (v5) {
        break;
      }
      int64_t v9 = v16;
      unint64_t v10 = v17;
      if (v7 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v10)
      {
        uint64_t v17 = (v10 - 1) & v10;
        unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
        int64_t v16 = v9;
      }
      else
      {
        int64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return;
        }
        if (v16 >= v22) {
          break;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v16);
        if (!v19)
        {
          int64_t v20 = v9 + 2;
          if (v9 + 2 >= v22) {
            break;
          }
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 3;
          if (v9 + 3 >= v22) {
            break;
          }
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 4;
          if (v9 + 4 >= v22) {
            break;
          }
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19)
          {
LABEL_22:
            int64_t v16 = v20;
          }
          else
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v22) {
              break;
            }
            unint64_t v19 = *(void *)(v23 + 8 * v16);
            if (!v19)
            {
              int64_t v21 = v9 + 6;
              while (v22 != v21)
              {
                unint64_t v19 = *(void *)(v23 + 8 * v21++);
                if (v19)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v17 = (v19 - 1) & v19;
        unint64_t v18 = __clz(__rbit64(v19)) + (v16 << 6);
      }
      id v15 = *(id *)(*(void *)(v7 + 48) + 8 * v18);
    }
  }
  sub_10008C4F0();
}

uint64_t sub_1002605C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

BOOL sub_1002605F8(uint64_t a1)
{
  return sub_10025EC64(a1, *(void **)(v1 + 16));
}

uint64_t sub_100260600()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100260638()
{
  *(void *)(v1 + 48) = v0;
  sub_10006C51C(&qword_100455EB0);
  *(void *)(v1 + 56) = swift_task_alloc();
  return _swift_task_switch(sub_1002606CC, 0, 0);
}

uint64_t sub_1002606CC()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[6];
  uint64_t v2 = qword_100468A98;
  v0[8] = qword_100468A98;
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
  v0[9] = *v3;
  v0[10] = v3[1];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100260794, v2, 0);
}

uint64_t sub_100260794()
{
  v0[11] = sub_1002EEA60(v0[9], v0[10]);
  v0[12] = 0;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_10026082C, 0, 0);
}

uint64_t sub_10026082C()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  v0[5] = v0[11];
  uint64_t v3 = v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_sessionIdentifier;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  unint64_t v6 = (void *)swift_task_alloc();
  v0[13] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100260988;
  uint64_t v7 = v0[7];
  return sub_1002AB530((uint64_t)(v0 + 5), 0xD000000000000010, 0x80000001003B92E0, v7);
}

uint64_t sub_100260988()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100132C18(*(void *)(v2 + 56));
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100260BE4;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 56);
    swift_bridgeObjectRelease();
    sub_100132C18(v4);
    uint64_t v3 = sub_100260ACC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100260ACC()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void *)(v0[6] + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  *uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
  return v3(v1);
}

uint64_t sub_100260B80()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100260BE4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100260C48(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for StateInternal();
  v2[11] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[12] = v5;
  v2[13] = *(void *)(v5 + 64);
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v2[16] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[17] = v7;
  v2[18] = *(void *)(v7 + 64);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  return _swift_task_switch(sub_100260E30, 0, 0);
}

uint64_t sub_100260E30()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 184) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 136);
    int v5 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 360) = v5;
    *(void *)(v0 + 192) = *(void *)(v4 + 72);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    *(_DWORD *)(v0 + 364) = enum case for StateInternal.installationFailed(_:);
    *(_DWORD *)(v0 + 368) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    *(void *)(v0 + 200) = v6;
    *(void *)(v0 + 208) = 0;
    uint64_t v7 = *(void *)(v0 + 176);
    uint64_t v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    *(void *)(v0 + 216) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    swift_bridgeObjectRetain();
    v6(v7, v8, v3);
    uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
    *(void *)(v0 + 224) = v9;
    *(void *)(v0 + 232) = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v9(v7, 0, 1, v3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v7, 1, v3) == 1)
    {
      *(void *)(v0 + 296) = 0;
      swift_bridgeObjectRelease();
      if (qword_100453958 != -1) {
        swift_once();
      }
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v11 = qword_100468A98;
      *(void *)(v0 + 304) = qword_100468A98;
      uint64_t v12 = (void *)(v10 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
      *(void *)(v0 + 312) = *v12;
      *(void *)(v0 + 320) = v12[1];
      swift_bridgeObjectRetain();
      uint64_t v13 = sub_100261948;
    }
    else
    {
      uint64_t v16 = *(void *)(v0 + 176);
      uint64_t v17 = *(void *)(v0 + 160);
      uint64_t v18 = *(void *)(v0 + 128);
      uint64_t v19 = *(void *)(v0 + 136);
      int64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32);
      *(void *)(v0 + 240) = v20;
      *(void *)(v0 + 248) = (v19 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v20(v17, v16, v18);
      if (qword_100453958 != -1) {
        swift_once();
      }
      uint64_t v21 = *(unsigned int *)(v0 + 364);
      uint64_t v22 = *(void *)(v0 + 120);
      uint64_t v23 = *(void *)(v0 + 88);
      uint64_t v24 = *(void *)(v0 + 96);
      uint64_t v11 = qword_100468A98;
      *(void *)(v0 + 256) = qword_100468A98;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 104))(v22, v21, v23);
      uint64_t v13 = sub_100261108;
    }
    return _swift_task_switch(v13, v11, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_100261108()
{
  uint64_t v21 = *(void *)(v0 + 256);
  uint64_t v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 240);
  unsigned int v25 = *(_DWORD *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 128);
  uint64_t v15 = *(void *)(v0 + 160);
  uint64_t v16 = v2;
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 120);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  uint64_t v17 = v1;
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v22 = *(void *)(v0 + 64);
  uint64_t v23 = *(void *)(v0 + 80);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 360) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 360);
  unint64_t v14 = v7 + *(void *)(v0 + 144);
  id v8 = [*(id *)(v21 + 112) viewContext];
  *(void *)(v0 + 264) = v8;
  v19(v1, v15, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v18, v5);
  unint64_t v9 = (v14 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 272) = v10;
  *(void *)(v10 + 16) = v21;
  v24(v10 + v7, v17, v16);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v3, v5);
  *(void *)(v10 + ((v20 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v23, v25, v22);
  swift_retain();
  v8;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 280) = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100261348;
  uint64_t v12 = *(void *)(v0 + 80);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v11, v12, sub_100264A30, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_100261348()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[32];
  (*(void (**)(void, void))(v2[9] + 8))(v2[10], v2[8]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1002617DC;
  }
  else {
    uint64_t v4 = sub_1002614E8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002614E8()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return _swift_task_switch(sub_100261578, 0, 0);
}

uint64_t sub_100261578()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 208) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 128));
  if (v2 == v1)
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 224))(*(void *)(v0 + 176), 1, 1, *(void *)(v0 + 128));
    uint64_t v3 = *(void *)(v0 + 288);
LABEL_4:
    *(void *)(v0 + 296) = v3;
    swift_bridgeObjectRelease();
    if (qword_100453958 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = qword_100468A98;
    *(void *)(v0 + 304) = qword_100468A98;
    uint64_t v13 = (void *)(v11 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
    *(void *)(v0 + 312) = *v13;
    *(void *)(v0 + 320) = v13[1];
    swift_bridgeObjectRetain();
    unint64_t v14 = sub_100261948;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208) + 1;
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 136);
  unint64_t v9 = *(void *)(v0 + 48)
     + ((*(unsigned __int8 *)(v0 + 360) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 360))
     + *(void *)(v0 + 192) * v5;
  *(void *)(v0 + 208) = v5;
  *(void *)(v0 + 216) = (v8 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v4(v6, v9, v7);
  uint64_t v10 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);
  *(void *)(v0 + 224) = v10;
  *(void *)(v0 + 232) = (v8 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v10(v6, 0, 1, v7);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    goto LABEL_4;
  }
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v17 = *(void *)(v0 + 128);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
  *(void *)(v0 + 240) = v19;
  *(void *)(v0 + 248) = (v18 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v19(v16, v15, v17);
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v20 = *(unsigned int *)(v0 + 364);
  uint64_t v21 = *(void *)(v0 + 120);
  uint64_t v22 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 96);
  uint64_t v12 = qword_100468A98;
  *(void *)(v0 + 256) = qword_100468A98;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104))(v21, v20, v22);
  unint64_t v14 = sub_100261108;
LABEL_10:
  return _swift_task_switch(v14, v12, 0);
}

uint64_t sub_1002617DC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100261878, 0, 0);
}

uint64_t sub_100261878()
{
  (*(void (**)(void, void))(v0[17] + 8))(v0[20], v0[16]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100261948()
{
  uint64_t v1 = v0[37];
  v0[41] = sub_1002EEA60(v0[39], v0[40]);
  v0[42] = v1;
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v2 = sub_100261D20;
  }
  else {
    uint64_t v2 = sub_1002619DC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002619DC()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[28];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[25];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[7];
  v0[5] = v0[41];
  v2(v3, v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_sessionIdentifier, v4);
  v1(v3, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[43] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100261AF4;
  uint64_t v7 = v0[21];
  return sub_1002AB530((uint64_t)(v0 + 5), 0xD000000000000019, 0x80000001003B92C0, v7);
}

uint64_t sub_100261AF4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100132C18(*(void *)(v2 + 168));
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100261DD8;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 168);
    swift_bridgeObjectRelease();
    sub_100132C18(v4);
    uint64_t v3 = sub_100261C38;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100261C38()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void *)(v0[7] + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  *uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100261D20()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100261DD8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100261E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[12] = v6;
  v5[13] = *(void *)(v6 - 8);
  v5[14] = swift_task_alloc();
  return _swift_task_switch(sub_100261F58, 0, 0);
}

uint64_t sub_100261F58()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = (uint64_t *)(v0[11] + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  v0[15] = v3;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[16] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100262060;
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[10];
  uint64_t v8 = v0[7];
  uint64_t v7 = v0[8];
  return sub_1002EAB78(v8, v7, v5, v6, v2, v3);
}

uint64_t sub_100262060(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100262470;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_10026217C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_10026217C()
{
  uint64_t v23 = v0;
  if (qword_100453880 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[12];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E55C(v5, (uint64_t)qword_100459EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[13];
  uint64_t v9 = v0[14];
  if (v8)
  {
    uint64_t v20 = v0[12];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v22 = v21;
    v0[5] = sub_100290514(0xD000000000000036, 0x80000001003B9280, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v12 = UUID.uuidString.getter();
    v0[6] = sub_100290514(v12, v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v20);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s identifier %s success", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[14], v0[12]);
  }

  unint64_t v14 = (void *)v0[17];
  uint64_t v15 = (void *)(v0[11] + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  id v16 = v14;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v18 = v0[17];
  return v17(v18);
}

uint64_t sub_100262470()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002624DC()
{
  *(void *)(v1 + 64) = v0;
  sub_10006C51C(&qword_100455EB0);
  *(void *)(v1 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_100262570, 0, 0);
}

uint64_t sub_100262570()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[8];
  uint64_t v2 = qword_100468A98;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo;
  v0[10] = qword_100468A98;
  v0[11] = v3;
  uint64_t v4 = (void *)(v1 + v3);
  v0[12] = *v4;
  v0[13] = v4[1];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100262638, v2, 0);
}

uint64_t sub_100262638()
{
  v0[14] = sub_1002EEA60(v0[12], v0[13]);
  v0[15] = 0;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1002626D0, 0, 0);
}

uint64_t sub_1002626D0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  v0[5] = v0[14];
  uint64_t v3 = v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_sessionIdentifier;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v2, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10026282C;
  uint64_t v7 = v0[9];
  return sub_1002AB530((uint64_t)(v0 + 5), 0xD00000000000001BLL, 0x80000001003B9260, v7);
}

uint64_t sub_10026282C(uint64_t a1)
{
  uint64_t v3 = *v2;
  v3[17] = a1;
  v3[18] = v1;
  swift_task_dealloc();
  sub_100132C18(v3[9]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100262F3C;
  }
  else
  {
    uint64_t v4 = sub_100262958;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100262958()
{
  unint64_t v1 = *(void *)(v0 + 136);
  unint64_t v2 = v1 >> 62;
  if (v1 >> 62) {
    goto LABEL_25;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    while (1)
    {
      if (qword_100453880 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10008E55C(v3, (uint64_t)qword_100459EB8);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Firing installation complete callback", v6, 2u);
        swift_slowDealloc();
      }
      uint64_t v7 = *(void *)(v0 + 64);

      BOOL v8 = *(void (**)(void *))(v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_installFinishedCallback);
      if (!v8) {
        goto LABEL_26;
      }
      if (v2)
      {
        id v20 = *(id *)(v0 + 64);
        sub_10008BEBC((uint64_t)v8);
        unint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
        if (!v2)
        {
LABEL_22:

          swift_bridgeObjectRelease();
          v8(_swiftEmptyArrayStorage);
          sub_10008BECC((uint64_t)v8);
          swift_release();
          goto LABEL_27;
        }
      }
      else
      {
        unint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        id v9 = *(id *)(v0 + 64);
        sub_10008BEBC((uint64_t)v8);
        if (!v2) {
          goto LABEL_22;
        }
      }
      uint64_t v26 = v8;
      unint64_t v10 = 0;
      unint64_t v11 = v1 & 0xC000000000000001;
      uint64_t v12 = v1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v13 = *(void *)(v0 + 136) + 32;
      while (v11)
      {
        id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_16:
        unint64_t v1 = (unint64_t)v14;
        unint64_t v15 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_24;
        }
        id v16 = (uint64_t *)(*(void *)(v0 + 64) + *(void *)(v0 + 88));
        uint64_t v17 = *v16;
        uint64_t v18 = (void *)v16[1];
        swift_bridgeObjectRetain();
        v19._countAndFlagsBits = v17;
        v19._object = v18;
        LOBYTE(v17) = CredentialInternal.isAccessible(appId:)(v19);
        swift_bridgeObjectRelease();
        if (v17)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v10;
        if (v15 == v2)
        {
          BOOL v8 = v26;
          goto LABEL_22;
        }
      }
      if (v10 < *(void *)(v12 + 16)) {
        break;
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v21) {
        goto LABEL_26;
      }
    }
    id v14 = *(id *)(v13 + 8 * v10);
    goto LABEL_16;
  }
LABEL_26:
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v22 = *(void *)(v0 + 40);
  uint64_t v23 = (void *)(*(void *)(v0 + 64) + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  *uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

uint64_t sub_100262CB8()
{
  unint64_t v10 = v0;
  if (qword_100453880 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_100459EB8);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    os_log_type_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v0[7] = sub_100290514(0xD000000000000018, 0x80000001003B9240, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %@ encountered %s", (uint8_t *)v4, 0x16u);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100262F3C()
{
  unint64_t v10 = v0;
  if (qword_100453880 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_100459EB8);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    os_log_type_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412546;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v4 + 12) = 2080;
    v0[7] = sub_100290514(0xD000000000000018, 0x80000001003B9240, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %@ encountered %s", (uint8_t *)v4, 0x16u);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002631C0(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100263280, 0, 0);
}

uint64_t sub_100263280()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10026334C;
  uint64_t v2 = *(void *)(v0 + 56);
  return sub_1002EBB90(v2);
}

uint64_t sub_10026334C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10026349C, 0, 0);
  }
}

uint64_t sub_10026349C()
{
  uint64_t v25 = v0;
  if (qword_100453880 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E55C(v5, (uint64_t)qword_100459EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[10];
  uint64_t v9 = v0[11];
  if (v8)
  {
    uint64_t v22 = v0[9];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    v24[0] = v23;
    v0[5] = sub_100290514(0xD000000000000017, 0x80000001003B9220, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v12 = UUID.uuidString.getter();
    v0[6] = sub_100290514(v12, v13, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v22);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s identifier %s success", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[11], v0[9]);
  }

  uint64_t v14 = v0[7];
  uint64_t v15 = v0[8];
  uint64_t v16 = swift_task_alloc();
  *(void *)(v16 + 16) = v14;
  uint64_t v17 = (void *)(v15 + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  uint64_t result = sub_100264564((uint64_t (*)(id *))sub_100264544, v16);
  uint64_t v19 = result;
  if (*v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20 >= v19) {
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v20 = *(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v20 < result) {
    goto LABEL_12;
  }
LABEL_8:
  sub_1002D2D44(v19, v20);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_1002637DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  sub_10006C51C(&qword_100455EB0);
  v4[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_1002638D0, 0, 0);
}

uint64_t sub_1002638D0()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002639A0;
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  return sub_1002EC8AC(v4, v2, v3);
}

uint64_t sub_1002639A0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100263AE8, 0, 0);
  }
}

uint64_t sub_100263AE8()
{
  uint64_t v18 = v0;
  if (qword_100453880 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E55C(v5, (uint64_t)qword_100459EB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[14];
  uint64_t v9 = v0[15];
  if (v8)
  {
    uint64_t v16 = v0[13];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    v0[6] = sub_100290514(0xD000000000000026, 0x80000001003B91F0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v12 = UUID.uuidString.getter();
    v0[7] = sub_100290514(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v16);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s identifier %s success", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[15], v0[13]);
  }

  uint64_t v14 = qword_100468A98;
  v0[18] = qword_100468A98;
  return _swift_task_switch(sub_100263D54, v14, 0);
}

uint64_t sub_100263D54()
{
  uint64_t v1 = v0[17];
  v0[19] = sub_1002EEA60(0, 0);
  v0[20] = v1;
  if (v1) {
    uint64_t v2 = sub_1002640B8;
  }
  else {
    uint64_t v2 = sub_100263DE4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100263DE4()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  v0[5] = v0[19];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[21] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100263EC4;
  uint64_t v5 = v0[12];
  return sub_1002AB530((uint64_t)(v0 + 5), 0xD00000000000001FLL, 0x80000001003B91D0, v5);
}

uint64_t sub_100263EC4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_100132C18(*(void *)(v2 + 96));
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100264128;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 96);
    swift_bridgeObjectRelease();
    sub_100132C18(v4);
    uint64_t v3 = sub_100264008;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100264008()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void *)(v0[11] + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials);
  swift_beginAccess();
  *uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002640B8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100264128()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100264198(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = *a1;
  if (a2)
  {
    swift_retain();
    char v17 = a2(v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a4, v7);
    if (v17)
    {
      CredentialInternal.identifier.getter();
      char v18 = static UUID.== infix(_:_:)();
      sub_10008BECC((uint64_t)a2);
      uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
      v19(v15, v7);
      v19(v12, v7);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      sub_10008BECC((uint64_t)a2);
      char v18 = 0;
    }
  }
  else
  {
    CredentialInternal.identifier.getter();
    char v18 = static UUID.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
  }
  return v18 & 1;
}

uint64_t sub_10026438C()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CredentialInternal.identifier.getter();
  char v5 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v5 & 1;
}

uint64_t sub_10026447C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100459EB8);
  uint64_t v1 = sub_10008E55C(v0, (uint64_t)qword_100459EB8);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_10008E55C(v0, (uint64_t)qword_1004686A8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100264544()
{
  return sub_10026438C() & 1;
}

uint64_t sub_100264564(uint64_t (*a1)(id *), uint64_t a2)
{
  uint64_t v4 = (uint64_t *)v2;
  unint64_t v7 = *v2;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_100178810(a1, a2, v7);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*v4 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v30) {
        goto LABEL_6;
      }
    }
    else if (v11 != *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v11 = v8 + 5;
      uint64_t v32 = a2;
      while (1)
      {
        unint64_t v12 = v11 - 4;
        uint64_t v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          id v14 = *(id *)(v13 + 8 * v11);
        }
        uint64_t v15 = v14;
        id v33 = v14;
        char v16 = a1(&v33);

        if ((v16 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v27 = v11 - 3;
        if (__OFADD__(v12, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*v4 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v28 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v27 == v28) {
          return v8;
        }
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v17 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v17 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v12 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          id v19 = *(id *)(v17 + 8 * v11);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v8 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        id v18 = *(id *)(v17 + 8 * v8 + 32);
        if ((v17 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v17 = *v4;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v4 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        uint64_t v17 = sub_1000FADE4(v17);
        *uint64_t v4 = v17;
      }
      uint64_t v21 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
      *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v19;

      specialized Array._endMutation()();
      uint64_t v22 = *v4;
      int v23 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v4 = v22;
      if (!v23 || v22 < 0 || (v22 & 0x4000000000000000) != 0)
      {
        uint64_t v22 = sub_1000FADE4(v22);
        *uint64_t v4 = v22;
      }
      a2 = v32;
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFFF8;
      if (v12 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      uint64_t v25 = *(void **)(v24 + 8 * v11);
      *(void *)(v24 + 8 * v11) = v18;

      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  if (!((unint64_t)*v4 >> 62)) {
    return *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t sub_1002648C4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for StateInternal();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11 + 8, v10);
}

void sub_100264A30()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for StateInternal() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_1002EE3DC(*(void *)(v0 + 16), v0 + v2, v0 + v5, *(void **)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100264B60()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_100264BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002653A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100264BCC(uint64_t a1)
{
  unint64_t v2 = sub_100265140();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100264C08(uint64_t a1)
{
  unint64_t v2 = sub_100265140();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t type metadata accessor for SecureElementApplicationInternal()
{
  return self;
}

uint64_t sub_100264CBC(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_100459F48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_100265140();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    v9[14] = 1;
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  return swift_bridgeObjectRelease();
}

unint64_t sub_100264E84(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v18 = sub_10006C51C(&qword_100459F38);
  uint64_t v4 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  unint64_t v8 = sub_100265140();
  uint64_t v9 = v1;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_10007594C((uint64_t)a1);

    swift_deallocPartialClassInstance();
  }
  else
  {
    char v21 = 0;
    uint64_t v10 = v18;
    uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v13 = (uint64_t *)&v9[OBJC_IVAR____TtC10seserviced32SecureElementApplicationInternal_identifier];
    *uint64_t v13 = v11;
    v13[1] = v14;
    char v21 = 1;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    char v16 = (uint64_t *)&v9[OBJC_IVAR____TtC10seserviced32SecureElementApplicationInternal_bundleIdentifier];
    *char v16 = v15;
    v16[1] = v17;

    v20.receiver = v9;
    v20.super_class = ObjectType;
    unint64_t v8 = (unint64_t)[super init];
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v10);
    sub_10007594C((uint64_t)a1);
  }
  return v8;
}

unint64_t sub_1002650CC@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  id v6 = objc_allocWithZone(v2);
  unint64_t result = sub_100264E84(a1);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10026511C(void *a1)
{
  return sub_100264CBC(a1);
}

unint64_t sub_100265140()
{
  unint64_t result = qword_100459F40;
  if (!qword_100459F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459F40);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SecureElementApplicationInternal.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100265260);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureElementApplicationInternal.CodingKeys()
{
  return &type metadata for SecureElementApplicationInternal.CodingKeys;
}

unint64_t sub_10026529C()
{
  unint64_t result = qword_100459F50;
  if (!qword_100459F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459F50);
  }
  return result;
}

unint64_t sub_1002652F4()
{
  unint64_t result = qword_100459F58;
  if (!qword_100459F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459F58);
  }
  return result;
}

unint64_t sub_10026534C()
{
  unint64_t result = qword_100459F60;
  if (!qword_100459F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100459F60);
  }
  return result;
}

uint64_t sub_1002653A0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003B9340)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_10026549C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v14 = (int)v14;
LABEL_6:
      if (v14 != 32)
      {
LABEL_11:
        if (qword_100453888 != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        sub_10008E55C(v29, (uint64_t)qword_100459F68);
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Incorrect length for BLESK, cannot set value", v32, 2u);
          swift_slowDealloc();
        }

        sub_10007567C();
        swift_allocError();
        *id v33 = 0;
        return swift_willThrow();
      }
      uint64_t v67 = v4;
      uint64_t v68 = v11;
      if (qword_100453888 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      uint64_t v19 = sub_10008E55C(v18, (uint64_t)qword_100459F68);
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(a1, a2);
      uint64_t v66 = v19;
      objc_super v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v65 = v9;
      if (v22)
      {
        int v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        uint64_t v70 = v62;
        *(_DWORD *)int v23 = 136315138;
        v60[1] = v23 + 4;
        uint64_t v61 = v23;
        uint64_t v24 = v67;
        uint64_t v25 = sub_10023CDF4(a1, a2);
        uint64_t v64 = a3;
        uint64_t v67 = v24;
        uint64_t v69 = (uint64_t)v25;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        uint64_t v63 = v5;
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v28 = v27;
        a3 = v64;
        swift_bridgeObjectRelease();
        uint64_t v69 = sub_100290514(v26, v28, &v70);
        uint64_t v9 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v5 = v63;
        swift_bridgeObjectRelease();
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Received BLESK with type %s", v61, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
      }

      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Deriving BleSKDevice", v36, 2u);
        swift_slowDealloc();
      }

      static String.Encoding.utf8.getter();
      uint64_t v37 = String.data(using:allowLossyConversion:)();
      unint64_t v39 = v38;
      uint64_t v40 = *(void **)(v68 + 8);
      v68 += 8;
      uint64_t v63 = v40;
      ((void (*)(char *, uint64_t))v40)(v13, v9);
      if (v39 >> 60 == 15)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v41 = v67;
      uint64_t v42 = sub_100267C00(a1, a2, v37, v39, a3);
      if (!v41)
      {
        uint64_t v44 = v42;
        uint64_t v45 = v43;
        uint64_t v64 = a3;
        sub_100075868(v37, v39);
        uint64_t v46 = v5[4];
        unint64_t v47 = v5[5];
        v5[4] = v44;
        v5[5] = v45;
        sub_100075868(v46, v47);
        unint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v48, v49))
        {
          BOOL v50 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v50 = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Deriving BleSKReader", v50, 2u);
          swift_slowDealloc();
        }

        static String.Encoding.utf8.getter();
        uint64_t v51 = String.data(using:allowLossyConversion:)();
        unint64_t v53 = v52;
        ((void (*)(char *, uint64_t))v63)(v13, v65);
        if (v53 >> 60 != 15)
        {
          uint64_t v54 = sub_100267C00(a1, a2, v51, v53, v64);
          uint64_t v56 = v55;
          sub_100075868(v51, v53);
          uint64_t v57 = v5[2];
          unint64_t v58 = v5[3];
          _OWORD v5[2] = v54;
          _OWORD v5[3] = v56;
          return sub_100075868(v57, v58);
        }
LABEL_30:
        __break(1u);
        JUMPOUT(0x100265B38);
      }
      sub_100075868(v37, v39);
      return swift_willThrow();
    case 2uLL:
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_6;
      }
      goto LABEL_28;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v14 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100265B48(char a1)
{
  uint64_t v4 = sub_10006C51C(&qword_100454158);
  uint64_t v5 = sub_10008C0B0((unint64_t *)&qword_100454160, &qword_100454158);
  LOBYTE(v3[0]) = a1;
  sub_100075908(v3, v4);
  Data._Representation.replaceSubrange(_:with:count:)();
  return sub_10007594C((uint64_t)v3);
}

uint64_t sub_100265C70(uint64_t a1, unint64_t a2, __objc2_prot *a3, objc_class *a4)
{
  unint64_t v5 = a2 >> 62;
  Class v6 = a4;
  uint64_t v7 = a3;
  unint64_t v8 = (objc_class *)a2;
  uint64_t v9 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a1) - a1;
      if (!__OFSUB__(HIDWORD(a1), a1))
      {
        uint64_t v10 = (int)v10;
LABEL_6:
        if (v10 < 17)
        {
LABEL_11:
          if (qword_100453888 != -1) {
            swift_once();
          }
          uint64_t v20 = type metadata accessor for Logger();
          uint64_t v18 = sub_10008E55C(v20, (uint64_t)qword_100459F68);
          sub_10006D0EC(v9, (unint64_t)v8);
          sub_10006D0EC(v9, (unint64_t)v8);
          uint64_t v16 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v16, v21))
          {
            sub_10006D144(v9, (unint64_t)v8);
            sub_10006D144(v9, (unint64_t)v8);
            goto LABEL_17;
          }
          BOOL v22 = (uint8_t *)swift_slowAlloc();
          uint64_t v104 = swift_slowAlloc();
          uint64_t v105 = v104;
          *(_DWORD *)BOOL v22 = 136315138;
          sub_10023CDF4(v9, (unint64_t)v8);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v25 = v24;
          swift_bridgeObjectRelease();
          sub_100290514(v23, v25, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v9, (unint64_t)v8);
          sub_10006D144(v9, (unint64_t)v8);
          _os_log_impl((void *)&_mh_execute_header, v16, v21, "Auth tag not present in %s", v22, 0xCu);
          uint64_t v18 = v104;
          swift_arrayDestroy();
          swift_slowDealloc();
          goto LABEL_15;
        }
        unint64_t v14 = *(void *)(v4 + 24);
        if (v14 >> 60 == 15)
        {
          if (qword_100453888 == -1) {
            goto LABEL_9;
          }
          goto LABEL_66;
        }
        uint64_t v28 = *(void *)(v4 + 16);
        switch((unint64_t)a4 >> 62)
        {
          case 1uLL:
            LODWORD(v29) = HIDWORD(a3) - a3;
            if (__OFSUB__(HIDWORD(a3), a3))
            {
              __break(1u);
LABEL_72:
              __break(1u);
              goto LABEL_73;
            }
            int64_t v29 = (int)v29;
LABEL_24:
            if (v29 != 4)
            {
LABEL_29:
              unint64_t v34 = *(void *)(v4 + 24);
              sub_10006D0EC(*(void *)(v4 + 16), v34);
              if (qword_100453888 != -1) {
                swift_once();
              }
              uint64_t v35 = type metadata accessor for Logger();
              sub_10008E55C(v35, (uint64_t)qword_100459F68);
              sub_10006D0EC((uint64_t)v7, (unint64_t)v6);
              sub_10006D0EC((uint64_t)v7, (unint64_t)v6);
              uint64_t v36 = Logger.logObject.getter();
              os_log_type_t v37 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v36, v37))
              {
                unint64_t v102 = v34;
                uint64_t v38 = swift_slowAlloc();
                uint64_t v105 = swift_slowAlloc();
                *(_DWORD *)uint64_t v38 = 136315394;
                sub_10023CDF4((uint64_t)v7, (unint64_t)v6);
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                uint64_t v100 = v28;
                sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v41 = v40;
                swift_bridgeObjectRelease();
                sub_100290514(v39, v41, &v105);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10006D144((uint64_t)v7, (unint64_t)v6);
                sub_10006D144((uint64_t)v7, (unint64_t)v6);
                *(_WORD *)(v38 + 12) = 2048;
                uint64_t v28 = v100;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl((void *)&_mh_execute_header, v36, v37, "Malformed header %s, expected length %ld", (uint8_t *)v38, 0x16u);
                swift_arrayDestroy();
                swift_slowDealloc();
                uint64_t v18 = v102;
                swift_slowDealloc();
              }
              else
              {
                sub_10006D144((uint64_t)v7, (unint64_t)v6);
                sub_10006D144((uint64_t)v7, (unint64_t)v6);

                uint64_t v18 = v34;
              }
              sub_10007567C();
              swift_allocError();
              *uint64_t v42 = 0;
              swift_willThrow();
              uint64_t v43 = v28;
              unint64_t v44 = v18;
              goto LABEL_63;
            }
            sub_10006D0EC(*(void *)(v4 + 16), *(void *)(v4 + 24));
            v32.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            uint64_t v103 = v9;
            if (v5)
            {
              if (v5 == 1)
              {
                LODWORD(v33) = HIDWORD(v9) - v9;
                if (__OFSUB__(HIDWORD(v9), v9))
                {
LABEL_75:
                  __break(1u);
                  goto LABEL_76;
                }
                uint64_t v33 = (int)v33;
              }
              else
              {
                uint64_t v46 = *(void *)(v9 + 16);
                uint64_t v45 = *(void *)(v9 + 24);
                BOOL v13 = __OFSUB__(v45, v46);
                uint64_t v33 = v45 - v46;
                if (v13)
                {
LABEL_76:
                  __break(1u);
                  goto LABEL_77;
                }
              }
            }
            else
            {
              uint64_t v33 = BYTE6(v8);
            }
            Class isa = v32.super.isa;
            unint64_t v98 = (unint64_t)v8;
            uint64_t v47 = v33 - 16;
            if (__OFSUB__(v33, 16))
            {
              __break(1u);
            }
            else
            {
              id v48 = [objc_allocWithZone((Class)NSMutableData) initWithLength:v47];
              if (!v48)
              {
LABEL_79:
                __break(1u);
                JUMPOUT(0x100266B84);
              }
              id v96 = v48;
              unint64_t v101 = v14;
              uint64_t v97 = v4;
              uint64_t v99 = v28;
              if ((v47 & 0x8000000000000000) == 0)
              {
                uint64_t v49 = Data.subdata(in:)();
                unint64_t v51 = v50;
                v52.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
                sub_10006D144(v49, v51);
                Class v6 = Data._bridgeToObjectiveC()().super.isa;
                uint64_t v7 = (__objc2_prot *)[objc_allocWithZone((Class)NSMutableData) init];
                [(__objc2_prot *)v7 appendU64BE:0];
                [(__objc2_prot *)v7 appendU32BE:*(unsigned int *)(v97 + 64)];
                id v53 = [objc_allocWithZone((Class)NSMutableData) init];
                if (v5)
                {
                  if (v5 == 1)
                  {
                    if (__OFSUB__(HIDWORD(v103), v103))
                    {
LABEL_77:
                      __break(1u);
                      goto LABEL_78;
                    }
                    uint64_t v54 = HIDWORD(v103) - (int)v103;
                  }
                  else
                  {
                    uint64_t v56 = *(void *)(v103 + 16);
                    uint64_t v55 = *(void *)(v103 + 24);
                    uint64_t v54 = v55 - v56;
                    if (__OFSUB__(v55, v56))
                    {
LABEL_78:
                      __break(1u);
                      goto LABEL_79;
                    }
                  }
                }
                else
                {
                  uint64_t v54 = BYTE6(v98);
                }
                Class v93 = v52.super.isa;
                if (v54 >= v47)
                {
                  uint64_t v57 = Data.subdata(in:)();
                  unint64_t v59 = v58;
                  Class v60 = Data._bridgeToObjectiveC()().super.isa;
                  sub_10006D144(v57, v59);
                  id v91 = v53;
                  [v53 appendData:v60];

                  if (qword_100453888 == -1) {
                    goto LABEL_48;
                  }
                  goto LABEL_70;
                }
LABEL_69:
                __break(1u);
LABEL_70:
                swift_once();
LABEL_48:
                uint64_t v61 = type metadata accessor for Logger();
                sub_10008E55C(v61, (uint64_t)qword_100459F68);
                uint64_t v62 = v7;
                uint64_t v63 = v6;
                Class v6 = v62;
                unint64_t v8 = v63;
                uint64_t v64 = Logger.logObject.getter();
                os_log_type_t v65 = static os_log_type_t.debug.getter();
                uint64_t v7 = &OBJC_PROTOCOL___SEServerProtocol;
                if (!os_log_type_enabled(v64, v65))
                {

                  goto LABEL_52;
                }
                os_log_type_t v89 = v65;
                os_log_t log = v64;
                uint64_t v9 = swift_slowAlloc();
                uint64_t v105 = swift_slowAlloc();
                *(_DWORD *)uint64_t v9 = 136381187;
                id v66 = [(objc_class *)v6 asHexString];
                uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v69 = v68;

                sub_100290514(v67, v69, &v105);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v9 + 12) = 2081;
                id v70 = [(objc_class *)v8 asHexString];
                uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v73 = v72;

                uint64_t v74 = v71;
                uint64_t v7 = &OBJC_PROTOCOL___SEServerProtocol;
                sub_100290514(v74, v73, &v105);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                *(_WORD *)(v9 + 22) = 1024;
                if (qword_100453670 == -1)
                {
LABEL_50:
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  _os_log_impl((void *)&_mh_execute_header, log, v89, "LyonBLE Decryption parameters iv: %{private}s, aad: %{private}s, isAADUsed: %{BOOL}d", (uint8_t *)v9, 0x1Cu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

LABEL_52:
                  ccaes_gcm_decrypt_mode();
                  [(objc_class *)isa length];
                  uint64_t v87 = isa;
                  [(objc_class *)v87 bytes];
                  [(objc_class *)v6 length];
                  char v88 = v6;
                  [(objc_class *)v88 bytes];
                  if (*(void *)&v7[22].cb != -1) {
                    swift_once();
                  }
                  if (byte_100468520 == 1)
                  {
                    [(objc_class *)v8 length];
                    [(objc_class *)v8 bytes];
                  }
                  [(objc_class *)v93 length];
                  os_log_type_t v94 = v93;
                  [(objc_class *)v94 bytes];
                  id v86 = v96;
                  [v86 mutableBytes];
                  id v92 = v91;
                  [v92 mutableBytes];
                  if (ccgcm_one_shot())
                  {
                    sub_10006D0EC(v103, v98);
                    sub_10006D0EC(v103, v98);
                    uint64_t v75 = Logger.logObject.getter();
                    os_log_type_t v76 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v75, v76))
                    {
                      char v77 = (uint8_t *)swift_slowAlloc();
                      uint64_t v105 = swift_slowAlloc();
                      *(_DWORD *)char v77 = 136315138;
                      sub_10023CDF4(v103, v98);
                      sub_10006C51C((uint64_t *)&unk_100455EA0);
                      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                      uint64_t v78 = BidirectionalCollection<>.joined(separator:)();
                      unint64_t v80 = v79;
                      swift_bridgeObjectRelease();
                      sub_100290514(v78, v80, &v105);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();
                      swift_bridgeObjectRelease();
                      sub_10006D144(v103, v98);
                      sub_10006D144(v103, v98);
                      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Decryption failed for secure channel with payload %s", v77, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                      sub_10006D144(v103, v98);
                      sub_10006D144(v103, v98);
                    }

                    uint64_t v18 = (uint64_t)v88;
                    sub_10007567C();
                    swift_allocError();
                    *uint64_t v85 = 0;
                    swift_willThrow();

                    uint64_t v43 = v99;
                    unint64_t v44 = v101;
LABEL_63:
                    sub_100075868(v43, v44);
                    return v18;
                  }
                  int v81 = *(_DWORD *)(v97 + 64);
                  BOOL v82 = __CFADD__(v81, 1);
                  int v83 = v81 + 1;
                  if (!v82)
                  {
                    *(_DWORD *)(v97 + 64) = v83;
                    id v84 = v86;
                    uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

                    sub_100075868(v99, v101);
                    return v18;
                  }
                  __break(1u);
                  goto LABEL_75;
                }
LABEL_73:
                swift_once();
                goto LABEL_50;
              }
            }
            __break(1u);
            goto LABEL_69;
          case 2uLL:
            prots = a3->prots;
            inst_meths = a3->inst_meths;
            BOOL v13 = __OFSUB__(inst_meths, prots);
            int64_t v29 = (char *)inst_meths - (char *)prots;
            if (!v13) {
              goto LABEL_24;
            }
            goto LABEL_72;
          case 3uLL:
            goto LABEL_29;
          default:
            int64_t v29 = BYTE6(a4);
            goto LABEL_24;
        }
      }
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      swift_once();
LABEL_9:
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E55C(v15, (uint64_t)qword_100459F68);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      uint64_t v18 = v17;
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v18, "Decrypt message called before bleSKReader is derived", v19, 2u);
LABEL_15:
        swift_slowDealloc();
      }
LABEL_17:

      sub_10007567C();
      swift_allocError();
      unsigned char *v26 = 0;
      swift_willThrow();
      return v18;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_65;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100266BA4(void *a1, unint64_t a2, uint64_t a3, objc_class *a4)
{
  if (*(_DWORD *)(v4 + 68) > 0xFEu)
  {
    if (qword_100453888 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_100459F68);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_12;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Counter has reached max value cannot encrypt";
    goto LABEL_11;
  }
  uint64_t v6 = v4;
  unint64_t v7 = *(void *)(v4 + 40);
  if (v7 >> 60 == 15)
  {
    if (qword_100453888 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E55C(v8, (uint64_t)qword_100459F68);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10)) {
      goto LABEL_12;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    uint64_t v12 = "Encrypt message called before bleSKDevice is derived";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v12, v11, 2u);
    swift_slowDealloc();
LABEL_12:

    sub_10007567C();
    swift_allocError();
    *unint64_t v14 = 0;
    return swift_willThrow();
  }
  uint64_t v16 = a4;
  os_log_type_t v17 = *(__objc2_prot **)(v4 + 32);
  uint64_t v101 = (uint64_t)v17;
  switch((unint64_t)a4 >> 62)
  {
    case 1uLL:
      LODWORD(v21) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        swift_once();
      }
      else
      {
        uint64_t v21 = (int)v21;
LABEL_18:
        if (v21 != 4)
        {
LABEL_22:
          sub_10006D0EC((uint64_t)v17, v7);
          if (qword_100453888 != -1) {
            swift_once();
          }
          uint64_t v27 = type metadata accessor for Logger();
          sub_10008E55C(v27, (uint64_t)qword_100459F68);
          sub_10006D0EC(a3, (unint64_t)v16);
          sub_10006D0EC(a3, (unint64_t)v16);
          uint64_t v28 = Logger.logObject.getter();
          os_log_type_t v29 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = swift_slowAlloc();
            *(void *)&long long v102 = swift_slowAlloc();
            *(_DWORD *)uint64_t v30 = 136315394;
            uint64_t v103 = (uint64_t)sub_10023CDF4(a3, (unint64_t)v16);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            unint64_t v100 = v7;
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v33 = v32;
            swift_bridgeObjectRelease();
            uint64_t v103 = sub_100290514(v31, v33, (uint64_t *)&v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(a3, (unint64_t)v16);
            sub_10006D144(a3, (unint64_t)v16);
            *(_WORD *)(v30 + 12) = 2048;
            uint64_t v103 = 4;
            unint64_t v7 = v100;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v28, v29, "Malformed header %s, expected length %ld", (uint8_t *)v30, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10006D144(a3, (unint64_t)v16);
            sub_10006D144(a3, (unint64_t)v16);
          }

          sub_10007567C();
          swift_allocError();
          *unint64_t v34 = 0;
          swift_willThrow();
          uint64_t v35 = v101;
          unint64_t v36 = v7;
          return sub_100075868(v35, v36);
        }
        sub_10006D0EC((uint64_t)v17, v7);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        unint64_t v99 = v7;
        Class v96 = Data._bridgeToObjectiveC()().super.isa;
        id v25 = [objc_allocWithZone((Class)NSMutableData) initWithLength:16];
        if (!v25)
        {
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
          JUMPOUT(0x100267948);
        }
        uint64_t v26 = 0;
        switch(a2 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_56;
            }
            uint64_t v26 = HIDWORD(a1) - (int)a1;
LABEL_31:
            id v98 = v25;
            id v39 = [objc_allocWithZone((Class)NSMutableData) initWithLength:v26];
            if (!v39) {
              goto LABEL_59;
            }
            id v40 = v39;
            id v41 = [objc_allocWithZone((Class)NSMutableData) init];
            v42.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            [v41 appendU64BE:1];
            [v41 appendU32BE:*(unsigned int *)(v6 + 68)];
            if (qword_100453888 != -1) {
              swift_once();
            }
            uint64_t v43 = type metadata accessor for Logger();
            sub_10008E55C(v43, (uint64_t)qword_100459F68);
            sub_10006D0EC((uint64_t)a1, a2);
            sub_10006D0EC((uint64_t)a1, a2);
            unint64_t v44 = Logger.logObject.getter();
            os_log_type_t typea = static os_log_type_t.debug.getter();
            id v93 = v40;
            if (os_log_type_enabled(v44, typea))
            {
              uint64_t v45 = (uint8_t *)swift_slowAlloc();
              *(void *)&long long v102 = swift_slowAlloc();
              *(_DWORD *)uint64_t v45 = 136315138;
              bufa = v45;
              uint64_t v103 = (uint64_t)sub_10023CDF4((uint64_t)a1, a2);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
              uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
              loga = v44;
              unint64_t v48 = v47;
              swift_bridgeObjectRelease();
              uint64_t v103 = sub_100290514(v46, v48, (uint64_t *)&v102);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006D144((uint64_t)a1, a2);
              sub_10006D144((uint64_t)a1, a2);
              _os_log_impl((void *)&_mh_execute_header, loga, typea, "LyonBLE Encryption payload: %s", bufa, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_10006D144((uint64_t)a1, a2);
              sub_10006D144((uint64_t)a1, a2);
            }
            id v49 = v41;
            unint64_t v50 = v42.super.isa;
            a1 = v49;
            uint64_t v16 = v50;
            unint64_t v51 = Logger.logObject.getter();
            os_log_type_t v52 = static os_log_type_t.debug.getter();
            os_log_type_t type = v51;
            id v53 = &OBJC_PROTOCOL___SEServerProtocol;
            if (!os_log_type_enabled(v51, v52))
            {

              Class v64 = v96;
              Class v65 = isa;
              goto LABEL_41;
            }
            os_log_type_t v91 = v52;
            uint64_t v5 = swift_slowAlloc();
            *(void *)&long long v102 = swift_slowAlloc();
            *(_DWORD *)uint64_t v5 = 136381187;
            id v54 = [a1 asHexString];
            uint64_t v55 = v16;
            uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v58 = v57;

            uint64_t v103 = sub_100290514(v56, v58, (uint64_t *)&v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v5 + 12) = 2081;
            id v59 = [(objc_class *)v55 asHexString];
            uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v62 = v61;

            uint64_t v63 = v60;
            uint64_t v16 = v55;
            uint64_t v103 = sub_100290514(v63, v62, (uint64_t *)&v102);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v5 + 22) = 1024;
            os_log_type_t v17 = &OBJC_PROTOCOL___SEServerProtocol;
            if (qword_100453670 != -1) {
              goto LABEL_54;
            }
            break;
          case 2uLL:
            uint64_t v38 = a1[2];
            uint64_t v37 = a1[3];
            uint64_t v26 = v37 - v38;
            if (!__OFSUB__(v37, v38)) {
              goto LABEL_31;
            }
            goto LABEL_57;
          case 3uLL:
            goto LABEL_31;
          default:
            uint64_t v26 = BYTE6(a2);
            goto LABEL_31;
        }
      }
      LODWORD(v103) = byte_100468520;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, type, v91, "LyonBLE Encryption parameters iv: %{private}s, aad: %{private}s, isAADUsed: %{BOOL}d", (uint8_t *)v5, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      Class v64 = v96;
      Class v65 = isa;
      id v53 = v17;
LABEL_41:
      ccaes_gcm_encrypt_mode();
      [(objc_class *)v64 length];
      buf = v64;
      [(uint8_t *)buf bytes];
      [a1 length];
      id v66 = a1;
      [v66 bytes];
      if (*(void *)&v53[22].cb != -1) {
        swift_once();
      }
      id v92 = v16;
      char v88 = v66;
      if (byte_100468520 == 1)
      {
        [(objc_class *)v16 length];
        [(objc_class *)v16 bytes];
      }
      [(objc_class *)v65 length];
      os_log_t log = v65;
      [log bytes];
      id v85 = v93;
      [v85 mutableBytes];
      id v67 = v98;
      [v67 mutableBytes];
      int v68 = ccgcm_one_shot();
      if (v68)
      {
        int v69 = v68;
        id v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v71))
        {
          unint64_t v72 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)unint64_t v72 = 67109120;
          LODWORD(v102) = v69;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Lyon BLE encryption failed with result %d", v72, 8u);
          swift_slowDealloc();
        }

        sub_10007567C();
        swift_allocError();
        unsigned char *v73 = 0;
        swift_willThrow();

        uint64_t v35 = v101;
        unint64_t v36 = v99;
        return sub_100075868(v35, v36);
      }
      int v74 = *(_DWORD *)(v6 + 68);
      BOOL v75 = __CFADD__(v74, 1);
      int v76 = v74 + 1;
      if (v75)
      {
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      *(_DWORD *)(v6 + 68) = v76;
      long long v102 = xmmword_100378350;
      id v77 = v85;
      uint64_t v78 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v80 = v79;

      Data.append(_:)();
      sub_10006D144(v78, v80);
      id v81 = v67;
      uint64_t v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v84 = v83;

      Data.append(_:)();
      sub_100075868(v101, v99);

      sub_10006D144(v82, v84);
      return v102;
    case 2uLL:
      uint64_t v23 = *(void *)(a3 + 16);
      uint64_t v22 = *(void *)(a3 + 24);
      BOOL v24 = __OFSUB__(v22, v23);
      uint64_t v21 = v22 - v23;
      if (!v24) {
        goto LABEL_18;
      }
      goto LABEL_53;
    case 3uLL:
      goto LABEL_22;
    default:
      uint64_t v21 = BYTE6(a4);
      goto LABEL_18;
  }
}

void sub_100267968(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 48);
  unint64_t v6 = *(void *)(v2 + 56);
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  sub_100075868(v5, v6);
  sub_10006D0EC(a1, a2);
  if (qword_100453888 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10008E55C(v7, (uint64_t)qword_100459F68);
  sub_10006D0EC(a1, a2);
  sub_10006D0EC(a1, a2);
  osos_log_t log = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    sub_10023CDF4(a1, a2);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v10 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v12 = v11;
    swift_bridgeObjectRelease();
    sub_100290514(v10, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a1, a2);
    sub_10006D144(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Set supported protocol versions as %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10006D144(a1, a2);
    sub_10006D144(a1, a2);
  }
}

uint64_t sub_100267C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7 = [objc_allocWithZone((Class)NSMutableData) initWithLength:32];
  if (!v7) {
    goto LABEL_5;
  }
  os_log_type_t v8 = v7;
  unint64_t v9 = *(void *)(v5 + 56);
  if (v9 >> 60 == 15 || (*(unsigned char *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion + 2) & 1) != 0)
  {

LABEL_5:
    if (qword_100453888 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_100459F68);
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = v12;
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v13, "Data to derive keys cannot be initializd", v14, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    *uint64_t v15 = 0;
    swift_willThrow();
    return v13;
  }
  uint64_t v17 = *(void *)(v5 + 48);
  unsigned int v18 = *(unsigned __int16 *)(a5 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion);
  long long v66 = xmmword_100378350;
  uint64_t v62 = v17;
  sub_10006D0EC(v17, v9);
  if (qword_100453670 != -1) {
    swift_once();
  }
  unint64_t v61 = v9;
  if (byte_100468520 == 1)
  {
    Data.append(_:)();
    __int16 v19 = __rev16(v18);
  }
  else
  {
    unsigned int log = v18;
    unint64_t v20 = v9 >> 62;
    uint64_t v21 = sub_10006C51C(&qword_100454158);
    uint64_t v64 = v21;
    uint64_t v58 = sub_10008C0B0((unint64_t *)&qword_100454160, &qword_100454158);
    uint64_t v65 = v58;
    LOBYTE(v63[0]) = 92;
    sub_100075908(v63, v21);
    Data._Representation.replaceSubrange(_:with:count:)();
    sub_10007594C((uint64_t)v63);
    LOBYTE(v22) = 0;
    switch((int)v20)
    {
      case 1:
        LODWORD(v22) = HIDWORD(v62) - v62;
        if (__OFSUB__(HIDWORD(v62), v62))
        {
          __break(1u);
LABEL_36:
          __break(1u);
        }
        unint64_t v22 = (int)v22;
LABEL_20:
        if ((v22 & 0x8000000000000000) != 0 || v22 >= 0x100)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x100268538);
        }
LABEL_22:
        uint64_t v64 = v21;
        uint64_t v65 = v58;
        LOBYTE(v63[0]) = v22;
        sub_100075908(v63, v21);
        Data._Representation.replaceSubrange(_:with:count:)();
        sub_10007594C((uint64_t)v63);
        Data.append(_:)();
        Data._Representation.append(contentsOf:)();
        __int16 v19 = __rev16(log);
        break;
      case 2:
        uint64_t v24 = *(void *)(v62 + 16);
        uint64_t v23 = *(void *)(v62 + 24);
        BOOL v25 = __OFSUB__(v23, v24);
        unint64_t v22 = v23 - v24;
        if (!v25) {
          goto LABEL_20;
        }
        goto LABEL_36;
      case 3:
        goto LABEL_22;
      default:
        LOBYTE(v22) = BYTE6(v61);
        goto LABEL_22;
    }
  }
  LOWORD(v63[0]) = v19;
  uint64_t v26 = sub_1000806B4((uint64_t)v63, (uint64_t)v63 + 2);
  unint64_t v28 = v27;
  Data.append(_:)();
  sub_10006D144(v26, v28);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v30 = Data._bridgeToObjectiveC()().super.isa;
  long long v31 = v66;
  sub_10006D0EC(v66, *((unint64_t *)&v66 + 1));
  Class v32 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v31, *((unint64_t *)&v31 + 1));
  ccsha256_di();
  [(objc_class *)v30 length];
  unint64_t v57 = v30;
  [(objc_class *)v57 bytes];
  [(objc_class *)v32 length];
  uint64_t v56 = v32;
  [(objc_class *)v56 bytes];
  [(objc_class *)isa length];
  uint64_t v55 = isa;
  [(objc_class *)v55 bytes];
  [v8 length];
  id type = v8;
  [type mutableBytes];
  int v33 = cchkdf();
  if (v33)
  {
    int v34 = v33;
    if (qword_100453888 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_10008E55C(v35, (uint64_t)qword_100459F68);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    uint64_t v13 = v37;
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 67109120;
      LODWORD(v63[0]) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v13, "Unable to derive key with error: %d", v38, 8u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    unsigned char *v39 = 0;
    swift_willThrow();
    sub_100075868(v62, v61);

    sub_10006D144(v66, *((unint64_t *)&v66 + 1));
  }
  else
  {
    if (qword_100453888 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10008E55C(v40, (uint64_t)qword_100459F68);
    id v41 = type;
    NSData v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      loga = v42;
      os_log_type_t typea = v43;
      unint64_t v44 = (uint8_t *)swift_slowAlloc();
      v63[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v44 = 136380675;
      buf = v44;
      uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v47 = v46;
      sub_10023CDF4(v45, v46);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v48 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      sub_10006D144(v45, v47);
      sub_100290514(v48, v50, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, loga, typea, "Derived %{private}s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    id v51 = v41;
    uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100075868(v62, v61);

    sub_10006D144(v66, *((unint64_t *)&v66 + 1));
  }
  return v13;
}

uint64_t sub_100268558()
{
  sub_100075868(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_100075868(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100075868(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LyonBLESecureChannel()
{
  return self;
}

uint64_t sub_1002685C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100459F68);
  sub_10008E55C(v0, (uint64_t)qword_100459F68);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10026863C()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    do
    {
      Swift::String_optional v5 = String.Iterator.next()();
      if (!v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (countAndFlagsBits == v5.value._countAndFlagsBits && object == v5.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v3 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v4 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v4.value._countAndFlagsBits;
      object = v4.value._object;
    }
    while (v4.value._object);
  }
  swift_bridgeObjectRelease();
  unint64_t v6 = String.Iterator.next()().value._object;
  swift_bridgeObjectRelease();
  BOOL v7 = v6 == 0;
  swift_bridgeObjectRelease();
  return v7;
}

id sub_1002687A4()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1, v2);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  BOOL v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_type_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v27 = OBJC_IVAR____TtC10seserviced15SESAssetManager_queue;
  uint64_t v26 = sub_10007582C(0, (unint64_t *)&qword_1004566E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v15 = v0;
  DispatchQoS.init(qosClass:relativePriority:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  Class v30 = _swiftEmptyArrayStorage;
  sub_100271880((unint64_t *)&qword_1004566E8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10006C51C(&qword_1004566F0);
  sub_100176E90((unint64_t *)&qword_1004566F8, &qword_1004566F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v27] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning] = 0;
  uint64_t v16 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_staticAssetPath];
  *(void *)uint64_t v16 = 0xD000000000000021;
  *((void *)v16 + 1) = 0x80000001003B97C0;
  uint64_t v17 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_activeAssetPath];
  *(void *)uint64_t v17 = 0xD000000000000037;
  *((void *)v17 + 1) = 0x80000001003B97F0;
  *(void *)&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_minimumCompatibilityVersion] = 4;
  *(void *)&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentCompatibilityVersion] = 4;
  *(void *)&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = 0;
  unsigned int v18 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
  *(void *)unsigned int v18 = 0x666E497465737341;
  *((void *)v18 + 1) = 0xEF7473696C702E6FLL;
  __int16 v19 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix];
  *(void *)__int16 v19 = 0x5F656C69666F7270;
  *((void *)v19 + 1) = 0xE800000000000000;
  unint64_t v20 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey];
  *(void *)unint64_t v20 = 0xD000000000000015;
  *((void *)v20 + 1) = 0x80000001003B9830;
  uint64_t v21 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey];
  *(void *)uint64_t v21 = 0x746E65746E6F435FLL;
  *((void *)v21 + 1) = 0xEF6E6F6973726556;
  unint64_t v22 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey];
  strcpy(&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey], "Manufacturer");
  v22[13] = 0;
  *((_WORD *)v22 + 7) = -5120;
  uint64_t v23 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey];
  *(void *)uint64_t v23 = 0x6E6F6973726556;
  *((void *)v23 + 1) = 0xE700000000000000;
  uint64_t v24 = &v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_lastAssetCheckBootUUIDKey];
  *(void *)uint64_t v24 = 0xD00000000000001CLL;
  *((void *)v24 + 1) = 0x80000001003B9850;
  *(void *)&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_mobileAssetClient] = 0;
  *(void *)&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates] = _swiftEmptyArrayStorage;
  *(void *)&v15[OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity] = 0;

  v29.receiver = v15;
  v29.super_class = ObjectType;
  return [super init];
}

id sub_100268D04()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SESAssetManager()) init];
  qword_10045A040 = (uint64_t)result;
  return result;
}

void sub_100268D60()
{
  if (qword_100453890 != -1) {
    swift_once();
  }
  sub_100268DC0();
}

void sub_100268DC0()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v87 = *(void *)(v3 - 8);
  uint64_t v88 = v3;
  __chkstk_darwin(v3, v4);
  os_log_type_t v89 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v90 - 8);
  uint64_t v12 = __chkstk_darwin(v90, v11);
  uint64_t v14 = (char *)v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  unint64_t v83 = (char *)v75 - v17;
  __chkstk_darwin(v16, v18);
  id v86 = ((char *)v75 - v19);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (void *)((char *)v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  BOOL v25 = *(void **)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  id v85 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v21 + 8))(v24, v20);
  if (v25)
  {
    if ((v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning] & 1) == 0)
    {
      id v81 = v14;
      uint64_t v84 = v1;
      uint64_t v77 = OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning;
      uint64_t v78 = &v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_logger];
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v27))
      {
        unint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Asset Manager starting", v28, 2u);
        swift_slowDealloc();
      }

      uint64_t v82 = v10;
      objc_super v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v29(v9, 1, 1, v90);
      Class v30 = *(void (**)(void))(v87 + 104);
      unsigned int v80 = enum case for URL.DirectoryHint.inferFromPath(_:);
      unint64_t v79 = (void (*)(char *, void, uint64_t))v30;
      v30(v89);
      swift_bridgeObjectRetain();
      long long v31 = v86;
      URL.init(filePath:directoryHint:relativeTo:)();
      Class v32 = self;
      v75[1] = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_lastAssetCheckBootUUIDKey];
      NSString v33 = String._bridgeToObjectiveC()();
      id v76 = v32;
      LODWORD(v32) = [v32 isFirstLaunchAfterBootForKey:v33];

      if (v32)
      {
        uint64_t v34 = v84;
        sub_100269A9C();
        if (v34)
        {
          (*(void (**)(NSObject *, uint64_t))(v82 + 8))(v31, v90);
          return;
        }
        sub_10026A42C((uint64_t)v31);
        uint64_t v84 = 0;
        v29(v9, 1, 1, v90);
        uint64_t v68 = v88;
        v79(v89, v80, v88);
        swift_bridgeObjectRetain();
        uint64_t v69 = (uint64_t)v83;
        URL.init(filePath:directoryHint:relativeTo:)();
        uint64_t v70 = v84;
        sub_10026B048(v69, v31);
        if (v70) {
          goto LABEL_11;
        }
        sub_10026D7D0((uint64_t)v31);
        uint64_t v35 = 0;
        NSString v71 = String._bridgeToObjectiveC()();
        [v76 setFirstLaunchAfterBootDoneForKey:v71];

        unint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v72, v73))
        {
          int v74 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v74 = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "Asset Manager first launch after boot complete", v74, 2u);
          uint64_t v68 = v88;
          swift_slowDealloc();
        }

        (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v69, v90);
      }
      else
      {
        uint64_t v35 = v84;
        uint64_t v68 = v88;
      }
      unint64_t v36 = v89;
      uint64_t v37 = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8];
      uint64_t aBlock = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
      uint64_t v92 = v37;
      v79(v89, v80, v68);
      sub_1001150C4();
      swift_bridgeObjectRetain();
      uint64_t v69 = (uint64_t)v81;
      URL.appending<A>(path:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v36, v68);
      swift_bridgeObjectRelease();
      sub_100270FA4(v69, *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey], *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8]);
      if (v35)
      {
LABEL_11:
        id v39 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
        uint64_t v40 = v69;
        uint64_t v41 = v90;
        v39(v40, v90);
        v39((uint64_t)v31, v41);
        return;
      }
      uint64_t v42 = v38;
      *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = v38;
      os_log_type_t v43 = v2;
      unint64_t v44 = v2;
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.info.getter();
      BOOL v47 = os_log_type_enabled(v45, v46);
      uint64_t v48 = v90;
      if (v47)
      {
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 134218240;
        uint64_t aBlock = 4;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v49 + 12) = 2048;
        uint64_t aBlock = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Asset Manager compatibility version %lu content version %lu", (uint8_t *)v49, 0x16u);
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = v44;
      unint64_t v95 = sub_1002717D0;
      uint64_t v96 = v50;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v92 = 1107296256;
      id v93 = sub_1002B9D80;
      os_log_type_t v94 = &unk_100417700;
      id v51 = _Block_copy(&aBlock);
      os_log_type_t v52 = v44;
      swift_release();
      os_state_add_handler();
      _Block_release(v51);
      uint64_t v53 = self;
      sub_1000508B0(v53, 4, v42);
      id v54 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
      NSString v55 = String._bridgeToObjectiveC()();
      id v56 = [v54 initWithIdentifier:v55];

      uint64_t v57 = OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity;
      uint64_t v58 = *(void **)&v52[OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity];
      *(void *)&v52[OBJC_IVAR____TtC10seserviced15SESAssetManager_caStatisticsActivity] = v56;

      id v59 = *(void **)&v52[v57];
      if (v59)
      {
        [v59 setPreregistered:1];
        uint64_t v60 = *(void **)&v52[v57];
        if (v60)
        {
          uint64_t v61 = swift_allocObject();
          *(void *)(v61 + 16) = v52;
          unint64_t v95 = sub_10027182C;
          uint64_t v96 = v61;
          uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
          uint64_t v92 = 1107296256;
          id v93 = sub_1001E7F30;
          os_log_type_t v94 = &unk_100417750;
          uint64_t v62 = _Block_copy(&aBlock);
          uint64_t v63 = v52;
          id v64 = v60;
          swift_release();
          [v64 scheduleWithBlock:v62];
          _Block_release(v62);
        }
      }
      id v65 = [objc_allocWithZone((Class)SESMobileAssetClient) initWithManager:v52];
      long long v66 = *(void (**)(char *, uint64_t))(v82 + 8);
      v66(v81, v48);
      v66((char *)v86, v48);
      id v67 = *(void **)&v52[OBJC_IVAR____TtC10seserviced15SESAssetManager_mobileAssetClient];
      *(void *)&v52[OBJC_IVAR____TtC10seserviced15SESAssetManager_mobileAssetClient] = v65;

      v43[v77] = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1002698FC()
{
  if (qword_100453890 != -1) {
    swift_once();
  }
  Swift::String_optional v0 = (void *)(qword_10045A040 + OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates);
  swift_beginAccess();
  swift_unknownObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

void sub_100269A9C()
{
  uint64_t v72 = type metadata accessor for URLResourceValues();
  uint64_t v70 = *(void (***)(char *, uint64_t))(v72 - 8);
  __chkstk_darwin(v72, v0);
  uint64_t v78 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v77 = (char *)&v54 - v13;
  uint64_t v14 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v68 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v67 = self;
  id v18 = [v67 defaultManager];
  uint64_t v76 = sub_10006C51C(&qword_10045A168);
  uint64_t v19 = swift_allocObject();
  long long v75 = xmmword_100378290;
  *(_OWORD *)(v19 + 16) = xmmword_100378290;
  *(void *)(v19 + 32) = NSURLIsRegularFileKey;
  int v74 = NSURLIsRegularFileKey;
  uint64_t v20 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  swift_bridgeObjectRelease();
  if (!v20) {
    return;
  }
  uint64_t v63 = v11;
  uint64_t v65 = v14;
  id v64 = v20;
  NSEnumerator.makeIterator()();
  uint64_t v21 = OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix;
  uint64_t v22 = OBJC_IVAR____TtC10seserviced15SESAssetManager_logger;
  uint64_t v23 = v17;
  NSFastEnumerationIterator.next()();
  if (!v82)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v68 + 8))(v23, v65);

    return;
  }
  long long v66 = (char *)v73 + v21;
  uint64_t v61 = (char *)v73 + v22;
  BOOL v25 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  NSString v71 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  ++v70;
  os_log_type_t v73 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v60 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  id v59 = &v81;
  *(void *)&long long v24 = 136315138;
  long long v58 = v24;
  os_log_type_t v27 = v77;
  uint64_t v69 = (char *)&type metadata for Any + 8;
  while (1)
  {
    int v28 = swift_dynamicCast();
    objc_super v29 = *v25;
    if (v28) {
      break;
    }
    v29(v5, 1, 1, v6);
LABEL_5:
    sub_10008E734((uint64_t)v5, &qword_100455978);
LABEL_6:
    NSFastEnumerationIterator.next()();
    if (!v82) {
      goto LABEL_21;
    }
  }
  v29(v5, 0, 1, v6);
  if ((*v26)(v5, 1, v6) == 1) {
    goto LABEL_5;
  }
  Class v30 = v26;
  long long v31 = v23;
  (*v71)(v27, v5, v6);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = v75;
  NSString v33 = v74;
  *(void *)(inited + 32) = v74;
  uint64_t v34 = v33;
  sub_1000AA224(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  uint64_t v35 = v78;
  swift_arrayDestroy();
  uint64_t v36 = v79;
  URL.resourceValues(forKeys:)();
  uint64_t v79 = v36;
  if (v36)
  {

    swift_bridgeObjectRelease();
    (*v73)(v77, v6);
    goto LABEL_24;
  }
  swift_bridgeObjectRelease();
  char v37 = URLResourceValues.isRegularFile.getter();
  if (v37 == 2) {
    __break(1u);
  }
  os_log_type_t v27 = v77;
  if ((v37 & 1) == 0)
  {
    (*v70)(v35, v72);
    (*v73)(v27, v6);
LABEL_20:
    uint64_t v23 = v31;
    uint64_t v26 = v30;
    goto LABEL_6;
  }
  URL.lastPathComponent.getter();
  uint64_t v38 = v27;
  swift_bridgeObjectRetain();
  char v39 = sub_10026863C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    (*v70)(v78, v72);
    (*v73)(v38, v6);
    os_log_type_t v27 = v38;
    goto LABEL_20;
  }
  uint64_t v40 = v63;
  (*v60)(v63, v38, v6);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    os_log_type_t v43 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = (void *)swift_slowAlloc();
    id v81 = v57;
    id v56 = v43;
    *(_DWORD *)os_log_type_t v43 = v58;
    uint64_t v62 = (void (*)(char *, uint64_t))(v43 + 4);
    os_log_t v55 = v41;
    Swift::String v44 = URL.path(percentEncoded:)(1);
    uint64_t v80 = sub_100290514(v44._countAndFlagsBits, (unint64_t)v44._object, (uint64_t *)&v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v62 = *v73;
    v62(v40, v6);
    os_log_t v45 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, v42, "Deleting profile %s", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v62 = *v73;
    v62(v40, v6);
  }
  id v46 = [v67 defaultManager];
  os_log_type_t v27 = v77;
  URL._bridgeToObjectiveC()(v47);
  uint64_t v49 = v48;
  id v81 = 0;
  unsigned int v50 = [v46 removeItemAtURL:v48 error:&v81];

  if (v50)
  {
    id v51 = *v70;
    id v52 = v81;
    v51(v78, v72);
    v62(v27, v6);
    goto LABEL_20;
  }
  id v53 = v81;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  (*v70)(v78, v72);
  v62(v77, v6);
LABEL_24:
  (*(void (**)(char *, uint64_t))(v68 + 8))(v31, v65);
}

uint64_t sub_10026A42C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v76[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v88 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v88 - 8);
  uint64_t v9 = __chkstk_darwin(v88, v8);
  unint64_t v83 = &v76[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v84 = &v76[-v13];
  uint64_t v15 = __chkstk_darwin(v12, v14);
  id v86 = &v76[-v16];
  __chkstk_darwin(v15, v17);
  uint64_t v19 = &v76[-v18];
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  long long v24 = &v76[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  BOOL v25 = *(void **)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  *long long v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v24, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  uint64_t v28 = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8];
  v92[0] = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName];
  v92[1] = v28;
  (*(void (**)(unsigned char *, void, uint64_t))(v4 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
  sub_1001150C4();
  swift_bridgeObjectRetain();
  uint64_t v29 = v89;
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  swift_bridgeObjectRelease();
  uint64_t v94 = 0;
  uint64_t v30 = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey];
  uint64_t v31 = *(void *)&v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey + 8];
  uint64_t v32 = v87;
  sub_100270FA4((uint64_t)v19, v30, v31);
  uint64_t v34 = (uint64_t)v19;
  uint64_t v35 = v29;
  if (v32)
  {
    uint64_t v87 = v32;
    id v85 = v19;
    uint64_t v36 = v90;
    char v37 = v86;
    uint64_t v38 = v88;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v90 + 16))(v86, v29, v88);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v92[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      Swift::String v42 = URL.path(percentEncoded:)(1);
      uint64_t v93 = sub_100290514(v42._countAndFlagsBits, (unint64_t)v42._object, v92);
      uint64_t v38 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v43 = *(void (**)(unsigned char *, uint64_t))(v90 + 8);
      v43(v37, v38);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Deleting asset due to failure reading its compatibility version at %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      os_log_type_t v43 = *(void (**)(unsigned char *, uint64_t))(v36 + 8);
      v43(v37, v38);
    }
    sub_10026EE30(v89);
    v43(v85, v38);
    return swift_errorRelease();
  }
  uint64_t v94 = v33;
  uint64_t v44 = v90;
  if (v33 == 4) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v90 + 8))(v19, v88);
  }
  uint64_t v87 = 0;
  os_log_t v45 = &v2[OBJC_IVAR____TtC10seserviced15SESAssetManager_logger];
  id v46 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v90 + 16);
  BOOL v47 = v84;
  uint64_t v48 = v88;
  uint64_t v80 = v90 + 16;
  uint64_t v79 = v46;
  v46(v84, v35, v88);
  uint64_t v49 = v2;
  uint64_t v82 = v45;
  unsigned int v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  int v52 = v51;
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v53 = swift_slowAlloc();
    id v81 = v49;
    uint64_t v54 = v53;
    uint64_t v78 = swift_slowAlloc();
    v92[0] = v78;
    *(_DWORD *)uint64_t v54 = 134218498;
    int v77 = v52;
    swift_beginAccess();
    uint64_t v93 = v94;
    id v85 = (unsigned char *)v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 12) = 2048;
    uint64_t v93 = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v54 + 22) = 2080;
    Swift::String v55 = URL.path(percentEncoded:)(1);
    uint64_t v93 = sub_100290514(v55._countAndFlagsBits, (unint64_t)v55._object, v92);
    uint64_t v34 = (uint64_t)v85;
    uint64_t v56 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v86 = *(unsigned char **)(v56 + 8);
    ((void (*)(unsigned char *, uint64_t))v86)(v47, v48);
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v77, "Migrating asset from %lu to %lu at %s", (uint8_t *)v54, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v49 = v81;
    swift_slowDealloc();
  }
  else
  {

    id v86 = *(unsigned char **)(v44 + 8);
    ((void (*)(unsigned char *, uint64_t))v86)(v47, v48);
  }
  swift_beginAccess();
  if (v94 == 4)
  {
    sub_10006C51C(&qword_10045A180);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003782A0;
    *(void *)(inited + 32) = v30;
    *(void *)(inited + 40) = v31;
    *(void *)(inited + 48) = 4;
    uint64_t v58 = *(void *)&v49[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8];
    *(void *)(inited + 56) = *(void *)&v49[OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey];
    *(void *)(inited + 64) = v58;
    *(void *)(inited + 72) = 1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v59 = sub_1001DBEBC(inited);
    *(void *)&v49[OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion] = 1;
    v92[3] = sub_10006C51C(&qword_10045A188);
    v92[0] = v59;
    uint64_t v60 = v87;
    sub_100271388(v92);
    if (!v60)
    {
      ((void (*)(uint64_t, uint64_t))v86)(v34, v88);
      return sub_10007594C((uint64_t)v92);
    }
    uint64_t v87 = v60;
    sub_10007594C((uint64_t)v92);
    uint64_t v61 = v83;
    uint64_t v62 = v88;
    v79(v83, v34, v88);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      id v81 = v49;
      v92[0] = v66;
      id v85 = (unsigned char *)v34;
      *(_DWORD *)uint64_t v65 = 136315138;
      Swift::String v67 = URL.path(percentEncoded:)(1);
      uint64_t v91 = sub_100290514(v67._countAndFlagsBits, (unint64_t)v67._object, v92);
      uint64_t v34 = (uint64_t)v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v68 = (void (*)(uint64_t, uint64_t))v86;
      ((void (*)(unsigned char *, uint64_t))v86)(v61, v62);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Failed to write updated asset info to %s", v65, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v68 = (void (*)(uint64_t, uint64_t))v86;
      ((void (*)(unsigned char *, uint64_t))v86)(v61, v62);
    }
    sub_10026EE30(v34);
    v68(v34, v62);
    return swift_errorRelease();
  }
  uint64_t v69 = v34;
  uint64_t v70 = v49;
  NSString v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 134218496;
    v92[0] = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v73 + 12) = 2048;
    v92[0] = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v73 + 22) = 2048;

    v92[0] = 4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Can't migrate asset compatibility version %lu current %lu minimum %ld", (uint8_t *)v73, 0x20u);
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v74 = v88;
  uint64_t v75 = v89;

  sub_10026EE30(v75);
  return ((uint64_t (*)(uint64_t, uint64_t))v86)(v69, v74);
}

uint64_t sub_10026B048(uint64_t a1, NSObject *a2)
{
  os_log_t v278 = a2;
  uint64_t v279 = a1;
  uint64_t v3 = sub_10006C51C(&qword_10045A160);
  uint64_t v5 = __chkstk_darwin(v3 - 8, v4);
  v262 = (char *)&v236 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  unint64_t v263 = (char *)&v236 - v8;
  unint64_t v255 = (void (**)(uint64_t, uint64_t, void *))type metadata accessor for URLResourceValues();
  unint64_t v249 = *(v255 - 1);
  __chkstk_darwin(v255, v9);
  os_log_type_t v257 = (char *)&v236 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v256 = (uint64_t *)((char *)&v236 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v251 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v250 = *(void (***)(char *, uint64_t))(v251 - 8);
  __chkstk_darwin(v251, v14);
  v260 = (char *)&v236 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v268 = type metadata accessor for URL.DirectoryHint();
  uint64_t v270 = *(void *)(v268 - 8);
  __chkstk_darwin(v268, v16);
  v267 = (char *)&v236 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URL();
  v280 = *(void **)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  v266 = (char *)&v236 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v265 = (char *)&v236 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  v277 = (char *)&v236 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v261 = (char *)&v236 - v30;
  uint64_t v32 = __chkstk_darwin(v29, v31);
  unint64_t v264 = (char *)&v236 - v33;
  uint64_t v35 = __chkstk_darwin(v32, v34);
  uint64_t v247 = (char *)&v236 - v36;
  uint64_t v38 = __chkstk_darwin(v35, v37);
  uint64_t v248 = (char *)&v236 - v39;
  uint64_t v41 = __chkstk_darwin(v38, v40);
  unint64_t v258 = (unint64_t)&v236 - v42;
  uint64_t v44 = __chkstk_darwin(v41, v43);
  uint64_t countAndFlagsBits = (char *)&v236 - v45;
  uint64_t v47 = __chkstk_darwin(v44, v46);
  uint64_t v253 = (char *)&v236 - v48;
  uint64_t v50 = __chkstk_darwin(v47, v49);
  *(void *)&long long v252 = (char *)&v236 - v51;
  uint64_t v53 = __chkstk_darwin(v50, v52);
  Swift::String v55 = ((char *)&v236 - v54);
  uint64_t v57 = __chkstk_darwin(v53, v56);
  v269 = ((char *)&v236 - v58);
  uint64_t v60 = __chkstk_darwin(v57, v59);
  uint64_t v62 = (char *)&v236 - v61;
  __chkstk_darwin(v60, v63);
  uint64_t v65 = (char *)&v236 - v64;
  uint64_t v66 = type metadata accessor for DispatchPredicate();
  uint64_t v67 = *(void *)(v66 - 8);
  __chkstk_darwin(v66, v68);
  uint64_t v70 = (uint64_t *)((char *)&v236 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0));
  NSString v71 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_queue);
  *uint64_t v70 = v71;
  (*(void (**)(void *, void, uint64_t))(v67 + 104))(v70, enum case for DispatchPredicate.onQueue(_:), v66);
  id v72 = v71;
  uint64_t v73 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v67 + 8))(v70, v66);
  if ((v73 & 1) == 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  uint64_t v275 = v2;
  uint64_t v74 = v2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_logger;
  uint64_t v76 = v280 + 2;
  uint64_t v75 = (void (*)(char *, uint64_t, uint64_t))v280[2];
  v75(v65, v279, v18);
  v273 = v76;
  v272 = v75;
  v75(v62, (uint64_t)v278, v18);
  uint64_t v271 = v74;
  int v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.info.getter();
  int v79 = v78;
  BOOL v80 = os_log_type_enabled(v77, v78);
  os_log_t v259 = v55;
  v276 = (void *)v18;
  if (v80)
  {
    uint64_t v81 = swift_slowAlloc();
    uint64_t v246 = (void (*)(char *, void *))swift_slowAlloc();
    v284._uint64_t countAndFlagsBits = (uint64_t)v246;
    *(_DWORD *)uint64_t v81 = 136315394;
    LODWORD(v245) = v79;
    Swift::String v82 = URL.path(percentEncoded:)(1);
    v286._uint64_t countAndFlagsBits = sub_100290514(v82._countAndFlagsBits, (unint64_t)v82._object, &v284._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v83 = (void (*)(char *, uint64_t))v280[1];
    v83(v65, v18);
    *(_WORD *)(v81 + 12) = 2080;
    Swift::String v84 = URL.path(percentEncoded:)(1);
    v286._uint64_t countAndFlagsBits = sub_100290514(v84._countAndFlagsBits, (unint64_t)v84._object, &v284._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v83(v62, v18);
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v245, "Trying to apply %s on top of %s", (uint8_t *)v81, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v83 = (void (*)(char *, uint64_t))v280[1];
    v83(v65, v18);
    v83(v62, v18);
  }
  uint64_t v85 = (uint64_t)[self defaultManager];
  char v283 = 0;
  URL.path(percentEncoded:)(1);
  NSString v86 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v87 = [(id)v85 fileExistsAtPath:v86 isDirectory:&v283];

  uint64_t v88 = v277;
  if (!v87 || v283 != 1)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    v284._uint64_t countAndFlagsBits = 0;
    v284._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    v284._uint64_t countAndFlagsBits = 0xD000000000000018;
    v284._object = (void *)0x80000001003B95F0;
    Swift::String v106 = URL.path(percentEncoded:)(1);
    String.append(_:)(v106);
    swift_bridgeObjectRelease();
    sub_100299FAC(0, 1, v284._countAndFlagsBits, (uint64_t)v284._object, 0);
    swift_willThrow();
    goto LABEL_12;
  }
  URL.path(percentEncoded:)(1);
  NSString v89 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v90 = [(id)v85 fileExistsAtPath:v89 isDirectory:&v283];

  uint64_t v246 = (void (*)(char *, void *))v83;
  if (!v90 || v283 != 1)
  {
    int v108 = v276;
    v272(v88, (uint64_t)v278, (uint64_t)v276);
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      uint64_t v112 = swift_slowAlloc();
      id v245 = (id)v85;
      v284._uint64_t countAndFlagsBits = v112;
      *(_DWORD *)uint64_t v111 = 136315138;
      Swift::String v113 = URL.path(percentEncoded:)(1);
      v286._uint64_t countAndFlagsBits = sub_100290514(v113._countAndFlagsBits, (unint64_t)v113._object, &v284._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v83(v88, (uint64_t)v276);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Invalid target asset at %s", v111, 0xCu);
      swift_arrayDestroy();
      uint64_t v85 = (uint64_t)v245;
      swift_slowDealloc();
      int v108 = v276;
      swift_slowDealloc();
    }
    else
    {

      v83(v88, (uint64_t)v108);
    }
    uint64_t v114 = v274;
    os_log_t v115 = v278;
    sub_10026EE30((uint64_t)v278);
    uint64_t v116 = v279;
    if (v114) {
      goto LABEL_12;
    }
    sub_1002715D0();
    uint64_t v117 = v265;
    uint64_t v118 = v272;
    v272(v265, v116, (uint64_t)v108);
    unint64_t v119 = v266;
    v118(v266, (uint64_t)v115, (uint64_t)v108);
    long long v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.info.getter();
    int v122 = v121;
    if (os_log_type_enabled(v120, v121))
    {
      uint64_t v123 = swift_slowAlloc();
      os_log_t v278 = v120;
      uint64_t v124 = v123;
      uint64_t v279 = swift_slowAlloc();
      v284._uint64_t countAndFlagsBits = v279;
      *(_DWORD *)uint64_t v124 = 136315394;
      id v245 = (id)v85;
      LOBYTE(v85) = 1;
      LODWORD(v277) = v122;
      Swift::String v125 = URL.path(percentEncoded:)(1);
      v286._uint64_t countAndFlagsBits = sub_100290514(v125._countAndFlagsBits, (unint64_t)v125._object, &v284._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v126 = v246;
      v246(v117, v108);
      *(_WORD *)(v124 + 12) = 2080;
      v280 = (void *)(v124 + 14);
      uint64_t v127 = v266;
      Swift::String v128 = URL.path(percentEncoded:)(1);
      v286._uint64_t countAndFlagsBits = sub_100290514(v128._countAndFlagsBits, (unint64_t)v128._object, &v284._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v126(v127, v108);
      os_log_t v129 = v278;
      _os_log_impl((void *)&_mh_execute_header, v278, (os_log_type_t)v277, "Copied asset from %s to %s", (uint8_t *)v124, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v133 = v246;
      v246(v117, v108);
      v133(v119, v108);
      LOBYTE(v85) = 1;
    }
    return v85 & 1;
  }
  uint64_t v91 = v275;
  uint64_t v92 = *(void **)(v275 + OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8);
  uint64_t v244 = *(void *)(v275 + OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName);
  v284._uint64_t countAndFlagsBits = v244;
  v284._object = v92;
  uint64_t v93 = v270;
  uint64_t v95 = v270 + 104;
  uint64_t v94 = *(char **)(v270 + 104);
  uint64_t v96 = v267;
  LODWORD(v277) = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v97 = v268;
  v266 = v94;
  ((void (*)(char *))v94)(v267);
  unint64_t v98 = sub_1001150C4();
  v243 = v92;
  swift_bridgeObjectRetain();
  uint64_t v99 = (uint64_t)v269;
  uint64_t v265 = (char *)v98;
  URL.appending<A>(path:directoryHint:)();
  unint64_t v100 = v96;
  uint64_t v103 = *(void (**)(char *, uint64_t))(v93 + 8);
  uint64_t v101 = v93 + 8;
  long long v102 = v103;
  v103(v100, v97);
  swift_bridgeObjectRelease();
  uint64_t v104 = v274;
  sub_100270FA4(v99, *(void *)(v91 + OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey), *(void *)(v91 + OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey + 8));
  uint64_t v66 = v104;
  if (v104)
  {
    v246((char *)v99, v276);
LABEL_12:

    return v85 & 1;
  }
  uint64_t v130 = v105;
  uint64_t v274 = v95;
  uint64_t v270 = v101;
  if (v105 != 4)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    v284._uint64_t countAndFlagsBits = 0;
    v284._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(43);
    swift_bridgeObjectRelease();
    v284._uint64_t countAndFlagsBits = 0xD000000000000029;
    v284._object = (void *)0x80000001003B9610;
    v286._uint64_t countAndFlagsBits = v130;
    v134._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v134);
    swift_bridgeObjectRelease();
    sub_100299FAC(0, 1, v284._countAndFlagsBits, (uint64_t)v284._object, 0);
    swift_willThrow();

    v246((char *)v269, v276);
    return v85 & 1;
  }
  uint64_t v131 = *(void *)(v275 + OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey);
  uint64_t v132 = *(void *)(v275 + OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8);
  sub_100270FA4((uint64_t)v269, v131, v132);
  unint64_t v136 = v135;
  v284._uint64_t countAndFlagsBits = v244;
  v284._object = v243;
  uint64_t v242 = v102;
  uint64_t v137 = v267;
  uint64_t v138 = v268;
  ((void (*)(char *, void, uint64_t))v266)(v267, v277, v268);
  swift_bridgeObjectRetain();
  uint64_t v139 = (uint64_t)v259;
  URL.appending<A>(path:directoryHint:)();
  v242(v137, v138);
  swift_bridgeObjectRelease();
  sub_100270FA4(v139, v131, v132);
  uint64_t v141 = v140;
  if (v140 >= v136)
  {
    uint64_t v155 = (char *)v252;
    uint64_t v156 = v276;
    v272((char *)v252, (uint64_t)v278, (uint64_t)v276);
    int64_t v157 = Logger.logObject.getter();
    os_log_type_t v158 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v157, v158))
    {
      size_t v159 = v155;
      uint64_t v160 = (uint8_t *)swift_slowAlloc();
      uint64_t v161 = swift_slowAlloc();
      id v245 = (id)v85;
      v284._uint64_t countAndFlagsBits = v161;
      *(_DWORD *)uint64_t v160 = 136315138;
      Swift::String v162 = URL.path(percentEncoded:)(1);
      v286._uint64_t countAndFlagsBits = sub_100290514(v162._countAndFlagsBits, (unint64_t)v162._object, &v284._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v163 = v276;
      uint64_t v164 = (void (*)(NSObject *, void *))v246;
      v246(v159, v276);
      _os_log_impl((void *)&_mh_execute_header, v157, v158, "Target asset already up to date %s", v160, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v164(v259, v163);
      v164(v269, v163);
    }
    else
    {

      uint64_t v199 = (void (*)(NSObject *, void *))v246;
      v246(v155, v156);
      v199(v259, v156);
      v199(v269, v156);
    }
    LOBYTE(v85) = 0;
    return v85 & 1;
  }
  int64_t v142 = Logger.logObject.getter();
  os_log_type_t v143 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v142, v143))
  {
    uint64_t v144 = swift_slowAlloc();
    *(_DWORD *)uint64_t v144 = 134218240;
    v284._uint64_t countAndFlagsBits = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v144 + 12) = 2048;
    v284._uint64_t countAndFlagsBits = v141;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v142, v143, "Source asset version %lu target asset version %lu", (uint8_t *)v144, 0x16u);
    swift_slowDealloc();
  }
  unint64_t v238 = v136;

  uint64_t v73 = (uint64_t)v253;
  uint64_t v70 = v276;
  uint64_t v145 = v272;
  v272(v253, (uint64_t)v278, (uint64_t)v276);
  uint64_t v62 = countAndFlagsBits;
  v145(countAndFlagsBits, v279, (uint64_t)v70);
  Swift::String v55 = Logger.logObject.getter();
  os_log_type_t v146 = static os_log_type_t.info.getter();
  int v147 = v146;
  BOOL v148 = os_log_type_enabled(v55, v146);
  id v245 = (id)v85;
  if (v148)
  {
    uint64_t v149 = v70;
    uint64_t v150 = swift_slowAlloc();
    *(void *)&long long v252 = swift_slowAlloc();
    v284._uint64_t countAndFlagsBits = v252;
    *(_DWORD *)uint64_t v150 = 136315394;
    os_log_t v240 = v55;
    LODWORD(v241) = v147;
    Swift::String v151 = URL.path(percentEncoded:)(1);
    v286._uint64_t countAndFlagsBits = sub_100290514(v151._countAndFlagsBits, (unint64_t)v151._object, &v284._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v152 = v246;
    v246((char *)v73, v149);
    *(_WORD *)(v150 + 12) = 2080;
    Swift::String v153 = URL.path(percentEncoded:)(1);
    v286._uint64_t countAndFlagsBits = sub_100290514(v153._countAndFlagsBits, (unint64_t)v153._object, &v284._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v152(v62, v149);
    os_log_t v154 = v240;
    _os_log_impl((void *)&_mh_execute_header, v240, (os_log_type_t)v241, "Updating target asset %s with %s", (uint8_t *)v150, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_34;
  }
LABEL_33:

  uint64_t v165 = v246;
  v246((char *)v73, v70);
  v165(v62, v70);
LABEL_34:
  uint64_t v166 = (uint64_t)v264;
  uint64_t v253 = (char *)sub_10006C51C(&qword_10045A168);
  uint64_t v167 = swift_allocObject();
  long long v252 = xmmword_100378290;
  *(_OWORD *)(v167 + 16) = xmmword_100378290;
  *(void *)(v167 + 32) = NSURLIsRegularFileKey;
  unint64_t v168 = NSURLIsRegularFileKey;
  unint64_t v169 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();
  swift_bridgeObjectRelease();
  if (!v169)
  {
    unint64_t v200 = (char *)&_swiftEmptyDictionarySingleton;
LABEL_67:
    uint64_t v201 = 0;
    uint64_t v202 = 1 << v200[32];
    uint64_t v203 = -1;
    if (v202 < 64) {
      uint64_t v203 = ~(-1 << v202);
    }
    unint64_t v204 = v203 & *((void *)v200 + 8);
    uint64_t v256 = (uint64_t *)(v275 + OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey);
    unint64_t v205 = (unint64_t)(v202 + 63) >> 6;
    unint64_t v255 = (void (**)(uint64_t, uint64_t, void *))(v280 + 4);
    os_log_type_t v257 = (char *)(v280 + 1);
    unint64_t v249 = (v205 - 1);
    uint64_t v253 = (char *)v205;
    uint64_t v251 = v205 - 5;
    *(void *)&long long v252 = v200 + 64;
    uint64_t v250 = (void (**)(char *, uint64_t))(v200 + 104);
    uint64_t countAndFlagsBits = v200;
    while (!v204)
    {
      uint64_t v213 = v201 + 1;
      if (__OFADD__(v201, 1)) {
        __break(1u);
      }
      uint64_t v212 = (uint64_t)v263;
      if (v213 < (uint64_t)v253)
      {
        unint64_t v214 = *(void *)(v252 + 8 * v213);
        if (v214) {
          goto LABEL_79;
        }
        if (v201 + 2 >= (uint64_t)v253)
        {
          ++v201;
        }
        else
        {
          unint64_t v214 = *(void *)(v252 + 8 * (v201 + 2));
          if (v214)
          {
            uint64_t v213 = v201 + 2;
            goto LABEL_79;
          }
          if (v201 + 3 >= (uint64_t)v253)
          {
            v201 += 2;
          }
          else
          {
            unint64_t v214 = *(void *)(v252 + 8 * (v201 + 3));
            if (v214)
            {
              uint64_t v213 = v201 + 3;
              goto LABEL_79;
            }
            uint64_t v213 = v201 + 4;
            if (v201 + 4 >= (uint64_t)v253)
            {
              v201 += 3;
            }
            else
            {
              unint64_t v214 = *(void *)(v252 + 8 * v213);
              if (v214)
              {
LABEL_98:
                uint64_t v166 = (uint64_t)v264;
LABEL_79:
                uint64_t v271 = (v214 - 1) & v214;
                unint64_t v209 = __clz(__rbit64(v214)) + (v213 << 6);
                uint64_t v201 = v213;
LABEL_75:
                uint64_t v85 = (uint64_t)v262;
                v272(v262, *((void *)v200 + 6) + v280[9] * v209, (uint64_t)v276);
                uint64_t v210 = *((void *)v200 + 7);
                uint64_t v211 = sub_10006C51C(&qword_10045A170);
                *(void *)(v85 + *(int *)(v211 + 48)) = *(void *)(v210 + 8 * v209);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v211 - 8) + 56))(v85, 0, 1, v211);
                uint64_t v212 = (uint64_t)v263;
                goto LABEL_85;
              }
              while (v251 != v201)
              {
                unint64_t v214 = (unint64_t)v250[v201++];
                if (v214)
                {
                  uint64_t v213 = v201 + 4;
                  goto LABEL_98;
                }
              }
              uint64_t v201 = (uint64_t)v249;
            }
            uint64_t v212 = (uint64_t)v263;
            uint64_t v166 = (uint64_t)v264;
          }
        }
      }
      uint64_t v215 = sub_10006C51C(&qword_10045A170);
      uint64_t v85 = (uint64_t)v262;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 56))(v262, 1, 1, v215);
      uint64_t v271 = 0;
LABEL_85:
      sub_100076148(v85, v212, &qword_10045A160);
      uint64_t v216 = sub_10006C51C(&qword_10045A170);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v216 - 8) + 48))(v212, 1, v216) == 1)
      {
        swift_release();
        uint64_t v226 = (uint64_t)v269;
        uint64_t v227 = (uint64_t)v259;
        uint64_t v228 = v275;
        sub_10026F3D4((uint64_t)v269, (uint64_t)v259);

        uint64_t v229 = v227;
        if (v66)
        {
          uint64_t v230 = v276;
          uint64_t v231 = (void (*)(uint64_t, void *))v246;
          v246((char *)v229, v276);
          v231(v226, v230);
        }
        else
        {
          id v232 = v276;
          uint64_t v233 = (void (*)(uint64_t, void *))v246;
          v246((char *)v229, v276);
          v233(v226, v232);
          *(void *)(v228 + OBJC_IVAR____TtC10seserviced15SESAssetManager_currentContentVersion) = v238;
          LOBYTE(v85) = 1;
        }
        return v85 & 1;
      }
      v260 = (char *)v201;
      unint64_t v258 = *(void *)(v212 + *(int *)(v216 + 48));
      (*v255)(v166, v212, v276);
      Swift::String v284 = URL.path(percentEncoded:)(1);
      Swift::String v286 = URL.path(percentEncoded:)(1);
      uint64_t v281 = 0;
      unint64_t v282 = 0xE000000000000000;
      uint64_t v217 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v219 = v218;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v284._uint64_t countAndFlagsBits = v217;
      v284._object = v219;
      unint64_t v220 = v267;
      uint64_t v221 = v268;
      ((void (*)(char *, void, uint64_t))v266)(v267, v277, v268);
      uint64_t v222 = (uint64_t)v261;
      URL.appending<A>(component:directoryHint:)();
      uint64_t v223 = v221;
      uint64_t v224 = v222;
      v242(v220, v223);
      swift_bridgeObjectRelease();
      sub_100270FA4(v222, *v256, v256[1]);
      if (v66)
      {
        swift_errorRelease();
        uint64_t v66 = 0;
        uint64_t v166 = (uint64_t)v264;
        unint64_t v200 = countAndFlagsBits;
LABEL_71:
        sub_10026F3D4(v166, v224);
        goto LABEL_72;
      }
      uint64_t v166 = (uint64_t)v264;
      unint64_t v200 = countAndFlagsBits;
      if (v225 < v258) {
        goto LABEL_71;
      }
LABEL_72:
      uint64_t v206 = v224;
      id v207 = v276;
      id v208 = (void (*)(uint64_t, void *))v246;
      v246((char *)v206, v276);
      v208(v166, v207);
      uint64_t v201 = (uint64_t)v260;
      unint64_t v204 = v271;
    }
    uint64_t v271 = (v204 - 1) & v204;
    unint64_t v209 = __clz(__rbit64(v204)) | (v201 << 6);
    goto LABEL_75;
  }
  id v239 = v169;
  NSEnumerator.makeIterator()();
  uint64_t v170 = OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey;
  NSFastEnumerationIterator.next()();
  if (!v285)
  {
    uint64_t countAndFlagsBits = (char *)&_swiftEmptyDictionarySingleton;
LABEL_66:
    v250[1](v260, v251);

    unint64_t v200 = countAndFlagsBits;
    goto LABEL_67;
  }
  uint64_t v237 = (uint64_t *)(v275 + v170);
  uint64_t v85 = (uint64_t)(v280 + 7);
  unint64_t v171 = (unsigned int (**)(uint64_t, uint64_t, void *))(v280 + 6);
  uint64_t v241 = (void (**)(unint64_t, uint64_t, void *))(v280 + 4);
  os_log_t v240 = v249 + 1;
  unint64_t v249 = (v280 + 1);
  uint64_t countAndFlagsBits = (char *)&_swiftEmptyDictionarySingleton;
  while (2)
  {
    uint64_t v172 = (uint64_t)v256;
    while (1)
    {
      uint64_t v173 = v276;
      int v174 = swift_dynamicCast();
      uint64_t v175 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))v85;
      if (v174) {
        break;
      }
      v175(v172, 1, 1, v173);
LABEL_39:
      sub_10008E734(v172, &qword_100455978);
LABEL_40:
      NSFastEnumerationIterator.next()();
      if (!v285) {
        goto LABEL_66;
      }
    }
    v175(v172, 0, 1, v173);
    if ((*v171)(v172, 1, v173) == 1) {
      goto LABEL_39;
    }
    (*v241)(v258, v172, v276);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v252;
    *(void *)(inited + 32) = v168;
    uint64_t v177 = v168;
    sub_1000AA224(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    if (v66)
    {

      swift_bridgeObjectRelease();
      uint64_t v234 = v276;
      uint64_t v235 = (void (*)(NSObject *, void *))v246;
      v246((char *)v258, v276);
      v250[1](v260, v251);
      swift_bridgeObjectRelease();
      v235(v259, v234);
      v235(v269, v234);
      return v85 & 1;
    }
    swift_bridgeObjectRelease();
    char v178 = URLResourceValues.isRegularFile.getter();
    if (v178 == 2) {
      goto LABEL_109;
    }
    uint64_t v166 = (uint64_t)v264;
    uint64_t v172 = (uint64_t)v256;
    if ((v178 & 1) == 0) {
      goto LABEL_50;
    }
    if (URL.lastPathComponent.getter() == v244 && v179 == v243)
    {
      swift_bridgeObjectRelease();
LABEL_50:
      ((void (*)(char *, void (**)(uint64_t, uint64_t, void *)))v240->isa)(v257, v255);
      v246((char *)v258, v276);
      goto LABEL_40;
    }
    char v180 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v180) {
      goto LABEL_50;
    }
    sub_100270FA4(v258, *v237, v237[1]);
    uint64_t v236 = v181;
    uint64_t v182 = (uint64_t)v248;
    v272(v248, v258, (uint64_t)v276);
    uint64_t v183 = (uint64_t)countAndFlagsBits;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v286._uint64_t countAndFlagsBits = v183;
    unint64_t v186 = sub_1002C123C(v182);
    uint64_t v187 = *(void *)(v183 + 16);
    BOOL v188 = (v185 & 1) == 0;
    uint64_t v189 = v187 + v188;
    if (__OFADD__(v187, v188))
    {
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      goto LABEL_110;
    }
    char v190 = v185;
    if (*((void *)countAndFlagsBits + 3) >= v189)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1002CEFE8();
      }
LABEL_57:
      uint64_t countAndFlagsBits = (char *)v286._countAndFlagsBits;
      if (v190)
      {
        *(void *)(*((void *)countAndFlagsBits + 7) + 8 * v186) = v236;
      }
      else
      {
        uint64_t v193 = countAndFlagsBits;
        *(void *)&countAndFlagsBits[8 * (v186 >> 6) + 64] |= 1 << v186;
        v272((char *)(*((void *)v193 + 6) + v280[9] * v186), (uint64_t)v248, (uint64_t)v276);
        *(void *)(*((void *)v193 + 7) + 8 * v186) = v236;
        uint64_t v194 = *((void *)v193 + 2);
        BOOL v195 = __OFADD__(v194, 1);
        uint64_t v196 = v194 + 1;
        if (v195) {
          goto LABEL_108;
        }
        *((void *)countAndFlagsBits + 2) = v196;
      }
      swift_bridgeObjectRelease();
      uint64_t v197 = v276;
      uint64_t v198 = (void (*)(unint64_t, void *))v246;
      v246(v248, v276);
      ((void (*)(char *, void (**)(uint64_t, uint64_t, void *)))v240->isa)(v257, v255);
      v198(v258, v197);
      NSFastEnumerationIterator.next()();
      uint64_t v166 = (uint64_t)v264;
      if (!v285) {
        goto LABEL_66;
      }
      continue;
    }
    break;
  }
  sub_1002C830C(v189, isUniquelyReferenced_nonNull_native);
  unint64_t v191 = sub_1002C123C((uint64_t)v248);
  if ((v190 & 1) == (v192 & 1))
  {
    unint64_t v186 = v191;
    goto LABEL_57;
  }
LABEL_110:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_10026D7D0(uint64_t a1)
{
  id v3 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 initWithSuiteName:v4];

  if (v5)
  {
    id v6 = v5;
    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v6 dictionaryForKey:v7];

    if (v8)
    {
      uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      int64_t v10 = 0;
      uint64_t v27 = v9 + 64;
      uint64_t v11 = 1 << *(unsigned char *)(v9 + 32);
      uint64_t v12 = -1;
      if (v11 < 64) {
        uint64_t v12 = ~(-1 << v11);
      }
      unint64_t v13 = v12 & *(void *)(v9 + 64);
      uint64_t v30 = v9;
      id v28 = v6;
      int64_t v29 = (unint64_t)(v11 + 63) >> 6;
      uint64_t v26 = v9 + 104;
      while (!v13)
      {
        int64_t v18 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          return;
        }
        if (v18 < v29)
        {
          unint64_t v19 = *(void *)(v27 + 8 * v18);
          if (v19) {
            goto LABEL_14;
          }
          if (v10 + 2 >= v29)
          {
            ++v10;
          }
          else
          {
            unint64_t v19 = *(void *)(v27 + 8 * (v10 + 2));
            if (v19)
            {
              int64_t v18 = v10 + 2;
              goto LABEL_14;
            }
            if (v10 + 3 >= v29)
            {
              v10 += 2;
            }
            else
            {
              unint64_t v19 = *(void *)(v27 + 8 * (v10 + 3));
              if (v19)
              {
                int64_t v18 = v10 + 3;
LABEL_14:
                uint64_t v32 = (v19 - 1) & v19;
                unint64_t v14 = __clz(__rbit64(v19)) + (v18 << 6);
                int64_t v10 = v18;
LABEL_10:
                uint64_t v15 = *(void *)(v30 + 56);
                uint64_t v16 = (void *)(*(void *)(v30 + 48) + 16 * v14);
                uint64_t v17 = v16[1];
                *(void *)&long long v33 = *v16;
                *((void *)&v33 + 1) = v17;
                sub_1000AA580(v15 + 32 * v14, (uint64_t)v34);
                swift_bridgeObjectRetain();
                goto LABEL_20;
              }
              int64_t v18 = v10 + 4;
              if (v10 + 4 >= v29)
              {
                v10 += 3;
              }
              else
              {
                unint64_t v19 = *(void *)(v27 + 8 * v18);
                if (v19) {
                  goto LABEL_14;
                }
                while (v29 - 5 != v10)
                {
                  unint64_t v19 = *(void *)(v26 + 8 * v10++);
                  if (v19)
                  {
                    int64_t v18 = v10 + 4;
                    goto LABEL_14;
                  }
                }
                int64_t v10 = v29 - 1;
              }
            }
          }
        }
        uint64_t v32 = 0;
        memset(v34, 0, sizeof(v34));
        long long v33 = 0u;
LABEL_20:
        sub_100076148((uint64_t)&v33, (uint64_t)&v35, &qword_10045A178);
        uint64_t v20 = v36;
        if (!v36)
        {

          swift_release();
          return;
        }
        int64_t v31 = v10;
        uint64_t v21 = v35;
        sub_1000761D0(&v37, &v33);
        sub_10006C51C(&qword_1004555E0);
        if (swift_dynamicCast())
        {
          uint64_t v22 = v38;
          uint64_t v23 = *(void *)(v38 + 16);
          if (v23)
          {
            swift_bridgeObjectRetain();
            uint64_t v24 = 0;
            do
            {
              uint64_t v25 = *(void *)(v22 + 8 * v24++ + 32);
              *(void *)&long long v33 = v25;
              swift_bridgeObjectRetain();
              sub_100270364((uint64_t *)&v33, v1, a1, v21, v20);
              swift_bridgeObjectRelease();
            }
            while (v23 != v24);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            id v6 = v28;
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        int64_t v10 = v31;
        unint64_t v13 = v32;
      }
      uint64_t v32 = (v13 - 1) & v13;
      unint64_t v14 = __clz(__rbit64(v13)) | (v10 << 6);
      goto LABEL_10;
    }
  }
}

uint64_t sub_10026DBB0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_10045A190);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v95 = (uint64_t)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v99 = (char *)&v86 - v7;
  uint64_t v97 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v96 = *(void *)(v97 - 8);
  __chkstk_darwin(v97, v8);
  uint64_t v98 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v110 = (unsigned int (**)(char *, uint64_t, uint64_t))type metadata accessor for URL.DirectoryHint();
  uint64_t v10 = (uint64_t)*(v110 - 1);
  __chkstk_darwin(v110, v11);
  unint64_t v13 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10006C51C(&qword_100455978);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  int64_t v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v86 - v20;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v101 = (char *)&v86 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  int64_t v29 = (char *)&v86 - v28;
  id v30 = [self defaultManager];
  uint64_t v100 = v1;
  int64_t v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v109 = v23 + 56;
  int v108 = v31;
  v31(v21, 1, 1, v22);
  (*(void (**)(char *, void, unsigned int (**)(char *, uint64_t, uint64_t)))(v10 + 104))(v13, enum case for URL.DirectoryHint.inferFromPath(_:), v110);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  uint64_t v107 = sub_10006C51C(&qword_10045A168);
  uint64_t v32 = swift_allocObject();
  long long v106 = xmmword_100378290;
  *(_OWORD *)(v32 + 16) = xmmword_100378290;
  *(void *)(v32 + 32) = NSURLIsRegularFileKey;
  uint64_t v105 = NSURLIsRegularFileKey;
  long long v33 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)();

  swift_bridgeObjectRelease();
  long long v102 = (void (**)(uint64_t, char *, uint64_t))v23;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v104 = v23 + 8;
  uint64_t v103 = v34;
  v34(v29, v22);
  if (!v33)
  {
    BOOL v80 = &_swiftEmptyDictionarySingleton;
LABEL_29:
    char v81 = *(unsigned char *)(v100 + OBJC_IVAR____TtC10seserviced15SESAssetManager_isRunning);
    uint64_t v116 = &type metadata for Bool;
    LOBYTE(v115) = v81;
    sub_1000761D0(&v115, &v113);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v112[0] = v80;
    sub_1002C9648(&v113, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
    uint64_t v83 = *(void *)&v112[0];
    swift_bridgeObjectRelease();
    sub_1002BA7F8(v83);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v85 = sub_1000190DC((uint64_t)"assetmanager.state", (uint64_t)isa);

    return (uint64_t)v85;
  }
  uint64_t v35 = v98;
  id v93 = v33;
  NSEnumerator.makeIterator()();
  uint64_t v36 = OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName;
  uint64_t v37 = OBJC_IVAR____TtC10seserviced15SESAssetManager_versionKey;
  uint64_t v38 = OBJC_IVAR____TtC10seserviced15SESAssetManager_compatibilityVersionKey;
  uint64_t v39 = OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey;
  NSFastEnumerationIterator.next()();
  if (!v116)
  {
    uint64_t v94 = &_swiftEmptyDictionarySingleton;
LABEL_28:
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v35, v97);

    BOOL v80 = v94;
    goto LABEL_29;
  }
  uint64_t v92 = (void *)(v100 + v36);
  NSString v89 = (uint64_t *)(v100 + v37);
  uint64_t v91 = (uint64_t *)(v100 + v38);
  uint64_t v90 = v100 + v39;
  os_log_type_t v110 = (unsigned int (**)(char *, uint64_t, uint64_t))(v102 + 6);
  uint64_t v94 = &_swiftEmptyDictionarySingleton;
  v102 += 4;
  uint64_t v40 = (uint64_t)v99;
  uint64_t v41 = (uint64_t)v101;
  uint64_t v42 = v108;
  while (1)
  {
    while (!swift_dynamicCast())
    {
      v42(v18, 1, 1, v22);
LABEL_10:
      uint64_t v46 = (uint64_t)v18;
      uint64_t v47 = &qword_100455978;
LABEL_11:
      sub_10008E734(v46, v47);
LABEL_5:
      NSFastEnumerationIterator.next()();
      if (!v116) {
        goto LABEL_28;
      }
    }
    v42(v18, 0, 1, v22);
    if ((*v110)(v18, 1, v22) == 1) {
      goto LABEL_10;
    }
    (*v102)(v41, v18, v22);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v106;
    uint64_t v44 = v105;
    *(void *)(inited + 32) = v105;
    uint64_t v45 = v44;
    sub_1000AA224(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    uint64_t v48 = v35;
    swift_bridgeObjectRelease();
    uint64_t v49 = type metadata accessor for URLResourceValues();
    uint64_t v50 = *(void *)(v49 - 8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v40, 0, 1, v49);
    uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    if (v51(v40, 1, v49) == 1)
    {
      uint64_t v35 = v48;
      uint64_t v41 = (uint64_t)v101;
      v103(v101, v22);
      sub_10008E734(v40, &qword_10045A190);
      uint64_t v42 = v108;
      goto LABEL_5;
    }
    uint64_t v52 = v40;
    uint64_t v53 = v95;
    sub_1002718C8(v52, v95);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v51)(v53, 1, v49);
    if (result == 1) {
      break;
    }
    char v55 = URLResourceValues.isRegularFile.getter();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v53, v49);
    if (v55 == 2) {
      goto LABEL_31;
    }
    uint64_t v35 = v48;
    uint64_t v40 = (uint64_t)v99;
    uint64_t v41 = (uint64_t)v101;
    uint64_t v42 = v108;
    if ((v55 & 1) == 0)
    {
      v103(v101, v22);
      uint64_t v46 = v40;
      uint64_t v47 = &qword_10045A190;
      goto LABEL_11;
    }
    if (URL.lastPathComponent.getter() == *v92 && v56 == v92[1])
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v57 & 1) == 0)
      {
        sub_100270FA4(v41, *v89, v89[1]);
        uint64_t v73 = v72;
        uint64_t v98 = URL.lastPathComponent.getter();
        uint64_t v75 = v74;
        *(void *)&long long v113 = v73;
        uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v114 = &type metadata for String;
        *(void *)&long long v113 = v76;
        *((void *)&v113 + 1) = v77;
        sub_1000761D0(&v113, v112);
        os_log_type_t v78 = v94;
        char v79 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v111 = v78;
        sub_1002C9648(v112, v98, v75, v79);
        uint64_t v94 = v111;
        goto LABEL_24;
      }
    }
    uint64_t v59 = *v91;
    uint64_t v58 = v91[1];
    sub_100270FA4(v41, *v91, v58);
    uint64_t v88 = v59;
    uint64_t v87 = v60;
    uint64_t v61 = v94;
    uint64_t v62 = *(void *)(v90 + 8);
    uint64_t v94 = *(void **)v90;
    sub_100270FA4(v41, (uint64_t)v94, v62);
    uint64_t v98 = v58;
    *(void *)&long long v113 = v63;
    swift_bridgeObjectRetain();
    uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v114 = &type metadata for String;
    *(void *)&long long v113 = v64;
    *((void *)&v113 + 1) = v65;
    sub_1000761D0(&v113, v112);
    char v66 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v61;
    sub_1002C9648(v112, (uint64_t)v94, v62, v66);
    uint64_t v67 = v111;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v113 = v87;
    uint64_t v68 = v98;
    swift_bridgeObjectRetain();
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v114 = &type metadata for String;
    *(void *)&long long v113 = v69;
    *((void *)&v113 + 1) = v70;
    sub_1000761D0(&v113, v112);
    char v71 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v111 = v67;
    sub_1002C9648(v112, v88, v68, v71);
    uint64_t v94 = v111;
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v103((char *)v41, v22);
    sub_10008E734(v40, &qword_10045A190);
    NSFastEnumerationIterator.next()();
    uint64_t v42 = v108;
    if (!v116) {
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_10026E830(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)&a3[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a1;
  v16[4] = a2;
  aBlock[4] = sub_100271874;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004177A0;
  uint64_t v17 = _Block_copy(aBlock);
  int64_t v18 = a3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_100271880((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release();
}

uint64_t sub_10026EAF4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v35 = a1;
  uint64_t v39 = type metadata accessor for URL.DirectoryHint();
  uint64_t v36 = *(void *)(v39 - 8);
  uint64_t v3 = v36;
  __chkstk_darwin(v39, v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v37 = v11;
  uint64_t v38 = v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v35 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 56))(v10, 1, 1);
  uint64_t v21 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  uint64_t v23 = v39;
  v22(v6, enum case for URL.DirectoryHint.inferFromPath(_:), v39);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  uint64_t v24 = v35;
  uint64_t v25 = *(void *)(v35 + OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName + 8);
  uint64_t v42 = *(void *)(v35 + OBJC_IVAR____TtC10seserviced15SESAssetManager_assetInfoFileName);
  uint64_t v43 = v25;
  uint64_t v26 = v23;
  v22(v6, v21, v23);
  sub_1001150C4();
  swift_bridgeObjectRetain();
  uint64_t v27 = (uint64_t)v19;
  uint64_t v29 = v37;
  uint64_t v28 = v38;
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v26);
  swift_bridgeObjectRelease();
  id v30 = *(void (**)(char *, uint64_t))(v28 + 8);
  v30(v16, v29);
  sub_100270FA4(v27, *(void *)(v24 + OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey), *(void *)(v24 + OBJC_IVAR____TtC10seserviced15SESAssetManager_contentVersionKey + 8));
  uint64_t v32 = v31;
  uint64_t v33 = self;
  sub_1000508B0(v33, 4, v32);
  v41(1);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v27, v29);
}

void sub_10026EE30(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v47 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v42 - v11;
  uint64_t v13 = v1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_logger;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v44 = v6 + 16;
  v43((char *)&v42 - v11, a1, v5);
  uint64_t v45 = v13;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.info.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v49 = v6;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v42 = a1;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v48 = v2;
    id v51 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    Swift::String v20 = URL.path(percentEncoded:)(1);
    uint64_t v50 = sub_100290514(v20._countAndFlagsBits, (unint64_t)v20._object, (uint64_t *)&v51);
    uint64_t v21 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = *(void (**)(char *, uint64_t))(v21 + 8);
    v46(v12, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Deleting %s", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v3 = v48;
    swift_slowDealloc();
    a1 = v42;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v46 = *(void (**)(char *, uint64_t))(v6 + 8);
    v46(v12, v5);
  }
  id v22 = [self defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v24 = [v22 fileExistsAtPath:v23];

  if (v24)
  {
    URL._bridgeToObjectiveC()(v25);
    uint64_t v27 = v26;
    id v51 = 0;
    unsigned int v28 = [v22 removeItemAtURL:v26 error:&v51];

    if (v28)
    {
      id v29 = v51;
    }
    else
    {
      id v37 = v51;
      uint64_t v38 = _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10007582C(0, (unint64_t *)&qword_100454598);
      id v51 = 0;
      unint64_t v52 = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      id v51 = (id)0xD000000000000011;
      unint64_t v52 = 0x80000001003B9770;
      Swift::String v39 = URL.path(percentEncoded:)(1);
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      uint64_t v40 = (uint64_t)v51;
      uint64_t v41 = v52;
      swift_errorRetain();
      sub_100299FAC(0, 1, v40, v41, v38);
      swift_willThrow();
      swift_errorRelease();
    }
  }
  else
  {
    id v30 = v47;
    v43(v47, a1, v5);
    uint64_t v31 = v5;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v45 = v31;
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      uint64_t v48 = v3;
      id v51 = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      Swift::String v36 = URL.path(percentEncoded:)(1);
      uint64_t v50 = sub_100290514(v36._countAndFlagsBits, (unint64_t)v36._object, (uint64_t *)&v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v46(v30, v45);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Target does not exist %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v46(v30, v31);
    }
  }
}

void sub_10026F3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v71 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v73 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for URL.DirectoryHint();
  uint64_t v74 = *(void *)(v76 - 8);
  __chkstk_darwin(v76, v7);
  uint64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v77 = *(void *)(v14 - 8);
  uint64_t v78 = v14;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v75 = (char *)&v69 - v20;
  id v21 = [self defaultManager];
  char v82 = 0;
  uint64_t v79 = a1;
  URL.path(percentEncoded:)(1);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(a1) = [v21 fileExistsAtPath:v22 isDirectory:&v82];

  if (!a1 || (v82 & 1) != 0)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v80 = 0;
    uint64_t v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    uint64_t v80 = 0xD000000000000011;
    uint64_t v81 = 0x80000001003B9640;
LABEL_4:
    Swift::String v23 = URL.path(percentEncoded:)(1);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    sub_100299FAC(0, 1, v80, v81, 0);
    swift_willThrow();

    return;
  }
  URL.path(percentEncoded:)(1);
  NSString v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v25 = [v21 isReadableFileAtPath:v24];

  if (!v25)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v80 = 0;
    uint64_t v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    uint64_t v80 = 0xD00000000000001CLL;
    uint64_t v81 = 0x80000001003B9660;
    goto LABEL_4;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v77 + 56))(v13, 1, 1, v78);
  unsigned int v70 = enum case for URL.DirectoryHint.inferFromPath(_:);
  id v72 = v21;
  uint64_t v26 = v74;
  uint64_t v27 = *(void (**)(char *))(v74 + 104);
  uint64_t v69 = v74 + 104;
  v27(v9);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  uint64_t v80 = 1601203572;
  uint64_t v81 = 0xE400000000000000;
  UUID.init()();
  sub_100271880((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v6, v3);
  v29._uint64_t countAndFlagsBits = 0x7473696C702ELL;
  v29._object = (void *)0xE600000000000000;
  String.append(_:)(v29);
  uint64_t v30 = v76;
  ((void (*)(char *, void, uint64_t))v27)(v9, v70, v76);
  sub_1001150C4();
  uint64_t v31 = v75;
  URL.appending<A>(component:directoryHint:)();
  uint64_t v32 = v9;
  os_log_type_t v33 = v31;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v32, v30);
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v77 + 8);
  v34(v18, v78);
  URL._bridgeToObjectiveC()(v35);
  id v37 = v36;
  URL._bridgeToObjectiveC()(v38);
  uint64_t v40 = v39;
  uint64_t v80 = 0;
  id v41 = v72;
  LODWORD(v30) = [v72 copyItemAtURL:v37 toURL:v39 error:&v80];

  if (v30)
  {
    id v42 = (id)v80;
    URL._bridgeToObjectiveC()(v43);
    uint64_t v45 = v44;
    URL._bridgeToObjectiveC()(v46);
    uint64_t v48 = v47;
    uint64_t v80 = 0;
    unsigned __int8 v49 = [v41 replaceItemAtURL:v45 withItemAtURL:v47 backupItemName:0 options:0 resultingItemURL:0 error:&v80];

    if (v49)
    {
      id v50 = (id)v80;
      v34(v33, v78);

      return;
    }
    id v58 = (id)v80;
    uint64_t v52 = _convertNSErrorToError(_:)();

    swift_willThrow();
    URL._bridgeToObjectiveC()(v59);
    uint64_t v61 = v60;
    uint64_t v80 = 0;
    unsigned int v62 = [v41 removeItemAtURL:v60 error:&v80];

    if (v62)
    {
      id v63 = (id)v80;
    }
    else
    {
      id v65 = (id)v80;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v80 = 0;
    uint64_t v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease();
    uint64_t v80 = 0xD000000000000023;
    uint64_t v81 = 0x80000001003B96B0;
  }
  else
  {
    id v51 = (id)v80;
    uint64_t v52 = _convertNSErrorToError(_:)();

    swift_willThrow();
    URL._bridgeToObjectiveC()(v53);
    char v55 = v54;
    uint64_t v80 = 0;
    unsigned int v56 = [v41 removeItemAtURL:v54 error:&v80];

    if (v56)
    {
      id v57 = (id)v80;
    }
    else
    {
      id v64 = (id)v80;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v80 = 0;
    uint64_t v81 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v80 = 0xD000000000000025;
    uint64_t v81 = 0x80000001003B9680;
  }
  Swift::String v66 = URL.path(percentEncoded:)(1);
  String.append(_:)(v66);
  swift_bridgeObjectRelease();
  uint64_t v67 = v80;
  uint64_t v68 = v81;
  swift_errorRetain();
  sub_100299FAC(0, 1, v67, v68, v52);
  swift_willThrow();

  swift_errorRelease();
  v34(v33, v78);
}

uint64_t sub_10026FCB0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  uint64_t v7 = *(NSObject **)&v1[OBJC_IVAR____TtC10seserviced15SESAssetManager_queue];
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_100270DCC;
  *(void *)(v10 + 24) = v9;
  aBlock[4] = sub_1000A9F2C;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E8C54;
  aBlock[3] = &unk_1004176B0;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v1;
  swift_retain();
  swift_release();
  dispatch_sync(v7, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10026FED0(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = type metadata accessor for URL.DirectoryHint();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = ((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for URL.DirectoryHint.inferFromPath(_:), v3);
  swift_bridgeObjectRetain();
  URL.init(filePath:directoryHint:relativeTo:)();
  LOBYTE(v4) = sub_10026B048(v27, v16);
  uint64_t result = (*(uint64_t (**)(NSObject *, uint64_t))(v13 + 8))(v16, v12);
  if (v4)
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Notifying clients of an asset update", v20, 2u);
      swift_slowDealloc();
    }

    id v21 = (unint64_t *)(a1 + OBJC_IVAR____TtC10seserviced15SESAssetManager_delegates);
    swift_beginAccess();
    unint64_t v22 = *v21;
    if (v22 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v23 = result;
      if (result) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain_n();
      if (v23)
      {
LABEL_6:
        if (v23 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v23; ++i)
        {
          if ((v22 & 0xC000000000000001) != 0)
          {
            unsigned int v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            unsigned int v25 = *(void **)(v22 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          [v25 onNewAssetAvailable];
          swift_unknownObjectRelease();
        }
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t sub_100270364(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(char *, char *, uint64_t), uint64_t a5)
{
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  uint64_t v8 = type metadata accessor for URL.DirectoryHint();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for URL();
  uint64_t v70 = *(void *)(v64 - 8);
  uint64_t v14 = __chkstk_darwin(v64, v13);
  uint64_t v59 = (char *)v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  id v63 = (char *)v58 - v18;
  __chkstk_darwin(v17, v19);
  id v65 = (char *)v58 - v20;
  uint64_t v21 = *a1;
  uint64_t v22 = *(void *)(*a1 + 16);
  uint64_t v62 = *a1;
  if (!v22)
  {
    unsigned long long v68 = 0u;
    long long v69 = 0u;
    goto LABEL_8;
  }
  uint64_t v24 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey);
  uint64_t v23 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_manufacturerKey + 8);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_1002C0AD0(v24, v23);
  if ((v26 & 1) == 0)
  {
    unsigned long long v68 = 0u;
    long long v69 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_1000AA580(*(void *)(v21 + 56) + 32 * v25, (uint64_t)&v68);
  swift_bridgeObjectRelease();
  if (!*((void *)&v69 + 1))
  {
LABEL_8:
    sub_10008E734((uint64_t)&v68, (uint64_t *)&unk_1004556C0);
    goto LABEL_9;
  }
  if (swift_dynamicCast())
  {
    uint64_t v28 = v66;
    uint64_t v27 = v67;
    goto LABEL_10;
  }
LABEL_9:
  uint64_t v27 = (void *)0xE900000000000073;
  uint64_t v28 = 0x676E69747465735FLL;
LABEL_10:
  sub_10006C51C(&qword_10045B590);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1003782A0;
  *(void *)(v29 + 32) = v60;
  *(void *)(v29 + 40) = a5;
  uint64_t v30 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix + 8);
  *(void *)&unsigned long long v68 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_profilePrefix);
  *((void *)&v68 + 1) = v30;
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = v28;
  v31._object = v27;
  String.append(_:)(v31);
  unint64_t v33 = *((void *)&v68 + 1);
  unint64_t v32 = v68;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned long long v68 = __PAIR128__(v33, v32);
  swift_bridgeObjectRetain();
  v34._uint64_t countAndFlagsBits = 0x7473696C702ELL;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = *((void *)&v68 + 1);
  *(void *)(v29 + 48) = v68;
  *(void *)(v29 + 56) = v35;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for URL.DirectoryHint.inferFromPath(_:), v8);
  sub_1001150C4();
  Swift::String v36 = v65;
  URL.appending<A>(components:directoryHint:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v37 = a2 + OBJC_IVAR____TtC10seserviced15SESAssetManager_logger;
  uint64_t v38 = v70;
  Swift::String v39 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
  uint64_t v40 = v63;
  uint64_t v41 = v64;
  v39(v63, v36, v64);
  uint64_t v61 = v37;
  id v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v60 = v39;
  if (v44)
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(void *)&unsigned long long v68 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 136315138;
    v58[1] = v45 + 4;
    Swift::String v46 = URL.path(percentEncoded:)(1);
    uint64_t v66 = sub_100290514(v46._countAndFlagsBits, (unint64_t)v46._object, (uint64_t *)&v68);
    uint64_t v41 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v38 + 8);
    v47(v63, v41);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Writing profile %s", v45, 0xCu);
    swift_arrayDestroy();
    Swift::String v36 = v65;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v47 = *(void (**)(char *, uint64_t))(v38 + 8);
    v47(v40, v41);
  }
  uint64_t v48 = v58[2];
  unsigned __int8 v49 = v59;
  *((void *)&v69 + 1) = sub_10006C51C(&qword_100457240);
  *(void *)&unsigned long long v68 = v62;
  swift_bridgeObjectRetain();
  sub_100271388(&v68);
  if (v48)
  {
    id v63 = (char *)v47;
    sub_10007594C((uint64_t)&v68);
    v60(v49, v36, v41);
    id v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(void *)&unsigned long long v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 136315138;
      Swift::String v53 = URL.path(percentEncoded:)(1);
      uint64_t v66 = sub_100290514(v53._countAndFlagsBits, (unint64_t)v53._object, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v54 = (uint64_t (*)(char *, uint64_t))v63;
      uint64_t v55 = v64;
      ((void (*)(char *, uint64_t))v63)(v49, v64);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to write profile file to %s", v52, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();

      return v54(v65, v55);
    }
    else
    {
      swift_errorRelease();
      id v57 = (uint64_t (*)(char *, uint64_t))v63;
      ((void (*)(char *, uint64_t))v63)(v49, v41);

      return v57(v36, v41);
    }
  }
  else
  {
    v47(v36, v41);
    return sub_10007594C((uint64_t)&v68);
  }
}

uint64_t sub_100270BC0()
{
  return type metadata accessor for SESAssetManager();
}

uint64_t type metadata accessor for SESAssetManager()
{
  uint64_t result = qword_10045A150;
  if (!qword_10045A150) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100270C14()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100270D00()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100270DCC()
{
  uint64_t v1 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10026FED0(v2, v3);
}

uint64_t sub_100270E30()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100270E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100270E50()
{
  return swift_release();
}

id sub_100270E58(uint64_t a1)
{
  uint64_t v2 = v1;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v5 = v4;
  id v14 = 0;
  id v6 = [v2 initWithContentsOfURL:v4 error:&v14];

  id v7 = v14;
  if (v6)
  {
    uint64_t v8 = type metadata accessor for URL();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v12 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

void sub_100270FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  id v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v13 = [v11 isReadableFileAtPath:v12];

  if (!v13)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD000000000000015;
    uint64_t v17 = "File is not readable ";
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  id v14 = objc_allocWithZone((Class)NSDictionary);
  id v15 = sub_100270E58((uint64_t)v10);
  if (v3)
  {
    swift_errorRelease();
LABEL_4:
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    unint64_t v16 = 0xD000000000000017;
    uint64_t v17 = "Failed to read file at ";
LABEL_6:
    *(void *)&long long v30 = v16;
    *((void *)&v30 + 1) = (unint64_t)(v17 - 32) | 0x8000000000000000;
    Swift::String v18 = URL.path(percentEncoded:)(1);
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    uint64_t v20 = *((void *)&v30 + 1);
    uint64_t v19 = v30;
LABEL_7:
    sub_100299FAC(0, 1, v19, v20, 0);
    swift_willThrow();

    return;
  }
  uint64_t v21 = v15;
  *(void *)&long long v30 = 0;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

  uint64_t v22 = v30;
  if (!(void)v30) {
    goto LABEL_4;
  }
  if (*(void *)(v30 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = v29;
    uint64_t v24 = sub_1002C0AD0(v29, a3);
    if (v25)
    {
      sub_1000AA580(*(void *)(v22 + 56) + 32 * v24, (uint64_t)&v30);
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v30 = 0u;
    long long v31 = 0u;
    uint64_t v23 = v29;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v31 + 1))
  {
    sub_10008E734((uint64_t)&v30, (uint64_t *)&unk_1004556C0);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    *(void *)&long long v30 = 0;
    *((void *)&v30 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v30 = v23;
    *((void *)&v30 + 1) = a3;
    v26._uint64_t countAndFlagsBits = 0xD000000000000026;
    v26._object = (void *)0x80000001003B9720;
    String.append(_:)(v26);
    Swift::String v27 = URL.path(percentEncoded:)(1);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    uint64_t v20 = *((void *)&v30 + 1);
    uint64_t v19 = v30;
    goto LABEL_7;
  }
}

uint64_t sub_100271388(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [self defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v8);
  id v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  id v20 = 0;
  LODWORD(v6) = [v7 createDirectoryAtURL:v10 withIntermediateDirectories:1 attributes:0 error:&v20];

  id v11 = v20;
  if (v6
    && (NSString v12 = self,
        sub_100075908(a1, a1[3]),
        uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)(),
        id v20 = 0,
        id v14 = [v12 dataWithPropertyList:v13 format:200 options:0 error:&v20],
        swift_unknownObjectRelease(),
        id v11 = v20,
        v14))
  {
    uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    Data.write(to:options:)();
    return sub_10006D144(v15, v17);
  }
  else
  {
    uint64_t v19 = v11;
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

void sub_1002715D0()
{
  id v0 = [self defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v2 = [v0 isReadableFileAtPath:v1];

  if (!v2)
  {
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v13[0] = (id)0xD000000000000015;
    v13[1] = (id)0x80000001003B9750;
    Swift::String v11 = URL.path(percentEncoded:)(1);
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    sub_100299FAC(0, 1, 0xD000000000000015, 0x80000001003B9750, 0);
LABEL_6:
    swift_willThrow();
    goto LABEL_7;
  }
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  URL._bridgeToObjectiveC()(v6);
  uint64_t v8 = v7;
  v13[0] = 0;
  unsigned __int8 v9 = [v0 copyItemAtURL:v5 toURL:v7 error:v13];

  if ((v9 & 1) == 0)
  {
    id v12 = v13[0];
    _convertNSErrorToError(_:)();

    goto LABEL_6;
  }
  id v10 = v13[0];
LABEL_7:
}

void sub_1002717B4()
{
}

uint64_t sub_1002717D0()
{
  return sub_10026DBB0();
}

uint64_t sub_1002717F4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10027182C(uint64_t a1, uint64_t a2)
{
  return sub_10026E830(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_100271834()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100271874()
{
  return sub_10026EAF4(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_100271880(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002718C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045A190);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10027194C(unsigned int a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char a8)
{
  uint64_t v9 = v8;
  uint64_t v79 = a5;
  uint64_t v80 = a7;
  uint64_t v78 = a6;
  uint64_t v81 = a4;
  unint64_t v82 = a3;
  uint64_t v13 = sub_10006C51C(&qword_100455EB0);
  uint64_t v76 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v76 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8, v15);
  unint64_t v17 = (char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  uint64_t v77 = (uint64_t)&v72 - v19;
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (uint64_t *)((char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v25 = qword_100468A38;
  *uint64_t v24 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v20);
  id v26 = (id)v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)();
  uint64_t v28 = *(void (**)(void *, uint64_t))(v21 + 8);
  char v27 = v21 + 8;
  v28(v24, v20);
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_39:
    swift_once();
LABEL_10:
    LOWORD(v84) = bswap32(a1) >> 16;
    uint64_t v35 = sub_1000806B4((uint64_t)&v84, (uint64_t)&v84 + 2);
    unint64_t v37 = v36;
    sub_1001E8D48(1, 12, v35, v36, v81, v79, v78, v80, v27);
    sub_10006D144(v35, v37);
    return;
  }
  if (*(unsigned char *)(v9 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) != 1)
  {
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v38, v39))
    {
LABEL_16:

      return;
    }
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Not running", v40, 2u);
LABEL_15:
    swift_slowDealloc();
    goto LABEL_16;
  }
  if (a1 != 11)
  {
    unint64_t v41 = v82;
    sub_10006D0EC(a2, v82);
    sub_10006D0EC(a2, v41);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v38, v42))
    {

      sub_10006D144(a2, v41);
      sub_10006D144(a2, v41);
      return;
    }
    uint64_t v43 = swift_slowAlloc();
    *(void *)&long long v84 = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 16777730;
    LOBYTE(v83) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v43 + 5) = 2080;
    uint64_t v81 = v43 + 7;
    uint64_t v83 = (uint64_t)sub_10023CDF4(a2, v41);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v46 = v45;
    swift_bridgeObjectRelease();
    uint64_t v83 = sub_100290514(v44, v46, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a2, v41);
    sub_10006D144(a2, v41);
    _os_log_impl((void *)&_mh_execute_header, v38, v42, "Ignoring unknown message with identifier %hhu payload %s", (uint8_t *)v43, 0xFu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_15;
  }
  int v29 = a8 & 1;
  unint64_t v30 = v82;
  unsigned int v31 = sub_10027323C(a2, v82);
  if ((v31 & 0x10000) == 0)
  {
    a1 = v31;
    char v27 = a8 & 1;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      Swift::String v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Blocking invalid command", v34, 2u);
      swift_slowDealloc();
    }

    if (qword_100453798 == -1) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
  sub_10006D0EC(a2, v30);
  int v47 = sub_10007D4A4(a2, v30, 1, 0, 0);
  switch(v47)
  {
    case 164:
      int v57 = 1;
      break;
    case 113:
      uint64_t v55 = self;
      UUID.uuidString.getter();
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10004EFC0(v55, 1u, v56);

      break;
    case 60:
      if (qword_100453798 != -1) {
        swift_once();
      }
      uint64_t v48 = sub_100088F40((uint64_t)&off_10040E360);
      unint64_t v50 = v49;
      sub_1001E8D48(1, 12, v48, v49, v81, v79, v78, v80, v29);
      sub_10006D144(v48, v50);
      uint64_t v51 = self;
      UUID.uuidString.getter();
      NSString v52 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      LODWORD(v51) = sub_10004F3B8(v51, v52);

      if (v51 == 4)
      {
        sub_10006D0EC(a2, v30);
        char v53 = sub_10007D4A4(a2, v30, 2, 0, 0);
        sub_10006D0EC(a2, v30);
        char v54 = sub_10007D4A4(a2, v30, 3, 0, 0);
        if (v53 == 1 && (v54 & 0xFE) == 0x90) {
          sub_1001F0CC8(v81);
        }
      }
      return;
    default:
      int v57 = 0;
      break;
  }
  if (qword_100453710 != -1) {
    swift_once();
  }
  uint64_t v58 = *(void *)(v9 + OBJC_IVAR____TtC10seserviced8AlishaSE_seTimeoutInSec);
  uint64_t v60 = *(void *)(v81 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v59 = *(void *)(v81 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  uint64_t v72 = qword_100468738;
  uint64_t v73 = v60;
  unint64_t v74 = v59;
  uint64_t v75 = v58;
  if (v59 >> 60 == 15)
  {
    uint64_t v86 = 0;
    long long v84 = 0u;
    long long v85 = 0u;
  }
  else
  {
    uint64_t v61 = type metadata accessor for AlishaSE.HandoffToken();
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v60;
    *(void *)(v62 + 24) = v59;
    *((void *)&v85 + 1) = v61;
    uint64_t v86 = &off_1004177C8;
    *(void *)&long long v84 = v62;
  }
  uint64_t v63 = v78;
  LODWORD(v78) = v29;
  sub_10019366C(v63, v77);
  sub_10019366C(v63, (uint64_t)v17);
  unint64_t v64 = (*(unsigned __int8 *)(v76 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  uint64_t v65 = swift_allocObject();
  *(unsigned char *)(v65 + 16) = v57;
  LODWORD(v76) = v57;
  uint64_t v67 = v81;
  unint64_t v66 = v82;
  *(void *)(v65 + 24) = a2;
  *(void *)(v65 + 32) = v66;
  *(void *)(v65 + 40) = v9;
  *(void *)(v65 + 48) = v67;
  uint64_t v68 = v79;
  *(void *)(v65 + 56) = v79;
  sub_100211850((uint64_t)v17, v65 + v64);
  unint64_t v69 = v65 + ((v14 + v64 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v70 = v80;
  *(void *)unint64_t v69 = v80;
  *(unsigned char *)(v69 + 8) = v29 != 0;
  type metadata accessor for SERequest();
  swift_allocObject();
  swift_retain();
  sub_10006D0EC(a2, v66);
  swift_retain();
  swift_retain();
  sub_1000758F4(v73, v74);
  uint64_t v71 = sub_100192C8C(0xD000000000000019, 0x80000001003B99A0, v76, v75, 0, (uint64_t)&v84, 2, v67, v68, 0, v77, (uint64_t)v70, v78, (uint64_t)sub_100274FC8, v65);
  if (v71)
  {
    sub_100177598(1, (uint64_t)v71);
    swift_release();
  }
  else
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    swift_unexpectedError();
    __break(1u);
  }
}

void sub_100272394()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning;
    char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning);
    Swift::String v11 = Logger.logObject.getter();
    if (v10)
    {
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "AlishaSE is already running", v13, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v14, "Starting AlishaSE", v15, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v1 + v9) = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002725CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning;
    int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning);
    Swift::String v11 = Logger.logObject.getter();
    if (v10 == 1)
    {
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping AlishaSE", v13, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v1 + v9) = 0;
    }
    else
    {
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v14, "AlishaSE is not running", v15, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100272804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a1;
  uint64_t v36 = a4;
  uint64_t v13 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (uint64_t *)((char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_100468A38;
  *uint64_t v21 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = v22;
  char v24 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) == 1)
  {
    char v24 = a5 & 1;
    if (qword_100453710 == -1)
    {
LABEL_6:
      uint64_t v26 = *(void *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      unint64_t v25 = *(void *)(a3 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      if (v25 >> 60 == 15)
      {
        os_log_type_t v39 = 0;
        long long v37 = 0u;
        long long v38 = 0u;
      }
      else
      {
        uint64_t v30 = type metadata accessor for AlishaSE.HandoffToken();
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = v26;
        *(void *)(v31 + 24) = v25;
        *((void *)&v38 + 1) = v30;
        os_log_type_t v39 = &off_1004177C8;
        *(void *)&long long v37 = v31;
      }
      sub_10019366C(v33, (uint64_t)v16);
      type metadata accessor for SERequest();
      swift_allocObject();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1000758F4(v26, v25);
      unint64_t v32 = sub_100192C8C(v35, a2, 1, 0, 1, (uint64_t)&v37, 2, a3, v36, v24, (uint64_t)v16, 0, 1u, v34, a8);
      if (v32)
      {
        sub_100177598(0, (uint64_t)v32);
        swift_release();
      }
      else
      {
        __break(1u);
      }
      return;
    }
LABEL_15:
    swift_once();
    goto LABEL_6;
  }
  char v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    int v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not running", v29, 2u);
    swift_slowDealloc();
  }
}

void sub_100272B9C(void (*a1)(void *, uint64_t))
{
  id v23 = a1;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  uint64_t v8 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v9 = *(void (**)(void *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v10 = v7;
  char v11 = _dispatchPreconditionTest(_:)();
  os_log_type_t v12 = *(void (**)(void *, uint64_t))(v3 + 8);
  v12(v6, v2);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    swift_once();
LABEL_6:
    uint64_t v13 = qword_100468738;
    uint64_t v14 = qword_100468A38;
    *uint64_t v6 = qword_100468A38;
    v9(v6, v8, v2);
    id v15 = (id)v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)();
    v12(v6, v2);
    if (v14)
    {
      os_log_type_t v12 = v23;
      if (!v23)
      {
        uint64_t v21 = (void *)(v13 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
        swift_beginAccess();
        *uint64_t v21 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      uint64_t v16 = (uint64_t *)(v13 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
      swift_beginAccess();
      swift_retain();
      uint64_t v6 = (void *)sub_1001820A8(v16);
      swift_release();
      if (!((unint64_t)*v16 >> 62))
      {
        uint64_t v17 = *(void *)((*v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v17 >= (uint64_t)v6)
        {
LABEL_10:
          sub_1002D22B4((uint64_t)v6, v17);
          swift_endAccess();
LABEL_15:
          sub_100177D1C((uint64_t)v12);
          return;
        }
        goto LABEL_20;
      }
    }
    else
    {
      __break(1u);
    }
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v17 >= (uint64_t)v6) {
      goto LABEL_10;
    }
LABEL_20:
    __break(1u);
    return;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) == 1)
  {
    if (qword_100453710 == -1) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Not running", v20, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100272F00()
{
  type metadata accessor for AlishaSE();
  swift_allocObject();
  uint64_t result = sub_100272F40();
  qword_100468980 = result;
  return result;
}

uint64_t sub_100272F40()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning) = 0;
  uint64_t v1 = OBJC_IVAR____TtC10seserviced8AlishaSE_seTimeoutInSec;
  v5[6] = 0xD000000000000014;
  v5[7] = 0x80000001003B1620;
  v5[8] = 0xD00000000000001BLL;
  v5[9] = 0x80000001003B9940;
  v5[10] = 0x4008000000000000;
  char v6 = 1;
  sub_1001AF368();
  *(void *)(v0 + v1) = v2;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v5[4] = sub_100274E68;
  v5[5] = v0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  _OWORD v5[2] = sub_1002B9D80;
  _OWORD v5[3] = &unk_1004177E0;
  uint64_t v3 = _Block_copy(v5);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v3);
  return v0;
}

_DWORD *sub_1002730D4()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_isRunning);
  id v10 = &type metadata for Bool;
  LOBYTE(v9) = v1;
  sub_1000761D0(&v9, v8);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v8, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_seTimeoutInSec);
  id v10 = &type metadata for Double;
  *(void *)&long long v9 = v3;
  sub_1000761D0(&v9, v8);
  char v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v8, 0x756F656D69546573, 0xEE006365536E4974, v4);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  char v6 = sub_1000190DC((uint64_t)"alishase.state", (uint64_t)isa);

  return v6;
}

uint64_t sub_10027323C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint8_t **)((char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  unint64_t v11 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_55;
      }
      uint64_t v12 = (int)v12;
LABEL_9:
      if (v12 < 4)
      {
LABEL_10:
        sub_10006D0EC(a1, a2);
        sub_10006D0EC(a1, a2);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          v60[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v18 = 136315138;
          uint64_t v58 = v18 + 4;
          uint64_t v59 = (uint64_t)sub_10023CDF4(a1, a2);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_1000756D0();
          uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v21 = v20;
          swift_bridgeObjectRelease();
          uint64_t v59 = sub_100290514(v19, v21, v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(a1, a2);
          sub_10006D144(a1, a2);
          uint64_t v22 = "Payload is too short %s";
LABEL_12:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v22, v18, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_44:
          int v25 = 0;
          int v24 = 26368;
          return v24 | (v25 << 16);
        }
LABEL_43:

        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        goto LABEL_44;
      }
      sub_10006D0EC(a1, a2);
      unsigned __int16 v23 = sub_10007D08C(a1, a2, 0, 0, 0);
      int v24 = 0;
      int v25 = 1;
      if (v23 <= 0x8070u)
      {
        if (v23 - 32828 < 3) {
          return v24 | (v25 << 16);
        }
        if (v23 != 164) {
          goto LABEL_25;
        }
        if (!v11)
        {
          uint64_t v26 = BYTE6(a2);
          goto LABEL_31;
        }
        if (v11 != 1)
        {
          uint64_t v35 = *(void *)(a1 + 16);
          uint64_t v34 = *(void *)(a1 + 24);
          BOOL v15 = __OFSUB__(v34, v35);
          uint64_t v26 = v34 - v35;
          if (!v15) {
            goto LABEL_31;
          }
LABEL_58:
          __break(1u);
          goto LABEL_59;
        }
        LODWORD(v26) = HIDWORD(a1) - a1;
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v26 = (int)v26;
LABEL_31:
          if (v26 < 5)
          {
            sub_10006D0EC(a1, a2);
            sub_10006D0EC(a1, a2);
            uint64_t v16 = Logger.logObject.getter();
            os_log_type_t v17 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v16, v17)) {
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          sub_10006D0EC(a1, a2);
          unsigned __int8 v36 = sub_10007D4A4(a1, a2, 4, 0, 0);
          if (!v11)
          {
            uint64_t v37 = BYTE6(a2);
            goto LABEL_40;
          }
          if (v11 != 1)
          {
            uint64_t v39 = *(void *)(a1 + 16);
            uint64_t v38 = *(void *)(a1 + 24);
            BOOL v15 = __OFSUB__(v38, v39);
            uint64_t v37 = v38 - v39;
            if (!v15) {
              goto LABEL_40;
            }
LABEL_60:
            __break(1u);
            swift_unexpectedError();
            __break(1u);
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x100273D48);
          }
          LODWORD(v37) = HIDWORD(a1) - a1;
          if (!__OFSUB__(HIDWORD(a1), a1))
          {
            uint64_t v37 = (int)v37;
LABEL_40:
            if (v37 >= v36 + 5)
            {
              uint64_t v45 = Data.subdata(in:)();
              unint64_t v47 = v46;
              sub_10006D0EC(v45, v46);
              uint64_t v48 = sub_10011FE64(0xD00000000000001ALL, 0x80000001003B2B50);
              unint64_t v50 = v49;
              if (v49 >> 60 == 15)
              {
                sub_100075868(v45, v47);
                sub_100075868(v48, v50);
              }
              else
              {
                sub_10006D0EC(v45, v47);
                char v51 = sub_100088AE4(v45, v47, v48, v50);
                sub_100075868(v48, v50);
                sub_10006D144(v45, v47);
                sub_10006D144(v45, v47);
                if (v51)
                {
                  sub_10006D144(v45, v47);
                  int v24 = 0;
                  int v25 = 1;
                  return v24 | (v25 << 16);
                }
              }
              sub_10006D0EC(v45, v47);
              sub_10006D0EC(v45, v47);
              NSString v52 = Logger.logObject.getter();
              os_log_type_t v53 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v52, v53))
              {
                char v54 = (uint8_t *)swift_slowAlloc();
                v60[0] = swift_slowAlloc();
                *(_DWORD *)char v54 = 136315138;
                uint64_t v58 = v54 + 4;
                uint64_t v59 = (uint64_t)sub_10023CDF4(v45, v47);
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_1000756D0();
                uint64_t v55 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v57 = v56;
                swift_bridgeObjectRelease();
                uint64_t v59 = sub_100290514(v55, v57, v60);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_10006D144(v45, v47);
                sub_10006D144(v45, v47);
                _os_log_impl((void *)&_mh_execute_header, v52, v53, "Invalid AID for SELECT %s", v54, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
                sub_10006D144(v45, v47);
              }
              else
              {
                sub_10006D144(v45, v47);

                sub_10006D144(v45, v47);
                sub_10006D144(v45, v47);
              }
              int v25 = 0;
              int v24 = 27266;
              return v24 | (v25 << 16);
            }
            sub_10006D0EC(a1, a2);
            sub_10006D0EC(a1, a2);
            uint64_t v16 = Logger.logObject.getter();
            os_log_type_t v17 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v16, v17)) {
              goto LABEL_43;
            }
LABEL_42:
            uint64_t v18 = (uint8_t *)swift_slowAlloc();
            v60[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v18 = 136315138;
            uint64_t v58 = v18 + 4;
            uint64_t v59 = (uint64_t)sub_10023CDF4(a1, a2);
            sub_10006C51C((uint64_t *)&unk_100455EA0);
            uint64_t v40 = a1;
            sub_1000756D0();
            uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v43 = v42;
            swift_bridgeObjectRelease();
            uint64_t v59 = sub_100290514(v41, v43, v60);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v40, a2);
            sub_10006D144(v40, a2);
            uint64_t v22 = "Payload for SELECT is too short %s";
            goto LABEL_12;
          }
LABEL_59:
          __break(1u);
          goto LABEL_60;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
      if ((v23 - 32881 > 0x10 || ((1 << (v23 - 113)) & 0x18001) == 0) && v23 != 33928 && v23 != 33993)
      {
LABEL_25:
        sub_10006D0EC(a1, a2);
        sub_10006D0EC(a1, a2);
        char v27 = Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          int v29 = (uint8_t *)swift_slowAlloc();
          v60[0] = swift_slowAlloc();
          *(_DWORD *)int v29 = 136315138;
          uint64_t v58 = v29 + 4;
          uint64_t v59 = (uint64_t)sub_10023CDF4(a1, a2);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          uint64_t v30 = a1;
          sub_1000756D0();
          uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v33 = v32;
          swift_bridgeObjectRelease();
          uint64_t v59 = sub_100290514(v31, v33, v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v30, a2);
          sub_10006D144(v30, a2);
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Blocked command %s", v29, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10006D144(a1, a2);
          sub_10006D144(a1, a2);
        }
        int v25 = 0;
        int v24 = 27904;
      }
      return v24 | (v25 << 16);
    case 2uLL:
      uint64_t v14 = *(void *)(a1 + 16);
      uint64_t v13 = *(void *)(a1 + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_9;
      }
      goto LABEL_56;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v12 = BYTE6(a2);
      goto LABEL_9;
  }
}

uint64_t sub_100273D58(void *a1, char a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char *a10, char a11)
{
  uint64_t v13 = a1;
  uint64_t v14 = a9;
  char v15 = a11 & 1;
  if (a2)
  {
    int v28 = a1;
    int v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      id v81 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315138;
      sub_100075894();
      uint64_t v32 = Error.localizedDescription.getter();
      sub_100290514(v32, v33, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to get SE %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (v28) {
      char v34 = 3;
    }
    else {
      char v34 = -126;
    }
    if (v28 == 3) {
      char v35 = -127;
    }
    else {
      char v35 = v34;
    }
    if (qword_100453798 != -1) {
      swift_once();
    }
    sub_10006C51C(&qword_1004568A8);
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_1003782A0;
    *(unsigned char *)(v36 + 32) = 1;
    *(unsigned char *)(v36 + 33) = v35;
    uint64_t v37 = sub_100088F40(v36);
    unint64_t v39 = v38;
    swift_bridgeObjectRelease();
    sub_1001E8D48(3, 17, v37, v39, a7, a8, a9, a10, v15);
    goto LABEL_38;
  }
  if ((a3 & 1) == 0)
  {
    id v40 = a1;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v81 = 0;
    id v42 = sub_10005603C(v40, (uint64_t)isa, &v81);

    if (v42)
    {
      uint64_t v43 = qword_100453798;
      id v44 = v81;
      if (v43 != -1) {
        swift_once();
      }
      id v45 = (id)sub_100014F20((uint64_t)v42);
      uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v39 = v47;

      sub_1001E8D48(1, 12, v46, v39, a7, a8, a9, a10, a11 & 1);
      sub_1000758E8(a1, 0);

      uint64_t v48 = v46;
      goto LABEL_39;
    }
    id v58 = v81;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_10006D0EC(a4, a5);
    sub_10006D0EC(a4, a5);
    uint64_t v59 = Logger.logObject.getter();
    uint64_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, (os_log_type_t)v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      id v81 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 136315138;
      buf = v61;
      sub_10023CDF4(a4, a5);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v62 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      sub_100290514(v62, v64, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      char v15 = a11 & 1;
      swift_bridgeObjectRelease();
      sub_10006D144(a4, a5);
      sub_10006D144(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v60, "Failed to transceive %s", buf, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a4, a5);
      sub_10006D144(a4, a5);
    }
    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_100088F40((uint64_t)&off_10040F898);
    unint64_t v39 = v74;
    sub_1001E8D48(3, 17, v37, v74, a7, a8, a9, a10, v15);
    goto LABEL_37;
  }
  char v78 = a11 & 1;
  sub_1001F7D1C(a1, 0);
  sub_10006D0EC(a4, a5);
  sub_10007D4A4(a4, a5, 4, 0, 0);
  uint64_t v18 = Data.subdata(in:)();
  unint64_t v20 = v19;
  sub_10006D0EC(v18, v19);
  sub_10006D0EC(v18, v20);
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.info.getter();
  uint64_t v79 = a7;
  if (os_log_type_enabled(v21, v22))
  {
    unsigned __int16 v23 = (uint8_t *)swift_slowAlloc();
    id v81 = (id)swift_slowAlloc();
    *(_DWORD *)unsigned __int16 v23 = 136315138;
    sub_10023CDF4(v18, v20);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    uint64_t v24 = v18;
    sub_1000756D0();
    uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v27 = v26;
    swift_bridgeObjectRelease();
    sub_100290514(v25, v27, (uint64_t *)&v81);
    uint64_t v13 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v18 = v24;
    swift_bridgeObjectRelease();
    sub_10006D144(v24, v20);
    sub_10006D144(v24, v20);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Selecting %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v14 = a9;
    swift_slowDealloc();
  }
  else
  {

    sub_10006D144(v18, v20);
    sub_10006D144(v18, v20);
  }
  Class v49 = Data._bridgeToObjectiveC()().super.isa;
  id v81 = 0;
  id v50 = sub_100056AF0(v13, v49, 1, &v81);

  if (!v50)
  {
    id v65 = v81;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_10006D0EC(v18, v20);
    sub_10006D0EC(v18, v20);
    unint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      id v81 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315138;
      sub_10023CDF4(v18, v20);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      uint64_t v69 = v18;
      sub_1000756D0();
      uint64_t v70 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v72 = v71;
      swift_bridgeObjectRelease();
      sub_100290514(v70, v72, (uint64_t *)&v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v18 = v69;
      swift_bridgeObjectRelease();
      sub_10006D144(v69, v20);
      unint64_t v73 = v20;
      sub_10006D144(v69, v20);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to select %s", v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(v18, v20);
      unint64_t v73 = v20;
      sub_10006D144(v18, v20);
    }
    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v37 = sub_100088F40((uint64_t)&off_10040F870);
    unint64_t v39 = v75;
    sub_1001E8D48(3, 17, v37, v75, v79, a8, v14, a10, v78);
    sub_10006D144(v18, v73);
LABEL_37:
    sub_1000758E8(a1, 0);
LABEL_38:
    uint64_t v48 = v37;
LABEL_39:
    unint64_t v57 = v39;
    return sub_10006D144(v48, v57);
  }
  uint64_t v51 = qword_100453798;
  id v52 = v81;
  if (v51 != -1) {
    swift_once();
  }
  id v53 = (id)sub_100014F20((uint64_t)v50);
  uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v56 = v55;

  sub_1001E8D48(1, 12, v54, v56, v79, a8, v14, a10, v78);
  sub_10006D144(v18, v20);

  sub_1000758E8(a1, 0);
  uint64_t v48 = v54;
  unint64_t v57 = v56;
  return sub_10006D144(v48, v57);
}

uint64_t sub_100274980()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return swift_deallocClassInstance();
}

uint64_t sub_1002749B8()
{
  uint64_t v1 = *v0;
  id v2 = [self sessionManager];
  id v3 = [v2 getActiveDCKSessions];

  sub_100274C34();
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_retain();
  LOBYTE(v3) = sub_100274C74(v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return v3 & 1;
}

uint64_t sub_100274A74()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced8AlishaSE_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100274B14()
{
  return type metadata accessor for AlishaSE();
}

uint64_t type metadata accessor for AlishaSE()
{
  uint64_t result = qword_10045A1D8;
  if (!qword_10045A1D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100274B68()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AlishaSE.HandoffToken()
{
  return self;
}

unint64_t sub_100274C34()
{
  unint64_t result = qword_1004568A0;
  if (!qword_1004568A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1004568A0);
  }
  return result;
}

uint64_t sub_100274C74(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v22 = v3;
    unint64_t v23 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    while (1)
    {
      id v7 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v2 + 8 * v4);
      uint64_t v8 = v7;
      uint64_t v9 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v10 = [v7 activeEndpoint];
      if (v10)
      {
        unint64_t v11 = v10;
        unint64_t v12 = v2;
        id v13 = [v10 publicKeyIdentifier];

        uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        uint64_t v17 = *(void *)(a2 + 16);
        unint64_t v18 = *(void *)(a2 + 24);
        sub_10006D0EC(v17, v18);
        sub_10006D0EC(v14, v16);
        char v19 = sub_100088AE4(v14, v16, v17, v18);
        uint64_t v20 = v17;
        unint64_t v2 = v12;
        sub_10006D144(v20, v18);
        sub_10006D144(v14, v16);
        sub_10006D144(v14, v16);

        if (v19)
        {
          uint64_t v3 = 1;
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t v5 = *(void *)(a2 + 16);
        unint64_t v6 = *(void *)(a2 + 24);
        sub_10006D0EC(v5, v6);
        sub_100075868(0, 0xF000000000000000);
        sub_100075868(v5, v6);
      }
      ++v4;
      if (v9 == v22)
      {
        uint64_t v3 = 0;
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100274E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100274E7C()
{
  return swift_release();
}

uint64_t sub_100274E84()
{
  uint64_t v1 = *(void *)(sub_10006C51C(&qword_100455EB0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_100274FC8(void *a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(sub_10006C51C(&qword_100455EB0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100273D58(a1, v4, *(unsigned char *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), v2 + v6, *(char **)(v2 + v7), *(unsigned char *)(v2 + v7 + 8));
}

uint64_t sub_100275094()
{
  uint64_t result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for TriggerCoalescer.State();
      if (v3 <= 0x3F) {
        return swift_initClassMetadata2();
      }
    }
  }
  return result;
}

uint64_t sub_1002751C0(uint64_t a1)
{
  __chkstk_darwin();
  unint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v3);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5) == 1) {
    return 1819047278;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v3, v5);
  return 0x676E6974696177;
}

id *sub_10027530C()
{
  swift_bridgeObjectRelease();

  unint64_t v1 = (char *)v0 + qword_10045A320;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  unint64_t v3 = (char *)v0 + qword_10045A330;
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = (char *)v0 + *((void *)*v0 + 17);
  uint64_t v6 = type metadata accessor for TriggerCoalescer.State();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_10027545C()
{
  sub_10027530C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TriggerCoalescer()
{
  return sub_1000B3E5C();
}

uint64_t type metadata accessor for TriggerCoalescer.State()
{
  return sub_1000B3E5C();
}

uint64_t sub_1002754E4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

void *sub_100275560(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v6 + 64);
  if (v8) {
    size_t v10 = *(void *)(v6 + 64);
  }
  else {
    size_t v10 = v9 + 1;
  }
  uint64_t v11 = *(_DWORD *)(v6 + 80);
  if (v11 > 7 || (*(_DWORD *)(v7 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
    return a1;
  }
  if (!v8)
  {
    if (!*((unsigned char *)a2 + v9)) {
      goto LABEL_31;
    }
    int v15 = (*((unsigned __int8 *)a2 + v9) - 1) << (8 * v9);
    if (v9 > 3) {
      int v15 = 0;
    }
    if (v9)
    {
      int v16 = v9 <= 3 ? v9 : 4;
      switch(v16)
      {
        case 2:
          int v17 = *a2;
          break;
        case 3:
          int v17 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v17 = *(_DWORD *)a2;
          break;
        default:
          int v17 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v17 = 0;
    }
    if ((v17 | v15) == 0xFFFFFFFF) {
      goto LABEL_31;
    }
LABEL_30:
    memcpy(a1, a2, v10);
    return a1;
  }
  if ((*(unsigned int (**)(unsigned __int16 *, void, uint64_t))(v7 + 48))(a2, *(unsigned int *)(v7 + 84), v5))
  {
    goto LABEL_30;
  }
LABEL_31:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v5);
  if (!v8) {
    *((unsigned char *)a1 + v9) = 0;
  }
  return a1;
}

uint64_t sub_100275728(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5)
  {
    uint64_t v11 = *(void *)(v3 - 8);
    uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v4 + 48))(a1, v5, v3);
    uint64_t v4 = v11;
    if (result) {
      return result;
    }
    goto LABEL_17;
  }
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_17;
  }
  int v8 = (*((unsigned __int8 *)a1 + v6) - 1) << (8 * v6);
  if (v6 > 3) {
    int v8 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v9 = v6 | v8;
  uint64_t result = (v9 + 1);
  if (v9 == -1)
  {
LABEL_17:
    size_t v10 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v4 + 8);
    return v10(a1, v3);
  }
  return result;
}

unsigned char *sub_100275890(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (v7)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    {
LABEL_22:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v6 + 16))(a1, a2, v5);
      if (!v7) {
        a1[v8] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v8)) {
      goto LABEL_22;
    }
    int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
    if (v8 > 3) {
      int v9 = 0;
    }
    if (v8)
    {
      int v10 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
      switch(v10)
      {
        case 2:
          int v11 = *a2;
          break;
        case 3:
          int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v11 = *(_DWORD *)a2;
          break;
        default:
          int v11 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v11 = 0;
    }
    if ((v11 | v9) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *sub_100275A14(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (!v7)
  {
    char v12 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v13 = (*((unsigned __int8 *)a1 + v8) - 1) << v12;
      if (v8 > 3) {
        int v13 = 0;
      }
      if (v8)
      {
        int v14 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
        switch(v14)
        {
          case 2:
            int v15 = *a1;
            break;
          case 3:
            int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v15 = *(_DWORD *)a1;
            break;
          default:
            int v15 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v15 = 0;
      }
      if ((v15 | v13) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v8)) {
          goto LABEL_54;
        }
        int v16 = (*((unsigned __int8 *)a2 + v8) - 1) << v12;
        if (v8 > 3) {
          int v16 = 0;
        }
        if (v8)
        {
          int v17 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
          switch(v17)
          {
            case 2:
              int v18 = *a2;
              break;
            case 3:
              int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v18 = *(_DWORD *)a2;
              break;
            default:
              int v18 = *(unsigned __int8 *)a2;
              break;
          }
        }
        else
        {
          int v18 = 0;
        }
        if ((v18 | v16) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)a2 + v8))
    {
LABEL_49:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    int v19 = (*((unsigned __int8 *)a2 + v8) - 1) << v12;
    if (v8 > 3) {
      int v19 = 0;
    }
    if (v8)
    {
      if (v8 <= 3) {
        int v20 = *(void *)(v6 + 64);
      }
      else {
        int v20 = 4;
      }
      switch(v20)
      {
        case 2:
          int v21 = *a2;
          break;
        case 3:
          int v21 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v21 = *(_DWORD *)a2;
          break;
        default:
          int v21 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v21 = 0;
    }
    int v11 = (v21 | v19) + 1;
LABEL_43:
    if (v11)
    {
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v9 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  int v10 = v9(a1, v7, v5);
  int v11 = v9(a2, v7, v5);
  if (!v10) {
    goto LABEL_43;
  }
  if (!v11)
  {
LABEL_54:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 16))(a1, a2, v5);
    if (!v7) {
      *((unsigned char *)a1 + v8) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v7) {
    size_t v22 = v8;
  }
  else {
    size_t v22 = v8 + 1;
  }
  memcpy(a1, a2, v22);
  return a1;
}

unsigned char *sub_100275D28(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (v7)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5))
    {
LABEL_22:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v6 + 32))(a1, a2, v5);
      if (!v7) {
        a1[v8] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v8)) {
      goto LABEL_22;
    }
    int v9 = (*((unsigned __int8 *)a2 + v8) - 1) << (8 * v8);
    if (v8 > 3) {
      int v9 = 0;
    }
    if (v8)
    {
      int v10 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
      switch(v10)
      {
        case 2:
          int v11 = *a2;
          break;
        case 3:
          int v11 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v11 = *(_DWORD *)a2;
          break;
        default:
          int v11 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v11 = 0;
    }
    if ((v11 | v9) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  memcpy(a1, a2, v12);
  return a1;
}

unsigned __int16 *sub_100275EAC(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (!v7)
  {
    char v12 = 8 * v8;
    if (*((unsigned char *)a1 + v8))
    {
      int v13 = (*((unsigned __int8 *)a1 + v8) - 1) << v12;
      if (v8 > 3) {
        int v13 = 0;
      }
      if (v8)
      {
        int v14 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
        switch(v14)
        {
          case 2:
            int v15 = *a1;
            break;
          case 3:
            int v15 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v15 = *(_DWORD *)a1;
            break;
          default:
            int v15 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v15 = 0;
      }
      if ((v15 | v13) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)a2 + v8)) {
          goto LABEL_54;
        }
        int v16 = (*((unsigned __int8 *)a2 + v8) - 1) << v12;
        if (v8 > 3) {
          int v16 = 0;
        }
        if (v8)
        {
          int v17 = v8 <= 3 ? *(void *)(v6 + 64) : 4;
          switch(v17)
          {
            case 2:
              int v18 = *a2;
              break;
            case 3:
              int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
              break;
            case 4:
              int v18 = *(_DWORD *)a2;
              break;
            default:
              int v18 = *(unsigned __int8 *)a2;
              break;
          }
        }
        else
        {
          int v18 = 0;
        }
        if ((v18 | v16) == 0xFFFFFFFF) {
          goto LABEL_54;
        }
        goto LABEL_45;
      }
    }
    if (!*((unsigned char *)a2 + v8))
    {
LABEL_49:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    int v19 = (*((unsigned __int8 *)a2 + v8) - 1) << v12;
    if (v8 > 3) {
      int v19 = 0;
    }
    if (v8)
    {
      if (v8 <= 3) {
        int v20 = *(void *)(v6 + 64);
      }
      else {
        int v20 = 4;
      }
      switch(v20)
      {
        case 2:
          int v21 = *a2;
          break;
        case 3:
          int v21 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v21 = *(_DWORD *)a2;
          break;
        default:
          int v21 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v21 = 0;
    }
    int v11 = (v21 | v19) + 1;
LABEL_43:
    if (v11)
    {
      (*(void (**)(unsigned __int16 *, uint64_t))(v6 + 8))(a1, v5);
      goto LABEL_45;
    }
    goto LABEL_49;
  }
  int v9 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
  int v10 = v9(a1, v7, v5);
  int v11 = v9(a2, v7, v5);
  if (!v10) {
    goto LABEL_43;
  }
  if (!v11)
  {
LABEL_54:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v6 + 32))(a1, a2, v5);
    if (!v7) {
      *((unsigned char *)a1 + v8) = 0;
    }
    return a1;
  }
LABEL_45:
  if (v7) {
    size_t v22 = v8;
  }
  else {
    size_t v22 = v8 + 1;
  }
  memcpy(a1, a2, v22);
  return a1;
}

uint64_t sub_1002761C0(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_100276360(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  size_t v10 = *(void *)(v7 + 64);
  if (v8) {
    size_t v11 = *(void *)(v7 + 64);
  }
  else {
    size_t v11 = v10 + 1;
  }
  BOOL v12 = a3 >= v9;
  unsigned int v13 = a3 - v9;
  if (v13 == 0 || !v12)
  {
LABEL_16:
    if (v9 < a2) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  if (v11 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  unsigned int v14 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
  if (!HIWORD(v14))
  {
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
    goto LABEL_16;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_17:
    unsigned int v15 = ~v9 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v17 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
LABEL_24:
  switch(v6)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_29;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x100276630);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_28;
    default:
LABEL_28:
      if (a2)
      {
LABEL_29:
        if (v8 >= 2)
        {
          if (a2 + 1 <= v8)
          {
            if (a2 != -1)
            {
              int v21 = *(void (**)(void))(v7 + 56);
              v21();
            }
          }
          else
          {
            if (v10 <= 3) {
              int v18 = ~(-1 << (8 * v10));
            }
            else {
              int v18 = -1;
            }
            if (v10)
            {
              int v19 = v18 & (a2 - v8);
              if (v10 <= 3) {
                int v20 = v10;
              }
              else {
                int v20 = 4;
              }
              bzero(a1, v10);
              switch(v20)
              {
                case 2:
                  *(_WORD *)a1 = v19;
                  break;
                case 3:
                  *(_WORD *)a1 = v19;
                  a1[2] = BYTE2(v19);
                  break;
                case 4:
                  *(_DWORD *)a1 = v19;
                  break;
                default:
                  *a1 = v19;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_100276668(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  if (*(_DWORD *)(v2 + 84)) {
    return (*(uint64_t (**)(void))(v2 + 48))();
  }
  if (!*((unsigned char *)a1 + v3)) {
    return 0;
  }
  int v5 = (*((unsigned __int8 *)a1 + v3) - 1) << (8 * v3);
  if (v3 > 3) {
    int v5 = 0;
  }
  if (v3)
  {
    if (v3 > 3) {
      LODWORD(v3) = 4;
    }
    switch((int)v3)
    {
      case 2:
        LODWORD(v3) = *a1;
        break;
      case 3:
        LODWORD(v3) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v3) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v3) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v3 | v5) + 1;
}

void sub_100276760(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  size_t v6 = *(void *)(v4 + 64);
  if (v5 >= a2)
  {
    if (v5)
    {
      if (!a2) {
        return;
      }
    }
    else
    {
      a1[v6] = 0;
      if (!a2) {
        return;
      }
    }
    size_t v10 = *(void (**)(void))(v4 + 56);
    v10();
    return;
  }
  unsigned int v7 = ~v5 + a2;
  if (v6 >= 4)
  {
    bzero(a1, v6);
    *(_DWORD *)a1 = v7;
    LOBYTE(v8) = 1;
    if (v5) {
      return;
    }
    goto LABEL_19;
  }
  int v8 = (v7 >> (8 * v6)) + 1;
  if (!v6)
  {
LABEL_18:
    if (v5) {
      return;
    }
    goto LABEL_19;
  }
  int v9 = v7 & ~(-1 << (8 * v6));
  bzero(a1, v6);
  if (v6 == 3)
  {
    *(_WORD *)a1 = v9;
    a1[2] = BYTE2(v9);
    goto LABEL_18;
  }
  if (v6 == 2)
  {
    *(_WORD *)a1 = v9;
    if (v5) {
      return;
    }
    goto LABEL_19;
  }
  *a1 = v9;
  if (!v5) {
LABEL_19:
  }
    a1[v6] = v8;
}

uint64_t sub_1002768C0(id *a1)
{
  id v1 = *a1;
  if ([*a1 endPointType] != (id)1) {
    return 0;
  }
  id v2 = [v1 revocationAttestation];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    sub_10006D144(v4, v6);
    return 0;
  }
  return 1;
}

id sub_100276948()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for AlishaExternal()) init];
  qword_100468988 = (uint64_t)result;
  return result;
}

id sub_100276A78(void *a1, uint64_t a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t))
{
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v13 = sub_10027C76C(v11, v12);
  sub_10006D0EC(v8, v10);
  unsigned int v14 = (void *)a4(v13, v8, v10);
  sub_10006D144(v8, v10);
  swift_bridgeObjectRelease();
  sub_10006D144(v8, v10);

  return v14;
}

void sub_100276B44(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v40 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v8);
  unint64_t v10 = (void *)((char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  sub_10006D0EC(a1, a2);
  if (qword_1004536D8 != -1) {
    swift_once();
  }
  uint64_t v12 = off_100455CB0;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10027EFD4;
  *(void *)(v13 + 24) = v11;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  v38[-4] = sub_1000A97C0;
  v38[-3] = v15;
  v38[-2] = v12;
  __chkstk_darwin(v15, v16);
  v38[-2] = sub_1000A2ABC;
  v38[-1] = v17;
  int v19 = v18 + 4;
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_100079ACC(&v41);
  if (!v3)
  {
    os_unfair_lock_unlock(v19);
    uint64_t v20 = v41;
    swift_release();
    swift_release();
    int v21 = (void *)sub_1000BB0E4(v20);
    swift_bridgeObjectRelease();
    if (!v21)
    {
      char v34 = 0;
      goto LABEL_20;
    }
    unint64_t v39 = a3;
    if (qword_100453738 != -1) {
      swift_once();
    }
    v38[1] = 0;
    id v22 = [v21 publicKeyIdentifier:qword_1004687C0];
    uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    id v26 = [v21 appletIdentifier];
    a3 = (unsigned char *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;

    if (qword_100453928 != -1) {
      swift_once();
    }
    uint64_t v29 = qword_100468A38;
    *unint64_t v10 = qword_100468A38;
    uint64_t v30 = v40;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v40);
    id v31 = (id)v29;
    LOBYTE(v29) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v30);
    if ((v29 & 1) == 0)
    {
      __break(1u);
      goto LABEL_22;
    }
    uint64_t v32 = v38[0];
    if (*(unsigned char *)(v38[0] + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) == 1)
    {
      sub_10006D144((uint64_t)a3, v28);
      sub_10006D144(v23, v25);
      a3 = v39;
      goto LABEL_12;
    }
    sub_10006D0EC(v23, v25);
    sub_10006D0EC((uint64_t)a3, v28);
    uint64_t v35 = swift_bridgeObjectRetain();
    char v36 = sub_100235E7C(v35, v23, v25, (uint64_t)a3, v28);
    sub_10006D144((uint64_t)a3, v28);
    sub_10006D144(v23, v25);
    swift_bridgeObjectRelease();
    if (v36)
    {
      int v37 = *(unsigned __int8 *)(v32 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
      sub_10006D144((uint64_t)a3, v28);
      sub_10006D144(v23, v25);
      if (v37 == 1)
      {
        a3 = v39;
LABEL_12:
        if (qword_1004537A8 == -1)
        {
LABEL_13:
          uint64_t v33 = qword_100468890;

          char v34 = *(unsigned char *)(v33 + OBJC_IVAR____TtC10seserviced6DSKUWB_isAvailable);
LABEL_20:
          *a3 = v34;
          return;
        }
LABEL_22:
        swift_once();
        goto LABEL_13;
      }
    }
    else
    {
      sub_10006D144((uint64_t)a3, v28);
      sub_10006D144(v23, v25);
    }

    char v34 = 0;
    a3 = v39;
    goto LABEL_20;
  }
  os_unfair_lock_unlock(v19);
  __break(1u);
}

uint64_t sub_100277008(void *a1, uint64_t a2, unint64_t a3)
{
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  id v6 = [a1 readerIdentifier];
  if (!v6)
  {
    sub_10006D0EC(a2, a3);
    sub_100075868(0, 0xF000000000000000);
    sub_100075868(a2, a3);
    return 0;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  sub_10006D0EC(a2, a3);
  sub_10006D0EC(v8, v10);
  LOBYTE(v7) = sub_100088AE4(v8, v10, a2, a3);
  sub_10006D144(a2, a3);
  sub_10006D144(v8, v10);
  sub_10006D144(v8, v10);
  if ((v7 & 1) == 0) {
    return 0;
  }
  uint64_t result = (uint64_t)[a1 bleUUID];
  if (result)
  {

    return 1;
  }
  return result;
}

void sub_1002771A0(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  unint64_t v9 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a1, v5);
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, v9, v5);
  if (qword_100453910 != -1) {
    swift_once();
  }
  uint64_t v12 = off_10045AEC8;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10027EBA0;
  *(void *)(v13 + 24) = v11;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  *(&v23 - 4) = (uint64_t)sub_1000AA894;
  *(&v23 - 3) = v15;
  *(&v23 - 2) = (uint64_t)v12;
  __chkstk_darwin(v15, v16);
  *(&v23 - 2) = (uint64_t)sub_1000B61A0;
  *(&v23 - 1) = v17;
  int v19 = v18 + 4;
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_1000AA804(&v24);
  if (v2)
  {
    os_unfair_lock_unlock(v19);
    __break(1u);
  }
  else
  {
    os_unfair_lock_unlock(v19);
    uint64_t v20 = v24;
    swift_release();
    swift_release();
    uint64_t v21 = sub_1000BB13C(v20);
    swift_bridgeObjectRelease();
    if (v21)
    {
      char v22 = *(unsigned char *)(v21 + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
      swift_release();
    }
    else
    {
      char v22 = 0;
    }
    *a2 = v22;
  }
}

void sub_100277500(unsigned int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (qword_100453948 != -1) {
    swift_once();
  }
  sub_1002D9F44(a1, a2, a3);
  if (v4)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    swift_dynamicCast();
    uint64_t v9 = v10;
    swift_errorRelease();
  }
  else
  {
    uint64_t v9 = 0;
  }
  *a4 = v9;
}

void sub_100277688(__int16 a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  unint64_t v93 = a6;
  uint64_t v92 = a5;
  unint64_t v102 = a4;
  uint64_t v106 = a3;
  LOBYTE(v9) = a2;
  LOWORD(v10) = a1;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453948 != -1) {
    goto LABEL_134;
  }
  while (1)
  {
    uint64_t v17 = qword_100468A68;
    if (qword_100453928 != -1) {
      swift_once();
    }
    uint64_t v18 = qword_100468A38;
    *(void *)uint64_t v16 = qword_100468A38;
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
    id v19 = (id)v18;
    LOBYTE(v18) = _dispatchPreconditionTest(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    if ((v18 & 1) == 0)
    {
      __break(1u);
LABEL_136:
      swift_bridgeObjectRetain_n();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      if (!v13)
      {
LABEL_137:
        swift_bridgeObjectRelease_n();
        id v82 = objc_allocWithZone((Class)NSError);
        NSString v83 = String._bridgeToObjectiveC()();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v85 = [v82 initWithDomain:v83 code:16 userInfo:isa];

        *uint64_t v98 = v85;
        return;
      }
      goto LABEL_7;
    }
    uint64_t v98 = (void *)a7;
    uint64_t v20 = (unint64_t *)(v17 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess();
    a7 = *v20;
    unint64_t v21 = *v20 >> 62;
    uint64_t v97 = v8;
    if (v21) {
      goto LABEL_136;
    }
    uint64_t v13 = *(void *)((a7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v13) {
      goto LABEL_137;
    }
LABEL_7:
    uint64_t v12 = v9;
    int v22 = (unsigned __int16)v10;
    unint64_t v108 = a7 & 0xC000000000000001;
    unint64_t v91 = HIDWORD(v106);
    BOOL v23 = __OFSUB__(HIDWORD(v106), v106);
    BOOL v96 = v23;
    size_t v95 = HIDWORD(v106) - (int)v106;
    size_t v107 = BYTE6(v102);
    unint64_t v101 = v102 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v94 = (int)v106;
    uint64_t v90 = v106 >> 32;
    uint64_t v89 = (v106 >> 32) - (int)v106;
    uint64_t v24 = 4;
    unint64_t v99 = v102 >> 62;
    uint64_t v100 = v13;
    unint64_t v105 = v102 >> 62;
    int v103 = (unsigned __int16)v10;
    unsigned int v104 = v9;
LABEL_14:
    uint64_t v10 = v24 - 4;
    if (v108) {
      break;
    }
    uint64_t v16 = *(char **)(a7 + 8 * v24);
    swift_retain();
    uint64_t v8 = v24 - 3;
    if (!__OFADD__(v10, 1)) {
      goto LABEL_19;
    }
LABEL_133:
    __break(1u);
LABEL_134:
    swift_once();
  }
  uint64_t v16 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v8 = v24 - 3;
  if (__OFADD__(v10, 1)) {
    goto LABEL_133;
  }
LABEL_19:
  if (*(unsigned __int16 *)&v16[OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier] != v22
    || v16[16] != v12)
  {
    goto LABEL_13;
  }
  uint64_t v25 = *(void *)&v16[OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier];
  unint64_t v26 = *(void *)&v16[OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8];
  uint64_t v9 = 0;
  switch(v26 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v25), v25))
      {
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        __break(1u);
LABEL_148:
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        __break(1u);
LABEL_154:
        __break(1u);
LABEL_155:
        __break(1u);
LABEL_156:
        __break(1u);
LABEL_157:
        __break(1u);
LABEL_158:
        __break(1u);
LABEL_159:
        __break(1u);
LABEL_160:
        __break(1u);
      }
      uint64_t v9 = HIDWORD(v25) - (int)v25;
LABEL_26:
      sub_10006D0EC(*(void *)&v16[OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier], *(void *)&v16[OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8]);
      break;
    case 2uLL:
      uint64_t v28 = *(void *)(v25 + 16);
      uint64_t v27 = *(void *)(v25 + 24);
      uint64_t v9 = v27 - v28;
      if (!__OFSUB__(v27, v28)) {
        goto LABEL_26;
      }
      goto LABEL_139;
    case 3uLL:
      break;
    default:
      uint64_t v9 = BYTE6(v26);
      break;
  }
  size_t v29 = v107;
  switch(v105)
  {
    case 1uLL:
      size_t v29 = v95;
      if (v96) {
        goto LABEL_140;
      }
      goto LABEL_31;
    case 2uLL:
      uint64_t v31 = *(void *)(v106 + 16);
      uint64_t v30 = *(void *)(v106 + 24);
      BOOL v32 = __OFSUB__(v30, v31);
      size_t v29 = v30 - v31;
      if (!v32) {
        goto LABEL_31;
      }
      goto LABEL_141;
    case 3uLL:
      if (v9) {
        goto LABEL_12;
      }
      goto LABEL_129;
    default:
LABEL_31:
      if (v9 != v29)
      {
LABEL_12:
        sub_10006D144(v25, v26);
        int v22 = v103;
        uint64_t v12 = v104;
        goto LABEL_13;
      }
      if (v9 >= 1)
      {
        switch(v26 >> 62)
        {
          case 1uLL:
            if ((int)v25 > v25 >> 32) {
              goto LABEL_142;
            }
            LOBYTE(v9) = v26;
            int v37 = (char *)__DataStorage._bytes.getter();
            if (!v37) {
              goto LABEL_45;
            }
            uint64_t v38 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v38)) {
              goto LABEL_144;
            }
            v37 += (int)v25 - v38;
LABEL_45:
            uint64_t v13 = v100;
            __DataStorage._length.getter();
            if (v99)
            {
              if (v99 == 1)
              {
                if (v90 < v94) {
                  goto LABEL_153;
                }
                swift_retain();
                uint64_t v39 = __DataStorage._bytes.getter();
                if (v39)
                {
                  uint64_t v40 = __DataStorage._offset.getter();
                  if (__OFSUB__(v94, v40)) {
                    goto LABEL_160;
                  }
                  v39 += v94 - v40;
                }
                LOBYTE(v9) = v101;
                uint64_t v41 = __DataStorage._length.getter();
                size_t v42 = v89;
                if (v41 < v89) {
                  size_t v42 = v41;
                }
                if (!v37) {
                  goto LABEL_174;
                }
                if (!v39) {
                  goto LABEL_162;
                }
                size_t v43 = v42;
                id v44 = v37;
                id v45 = (const void *)v39;
LABEL_68:
                int v54 = memcmp(v44, v45, v43);
                sub_10006D144(v106, v102);
              }
              else
              {
                uint64_t v87 = v37;
                uint64_t v75 = *(void *)(v106 + 16);
                uint64_t v88 = *(char **)(v106 + 24);
                swift_retain();
                swift_retain();
                uint64_t v76 = (char *)__DataStorage._bytes.getter();
                if (v76)
                {
                  uint64_t v77 = __DataStorage._offset.getter();
                  if (__OFSUB__(v75, v77)) {
                    goto LABEL_159;
                  }
                  v76 += v75 - v77;
                }
                BOOL v32 = __OFSUB__(v88, v75);
                char v78 = &v88[-v75];
                if (v32) {
                  goto LABEL_154;
                }
                LOBYTE(v9) = v101;
                uint64_t v79 = __DataStorage._length.getter();
                if (v79 >= (uint64_t)v78) {
                  size_t v80 = (size_t)v78;
                }
                else {
                  size_t v80 = v79;
                }
                if (!v87) {
                  goto LABEL_172;
                }
                if (!v76) {
                  goto LABEL_173;
                }
                int v54 = memcmp(v87, v76, v80);
LABEL_125:
                swift_release();
                swift_release();
              }
              sub_10006D144(v25, v26);
              uint64_t v13 = v100;
            }
            else
            {
              LODWORD(__s1[0]) = v106;
              BYTE4(__s1[0]) = v91;
              *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v106 + 5);
              HIBYTE(__s1[0]) = HIBYTE(v106);
              LODWORD(__s1[1]) = v102;
              WORD2(__s1[1]) = WORD2(v102);
              if (!v37) {
                goto LABEL_171;
              }
              unint64_t v56 = __s1;
              unint64_t v55 = v37;
LABEL_114:
              int v54 = memcmp(v55, v56, v107);
              sub_10006D144(v25, v26);
            }
            int v22 = v103;
            uint64_t v12 = v104;
            if (!v54) {
              goto LABEL_130;
            }
            break;
          case 2uLL:
            uint64_t v46 = *(char **)(v25 + 16);
            swift_retain();
            swift_retain();
            uint64_t v47 = __DataStorage._bytes.getter();
            if (v47)
            {
              uint64_t v48 = v47;
              uint64_t v88 = v46;
              uint64_t v49 = v26 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v50 = __DataStorage._offset.getter();
              if (__OFSUB__(v88, v50)) {
                goto LABEL_143;
              }
              uint64_t v88 = &v88[v48 - v50];
            }
            else
            {
              uint64_t v49 = v26 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v88 = 0;
            }
            __DataStorage._length.getter();
            uint64_t v13 = v100;
            if (v99)
            {
              if (v99 == 1)
              {
                if (v90 < v94) {
                  goto LABEL_147;
                }
                swift_retain();
                unint64_t v57 = (char *)__DataStorage._bytes.getter();
                if (v57)
                {
                  uint64_t v58 = __DataStorage._offset.getter();
                  if (__OFSUB__(v94, v58)) {
                    goto LABEL_158;
                  }
                  v57 += v94 - v58;
                }
                uint64_t v59 = __DataStorage._length.getter();
                size_t v60 = v89;
                if (v59 < v89) {
                  size_t v60 = v59;
                }
                if (!v88) {
                  goto LABEL_164;
                }
                if (!v57) {
                  goto LABEL_165;
                }
                LODWORD(v9) = memcmp(v88, v57, v60);
                sub_10006D144(v106, v102);
                swift_release();
              }
              else
              {
                v86[1] = v49;
                uint64_t v69 = *(void *)(v106 + 16);
                uint64_t v87 = *(char **)(v106 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = (char *)__DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v71)) {
                    goto LABEL_157;
                  }
                  v70 += v69 - v71;
                }
                BOOL v32 = __OFSUB__(v87, v69);
                unint64_t v72 = &v87[-v69];
                if (v32) {
                  goto LABEL_152;
                }
                uint64_t v73 = __DataStorage._length.getter();
                if (v73 >= (uint64_t)v72) {
                  size_t v74 = (size_t)v72;
                }
                else {
                  size_t v74 = v73;
                }
                if (!v88) {
                  goto LABEL_169;
                }
                if (!v70) {
                  goto LABEL_170;
                }
                LODWORD(v9) = memcmp(v88, v70, v74);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_10006D144(v25, v26);
              uint64_t v13 = v100;
            }
            else
            {
              LODWORD(__s1[0]) = v106;
              BYTE4(__s1[0]) = v91;
              *(_WORD *)((char *)__s1 + 5) = *(_WORD *)((char *)&v106 + 5);
              HIBYTE(__s1[0]) = HIBYTE(v106);
              LODWORD(__s1[1]) = v102;
              WORD2(__s1[1]) = WORD2(v102);
              if (!v88) {
                goto LABEL_168;
              }
              LODWORD(v9) = memcmp(v88, __s1, v107);
              swift_release();
              swift_release();
              sub_10006D144(v25, v26);
            }
            int v22 = v103;
            uint64_t v12 = v104;
            if (!v9) {
              goto LABEL_130;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v99) {
              goto LABEL_69;
            }
            if (v99 == 1)
            {
              if (v90 < v94) {
                goto LABEL_146;
              }
              sub_10006D0EC(v106, v102);
              LOBYTE(v9) = v101;
              uint64_t v51 = __DataStorage._bytes.getter();
              if (!v51) {
                goto LABEL_163;
              }
              uint64_t v34 = v51;
              uint64_t v52 = __DataStorage._offset.getter();
              uint64_t v36 = v94 - v52;
              if (__OFSUB__(v94, v52)) {
                goto LABEL_151;
              }
LABEL_64:
              uint64_t v53 = __DataStorage._length.getter();
              id v45 = (const void *)(v34 + v36);
              if (v53 >= v89) {
                size_t v43 = v89;
              }
              else {
                size_t v43 = v53;
              }
              id v44 = __s1;
              goto LABEL_68;
            }
            uint64_t v66 = *(void *)(v106 + 16);
            uint64_t v88 = *(char **)(v106 + 24);
            swift_retain();
            swift_retain();
            uint64_t v62 = (char *)__DataStorage._bytes.getter();
            if (v62)
            {
              uint64_t v67 = __DataStorage._offset.getter();
              if (__OFSUB__(v66, v67)) {
                goto LABEL_156;
              }
              v62 += v66 - v67;
            }
            BOOL v32 = __OFSUB__(v88, v66);
            unint64_t v64 = &v88[-v66];
            if (v32) {
              goto LABEL_149;
            }
            LOBYTE(v9) = v101;
            uint64_t v65 = __DataStorage._length.getter();
            if (!v62) {
              goto LABEL_167;
            }
LABEL_93:
            if (v65 >= (uint64_t)v64) {
              size_t v68 = (size_t)v64;
            }
            else {
              size_t v68 = v65;
            }
            int v54 = memcmp(__s1, v62, v68);
            goto LABEL_125;
          default:
            __s1[0] = v25;
            LOWORD(__s1[1]) = v26;
            BYTE2(__s1[1]) = BYTE2(v26);
            BYTE3(__s1[1]) = BYTE3(v26);
            BYTE4(__s1[1]) = BYTE4(v26);
            BYTE5(__s1[1]) = BYTE5(v26);
            if (!v99)
            {
LABEL_69:
              LODWORD(v109) = v106;
              BYTE4(v109) = v91;
              *(_WORD *)((char *)&v109 + 5) = *(_WORD *)((char *)&v106 + 5);
              HIBYTE(v109) = HIBYTE(v106);
              int v110 = v102;
              __int16 v111 = WORD2(v102);
              unint64_t v55 = __s1;
              unint64_t v56 = &v109;
              goto LABEL_114;
            }
            if (v99 == 1)
            {
              if (v90 < v94) {
                goto LABEL_145;
              }
              sub_10006D0EC(v106, v102);
              LOBYTE(v9) = v101;
              uint64_t v33 = __DataStorage._bytes.getter();
              if (!v33)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __DataStorage._length.getter();
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
LABEL_170:
                __break(1u);
LABEL_171:
                __break(1u);
LABEL_172:
                __break(1u);
LABEL_173:
                __break(1u);
LABEL_174:
                __break(1u);
                JUMPOUT(0x100278428);
              }
              uint64_t v34 = v33;
              uint64_t v35 = __DataStorage._offset.getter();
              uint64_t v36 = v94 - v35;
              if (__OFSUB__(v94, v35)) {
                goto LABEL_150;
              }
              goto LABEL_64;
            }
            uint64_t v61 = *(void *)(v106 + 16);
            uint64_t v88 = *(char **)(v106 + 24);
            swift_retain();
            swift_retain();
            uint64_t v62 = (char *)__DataStorage._bytes.getter();
            if (v62)
            {
              uint64_t v63 = __DataStorage._offset.getter();
              if (__OFSUB__(v61, v63)) {
                goto LABEL_155;
              }
              v62 += v61 - v63;
            }
            BOOL v32 = __OFSUB__(v88, v61);
            unint64_t v64 = &v88[-v61];
            if (v32) {
              goto LABEL_148;
            }
            LOBYTE(v9) = v101;
            uint64_t v65 = __DataStorage._length.getter();
            if (!v62) {
              goto LABEL_166;
            }
            goto LABEL_93;
        }
LABEL_13:
        swift_release();
        ++v24;
        if (v8 == v13) {
          goto LABEL_137;
        }
        goto LABEL_14;
      }
LABEL_129:
      sub_10006D144(v25, v26);
LABEL_130:
      swift_bridgeObjectRelease_n();
      uint64_t v81 = v97;
      sub_1002DA8E4((uint64_t)v16, v92, v93);
      if (v81)
      {
        __s1[0] = v81;
        sub_10006C51C((uint64_t *)&unk_10045AFD0);
        sub_10007582C(0, (unint64_t *)&qword_100454598);
        swift_dynamicCast();
        swift_release();
        *uint64_t v98 = v109;
        swift_errorRelease();
      }
      else
      {
        swift_release();
        *uint64_t v98 = 0;
      }
      return;
  }
}

unint64_t sub_10027853C@<X0>(char a1@<W0>, unint64_t *a2@<X8>)
{
  if (qword_100453878 != -1) {
    swift_once();
  }
  unint64_t result = sub_10025DFA4(a1 & 1);
  *a2 = result;
  return result;
}

void sub_100278630(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  uint64_t v13 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, v13, v9);
  if (qword_100453910 != -1) {
    swift_once();
  }
  uint64_t v16 = off_10045AEC8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_10027EBA0;
  *(void *)(v17 + 24) = v15;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  *(&v30 - 4) = (uint64_t)sub_1000AA894;
  *(&v30 - 3) = v19;
  *(&v30 - 2) = (uint64_t)v16;
  __chkstk_darwin(v19, v20);
  *(&v30 - 2) = (uint64_t)sub_1000B61A0;
  *(&v30 - 1) = v21;
  BOOL v23 = v22 + 4;
  swift_retain();
  os_unfair_lock_lock(v23);
  sub_1000AA804(&v31);
  if (!v4)
  {
    os_unfair_lock_unlock(v23);
    uint64_t v24 = v31;
    swift_release();
    swift_release();
    uint64_t v25 = sub_1000BB13C(v24);
    swift_bridgeObjectRelease();
    if (v25)
    {
      if (*(unsigned char *)(v25 + OBJC_IVAR____TtC10seserviced4Peer_isConnected))
      {
        if (qword_1004536B0 != -1) {
          swift_once();
        }
        if (qword_100453798 != -1) {
          swift_once();
        }
        uint64_t v26 = sub_1001F28F8(4, 16, a2, a3);
        unint64_t v28 = v27;
        sub_1000CB6FC(v26, v27);
        swift_release();
        sub_10006D144(v26, v28);
        id v29 = 0;
        goto LABEL_13;
      }
      swift_release();
    }
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    id v29 = sub_100299FAC(13, 0, 0xD000000000000018, 0x80000001003B9B70, 0);
LABEL_13:
    *a4 = v29;
    return;
  }
  os_unfair_lock_unlock(v23);
  __break(1u);
}

uint64_t sub_100278B2C@<X0>(void *a1@<X8>)
{
  unint64_t v28 = a1;
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  unint64_t v5 = (unint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453948 != -1) {
    swift_once();
  }
  uint64_t v6 = qword_100468A68;
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *(void *)unint64_t v5 = qword_100468A38;
  (*(void (**)(unint64_t, void, uint64_t))(v2 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v1);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t v10 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  uint64_t v9 = (void *)(v2 + 8);
  v10(v5, v1);
  if (v7)
  {
    uint64_t v11 = (unint64_t *)(v6 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess();
    unint64_t v5 = *v11;
    uint64_t v9 = _swiftEmptyArrayStorage;
    unint64_t v31 = (unint64_t)_swiftEmptyArrayStorage;
    if (!(v5 >> 62))
    {
      uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v12) {
        goto LABEL_8;
      }
LABEL_21:
      swift_bridgeObjectRelease();
      unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
      if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
        goto LABEL_31;
      }
      goto LABEL_22;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v12 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_8:
  if (v12 < 1)
  {
    __break(1u);
    goto LABEL_35;
  }
  for (uint64_t i = 0; i != v12; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v15 = *(void *)(v5 + 8 * i + 32);
      swift_retain();
    }
    if (*(unsigned char *)(v15 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) == 2)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    else
    {
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = v31;
  if ((v31 & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
LABEL_22:
  if ((v16 & 0x4000000000000000) == 0)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    if (!v17)
    {
LABEL_32:
      uint64_t result = swift_release();
      unint64_t v27 = _swiftEmptyArrayStorage;
LABEL_33:
      *unint64_t v28 = v27;
      return result;
    }
    goto LABEL_24;
  }
LABEL_31:
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v17) {
    goto LABEL_32;
  }
LABEL_24:
  unint64_t v31 = (unint64_t)v9;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = 0;
    unint64_t v29 = v16 & 0xC000000000000001;
    uint64_t v19 = (void *)v16;
    do
    {
      if (v29)
      {
        uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v20 = *(void *)(v16 + 8 * v18 + 32);
        swift_retain();
      }
      ++v18;
      uint64_t v21 = *(void *)(v20 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
      unint64_t v22 = *(void *)(v20 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
      __int16 v23 = *(_WORD *)(v20 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
      uint64_t v24 = (objc_class *)type metadata accessor for AlishaExternal.RequestInProgress();
      uint64_t v25 = (char *)objc_allocWithZone(v24);
      uint64_t v26 = (uint64_t *)&v25[OBJC_IVAR____TtCC10seserviced14AlishaExternal17RequestInProgress_keyIdentifier];
      uint64_t *v26 = v21;
      v26[1] = v22;
      *(_WORD *)&v25[OBJC_IVAR____TtCC10seserviced14AlishaExternal17RequestInProgress_functionIdentifier] = v23;
      sub_10006D0EC(v21, v22);
      v30.receiver = v25;
      v30.super_class = v24;
      [super init];
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v16 = (unint64_t)v19;
    }
    while (v17 != v18);
    unint64_t v27 = (void *)v31;
    uint64_t result = swift_release();
    goto LABEL_33;
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_100279104(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, unint64_t a7, uint64_t a8, void (*a9)(Class, void *), void (*a10)(Class, void *), uint64_t a11)
{
  if (a2)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a2;
    *(void *)(v16 + 24) = a3;
    uint64_t v17 = sub_10027EE74;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  sub_10008BEBC(a2);
  if (qword_100453948 != -1) {
    swift_once();
  }
  if (a1 == 2) {
    int v18 = 2;
  }
  else {
    int v18 = a1 == 1;
  }
  uint64_t v19 = qword_100468A68;
  swift_retain();
  sub_1002E7748(a4, a5, a6, a7, v18, (uint64_t)v17, v16, a8, a9, v19, a10, a11);
  swift_release();

  return sub_10008BECC((uint64_t)v17);
}

void sub_100279254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(Class, Class, uint64_t, uint64_t, uint64_t, uint64_t))
{
  Class isa = UInt16._bridgeToObjectiveC()().super.super.isa;
  Class v13 = UInt8._bridgeToObjectiveC()().super.super.isa;
  a7(isa, v13, a3, a4, a5, a6);
}

void sub_1002792F8(__int16 a1, void (*a2)(Class, void *))
{
  if ((a1 & 0x100) != 0)
  {
    switch((char)a1)
    {
      case 1:
        id v7 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v7 initWithDomain:v4 code:15 userInfo:v5.super.isa];
        break;
      case 2:
        id v8 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v8 initWithDomain:v4 code:0 userInfo:v5.super.isa];
        break;
      case 3:
        id v9 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v9 initWithDomain:v4 code:1 userInfo:v5.super.isa];
        break;
      case 4:
        id v10 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v10 initWithDomain:v4 code:18 userInfo:v5.super.isa];
        break;
      case 5:
        id v11 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v11 initWithDomain:v4 code:14 userInfo:v5.super.isa];
        break;
      case 6:
        id v12 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v12 initWithDomain:v4 code:2 userInfo:v5.super.isa];
        break;
      case 7:
        id v13 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v13 initWithDomain:v4 code:16 userInfo:v5.super.isa];
        break;
      case 8:
        id v14 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v14 initWithDomain:v4 code:13 userInfo:v5.super.isa];
        break;
      default:
        id v3 = objc_allocWithZone((Class)NSError);
        NSString v4 = String._bridgeToObjectiveC()();
        v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v6 = [v3 initWithDomain:v4 code:4 userInfo:v5.super.isa];
        break;
    }
    uint64_t v15 = v6;

    Class isa = v15;
    a2(0, v15);
  }
  else
  {
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    a2(isa, 0);
  }
}

void sub_100279990(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a4 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  id v11 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t, uint64_t, Class, objc_class *))(a7 + 16))(a7, a1, a2, isa, v11);
}

void sub_100279A44(uint64_t a1, uint64_t a2)
{
  if (qword_1004537A8 != -1) {
    a1 = swift_once();
  }
  __chkstk_darwin(a1, a2);
  uint64_t v2 = sub_1001F98E0((uint64_t (*)(id))sub_10027ED5C);
  id v3 = (void *)sub_1000BB110((uint64_t)v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    sub_1001FF2E0();
    sub_1001FF150();
  }
}

uint64_t sub_100279B38(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_10006D0EC(a1, a2);
  if (qword_100453910 != -1) {
    swift_once();
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10027EC74;
  *(void *)(v9 + 24) = v8;
  uint64_t v17 = __chkstk_darwin(v9, v10);
  __chkstk_darwin(v17, v11);
  id v13 = v12 + 4;
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_1000AA804(&v18);
  os_unfair_lock_unlock(v13);
  uint64_t v14 = v18;
  swift_release();
  swift_release();
  uint64_t v15 = sub_1000BB13C(v14);
  uint64_t result = swift_bridgeObjectRelease();
  if (v15)
  {
    if (qword_100453798 != -1) {
      swift_once();
    }
    sub_1001EB1C8(a3, a4, v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_100279D54(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v29 = a4;
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  sub_10006D0EC(a1, a2);
  if (qword_100453910 != -1) {
    swift_once();
  }
  id v13 = off_10045AEC8;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10027F054;
  *(void *)(v14 + 24) = v12;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  *(&v28 - 4) = (uint64_t)sub_1000AA894;
  *(&v28 - 3) = v16;
  *(&v28 - 2) = (uint64_t)v13;
  __chkstk_darwin(v16, v17);
  *(&v28 - 2) = (uint64_t)sub_1000B61A0;
  *(&v28 - 1) = v18;
  uint64_t v20 = v19 + 4;
  swift_retain();
  os_unfair_lock_lock(v20);
  sub_1000AA804(&v30);
  os_unfair_lock_unlock(v20);
  uint64_t v21 = v30;
  swift_release();
  swift_release();
  uint64_t v22 = sub_1000BB13C(v21);
  uint64_t result = swift_bridgeObjectRelease();
  if (v22)
  {
    if (qword_100453798 != -1) {
      swift_once();
    }
    uint64_t v24 = qword_100468880;
    if (qword_100453928 != -1) {
      swift_once();
    }
    uint64_t v25 = (void *)qword_100468A38;
    *uint64_t v11 = qword_100468A38;
    (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
    id v26 = v25;
    char v27 = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v8 + 8))(v11, v7);
    if (v27)
    {
      if (qword_100453938 == -1)
      {
LABEL_10:
        sub_1002BD288(v22 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, a3, v29);
        if (*(unsigned char *)(v24 + OBJC_IVAR____TtC10seserviced6Alisha_isLowPowerModeEnabled) == 1)
        {
          if (qword_1004536B0 != -1) {
            swift_once();
          }
          sub_1000CAD08();
        }
        return swift_release();
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10027A11C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;
  id v15 = a4;
  id v16 = a1;
  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v19 = v18;

  sub_10027D5DC(v12, v14, v17, v19, a5, a6, a7);
  sub_10006D144(v17, v19);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10027A1E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7 + v6, (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if (qword_100453910 != -1) {
    swift_once();
  }
  uint64_t v8 = off_10045AEC8;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10027EBA0;
  *(void *)(v9 + 24) = v7;
  uint64_t v11 = __chkstk_darwin(v9, v10);
  *(&v19 - 4) = (uint64_t)sub_1000AA894;
  *(&v19 - 3) = v11;
  *(&v19 - 2) = (uint64_t)v8;
  __chkstk_darwin(v11, v12);
  *(&v19 - 2) = (uint64_t)sub_1000B61A0;
  *(&v19 - 1) = v13;
  id v15 = v14 + 4;
  swift_retain();
  os_unfair_lock_lock(v15);
  sub_1000AA804(&v20);
  os_unfair_lock_unlock(v15);
  uint64_t v16 = v20;
  swift_release();
  swift_release();
  uint64_t v17 = sub_1000BB13C(v16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v17)
  {
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000D797C(v17);
    return swift_release();
  }
  return result;
}

uint64_t sub_10027A46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type);
  if (v9 == 4)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    char v10 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
    if (v9) {
      char v10 = 0;
    }
    else {
      char v10 = static UUID.== infix(_:_:)();
    }
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10 & 1;
}

uint64_t sub_10027A5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10027D88C((uint64_t)v13, a4, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_10027A6DC(int64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t result = __chkstk_darwin(v6, v9);
  if (a1 != 0xFFFF && a2 != 0xFFFF)
  {
    if (qword_100453948 != -1) {
      swift_once();
    }
    uint64_t v11 = (uint64_t *)(qword_100468A68 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe);
    swift_beginAccess();
    uint64_t v12 = *v11;
    swift_bridgeObjectRetain();
    char v13 = sub_1000B703C(a3, v12);
    uint64_t result = swift_bridgeObjectRelease();
    if (v13)
    {
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(&v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], a3, v6);
      unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v15 = swift_allocObject();
      (*(void (**)(unint64_t, unsigned char *, uint64_t))(v7 + 32))(v15 + v14, &v27[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v6);
      if (qword_100453910 != -1) {
        swift_once();
      }
      uint64_t v16 = off_10045AEC8;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = sub_10027EB10;
      *(void *)(v17 + 24) = v15;
      uint64_t v19 = __chkstk_darwin(v17, v18);
      *(void *)&v27[-32] = sub_1000AA894;
      *(void *)&v27[-24] = v19;
      *(void *)&v27[-16] = v16;
      __chkstk_darwin(v19, v20);
      *(void *)&v27[-16] = sub_1000B61A0;
      *(void *)&v27[-8] = v21;
      __int16 v23 = v22 + 4;
      swift_retain();
      os_unfair_lock_lock(v23);
      sub_1000AA804(&v28);
      os_unfair_lock_unlock(v23);
      uint64_t v24 = v28;
      swift_release();
      swift_release();
      uint64_t v25 = sub_1000BB13C(v24);
      uint64_t result = swift_bridgeObjectRelease();
      if (v25)
      {
        uint64_t v26 = a1 + a2;
        if (__OFADD__(a1, a2))
        {
          __break(1u);
        }
        else if (v26 >= a1)
        {
          sub_1002DB0E8(a1, v26, v25);
          return swift_release();
        }
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_10027AA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
LABEL_5:
    char v10 = 0;
    goto LABEL_6;
  }
  int v9 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  if (v9 != 1) {
    goto LABEL_5;
  }
  char v10 = static UUID.== infix(_:_:)();
LABEL_6:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10 & 1;
}

uint64_t sub_10027AC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  if (qword_100453938 != -1) {
    swift_once();
  }
  return a4(a1, a2, a3);
}

uint64_t sub_10027AD20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  id v19 = a1;
  sub_10027DF40((uint64_t)v15, v16, v18, a5, a6, a7);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t sub_10027AE54(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  sub_10006D0EC(a1, a2);
  if (qword_100453910 != -1) {
    swift_once();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1001F7D44;
  *(void *)(v5 + 24) = v4;
  uint64_t v13 = __chkstk_darwin(v5, v6);
  __chkstk_darwin(v13, v7);
  int v9 = v8 + 4;
  swift_retain();
  os_unfair_lock_lock(v9);
  sub_1000AA804(&v14);
  os_unfair_lock_unlock(v9);
  uint64_t v10 = v14;
  swift_release();
  swift_release();
  uint64_t v11 = sub_1000BB13C(v10);
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    if (qword_1004537D8 != -1) {
      swift_once();
    }
    sub_10020827C(v11);
    return swift_release();
  }
  return result;
}

uint64_t sub_10027B064(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_10006D0EC(a1, a2);
  if (qword_100453910 != -1) {
    swift_once();
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10027F054;
  *(void *)(v9 + 24) = v8;
  uint64_t v17 = __chkstk_darwin(v9, v10);
  __chkstk_darwin(v17, v11);
  uint64_t v13 = v12 + 4;
  swift_retain();
  os_unfair_lock_lock(v13);
  sub_100079ACC(&v18);
  os_unfair_lock_unlock(v13);
  uint64_t v14 = v18;
  swift_release();
  swift_release();
  uint64_t v15 = (char *)sub_1000BB13C(v14);
  uint64_t result = swift_bridgeObjectRelease();
  if (v15)
  {
    if (qword_1004536E0 != -1) {
      swift_once();
    }
    sub_10012BC54(a3, a4, 0, v15);
    return swift_release();
  }
  return result;
}

uint64_t sub_10027B25C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
  if (v6 >> 60 == 15)
  {
    sub_10006D0EC(a2, a3);
    sub_100075868(v5, v6);
    sub_100075868(a2, a3);
    return 0;
  }
  sub_1000758F4(*(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), v6);
  sub_10006D0EC(a2, a3);
  char v8 = sub_100088AE4(v5, v6, a2, a3);
  sub_10006D144(a2, a3);
  sub_100075868(v5, v6);
  return v8 & 1;
}

void sub_10027B410(uint64_t a1, unint64_t a2)
{
  if (qword_100453798 != -1) {
    swift_once();
  }
  sub_1001F0298(a1, a2);
}

void sub_10027B4A8(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = a3;
  id v14 = a1;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  sub_10027E578(v11, v13, a4, a5, a6);
  sub_10006D144(v11, v13);
}

id sub_10027B5FC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AlishaExternal.RequestInProgress();
  return [super dealloc];
}

uint64_t type metadata accessor for AlishaExternal()
{
  return self;
}

uint64_t type metadata accessor for AlishaExternal.RequestInProgress()
{
  return self;
}

id sub_10027B6D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_1001F7C04();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = __s1[2];
    uint64_t v52 = __s1[3];
    uint64_t v6 = __s1[4];
    int64_t v7 = __s1[5];
    unint64_t v8 = __s1[6];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v52 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  uint64_t v45 = v6;
  int64_t v51 = (unint64_t)(v6 + 64) >> 6;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v47 = v12;
  uint64_t v48 = v5;
  while (2)
  {
    int64_t v13 = v7;
    if (v5 < 0)
    {
      uint64_t v16 = __CocoaSet.Iterator.next()();
      if (!v16)
      {
        id v17 = 0;
        goto LABEL_73;
      }
      uint64_t v56 = v16;
      sub_10007582C(0, (unint64_t *)&qword_100458810);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v17 = (id)__s1[0];
      swift_unknownObjectRelease();
      uint64_t v14 = v8;
      if (!v17) {
        goto LABEL_73;
      }
    }
    else
    {
      if (v8)
      {
        uint64_t v14 = (v8 - 1) & v8;
        unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
      }
      else
      {
        ++v7;
        if (__OFADD__(v13, 1)) {
          goto LABEL_78;
        }
        if (v7 >= v51)
        {
LABEL_71:
          id v17 = 0;
          goto LABEL_73;
        }
        unint64_t v18 = *(void *)(v52 + 8 * v7);
        if (!v18)
        {
          int64_t v19 = v13 + 2;
          if (v13 + 2 >= v51) {
            goto LABEL_71;
          }
          unint64_t v18 = *(void *)(v52 + 8 * v19);
          if (v18) {
            goto LABEL_29;
          }
          int64_t v19 = v13 + 3;
          if (v13 + 3 >= v51) {
            goto LABEL_71;
          }
          unint64_t v18 = *(void *)(v52 + 8 * v19);
          if (v18) {
            goto LABEL_29;
          }
          int64_t v19 = v13 + 4;
          if (v13 + 4 >= v51) {
            goto LABEL_71;
          }
          unint64_t v18 = *(void *)(v52 + 8 * v19);
          if (v18)
          {
LABEL_29:
            int64_t v7 = v19;
          }
          else
          {
            int64_t v7 = v13 + 5;
            if (v13 + 5 >= v51) {
              goto LABEL_71;
            }
            unint64_t v18 = *(void *)(v52 + 8 * v7);
            if (!v18)
            {
              int64_t v43 = v13 + 6;
              do
              {
                if (v51 == v43) {
                  goto LABEL_71;
                }
                unint64_t v18 = *(void *)(v52 + 8 * v43++);
              }
              while (!v18);
              int64_t v7 = v43 - 1;
            }
          }
        }
        uint64_t v14 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
      if (!v17) {
        goto LABEL_73;
      }
    }
    unint64_t v55 = v14;
    id v20 = [v17 publicKeyIdentifier:v45];
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    uint64_t v24 = 0;
    switch(v23 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v21) - v21;
        if (__OFSUB__(HIDWORD(v21), v21))
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
        }
        uint64_t v24 = (int)v24;
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v21 + 16);
        uint64_t v25 = *(void *)(v21 + 24);
        BOOL v27 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (!v27) {
          break;
        }
        goto LABEL_75;
      case 3uLL:
        break;
      default:
        uint64_t v24 = BYTE6(v23);
        break;
    }
    uint64_t v28 = BYTE6(a3);
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v28 = HIDWORD(a2) - (int)a2;
        if (v47) {
          goto LABEL_76;
        }
        goto LABEL_41;
      case 2uLL:
        uint64_t v30 = *(void *)(a2 + 16);
        uint64_t v29 = *(void *)(a2 + 24);
        BOOL v27 = __OFSUB__(v29, v30);
        uint64_t v28 = v29 - v30;
        if (!v27) {
          goto LABEL_41;
        }
        goto LABEL_77;
      case 3uLL:
        if (v24) {
          goto LABEL_12;
        }
        goto LABEL_70;
      default:
LABEL_41:
        if (v24 != v28)
        {
LABEL_12:
          sub_10006D144(v21, v23);
          goto LABEL_13;
        }
        if (v24 >= 1)
        {
          switch(v23 >> 62)
          {
            case 1uLL:
              uint64_t v50 = v4;
              uint64_t v4 = (int)v21;
              if (v21 >> 32 < (int)v21) {
                goto LABEL_79;
              }
              sub_10006D0EC(a2, a3);
              sub_10006D0EC(v21, v23);
              uint64_t v40 = __DataStorage._bytes.getter();
              if (!v40) {
                goto LABEL_60;
              }
              uint64_t v41 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v21, v41)) {
                goto LABEL_82;
              }
              v40 += (int)v21 - v41;
LABEL_60:
              __DataStorage._length.getter();
              uint64_t v42 = v40;
              unint64_t v37 = a3;
              uint64_t v32 = a2;
              sub_1001E5240(v42, a2, a3, (char *)__s1);
              if (v50) {
                goto LABEL_85;
              }
              uint64_t v4 = 0;
              sub_10006D144(a2, a3);
              sub_10006D144(v21, v23);
              sub_10006D144(v21, v23);
              char v38 = __s1[0];
              uint64_t v5 = v48;
              break;
            case 2uLL:
              uint64_t v32 = v23 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v33 = *(void *)(v21 + 16);
              uint64_t v46 = *(void *)(v21 + 24);
              sub_10006D0EC(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v34 = __DataStorage._bytes.getter();
              uint64_t v49 = v4;
              if (!v34) {
                goto LABEL_50;
              }
              uint64_t v35 = __DataStorage._offset.getter();
              if (__OFSUB__(v33, v35)) {
                goto LABEL_81;
              }
              v34 += v33 - v35;
LABEL_50:
              if (__OFSUB__(v46, v33)) {
                goto LABEL_80;
              }
              __DataStorage._length.getter();
              uint64_t v36 = v34;
              unint64_t v37 = a3;
              uint64_t v4 = a2;
              sub_1001E5240(v36, a2, a3, (char *)__s1);
              if (v49)
              {
                sub_10006D144(a2, a3);
                swift_release();
                swift_release();
                __break(1u);
LABEL_84:
                sub_10006D144(v32, v37);
                __break(1u);
LABEL_85:
                sub_10006D144(v32, v37);
                sub_10006D144(v21, v23);
                __break(1u);
LABEL_86:
                sub_10006D144(v4, v32);
                __break(1u);
                JUMPOUT(0x10027BE84);
              }
              sub_10006D144(a2, a3);
              swift_release();
              swift_release();
              sub_10006D144(v21, v23);
              char v38 = __s1[0];
              uint64_t v5 = v48;
              uint64_t v4 = 0;
              break;
            case 3uLL:
              uint64_t v39 = v5;
              memset(__s1, 0, 14);
              unint64_t v37 = a3;
              uint64_t v32 = a2;
              sub_10006D0EC(a2, a3);
              sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v56);
              if (v4) {
                goto LABEL_84;
              }
              uint64_t v4 = 0;
              sub_10006D144(a2, a3);
              sub_10006D144(v21, v23);
              uint64_t v5 = v39;
              if (v56 == 1) {
                goto LABEL_73;
              }
              goto LABEL_13;
            default:
              __s1[0] = v21;
              LOWORD(__s1[1]) = v23;
              BYTE2(__s1[1]) = BYTE2(v23);
              BYTE3(__s1[1]) = BYTE3(v23);
              BYTE4(__s1[1]) = BYTE4(v23);
              BYTE5(__s1[1]) = BYTE5(v23);
              uint64_t v31 = v4;
              uint64_t v32 = a3;
              uint64_t v4 = a2;
              sub_10006D0EC(a2, a3);
              sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v56);
              if (v31) {
                goto LABEL_86;
              }
              sub_10006D144(a2, a3);
              sub_10006D144(v21, v23);
              uint64_t v4 = 0;
              uint64_t v5 = v48;
              if (v56) {
                goto LABEL_73;
              }
              goto LABEL_13;
          }
          if (v38) {
            goto LABEL_73;
          }
LABEL_13:

          unint64_t v8 = v55;
          continue;
        }
LABEL_70:
        sub_10006D144(v21, v23);
LABEL_73:
        sub_10008C4F0();
        return v17;
    }
  }
}

id sub_10027BEB4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_1001F7C04();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = __s1[2];
    uint64_t v48 = __s1[3];
    uint64_t v6 = __s1[4];
    int64_t v7 = __s1[5];
    unint64_t v8 = __s1[6];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v48 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  int64_t v47 = (unint64_t)(v6 + 64) >> 6;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v46 = v12;
  uint64_t v45 = HIDWORD(a2) - (int)a2;
  unint64_t v50 = a3 >> 62;
  uint64_t v51 = BYTE6(a3);
  uint64_t v44 = v5;
  uint64_t v52 = a2;
  while (1)
  {
LABEL_13:
    int64_t v13 = v7;
    if (v5 < 0)
    {
      uint64_t v16 = __CocoaSet.Iterator.next()();
      if (!v16) {
        goto LABEL_72;
      }
      uint64_t v54 = v16;
      sub_10007582C(0, (unint64_t *)&qword_100458810);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v17 = (id)__s1[0];
      swift_unknownObjectRelease();
      if (!v17) {
        goto LABEL_74;
      }
    }
    else
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v7 << 6);
      }
      else
      {
        ++v7;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
        }
        if (v7 >= v47)
        {
LABEL_72:
          id v17 = 0;
          goto LABEL_74;
        }
        unint64_t v18 = *(void *)(v48 + 8 * v7);
        if (!v18)
        {
          int64_t v19 = v13 + 2;
          if (v13 + 2 >= v47) {
            goto LABEL_72;
          }
          unint64_t v18 = *(void *)(v48 + 8 * v19);
          if (v18) {
            goto LABEL_28;
          }
          int64_t v19 = v13 + 3;
          if (v13 + 3 >= v47) {
            goto LABEL_72;
          }
          unint64_t v18 = *(void *)(v48 + 8 * v19);
          if (v18) {
            goto LABEL_28;
          }
          int64_t v19 = v13 + 4;
          if (v13 + 4 >= v47) {
            goto LABEL_72;
          }
          unint64_t v18 = *(void *)(v48 + 8 * v19);
          if (v18)
          {
LABEL_28:
            int64_t v7 = v19;
          }
          else
          {
            int64_t v7 = v13 + 5;
            if (v13 + 5 >= v47) {
              goto LABEL_72;
            }
            unint64_t v18 = *(void *)(v48 + 8 * v7);
            if (!v18)
            {
              int64_t v41 = v13 + 6;
              do
              {
                if (v47 == v41) {
                  goto LABEL_72;
                }
                unint64_t v18 = *(void *)(v48 + 8 * v41++);
              }
              while (!v18);
              int64_t v7 = v41 - 1;
            }
          }
        }
        unint64_t v8 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
      if (!v17) {
        goto LABEL_74;
      }
    }
    id v20 = [v17 readerIdentifier:v43];
    if (v20) {
      break;
    }
    sub_10006D0EC(a2, a3);
    sub_100075868(0, 0xF000000000000000);
    sub_100075868(a2, a3);
LABEL_65:
  }
  uint64_t v21 = v20;
  unint64_t v53 = v8;
  unint64_t v22 = a3;
  uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  uint64_t v26 = 0;
  switch(v25 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v23), v23)) {
        goto LABEL_76;
      }
      uint64_t v26 = HIDWORD(v23) - (int)v23;
LABEL_38:
      sub_10006D0EC(v23, v25);
      break;
    case 2uLL:
      uint64_t v28 = *(void *)(v23 + 16);
      uint64_t v27 = *(void *)(v23 + 24);
      uint64_t v26 = v27 - v28;
      if (!__OFSUB__(v27, v28)) {
        goto LABEL_38;
      }
      goto LABEL_77;
    case 3uLL:
      break;
    default:
      uint64_t v26 = BYTE6(v25);
      break;
  }
  uint64_t v29 = v51;
  switch(v50)
  {
    case 1uLL:
      uint64_t v29 = v45;
      if (v46) {
        goto LABEL_78;
      }
      goto LABEL_43;
    case 2uLL:
      uint64_t v31 = *(void *)(v52 + 16);
      uint64_t v30 = *(void *)(v52 + 24);
      BOOL v32 = __OFSUB__(v30, v31);
      uint64_t v29 = v30 - v31;
      if (!v32) {
        goto LABEL_43;
      }
      goto LABEL_79;
    case 3uLL:
      if (v26) {
        goto LABEL_12;
      }
      goto LABEL_73;
    default:
LABEL_43:
      if (v26 != v29)
      {
LABEL_12:
        sub_10006D144(v23, v25);
        sub_10006D144(v23, v25);
        a3 = v22;
        a2 = v52;
        unint64_t v8 = v53;

        goto LABEL_13;
      }
      if (v26 >= 1)
      {
        a3 = v22;
        switch(v25 >> 62)
        {
          case 1uLL:
            if (v23 >> 32 < (int)v23) {
              goto LABEL_80;
            }
            uint64_t v43 = (v23 >> 32) - (int)v23;
            sub_10006D0EC(v52, v22);
            sub_10006D0EC(v23, v25);
            sub_10006D0EC(v52, v22);
            uint64_t v38 = __DataStorage._bytes.getter();
            if (!v38) {
              goto LABEL_63;
            }
            uint64_t v39 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v23, v39)) {
              goto LABEL_83;
            }
            v38 += (int)v23 - v39;
LABEL_63:
            __DataStorage._length.getter();
            uint64_t v40 = v38;
            a2 = v52;
            a3 = v22;
            sub_1001E5240(v40, v52, v22, (char *)__s1);
            if (v49) {
              goto LABEL_86;
            }
            sub_10006D144(v52, v22);
            sub_10006D144(v23, v25);
            sub_10006D144(v52, v22);
            sub_10006D144(v23, v25);
            sub_10006D144(v23, v25);
            uint64_t v5 = v44;
            unint64_t v8 = v53;
            if ((__s1[0] & 1) == 0) {
              goto LABEL_65;
            }
            goto LABEL_74;
          case 2uLL:
            uint64_t v33 = *(void *)(v23 + 16);
            uint64_t v43 = *(void *)(v23 + 24);
            sub_10006D0EC(v52, v22);
            sub_10006D0EC(v52, v22);
            swift_retain();
            swift_retain();
            uint64_t v34 = __DataStorage._bytes.getter();
            if (!v34) {
              goto LABEL_52;
            }
            uint64_t v35 = __DataStorage._offset.getter();
            if (__OFSUB__(v33, v35)) {
              goto LABEL_82;
            }
            v34 += v33 - v35;
LABEL_52:
            if (__OFSUB__(v43, v33)) {
              goto LABEL_81;
            }
            __DataStorage._length.getter();
            uint64_t v36 = v34;
            a2 = v52;
            a3 = v22;
            sub_1001E5240(v36, v52, v22, (char *)__s1);
            if (v49)
            {
              sub_10006D144(v52, v22);
              swift_release();
              swift_release();
              __break(1u);
LABEL_85:
              sub_10006D144(a2, a3);
              __break(1u);
LABEL_86:
              sub_10006D144(a2, a3);
              sub_10006D144(v23, v25);
              __break(1u);
              JUMPOUT(0x10027C73CLL);
            }
            sub_10006D144(v52, v22);
            swift_release();
            swift_release();
            sub_10006D144(v52, v22);
            sub_10006D144(v23, v25);
            char v37 = __s1[0];
            sub_10006D144(v23, v25);
            uint64_t v5 = v44;
            unint64_t v8 = v53;
            if (v37) {
              goto LABEL_74;
            }
            goto LABEL_65;
          case 3uLL:
            memset(__s1, 0, 14);
            a2 = v52;
            sub_10006D0EC(v52, v22);
            sub_10006D0EC(v52, v22);
            sub_1001E5240((uint64_t)__s1, v52, v22, (char *)&v54);
            if (v49) {
              goto LABEL_85;
            }
            sub_10006D144(v52, v22);
            sub_10006D144(v52, v22);
            sub_10006D144(v23, v25);
            sub_10006D144(v23, v25);
            unint64_t v8 = v53;
            if (v54 == 1) {
              goto LABEL_74;
            }
            goto LABEL_65;
          default:
            __s1[0] = v23;
            LOWORD(__s1[1]) = v25;
            BYTE2(__s1[1]) = BYTE2(v25);
            BYTE3(__s1[1]) = BYTE3(v25);
            BYTE4(__s1[1]) = BYTE4(v25);
            BYTE5(__s1[1]) = BYTE5(v25);
            a2 = v52;
            sub_10006D0EC(v52, v22);
            sub_10006D0EC(v52, v22);
            sub_1001E5240((uint64_t)__s1, v52, v22, (char *)&v54);
            if (v49) {
              goto LABEL_85;
            }
            sub_10006D144(v52, v22);
            sub_10006D144(v52, v22);
            sub_10006D144(v23, v25);
            sub_10006D144(v23, v25);
            unint64_t v8 = v53;
            if (v54) {
              goto LABEL_74;
            }
            goto LABEL_65;
        }
      }
LABEL_73:
      sub_10006D144(v23, v25);
      sub_10006D144(v23, v25);
LABEL_74:
      sub_10008C4F0();
      return v17;
  }
}

uint64_t sub_10027C76C(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D8 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = __chkstk_darwin(a1, a2);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  sub_1000AA804(&v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_10027C864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    __chkstk_darwin(result, v12);
    *(void *)&v13[-16] = a1;
    *(void *)&v13[-8] = a2;
    OS_dispatch_queue.sync<A>(execute:)();
    return v13[15];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027CA10(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v11[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    __chkstk_darwin(result, v10);
    *(void *)&v11[-16] = a1;
    OS_dispatch_queue.sync<A>(execute:)();
    return v11[15];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027CBB0(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    __chkstk_darwin(result, v14);
    LOWORD(v15[-4]) = a1;
    v15[-3] = a2;
    v15[-2] = a3;
    sub_10006C51C(&qword_10045A4A0);
    OS_dispatch_queue.sync<A>(execute:)();
    return v15[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027CD70(__int16 a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a4;
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  unint64_t v15 = (uint64_t *)((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *unint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.notOnQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v16)
  {
    __chkstk_darwin(result, v19);
    *((_WORD *)&v21 - 24) = a1;
    *((unsigned char *)&v21 - 46) = a2;
    *(&v21 - 5) = a5;
    *(&v21 - 4) = a6;
    uint64_t v20 = v22;
    *(&v21 - 3) = a3;
    *(&v21 - 2) = v20;
    sub_10006C51C(&qword_10045A4A0);
    OS_dispatch_queue.sync<A>(execute:)();
    return v23;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027CF50(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    __chkstk_darwin(result, v10);
    LOBYTE(v11[-2]) = a1 & 1;
    sub_10006C51C(&qword_10045A4B0);
    OS_dispatch_queue.sync<A>(execute:)();
    return v11[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027D100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    __chkstk_darwin(result, v14);
    v15[-4] = a3;
    v15[-3] = a1;
    v15[-2] = a2;
    sub_10006C51C(&qword_10045A4A0);
    OS_dispatch_queue.sync<A>(execute:)();
    return v15[1];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10027D2C0(__int16 a1, char a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = a8;
  uint64_t v32 = a10;
  uint64_t v33 = a11;
  uint64_t v35 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v18);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for DispatchQoS();
  uint64_t v36 = *(void *)(v39 - 8);
  __chkstk_darwin(v39, v21);
  uint64_t v23 = (char *)&v31 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v34 = qword_100468A38;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a5;
  *(void *)(v24 + 24) = a6;
  *(void *)(v24 + 32) = a7;
  *(_WORD *)(v24 + 40) = a1;
  *(unsigned char *)(v24 + 42) = a2;
  *(void *)(v24 + 48) = a3;
  *(void *)(v24 + 56) = a4;
  unint64_t v25 = a4;
  uint64_t v26 = v38;
  *(void *)(v24 + 64) = v38;
  *(void *)(v24 + 72) = a9;
  uint64_t v27 = v33;
  *(void *)(v24 + 80) = v32;
  *(void *)(v24 + 88) = v27;
  aBlock[4] = sub_10027EE2C;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100417ED0;
  uint64_t v28 = _Block_copy(aBlock);
  sub_10008BEBC(a6);
  sub_10006D0EC(a3, v25);
  sub_1000758F4(v26, a9);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  uint64_t v29 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v29);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v39);
  return swift_release();
}

uint64_t sub_10027D5DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  unint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v16 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v17);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v23[1] = qword_100468A38;
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a3;
  v20[3] = a4;
  v20[4] = a1;
  v20[5] = a2;
  aBlock[4] = v24;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = v25;
  uint64_t v21 = _Block_copy(aBlock);
  sub_10006D0EC(a3, a4);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v26);
  return swift_release();
}

uint64_t sub_10027D88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  v23[1] = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v11);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  uint64_t v18 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v23[0] = qword_100468A38;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, v18, v14);
  aBlock[4] = v24;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = v25;
  uint64_t v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v26);
  return swift_release();
}

uint64_t sub_10027DBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  uint64_t v17 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v23[1] = qword_100468A38;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v13);
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v25;
  *(void *)(v19 + 16) = v24;
  *(void *)(v19 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v19 + v18, v17, v13);
  aBlock[4] = sub_10027EAA8;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100417BB0;
  uint64_t v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v26);
  return swift_release();
}

uint64_t sub_10027DF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  void v25[2] = a4;
  uint64_t v26 = a2;
  uint64_t v29 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v30 - 8);
  __chkstk_darwin(v30, v12);
  uint64_t v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15, v18);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v25[1] = qword_100468A38;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
  unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  uint64_t v21 = (void *)(v20 + ((v17 + v19 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v29;
  *uint64_t v21 = v26;
  v21[1] = v22;
  aBlock[4] = v27;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = v28;
  uint64_t v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v30);
  return swift_release();
}

uint64_t sub_10027E2B8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v14);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v20[1] = qword_100468A38;
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a3;
  v17[3] = a4;
  void v17[4] = a1;
  void v17[5] = a2;
  aBlock[4] = sub_10027E884;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004179D0;
  uint64_t v18 = _Block_copy(aBlock);
  sub_10006D0EC(a3, a4);
  sub_1000758F4(a1, a2);
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v21);
  return swift_release();
}

uint64_t sub_10027E578(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a5;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = v21;
  uint64_t v18 = _Block_copy(aBlock);
  sub_10006D0EC(a1, a2);
  static DispatchQoS.unspecified.getter();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10006D1C4();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v22);
  return swift_release();
}

void sub_10027E814()
{
  sub_10027B410(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10027E81C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10027E82C()
{
  return swift_release();
}

uint64_t sub_10027E834()
{
  sub_10006D144(v0[2], v0[3]);
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_10006D144(v0[4], v1);
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10027E884()
{
  return sub_10027B064(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10027E898()
{
  return sub_10027AE54(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10027E8A8()
{
  return sub_10027E984((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1002BD288);
}

uint64_t sub_10027E8C4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10027E96C()
{
  return sub_10027E984((uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1002BCB40);
}

uint64_t sub_10027E984(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10027AC70(v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), a1);
}

uint64_t sub_10027EA18()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10027EAA8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  int64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_10027A6DC(v2, v3, v4);
}

uint64_t sub_10027EB10(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10027AA00(a1, v4);
}

uint64_t sub_10027EB84()
{
  return sub_10027ECE8(sub_10027A1E4);
}

uint64_t sub_10027EBA4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_10027A46C(a1, v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))) & 1;
}

uint64_t sub_10027EC10()
{
  return sub_100279D54(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10027EC24()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10027EC64()
{
  return sub_100279B38(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_10027EC74(uint64_t a1)
{
  return sub_10027B25C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_10027EC94()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10027ECD0()
{
  return sub_10027ECE8((uint64_t (*)(uint64_t))sub_100279A44);
}

uint64_t sub_10027ECE8(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t sub_10027ED5C()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_10027ED84()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10027EDBC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100279990(a1, a2, a3, a4, a5, a6, *(void *)(v6 + 16));
}

uint64_t sub_10027EDC4()
{
  if (v0[3]) {
    swift_release();
  }
  sub_10006D144(v0[6], v0[7]);
  unint64_t v1 = v0[9];
  if (v1 >> 60 != 15) {
    sub_10006D144(v0[8], v1);
  }
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10027EE2C()
{
  return sub_100279104(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int16 *)(v0 + 40), *(unsigned __int8 *)(v0 + 42), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void (**)(Class, void *))(v0 + 72), *(void (**)(Class, void *))(v0 + 80), *(void *)(v0 + 88));
}

void sub_10027EE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100279254(a1, a2, a3, a4, a5, a6, *(void (**)(Class, Class, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16));
}

void sub_10027EE7C(void *a1@<X8>)
{
  sub_100278630(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

unint64_t sub_10027EEA0@<X0>(unint64_t *a1@<X8>)
{
  return sub_10027853C(*(unsigned char *)(v1 + 16), a1);
}

void sub_10027EEBC(unint64_t a1@<X8>)
{
  sub_100277688(*(_WORD *)(v1 + 16), *(unsigned char *)(v1 + 18), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

void sub_10027EEE4(void *a1@<X8>)
{
  sub_100277500(*(unsigned __int16 *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_10027EF04(unsigned char *a1@<X8>)
{
  sub_1002771A0(*(void *)(v1 + 16), a1);
}

uint64_t sub_10027EF24()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_10027EFB4(unsigned char *a1@<X8>)
{
  sub_100276B44(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10027EFD4(void *a1)
{
  return sub_100277008(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_10027F058()
{
  type metadata accessor for SECSLAMDeletionHandler();
  uint64_t v0 = swift_allocObject();
  unint64_t result = sub_1001DB39C((uint64_t)&off_10040F170);
  *(void *)(v0 + 16) = result;
  qword_100468990 = v0;
  return result;
}

uint64_t sub_10027F0A0(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_10027F170, 0, 0);
}

uint64_t sub_10027F170()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0[24] + 16);
  uint64_t v2 = UUID.uuidString.getter();
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1002C0AD0(v2, v3), (v5 & 1) != 0))
  {
    uint64_t v6 = (void *)(*(void *)(v1 + 56) + 16 * v4);
    v0[29] = *v6;
    v0[30] = v6[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v7 = self;
    NSString v8 = String._bridgeToObjectiveC()();
    v0[31] = v8;
    v0[2] = v0;
    v0[7] = v0 + 18;
    v0[3] = sub_10027F528;
    uint64_t v9 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_10016999C;
    v0[13] = &unk_100418010;
    v0[14] = v9;
    sub_100058540(v7, v8, v0 + 10);
    return _swift_continuation_await(v0 + 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = v0[26];
    uint64_t v10 = v0[27];
    uint64_t v12 = v0[25];
    uint64_t v13 = v0[23];
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v19 = v0[26];
    uint64_t v18 = v0[27];
    if (v17)
    {
      uint64_t v26 = v0[25];
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      uint64_t v21 = UUID.uuidString.getter();
      v0[20] = sub_100290514(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v26);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SLAMDeletion deleteCredential: %s does not exist", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v19 + 8))(v0[27], v0[25]);
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v23 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_10027F528()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 256) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_10027FAC8;
  }
  else
  {
    uint64_t v2 = sub_10027F640;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10027F640()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void **)(v0 + 144);

  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v4 = sub_1000155C0(v1, v3 + 32, v2);
  swift_release();

  if (v4)
  {
    swift_willThrow();

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      NSString v8 = (uint8_t *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)NSString v8 = 136315138;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      *(void *)(v0 + 168) = sub_100290514(v9, v10, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "SLAMDeletion deleteCredential: Error encountered %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E55C(v15, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v21 = *(void *)(v0 + 208);
    if (v18)
    {
      uint64_t v28 = *(void *)(v0 + 200);
      unsigned int log = v16;
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      v29[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136315138;
      uint64_t v23 = UUID.uuidString.getter();
      *(void *)(v0 + 176) = sub_100290514(v23, v24, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v28);
      _os_log_impl((void *)&_mh_execute_header, log, v17, "SLAMDeletion deleteCredential: Successfully deleted credential %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v25();
}

uint64_t sub_10027FAC8()
{
  uint64_t v11 = v0;
  uint64_t v1 = (void *)v0[31];
  swift_willThrow();

  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[21] = sub_100290514(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "SLAMDeletion deleteCredential: Error encountered %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  NSString v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_10027FD00()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SECSLAMDeletionHandler()
{
  return self;
}

id sub_10027FD5C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LyonExternal()) init];
  qword_100468998 = (uint64_t)result;
  return result;
}

void sub_10027FE4C(uint64_t a1, unint64_t a2, double a3)
{
  if (qword_1004536A0 != -1) {
    swift_once();
  }
  sub_1000C3B8C(a1, a2, a3);
}

void sub_10027FF84(uint64_t a1, unint64_t a2)
{
  if (qword_1004536A0 != -1) {
    swift_once();
  }
  sub_1000C5830(a1, a2);
}

void sub_100280108(char a1, __objc2_class **a2)
{
  if (qword_100453668 != -1) {
    swift_once();
  }
  sub_100085724(a1 & 1, a2);
}

void sub_100280220(char a1)
{
  if (qword_100453748 != -1) {
    swift_once();
  }
  sub_1001AF014(a1 & 1);
}

uint64_t type metadata accessor for LyonExternal()
{
  return self;
}

uint64_t sub_1002802F0(uint64_t a1, uint64_t a2)
{
  if (qword_1004536D8 != -1) {
    a1 = swift_once();
  }
  uint64_t v2 = __chkstk_darwin(a1, a2);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = v4 + 4;
  os_unfair_lock_lock(v4 + 4);
  sub_100079ACC(&v7);
  os_unfair_lock_unlock(v5);
  return v7;
}

uint64_t sub_1002803E8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.notOnQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if (v11)
  {
    __chkstk_darwin(result, v14);
    v15[-4] = a1;
    v15[-3] = a2;
    *(double *)&v15[-2] = a3;
    return OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1002805A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    __chkstk_darwin(result, v12);
    *(&v13 - 2) = a1;
    *(&v13 - 1) = a2;
    return OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100280748()
{
  uint64_t inited = type metadata accessor for DispatchPredicate();
  uint64_t v1 = *(void *)(inited - 8);
  __chkstk_darwin(inited, v2);
  uint64_t v4 = (uint64_t *)((char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_100468A38;
  *uint64_t v4 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v1 + 104))(v4, enum case for DispatchPredicate.notOnQueue(_:), inited);
  id v6 = (id)v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v1 + 8))(v4, inited);
  if (v5)
  {
    uint64_t v4 = (void *)0xD000000000000016;
    sub_10006C51C(&qword_10045A5A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378470;
    *(void *)(inited + 32) = 0xD000000000000016;
    *(void *)(inited + 40) = 0x80000001003B9CF0;
    if (qword_1004537C0 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  *(void *)(inited + 48) = qword_1004688A8;
  *(void *)(inited + 56) = (char *)v4 + 9;
  *(void *)(inited + 64) = 0x80000001003B9D10;
  uint64_t v7 = qword_1004537C8;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  *(void *)(inited + 72) = qword_1004688B0;
  *(void *)(inited + 80) = (char *)v4 + 23;
  *(void *)(inited + 88) = 0x80000001003B9D30;
  uint64_t v8 = qword_1004537D0;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  *(void *)(inited + 96) = qword_1004688B8;
  swift_bridgeObjectRetain();
  return sub_1001DBFD8(inited);
}

uint64_t sub_1002809B8(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.notOnQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    __chkstk_darwin(result, v12);
    *((unsigned char *)&v13 - 16) = a1 & 1;
    *(&v13 - 1) = a2;
    return OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100280B68(char a1)
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (void *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  id v10 = qword_100468A38;
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a1 & 1;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_100280DD4;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_1000A9F2C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001E8C54;
  aBlock[3] = &unk_100418078;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v10) {
LABEL_7:
  }
    __break(1u);
  return result;
}

uint64_t sub_100280DC4()
{
  return _swift_deallocObject(v0, 17, 7);
}

void sub_100280DD4()
{
  sub_100280220(*(unsigned char *)(v0 + 16));
}

uint64_t sub_100280DDC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100280DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100280DFC()
{
  return swift_release();
}

void sub_100280E04()
{
  sub_100280108(*(unsigned char *)(v0 + 16), *(__objc2_class ***)(v0 + 24));
}

void sub_100280E24()
{
  sub_10027FF84(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100280E40()
{
  sub_10027FE4C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_100280E60()
{
  v1[8] = v0;
  sub_10006C51C(&qword_10045A778);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100280F10, 0, 0);
}

uint64_t sub_100280F10()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  v0[12] = OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  uint64_t v4 = v2 + v3;
  swift_beginAccess();
  sub_10028A7F0(v4, v1);
  uint64_t v5 = type metadata accessor for SECNetworkConfiguration();
  v0[13] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[14] = v6;
  LODWORD(v4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v5);
  sub_10008E734(v1, &qword_10045A778);
  if (v4 == 1)
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v0[15] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1002810A0;
    uint64_t v8 = v0[10];
    return sub_1001121DC(v8);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1002810A0()
{
  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10028129C;
  }
  else {
    uint64_t v2 = sub_1002811B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002811B4()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8] + v0[12];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[14] + 56))(v1, 0, 1, v0[13]);
  sub_10028D084(v1, v2);
  swift_beginAccess();
  sub_10028D0EC(v2, v3);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10028129C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100281314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  sub_10006C51C(&qword_100455978);
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_100281418, 0, 0);
}

uint64_t sub_100281418()
{
  UUID.init()();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1002814B0;
  return sub_100280E60();
}

uint64_t sub_1002814B0()
{
  uint64_t v2 = (void *)*v1;
  v2[24] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1002823A4, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[25] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_100281628;
    uint64_t v4 = v2[22];
    uint64_t v5 = v2[16];
    uint64_t v6 = v2[14];
    uint64_t v7 = v2[15];
    return sub_10028251C(v4, v6, v7, v5);
  }
}

uint64_t sub_100281628()
{
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100282460;
  }
  else {
    uint64_t v2 = sub_10028173C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10028173C()
{
  uint64_t v26 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  v0[27] = sub_10008E55C(v5, (uint64_t)qword_1004686A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[18];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    URLRequest.url.getter();
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
    uint64_t v13 = v0[18];
    if (v12 == 1)
    {
      sub_10008E734(v0[18], &qword_100455978);
      unint64_t v14 = 0xE700000000000000;
      uint64_t v15 = 0x6E776F6E6B6E75;
    }
    else
    {
      uint64_t v15 = URL.absoluteString.getter();
      unint64_t v14 = v17;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    uint64_t v18 = v0[20];
    uint64_t v19 = v0[21];
    uint64_t v20 = v0[19];
    v0[13] = sub_100290514(v15, v14, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v16 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v16(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "createCredential: Sending request to %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v16 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8);
    v16(v0[21], v0[19]);
  }

  v0[28] = v16;
  unint64_t v24 = (uint64_t (*)(uint64_t, char))((char *)&dword_100455F78 + dword_100455F78);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[29] = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100281A6C;
  uint64_t v22 = v0[22];
  return v24(v22, 1);
}

uint64_t sub_100281A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[30] = a1;
  v4[31] = a2;
  v4[32] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100282044;
  }
  else {
    uint64_t v5 = sub_100281B84;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100281B84()
{
  uint64_t v36 = v0;
  uint64_t v1 = v0 + 9;
  unint64_t v2 = v0[31];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[30];
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10006D0EC(v4, v2);
  JSONDecoder.init()();
  sub_10006C51C(&qword_100455790);
  sub_10028AC88();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10006D144(v0[30], v0[31]);
  swift_release();
  if (v3)
  {
LABEL_14:
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_getErrorValue();
      uint64_t v20 = Error.localizedDescription.getter();
      v0[12] = sub_100290514(v20, v21, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "createCredential: JSON Decoding error %s encountered", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v23 = v0[30];
    unint64_t v22 = v0[31];
    unint64_t v24 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v25 = v0[22];
    uint64_t v26 = v0[19];
    uint64_t v34 = v0[14];
    sub_10008E594();
    swift_allocError();
    void *v27 = 13;
    swift_willThrow();
    swift_errorRelease();
    sub_10006D144(v23, v22);
    v24(v25, v26);
    uint64_t v28 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v34, v28);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = (uint64_t (*)(void))v0[1];
    goto LABEL_18;
  }
  uint64_t v5 = *v1;
  if (!*(void *)(*v1 + 16) || (uint64_t v6 = sub_1002C0AD0(0xD000000000000013, 0x80000001003B9E90), (v7 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "createCredential: Unexpected JSON Response from Server", v15, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *os_log_type_t v16 = 13;
    swift_willThrow();
    goto LABEL_14;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 != 0x6574736575716572 || v9 != 0xE900000000000064)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_22;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v31 = (void (*)(uint64_t, uint64_t))v0[28];
  uint64_t v32 = v0[22];
  uint64_t v33 = v0[19];
  sub_10006D144(v0[30], v0[31]);
  v31(v32, v33);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
LABEL_18:
  return v29();
}

uint64_t sub_100282044()
{
  uint64_t v20 = v0;
  *(void *)(v0 + 88) = *(void *)(v0 + 256);
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    char v3 = *(unsigned char *)(v0 + 56);
    sub_1001391C4(v1, v2, v3);
    sub_1001391C4(v1, v2, v3);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      unint64_t v7 = sub_100132F7C(v1, v2, v3);
      *(void *)(v0 + 64) = sub_100290514(v7, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001334F8(v1, v2, v3);
      sub_1001334F8(v1, v2, v3);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "createCredential: Data task wrapper error %s encountered while performing URL request", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001334F8(v1, v2, v3);
      sub_1001334F8(v1, v2, v3);
    }

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 112);
    sub_10008E594();
    swift_allocError();
    *os_log_type_t v14 = 11;
    swift_willThrow();
    sub_1001334F8(v1, v2, v3);
    v11(v12, v13);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v18, v15);
    swift_errorRelease();
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 112);
    (*(void (**)(void, void))(v0 + 224))(*(void *)(v0 + 176), *(void *)(v0 + 152));
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_1002823A4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100282460()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10028251C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[123] = v4;
  v5[122] = a4;
  v5[121] = a3;
  v5[120] = a2;
  v5[119] = a1;
  uint64_t v6 = type metadata accessor for String.Encoding();
  v5[124] = v6;
  v5[125] = *(void *)(v6 - 8);
  v5[126] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for URL.DirectoryHint();
  v5[127] = v7;
  v5[128] = *(void *)(v7 - 8);
  v5[129] = swift_task_alloc();
  type metadata accessor for URL();
  v5[130] = swift_task_alloc();
  sub_10006C51C(&qword_10045A778);
  v5[131] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SECNetworkConfiguration();
  v5[132] = v8;
  v5[133] = *(void *)(v8 - 8);
  v5[134] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v5[135] = v9;
  v5[136] = *(void *)(v9 - 8);
  v5[137] = swift_task_alloc();
  v5[138] = swift_task_alloc();
  v5[139] = swift_task_alloc();
  v5[140] = swift_task_alloc();
  return _swift_task_switch(sub_1002827B0, 0, 0);
}

uint64_t sub_1002827B0()
{
  uint64_t v109 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[140];
  uint64_t v2 = v0[139];
  uint64_t v3 = v0[136];
  uint64_t v4 = v0[135];
  uint64_t v5 = v0[121];
  uint64_t v6 = v0[120];
  uint64_t v7 = type metadata accessor for Logger();
  v0[141] = sub_10008E55C(v7, (uint64_t)qword_1004686A8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[142] = v8;
  v0[143] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v1, v6, v4);
  v8(v2, v5, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[140];
  uint64_t v13 = v0[139];
  uint64_t v14 = v0[136];
  uint64_t v15 = v0[135];
  if (v11)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v17 = UUID.uuidString.getter();
    v0[117] = sub_100290514(v17, v18, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v12, v15);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v20 = UUID.uuidString.getter();
    v0[118] = sub_100290514(v20, v21, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Creating URL Request for credential %s with configUUID %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v0[140], v0[135]);
    v22(v13, v15);
  }

  uint64_t v23 = v0[133];
  uint64_t v24 = v0[132];
  uint64_t v25 = v0[131];
  uint64_t v26 = v0[123] + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  swift_beginAccess();
  sub_10028A7F0(v26, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v25, 1, v24) == 1)
  {
    sub_10008E734(v0[131], &qword_10045A778);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Nil network configuration when creatingCreationURLRequest", v29, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    void *v30 = 19;
    swift_willThrow();
    goto LABEL_24;
  }
  uint64_t v31 = v0[129];
  uint64_t v32 = v0[128];
  uint64_t v33 = v0[127];
  sub_10028ADF8(v0[131], v0[134], (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  v0[106] = 0xD000000000000019;
  v0[107] = 0x80000001003B3890;
  (*(void (**)(uint64_t, void, uint64_t))(v32 + 104))(v31, enum case for URL.DirectoryHint.inferFromPath(_:), v33);
  sub_1001150C4();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  swift_bridgeObjectRelease();
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  v34.value._object = (void *)0x80000001003B9E30;
  v34.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  v35._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v35._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v34, v35);
  id v36 = sub_10028A858();
  id v37 = [v36 serialNumber];

  if (v37)
  {
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v41 = v0[126];
  uint64_t v42 = v0[125];
  uint64_t v43 = v0[124];
  uint64_t v44 = v0[122];
  v45.value._uint64_t countAndFlagsBits = v38;
  v45.value._object = v40;
  v46._uint64_t countAndFlagsBits = 0x2D656C7070612D78;
  v46._object = (void *)0xEC00000064696573;
  URLRequest.setValue(_:forHTTPHeaderField:)(v45, v46);
  swift_bridgeObjectRelease();
  v47.value._uint64_t countAndFlagsBits = sub_10028AA50();
  v48._uint64_t countAndFlagsBits = 0xD000000000000013;
  v48._object = (void *)0x80000001003B9E50;
  URLRequest.setValue(_:forHTTPHeaderField:)(v47, v48);
  swift_bridgeObjectRelease();
  v49.value._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  v50._uint64_t countAndFlagsBits = 0x7365757165722D78;
  v50._object = (void *)0xEC00000064692D74;
  URLRequest.setValue(_:forHTTPHeaderField:)(v49, v50);
  swift_bridgeObjectRelease();
  v51.value._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v52._uint64_t countAndFlagsBits = 0x6567612D72657375;
  v52._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v51, v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void *)(v44 + 64);
  v0[144] = v53;
  UUID.uuidString.getter();
  String.lowercased()();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v54 = String.data(using:allowLossyConversion:)();
  unint64_t v56 = v55;
  swift_bridgeObjectRelease();
  v0[145] = v54;
  v0[146] = v56;
  unint64_t v57 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v57(v41, v43);
  if (v56 >> 60 == 15) {
    goto LABEL_20;
  }
  uint64_t v107 = v54;
  uint64_t v58 = v0[126];
  uint64_t v59 = v0[124];
  UUID.uuidString.getter();
  String.lowercased()();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v60 = String.data(using:allowLossyConversion:)();
  unint64_t v62 = v61;
  swift_bridgeObjectRelease();
  v0[147] = v60;
  v0[148] = v62;
  v57(v58, v59);
  if (v62 >> 60 == 15)
  {
LABEL_19:
    sub_100075868(v107, v56);
LABEL_20:
    size_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "createCredential: Failed to get teamID data or country code data", v76, 2u);
      swift_slowDealloc();
    }
    uint64_t v77 = v0[134];
    uint64_t v78 = v0[119];

    sub_10008E594();
    swift_allocError();
    void *v79 = 6;
    swift_willThrow();
    uint64_t v80 = type metadata accessor for URLRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v80 - 8) + 8))(v78, v80);
    uint64_t v81 = v77;
LABEL_23:
    sub_10028CE74(v81, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
LABEL_24:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v82 = (uint64_t (*)(void))v0[1];
    return v82();
  }
  uint64_t v106 = v60;
  uint64_t v63 = v0[126];
  uint64_t v64 = v0[124];
  uint64_t v65 = v0[122];
  v0[149] = *(void *)(v65 + 32);
  v0[150] = *(void *)(v65 + 40);
  static String.Encoding.utf8.getter();
  uint64_t v66 = String.data(using:allowLossyConversion:)();
  unint64_t v68 = v67;
  v0[151] = v66;
  v0[152] = v67;
  v57(v63, v64);
  if (v68 >> 60 == 15)
  {
LABEL_18:
    sub_100075868(v106, v62);
    goto LABEL_19;
  }
  uint64_t v104 = v66;
  unint64_t type = v68;
  uint64_t v69 = v0[126];
  uint64_t v70 = v0[124];
  v0[113] = v53;
  dispatch thunk of CustomStringConvertible.description.getter();
  static String.Encoding.utf8.getter();
  uint64_t v71 = String.data(using:allowLossyConversion:)();
  unint64_t v73 = v72;
  swift_bridgeObjectRelease();
  v0[153] = v71;
  v0[154] = v73;
  v57(v69, v70);
  if (v73 >> 60 == 15)
  {
    sub_100075868(v66, type);
    goto LABEL_18;
  }
  uint64_t v84 = v71;
  id v85 = sub_10028A858();
  id v86 = [v85 info];

  if (!v86
    || (id v87 = [v86 ecdsaCertificate], v86, !v87))
  {
    uint64_t v97 = Logger.logObject.getter();
    os_log_type_t v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      unint64_t v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v99 = 0;
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "createCredental: Nil ECDSA certificate", v99, 2u);
      swift_slowDealloc();
    }
    uint64_t v100 = v0[134];
    uint64_t v101 = v0[119];

    sub_10008E594();
    swift_allocError();
    *unint64_t v102 = 6;
    swift_willThrow();
    sub_100075868(v106, v62);
    sub_100075868(v104, type);
    sub_100075868(v84, v73);
    sub_100075868(v107, v56);
    uint64_t v103 = type metadata accessor for URLRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(v101, v103);
    uint64_t v81 = v100;
    goto LABEL_23;
  }
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v90 = v89;
  v0[108] = v88;
  v0[109] = v89;

  v0[155] = v90;
  v0[104] = v107;
  v0[105] = v56;
  sub_10006D0EC(v107, v56);
  Data.append(_:)();
  Data.append(_:)();
  Data.append(_:)();
  uint64_t v91 = v0[104];
  unint64_t v92 = v0[105];
  sub_10006D0EC(v91, v92);
  uint64_t v93 = sub_1002B3BD0(v91, v92);
  uint64_t v95 = v94;
  v0[156] = v93;
  v0[157] = v94;
  sub_10006D144(v91, v92);
  BOOL v96 = (void *)swift_task_alloc();
  v0[158] = v96;
  void *v96 = v0;
  v96[1] = sub_1002834E8;
  v96[20] = v93;
  v96[21] = v95;
  v96[19] = v0 + 82;
  return _swift_task_switch(sub_10028AEF4, 0, 0);
}

uint64_t sub_1002834E8()
{
  uint64_t v2 = *v1;
  long long v3 = *(_OWORD *)(*v1 + 672);
  *(_OWORD *)(v2 + 1280) = *(_OWORD *)(v2 + 656);
  *(_OWORD *)(v2 + 1296) = v3;
  long long v4 = *(_OWORD *)(v2 + 704);
  *(_OWORD *)(v2 + 1312) = *(_OWORD *)(v2 + 688);
  *(void *)(v2 + 1272) = v0;
  *(_OWORD *)(v2 + 1328) = v4;
  swift_task_dealloc();
  unint64_t v5 = *(void *)(v2 + 1256);
  uint64_t v6 = *(void *)(v2 + 1248);
  if (v0)
  {
    sub_10006D144(v6, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100284260;
  }
  else
  {
    *(void *)(v2 + 1344) = *(void *)(v2 + 864);
    sub_10006D144(v6, v5);
    uint64_t v7 = sub_100283694;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100283694()
{
  uint64_t v90 = v0;
  uint64_t v1 = *(void *)(v0 + 1344);
  uint64_t v2 = *(void *)(v0 + 1240);
  uint64_t v71 = *(void *)(v0 + 1192);
  uint64_t v74 = *(void *)(v0 + 1200);
  uint64_t v77 = *(void *)(v0 + 1152);
  uint64_t v80 = *(void **)(v0 + 976);
  sub_10006C51C(&qword_1004587F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  *(void *)(inited + 32) = 6513509;
  *(void *)(inited + 40) = 0xE300000000000000;
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v2;
  unint64_t v4 = sub_1001DB39C(inited);
  sub_10006C51C(&qword_1004555D0);
  uint64_t v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_100379160;
  *(void *)(v5 + 32) = 0x727574616E676973;
  *(void *)(v5 + 40) = 0xE900000000000065;
  *(Swift::String *)(v5 + 48) = Data.base64EncodedString(options:)(0);
  *(void *)(v5 + 72) = &type metadata for String;
  *(void *)(v5 + 80) = 0x6D726F6674616C70;
  *(void *)(v5 + 88) = 0xEA00000000006449;
  *(Swift::String *)(v5 + 96) = Data.base64EncodedString(options:)(0);
  *(void *)(v5 + 120) = &type metadata for String;
  *(void *)(v5 + 128) = 0x766544646E72;
  *(void *)(v5 + 136) = 0xE600000000000000;
  *(Swift::String *)(v5 + 144) = Data.base64EncodedString(options:)(0);
  *(void *)(v5 + 168) = &type metadata for String;
  *(void *)(v5 + 176) = 0x6E756F436C62736ALL;
  *(void *)(v5 + 184) = 0xEB00000000726574;
  *(Swift::String *)(v5 + 192) = Data.base64EncodedString(options:)(0);
  *(void *)(v5 + 216) = &type metadata for String;
  *(void *)(v5 + 224) = 0x7472654364736163;
  *(void *)(v5 + 232) = 0xEF65746163696669;
  *(void *)(v5 + 264) = sub_10006C51C(&qword_100455790);
  *(void *)(v5 + 240) = v4;
  unint64_t v6 = sub_1001DB224(v5);
  uint64_t v7 = swift_initStackObject();
  *(_OWORD *)(v7 + 16) = xmmword_10037B8C0;
  *(void *)(v7 + 32) = 0x43746375646F7270;
  *(void *)(v7 + 40) = 0xEF64496769666E6FLL;
  UUID.uuidString.getter();
  Swift::String v8 = String.lowercased()();
  swift_bridgeObjectRelease();
  *(Swift::String *)(v7 + 48) = v8;
  *(void *)(v7 + 72) = &type metadata for String;
  *(void *)(v7 + 80) = 0xD000000000000014;
  *(void *)(v7 + 88) = 0x80000001003B9E70;
  UUID.uuidString.getter();
  Swift::String v9 = String.lowercased()();
  swift_bridgeObjectRelease();
  *(Swift::String *)(v7 + 96) = v9;
  *(void *)(v7 + 120) = &type metadata for String;
  *(void *)(v7 + 128) = 0x64496D616574;
  *(void *)(v7 + 136) = 0xE600000000000000;
  *(void *)(v7 + 144) = v71;
  *(void *)(v7 + 152) = v74;
  *(void *)(v7 + 168) = &type metadata for String;
  *(void *)(v7 + 176) = 0x437972746E756F63;
  *(void *)(v7 + 184) = 0xEB0000000065646FLL;
  *(void *)(v7 + 192) = v77;
  *(void *)(v7 + 216) = &type metadata for UInt64;
  *(void *)(v7 + 224) = 0xD000000000000015;
  *(void *)(v7 + 232) = 0x80000001003B9FD0;
  uint64_t v10 = sub_10006C51C(&qword_100457240);
  *(void *)(v7 + 240) = v6;
  *(void *)(v7 + 264) = v10;
  *(void *)(v7 + 272) = 0x496D616441707061;
  *(void *)(v7 + 280) = 0xE900000000000064;
  *(void *)(v0 + 880) = v80[7];
  swift_bridgeObjectRetain();
  *(void *)(v7 + 288) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v7 + 296) = v11;
  *(void *)(v7 + 312) = &type metadata for String;
  *(void *)(v7 + 320) = 0x656D614E707061;
  *(void *)(v7 + 328) = 0xE700000000000000;
  uint64_t v13 = v80[9];
  uint64_t v12 = v80[10];
  *(void *)(v7 + 360) = &type metadata for String;
  *(void *)(v7 + 336) = v13;
  *(void *)(v7 + 344) = v12;
  swift_bridgeObjectRetain();
  sub_1001DB224(v7);
  uint64_t v14 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 888) = 0;
  id v16 = [v14 dataWithJSONObject:isa options:0 error:v0 + 888];

  id v17 = *(id *)(v0 + 888);
  if (v16)
  {
    unint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1136);
    uint64_t v19 = *(void *)(v0 + 1104);
    uint64_t v84 = *(void *)(v0 + 1096);
    uint64_t v20 = *(void *)(v0 + 1080);
    uint64_t v81 = *(void *)(v0 + 968);
    uint64_t v21 = *(void *)(v0 + 960);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    URLRequest.httpBody.setter();
    v18(v19, v21, v20);
    v18(v84, v81, v20);
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.info.getter();
    BOOL v23 = os_log_type_enabled(v22, type);
    uint64_t v65 = *(void *)(v0 + 1328);
    unint64_t v67 = *(void *)(v0 + 1336);
    uint64_t v69 = *(void *)(v0 + 1312);
    unint64_t v72 = *(void *)(v0 + 1320);
    uint64_t v75 = *(void *)(v0 + 1296);
    unint64_t v78 = *(void *)(v0 + 1304);
    uint64_t v82 = *(void *)(v0 + 1280);
    unint64_t v85 = *(void *)(v0 + 1288);
    unint64_t v24 = *(void *)(v0 + 1232);
    uint64_t v87 = *(void *)(v0 + 1224);
    uint64_t v61 = *(void *)(v0 + 1208);
    unint64_t v63 = *(void *)(v0 + 1216);
    unint64_t v25 = *(void *)(v0 + 1168);
    uint64_t v26 = *(void *)(v0 + 1160);
    uint64_t v27 = *(void *)(v0 + 1104);
    uint64_t v28 = *(void *)(v0 + 1096);
    uint64_t v29 = *(void *)(v0 + 1088);
    uint64_t v30 = *(void *)(v0 + 1080);
    uint64_t v31 = *(void *)(v0 + 1072);
    if (v23)
    {
      uint64_t v59 = *(void *)(v0 + 1160);
      uint64_t v57 = *(void *)(v0 + 1176);
      unint64_t v58 = *(void *)(v0 + 1184);
      unsigned int log = v22;
      uint64_t v32 = swift_slowAlloc();
      v89[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v33 = UUID.uuidString.getter();
      *(void *)(v0 + 920) = sub_100290514(v33, v34, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      Swift::String v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v35(v27, v30);
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v36 = UUID.uuidString.getter();
      *(void *)(v0 + 928) = sub_100290514(v36, v37, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v28, v30);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully created URLRequest to provision credential %s with config %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_100075868(v57, v58);
      sub_100075868(v61, v63);
      sub_10006D144(v65, v67);
      sub_10006D144(v69, v72);
      sub_10006D144(v75, v78);
      sub_10006D144(v82, v85);
      sub_100075868(v87, v24);

      sub_100075868(v59, v25);
      sub_10006D144(*(void *)(v0 + 832), *(void *)(v0 + 840));
    }
    else
    {
      sub_100075868(*(void *)(v0 + 1176), *(void *)(v0 + 1184));
      sub_100075868(v61, v63);
      sub_10006D144(v65, v67);
      sub_10006D144(v69, v72);
      sub_10006D144(v75, v78);
      sub_10006D144(v82, v85);
      sub_100075868(v87, v24);

      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v44(v28, v30);
      v44(v27, v30);
      sub_100075868(v26, v25);
      sub_10006D144(*(void *)(v0 + 832), *(void *)(v0 + 840));
    }
    sub_10028CE74(v31, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String_optional v45 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v38 = v17;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v89[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_getErrorValue();
      uint64_t v42 = Error.localizedDescription.getter();
      *(void *)(v0 + 912) = sub_100290514(v42, v43, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "JSONSerialization error %s encountered while serializing createAppletInstanceRequest", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v46 = *(void *)(v0 + 1336);
    uint64_t v47 = *(void *)(v0 + 1328);
    uint64_t v48 = *(void *)(v0 + 1312);
    unint64_t v62 = *(void *)(v0 + 1320);
    uint64_t v64 = *(void *)(v0 + 1296);
    unint64_t v66 = *(void *)(v0 + 1304);
    uint64_t v68 = *(void *)(v0 + 1280);
    unint64_t v76 = *(void *)(v0 + 1232);
    unint64_t v70 = *(void *)(v0 + 1288);
    uint64_t v73 = *(void *)(v0 + 1224);
    unint64_t v49 = *(void *)(v0 + 1216);
    uint64_t v50 = *(void *)(v0 + 1208);
    unint64_t v51 = *(void *)(v0 + 1184);
    uint64_t v52 = *(void *)(v0 + 1176);
    unint64_t v83 = *(void *)(v0 + 1168);
    uint64_t v79 = *(void *)(v0 + 1160);
    uint64_t v86 = *(void *)(v0 + 952);
    uint64_t v88 = *(void *)(v0 + 1072);
    sub_10008E594();
    swift_allocError();
    *uint64_t v53 = 14;
    swift_willThrow();
    sub_100075868(v52, v51);
    sub_100075868(v50, v49);
    sub_10006D144(v47, v46);
    sub_10006D144(v48, v62);
    sub_10006D144(v64, v66);
    sub_10006D144(v68, v70);
    sub_100075868(v73, v76);
    swift_errorRelease();
    sub_100075868(v79, v83);
    sub_10006D144(*(void *)(v0 + 832), *(void *)(v0 + 840));
    uint64_t v54 = type metadata accessor for URLRequest();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(v86, v54);
    sub_10028CE74(v88, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String_optional v45 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v45();
}

uint64_t sub_100284260()
{
  unint64_t v1 = v0[154];
  uint64_t v2 = v0[153];
  unint64_t v3 = v0[152];
  uint64_t v4 = v0[151];
  unint64_t v5 = v0[146];
  uint64_t v6 = v0[145];
  uint64_t v7 = v0[134];
  uint64_t v8 = v0[119];
  sub_100075868(v0[147], v0[148]);
  sub_100075868(v4, v3);
  sub_100075868(v2, v1);
  sub_100075868(v6, v5);
  sub_10006D144(v0[104], v0[105]);
  uint64_t v9 = type metadata accessor for URLRequest();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  sub_10028CE74(v7, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100284420(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URL.DirectoryHint();
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  type metadata accessor for URL();
  v2[19] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for URLRequest();
  v2[20] = v5;
  v2[21] = *(void *)(v5 - 8);
  v2[22] = swift_task_alloc();
  sub_10006C51C(&qword_10045A778);
  v2[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SECNetworkConfiguration();
  v2[24] = v6;
  v2[25] = *(void *)(v6 - 8);
  v2[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v2[27] = v7;
  v2[28] = *(void *)(v7 - 8);
  v2[29] = swift_task_alloc();
  v2[30] = *(void *)(type metadata accessor for SECPresentmentReport(0) - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v2[33] = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100284740;
  return sub_100280E60();
}

uint64_t sub_100284740()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v2 + 272) = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_10028492C;
    return sub_100291CE0();
  }
}

uint64_t sub_10028492C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 280) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    return _swift_task_switch(sub_100284AEC, 0, 0);
  }
}

uint64_t sub_100284AEC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 280) + 16);
  *(void *)(v0 + 288) = v1;
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 240);
    *(void *)(v0 + 296) = OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
    *(_DWORD *)(v0 + 448) = *(_DWORD *)(v2 + 80);
    swift_beginAccess();
    uint64_t v3 = *(void *)(v2 + 72);
    *(_DWORD *)(v0 + 452) = enum case for URL.DirectoryHint.inferFromPath(_:);
    *(_DWORD *)(v0 + 456) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
    *(void *)(v0 + 304) = v3;
    *(void *)(v0 + 312) = 0;
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 216);
    sub_10028CE0C(*(void *)(v0 + 280)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448)), *(void *)(v0 + 256), type metadata accessor for SECPresentmentReport);
    UUID.init()();
    *(void *)(v0 + 320) = UUID.uuidString.getter();
    *(void *)(v0 + 328) = v7;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100284D6C;
    v8[29] = *(void *)(v0 + 256);
    uint64_t v12 = (uint64_t (*)(void *))((char *)&dword_100456F38 + dword_100456F38);
    uint64_t v9 = (void *)swift_task_alloc();
    v8[30] = v9;
    *uint64_t v9 = v8;
    v9[1] = sub_10028C7E4;
    return v12(v8 + 18);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
}

uint64_t sub_100284D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)*v5;
  v6[43] = a1;
  v6[44] = a2;
  v6[45] = a3;
  v6[46] = a4;
  v6[47] = v4;
  swift_task_dealloc();
  if (v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1002856C8;
  }
  else
  {
    uint64_t v7 = sub_100284E90;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100284E90()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 184);
  sub_10028A7F0(*(void *)(v0 + 96) + *(void *)(v0 + 296), v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease();
    sub_10008E734(v4, &qword_10045A778);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "sendDailyPresentmentReports: Nil network configuration", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 360);
    unint64_t v9 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 344);
    unint64_t v11 = *(void *)(v0 + 352);

    sub_10008E594();
    swift_allocError();
    *uint64_t v13 = 19;
    swift_willThrow();
    sub_10006D144(v10, v9);
    sub_10006D144(v12, v11);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v14 = *(void *)(v0 + 256);
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    sub_10028CE0C(v14, v15, type metadata accessor for SECPresentmentReport);
    swift_errorRetain();
    swift_errorRetain();
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 256);
    if (v18)
    {
      uint64_t v21 = swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_getErrorValue();
      uint64_t v22 = Error.localizedDescription.getter();
      *(void *)(v21 + 4) = sub_100290514(v22, v23, v55);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v24 = UUID.uuidString.getter();
      *(void *)(v21 + 14) = sub_100290514(v24, v25, v55);
      swift_bridgeObjectRelease();
      sub_10028CE74(v20, type metadata accessor for SECPresentmentReport);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error %s when sending report %s. Will try again the next scheduled task.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10028CE74(v20, type metadata accessor for SECPresentmentReport);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    sub_10028CE74(v19, type metadata accessor for SECPresentmentReport);
    uint64_t v42 = *(void *)(v0 + 312) + 1;
    if (v42 == *(void *)(v0 + 288))
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
      return v43();
    }
    else
    {
      *(void *)(v0 + 312) = v42;
      uint64_t v45 = *(void *)(v0 + 224);
      uint64_t v44 = *(void *)(v0 + 232);
      uint64_t v46 = *(void *)(v0 + 216);
      sub_10028CE0C(*(void *)(v0 + 280)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 304) * v42, *(void *)(v0 + 256), type metadata accessor for SECPresentmentReport);
      UUID.init()();
      *(void *)(v0 + 320) = UUID.uuidString.getter();
      *(void *)(v0 + 328) = v47;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 336) = v48;
      void *v48 = v0;
      v48[1] = sub_100284D6C;
      v48[29] = *(void *)(v0 + 256);
      uint64_t v54 = (uint64_t (*)(uint64_t))((char *)&dword_100456F38 + dword_100456F38);
      unint64_t v49 = (void *)swift_task_alloc();
      v48[30] = v49;
      void *v49 = v48;
      v49[1] = sub_10028C7E4;
      return v54((uint64_t)(v48 + 18));
    }
  }
  else
  {
    uint64_t v51 = *(void *)(v0 + 360);
    unint64_t v52 = *(void *)(v0 + 368);
    uint64_t v26 = *(void **)(v0 + 328);
    uint64_t _ = *(void *)(v0 + 320);
    uint64_t v27 = *(unsigned int *)(v0 + 452);
    uint64_t v28 = *(void *)(v0 + 144);
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v30 = *(void *)(v0 + 136);
    sub_10028ADF8(*(void *)(v0 + 184), *(void *)(v0 + 208), (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    *(void *)(v0 + 64) = 0xD000000000000013;
    *(void *)(v0 + 72) = 0x80000001003B9F90;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 104))(v28, v27, v29);
    sub_1001150C4();
    URL.appending<A>(path:directoryHint:)();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
    swift_bridgeObjectRelease();
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    URLRequest.httpMethod.setter();
    v31.value._uint64_t countAndFlagsBits = 0xD000000000000010;
    v31.value._object = (void *)0x80000001003B9E30;
    v32._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
    v32._object = (void *)0xEC00000065707954;
    URLRequest.setValue(_:forHTTPHeaderField:)(v31, v32);
    v33.value._uint64_t countAndFlagsBits = _;
    v33.value._object = v26;
    v34._uint64_t countAndFlagsBits = 0x7365757165722D78;
    v34._object = (void *)0xEC00000064692D74;
    URLRequest.setValue(_:forHTTPHeaderField:)(v33, v34);
    swift_bridgeObjectRelease();
    v35.value._uint64_t countAndFlagsBits = sub_10028AA50();
    v36._object = (void *)0x80000001003B9E50;
    v36._uint64_t countAndFlagsBits = 0xD000000000000013;
    URLRequest.setValue(_:forHTTPHeaderField:)(v35, v36);
    swift_bridgeObjectRelease();
    Swift::String v37 = Data.base64EncodedString(options:)(0);
    v38._uint64_t countAndFlagsBits = 0xD000000000000011;
    v38._object = (void *)0x80000001003B9F70;
    URLRequest.setValue(_:forHTTPHeaderField:)((Swift::String_optional)v37, v38);
    swift_bridgeObjectRelease();
    sub_10006D0EC(v51, v52);
    URLRequest.httpBody.setter();
    uint64_t v53 = (uint64_t (*)(uint64_t, char))((char *)&dword_100455F78 + dword_100455F78);
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v39;
    void *v39 = v0;
    v39[1] = sub_100285B20;
    uint64_t v40 = *(void *)(v0 + 176);
    return v53(v40, 0);
  }
}

uint64_t sub_1002856C8()
{
  uint64_t v25 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  sub_10028CE0C(v1, v2, type metadata accessor for SECPresentmentReport);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.fault.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    *(void *)(v9 + 4) = sub_100290514(v10, v11, &v24);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v12 = UUID.uuidString.getter();
    *(void *)(v9 + 14) = sub_100290514(v12, v13, &v24);
    swift_bridgeObjectRelease();
    sub_10028CE74(v8, type metadata accessor for SECPresentmentReport);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error %s when sending report %s. Will try again the next scheduled task.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10028CE74(v8, type metadata accessor for SECPresentmentReport);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_10028CE74(v7, type metadata accessor for SECPresentmentReport);
  uint64_t v14 = *(void *)(v0 + 312) + 1;
  if (v14 == *(void *)(v0 + 288))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    *(void *)(v0 + 312) = v14;
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 232);
    uint64_t v19 = *(void *)(v0 + 216);
    sub_10028CE0C(*(void *)(v0 + 280)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 304) * v14, *(void *)(v0 + 256), type metadata accessor for SECPresentmentReport);
    UUID.init()();
    *(void *)(v0 + 320) = UUID.uuidString.getter();
    *(void *)(v0 + 328) = v20;
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100284D6C;
    v21[29] = *(void *)(v0 + 256);
    unint64_t v23 = (uint64_t (*)(uint64_t))((char *)&dword_100456F38 + dword_100456F38);
    uint64_t v22 = (void *)swift_task_alloc();
    v21[30] = v22;
    *uint64_t v22 = v21;
    v22[1] = sub_10028C7E4;
    return v23((uint64_t)(v21 + 18));
  }
}

uint64_t sub_100285B20(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *v3;
  *(void *)(*v3 + 392) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = sub_100285E24;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v6 + 88);
    sub_10006D144(a1, a2);
    uint64_t v7 = sub_100285C5C;
    uint64_t v8 = v9;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100285C5C()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = sub_100295288(*(void *)(v0 + 256));
  *(void *)(v0 + 400) = v2;
  if (v1)
  {
    *(void *)(v0 + 440) = v1;
    uint64_t v3 = sub_100286800;
LABEL_3:
    return _swift_task_switch(v3, 0, 0);
  }
  uint64_t v4 = (void *)v2;
  if (!v2)
  {
    uint64_t v3 = sub_10028654C;
    goto LABEL_3;
  }
  uint64_t v5 = *(unsigned int *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 104);
  id v9 = [*(id *)(*(void *)(v0 + 88) + 112) viewContext];
  *(void *)(v0 + 408) = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 416) = v10;
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v6, v5, v8);
  v9;
  id v11 = v4;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1002862D4;
  uint64_t v13 = *(void *)(v0 + 120);
  return NSManagedObjectContext.perform<A>(schedule:_:)(v12, v13, sub_10028CF14, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_100285E24()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 360);
  unint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 160);
  sub_10006D144(*(void *)(v0 + 344), *(void *)(v0 + 352));
  sub_10006D144(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10028CE74(v3, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E55C(v9, (uint64_t)qword_1004686A8);
  sub_10028CE0C(v7, v8, type metadata accessor for SECPresentmentReport);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.fault.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = *(void *)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 256);
  if (v12)
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    *(void *)(v15 + 4) = sub_100290514(v16, v17, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v18 = UUID.uuidString.getter();
    *(void *)(v15 + 14) = sub_100290514(v18, v19, &v30);
    swift_bridgeObjectRelease();
    sub_10028CE74(v14, type metadata accessor for SECPresentmentReport);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error %s when sending report %s. Will try again the next scheduled task.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10028CE74(v14, type metadata accessor for SECPresentmentReport);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_10028CE74(v13, type metadata accessor for SECPresentmentReport);
  uint64_t v20 = *(void *)(v0 + 312) + 1;
  if (v20 == *(void *)(v0 + 288))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    *(void *)(v0 + 312) = v20;
    uint64_t v24 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 216);
    sub_10028CE0C(*(void *)(v0 + 280)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 304) * v20, *(void *)(v0 + 256), type metadata accessor for SECPresentmentReport);
    UUID.init()();
    *(void *)(v0 + 320) = UUID.uuidString.getter();
    *(void *)(v0 + 328) = v26;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v27;
    void *v27 = v0;
    v27[1] = sub_100284D6C;
    v27[29] = *(void *)(v0 + 256);
    uint64_t v29 = (uint64_t (*)(uint64_t))((char *)&dword_100456F38 + dword_100456F38);
    uint64_t v28 = (void *)swift_task_alloc();
    v27[30] = v28;
    *uint64_t v28 = v27;
    v28[1] = sub_10028C7E4;
    return v29((uint64_t)(v27 + 18));
  }
}

uint64_t sub_1002862D4()
{
  unint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[15];
  uint64_t v4 = v2[14];
  uint64_t v5 = v2[13];
  uint64_t v6 = v2[11];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0) {
    uint64_t v7 = sub_1002864D8;
  }
  else {
    uint64_t v7 = sub_10028646C;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_10028646C()
{
  uint64_t v1 = *(void **)(v0 + 400);

  return _swift_task_switch(sub_10028654C, 0, 0);
}

uint64_t sub_1002864D8()
{
  uint64_t v1 = *(void **)(v0 + 400);

  *(void *)(v0 + 440) = *(void *)(v0 + 432);
  return _swift_task_switch(sub_100286800, 0, 0);
}

uint64_t sub_10028654C()
{
  uint64_t v1 = *(void *)(v0 + 360);
  unint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 160);
  sub_10006D144(*(void *)(v0 + 344), *(void *)(v0 + 352));
  sub_10006D144(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  sub_10028CE74(v4, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  sub_10028CE74(v3, type metadata accessor for SECPresentmentReport);
  uint64_t v8 = *(void *)(v0 + 312) + 1;
  if (v8 == *(void *)(v0 + 288))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  else
  {
    *(void *)(v0 + 312) = v8;
    uint64_t v12 = *(void *)(v0 + 224);
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 216);
    sub_10028CE0C(*(void *)(v0 + 280)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 304) * v8, *(void *)(v0 + 256), type metadata accessor for SECPresentmentReport);
    UUID.init()();
    *(void *)(v0 + 320) = UUID.uuidString.getter();
    *(void *)(v0 + 328) = v14;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_100284D6C;
    v15[29] = *(void *)(v0 + 256);
    unint64_t v17 = (uint64_t (*)(void *))((char *)&dword_100456F38 + dword_100456F38);
    uint64_t v16 = (void *)swift_task_alloc();
    v15[30] = v16;
    *uint64_t v16 = v15;
    v16[1] = sub_10028C7E4;
    return v17(v15 + 18);
  }
}

uint64_t sub_100286800()
{
  uint64_t v31 = v0;
  uint64_t v1 = *(void *)(v0 + 360);
  unint64_t v2 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 160);
  sub_10006D144(*(void *)(v0 + 344), *(void *)(v0 + 352));
  sub_10006D144(v1, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_10028CE74(v3, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v9 = type metadata accessor for Logger();
  sub_10008E55C(v9, (uint64_t)qword_1004686A8);
  sub_10028CE0C(v7, v8, type metadata accessor for SECPresentmentReport);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.fault.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = *(void *)(v0 + 248);
  uint64_t v13 = *(void *)(v0 + 256);
  if (v12)
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_getErrorValue();
    uint64_t v16 = Error.localizedDescription.getter();
    *(void *)(v15 + 4) = sub_100290514(v16, v17, &v30);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v18 = UUID.uuidString.getter();
    *(void *)(v15 + 14) = sub_100290514(v18, v19, &v30);
    swift_bridgeObjectRelease();
    sub_10028CE74(v14, type metadata accessor for SECPresentmentReport);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error %s when sending report %s. Will try again the next scheduled task.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10028CE74(v14, type metadata accessor for SECPresentmentReport);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_10028CE74(v13, type metadata accessor for SECPresentmentReport);
  uint64_t v20 = *(void *)(v0 + 312) + 1;
  if (v20 == *(void *)(v0 + 288))
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  else
  {
    *(void *)(v0 + 312) = v20;
    uint64_t v24 = *(void *)(v0 + 224);
    uint64_t v23 = *(void *)(v0 + 232);
    uint64_t v25 = *(void *)(v0 + 216);
    sub_10028CE0C(*(void *)(v0 + 280)+ ((*(unsigned __int8 *)(v0 + 448) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 448))+ *(void *)(v0 + 304) * v20, *(void *)(v0 + 256), type metadata accessor for SECPresentmentReport);
    UUID.init()();
    *(void *)(v0 + 320) = UUID.uuidString.getter();
    *(void *)(v0 + 328) = v26;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v27;
    void *v27 = v0;
    v27[1] = sub_100284D6C;
    v27[29] = *(void *)(v0 + 256);
    uint64_t v29 = (uint64_t (*)(uint64_t))((char *)&dword_100456F38 + dword_100456F38);
    uint64_t v28 = (void *)swift_task_alloc();
    v27[30] = v28;
    *uint64_t v28 = v27;
    v28[1] = sub_10028C7E4;
    return v29((uint64_t)(v27 + 18));
  }
}

uint64_t sub_100286CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[20] = a3;
  v4[21] = v3;
  v4[18] = a1;
  v4[19] = a2;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[22] = v5;
  v4[23] = *(void *)(v5 - 8);
  v4[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SECCredentialConfig();
  v4[25] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[26] = v7;
  v4[27] = *(void *)(v7 + 64);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  type metadata accessor for URL();
  v4[30] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for URLRequest();
  v4[31] = v8;
  v4[32] = *(void *)(v8 - 8);
  v4[33] = swift_task_alloc();
  sub_10006C51C(&qword_10045A778);
  v4[34] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SECNetworkConfiguration();
  v4[35] = v9;
  v4[36] = *(void *)(v9 - 8);
  v4[37] = swift_task_alloc();
  sub_10006C51C(&qword_100454608);
  v4[38] = swift_task_alloc();
  return _swift_task_switch(sub_100286F2C, 0, 0);
}

uint64_t sub_100286F2C()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 312) = qword_100468A98;
  return _swift_task_switch(sub_100286FC4, v1, 0);
}

uint64_t sub_100286FC4()
{
  sub_10008DB54(*(void *)(v0 + 304));
  *(void *)(v0 + 320) = 0;
  return _swift_task_switch(sub_100287054, 0, 0);
}

uint64_t sub_100287054()
{
  uint64_t v1 = v0[38];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[26] + 48))(v1, 1, v0[25]) == 1)
  {
    sub_10008E734(v1, &qword_100454608);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[41] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002871E4;
    return sub_100280E60();
  }
  else
  {
    sub_10028ADF8(v1, v0[18], (uint64_t (*)(void))type metadata accessor for SECCredentialConfig);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

uint64_t sub_1002871E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 336) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10028738C, 0, 0);
  }
}

uint64_t sub_10028738C()
{
  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[21] + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  swift_beginAccess();
  sub_10028A7F0(v4, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10008E734(v0[34], &qword_10045A778);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "getCredentialMetadata: Nil network configuration", v8, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v9 = 19;
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v10 = v0[42];
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[20];
  sub_10028ADF8(v0[34], v0[37], (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  sub_100114B44(*(void *)(v12 + 32), *(void *)(v12 + 40), v11);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  v13.value._object = (void *)0x80000001003B9E30;
  v13.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  v14._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v14._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v13, v14);
  id v15 = sub_10028A858();
  if (v10)
  {
    uint64_t v16 = v0[37];
    (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
    sub_10028CE74(v16, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
  unint64_t v19 = v15;
  id v20 = [v15 serialNumber];

  if (v20)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v21 = 0;
    uint64_t v23 = 0;
  }
  v24.value._uint64_t countAndFlagsBits = v21;
  v24.value._object = v23;
  v25._uint64_t countAndFlagsBits = 0x2D656C7070612D78;
  v25._object = (void *)0xEC00000064696573;
  URLRequest.setValue(_:forHTTPHeaderField:)(v24, v25);
  swift_bridgeObjectRelease();
  v26.value._uint64_t countAndFlagsBits = sub_10028AA50();
  v27._uint64_t countAndFlagsBits = 0xD000000000000013;
  v27._object = (void *)0x80000001003B9E50;
  URLRequest.setValue(_:forHTTPHeaderField:)(v26, v27);
  swift_bridgeObjectRelease();
  v28.value._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  v29._uint64_t countAndFlagsBits = 0x7365757165722D78;
  v29._object = (void *)0xEC00000064692D74;
  URLRequest.setValue(_:forHTTPHeaderField:)(v28, v29);
  swift_bridgeObjectRelease();
  v30.value._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v31._uint64_t countAndFlagsBits = 0x6567612D72657375;
  v31._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v30, v31);
  swift_bridgeObjectRelease();
  Swift::String v34 = (uint64_t (*)(uint64_t, char))((char *)&dword_100455F78 + dword_100455F78);
  uint64_t v32 = (void *)swift_task_alloc();
  v0[43] = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_100287840;
  uint64_t v33 = v0[33];
  return v34(v33, 1);
}

uint64_t sub_100287840(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[44] = a1;
  v4[45] = a2;
  v4[46] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100287D70;
  }
  else {
    uint64_t v5 = sub_100287958;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100287958()
{
  uint64_t v30 = v0;
  unint64_t v2 = *(void *)(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v3 = *(void *)(v0 + 352);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10006D0EC(v3, v2);
  JSONDecoder.init()();
  sub_10008E67C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v4 = *(void *)(v0 + 352);
  unint64_t v5 = *(void *)(v0 + 360);
  if (v1)
  {
    sub_10006D144(v4, v5);
    swift_release();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      *(void *)(v0 + 136) = sub_100290514(v10, v11, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "getCredentialMetadata: JSON Decoding error %s encountered", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v20 = *(void *)(v0 + 352);
    unint64_t v19 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 256);
    uint64_t v22 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 248);
    sub_10008E594();
    swift_allocError();
    *Swift::String v25 = 13;
    swift_willThrow();
    swift_errorRelease();
    sub_10006D144(v20, v19);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    sub_10028CE74(v21, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    Swift::String_optional v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 152);
    sub_10006D144(v4, v5);
    swift_release();
    uint64_t v15 = *(void *)(v0 + 64);
    uint64_t v16 = type metadata accessor for UUID();
    long long v28 = *(_OWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v14, v16);
    uint64_t v17 = v12 + *(int *)(v13 + 20);
    *(void *)uint64_t v17 = v15;
    *(_OWORD *)(v17 + 8) = v28;
    uint64_t v18 = qword_100468A98;
    *(void *)(v0 + 376) = qword_100468A98;
    return _swift_task_switch(sub_100288104, v18, 0);
  }
}

uint64_t sub_100287D70()
{
  uint64_t v19 = v0;
  *(void *)(v0 + 128) = *(void *)(v0 + 368);
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v1 = *(void *)(v0 + 88);
    uint64_t v2 = *(void *)(v0 + 96);
    char v3 = *(unsigned char *)(v0 + 104);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E55C(v4, (uint64_t)qword_1004686A8);
    sub_1001391C4(v1, v2, v3);
    sub_1001391C4(v1, v2, v3);
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      unint64_t v8 = sub_100132F7C(v1, v2, v3);
      *(void *)(v0 + 112) = sub_100290514(v8, v9, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001334F8(v1, v2, v3);
      sub_1001334F8(v1, v2, v3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "getCredentialMetadata: Data task wrapper error %s encountered while performing URL request", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001334F8(v1, v2, v3);
      sub_1001334F8(v1, v2, v3);
    }

    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v13 = *(void *)(v0 + 256);
    uint64_t v12 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 248);
    sub_10008E594();
    swift_allocError();
    *uint64_t v15 = 11;
    swift_willThrow();
    sub_1001334F8(v1, v2, v3);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_10028CE74(v11, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 296);
    (*(void (**)(void, void))(*(void *)(v0 + 256) + 8))(*(void *)(v0 + 264), *(void *)(v0 + 248));
    sub_10028CE74(v10, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100288104()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[26];
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = v0[22];
  id v7 = [*(id *)(v0[47] + 112) viewContext];
  v0[48] = v7;
  sub_10028CE0C(v2, v1, (uint64_t (*)(void))type metadata accessor for SECCredentialConfig);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[49] = v9;
  *(void *)(v9 + 16) = v7;
  sub_10028ADF8(v1, v9 + v8, (uint64_t (*)(void))type metadata accessor for SECCredentialConfig);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
  v7;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[50] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1002882A8;
  uint64_t v11 = v0[24];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_10028AE60, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_1002882A8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[47];
  (*(void (**)(void, void))(v2[23] + 8))(v2[24], v2[22]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1002885E4;
  }
  else {
    uint64_t v4 = sub_100288448;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100288448()
{
  return _swift_task_switch(sub_1002884B0, 0, 0);
}

uint64_t sub_1002884B0()
{
  uint64_t v1 = v0[37];
  uint64_t v3 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[29];
  uint64_t v6 = v0[18];
  sub_10006D144(v0[44], v0[45]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_10028CE74(v1, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  sub_10028ADF8(v5, v6, (uint64_t (*)(void))type metadata accessor for SECCredentialConfig);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_1002885E4()
{
  return _swift_task_switch(sub_10028864C, 0, 0);
}

uint64_t sub_10028864C()
{
  uint64_t v17 = v0;
  sub_10028CE74(v0[29], (uint64_t (*)(void))type metadata accessor for SECCredentialConfig);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[17] = sub_100290514(v5, v6, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "getCredentialMetadata: JSON Decoding error %s encountered", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = v0[44];
  unint64_t v7 = v0[45];
  uint64_t v9 = v0[37];
  uint64_t v11 = v0[32];
  uint64_t v10 = v0[33];
  uint64_t v12 = v0[31];
  sub_10008E594();
  swift_allocError();
  *uint64_t v13 = 13;
  swift_willThrow();
  swift_errorRelease();
  sub_10006D144(v8, v7);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  sub_10028CE74(v9, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10028894C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100288A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  return _swift_task_switch(sub_100288AA4, 0, 0);
}

uint64_t sub_100288AA4()
{
  uint64_t v20 = v0;
  uint64_t v1 = *(void **)(v0 + 64);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 40) = 0;
  id v3 = [v1 signChallenge:isa outError:v0 + 40];

  id v4 = *(id *)(v0 + 40);
  if (v3)
  {
    uint64_t v5 = *(uint64_t **)(v0 + 56);
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    *uint64_t v5 = v6;
    v5[1] = v8;
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v10 = v4;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_getErrorValue();
      uint64_t v15 = Error.localizedDescription.getter();
      *(void *)(v0 + 40) = sub_100290514(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "performSEAuthenticatedGetData: Failed to sign challenge with nearfield error %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v17 = 8;
    swift_willThrow();
    swift_errorRelease();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v9();
}

uint64_t sub_100288DB4(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  sub_10006C51C(&qword_100455EB0);
  v2[18] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[19] = v3;
  v2[20] = *(void *)(v3 - 8);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  type metadata accessor for URL();
  v2[23] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLRequest();
  v2[24] = v4;
  v2[25] = *(void *)(v4 - 8);
  v2[26] = swift_task_alloc();
  sub_10006C51C(&qword_10045A778);
  v2[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SECNetworkConfiguration();
  v2[28] = v5;
  v2[29] = *(void *)(v5 - 8);
  v2[30] = swift_task_alloc();
  uint64_t v6 = (void *)swift_task_alloc();
  v2[31] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100288FF4;
  return sub_100280E60();
}

uint64_t sub_100288FF4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100289194, 0, 0);
  }
}

uint64_t sub_100289194()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[17] + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  swift_beginAccess();
  sub_10028A7F0(v4, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10008E734(v0[27], &qword_10045A778);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "getInstallationStatus: Nil network configuration", v8, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v9 = 19;
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v10 = v0[32];
  uint64_t v11 = v0[23];
  sub_10028ADF8(v0[27], v0[30], (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  sub_100114D94(v11);
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  URLRequest.httpMethod.setter();
  v12.value._object = (void *)0x80000001003B9E30;
  v12.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  v13._uint64_t countAndFlagsBits = 0x2D746E65746E6F43;
  v13._object = (void *)0xEC00000065707954;
  URLRequest.setValue(_:forHTTPHeaderField:)(v12, v13);
  id v14 = sub_10028A858();
  if (v10)
  {
    uint64_t v15 = v0[30];
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    sub_10028CE74(v15, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  uint64_t v18 = v14;
  id v19 = [v14 serialNumber];

  if (v19)
  {
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v22 = 0;
  }
  uint64_t v23 = v0[22];
  uint64_t v24 = v0[19];
  uint64_t v25 = v0[20];
  v26.value._uint64_t countAndFlagsBits = v20;
  v26.value._object = v22;
  v27._uint64_t countAndFlagsBits = 0x2D656C7070612D78;
  v27._object = (void *)0xEC00000064696573;
  URLRequest.setValue(_:forHTTPHeaderField:)(v26, v27);
  swift_bridgeObjectRelease();
  v28.value._uint64_t countAndFlagsBits = sub_10028AA50();
  v29._uint64_t countAndFlagsBits = 0xD000000000000013;
  v29._object = (void *)0x80000001003B9E50;
  URLRequest.setValue(_:forHTTPHeaderField:)(v28, v29);
  swift_bridgeObjectRelease();
  UUID.init()();
  uint64_t v30 = UUID.uuidString.getter();
  uint64_t v32 = v31;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v0[33] = v33;
  v0[34] = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v33(v23, v24);
  v34.value._uint64_t countAndFlagsBits = v30;
  v34.value._object = v32;
  v35._uint64_t countAndFlagsBits = 0x7365757165722D78;
  v35._object = (void *)0xEC00000064692D74;
  URLRequest.setValue(_:forHTTPHeaderField:)(v34, v35);
  swift_bridgeObjectRelease();
  v36.value._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37._uint64_t countAndFlagsBits = 0x6567612D72657375;
  v37._object = (void *)0xEA0000000000746ELL;
  URLRequest.setValue(_:forHTTPHeaderField:)(v36, v37);
  swift_bridgeObjectRelease();
  uint64_t v40 = (uint64_t (*)(uint64_t, char))((char *)&dword_100455F78 + dword_100455F78);
  Swift::String v38 = (void *)swift_task_alloc();
  v0[35] = v38;
  *Swift::String v38 = v0;
  v38[1] = sub_10028966C;
  uint64_t v39 = v0[26];
  return v40(v39, 1);
}