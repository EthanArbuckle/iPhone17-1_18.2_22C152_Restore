uint64_t sub_10014D880()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  v2 = *v1;
  *(void *)(*v1 + 1000) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3 = *(void *)(v2 + 600);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = sub_10015142C;
  }
  else
  {
    v3 = *(void *)(v2 + 600);
    swift_bridgeObjectRelease();
    v4 = sub_10014DA1C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10014DA1C()
{
  uint64_t v168 = v0;
  v1 = *(void **)(v0 + 960);
  unint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 944);
  uint64_t v4 = *(void *)(v0 + 920);
  uint64_t v5 = *(void *)(v0 + 904);
  swift_bridgeObjectRelease();
  sub_10006D144(v3, v2);

  if (v4 + 1 != v5)
  {
    unint64_t v10 = *(void *)(v0 + 920) + 1;
    *(void *)(v0 + 920) = v10;
    uint64_t v11 = *(void *)(v0 + 896);
    if (v10 >= *(void *)(v11 + 16))
    {
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    uint64_t v12 = *(void *)(v0 + 600) + *(void *)(v0 + 912);
    uint64_t v13 = v11 + 48 * v10;
    uint64_t v165 = *(void *)(v13 + 32);
    *(void *)(v0 + 928) = v165;
    uint64_t v14 = *(void *)(v13 + 40);
    *(void *)(v0 + 936) = v14;
    uint64_t v15 = *(void *)(v13 + 48);
    *(void *)(v0 + 944) = v15;
    unint64_t v16 = *(void *)(v13 + 56);
    *(void *)(v0 + 952) = v16;
    char v160 = *(unsigned char *)(v13 + 64);
    v17 = *(void **)(v13 + 72);
    *(void *)(v0 + 960) = v17;
    char v159 = *(unsigned char *)(v12 + 32);
    int v18 = *(unsigned __int8 *)(v12 + 33);
    uint64_t v163 = v14;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v15, v16);
    id v19 = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18 == 1 && !SESInternalVariant())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = v165;
      *(void *)(v0 + 272) = v163;
      *(void *)(v0 + 280) = v15;
      *(void *)(v0 + 288) = v16;
      *(unsigned char *)(v0 + 296) = v160;
    }
    else
    {
      id v20 = objc_allocWithZone((Class)NSUserDefaults);
      swift_bridgeObjectRetain();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v22 = [v20 initWithSuiteName:v21];

      if (!v22)
      {
        __break(1u);
        JUMPOUT(0x10014ED04);
      }
      v23 = (char *)(v0 + 85);
      NSString v24 = String._bridgeToObjectiveC()();
      id v25 = [v22 valueForKey:v24];

      if (v25)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0((_OWORD *)(v0 + 336), (_OWORD *)(v0 + 304));
      }
      else
      {
        *(_OWORD *)(v0 + 304) = 0u;
        *(_OWORD *)(v0 + 320) = 0u;
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      if (swift_dynamicCast())
      {
        char v32 = *v23;
      }
      else
      {
        char v32 = 2;
        char *v23 = 2;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 264) = v165;
      *(void *)(v0 + 272) = v163;
      *(void *)(v0 + 280) = v15;
      *(void *)(v0 + 288) = v16;
      *(unsigned char *)(v0 + 296) = v160;
      if (v32 != 2)
      {
        if (v32)
        {
LABEL_20:
          unint64_t v33 = *(void *)(v0 + 952);
          uint64_t v34 = *(void *)(v0 + 944);
          swift_bridgeObjectRetain();
          sub_10006D0EC(v34, v33);
          sub_10006D144(v34, v33);
          v35 = (void *)swift_task_alloc();
          *(void *)(v0 + 992) = v35;
          void *v35 = v0;
          v35[1] = sub_10014D880;
          uint64_t v36 = *(void *)(v0 + 960);
          uint64_t v37 = *(void *)(v0 + 936);
          uint64_t v38 = *(void *)(v0 + 928);
          uint64_t v39 = *(void *)(v0 + 712);
          uint64_t v40 = *(void *)(v0 + 640);
          uint64_t v41 = *(void *)(v0 + 608);
          uint64_t v42 = *(void *)(v0 + 592);
          uint64_t v43 = *(void *)(v0 + 584);
          return sub_10015A1A0(v38, v37, v36, v39, v41, v40, v43, v42);
        }
LABEL_30:
        *(void *)(v0 + 968) = *(void *)(v0 + 552);
        swift_bridgeObjectRetain();
        v60 = (void *)swift_task_alloc();
        *(void *)(v0 + 976) = v60;
        void *v60 = v0;
        v60[1] = sub_10014D0A8;
        uint64_t v61 = *(void *)(v0 + 608);
        return sub_10016E488(v0 + 264, (uint64_t)v19, v61);
      }
    }
    if (v159) {
      goto LABEL_20;
    }
    goto LABEL_30;
  }
  char v6 = *(unsigned char *)(v0 + 130);
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_task_alloc();
    *(void *)(v0 + 1008) = v7;
    *(void *)uint64_t v7 = v0;
    *(void *)(v7 + 8) = sub_10014ED34;
    uint64_t v8 = *(void *)(v0 + 600);
    long long v9 = *(_OWORD *)(v0 + 584);
    *(void *)(v7 + 32) = v8;
    *(_OWORD *)(v7 + 16) = v9;
    return _swift_task_switch(sub_100151D1C, v8, 0);
  }
  uint64_t v26 = *(void *)(v0 + 1000);
  *(void *)(v0 + 1040) = *(void *)(v0 + 888);
  *(void *)(swift_task_alloc() + 16) = v0 + 552;
  uint64_t v27 = swift_bridgeObjectRetain();
  v28 = sub_10016DAC8(v27, (void (*)(void *__return_ptr, void *, id))sub_10016FE9C);
  *(void *)(v0 + 1048) = v28;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v31 = 134217984;
    *(void *)(v0 + 560) = v28[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Sync progress - handling %ld present views", v31, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v44 = v28[2];
  *(void *)(v0 + 1056) = v44;
  if (v44)
  {
    *(void *)(v0 + 1064) = 0;
    uint64_t v45 = *(void *)(v0 + 1048);
    uint64_t v46 = *(void *)(v45 + 32);
    *(void *)(v0 + 1072) = v46;
    unint64_t v47 = *(void *)(v45 + 40);
    *(void *)(v0 + 1080) = v47;
    uint64_t v48 = *(void *)(v45 + 48);
    *(void *)(v0 + 1088) = v48;
    uint64_t v49 = *(void *)(v45 + 56);
    *(void *)(v0 + 1096) = v49;
    uint64_t v50 = *(void *)(v45 + 64);
    *(void *)(v0 + 1104) = v50;
    unint64_t v51 = *(void *)(v45 + 72);
    *(void *)(v0 + 1112) = v51;
    char v52 = *(unsigned char *)(v45 + 80);
    v53 = *(void **)(v45 + 88);
    *(void *)(v0 + 1120) = v53;
    *(void *)(v0 + 184) = v48;
    *(void *)(v0 + 192) = v49;
    *(void *)(v0 + 200) = v50;
    *(void *)(v0 + 208) = v51;
    *(unsigned char *)(v0 + 216) = v52;
    sub_10006D0EC(v46, v47);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v50, v51);
    id v54 = v53;
    v55 = (void *)swift_task_alloc();
    *(void *)(v0 + 1128) = v55;
    void *v55 = v0;
    v55[1] = sub_10014FDA8;
    uint64_t v56 = *(void *)(v0 + 712);
    uint64_t v57 = *(void *)(v0 + 608);
    uint64_t v58 = *(void *)(v0 + 592);
    uint64_t v59 = *(void *)(v0 + 584);
    return sub_10015B594(v59, v58, v46, v47, v0 + 184, (uint64_t)v54, v57, v56);
  }
  uint64_t v62 = *(void *)(v0 + 1040);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v153 = v62;
  uint64_t v63 = *(void *)(v62 + 16);
  if (!v63) {
    goto LABEL_79;
  }
  uint64_t v64 = *(void *)(v0 + 1040) + 32;
  uint64_t v65 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain();
  uint64_t v66 = 0;
  v67 = (uint64_t *)(v65 + 48);
  uint64_t v147 = v64;
  uint64_t v148 = v63;
  uint64_t v150 = v65;
  v146 = (uint64_t *)(v65 + 48);
  while (2)
  {
    uint64_t v68 = *(void *)(v65 + 16);
    if (!v68)
    {
      swift_bridgeObjectRelease();
LABEL_81:
      LODWORD(v105) = 1;
      goto LABEL_82;
    }
    uint64_t v154 = v26;
    v69 = (void *)(v64 + 48 * v66);
    uint64_t v70 = v69[2];
    unint64_t v71 = v69[3];
    v72 = (void *)v69[5];
    uint64_t v149 = v66 + 1;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v151 = v71;
    uint64_t v152 = v70;
    sub_10006D0EC(v70, v71);
    id v155 = v72;
    while (1)
    {
      uint64_t v161 = v68;
      uint64_t v77 = *(v67 - 2);
      unint64_t v76 = *(v67 - 1);
      uint64_t v79 = *v67;
      unint64_t v78 = v67[1];
      uint64_t v75 = v67[2];
      unint64_t v74 = v67[3];
      uint64_t v73 = v67[4];
      unint64_t v80 = v67[5];
      sub_10006D0EC(v77, v76);
      uint64_t v164 = v79;
      unint64_t v166 = v78;
      sub_10006D0EC(v79, v78);
      sub_10006D0EC(v75, v74);
      sub_10006D0EC(v73, v80);
      sub_10006D0EC(v77, v76);
      id v81 = [v155 currentTLK];
      if (v81) {
        break;
      }
      sub_100075868(v77, v76);
      sub_100075868(0, 0xF000000000000000);
LABEL_39:
      sub_10006D144(v77, v76);
      sub_10006D144(v79, v166);
      sub_10006D144(v75, v74);
      sub_10006D144(v73, v80);
LABEL_40:
      v67 += 9;
      uint64_t v68 = v161 - 1;
      if (v161 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_10006D144(v152, v151);
        swift_bridgeObjectRelease();

        goto LABEL_81;
      }
    }
    v82 = v81;
    uint64_t v156 = v75;
    unint64_t v157 = v74;
    uint64_t v158 = v73;
    id v83 = [v81 tlkUUID];

    uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v86 = v85;

    uint64_t v87 = 0;
    switch(v76 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v77), v77)) {
          goto LABEL_110;
        }
        uint64_t v87 = HIDWORD(v77) - (int)v77;
LABEL_48:
        sub_10006D0EC(v77, v76);
        break;
      case 2uLL:
        uint64_t v89 = *(void *)(v77 + 16);
        uint64_t v88 = *(void *)(v77 + 24);
        uint64_t v87 = v88 - v89;
        if (!__OFSUB__(v88, v89)) {
          goto LABEL_48;
        }
        goto LABEL_111;
      case 3uLL:
        break;
      default:
        uint64_t v87 = BYTE6(v76);
        break;
    }
    switch(v86 >> 62)
    {
      case 1uLL:
        LODWORD(v90) = HIDWORD(v84) - v84;
        if (__OFSUB__(HIDWORD(v84), v84)) {
          goto LABEL_112;
        }
        uint64_t v90 = (int)v90;
LABEL_54:
        if (v87 != v90)
        {
LABEL_38:
          sub_10006D144(v84, v86);
          sub_10006D144(v77, v76);
          sub_10006D144(v77, v76);
          unint64_t v74 = v157;
          uint64_t v73 = v158;
          uint64_t v75 = v156;
          goto LABEL_39;
        }
        if (v87 >= 1)
        {
          switch(v76 >> 62)
          {
            case 1uLL:
              if (v77 >> 32 < (int)v77) {
                goto LABEL_114;
              }
              sub_10006D0EC(v77, v76);
              uint64_t v95 = __DataStorage._bytes.getter();
              if (v95)
              {
                uint64_t v96 = v95;
                uint64_t v97 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v77, v97)) {
                  goto LABEL_116;
                }
                uint64_t v98 = v96 + (int)v77 - v97;
              }
              else
              {
                uint64_t v98 = 0;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v98, v84, v86, v167);
              uint64_t result = sub_10006D144(v77, v76);
              if (v154) {
                return result;
              }
LABEL_74:
              sub_10006D144(v84, v86);
              sub_10006D144(v77, v76);
              sub_10006D144(v77, v76);
              sub_10006D144(v77, v76);
              sub_10006D144(v164, v166);
              sub_10006D144(v156, v157);
              sub_10006D144(v158, v80);
              uint64_t v104 = 0;
              uint64_t v154 = 0;
              if (v167[0]) {
                goto LABEL_77;
              }
              goto LABEL_40;
            case 2uLL:
              uint64_t v99 = *(void *)(v77 + 16);
              uint64_t v100 = *(void *)(v77 + 24);
              swift_retain();
              swift_retain();
              uint64_t v101 = __DataStorage._bytes.getter();
              if (!v101) {
                goto LABEL_65;
              }
              uint64_t v102 = __DataStorage._offset.getter();
              if (__OFSUB__(v99, v102)) {
                goto LABEL_117;
              }
              v101 += v99 - v102;
LABEL_65:
              if (__OFSUB__(v100, v99)) {
                goto LABEL_115;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v101, v84, v86, v167);
              swift_release();
              uint64_t result = swift_release();
              if (v154) {
                return result;
              }
              sub_10006D144(v84, v86);
              sub_10006D144(v77, v76);
              sub_10006D144(v77, v76);
              char v103 = v167[0];
              sub_10006D144(v77, v76);
              sub_10006D144(v164, v166);
              sub_10006D144(v156, v157);
              sub_10006D144(v158, v80);
              uint64_t v104 = 0;
              uint64_t v154 = 0;
              if (v103) {
                goto LABEL_77;
              }
              goto LABEL_40;
            case 3uLL:
              uint64_t v94 = v0 + 71;
              *(void *)(v0 + 77) = 0;
              *(void *)(v0 + 71) = 0;
              goto LABEL_70;
            default:
              *(void *)(v0 + 57) = v77;
              *(_WORD *)(v0 + 65) = v76;
              *(unsigned char *)(v0 + 67) = BYTE2(v76);
              *(unsigned char *)(v0 + 68) = BYTE3(v76);
              *(unsigned char *)(v0 + 69) = BYTE4(v76);
              *(unsigned char *)(v0 + 70) = BYTE5(v76);
              uint64_t v94 = v0 + 57;
LABEL_70:
              uint64_t result = sub_1001E5240(v94, v84, v86, v167);
              if (v154) {
                return result;
              }
              goto LABEL_74;
          }
        }
LABEL_76:
        sub_10006D144(v84, v86);
        sub_10006D144(v77, v76);
        sub_10006D144(v77, v76);
        sub_10006D144(v77, v76);
        sub_10006D144(v79, v166);
        sub_10006D144(v156, v157);
        sub_10006D144(v158, v80);
        uint64_t v104 = v154;
LABEL_77:
        uint64_t v65 = v150;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_10006D144(v152, v151);

        uint64_t v26 = v104;
        uint64_t v66 = v149;
        v67 = v146;
        uint64_t v64 = v147;
        if (v149 != v148) {
          continue;
        }
        swift_bridgeObjectRelease();
LABEL_79:
        LODWORD(v105) = 0;
LABEL_82:
        int v106 = v105 ^ 1;
        v107 = self;
        NSString v108 = String._bridgeToObjectiveC()();
        unsigned int v109 = [v107 isAlarmSet:v108];

        swift_retain();
        v110 = Logger.logObject.getter();
        os_log_type_t v111 = static os_log_type_t.info.getter();
        BOOL v112 = os_log_type_enabled(v110, v111);
        uint64_t v113 = *(void *)(v0 + 600);
        if (v112)
        {
          char v162 = v105;
          uint64_t v105 = swift_slowAlloc();
          *(_DWORD *)uint64_t v105 = 67109632;
          *(_DWORD *)(v0 + 220) = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v105 + 8) = 1024;
          *(_DWORD *)(v0 + 180) = v109;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v105 + 14) = 2048;
          v114 = (long long *)(v113 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
          swift_beginAccess();
          long long v115 = *v114;
          long long v116 = v114[1];
          *(_OWORD *)(v0 + 161) = *(long long *)((char *)v114 + 25);
          *(_OWORD *)(v0 + 136) = v115;
          *(_OWORD *)(v0 + 152) = v116;
          *(_OWORD *)(v0 + 536) = *v114;
          *(_OWORD *)(v0 + 520) = *(_OWORD *)(v0 + 152);
          sub_100079AE8(v0 + 536);
          sub_100079AE8(v0 + 520);
          sub_1001AF748();
          uint64_t v118 = v117;
          sub_100079B14(v0 + 536);
          sub_100079B14(v0 + 520);
          *(void *)(v0 + 576) = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v110, v111, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v105, 0x18u);
          LOBYTE(v105) = v162;
          swift_slowDealloc();
        }
        else
        {
          swift_release();
        }
        uint64_t v119 = *(void *)(v0 + 600);

        *(unsigned char *)(v119 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = v106;
        if ((v105 & 1) == 0)
        {
          sub_1001413C0(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
          if ((v109 & 1) == 0)
          {
            v120 = (long long *)(*(void *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
            swift_beginAccess();
            long long v121 = *v120;
            long long v122 = v120[1];
            *(_OWORD *)(v0 + 113) = *(long long *)((char *)v120 + 25);
            *(_OWORD *)(v0 + 88) = v121;
            *(_OWORD *)(v0 + 104) = v122;
            *(_OWORD *)(v0 + 504) = *v120;
            *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
            sub_100079AE8(v0 + 504);
            sub_100079AE8(v0 + 488);
            sub_1001AF748();
            uint64_t v124 = v123;
            sub_100079B14(v0 + 504);
            sub_100079B14(v0 + 488);
            if (v124 >= 1)
            {
              swift_beginAccess();
              long long v125 = *v120;
              long long v126 = v120[1];
              *(_OWORD *)(v0 + 41) = *(long long *)((char *)v120 + 25);
              *(_OWORD *)(v0 + 16) = v125;
              *(_OWORD *)(v0 + 32) = v126;
              sub_1001AF748();
              if (!__OFSUB__(v127, 1))
              {
                sub_10016B870();
                swift_endAccess();
                goto LABEL_90;
              }
LABEL_118:
              __break(1u);
            }
          }
        }
LABEL_90:
        uint64_t v128 = *(void *)(v153 + 16);
        if (!v128)
        {
          v140 = *(void **)(v0 + 640);
          swift_bridgeObjectRelease();
          goto LABEL_102;
        }
        v129 = (void **)(swift_bridgeObjectRetain() + 72);
        while (1)
        {
          uint64_t v130 = (uint64_t)*(v129 - 3);
          unint64_t v131 = (unint64_t)*(v129 - 2);
          v132 = *v129;
          swift_bridgeObjectRetain();
          sub_10006D0EC(v130, v131);
          id v133 = v132;
          id v134 = [v133 viewName];
          uint64_t v135 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v137 = v136;

          if (v135 == 0x4354502D4553 && v137 == 0xE600000000000000) {
            break;
          }
          char v139 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10006D144(v130, v131);

          if (v139) {
            goto LABEL_101;
          }
          v129 += 6;
          if (!--v128)
          {
            v140 = *(void **)(v0 + 640);
            swift_bridgeObjectRelease_n();
            goto LABEL_102;
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v130, v131);

LABEL_101:
        swift_bridgeObjectRelease_n();
        uint64_t v141 = *(void *)(v0 + 600);
        uint64_t v142 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
        v140 = *(void **)(v0 + 640);
        if (*(unsigned char *)(v141 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced))
        {
LABEL_102:

          sub_100170490(*(void *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
        }
        else
        {
          uint64_t v143 = *(void *)(v0 + 608);
          notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

          sub_100170490(v143, type metadata accessor for SESPeerIdentityData);
          *(unsigned char *)(v141 + v142) = 1;
        }
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        v144 = *(uint64_t (**)(void))(v0 + 8);
        return v144();
      case 2uLL:
        uint64_t v92 = *(void *)(v84 + 16);
        uint64_t v91 = *(void *)(v84 + 24);
        BOOL v93 = __OFSUB__(v91, v92);
        uint64_t v90 = v91 - v92;
        if (!v93) {
          goto LABEL_54;
        }
        goto LABEL_113;
      case 3uLL:
        if (v87) {
          goto LABEL_38;
        }
        goto LABEL_76;
      default:
        uint64_t v90 = BYTE6(v86);
        goto LABEL_54;
    }
  }
}

uint64_t sub_10014ED34(uint64_t a1, uint64_t a2)
{
  char v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 1016) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[75];
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_100151524;
    uint64_t v9 = v7;
  }
  else
  {
    uint64_t v9 = v6[75];
    v6[128] = a2;
    v6[129] = a1;
    uint64_t v8 = sub_10014EEC0;
  }
  return _swift_task_switch(v8, v9, 0);
}

uint64_t sub_10014EEC0()
{
  uint64_t v135 = v0;
  uint64_t v1 = *(void *)(v0 + 1032);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 552) = v1;
  uint64_t v2 = *(void *)(v0 + 1016);
  *(void *)(v0 + 1040) = *(void *)(v0 + 1024);
  *(void *)(swift_task_alloc() + 16) = v0 + 552;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10016DAC8(v3, (void (*)(void *__return_ptr, void *, id))sub_10016FE9C);
  *(void *)(v0 + 1048) = v4;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    *(void *)(v0 + 560) = v4[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sync progress - handling %ld present views", v7, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v8 = v4[2];
  *(void *)(v0 + 1056) = v8;
  if (v8)
  {
    *(void *)(v0 + 1064) = 0;
    uint64_t v9 = *(void *)(v0 + 1048);
    uint64_t v10 = *(void *)(v9 + 32);
    *(void *)(v0 + 1072) = v10;
    unint64_t v11 = *(void *)(v9 + 40);
    *(void *)(v0 + 1080) = v11;
    uint64_t v12 = *(void *)(v9 + 48);
    *(void *)(v0 + 1088) = v12;
    uint64_t v13 = *(void *)(v9 + 56);
    *(void *)(v0 + 1096) = v13;
    uint64_t v14 = *(void *)(v9 + 64);
    *(void *)(v0 + 1104) = v14;
    unint64_t v15 = *(void *)(v9 + 72);
    *(void *)(v0 + 1112) = v15;
    char v16 = *(unsigned char *)(v9 + 80);
    v17 = *(void **)(v9 + 88);
    *(void *)(v0 + 1120) = v17;
    *(void *)(v0 + 184) = v12;
    *(void *)(v0 + 192) = v13;
    *(void *)(v0 + 200) = v14;
    *(void *)(v0 + 208) = v15;
    *(unsigned char *)(v0 + 216) = v16;
    sub_10006D0EC(v10, v11);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v14, v15);
    id v18 = v17;
    id v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 1128) = v19;
    *id v19 = v0;
    v19[1] = sub_10014FDA8;
    uint64_t v20 = *(void *)(v0 + 712);
    uint64_t v21 = *(void *)(v0 + 608);
    uint64_t v22 = *(void *)(v0 + 592);
    uint64_t v23 = *(void *)(v0 + 584);
    return sub_10015B594(v23, v22, v10, v11, v0 + 184, (uint64_t)v18, v21, v20);
  }
  uint64_t v25 = *(void *)(v0 + 1040);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v122 = v25;
  uint64_t v26 = *(void *)(v25 + 16);
  uint64_t v125 = v0;
  if (!v26)
  {
LABEL_55:
    LODWORD(v70) = 0;
    goto LABEL_57;
  }
  __s1 = (void *)(v0 + 71);
  uint64_t v116 = v0 + 57;
  uint64_t v27 = *(void *)(v0 + 1040) + 32;
  uint64_t v28 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain();
  uint64_t v29 = 0;
  os_log_type_t v30 = (uint64_t *)(v28 + 48);
  uint64_t v31 = v2;
  uint64_t v114 = v28;
  uint64_t v111 = v27;
  uint64_t v112 = v26;
  v110 = (uint64_t *)(v28 + 48);
LABEL_10:
  uint64_t v32 = *(void *)(v28 + 16);
  if (v32)
  {
    uint64_t v126 = v31;
    uint64_t v123 = v2;
    unint64_t v33 = (void *)(v27 + 48 * v29);
    uint64_t v34 = v33[2];
    unint64_t v35 = v33[3];
    uint64_t v36 = (void *)v33[5];
    uint64_t v113 = v29 + 1;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    unint64_t v117 = v35;
    uint64_t v118 = v34;
    sub_10006D0EC(v34, v35);
    id v127 = v36;
    uint64_t v37 = v30;
    while (1)
    {
      uint64_t v41 = *(v37 - 2);
      unint64_t v40 = *(v37 - 1);
      uint64_t v43 = *v37;
      unint64_t v42 = v37[1];
      uint64_t v44 = v37[2];
      unint64_t v39 = v37[3];
      uint64_t v38 = v37[4];
      unint64_t v45 = v37[5];
      sub_10006D0EC(v41, v40);
      sub_10006D0EC(v43, v42);
      uint64_t v133 = v44;
      sub_10006D0EC(v44, v39);
      sub_10006D0EC(v38, v45);
      sub_10006D0EC(v41, v40);
      id v46 = [v127 currentTLK];
      if (v46)
      {
        unint64_t v47 = v46;
        unint64_t v128 = v39;
        uint64_t v130 = v38;
        id v48 = [v46 tlkUUID];

        uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v51 = v50;

        uint64_t v52 = 0;
        switch(v40 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v41), v41))
            {
              __break(1u);
LABEL_86:
              __break(1u);
LABEL_87:
              __break(1u);
LABEL_88:
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
            }
            uint64_t v52 = HIDWORD(v41) - (int)v41;
LABEL_23:
            sub_10006D0EC(v41, v40);
LABEL_24:
            switch(v51 >> 62)
            {
              case 1uLL:
                LODWORD(v55) = HIDWORD(v49) - v49;
                if (__OFSUB__(HIDWORD(v49), v49)) {
                  goto LABEL_87;
                }
                uint64_t v55 = (int)v55;
LABEL_29:
                if (v52 == v55)
                {
                  if (v52 >= 1)
                  {
                    switch(v40 >> 62)
                    {
                      case 1uLL:
                        if (v41 >> 32 < (int)v41) {
                          goto LABEL_89;
                        }
                        sub_10006D0EC(v41, v40);
                        uint64_t v60 = __DataStorage._bytes.getter();
                        if (v60)
                        {
                          uint64_t v120 = v60;
                          uint64_t v61 = __DataStorage._offset.getter();
                          if (__OFSUB__((int)v41, v61)) {
                            goto LABEL_91;
                          }
                          uint64_t v62 = v120 + (int)v41 - v61;
                        }
                        else
                        {
                          uint64_t v62 = 0;
                        }
                        __DataStorage._length.getter();
                        sub_1001E5240(v62, v49, v51, v134);
                        uint64_t result = sub_10006D144(v41, v40);
                        uint64_t v123 = v126;
                        if (v126) {
                          return result;
                        }
LABEL_50:
                        sub_10006D144(v49, v51);
                        sub_10006D144(v41, v40);
                        sub_10006D144(v41, v40);
                        sub_10006D144(v41, v40);
                        sub_10006D144(v43, v42);
                        sub_10006D144(v133, v128);
                        sub_10006D144(v130, v45);
                        uint64_t v69 = 0;
                        uint64_t v126 = 0;
                        if (v134[0]) {
                          goto LABEL_53;
                        }
                        goto LABEL_15;
                      case 2uLL:
                        uint64_t v124 = *(void *)(v41 + 16);
                        uint64_t v121 = *(void *)(v41 + 24);
                        swift_retain();
                        swift_retain();
                        uint64_t v63 = __DataStorage._bytes.getter();
                        unint64_t v119 = v42;
                        if (v63)
                        {
                          uint64_t v64 = v63;
                          uint64_t v65 = __DataStorage._offset.getter();
                          uint64_t v66 = v124;
                          if (__OFSUB__(v124, v65)) {
                            goto LABEL_92;
                          }
                          uint64_t v67 = v64 + v124 - v65;
                        }
                        else
                        {
                          uint64_t v67 = 0;
                          uint64_t v66 = v124;
                        }
                        if (__OFSUB__(v121, v66)) {
                          goto LABEL_90;
                        }
                        __DataStorage._length.getter();
                        sub_1001E5240(v67, v49, v51, v134);
                        swift_release();
                        uint64_t result = swift_release();
                        uint64_t v123 = v126;
                        if (v126) {
                          return result;
                        }
                        sub_10006D144(v49, v51);
                        sub_10006D144(v41, v40);
                        sub_10006D144(v41, v40);
                        char v68 = v134[0];
                        sub_10006D144(v41, v40);
                        sub_10006D144(v43, v119);
                        sub_10006D144(v133, v128);
                        sub_10006D144(v130, v45);
                        uint64_t v69 = 0;
                        uint64_t v126 = 0;
                        if (v68) {
                          goto LABEL_53;
                        }
                        goto LABEL_15;
                      case 3uLL:
                        uint64_t v59 = (uint64_t)__s1;
                        *(void *)((char *)__s1 + 6) = 0;
                        void *__s1 = 0;
                        goto LABEL_41;
                      default:
                        *(void *)(v125 + 57) = v41;
                        *(_WORD *)(v125 + 65) = v40;
                        *(unsigned char *)(v125 + 67) = BYTE2(v40);
                        *(unsigned char *)(v125 + 68) = BYTE3(v40);
                        *(unsigned char *)(v125 + 69) = BYTE4(v40);
                        *(unsigned char *)(v125 + 70) = BYTE5(v40);
                        uint64_t v59 = v116;
LABEL_41:
                        uint64_t result = sub_1001E5240(v59, v49, v51, v134);
                        uint64_t v123 = v126;
                        if (v126) {
                          return result;
                        }
                        goto LABEL_50;
                    }
                  }
LABEL_52:
                  sub_10006D144(v49, v51);
                  sub_10006D144(v41, v40);
                  sub_10006D144(v41, v40);
                  sub_10006D144(v41, v40);
                  sub_10006D144(v43, v42);
                  sub_10006D144(v133, v128);
                  sub_10006D144(v130, v45);
                  uint64_t v69 = v126;
LABEL_53:
                  uint64_t v28 = v114;
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                  sub_10006D144(v118, v117);

                  uint64_t v31 = v69;
                  uint64_t v29 = v113;
                  uint64_t v2 = v123;
                  uint64_t v0 = v125;
                  os_log_type_t v30 = v110;
                  uint64_t v27 = v111;
                  if (v113 == v112)
                  {
                    swift_bridgeObjectRelease();
                    goto LABEL_55;
                  }
                  goto LABEL_10;
                }
LABEL_13:
                sub_10006D144(v49, v51);
                sub_10006D144(v41, v40);
                sub_10006D144(v41, v40);
                uint64_t v38 = v130;
                unint64_t v39 = v128;
                break;
              case 2uLL:
                uint64_t v57 = *(void *)(v49 + 16);
                uint64_t v56 = *(void *)(v49 + 24);
                BOOL v58 = __OFSUB__(v56, v57);
                uint64_t v55 = v56 - v57;
                if (!v58) {
                  goto LABEL_29;
                }
                goto LABEL_88;
              case 3uLL:
                if (v52) {
                  goto LABEL_13;
                }
                goto LABEL_52;
              default:
                uint64_t v55 = BYTE6(v51);
                goto LABEL_29;
            }
            break;
          case 2uLL:
            uint64_t v54 = *(void *)(v41 + 16);
            uint64_t v53 = *(void *)(v41 + 24);
            uint64_t v52 = v53 - v54;
            if (!__OFSUB__(v53, v54)) {
              goto LABEL_23;
            }
            goto LABEL_86;
          case 3uLL:
            goto LABEL_24;
          default:
            uint64_t v52 = BYTE6(v40);
            goto LABEL_24;
        }
      }
      else
      {
        sub_100075868(v41, v40);
        sub_100075868(0, 0xF000000000000000);
      }
      sub_10006D144(v41, v40);
      sub_10006D144(v43, v42);
      sub_10006D144(v133, v39);
      sub_10006D144(v38, v45);
LABEL_15:
      v37 += 9;
      if (!--v32)
      {
        uint64_t v0 = v125;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        sub_10006D144(v118, v117);
        swift_bridgeObjectRelease();

        LODWORD(v70) = 1;
        goto LABEL_57;
      }
    }
  }
  swift_bridgeObjectRelease();
  LODWORD(v70) = 1;
LABEL_57:
  LODWORD(v71) = v70 ^ 1;
  v72 = self;
  NSString v73 = String._bridgeToObjectiveC()();
  unsigned int v74 = [v72 isAlarmSet:v73];

  swift_retain();
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.info.getter();
  BOOL v77 = os_log_type_enabled(v75, v76);
  uint64_t v78 = *(void *)(v0 + 600);
  if (v77)
  {
    char v132 = v70 ^ 1;
    os_log_type_t v129 = v76;
    char v131 = v70;
    uint64_t v70 = swift_slowAlloc();
    *(_DWORD *)uint64_t v70 = 67109632;
    *(_DWORD *)(v125 + 220) = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 8) = 1024;
    *(_DWORD *)(v125 + 180) = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v70 + 14) = 2048;
    unint64_t v71 = (long long *)(v78 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
    swift_beginAccess();
    long long v79 = *v71;
    long long v80 = v71[1];
    *(_OWORD *)(v0 + 161) = *(long long *)((char *)v71 + 25);
    *(_OWORD *)(v0 + 136) = v79;
    *(_OWORD *)(v0 + 152) = v80;
    long long v81 = *v71;
    LOBYTE(v71) = v132;
    *(_OWORD *)(v125 + 536) = v81;
    *(_OWORD *)(v125 + 520) = *(_OWORD *)(v125 + 152);
    sub_100079AE8(v125 + 536);
    sub_100079AE8(v125 + 520);
    sub_1001AF748();
    uint64_t v83 = v82;
    sub_100079B14(v125 + 536);
    uint64_t v0 = v125;
    sub_100079B14(v125 + 520);
    *(void *)(v125 + 576) = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v75, v129, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v70, 0x18u);
    LOBYTE(v70) = v131;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }
  uint64_t v84 = *(void *)(v0 + 600);

  *(unsigned char *)(v84 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = (_BYTE)v71;
  if ((v70 & 1) == 0)
  {
    sub_1001413C0(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
    if ((v74 & 1) == 0)
    {
      unint64_t v85 = (long long *)(*(void *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess();
      long long v86 = *v85;
      long long v87 = v85[1];
      *(_OWORD *)(v0 + 113) = *(long long *)((char *)v85 + 25);
      *(_OWORD *)(v0 + 88) = v86;
      *(_OWORD *)(v0 + 104) = v87;
      *(_OWORD *)(v0 + 504) = *v85;
      *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
      sub_100079AE8(v0 + 504);
      sub_100079AE8(v0 + 488);
      sub_1001AF748();
      uint64_t v89 = v88;
      sub_100079B14(v0 + 504);
      sub_100079B14(v0 + 488);
      if (v89 >= 1)
      {
        swift_beginAccess();
        long long v90 = *v85;
        long long v91 = v85[1];
        *(_OWORD *)(v0 + 41) = *(long long *)((char *)v85 + 25);
        *(_OWORD *)(v0 + 16) = v90;
        *(_OWORD *)(v0 + 32) = v91;
        sub_1001AF748();
        if (__OFSUB__(v92, 1)) {
          goto LABEL_93;
        }
        sub_10016B870();
        swift_endAccess();
      }
    }
  }
  uint64_t v93 = *(void *)(v122 + 16);
  if (v93)
  {
    uint64_t v94 = (void **)(swift_bridgeObjectRetain() + 72);
    while (1)
    {
      uint64_t v95 = (uint64_t)*(v94 - 3);
      unint64_t v96 = (unint64_t)*(v94 - 2);
      uint64_t v97 = *v94;
      swift_bridgeObjectRetain();
      sub_10006D0EC(v95, v96);
      id v98 = v97;
      id v99 = [v98 viewName];
      uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v102 = v101;

      if (v100 == 0x4354502D4553 && v102 == 0xE600000000000000)
      {
        uint64_t v0 = v125;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v95, v96);

        goto LABEL_77;
      }
      char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10006D144(v95, v96);

      if (v104) {
        break;
      }
      v94 += 6;
      if (!--v93)
      {
        uint64_t v0 = v125;
        uint64_t v105 = *(void **)(v125 + 640);
        swift_bridgeObjectRelease_n();
        goto LABEL_78;
      }
    }
    uint64_t v0 = v125;
LABEL_77:
    swift_bridgeObjectRelease_n();
    uint64_t v106 = *(void *)(v0 + 600);
    uint64_t v107 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
    uint64_t v105 = *(void **)(v0 + 640);
    if ((*(unsigned char *)(v106 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
    {
      uint64_t v108 = *(void *)(v0 + 608);
      notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

      sub_100170490(v108, type metadata accessor for SESPeerIdentityData);
      *(unsigned char *)(v106 + v107) = 1;
      goto LABEL_80;
    }
  }
  else
  {
    uint64_t v105 = *(void **)(v0 + 640);
    swift_bridgeObjectRelease();
  }
LABEL_78:

  sub_100170490(*(void *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
LABEL_80:
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unsigned int v109 = *(uint64_t (**)(void))(v0 + 8);
  return v109();
}

uint64_t sub_10014FDA8()
{
  uint64_t v2 = (void *)*v1;
  v2[142] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[75];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1001515E4, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[143] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_10014FFB4;
    uint64_t v5 = v2[137];
    uint64_t v6 = v2[135];
    uint64_t v7 = v2[134];
    uint64_t v8 = v2[76];
    uint64_t v9 = v2[74];
    uint64_t v10 = v2[73];
    uint64_t v11 = v2[136];
    return sub_100162848(v11, v5, v7, v6, v10, v9, v8);
  }
}

uint64_t sub_10014FFB4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 600);
  swift_task_dealloc();
  return _swift_task_switch(sub_1001500F0, v1, 0);
}

uint64_t sub_1001500F0()
{
  uint64_t v134 = v0;
  unint64_t v1 = *(void *)(v0 + 1112);
  uint64_t v2 = *(void *)(v0 + 1104);
  unint64_t v3 = *(void *)(v0 + 1080);
  uint64_t v4 = *(void *)(v0 + 1072);
  uint64_t v5 = *(void *)(v0 + 1064);
  uint64_t v6 = *(void *)(v0 + 1056);

  swift_bridgeObjectRelease();
  sub_10006D144(v2, v1);
  sub_10006D144(v4, v3);
  if (v5 + 1 == v6)
  {
    uint64_t v7 = *(void *)(v0 + 1136);
    uint64_t v8 = *(void *)(v0 + 1040);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v122 = v8;
    uint64_t v9 = *(void *)(v8 + 16);
    uint64_t v124 = v0;
    if (!v9)
    {
LABEL_49:
      LODWORD(v53) = 0;
      goto LABEL_54;
    }
    __s1 = (void *)(v0 + 71);
    uint64_t v116 = v0 + 57;
    uint64_t v10 = *(void *)(v0 + 1040) + 32;
    uint64_t v11 = *(void *)(v0 + 552);
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v13 = (uint64_t *)(v11 + 48);
    uint64_t v114 = v11;
    uint64_t v111 = v10;
    uint64_t v112 = v9;
    v110 = (uint64_t *)(v11 + 48);
LABEL_4:
    uint64_t v14 = *(void *)(v11 + 16);
    if (v14)
    {
      uint64_t v125 = v7;
      unint64_t v15 = (void *)(v10 + 48 * v12);
      uint64_t v16 = v15[2];
      unint64_t v17 = v15[3];
      id v18 = (void *)v15[5];
      uint64_t v113 = v12 + 1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v117 = v17;
      uint64_t v118 = v16;
      sub_10006D0EC(v16, v17);
      id v126 = v18;
      id v19 = v13;
      while (1)
      {
        uint64_t v22 = *(v19 - 2);
        unint64_t v23 = *(v19 - 1);
        uint64_t v25 = *v19;
        unint64_t v24 = v19[1];
        uint64_t v26 = v19[2];
        unint64_t v21 = v19[3];
        uint64_t v20 = v19[4];
        unint64_t v27 = v19[5];
        sub_10006D0EC(v22, v23);
        sub_10006D0EC(v25, v24);
        uint64_t v132 = v26;
        sub_10006D0EC(v26, v21);
        sub_10006D0EC(v20, v27);
        sub_10006D0EC(v22, v23);
        id v28 = [v126 currentTLK];
        if (v28)
        {
          uint64_t v29 = v28;
          unint64_t v127 = v21;
          uint64_t v129 = v20;
          id v30 = [v28 tlkUUID];

          uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v33 = v32;

          uint64_t v34 = 0;
          switch(v23 >> 62)
          {
            case 1uLL:
              if (__OFSUB__(HIDWORD(v22), v22))
              {
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
LABEL_86:
                __break(1u);
LABEL_87:
                __break(1u);
LABEL_88:
                __break(1u);
LABEL_89:
                __break(1u);
LABEL_90:
                __break(1u);
              }
              uint64_t v34 = HIDWORD(v22) - (int)v22;
LABEL_17:
              sub_10006D0EC(v22, v23);
LABEL_18:
              switch(v33 >> 62)
              {
                case 1uLL:
                  LODWORD(v37) = HIDWORD(v31) - v31;
                  if (__OFSUB__(HIDWORD(v31), v31)) {
                    goto LABEL_84;
                  }
                  uint64_t v37 = (int)v37;
LABEL_23:
                  if (v34 == v37)
                  {
                    if (v34 >= 1)
                    {
                      switch(v23 >> 62)
                      {
                        case 1uLL:
                          if (v22 >> 32 < (int)v22) {
                            goto LABEL_86;
                          }
                          sub_10006D0EC(v22, v23);
                          uint64_t v42 = __DataStorage._bytes.getter();
                          if (v42)
                          {
                            uint64_t v120 = v42;
                            uint64_t v43 = __DataStorage._offset.getter();
                            if (__OFSUB__((int)v22, v43)) {
                              goto LABEL_89;
                            }
                            uint64_t v44 = v120 + (int)v22 - v43;
                          }
                          else
                          {
                            uint64_t v44 = 0;
                          }
                          __DataStorage._length.getter();
                          sub_1001E5240(v44, v31, v33, v133);
                          uint64_t result = sub_10006D144(v22, v23);
                          if (v125) {
                            return result;
                          }
LABEL_44:
                          sub_10006D144(v31, v33);
                          sub_10006D144(v22, v23);
                          sub_10006D144(v22, v23);
                          sub_10006D144(v22, v23);
                          sub_10006D144(v25, v24);
                          sub_10006D144(v132, v127);
                          sub_10006D144(v129, v27);
                          uint64_t v52 = 0;
                          uint64_t v125 = 0;
                          if (v133[0]) {
                            goto LABEL_47;
                          }
                          goto LABEL_9;
                        case 2uLL:
                          uint64_t v123 = *(void *)(v22 + 16);
                          uint64_t v121 = *(void *)(v22 + 24);
                          swift_retain();
                          swift_retain();
                          uint64_t v45 = __DataStorage._bytes.getter();
                          unint64_t v119 = v24;
                          if (v45)
                          {
                            uint64_t v46 = v45;
                            uint64_t v47 = __DataStorage._offset.getter();
                            uint64_t v48 = v123;
                            if (__OFSUB__(v123, v47)) {
                              goto LABEL_88;
                            }
                            uint64_t v49 = v46 + v123 - v47;
                          }
                          else
                          {
                            uint64_t v49 = 0;
                            uint64_t v48 = v123;
                          }
                          if (__OFSUB__(v121, v48)) {
                            goto LABEL_87;
                          }
                          __DataStorage._length.getter();
                          sub_1001E5240(v49, v31, v33, v133);
                          swift_release();
                          uint64_t result = swift_release();
                          if (v125) {
                            return result;
                          }
                          sub_10006D144(v31, v33);
                          sub_10006D144(v22, v23);
                          sub_10006D144(v22, v23);
                          char v51 = v133[0];
                          sub_10006D144(v22, v23);
                          sub_10006D144(v25, v119);
                          sub_10006D144(v132, v127);
                          sub_10006D144(v129, v27);
                          uint64_t v52 = 0;
                          uint64_t v125 = 0;
                          if (v51) {
                            goto LABEL_47;
                          }
                          goto LABEL_9;
                        case 3uLL:
                          uint64_t v41 = (uint64_t)__s1;
                          *(void *)((char *)__s1 + 6) = 0;
                          void *__s1 = 0;
                          goto LABEL_35;
                        default:
                          *(void *)(v124 + 57) = v22;
                          *(_WORD *)(v124 + 65) = v23;
                          *(unsigned char *)(v124 + 67) = BYTE2(v23);
                          *(unsigned char *)(v124 + 68) = BYTE3(v23);
                          *(unsigned char *)(v124 + 69) = BYTE4(v23);
                          *(unsigned char *)(v124 + 70) = BYTE5(v23);
                          uint64_t v41 = v116;
LABEL_35:
                          uint64_t result = sub_1001E5240(v41, v31, v33, v133);
                          if (v125) {
                            return result;
                          }
                          goto LABEL_44;
                      }
                    }
LABEL_46:
                    sub_10006D144(v31, v33);
                    sub_10006D144(v22, v23);
                    sub_10006D144(v22, v23);
                    sub_10006D144(v22, v23);
                    sub_10006D144(v25, v24);
                    sub_10006D144(v132, v127);
                    sub_10006D144(v129, v27);
                    uint64_t v52 = v125;
LABEL_47:
                    swift_bridgeObjectRelease();
                    uint64_t v11 = v114;
                    swift_bridgeObjectRelease_n();
                    sub_10006D144(v118, v117);

                    uint64_t v7 = v52;
                    uint64_t v12 = v113;
                    uint64_t v13 = v110;
                    uint64_t v10 = v111;
                    if (v113 == v112)
                    {
                      uint64_t v0 = v124;
                      swift_bridgeObjectRelease();
                      goto LABEL_49;
                    }
                    goto LABEL_4;
                  }
LABEL_7:
                  sub_10006D144(v31, v33);
                  sub_10006D144(v22, v23);
                  sub_10006D144(v22, v23);
                  uint64_t v20 = v129;
                  unint64_t v21 = v127;
                  break;
                case 2uLL:
                  uint64_t v39 = *(void *)(v31 + 16);
                  uint64_t v38 = *(void *)(v31 + 24);
                  BOOL v40 = __OFSUB__(v38, v39);
                  uint64_t v37 = v38 - v39;
                  if (!v40) {
                    goto LABEL_23;
                  }
                  goto LABEL_85;
                case 3uLL:
                  if (v34) {
                    goto LABEL_7;
                  }
                  goto LABEL_46;
                default:
                  uint64_t v37 = BYTE6(v33);
                  goto LABEL_23;
              }
              break;
            case 2uLL:
              uint64_t v36 = *(void *)(v22 + 16);
              uint64_t v35 = *(void *)(v22 + 24);
              uint64_t v34 = v35 - v36;
              if (!__OFSUB__(v35, v36)) {
                goto LABEL_17;
              }
              goto LABEL_83;
            case 3uLL:
              goto LABEL_18;
            default:
              uint64_t v34 = BYTE6(v23);
              goto LABEL_18;
          }
        }
        else
        {
          sub_100075868(v22, v23);
          sub_100075868(0, 0xF000000000000000);
        }
        sub_10006D144(v22, v23);
        sub_10006D144(v25, v24);
        sub_10006D144(v132, v21);
        sub_10006D144(v20, v27);
LABEL_9:
        v19 += 9;
        if (!--v14)
        {
          uint64_t v0 = v124;
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          sub_10006D144(v118, v117);

          swift_bridgeObjectRelease();
          LODWORD(v53) = 1;
          goto LABEL_54;
        }
      }
    }
    uint64_t v0 = v124;
    swift_bridgeObjectRelease();
    LODWORD(v53) = 1;
LABEL_54:
    LODWORD(v70) = v53 ^ 1;
    unint64_t v71 = self;
    NSString v72 = String._bridgeToObjectiveC()();
    unsigned int v73 = [v71 isAlarmSet:v72];

    swift_retain();
    unsigned int v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.info.getter();
    BOOL v76 = os_log_type_enabled(v74, v75);
    uint64_t v77 = *(void *)(v0 + 600);
    if (v76)
    {
      os_log_type_t v128 = v75;
      uint64_t v78 = v0 + 520;
      char v131 = v53 ^ 1;
      char v130 = v53;
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 67109632;
      *(_DWORD *)(v124 + 220) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v53 + 8) = 1024;
      *(_DWORD *)(v124 + 180) = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v53 + 14) = 2048;
      uint64_t v70 = (long long *)(v77 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess();
      long long v79 = *v70;
      long long v80 = v70[1];
      *(_OWORD *)(v0 + 161) = *(long long *)((char *)v70 + 25);
      *(_OWORD *)(v0 + 136) = v79;
      *(_OWORD *)(v0 + 152) = v80;
      long long v81 = *v70;
      LOBYTE(v70) = v131;
      *(_OWORD *)(v124 + 536) = v81;
      *(_OWORD *)(v0 + 520) = *(_OWORD *)(v124 + 152);
      sub_100079AE8(v124 + 536);
      sub_100079AE8(v0 + 520);
      sub_1001AF748();
      uint64_t v83 = v82;
      uint64_t v0 = v124;
      sub_100079B14(v124 + 536);
      sub_100079B14(v78);
      *(void *)(v124 + 576) = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v74, v128, "Sync progress -- completed w/ haveAllViewsOnSE %{BOOL}d retryInFlight %{BOOL}d errorCount %ld", (uint8_t *)v53, 0x18u);
      LOBYTE(v53) = v130;
      swift_slowDealloc();
    }
    else
    {
      swift_release();
    }
    uint64_t v84 = *(void *)(v0 + 600);

    *(unsigned char *)(v84 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_allViewsSynchronized) = (_BYTE)v70;
    if ((v53 & 1) == 0)
    {
      sub_1001413C0(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref);
      if ((v73 & 1) == 0)
      {
        unint64_t v85 = (long long *)(*(void *)(v0 + 600) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
        swift_beginAccess();
        long long v86 = *v85;
        long long v87 = v85[1];
        *(_OWORD *)(v0 + 113) = *(long long *)((char *)v85 + 25);
        *(_OWORD *)(v0 + 88) = v86;
        *(_OWORD *)(v0 + 104) = v87;
        *(_OWORD *)(v0 + 504) = *v85;
        *(_OWORD *)(v0 + 488) = *(_OWORD *)(v0 + 104);
        sub_100079AE8(v0 + 504);
        sub_100079AE8(v0 + 488);
        sub_1001AF748();
        uint64_t v89 = v88;
        sub_100079B14(v0 + 504);
        sub_100079B14(v0 + 488);
        if (v89 >= 1)
        {
          swift_beginAccess();
          long long v90 = *v85;
          long long v91 = v85[1];
          *(_OWORD *)(v0 + 41) = *(long long *)((char *)v85 + 25);
          *(_OWORD *)(v0 + 16) = v90;
          *(_OWORD *)(v0 + 32) = v91;
          sub_1001AF748();
          if (__OFSUB__(v92, 1)) {
            goto LABEL_90;
          }
          sub_10016B870();
          swift_endAccess();
        }
      }
    }
    uint64_t v93 = *(void *)(v122 + 16);
    if (v93)
    {
      uint64_t v94 = (void **)(swift_bridgeObjectRetain() + 72);
      while (1)
      {
        uint64_t v95 = (uint64_t)*(v94 - 3);
        unint64_t v96 = (unint64_t)*(v94 - 2);
        uint64_t v97 = *v94;
        swift_bridgeObjectRetain();
        sub_10006D0EC(v95, v96);
        id v98 = v97;
        id v99 = [v98 viewName];
        uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v102 = v101;

        if (v100 == 0x4354502D4553 && v102 == 0xE600000000000000)
        {
          uint64_t v0 = v124;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10006D144(v95, v96);

          goto LABEL_74;
        }
        char v104 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v95, v96);

        if (v104) {
          break;
        }
        v94 += 6;
        if (!--v93)
        {
          uint64_t v0 = v124;
          uint64_t v105 = *(void **)(v124 + 640);
          swift_bridgeObjectRelease_n();
          goto LABEL_75;
        }
      }
      uint64_t v0 = v124;
LABEL_74:
      swift_bridgeObjectRelease_n();
      uint64_t v106 = *(void *)(v0 + 600);
      uint64_t v107 = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced;
      uint64_t v105 = *(void **)(v0 + 640);
      if ((*(unsigned char *)(v106 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_notifiedPassdOfFidoViewSynced) & 1) == 0)
      {
        uint64_t v108 = *(void *)(v0 + 608);
        notify_post("com.apple.seserviced.keysync.fido.tlk.synced");

        sub_100170490(v108, type metadata accessor for SESPeerIdentityData);
        *(unsigned char *)(v106 + v107) = 1;
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v105 = *(void **)(v0 + 640);
      swift_bridgeObjectRelease();
    }
LABEL_75:

    sub_100170490(*(void *)(v0 + 608), type metadata accessor for SESPeerIdentityData);
LABEL_77:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    unsigned int v109 = *(uint64_t (**)(void))(v0 + 8);
    return v109();
  }
  uint64_t v54 = *(void *)(v0 + 1064) + 1;
  *(void *)(v0 + 1064) = v54;
  uint64_t v55 = *(void *)(v0 + 1048) + (v54 << 6);
  uint64_t v56 = *(void *)(v55 + 32);
  *(void *)(v0 + 1072) = v56;
  unint64_t v57 = *(void *)(v55 + 40);
  *(void *)(v0 + 1080) = v57;
  uint64_t v58 = *(void *)(v55 + 48);
  *(void *)(v0 + 1088) = v58;
  uint64_t v59 = *(void *)(v55 + 56);
  *(void *)(v0 + 1096) = v59;
  uint64_t v60 = *(void *)(v55 + 64);
  *(void *)(v0 + 1104) = v60;
  unint64_t v61 = *(void *)(v55 + 72);
  *(void *)(v0 + 1112) = v61;
  char v62 = *(unsigned char *)(v55 + 80);
  uint64_t v63 = *(void **)(v55 + 88);
  *(void *)(v0 + 1120) = v63;
  *(void *)(v0 + 184) = v58;
  *(void *)(v0 + 192) = v59;
  *(void *)(v0 + 200) = v60;
  *(void *)(v0 + 208) = v61;
  *(unsigned char *)(v0 + 216) = v62;
  sub_10006D0EC(v56, v57);
  swift_bridgeObjectRetain();
  sub_10006D0EC(v60, v61);
  id v64 = v63;
  uint64_t v65 = (void *)swift_task_alloc();
  *(void *)(v0 + 1128) = v65;
  *uint64_t v65 = v0;
  v65[1] = sub_10014FDA8;
  uint64_t v66 = *(void *)(v0 + 712);
  uint64_t v67 = *(void *)(v0 + 608);
  uint64_t v68 = *(void *)(v0 + 592);
  uint64_t v69 = *(void *)(v0 + 584);
  return sub_10015B594(v69, v68, v56, v57, v0 + 184, (uint64_t)v64, v67, v66);
}

uint64_t sub_100150EFC()
{
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100150F94()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100151034()
{
  uint64_t v1 = *(void *)(v0 + 608);

  sub_100170490(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001510F4()
{
  uint64_t v1 = *(void **)(v0 + 768);
  unint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 608);

  swift_bridgeObjectRelease();
  sub_10006D144(v3, v2);
  sub_100170490(v4, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001511EC()
{
  uint64_t v1 = *(void *)(v0 + 608);

  sub_100170490(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001512AC()
{
  uint64_t v1 = *(void *)(v0 + 608);

  sub_100170490(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10015136C()
{
  uint64_t v1 = *(void *)(v0 + 608);

  sub_100170490(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10015142C()
{
  uint64_t v1 = *(void **)(v0 + 960);
  unint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 944);
  uint64_t v4 = *(void *)(v0 + 608);

  swift_bridgeObjectRelease();
  sub_10006D144(v3, v2);

  sub_100170490(v4, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100151524()
{
  uint64_t v1 = *(void *)(v0 + 608);

  sub_100170490(v1, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  unint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001515E4()
{
  uint64_t v1 = *(void **)(v0 + 1120);
  unint64_t v2 = *(void *)(v0 + 1112);
  uint64_t v3 = *(void *)(v0 + 1104);
  unint64_t v4 = *(void *)(v0 + 1080);
  uint64_t v5 = *(void *)(v0 + 1072);
  uint64_t v6 = *(void *)(v0 + 608);

  sub_10006D144(v5, v4);
  swift_bridgeObjectRelease();
  sub_10006D144(v3, v2);
  sub_100170490(v6, type metadata accessor for SESPeerIdentityData);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001516F8()
{
  *(void *)(v1 + 160) = v0;
  return _swift_task_switch(sub_100151718, v0, 0);
}

uint64_t sub_100151718()
{
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[21] = v2;
  v0[2] = v0;
  v0[7] = v0 + 18;
  v0[3] = sub_10015184C;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10016999C;
  v0[13] = &unk_100413288;
  v0[14] = v3;
  sub_100058540(v1, v2, v0 + 10);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10015184C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 176) = v2;
  uint64_t v3 = *(void *)(v1 + 160);
  if (v2) {
    unint64_t v4 = sub_1001519D8;
  }
  else {
    unint64_t v4 = sub_10015196C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10015196C()
{
  uint64_t v1 = *(void *)(v0 + 144);

  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1001519D8()
{
  uint64_t v11 = v0;
  uint64_t v1 = (void *)v0[21];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[10] = sub_100290514(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get SE : %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10016FF34();
  swift_allocError();
  *uint64_t v7 = 4;
  swift_willThrow();
  swift_errorRelease();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100151C00(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v6 = swift_allocError();
    *uint64_t v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a3)
    {
      id v10 = a3;
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v13 = 0xF000000000000000;
    }
    uint64_t v14 = *(void *)(*(void *)(v4 + 64) + 40);
    *(unsigned char *)uint64_t v14 = a2;
    *(void *)(v14 + 8) = v11;
    *(void *)(v14 + 16) = v13;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100151CF8(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return _swift_task_switch(sub_100151D1C, v2, 0);
}

uint64_t sub_100151D1C()
{
  *(void *)(v0 + 40) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing SE contents", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100151E34;
  return sub_100168C94();
}

uint64_t sub_100151E34(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = a1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(void *)(v3 + 32);
    return _swift_task_switch(sub_100151F7C, v7, 0);
  }
}

uint64_t sub_100151F7C()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Refreshing CK contents", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_1001520A8;
  uint64_t v5 = *(void *)(v0 + 32);
  long long v6 = *(_OWORD *)(v0 + 16);
  *(void *)(v4 + 264) = v5;
  *(_OWORD *)(v4 + 248) = v6;
  return _swift_task_switch(sub_100169128, v5, 0);
}

uint64_t sub_1001520A8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 72) = a1;
  *(void *)(v4 + 80) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 32);
  if (v1) {
    long long v6 = sub_1001522BC;
  }
  else {
    long long v6 = sub_1001521DC;
  }
  return _swift_task_switch(v6, v5, 0);
}

void sub_1001521DC()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = *(os_unfair_lock_s **)(v0[4] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_state);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v1;
  os_unfair_lock_lock(v4 + 12);
  sub_1001709F8((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 12);
  if (!v2)
  {
    swift_task_dealloc();
    long long v6 = (void (*)(uint64_t, uint64_t))v0[1];
    uint64_t v7 = v0[9];
    uint64_t v8 = v0[7];
    v6(v8, v7);
  }
}

uint64_t sub_1001522BC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100152320(NSObject *a1, void *a2)
{
  os_log_t v180 = a1;
  uint64_t v182 = type metadata accessor for SESTLKShareData(0);
  uint64_t v169 = *(void *)(v182 - 8);
  uint64_t v4 = __chkstk_darwin(v182, v3);
  uint64_t v150 = (uint64_t)&v144 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v161 = (char **)((char *)&v144 - v8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v176 = (uint64_t)&v144 - v11;
  __chkstk_darwin(v10, v12);
  uint64_t v168 = (uint64_t)&v144 - v13;
  uint64_t v14 = sub_10006C51C(&qword_100456540);
  uint64_t v16 = __chkstk_darwin(v14 - 8, v15);
  char v159 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  v181 = (char *)&v144 - v20;
  __chkstk_darwin(v19, v21);
  unint64_t v160 = (unint64_t)&v144 - v22;
  id v23 = [a2 casdCertificate];
  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  uint64_t v27 = sub_10006C51C(&qword_10045B6F0);
  uint64_t inited = swift_initStackObject();
  long long v158 = xmmword_100378480;
  *(_OWORD *)(inited + 16) = xmmword_100378480;
  strcpy((char *)(inited + 32), "serialNumber");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = 147;
  *(_WORD *)(inited + 56) = 0;
  *(_OWORD *)(inited + 64) = 0u;
  *(unsigned char *)(inited + 80) = -64;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 96), "caIdentifier");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 66;
  *(_WORD *)(inited + 120) = 0;
  *(_OWORD *)(inited + 128) = 0u;
  *(unsigned char *)(inited + 144) = -64;
  *(void *)(inited + 152) = _swiftEmptyArrayStorage;
  *(void *)(inited + 160) = 0xD000000000000011;
  unint64_t v29 = (unint64_t)"iced.keysync.fido.tlk.synced";
  *(void *)(inited + 168) = 0x80000001003B4C60;
  *(void *)(inited + 176) = 24352;
  *(_WORD *)(inited + 184) = 0;
  *(_OWORD *)(inited + 192) = 0u;
  *(unsigned char *)(inited + 208) = -64;
  *(void *)(inited + 216) = _swiftEmptyArrayStorage;
  *(void *)(inited + 224) = 0x656761735579656BLL;
  *(void *)(inited + 232) = 0xE800000000000000;
  *(void *)(inited + 240) = 149;
  *(_WORD *)(inited + 248) = 0;
  *(_OWORD *)(inited + 256) = 0u;
  *(unsigned char *)(inited + 272) = -64;
  *(void *)(inited + 280) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 288), "effectiveDate");
  *(_WORD *)(inited + 302) = -4864;
  *(void *)(inited + 304) = 37;
  *(_WORD *)(inited + 312) = 256;
  *(_OWORD *)(inited + 320) = 0u;
  *(unsigned char *)(inited + 336) = -64;
  *(void *)(inited + 344) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 352), "expirationDate");
  *(unsigned char *)(inited + 367) = -18;
  *(void *)(inited + 368) = 24356;
  *(_WORD *)(inited + 376) = 256;
  *(_OWORD *)(inited + 384) = 0u;
  *(unsigned char *)(inited + 400) = -64;
  *(void *)(inited + 408) = _swiftEmptyArrayStorage;
  *(void *)(inited + 416) = 0x4E4944536163;
  *(void *)(inited + 424) = 0xE600000000000000;
  *(void *)(inited + 432) = 69;
  *(_WORD *)(inited + 440) = 0;
  *(_OWORD *)(inited + 448) = 0u;
  *(unsigned char *)(inited + 464) = -64;
  *(void *)(inited + 472) = _swiftEmptyArrayStorage;
  *(void *)(inited + 480) = 0xD000000000000011;
  *(void *)(inited + 488) = 0x80000001003B4C80;
  *(void *)(inited + 496) = 83;
  *(_WORD *)(inited + 504) = 0;
  *(_OWORD *)(inited + 512) = 0u;
  *(unsigned char *)(inited + 528) = -64;
  *(void *)(inited + 536) = _swiftEmptyArrayStorage;
  *(void *)(inited + 544) = 0x654B63696C627570;
  *(void *)(inited + 552) = 0xE900000000000079;
  *(void *)(inited + 560) = 32585;
  *(_WORD *)(inited + 568) = 0;
  *(_OWORD *)(inited + 576) = 0u;
  *(unsigned char *)(inited + 592) = -64;
  *(void *)(inited + 600) = _swiftEmptyArrayStorage;
  v198.n128_u64[0] = 32545;
  v198.n128_u16[4] = 0;
  uint64_t v199 = inited;
  uint64_t v200 = 0;
  char v201 = 64;
  v202 = _swiftEmptyArrayStorage;
  *(void *)&v186[0] = v24;
  *((void *)&v186[0] + 1) = v26;
  sub_10006D0EC(v24, v26);
  id v30 = (const char *)v183;
  unint64_t v31 = sub_100188FB0((uint64_t)v186, &v198);
  unint64_t v32 = (unint64_t)v30;
  sub_10006D144(*(uint64_t *)&v186[0], *((unint64_t *)&v186[0] + 1));
  if (v30)
  {
    sub_10006D144(v24, v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v183 = (uint64_t)"subjectIdentifier";
    uint64_t v175 = v27;
    swift_bridgeObjectRelease();
    sub_100253000(v31, v187);
    sub_10006D144(v24, v26);
    unint64_t v34 = v189;
    uint64_t v145 = v188;
    sub_10006D0EC(v188, v189);
    sub_1001706B4(v187, (void (*)(uint64_t, uint64_t))sub_10006D144);
    unint64_t v35 = (unint64_t)sub_100140D34((uint64_t)v180);
    unint64_t v152 = v35;
    if (v35 >> 62) {
      goto LABEL_134;
    }
    uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v36)
    {
      unint64_t v37 = 0;
      unint64_t v154 = v152 & 0xC000000000000001;
      unint64_t v155 = v34;
      unint64_t v146 = v152 + 32;
      uint64_t v147 = v152 & 0xFFFFFFFFFFFFFF8;
      v179 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
      os_log_t v180 = (os_log_t)(v169 + 56);
      unint64_t v148 = v183 | 0x8000000000000000;
      unint64_t v149 = v29 | 0x8000000000000000;
      uint64_t v153 = v36;
      while (1)
      {
        if (v154)
        {
          id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (v37 >= *(void *)(v147 + 16)) {
            goto LABEL_131;
          }
          id v41 = *(id *)(v146 + 8 * v37);
        }
        uint64_t v42 = v41;
        BOOL v43 = __OFADD__(v37, 1);
        unint64_t v44 = v37 + 1;
        if (v43) {
          break;
        }
        unint64_t v162 = v44;
        id v45 = [v41 currentTLK];
        if (v45)
        {
          uint64_t v46 = v45;
          id v47 = [v45 tlkUUID];

          uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v34 = v49;
        }
        else
        {
          uint64_t v48 = 0;
          unint64_t v34 = 0xF000000000000000;
        }
        id v50 = [v42 tlkShares];
        sub_10007582C(0, &qword_100456488);
        unint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v52 = (const char *)v32;
        unint64_t v29 = (unint64_t)sub_10016C9FC(v51);
        uint64_t v53 = v32;
        swift_bridgeObjectRelease();
        v185 = _swiftEmptyArrayStorage;
        uint64_t v177 = v29;
        if (v29 >> 62)
        {
          sub_1000758F4(v48, v34);
          unint64_t v29 = v177;
          unint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          unint64_t v32 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
          sub_1000758F4(v48, v34);
        }
        unint64_t v178 = v34 >> 60;
        unint64_t v170 = v34;
        uint64_t v171 = v48;
        id v163 = v42;
        if (v32)
        {
          uint64_t v183 = (uint64_t)v52;
          unint64_t v54 = 0;
          uint64_t v173 = v29 & 0xFFFFFFFFFFFFFF8;
          unint64_t v174 = v29 & 0xC000000000000001;
          BOOL v55 = __OFSUB__(HIDWORD(v48), v48);
          BOOL v165 = v55;
          uint64_t v164 = HIDWORD(v48) - (int)v48;
          uint64_t v166 = BYTE6(v34);
          unint64_t v167 = v34 >> 62;
          uint64_t v56 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
          unint64_t v172 = v32;
          while (1)
          {
            if (v174)
            {
              id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else
            {
              if (v54 >= *(void *)(v173 + 16)) {
                goto LABEL_113;
              }
              id v57 = *(id *)(v29 + 8 * v54 + 32);
            }
            unint64_t v34 = (unint64_t)v57;
            uint64_t v53 = v54 + 1;
            if (__OFADD__(v54, 1)) {
              break;
            }
            id v58 = [v57 v56[218]];
            uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v32 = v59;

            if (v178 > 0xE)
            {
              sub_100075868(v48, v32);
              sub_100075868(v171, v170);
            }
            else
            {
              unint64_t v29 = v32 >> 62;
              uint64_t v60 = 0;
              switch(v32 >> 62)
              {
                case 1uLL:
                  if (__OFSUB__(HIDWORD(v48), v48)) {
                    goto LABEL_118;
                  }
                  uint64_t v60 = HIDWORD(v48) - (int)v48;
LABEL_38:
                  sub_10006D0EC(v48, v32);
                  break;
                case 2uLL:
                  uint64_t v62 = *(void *)(v48 + 16);
                  uint64_t v61 = *(void *)(v48 + 24);
                  uint64_t v60 = v61 - v62;
                  if (!__OFSUB__(v61, v62)) {
                    goto LABEL_38;
                  }
                  __break(1u);
LABEL_118:
                  __break(1u);
LABEL_119:
                  __break(1u);
LABEL_120:
                  __break(1u);
                  goto LABEL_121;
                case 3uLL:
                  break;
                default:
                  uint64_t v60 = BYTE6(v32);
                  break;
              }
              uint64_t v63 = v166;
              switch((int)v167)
              {
                case 1:
                  uint64_t v63 = v164;
                  if (v165) {
                    goto LABEL_119;
                  }
                  goto LABEL_43;
                case 2:
                  uint64_t v65 = *(void *)(v171 + 16);
                  uint64_t v64 = *(void *)(v171 + 24);
                  BOOL v43 = __OFSUB__(v64, v65);
                  uint64_t v63 = v64 - v65;
                  if (!v43) {
                    goto LABEL_43;
                  }
                  goto LABEL_120;
                case 3:
                  if (v60) {
                    goto LABEL_49;
                  }
                  goto LABEL_51;
                default:
LABEL_43:
                  if (v60 == v63)
                  {
                    if (v60 >= 1)
                    {
                      switch((int)v29)
                      {
                        case 1:
                          if (v48 >> 32 < (int)v48) {
                            goto LABEL_129;
                          }
                          uint64_t v156 = (int)v48;
                          uint64_t v157 = (v48 >> 32) - (int)v48;
                          unint64_t v29 = v32 & 0x3FFFFFFFFFFFFFFFLL;
                          unint64_t v77 = v170;
                          uint64_t v78 = v171;
                          sub_1000758F4(v171, v170);
                          sub_1000758F4(v78, v77);
                          sub_10006D0EC(v48, v32);
                          uint64_t v79 = __DataStorage._bytes.getter();
                          if (v79)
                          {
                            uint64_t v80 = __DataStorage._offset.getter();
                            uint64_t v56 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
                            if (__OFSUB__(v156, v80)) {
                              goto LABEL_133;
                            }
                            v79 += v156 - v80;
                          }
                          else
                          {
                            uint64_t v56 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
                          }
                          __DataStorage._length.getter();
                          uint64_t v83 = v79;
                          unint64_t v29 = v170;
                          uint64_t v66 = v171;
                          uint64_t v84 = (const char *)v183;
                          sub_1001E5240(v83, v171, v170, (char *)v186);
                          uint64_t v183 = (uint64_t)v84;
                          if (v84) {
                            goto LABEL_138;
                          }
                          sub_100075868(v66, v29);
                          sub_10006D144(v48, v32);
                          sub_100075868(v66, v29);
                          char v76 = v186[0];
                          sub_10006D144(v48, v32);
LABEL_71:
                          sub_10006D144(v48, v32);
                          if (v76) {
                            goto LABEL_52;
                          }
                          goto LABEL_50;
                        case 2:
                          unint64_t v29 = v32 & 0x3FFFFFFFFFFFFFFFLL;
                          uint64_t v69 = *(void *)(v48 + 16);
                          uint64_t v156 = *(void *)(v48 + 24);
                          uint64_t v157 = v69;
                          unint64_t v70 = v170;
                          uint64_t v71 = v171;
                          sub_1000758F4(v171, v170);
                          sub_1000758F4(v71, v70);
                          swift_retain();
                          swift_retain();
                          uint64_t v72 = __DataStorage._bytes.getter();
                          if (v72)
                          {
                            uint64_t v73 = __DataStorage._offset.getter();
                            uint64_t v74 = v157;
                            if (__OFSUB__(v157, v73)) {
                              goto LABEL_132;
                            }
                            v72 += v157 - v73;
                          }
                          else
                          {
                            uint64_t v74 = v157;
                          }
                          if (__OFSUB__(v156, v74)) {
                            goto LABEL_130;
                          }
                          __DataStorage._length.getter();
                          uint64_t v81 = v72;
                          uint64_t v66 = v170;
                          uint64_t v56 = (char **)v171;
                          uint64_t v82 = (const char *)v183;
                          sub_1001E5240(v81, v171, v170, (char *)v186);
                          uint64_t v183 = (uint64_t)v82;
                          if (v82) {
                            goto LABEL_137;
                          }
                          sub_100075868((uint64_t)v56, v66);
                          swift_release();
                          swift_release();
                          char v68 = v186[0];
                          sub_100075868((uint64_t)v56, v66);
                          sub_10006D144(v48, v32);
                          goto LABEL_66;
                        case 3:
                          *(void *)((char *)v186 + 6) = 0;
                          *(void *)&v186[0] = 0;
                          unint64_t v29 = v170;
                          uint64_t v66 = v171;
                          sub_1000758F4(v171, v170);
                          sub_1000758F4(v66, v29);
                          os_log_type_t v75 = (const char *)v183;
                          sub_1001E5240((uint64_t)v186, v66, v29, &v184);
                          uint64_t v183 = (uint64_t)v75;
                          if (v75) {
                            goto LABEL_136;
                          }
                          sub_100075868(v66, v29);
                          sub_100075868(v66, v29);
                          sub_10006D144(v48, v32);
                          char v76 = v184;
                          goto LABEL_71;
                        default:
                          *(void *)&v186[0] = v48;
                          WORD4(v186[0]) = v32;
                          BYTE10(v186[0]) = BYTE2(v32);
                          BYTE11(v186[0]) = BYTE3(v32);
                          BYTE12(v186[0]) = BYTE4(v32);
                          BYTE13(v186[0]) = BYTE5(v32);
                          unint64_t v29 = (unint64_t)v186 + BYTE6(v32);
                          uint64_t v66 = v170;
                          uint64_t v56 = (char **)v171;
                          sub_1000758F4(v171, v170);
                          sub_1000758F4((uint64_t)v56, v66);
                          uint64_t v67 = (const char *)v183;
                          sub_1001E5240((uint64_t)v186, (uint64_t)v56, v66, &v184);
                          uint64_t v183 = (uint64_t)v67;
                          if (v67)
                          {
                            sub_100075868((uint64_t)v56, v66);
                            __break(1u);
LABEL_136:
                            sub_100075868(v66, v29);
                            __break(1u);
LABEL_137:
                            sub_100075868((uint64_t)v56, v66);
                            swift_release();
                            swift_release();
                            __break(1u);
LABEL_138:
                            sub_100075868(v66, v29);
                            sub_10006D144(v48, v32);
                            __break(1u);
                            JUMPOUT(0x100153E38);
                          }
                          sub_100075868((uint64_t)v56, v66);
                          sub_100075868((uint64_t)v56, v66);
                          sub_10006D144(v48, v32);
                          char v68 = v184;
LABEL_66:
                          sub_10006D144(v48, v32);
                          uint64_t v56 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
                          if (v68) {
                            goto LABEL_52;
                          }
                          goto LABEL_50;
                      }
                    }
LABEL_51:
                    sub_10006D144(v48, v32);
                    sub_10006D144(v48, v32);
LABEL_52:
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                  }
                  else
                  {
LABEL_49:
                    sub_10006D144(v48, v32);
                    sub_10006D144(v48, v32);
LABEL_50:
                  }
                  break;
              }
            }
            unint64_t v32 = v172;
            ++v54;
            unint64_t v29 = v177;
            if (v53 == v172)
            {
              unint64_t v32 = (unint64_t)v185;
              uint64_t v53 = v183;
              unint64_t v34 = v170;
              uint64_t v48 = v171;
              goto LABEL_76;
            }
          }
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          swift_bridgeObjectRelease();
          uint64_t v182 = v29 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
          unint64_t v113 = v155;
          sub_10006D0EC(v53, v155);
          unint64_t v34 = v170;
          uint64_t v114 = v171;
          sub_1000758F4(v171, v170);
          sub_10006D0EC(v48, v32);
          unint64_t v115 = v113;
          uint64_t v60 = v114;
          sub_10006D0EC(v53, v115);
          sub_1000758F4(v114, v34);
          sub_10006D0EC(v48, v32);
          unint64_t v29 = Logger.logObject.getter();
          LODWORD(v181) = static os_log_type_t.error.getter();
          if (os_log_type_enabled((os_log_t)v29, (os_log_type_t)v181))
          {
            os_log_t v180 = (os_log_t)v29;
            uint64_t v116 = swift_slowAlloc();
            v179 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))swift_slowAlloc();
            *(void *)&v186[0] = v179;
            *(_DWORD *)uint64_t v116 = 136315650;
            if (v178 <= 0xE)
            {
              unint64_t v120 = v170;
              uint64_t v119 = v171;
              uint64_t v122 = (const char *)v183;
              uint64_t v123 = sub_10023CDF4(v171, v170);
              uint64_t v183 = (uint64_t)v122;
              v185 = v123;
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
              uint64_t v118 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v117 = v124;
              swift_bridgeObjectRelease();
            }
            else
            {
              unint64_t v117 = 0xE300000000000000;
              uint64_t v118 = 7104878;
              unint64_t v120 = v170;
              uint64_t v119 = v171;
            }
            v185 = (void *)sub_100290514(v118, v117, (uint64_t *)v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100075868(v119, v120);
            sub_100075868(v119, v120);
            *(_WORD *)(v116 + 12) = 2080;
            uint64_t v177 = v116 + 14;
            uint64_t v125 = (const char *)v183;
            id v126 = sub_10023CDF4(v48, v32);
            uint64_t v183 = (uint64_t)v125;
            v185 = v126;
            unint64_t v178 = sub_10006C51C((uint64_t *)&unk_100455EA0);
            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
            uint64_t v127 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v129 = v128;
            swift_bridgeObjectRelease();
            v185 = (void *)sub_100290514(v127, v129, (uint64_t *)v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v48, v32);
            sub_10006D144(v48, v32);
            *(_WORD *)(v116 + 22) = 2080;
            uint64_t v177 = v116 + 24;
            uint64_t v130 = v145;
            unint64_t v131 = v155;
            uint64_t v132 = (const char *)v183;
            uint64_t v133 = sub_10023CDF4(v145, v155);
            uint64_t v183 = (uint64_t)v132;
            v185 = v133;
            uint64_t v134 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v136 = v135;
            swift_bridgeObjectRelease();
            v185 = (void *)sub_100290514(v134, v136, (uint64_t *)v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10006D144(v130, v131);
            sub_10006D144(v130, v131);
            os_log_t v137 = v180;
            _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)v181, "Found self share for UUID %s with CASDCA %s != myCASDCA %s", (uint8_t *)v116, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v54 = v160;
            uint64_t v56 = v161;
          }
          else
          {
LABEL_121:

            sub_100075868(v60, v34);
            sub_100075868(v60, v34);
            sub_10006D144(v48, v32);
            sub_10006D144(v48, v32);
            unint64_t v121 = v155;
            sub_10006D144(v53, v155);
            sub_10006D144(v53, v121);
          }
          uint64_t v138 = v150;
          sub_10017092C((uint64_t)v56, v150, type metadata accessor for SESTLKShareData);
          char v139 = Logger.logObject.getter();
          os_log_type_t v140 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v139, v140))
          {
            uint64_t v141 = (uint8_t *)swift_slowAlloc();
            *(void *)&v186[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v141 = 136315138;
            uint64_t v182 = (uint64_t)(v141 + 4);
            unint64_t v142 = sub_10023E134();
            v185 = (void *)sub_100290514(v142, v143, (uint64_t *)v186);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_100170490(v150, type metadata accessor for SESTLKShareData);
            _os_log_impl((void *)&_mh_execute_header, v139, v140, "Offending peer is %s", v141, 0xCu);
            LOBYTE(v26) = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_10006D144(v145, v155);
            sub_10006D144(v48, v32);
            sub_100075868(v171, v170);
            sub_100170490((uint64_t)v161, type metadata accessor for SESTLKShareData);
            sub_10008E734(v160, &qword_100456540);
          }
          else
          {

            sub_100170490(v138, type metadata accessor for SESTLKShareData);
            sub_10006D144(v145, v155);
            sub_10006D144(v48, v32);
            sub_100075868(v171, v170);
            sub_100170490((uint64_t)v56, type metadata accessor for SESTLKShareData);
            sub_10008E734(v54, &qword_100456540);
            LOBYTE(v26) = 1;
          }
          return v26 & 1;
        }
        unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_76:
        sub_100075868(v48, v34);
        swift_bridgeObjectRelease();
        if ((v32 & 0x8000000000000000) != 0 || (v32 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v85 = _CocoaArrayWrapper.endIndex.getter();
        }
        else
        {
          uint64_t v85 = *(void *)(v32 + 16);
          swift_bridgeObjectRetain();
        }
        uint64_t v183 = v53;
        if (v85)
        {
          if (v85 < 1) {
            goto LABEL_128;
          }
          long long v86 = _swiftEmptyArrayStorage;
          uint64_t v87 = 0;
          unint64_t v174 = v32 & 0xC000000000000001;
          uint64_t v177 = v85;
          do
          {
            if (v174) {
              id v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v88 = *(id *)(v32 + 8 * v87 + 32);
            }
            uint64_t v89 = v88;
            type metadata accessor for PropertyListDecoder();
            swift_allocObject();
            PropertyListDecoder.init()();
            id v90 = [v89 shareData];
            uint64_t v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v93 = v92;

            sub_100170544(&qword_100456508, (void (*)(uint64_t))type metadata accessor for SESTLKShareData);
            uint64_t v94 = v183;
            dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
            if (v94)
            {
              sub_10006D144(v91, v93);
              swift_release();
              swift_errorRelease();
              uint64_t v183 = 0;
              uint64_t v95 = 1;
            }
            else
            {
              uint64_t v183 = 0;
              sub_10006D144(v91, v93);
              swift_release();
              uint64_t v95 = 0;
            }
            uint64_t v96 = (uint64_t)v181;
            uint64_t v97 = v182;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v180->isa)(v181, v95, 1, v182);

            if ((*v179)(v96, 1, v97) == 1)
            {
              sub_10008E734(v96, &qword_100456540);
            }
            else
            {
              uint64_t v98 = v168;
              sub_1001705AC(v96, v168, type metadata accessor for SESTLKShareData);
              sub_1001705AC(v98, v176, type metadata accessor for SESTLKShareData);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v86 = (void *)sub_100259FEC(0, v86[2] + 1, 1, (unint64_t)v86);
              }
              unint64_t v100 = v86[2];
              unint64_t v99 = v86[3];
              if (v100 >= v99 >> 1) {
                long long v86 = (void *)sub_100259FEC(v99 > 1, v100 + 1, 1, (unint64_t)v86);
              }
              v86[2] = v100 + 1;
              sub_1001705AC(v176, (uint64_t)v86+ ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80))+ *(void *)(v169 + 72) * v100, type metadata accessor for SESTLKShareData);
            }
            ++v87;
          }
          while (v177 != v87);
        }
        else
        {
          long long v86 = _swiftEmptyArrayStorage;
        }
        swift_release_n();
        if (v86[2])
        {
          unint64_t v54 = v160;
          sub_10017092C((uint64_t)v86+ ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80)), v160, type metadata accessor for SESTLKShareData);
          uint64_t v101 = 0;
        }
        else
        {
          uint64_t v101 = 1;
          unint64_t v54 = v160;
        }
        uint64_t v56 = v161;
        uint64_t v102 = v182;
        uint64_t v103 = (uint64_t)v159;
        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v180->isa)(v54, v101, 1, v182);
        swift_bridgeObjectRelease();
        unint64_t v34 = (unint64_t)&qword_100456540;
        sub_100170994(v54, v103, &qword_100456540);
        if ((*v179)(v103, 1, v102) == 1)
        {
          sub_10008E734(v54, &qword_100456540);
          sub_100075868(v171, v170);

          uint64_t v38 = v103;
          uint64_t v39 = v153;
          unint64_t v37 = v162;
        }
        else
        {
          sub_1001705AC(v103, (uint64_t)v56, type metadata accessor for SESTLKShareData);
          uint64_t v105 = (uint64_t)v56[6];
          unint64_t v104 = (unint64_t)v56[7];
          uint64_t v106 = swift_allocObject();
          *(unsigned char *)(v106 + 109) = 0;
          *(_WORD *)(v106 + 110) = -5120;
          *(_OWORD *)(v106 + 16) = v158;
          strcpy((char *)(v106 + 32), "serialNumber");
          *(unsigned char *)(v106 + 45) = 0;
          *(_WORD *)(v106 + 46) = -5120;
          *(void *)(v106 + 48) = 147;
          *(_WORD *)(v106 + 56) = 0;
          *(_OWORD *)(v106 + 64) = 0u;
          *(unsigned char *)(v106 + 80) = -64;
          *(void *)(v106 + 88) = _swiftEmptyArrayStorage;
          strcpy((char *)(v106 + 96), "caIdentifier");
          *(void *)(v106 + 112) = 66;
          *(_WORD *)(v106 + 120) = 0;
          *(_OWORD *)(v106 + 128) = 0u;
          *(unsigned char *)(v106 + 144) = -64;
          *(void *)(v106 + 152) = _swiftEmptyArrayStorage;
          *(void *)(v106 + 160) = 0xD000000000000011;
          *(void *)(v106 + 168) = v149;
          *(void *)(v106 + 176) = 24352;
          *(_WORD *)(v106 + 184) = 0;
          *(_OWORD *)(v106 + 192) = 0u;
          *(unsigned char *)(v106 + 208) = -64;
          *(void *)(v106 + 216) = _swiftEmptyArrayStorage;
          *(void *)(v106 + 224) = 0x656761735579656BLL;
          *(void *)(v106 + 232) = 0xE800000000000000;
          *(void *)(v106 + 240) = 149;
          *(_WORD *)(v106 + 248) = 0;
          *(_OWORD *)(v106 + 256) = 0u;
          *(unsigned char *)(v106 + 272) = -64;
          *(void *)(v106 + 280) = _swiftEmptyArrayStorage;
          strcpy((char *)(v106 + 288), "effectiveDate");
          *(_WORD *)(v106 + 302) = -4864;
          *(void *)(v106 + 304) = 37;
          *(_WORD *)(v106 + 312) = 256;
          *(_OWORD *)(v106 + 320) = 0u;
          *(unsigned char *)(v106 + 336) = -64;
          *(void *)(v106 + 344) = _swiftEmptyArrayStorage;
          strcpy((char *)(v106 + 352), "expirationDate");
          *(unsigned char *)(v106 + 367) = -18;
          *(void *)(v106 + 368) = 24356;
          *(_WORD *)(v106 + 376) = 256;
          *(_OWORD *)(v106 + 384) = 0u;
          *(unsigned char *)(v106 + 400) = -64;
          *(void *)(v106 + 408) = _swiftEmptyArrayStorage;
          *(void *)(v106 + 416) = 0x4E4944536163;
          *(void *)(v106 + 424) = 0xE600000000000000;
          *(void *)(v106 + 432) = 69;
          *(_WORD *)(v106 + 440) = 0;
          *(_OWORD *)(v106 + 448) = 0u;
          *(unsigned char *)(v106 + 464) = -64;
          *(void *)(v106 + 472) = _swiftEmptyArrayStorage;
          *(void *)(v106 + 480) = 0xD000000000000011;
          *(void *)(v106 + 488) = v148;
          *(void *)(v106 + 496) = 83;
          *(_WORD *)(v106 + 504) = 0;
          *(_OWORD *)(v106 + 512) = 0u;
          *(unsigned char *)(v106 + 528) = -64;
          *(void *)(v106 + 536) = _swiftEmptyArrayStorage;
          *(void *)(v106 + 544) = 0x654B63696C627570;
          *(void *)(v106 + 552) = 0xE900000000000079;
          *(void *)(v106 + 560) = 32585;
          *(_WORD *)(v106 + 568) = 0;
          *(_OWORD *)(v106 + 576) = 0u;
          *(unsigned char *)(v106 + 592) = -64;
          *(void *)(v106 + 600) = _swiftEmptyArrayStorage;
          v193.n128_u64[0] = 32545;
          v193.n128_u16[4] = 0;
          uint64_t v194 = v106;
          uint64_t v195 = 0;
          char v196 = 64;
          v197 = _swiftEmptyArrayStorage;
          *(void *)&v186[0] = v105;
          *((void *)&v186[0] + 1) = v104;
          sub_10006D0EC(v105, v104);
          sub_10006D0EC(v105, v104);
          uint64_t v107 = v183;
          unint64_t v108 = sub_100188FB0((uint64_t)v186, &v193);
          if (v107)
          {
            sub_10006D144(*(uint64_t *)&v186[0], *((unint64_t *)&v186[0] + 1));
            sub_10006D144(v105, v104);

            swift_bridgeObjectRelease();
            uint64_t v183 = 0;
            sub_100075868(v171, v170);
            swift_errorRelease();
          }
          else
          {
            unint64_t v109 = v108;
            sub_10006D144(*(uint64_t *)&v186[0], *((unint64_t *)&v186[0] + 1));
            swift_bridgeObjectRelease();
            sub_100253000(v109, v190);
            uint64_t v183 = 0;
            sub_10006D144(v105, v104);
            uint64_t v48 = v191;
            unint64_t v32 = v192;
            sub_10006D0EC(v191, v192);
            sub_1001706B4(v190, (void (*)(uint64_t, uint64_t))sub_10006D144);
            uint64_t v53 = v145;
            char v110 = sub_100088AE4(v48, v32, v145, v155);
            unint64_t v29 = v151;
            if ((v110 & 1) == 0) {
              goto LABEL_114;
            }

            sub_10006D144(v48, v32);
            sub_100075868(v171, v170);
          }
          uint64_t v39 = v153;
          sub_100170490((uint64_t)v56, type metadata accessor for SESTLKShareData);
          uint64_t v38 = v54;
          unint64_t v37 = v162;
          unint64_t v34 = (unint64_t)&qword_100456540;
        }
        sub_10008E734(v38, &qword_100456540);
        BOOL v40 = v37 == v39;
        unint64_t v29 = v155;
        unint64_t v32 = v183;
        if (v40)
        {
          swift_bridgeObjectRelease();
          uint64_t v111 = v145;
          unint64_t v112 = v29;
          goto LABEL_111;
        }
      }
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      swift_bridgeObjectRetain();
      uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v111 = v145;
    unint64_t v112 = v34;
LABEL_111:
    sub_10006D144(v111, v112);
    LOBYTE(v26) = 0;
  }
  return v26 & 1;
}

uint64_t sub_100153E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[32] = a3;
  v4[33] = v3;
  v4[30] = a1;
  v4[31] = a2;
  sub_10006C51C(&qword_100456480);
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SESPeerIdentityData(0);
  v4[37] = v5;
  v4[38] = *(void *)(v5 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  return _swift_task_switch(sub_100153FAC, v3, 0);
}

uint64_t sub_100153FAC()
{
  uint64_t v1 = self;
  NSString v2 = String._bridgeToObjectiveC()();
  v0[44] = v2;
  v0[2] = v0;
  v0[7] = v0 + 25;
  v0[3] = sub_1001540E0;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10016999C;
  v0[13] = &unk_100413258;
  v0[14] = v3;
  sub_100058540(v1, v2, v0 + 10);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001540E0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 360) = v2;
  uint64_t v3 = *(void *)(v1 + 264);
  if (v2) {
    uint64_t v4 = sub_100154D20;
  }
  else {
    uint64_t v4 = sub_100154200;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100154200()
{
  uint64_t v61 = v0;
  uint64_t v1 = *(void **)(v0 + 200);

  if (v1)
  {
    uint64_t v2 = sub_10016313C(v1);
    unint64_t v58 = v7;
    uint64_t v59 = v2;
    id v57 = v1;
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 288);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10016B960(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v9);
    if (v11 == 1)
    {
      sub_10008E734(*(void *)(v0 + 288), &qword_100456480);
      uint64_t v12 = v57;
    }
    else
    {
      uint64_t v13 = *(uint64_t **)(v0 + 344);
      sub_1001705AC(*(void *)(v0 + 288), (uint64_t)v13, type metadata accessor for SESPeerIdentityData);
      uint64_t v15 = *v13;
      unint64_t v14 = v13[1];
      sub_10006D0EC(v15, v14);
      char v16 = sub_100088AE4(v15, v14, v59, v58);
      sub_10006D144(v15, v14);
      uint64_t v17 = *(void *)(v0 + 344);
      if (v16)
      {
        uint64_t v18 = *(void *)(v0 + 240);
        uint64_t v19 = *(void *)(v0 + 336);
        sub_10017092C(v17, v18, type metadata accessor for SESPeerIdentityData);
        sub_10017092C(v18, v19, type metadata accessor for SESPeerIdentityData);
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.info.getter();
        BOOL v22 = os_log_type_enabled(v20, v21);
        uint64_t v24 = *(void *)(v0 + 336);
        uint64_t v23 = *(void *)(v0 + 344);
        if (v22)
        {
          uint64_t v55 = *(void *)(v0 + 344);
          unint64_t v25 = (uint8_t *)swift_slowAlloc();
          v60[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v25 = 136315138;
          unint64_t v26 = sub_10023E134();
          *(void *)(v0 + 232) = sub_100290514(v26, v27, v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100170490(v24, type metadata accessor for SESPeerIdentityData);
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Using cached identity for %s", v25, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v28 = v55;
        }
        else
        {
          sub_100170490(*(void *)(v0 + 336), type metadata accessor for SESPeerIdentityData);

          uint64_t v28 = v23;
        }
        goto LABEL_16;
      }
      sub_100170490(v17, type metadata accessor for SESPeerIdentityData);
      uint64_t v12 = v57;
    }
    sub_100163680(v12, *(uint64_t **)(v0 + 328));
    uint64_t v30 = *(void *)(v0 + 296);
    uint64_t v29 = *(void *)(v0 + 304);
    uint64_t v32 = *(void *)(v0 + 272);
    uint64_t v31 = *(void *)(v0 + 280);
    uint64_t v56 = *(void *)(v0 + 320);
    uint64_t v33 = *(void *)(v0 + 240);
    sub_1001705AC(*(void *)(v0 + 328), v33, type metadata accessor for SESPeerIdentityData);
    sub_10017092C(v33, v31, type metadata accessor for SESPeerIdentityData);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v31, 0, 1, v30);
    sub_100170994(v31, v32, &qword_100456480);
    swift_beginAccess();
    sub_10016BBFC(v32);
    swift_endAccess();
    sub_10008E734(v31, &qword_100456480);
    sub_10017092C(v33, v56, type metadata accessor for SESPeerIdentityData);
    unint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.info.getter();
    BOOL v36 = os_log_type_enabled(v34, (os_log_type_t)v35);
    uint64_t v37 = *(void *)(v0 + 320);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v60[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      unint64_t v39 = sub_10023E134();
      *(void *)(v0 + 224) = sub_100290514(v39, v40, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100170490(v37, type metadata accessor for SESPeerIdentityData);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v35, "Created & cached device identity for %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_17;
    }

    uint64_t v28 = v37;
LABEL_16:
    sub_100170490(v28, type metadata accessor for SESPeerIdentityData);
LABEL_17:
    if (sub_100163A14(*(void **)(v0 + 240), *(void *)(v0 + 248), *(void *)(v0 + 256), v59, v58))
    {
      sub_10017092C(*(void *)(v0 + 240), *(void *)(v0 + 312), type metadata accessor for SESPeerIdentityData);
      id v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.info.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void *)(v0 + 312);
      if (v43)
      {
        id v45 = (uint8_t *)swift_slowAlloc();
        v60[0] = swift_slowAlloc();
        *(_DWORD *)id v45 = 136315138;
        unint64_t v46 = sub_10023E134();
        *(void *)(v0 + 216) = sub_100290514(v46, v47, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100170490(v44, type metadata accessor for SESPeerIdentityData);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Got SE identity: %s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_10006D144(v59, v58);
      }
      else
      {
        sub_10006D144(v59, v58);

        sub_100170490(v44, type metadata accessor for SESPeerIdentityData);
      }
    }
    else
    {
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        id v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "DSID mismatch!", v50, 2u);
        swift_slowDealloc();
      }

      sub_100184124(v57);
      uint64_t v51 = *(void *)(v0 + 240);
      sub_10016FF34();
      swift_allocError();
      *uint64_t v52 = 29;
      swift_willThrow();
      sub_10006D144(v59, v58);

      sub_100170490(v51, type metadata accessor for SESPeerIdentityData);
    }
    goto LABEL_24;
  }
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, (os_log_type_t)v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, (os_log_type_t)v4, "Failed to get secure element", v5, 2u);
    swift_slowDealloc();
  }

  sub_10016FF34();
  swift_allocError();
  *uint64_t v6 = 4;
  swift_willThrow();
LABEL_24:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
  return v53();
}

uint64_t sub_100154D20()
{
  uint64_t v1 = *(void **)(v0 + 352);
  swift_willThrow();
  swift_errorRelease();

  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get secure element", v4, 2u);
    swift_slowDealloc();
  }

  sub_10016FF34();
  swift_allocError();
  *uint64_t v5 = 4;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100154EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[72] = v3;
  v4[71] = a3;
  v4[70] = a2;
  v4[69] = a1;
  v4[73] = type metadata accessor for SESPeerIdentityData(0);
  v4[74] = swift_task_alloc();
  return _swift_task_switch(sub_100154F4C, v3, 0);
}

uint64_t sub_100154F4C()
{
  uint64_t v1 = *(void **)(v0[72] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
  v0[75] = v1;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[76] = isa;
  v0[10] = v0;
  v0[15] = v0 + 41;
  v0[11] = sub_10015507C;
  uint64_t v3 = swift_continuation_init();
  v0[26] = _NSConcreteStackBlock;
  v0[27] = 0x40000000;
  v0[28] = sub_100164638;
  v0[29] = &unk_100413210;
  v0[30] = v3;
  [v1 getSEPeerIdentityInfo:isa withCompletion:v0 + 26];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_10015507C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 112);
  *(void *)(*v0 + 616) = v2;
  uint64_t v3 = *(void *)(v1 + 576);
  if (v2) {
    uint64_t v4 = sub_100156264;
  }
  else {
    uint64_t v4 = sub_10015519C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10015519C()
{
  id v45 = v0;
  uint64_t v1 = (void *)v0[76];
  uint64_t v2 = v0[41];
  unint64_t v3 = v0[42];
  v0[78] = v2;
  v0[79] = v3;
  unint64_t v4 = v0[43];
  v0[80] = v4;
  sub_1000758F4(v2, v3);

  v0[81] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  sub_1000758F4(v2, v3);
  swift_bridgeObjectRetain();
  sub_1000758F4(v2, v3);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  unint64_t v7 = v3 >> 60;
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v40 = v6;
    uint64_t v8 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v42 = v39;
    if (v3 >> 60 == 15)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      sub_10006D0EC(v2, v3);
      sub_10006D0EC(v2, v3);
      sub_10023CC58(4, v2, v3, &v43);
      unint64_t v37 = v44;
      uint64_t v38 = v43;
      v0[65] = sub_10023CDF4(v43, v44);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
      uint64_t v10 = v11;
      swift_bridgeObjectRelease();
      sub_10006D144(v38, v37);
    }
    v0[53] = v9;
    v0[54] = v10;
    sub_10006C51C((uint64_t *)&unk_100457940);
    uint64_t v12 = String.init<A>(describing:)();
    unint64_t v14 = v13;
    sub_100075868(v2, v3);
    v0[67] = sub_100290514(v12, v14, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(v2, v3);
    sub_100075868(v2, v3);
    *(_WORD *)(v8 + 12) = 2048;
    if (v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v7 = v3 >> 60;
    swift_bridgeObjectRelease();
    v0[68] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v40, "Got local KC peer identifier %s and %ld other peers", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();

    sub_100075868(v2, v3);
    sub_100075868(v2, v3);
    swift_bridgeObjectRelease();
  }
  v0[82] = 0;
  char v16 = (uint64_t *)v0[71];
  uint64_t v17 = *v16;
  v0[83] = *v16;
  unint64_t v18 = v16[1];
  v0[84] = v18;
  if (v7 > 0xE)
  {
    sub_10006D0EC(v17, v18);
    sub_100075868(v2, v3);
    sub_100075868(v17, v18);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100170544(&qword_100456528, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    uint64_t v20 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v22 = v21;
    swift_release();
    uint64_t v31 = v0 + 18;
    id v41 = (id)v0[75];
    uint64_t v32 = self;
    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v20, v22);
    id v34 = [v32 withPeerIdentifier:isa peerData:v33];
    v0[88] = v34;

    Class v35 = Data._bridgeToObjectiveC()().super.isa;
    v0[89] = v35;
    v0[18] = v0;
    v0[19] = sub_100155F08;
    uint64_t v36 = swift_continuation_init();
    v0[36] = _NSConcreteStackBlock;
    v0[37] = 0x40000000;
    v0[38] = sub_1001BDDAC;
    v0[39] = &unk_100413228;
    v0[40] = v36;
    [v41 addLocalSEPeerIdentity:v34 altDSID:v35 completion:v0 + 36];
LABEL_16:
    return _swift_continuation_await(v31);
  }
  sub_1000758F4(v2, v3);
  sub_10006D0EC(v17, v18);
  char v23 = sub_100088AE4(v2, v3, v17, v18);
  sub_10006D144(v17, v18);
  sub_100075868(v2, v3);
  if ((v23 & 1) == 0)
  {
    uint64_t v31 = v0 + 2;
    unint64_t v27 = (void *)v0[75];
    Class v28 = Data._bridgeToObjectiveC()().super.isa;
    v0[85] = v28;
    Class v29 = Data._bridgeToObjectiveC()().super.isa;
    v0[86] = v29;
    v0[2] = v0;
    v0[3] = sub_1001558FC;
    uint64_t v30 = swift_continuation_init();
    v0[31] = _NSConcreteStackBlock;
    v0[32] = 0x40000000;
    v0[33] = sub_1001BDDAC;
    v0[34] = &unk_100413240;
    v0[35] = v30;
    [v27 removeLocalSEPeerIdentity:v28 altDSID:v29 completion:v0 + 31];
    goto LABEL_16;
  }
  sub_100075868(v2, v3);
  sub_100075868(v2, v3);
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v25 = v0[80];
  return v24(v25);
}

uint64_t sub_1001558FC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 696) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 576);
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_100156498;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 576);
    unint64_t v4 = sub_100155A24;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100155A24()
{
  uint64_t v33 = v0;
  uint64_t v1 = *(void **)(v0 + 680);
  unint64_t v2 = *(void *)(v0 + 632);
  uint64_t v3 = *(void *)(v0 + 624);

  sub_10006D0EC(v3, v2);
  sub_10006D0EC(v3, v2);
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t type = v5;
    uint64_t v6 = *(void *)(v0 + 656);
    unint64_t v7 = *(void *)(v0 + 632);
    uint64_t v8 = *(void *)(v0 + 624);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    unint64_t v27 = v7;
    sub_10006D0EC(v8, v7);
    sub_10023CC58(4, v8, v7, &v31);
    uint64_t v10 = v31;
    unint64_t v11 = v32;
    *(void *)(v0 + 496) = sub_10023CDF4(v31, v32);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    sub_10006D144(v10, v11);
    *(void *)(v0 + 504) = sub_100290514(v12, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100075868(v8, v27);
    sub_100075868(v8, v27);
    _os_log_impl((void *)&_mh_execute_header, v4, type, "Removed local SE Peer Identifier %s)", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100075868(v8, v27);
  }
  else
  {
    unint64_t v15 = *(void *)(v0 + 632);
    uint64_t v16 = *(void *)(v0 + 624);
    sub_100075868(v16, v15);

    sub_100075868(v16, v15);
    sub_100075868(v16, v15);
    uint64_t v6 = *(void *)(v0 + 656);
  }
  v17.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_100170544(&qword_100456528, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
  uint64_t v18 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v20 = v19;
  swift_release();
  if (v6)
  {
    return swift_unexpectedError();
  }
  else
  {
    id v29 = *(id *)(v0 + 600);
    unint64_t v22 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v18, v20);
    id v24 = [v22 withPeerIdentifier:v17.super.isa peerData:isa];
    *(void *)(v0 + 704) = v24;

    Class v25 = Data._bridgeToObjectiveC()().super.isa;
    *(void *)(v0 + 712) = v25;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 152) = sub_100155F08;
    uint64_t v26 = swift_continuation_init();
    *(void *)(v0 + 288) = _NSConcreteStackBlock;
    *(void *)(v0 + 296) = 0x40000000;
    *(void *)(v0 + 304) = sub_1001BDDAC;
    *(void *)(v0 + 312) = &unk_100413228;
    *(void *)(v0 + 320) = v26;
    [v29 addLocalSEPeerIdentity:v24 altDSID:v25 completion:v0 + 288];
    return _swift_continuation_await(v0 + 144);
  }
}

uint64_t sub_100155F08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 176);
  *(void *)(*v0 + 720) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 576);
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_1001566F4;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 576);
    unint64_t v4 = sub_100156030;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100156030()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 592);
  uint64_t v2 = *(void *)(v0 + 568);

  sub_10017092C(v2, v1, type metadata accessor for SESPeerIdentityData);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v15 = *(void *)(v0 + 632);
    uint64_t v16 = *(void **)(v0 + 704);
    uint64_t v14 = *(void *)(v0 + 624);
    uint64_t v5 = *(void *)(v0 + 592);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    unint64_t v7 = sub_10023E134();
    *(void *)(v0 + 440) = sub_100290514(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100170490(v5, type metadata accessor for SESPeerIdentityData);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "KeySyncManager: Added identity to Keychain Successfully : %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100075868(v14, v15);
  }
  else
  {
    uint64_t v9 = *(void **)(v0 + 704);
    uint64_t v10 = *(void *)(v0 + 592);
    sub_100075868(*(void *)(v0 + 624), *(void *)(v0 + 632));

    sub_100170490(v10, type metadata accessor for SESPeerIdentityData);
  }
  swift_task_dealloc();
  unint64_t v11 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v12 = *(void *)(v0 + 640);
  return v11(v12);
}

uint64_t sub_100156264()
{
  unint64_t v11 = v0;
  uint64_t v1 = (void *)v0[76];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[56] = sub_100290514(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get SE Peer Identity Info %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  sub_10016FF34();
  swift_allocError();
  *unint64_t v7 = 20;
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100156498()
{
  uint64_t v14 = v0;
  uint64_t v1 = (void *)v0[86];
  uint64_t v2 = (void *)v0[85];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[60] = sub_100290514(v6, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to remove local SE Peer Identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v8 = v0[79];
  uint64_t v9 = v0[78];
  sub_10016FF34();
  swift_allocError();
  *uint64_t v10 = 20;
  swift_willThrow();
  sub_100075868(v9, v8);
  sub_100075868(v9, v8);
  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_1001566F4()
{
  uint64_t v14 = v0;
  uint64_t v1 = (void *)v0[89];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    v0[59] = sub_100290514(v5, v6, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to add local SE Peer Identity %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v7 = (void *)v0[88];
  unint64_t v8 = v0[79];
  uint64_t v9 = v0[78];
  sub_10016FF34();
  swift_allocError();
  *uint64_t v10 = 21;
  swift_willThrow();
  sub_100075868(v9, v8);

  swift_errorRelease();
  swift_task_dealloc();
  unint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100156944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[40] = a5;
  v6[41] = v5;
  v6[38] = a3;
  v6[39] = a4;
  v6[36] = a1;
  v6[37] = a2;
  return _swift_task_switch(sub_10015696C, v5, 0);
}

uint64_t sub_10015696C()
{
  uint64_t v51 = v0;
  id v1 = [*(id *)(v0 + 296) currentTLK];
  *(void *)(v0 + 336) = v1;
  uint64_t v2 = *(uint64_t **)(v0 + 288);
  if (v1)
  {
    os_log_type_t v3 = v1;
    unint64_t v47 = (_OWORD *)(v0 + 224);
    uint64_t v48 = (_OWORD *)(v0 + 208);
    uint64_t v4 = *v2;
    unint64_t v5 = v2[1];
    id v6 = [v1 tlkUUID];
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;

    sub_1001B5844(v4, v5);
    sub_10006D144(v7, v9);
    sub_10016FF88((uint64_t)v2);
    id v10 = v3;
    sub_10016FF88((uint64_t)v2);
    id v11 = v10;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 288);
    uint64_t v45 = v4;
    if (v14)
    {
      unint64_t v49 = v5;
      uint64_t v16 = swift_slowAlloc();
      unint64_t v44 = (void *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 272) = sub_100290514(v4, v49, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100170614(v15);
      sub_100170614(v15);
      *(_WORD *)(v16 + 12) = 2112;
      *(void *)(v0 + 280) = v11;
      id v17 = v11;
      id v18 = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v44 = v3;

      id v11 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "View %s already has TLK %@", (uint8_t *)v16, 0x16u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v5 = v49;
      swift_slowDealloc();
    }
    else
    {

      sub_100170614(v15);
      sub_100170614(v15);
    }
    uint64_t v46 = (uint64_t *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 328) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
    swift_beginAccess();
    long long v27 = *(_OWORD *)v26;
    long long v28 = *(_OWORD *)(v26 + 16);
    *(_WORD *)(v0 + 152) = *(_WORD *)(v26 + 32);
    *(_OWORD *)(v0 + 120) = v27;
    *(_OWORD *)(v0 + 136) = v28;
    *unint64_t v47 = *(_OWORD *)v26;
    *uint64_t v48 = *(_OWORD *)(v0 + 136);
    sub_100079AE8((uint64_t)v47);
    sub_100079AE8((uint64_t)v48);
    sub_1001AF4B4();
    char v30 = v29;
    sub_100079B14((uint64_t)v47);
    sub_100079B14((uint64_t)v48);
    if (v30)
    {
      uint64_t v31 = *v46;
      sub_10016FF88(*v46);
      sub_10016FF88(v31);
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = *v46;
      if (v34)
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v50 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 264) = sub_100290514(v45, v5, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100170614(v35);
        sub_100170614(v35);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Forcibly deleting TLK for %s", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100170614(v35);
        sub_100170614(v35);
      }
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 344) = v42;
      *uint64_t v42 = v0;
      v42[1] = sub_10015709C;
      uint64_t v43 = *(void *)(v0 + 328);
      v42[20] = v43;
      return _swift_task_switch(sub_100151718, v43, 0);
    }
    else
    {

      unint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
      return v37(0);
    }
  }
  else
  {
    *(void *)(v0 + 368) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
    sub_10016FF88((uint64_t)v2);
    sub_10016FF88((uint64_t)v2);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    unint64_t v22 = *(uint64_t **)(v0 + 288);
    if (v21)
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)char v23 = 136315138;
      uint64_t v25 = *v22;
      unint64_t v24 = v22[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 248) = sub_100290514(v25, v24, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100170614((uint64_t)v22);
      sub_100170614((uint64_t)v22);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Creating TLK and self share for view %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100170614((uint64_t)v22);
      sub_100170614((uint64_t)v22);
    }
    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v39;
    *uint64_t v39 = v0;
    v39[1] = sub_1001572A8;
    uint64_t v40 = *(void *)(v0 + 304);
    uint64_t v41 = *(void *)(v0 + 288);
    return sub_100164764(v41, v40);
  }
}

uint64_t sub_10015709C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 352) = a1;
  *(void *)(v4 + 360) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 328);
  if (v1) {
    id v6 = sub_1001576E8;
  }
  else {
    id v6 = sub_1001571D0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1001571D0()
{
  uint64_t v2 = *(void **)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 360);
  id v3 = [*(id *)(v0 + 336) tlkUUID];
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v6 = v5;

  sub_1001842A0(v2, v4, v6);
  uint64_t v7 = *(void **)(v0 + 352);
  uint64_t v8 = *(void **)(v0 + 336);
  if (v1) {
    swift_errorRelease();
  }

  sub_10006D144(v4, v6);
  unint64_t v9 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v9(1);
}

uint64_t sub_1001572A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  unint64_t v5 = (void *)*v3;
  v4[48] = a1;
  v4[49] = a2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6(0);
  }
  else
  {
    uint64_t v8 = v4[41];
    return _swift_task_switch(sub_1001573F4, v8, 0);
  }
}

uint64_t sub_1001573F4()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  id v3 = *(void **)(v0[41] + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
  NSString v4 = String._bridgeToObjectiveC()();
  v0[50] = v4;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[51] = isa;
  v0[2] = v0;
  v0[3] = sub_100157548;
  uint64_t v6 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001BDDAC;
  v0[13] = &unk_1004131F8;
  v0[14] = v6;
  [v3 proposeTLKForView:v4 record:v2 selfShare:v1 altDSID:isa completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100157548()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 416) = v2;
  uint64_t v3 = *(void *)(v1 + 328);
  if (v2) {
    NSString v4 = sub_100157750;
  }
  else {
    NSString v4 = sub_100157668;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100157668()
{
  uint64_t v1 = *(void **)(v0 + 400);
  uint64_t v2 = *(void **)(v0 + 408);
  uint64_t v3 = *(void **)(v0 + 384);

  NSString v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(1);
}

uint64_t sub_1001576E8()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

uint64_t sub_100157750()
{
  BOOL v14 = v0;
  uint64_t v1 = (void *)v0[51];
  uint64_t v2 = (void *)v0[50];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[30] = sub_100290514(v6, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to propose TLK : %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v9 = (void *)v0[48];
  uint64_t v8 = (void *)v0[49];
  sub_10016FF34();
  swift_allocError();
  *id v10 = 22;
  swift_willThrow();
  swift_errorRelease();

  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11(0);
}

uint64_t sub_10015798C(uint64_t a1, uint64_t a2)
{
  v3[28] = a2;
  v3[29] = v2;
  v3[27] = a1;
  return _swift_task_switch(sub_100157A20, v2, 0);
}

uint64_t sub_100157A20()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(v0[27] + 16);
  v0[30] = v1;
  uint64_t v47 = v1;
  if (!v1)
  {
LABEL_12:
    unint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24(0);
  }
  v0[31] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  uint64_t v45 = v0 + 10;
  swift_bridgeObjectRetain();
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v48 = v0;
  while (1)
  {
    v0[32] = v3;
    if (v47 == v3)
    {
      __break(1u);
      goto LABEL_23;
    }
    os_log_type_t v4 = (void *)(v0[27] + v2);
    uint64_t v6 = v4[4];
    unint64_t v5 = v4[5];
    v0[33] = v5;
    uint64_t v7 = v4[6];
    v0[34] = v7;
    unint64_t v8 = v4[7];
    v0[35] = v8;
    uint64_t v9 = (void *)v4[9];
    v0[36] = v9;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v7, v8);
    id v10 = v9;
    id v11 = [v10 currentTLK];
    v0[37] = v11;
    if (!v11)
    {
      swift_bridgeObjectRetain();
      sub_10006D0EC(v7, v8);
      swift_bridgeObjectRetain();
      sub_10006D0EC(v7, v8);
      BOOL v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v46 = v6;
        uint64_t v23 = swift_slowAlloc();
        v49[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v23 + 4) = sub_100290514(v46, v5, v49);
        swift_bridgeObjectRelease_n();
        sub_10006D144(v7, v8);
        swift_bridgeObjectRelease();
        sub_10006D144(v7, v8);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "View %s doesn't have a TLK?", (uint8_t *)v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v0 = v48;
        swift_slowDealloc();

        swift_bridgeObjectRelease();
        sub_10006D144(v7, v8);
      }
      else
      {

        swift_bridgeObjectRelease();
        sub_10006D144(v7, v8);

        swift_bridgeObjectRelease();
        sub_10006D144(v7, v8);
        swift_bridgeObjectRelease();
        sub_10006D144(v7, v8);
      }
      goto LABEL_4;
    }
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    unint64_t v14 = v8;
    uint64_t v15 = v7;
    id v16 = v11;
    id v17 = v10;
    uint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = sub_10016D1C8(v18, v16, v17);
    v48[38] = v19;

    uint64_t v0 = v48;
    swift_bridgeObjectRelease();
    uint64_t v20 = v19[2];
    v48[39] = v20;
    if (v20) {
      break;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_10006D144(v15, v14);
    uint64_t v2 = v13;
    uint64_t v3 = v12;
LABEL_4:
    ++v3;
    v2 += 48;
    if (v3 == v0[30])
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    long long v28 = (uint8_t *)swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)long long v28 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v29 = Array.description.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    *uint64_t v45 = sub_100290514(v29, v31, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removing stale TLKs %s", v28, 0xCu);
    swift_arrayDestroy();
    uint64_t v0 = v48;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v32 = self;
  v0[40] = v32;
  v0[41] = 0;
  v0[42] = 0;
  os_log_type_t v33 = (void *)v0[38];
  if (!v33[2]) {
LABEL_23:
  }
    __break(1u);
  uint64_t v34 = v32;
  uint64_t v35 = v33[4];
  v0[43] = v35;
  unint64_t v36 = v33[5];
  v0[44] = v36;
  uint64_t v37 = v33[6];
  v0[45] = v37;
  unint64_t v38 = v33[7];
  v0[46] = v38;
  uint64_t v39 = v33[8];
  v0[47] = v39;
  unint64_t v40 = v33[9];
  v0[48] = v40;
  uint64_t v41 = v33[10];
  v0[49] = v41;
  unint64_t v42 = v33[11];
  v0[50] = v42;
  sub_10006D0EC(v35, v36);
  sub_10006D0EC(v37, v38);
  sub_10006D0EC(v39, v40);
  sub_10006D0EC(v41, v42);
  NSString v43 = String._bridgeToObjectiveC()();
  v0[51] = v43;
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_1001580D8;
  uint64_t v44 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10016999C;
  v0[13] = &unk_1004131E0;
  v0[14] = v44;
  sub_100058540(v34, v43, v45);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001580D8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 416) = v2;
  uint64_t v3 = *(void *)(v1 + 232);
  if (v2) {
    os_log_type_t v4 = sub_100159084;
  }
  else {
    os_log_type_t v4 = sub_100158224;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100158224()
{
  uint64_t v114 = v0;
  uint64_t v1 = (char *)v0[21];

  uint64_t v2 = sub_10006C51C(&qword_1004545C0);
  v0[13] = v2;
  uint64_t v3 = sub_10008C0B0((unint64_t *)&qword_1004545C8, &qword_1004545C0);
  v0[10] = &off_10040EF60;
  os_log_type_t v4 = (void **)(v0 + 10);
  unint64_t v5 = v0 + 23;
  v0[14] = v3;
  uint64_t v6 = sub_100075908(v0 + 10, v2);
  uint64_t v7 = *v6;
  size_t v8 = *(void *)(*v6 + 16);
  unint64_t v109 = v1;
  if (v8)
  {
    if (v8 <= 0xE)
    {
      *(void *)((char *)v0 + 190) = 0;
      *unint64_t v5 = 0;
      *((unsigned char *)v0 + 198) = v8;
      memcpy(v0 + 23, (const void *)(v7 + 32), v8);
      uint64_t v11 = v0[23];
      unint64_t v12 = *((unsigned int *)v0 + 48) | ((unint64_t)*((unsigned __int8 *)v0 + 196) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 197) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 198) << 48);
    }
    else
    {
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v9 = __DataStorage.init(bytes:length:)();
      uint64_t v10 = v9;
      if (v8 >= 0x7FFFFFFF)
      {
        type metadata accessor for Data.RangeReference();
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = 0;
        *(void *)(v11 + 24) = v8;
        unint64_t v12 = v10 | 0x8000000000000000;
      }
      else
      {
        uint64_t v11 = v8 << 32;
        unint64_t v12 = v9 | 0x4000000000000000;
      }
    }
  }
  else
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0xC000000000000000;
  }
  uint64_t v13 = v0[43];
  uint64_t v14 = v0[44];
  sub_10007594C((uint64_t)(v0 + 10));
  v0[11] = v14;
  v0[21] = v11;
  v0[22] = v12;
  v0[13] = &type metadata for Data;
  v0[14] = &protocol witness table for Data;
  v0[10] = v13;
  uint64_t v15 = sub_100075908(v0 + 10, (uint64_t)&type metadata for Data);
  uint64_t v17 = *v15;
  unint64_t v16 = v15[1];
  uint64_t v111 = v0;
  unint64_t v104 = v0 + 10;
  uint64_t v105 = v0 + 21;
  switch(v16 >> 62)
  {
    case 1uLL:
      if (v17 >> 32 < (int)v17) {
        goto LABEL_58;
      }
      uint64_t v21 = v0[43];
      unint64_t v20 = v0[44];
      sub_10006D0EC(v21, v20);
      sub_10006D0EC(v21, v20);
      sub_10006D0EC(v11, v12);
      sub_10006D0EC(v17, v16);
      if (__DataStorage._bytes.getter())
      {
        if (__OFSUB__((int)v17, __DataStorage._offset.getter())) {
          goto LABEL_61;
        }
        os_log_type_t v4 = (void **)(v0 + 10);
      }
      else
      {
        os_log_type_t v4 = (void **)(v0 + 10);
      }
      __DataStorage._length.getter();
      Data._Representation.append(contentsOf:)();
      sub_10006D144(v17, v16);
LABEL_22:
      long long v28 = v109;
      uint64_t v29 = v0[43];
      unint64_t v30 = v0[44];
      sub_10007594C((uint64_t)v4);
      sub_10006D144(v29, v30);
      sub_10006D144(v11, v12);
      uint64_t v32 = v0[21];
      unint64_t v31 = v0[22];
      if (qword_100453718 != -1) {
LABEL_56:
      }
        swift_once();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v34 = sub_100056638(v28, isa);

      if (v34) {
        goto LABEL_24;
      }
      Class v47 = Data._bridgeToObjectiveC()().super.isa;
      *os_log_type_t v4 = 0;
      id v48 = sub_100056104(v28, v47, v4);

      unint64_t v49 = *v4;
      if (v48)
      {
        uint64_t v106 = v0[49];
        unint64_t v107 = v0[50];
        uint64_t v50 = v0[47];
        unint64_t v103 = v0[48];
        unint64_t v51 = v0[46];
        uint64_t v52 = v111[45];
        unint64_t v53 = v111[44];
        uint64_t v54 = v111[43];
        id v55 = v49;

        sub_10006D144(v32, (unint64_t)v31);
        sub_10006D144(v54, v53);
        uint64_t v0 = v111;
        sub_10006D144(v52, v51);
        sub_10006D144(v50, v103);
        sub_10006D144(v106, v107);

        unint64_t v109 = (char *)v111[41];
      }
      else
      {
        id v83 = v49;
        _convertNSErrorToError(_:)();

LABEL_24:
        swift_willThrow();
        sub_10006D144(v32, (unint64_t)v31);

        swift_errorRetain();
        swift_errorRetain();
        uint64_t v35 = Logger.logObject.getter();
        os_log_type_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          uint64_t v37 = swift_slowAlloc();
          v113[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 136315138;
          swift_getErrorValue();
          uint64_t v38 = Error.localizedDescription.getter();
          *(void *)(v37 + 4) = sub_100290514(v38, v39, v113);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to delete stale TLK : %s", (uint8_t *)v37, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_errorRelease();
          swift_errorRelease();
        }
        uint64_t v40 = v0[49];
        unint64_t v110 = v0[50];
        unint64_t v41 = v0[48];
        uint64_t v42 = v111[47];
        unint64_t v43 = v111[46];
        uint64_t v44 = v111[45];
        unint64_t v45 = v111[44];
        uint64_t v46 = v111[43];
        sub_100164280(32, 0);
        sub_10006D144(v46, v45);
        sub_10006D144(v44, v43);
        uint64_t v0 = v111;
        sub_10006D144(v42, v41);
        sub_10006D144(v40, v110);
        swift_errorRelease();
        unint64_t v109 = 0;
      }
      unint64_t v56 = v0[42] + 1;
      if (v56 != v0[39]) {
        goto LABEL_51;
      }
      id v57 = (void *)v0[37];
      unint64_t v31 = v0[35];
      unint64_t v58 = (void *)v0[36];
      uint64_t v32 = v0[33];
      uint64_t v59 = v0[34];
      uint64_t v60 = v0[32];
      uint64_t v61 = v0[30];
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      sub_10006D144(v59, (unint64_t)v31);
      if (v60 + 1 == v61)
      {
LABEL_43:
        swift_bridgeObjectRelease();
        uint64_t v81 = (uint64_t (*)(uint64_t))v0[1];
        return v81(1);
      }
      uint64_t v62 = v0[32];
      long long v28 = (char *)(v62 + 1);
      unint64_t v63 = v0[30];
      if (v62 + 1 > v63) {
        unint64_t v63 = v62 + 1;
      }
      unint64_t v108 = (char *)v63;
      os_log_type_t v4 = (void **)(48 * v62 + 120);
      while (1)
      {
        v0[32] = v28;
        if (v108 == v28)
        {
          __break(1u);
          goto LABEL_56;
        }
        uint64_t v64 = (void **)((char *)v4 + v0[27]);
        uint64_t v65 = (uint64_t)*(v64 - 5);
        unint64_t v66 = (unint64_t)*(v64 - 4);
        v0[33] = v66;
        uint64_t v67 = (uint64_t)*(v64 - 3);
        v0[34] = v67;
        unint64_t v68 = (unint64_t)*(v64 - 2);
        v0[35] = v68;
        uint64_t v69 = *v64;
        v0[36] = *v64;
        swift_bridgeObjectRetain();
        sub_10006D0EC(v67, v68);
        id v70 = v69;
        id v71 = [v70 currentTLK];
        v0[37] = v71;
        if (!v71)
        {
          swift_bridgeObjectRetain();
          sub_10006D0EC(v67, v68);
          swift_bridgeObjectRetain();
          sub_10006D0EC(v67, v68);
          unint64_t v31 = Logger.logObject.getter();
          os_log_type_t v78 = static os_log_type_t.error.getter();
          uint64_t v32 = v78;
          if (os_log_type_enabled(v31, v78))
          {
            uint64_t v79 = v65;
            uint64_t v80 = swift_slowAlloc();
            v113[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v80 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v80 + 4) = sub_100290514(v79, v66, v113);
            swift_bridgeObjectRelease_n();
            sub_10006D144(v67, v68);
            swift_bridgeObjectRelease();
            sub_10006D144(v67, v68);
            _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "View %s doesn't have a TLK?", (uint8_t *)v80, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v0 = v111;
            swift_slowDealloc();

            swift_bridgeObjectRelease();
            sub_10006D144(v67, v68);
          }
          else
          {

            swift_bridgeObjectRelease();
            sub_10006D144(v67, v68);

            swift_bridgeObjectRelease();
            sub_10006D144(v67, v68);
            swift_bridgeObjectRelease();
            sub_10006D144(v67, v68);
          }
          goto LABEL_36;
        }
        uint64_t v32 = (uint64_t)v28;
        uint64_t v72 = v4;
        unint64_t v73 = v68;
        unint64_t v31 = v71;
        id v74 = v70;
        uint64_t v75 = swift_bridgeObjectRetain();
        char v76 = sub_10016D1C8(v75, v31, v74);
        v111[38] = v76;

        uint64_t v0 = v111;
        swift_bridgeObjectRelease();
        uint64_t v77 = v76[2];
        v111[39] = v77;
        if (v77) {
          break;
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        sub_10006D144(v67, v73);
        os_log_type_t v4 = v72;
        long long v28 = (char *)v32;
LABEL_36:
        ++v28;
        v4 += 6;
        if (v28 == (char *)v0[30]) {
          goto LABEL_43;
        }
      }
      swift_bridgeObjectRetain_n();
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v84, v85))
      {
        long long v86 = (uint8_t *)swift_slowAlloc();
        v113[0] = swift_slowAlloc();
        *(_DWORD *)long long v86 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v87 = Array.description.getter();
        unint64_t v89 = v88;
        swift_bridgeObjectRelease();
        *unint64_t v104 = sub_100290514(v87, v89, v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v0 = v111;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "Removing stale TLKs %s", v86, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v90 = self;
      unint64_t v56 = 0;
      v0[40] = v90;
LABEL_51:
      v0[41] = v109;
      v0[42] = v56;
      uint64_t v91 = v0[38];
      if (v56 >= *(void *)(v91 + 16))
      {
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
      }
      uint64_t v112 = v0[40];
      unint64_t v92 = (void *)(v91 + 72 * v56);
      uint64_t v93 = v92[4];
      v0[43] = v93;
      unint64_t v94 = v92[5];
      v0[44] = v94;
      uint64_t v95 = v92[6];
      v0[45] = v95;
      unint64_t v96 = v92[7];
      v0[46] = v96;
      uint64_t v97 = v92[8];
      v0[47] = v97;
      unint64_t v98 = v92[9];
      v0[48] = v98;
      uint64_t v99 = v92[10];
      v0[49] = v99;
      unint64_t v100 = v92[11];
      v0[50] = v100;
      sub_10006D0EC(v93, v94);
      sub_10006D0EC(v95, v96);
      sub_10006D0EC(v97, v98);
      sub_10006D0EC(v99, v100);
      NSString v101 = String._bridgeToObjectiveC()();
      v0[51] = v101;
      v0[2] = v0;
      v0[7] = v105;
      v0[3] = sub_1001580D8;
      uint64_t v102 = swift_continuation_init();
      v0[10] = _NSConcreteStackBlock;
      v0[11] = 0x40000000;
      v0[12] = sub_10016999C;
      v0[13] = &unk_1004131E0;
      v0[14] = v102;
      sub_100058540(v112, v101, v104);
      return _swift_continuation_await(v0 + 2);
    case 2uLL:
      uint64_t v22 = v0[43];
      unint64_t v23 = v0[44];
      uint64_t v24 = *(void *)(v17 + 16);
      uint64_t v25 = *(void *)(v17 + 24);
      sub_10006D0EC(v22, v23);
      sub_10006D0EC(v22, v23);
      sub_10006D0EC(v11, v12);
      swift_retain();
      swift_retain();
      if (__DataStorage._bytes.getter() && __OFSUB__(v24, __DataStorage._offset.getter())) {
        goto LABEL_60;
      }
      if (__OFSUB__(v25, v24)) {
        goto LABEL_59;
      }
      __DataStorage._length.getter();
      Data._Representation.append(contentsOf:)();
      swift_release();
      swift_release();
      uint64_t v0 = v111;
      goto LABEL_22;
    case 3uLL:
      uint64_t v26 = v0[43];
      unint64_t v27 = v0[44];
      *unint64_t v5 = 0;
      *(void *)((char *)v0 + 190) = 0;
      sub_10006D0EC(v26, v27);
      sub_10006D0EC(v26, v27);
      sub_10006D0EC(v11, v12);
      goto LABEL_19;
    default:
      uint64_t v18 = v0[43];
      unint64_t v19 = v0[44];
      v0[23] = v17;
      *((_WORD *)v0 + 96) = v16;
      *((unsigned char *)v0 + 194) = BYTE2(v16);
      *((unsigned char *)v0 + 195) = BYTE3(v16);
      *((unsigned char *)v0 + 196) = BYTE4(v16);
      *((unsigned char *)v0 + 197) = BYTE5(v16);
      sub_10006D0EC(v18, v19);
      sub_10006D0EC(v18, v19);
      sub_10006D0EC(v11, v12);
LABEL_19:
      Data._Representation.append(contentsOf:)();
      goto LABEL_22;
  }
}

uint64_t sub_100159084()
{
  uint64_t v79 = v0;
  uint64_t v1 = (void *)v0[51];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  char v76 = v0;
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v4 + 4) = sub_100290514(v5, v6, v78);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get SE : %s", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v73 = v0 + 10;
  sub_10016FF34();
  swift_allocError();
  *uint64_t v7 = 4;
  swift_willThrow();
  swift_errorRelease();
  swift_errorRetain();
  swift_errorRetain();
  size_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    *(void *)(v10 + 4) = sub_100290514(v11, v12, v78);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to delete stale TLK : %s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v14 = v0[49];
  unint64_t v13 = v0[50];
  unint64_t v15 = v0[48];
  uint64_t v16 = v0[47];
  unint64_t v17 = v0[46];
  uint64_t v18 = v0[45];
  unint64_t v19 = v0[44];
  uint64_t v20 = v0[43];
  sub_100164280(32, 0);
  sub_10006D144(v20, v19);
  sub_10006D144(v18, v17);
  sub_10006D144(v16, v15);
  sub_10006D144(v14, v13);
  swift_errorRelease();
  unint64_t v21 = v0[42] + 1;
  if (v21 != v0[39]) {
    goto LABEL_10;
  }
  uint64_t v22 = (void *)v0[37];
  unint64_t v23 = v0[35];
  uint64_t v24 = (void *)v0[36];
  uint64_t v25 = v0[34];
  uint64_t v26 = v0[32];
  uint64_t v27 = v0[30];
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_10006D144(v25, v23);
  if (v26 + 1 == v27)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    uint64_t v64 = (uint64_t (*)(uint64_t))v0[1];
    return v64(1);
  }
  uint64_t v40 = v0[32];
  uint64_t v41 = v40 + 1;
  unint64_t v42 = v0[30];
  if (v40 + 1 > v42) {
    unint64_t v42 = v40 + 1;
  }
  unint64_t v75 = v42;
  uint64_t v43 = 48 * v40 + 120;
  while (1)
  {
    v0[32] = v41;
    if (v75 == v41)
    {
      __break(1u);
      goto LABEL_33;
    }
    uint64_t v44 = (void **)(v0[27] + v43);
    uint64_t v45 = (uint64_t)*(v44 - 5);
    unint64_t v46 = (unint64_t)*(v44 - 4);
    v0[33] = v46;
    uint64_t v47 = (uint64_t)*(v44 - 3);
    v0[34] = v47;
    unint64_t v48 = (unint64_t)*(v44 - 2);
    v0[35] = v48;
    unint64_t v49 = *v44;
    v0[36] = *v44;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v47, v48);
    id v50 = v49;
    id v51 = [v50 currentTLK];
    v0[37] = v51;
    if (!v51)
    {
      swift_bridgeObjectRetain();
      sub_10006D0EC(v47, v48);
      swift_bridgeObjectRetain();
      sub_10006D0EC(v47, v48);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v74 = v47;
        uint64_t v63 = swift_slowAlloc();
        v78[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v63 + 4) = sub_100290514(v45, v46, v78);
        swift_bridgeObjectRelease_n();
        sub_10006D144(v74, v48);
        swift_bridgeObjectRelease();
        sub_10006D144(v74, v48);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "View %s doesn't have a TLK?", (uint8_t *)v63, 0xCu);
        swift_arrayDestroy();
        uint64_t v0 = v76;
        swift_slowDealloc();
        swift_slowDealloc();

        swift_bridgeObjectRelease();
        sub_10006D144(v74, v48);
      }
      else
      {

        swift_bridgeObjectRelease();
        sub_10006D144(v47, v48);

        swift_bridgeObjectRelease();
        sub_10006D144(v47, v48);
        swift_bridgeObjectRelease();
        sub_10006D144(v47, v48);
      }
      goto LABEL_18;
    }
    uint64_t v52 = v41;
    uint64_t v53 = v43;
    unint64_t v54 = v48;
    uint64_t v55 = v47;
    id v56 = v51;
    id v57 = v50;
    uint64_t v58 = swift_bridgeObjectRetain();
    uint64_t v59 = sub_10016D1C8(v58, v56, v57);
    v76[38] = v59;

    uint64_t v0 = v76;
    swift_bridgeObjectRelease();
    uint64_t v60 = v59[2];
    v76[39] = v60;
    if (v60) {
      break;
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    sub_10006D144(v55, v54);
    uint64_t v43 = v53;
    uint64_t v41 = v52;
LABEL_18:
    ++v41;
    v43 += 48;
    if (v41 == v0[30]) {
      goto LABEL_25;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = (uint8_t *)swift_slowAlloc();
    v78[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v67 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v68 = Array.description.getter();
    unint64_t v70 = v69;
    swift_bridgeObjectRelease();
    v76[10] = sub_100290514(v68, v70, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v65, v66, "Removing stale TLKs %s", v67, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v0 = v76;
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v71 = self;
  unint64_t v21 = 0;
  v0[40] = v71;
LABEL_10:
  v0[41] = 0;
  v0[42] = v21;
  uint64_t v28 = v0[38];
  if (v21 >= *(void *)(v28 + 16)) {
LABEL_33:
  }
    __break(1u);
  uint64_t v29 = (void *)(v28 + 72 * v21);
  uint64_t v77 = v0[40];
  uint64_t v30 = v29[4];
  v0[43] = v30;
  unint64_t v31 = v29[5];
  v0[44] = v31;
  uint64_t v32 = v29[6];
  v0[45] = v32;
  unint64_t v33 = v29[7];
  v0[46] = v33;
  uint64_t v34 = v29[8];
  v0[47] = v34;
  unint64_t v35 = v29[9];
  v0[48] = v35;
  uint64_t v36 = v29[10];
  v0[49] = v36;
  unint64_t v37 = v29[11];
  v0[50] = v37;
  sub_10006D0EC(v30, v31);
  sub_10006D0EC(v32, v33);
  sub_10006D0EC(v34, v35);
  sub_10006D0EC(v36, v37);
  NSString v38 = String._bridgeToObjectiveC()();
  v0[51] = v38;
  v0[2] = v0;
  v0[7] = v0 + 21;
  v0[3] = sub_1001580D8;
  uint64_t v39 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_10016999C;
  v0[13] = &unk_1004131E0;
  v0[14] = v39;
  sub_100058540(v77, v38, v73);
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100159B20(int a1, id a2, uint64_t a3)
{
  id v4 = [a2 currentTLK];

  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)a3 + 16);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    uint64_t v11 = *(v6 - 2);
    unint64_t v10 = *(v6 - 1);
    uint64_t v13 = *v6;
    unint64_t v12 = v6[1];
    uint64_t v14 = v6[2];
    unint64_t v9 = v6[3];
    uint64_t v8 = v6[4];
    unint64_t v7 = v6[5];
    sub_10006D0EC(v11, v10);
    unint64_t v42 = v12;
    sub_10006D0EC(v13, v12);
    sub_10006D0EC(v14, v9);
    sub_10006D0EC(v8, v7);
    id v15 = [a2 currentTLK];
    if (v15) {
      break;
    }
    sub_10006D0EC(v11, v10);
    sub_100075868(0, 0xF000000000000000);
    sub_100075868(v11, v10);
LABEL_6:
    sub_10006D144(v11, v10);
    sub_10006D144(v13, v42);
    sub_10006D144(v14, v9);
    sub_10006D144(v8, v7);
LABEL_7:
    v6 += 9;
    if (!--v5)
    {
      uint64_t v34 = 1;
      goto LABEL_45;
    }
  }
  uint64_t v16 = v15;
  unint64_t v40 = v7;
  uint64_t v41 = v14;
  unint64_t v38 = v9;
  uint64_t v39 = v8;
  id v17 = [v15 tlkUUID];

  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  uint64_t v21 = 0;
  switch(v20 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v18), v18))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
      }
      uint64_t v21 = HIDWORD(v18) - (int)v18;
LABEL_15:
      sub_10006D0EC(v18, v20);
      break;
    case 2uLL:
      uint64_t v23 = *(void *)(v18 + 16);
      uint64_t v22 = *(void *)(v18 + 24);
      uint64_t v21 = v22 - v23;
      if (!__OFSUB__(v22, v23)) {
        goto LABEL_15;
      }
      goto LABEL_48;
    case 3uLL:
      break;
    default:
      uint64_t v21 = BYTE6(v20);
      break;
  }
  switch(v10 >> 62)
  {
    case 1uLL:
      LODWORD(v24) = HIDWORD(v11) - v11;
      if (__OFSUB__(HIDWORD(v11), v11)) {
        goto LABEL_49;
      }
      uint64_t v24 = (int)v24;
LABEL_21:
      if (v21 != v24)
      {
LABEL_5:
        sub_10006D144(v18, v20);
        sub_10006D144(v18, v20);
        uint64_t v8 = v39;
        unint64_t v7 = v40;
        unint64_t v9 = v38;
        goto LABEL_6;
      }
      if (v21 >= 1)
      {
        switch(v20 >> 62)
        {
          case 1uLL:
            if (v18 >> 32 < (int)v18) {
              goto LABEL_51;
            }
            sub_10006D0EC(v18, v20);
            sub_10006D0EC(v11, v10);
            uint64_t v28 = __DataStorage._bytes.getter();
            if (!v28) {
              goto LABEL_29;
            }
            uint64_t v29 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v18, v29)) {
              goto LABEL_54;
            }
            v28 += (int)v18 - v29;
LABEL_29:
            __DataStorage._length.getter();
            sub_1001E5240(v28, v11, v10, (char *)__s1);
            sub_10006D144(v18, v20);
            sub_10006D144(v11, v10);
            sub_10006D144(v18, v20);
            sub_10006D144(v18, v20);
            sub_10006D144(v11, v10);
            sub_10006D144(v13, v42);
            sub_10006D144(v14, v38);
            sub_10006D144(v39, v40);
            if (__s1[0]) {
              goto LABEL_44;
            }
            goto LABEL_7;
          case 2uLL:
            uint64_t v30 = *(void *)(v18 + 16);
            uint64_t v36 = *(void *)(v18 + 24);
            sub_10006D0EC(v11, v10);
            swift_retain();
            swift_retain();
            uint64_t v31 = __DataStorage._bytes.getter();
            if (!v31) {
              goto LABEL_34;
            }
            uint64_t v32 = __DataStorage._offset.getter();
            if (__OFSUB__(v30, v32)) {
              goto LABEL_53;
            }
            v31 += v30 - v32;
LABEL_34:
            if (__OFSUB__(v36, v30)) {
              goto LABEL_52;
            }
            __DataStorage._length.getter();
            sub_1001E5240(v31, v11, v10, (char *)__s1);
            swift_release();
            swift_release();
            sub_10006D144(v11, v10);
            sub_10006D144(v18, v20);
            sub_10006D144(v18, v20);
            char v33 = __s1[0];
            sub_10006D144(v11, v10);
            sub_10006D144(v13, v42);
            sub_10006D144(v41, v38);
            sub_10006D144(v39, v40);
            if (v33) {
              goto LABEL_44;
            }
            goto LABEL_7;
          case 3uLL:
            memset(__s1, 0, 14);
            sub_10006D0EC(v11, v10);
            goto LABEL_38;
          default:
            __s1[0] = v18;
            LOWORD(__s1[1]) = v20;
            BYTE2(__s1[1]) = BYTE2(v20);
            BYTE3(__s1[1]) = BYTE3(v20);
            BYTE4(__s1[1]) = BYTE4(v20);
            BYTE5(__s1[1]) = BYTE5(v20);
            sub_10006D0EC(v11, v10);
LABEL_38:
            sub_1001E5240((uint64_t)__s1, v11, v10, &v43);
            sub_10006D144(v11, v10);
            sub_10006D144(v18, v20);
            sub_10006D144(v18, v20);
            sub_10006D144(v11, v10);
            sub_10006D144(v13, v42);
            sub_10006D144(v14, v38);
            sub_10006D144(v39, v40);
            if (v43) {
              goto LABEL_44;
            }
            goto LABEL_7;
        }
      }
LABEL_43:
      sub_10006D144(v18, v20);
      sub_10006D144(v18, v20);
      sub_10006D144(v11, v10);
      sub_10006D144(v13, v42);
      sub_10006D144(v14, v38);
      sub_10006D144(v39, v40);
LABEL_44:
      uint64_t v34 = 0;
LABEL_45:
      swift_bridgeObjectRelease();
      return v34;
    case 2uLL:
      uint64_t v26 = *(void *)(v11 + 16);
      uint64_t v25 = *(void *)(v11 + 24);
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_21;
      }
      goto LABEL_50;
    case 3uLL:
      if (v21) {
        goto LABEL_5;
      }
      goto LABEL_43;
    default:
      uint64_t v24 = BYTE6(v10);
      goto LABEL_21;
  }
}

uint64_t sub_10015A1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[33] = a8;
  v9[34] = v8;
  v9[31] = a6;
  v9[32] = a7;
  v9[29] = a4;
  v9[30] = a5;
  v9[27] = a2;
  v9[28] = a3;
  v9[26] = a1;
  uint64_t v10 = *(void *)(type metadata accessor for SESPeerIdentityData(0) - 8);
  v9[35] = v10;
  v9[36] = *(void *)(v10 + 64);
  v9[37] = swift_task_alloc();
  sub_10006C51C(&qword_100455C60);
  v9[38] = swift_task_alloc();
  type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
  v9[39] = swift_task_alloc();
  return _swift_task_switch(sub_10015A2D0, v8, 0);
}

uint64_t sub_10015A2D0()
{
  uint64_t v49 = v0;
  id v1 = [*(id *)(v0 + 224) currentTLK];
  *(void *)(v0 + 320) = v1;
  if (v1)
  {
    uint64_t v2 = v1;
    if (sub_1001667E8(*(void *)(v0 + 208), *(void *)(v0 + 216), *(void **)(v0 + 224), *(void *)(v0 + 232), *(void *)(v0 + 240)))
    {
      uint64_t v47 = v2;
      id v3 = [*(id *)(v0 + 224) currentTLK];
      if (!v3)
      {
        __break(1u);
        return _swift_continuation_await(0);
      }
      id v4 = v3;
      uint64_t v5 = *(void *)(v0 + 312);
      uint64_t v6 = *(void *)(v0 + 256);
      unint64_t v45 = *(void *)(v0 + 264);
      uint64_t v7 = *(void *)(v0 + 208);
      uint64_t v8 = *(void *)(v0 + 216);
      id v9 = [v3 tlkUUID];

      uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      sub_1001B34D8(v7, v8, v10, v12, v6, v45, v5);
      sub_100170490(*(void *)(v0 + 312), (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
      sub_10006D144(v10, (unint64_t)v12);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      unint64_t v21 = *(void *)(v0 + 216);
      if (v20)
      {
        uint64_t v22 = *(void *)(v0 + 208);
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 200) = sub_100290514(v22, v21, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Detaching a recovery request for view %s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      uint64_t v25 = *(void *)(v0 + 296);
      uint64_t v24 = *(void *)(v0 + 304);
      uint64_t v40 = *(void *)(v0 + 288);
      uint64_t v41 = v24;
      uint64_t v39 = *(void *)(v0 + 280);
      uint64_t v42 = *(void *)(v0 + 272);
      uint64_t v43 = *(void *)(v0 + 256);
      uint64_t v26 = *(void *)(v0 + 240);
      uint64_t v44 = *(void **)(v0 + 248);
      unint64_t v46 = *(void *)(v0 + 264);
      Swift::Int v28 = *(void *)(v0 + 216);
      BOOL v27 = *(void **)(v0 + 224);
      Swift::Int v29 = *(void *)(v0 + 208);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      sub_1000EAD74(&v48, v29, v28);
      swift_endAccess();
      swift_bridgeObjectRelease();
      uint64_t v30 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v24, 1, 1, v30);
      sub_10017092C(v26, v25, type metadata accessor for SESPeerIdentityData);
      unint64_t v31 = (*(unsigned __int8 *)(v39 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      unint64_t v32 = (v40 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v34 = (void *)swift_allocObject();
      v34[2] = 0;
      v34[3] = 0;
      v34[4] = v29;
      v34[5] = v28;
      v34[6] = v27;
      sub_1001705AC(v25, (uint64_t)v34 + v31, type metadata accessor for SESPeerIdentityData);
      unint64_t v35 = (void *)((char *)v34 + v32);
      uint64_t *v35 = v43;
      v35[1] = v46;
      *(void *)((char *)v34 + v33) = v44;
      *(void *)((char *)v34 + ((v33 + 15) & 0xFFFFFFFFFFFFFFF8)) = v42;
      swift_bridgeObjectRetain();
      id v36 = v27;
      sub_10006D0EC(v43, v46);
      id v37 = v44;
      swift_retain();
      sub_100168448(v41, (uint64_t)&unk_1004564B0, (uint64_t)v34);

      swift_release();
      sub_10008E734(v41, &qword_100455C60);
    }
    else
    {
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Recovery but TLK is not set?", v15, 2u);
      swift_slowDealloc();
    }

    sub_10016FF34();
    swift_allocError();
    *uint64_t v16 = 27;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v17();
}

uint64_t sub_10015AB60()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 352) = v2;
  uint64_t v3 = *(void *)(v1 + 272);
  if (v2) {
    id v4 = sub_10015AD5C;
  }
  else {
    id v4 = sub_10015AC80;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10015AC80()
{
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 272);

  *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_requiresResync) = 1;
  uint64_t v3 = *(void **)(v0 + 320);
  sub_10016FF34();
  swift_allocError();
  *id v4 = 17;
  swift_willThrow();

  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_10015AD5C()
{
  uint64_t v13 = v0;
  uint64_t v1 = (void *)v0[43];
  uint64_t v2 = (void *)v0[42];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[23] = sub_100290514(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to delete SE View? %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = (void *)v0[40];
  sub_10016FF34();
  swift_allocError();
  *id v9 = 34;
  swift_willThrow();

  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

void sub_10015AFB0(id a1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v55 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 32);
  id v56 = [a1 currentTLK];
  if (!v56)
  {
    uint64_t v11 = 0;
LABEL_38:
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    goto LABEL_42;
  }
  uint64_t v51 = v9;
  id v52 = a1;
  uint64_t v53 = v8;
  uint64_t v11 = *(void *)(*(void *)a3 + 16);
  if (!v11)
  {

    goto LABEL_38;
  }
  uint64_t v50 = a4;
  uint64_t v48 = v10 & 1;
  uint64_t v49 = v7;
  uint64_t v12 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (2)
  {
    uint64_t v57 = v11;
    uint64_t v14 = *(v12 - 2);
    unint64_t v13 = *(v12 - 1);
    uint64_t v16 = *v12;
    unint64_t v15 = v12[1];
    uint64_t v17 = v12[2];
    unint64_t v18 = v12[3];
    uint64_t v20 = v12[4];
    unint64_t v19 = v12[5];
    sub_10006D0EC(v14, v13);
    unint64_t v58 = v15;
    sub_10006D0EC(v16, v15);
    uint64_t v59 = v17;
    unint64_t v60 = v18;
    sub_10006D0EC(v17, v18);
    uint64_t v61 = v20;
    unint64_t v62 = v19;
    sub_10006D0EC(v20, v19);
    id v21 = [v56 tlkUUID];
    uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    v12 += 9;
    uint64_t v25 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        LODWORD(v25) = HIDWORD(v14) - v14;
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
        }
        uint64_t v25 = (int)v25;
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(v14 + 16);
        uint64_t v26 = *(void *)(v14 + 24);
        BOOL v28 = __OFSUB__(v26, v27);
        uint64_t v25 = v26 - v27;
        if (!v28) {
          break;
        }
        goto LABEL_44;
      case 3uLL:
        break;
      default:
        uint64_t v25 = BYTE6(v13);
        break;
    }
    switch(v24 >> 62)
    {
      case 1uLL:
        LODWORD(v29) = HIDWORD(v22) - v22;
        if (__OFSUB__(HIDWORD(v22), v22)) {
          goto LABEL_45;
        }
        uint64_t v29 = (int)v29;
LABEL_17:
        if (v25 != v29)
        {
LABEL_5:
          sub_10006D144(v22, v24);
          sub_10006D144(v14, v13);
          sub_10006D144(v16, v15);
          sub_10006D144(v17, v60);
          sub_10006D144(v61, v62);
LABEL_6:
          uint64_t v11 = v57 - 1;
          if (v57 == 1)
          {

            swift_bridgeObjectRelease();
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            uint64_t v41 = 0;
            uint64_t v42 = 0;
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            a4 = v50;
            goto LABEL_42;
          }
          continue;
        }
        if (v25 >= 1)
        {
          switch(v13 >> 62)
          {
            case 1uLL:
              if (v14 >> 32 < (int)v14) {
                goto LABEL_47;
              }
              sub_10006D0EC(v14, v13);
              uint64_t v32 = __DataStorage._bytes.getter();
              if (!v32) {
                goto LABEL_25;
              }
              uint64_t v33 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v33)) {
                goto LABEL_49;
              }
              v32 += (int)v14 - v33;
LABEL_25:
              __DataStorage._length.getter();
              sub_1001E5240(v32, v22, v24, (char *)__s1);
              sub_10006D144(v14, v13);
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              uint64_t v35 = *(void *)(v14 + 24);
              swift_retain();
              swift_retain();
              uint64_t v36 = __DataStorage._bytes.getter();
              if (!v36) {
                goto LABEL_29;
              }
              uint64_t v37 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v37)) {
                goto LABEL_50;
              }
              v36 += v34 - v37;
LABEL_29:
              if (__OFSUB__(v35, v34)) {
                goto LABEL_48;
              }
              __DataStorage._length.getter();
              sub_1001E5240(v36, v22, v24, (char *)__s1);
              swift_release();
              swift_release();
              break;
            case 3uLL:
              memset(__s1, 0, 14);
              goto LABEL_34;
            default:
              __s1[0] = v14;
              LOWORD(__s1[1]) = v13;
              BYTE2(__s1[1]) = BYTE2(v13);
              BYTE3(__s1[1]) = BYTE3(v13);
              BYTE4(__s1[1]) = BYTE4(v13);
              BYTE5(__s1[1]) = BYTE5(v13);
LABEL_34:
              sub_1001E5240((uint64_t)__s1, v22, v24, &v63);
              sub_10006D144(v22, v24);
              sub_10006D144(v14, v13);
              sub_10006D144(v16, v15);
              sub_10006D144(v17, v60);
              sub_10006D144(v61, v62);
              if (v63) {
                goto LABEL_41;
              }
              goto LABEL_6;
          }
          sub_10006D144(v22, v24);
          sub_10006D144(v14, v13);
          sub_10006D144(v16, v58);
          sub_10006D144(v59, v60);
          sub_10006D144(v61, v62);
          if (__s1[0]) {
            goto LABEL_41;
          }
          goto LABEL_6;
        }
LABEL_40:
        sub_10006D144(v22, v24);
        sub_10006D144(v14, v13);
        sub_10006D144(v16, v15);
        sub_10006D144(v17, v60);
        sub_10006D144(v61, v62);
LABEL_41:
        swift_bridgeObjectRelease();
        id v45 = [v56 tlkUUID];
        uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v38 = v46;

        sub_10016FF88(a2);
        uint64_t v44 = (uint64_t)v52;
        id v47 = v52;
        a4 = v50;
        uint64_t v41 = v51;
        uint64_t v43 = v48;
        uint64_t v39 = v49;
        uint64_t v40 = v53;
        uint64_t v42 = v55;
LABEL_42:
        *a4 = v11;
        a4[1] = v38;
        a4[2] = v39;
        a4[3] = v40;
        a4[4] = v41;
        a4[5] = v42;
        a4[6] = v43;
        a4[7] = v44;
        return;
      case 2uLL:
        uint64_t v31 = *(void *)(v22 + 16);
        uint64_t v30 = *(void *)(v22 + 24);
        BOOL v28 = __OFSUB__(v30, v31);
        uint64_t v29 = v30 - v31;
        if (!v28) {
          goto LABEL_17;
        }
        goto LABEL_46;
      case 3uLL:
        if (v25) {
          goto LABEL_5;
        }
        goto LABEL_40;
      default:
        uint64_t v29 = BYTE6(v24);
        goto LABEL_17;
    }
  }
}

uint64_t sub_10015B594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[127] = v8;
  v9[126] = a8;
  v9[125] = a7;
  v9[124] = a6;
  v9[123] = a5;
  v9[122] = a4;
  v9[121] = a3;
  v9[120] = a2;
  v9[119] = a1;
  sub_10006C51C(&qword_100456480);
  v9[128] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SESPeerIdentityData(0);
  v9[129] = v10;
  v9[130] = *(void *)(v10 - 8);
  v9[131] = swift_task_alloc();
  v9[132] = swift_task_alloc();
  return _swift_task_switch(sub_10015B6E8, v8, 0);
}

uint64_t sub_10015B6E8()
{
  uint64_t v204 = v0;
  uint64_t v1 = *(void **)(v0 + 1000);
  uint64_t v2 = *(void **)(v0 + 992);
  unint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void *)(v0 + 968);
  id v5 = [v2 tlkShares];
  *(void *)(v0 + 1064) = sub_10007582C(0, &qword_100456488);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = (void *)swift_task_alloc();
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v1;
  *(void *)(v0 + 1072) = sub_1002B9DD0(sub_10016FEA4, v7, v6);
  swift_task_dealloc();
  *(void *)(v0 + 920) = _swiftEmptyArrayStorage;
  id v8 = [v2 tlkShares];
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v10 = (void *)swift_task_alloc();
  v10[2] = v4;
  v10[3] = v3;
  v10[4] = v1;
  char v11 = sub_100140F30(sub_10016FEC8, (uint64_t)v10, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  *(void *)(v0 + 1080) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  sub_10006D0EC(v4, v3);
  sub_10006D0EC(v4, v3);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t v196 = v13;
    uint64_t v1 = *(void **)(v0 + 976);
    uint64_t v14 = *(void *)(v0 + 968);
    uint64_t v15 = swift_slowAlloc();
    uint64_t v201 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    sub_10006D0EC(v14, (unint64_t)v1);
    sub_10023CC58(4, v14, (unint64_t)v1, &v202);
    char v198 = v11;
    uint64_t v17 = v202;
    unint64_t v16 = v203;
    *(void *)(v0 + 944) = sub_10023CDF4(v202, v203);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    unint64_t v18 = v12;
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    sub_10006D144(v17, v16);
    *(void *)(v0 + 728) = sub_100290514(v19, v21, &v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(v14, (unint64_t)v1);
    sub_10006D144(v14, (unint64_t)v1);
    *(_WORD *)(v15 + 12) = 1024;
    *(_DWORD *)(v0 + 1240) = v198 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v196, "Self share for %s present? %{BOOL}d", (uint8_t *)v15, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if ((v198 & 1) == 0)
    {
LABEL_3:
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 1088) = v22;
      *uint64_t v22 = v0;
      unint64_t v23 = sub_10015D838;
      goto LABEL_4;
    }
  }
  else
  {
    unint64_t v25 = *(void *)(v0 + 976);
    uint64_t v26 = *(void *)(v0 + 968);

    sub_10006D144(v26, v25);
    sub_10006D144(v26, v25);
    if ((v11 & 1) == 0) {
      goto LABEL_3;
    }
  }
  int64_t v27 = 0;
  sub_1001660E8((_OWORD *)(v0 + 288));
  unint64_t v28 = *(void *)(v0 + 1008);
  uint64_t v29 = *(void *)(v0 + 1000);
  uint64_t v30 = *(void *)(v0 + 992);
  uint64_t v31 = *(void *)(v0 + 976);
  unint64_t v32 = *(void *)(v0 + 968);
  uint64_t v33 = *(void *)(v0 + 304);
  unint64_t v34 = *(void *)(v0 + 312);
  *(void *)(v0 + 1112) = v33;
  *(void *)(v0 + 1120) = v34;
  sub_10006D0EC(v33, v34);
  sub_1001706B4((uint64_t *)(v0 + 288), (void (*)(uint64_t, uint64_t))sub_10006D144);
  uint64_t inited = (void *)swift_task_alloc();
  inited[2] = v30;
  inited[3] = v32;
  inited[4] = v31;
  inited[5] = v29;
  swift_bridgeObjectRetain();
  unint64_t v36 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_10016FEEC, inited, v28);
  *(void *)(v0 + 1128) = v36;
  swift_task_dealloc();
  if (v36 >> 62) {
    goto LABEL_164;
  }
  for (uint64_t i = *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10); ; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v176 = (void *)(v0 + 848);
    *(void *)(v0 + 1136) = i;
    if (!i) {
      goto LABEL_99;
    }
    unint64_t v38 = 0;
    uint64_t v182 = (uint64_t *)(v0 + 352);
    unint64_t v170 = (uint64_t *)(v0 + 832);
    uint64_t v194 = (unint64_t *)(v0 + 808);
    unint64_t v195 = v0 + 704;
    uint64_t v177 = (uint64_t *)(v0 + 824);
LABEL_16:
    uint64_t v39 = *(void *)(v0 + 1128);
    if ((v39 & 0xC000000000000001) != 0)
    {
      uint64_t v40 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v38 >= *(void *)((v39 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        __break(1u);
        __break(1u);
        goto LABEL_126;
      }
      uint64_t v40 = *(id *)(v39 + 8 * v38 + 32);
    }
    uint64_t v1 = v40;
    *(void *)(v0 + 1144) = v40;
    *(void *)(v0 + 1152) = v38 + 1;
    if (__OFADD__(v38, 1))
    {
      __break(1u);
LABEL_118:
      if (__OFSUB__(HIDWORD(v32), v32))
      {
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        goto LABEL_193;
      }
      uint64_t v29 = HIDWORD(v32) - (int)v32;
LABEL_121:
      if (!v29)
      {
LABEL_150:
        uint64_t v200 = *(void *)(v0 + 1048);
        unint64_t v159 = *(void *)(v0 + 976);
        uint64_t v160 = *(void *)(v0 + 968);
        *(void *)(v0 + 856) = v1;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v161 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v163 = v162;
        swift_bridgeObjectRelease();
        sub_10006D144(v32, v195);
        *(void *)(v0 + 864) = sub_100290514(v161, v163, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v160, v159);
        sub_10006D144(v160, v159);
        *(_WORD *)(v178 + 12) = 2080;
        unint64_t v164 = sub_10023E134();
        *(void *)(v0 + 872) = sub_100290514(v164, v165, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100170490(v200, type metadata accessor for SESPeerIdentityData);
        _os_log_impl((void *)&_mh_execute_header, v179, (os_log_type_t)v177, "KeySyncManager: Sharing TLK %s to %s)", (uint8_t *)v178, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_151;
      }
      unint64_t v82 = v0 + 848;
      *uint64_t v176 = v1;
      sub_1002CF974(0, v29 & ~(v29 >> 63), 0);
      uint64_t v1 = (void *)*v176;
      uint64_t v194 = (unint64_t *)(int)v32;
      if (inited)
      {
        if (inited == 1) {
          uint64_t v145 = (int)v32;
        }
        else {
          uint64_t v145 = *(void *)(v32 + 16);
        }
        if ((v29 & 0x8000000000000000) == 0)
        {
LABEL_130:
          uint64_t v193 = (uint64_t)v32 >> 32;
          unint64_t v192 = v32 >> 8;
          unint64_t v190 = v32 >> 24;
          unint64_t v191 = v32 >> 16;
          unint64_t v188 = v32 >> 40;
          unint64_t v189 = HIDWORD(v32);
          unint64_t v186 = HIWORD(v32);
          unint64_t v184 = HIBYTE(v32);
          int v197 = (int)inited;
          unint64_t v199 = v32;
          while (v29)
          {
            if (inited)
            {
              if (inited == 1)
              {
                if (v145 < (uint64_t)v194 || v145 >= v193) {
                  goto LABEL_179;
                }
                uint64_t v146 = __DataStorage._bytes.getter();
                if (!v146) {
                  goto LABEL_194;
                }
                uint64_t v147 = v146;
                uint64_t v148 = __DataStorage._offset.getter();
                uint64_t v149 = v145 - v148;
                if (__OFSUB__(v145, v148)) {
                  goto LABEL_182;
                }
              }
              else
              {
                if (v145 < *(void *)(v32 + 16)) {
                  goto LABEL_181;
                }
                if (v145 >= *(void *)(v32 + 24)) {
                  goto LABEL_183;
                }
                uint64_t v151 = __DataStorage._bytes.getter();
                if (!v151) {
                  goto LABEL_195;
                }
                uint64_t v147 = v151;
                uint64_t v152 = __DataStorage._offset.getter();
                uint64_t v149 = v145 - v152;
                if (__OFSUB__(v145, v152)) {
                  goto LABEL_184;
                }
              }
              char v150 = *(unsigned char *)(v147 + v149);
            }
            else
            {
              if (v145 >= BYTE6(v195)) {
                goto LABEL_180;
              }
              *(unsigned char *)(v0 + 1244) = v32;
              *(unsigned char *)(v0 + 1245) = v192;
              *(unsigned char *)(v0 + 1246) = v191;
              *(unsigned char *)(v0 + 1247) = v190;
              *(unsigned char *)(v0 + 1248) = v189;
              *(unsigned char *)(v0 + 1249) = v188;
              *(unsigned char *)(v0 + 1250) = v186;
              *(unsigned char *)(v0 + 1251) = v184;
              *(_DWORD *)(v0 + 1252) = v195;
              *(_WORD *)(v0 + 1256) = WORD2(v195);
              char v150 = *(unsigned char *)(v0 + 1244 + v145);
            }
            sub_10006C51C(&qword_100457200);
            uint64_t v153 = swift_allocObject();
            *(_OWORD *)(v153 + 16) = xmmword_100378290;
            *(void *)(v153 + 56) = &type metadata for UInt8;
            *(void *)(v153 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v153 + 32) = v150;
            uint64_t inited = (void *)String.init(format:_:)();
            uint64_t v155 = v154;
            *uint64_t v176 = v1;
            unint64_t v157 = v1[2];
            unint64_t v156 = v1[3];
            if (v157 >= v156 >> 1)
            {
              sub_1002CF974(v156 > 1, v157 + 1, 1);
              uint64_t v1 = (void *)*v176;
            }
            v1[2] = v157 + 1;
            long long v158 = &v1[2 * v157];
            v158[4] = inited;
            v158[5] = v155;
            ++v145;
            --v29;
            LODWORD(inited) = v197;
            unint64_t v32 = v199;
            if (!v29) {
              goto LABEL_150;
            }
          }
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
        }
        __break(1u);
LABEL_187:
        uint64_t v0 = *(void *)(v0 + 1112);

        sub_10006D144(v29, v183);
        sub_10006D144(v0, v82);
        __break(1u);
LABEL_188:
        uint64_t v0 = *(void *)(v0 + 1112);

        sub_10006D144(v29, v183);
        sub_10006D144(v0, v82);
        __break(1u);
LABEL_189:

        sub_10006D144(v29, v183);
        __break(1u);
LABEL_190:

        sub_10006D144(v29, v183);
        __break(1u);
        goto LABEL_191;
      }
LABEL_126:
      if ((v29 & 0x8000000000000000) == 0)
      {
        uint64_t v145 = 0;
        goto LABEL_130;
      }
LABEL_193:
      __break(1u);
LABEL_194:
      sub_10006D144(*(void *)(v0 + 968), *(void *)(v0 + 976));
      __break(1u);
LABEL_195:
      sub_10006D144(*(void *)(v0 + 968), *(void *)(v0 + 976));
      __break(1u);
      JUMPOUT(0x10015D808);
    }
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    id v41 = [v1 peerData];
    unint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v43 = v42;

    sub_100170544(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    if (v27)
    {
      uint64_t v44 = *(void *)(v0 + 1040);
      uint64_t v29 = *(void *)(v0 + 1032);
      uint64_t v45 = *(void *)(v0 + 1024);
      sub_10006D144(v32, v43);
      swift_release();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, 1, 1, v29);
      sub_10008E734(v45, &qword_100456480);
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        id v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failed to decode peer data", v56, 2u);
        swift_slowDealloc();
      }

      uint64_t v57 = self;
      sub_10006C51C(&qword_100455670);
      uint64_t inited = (void *)swift_initStackObject();
      *((_OWORD *)inited + 1) = xmmword_100378290;
      strcpy((char *)(v0 + 616), "decodingError");
      *(_WORD *)(v0 + 630) = -4864;
      AnyHashable.init<A>(_:)();
      inited[12] = &type metadata for Int;
      inited[9] = 1;
      LODWORD(inited) = sub_1001DB24C((uint64_t)inited);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_10005069C(v57, isa);

      goto LABEL_27;
    }
    uint64_t v46 = *(void *)(v0 + 1056);
    uint64_t v47 = *(void *)(v0 + 1040);
    uint64_t v48 = *(void *)(v0 + 1032);
    uint64_t v49 = *(void *)(v0 + 1024);
    sub_10006D144(v32, v43);
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v49, 0, 1, v48);
    sub_1001705AC(v49, v46, type metadata accessor for SESPeerIdentityData);
    uint64_t v51 = *(void *)(v46 + 48);
    unint64_t v50 = *(void *)(v46 + 56);
    sub_10006C51C(&qword_10045B6F0);
    uint64_t v52 = swift_allocObject();
    *(unsigned char *)(v52 + 109) = 0;
    *(_WORD *)(v52 + 110) = -5120;
    *(_OWORD *)(v52 + 16) = xmmword_100378480;
    strcpy((char *)(v52 + 32), "serialNumber");
    *(unsigned char *)(v52 + 45) = 0;
    *(_WORD *)(v52 + 46) = -5120;
    *(void *)(v52 + 48) = 147;
    *(_WORD *)(v52 + 56) = 0;
    *(_OWORD *)(v52 + 64) = 0u;
    *(unsigned char *)(v52 + 80) = -64;
    *(void *)(v52 + 88) = _swiftEmptyArrayStorage;
    strcpy((char *)(v52 + 96), "caIdentifier");
    *(void *)(v52 + 112) = 66;
    *(_WORD *)(v52 + 120) = 0;
    *(_OWORD *)(v52 + 128) = 0u;
    *(unsigned char *)(v52 + 144) = -64;
    *(void *)(v52 + 152) = _swiftEmptyArrayStorage;
    *(void *)(v52 + 160) = 0xD000000000000011;
    *(void *)(v52 + 168) = 0x80000001003B4C60;
    *(void *)(v52 + 176) = 24352;
    *(_WORD *)(v52 + 184) = 0;
    *(_OWORD *)(v52 + 192) = 0u;
    *(unsigned char *)(v52 + 208) = -64;
    *(void *)(v52 + 216) = _swiftEmptyArrayStorage;
    *(void *)(v52 + 224) = 0x656761735579656BLL;
    *(void *)(v52 + 232) = 0xE800000000000000;
    *(void *)(v52 + 240) = 149;
    *(_WORD *)(v52 + 248) = 0;
    *(_OWORD *)(v52 + 256) = 0u;
    *(unsigned char *)(v52 + 272) = -64;
    *(void *)(v52 + 280) = _swiftEmptyArrayStorage;
    strcpy((char *)(v52 + 288), "effectiveDate");
    *(_WORD *)(v52 + 302) = -4864;
    *(void *)(v52 + 304) = 37;
    *(_WORD *)(v52 + 312) = 256;
    *(_OWORD *)(v52 + 320) = 0u;
    *(unsigned char *)(v52 + 336) = -64;
    *(void *)(v52 + 344) = _swiftEmptyArrayStorage;
    strcpy((char *)(v52 + 352), "expirationDate");
    *(unsigned char *)(v52 + 367) = -18;
    *(void *)(v52 + 368) = 24356;
    *(_WORD *)(v52 + 376) = 256;
    *(_OWORD *)(v52 + 384) = 0u;
    *(unsigned char *)(v52 + 400) = -64;
    *(void *)(v52 + 408) = _swiftEmptyArrayStorage;
    *(void *)(v52 + 416) = 0x4E4944536163;
    *(void *)(v52 + 424) = 0xE600000000000000;
    *(void *)(v52 + 432) = 69;
    *(_WORD *)(v52 + 440) = 0;
    *(_OWORD *)(v52 + 448) = 0u;
    *(unsigned char *)(v52 + 464) = -64;
    *(void *)(v52 + 472) = _swiftEmptyArrayStorage;
    *(void *)(v52 + 480) = 0xD000000000000011;
    *(void *)(v52 + 488) = 0x80000001003B4C80;
    *(void *)(v52 + 496) = 83;
    *(_WORD *)(v52 + 504) = 0;
    *(_OWORD *)(v52 + 512) = 0u;
    *(unsigned char *)(v52 + 528) = -64;
    *(void *)(v52 + 536) = _swiftEmptyArrayStorage;
    *(void *)(v52 + 544) = 0x654B63696C627570;
    *(void *)(v52 + 552) = 0xE900000000000079;
    *(void *)(v52 + 560) = 32585;
    *(_WORD *)(v52 + 568) = 0;
    *(_OWORD *)(v52 + 576) = 0u;
    *(unsigned char *)(v52 + 592) = -64;
    *(void *)(v52 + 600) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 416) = 32545;
    *(unsigned char *)(v0 + 424) = 0;
    *(unsigned char *)(v0 + 425) = 0;
    *(void *)(v0 + 432) = v52;
    *(void *)(v0 + 440) = 0;
    *(unsigned char *)(v0 + 448) = 64;
    *(void *)(v0 + 456) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 648) = v51;
    *(void *)(v0 + 656) = v50;
    sub_10006D0EC(v51, v50);
    sub_10006D0EC(v51, v50);
    unint64_t v53 = sub_100188FB0(v0 + 648, (__n128 *)(v0 + 416));
    sub_10006D144(*(void *)(v0 + 648), *(void *)(v0 + 656));
    swift_bridgeObjectRelease();
    sub_100253000(v53, v182);
    unint64_t v59 = *(void *)(v0 + 1120);
    uint64_t v60 = *(void *)(v0 + 1112);
    sub_10006D144(v51, v50);
    uint64_t v29 = *(void *)(v0 + 368);
    int64_t v27 = *(void *)(v0 + 376);
    *(void *)(v0 + 1160) = v29;
    *(void *)(v0 + 1168) = v27;
    sub_10006D0EC(v29, v27);
    sub_1001706B4(v182, (void (*)(uint64_t, uint64_t))sub_10006D144);
    if (sub_100088AE4(v29, v27, v60, v59))
    {
      unint64_t v133 = *(void *)(v0 + 976);
      uint64_t v134 = *(void *)(v0 + 968);
      sub_10017092C(*(void *)(v0 + 1056), *(void *)(v0 + 1048), type metadata accessor for SESPeerIdentityData);
      sub_10006D0EC(v134, v133);
      sub_10006D0EC(v134, v133);
      unint64_t v135 = Logger.logObject.getter();
      os_log_type_t v136 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v135, v136))
      {
        LOBYTE(v177) = v136;
        unint64_t v137 = *(void *)(v0 + 976);
        uint64_t v138 = *(void *)(v0 + 968);
        char v139 = (_DWORD *)swift_slowAlloc();
        *(void *)(v0 + 832) = swift_slowAlloc();
        uint64_t v178 = (uint64_t)v139;
        *char v139 = 136315394;
        sub_10006D0EC(v138, v137);
        sub_10023CC58(4, v138, v137, (uint64_t *)(v0 + 632));
        unint64_t v32 = *(void *)(v0 + 632);
        unint64_t v195 = *(void *)(v0 + 640);
        uint64_t inited = (void *)(v195 >> 62);
        uint64_t v1 = _swiftEmptyArrayStorage;
        os_log_t v179 = v135;
        switch(v195 >> 62)
        {
          case 1uLL:
            goto LABEL_118;
          case 2uLL:
            uint64_t v144 = *(void *)(v32 + 16);
            uint64_t v143 = *(void *)(v32 + 24);
            uint64_t v29 = v143 - v144;
            if (!__OFSUB__(v143, v144)) {
              goto LABEL_121;
            }
            goto LABEL_192;
          case 3uLL:
            goto LABEL_150;
          default:
            uint64_t v29 = BYTE6(v195);
            goto LABEL_121;
        }
      }
      uint64_t v140 = *(void *)(v0 + 1048);
      unint64_t v141 = *(void *)(v0 + 976);
      uint64_t v142 = *(void *)(v0 + 968);

      sub_10006D144(v142, v141);
      sub_10006D144(v142, v141);
      sub_100170490(v140, type metadata accessor for SESPeerIdentityData);
LABEL_151:
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 1176) = v22;
      *uint64_t v22 = v0;
      unint64_t v23 = sub_10015FAAC;
LABEL_4:
      v22[1] = v23;
      uint64_t v24 = *(void *)(v0 + 1016);
      v22[20] = v24;
      return _swift_task_switch(sub_100151718, v24, 0);
    }
    unint64_t v61 = *(void *)(v0 + 1120);
    uint64_t v62 = *(void *)(v0 + 1112);
    sub_10006D0EC(v62, v61);
    sub_10006D0EC(v29, v27);
    char v63 = v1;
    sub_10006D0EC(v62, v61);
    sub_10006D0EC(v29, v27);
    unint64_t v32 = v63;
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    BOOL v66 = os_log_type_enabled(v64, v65);
    unint64_t v67 = *(void *)(v0 + 1120);
    if (!v66)
    {
      uint64_t inited = *(void **)(v0 + 1112);
      uint64_t v70 = *(void *)(v0 + 1056);
      sub_10006D144(v29, v27);

      sub_10006D144((uint64_t)inited, v67);
      sub_10006D144((uint64_t)inited, v67);
      sub_10006D144(v29, v27);
      sub_10006D144(v29, v27);

      sub_100170490(v70, type metadata accessor for SESPeerIdentityData);
      goto LABEL_27;
    }
    os_log_type_t v172 = v65;
    log = v64;
    unint64_t v174 = (void *)v32;
    unint64_t v183 = v27;
    unint64_t v187 = (unint64_t)v27 >> 62;
    uint64_t v68 = (_DWORD *)swift_slowAlloc();
    uint64_t v171 = (void *)swift_slowAlloc();
    *uint64_t v177 = swift_slowAlloc();
    uint64_t v175 = v68;
    *uint64_t v68 = 136315650;
    unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
    switch(v67 >> 62)
    {
      case 1uLL:
        int v71 = *(_DWORD *)(v0 + 1112);
        int v72 = *(_DWORD *)(v0 + 1116);
        BOOL v73 = __OFSUB__(v72, v71);
        int v74 = v72 - v71;
        if (v73) {
          goto LABEL_174;
        }
        uint64_t v69 = v74;
LABEL_37:
        if (!v69) {
          goto LABEL_65;
        }
        uint64_t inited = (void *)(*(void *)(v0 + 1120) >> 62);
        *(void *)(v0 + 808) = _swiftEmptyArrayStorage;
        sub_1002CF974(0, v69 & ~(v69 >> 63), 0);
        unint64_t v32 = *(void *)(v0 + 808);
        if (!inited)
        {
          if ((v69 & 0x8000000000000000) == 0)
          {
            uint64_t v77 = 0;
            break;
          }
          goto LABEL_178;
        }
        if (inited == 2) {
          uint64_t v77 = *(void *)(*(void *)(v0 + 1112) + 16);
        }
        else {
          uint64_t v77 = *(int *)(v0 + 1112);
        }
        if (v69 < 0) {
          goto LABEL_172;
        }
        break;
      case 2uLL:
        uint64_t v75 = *(void *)(*(void *)(v0 + 1112) + 16);
        uint64_t v76 = *(void *)(*(void *)(v0 + 1112) + 24);
        uint64_t v69 = v76 - v75;
        if (!__OFSUB__(v76, v75)) {
          goto LABEL_37;
        }
        goto LABEL_175;
      case 3uLL:
        goto LABEL_65;
      default:
        uint64_t v69 = *(unsigned __int8 *)(v0 + 1126);
        goto LABEL_37;
    }
LABEL_45:
    unint64_t v78 = *(void *)(v0 + 1120);
    if (!(v78 >> 62)) {
      break;
    }
    if (v78 >> 62 != 1)
    {
      uint64_t v86 = *(void *)(v0 + 1112);
      if (v77 < *(void *)(v86 + 16)) {
        goto LABEL_154;
      }
      if (v77 >= *(void *)(v86 + 24)) {
        goto LABEL_156;
      }
      uint64_t v87 = __DataStorage._bytes.getter();
      unint64_t v82 = *(void *)(v0 + 1120);
      if (!v87) {
        goto LABEL_188;
      }
      uint64_t inited = (void *)v87;
      uint64_t v88 = __DataStorage._offset.getter();
      uint64_t v84 = v77 - v88;
      if (__OFSUB__(v77, v88)) {
        goto LABEL_157;
      }
      goto LABEL_61;
    }
    uint64_t v79 = *(void *)(v0 + 1112);
    if (v77 < v79 >> 32 && v77 >= (int)v79)
    {
      uint64_t v81 = __DataStorage._bytes.getter();
      unint64_t v82 = *(void *)(v0 + 1120);
      if (!v81) {
        goto LABEL_187;
      }
      uint64_t inited = (void *)v81;
      uint64_t v83 = __DataStorage._offset.getter();
      uint64_t v84 = v77 - v83;
      if (__OFSUB__(v77, v83)) {
        goto LABEL_155;
      }
LABEL_61:
      char v85 = *((unsigned char *)inited + v84);
      goto LABEL_62;
    }
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    ;
  }
  if (v77 >= BYTE6(v78)) {
    goto LABEL_153;
  }
  *(void *)(v0 + 1272) = *(void *)(v0 + 1112);
  *(_WORD *)(v0 + 1280) = v78;
  *(unsigned char *)(v0 + 1282) = BYTE2(v78);
  *(unsigned char *)(v0 + 1283) = BYTE3(v78);
  *(unsigned char *)(v0 + 1284) = BYTE4(v78);
  *(unsigned char *)(v0 + 1285) = BYTE5(v78);
  char v85 = *(unsigned char *)(v0 + 1272 + v77);
LABEL_62:
  sub_10006C51C(&qword_100457200);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_100378290;
  *(void *)(v89 + 56) = &type metadata for UInt8;
  *(void *)(v89 + 64) = &protocol witness table for UInt8;
  *(unsigned char *)(v89 + 32) = v85;
  uint64_t inited = (void *)String.init(format:_:)();
  uint64_t v91 = v90;
  *uint64_t v194 = v32;
  int64_t v27 = *(void *)(v32 + 16);
  unint64_t v92 = *(void *)(v32 + 24);
  uint64_t v1 = (void *)(v27 + 1);
  if (v27 >= v92 >> 1)
  {
    sub_1002CF974(v92 > 1, v27 + 1, 1);
    unint64_t v32 = *v194;
  }
  *(void *)(v32 + 16) = v1;
  unint64_t v93 = v32 + 16 * v27;
  *(void *)(v93 + 32) = inited;
  *(void *)(v93 + 40) = v91;
  ++v77;
  if (--v69) {
    goto LABEL_45;
  }
LABEL_65:
  unint64_t v94 = *(void *)(v0 + 1120);
  uint64_t inited = *(void **)(v0 + 1112);
  *(void *)(v0 + 760) = v32;
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v95 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v1 = v96;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 712) = sub_100290514(v95, (unint64_t)v1, v177);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10006D144((uint64_t)inited, v94);
  sub_10006D144((uint64_t)inited, v94);
  *((_WORD *)v175 + 6) = 2080;
  unint64_t v32 = (unint64_t)_swiftEmptyArrayStorage;
  LODWORD(inited) = v187;
  unint64_t v181 = HIDWORD(v29);
  switch((int)v187)
  {
    case 1:
      if (__OFSUB__(HIDWORD(v29), v29)) {
        goto LABEL_176;
      }
      uint64_t v97 = HIDWORD(v29) - (int)v29;
LABEL_70:
      if (!v97) {
        goto LABEL_98;
      }
      *(void *)unint64_t v195 = _swiftEmptyArrayStorage;
      sub_1002CF974(0, v97 & ~(v97 >> 63), 0);
      unint64_t v32 = *(void *)v195;
      int64_t v180 = (int)v29;
      if (!v187)
      {
        if ((v97 & 0x8000000000000000) == 0)
        {
          int64_t v27 = 0;
          goto LABEL_79;
        }
        goto LABEL_185;
      }
      if (v187 != 1)
      {
        if ((v97 & 0x8000000000000000) == 0)
        {
          int64_t v27 = *(void *)(v29 + 16);
          goto LABEL_79;
        }
        goto LABEL_173;
      }
      int64_t v27 = (int)v29;
      if (v97 < 0) {
        goto LABEL_173;
      }
LABEL_79:
      uint64_t v178 = v29 >> 32;
      os_log_t v179 = (os_log_t)BYTE6(v183);
      uint64_t v185 = v29;
      do
      {
        if (inited)
        {
          if (inited == 1)
          {
            if (v27 < v180 || v27 >= v178) {
              goto LABEL_158;
            }
            uint64_t v100 = __DataStorage._bytes.getter();
            if (!v100) {
              goto LABEL_189;
            }
            uint64_t inited = (void *)v100;
            uint64_t v101 = __DataStorage._offset.getter();
            int64_t v102 = v27 - v101;
            if (__OFSUB__(v27, v101)) {
              goto LABEL_161;
            }
          }
          else
          {
            if (v27 < *(void *)(v29 + 16)) {
              goto LABEL_160;
            }
            if (v27 >= *(void *)(v29 + 24)) {
              goto LABEL_162;
            }
            uint64_t v104 = __DataStorage._bytes.getter();
            if (!v104) {
              goto LABEL_190;
            }
            uint64_t inited = (void *)v104;
            uint64_t v105 = __DataStorage._offset.getter();
            int64_t v102 = v27 - v105;
            if (__OFSUB__(v27, v105)) {
              goto LABEL_163;
            }
          }
          char v103 = *((unsigned char *)inited + v102);
        }
        else
        {
          if (v27 >= BYTE6(v183)) {
            goto LABEL_159;
          }
          *(_WORD *)(v0 + 1286) = v29;
          *(unsigned char *)(v0 + 1288) = BYTE2(v29);
          *(unsigned char *)(v0 + 1289) = BYTE3(v29);
          *(unsigned char *)(v0 + 1290) = v181;
          *(unsigned char *)(v0 + 1291) = BYTE5(v29);
          *(unsigned char *)(v0 + 1292) = BYTE6(v29);
          *(unsigned char *)(v0 + 1293) = HIBYTE(v29);
          *(_WORD *)(v0 + 1294) = v183;
          *(unsigned char *)(v0 + 1296) = BYTE2(v183);
          *(unsigned char *)(v0 + 1297) = BYTE3(v183);
          *(unsigned char *)(v0 + 1298) = BYTE4(v183);
          *(unsigned char *)(v0 + 1299) = BYTE5(v183);
          char v103 = *(unsigned char *)(v0 + 1286 + v27);
        }
        sub_10006C51C(&qword_100457200);
        uint64_t v106 = swift_allocObject();
        *(_OWORD *)(v106 + 16) = xmmword_100378290;
        *(void *)(v106 + 56) = &type metadata for UInt8;
        *(void *)(v106 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v106 + 32) = v103;
        uint64_t inited = (void *)String.init(format:_:)();
        uint64_t v1 = v107;
        *(void *)unint64_t v195 = v32;
        unint64_t v109 = *(void *)(v32 + 16);
        unint64_t v108 = *(void *)(v32 + 24);
        if (v109 >= v108 >> 1)
        {
          sub_1002CF974(v108 > 1, v109 + 1, 1);
          unint64_t v32 = *(void *)v195;
        }
        *(void *)(v32 + 16) = v109 + 1;
        unint64_t v110 = v32 + 16 * v109;
        *(void *)(v110 + 32) = inited;
        *(void *)(v110 + 40) = v1;
        ++v27;
        --v97;
        uint64_t v29 = v185;
        LODWORD(inited) = v187;
      }
      while (v97);
LABEL_98:
      uint64_t v111 = *(void *)(v0 + 1056);
      uint64_t v1 = v175;
      *(void *)(v0 + 680) = v32;
      uint64_t v112 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v114 = v113;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 688) = sub_100290514(v112, v114, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v115 = v29;
      unint64_t v32 = v29;
      uint64_t v29 = v183;
      sub_10006D144(v115, v183);
      sub_10006D144(v32, v183);
      *((_WORD *)v175 + 11) = 2112;
      *(void *)(v0 + 696) = v174;
      id v116 = v174;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v171 = v174;

      LODWORD(inited) = log;
      _os_log_impl((void *)&_mh_execute_header, log, v172, "Cannot export from my CA %s) to CA %s for peer %@", (uint8_t *)v175, 0x20u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10006D144(v32, v183);
      sub_100170490(v111, type metadata accessor for SESPeerIdentityData);
LABEL_27:
      int64_t v27 = 0;
      unint64_t v38 = *(void *)(v0 + 1152);
      if (v38 != *(void *)(v0 + 1136)) {
        goto LABEL_16;
      }
LABEL_99:
      unint64_t v117 = *(void *)(v0 + 1120);
      uint64_t v118 = *(void *)(v0 + 1112);
      swift_bridgeObjectRelease();
      sub_10006D144(v118, v117);
      unint64_t v119 = *(void *)(v0 + 920);
      if (v119 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v166 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v120 = *(void *)(v0 + 1072);
        if (v166) {
          goto LABEL_103;
        }
LABEL_101:
        if (v120 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v167 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v167) {
            goto LABEL_103;
          }
        }
        else if (*(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_103;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v168 = *(uint64_t (**)(void))(v0 + 8);
        return v168();
      }
      else
      {
        unint64_t v120 = *(void *)(v0 + 1072);
        if (!*(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_101;
        }
LABEL_103:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v121 = Logger.logObject.getter();
        os_log_type_t v122 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v121, v122))
        {
          uint64_t v123 = swift_slowAlloc();
          *(_DWORD *)uint64_t v123 = 134218240;
          if (v119 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v124 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v124 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          unint64_t v125 = *(void *)(v0 + 1072);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 880) = v124;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v123 + 12) = 2048;
          if (v125 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v126 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v126 = *(void *)((v125 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          *(void *)(v0 + 840) = v126;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v121, v122, "Adding %ld shares and removing %ld shares", (uint8_t *)v123, 0x16u);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        uint64_t v127 = *(void **)(*(void *)(v0 + 1016) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
        NSString v128 = String._bridgeToObjectiveC()();
        *(void *)(v0 + 1200) = v128;
        Class v129 = Data._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1208) = v129;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        Class v130 = Array._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1216) = v130;
        swift_bridgeObjectRelease();
        Class v131 = Array._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1224) = v131;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_10016217C;
        uint64_t v132 = swift_continuation_init();
        *(void *)(v0 + 464) = _NSConcreteStackBlock;
        *(void *)(v0 + 472) = 0x40000000;
        *(void *)(v0 + 480) = sub_1001BDDAC;
        *(void *)(v0 + 488) = &unk_100413138;
        *(void *)(v0 + 496) = v132;
        [v127 modifyTLKSharesForView:v128 altDSID:v129 addingShares:v130 removingShares:v131 completion:v0 + 464];
        return _swift_continuation_await(v0 + 16);
      }
    case 2:
      uint64_t v99 = *(void *)(v29 + 16);
      uint64_t v98 = *(void *)(v29 + 24);
      uint64_t v97 = v98 - v99;
      if (!__OFSUB__(v98, v99)) {
        goto LABEL_70;
      }
      goto LABEL_177;
    case 3:
      goto LABEL_98;
    default:
      uint64_t v97 = BYTE6(v183);
      goto LABEL_70;
  }
}

uint64_t sub_10015D838(uint64_t a1)
{
  unint64_t v3 = (void *)*v2;
  v3[137] = a1;
  v3[138] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[127];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v5 = sub_1001623C0;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[127];
    id v5 = sub_10015D9BC;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10015D9BC()
{
  uint64_t v200 = v0;
  int64_t v2 = v0 + 288;
  uint64_t v3 = *(void *)(v0 + 1104);
  sub_100165528(*(void **)(v0 + 1096), *(void *)(v0 + 984), *(void *)(v0 + 968), *(void *)(v0 + 976), *(void *)(v0 + 1000), *(void *)(v0 + 1000));
  if (!v3)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      goto LABEL_162;
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 968);
  sub_10006D0EC(v5, v4);
  swift_errorRetain();
  sub_10006D0EC(v5, v4);
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v1 = *(void **)(v0 + 976);
  uint64_t v9 = *(void *)(v0 + 968);
  if (v8)
  {
    unint64_t v195 = v6;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v197 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    sub_10006D0EC(v9, (unint64_t)v1);
    sub_10023CC58(4, v9, (unint64_t)v1, &v198);
    uint64_t v184 = v198;
    unint64_t v186 = v199;
    *(void *)(v0 + 896) = sub_10023CDF4(v198, v199);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    int64_t v2 = v0 + 288;
    uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    sub_10006D144(v184, v186);
    *(void *)(v0 + 904) = sub_100290514(v11, v13, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(v9, (unint64_t)v1);
    sub_10006D144(v9, (unint64_t)v1);
    *(_WORD *)(v10 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    *(void *)(v0 + 928) = sub_100290514(v14, v15, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v195, v7, "Failed to create self-share for tlk %s : %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D144(v9, (unint64_t)v1);
    sub_10006D144(v9, (unint64_t)v1);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v17 = *(void **)(v0 + 1096);
  sub_100164280(13, 0);

  swift_errorRelease();
  while (1)
  {
    sub_1001660E8((_OWORD *)v2);
    unint64_t v19 = *(void *)(v0 + 1008);
    uint64_t v20 = *(void *)(v0 + 1000);
    uint64_t v21 = *(void *)(v0 + 992);
    uint64_t v22 = *(void *)(v0 + 976);
    unint64_t v23 = *(void *)(v0 + 968);
    uint64_t v24 = *(void *)(v0 + 304);
    unint64_t v25 = *(void *)(v0 + 312);
    *(void *)(v0 + 1112) = v24;
    *(void *)(v0 + 1120) = v25;
    sub_10006D0EC(v24, v25);
    sub_1001706B4((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10006D144);
    uint64_t v26 = (void *)swift_task_alloc();
    v26[2] = v21;
    v26[3] = v23;
    v26[4] = v22;
    v26[5] = v20;
    swift_bridgeObjectRetain();
    unint64_t v27 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_10016FEEC, v26, v19);
    *(void *)(v0 + 1128) = v27;
    swift_task_dealloc();
    if (v27 >> 62) {
      uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v170 = (void *)(v0 + 848);
    *(void *)(v0 + 1136) = v28;
    if (!v28) {
      goto LABEL_95;
    }
    unint64_t v29 = 0;
    uint64_t v176 = (uint64_t *)(v0 + 352);
    unint64_t v164 = (uint64_t *)(v0 + 832);
    uint64_t v191 = v0 + 808;
    unint64_t v192 = v0 + 704;
    uint64_t v171 = (uint64_t *)(v0 + 824);
LABEL_16:
    uint64_t v30 = *(void *)(v0 + 1128);
    if ((v30 & 0xC000000000000001) != 0)
    {
      id v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v29 >= *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        __break(1u);
        __break(1u);
        goto LABEL_122;
      }
      id v31 = *(id *)(v30 + 8 * v29 + 32);
    }
    unint64_t v23 = (unint64_t)v31;
    *(void *)(v0 + 1144) = v31;
    *(void *)(v0 + 1152) = v29 + 1;
    if (__OFADD__(v29, 1))
    {
      __break(1u);
LABEL_114:
      if (__OFSUB__(HIDWORD(v23), v23))
      {
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      uint64_t v20 = HIDWORD(v23) - (int)v23;
LABEL_117:
      if (!v20)
      {
LABEL_146:
        uint64_t v196 = *(void *)(v0 + 1048);
        unint64_t v152 = *(void *)(v0 + 976);
        uint64_t v153 = *(void *)(v0 + 968);
        *(void *)(v0 + 856) = v1;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v154 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v156 = v155;
        swift_bridgeObjectRelease();
        sub_10006D144(v23, v192);
        *(void *)(v0 + 864) = sub_100290514(v154, v156, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v153, v152);
        sub_10006D144(v153, v152);
        *(_WORD *)(v174 + 12) = 2080;
        unint64_t v157 = sub_10023E134();
        *(void *)(v0 + 872) = sub_100290514(v157, v158, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100170490(v196, type metadata accessor for SESPeerIdentityData);
        _os_log_impl((void *)&_mh_execute_header, v175, v173, "KeySyncManager: Sharing TLK %s to %s)", (uint8_t *)v174, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_147:
        unint64_t v159 = (void *)swift_task_alloc();
        *(void *)(v0 + 1176) = v159;
        *unint64_t v159 = v0;
        v159[1] = sub_10015FAAC;
        uint64_t v160 = *(void *)(v0 + 1016);
        v159[20] = v160;
        return _swift_task_switch(sub_100151718, v160, 0);
      }
      unint64_t v69 = v0 + 848;
      *unint64_t v170 = v1;
      sub_1002CF974(0, v20 & ~(v20 >> 63), 0);
      uint64_t v1 = (void *)*v170;
      uint64_t v191 = (int)v23;
      if (v26)
      {
        if (v26 == 1) {
          uint64_t v46 = (int)v23;
        }
        else {
          uint64_t v46 = *(void *)(v23 + 16);
        }
        if ((v20 & 0x8000000000000000) == 0)
        {
LABEL_126:
          uint64_t v190 = (uint64_t)v23 >> 32;
          unint64_t v189 = v23 >> 8;
          unint64_t v187 = v23 >> 24;
          unint64_t v188 = v23 >> 16;
          unint64_t v183 = v23 >> 40;
          unint64_t v185 = HIDWORD(v23);
          unint64_t v180 = HIWORD(v23);
          unint64_t v178 = HIBYTE(v23);
          int v193 = (int)v26;
          unint64_t v194 = v23;
          while (v20)
          {
            if (v26)
            {
              if (v26 == 1)
              {
                if (v46 < v191 || v46 >= v190) {
                  goto LABEL_178;
                }
                uint64_t v139 = __DataStorage._bytes.getter();
                if (!v139) {
                  goto LABEL_193;
                }
                uint64_t v140 = v139;
                uint64_t v141 = __DataStorage._offset.getter();
                uint64_t v142 = v46 - v141;
                if (__OFSUB__(v46, v141)) {
                  goto LABEL_181;
                }
              }
              else
              {
                if (v46 < *(void *)(v23 + 16)) {
                  goto LABEL_180;
                }
                if (v46 >= *(void *)(v23 + 24)) {
                  goto LABEL_182;
                }
                uint64_t v144 = __DataStorage._bytes.getter();
                if (!v144) {
                  goto LABEL_194;
                }
                uint64_t v140 = v144;
                uint64_t v145 = __DataStorage._offset.getter();
                uint64_t v142 = v46 - v145;
                if (__OFSUB__(v46, v145)) {
                  goto LABEL_183;
                }
              }
              char v143 = *(unsigned char *)(v140 + v142);
            }
            else
            {
              if (v46 >= BYTE6(v192)) {
                goto LABEL_179;
              }
              *(unsigned char *)(v0 + 1244) = v23;
              *(unsigned char *)(v0 + 1245) = v189;
              *(unsigned char *)(v0 + 1246) = v188;
              *(unsigned char *)(v0 + 1247) = v187;
              *(unsigned char *)(v0 + 1248) = v185;
              *(unsigned char *)(v0 + 1249) = v183;
              *(unsigned char *)(v0 + 1250) = v180;
              *(unsigned char *)(v0 + 1251) = v178;
              *(_DWORD *)(v0 + 1252) = v192;
              *(_WORD *)(v0 + 1256) = WORD2(v192);
              char v143 = *(unsigned char *)(v0 + 1244 + v46);
            }
            sub_10006C51C(&qword_100457200);
            uint64_t v146 = swift_allocObject();
            *(_OWORD *)(v146 + 16) = xmmword_100378290;
            *(void *)(v146 + 56) = &type metadata for UInt8;
            *(void *)(v146 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v146 + 32) = v143;
            uint64_t v26 = (void *)String.init(format:_:)();
            uint64_t v148 = v147;
            *unint64_t v170 = v1;
            unint64_t v150 = v1[2];
            unint64_t v149 = v1[3];
            if (v150 >= v149 >> 1)
            {
              sub_1002CF974(v149 > 1, v150 + 1, 1);
              uint64_t v1 = (void *)*v170;
            }
            v1[2] = v150 + 1;
            uint64_t v151 = &v1[2 * v150];
            v151[4] = v26;
            v151[5] = v148;
            ++v46;
            --v20;
            LODWORD(v26) = v193;
            unint64_t v23 = v194;
            if (!v20) {
              goto LABEL_146;
            }
          }
          __break(1u);
          goto LABEL_171;
        }
        __break(1u);
LABEL_186:
        uint64_t v0 = *(void *)(v0 + 1112);

        sub_10006D144(v46, v177);
        sub_10006D144(v0, v69);
        __break(1u);
LABEL_187:
        uint64_t v0 = *(void *)(v0 + 1112);

        sub_10006D144(v46, v177);
        sub_10006D144(v0, v69);
        __break(1u);
LABEL_188:

        sub_10006D144(v46, v177);
        __break(1u);
LABEL_189:

        sub_10006D144(v46, v177);
        __break(1u);
        goto LABEL_190;
      }
LABEL_122:
      if ((v20 & 0x8000000000000000) == 0)
      {
        uint64_t v46 = 0;
        goto LABEL_126;
      }
LABEL_192:
      __break(1u);
LABEL_193:
      sub_10006D144(*(void *)(v0 + 968), *(void *)(v0 + 976));
      __break(1u);
LABEL_194:
      sub_10006D144(*(void *)(v0 + 968), *(void *)(v0 + 976));
      __break(1u);
      JUMPOUT(0x10015FA7CLL);
    }
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    id v32 = [(id)v23 peerData];
    uint64_t v1 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    sub_100170544(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v35 = *(void *)(v0 + 1056);
    uint64_t v36 = *(void *)(v0 + 1040);
    uint64_t v37 = *(void *)(v0 + 1032);
    uint64_t v38 = *(void *)(v0 + 1024);
    sub_10006D144((uint64_t)v1, v34);
    swift_release();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v38, 0, 1, v37);
    sub_1001705AC(v38, v35, type metadata accessor for SESPeerIdentityData);
    uint64_t v40 = *(void *)(v35 + 48);
    unint64_t v39 = *(void *)(v35 + 56);
    sub_10006C51C(&qword_10045B6F0);
    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 109) = 0;
    *(_WORD *)(v41 + 110) = -5120;
    *(_OWORD *)(v41 + 16) = xmmword_100378480;
    strcpy((char *)(v41 + 32), "serialNumber");
    *(unsigned char *)(v41 + 45) = 0;
    *(_WORD *)(v41 + 46) = -5120;
    *(void *)(v41 + 48) = 147;
    *(_WORD *)(v41 + 56) = 0;
    *(_OWORD *)(v41 + 64) = 0u;
    *(unsigned char *)(v41 + 80) = -64;
    *(void *)(v41 + 88) = _swiftEmptyArrayStorage;
    strcpy((char *)(v41 + 96), "caIdentifier");
    *(void *)(v41 + 112) = 66;
    *(_WORD *)(v41 + 120) = 0;
    *(_OWORD *)(v41 + 128) = 0u;
    *(unsigned char *)(v41 + 144) = -64;
    *(void *)(v41 + 152) = _swiftEmptyArrayStorage;
    *(void *)(v41 + 160) = 0xD000000000000011;
    *(void *)(v41 + 168) = 0x80000001003B4C60;
    *(void *)(v41 + 176) = 24352;
    *(_WORD *)(v41 + 184) = 0;
    *(_OWORD *)(v41 + 192) = 0u;
    *(unsigned char *)(v41 + 208) = -64;
    *(void *)(v41 + 216) = _swiftEmptyArrayStorage;
    *(void *)(v41 + 224) = 0x656761735579656BLL;
    *(void *)(v41 + 232) = 0xE800000000000000;
    *(void *)(v41 + 240) = 149;
    *(_WORD *)(v41 + 248) = 0;
    *(_OWORD *)(v41 + 256) = 0u;
    *(unsigned char *)(v41 + 272) = -64;
    *(void *)(v41 + 280) = _swiftEmptyArrayStorage;
    strcpy((char *)(v41 + 288), "effectiveDate");
    *(_WORD *)(v41 + 302) = -4864;
    *(void *)(v41 + 304) = 37;
    *(_WORD *)(v41 + 312) = 256;
    *(_OWORD *)(v41 + 320) = 0u;
    *(unsigned char *)(v41 + 336) = -64;
    *(void *)(v41 + 344) = _swiftEmptyArrayStorage;
    strcpy((char *)(v41 + 352), "expirationDate");
    *(unsigned char *)(v41 + 367) = -18;
    *(void *)(v41 + 368) = 24356;
    *(_WORD *)(v41 + 376) = 256;
    *(_OWORD *)(v41 + 384) = 0u;
    *(unsigned char *)(v41 + 400) = -64;
    *(void *)(v41 + 408) = _swiftEmptyArrayStorage;
    *(void *)(v41 + 416) = 0x4E4944536163;
    *(void *)(v41 + 424) = 0xE600000000000000;
    *(void *)(v41 + 432) = 69;
    *(_WORD *)(v41 + 440) = 0;
    *(_OWORD *)(v41 + 448) = 0u;
    *(unsigned char *)(v41 + 464) = -64;
    *(void *)(v41 + 472) = _swiftEmptyArrayStorage;
    *(void *)(v41 + 480) = 0xD000000000000011;
    *(void *)(v41 + 488) = 0x80000001003B4C80;
    *(void *)(v41 + 496) = 83;
    *(_WORD *)(v41 + 504) = 0;
    *(_OWORD *)(v41 + 512) = 0u;
    *(unsigned char *)(v41 + 528) = -64;
    *(void *)(v41 + 536) = _swiftEmptyArrayStorage;
    *(void *)(v41 + 544) = 0x654B63696C627570;
    *(void *)(v41 + 552) = 0xE900000000000079;
    *(void *)(v41 + 560) = 32585;
    *(_WORD *)(v41 + 568) = 0;
    *(_OWORD *)(v41 + 576) = 0u;
    *(unsigned char *)(v41 + 592) = -64;
    *(void *)(v41 + 600) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 416) = 32545;
    *(unsigned char *)(v0 + 424) = 0;
    *(unsigned char *)(v0 + 425) = 0;
    *(void *)(v0 + 432) = v41;
    *(void *)(v0 + 440) = 0;
    *(unsigned char *)(v0 + 448) = 64;
    *(void *)(v0 + 456) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 648) = v40;
    *(void *)(v0 + 656) = v39;
    sub_10006D0EC(v40, v39);
    sub_10006D0EC(v40, v39);
    unint64_t v42 = sub_100188FB0(v0 + 648, (__n128 *)(v0 + 416));
    sub_10006D144(*(void *)(v0 + 648), *(void *)(v0 + 656));
    swift_bridgeObjectRelease();
    sub_100253000(v42, v176);
    unint64_t v43 = *(void *)(v0 + 1120);
    uint64_t v44 = *(void *)(v0 + 1112);
    sub_10006D144(v40, v39);
    uint64_t v46 = *(void *)(v0 + 368);
    unint64_t v45 = *(void *)(v0 + 376);
    *(void *)(v0 + 1160) = v46;
    *(void *)(v0 + 1168) = v45;
    sub_10006D0EC(v46, v45);
    sub_1001706B4(v176, (void (*)(uint64_t, uint64_t))sub_10006D144);
    char v47 = sub_100088AE4(v46, v45, v44, v43);
    if (v47)
    {
      unint64_t v127 = *(void *)(v0 + 976);
      uint64_t v128 = *(void *)(v0 + 968);
      sub_10017092C(*(void *)(v0 + 1056), *(void *)(v0 + 1048), type metadata accessor for SESPeerIdentityData);
      sub_10006D0EC(v128, v127);
      sub_10006D0EC(v128, v127);
      Class v129 = Logger.logObject.getter();
      os_log_type_t v130 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v129, v130))
      {
        os_log_type_t v173 = v130;
        uint64_t v175 = v129;
        unint64_t v131 = *(void *)(v0 + 976);
        uint64_t v132 = *(void *)(v0 + 968);
        unint64_t v133 = (_DWORD *)swift_slowAlloc();
        *(void *)(v0 + 832) = swift_slowAlloc();
        uint64_t v174 = (uint64_t)v133;
        *unint64_t v133 = 136315394;
        sub_10006D0EC(v132, v131);
        sub_10023CC58(4, v132, v131, (uint64_t *)(v0 + 632));
        unint64_t v23 = *(void *)(v0 + 632);
        unint64_t v192 = *(void *)(v0 + 640);
        uint64_t v26 = (void *)(v192 >> 62);
        uint64_t v1 = _swiftEmptyArrayStorage;
        switch(v192 >> 62)
        {
          case 1uLL:
            goto LABEL_114;
          case 2uLL:
            uint64_t v138 = *(void *)(v23 + 16);
            uint64_t v137 = *(void *)(v23 + 24);
            uint64_t v20 = v137 - v138;
            if (!__OFSUB__(v137, v138)) {
              goto LABEL_117;
            }
            goto LABEL_191;
          case 3uLL:
            goto LABEL_146;
          default:
            uint64_t v20 = BYTE6(v192);
            goto LABEL_117;
        }
      }
      uint64_t v134 = *(void *)(v0 + 1048);
      unint64_t v135 = *(void *)(v0 + 976);
      uint64_t v136 = *(void *)(v0 + 968);

      sub_10006D144(v136, v135);
      sub_10006D144(v136, v135);
      sub_100170490(v134, type metadata accessor for SESPeerIdentityData);
      goto LABEL_147;
    }
    unint64_t v48 = *(void *)(v0 + 1120);
    uint64_t v49 = *(void *)(v0 + 1112);
    sub_10006D0EC(v49, v48);
    sub_10006D0EC(v46, v45);
    id v50 = (id)v23;
    sub_10006D0EC(v49, v48);
    sub_10006D0EC(v46, v45);
    unint64_t v23 = (unint64_t)v50;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    BOOL v52 = os_log_type_enabled((os_log_t)v20, v51);
    unint64_t v53 = *(void *)(v0 + 1120);
    if (!v52)
    {
      uint64_t v26 = *(void **)(v0 + 1112);
      uint64_t v55 = *(void *)(v0 + 1056);
      sub_10006D144(v46, v45);

      sub_10006D144((uint64_t)v26, v53);
      sub_10006D144((uint64_t)v26, v53);
      sub_10006D144(v46, v45);
      sub_10006D144(v46, v45);

      uint64_t v56 = v55;
      goto LABEL_94;
    }
    os_log_type_t v166 = v51;
    log = v20;
    uint64_t v168 = (void *)v23;
    unint64_t v177 = v45;
    unint64_t v181 = v45 >> 62;
    unint64_t v54 = (_DWORD *)swift_slowAlloc();
    unint64_t v165 = (void *)swift_slowAlloc();
    *uint64_t v171 = swift_slowAlloc();
    uint64_t v169 = v54;
    *unint64_t v54 = 136315650;
    uint64_t v1 = _swiftEmptyArrayStorage;
    switch(v53 >> 62)
    {
      case 1uLL:
        int v57 = *(_DWORD *)(v0 + 1112);
        int v58 = *(_DWORD *)(v0 + 1116);
        BOOL v59 = __OFSUB__(v58, v57);
        int v60 = v58 - v57;
        if (v59) {
          goto LABEL_173;
        }
        int64_t v2 = v60;
LABEL_32:
        if (!v2) {
          goto LABEL_60;
        }
        uint64_t v63 = *(void *)(v0 + 1120) >> 62;
        *(void *)(v0 + 808) = _swiftEmptyArrayStorage;
        sub_1002CF974(0, v2 & ~(v2 >> 63), 0);
        uint64_t v1 = *(void **)(v0 + 808);
        if (!v63)
        {
          if ((v2 & 0x8000000000000000) == 0)
          {
            uint64_t v64 = 0;
            break;
          }
          goto LABEL_177;
        }
        if (v63 == 2)
        {
          uint64_t v64 = *(void *)(*(void *)(v0 + 1112) + 16);
          if ((v2 & 0x8000000000000000) == 0) {
            break;
          }
LABEL_171:
          __break(1u);
          goto LABEL_172;
        }
        uint64_t v64 = *(int *)(v0 + 1112);
        if (v2 < 0) {
          goto LABEL_171;
        }
        break;
      case 2uLL:
        uint64_t v61 = *(void *)(*(void *)(v0 + 1112) + 16);
        uint64_t v62 = *(void *)(*(void *)(v0 + 1112) + 24);
        int64_t v2 = v62 - v61;
        if (!__OFSUB__(v62, v61)) {
          goto LABEL_32;
        }
        goto LABEL_174;
      case 3uLL:
        goto LABEL_60;
      default:
        int64_t v2 = *(unsigned __int8 *)(v0 + 1126);
        goto LABEL_32;
    }
LABEL_40:
    unint64_t v65 = *(void *)(v0 + 1120);
    if (!(v65 >> 62)) {
      break;
    }
    if (v65 >> 62 != 1)
    {
      uint64_t v74 = *(void *)(v0 + 1112);
      if (v64 < *(void *)(v74 + 16)) {
        goto LABEL_152;
      }
      if (v64 >= *(void *)(v74 + 24)) {
        goto LABEL_154;
      }
      uint64_t v75 = __DataStorage._bytes.getter();
      unint64_t v69 = *(void *)(v0 + 1120);
      if (!v75) {
        goto LABEL_187;
      }
      uint64_t v70 = v75;
      uint64_t v76 = __DataStorage._offset.getter();
      uint64_t v72 = v64 - v76;
      if (__OFSUB__(v64, v76)) {
        goto LABEL_155;
      }
      goto LABEL_56;
    }
    uint64_t v66 = *(void *)(v0 + 1112);
    if (v64 < v66 >> 32 && v64 >= (int)v66)
    {
      uint64_t v68 = __DataStorage._bytes.getter();
      unint64_t v69 = *(void *)(v0 + 1120);
      if (!v68) {
        goto LABEL_186;
      }
      uint64_t v70 = v68;
      uint64_t v71 = __DataStorage._offset.getter();
      uint64_t v72 = v64 - v71;
      if (__OFSUB__(v64, v71)) {
        goto LABEL_153;
      }
LABEL_56:
      char v73 = *(unsigned char *)(v70 + v72);
      goto LABEL_57;
    }
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_5:
    unint64_t v16 = *(void **)(v0 + 1096);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (v64 >= BYTE6(v65)) {
    goto LABEL_151;
  }
  *(void *)(v0 + 1272) = *(void *)(v0 + 1112);
  *(_WORD *)(v0 + 1280) = v65;
  *(unsigned char *)(v0 + 1282) = BYTE2(v65);
  *(unsigned char *)(v0 + 1283) = BYTE3(v65);
  *(unsigned char *)(v0 + 1284) = BYTE4(v65);
  *(unsigned char *)(v0 + 1285) = BYTE5(v65);
  char v73 = *(unsigned char *)(v0 + 1272 + v64);
LABEL_57:
  sub_10006C51C(&qword_100457200);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_100378290;
  *(void *)(v77 + 56) = &type metadata for UInt8;
  *(void *)(v77 + 64) = &protocol witness table for UInt8;
  *(unsigned char *)(v77 + 32) = v73;
  uint64_t v78 = String.init(format:_:)();
  uint64_t v80 = v79;
  *(void *)uint64_t v191 = v1;
  unint64_t v82 = v1[2];
  unint64_t v81 = v1[3];
  if (v82 >= v81 >> 1)
  {
    sub_1002CF974(v81 > 1, v82 + 1, 1);
    uint64_t v1 = *(void **)v191;
  }
  v1[2] = v82 + 1;
  uint64_t v83 = &v1[2 * v82];
  v83[4] = v78;
  v83[5] = v80;
  ++v64;
  if (--v2) {
    goto LABEL_40;
  }
LABEL_60:
  unint64_t v84 = *(void *)(v0 + 1120);
  uint64_t v85 = *(void *)(v0 + 1112);
  *(void *)(v0 + 760) = v1;
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v86 = BidirectionalCollection<>.joined(separator:)();
  int64_t v2 = v87;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 712) = sub_100290514(v86, v2, v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v85, v84);
  sub_10006D144(v85, v84);
  *((_WORD *)v169 + 6) = 2080;
  uint64_t v1 = _swiftEmptyArrayStorage;
  int v88 = v181;
  uint64_t v175 = HIDWORD(v46);
  switch((int)v181)
  {
    case 1:
      if (__OFSUB__(HIDWORD(v46), v46)) {
        goto LABEL_175;
      }
      uint64_t v89 = HIDWORD(v46) - (int)v46;
LABEL_65:
      if (!v89) {
        goto LABEL_93;
      }
      *(void *)unint64_t v192 = _swiftEmptyArrayStorage;
      sub_1002CF974(0, v89 & ~(v89 >> 63), 0);
      uint64_t v1 = *(void **)v192;
      uint64_t v174 = (int)v46;
      if (!v181)
      {
        if ((v89 & 0x8000000000000000) == 0)
        {
          uint64_t v92 = 0;
          goto LABEL_74;
        }
        goto LABEL_184;
      }
      if (v181 != 1)
      {
        if ((v89 & 0x8000000000000000) == 0)
        {
          uint64_t v92 = *(void *)(v46 + 16);
          goto LABEL_74;
        }
LABEL_172:
        __break(1u);
LABEL_173:
        __break(1u);
LABEL_174:
        __break(1u);
LABEL_175:
        __break(1u);
LABEL_176:
        __break(1u);
LABEL_177:
        __break(1u);
LABEL_178:
        __break(1u);
LABEL_179:
        __break(1u);
LABEL_180:
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
      }
      uint64_t v92 = (int)v46;
      if (v89 < 0) {
        goto LABEL_172;
      }
LABEL_74:
      uint64_t v172 = v46 >> 32;
      os_log_type_t v173 = BYTE6(v177);
      uint64_t v179 = v46;
      do
      {
        if (v88)
        {
          if (v88 == 1)
          {
            if (v92 < v174 || v92 >= v172) {
              goto LABEL_156;
            }
            uint64_t v93 = __DataStorage._bytes.getter();
            if (!v93) {
              goto LABEL_188;
            }
            uint64_t v94 = v93;
            uint64_t v95 = __DataStorage._offset.getter();
            uint64_t v96 = v92 - v95;
            if (__OFSUB__(v92, v95)) {
              goto LABEL_159;
            }
          }
          else
          {
            if (v92 < *(void *)(v46 + 16)) {
              goto LABEL_158;
            }
            if (v92 >= *(void *)(v46 + 24)) {
              goto LABEL_160;
            }
            uint64_t v98 = __DataStorage._bytes.getter();
            if (!v98) {
              goto LABEL_189;
            }
            uint64_t v94 = v98;
            uint64_t v99 = __DataStorage._offset.getter();
            uint64_t v96 = v92 - v99;
            if (__OFSUB__(v92, v99)) {
              goto LABEL_161;
            }
          }
          char v97 = *(unsigned char *)(v94 + v96);
        }
        else
        {
          if (v92 >= BYTE6(v177)) {
            goto LABEL_157;
          }
          *(_WORD *)(v0 + 1286) = v46;
          *(unsigned char *)(v0 + 1288) = BYTE2(v46);
          *(unsigned char *)(v0 + 1289) = BYTE3(v46);
          *(unsigned char *)(v0 + 1290) = (_BYTE)v175;
          *(unsigned char *)(v0 + 1291) = BYTE5(v46);
          *(unsigned char *)(v0 + 1292) = BYTE6(v46);
          *(unsigned char *)(v0 + 1293) = HIBYTE(v46);
          *(_WORD *)(v0 + 1294) = v177;
          *(unsigned char *)(v0 + 1296) = BYTE2(v177);
          *(unsigned char *)(v0 + 1297) = BYTE3(v177);
          *(unsigned char *)(v0 + 1298) = BYTE4(v177);
          *(unsigned char *)(v0 + 1299) = BYTE5(v177);
          char v97 = *(unsigned char *)(v0 + 1286 + v92);
        }
        sub_10006C51C(&qword_100457200);
        uint64_t v100 = swift_allocObject();
        *(_OWORD *)(v100 + 16) = xmmword_100378290;
        *(void *)(v100 + 56) = &type metadata for UInt8;
        *(void *)(v100 + 64) = &protocol witness table for UInt8;
        *(unsigned char *)(v100 + 32) = v97;
        uint64_t v101 = String.init(format:_:)();
        uint64_t v103 = v102;
        *(void *)unint64_t v192 = v1;
        unint64_t v105 = v1[2];
        unint64_t v104 = v1[3];
        int64_t v2 = v105 + 1;
        if (v105 >= v104 >> 1)
        {
          sub_1002CF974(v104 > 1, v105 + 1, 1);
          uint64_t v1 = *(void **)v192;
        }
        v1[2] = v2;
        uint64_t v106 = &v1[2 * v105];
        v106[4] = v101;
        v106[5] = v103;
        ++v92;
        --v89;
        uint64_t v46 = v179;
        int v88 = v181;
      }
      while (v89);
LABEL_93:
      uint64_t v182 = *(void *)(v0 + 1056);
      *(void *)(v0 + 680) = v1;
      uint64_t v107 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v109 = v108;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 688) = sub_100290514(v107, v109, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = v177;
      sub_10006D144(v46, v177);
      sub_10006D144(v46, v177);
      *((_WORD *)v169 + 11) = 2112;
      unint64_t v23 = (unint64_t)(v169 + 8);
      *(void *)(v0 + 696) = v168;
      id v110 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v165 = v168;

      LODWORD(v26) = log;
      _os_log_impl((void *)&_mh_execute_header, log, v166, "Cannot export from my CA %s) to CA %s for peer %@", (uint8_t *)v169, 0x20u);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10006D144(v46, v177);
      uint64_t v56 = v182;
LABEL_94:
      sub_100170490(v56, type metadata accessor for SESPeerIdentityData);
      unint64_t v29 = *(void *)(v0 + 1152);
      if (v29 != *(void *)(v0 + 1136)) {
        goto LABEL_16;
      }
LABEL_95:
      unint64_t v111 = *(void *)(v0 + 1120);
      uint64_t v112 = *(void *)(v0 + 1112);
      swift_bridgeObjectRelease();
      sub_10006D144(v112, v111);
      unint64_t v113 = *(void *)(v0 + 920);
      if (v113 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v161 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v161) {
          goto LABEL_99;
        }
LABEL_97:
        unint64_t v114 = *(void *)(v0 + 1072);
        if (v114 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v162 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v162) {
            goto LABEL_99;
          }
        }
        else if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_99;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        unint64_t v163 = *(uint64_t (**)(void))(v0 + 8);
        return v163();
      }
      else
      {
        if (!*(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_97;
        }
LABEL_99:
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = swift_slowAlloc();
          *(_DWORD *)uint64_t v117 = 134218240;
          if (v113 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v118 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v118 = *(void *)((v113 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          unint64_t v119 = *(void *)(v0 + 1072);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 880) = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v117 + 12) = 2048;
          if (v119 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v120 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v120 = *(void *)((v119 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
          *(void *)(v0 + 840) = v120;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "Adding %ld shares and removing %ld shares", (uint8_t *)v117, 0x16u);
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        unint64_t v121 = *(void **)(*(void *)(v0 + 1016) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
        NSString v122 = String._bridgeToObjectiveC()();
        *(void *)(v0 + 1200) = v122;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1208) = isa;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        Class v124 = Array._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1216) = v124;
        swift_bridgeObjectRelease();
        Class v125 = Array._bridgeToObjectiveC()().super.isa;
        *(void *)(v0 + 1224) = v125;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 16) = v0;
        *(void *)(v0 + 24) = sub_10016217C;
        uint64_t v126 = swift_continuation_init();
        *(void *)(v0 + 464) = _NSConcreteStackBlock;
        *(void *)(v0 + 472) = 0x40000000;
        *(void *)(v0 + 480) = sub_1001BDDAC;
        *(void *)(v0 + 488) = &unk_100413138;
        *(void *)(v0 + 496) = v126;
        [v121 modifyTLKSharesForView:v122 altDSID:isa addingShares:v124 removingShares:v125 completion:v0 + 464];
        return _swift_continuation_await(v0 + 16);
      }
    case 2:
      uint64_t v91 = *(void *)(v46 + 16);
      uint64_t v90 = *(void *)(v46 + 24);
      uint64_t v89 = v90 - v91;
      if (!__OFSUB__(v90, v91)) {
        goto LABEL_65;
      }
      goto LABEL_176;
    case 3:
      goto LABEL_93;
    default:
      uint64_t v89 = BYTE6(v177);
      goto LABEL_65;
  }
}

uint64_t sub_10015FAAC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[148] = a1;
  v3[149] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[127];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100162470;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[127];
    uint64_t v5 = sub_10015FC38;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10015FC38()
{
  v214 = (v0 + 720);
  v217 = (uint64_t *)(v0 + 824);
  unint64_t v4 = *(void *)(v0 + 1192);
  uint64_t v5 = sub_100165528(*(void **)(v0 + 1184), *(void *)(v0 + 984), *(void *)(v0 + 968), *(void *)(v0 + 976), *(void *)(v0 + 1000), *(void *)(v0 + 1056));
  if (v4)
  {
    unint64_t v2 = v4;
    uint64_t v6 = *(void **)(v0 + 1144);
    unint64_t v7 = *(void *)(v0 + 976);
    uint64_t v8 = *(void *)(v0 + 968);
    sub_10006D0EC(v8, v7);
    id v9 = v6;
    swift_errorRetain();
    sub_10006D0EC(v8, v7);
    id v10 = v9;
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v205 = v12;
      log = v11;
      unint64_t v209 = v2;
      unint64_t v13 = v0 + 664;
      unint64_t v203 = (uint64_t *)(v0 + 752);
      v242 = (void *)(v0 + 768);
      unint64_t v14 = *(void *)(v0 + 976);
      uint64_t v202 = (void *)(v0 + 792);
      uint64_t v15 = *(void *)(v0 + 968);
      unint64_t v16 = (_DWORD *)swift_slowAlloc();
      uint64_t v204 = (void *)swift_slowAlloc();
      *(void *)(v0 + 752) = swift_slowAlloc();
      v206 = v16;
      *unint64_t v16 = 136315650;
      sub_10006D0EC(v15, v14);
      sub_10023CC58(4, v15, v14, (uint64_t *)(v0 + 664));
      unint64_t v17 = *(void *)(v0 + 664);
      unint64_t v236 = *(void *)(v0 + 672);
      unint64_t v18 = v236 >> 62;
      unint64_t v19 = _swiftEmptyArrayStorage;
      switch(v236 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v17), v17)) {
            goto LABEL_214;
          }
          uint64_t v20 = HIDWORD(v17) - (int)v17;
LABEL_12:
          if (!v20) {
            goto LABEL_39;
          }
          unint64_t v13 = v0 + 768;
          void *v242 = _swiftEmptyArrayStorage;
          sub_1002CF974(0, v20 & ~(v20 >> 63), 0);
          unint64_t v19 = (void *)*v242;
          uint64_t v234 = (int)v17;
          if (v18)
          {
            if (v18 == 1) {
              uint64_t v29 = (int)v17;
            }
            else {
              uint64_t v29 = *(void *)(v17 + 16);
            }
            if (v20 < 0)
            {
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
              goto LABEL_216;
            }
          }
          else
          {
            if (v20 < 0)
            {
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              uint64_t v0 = *(void *)(v0 + 1112);

              sub_10006D144(v1, v220);
              sub_10006D144(v0, v13);
              __break(1u);
LABEL_227:
              uint64_t v0 = *(void *)(v0 + 1112);

              sub_10006D144(v1, v220);
              sub_10006D144(v0, v13);
              __break(1u);
LABEL_228:

              sub_10006D144(v1, v220);
              __break(1u);
LABEL_229:

              sub_10006D144(v1, v220);
              __break(1u);
              goto LABEL_230;
            }
            uint64_t v29 = 0;
          }
          unint64_t v30 = v236 & 0x3FFFFFFFFFFFFFFFLL;
          unint64_t v229 = v17 >> 8;
          uint64_t v231 = (uint64_t)v17 >> 32;
          unint64_t v224 = v17 >> 24;
          unint64_t v227 = v17 >> 16;
          unint64_t v220 = v17 >> 40;
          unint64_t v221 = HIDWORD(v17);
          unint64_t v218 = HIWORD(v17);
          unint64_t v216 = HIBYTE(v17);
          unint64_t v212 = HIDWORD(v236);
          int64_t v213 = v236 >> 24;
          unint64_t v240 = v17;
          do
          {
            if (v18)
            {
              if (v18 == 1)
              {
                if (v29 < v234 || v29 >= v231) {
                  goto LABEL_192;
                }
                uint64_t v31 = __DataStorage._bytes.getter();
                if (!v31) {
                  goto LABEL_232;
                }
                uint64_t v32 = v31;
                uint64_t v33 = __DataStorage._offset.getter();
                uint64_t v34 = v29 - v33;
                if (__OFSUB__(v29, v33)) {
                  goto LABEL_195;
                }
              }
              else
              {
                if (v29 < *(void *)(v17 + 16)) {
                  goto LABEL_194;
                }
                if (v29 >= *(void *)(v17 + 24)) {
                  goto LABEL_196;
                }
                uint64_t v36 = __DataStorage._bytes.getter();
                if (!v36) {
                  goto LABEL_233;
                }
                uint64_t v32 = v36;
                uint64_t v37 = __DataStorage._offset.getter();
                uint64_t v34 = v29 - v37;
                if (__OFSUB__(v29, v37)) {
                  goto LABEL_197;
                }
              }
              char v35 = *(unsigned char *)(v32 + v34);
            }
            else
            {
              if (v29 >= BYTE6(v236)) {
                goto LABEL_193;
              }
              *(unsigned char *)(v0 + 1258) = v17;
              *(unsigned char *)(v0 + 1259) = v229;
              *(unsigned char *)(v0 + 1260) = v227;
              *(unsigned char *)(v0 + 1261) = v224;
              *(unsigned char *)(v0 + 1262) = v221;
              *(unsigned char *)(v0 + 1263) = v220;
              *(unsigned char *)(v0 + 1264) = v218;
              *(unsigned char *)(v0 + 1265) = v216;
              *(_DWORD *)(v0 + 1266) = v236;
              *(_WORD *)(v0 + 1270) = WORD2(v236);
              char v35 = *(unsigned char *)(v0 + 1258 + v29);
            }
            sub_10006C51C(&qword_100457200);
            uint64_t v38 = swift_allocObject();
            *(_OWORD *)(v38 + 16) = xmmword_100378290;
            *(void *)(v38 + 56) = &type metadata for UInt8;
            *(void *)(v38 + 64) = &protocol witness table for UInt8;
            *(unsigned char *)(v38 + 32) = v35;
            uint64_t v39 = String.init(format:_:)();
            uint64_t v1 = v40;
            void *v242 = v19;
            unint64_t v42 = v19[2];
            unint64_t v41 = v19[3];
            if (v42 >= v41 >> 1)
            {
              sub_1002CF974(v41 > 1, v42 + 1, 1);
              unint64_t v19 = (void *)*v242;
            }
            v19[2] = v42 + 1;
            unint64_t v43 = &v19[2 * v42];
            v43[4] = v39;
            v43[5] = v1;
            ++v29;
            --v20;
            LODWORD(v18) = v236 >> 62;
            unint64_t v17 = v240;
          }
          while (v20);
LABEL_39:
          uint64_t v44 = *(void **)(v0 + 1144);
          unint64_t v45 = *(void *)(v0 + 976);
          uint64_t v46 = *(void *)(v0 + 968);
          *(void *)(v0 + 776) = v19;
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v47 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v49 = v48;
          swift_bridgeObjectRelease();
          sub_10006D144(v17, v236);
          *(void *)(v0 + 784) = sub_100290514(v47, v49, v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v46, v45);
          sub_10006D144(v46, v45);
          *((_WORD *)v206 + 6) = 2112;
          *(void *)(v0 + 792) = v44;
          id v50 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v204 = v44;

          *((_WORD *)v206 + 11) = 2080;
          unint64_t v2 = v209;
          swift_getErrorValue();
          uint64_t v51 = Error.localizedDescription.getter();
          *(void *)(v0 + 816) = sub_100290514(v51, v52, v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, log, v205, "Couldn't share TLK %s to peer %@ : %s", (uint8_t *)v206, 0x20u);
          sub_10006C51C(&qword_100455620);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          break;
        case 2uLL:
          uint64_t v28 = *(void *)(v17 + 16);
          uint64_t v27 = *(void *)(v17 + 24);
          uint64_t v20 = v27 - v28;
          if (!__OFSUB__(v27, v28)) {
            goto LABEL_12;
          }
          goto LABEL_215;
        case 3uLL:
          goto LABEL_39;
        default:
          uint64_t v20 = BYTE6(v236);
          goto LABEL_12;
      }
    }
    else
    {
      uint64_t v24 = *(void **)(v0 + 1144);
      unint64_t v25 = *(void *)(v0 + 976);
      uint64_t v26 = *(void *)(v0 + 968);

      sub_10006D144(v26, v25);
      sub_10006D144(v26, v25);

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v21 = (id *)(v0 + 1144);
    uint64_t v3 = *(void **)(v0 + 1184);
    *(void *)(v0 + 720) = v2;
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if (swift_dynamicCast()) {
      char v53 = *(unsigned char *)(v0 + 1300);
    }
    else {
      char v53 = 28;
    }
    uint64_t v23 = self;
    sub_10006C51C(&qword_100455670);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378290;
    *(void *)(v0 + 600) = sub_10023B324(v53);
    *(void *)(v0 + 608) = v55;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 1;
    sub_1001DB24C(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10005069C(v23, isa);

    swift_errorRelease();
  }
  else
  {
    uint64_t v21 = (id *)(v0 + 1184);
    uint64_t v22 = v5;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 920) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v23 = *(void *)(v0 + 1144);
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  v210 = (void *)(v0 + 848);
  unint64_t v57 = *(void *)(v0 + 1168);
  unint64_t v30 = *(void *)(v0 + 1160);
  uint64_t v58 = *(void *)(v0 + 1056);

  sub_10006D144(v30, v57);
  sub_100170490(v58, type metadata accessor for SESPeerIdentityData);
  unint64_t v13 = *(void *)(v0 + 1152);
  if (v13 == *(void *)(v0 + 1136)) {
    goto LABEL_45;
  }
  v219 = (uint64_t *)(v0 + 352);
  unint64_t v238 = v0 + 704;
  v237 = (unint64_t *)(v0 + 808);
  uint64_t v198 = (uint64_t *)(v0 + 832);
  while (2)
  {
    uint64_t v68 = *(void *)(v0 + 1128);
    if ((v68 & 0xC000000000000001) != 0)
    {
      id v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if (v13 >= *(void *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        __break(1u);
        __break(1u);
        __break(1u);
        goto LABEL_152;
      }
      id v69 = *(id *)(v68 + 8 * v13 + 32);
    }
    uint64_t v70 = v69;
    *(void *)(v0 + 1144) = v69;
    *(void *)(v0 + 1152) = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_144:
      if (__OFSUB__(HIDWORD(v2), v2))
      {
LABEL_230:
        __break(1u);
LABEL_231:
        __break(1u);
LABEL_232:
        unint64_t v192 = *(void **)(v0 + 1144);
        unint64_t v193 = *(void *)(v0 + 976);
        uint64_t v0 = *(void *)(v0 + 968);
        swift_errorRelease();

        sub_10006D144(v0, v193);
        __break(1u);
LABEL_233:
        unint64_t v194 = *(void **)(v0 + 1144);
        unint64_t v195 = *(void *)(v0 + 976);
        uint64_t v196 = *(void *)(v0 + 968);
        swift_errorRelease();

        sub_10006D144(v196, v195);
        __break(1u);
LABEL_234:
        __break(1u);
      }
      uint64_t v23 = HIDWORD(v2) - (int)v2;
LABEL_147:
      if (!v23)
      {
LABEL_176:
        uint64_t v243 = *(void *)(v0 + 1048);
        unint64_t v180 = *(void *)(v0 + 976);
        uint64_t v181 = *(void *)(v0 + 968);
        *(void *)(v0 + 856) = v3;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v182 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v184 = v183;
        swift_bridgeObjectRelease();
        sub_10006D144(v2, v238);
        *(void *)(v0 + 864) = sub_100290514(v182, v184, v198);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v181, v180);
        sub_10006D144(v181, v180);
        *(_WORD *)(v213 + 12) = 2080;
        unint64_t v185 = sub_10023E134();
        *(void *)(v0 + 872) = sub_100290514(v185, v186, v198);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100170490(v243, type metadata accessor for SESPeerIdentityData);
        _os_log_impl((void *)&_mh_execute_header, v214, (os_log_type_t)v212, "KeySyncManager: Sharing TLK %s to %s)", (uint8_t *)v213, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

LABEL_177:
        unint64_t v187 = (void *)swift_task_alloc();
        *(void *)(v0 + 1176) = v187;
        *unint64_t v187 = v0;
        v187[1] = sub_10015FAAC;
        uint64_t v188 = *(void *)(v0 + 1016);
        v187[20] = v188;
        return _swift_task_switch(sub_100151718, v188, 0);
      }
      unint64_t v13 = v0 + 848;
      void *v210 = v3;
      sub_1002CF974(0, v23 & ~(v23 >> 63), 0);
      uint64_t v3 = (void *)*v210;
      v237 = (unint64_t *)(int)v2;
      if (v30)
      {
        if (v30 == 1) {
          uint64_t v1 = (int)v2;
        }
        else {
          uint64_t v1 = *(void *)(v2 + 16);
        }
        if (v23 < 0) {
          goto LABEL_225;
        }
LABEL_156:
        uint64_t v235 = (uint64_t)v2 >> 32;
        unint64_t v233 = v2 >> 8;
        unint64_t v230 = v2 >> 24;
        unint64_t v232 = v2 >> 16;
        unint64_t v226 = v2 >> 40;
        unint64_t v228 = HIDWORD(v2);
        unint64_t v220 = HIBYTE(v2);
        unint64_t v223 = HIWORD(v2);
        int v239 = v30;
        unint64_t v241 = v2;
        while (v23)
        {
          if (v30)
          {
            if (v30 == 1)
            {
              if (v1 < (uint64_t)v237 || v1 >= v235) {
                goto LABEL_217;
              }
              uint64_t v168 = __DataStorage._bytes.getter();
              if (!v168)
              {
                sub_10006D144(*(void *)(v0 + 968), *(void *)(v0 + 976));
                __break(1u);
LABEL_236:
                sub_10006D144(*(void *)(v0 + 968), *(void *)(v0 + 976));
                __break(1u);
                JUMPOUT(0x10016213CLL);
              }
              uint64_t v169 = v168;
              unint64_t v13 = v238 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v170 = __DataStorage._offset.getter();
              uint64_t v171 = v1 - v170;
              if (__OFSUB__(v1, v170)) {
                goto LABEL_220;
              }
            }
            else
            {
              if (v1 < *(void *)(v2 + 16)) {
                goto LABEL_219;
              }
              if (v1 >= *(void *)(v2 + 24)) {
                goto LABEL_221;
              }
              uint64_t v172 = __DataStorage._bytes.getter();
              if (!v172) {
                goto LABEL_236;
              }
              uint64_t v169 = v172;
              unint64_t v13 = v238 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v173 = __DataStorage._offset.getter();
              uint64_t v171 = v1 - v173;
              if (__OFSUB__(v1, v173)) {
                goto LABEL_222;
              }
            }
            unint64_t v13 = *(unsigned __int8 *)(v169 + v171);
          }
          else
          {
            if (v1 >= BYTE6(v238)) {
              goto LABEL_218;
            }
            *(unsigned char *)(v0 + 1244) = v2;
            *(unsigned char *)(v0 + 1245) = v233;
            *(unsigned char *)(v0 + 1246) = v232;
            *(unsigned char *)(v0 + 1247) = v230;
            *(unsigned char *)(v0 + 1248) = v228;
            *(unsigned char *)(v0 + 1249) = v226;
            *(unsigned char *)(v0 + 1250) = v223;
            *(unsigned char *)(v0 + 1251) = v220;
            *(_DWORD *)(v0 + 1252) = v238;
            *(_WORD *)(v0 + 1256) = WORD2(v238);
            unint64_t v13 = *(unsigned __int8 *)(v0 + 1244 + v1);
          }
          sub_10006C51C(&qword_100457200);
          uint64_t v174 = swift_allocObject();
          *(_OWORD *)(v174 + 16) = xmmword_100378290;
          *(void *)(v174 + 56) = &type metadata for UInt8;
          *(void *)(v174 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v174 + 32) = v13;
          unint64_t v30 = String.init(format:_:)();
          uint64_t v176 = v175;
          void *v210 = v3;
          unint64_t v178 = v3[2];
          unint64_t v177 = v3[3];
          if (v178 >= v177 >> 1)
          {
            unint64_t v13 = v0 + 848;
            sub_1002CF974(v177 > 1, v178 + 1, 1);
            uint64_t v3 = (void *)*v210;
          }
          v3[2] = v178 + 1;
          uint64_t v179 = &v3[2 * v178];
          v179[4] = v30;
          v179[5] = v176;
          ++v1;
          --v23;
          LODWORD(v30) = v239;
          unint64_t v2 = v241;
          if (!v23) {
            goto LABEL_176;
          }
        }
        __break(1u);
LABEL_207:
        __break(1u);
        goto LABEL_208;
      }
LABEL_152:
      if (v23 < 0) {
        goto LABEL_234;
      }
      uint64_t v1 = 0;
      goto LABEL_156;
    }
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    id v71 = [v70 peerData];
    uint64_t v72 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v74 = v73;

    sub_100170544(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v75 = *(void *)(v0 + 1056);
    uint64_t v76 = *(void *)(v0 + 1040);
    uint64_t v77 = *(void *)(v0 + 1032);
    uint64_t v3 = *(void **)(v0 + 1024);
    sub_10006D144(v72, v74);
    swift_release();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v76 + 56))(v3, 0, 1, v77);
    sub_1001705AC((uint64_t)v3, v75, type metadata accessor for SESPeerIdentityData);
    uint64_t v78 = *(void *)(v75 + 48);
    unint64_t v79 = *(void *)(v75 + 56);
    sub_10006C51C(&qword_10045B6F0);
    uint64_t v80 = swift_allocObject();
    *(unsigned char *)(v80 + 109) = 0;
    *(_WORD *)(v80 + 110) = -5120;
    *(_OWORD *)(v80 + 16) = xmmword_100378480;
    strcpy((char *)(v80 + 32), "serialNumber");
    *(unsigned char *)(v80 + 45) = 0;
    *(_WORD *)(v80 + 46) = -5120;
    *(void *)(v80 + 48) = 147;
    *(_WORD *)(v80 + 56) = 0;
    *(_OWORD *)(v80 + 64) = 0u;
    *(unsigned char *)(v80 + 80) = -64;
    *(void *)(v80 + 88) = _swiftEmptyArrayStorage;
    strcpy((char *)(v80 + 96), "caIdentifier");
    *(void *)(v80 + 112) = 66;
    *(_WORD *)(v80 + 120) = 0;
    *(_OWORD *)(v80 + 128) = 0u;
    *(unsigned char *)(v80 + 144) = -64;
    *(void *)(v80 + 152) = _swiftEmptyArrayStorage;
    *(void *)(v80 + 160) = 0xD000000000000011;
    *(void *)(v80 + 168) = 0x80000001003B4C60;
    *(void *)(v80 + 176) = 24352;
    *(_WORD *)(v80 + 184) = 0;
    *(_OWORD *)(v80 + 192) = 0u;
    *(unsigned char *)(v80 + 208) = -64;
    *(void *)(v80 + 216) = _swiftEmptyArrayStorage;
    *(void *)(v80 + 224) = 0x656761735579656BLL;
    *(void *)(v80 + 232) = 0xE800000000000000;
    *(void *)(v80 + 240) = 149;
    *(_WORD *)(v80 + 248) = 0;
    *(_OWORD *)(v80 + 256) = 0u;
    *(unsigned char *)(v80 + 272) = -64;
    *(void *)(v80 + 280) = _swiftEmptyArrayStorage;
    strcpy((char *)(v80 + 288), "effectiveDate");
    *(_WORD *)(v80 + 302) = -4864;
    *(void *)(v80 + 304) = 37;
    *(_WORD *)(v80 + 312) = 256;
    *(_OWORD *)(v80 + 320) = 0u;
    *(unsigned char *)(v80 + 336) = -64;
    *(void *)(v80 + 344) = _swiftEmptyArrayStorage;
    strcpy((char *)(v80 + 352), "expirationDate");
    *(unsigned char *)(v80 + 367) = -18;
    *(void *)(v80 + 368) = 24356;
    *(_WORD *)(v80 + 376) = 256;
    *(_OWORD *)(v80 + 384) = 0u;
    *(unsigned char *)(v80 + 400) = -64;
    *(void *)(v80 + 408) = _swiftEmptyArrayStorage;
    *(void *)(v80 + 416) = 0x4E4944536163;
    *(void *)(v80 + 424) = 0xE600000000000000;
    *(void *)(v80 + 432) = 69;
    *(_WORD *)(v80 + 440) = 0;
    *(_OWORD *)(v80 + 448) = 0u;
    *(unsigned char *)(v80 + 464) = -64;
    *(void *)(v80 + 472) = _swiftEmptyArrayStorage;
    *(void *)(v80 + 480) = 0xD000000000000011;
    *(void *)(v80 + 488) = 0x80000001003B4C80;
    *(void *)(v80 + 496) = 83;
    *(_WORD *)(v80 + 504) = 0;
    *(_OWORD *)(v80 + 512) = 0u;
    *(unsigned char *)(v80 + 528) = -64;
    *(void *)(v80 + 536) = _swiftEmptyArrayStorage;
    *(void *)(v80 + 544) = 0x654B63696C627570;
    *(void *)(v80 + 552) = 0xE900000000000079;
    *(void *)(v80 + 560) = 32585;
    *(_WORD *)(v80 + 568) = 0;
    *(_OWORD *)(v80 + 576) = 0u;
    *(unsigned char *)(v80 + 592) = -64;
    *(void *)(v80 + 600) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 416) = 32545;
    *(unsigned char *)(v0 + 424) = 0;
    *(unsigned char *)(v0 + 425) = 0;
    *(void *)(v0 + 432) = v80;
    *(void *)(v0 + 440) = 0;
    *(unsigned char *)(v0 + 448) = 64;
    *(void *)(v0 + 456) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 648) = v78;
    *(void *)(v0 + 656) = v79;
    sub_10006D0EC(v78, v79);
    sub_10006D0EC(v78, v79);
    unint64_t v81 = sub_100188FB0(v0 + 648, (__n128 *)(v0 + 416));
    sub_10006D144(*(void *)(v0 + 648), *(void *)(v0 + 656));
    swift_bridgeObjectRelease();
    sub_100253000(v81, v219);
    unint64_t v82 = *(void *)(v0 + 1120);
    uint64_t v83 = *(void *)(v0 + 1112);
    sub_10006D144(v78, v79);
    uint64_t v1 = *(void *)(v0 + 368);
    unint64_t v84 = *(void *)(v0 + 376);
    *(void *)(v0 + 1160) = v1;
    *(void *)(v0 + 1168) = v84;
    sub_10006D0EC(v1, v84);
    sub_1001706B4(v219, (void (*)(uint64_t, uint64_t))sub_10006D144);
    char v85 = sub_100088AE4(v1, v84, v83, v82);
    if (v85)
    {
      unint64_t v156 = *(void *)(v0 + 976);
      uint64_t v157 = *(void *)(v0 + 968);
      sub_10017092C(*(void *)(v0 + 1056), *(void *)(v0 + 1048), type metadata accessor for SESPeerIdentityData);
      sub_10006D0EC(v157, v156);
      sub_10006D0EC(v157, v156);
      unint64_t v158 = Logger.logObject.getter();
      os_log_type_t v159 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v158, v159))
      {
        LOBYTE(v212) = v159;
        v214 = v158;
        unint64_t v160 = *(void *)(v0 + 976);
        uint64_t v161 = *(void *)(v0 + 968);
        uint64_t v162 = (_DWORD *)swift_slowAlloc();
        *(void *)(v0 + 832) = swift_slowAlloc();
        int64_t v213 = (int64_t)v162;
        *uint64_t v162 = 136315394;
        sub_10006D0EC(v161, v160);
        sub_10023CC58(4, v161, v160, (uint64_t *)(v0 + 632));
        unint64_t v2 = *(void *)(v0 + 632);
        unint64_t v238 = *(void *)(v0 + 640);
        unint64_t v30 = v238 >> 62;
        uint64_t v3 = _swiftEmptyArrayStorage;
        switch(v238 >> 62)
        {
          case 1uLL:
            goto LABEL_144;
          case 2uLL:
            uint64_t v167 = *(void *)(v2 + 16);
            uint64_t v166 = *(void *)(v2 + 24);
            uint64_t v23 = v166 - v167;
            if (!__OFSUB__(v166, v167)) {
              goto LABEL_147;
            }
            goto LABEL_231;
          case 3uLL:
            goto LABEL_176;
          default:
            uint64_t v23 = BYTE6(v238);
            goto LABEL_147;
        }
      }
      uint64_t v163 = *(void *)(v0 + 1048);
      unint64_t v164 = *(void *)(v0 + 976);
      uint64_t v165 = *(void *)(v0 + 968);

      sub_10006D144(v165, v164);
      sub_10006D144(v165, v164);
      sub_100170490(v163, type metadata accessor for SESPeerIdentityData);
      goto LABEL_177;
    }
    unint64_t v86 = *(void *)(v0 + 1120);
    uint64_t v87 = *(void *)(v0 + 1112);
    sub_10006D0EC(v87, v86);
    sub_10006D0EC(v1, v84);
    id v88 = v70;
    sub_10006D0EC(v87, v86);
    sub_10006D0EC(v1, v84);
    unint64_t v2 = (unint64_t)v88;
    uint64_t v89 = Logger.logObject.getter();
    os_log_type_t v90 = static os_log_type_t.error.getter();
    BOOL v91 = os_log_type_enabled(v89, v90);
    unint64_t v92 = *(void *)(v0 + 1120);
    if (!v91)
    {
      unint64_t v30 = *(void *)(v0 + 1112);
      uint64_t v23 = *(void *)(v0 + 1056);
      sub_10006D144(v1, v84);

      sub_10006D144(v30, v92);
      sub_10006D144(v30, v92);
      sub_10006D144(v1, v84);
      sub_10006D144(v1, v84);

      uint64_t v95 = v23;
      goto LABEL_134;
    }
    os_log_type_t v200 = v90;
    uint64_t v201 = v89;
    uint64_t v202 = (void *)v2;
    unint64_t v220 = v84;
    unint64_t v225 = v84 >> 62;
    unint64_t v13 = v92 >> 62;
    uint64_t v93 = (_DWORD *)swift_slowAlloc();
    unint64_t v199 = (void *)swift_slowAlloc();
    uint64_t *v217 = swift_slowAlloc();
    v207 = v93;
    *uint64_t v93 = 136315650;
    unint64_t v30 = (unint64_t)_swiftEmptyArrayStorage;
    switch(v13)
    {
      case 1uLL:
        int v96 = *(_DWORD *)(v0 + 1112);
        int v97 = *(_DWORD *)(v0 + 1116);
        BOOL v98 = __OFSUB__(v97, v96);
        int v99 = v97 - v96;
        if (v98) {
          goto LABEL_210;
        }
        uint64_t v94 = v99;
LABEL_72:
        if (!v94) {
          goto LABEL_100;
        }
        uint64_t v102 = *(void *)(v0 + 1120) >> 62;
        *(void *)(v0 + 808) = _swiftEmptyArrayStorage;
        unint64_t v13 = v0 + 808;
        sub_1002CF974(0, v94 & ~(v94 >> 63), 0);
        unint64_t v30 = *(void *)(v0 + 808);
        if (!v102)
        {
          if ((v94 & 0x8000000000000000) == 0)
          {
            uint64_t v103 = 0;
            goto LABEL_80;
          }
LABEL_216:
          __break(1u);
LABEL_217:
          __break(1u);
LABEL_218:
          __break(1u);
LABEL_219:
          __break(1u);
LABEL_220:
          __break(1u);
LABEL_221:
          __break(1u);
LABEL_222:
          __break(1u);
          goto LABEL_223;
        }
        if (v102 == 2)
        {
          uint64_t v103 = *(void *)(*(void *)(v0 + 1112) + 16);
          if ((v94 & 0x8000000000000000) == 0) {
            goto LABEL_80;
          }
          goto LABEL_207;
        }
        uint64_t v103 = *(int *)(v0 + 1112);
        if (v94 < 0) {
          goto LABEL_207;
        }
        do
        {
LABEL_80:
          unint64_t v104 = *(void *)(v0 + 1120);
          if (v104 >> 62)
          {
            if (v104 >> 62 == 1)
            {
              uint64_t v105 = *(void *)(v0 + 1112);
              if (v103 >= v105 >> 32 || v103 < (int)v105)
              {
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
LABEL_186:
                __break(1u);
LABEL_187:
                __break(1u);
LABEL_188:
                __break(1u);
LABEL_189:
                __break(1u);
LABEL_190:
                __break(1u);
LABEL_191:
                __break(1u);
LABEL_192:
                __break(1u);
LABEL_193:
                __break(1u);
LABEL_194:
                __break(1u);
LABEL_195:
                __break(1u);
LABEL_196:
                __break(1u);
LABEL_197:
                __break(1u);
                goto LABEL_198;
              }
              uint64_t v107 = __DataStorage._bytes.getter();
              unint64_t v13 = *(void *)(v0 + 1120);
              if (!v107) {
                goto LABEL_226;
              }
              uint64_t v108 = v107;
              uint64_t v109 = __DataStorage._offset.getter();
              uint64_t v110 = v103 - v109;
              if (__OFSUB__(v103, v109)) {
                goto LABEL_183;
              }
            }
            else
            {
              uint64_t v112 = *(void *)(v0 + 1112);
              if (v103 < *(void *)(v112 + 16)) {
                goto LABEL_182;
              }
              if (v103 >= *(void *)(v112 + 24)) {
                goto LABEL_184;
              }
              uint64_t v113 = __DataStorage._bytes.getter();
              unint64_t v13 = *(void *)(v0 + 1120);
              if (!v113) {
                goto LABEL_227;
              }
              uint64_t v108 = v113;
              uint64_t v114 = __DataStorage._offset.getter();
              uint64_t v110 = v103 - v114;
              if (__OFSUB__(v103, v114)) {
                goto LABEL_185;
              }
            }
            char v111 = *(unsigned char *)(v108 + v110);
          }
          else
          {
            if (v103 >= BYTE6(v104)) {
              goto LABEL_181;
            }
            *(void *)(v0 + 1272) = *(void *)(v0 + 1112);
            *(_WORD *)(v0 + 1280) = v104;
            *(unsigned char *)(v0 + 1282) = BYTE2(v104);
            *(unsigned char *)(v0 + 1283) = BYTE3(v104);
            *(unsigned char *)(v0 + 1284) = BYTE4(v104);
            *(unsigned char *)(v0 + 1285) = BYTE5(v104);
            char v111 = *(unsigned char *)(v0 + 1272 + v103);
          }
          sub_10006C51C(&qword_100457200);
          uint64_t v115 = swift_allocObject();
          *(_OWORD *)(v115 + 16) = xmmword_100378290;
          *(void *)(v115 + 56) = &type metadata for UInt8;
          *(void *)(v115 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v115 + 32) = v111;
          uint64_t v116 = String.init(format:_:)();
          uint64_t v118 = v117;
          unint64_t *v237 = v30;
          unint64_t v120 = *(void *)(v30 + 16);
          unint64_t v119 = *(void *)(v30 + 24);
          if (v120 >= v119 >> 1)
          {
            sub_1002CF974(v119 > 1, v120 + 1, 1);
            unint64_t v30 = *v237;
          }
          *(void *)(v30 + 16) = v120 + 1;
          unint64_t v121 = v30 + 16 * v120;
          *(void *)(v121 + 32) = v116;
          *(void *)(v121 + 40) = v118;
          ++v103;
          --v94;
        }
        while (v94);
LABEL_100:
        unint64_t v122 = *(void *)(v0 + 1120);
        uint64_t v123 = *(void *)(v0 + 1112);
        *(void *)(v0 + 760) = v30;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        unint64_t v13 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v125 = v124;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 712) = sub_100290514(v13, v125, v217);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v123, v122);
        sub_10006D144(v123, v122);
        *((_WORD *)v207 + 6) = 2080;
        unint64_t v30 = (unint64_t)_swiftEmptyArrayStorage;
        int v126 = v225;
        unint64_t v215 = HIDWORD(v1);
        switch((int)v225)
        {
          case 1:
            if (__OFSUB__(HIDWORD(v1), v1)) {
              goto LABEL_212;
            }
            uint64_t v127 = HIDWORD(v1) - (int)v1;
LABEL_105:
            if (!v127) {
              goto LABEL_133;
            }
            unint64_t v13 = v0 + 704;
            *(void *)unint64_t v238 = _swiftEmptyArrayStorage;
            sub_1002CF974(0, v127 & ~(v127 >> 63), 0);
            unint64_t v30 = *(void *)v238;
            int64_t v213 = (int)v1;
            if (!v225)
            {
              if ((v127 & 0x8000000000000000) == 0)
              {
                uint64_t v130 = 0;
                goto LABEL_114;
              }
LABEL_223:
              __break(1u);
              goto LABEL_224;
            }
            if (v225 == 1)
            {
              uint64_t v130 = (int)v1;
              if (v127 < 0)
              {
LABEL_208:
                __break(1u);
                goto LABEL_209;
              }
            }
            else
            {
              if (v127 < 0) {
                goto LABEL_208;
              }
              uint64_t v130 = *(void *)(v1 + 16);
            }
LABEL_114:
            uint64_t v211 = v1 >> 32;
            LOBYTE(v212) = BYTE6(v220);
            uint64_t v222 = v1;
            do
            {
              if (v126)
              {
                if (v126 == 1)
                {
                  if (v130 < v213 || v130 >= v211) {
                    goto LABEL_186;
                  }
                  uint64_t v131 = __DataStorage._bytes.getter();
                  if (!v131) {
                    goto LABEL_228;
                  }
                  uint64_t v132 = v131;
                  uint64_t v133 = __DataStorage._offset.getter();
                  uint64_t v134 = v130 - v133;
                  if (__OFSUB__(v130, v133)) {
                    goto LABEL_189;
                  }
                }
                else
                {
                  if (v130 < *(void *)(v1 + 16)) {
                    goto LABEL_188;
                  }
                  if (v130 >= *(void *)(v1 + 24)) {
                    goto LABEL_190;
                  }
                  uint64_t v136 = __DataStorage._bytes.getter();
                  if (!v136) {
                    goto LABEL_229;
                  }
                  uint64_t v132 = v136;
                  uint64_t v137 = __DataStorage._offset.getter();
                  uint64_t v134 = v130 - v137;
                  if (__OFSUB__(v130, v137)) {
                    goto LABEL_191;
                  }
                }
                char v135 = *(unsigned char *)(v132 + v134);
              }
              else
              {
                if (v130 >= BYTE6(v220)) {
                  goto LABEL_187;
                }
                *(_WORD *)(v0 + 1286) = v1;
                *(unsigned char *)(v0 + 1288) = BYTE2(v1);
                *(unsigned char *)(v0 + 1289) = BYTE3(v1);
                *(unsigned char *)(v0 + 1290) = v215;
                *(unsigned char *)(v0 + 1291) = BYTE5(v1);
                *(unsigned char *)(v0 + 1292) = BYTE6(v1);
                *(unsigned char *)(v0 + 1293) = HIBYTE(v1);
                *(_WORD *)(v0 + 1294) = v220;
                *(unsigned char *)(v0 + 1296) = BYTE2(v220);
                *(unsigned char *)(v0 + 1297) = BYTE3(v220);
                *(unsigned char *)(v0 + 1298) = BYTE4(v220);
                *(unsigned char *)(v0 + 1299) = BYTE5(v220);
                char v135 = *(unsigned char *)(v0 + 1286 + v130);
              }
              sub_10006C51C(&qword_100457200);
              uint64_t v138 = swift_allocObject();
              *(_OWORD *)(v138 + 16) = xmmword_100378290;
              *(void *)(v138 + 56) = &type metadata for UInt8;
              *(void *)(v138 + 64) = &protocol witness table for UInt8;
              *(unsigned char *)(v138 + 32) = v135;
              uint64_t v139 = String.init(format:_:)();
              uint64_t v141 = v140;
              *(void *)unint64_t v238 = v30;
              unint64_t v143 = *(void *)(v30 + 16);
              unint64_t v142 = *(void *)(v30 + 24);
              if (v143 >= v142 >> 1)
              {
                sub_1002CF974(v142 > 1, v143 + 1, 1);
                unint64_t v30 = *(void *)v238;
              }
              *(void *)(v30 + 16) = v143 + 1;
              unint64_t v144 = v30 + 16 * v143;
              *(void *)(v144 + 32) = v139;
              *(void *)(v144 + 40) = v141;
              ++v130;
              --v127;
              uint64_t v1 = v222;
              int v126 = v225;
            }
            while (v127);
LABEL_133:
            uint64_t v145 = *(void *)(v0 + 1056);
            uint64_t v3 = v207;
            *(void *)(v0 + 680) = v30;
            uint64_t v146 = BidirectionalCollection<>.joined(separator:)();
            unint64_t v148 = v147;
            swift_bridgeObjectRelease();
            *(void *)(v0 + 688) = sub_100290514(v146, v148, v217);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v2 = v1;
            sub_10006D144(v1, v220);
            sub_10006D144(v1, v220);
            *((_WORD *)v207 + 11) = 2112;
            uint64_t v23 = (uint64_t)(v207 + 8);
            *(void *)(v0 + 696) = v202;
            id v149 = v202;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *unint64_t v199 = v202;

            LODWORD(v30) = v201;
            _os_log_impl((void *)&_mh_execute_header, v201, v200, "Cannot export from my CA %s) to CA %s for peer %@", (uint8_t *)v207, 0x20u);
            sub_10006C51C(&qword_100455620);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_10006D144(v1, v220);
            uint64_t v95 = v145;
LABEL_134:
            sub_100170490(v95, type metadata accessor for SESPeerIdentityData);
            unint64_t v13 = *(void *)(v0 + 1152);
            if (v13 != *(void *)(v0 + 1136)) {
              continue;
            }
LABEL_45:
            unint64_t v59 = *(void *)(v0 + 1120);
            uint64_t v60 = *(void *)(v0 + 1112);
            swift_bridgeObjectRelease();
            sub_10006D144(v60, v59);
            unint64_t v30 = *(void *)(v0 + 920);
            uint64_t v1 = v30 >> 62;
            if (!(v30 >> 62))
            {
              if (!*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                goto LABEL_47;
              }
LABEL_49:
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              uint64_t v62 = Logger.logObject.getter();
              os_log_type_t v63 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v62, v63))
              {
                uint64_t v64 = swift_slowAlloc();
                *(_DWORD *)uint64_t v64 = 134218240;
                if (v1)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v65 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
                }
                unint64_t v66 = *(void *)(v0 + 1072);
                swift_bridgeObjectRelease();
                *(void *)(v0 + 880) = v65;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v64 + 12) = 2048;
                if (v66 >> 62)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v67 = *(void *)((v66 & 0xFFFFFFFFFFFFFF8) + 0x10);
                }
                swift_bridgeObjectRelease();
                *(void *)(v0 + 840) = v67;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v62, v63, "Adding %ld shares and removing %ld shares", (uint8_t *)v64, 0x16u);
                swift_slowDealloc();
              }
              else
              {
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }

              unint64_t v150 = *(void **)(*(void *)(v0 + 1016) + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper);
              NSString v151 = String._bridgeToObjectiveC()();
              *(void *)(v0 + 1200) = v151;
              Class v152 = Data._bridgeToObjectiveC()().super.isa;
              *(void *)(v0 + 1208) = v152;
              swift_beginAccess();
              swift_bridgeObjectRetain();
              Class v153 = Array._bridgeToObjectiveC()().super.isa;
              *(void *)(v0 + 1216) = v153;
              swift_bridgeObjectRelease();
              Class v154 = Array._bridgeToObjectiveC()().super.isa;
              *(void *)(v0 + 1224) = v154;
              swift_bridgeObjectRelease();
              *(void *)(v0 + 16) = v0;
              *(void *)(v0 + 24) = sub_10016217C;
              uint64_t v155 = swift_continuation_init();
              *(void *)(v0 + 464) = _NSConcreteStackBlock;
              *(void *)(v0 + 472) = 0x40000000;
              *(void *)(v0 + 480) = sub_1001BDDAC;
              *(void *)(v0 + 488) = &unk_100413138;
              *(void *)(v0 + 496) = v155;
              [v150 modifyTLKSharesForView:v151 altDSID:v152 addingShares:v153 removingShares:v154 completion:v0 + 464];
              return _swift_continuation_await(v0 + 16);
            }
LABEL_198:
            swift_bridgeObjectRetain();
            uint64_t v189 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v189) {
              goto LABEL_49;
            }
LABEL_47:
            unint64_t v61 = *(void *)(v0 + 1072);
            if (v61 >> 62)
            {
              swift_bridgeObjectRetain();
              uint64_t v190 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v190) {
                goto LABEL_49;
              }
            }
            else if (*(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              goto LABEL_49;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_task_dealloc();
            swift_task_dealloc();
            swift_task_dealloc();
            uint64_t v191 = *(uint64_t (**)(void))(v0 + 8);
            return v191();
          case 2:
            uint64_t v129 = *(void *)(v1 + 16);
            uint64_t v128 = *(void *)(v1 + 24);
            uint64_t v127 = v128 - v129;
            if (!__OFSUB__(v128, v129)) {
              goto LABEL_105;
            }
            goto LABEL_213;
          case 3:
            goto LABEL_133;
          default:
            uint64_t v127 = BYTE6(v220);
            goto LABEL_105;
        }
      case 2uLL:
        uint64_t v100 = *(void *)(*(void *)(v0 + 1112) + 16);
        uint64_t v101 = *(void *)(*(void *)(v0 + 1112) + 24);
        uint64_t v94 = v101 - v100;
        if (!__OFSUB__(v101, v100)) {
          goto LABEL_72;
        }
        goto LABEL_211;
      case 3uLL:
        goto LABEL_100;
      default:
        uint64_t v94 = *(unsigned __int8 *)(v0 + 1126);
        goto LABEL_72;
    }
  }
}

uint64_t sub_10016217C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 1232) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 1016);
    unint64_t v4 = sub_100162578;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 1016);
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_1001622F0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001622F0()
{
  uint64_t v1 = *(void **)(v0 + 1216);
  uint64_t v2 = *(void **)(v0 + 1208);
  uint64_t v3 = *(void **)(v0 + 1200);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_1001623C0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100162470()
{
  unint64_t v1 = *(void *)(v0 + 1168);
  uint64_t v2 = *(void *)(v0 + 1160);
  unint64_t v3 = *(void *)(v0 + 1120);
  uint64_t v4 = *(void *)(v0 + 1112);
  uint64_t v5 = *(void *)(v0 + 1056);

  sub_10006D144(v2, v1);
  sub_10006D144(v4, v3);
  sub_100170490(v5, type metadata accessor for SESPeerIdentityData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100162578()
{
  unint64_t v16 = v0;
  unint64_t v1 = v0 + 115;
  uint64_t v2 = (void *)v0[153];
  unint64_t v3 = (void *)v0[152];
  uint64_t v4 = (void *)v0[151];
  uint64_t v5 = (void *)v0[150];
  swift_willThrow();

  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    v0[93] = sub_100290514(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to modifyTLKShares %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v11) {
    char v12 = 23;
  }
  else {
    char v12 = 24;
  }
  sub_100164280(v12, 0);
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100162848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[16] = a7;
  v8[17] = v7;
  v8[14] = a5;
  v8[15] = a6;
  v8[12] = a3;
  v8[13] = a4;
  v8[10] = a1;
  v8[11] = a2;
  type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
  v8[18] = swift_task_alloc();
  return _swift_task_switch(sub_1001628E4, v7, 0);
}

uint64_t sub_1001628E4()
{
  sub_1001B34D8(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(NSObject **)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 144));
  sub_100170490(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100162B6C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 160) = a1;
  *(void *)(v4 + 168) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 136);
  if (v1) {
    uint64_t v6 = sub_100162F08;
  }
  else {
    uint64_t v6 = sub_100162CA0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100162CA0()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  sub_1001B6144(*(void **)(v0 + 160), *(__CFString **)(v0 + 80), *(__CFString **)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 128));

  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      *(void *)(v0 + 72) = sub_100290514(v5, v6, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to store recovery record : %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    *(void *)(v0 + 40) = v1;
    swift_errorRetain();
    if (swift_dynamicCast()) {
      char v7 = *(unsigned char *)(v0 + 186);
    }
    else {
      char v7 = 28;
    }
    sub_100164280(v7, 0);
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100162F08()
{
  uint64_t v11 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 72) = sub_100290514(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to store recovery record : %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  *(void *)(v0 + 40) = v1;
  swift_errorRetain();
  if (swift_dynamicCast()) {
    char v7 = *(unsigned char *)(v0 + 186);
  }
  else {
    char v7 = 28;
  }
  sub_100164280(v7, 0);
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10016313C(void *a1)
{
  uint64_t result = sub_100183180(a1);
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      char v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)char v7 = 136315138;
      swift_getErrorValue();
      uint64_t v8 = Error.localizedDescription.getter();
      sub_100290514(v8, v9, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to query device identity hash %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10016FF34();
    swift_allocError();
    *uint64_t v10 = 31;
    swift_willThrow();
    return swift_errorRelease();
  }
  else if (v4 >> 60 == 15)
  {
    sub_1001833E8(a1);
    uint64_t result = sub_100183180(a1);
    if (v11 >> 60 == 15)
    {
      sub_10016FF34();
      swift_allocError();
      *uint64_t v12 = 27;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100163680@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100183180(a1);
  if (!v2)
  {
    uint64_t v7 = v6;
    if (v6 >> 60 == 15)
    {
      sub_10016FF34();
      swift_allocError();
      *uint64_t v8 = 27;
      return swift_willThrow();
    }
    else
    {
      uint64_t v9 = result;
      Class v10 = sub_100183B60(a1);
      unint64_t v12 = v11;
      uint64_t v14 = v13;
      unint64_t v16 = v15;
      uint64_t v29 = (uint64_t)v10;
      sub_10006D0EC((uint64_t)v10, v11);
      sub_10006D0EC(v14, v16);
      id v18 = sub_100056FD0(a1, v17);
      id v19 = [v18 casdCertificate];

      uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v27 = v21;
      uint64_t v28 = v20;

      uint64_t v22 = type metadata accessor for SESPeerIdentityData(0);
      uint64_t v23 = (char *)a2 + *(int *)(v22 + 32);
      static Date.now.getter();
      uint64_t v24 = type metadata accessor for Date();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
      unint64_t v25 = (uint64_t *)((char *)a2 + *(int *)(v22 + 36));
      sub_1001A41BC(v25);
      uint64_t v26 = type metadata accessor for CreationMetadata(0);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 0, 1, v26);
      sub_10006D144(v14, v16);
      uint64_t result = sub_10006D144(v29, v12);
      *a2 = v9;
      a2[1] = v7;
      a2[2] = v29;
      a2[3] = v12;
      a2[4] = v14;
      a2[5] = v16;
      a2[6] = v28;
      a2[7] = v27;
    }
  }
  return result;
}

uint64_t sub_100163A14(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v11 = a1[2];
  unint64_t v10 = a1[3];
  sub_1002237C0((uint64_t)&v44);
  *(void *)&v52[0] = v11;
  *((void *)&v52[0] + 1) = v10;
  sub_10006D0EC(v11, v10);
  sub_10006D0EC(v11, v10);
  unint64_t v12 = sub_100188FB0((uint64_t)v52, &v44);
  unint64_t v41 = a5;
  sub_10006D144(*(uint64_t *)&v52[0], *((unint64_t *)&v52[0] + 1));
  sub_10016FB80(&v45, v67);
  sub_10016FBDC((uint64_t)v67);
  uint64_t v66 = v46;
  sub_10016FC34((uint64_t)&v66);
  sub_100224600(v12, (uint64_t)v47);
  sub_10006D144(v11, v10);
  uint64_t v14 = a1[4];
  unint64_t v13 = a1[5];
  sub_1002237C0((uint64_t)&v49);
  *(void *)&v52[0] = v14;
  *((void *)&v52[0] + 1) = v13;
  sub_10006D0EC(v14, v13);
  sub_10006D0EC(v14, v13);
  unint64_t v15 = sub_100188FB0((uint64_t)v52, &v49);
  sub_10006D144(*(uint64_t *)&v52[0], *((unint64_t *)&v52[0] + 1));
  sub_10016FB80(&v50, &v65);
  sub_10016FBDC((uint64_t)&v65);
  uint64_t v64 = v51;
  sub_10016FC34((uint64_t)&v64);
  sub_100224600(v15, (uint64_t)v52);
  sub_10006D144(v14, v13);
  v61[5] = v47[4];
  *(_OWORD *)uint64_t v62 = v47[5];
  *(void *)&v62[16] = v48;
  v61[3] = v47[2];
  v61[4] = v47[3];
  v61[2] = v47[1];
  long long v63 = *(_OWORD *)&v62[8];
  long long v42 = *(_OWORD *)&v62[8];
  long long v55 = v52[0];
  long long v56 = v52[1];
  long long v59 = v52[4];
  *(_OWORD *)uint64_t v60 = v53;
  *(void *)&v60[16] = v54;
  long long v57 = v52[2];
  long long v58 = v52[3];
  v61[0] = *(_OWORD *)&v60[8];
  v61[1] = v47[0];
  unint64_t v18 = v54;
  uint64_t v17 = *((void *)&v53 + 1);
  sub_100170740((uint64_t)&v63);
  sub_100170740((uint64_t)&v63);
  sub_100170740((uint64_t)v61);
  sub_100141068(v17, v18);
  sub_100170770((uint64_t)v61);
  sub_100170770((uint64_t)&v63);
  long long v43 = v42;
  sub_10006D0EC(v42, *((unint64_t *)&v42 + 1));
  unint64_t v19 = a3;
  uint64_t v20 = a2;
  sub_10006D0EC(a2, v19);
  sub_100141068(a2, v19);
  sub_10006D144(a2, v19);
  sub_10006D144(v42, *((unint64_t *)&v42 + 1));
  uint64_t v21 = sub_1002B3BD0(v42, *((unint64_t *)&v42 + 1));
  unint64_t v23 = v22;
  sub_10006D144(v42, *((unint64_t *)&v42 + 1));
  sub_10006D0EC(a2, v19);
  uint64_t v24 = a4;
  unint64_t v25 = v41;
  sub_10006D0EC(a4, v41);
  sub_10006D0EC(v21, v23);
  sub_10006D0EC(v20, v19);
  sub_10006D0EC(a4, v41);
  sub_10006D0EC(v21, v23);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    *(void *)&long long v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315650;
    sub_10023CDF4(v20, v19);
    log = v26;
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v40 = v21;
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    sub_100290514(v29, v31, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(v20, v19);
    sub_10006D144(v20, v19);
    *(_WORD *)(v28 + 12) = 2080;
    sub_10023CDF4(v24, v41);
    uint64_t v32 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    sub_100290514(v32, v34, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v25 = v41;
    swift_bridgeObjectRelease();
    sub_10006D144(v24, v41);
    sub_10006D144(v24, v41);
    *(_WORD *)(v28 + 22) = 2080;
    uint64_t v21 = v40;
    sub_10023CDF4(v40, v23);
    uint64_t v35 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    sub_100290514(v35, v37, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(v40, v23);
    sub_10006D144(v40, v23);
    _os_log_impl((void *)&_mh_execute_header, log, v27, "For DSID %s expected %s got %s", (uint8_t *)v28, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_10006D144(v20, v19);
    sub_10006D144(v20, v19);
    sub_10006D144(v24, v41);
    sub_10006D144(v24, v41);
    sub_10006D144(v21, v23);
    sub_10006D144(v21, v23);
  }
  char v38 = sub_100088AE4(v21, v23, v24, v25);
  sub_10006D144(v21, v23);
  sub_1001707A0(v52);
  sub_1001707A0(v47);
  return v38 & 1;
}

void sub_100164280(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = self;
  sub_10006C51C(&qword_100455670);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  sub_10023B324(a1);
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = &type metadata for Int;
  *(void *)(inited + 72) = 1;
  sub_1001DB24C(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10005069C(v6, isa);

  if ((a2 & 1) == 0)
  {
    uint64_t v9 = self;
    NSString v10 = String._bridgeToObjectiveC()();
    unsigned __int8 v11 = [v9 isAlarmSet:v10];

    if ((v11 & 1) == 0 && (*(unsigned char *)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_stopped) & 1) == 0)
    {
      unint64_t v12 = (long long *)(v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__errorCount);
      swift_beginAccess();
      *(_OWORD *)unint64_t v23 = v12[1];
      *(_OWORD *)&v23[9] = *(long long *)((char *)v12 + 25);
      long long v24 = *v12;
      long long v25 = *(_OWORD *)v23;
      sub_100079AE8((uint64_t)&v24);
      sub_100079AE8((uint64_t)&v25);
      sub_1001AF748();
      uint64_t v14 = v13;
      sub_100079B14((uint64_t)&v24);
      sub_100079B14((uint64_t)&v25);
      uint64_t v15 = 6;
      if (v14 < 6) {
        uint64_t v15 = v14;
      }
      double v16 = *((double *)&off_10040E9E0 + (v15 & ~(v15 >> 63)) + 4);
      swift_retain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 134218240;
        *(_OWORD *)unint64_t v22 = v12[1];
        *(_OWORD *)&v22[9] = *(long long *)((char *)v12 + 25);
        long long v26 = *v12;
        long long v27 = *(_OWORD *)v22;
        sub_100079AE8((uint64_t)&v26);
        sub_100079AE8((uint64_t)&v27);
        sub_1001AF748();
        sub_100079B14((uint64_t)&v26);
        sub_100079B14((uint64_t)&v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v19 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "KeySyncManager: Retrying count %ld in %f seconds", (uint8_t *)v19, 0x16u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      NSString v20 = String._bridgeToObjectiveC()();
      [v9 setAlarm:v20 secondsFromNow:v16];

      swift_beginAccess();
      sub_1001AF748();
      if (__OFADD__(v21, 1))
      {
        __break(1u);
      }
      else
      {
        sub_10016B870();
        swift_endAccess();
      }
    }
  }
}

uint64_t sub_100164638(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (a4)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v6 = swift_allocError();
    *uint64_t v7 = a4;
    id v8 = a4;
    return _swift_continuation_throwingResumeWithError(v4, v6);
  }
  else
  {
    if (a2)
    {
      id v10 = a2;
      id v11 = a3;
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;
    }
    else
    {
      id v15 = a3;
      uint64_t v12 = 0;
      unint64_t v14 = 0xF000000000000000;
    }
    sub_10007582C(0, &qword_100456530);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = *(uint64_t **)(*(void *)(v4 + 64) + 40);
    uint64_t *v17 = v12;
    v17[1] = v14;
    v17[2] = v16;
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_100164764(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  v3[16] = type metadata accessor for SESTLKRecordData(0);
  v3[17] = swift_task_alloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v3[18] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100164844;
  v4[20] = v2;
  return _swift_task_switch(sub_100151718, v2, 0);
}

uint64_t sub_100164844(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[19] = a1;
  v3[20] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v3[15];
    return _swift_task_switch(sub_100164994, v7, 0);
  }
}

uint64_t sub_100164994()
{
  uint64_t v80 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  sub_100184464(*(void **)(v0 + 152), *(void *)(*(void *)(v0 + 104) + 16), *(void *)(*(void *)(v0 + 104) + 24), *(unsigned char *)(*(void *)(v0 + 104) + 32), (uint64_t)v65);
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_getErrorValue();
      uint64_t v5 = Error.localizedDescription.getter();
      v64[8] = sub_100290514(v5, v6, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to createTLK on SE %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    unint64_t v22 = (void *)v64[19];
    sub_10016FF34();
    swift_allocError();
    unsigned char *v23 = 10;
    swift_willThrow();

    swift_errorRelease();
    swift_task_dealloc();
    long long v24 = (uint64_t (*)(void))v64[1];
    return v24();
  }
  else
  {
    uint64_t v7 = v66;
    uint64_t v48 = v65[0];
    unint64_t v49 = v65[1];
    unint64_t v8 = v67;
    uint64_t v50 = v68;
    unint64_t v51 = v69;
    uint64_t v52 = v70;
    unint64_t v53 = v71;
    uint64_t v54 = v72;
    unint64_t v55 = v73;
    uint64_t v56 = v74;
    unint64_t v57 = v75;
    uint64_t v9 = v78;
    uint64_t v58 = v76;
    unint64_t v59 = v77;
    unint64_t v10 = v79;
    id v11 = (uint64_t *)v64[17];
    uint64_t v12 = (uint64_t *)((char *)v11 + *(int *)(v64[16] + 20));
    unint64_t v13 = (__CFString **)v64[13];
    sub_10006D0EC(v66, v67);
    sub_10006D0EC(v7, v8);
    sub_10006D0EC(v9, v10);
    sub_1001A41BC(v12);
    uint64_t v14 = type metadata accessor for CreationMetadata(0);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v12, 0, 1, v14);
    uint64_t v46 = v9;
    unint64_t v47 = v10;
    *id v11 = v9;
    v11[1] = v10;
    id v15 = *v13;
    uint64_t v16 = v13[1];
    id v61 = String._bridgeToObjectiveC()();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v62 = v7;
    unint64_t v17 = v8;
    Class v18 = Data._bridgeToObjectiveC()().super.isa;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100170544(&qword_100456520, (void (*)(uint64_t))type metadata accessor for SESTLKRecordData);
    uint64_t v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v21 = v20;
    swift_release();
    unint64_t v41 = v16;
    long long v42 = v15;
    __n128 v44 = (void *)v64[19];
    uint64_t v45 = v64[14];
    uint64_t v43 = v64[13];
    long long v26 = self;
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v19, v21);
    id v28 = [v26 withView:v61 tlkUUID:isa parentTLKUUID:v18 recordData:v27];

    sub_10006D144(v62, v17);
    sub_10006D144(v62, v17);
    id v29 = [v28 tlkUUID];
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    long long v63 = sub_100165528(v44, v43, v30, v32, v45, v45);
    unint64_t v33 = (void *)v64[19];
    unint64_t v34 = v64[14];
    sub_10006D144(v30, v32);
    id v35 = [v28 tlkUUID];
    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    sub_1001B6144(v33, v42, v41, v36, v38, v34);
    uint64_t v39 = (void *)v64[19];
    sub_100170490(v64[17], type metadata accessor for SESTLKRecordData);
    sub_10006D144(v46, v47);
    sub_10006D144(v48, v49);
    sub_10006D144(v62, v17);
    sub_10006D144(v50, v51);
    sub_10006D144(v52, v53);
    sub_100075868(v54, v55);
    sub_100075868(v56, v57);
    sub_100075868(v58, v59);
    sub_10006D144(v36, v38);

    swift_task_dealloc();
    uint64_t v40 = (uint64_t (*)(id, uint64_t *))v64[1];
    return v40(v28, v63);
  }
}

uint64_t *sub_100165528(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v44 = a2;
  uint64_t v12 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v45 = &v42[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v15 = (int *)type metadata accessor for SESTLKShareData(0);
  __chkstk_darwin(v15, v16);
  Class v18 = &v42[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v19 = sub_1001853DC(a1, a3, a4, a6);
  uint64_t v46 = v6;
  if (v6)
  {
    sub_10017092C(a6, (uint64_t)v45, type metadata accessor for SESPeerIdentityData);
    sub_10006D0EC(a3, a4);
    swift_errorRetain();
    sub_10006D0EC(a3, a4);
    swift_errorRetain();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    unint64_t v23 = (uint64_t *)v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v48 = v44;
      *(_DWORD *)uint64_t v24 = 136315650;
      int v43 = (int)v23;
      uint64_t v47 = (uint64_t)sub_10023CDF4(a3, a4);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v47 = sub_100290514(v25, v27, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      *(_WORD *)(v24 + 12) = 2080;
      id v28 = v45;
      unint64_t v29 = sub_10023E134();
      uint64_t v47 = sub_100290514(v29, v30, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100170490((uint64_t)v28, type metadata accessor for SESPeerIdentityData);
      *(_WORD *)(v24 + 22) = 2080;
      swift_getErrorValue();
      uint64_t v31 = Error.localizedDescription.getter();
      uint64_t v47 = sub_100290514(v31, v32, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v43, "Failed to export TLK %s to peer %s : %s", (uint8_t *)v24, 0x20u);
      unint64_t v23 = (uint64_t *)v44;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      sub_100170490((uint64_t)v45, type metadata accessor for SESPeerIdentityData);
      swift_errorRelease();
      swift_errorRelease();
    }
    sub_10016FF34();
    swift_allocError();
    *uint64_t v40 = 14;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v33 = v19;
    unint64_t v34 = v20;
    sub_10017092C(a5, (uint64_t)v18, type metadata accessor for SESPeerIdentityData);
    sub_10017092C(a6, (uint64_t)&v18[v15[5]], type metadata accessor for SESPeerIdentityData);
    unint64_t v23 = (uint64_t *)&v18[v15[7]];
    sub_10006D0EC(v33, v34);
    sub_1001A41BC(v23);
    uint64_t v35 = type metadata accessor for CreationMetadata(0);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v23, 0, 1, v35);
    uint64_t v36 = (uint64_t *)&v18[v15[6]];
    *uint64_t v36 = v33;
    v36[1] = v34;
    uint64_t v37 = v46;
    uint64_t v38 = sub_1001A6B34();
    if (v37)
    {
      sub_10016FF34();
      swift_allocError();
      *uint64_t v39 = 5;
      swift_willThrow();
      sub_10006D144(v33, v34);
      swift_errorRelease();
      sub_100170490((uint64_t)v18, type metadata accessor for SESTLKShareData);
    }
    else
    {
      unint64_t v23 = (uint64_t *)v38;
      sub_100170490((uint64_t)v18, type metadata accessor for SESTLKShareData);
      sub_10006D144(v33, v34);
    }
  }
  return v23;
}

uint64_t sub_100165AD4(void **a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *a1;
  id v11 = [v10 view];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if (v12 == *a2 && v14 == a2[1])
  {
    swift_bridgeObjectRelease();
    sub_10017092C(a3, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    sub_10017092C(a3, (uint64_t)v9, type metadata accessor for SESPeerIdentityData);
    char v17 = 0;
    if ((v16 & 1) == 0) {
      goto LABEL_9;
    }
  }
  id v18 = [v10 targetPeerIdentifier];
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  char v17 = sub_100088AE4(v19, v21, *(void *)v9, *((void *)v9 + 1));
  sub_10006D144(v19, v21);
LABEL_9:
  sub_100170490((uint64_t)v9, type metadata accessor for SESPeerIdentityData);
  return v17 & 1;
}

uint64_t sub_100165C80(void **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v8 - 8, v9);
  id v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  id v13 = [v12 tlkUUID];
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  LOBYTE(a3) = sub_100088AE4(v14, v16, a2, a3);
  sub_10006D144(v14, v16);
  if ((a3 & 1) == 0)
  {
    sub_10017092C(a4, (uint64_t)v11, type metadata accessor for SESPeerIdentityData);
    goto LABEL_5;
  }
  id v17 = [v12 sourcePeerIdentifier];
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  id v21 = [v12 targetPeerIdentifier];
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  LOBYTE(v21) = sub_100088AE4(v18, v20, v22, v24);
  sub_10006D144(v22, v24);
  sub_10006D144(v18, v20);
  sub_10017092C(a4, (uint64_t)v11, type metadata accessor for SESPeerIdentityData);
  if (v21)
  {
LABEL_5:
    char v29 = 0;
    goto LABEL_6;
  }
  id v25 = [v12 targetPeerIdentifier];
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  char v29 = sub_100088AE4(v26, v28, *(void *)v11, *((void *)v11 + 1));
  sub_10006D144(v26, v28);
LABEL_6:
  sub_100170490((uint64_t)v11, type metadata accessor for SESPeerIdentityData);
  return v29 & 1;
}

uint64_t sub_100165EB4(void **a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v8 - 8, v9);
  id v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  id v13 = [v12 tlkUUID];
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  LOBYTE(a3) = sub_100088AE4(v14, v16, a2, a3);
  sub_10006D144(v14, v16);
  if ((a3 & 1) == 0)
  {
    sub_10017092C(a4, (uint64_t)v11, type metadata accessor for SESPeerIdentityData);
    goto LABEL_5;
  }
  id v17 = [v12 sourcePeerIdentifier];
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  id v21 = [v12 targetPeerIdentifier];
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  LOBYTE(v21) = sub_100088AE4(v18, v20, v22, v24);
  sub_10006D144(v22, v24);
  sub_10006D144(v18, v20);
  sub_10017092C(a4, (uint64_t)v11, type metadata accessor for SESPeerIdentityData);
  if ((v21 & 1) == 0)
  {
LABEL_5:
    char v29 = 0;
    goto LABEL_6;
  }
  id v25 = [v12 targetPeerIdentifier];
  uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v28 = v27;

  char v29 = sub_100088AE4(v26, v28, *(void *)v11, *((void *)v11 + 1));
  sub_10006D144(v26, v28);
LABEL_6:
  sub_100170490((uint64_t)v11, type metadata accessor for SESPeerIdentityData);
  return v29 & 1;
}

uint64_t sub_1001660E8@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v5 = *(void *)(v1 + 48);
  unint64_t v4 = *(void *)(v1 + 56);
  sub_10006C51C(&qword_10045B6F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378480;
  strcpy((char *)(inited + 32), "serialNumber");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 48) = 147;
  *(_WORD *)(inited + 56) = 0;
  *(_OWORD *)(inited + 64) = 0u;
  *(unsigned char *)(inited + 80) = -64;
  *(void *)(inited + 88) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 96), "caIdentifier");
  *(unsigned char *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 66;
  *(_WORD *)(inited + 120) = 0;
  *(_OWORD *)(inited + 128) = 0u;
  *(unsigned char *)(inited + 144) = -64;
  *(void *)(inited + 152) = _swiftEmptyArrayStorage;
  *(void *)(inited + 160) = 0xD000000000000011;
  *(void *)(inited + 168) = 0x80000001003B4C60;
  *(void *)(inited + 176) = 24352;
  *(_WORD *)(inited + 184) = 0;
  *(_OWORD *)(inited + 192) = 0u;
  *(unsigned char *)(inited + 208) = -64;
  *(void *)(inited + 216) = _swiftEmptyArrayStorage;
  *(void *)(inited + 224) = 0x656761735579656BLL;
  *(void *)(inited + 232) = 0xE800000000000000;
  *(void *)(inited + 240) = 149;
  *(_WORD *)(inited + 248) = 0;
  *(_OWORD *)(inited + 256) = 0u;
  *(unsigned char *)(inited + 272) = -64;
  *(void *)(inited + 280) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 288), "effectiveDate");
  *(_WORD *)(inited + 302) = -4864;
  *(void *)(inited + 304) = 37;
  *(_WORD *)(inited + 312) = 256;
  *(_OWORD *)(inited + 320) = 0u;
  *(unsigned char *)(inited + 336) = -64;
  *(void *)(inited + 344) = _swiftEmptyArrayStorage;
  strcpy((char *)(inited + 352), "expirationDate");
  *(unsigned char *)(inited + 367) = -18;
  *(void *)(inited + 368) = 24356;
  *(_WORD *)(inited + 376) = 256;
  *(_OWORD *)(inited + 384) = 0u;
  *(unsigned char *)(inited + 400) = -64;
  *(void *)(inited + 408) = _swiftEmptyArrayStorage;
  *(void *)(inited + 416) = 0x4E4944536163;
  *(void *)(inited + 424) = 0xE600000000000000;
  *(void *)(inited + 432) = 69;
  *(_WORD *)(inited + 440) = 0;
  *(_OWORD *)(inited + 448) = 0u;
  *(unsigned char *)(inited + 464) = -64;
  *(void *)(inited + 472) = _swiftEmptyArrayStorage;
  *(void *)(inited + 480) = 0xD000000000000011;
  *(void *)(inited + 488) = 0x80000001003B4C80;
  *(void *)(inited + 496) = 83;
  *(_WORD *)(inited + 504) = 0;
  *(_OWORD *)(inited + 512) = 0u;
  *(unsigned char *)(inited + 528) = -64;
  *(void *)(inited + 536) = _swiftEmptyArrayStorage;
  *(void *)(inited + 544) = 0x654B63696C627570;
  *(void *)(inited + 552) = 0xE900000000000079;
  *(void *)(inited + 560) = 32585;
  *(_WORD *)(inited + 568) = 0;
  *(_OWORD *)(inited + 576) = 0u;
  *(unsigned char *)(inited + 592) = -64;
  *(void *)(inited + 600) = _swiftEmptyArrayStorage;
  v14.n128_u64[0] = 32545;
  v14.n128_u16[4] = 0;
  uint64_t v15 = inited;
  uint64_t v16 = 0;
  char v17 = 64;
  uint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v11 = v5;
  unint64_t v12 = v4;
  sub_10006D0EC(v5, v4);
  sub_10006D0EC(v5, v4);
  unint64_t v7 = sub_100188FB0((uint64_t)&v11, &v14);
  sub_10006D144(v11, v12);
  if (v2)
  {
    sub_10006D144(v5, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100253000(v7, v13);
    uint64_t result = sub_10006D144(v5, v4);
    long long v9 = v13[1];
    *a1 = v13[0];
    a1[1] = v9;
    long long v10 = v13[3];
    a1[2] = v13[2];
    a1[3] = v10;
  }
  return result;
}

BOOL sub_1001663D4(uint64_t *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *a1;
  id v9 = [a2 tlkShares];
  sub_10007582C(0, &qword_100456488);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v13[2] = a3;
  v13[3] = a4;
  _OWORD v13[4] = v8;
  v13[5] = a5;
  char v11 = sub_100140F30(sub_10016FF10, (uint64_t)v13, v10);
  swift_bridgeObjectRelease();
  return (v11 & 1) == 0;
}

uint64_t sub_1001664B8(void **a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v45 = a5;
  uint64_t v9 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  id v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v44 - v15;
  char v17 = *a1;
  id v18 = [v17 tlkUUID];
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  LOBYTE(a3) = sub_100088AE4(v19, v21, a2, a3);
  sub_10006D144(v19, v21);
  if ((a3 & 1) == 0)
  {
    sub_10017092C(v45, (uint64_t)v16, type metadata accessor for SESPeerIdentityData);
    goto LABEL_6;
  }
  id v22 = [v17 targetPeerIdentifier];
  uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v25 = v24;

  id v26 = [a4 peerIdentifier];
  uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  LOBYTE(v26) = sub_100088AE4(v23, v25, v27, v29);
  sub_10006D144(v27, v29);
  sub_10006D144(v23, v25);
  sub_10017092C(v45, (uint64_t)v16, type metadata accessor for SESPeerIdentityData);
  if ((v26 & 1) == 0)
  {
LABEL_6:
    char v38 = 0;
    id v13 = v16;
    goto LABEL_9;
  }
  id v30 = [v17 sourcePeerIdentifier];
  uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v33 = v32;

  id v34 = [v17 targetPeerIdentifier];
  uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v37 = v36;

  LOBYTE(v34) = sub_100088AE4(v31, v33, v35, v37);
  sub_10006D144(v35, v37);
  sub_10006D144(v31, v33);
  sub_10017092C((uint64_t)v16, (uint64_t)v13, type metadata accessor for SESPeerIdentityData);
  if (v34)
  {
    char v38 = 1;
  }
  else
  {
    id v39 = [v17 sourcePeerIdentifier];
    uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v42 = v41;

    char v38 = sub_100088AE4(v40, v42, *(void *)v13, *((void *)v13 + 1));
    sub_10006D144(v40, v42);
  }
  sub_100170490((uint64_t)v16, type metadata accessor for SESPeerIdentityData);
LABEL_9:
  sub_100170490((uint64_t)v13, type metadata accessor for SESPeerIdentityData);
  return v38 & 1;
}

uint64_t sub_1001667E8(uint64_t a1, unint64_t a2, void *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v70 = a3;
  uint64_t v71 = a5;
  unint64_t v68 = a4;
  uint64_t v9 = sub_10006C51C(&qword_1004564D0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  id v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)&v64 - v20;
  id v22 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_recoveryPending);
  swift_beginAccess();
  uint64_t v23 = *v22;
  swift_bridgeObjectRetain();
  uint64_t v69 = a1;
  LOBYTE(a1) = sub_1000B6F04(a1, a2, v23);
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
  {
    uint64_t v64 = v18;
    __n128 v65 = v12;
    unint64_t v28 = v70;
    uint64_t v27 = v71;
    uint64_t v66 = v21;
    uint64_t v67 = v14;
    uint64_t v29 = v6 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce;
    swift_beginAccess();
    long long v30 = *(_OWORD *)(v29 + 16);
    v76[0] = *(_OWORD *)v29;
    v76[1] = v30;
    __int16 v77 = *(_WORD *)(v29 + 32);
    long long v78 = v76[0];
    long long v79 = v30;
    sub_100079AE8((uint64_t)&v78);
    sub_100079AE8((uint64_t)&v79);
    sub_1001AF4B4();
    LOBYTE(v29) = v31;
    sub_100079B14((uint64_t)&v78);
    sub_100079B14((uint64_t)&v79);
    if (v29)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        id v34 = (uint8_t *)swift_slowAlloc();
        *(void *)&v74[0] = swift_slowAlloc();
        *(_DWORD *)id v34 = 136315138;
        swift_bridgeObjectRetain();
        v73[2] = sub_100290514(v69, a2, (uint64_t *)v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Forcing recovery for view %s", v34, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_1001413C0(0, &OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryForce);
    }
    else
    {
      uint64_t v36 = v6 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager__recoveryRequiredPref;
      swift_beginAccess();
      long long v37 = *(_OWORD *)(v36 + 16);
      v74[0] = *(_OWORD *)v36;
      v74[1] = v37;
      __int16 v75 = *(_WORD *)(v36 + 32);
      long long v80 = v74[0];
      v81[0] = v37;
      sub_100079AE8((uint64_t)&v80);
      sub_100079AE8((uint64_t)v81);
      sub_1001AF4B4();
      LOBYTE(v36) = v38;
      sub_100079B14((uint64_t)&v80);
      sub_100079B14((uint64_t)v81);
      if ((v36 & 1) == 0)
      {
        id v39 = [v28 tlkShares];
        sub_10007582C(0, &qword_100456488);
        unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        unint64_t v41 = v68;
        swift_bridgeObjectRetain();
        LOBYTE(v39) = sub_10016DCA0(v40, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v39)
        {
          uint64_t v42 = type metadata accessor for SESPeerIdentityData(0);
          uint64_t v43 = (uint64_t)v65;
          sub_100170994(v27 + *(int *)(v42 + 32), (uint64_t)v65, &qword_1004564D0);
          uint64_t v44 = v67;
          uint64_t v45 = v13;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v43, 1, v13) == 1)
          {
            uint64_t v46 = v66;
            static Date.now.getter();
            sub_10008E734(v43, &qword_1004564D0);
          }
          else
          {
            uint64_t v46 = v66;
            (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v66, v43, v45);
          }
          unint64_t v51 = v64;
          Date.timeIntervalSinceNow.getter();
          double v53 = fabs(v52);
          (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v51, v46, v45);
          uint64_t v54 = Logger.logObject.getter();
          os_log_type_t v55 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v54, v55))
          {
            uint64_t v56 = swift_slowAlloc();
            v73[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v56 = 136315394;
            sub_100170544(&qword_100456500, (void (*)(uint64_t))&type metadata accessor for Date);
            uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v72 = sub_100290514(v57, v58, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            unint64_t v59 = *(void (**)(char *, uint64_t))(v67 + 8);
            v59(v51, v45);
            *(_WORD *)(v56 + 12) = 2048;
            uint64_t v72 = *(void *)&v53;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "Identity has existed since %s with delta %f", (uint8_t *)v56, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v46 = v66;
            swift_slowDealloc();
          }
          else
          {

            unint64_t v59 = *(void (**)(char *, uint64_t))(v44 + 8);
            v59(v51, v45);
          }
          if (v53 <= 86400.0)
          {
            uint64_t v60 = self;
            NSString v61 = String._bridgeToObjectiveC()();
            unsigned __int8 v62 = [v60 isAlarmSet:v61];

            if ((v62 & 1) == 0)
            {
              NSString v63 = String._bridgeToObjectiveC()();
              [v60 setAlarm:v63 secondsFromNow:86400.0 - v53 + 300.0];
            }
            v59(v66, v45);
            return 0;
          }
          v59(v46, v45);
        }
        else
        {
          swift_bridgeObjectRetain_n();
          uint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v50 = (uint8_t *)swift_slowAlloc();
            v73[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v50 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v72 = sub_100290514(v69, a2, v73);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "Recovery is required because view %s doesn't have any trusted peer with a self share", v50, 0xCu);
            uint64_t v35 = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            return v35;
          }
          swift_bridgeObjectRelease_n();
        }
      }
    }
    return 1;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    id v26 = (uint8_t *)swift_slowAlloc();
    *(void *)&v76[0] = swift_slowAlloc();
    *(_DWORD *)id v26 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&v74[0] = sub_100290514(v69, a2, (uint64_t *)v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Recovery for view %s is already in flight ... ", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return 0;
}

BOOL sub_1001671E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10006C51C(&qword_1004564D0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SESTLKRecordData(0);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (void *)((char *)v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v47 - v15;
  sub_1001A3F20(v13);
  sub_1001705AC((uint64_t)v13, (uint64_t)v16, type metadata accessor for SESTLKRecordData);
  uint64_t v17 = (uint64_t *)&v16[*(int *)(v9 + 20)];
  uint64_t v18 = type metadata accessor for CreationMetadata(0);
  int v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18);
  uint64_t v51 = 0;
  unint64_t v20 = 0;
  if (!v19)
  {
    unint64_t v20 = v17[1];
    uint64_t v51 = *v17;
    swift_bridgeObjectRetain();
  }
  uint64_t v21 = v3 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  swift_bridgeObjectRetain_n();
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v50 = v3;
    os_log_type_t v25 = (uint8_t *)v24;
    v47[0] = swift_slowAlloc();
    v53[0] = v47[0];
    uint64_t v48 = v8;
    os_log_type_t v49 = v16;
    *(_DWORD *)os_log_type_t v25 = 136315138;
    if (v20) {
      uint64_t v26 = v51;
    }
    else {
      uint64_t v26 = 0x3E6C696E3CLL;
    }
    if (v20) {
      unint64_t v27 = v20;
    }
    else {
      unint64_t v27 = 0xE500000000000000;
    }
    v47[1] = v21;
    swift_bridgeObjectRetain();
    uint64_t v52 = sub_100290514(v26, v27, v53);
    uint64_t v16 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v8 = v48;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "TLK was created on version %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!v20) {
      goto LABEL_23;
    }
  }
  else
  {
    swift_bridgeObjectRelease_n();

    if (!v20) {
      goto LABEL_23;
    }
  }
  unint64_t v28 = sub_10016863C();
  if (v30)
  {
    if ((uint64_t)v28 >= 22)
    {
      swift_bridgeObjectRelease();
LABEL_16:
      swift_bridgeObjectRetain();
      char v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
        v53[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v33 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v52 = sub_100290514(v51, v20, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Not forcing recovery of TLK created on newer version %s", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_100164280(17, 0);
      sub_100170490((uint64_t)v16, type metadata accessor for SESTLKRecordData);
      return 0;
    }
    if (v28 != (unsigned __int8 *)21 || v29 == 66 && v30 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v46) {
        goto LABEL_16;
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_23:
  if (qword_100453900 != -1) {
    swift_once();
  }
  BOOL v34 = sub_10029E40C();
  uint64_t v35 = type metadata accessor for SESPeerIdentityData(0);
  sub_100170994(a2 + *(int *)(v35 + 32), (uint64_t)v8, &qword_1004564D0);
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v8, 1, v36) == 1)
  {
    sub_10008E734((uint64_t)v8, &qword_1004564D0);
    double v38 = 0.0;
  }
  else
  {
    Date.timeIntervalSinceNow.getter();
    double v38 = v39;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v36);
  }
  unint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    *(_DWORD *)uint64_t v42 = 67109376;
    LODWORD(v53[0]) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 8) = 2048;
    *(double *)double v53 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Recovery blob haveFidoKeys %{BOOL}d identityAge %f", (uint8_t *)v42, 0x12u);
    swift_slowDealloc();
  }

  double v43 = 172800.0;
  if (v34) {
    double v43 = 1209600.0;
  }
  BOOL v44 = v43 < fabs(v38);
  sub_100170490((uint64_t)v16, type metadata accessor for SESTLKRecordData);
  return v44;
}

uint64_t sub_100167B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 72) = v12;
  *(_OWORD *)(v8 + 56) = v11;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 16) = a4;
  type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
  *(void *)(v8 + 80) = swift_task_alloc();
  return _swift_task_switch(sub_100167C48, 0, 0);
}

uint64_t sub_100167C48()
{
  id v1 = [*(id *)(v0 + 32) currentTLK];
  if (v1)
  {
    unint64_t v4 = v1;
    uint64_t v5 = *(void *)(v0 + 80);
    unint64_t v7 = *(void *)(v0 + 56);
    uint64_t v6 = *(void **)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v10 = *(void *)(v0 + 16);
    uint64_t v9 = *(void *)(v0 + 24);
    id v11 = [v1 tlkUUID];

    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    *(void *)(v0 + 88) = v12;
    *(void *)(v0 + 96) = v14;
    unsigned __int8 v15 = [v6 isProd];
    sub_1001B34D8(v10, v9, v12, v14, v8, v7, v5);
    unint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_100457A70 + dword_100457A70);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 104) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100167E10;
    uint64_t v17 = *(void *)(v0 + 80);
    uint64_t v18 = *(void *)(v0 + 40);
    return v20(v17, v18, v15);
  }
  else
  {
    __break(1u);
    return _swift_task_switch(0, v2, v3);
  }
}

uint64_t sub_100167E10()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100167FB4;
  }
  else {
    uint64_t v2 = sub_100167F24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100167F24()
{
  uint64_t v1 = v0[11];
  unint64_t v2 = v0[12];
  sub_100170490(v0[10], (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  sub_10006D144(v1, v2);
  v0[15] = 0;
  uint64_t v3 = v0[9];
  return _swift_task_switch(sub_100168040, v3, 0);
}

uint64_t sub_100167FB4()
{
  sub_100170490(v0[10], (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  uint64_t v1 = v0[14];
  sub_10006D144(v0[11], v0[12]);
  v0[15] = v1;
  uint64_t v2 = v0[9];
  return _swift_task_switch(sub_100168040, v2, 0);
}

uint64_t sub_100168040()
{
  sub_10016811C(v0[2], v0[3], v0[15]);
  return _swift_task_switch(sub_1001680B0, 0, 0);
}

uint64_t sub_1001680B0()
{
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10016811C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  swift_beginAccess();
  sub_1000F6764(a1, a2);
  swift_endAccess();
  swift_bridgeObjectRelease();
  if (a3)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      uint64_t v19 = sub_100290514(v13, v14, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to recover : %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    v20[0] = a3;
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if (swift_dynamicCast()) {
      char v18 = v19;
    }
    else {
      char v18 = 28;
    }
    sub_100164280(v18, 0);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 1, 1, v15);
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = a1;
    v16[5] = a2;
    swift_bridgeObjectRetain();
    sub_100168448((uint64_t)v9, (uint64_t)&unk_1004564C8, (uint64_t)v16);
    swift_release();
    return sub_10008E734((uint64_t)v9, &qword_100455C60);
  }
}

uint64_t sub_100168448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100170994(a1, (uint64_t)v9, &qword_100455C60);
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10008E734((uint64_t)v9, &qword_100455C60);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v12 = 0;
  uint64_t v14 = 0;
LABEL_6:
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  if (v14 | v12)
  {
    v17[0] = 0;
    v17[1] = 0;
    v17[2] = v12;
    v17[3] = v14;
  }
  return swift_task_create();
}

unsigned __int8 *sub_10016863C()
{
  uint64_t v0 = sub_10006C51C(&qword_1004564D8);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10006C51C(&qword_1004564E0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10006C51C(&qword_1004564E8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_1004564F0);
  Regex.init(_regexString:version:)();
  Regex.firstMatch(in:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    Regex.Match.output.getter();
    swift_bridgeObjectRelease();
    unint64_t v17 = v27;
    unint64_t v16 = v28;
    unint64_t v18 = v30;
    unint64_t v26 = v29;
    swift_bridgeObjectRelease();
    if ((v16 ^ v17) >> 14)
    {
      unint64_t v25 = v18;
      uint64_t v19 = sub_10016C928(v17, v16, v26, v18, 10);
      if ((v20 & 0x100) == 0)
      {
        uint64_t v14 = (unsigned __int8 *)v19;
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21) {
          goto LABEL_12;
        }
LABEL_10:
        Regex.Match.output.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Substring.uppercased()();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        return v14;
      }
      uint64_t v14 = sub_10016C0CC(v17, v16, v26, v25, 10);
      char v23 = v22;
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0) {
        goto LABEL_10;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_10008E734((uint64_t)v3, &qword_1004564D8);
  return 0;
}

uint64_t sub_100168A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100168A3C, 0, 0);
}

uint64_t sub_100168A3C()
{
  if (qword_1004536F8 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = qword_1004686E0;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  v0[4] = 0x80000001003B4CA0;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[5] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100168B84;
  v5[11] = 0x80000001003B4CA0;
  v5[12] = v3;
  v5[10] = 0xD000000000000016;
  return _swift_task_switch(sub_100143468, v3, 0);
}

uint64_t sub_100168B84()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100168C94()
{
  *(void *)(v1 + 56) = v0;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 64) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100168D40;
  v2[20] = v0;
  return _swift_task_switch(sub_100151718, v0, 0);
}

uint64_t sub_100168D40(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[9] = a1;
  v3[10] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v3[7];
    return _swift_task_switch(sub_100168E88, v7, 0);
  }
}

uint64_t sub_100168E88()
{
  uint64_t v15 = v0;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = sub_100182C50(*(void **)(v0 + 72));
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_getErrorValue();
      uint64_t v6 = Error.localizedDescription.getter();
      *(void *)(v0 + 48) = sub_100290514(v6, v7, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to list TLKS : %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v11 = *(void **)(v0 + 72);
    sub_10016FF34();
    swift_allocError();
    *uint64_t v12 = 12;
    swift_willThrow();
    swift_errorRelease();

    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    uint64_t v8 = v2;

    uint64_t v9 = *(uint64_t (**)(void *))(v0 + 8);
    return v9(v8);
  }
}

uint64_t sub_100169104(uint64_t a1, uint64_t a2)
{
  v3[32] = a2;
  v3[33] = v2;
  v3[31] = a1;
  return _swift_task_switch(sub_100169128, v2, 0);
}

uint64_t sub_100169128()
{
  sub_10006C51C(&qword_100456558);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 272) = inited;
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  uint64_t v2 = sub_10011FE64(0xD000000000000018, 0x80000001003B4D40);
  if (v3 >> 60 == 15) {
    goto LABEL_7;
  }
  *(void *)(inited + 32) = 0x4354502D4553;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v3;
  *(unsigned char *)(inited + 64) = 1;
  uint64_t v2 = self;
  if (!*(void *)(inited + 16))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return _swift_continuation_await(v2);
  }
  os_log_type_t v4 = (void *)v2;
  *(void *)(v0 + 280) = *(void *)(inited + 32);
  *(void *)(v0 + 288) = *(void *)(inited + 40);
  uint64_t v5 = *(void *)(inited + 48);
  *(void *)(v0 + 296) = v5;
  unint64_t v6 = *(void *)(inited + 56);
  *(void *)(v0 + 304) = v6;
  *(unsigned char *)(v0 + 344) = *(unsigned char *)(inited + 64);
  swift_bridgeObjectRetain();
  sub_10006D0EC(v5, v6);
  id v7 = [v4 sharedInstance];
  *(void *)(v0 + 312) = v7;
  NSString v8 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 320) = v8;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 328) = isa;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 232;
  *(void *)(v0 + 24) = sub_100169364;
  uint64_t v10 = swift_continuation_init();
  *(void *)(v0 + 152) = _NSConcreteStackBlock;
  *(void *)(v0 + 160) = 0x40000000;
  *(void *)(v0 + 168) = sub_10016999C;
  *(void *)(v0 + 176) = &unk_100413270;
  *(void *)(v0 + 184) = v10;
  [v7 fetchCachedContentForSEView:v8 altDSID:isa completion:];
  uint64_t v2 = v0 + 16;
  return _swift_continuation_await(v2);
}

uint64_t sub_100169364()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 336) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 264);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v4 = sub_100169610;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v1 + 264);
    os_log_type_t v4 = sub_100169498;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100169498()
{
  uint64_t v1 = *(void **)(v0 + 328);
  unint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 296);
  os_log_type_t v4 = *(void **)(v0 + 232);

  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  sub_10006D0EC(v3, v2);
  id v5 = v4;
  unint64_t v6 = _swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v6 = sub_100259EC4(0, _swiftEmptyArrayStorage[2] + 1, 1, _swiftEmptyArrayStorage);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    unint64_t v6 = sub_100259EC4((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  char v9 = *(unsigned char *)(v0 + 344);
  uint64_t v11 = *(void *)(v0 + 296);
  unint64_t v10 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 288);
  v6[2] = v8 + 1;
  uint64_t v14 = &v6[6 * v8];
  v14[4] = v13;
  v14[5] = v12;
  v14[6] = v11;
  v14[7] = v10;
  *((unsigned char *)v14 + 64) = v9;
  v14[9] = v5;
  swift_bridgeObjectRelease();

  sub_10006D144(v11, v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v15 = *(uint64_t (**)(void *))(v0 + 8);
  return v15(v6);
}

uint64_t sub_100169610()
{
  char v22 = v0;
  uint64_t v1 = (void *)v0[41];
  unint64_t v2 = (void *)v0[40];
  uint64_t v4 = v0[37];
  unint64_t v3 = v0[38];
  swift_willThrow();
  swift_unknownObjectRelease();

  swift_bridgeObjectRetain();
  sub_10006D0EC(v4, v3);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(v4, v3);
  swift_errorRetain();
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v8 = v0[37];
    unint64_t v7 = v0[38];
    uint64_t v9 = v0[35];
    unint64_t v10 = v0[36];
    uint64_t v11 = swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain();
    v0[27] = sub_100290514(v9, v10, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_10006D144(v8, v7);
    swift_bridgeObjectRelease();
    sub_10006D144(v8, v7);
    *(_WORD *)(v11 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v12 = Error.localizedDescription.getter();
    v0[30] = sub_100290514(v12, v13, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to fetch view %s : %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = v0[37];
    unint64_t v14 = v0[38];

    swift_bridgeObjectRelease();
    sub_10006D144(v15, v14);
    swift_bridgeObjectRelease();
    sub_10006D144(v15, v14);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v17 = v0[37];
  unint64_t v16 = v0[38];
  sub_10016FF34();
  swift_allocError();
  *unint64_t v18 = 20;
  swift_willThrow();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  sub_10006D144(v17, v16);
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100169934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = a2;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a3;
  return result;
}

uint64_t sub_10016999C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v5 = swift_allocError();
    *os_log_type_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_100169A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[23] = a2;
  v3[24] = a3;
  sub_10006C51C(&qword_100455C60);
  v3[25] = swift_task_alloc();
  v3[26] = swift_task_alloc();
  return _swift_task_switch(sub_100169B00, 0, 0);
}

uint64_t sub_100169B00()
{
  *(_OWORD *)(v0 + 32) = xmmword_100378290;
  uint64_t v1 = sub_10011FE64(0xD000000000000018, 0x80000001003B4D40);
  if (v2 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 192);
    *(void *)(v0 + 48) = 0x4354502D4553;
    *(void *)(v0 + 56) = 0xE600000000000000;
    *(void *)(v0 + 64) = v1;
    *(void *)(v0 + 72) = v2;
    *(unsigned char *)(v0 + 80) = 1;
    long long v7 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 88) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 104) = v7;
    *(unsigned char *)(v0 + 120) = *(unsigned char *)(v0 + 80);
    uint64_t v8 = type metadata accessor for TaskPriority();
    uint64_t v9 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, 1, 1, v8);
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = v6;
    long long v11 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v10 + 56) = v11;
    *(unsigned char *)(v10 + 72) = *(unsigned char *)(v0 + 80);
    sub_100170994(v5, v4, &qword_100455C60);
    LODWORD(v4) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8);
    sub_10016FF88(v0 + 88);
    sub_10016FF88(v0 + 88);
    swift_retain();
    uint64_t v12 = *(void *)(v0 + 200);
    if (v4 == 1)
    {
      sub_10008E734(*(void *)(v0 + 200), &qword_100455C60);
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
      if (*(void *)(v10 + 16))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v14 = v15;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    uint64_t v16 = **(void **)(v0 + 184);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = &unk_1004565C8;
    *(void *)(v17 + 24) = v10;
    uint64_t v18 = v14 | v13;
    if (v14 | v13)
    {
      uint64_t v18 = v0 + 128;
      *(void *)(v0 + 128) = 0;
      *(void *)(v0 + 136) = 0;
      *(void *)(v0 + 144) = v13;
      *(void *)(v0 + 152) = v14;
    }
    uint64_t v19 = *(void *)(v0 + 208);
    *(void *)(v0 + 160) = 1;
    *(void *)(v0 + 168) = v18;
    *(void *)(v0 + 176) = v16;
    swift_task_create();
    swift_release();
    sub_100170614(v0 + 88);
    sub_10008E734(v19, &qword_100455C60);
    swift_arrayDestroy();
    __int16 v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v20;
    uint64_t v3 = sub_10006C51C(&qword_1004565D8);
    *__int16 v20 = v0;
    v20[1] = sub_100169E80;
    uint64_t v1 = 0;
    unint64_t v2 = 0;
  }
  return TaskGroup.awaitAllRemainingTasks(isolation:)(v1, v2, v3);
}

uint64_t sub_100169E80()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100169FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[30] = a4;
  v5[31] = a5;
  v5[32] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper;
  return _swift_task_switch(sub_100169FD8, a4, 0);
}

uint64_t sub_100169FD8()
{
  v0[33] = *(void *)(v0[30] + v0[32]);
  return _swift_task_switch(sub_10016A004, 0, 0);
}

uint64_t sub_10016A004()
{
  uint64_t v1 = (void *)v0[33];
  v0[2] = v0;
  v0[7] = v0 + 23;
  v0[3] = sub_10016A100;
  uint64_t v2 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_100151C00;
  v0[21] = &unk_100413380;
  v0[22] = v2;
  [v1 canSyncSEKeys:v0 + 18];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_10016A100()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 272) = v1;
  if (v1) {
    uint64_t v2 = sub_10016A584;
  }
  else {
    uint64_t v2 = sub_10016A210;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016A210()
{
  uint64_t v1 = v0[24];
  unint64_t v2 = v0[25];
  v0[35] = v1;
  v0[36] = v2;
  if (v2 >> 60 == 15)
  {
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    sub_10006D0EC(v1, v2);
    return _swift_task_switch(sub_10016A2B8, 0, 0);
  }
}

uint64_t sub_10016A2B8()
{
  uint64_t v1 = (void *)v0[33];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[37] = v2;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[38] = isa;
  v0[10] = v0;
  v0[11] = sub_10016A3EC;
  uint64_t v4 = swift_continuation_init();
  v0[18] = _NSConcreteStackBlock;
  v0[19] = 0x40000000;
  v0[20] = sub_1001BDDAC;
  v0[21] = &unk_100413398;
  v0[22] = v4;
  [v1 syncContentsForSEView:v2 altDSID:isa completion:v0 + 18];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_10016A3EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 312) = v1;
  if (v1) {
    NSString v2 = sub_10016A7F0;
  }
  else {
    NSString v2 = sub_10016A4FC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10016A4FC()
{
  NSString v2 = (void *)v0[37];
  uint64_t v1 = (void *)v0[38];
  uint64_t v3 = v0[35];
  unint64_t v4 = v0[36];
  sub_100075868(v3, v4);
  sub_100075868(v3, v4);

  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10016A584()
{
  uint64_t v15 = v0;
  swift_willThrow();
  uint64_t v1 = v0[31];
  sub_10016FF88(v1);
  swift_errorRetain();
  sub_10016FF88(v1);
  swift_errorRetain();
  NSString v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t type = v3;
    unint64_t v4 = (uint64_t *)v0[31];
    uint64_t v5 = swift_slowAlloc();
    v14[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v6 = *v4;
    unint64_t v7 = v4[1];
    swift_bridgeObjectRetain();
    v0[18] = sub_100290514(v6, v7, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100170614((uint64_t)v4);
    sub_100170614((uint64_t)v4);
    *(_WORD *)(v5 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    v0[18] = sub_100290514(v8, v9, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, type, "Failed to sync view %s : %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = v0[31];
    swift_errorRelease();

    sub_100170614(v10);
    sub_100170614(v10);
    swift_errorRelease();
    swift_errorRelease();
  }
  long long v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_10016A7F0()
{
  uint64_t v19 = v0;
  uint64_t v1 = (void *)v0[38];
  unint64_t v2 = v0[36];
  os_log_type_t v3 = (void *)v0[37];
  uint64_t v4 = v0[35];
  swift_willThrow();
  sub_100075868(v4, v2);
  sub_100075868(v4, v2);

  uint64_t v5 = v0[31];
  sub_10016FF88(v5);
  swift_errorRetain();
  sub_10016FF88(v5);
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t type = v7;
    uint64_t v8 = (uint64_t *)v0[31];
    uint64_t v9 = swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = *v8;
    unint64_t v11 = v8[1];
    swift_bridgeObjectRetain();
    v0[18] = sub_100290514(v10, v11, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100170614((uint64_t)v8);
    sub_100170614((uint64_t)v8);
    *(_WORD *)(v9 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v12 = Error.localizedDescription.getter();
    v0[18] = sub_100290514(v12, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Failed to sync view %s : %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    uint64_t v14 = v0[31];
    swift_errorRelease();

    sub_100170614(v14);
    sub_100170614(v14);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

Swift::Int sub_10016AC04()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10006D0EC(v1, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10016ACAC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 32);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10006D0EC(v1, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_10016AD3C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = *(void *)(v0 + 24);
  Swift::UInt8 v3 = *(unsigned char *)(v0 + 32);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_10006D0EC(v1, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10016ADE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v9 & 1) != 0))
  {
    if (sub_100088AE4(v2, v3, v5, v6)) {
      return v4 ^ v7 ^ 1u;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10016AE74()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_10016B014()
{
  sub_10016AE74();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_10016B040()
{
  return type metadata accessor for SEKeySyncManager();
}

uint64_t type metadata accessor for SEKeySyncManager()
{
  uint64_t result = qword_100456370;
  if (!qword_100456370) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10016B094()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_10016B1B4()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10016B248()
{
  return v0;
}

uint64_t sub_10016B254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return _swift_task_switch(sub_10016B278, 0, 0);
}

uint64_t sub_10016B278()
{
  uint64_t v5 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  (*(void (**)(uint64_t *__return_ptr))(v0 + 24))(&v4);
  *(void *)(v1 + 16) = v4;
  OS_dispatch_semaphore.signal()();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10016B2FC()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EvilSendableBox()
{
  return sub_1000B3E5C();
}

uint64_t destroy for SEKeySyncManager.KeySyncState(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  if (v1 >> 60 != 15) {
    sub_10006D144(*a1, v1);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SEKeySyncManager.KeySyncState(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_10006D0EC(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for SEKeySyncManager.KeySyncState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_10006D0EC(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10006D144(v7, v8);
      goto LABEL_8;
    }
    sub_10016B574((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  sub_10006D0EC(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10016B574(uint64_t a1)
{
  return a1;
}

uint64_t *assignWithTake for SEKeySyncManager.KeySyncState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10006D144(v6, v4);
      goto LABEL_6;
    }
    sub_10016B574((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SEKeySyncManager.KeySyncState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SEKeySyncManager.KeySyncState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncManager.KeySyncState()
{
  return &type metadata for SEKeySyncManager.KeySyncState;
}

unsigned char *storeEnumTagSinglePayload for SEKeySyncManager.SyncProgressState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016B7E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncManager.SyncProgressState()
{
  return &type metadata for SEKeySyncManager.SyncProgressState;
}

unint64_t sub_10016B81C()
{
  unint64_t result = qword_100456400;
  if (!qword_100456400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100456400);
  }
  return result;
}

void sub_10016B870()
{
  if (*(unsigned char *)(v0 + 40) != 1 || SESInternalVariant())
  {
    id v1 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithSuiteName:v2];

    if (v3)
    {
      uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      NSString v5 = String._bridgeToObjectiveC()();
      [v3 setValue:v4 forKey:v5];

      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_10016B960(uint64_t a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithSuiteName:v3];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 objectForKey:v5];

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    sub_100076148((uint64_t)v11, (uint64_t)v12, (uint64_t *)&unk_1004556C0);
    if (v13)
    {
      if (swift_dynamicCast())
      {
        type metadata accessor for PropertyListDecoder();
        swift_allocObject();
        PropertyListDecoder.init()();
        uint64_t v7 = type metadata accessor for SESPeerIdentityData(0);
        sub_100170544(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        sub_10006D144(v9, v10);
        swift_release();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 0, 1, v7);
        return;
      }
    }
    else
    {
      sub_10008E734((uint64_t)v12, (uint64_t *)&unk_1004556C0);
    }
    uint64_t v8 = type metadata accessor for SESPeerIdentityData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
  else
  {
    __break(1u);
  }
}

void sub_10016BBFC(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class v4 = (Class)[v2 initWithSuiteName:v3];

  if (v4)
  {
    uint64_t v5 = type metadata accessor for SESPeerIdentityData(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(a1, 1, v5) == 1)
    {
      NSString v10 = String._bridgeToObjectiveC()();
      [(objc_class *)v4 removeObjectForKey:v10];
    }
    else
    {
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      PropertyListEncoder.init()();
      sub_10006C51C(&qword_100456480);
      sub_100170888();
      uint64_t v6 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      unint64_t v8 = v7;
      swift_release();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      NSString v10 = String._bridgeToObjectiveC()();
      [(objc_class *)v4 setValue:isa forKey:v10];
      sub_10006D144(v6, v8);

      Class v4 = isa;
    }

    sub_10008E734(a1, &qword_100456480);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10016BDD0()
{
  return _swift_task_switch(sub_10016BDEC, 0, 0);
}

uint64_t sub_10016BDEC()
{
  if (qword_1004536F8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1004686E0;
  id v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v2;
  *id v2 = v0;
  v2[1] = sub_10011FE60;
  v2[11] = 0xE600000000000000;
  v2[12] = v1;
  v2[10] = 0x636E79736572;
  return _swift_task_switch(sub_100143468, v1, 0);
}

uint64_t sub_10016BEE0(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100171A54;
  return v6(a1);
}

uint64_t sub_10016BFBC(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_10016C038(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.append(contentsOf:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10016C0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_1001704F0();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_10016C43C();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v13 = sub_10016C1C0(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_10016C1C0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }
      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }
      if (result)
      {
        uint64_t v26 = 0;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
            return 0;
          }
          uint64_t v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }
  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }
      else
      {
        char v21 = -55;
      }
    }
    else
    {
      char v21 = -48;
    }
    uint64_t v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21))) {
      return 0;
    }
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10016C43C()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10016C4BC(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10016C4BC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10016C614(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_10018C198(v9, 0),
          unint64_t v12 = sub_10016C714((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10016C614(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_10016BFBC(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_10016BFBC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_10016C714(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10016BFBC(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_10016BFBC(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10016C928(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_10016F70C((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

void *sub_10016C9FC(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v18 = v1;
      unint64_t v3 = 0;
      uint64_t v19 = v1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v20 = v1 & 0xC000000000000001;
      while (v20)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unsigned __int8 v6 = v5;
        unint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        uint64_t v8 = v2;
        id v9 = [v5 sourcePeerIdentifier];
        uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v12 = v11;

        id v13 = [v6 targetPeerIdentifier];
        uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        LOBYTE(v13) = sub_100088AE4(v10, v12, v14, v16);
        sub_10006D144(v14, v16);
        sub_10006D144(v10, v12);
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        uint64_t v2 = v8;
        ++v3;
        BOOL v4 = v7 == v8;
        unint64_t v1 = v18;
        if (v4) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v3 < *(void *)(v19 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return _swiftEmptyArrayStorage;
      }
    }
    id v5 = *(id *)(v1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10016CBD8(unint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  unint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_53;
  }
  unint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_54:
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    unint64_t v43 = v5 & 0xC000000000000001;
    uint64_t v8 = *a2;
    unint64_t v7 = a2[1];
    unint64_t v9 = HIDWORD(*a2);
    BOOL v10 = __OFSUB__(v9, *a2);
    int v11 = v9 - *a2;
    BOOL v12 = v10;
    BOOL v39 = v12;
    unint64_t v37 = v5;
    uint64_t v38 = v11;
    uint64_t v42 = BYTE6(v7);
    uint64_t v13 = 4;
    unint64_t v40 = a2[1];
    unint64_t v41 = v7 >> 62;
    uint64_t v35 = *a2;
    unint64_t v36 = v6;
LABEL_10:
    a2 = (uint64_t *)(v13 - 4);
    if (v43) {
      break;
    }
    id v14 = *(id *)(v5 + 8 * v13);
    uint64_t v15 = v13 - 3;
    if (!__OFADD__(a2, 1)) {
      goto LABEL_15;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    swift_bridgeObjectRetain();
    unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (!v6) {
      goto LABEL_54;
    }
  }
  id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  uint64_t v15 = v13 - 3;
  if (__OFADD__(a2, 1)) {
    goto LABEL_48;
  }
LABEL_15:
  BOOL v44 = v14;
  a2 = (uint64_t *)[v14 tlkUUID];
  uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v18 = v17;

  uint64_t v19 = 0;
  switch(v18 >> 62)
  {
    case 1uLL:
      LODWORD(v19) = HIDWORD(v16) - v16;
      if (__OFSUB__(HIDWORD(v16), v16)) {
        goto LABEL_50;
      }
      uint64_t v19 = (int)v19;
      break;
    case 2uLL:
      uint64_t v21 = *(void *)(v16 + 16);
      uint64_t v20 = *(void *)(v16 + 24);
      BOOL v10 = __OFSUB__(v20, v21);
      uint64_t v19 = v20 - v21;
      if (!v10) {
        break;
      }
      goto LABEL_49;
    case 3uLL:
      break;
    default:
      uint64_t v19 = BYTE6(v18);
      break;
  }
  uint64_t v22 = v42;
  switch(v41)
  {
    case 1uLL:
      uint64_t v22 = v38;
      if (v39) {
        goto LABEL_52;
      }
      goto LABEL_24;
    case 2uLL:
      uint64_t v24 = *(void *)(v8 + 16);
      uint64_t v23 = *(void *)(v8 + 24);
      BOOL v10 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v10) {
        goto LABEL_24;
      }
      goto LABEL_51;
    case 3uLL:
      if (v19) {
        goto LABEL_8;
      }
      goto LABEL_47;
    default:
LABEL_24:
      if (v19 != v22)
      {
LABEL_8:
        sub_10006D144(v16, v18);

LABEL_9:
        ++v13;
        if (v15 == v6) {
          goto LABEL_54;
        }
        goto LABEL_10;
      }
      if (v19 < 1)
      {
LABEL_47:
        sub_10006D144(v16, v18);
        swift_bridgeObjectRelease();

        return 1;
      }
      else
      {
        switch(v18 >> 62)
        {
          case 1uLL:
            if (v16 >> 32 < (int)v16)
            {
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
            }
            sub_10006D0EC(v8, v40);
            sub_10006D0EC(v16, v18);
            uint64_t v31 = __DataStorage._bytes.getter();
            if (v31)
            {
              uint64_t v32 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v16, v32)) {
                goto LABEL_58;
              }
              v31 += (int)v16 - v32;
            }
            __DataStorage._length.getter();
            uint64_t v33 = v31;
            uint64_t v8 = v35;
            unint64_t v6 = v40;
            sub_1001E5240(v33, v35, v40, (char *)__s1);
            if (v3) {
              goto LABEL_62;
            }
            uint64_t v3 = 0;
            sub_10006D144(v35, v40);
            sub_10006D144(v16, v18);
LABEL_45:
            sub_10006D144(v16, v18);

            unint64_t v6 = v36;
            unint64_t v5 = v37;
            if ((__s1[0] & 1) == 0) {
              goto LABEL_9;
            }
LABEL_46:
            swift_bridgeObjectRelease();
            uint64_t result = 1;
            break;
          case 2uLL:
            unsigned __int8 v25 = (char *)(v18 & 0x3FFFFFFFFFFFFFFFLL);
            uint64_t v26 = *(void *)(v16 + 16);
            uint64_t v27 = *(void *)(v16 + 24);
            sub_10006D0EC(v8, v40);
            swift_retain();
            swift_retain();
            uint64_t v28 = __DataStorage._bytes.getter();
            if (!v28) {
              goto LABEL_33;
            }
            uint64_t v29 = __DataStorage._offset.getter();
            if (__OFSUB__(v26, v29)) {
              goto LABEL_57;
            }
            v28 += v26 - v29;
LABEL_33:
            if (__OFSUB__(v27, v26)) {
              goto LABEL_56;
            }
            __DataStorage._length.getter();
            uint64_t v30 = v28;
            uint64_t v8 = v35;
            unint64_t v6 = v40;
            sub_1001E5240(v30, v35, v40, (char *)__s1);
            if (v3) {
              goto LABEL_60;
            }
            uint64_t v3 = 0;
            sub_10006D144(v35, v40);
            swift_release();
            swift_release();
            goto LABEL_45;
          case 3uLL:
            memset(__s1, 0, 14);
            unsigned __int8 v25 = (char *)v40;
            sub_10006D0EC(v8, v40);
            sub_1001E5240((uint64_t)__s1, v8, v40, &v45);
            if (v3) {
              goto LABEL_61;
            }
            uint64_t v3 = 0;
            sub_10006D144(v8, v40);
            sub_10006D144(v16, v18);

            if (v45 == 1) {
              goto LABEL_46;
            }
            goto LABEL_9;
          default:
            __s1[0] = v16;
            LOWORD(__s1[1]) = v18;
            BYTE2(__s1[1]) = BYTE2(v18);
            BYTE3(__s1[1]) = BYTE3(v18);
            BYTE4(__s1[1]) = BYTE4(v18);
            BYTE5(__s1[1]) = BYTE5(v18);
            unsigned __int8 v25 = (char *)__s1 + BYTE6(v18);
            sub_10006D0EC(v8, v40);
            sub_1001E5240((uint64_t)__s1, v8, v40, &v45);
            if (v3)
            {
              sub_10006D144(v8, v40);
              __break(1u);
LABEL_60:
              sub_10006D144(v8, v6);
              swift_release();
              swift_release();
              __break(1u);
LABEL_61:
              sub_10006D144(v8, (unint64_t)v25);
              __break(1u);
LABEL_62:
              sub_10006D144(v8, v6);
              sub_10006D144(v16, v18);
              __break(1u);
              JUMPOUT(0x10016D198);
            }
            sub_10006D144(v8, v40);
            sub_10006D144(v16, v18);

            uint64_t v3 = 0;
            if (v45) {
              goto LABEL_46;
            }
            goto LABEL_9;
        }
      }
      return result;
  }
}

void *sub_10016D1C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  unint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v6 = 0;
  uint64_t v7 = a1 + 32;
  uint64_t v44 = v5 - 1;
  uint64_t v47 = _swiftEmptyArrayStorage;
  unint64_t v51 = *(void *)(a1 + 16);
  uint64_t v45 = a1 + 32;
LABEL_3:
  if (v6 <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v53 = v8;
  unint64_t v9 = (long long *)(v7 + 72 * v6);
  while (2)
  {
    if (v53 == v6)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
    }
    unint64_t v10 = v6;
    long long v11 = v9[3];
    long long v59 = v9[2];
    long long v60 = v11;
    char v61 = *((unsigned char *)v9 + 64);
    long long v12 = v9[1];
    long long v57 = *v9;
    long long v58 = v12;
    ++v6;
    long long v62 = v57;
    sub_1001706B4((uint64_t *)&v57, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
    id v13 = [a2 tlkUUID];
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v16 = v15;

    sub_100170658((uint64_t)&v62, (uint64_t)v63);
    sub_100170658((uint64_t)v63, (uint64_t)&v66);
    unsigned __int8 v17 = BYTE6(v67);
    uint64_t v18 = 0;
    switch(v67 >> 62)
    {
      case 1uLL:
        v67 &= 0x3FFFFFFFFFFFFFFFuLL;
        LODWORD(v18) = HIDWORD(v66) - v66;
        if (__OFSUB__(HIDWORD(v66), v66)) {
          goto LABEL_60;
        }
        uint64_t v18 = (int)v18;
        break;
      case 2uLL:
        v67 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v19 = *(void *)(v66 + 16);
        uint64_t v20 = *(void *)(v66 + 24);
        BOOL v21 = __OFSUB__(v20, v19);
        uint64_t v18 = v20 - v19;
        if (!v21) {
          break;
        }
        goto LABEL_59;
      case 3uLL:
        break;
      default:
        v67 &= 0x3FFFFFFFFFFFFFFFuLL;
        uint64_t v18 = v17;
        break;
    }
    switch(v16 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14)) {
          goto LABEL_61;
        }
        if (v18 == HIDWORD(v14) - v14) {
          goto LABEL_25;
        }
        goto LABEL_28;
      case 2uLL:
        uint64_t v23 = *(void *)(v14 + 16);
        uint64_t v22 = *(void *)(v14 + 24);
        BOOL v21 = __OFSUB__(v22, v23);
        uint64_t v24 = v22 - v23;
        if (v21) {
          goto LABEL_62;
        }
        if (v18 == v24)
        {
LABEL_25:
          if (v18 >= 1)
          {
            sub_100170658((uint64_t)v63, (uint64_t)&v64);
            unint64_t v25 = v65;
            switch(v65 >> 62)
            {
              case 1uLL:
                v65 &= 0x3FFFFFFFFFFFFFFFuLL;
                uint64_t v49 = (int)v64;
                if (SHIDWORD(v64) < (int)v64) {
                  goto LABEL_63;
                }
                sub_10006D0EC(v14, v16);
                sub_100170740((uint64_t)&v62);
                uint64_t v33 = __DataStorage._bytes.getter();
                if (!v33) {
                  goto LABEL_42;
                }
                uint64_t v34 = __DataStorage._offset.getter();
                if (__OFSUB__(v49, v34)) {
                  goto LABEL_66;
                }
                v33 += v49 - v34;
LABEL_42:
                __DataStorage._length.getter();
                sub_1001E5240(v33, v14, v16, (char *)__s1);
                if (v4) {
                  goto LABEL_68;
                }
                uint64_t v4 = 0;
                sub_10006D144(v14, v16);
                sub_100170770((uint64_t)&v62);
                goto LABEL_48;
              case 2uLL:
                v65 &= 0x3FFFFFFFFFFFFFFFuLL;
                uint64_t v48 = *(void *)(v64 + 16);
                uint64_t v46 = *(void *)(v64 + 24);
                sub_10006D0EC(v14, v16);
                swift_retain();
                swift_retain();
                uint64_t v28 = __DataStorage._bytes.getter();
                if (v28)
                {
                  uint64_t v29 = v28;
                  uint64_t v30 = __DataStorage._offset.getter();
                  uint64_t v31 = v48;
                  if (__OFSUB__(v48, v30)) {
                    goto LABEL_65;
                  }
                  uint64_t v32 = v29 + v48 - v30;
                }
                else
                {
                  uint64_t v32 = 0;
                  uint64_t v31 = v48;
                }
                if (__OFSUB__(v46, v31)) {
                  goto LABEL_64;
                }
                __DataStorage._length.getter();
                sub_1001E5240(v32, v14, v16, (char *)__s1);
                if (v4) {
                  goto LABEL_69;
                }
                uint64_t v4 = 0;
                sub_10006D144(v14, v16);
                swift_release();
                swift_release();
LABEL_48:
                sub_10006D144(v14, v16);
                unint64_t v5 = v51;
                if ((__s1[0] & 1) == 0) {
                  goto LABEL_29;
                }
                goto LABEL_8;
              case 3uLL:
                memset(__s1, 0, 14);
                sub_10006D0EC(v14, v16);
                goto LABEL_35;
              default:
                v65 &= 0x3FFFFFFFFFFFFFFFuLL;
                __s1[0] = v64;
                LOWORD(__s1[1]) = v25;
                BYTE2(__s1[1]) = BYTE2(v25);
                BYTE3(__s1[1]) = BYTE3(v25);
                BYTE4(__s1[1]) = BYTE4(v25);
                BYTE5(__s1[1]) = BYTE5(v25);
                sub_10006D0EC(v14, v16);
LABEL_35:
                sub_1001E5240((uint64_t)__s1, v14, v16, &v54);
                if (v4)
                {
                  sub_10006D144(v14, v16);
                  __break(1u);
LABEL_68:
                  sub_10006D144(v14, v16);
                  sub_100170770((uint64_t)&v62);
                  __break(1u);
LABEL_69:
                  sub_10006D144(v14, v16);
                  swift_release();
                  swift_release();
                  __break(1u);
                  JUMPOUT(0x10016D8B4);
                }
                uint64_t v4 = 0;
                sub_10006D144(v14, v16);
                sub_10006D144(v14, v16);
                if ((v54 & 1) == 0) {
                  goto LABEL_29;
                }
                goto LABEL_8;
            }
          }
LABEL_7:
          sub_10006D144(v14, v16);
LABEL_8:
          sub_1001706B4((uint64_t *)&v57, (void (*)(uint64_t, uint64_t))sub_10006D144);
          unint64_t v9 = (long long *)((char *)v9 + 72);
          if (v5 == v6) {
            return v47;
          }
          continue;
        }
LABEL_28:
        sub_10006D144(v14, v16);
LABEL_29:
        id v26 = [a3 previousTLKs:v44, v45];
        sub_10007582C(0, &qword_100456510);
        unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1001706B4((uint64_t *)&v57, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
        LOBYTE(v26) = sub_10016CBD8(v27, (uint64_t *)&v57);
        sub_1001706B4((uint64_t *)&v57, (void (*)(uint64_t, uint64_t))sub_10006D144);
        swift_bridgeObjectRelease();
        if (v26)
        {
          unint64_t v5 = v51;
          goto LABEL_8;
        }
        uint64_t v35 = v47;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = v47;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1002CFBF0(0, v47[2] + 1, 1);
          uint64_t v35 = v56;
        }
        unint64_t v38 = v35[2];
        unint64_t v37 = v35[3];
        if (v38 >= v37 >> 1)
        {
          sub_1002CFBF0(v37 > 1, v38 + 1, 1);
          uint64_t v35 = v56;
        }
        unint64_t v6 = v10 + 1;
        v35[2] = v38 + 1;
        uint64_t v47 = v35;
        BOOL v39 = &v35[9 * v38];
        *((_OWORD *)v39 + 2) = v57;
        long long v40 = v58;
        long long v41 = v59;
        long long v42 = v60;
        *((unsigned char *)v39 + 96) = v61;
        *((_OWORD *)v39 + 4) = v41;
        *((_OWORD *)v39 + 5) = v42;
        *((_OWORD *)v39 + 3) = v40;
        unint64_t v5 = v51;
        uint64_t v7 = v45;
        if (v44 != v10) {
          goto LABEL_3;
        }
        return v47;
      case 3uLL:
        if (!v18) {
          goto LABEL_7;
        }
        goto LABEL_28;
      default:
        if (v18 != BYTE6(v16)) {
          goto LABEL_28;
        }
        goto LABEL_25;
    }
  }
}

void sub_10016D8E4(uint64_t a1, uint64_t (*a2)(void *, id))
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1 + 40;
    unint64_t v20 = v2 - 1;
    unint64_t v5 = _swiftEmptyArrayStorage;
    unint64_t v24 = *(void *)(a1 + 16);
    uint64_t v21 = a1 + 40;
    do
    {
      uint64_t v22 = v5;
      if (v3 <= v2) {
        unint64_t v6 = v2;
      }
      else {
        unint64_t v6 = v3;
      }
      unint64_t v26 = v6;
      for (uint64_t i = (uint64_t *)(v4 + 48 * v3); ; i += 6)
      {
        if (v26 == v3)
        {
          __break(1u);
          return;
        }
        uint64_t v8 = *i;
        uint64_t v9 = i[1];
        unint64_t v10 = i[2];
        long long v11 = (void *)i[4];
        unint64_t v12 = v3 + 1;
        char v13 = *((unsigned char *)i + 24);
        uint64_t v23 = *(i - 1);
        v28[0] = v23;
        v28[1] = v8;
        void v28[2] = v9;
        v28[3] = v10;
        char v29 = v13;
        swift_bridgeObjectRetain();
        sub_10006D0EC(v9, v10);
        id v14 = v11;
        if (a2(v28, v14)) {
          break;
        }
        swift_bridgeObjectRelease();
        sub_10006D144(v9, v10);

        ++v3;
        if (v24 == v12) {
          return;
        }
      }
      unint64_t v27 = v3;
      unint64_t v5 = v22;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v30 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1002CFC10(0, v22[2] + 1, 1);
        unint64_t v5 = v30;
      }
      uint64_t v16 = v23;
      unint64_t v18 = v5[2];
      unint64_t v17 = v5[3];
      if (v18 >= v17 >> 1)
      {
        sub_1002CFC10(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v23;
        unint64_t v5 = v30;
      }
      v5[2] = v18 + 1;
      uint64_t v19 = &v5[6 * v18];
      v19[4] = v16;
      v19[5] = v8;
      v19[6] = v9;
      v19[7] = v10;
      *((unsigned char *)v19 + 64) = v13;
      v19[9] = v14;
      unint64_t v2 = v24;
      uint64_t v4 = v21;
      ++v3;
    }
    while (v20 != v27);
  }
}

void *sub_10016DAC8(uint64_t a1, void (*a2)(void *__return_ptr, void *, id))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v3 = (void **)(swift_bridgeObjectRetain() + 72);
  uint64_t v4 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v6 = *v3;
    char v7 = *((unsigned char *)v3 - 8);
    uint64_t v9 = (uint64_t)*(v3 - 3);
    unint64_t v8 = (unint64_t)*(v3 - 2);
    uint64_t v10 = (uint64_t)*(v3 - 4);
    v28[0] = *(v3 - 5);
    v28[1] = v10;
    void v28[2] = v9;
    v28[3] = v8;
    char v29 = v7;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v9, v8);
    id v11 = v6;
    a2(v23, v28, v11);
    uint64_t v12 = v23[0];
    uint64_t v13 = v23[1];
    uint64_t v20 = v23[3];
    uint64_t v21 = v23[2];
    uint64_t v18 = v23[5];
    uint64_t v19 = v23[4];
    char v22 = v24;
    uint64_t v30 = v25;
    swift_bridgeObjectRelease();
    sub_10006D144(v9, v8);

    sub_100076148((uint64_t)v23, (uint64_t)v26, &qword_1004564A0);
    if (v27)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_10025A2A0(0, v4[2] + 1, 1, v4);
      }
      unint64_t v15 = v4[2];
      unint64_t v14 = v4[3];
      if (v15 >= v14 >> 1) {
        uint64_t v4 = sub_10025A2A0((void *)(v14 > 1), v15 + 1, 1, v4);
      }
      v4[2] = v15 + 1;
      unint64_t v5 = &v4[8 * v15];
      v5[4] = v12;
      v5[5] = v13;
      v5[6] = v21;
      v5[7] = v20;
      v5[8] = v19;
      v5[9] = v18;
      *((unsigned char *)v5 + 80) = v22 & 1;
      v5[11] = v30;
    }
    v3 += 6;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10016DCA0(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1;
  if (a1 >> 62) {
    goto LABEL_70;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_71:
    swift_bridgeObjectRelease();
    return 0;
  }
  while (1)
  {
    uint64_t v7 = 0;
    unint64_t v52 = v5 & 0xC000000000000001;
    unint64_t v53 = a2;
    uint64_t v47 = v5 + 32;
    uint64_t v48 = a2 & 0xFFFFFFFFFFFFFF8;
    uint64_t v46 = v5;
    unint64_t v58 = a2 & 0xC000000000000001;
    unint64_t v49 = a2 >> 62;
    uint64_t v51 = v6;
    while (1)
    {
      if (v52) {
        id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v8 = *(id *)(v47 + 8 * v7);
      }
      uint64_t v9 = v8;
      BOOL v10 = __OFADD__(v7, 1);
      uint64_t v11 = v7 + 1;
      if (v10) {
        goto LABEL_67;
      }
      uint64_t v56 = v11;
      id v12 = [v8 sourcePeerIdentifier];
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;

      id v16 = [v9 targetPeerIdentifier];
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      a2 = v18;

      LOBYTE(v16) = sub_100088AE4(v13, v15, v17, a2);
      sub_10006D144(v17, a2);
      sub_10006D144(v13, v15);
      if (v16) {
        break;
      }

LABEL_5:
      uint64_t v7 = v56;
      if (v56 == v51) {
        goto LABEL_71;
      }
    }
    a2 = v53;
    if (v49)
    {
      id v43 = v9;
      swift_bridgeObjectRetain();
      uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
      if (!v19)
      {
LABEL_58:

        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v48 + 16);
      id v20 = v9;
      swift_bridgeObjectRetain();
      if (!v19) {
        goto LABEL_58;
      }
    }
    uint64_t v5 = 4;
    long long v59 = v9;
    uint64_t v57 = v19;
LABEL_17:
    id v21 = v58 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a2 + 8 * v5);
    char v22 = v21;
    uint64_t v23 = v5 - 3;
    if (!__OFADD__(v5 - 4, 1)) {
      break;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (!v6) {
      goto LABEL_71;
    }
  }
  id v24 = [v9 sourcePeerIdentifier];
  uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  long long v60 = v22;
  id v28 = [v22 peerIdentifier];
  uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v31 = v30;

  uint64_t v32 = 0;
  switch(v27 >> 62)
  {
    case 1uLL:
      LODWORD(v32) = HIDWORD(v25) - v25;
      if (__OFSUB__(HIDWORD(v25), v25)) {
        goto LABEL_64;
      }
      uint64_t v32 = (int)v32;
      break;
    case 2uLL:
      uint64_t v34 = *(void *)(v25 + 16);
      uint64_t v33 = *(void *)(v25 + 24);
      BOOL v10 = __OFSUB__(v33, v34);
      uint64_t v32 = v33 - v34;
      if (!v10) {
        break;
      }
      goto LABEL_63;
    case 3uLL:
      break;
    default:
      uint64_t v32 = BYTE6(v27);
      break;
  }
  switch(v31 >> 62)
  {
    case 1uLL:
      LODWORD(v35) = HIDWORD(v29) - v29;
      if (__OFSUB__(HIDWORD(v29), v29)) {
        goto LABEL_65;
      }
      uint64_t v35 = (int)v35;
      goto LABEL_33;
    case 2uLL:
      uint64_t v37 = *(void *)(v29 + 16);
      uint64_t v36 = *(void *)(v29 + 24);
      BOOL v10 = __OFSUB__(v36, v37);
      uint64_t v35 = v36 - v37;
      if (v10) {
        goto LABEL_66;
      }
      goto LABEL_33;
    case 3uLL:
      if (v32) {
        goto LABEL_15;
      }
      goto LABEL_59;
    default:
      uint64_t v35 = BYTE6(v31);
LABEL_33:
      if (v32 != v35)
      {
LABEL_15:
        sub_10006D144(v29, v31);
        sub_10006D144(v25, v27);

LABEL_16:
        ++v5;
        uint64_t v9 = v59;
        if (v23 == v57)
        {

          swift_bridgeObjectRelease();
          uint64_t v5 = v46;
          goto LABEL_5;
        }
        goto LABEL_17;
      }
      if (v32 < 1)
      {
LABEL_59:
        sub_10006D144(v29, v31);
        sub_10006D144(v25, v27);
        uint64_t v44 = v59;

        swift_bridgeObjectRelease();
      }
      else
      {
        switch(v27 >> 62)
        {
          case 1uLL:
            uint64_t v55 = v3;
            uint64_t v3 = (int)v25;
            if (v25 >> 32 < (int)v25) {
              goto LABEL_68;
            }
            sub_10006D0EC(v29, v31);
            sub_10006D0EC(v25, v27);
            uint64_t v41 = __DataStorage._bytes.getter();
            if (!v41) {
              goto LABEL_53;
            }
            uint64_t v42 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v25, v42)) {
              goto LABEL_73;
            }
            v41 += (int)v25 - v42;
LABEL_53:
            __DataStorage._length.getter();
            sub_1001E5240(v41, v29, v31, (char *)__s1);
            if (v55) {
              goto LABEL_76;
            }
            uint64_t v3 = 0;
            sub_10006D144(v29, v31);
            sub_10006D144(v25, v27);
            sub_10006D144(v29, v31);
            sub_10006D144(v25, v27);

            a2 = v53;
            if (__s1[0]) {
              goto LABEL_60;
            }
            goto LABEL_16;
          case 2uLL:
            uint64_t v54 = v3;
            uint64_t v38 = *(void *)(v25 + 16);
            uint64_t v50 = *(void *)(v25 + 24);
            sub_10006D0EC(v29, v31);
            swift_retain();
            swift_retain();
            a2 = __DataStorage._bytes.getter();
            if (!a2) {
              goto LABEL_42;
            }
            uint64_t v39 = __DataStorage._offset.getter();
            if (__OFSUB__(v38, v39))
            {
              __break(1u);
LABEL_73:
              __break(1u);
            }
            a2 += v38 - v39;
LABEL_42:
            BOOL v10 = __OFSUB__(v50, v38);
            uint64_t v3 = v50 - v38;
            if (v10) {
              goto LABEL_69;
            }
            __DataStorage._length.getter();
            sub_1001E5240(a2, v29, v31, (char *)__s1);
            if (v54) {
              goto LABEL_75;
            }
            uint64_t v3 = 0;
            sub_10006D144(v29, v31);
            swift_release();
            swift_release();
            sub_10006D144(v29, v31);
            sub_10006D144(v25, v27);
            char v40 = __s1[0];

            a2 = v53;
            if (v40) {
              goto LABEL_60;
            }
            goto LABEL_16;
          case 3uLL:
            memset(__s1, 0, 14);
            sub_10006D0EC(v29, v31);
            sub_1001E5240((uint64_t)__s1, v29, v31, &v61);
            if (v3) {
              goto LABEL_74;
            }
            uint64_t v3 = 0;
            sub_10006D144(v29, v31);
            sub_10006D144(v29, v31);
            sub_10006D144(v25, v27);

            if (v61 == 1) {
              goto LABEL_60;
            }
            goto LABEL_16;
          default:
            __s1[0] = v25;
            LOWORD(__s1[1]) = v27;
            BYTE2(__s1[1]) = BYTE2(v27);
            BYTE3(__s1[1]) = BYTE3(v27);
            BYTE4(__s1[1]) = BYTE4(v27);
            BYTE5(__s1[1]) = BYTE5(v27);
            sub_10006D0EC(v29, v31);
            sub_1001E5240((uint64_t)__s1, v29, v31, &v61);
            if (v3)
            {
LABEL_74:
              sub_10006D144(v29, v31);
              __break(1u);
LABEL_75:
              sub_10006D144(v29, v31);
              swift_release();
              swift_release();
              __break(1u);
LABEL_76:
              sub_10006D144(v29, v31);
              sub_10006D144(v25, v27);
              __break(1u);
              JUMPOUT(0x10016E458);
            }
            uint64_t v3 = 0;
            sub_10006D144(v29, v31);
            sub_10006D144(v29, v31);
            sub_10006D144(v25, v27);

            if ((v61 & 1) == 0) {
              goto LABEL_16;
            }
LABEL_60:
            uint64_t v44 = v59;

            swift_bridgeObjectRelease();
            break;
        }
      }
      swift_bridgeObjectRelease();

      return 1;
  }
}

uint64_t sub_10016E488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[40] = a3;
  v4[41] = v3;
  v4[38] = a1;
  v4[39] = a2;
  v4[42] = type metadata accessor for SESTLKShareData(0);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  return _swift_task_switch(sub_10016E530, v3, 0);
}

uint64_t sub_10016E530()
{
  uint64_t v30 = v0;
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 304);
  id v3 = [*(id *)(v0 + 312) tlkShares];
  sub_10007582C(0, &qword_100456488);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v5 = (void *)swift_task_alloc();
  v5[2] = v2;
  v5[3] = v1;
  unint64_t v6 = (unint64_t)sub_1002B9DD0(sub_10017058C, v5, v4);
  *(void *)(v0 + 360) = v6;
  swift_task_dealloc();
  if (v6 >> 62) {
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v0 + 368) = v7;
  if (v7)
  {
    *(void *)(v0 + 376) = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_logger;
    uint64_t v8 = *(void *)(v0 + 360);
    if ((v8 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v8 + 32);
    }
    BOOL v10 = v9;
    *(void *)(v0 + 384) = v9;
    *(void *)(v0 + 392) = 1;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    id v11 = [v10 shareData];
    uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v14 = v13;

    sub_100170544(&qword_100456508, (void (*)(uint64_t))type metadata accessor for SESTLKShareData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v24 = *(void *)(v0 + 344);
    uint64_t v23 = *(void *)(v0 + 352);
    sub_10006D144(v12, v14);
    swift_release();
    sub_1001705AC(v24, v23, type metadata accessor for SESTLKShareData);
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 400) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_10016EC34;
    uint64_t v26 = *(void *)(v0 + 328);
    v25[20] = v26;
    return _swift_task_switch(sub_100151718, v26, 0);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 304);
    swift_bridgeObjectRelease();
    sub_10016FF88(v15);
    sub_10016FF88(v15);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(uint64_t **)(v0 + 304);
    if (v18)
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)id v20 = 136315138;
      uint64_t v21 = *v19;
      unint64_t v22 = v19[1];
      swift_bridgeObjectRetain();
      *(void *)(v0 + 296) = sub_100290514(v21, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100170614((uint64_t)v19);
      sub_100170614((uint64_t)v19);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No eligible shares for view %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100170614((uint64_t)v19);
      sub_100170614((uint64_t)v19);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27(0);
  }
}

uint64_t sub_10016EC34(uint64_t a1)
{
  id v3 = (void *)*v2;
  v3[51] = a1;
  v3[52] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = v3[41];
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_10016F674;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v6 = v3[41];
    uint64_t v5 = sub_10016ED5C;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_10016ED5C()
{
  uint64_t v48 = v0;
  uint64_t v1 = (void *)v0[51];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[44];
  uint64_t v4 = (uint64_t *)(v3 + *(int *)(v0[42] + 24));
  uint64_t v6 = *v4;
  unint64_t v5 = v4[1];
  sub_10006D0EC(*v4, v5);
  sub_100186310(v1, v6, v5, v3);
  uint64_t v46 = v0;
  uint64_t v45 = v2;
  if (!v2)
  {
    uint64_t v12 = (void *)v0[48];
    swift_bridgeObjectRelease();
    sub_10006D144(v6, v5);
    id v13 = v12;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    os_log_type_t v17 = (void *)v0[48];
    if (v16)
    {
      BOOL v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)BOOL v18 = 138412290;
      v0[36] = v17;
      id v20 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v19 = v17;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "KeySyncManager: Successfully imported TLK from %@", v18, 0xCu);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v34 = (void *)v0[51];
    uint64_t v35 = (void *)v0[48];
    uint64_t v36 = v46[44];

    uint64_t v37 = self;
    sub_10006C51C(&qword_100455670);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378290;
    v46[33] = 0x726F706D496B6C74;
    v46[34] = 0xEB00000000646574;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = 1;
    sub_1001DB24C(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10005069C(v37, isa);

    uint64_t v0 = v46;
    sub_100170490(v36, type metadata accessor for SESTLKShareData);
    goto LABEL_16;
  }
  sub_10006D144(v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    *(void *)(v9 + 4) = sub_100290514(v10, v11, &v47);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to import TLK - %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v21 = (void *)v0[51];
  unint64_t v22 = (void *)v0[48];
  uint64_t v23 = v0[44];
  sub_100164280(15, 0);

  swift_errorRelease();
  sub_100170490(v23, type metadata accessor for SESTLKShareData);
  uint64_t v24 = v0[49];
  if (v24 == v0[46])
  {
    swift_bridgeObjectRelease();
LABEL_16:
    swift_task_dealloc();
    swift_task_dealloc();
    char v40 = (uint64_t (*)(BOOL))v0[1];
    return v40(v45 == 0);
  }
  uint64_t v25 = v0[45];
  if ((v25 & 0xC000000000000001) != 0) {
    id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v26 = *(id *)(v25 + 8 * v24 + 32);
  }
  uint64_t v29 = v26;
  v0[48] = v26;
  v0[49] = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    id v30 = [v29 shareData];
    uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v33 = v32;

    sub_100170544(&qword_100456508, (void (*)(uint64_t))type metadata accessor for SESTLKShareData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v43 = v0[43];
    uint64_t v42 = v0[44];
    sub_10006D144(v31, v33);
    swift_release();
    sub_1001705AC(v43, v42, type metadata accessor for SESTLKShareData);
    uint64_t v44 = (void *)swift_task_alloc();
    v0[50] = v44;
    *uint64_t v44 = v0;
    v44[1] = sub_10016EC34;
    uint64_t v27 = v0[41];
    v44[20] = v27;
    id v26 = sub_100151718;
    uint64_t v28 = 0;
  }
  return _swift_task_switch(v26, v27, v28);
}

uint64_t sub_10016F674()
{
  uint64_t v1 = *(void *)(v0 + 352);

  sub_100170490(v1, type metadata accessor for SESTLKShareData);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2(0);
}

uint64_t sub_10016F70C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    uint64_t result = sub_10016BFBC(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    uint64_t result = sub_10016BFBC(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    uint64_t result = sub_10016BFBC(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    uint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  uint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }
  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }
  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }
        if (v19)
        {
          uint64_t v24 = 0;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            uint64_t v38 = v24 * a6;
            if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
              return 0;
            }
            uint64_t v24 = v38 + (v36 + v37);
            if (__OFADD__(v38, (v36 + v37))) {
              return 0;
            }
            ++v34;
            --v35;
          }
          while (v35);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_94;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }
      if (v19)
      {
        uint64_t v42 = 0;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }
            else
            {
              char v44 = -55;
            }
          }
          else
          {
            char v44 = -48;
          }
          uint64_t v45 = v42 * a6;
          if ((unsigned __int128)(v42 * (__int128)a6) >> 64 != (v42 * a6) >> 63) {
            return 0;
          }
          uint64_t v42 = v45 + (v43 + v44);
          if (__OFADD__(v45, (v43 + v44))) {
            return 0;
          }
          ++v19;
          --result;
        }
        while (result);
        return v45 + (v43 + v44);
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v30 = v24 * a6;
          if ((unsigned __int128)(v24 * (__int128)a6) >> 64 != (v24 * a6) >> 63) {
            return 0;
          }
          uint64_t v24 = v30 - (v27 + v28);
          if (__OFSUB__(v30, (v27 + v28))) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t sub_10016FB34(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10040F050, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

__n128 *sub_10016FB80(__n128 *a1, __n128 *a2)
{
  return a2;
}

uint64_t sub_10016FBDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016FC10(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3 = a3 >> 6;
  if (v3 == 2) {
    return swift_release();
  }
  if (v3 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10016FC34(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10016FC60(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  sub_10006D144(*a1, a1[1]);
  sub_10006D144(v2, v3);
  sub_10006D144(v4, v5);
  sub_10006D144(v6, v7);
  sub_10006D144(v8, v9);
  sub_10006D144(v10, v12);
  return a1;
}

uint64_t sub_10016FD0C()
{
  return sub_10017141C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10016FD24(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *unint64_t v9 = v2;
  v9[1] = sub_10011FE60;
  return sub_1001443A4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10016FDEC(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10016FE38(uint64_t *a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  sub_10006D0EC(v4, v3);
  uint64_t result = sub_100075868(v5, v6);
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t sub_10016FE94(int a1, void *a2)
{
  return sub_100159B20(a1, a2, *(void *)(v2 + 16));
}

void sub_10016FE9C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_10015AFB0(a2, a1, *(void *)(v3 + 16), a3);
}

uint64_t sub_10016FEA4(void **a1)
{
  return sub_100165C80(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32)) & 1;
}

uint64_t sub_10016FEC8(void **a1)
{
  return sub_100165EB4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32)) & 1;
}

BOOL sub_10016FEEC(uint64_t *a1)
{
  return sub_1001663D4(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10016FF10(void **a1)
{
  return sub_1001664B8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

unint64_t sub_10016FF34()
{
  unint64_t result = qword_100456498;
  if (!qword_100456498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456498);
  }
  return result;
}

uint64_t sub_10016FF88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  sub_10006D0EC(v2, v3);
  return a1;
}

uint64_t sub_10016FFCC()
{
  uint64_t v1 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v5 = v0 + v3;
  sub_10006D144(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  sub_10006D144(*(void *)(v5 + 16), *(void *)(v5 + 24));
  sub_10006D144(*(void *)(v5 + 32), *(void *)(v5 + 40));
  sub_10006D144(*(void *)(v5 + 48), *(void *)(v5 + 56));
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 32);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = v5 + *(int *)(v1 + 36);
  uint64_t v10 = type metadata accessor for CreationMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9 + *(int *)(v10 + 20), v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v11 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10006D144(*(void *)(v0 + v11), *(void *)(v0 + v11 + 8));

  swift_release();

  return _swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_10017022C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SESPeerIdentityData(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (uint64_t)v1 + v4;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = sub_10011FE60;
  return sub_100167B9C(a1, v13, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1001703A4()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001703E4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_10011FE60;
  return _swift_task_switch(sub_100168A3C, 0, 0);
}

uint64_t sub_100170490(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001704F0()
{
  unint64_t result = qword_1004564F8;
  if (!qword_1004564F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004564F8);
  }
  return result;
}

uint64_t sub_100170544(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10017058C(void **a1)
{
  return sub_100165AD4(a1, *(void **)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1001705AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100170614(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRelease();
  sub_10006D144(v2, v3);
  return a1;
}

uint64_t sub_100170658(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1001706B4(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  return a1;
}

uint64_t sub_100170740(uint64_t a1)
{
  return a1;
}

uint64_t sub_100170770(uint64_t a1)
{
  return a1;
}

void *sub_1001707A0(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  uint64_t v8 = a1[9];
  unint64_t v9 = a1[10];
  uint64_t v10 = a1[11];
  unint64_t v12 = a1[12];
  unint64_t v13 = a1[14];
  uint64_t v14 = a1[13];
  unint64_t v15 = a1[16];
  uint64_t v18 = a1[17];
  uint64_t v16 = a1[15];
  unint64_t v17 = a1[18];
  sub_10006D144(a1[1], a1[2]);
  sub_10006D144(v2, v3);
  sub_10006D144(v4, v5);
  sub_10006D144(v6, v7);
  sub_10006D144(v8, v9);
  sub_10006D144(v10, v12);
  sub_10006D144(v14, v13);
  sub_10006D144(v16, v15);
  sub_10006D144(v18, v17);
  return a1;
}

unint64_t sub_100170888()
{
  unint64_t result = qword_100456538;
  if (!qword_100456538)
  {
    sub_10006D220(&qword_100456480);
    sub_100170544(&qword_100456528, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456538);
  }
  return result;
}

uint64_t sub_10017092C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100170994(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10006C51C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001709F8(uint64_t a1)
{
  return sub_100169934(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100170A14()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100170A4C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10011FE60;
  return _swift_task_switch(sub_10016BDEC, 0, 0);
}

uint64_t sub_100170AF0()
{
  return sub_10017141C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100170B08(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100144930(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_100170B2C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_10011FE60;
  return sub_1001459D8(a1, v4, v5, v6);
}

uint64_t sub_100170BE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100170C40(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10011FE60;
  return sub_100169A5C(a1, a2, v2);
}

uint64_t sub_100170CEC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10006D144(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocObject(v0, 73, 7);
}

uint64_t sub_100170D3C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011FE60;
  v3[30] = v2;
  v3[31] = v0 + 40;
  v3[32] = OBJC_IVAR____TtC10seserviced16SEKeySyncManager_keychainWrapper;
  return _swift_task_switch(sub_100169FD8, v2, 0);
}

uint64_t sub_100170DF8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10011F7E8;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1004565C0 + dword_1004565C0);
  return v6(a1, v4);
}

void sub_100170EB0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    sub_10006D0EC(a3, a4);
    id v8 = a6;
  }
}

void sub_100170F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, void (*a10)(void))
{
  if (a9 != 2)
  {
    a10();
    ((void (*)(uint64_t, uint64_t))a10)(a3, a4);
    ((void (*)(uint64_t, uint64_t))a10)(a5, a6);
    ((void (*)(uint64_t, uint64_t))a10)(a7, a8);
  }
}

void sub_100170FD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    sub_10006D144(a3, a4);
  }
}

uint64_t sub_100171038()
{
  return sub_10017141C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100171050(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10011FE60;
  return sub_1001443A4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100171118()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100171150()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10011FE60;
  return _swift_task_switch(sub_100141A60, 0, 0);
}

uint64_t sub_1001711F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017122C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10011FE60;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1004564B8 + dword_1004564B8);
  return v6(a1, v4);
}

uint64_t sub_1001712E4(uint64_t a1)
{
  return sub_1001424E8(a1, v1);
}

uint64_t sub_1001712EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001712FC()
{
  return swift_release();
}

uint64_t sub_100171304(uint64_t a1, uint64_t a2)
{
  return sub_10014306C(a1, a2, v2);
}

uint64_t sub_100171310()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100171350(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10011FE60;
  return sub_100143380(a1, v4, v5, v6);
}

uint64_t sub_100171404()
{
  return sub_10017141C((void (*)(void))&_swift_release);
}

uint64_t sub_10017141C(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 48));

  return _swift_deallocObject(v1, 56, 7);
}

uint64_t sub_100171474()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10011FE60;
  *(_OWORD *)(v2 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10014321C;
  return sub_10023ADA4();
}

uint64_t sub_10017155C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10014266C();
  *a1 = result;
  return result;
}

uint64_t sub_100171584()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001715D4()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10011F7E8;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return _swift_task_switch(sub_10016B278, 0, 0);
}

unint64_t sub_100171680()
{
  unint64_t result = qword_100456650;
  if (!qword_100456650)
  {
    sub_10007582C(255, &qword_100456648);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456650);
  }
  return result;
}

uint64_t sub_1001716E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100171744(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, char a10)
{
  if (a10 != 2)
  {
    sub_10006D144(a2, a3);
    sub_10006D144(a4, a5);
    sub_10006D144(a6, a7);
    sub_10006D144(a8, a9);
  }
}

uint64_t destroy for SEKeySyncManager.ViewConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);

  return sub_10006D144(v2, v3);
}

uint64_t initializeWithCopy for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  sub_10006D0EC(v5, v6);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 24);
  sub_10006D0EC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  sub_10006D144(v6, v7);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SEKeySyncManager.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10006D144(v5, v6);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SEKeySyncManager.ViewConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SEKeySyncManager.ViewConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncManager.ViewConfiguration()
{
  return &type metadata for SEKeySyncManager.ViewConfiguration;
}

unint64_t sub_1001719F0()
{
  unint64_t result = qword_100456658;
  if (!qword_100456658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456658);
  }
  return result;
}

id sub_100171A58()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SECNotificationListener()) init];
  qword_100468730 = (uint64_t)result;
  return result;
}

id sub_100171B74()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v55 = *(void *)(v1 - 8);
  uint64_t v56 = v1;
  __chkstk_darwin(v1, v2);
  uint64_t v54 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchTimeInterval();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v46 = (uint64_t *)((char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7, v8);
  uint64_t v45 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v10, v11);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v52 = *(void *)(v17 - 8);
  uint64_t v53 = v17;
  __chkstk_darwin(v17, v18);
  int v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v21 = &v0[OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate];
  *(_OWORD *)unsigned __int8 v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((void *)v21 + 4) = 0;
  uint64_t v22 = OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue;
  sub_10007BEB4();
  char v44 = v0;
  static DispatchQoS.default.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v12);
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_100176E48((unint64_t *)&qword_1004566E8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10006C51C(&qword_1004566F0);
  sub_100176E90((unint64_t *)&qword_1004566F8, &qword_1004566F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v22] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  if (qword_100453708 != -1) {
    swift_once();
  }
  uint64_t v23 = v48;
  uint64_t v24 = sub_10008E55C(v48, (uint64_t)qword_100456660);
  uint64_t v25 = v47;
  uint64_t v26 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v45, v24, v23);
  unsigned int v27 = *(void **)&v0[v22];
  char v28 = v46;
  *uint64_t v46 = 1;
  uint64_t v30 = v49;
  uint64_t v29 = v50;
  (*(void (**)(void *, void, uint64_t))(v49 + 104))(v28, enum case for DispatchTimeInterval.seconds(_:), v50);
  sub_10006C51C((uint64_t *)&unk_100456700);
  unsigned __int8 v31 = (void *)swift_allocObject();
  unsigned __int8 v32 = (char *)v31 + *(void *)(*v31 + 136);
  *(void *)unsigned __int8 v32 = 0;
  v32[8] = 1;
  v31[2] = 0xD000000000000017;
  v31[3] = 0x80000001003B50B0;
  v31[4] = v27;
  (*(void (**)(uint64_t, void *, uint64_t))(v30 + 32))((uint64_t)v31 + qword_10045A320, v28, v29);
  unsigned __int8 v33 = (void (**)(uint64_t *))((char *)v31 + qword_10045A328);
  *unsigned __int8 v33 = sub_100176884;
  v33[1] = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))((uint64_t)v31 + qword_10045A330, v26, v23);
  uint64_t v34 = v44;
  *(void *)&v44[OBJC_IVAR____TtC10seserviced23SECNotificationListener_coealescer] = v31;
  id v35 = v27;

  v59.receiver = v34;
  v59.super_class = ObjectType;
  id v36 = [super init];
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v36;
  aBlock[4] = sub_100176F18;
  aBlock[5] = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100413690;
  uint64_t v38 = _Block_copy(aBlock);
  id v39 = v36;
  static DispatchQoS.unspecified.getter();
  uint64_t v57 = _swiftEmptyArrayStorage;
  sub_100176E48((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  unsigned __int8 v40 = v54;
  uint64_t v41 = v56;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v20, v53);
  swift_release();
  return v39;
}

void sub_1001722BC(char a1)
{
  if (qword_100453708 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_100456660);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received notification %ld", v5, 0xCu);
    swift_slowDealloc();
  }

  if ((a1 & 0x3F) != 0)
  {
    sub_1001768E4();
    sub_100172704(a1 & 1, (a1 & 2) != 0);
  }
}

void sub_1001723F8(uint64_t a1)
{
  if (qword_100453708 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_100456660);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Starting SECNotificationListener", v5, 2u);
    swift_slowDealloc();
  }

  sub_1001768E4();
  uint64_t v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  char v8 = [v6 registerDelegate:a1 forEvent:v7];

  NSString v9 = String._bridgeToObjectiveC()();
  unsigned int v10 = [v6 registerDelegate:a1 forEvent:v9];

  NSString v11 = String._bridgeToObjectiveC()();
  [v6 registerDelegate:a1 forEvent:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  [v6 registerDelegate:a1 forEvent:v12];

  NSString v13 = String._bridgeToObjectiveC()();
  [v6 registerDelegate:a1 forEvent:v13];

  NSString v14 = String._bridgeToObjectiveC()();
  [v6 registerDelegate:a1 forEvent:v14];

  if ((v8 & 1) != 0 || v10)
  {
    sub_100172704(v8, v10);
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v15, "No pending notifications", v16, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100172704(char a1, char a2)
{
  uint64_t v5 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v5 - 8, v6);
  char v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  *(unsigned char *)(v11 + 32) = a1;
  *(unsigned char *)(v11 + 33) = a2;
  *(void *)(v11 + 40) = v2;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  id v13 = v2;
  if (v12 == 1)
  {
    sub_10008E734((uint64_t)v8, &qword_100455C60);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(v11 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v14 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v15 = v16;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
    }
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = &unk_100456718;
  *(void *)(v17 + 24) = v11;
  if (v15 | v14)
  {
    v19[0] = 0;
    v19[1] = 0;
    v19[2] = v14;
    v19[3] = v15;
  }
  swift_task_create();
  return swift_release();
}

void sub_10017297C(uint64_t a1, unint64_t a2)
{
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_100176B90(a1, a2);
  if (v5)
  {
    if (qword_100453708 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_100456660);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_bridgeObjectRetain();
      sub_100290514(a1, a2, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Ignoring unexpected darwin event %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    sub_100172B50(v4);
  }
}

uint64_t sub_100172B50(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  int v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = *(void *)(v1 + 32);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_100176E1C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_100413618;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100176E48((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release();
}

uint64_t sub_100172E64(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  *(unsigned char *)(v5 + 201) = a5;
  *(unsigned char *)(v5 + 200) = a4;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = *(void *)(v6 - 8);
  *(void *)(v5 + 112) = swift_task_alloc();
  *(void *)(v5 + 120) = swift_task_alloc();
  return _swift_task_switch(sub_100172F38, 0, 0);
}

uint64_t sub_100172F38()
{
  uint64_t v44 = v0;
  *(void *)(v0 + 64) = &_swiftEmptySetSingleton;
  if (*(unsigned char *)(v0 + 200) == 1)
  {
    if (qword_100453958 == -1)
    {
LABEL_3:
      uint64_t v1 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v1;
      void *v1 = v0;
      v1[1] = sub_100173584;
      return sub_1002AA2BC();
    }
LABEL_39:
    swift_once();
    goto LABEL_3;
  }
  if (*(unsigned char *)(v0 + 201) == 1)
  {
    if (qword_100453958 != -1) {
      swift_once();
    }
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100173C40;
    return sub_1002AAB4C();
  }
  else
  {
    if (qword_100453708 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E55C(v4, (uint64_t)qword_100456660);
    uint64_t v5 = *(void *)(v0 + 64);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v37 = v7;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      int64_t v9 = *(void *)(v5 + 16);
      if (v9)
      {
        id v35 = v8;
        id v36 = v6;
        uint64_t v10 = *(void *)(v0 + 104);
        uint64_t v43 = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain();
        sub_1002CF974(0, v9, 0);
        uint64_t v11 = sub_100203450(v5);
        uint64_t v13 = v12;
        char v15 = v14 & 1;
        uint64_t v40 = v0;
        uint64_t v41 = v5 + 56;
        uint64_t v38 = v5;
        uint64_t v39 = v10;
        while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(v5 + 32))
        {
          if (((*(void *)(v41 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
            goto LABEL_37;
          }
          if (*(_DWORD *)(v5 + 36) != v13) {
            goto LABEL_38;
          }
          uint64_t v16 = *(void *)(v0 + 112);
          uint64_t v17 = *(void *)(v0 + 120);
          uint64_t v18 = *(void *)(v0 + 96);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v17, *(void *)(v5 + 48) + *(void *)(v39 + 72) * v11, v18);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v16, v17, v18);
          uint64_t v19 = UUID.uuidString.getter();
          uint64_t v21 = v20;
          (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v16, v18);
          uint64_t v22 = v43;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002CF974(0, v43[2] + 1, 1);
            uint64_t v22 = v43;
          }
          unint64_t v24 = v22[2];
          unint64_t v23 = v22[3];
          if (v24 >= v23 >> 1)
          {
            sub_1002CF974(v23 > 1, v24 + 1, 1);
            uint64_t v22 = v43;
          }
          v22[2] = v24 + 1;
          uint64_t v25 = &v22[2 * v24];
          v25[4] = v19;
          v25[5] = v21;
          uint64_t v5 = v38;
          uint64_t v26 = sub_1000FAE78(v11, v13, v15 & 1, v38);
          uint64_t v11 = v26;
          uint64_t v13 = v27;
          char v15 = v28 & 1;
          --v9;
          uint64_t v0 = v40;
          if (!v9)
          {
            sub_10008B004(v26, v27, v28 & 1);
            swift_bridgeObjectRelease();
            uint64_t v6 = v36;
            uint64_t v8 = v35;
            goto LABEL_28;
          }
        }
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
LABEL_28:
      uint64_t v29 = Array.description.getter();
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 88) = sub_100290514(v29, v31, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v6, v37, "All credentials to MFD %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_beginAccess();
    uint64_t v32 = *(void *)(v0 + 64);
    *(void *)(v0 + 176) = v32;
    if (*(void *)(v32 + 16))
    {
      unsigned __int8 v33 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v33;
      *unsigned __int8 v33 = v0;
      v33[1] = sub_10017424C;
      v33[14] = v32;
      return _swift_task_switch(sub_100177084, 0, 0);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
      return v34();
    }
  }
}

uint64_t sub_100173584(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100174608;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    uint64_t v5 = sub_1001736AC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001736AC()
{
  uint64_t v43 = v0;
  sub_1000D8E70(*(void *)(v0 + 144));
  if (*(unsigned char *)(v0 + 201) == 1)
  {
    if (qword_100453958 == -1)
    {
LABEL_3:
      uint64_t v1 = (void *)swift_task_alloc();
      *(void *)(v0 + 152) = v1;
      void *v1 = v0;
      v1[1] = sub_100173C40;
      return sub_1002AAB4C();
    }
LABEL_33:
    swift_once();
    goto LABEL_3;
  }
  if (qword_100453708 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_100456660);
  uint64_t v4 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v36 = v6;
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    int64_t v8 = *(void *)(v4 + 16);
    if (v8)
    {
      uint64_t v34 = v7;
      id v35 = v5;
      uint64_t v9 = *(void *)(v0 + 104);
      uint64_t v42 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1002CF974(0, v8, 0);
      uint64_t v10 = sub_100203450(v4);
      uint64_t v12 = v11;
      char v14 = v13 & 1;
      uint64_t v39 = v0;
      uint64_t v40 = v4 + 56;
      uint64_t v37 = v4;
      uint64_t v38 = v9;
      while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(unsigned char *)(v4 + 32))
      {
        if (((*(void *)(v40 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
          goto LABEL_31;
        }
        if (*(_DWORD *)(v4 + 36) != v12) {
          goto LABEL_32;
        }
        uint64_t v15 = *(void *)(v0 + 112);
        uint64_t v16 = *(void *)(v0 + 120);
        uint64_t v17 = *(void *)(v0 + 96);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v16, *(void *)(v4 + 48) + *(void *)(v38 + 72) * v10, v17);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32))(v15, v16, v17);
        uint64_t v18 = UUID.uuidString.getter();
        uint64_t v20 = v19;
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v15, v17);
        uint64_t v21 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CF974(0, v42[2] + 1, 1);
          uint64_t v21 = v42;
        }
        unint64_t v23 = v21[2];
        unint64_t v22 = v21[3];
        if (v23 >= v22 >> 1)
        {
          sub_1002CF974(v22 > 1, v23 + 1, 1);
          uint64_t v21 = v42;
        }
        uint64_t v21[2] = v23 + 1;
        unint64_t v24 = &v21[2 * v23];
        v24[4] = v18;
        v24[5] = v20;
        uint64_t v4 = v37;
        uint64_t v25 = sub_1000FAE78(v10, v12, v14 & 1, v37);
        uint64_t v10 = v25;
        uint64_t v12 = v26;
        char v14 = v27 & 1;
        --v8;
        uint64_t v0 = v39;
        if (!v8)
        {
          sub_10008B004(v25, v26, v27 & 1);
          swift_bridgeObjectRelease();
          uint64_t v5 = v35;
          uint64_t v7 = v34;
          goto LABEL_22;
        }
      }
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
LABEL_22:
    uint64_t v28 = Array.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 88) = sub_100290514(v28, v30, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v36, "All credentials to MFD %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  uint64_t v31 = *(void *)(v0 + 64);
  *(void *)(v0 + 176) = v31;
  if (*(void *)(v31 + 16))
  {
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v32;
    *uint64_t v32 = v0;
    v32[1] = sub_10017424C;
    v32[14] = v31;
    return _swift_task_switch(sub_100177084, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    unsigned __int8 v33 = *(uint64_t (**)(void))(v0 + 8);
    return v33();
  }
}

uint64_t sub_100173C40(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 160) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100174838;
  }
  else
  {
    *(void *)(v4 + 168) = a1;
    uint64_t v5 = sub_100173D70;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100173D70()
{
  uint64_t v42 = v0;
  unint64_t v1 = (unint64_t)(v0 + 8);
  sub_1000D8E70(v0[21]);
  if (qword_100453708 != -1) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E55C(v2, (uint64_t)qword_100456660);
    uint64_t v3 = *(void *)v1;
    swift_bridgeObjectRetain_n();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v4, v5))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_17;
    }
    os_log_type_t v35 = v5;
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 136315138;
    int64_t v7 = *(void *)(v3 + 16);
    if (!v7) {
      break;
    }
    unsigned __int8 v33 = v6;
    uint64_t v34 = v4;
    uint64_t v8 = v0[13];
    uint64_t v41 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CF974(0, v7, 0);
    uint64_t v9 = sub_100203450(v3);
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    uint64_t v38 = v0;
    uint64_t v39 = v3 + 56;
    uint64_t v36 = v3;
    uint64_t v37 = v8;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(unsigned char *)(v3 + 32))
    {
      if (((*(void *)(v39 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(v3 + 36) != v11) {
        goto LABEL_26;
      }
      uint64_t v15 = v0[14];
      uint64_t v14 = v0[15];
      uint64_t v16 = v0[12];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v14, *(void *)(v3 + 48) + *(void *)(v37 + 72) * v9, v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v15, v14, v16);
      uint64_t v17 = UUID.uuidString.getter();
      uint64_t v19 = v18;
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v15, v16);
      uint64_t v20 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CF974(0, v41[2] + 1, 1);
        uint64_t v20 = v41;
      }
      unint64_t v1 = v20[2];
      unint64_t v21 = v20[3];
      if (v1 >= v21 >> 1)
      {
        sub_1002CF974(v21 > 1, v1 + 1, 1);
        uint64_t v20 = v41;
      }
      v20[2] = v1 + 1;
      unint64_t v22 = &v20[2 * v1];
      v22[4] = v17;
      v22[5] = v19;
      uint64_t v3 = v36;
      uint64_t v23 = sub_1000FAE78(v9, v11, v13 & 1, v36);
      uint64_t v9 = v23;
      uint64_t v11 = v24;
      char v13 = v25 & 1;
      --v7;
      uint64_t v0 = v38;
      if (!v7)
      {
        sub_10008B004(v23, v24, v25 & 1);
        swift_bridgeObjectRelease();
        uint64_t v4 = v34;
        os_log_type_t v6 = v33;
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    swift_once();
  }
LABEL_16:
  uint64_t v26 = Array.description.getter();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  v0[11] = sub_100290514(v26, v28, &v40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v4, v35, "All credentials to MFD %s", v6, 0xCu);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
LABEL_17:

  swift_beginAccess();
  uint64_t v29 = v0[8];
  v0[22] = v29;
  if (*(void *)(v29 + 16))
  {
    unint64_t v30 = (void *)swift_task_alloc();
    v0[23] = v30;
    *unint64_t v30 = v0;
    v30[1] = sub_10017424C;
    v30[14] = v29;
    return _swift_task_switch(sub_100177084, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
}

uint64_t sub_10017424C()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001743D0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100174368;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100174368()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001743D0()
{
  uint64_t v10 = v0;
  swift_bridgeObjectRelease();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 80) = sub_100290514(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %s encountered when handling pending notifications", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100174608()
{
  uint64_t v10 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 80) = sub_100290514(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %s encountered when handling pending notifications", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100174838()
{
  uint64_t v10 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    *(void *)(v0 + 80) = sub_100290514(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error %s encountered when handling pending notifications", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_100174A68(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    long long v10 = *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo + 16];
    long long v38 = *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo];
    long long v39 = v10;
    long long v12 = *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo + 48];
    long long v11 = *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo + 64];
    long long v13 = *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo + 32];
    *(_OWORD *)&v42[10] = *(_OWORD *)&a1[OBJC_IVAR____TtC10seserviced15SECAdminSession_clientInfo + 74];
    long long v41 = v12;
    *(_OWORD *)uint64_t v42 = v11;
    long long v40 = v13;
    uint64_t v14 = a1;
    sub_100129A6C((uint64_t)&v38);
    if (qword_100453708 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E55C(v15, (uint64_t)qword_100456660);
    sub_100129A6C((uint64_t)&v38);
    sub_100129A6C((uint64_t)&v38);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v19 = sub_100124BBC();
      uint64_t v36 = sub_100290514(v19, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10012921C((uint64_t)&v38);
      sub_10012921C((uint64_t)&v38);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Start admin session %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10012921C((uint64_t)&v38);
      sub_10012921C((uint64_t)&v38);
    }

    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v14;
    long long v28 = v41;
    *(_OWORD *)(v27 + 56) = v40;
    *(_OWORD *)(v27 + 72) = v28;
    *(_OWORD *)(v27 + 88) = *(_OWORD *)v42;
    *(_OWORD *)(v27 + 98) = *(_OWORD *)&v42[10];
    long long v29 = v39;
    *(_OWORD *)(v27 + 24) = v38;
    *(_OWORD *)(v27 + 40) = v29;
    uint64_t v30 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 1, 1, v30);
    uint64_t v31 = (void *)swift_allocObject();
    v31[2] = 0;
    v31[3] = 0;
    v31[4] = a3;
    v31[5] = v14;
    v31[6] = sub_1001772E4;
    v31[7] = v27;
    uint64_t v32 = v14;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10028E720((uint64_t)v9, (uint64_t)&unk_100456730, (uint64_t)v31);

    swift_release();
    swift_release();
  }
  else
  {
    if (qword_100453708 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10008E55C(v21, (uint64_t)qword_100456660);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v24 = Error.localizedDescription.getter();
        unint64_t v26 = v25;
      }
      else
      {
        unint64_t v26 = 0xE700000000000000;
        uint64_t v24 = 0x6E776F6E6B6E55;
      }
      uint64_t v37 = sub_100290514(v24, v26, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v22, "Error %s encountered when starting admin session during reconcile with LS Apps", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      unsigned __int8 v33 = v35;
    }
  }
}

uint64_t sub_100174F94(void *a1, _OWORD *a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453708 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10008E55C(v8, (uint64_t)qword_100456660);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    long long v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Finished deleting all orphaned credentials", v11, 2u);
    swift_slowDealloc();
  }

  long long v12 = (_OWORD *)swift_allocObject();
  long long v13 = a2[3];
  v12[3] = a2[2];
  v12[4] = v13;
  v12[5] = a2[4];
  *(_OWORD *)((char *)v12 + 90) = *(_OWORD *)((char *)a2 + 74);
  long long v14 = a2[1];
  v12[1] = *a2;
  v12[2] = v14;
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v7, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = 0;
  v16[3] = 0;
  v16[4] = a1;
  v16[5] = sub_100177464;
  v16[6] = v12;
  sub_100129A6C((uint64_t)a2);
  id v17 = a1;
  swift_retain();
  sub_10028E720((uint64_t)v7, (uint64_t)&unk_100456738, (uint64_t)v16);
  swift_release();
  return swift_release();
}

void sub_1001751BC(uint64_t a1)
{
  if (qword_100453708 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_100456660);
  sub_100129A6C(a1);
  sub_100129A6C(a1);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v5 = sub_100124BBC();
    sub_100290514(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10012921C(a1);
    sub_10012921C(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Ended admin session %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10012921C(a1);
    sub_10012921C(a1);
  }
}

uint64_t sub_10017539C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  long long v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = *(void *)(v3 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_queue);
  id v17 = (void *)swift_allocObject();
  v17[2] = a1;
  v17[3] = a2;
  void v17[4] = a3;
  aBlock[4] = sub_100176B6C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007C0C4;
  aBlock[3] = &unk_1004135C8;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v20[1] = _swiftEmptyArrayStorage;
  sub_100176E48((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release();
}

void sub_100175664(uint64_t a1, unint64_t a2, void *a3)
{
  if (a1 == 0xD000000000000019 && a2 == 0x80000001003B5070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    unint64_t v6 = (const char *)XPC_EVENT_KEY_NAME.getter();
    string = xpc_dictionary_get_string(a3, v6);
    if (string && !strcmp(string, "spInstallScriptStarted"))
    {
      if (qword_100453708 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E55C(v8, (uint64_t)qword_100456660);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v9, v10))
      {
        long long v11 = (uint8_t *)swift_slowAlloc();
        v18[0] = swift_slowAlloc();
        *(_DWORD *)long long v11 = 136315138;
        uint64_t v19 = sub_100290514(0xD000000000000016, 0x80000001003B5090, v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Handling SE Content Change upon receiving %s event", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      if (qword_100453700 != -1) {
        swift_once();
      }
      uint64_t v12 = (void *)(qword_100468730 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate);
      swift_beginAccess();
      uint64_t v13 = v12[3];
      if (v13)
      {
        sub_100075908(v12, v13);
        sub_1001D0BF8();
      }
    }
  }
  else
  {
    if (qword_100453708 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_100456660);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      v18[0] = swift_slowAlloc();
      *(_DWORD *)id v17 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_100290514(a1, a2, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Ignoring stream %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void *sub_100175AA8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100175AB4(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100175ABC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_100175AD0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_100175AE4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100175AF8(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100175B28@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100175B54@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_100175B78(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100175B8C(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_100175BA0(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_100175BB4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100175BC8(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_100175BDC(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_100175BF0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_100175C04()
{
  return *v0 == 0;
}

uint64_t sub_100175C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

void *sub_100175C2C(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_100175C40@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100203D20();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t type metadata accessor for SECNotificationListener()
{
  return self;
}

ValueMetadata *type metadata accessor for SECNotificationListener.SECNotificationEvent()
{
  return &type metadata for SECNotificationListener.SECNotificationEvent;
}

unint64_t sub_100175D1C()
{
  unint64_t result = qword_1004566B8;
  if (!qword_1004566B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004566B8);
  }
  return result;
}

unint64_t sub_100175D74()
{
  unint64_t result = qword_1004566C0;
  if (!qword_1004566C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004566C0);
  }
  return result;
}

unint64_t sub_100175DCC()
{
  unint64_t result = qword_1004566C8;
  if (!qword_1004566C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004566C8);
  }
  return result;
}

unint64_t sub_100175E24()
{
  unint64_t result = qword_1004566D0;
  if (!qword_1004566D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004566D0);
  }
  return result;
}

uint64_t sub_100175E78()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100456660);
  sub_10008E55C(v0, (uint64_t)qword_100456660);
  return Logger.init(subsystem:category:)();
}

void sub_100175EF8(void (*a1)(void, void))
{
  uint64_t v2 = v1;
  unint64_t v50 = (unint64_t)a1;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v49 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v48 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v47 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchTime();
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v44 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  os_log_type_t v16 = (char *)v41 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (void *)((char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  os_log_type_t v22 = (void *)v2[4];
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = v22;
  char v24 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v24)
  {
    uint64_t v42 = v7;
    swift_retain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v43 = v4;
    v41[1] = v23;
    if (v27)
    {
      uint64_t v28 = swift_slowAlloc();
      v41[0] = v3;
      uint64_t v29 = v28;
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v30 = v2[2];
      unint64_t v31 = v2[3];
      swift_bridgeObjectRetain();
      uint64_t v51 = (void *)sub_100290514(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      int v32 = *((unsigned __int8 *)v2 + *(void *)(*v2 + 136) + 8);
      swift_release();
      if (v32) {
        uint64_t v33 = 1819047278;
      }
      else {
        uint64_t v33 = 0x676E6974696177;
      }
      if (v32) {
        unint64_t v34 = 0xE400000000000000;
      }
      else {
        unint64_t v34 = 0xE700000000000000;
      }
      uint64_t v51 = (void *)sub_100290514(v33, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Notify for client %s in state %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v3 = v41[0];
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }
    os_log_type_t v35 = (char *)v2 + *(void *)(*v2 + 136);
    if (v35[8] == 1)
    {
      *(void *)os_log_type_t v35 = v50;
      v35[8] = 0;
      uint64_t v36 = v44;
      static DispatchTime.now()();
      DispatchTime.advanced(by:)();
      uint64_t v37 = v46;
      unint64_t v50 = *(void *)(v45 + 8);
      ((void (*)(char *, uint64_t))v50)(v36, v46);
      aBlock[4] = (uint64_t)sub_100176E44;
      aBlock[5] = (uint64_t)v2;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10007C0C4;
      aBlock[3] = (uint64_t)&unk_100413640;
      long long v38 = _Block_copy(aBlock);
      swift_retain();
      long long v39 = v47;
      static DispatchQoS.unspecified.getter();
      uint64_t v51 = _swiftEmptyArrayStorage;
      sub_100176E48((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      long long v40 = v49;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
      _Block_release(v38);
      (*(void (**)(char *, uint64_t))(v43 + 8))(v40, v3);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v39, v42);
      ((void (*)(char *, uint64_t))v50)(v16, v37);
      swift_release();
    }
    else
    {
      *(void *)v35 |= v50;
      v35[8] = 0;
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100176590()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = (void *)v1[4];
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = v1[2];
      unint64_t v13 = v1[3];
      swift_bridgeObjectRetain();
      uint64_t v16 = sub_100290514(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Firing %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v14 = (char *)v1 + *(void *)(*v1 + 136);
    if ((v14[8] & 1) == 0)
    {
      uint64_t v17 = *(void *)v14;
      uint64_t result = (*(uint64_t (**)(uint64_t *))((char *)v1 + qword_10045A328))(&v17);
      *(void *)uint64_t v14 = 0;
      v14[8] = 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100176884(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (qword_100453700 != -1) {
    swift_once();
  }
  sub_1001722BC(v1);
}

uint64_t sub_1001768E4()
{
  uint64_t v0 = type metadata accessor for SECDefaultAppReconciler();
  __chkstk_darwin(v0, v1);
  uint64_t v3 = (uint64_t *)((char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v4 = [objc_allocWithZone((Class)type metadata accessor for TCCContext()) init];
  *uint64_t v3 = v4;
  id v5 = v4;
  Logger.init(subsystem:category:)();
  sub_10022D4CC();
  type metadata accessor for SECSettingsPaneReconciler();
  uint64_t v6 = swift_allocObject();
  id v7 = v5;
  Logger.init(subsystem:category:)();
  *(void *)(v6 + 16) = v7;
  *(void *)(v6 + 24) = sub_1002A7A98();
  sub_100193B44();

  swift_setDeallocating();
  swift_release();
  uint64_t v8 = v6 + OBJC_IVAR____TtC10seserviced25SECSettingsPaneReconciler_logger;
  uint64_t v9 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_deallocClassInstance();

  return sub_100176AD0((uint64_t)v3);
}

uint64_t sub_100176AD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SECDefaultAppReconciler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100176B2C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100176B6C()
{
  sub_100175664(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100176B78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100176B88()
{
  return swift_release();
}

uint64_t sub_100176B90(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000002CLL && a2 == 0x80000001003B5120
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000001003B5150
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  if (a1 == 0xD00000000000002ELL && a2 == 0x80000001003B5170
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  if (a1 == 0xD00000000000002FLL && a2 == 0x80000001003B51A0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  if (a1 == 0xD000000000000030 && a2 == 0x80000001003B51D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  if (a1 == 0xD00000000000002FLL && a2 == 0x80000001003B5210)
  {
    swift_bridgeObjectRelease();
    return 32;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v5) {
    return 32;
  }
  return 0;
}

uint64_t sub_100176DE4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100176E1C()
{
  sub_100175EF8(*(void (**)(void, void))(v0 + 24));
}

uint64_t sub_100176E48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100176E90(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100176EE0()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100176F18()
{
  sub_1001723F8(*(void *)(v0 + 16));
}

uint64_t sub_100176F20()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100176F60(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  char v7 = *(unsigned char *)(v1 + 33);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10011FE60;
  return sub_100172E64(a1, v4, v5, v6, v7);
}

uint64_t sub_10017702C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100177064(uint64_t a1)
{
  *(void *)(v1 + 112) = a1;
  return _swift_task_switch(sub_100177084, 0, 0);
}

uint64_t sub_100177084()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = self;
  swift_bridgeObjectRetain();
  id v4 = [v3 processInfo];
  LODWORD(v3) = [v4 processIdentifier];

  *(void *)(v0 + 16) = 0x6369767265736573;
  *(void *)(v0 + 24) = 0xEA00000000006465;
  *(void *)(v0 + 32) = 0x6369767265736573;
  *(void *)(v0 + 40) = 0xEA00000000006465;
  *(void *)(v0 + 48) = 0x6369767265736573;
  *(void *)(v0 + 56) = 0xEA00000000006465;
  *(_DWORD *)(v0 + 64) = v3;
  *(unsigned char *)(v0 + 68) = 0;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0x6369767265736573;
  *(void *)(v0 + 96) = 0xEA00000000006465;
  *(_WORD *)(v0 + 104) = 257;
  objc_allocWithZone((Class)type metadata accessor for SECAdminSession());
  swift_retain();
  id v5 = sub_10022D030((_OWORD *)(v0 + 16), (uint64_t)sub_100177284, v2);
  swift_release();
  if (qword_100453728 != -1) {
    swift_once();
  }
  sub_100190F94((uint64_t)v5);

  swift_release();
  char v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_10017724C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100177284(char *a1, uint64_t a2)
{
  sub_100174A68(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_10017728C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 114, 7);
}

uint64_t sub_1001772E4()
{
  return sub_100174F94(*(void **)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_1001772F0()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100177340(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10011F7E8;
  return sub_10022AAFC(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_100177414()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 106, 7);
}

void sub_100177464()
{
  sub_1001751BC(v0 + 16);
}

uint64_t sub_10017746C()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001774B4(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10011FE60;
  return sub_10022A8A8(a1, v4, v5, v6, v7, v8);
}

void sub_100177598(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v53 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v8, v9);
  uint64_t v55 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10006C51C(&qword_100455EB0);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v54 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v52 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  os_log_type_t v26 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_100468A38;
  *os_log_type_t v26 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v23 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v22);
  id v28 = (id)v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v23 + 8))(v26, v22);
  if ((v27 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  int v29 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
  uint64_t v30 = Logger.logObject.getter();
  if (v29 == 1)
  {
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      int v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Queuing SE request", v32, 2u);
      swift_slowDealloc();
    }

    if ((a1 & 1) == 0
      || (uint64_t v33 = v3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier,
          swift_beginAccess(),
          sub_100170994(v33, (uint64_t)v21, &qword_100455EB0),
          uint64_t v52 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48),
          unsigned int v34 = v52(v21, 1, v5),
          sub_10008E734((uint64_t)v21, &qword_100455EB0),
          v34 == 1))
    {
LABEL_9:
      os_log_type_t v35 = (void *)(v3 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
      swift_beginAccess();
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v35 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      {
LABEL_10:
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();
        sub_100179F68();
        return;
      }
LABEL_29:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      goto LABEL_10;
    }
    uint64_t v38 = *(void *)(v57 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (v38)
    {
      uint64_t v39 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v18, v38 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v5);
      uint64_t v40 = 0;
      uint64_t v41 = (uint64_t)v55;
    }
    else
    {
      uint64_t v40 = 1;
      uint64_t v41 = (uint64_t)v55;
      uint64_t v39 = v56;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v18, v40, 1, v5);
    uint64_t v42 = v41 + *(int *)(v8 + 48);
    sub_100170994((uint64_t)v18, v41, &qword_100455EB0);
    sub_100170994(v33, v42, &qword_100455EB0);
    uint64_t v43 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v52;
    if (v52((char *)v41, 1, v5) == 1)
    {
      sub_10008E734((uint64_t)v18, &qword_100455EB0);
      if (v43(v42, 1, v5) == 1)
      {
        sub_10008E734(v41, &qword_100455EB0);
        goto LABEL_9;
      }
    }
    else
    {
      uint64_t v44 = v54;
      sub_100170994(v41, v54, &qword_100455EB0);
      if (v43(v42, 1, v5) != 1)
      {
        uint64_t v48 = v56;
        uint64_t v49 = v53;
        (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v53, v42, v5);
        sub_1001828B4((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
        v51(v49, v5);
        sub_10008E734((uint64_t)v18, &qword_100455EB0);
        v51((char *)v44, v5);
        sub_10008E734(v41, &qword_100455EB0);
        if (v50) {
          goto LABEL_9;
        }
        goto LABEL_23;
      }
      sub_10008E734((uint64_t)v18, &qword_100455EB0);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v44, v5);
    }
    sub_10008E734(v41, &qword_10045BEE0);
LABEL_23:
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "SE is busy for another client", v47, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(uint64_t, uint64_t))(v57 + 32))(3, 1);
    return;
  }
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v36, "Not running", v37, 2u);
    swift_slowDealloc();
  }
}

void sub_100177D1C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v73 = a1;
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v3);
  uint64_t v66 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v5, v6);
  uint64_t v68 = (uint64_t)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_100455EB0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v69 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  unint64_t v67 = (char *)&v61 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v61 - v17;
  __chkstk_darwin(v16, v19);
  uint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  os_log_type_t v26 = (uint64_t *)((char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)qword_100468A38;
  *os_log_type_t v26 = qword_100468A38;
  id v28 = *(void (**)(void))(v23 + 104);
  unsigned int v71 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v70 = (void (*)(void *, void, uint64_t))v28;
  v28(v26);
  id v29 = v27;
  char v30 = _dispatchPreconditionTest(_:)();
  uint64_t v31 = *(void *)(v23 + 8);
  ((void (*)(void *, uint64_t))v31)(v26, v22);
  if ((v30 & 1) == 0)
  {
    __break(1u);
    goto LABEL_37;
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning) != 1)
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v38))
    {
LABEL_14:

      return;
    }
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    uint64_t v40 = "Not running";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v37, v38, v40, v39, 2u);
    swift_slowDealloc();
    goto LABEL_14;
  }
  if (!*(void *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle)) {
    return;
  }
  uint64_t v64 = OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle;
  unint64_t v65 = (void (*)(void *, uint64_t))v31;
  if (!v73) {
    goto LABEL_23;
  }
  uint64_t v32 = v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess();
  uint64_t v62 = v32;
  sub_100170994(v32, (uint64_t)v21, &qword_100455EB0);
  NSString v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  uint64_t v31 = v63(v21, 1, v72);
  sub_10008E734((uint64_t)v21, &qword_100455EB0);
  if (v31 != 1)
  {
    uint64_t v33 = v74;
    uint64_t v34 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v18, v73 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v72);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v18, 0, 1, v34);
    uint64_t v31 = v68;
    uint64_t v35 = v68 + *(int *)(v5 + 48);
    sub_100170994((uint64_t)v18, v68, &qword_100455EB0);
    uint64_t v36 = v62;
    uint64_t v62 = v35;
    sub_100170994(v36, v35, &qword_100455EB0);
    if (v63((char *)v31, 1, v34) == 1)
    {
      sub_10008E734((uint64_t)v18, &qword_100455EB0);
      if (v63((char *)v62, 1, v34) == 1)
      {
        sub_10008E734(v31, &qword_100455EB0);
        goto LABEL_19;
      }
      goto LABEL_17;
    }
    uint64_t v41 = (uint64_t)v67;
    sub_100170994(v31, (uint64_t)v67, &qword_100455EB0);
    if (v63((char *)v62, 1, v34) == 1)
    {
      sub_10008E734((uint64_t)v18, &qword_100455EB0);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v41, v34);
LABEL_17:
      sub_10008E734(v31, &qword_10045BEE0);
LABEL_34:
      uint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v37, v38)) {
        goto LABEL_14;
      }
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      uint64_t v40 = "Not releasing SE because the client is not the owner";
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 32))(v66, v62, v34);
    sub_1001828B4((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
    LODWORD(v63) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v42 = v31;
    uint64_t v31 = v34;
    uint64_t v43 = *(void (**)(char *, uint64_t))(v74 + 8);
    v43(v66, v34);
    sub_10008E734((uint64_t)v18, &qword_100455EB0);
    v43(v67, v34);
    sub_10008E734(v42, &qword_100455EB0);
    if ((v63 & 1) == 0) {
      goto LABEL_34;
    }
  }
LABEL_19:
  uint64_t v44 = qword_100468A38;
  *os_log_type_t v26 = qword_100468A38;
  v70(v26, v71, v22);
  swift_retain_n();
  id v45 = (id)v44;
  LOBYTE(v44) = _dispatchPreconditionTest(_:)();
  v65(v26, v22);
  if ((v44 & 1) == 0) {
    goto LABEL_38;
  }
  os_log_type_t v46 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
  swift_beginAccess();
  swift_retain();
  uint64_t v31 = sub_1001820A8(v46);
  swift_release();
  if ((unint64_t)*v46 >> 62) {
    goto LABEL_39;
  }
  uint64_t v47 = *(void *)((*v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v47 < v31)
  {
LABEL_40:
    __break(1u);
  }
  else
  {
    while (1)
    {
      sub_1002D22B4(v31, v47);
      swift_endAccess();
      swift_release_n();
LABEL_23:
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.info.getter();
      uint64_t v31 = v49;
      if (os_log_type_enabled(v48, v49))
      {
        char v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v31, "Releasing the SE", v50, 2u);
        swift_slowDealloc();
      }

      uint64_t v51 = qword_100468A38;
      *os_log_type_t v26 = qword_100468A38;
      v70(v26, v71, v22);
      id v52 = (id)v51;
      LOBYTE(v51) = _dispatchPreconditionTest(_:)();
      v65(v26, v22);
      uint64_t v53 = v72;
      if (v51) {
        break;
      }
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      swift_bridgeObjectRetain();
      uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v47 < v31) {
        goto LABEL_40;
      }
    }
    uint64_t v54 = *(void **)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
    if (v54)
    {
      id v55 = v54;
      if (sub_100052B9C((BOOL)v55)) {
        sub_100052B14((uint64_t)v55);
      }
    }
    uint64_t v56 = *(void **)(v2 + v64);
    *(void *)(v2 + v64) = 0;

    uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
    uint64_t v58 = (uint64_t)v69;
    v57(v69, 1, 1, v53);
    uint64_t v59 = v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
    swift_beginAccess();
    sub_10017FAB4(v58, v59);
    swift_endAccess();
    v57((char *)v58, 1, 1, v53);
    uint64_t v60 = v2 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
    swift_beginAccess();
    sub_10017FAB4(v58, v60);
    swift_endAccess();
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 0;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) == 1)
    {
      *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 0;
      sub_1002B9140(0xD000000000000041, 0x80000001003B5320, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
    }
    sub_100179F68();
  }
}

uint64_t sub_1001786EC(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v8 = *(void *)(a3 + 8 * v7 + 32);
        swift_retain();
      }
      uint64_t v12 = v8;
      char v9 = a1(&v12);
      swift_release();
      if (v3 || (v9 & 1) != 0) {
        break;
      }
      uint64_t v10 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v10 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_100178810(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * v7 + 32);
      char v9 = v8;
      id v13 = v8;
      char v10 = a1(&v13);

      if (v3 || (v10 & 1) != 0) {
        break;
      }
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v11 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t sub_10017892C(unint64_t a1)
{
  return sub_100178944(a1, sub_1000FADE4);
}

uint64_t sub_100178944(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    uint64_t v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      uint64_t v11 = v7 + 8 * a1;
      uint64_t v12 = *(void *)(v11 + 32);
      memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(void *)(v7 + 16) = v9;
      specialized Array._endMutation()();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100178A30(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = sub_1000FADE8((uint64_t)v3);
  }
  unint64_t v4 = *((void *)v3 + 2);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[16 * a1];
      uint64_t v8 = *((void *)v7 + 4);
      memmove(v7 + 32, v7 + 48, 16 * v6);
      *((void *)v3 + 2) = v5;
      void *v1 = v3;
      return v8;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100178B10()
{
  type metadata accessor for DSKSE();
  swift_allocObject();
  uint64_t result = sub_100178B50();
  qword_100468738 = result;
  return result;
}

uint64_t sub_100178B50()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning) = 0;
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, 1, 1, v2);
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue) = _swiftEmptyArrayStorage;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 0;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v6[4] = sub_1001828B0;
  v6[5] = v0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_1002B9D80;
  v6[3] = &unk_100413968;
  unint64_t v4 = _Block_copy(v6);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v4);
  return v0;
}

uint64_t sub_100178D44()
{
  unint64_t v1 = v0;
  unint64_t v2 = 1701736302;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v6) = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress);
  uint64_t v60 = &type metadata for Bool;
  LOBYTE(v59) = v6;
  sub_1000761D0(&v59, v57);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v56 = &_swiftEmptyDictionarySingleton;
  sub_1002C9648(v57, 0xD00000000000001CLL, 0x80000001003B5290, isUniquelyReferenced_nonNull_native);
  unint64_t v9 = v56;
  swift_bridgeObjectRelease();
  char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
  uint64_t v60 = &type metadata for Bool;
  LOBYTE(v59) = v10;
  sub_1000761D0(&v59, v57);
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v56 = v9;
  sub_1002C9648(v57, 0x6E696E6E75527369, 0xE900000000000067, v11);
  uint64_t v61 = (uint64_t)v56;
  swift_bridgeObjectRelease();
  unint64_t v12 = v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
  swift_beginAccess();
  id v13 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v13(v12, 1, v3))
  {
    uint64_t v60 = &type metadata for String;
    unint64_t v14 = 0xE400000000000000;
    uint64_t v15 = 1701736302;
  }
  else
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, v12, v3);
    uint64_t v15 = UUID.uuidString.getter();
    unint64_t v14 = v16;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    uint64_t v60 = &type metadata for String;
    if (!v14)
    {
      unint64_t v14 = 0xE400000000000000;
      uint64_t v15 = 1701736302;
    }
    unint64_t v2 = 1701736302;
  }
  *(void *)&long long v59 = v15;
  *((void *)&v59 + 1) = v14;
  sub_1000761D0(&v59, v57);
  uint64_t v17 = v61;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = v17;
  sub_1002C9648(v57, 0xD000000000000019, 0x80000001003B52B0, v18);
  uint64_t v61 = v55;
  swift_bridgeObjectRelease();
  unint64_t v19 = v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess();
  if (v13(v19, 1, v3))
  {
    uint64_t v60 = &type metadata for String;
LABEL_8:
    unint64_t v20 = 0xE400000000000000;
    uint64_t v21 = 1701736302;
    goto LABEL_10;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v7, v19, v3);
  uint64_t v21 = UUID.uuidString.getter();
  unint64_t v20 = v22;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  uint64_t v60 = &type metadata for String;
  if (!v20) {
    goto LABEL_8;
  }
LABEL_10:
  *(void *)&long long v59 = v21;
  *((void *)&v59 + 1) = v20;
  sub_1000761D0(&v59, v57);
  uint64_t v23 = v61;
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = v23;
  sub_1002C9648(v57, 0x65644972656E776FLL, 0xEF7265696669746ELL, v24);
  uint64_t v25 = v54;
  uint64_t v61 = v54;
  swift_bridgeObjectRelease();
  os_log_type_t v26 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
  swift_beginAccess();
  uint64_t v27 = *v26;
  if ((unint64_t)*v26 >> 62) {
    goto LABEL_23;
  }
  uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v28)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_25:
    uint64_t v60 = (void *)sub_10006C51C(&qword_1004555E0);
    *(void *)&long long v59 = v31;
    sub_1000761D0(&v59, v57);
    char v35 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = v25;
    sub_1002C9648(v57, 0xD000000000000013, 0x80000001003B52E0, v35);
    uint64_t v36 = v53;
    swift_bridgeObjectRelease();
    BOOL v37 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) != 0;
    uint64_t v60 = &type metadata for Bool;
    LOBYTE(v59) = v37;
    sub_1000761D0(&v59, v57);
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = v36;
    sub_1002C9648(v57, 0xD000000000000013, 0x80000001003B5300, v38);
    uint64_t v39 = v53;
    uint64_t v61 = v53;
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
    if (v40)
    {
      BOOL v41 = sub_100052B9C(v40);
      uint64_t v58 = &type metadata for Bool;
      LOBYTE(v57[0]) = v41;
      sub_1000761D0(v57, &v59);
      if (!v60)
      {
        sub_10008E734((uint64_t)&v59, (uint64_t *)&unk_1004556C0);
        sub_10017FC44(0x72656D69546573, 0xE700000000000000, v57);
        sub_10008E734((uint64_t)v57, (uint64_t *)&unk_1004556C0);
        uint64_t v42 = v61;
LABEL_30:
        LOBYTE(v59) = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_state);
        uint64_t v44 = String.init<A>(describing:)();
        uint64_t v60 = &type metadata for String;
        *(void *)&long long v59 = v44;
        *((void *)&v59 + 1) = v45;
        sub_1000761D0(&v59, v57);
        char v46 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v53 = v42;
        sub_1002C9648(v57, 0x6574617473, 0xE500000000000000, v46);
        uint64_t v47 = v53;
        swift_bridgeObjectRelease();
        sub_1002BA7F8(v47);
        swift_bridgeObjectRelease();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        os_log_type_t v49 = sub_1000190DC((uint64_t)"dskse.state", (uint64_t)isa);

        return (uint64_t)v49;
      }
    }
    else
    {
      uint64_t v60 = &type metadata for String;
      *(void *)&long long v59 = v2;
      *((void *)&v59 + 1) = 0xE400000000000000;
    }
    sub_1000761D0(&v59, v57);
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = v39;
    sub_1002C9648(v57, 0x72656D69546573, 0xE700000000000000, v43);
    uint64_t v42 = v53;
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  while (1)
  {
    *(void *)&long long v59 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1002CFA50(0, v28 & ~(v28 >> 63), 0);
    if (v28 < 0) {
      break;
    }
    uint64_t v51 = v25;
    unint64_t v52 = v1;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    uint64_t v31 = (void *)v59;
    unint64_t v2 = v27 & 0xC000000000000001;
    while (v28 != v30)
    {
      if (v2)
      {
        uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v32 = *(void *)(v27 + 8 * v30 + 32);
        swift_retain();
      }
      uint64_t v53 = v32;
      sub_10017F1D8(&v53, v57);
      swift_release();
      unint64_t v1 = v57[0];
      *(void *)&long long v59 = v31;
      unint64_t v34 = v31[2];
      unint64_t v33 = v31[3];
      if (v34 >= v33 >> 1)
      {
        sub_1002CFA50(v33 > 1, v34 + 1, 1);
        uint64_t v31 = (void *)v59;
      }
      ++v30;
      v31[2] = v34 + 1;
      v31[v34 + 4] = v1;
      if (v28 == v30)
      {
        swift_bridgeObjectRelease();
        unint64_t v1 = v52;
        unint64_t v2 = 1701736302;
        uint64_t v25 = v51;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    if (!v28) {
      goto LABEL_24;
    }
  }
  __break(1u);
  return result;
}

void sub_100179500()
{
  uint64_t v1 = v0;
  uint64_t v35 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v33 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v2);
  unint64_t v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4, v5);
  uint64_t v32 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  char v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  char v18 = (char **)((char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_100468A38;
  *char v18 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  id v20 = (id)v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if (v19)
  {
    uint64_t v21 = OBJC_IVAR____TtC10seserviced5DSKSE_isRunning;
    char v22 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
    uint64_t v23 = Logger.logObject.getter();
    if (v22)
    {
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "DSKSE is already running", v25, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v26 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v26, "Starting DSKSE", v27, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v1 + v21) = 1;
      sub_10007582C(0, (unint64_t *)&qword_1004566E0);
      (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchQoS.QoSClass.userInitiated(_:), v7);
      DispatchQoS.init(qosClass:relativePriority:)();
      aBlock[0] = _swiftEmptyArrayStorage;
      sub_1001828B4((unint64_t *)&qword_1004566E8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
      sub_10006C51C(&qword_1004566F0);
      sub_1001828FC();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      (*(void (**)(char *, void, uint64_t))(v33 + 104))(v34, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v35);
      uint64_t v28 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
      id v29 = (NSObject **)objc_allocWithZone((Class)SESTimer);
      aBlock[4] = sub_100182958;
      aBlock[5] = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10007C0C4;
      aBlock[3] = &unk_100413990;
      uint64_t v30 = _Block_copy(aBlock);
      swift_retain();
      uint64_t v31 = sub_100052804(v29, v28, v30);

      _Block_release(v30);
      swift_release();
      uint64_t v23 = *(NSObject **)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
      *(void *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer) = v31;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100179AB0(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Releasing SE by timer", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle);
  *(void *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) = 0;

  uint64_t v10 = type metadata accessor for UUID();
  char v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v5, 1, 1, v10);
  uint64_t v12 = a1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
  swift_beginAccess();
  sub_10017FAB4((uint64_t)v5, v12);
  swift_endAccess();
  v11(v5, 1, 1, v10);
  uint64_t v13 = a1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
  swift_beginAccess();
  sub_10017FAB4((uint64_t)v5, v13);
  swift_endAccess();
  *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 0;
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) == 1)
  {
    *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 0;
    sub_1002B9140(0xD000000000000041, 0x80000001003B5320, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
  }
}

void sub_100179CD8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced5DSKSE_isRunning;
    int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_isRunning);
    char v11 = Logger.logObject.getter();
    if (v10 == 1)
    {
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping DSKSE", v13, 2u);
        swift_slowDealloc();
      }

      uint64_t v14 = (void *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
      swift_beginAccess();
      *uint64_t v14 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease();
      sub_100177D1C(0);
      uint64_t v15 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
      *(void *)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer) = 0;

      *(unsigned char *)(v1 + v9) = 0;
    }
    else
    {
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v16, "DSKSE is not running", v17, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100179F68()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v72 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v74, v6);
  id v8 = (void *)((char *)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = sub_10006C51C(&qword_100455EB0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (uint64_t)v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (uint64_t)v66 - v15;
  uint64_t v17 = (uint64_t *)type metadata accessor for DispatchPredicate();
  uint64_t v18 = (uint64_t *)*(v17 - 1);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (void *)((char *)v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
LABEL_58:
  }
    swift_once();
  uint64_t v22 = qword_100468A38;
  *uint64_t v21 = qword_100468A38;
  ((void (*)(void *, void, uint64_t *))v18[13])(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  ((void (*)(void *, uint64_t *))v18[1])(v21, v17);
  if (v22)
  {
    uint64_t v17 = (uint64_t *)((char *)v1 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
    swift_beginAccess();
    if (!((unint64_t)*v17 >> 62))
    {
      if (!*(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        return;
      }
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v62 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v62) {
    return;
  }
LABEL_5:
  os_log_type_t v24 = (char *)v1 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
  swift_retain();
  uint64_t v70 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v73 = v13;
  if (v27)
  {
    unint64_t v81 = v3;
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 134217984;
    if ((unint64_t)*v17 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((*v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v83[0] = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Trying to process a queued request (pending %ld)", v28, 0xCu);
    swift_slowDealloc();
    uint64_t v3 = v81;
  }
  else
  {
    swift_release();
  }

  switch(*((unsigned char *)v1 + OBJC_IVAR____TtC10seserviced5DSKSE_state))
  {
    case 1:
      uint64_t v2 = *v17;
      if ((unint64_t)*v17 >> 62)
      {
        if (v2 < 0) {
          uint64_t v17 = (uint64_t *)*v17;
        }
        else {
          uint64_t v17 = (uint64_t *)(v2 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain_n();
        uint64_t v18 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
        if (v18) {
          goto LABEL_16;
        }
      }
      else
      {
        uint64_t v18 = *(uint64_t **)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v18)
        {
LABEL_16:
          unint64_t v81 = v2 & 0xC000000000000001;
          uint64_t v16 = 4;
          id v8 = &qword_100454058;
          do
          {
            uint64_t v21 = (void *)(v16 - 4);
            if (v81)
            {
              uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              uint64_t v3 = v16 - 3;
              if (__OFADD__(v21, 1)) {
                goto LABEL_56;
              }
            }
            else
            {
              uint64_t v13 = *(void *)(v2 + 8 * v16);
              swift_retain();
              uint64_t v3 = v16 - 3;
              if (__OFADD__(v21, 1))
              {
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
            }
            uint64_t v33 = v13 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken;
            sub_100170994(v13 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t)v83, &qword_100454058);
            uint64_t v34 = v84;
            sub_10008E734((uint64_t)v83, &qword_100454058);
            if (v34)
            {
              uint64_t v17 = (uint64_t *)v2;
              unint64_t v80 = v33;
              sub_100170994(v33, (uint64_t)v83, &qword_100454058);
              if (!v84)
              {
                __break(1u);
                goto LABEL_75;
              }
              sub_100075908(v83, v84);
              uint64_t v1 = sub_1002749B8;
              type metadata accessor for AlishaSE.HandoffToken();
              char v35 = sub_1002749B8();
              sub_10007594C((uint64_t)v83);
              if (v35)
              {
                swift_bridgeObjectRelease_n();
                swift_retain_n();
                uint64_t v50 = Logger.logObject.getter();
                os_log_type_t v51 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v50, v51))
                {
                  unint64_t v52 = (uint8_t *)swift_slowAlloc();
                  v83[0] = swift_slowAlloc();
                  *(_DWORD *)unint64_t v52 = 136315138;
                  uint64_t v53 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
                  unint64_t v54 = *(void *)(v13 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8);
                  swift_bridgeObjectRetain();
                  uint64_t v82 = sub_100290514(v53, v54, v83);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl((void *)&_mh_execute_header, v50, v51, "Requesting handoff token for %s", v52, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();
                }
                else
                {
                  swift_release_n();
                }

                sub_100170994(v80, (uint64_t)v83, &qword_100454058);
                if (v84)
                {
                  uint64_t v57 = *sub_100075908(v83, v84);
                  id v58 = [self sessionManager];
                  id v59 = [v58 getActiveDCKSessions];

                  sub_10007582C(0, (unint64_t *)&qword_1004568A0);
                  unint64_t v60 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  swift_retain();
                  uint64_t v61 = sub_100182560(v60, v57);
                  swift_bridgeObjectRelease();
                  swift_release();
                  [v61 useSecureElementToken];
                  swift_release();

                  sub_10007594C((uint64_t)v83);
                  return;
                }
LABEL_75:
                __break(1u);
                JUMPOUT(0x10017ACA8);
              }
            }
            swift_release();
            ++v16;
          }
          while ((uint64_t *)v3 != v18);
        }
      }
      swift_bridgeObjectRelease_n();
      return;
    case 2:
      goto LABEL_70;
    case 3:
      uint64_t v13 = *v17;
      if ((unint64_t)*v17 >> 62)
      {
        swift_bridgeObjectRetain_n();
        swift_retain();
        uint64_t v17 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter();
        if (v17) {
          goto LABEL_29;
        }
LABEL_69:
        swift_release();
        swift_bridgeObjectRelease_n();
LABEL_70:
        NSString v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v63, v64))
        {
          unint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v65 = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "No candidate request found for current state", v65, 2u);
          swift_slowDealloc();
        }

        return;
      }
      uint64_t v17 = *(uint64_t **)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      swift_retain();
      if (!v17) {
        goto LABEL_69;
      }
LABEL_29:
      unint64_t v80 = v13 & 0xC000000000000001;
      v66[1] = v1;
      uint64_t v79 = (uint64_t)v1 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
      swift_beginAccess();
      unsigned int v71 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
      long long v78 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
      uint64_t v36 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v3 + 48);
      unint64_t v67 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
      uint64_t v69 = (void (**)(uint64_t, uint64_t))(v3 + 8);
      uint64_t v3 = 4;
      uint64_t v1 = (uint64_t (*)())v74;
      __int16 v75 = v17;
      uint64_t v76 = v13;
      __int16 v77 = v36;
      uint64_t v68 = v8;
      uint64_t v18 = &qword_100455EB0;
      while (1)
      {
        uint64_t v21 = (void *)(v3 - 4);
        if (v80)
        {
          uint64_t v38 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v39 = v3 - 3;
          if (__OFADD__(v21, 1))
          {
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v38 = swift_retain();
          uint64_t v39 = v3 - 3;
          if (__OFADD__(v21, 1)) {
            goto LABEL_57;
          }
        }
        uint64_t v40 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
        unint64_t v81 = v38;
        if (v40)
        {
          (*v71)(v16, v40 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v2);
          uint64_t v41 = 0;
        }
        else
        {
          uint64_t v41 = 1;
        }
        (*v78)(v16, v41, 1, v2);
        uint64_t v42 = (uint64_t)v8 + *((int *)v1 + 12);
        sub_100170994(v16, (uint64_t)v8, &qword_100455EB0);
        sub_100170994(v79, v42, &qword_100455EB0);
        char v43 = *v77;
        if ((*v77)(v8, 1, v2) == 1) {
          break;
        }
        uint64_t v44 = (uint64_t)v8;
        uint64_t v45 = v73;
        sub_100170994(v44, v73, &qword_100455EB0);
        if (v43((uint64_t *)v42, 1, v2) == 1)
        {
          sub_10008E734(v16, &qword_100455EB0);
          (*v69)(v45, v2);
          id v8 = v68;
          uint64_t v13 = v76;
          goto LABEL_31;
        }
        char v46 = v72;
        (*v67)(v72, v42, v2);
        sub_1001828B4((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
        char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v48 = *v69;
        os_log_type_t v49 = v46;
        uint64_t v1 = (uint64_t (*)())v74;
        (*v69)((uint64_t)v49, v2);
        sub_10008E734(v16, &qword_100455EB0);
        v48(v45, v2);
        id v8 = v68;
        sub_10008E734((uint64_t)v68, &qword_100455EB0);
        swift_release();
        uint64_t v13 = v76;
        if (v47)
        {
          swift_release();
          swift_bridgeObjectRelease_n();
          goto LABEL_50;
        }
LABEL_32:
        ++v3;
        uint64_t v17 = v75;
        if ((uint64_t *)v39 == v75) {
          goto LABEL_69;
        }
      }
      sub_10008E734(v16, &qword_100455EB0);
      unsigned int v37 = v43((uint64_t *)v42, 1, v2);
      uint64_t v13 = v76;
      if (v37 != 1)
      {
LABEL_31:
        sub_10008E734((uint64_t)v8, &qword_10045BEE0);
        swift_release();
        goto LABEL_32;
      }
      sub_10008E734((uint64_t)v8, &qword_100455EB0);
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release();
LABEL_50:
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v55, "Processing queued request for owner", v56, 2u);
        swift_slowDealloc();
      }
LABEL_13:

      sub_10017ACB8();
      return;
    default:
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Requesting SE for a queued request", v32, 2u);
        swift_slowDealloc();
      }
      goto LABEL_13;
  }
}

void sub_10017ACB8()
{
  uint64_t v170 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v170, v0);
  uint64_t v171 = (uint64_t)&v159 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = (uint64_t *)type metadata accessor for UUID();
  unint64_t v183 = *(v2 - 1);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v159 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  uint64_t v173 = (char *)&v159 - v8;
  uint64_t v9 = sub_10006C51C(&qword_100455EB0);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  uint64_t v13 = (char *)&v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v11, v14);
  uint64_t v169 = (uint64_t)&v159 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v172 = (uint64_t)&v159 - v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v178 = (uint64_t)&v159 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v177 = (uint64_t)&v159 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  uint64_t v29 = (char *)&v159 - v28;
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (uint64_t)&v159 - v31;
  uint64_t v33 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v35);
  uint64_t v37 = (uint64_t)&v159 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v38 = (void *)qword_100468A38;
  *(void *)uint64_t v37 = qword_100468A38;
  uint32_t v40 = v34 + 104;
  uint64_t v39 = *(void (**)(void))(v34 + 104);
  unsigned int v176 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v175 = (void (*)(uint64_t, void, uint64_t))v39;
  v39(v37);
  id v41 = v38;
  uint64_t v42 = _dispatchPreconditionTest(_:)();
  uint64_t v174 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v174(v37, v33);
  if (v42)
  {
    uint64_t v43 = v182;
    uint64_t v44 = *(void **)(v182 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle);
    if (v44)
    {
      uint64_t v167 = v34 + 104;
      unint64_t v166 = v33;
      uint64_t v168 = v13;
      unint64_t v164 = v6;
      uint64_t v181 = v2;
      uint64_t v45 = v182 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
      uint64_t v165 = v44;
      id v180 = v44;
      uint64_t v179 = v45;
      char v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Already have an SE handle", v48, 2u);
        swift_slowDealloc();
      }

      uint64_t v49 = v182;
      uint64_t v50 = v182 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
      swift_beginAccess();
      sub_100170994(v50, v32, &qword_100455EB0);
      unint64_t v52 = v183 + 48;
      os_log_type_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v183 + 48);
      uint64_t v53 = (uint64_t)v181;
      LODWORD(v50) = v51(v32, 1, v181);
      sub_10008E734(v32, &qword_100455EB0);
      if (v50 == 1
        || (uint64_t v54 = v49 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier,
            swift_beginAccess(),
            sub_100170994(v54, (uint64_t)v29, &qword_100455EB0),
            LODWORD(v54) = v51((uint64_t)v29, 1, (uint64_t *)v53),
            sub_10008E734((uint64_t)v29, &qword_100455EB0),
            v54 == 1)
        || *(unsigned char *)(v49 + OBJC_IVAR____TtC10seserviced5DSKSE_state) != 3)
      {
        NSString v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v63, v64))
        {
          unint64_t v65 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v65 = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "Have SE handle with bad state", v65, 2u);
          swift_slowDealloc();
        }

        sub_100177D1C(0);
        sub_100179F68(v66);
      }
      else
      {
        uint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *))v51;
        unint64_t v163 = v52;
        uint64_t v55 = sub_10017C3FC();
        if (v55)
        {
          uint64_t v56 = v55;
          swift_retain_n();
          uint64_t v57 = Logger.logObject.getter();
          os_log_type_t v58 = static os_log_type_t.info.getter();
          uint64_t v161 = v57;
          if (os_log_type_enabled(v57, v58))
          {
            id v59 = (uint8_t *)swift_slowAlloc();
            v185[0] = swift_slowAlloc();
            *(_DWORD *)id v59 = 136315138;
            uint64_t v60 = *(void *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
            unint64_t v61 = *(void *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8);
            swift_bridgeObjectRetain();
            uint64_t v184 = sub_100290514(v60, v61, v185);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            uint64_t v62 = v161;
            _os_log_impl((void *)&_mh_execute_header, v161, v58, "Got request for \"%s\"", v59, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }
          uint64_t v88 = (uint64_t)v168;
          uint64_t v89 = v178;
          uint64_t v73 = v166;
          os_log_type_t v90 = v162;
          uint64_t v91 = v177;
          if (*(unsigned char *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8)) {
            goto LABEL_43;
          }
          uint64_t v92 = *(void *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
          if ((v92 & 1) == 0)
          {
            if ((v92 & 2) != 0)
            {
              uint64_t v103 = v56 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
              if ((*(unsigned char *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber + 8) & 1) != 0
                || (uint64_t v104 = *(void *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_peer)) == 0
                || *(void *)v103 != *(void *)(v104 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber))
              {
                swift_retain_n();
                uint64_t v105 = Logger.logObject.getter();
                os_log_type_t v106 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v105, v106))
                {
                  uint64_t v107 = -1;
                  uint64_t v108 = swift_slowAlloc();
                  *(_DWORD *)uint64_t v108 = 134218240;
                  uint64_t v109 = *(void *)v103;
                  if (*(unsigned char *)(v103 + 8)) {
                    uint64_t v109 = -1;
                  }
                  v185[0] = v109;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  *(_WORD *)(v108 + 12) = 2048;
                  uint64_t v110 = *(void *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
                  if (v110) {
                    uint64_t v107 = *(void *)(v110 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber);
                  }
                  swift_release();
                  v185[0] = v107;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release();
                  _os_log_impl((void *)&_mh_execute_header, v105, v106, "Got different sequence numbers request %ld current %ld", (uint8_t *)v108, 0x16u);
                  swift_slowDealloc();
                }
                else
                {
                  swift_release_n();
                }
                goto LABEL_85;
              }
            }
            goto LABEL_43;
          }
          uint64_t v177 = v56 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier;
          sub_100170994(v56 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, v91, &qword_100455EB0);
          unsigned int v71 = v181;
          int v100 = v90(v91, 1, v181);
          uint64_t v160 = v56;
          if (v100 == 1)
          {
            uint64_t v101 = &qword_100455EB0;
            uint64_t v102 = v91;
LABEL_74:
            sub_10008E734(v102, v101);
LABEL_75:
            swift_retain_n();
            uint64_t v133 = Logger.logObject.getter();
            os_log_type_t v134 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v133, v134))
            {
              uint64_t v135 = 1819047278;
              uint64_t v136 = swift_slowAlloc();
              uint64_t v186 = swift_slowAlloc();
              *(_DWORD *)uint64_t v136 = 136315394;
              sub_100170994(v177, v88, &qword_100455EB0);
              uint64_t v137 = (uint64_t)v181;
              if (v162(v88, 1, v181) == 1)
              {
                sub_10008E734(v88, &qword_100455EB0);
                unint64_t v138 = 0xE400000000000000;
                uint64_t v139 = 1819047278;
              }
              else
              {
                uint64_t v139 = UUID.uuidString.getter();
                unint64_t v138 = v140;
                (*(void (**)(uint64_t, uint64_t))(v183 + 8))(v88, v137);
              }
              v185[0] = sub_100290514(v139, v138, &v186);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v141 = v160;
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v136 + 12) = 2080;
              uint64_t v142 = *(void *)(v141 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
              if (v142)
              {
                uint64_t v143 = v142 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
                swift_beginAccess();
                unint64_t v144 = v183;
                uint64_t v145 = v164;
                uint64_t v146 = (uint64_t)v181;
                (*(void (**)(char *, uint64_t, uint64_t *))(v183 + 16))(v164, v143, v181);
                uint64_t v135 = UUID.uuidString.getter();
                unint64_t v148 = v147;
                (*(void (**)(char *, uint64_t))(v144 + 8))(v145, v146);
              }
              else
              {
                unint64_t v148 = 0xE400000000000000;
              }
              v185[3] = sub_100290514(v135, v148, &v186);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v133, v134, "Got different connection identifiers request %s current %s", (uint8_t *)v136, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_release_n();
            }

LABEL_85:
            sub_100179F68(v111);

LABEL_86:
            swift_release_n();
            return;
          }
          unint64_t v112 = v183;
          uint64_t v113 = *(NSObject **)(v183 + 32);
          uint64_t v114 = v173;
          unint64_t v166 = v183 + 32;
          uint64_t v161 = v113;
          ((void (*)(char *, uint64_t, uint64_t *))v113)(v173, v91, v71);
          uint64_t v115 = *(void (**)(uint64_t, char *, uint64_t *))(v112 + 16);
          v115(v89, v114, v71);
          uint64_t v116 = v89;
          uint64_t v2 = *(uint64_t **)(v112 + 56);
          uint64_t v72 = 1;
          ((void (*)(uint64_t, void, uint64_t, uint64_t *))v2)(v116, 0, 1, v71);
          uint64_t v117 = *(void *)(v56 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
          if (v117)
          {
            uint64_t v118 = (char *)(v117 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier);
            swift_beginAccess();
            uint64_t v119 = v172;
            v115(v172, v118, v71);
            uint64_t v72 = 0;
          }
          else
          {
LABEL_67:
            uint64_t v119 = v172;
          }
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v2)(v119, v72, 1, v71);
          uint64_t v120 = v171;
          uint64_t v121 = v171 + *(int *)(v170 + 48);
          uint64_t v122 = v119;
          uint64_t v123 = v178;
          sub_100170994(v178, v171, &qword_100455EB0);
          uint64_t v170 = v121;
          sub_100170994(v122, v121, &qword_100455EB0);
          unint64_t v124 = v162;
          unsigned int v125 = v162(v120, 1, v71);
          uint64_t v88 = (uint64_t)v168;
          if (v125 == 1)
          {
            sub_10008E734(v122, &qword_100455EB0);
            sub_10008E734(v123, &qword_100455EB0);
            (*(void (**)(char *, uint64_t *))(v183 + 8))(v173, v71);
            int v126 = v124(v170, 1, v71);
            uint64_t v56 = v160;
            if (v126 == 1)
            {
              sub_10008E734(v120, &qword_100455EB0);
              goto LABEL_43;
            }
          }
          else
          {
            uint64_t v127 = v169;
            sub_100170994(v120, v169, &qword_100455EB0);
            uint64_t v128 = v170;
            int v129 = v124(v170, 1, v71);
            uint64_t v130 = v71;
            uint64_t v131 = v127;
            uint64_t v56 = v160;
            if (v129 != 1)
            {
              id v149 = v164;
              ((void (*)(char *, uint64_t, uint64_t *))v161)(v164, v128, v71);
              sub_1001828B4((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
              LODWORD(v170) = dispatch thunk of static Equatable.== infix(_:_:)();
              unint64_t v150 = *(void (**)(char *, uint64_t *))(v183 + 8);
              v150(v149, v130);
              sub_10008E734(v172, &qword_100455EB0);
              sub_10008E734(v178, &qword_100455EB0);
              v150(v173, v130);
              v150((char *)v131, v130);
              uint64_t v88 = (uint64_t)v168;
              sub_10008E734(v120, &qword_100455EB0);
              if ((v170 & 1) == 0) {
                goto LABEL_75;
              }
LABEL_43:
              uint64_t v93 = qword_100468A38;
              *(void *)uint64_t v37 = qword_100468A38;
              v175(v37, v176, v73);
              id v94 = (id)v93;
              LOBYTE(v93) = _dispatchPreconditionTest(_:)();
              v174(v37, v73);
              if (v93)
              {
                uint64_t v95 = *(void **)(v182 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
                if (v95)
                {
                  id v96 = v95;
                  if (sub_100052B9C((BOOL)v96)) {
                    sub_100052B14((uint64_t)v96);
                  }
                }
                int v97 = *(void (**)(void *, void))(v56 + 32);
                id v98 = v180;
                swift_retain();
                v97(v165, 0);
                swift_release();

                if (*(unsigned char *)(v56 + 24)) {
                  sub_100177D1C(0);
                }
                else {
                  sub_10017D794(*(double *)(v56 + 16));
                }
                sub_100179F68(v99);

                goto LABEL_86;
              }
              __break(1u);
LABEL_94:
              __break(1u);
              goto LABEL_95;
            }
            sub_10008E734(v172, &qword_100455EB0);
            sub_10008E734(v178, &qword_100455EB0);
            uint64_t v132 = *(void (**)(char *, uint64_t *))(v183 + 8);
            v132(v173, v71);
            v132((char *)v131, v71);
          }
          uint64_t v101 = &qword_10045BEE0;
          uint64_t v102 = v120;
          goto LABEL_74;
        }
      }

      return;
    }
    uint32_t v40 = arc4random();
    uint64_t v42 = v43 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
    unint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v2 = (uint64_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v2 = 67109120;
      LODWORD(aBlock[0]) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Requesting SE identifier %u", (uint8_t *)v2, 8u);
      swift_slowDealloc();
    }

    uint64_t v69 = (uint64_t *)(v182 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue);
    swift_beginAccess();
    uint64_t v32 = *v69;
    if (!((unint64_t)*v69 >> 62))
    {
      uint64_t v70 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v70) {
        goto LABEL_21;
      }
      goto LABEL_91;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain_n();
  uint64_t v70 = _CocoaArrayWrapper.endIndex.getter();
  if (v70)
  {
LABEL_21:
    uint64_t v179 = v42;
    LODWORD(v180) = v40;
    unint64_t v183 = v32 & 0xC000000000000001;
    uint64_t v37 = 4;
    unsigned int v71 = (uint64_t *)&off_1004177C8;
    while (1)
    {
      uint64_t v72 = v37 - 4;
      if (v183)
      {
        uint64_t v73 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v74 = v37 - 3;
        if (__OFADD__(v72, 1)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v73 = *(void *)(v32 + 8 * v37);
        swift_retain();
        uint64_t v74 = v37 - 3;
        if (__OFADD__(v72, 1))
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
      }
      uint64_t v2 = (uint64_t *)(v73 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken);
      sub_100170994(v73 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t)aBlock, &qword_100454058);
      __int16 v75 = v188;
      sub_10008E734((uint64_t)aBlock, &qword_100454058);
      if (v75)
      {
        uint64_t v181 = v2;
        uint64_t v76 = (uint64_t)v2;
        uint64_t v2 = &qword_100454058;
        sub_100170994(v76, (uint64_t)aBlock, &qword_100454058);
        if (!v188) {
          goto LABEL_94;
        }
        sub_100075908(aBlock, (uint64_t)v188);
        type metadata accessor for AlishaSE.HandoffToken();
        char v77 = sub_1002749B8();
        sub_10007594C((uint64_t)aBlock);
        if (v77) {
          break;
        }
      }
      swift_release();
      ++v37;
      if (v74 == v70)
      {
        swift_bridgeObjectRelease_n();
LABEL_38:
        uint32_t v40 = v180;
        goto LABEL_92;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_retain_n();
    long long v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v78, v79))
    {
      unint64_t v80 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v80 = 136315138;
      uint64_t v81 = *(void *)(v73 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
      unint64_t v82 = *(void *)(v73 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8);
      swift_bridgeObjectRetain();
      v185[0] = sub_100290514(v81, v82, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Requesting handoff token for %s", v80, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_100170994((uint64_t)v181, (uint64_t)aBlock, &qword_100454058);
    if (v188)
    {
      uint64_t v83 = *sub_100075908(aBlock, (uint64_t)v188);
      id v84 = [self sessionManager];
      id v85 = [v84 getActiveDCKSessions];

      sub_10007582C(0, (unint64_t *)&qword_1004568A0);
      unint64_t v86 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      swift_retain();
      uint64_t v87 = sub_100182560(v86, v83);
      swift_bridgeObjectRelease();
      swift_release();
      [v87 useSecureElementToken];
      swift_release();

      sub_10007594C((uint64_t)aBlock);
      goto LABEL_38;
    }
LABEL_95:
    __break(1u);
    return;
  }
LABEL_91:
  swift_bridgeObjectRelease_n();
LABEL_92:
  uint64_t v151 = v182;
  *(unsigned char *)(v182 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 1;
  Class v152 = (void *)qword_100468A38;
  uint64_t v153 = swift_allocObject();
  *(void *)(v153 + 16) = v151;
  *(_DWORD *)(v153 + 24) = v40;
  uint64_t v154 = self;
  swift_retain();
  NSString v155 = String._bridgeToObjectiveC()();
  unint64_t v156 = (void *)swift_allocObject();
  v156[2] = v152;
  v156[3] = sub_10018279C;
  v156[4] = v153;
  uint64_t v189 = sub_1001827EC;
  uint64_t v190 = v156;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100118B5C;
  uint64_t v188 = &unk_100413940;
  uint64_t v157 = _Block_copy(aBlock);
  id v158 = v152;
  swift_retain();
  swift_release();
  sub_100058540(v154, v155, v157);
  _Block_release(v157);
  swift_release();
}

uint64_t sub_10017C3FC()
{
  uint64_t v0 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v0 - 8, v1);
  uint64_t v3 = (uint64_t)&v111 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (uint64_t *)((char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_159;
  }
  while (2)
  {
    uint64_t v14 = qword_100468A38;
    *uint64_t v13 = qword_100468A38;
    (*(void (**)(void *, void, unint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
    id v15 = (id)v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)();
    uint64_t v16 = *(void (**)(void *, unint64_t))(v10 + 8);
    v10 += 8;
    v16(v13, v9);
    if ((v14 & 1) == 0)
    {
      __break(1u);
LABEL_161:
      swift_bridgeObjectRetain();
      uint64_t v99 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v99) {
        return 0;
      }
      goto LABEL_5;
    }
    uint64_t v10 = v121 + OBJC_IVAR____TtC10seserviced5DSKSE_pendingRequestQueue;
    swift_beginAccess();
    if (*(void *)v10 >> 62) {
      goto LABEL_161;
    }
    if (!*(void *)((*(void *)v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      return 0;
    }
LABEL_5:
    uint64_t v17 = v121 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
    swift_beginAccess();
    sub_100170994(v17, v3, &qword_100455EB0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
    {
      uint64_t v92 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v3, v4);
      unint64_t v93 = *(void *)v10;
      __chkstk_darwin(v92, v94);
      *(&v111 - 2) = (uint64_t)v8;
      swift_bridgeObjectRetain();
      unint64_t v95 = sub_1001786EC(sub_100182810, (uint64_t)(&v111 - 4), v93);
      char v97 = v96;
      swift_bridgeObjectRelease();
      if ((v97 & 1) == 0)
      {
        swift_beginAccess();
        uint64_t v98 = sub_100178944(v95, sub_1000FADE4);
        swift_endAccess();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        return v98;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      return 0;
    }
    sub_10008E734(v3, &qword_100455EB0);
    unint64_t v9 = *(void *)v10;
    if (*(void *)v10 >> 62) {
      goto LABEL_165;
    }
    uint64_t v18 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v18)
    {
LABEL_142:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(void *)v10;
      if (!(*(void *)v10 >> 62))
      {
        unint64_t v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (v9) {
          goto LABEL_144;
        }
LABEL_180:
        swift_bridgeObjectRelease_n();
        uint64_t v90 = 0;
LABEL_181:
        swift_retain();
        unint64_t v100 = swift_bridgeObjectRetain();
        unint64_t v101 = sub_100181FB0(v100, v90);
        char v103 = v102;
        swift_bridgeObjectRelease();
        swift_release();
        if ((v103 & 1) == 0)
        {
          swift_beginAccess();
          uint64_t v98 = sub_100178944(v101, sub_1000FADE4);
          swift_endAccess();
          swift_release();
          return v98;
        }
        uint64_t v104 = Logger.logObject.getter();
        os_log_type_t v105 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v104, v105))
        {
          os_log_type_t v106 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v106 = 0;
          _os_log_impl((void *)&_mh_execute_header, v104, v105, "Should never get here", v106, 2u);
          swift_slowDealloc();
        }

        swift_release();
        return 0;
      }
LABEL_179:
      swift_bridgeObjectRetain_n();
      unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        goto LABEL_180;
      }
LABEL_144:
      uint64_t v4 = v3 & 0xC000000000000001;
      if ((v3 & 0xC000000000000001) == 0)
      {
        if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v90 = *(void *)(v3 + 32);
          swift_retain();
          unint64_t v91 = v9 - 1;
          if (v9 == 1)
          {
LABEL_147:
            swift_bridgeObjectRelease_n();
            goto LABEL_181;
          }
LABEL_195:
          if ((uint64_t)v9 >= 2)
          {
            if (v4 || (unint64_t v108 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10), v108 >= 2) && v91 < v108)
            {
              uint64_t v109 = 0;
              do
              {
                if (v4) {
                  uint64_t v110 = specialized _ArrayBuffer._getElementSlowPath(_:)();
                }
                else {
                  uint64_t v110 = swift_retain();
                }
                if (*(unsigned __int8 *)(v90 + OBJC_IVAR____TtC10seserviced9SERequest_priority) < *(unsigned __int8 *)(v110 + OBJC_IVAR____TtC10seserviced9SERequest_priority)) {
                  uint64_t v90 = v110;
                }
                swift_release();
                ++v109;
              }
              while (v91 != v109);
              goto LABEL_147;
            }
LABEL_208:
            __break(1u);
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_208;
      }
LABEL_194:
      uint64_t v90 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v91 = v9 - 1;
      if (v9 == 1) {
        goto LABEL_147;
      }
      goto LABEL_195;
    }
LABEL_8:
    unint64_t v19 = 0;
    unint64_t v118 = v9 & 0xC000000000000001;
    unint64_t v112 = v9 + 32;
    uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
    uint64_t v114 = v10;
    unint64_t v113 = v9;
    uint64_t v116 = v18;
    while (1)
    {
      unint64_t v120 = v19;
      if (v118)
      {
        uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v21 = *(void *)(v112 + 8 * v19);
        swift_retain();
      }
      uint64_t v22 = v21 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken;
      sub_100170994(v21 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t)v134, &qword_100454058);
      uint64_t v23 = v135;
      sub_10008E734((uint64_t)v134, &qword_100454058);
      if (!v23)
      {
        swift_release();
        goto LABEL_140;
      }
      uint64_t v119 = v21;
      sub_100170994(v22, (uint64_t)v134, &qword_100454058);
      if (!v135)
      {
        __break(1u);
LABEL_210:
        __DataStorage._length.getter();
        __break(1u);
LABEL_211:
        __break(1u);
LABEL_212:
        __DataStorage._length.getter();
        __break(1u);
LABEL_213:
        __break(1u);
LABEL_214:
        __break(1u);
LABEL_215:
        __break(1u);
LABEL_216:
        __break(1u);
LABEL_217:
        __break(1u);
LABEL_218:
        __break(1u);
LABEL_219:
        __break(1u);
LABEL_220:
        __break(1u);
LABEL_221:
        __break(1u);
LABEL_222:
        __break(1u);
LABEL_223:
        __break(1u);
        JUMPOUT(0x10017D764);
      }
      uint64_t v125 = *sub_100075908(v134, v135);
      id v24 = [self sessionManager];
      uint64_t v3 = (uint64_t)[v24 getActiveDCKSessions];

      sub_10007582C(0, (unint64_t *)&qword_1004568A0);
      unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v9 >> 62))
      {
        uint64_t v4 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v4) {
          break;
        }
        goto LABEL_139;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v4) {
        break;
      }
LABEL_139:
      swift_bridgeObjectRelease_n();
      sub_10007594C((uint64_t)v134);
      swift_release();
      uint64_t v10 = v114;
      unint64_t v9 = v113;
LABEL_140:
      unint64_t v19 = v120 + 1;
      if (__OFADD__(v120, 1))
      {
        __break(1u);
LABEL_164:
        __break(1u);
LABEL_165:
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        if (!v18) {
          goto LABEL_142;
        }
        goto LABEL_8;
      }
      if (v19 == v116) {
        goto LABEL_142;
      }
    }
    unint64_t v123 = v9;
    unint64_t v124 = v9 & 0xC000000000000001;
    uint64_t v10 = 4;
    uint64_t v122 = v4;
LABEL_21:
    uint64_t v8 = (char *)(v10 - 4);
    if (v124) {
      uint64_t v25 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v25 = *(id *)(v9 + 8 * v10);
    }
    uint64_t v13 = v25;
    uint64_t v5 = v10 - 3;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      swift_once();
      continue;
    }
    break;
  }
  id v26 = [v25 v20[240]];
  if (!v26)
  {
    uint64_t v32 = *(void *)(v125 + 16);
    uint64_t v3 = *(void *)(v125 + 24);
    sub_10006D0EC(v32, v3);
    sub_100075868(0, 0xF000000000000000);
    sub_100075868(v32, v3);
    goto LABEL_19;
  }
  uint64_t v27 = v26;
  id v28 = [v26 publicKeyIdentifier];

  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v30 = v29;

  uint64_t v31 = *(void *)(v125 + 16);
  unint64_t v9 = *(void *)(v125 + 24);
  uint64_t v8 = (char *)(v30 >> 62);
  uint64_t v3 = 0;
  switch(v30 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_155;
      }
      uint64_t v3 = HIDWORD(v4) - (int)v4;
LABEL_32:
      sub_10006D0EC(v4, v30);
      break;
    case 2uLL:
      uint64_t v34 = *(void *)(v4 + 16);
      uint64_t v33 = *(void *)(v4 + 24);
      uint64_t v3 = v33 - v34;
      if (!__OFSUB__(v33, v34)) {
        goto LABEL_32;
      }
      goto LABEL_156;
    case 3uLL:
      break;
    default:
      uint64_t v3 = BYTE6(v30);
      break;
  }
  int v126 = v13;
  uint64_t v13 = (void *)(v9 >> 62);
  switch(v9 >> 62)
  {
    case 1uLL:
      LODWORD(v35) = HIDWORD(v31) - v31;
      if (__OFSUB__(HIDWORD(v31), v31)) {
        goto LABEL_157;
      }
      uint64_t v35 = (int)v35;
LABEL_38:
      if (v3 != v35)
      {
LABEL_18:
        sub_10006D144(v4, v30);
        sub_10006D144(v4, v30);
        unint64_t v9 = v123;
        uint64_t v4 = v122;
        uint64_t v13 = v126;
LABEL_19:

        goto LABEL_20;
      }
      if (v3 < 1)
      {
LABEL_151:
        sub_10006D144(v4, v30);
        sub_10006D144(v4, v30);
        swift_bridgeObjectRelease_n();

        goto LABEL_153;
      }
      break;
    case 2uLL:
      uint64_t v37 = *(void *)(v31 + 16);
      uint64_t v36 = *(void *)(v31 + 24);
      BOOL v38 = __OFSUB__(v36, v37);
      uint64_t v35 = v36 - v37;
      if (!v38) {
        goto LABEL_38;
      }
      goto LABEL_158;
    case 3uLL:
      if (v3) {
        goto LABEL_18;
      }
      goto LABEL_151;
    default:
      uint64_t v35 = BYTE6(v9);
      goto LABEL_38;
  }
  switch((int)v8)
  {
    case 1:
      if ((int)v4 > v4 >> 32) {
        goto LABEL_164;
      }
      uint64_t v3 = v30 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10006D0EC(v31, v9);
      uint64_t v44 = (char *)__DataStorage._bytes.getter();
      if (!v44) {
        goto LABEL_52;
      }
      uint64_t v45 = __DataStorage._offset.getter();
      if (__OFSUB__((int)v4, v45)) {
        goto LABEL_168;
      }
      v44 += (int)v4 - v45;
LABEL_52:
      __DataStorage._length.getter();
      uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
      if (!v13)
      {
        __s1[0] = v31;
        LOWORD(__s1[1]) = v9;
        BYTE2(__s1[1]) = BYTE2(v9);
        BYTE3(__s1[1]) = BYTE3(v9);
        BYTE4(__s1[1]) = BYTE4(v9);
        BYTE5(__s1[1]) = BYTE5(v9);
        if (!v44) {
          goto LABEL_220;
        }
        int v51 = memcmp(v44, __s1, BYTE6(v9));
        goto LABEL_133;
      }
      uint64_t v117 = (uint64_t)v44;
      if (v13 == 1)
      {
        if (v31 >> 32 < (int)v31) {
          goto LABEL_177;
        }
        uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        char v46 = (char *)__DataStorage._bytes.getter();
        if (v46)
        {
          uint64_t v47 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v31, v47)) {
            goto LABEL_193;
          }
          v46 += (int)v31 - v47;
        }
        uint64_t v48 = (const void *)v117;
        uint64_t v49 = __DataStorage._length.getter();
        if (v49 >= (v31 >> 32) - (int)v31) {
          size_t v50 = (v31 >> 32) - (int)v31;
        }
        else {
          size_t v50 = v49;
        }
        if (!v48) {
          goto LABEL_223;
        }
        uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
        if (!v46) {
          goto LABEL_211;
        }
        int v51 = memcmp(v48, v46, v50);
        sub_10006D144(v31, v9);
        goto LABEL_133;
      }
      uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v84 = *(void *)(v31 + 16);
      uint64_t v115 = *(char **)(v31 + 24);
      swift_retain();
      swift_retain();
      uint64_t v85 = __DataStorage._bytes.getter();
      if (v85)
      {
        uint64_t v86 = __DataStorage._offset.getter();
        if (__OFSUB__(v84, v86)) {
          goto LABEL_192;
        }
        v85 += v84 - v86;
      }
      uint64_t v87 = &v115[-v84];
      if (__OFSUB__(v115, v84)) {
        goto LABEL_178;
      }
      uint64_t v88 = __DataStorage._length.getter();
      if (v88 >= (uint64_t)v87) {
        uint64_t v89 = v87;
      }
      else {
        uint64_t v89 = (char *)v88;
      }
      uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
      uint64_t v74 = (void *)v117;
      if (!v117) {
        goto LABEL_221;
      }
      if (!v85) {
        goto LABEL_222;
      }
      size_t v73 = (size_t)v89;
      __int16 v75 = (const void *)v85;
      goto LABEL_131;
    case 2:
      uint64_t v3 = v30 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v52 = *(void *)(v4 + 16);
      sub_10006D0EC(v31, v9);
      swift_retain();
      swift_retain();
      uint64_t v53 = __DataStorage._bytes.getter();
      uint64_t v117 = v30 & 0x3FFFFFFFFFFFFFFFLL;
      if (v53)
      {
        uint64_t v54 = v53;
        uint64_t v55 = __DataStorage._offset.getter();
        if (__OFSUB__(v52, v55))
        {
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
          goto LABEL_179;
        }
        uint64_t v115 = (char *)(v54 + v52 - v55);
      }
      else
      {
        uint64_t v115 = 0;
      }
      uint64_t v3 = v117;
      __DataStorage._length.getter();
      uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
      if (!v13)
      {
        __s1[0] = v31;
        LOWORD(__s1[1]) = v9;
        BYTE2(__s1[1]) = BYTE2(v9);
        BYTE3(__s1[1]) = BYTE3(v9);
        BYTE4(__s1[1]) = BYTE4(v9);
        BYTE5(__s1[1]) = BYTE5(v9);
        if (!v115) {
          goto LABEL_217;
        }
        int v51 = memcmp(v115, __s1, BYTE6(v9));
        swift_release();
LABEL_132:
        swift_release();
LABEL_133:
        sub_10006D144(v31, v9);
LABEL_134:
        sub_10006D144(v4, v30);
        sub_10006D144(v4, v30);

LABEL_135:
        unint64_t v9 = v123;
        uint64_t v4 = v122;
        if (!v51) {
          goto LABEL_152;
        }
LABEL_20:
        ++v10;
        if (v5 == v4) {
          goto LABEL_139;
        }
        goto LABEL_21;
      }
      if (v13 == 1)
      {
        if (v31 >> 32 < (int)v31) {
          goto LABEL_171;
        }
        uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        swift_retain();
        uint64_t v60 = (char *)__DataStorage._bytes.getter();
        if (v60)
        {
          uint64_t v61 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v31, v61)) {
            goto LABEL_191;
          }
          v60 += (int)v31 - v61;
        }
        uint64_t v62 = __DataStorage._length.getter();
        if (v62 >= (v31 >> 32) - (int)v31) {
          size_t v63 = (v31 >> 32) - (int)v31;
        }
        else {
          size_t v63 = v62;
        }
        if (!v115) {
          goto LABEL_213;
        }
        uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
        if (!v60) {
          goto LABEL_214;
        }
        uint64_t v3 = memcmp(v115, v60, v63);
        sub_10006D144(v31, v9);
        swift_release();
        swift_release();
        sub_10006D144(v31, v9);
        sub_10006D144(v4, v30);
        sub_10006D144(v4, v30);

        unint64_t v9 = v123;
        uint64_t v4 = v122;
        if (!v3) {
          goto LABEL_152;
        }
        goto LABEL_20;
      }
      uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v77 = *(void *)(v31 + 16);
      uint64_t v76 = *(void *)(v31 + 24);
      swift_retain();
      swift_retain();
      long long v78 = (char *)__DataStorage._bytes.getter();
      if (v78)
      {
        uint64_t v79 = __DataStorage._offset.getter();
        if (__OFSUB__(v77, v79)) {
          goto LABEL_190;
        }
        v78 += v77 - v79;
      }
      BOOL v38 = __OFSUB__(v76, v77);
      int64_t v80 = v76 - v77;
      if (v38) {
        goto LABEL_176;
      }
      uint64_t v81 = __DataStorage._length.getter();
      if (v81 >= v80) {
        size_t v82 = v80;
      }
      else {
        size_t v82 = v81;
      }
      uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
      if (!v115) {
        goto LABEL_218;
      }
      if (!v78) {
        goto LABEL_219;
      }
      int v83 = memcmp(v115, v78, v82);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_10006D144(v31, v9);
      sub_10006D144(v4, v30);
      sub_10006D144(v4, v30);

      unint64_t v9 = v123;
      uint64_t v4 = v122;
      if (v83) {
        goto LABEL_20;
      }
LABEL_152:
      swift_bridgeObjectRelease_n();
LABEL_153:
      sub_10007594C((uint64_t)v134);
      swift_release();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v98 = sub_100178944(v120, sub_1000FADE4);
      swift_endAccess();
      return v98;
    case 3:
      memset(__s1, 0, 14);
      if (!v13) {
        goto LABEL_76;
      }
      if (v13 == 1)
      {
        uint64_t v39 = (v31 >> 32) - (int)v31;
        if (v31 >> 32 < (int)v31) {
          goto LABEL_170;
        }
        uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        sub_10006D0EC(v31, v9);
        uint64_t v56 = __DataStorage._bytes.getter();
        if (!v56) {
          goto LABEL_212;
        }
        uint64_t v41 = v56;
        uint64_t v57 = __DataStorage._offset.getter();
        uint64_t v43 = (int)v31 - v57;
        if (__OFSUB__((int)v31, v57)) {
          goto LABEL_175;
        }
        goto LABEL_72;
      }
      uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v70 = *(void *)(v31 + 16);
      uint64_t v71 = *(void *)(v31 + 24);
      sub_10006D0EC(v31, v9);
      swift_retain();
      swift_retain();
      uint64_t v66 = __DataStorage._bytes.getter();
      if (v66)
      {
        uint64_t v72 = __DataStorage._offset.getter();
        if (__OFSUB__(v70, v72)) {
          goto LABEL_189;
        }
        v66 += v70 - v72;
      }
      BOOL v38 = __OFSUB__(v71, v70);
      int64_t v68 = v71 - v70;
      if (v38) {
        goto LABEL_173;
      }
      uint64_t v69 = __DataStorage._length.getter();
      uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
      if (!v66) {
        goto LABEL_216;
      }
      goto LABEL_102;
    default:
      __s1[0] = v4;
      LOWORD(__s1[1]) = v30;
      BYTE2(__s1[1]) = BYTE2(v30);
      BYTE3(__s1[1]) = BYTE3(v30);
      BYTE4(__s1[1]) = BYTE4(v30);
      BYTE5(__s1[1]) = BYTE5(v30);
      if (!v13)
      {
LABEL_76:
        uint64_t __s2 = v31;
        __int16 v128 = v9;
        char v129 = BYTE2(v9);
        char v130 = BYTE3(v9);
        char v131 = BYTE4(v9);
        char v132 = BYTE5(v9);
        int v51 = memcmp(__s1, &__s2, BYTE6(v9));
        goto LABEL_134;
      }
      if (v13 == 1)
      {
        uint64_t v39 = (v31 >> 32) - (int)v31;
        if (v31 >> 32 < (int)v31) {
          goto LABEL_169;
        }
        uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
        sub_10006D0EC(v31, v9);
        uint64_t v40 = __DataStorage._bytes.getter();
        if (!v40) {
          goto LABEL_210;
        }
        uint64_t v41 = v40;
        uint64_t v42 = __DataStorage._offset.getter();
        uint64_t v43 = (int)v31 - v42;
        if (__OFSUB__((int)v31, v42)) {
          goto LABEL_174;
        }
LABEL_72:
        uint64_t v58 = __DataStorage._length.getter();
        if (v58 >= v39) {
          size_t v59 = v39;
        }
        else {
          size_t v59 = v58;
        }
        int v51 = memcmp(__s1, (const void *)(v41 + v43), v59);
        sub_10006D144(v31, v9);
        sub_10006D144(v4, v30);
        sub_10006D144(v4, v30);

        uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
        goto LABEL_135;
      }
      uint64_t v3 = v9 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v64 = *(void *)(v31 + 16);
      uint64_t v65 = *(void *)(v31 + 24);
      sub_10006D0EC(v31, v9);
      swift_retain();
      swift_retain();
      uint64_t v66 = __DataStorage._bytes.getter();
      if (v66)
      {
        uint64_t v67 = __DataStorage._offset.getter();
        if (__OFSUB__(v64, v67))
        {
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        v66 += v64 - v67;
      }
      BOOL v38 = __OFSUB__(v65, v64);
      int64_t v68 = v65 - v64;
      if (v38) {
        goto LABEL_172;
      }
      uint64_t v69 = __DataStorage._length.getter();
      uint64_t v20 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
      if (!v66) {
        goto LABEL_215;
      }
LABEL_102:
      if (v69 >= v68) {
        size_t v73 = v68;
      }
      else {
        size_t v73 = v69;
      }
      uint64_t v74 = __s1;
      __int16 v75 = (const void *)v66;
LABEL_131:
      int v51 = memcmp(v74, v75, v73);
      swift_release();
      goto LABEL_132;
  }
}

void sub_10017D794(double a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  uint64_t v9 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v11 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t v12 = *(void (**)(void *, uint64_t))(v4 + 8);
  v12(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v13 = (void *)qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  v10(v7, v9, v3);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)();
  v12(v7, v3);
  if ((v15 & 1) == 0)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v16 = OBJC_IVAR____TtC10seserviced5DSKSE_seTimer;
  uint64_t v17 = *(void **)(v1 + OBJC_IVAR____TtC10seserviced5DSKSE_seTimer);
  if (v17)
  {
    id v18 = v17;
    if (sub_100052B9C((BOOL)v18)) {
      sub_100052B14((uint64_t)v18);
    }

    uint64_t v19 = *(void *)(v1 + v16);
    if (v19) {
      sub_1000529D8(v19, a1);
    }
  }
}

void sub_10017D978(void *a1, char a2, uint64_t a3, int a4)
{
  uint64_t v166 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v166, v8);
  uint64_t v167 = (uint64_t)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_100455EB0);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v170 = (char *)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v165 = (uint64_t)&v153 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v163 = (uint64_t)&v153 - v19;
  uint64_t v21 = __chkstk_darwin(v18, v20);
  uint64_t v168 = (uint64_t)&v153 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v173 = (uint64_t)&v153 - v25;
  __chkstk_darwin(v24, v26);
  uint64_t v172 = (uint64_t)&v153 - v27;
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v171 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28, v29);
  unint64_t v164 = (char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  uint64_t v169 = (char *)&v153 - v33;
  uint64_t v34 = type metadata accessor for DispatchPredicate();
  uint64_t v35 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v36);
  BOOL v38 = (uint64_t *)((char *)&v153 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v39 = (void *)qword_100468A38;
  *BOOL v38 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v35 + 104))(v38, enum case for DispatchPredicate.onQueue(_:), v34);
  id v40 = v39;
  char v41 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v35 + 8))(v38, v34);
  if ((v41 & 1) == 0)
  {
    __break(1u);
LABEL_69:
    __break(1u);
    return;
  }
  uint64_t v42 = OBJC_IVAR____TtC10seserviced5DSKSE_state;
  *(unsigned char *)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_state) = 2;
  uint64_t v43 = a3 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
  if (a2)
  {
    sub_100182830(a1, 1);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = swift_slowAlloc();
      v177[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 67109378;
      LODWORD(v174) = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v63 + 8) = 2080;
      swift_getErrorValue();
      uint64_t v64 = Error.localizedDescription.getter();
      uint64_t v174 = sub_100290514(v64, v65, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10018283C(a1, 1);
      sub_10018283C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to get SE %u error %s", (uint8_t *)v63, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10018283C(a1, 1);
      sub_10018283C(a1, 1);
    }
    *(unsigned char *)(a3 + v42) = 0;
    ((void (*)(void))sub_100179F68)();
    uint64_t v66 = a1;
    char v67 = 1;
    goto LABEL_67;
  }
  uint64_t v161 = v28;
  id v160 = a1;
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v44, v45))
  {
    char v46 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v46 = 67109120;
    LODWORD(v177[0]) = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Got SE identifier %u", v46, 8u);
    swift_slowDealloc();
  }

  uint64_t v47 = sub_10017C3FC();
  if (v47)
  {
    uint64_t v48 = v47;
    swift_retain_n();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    BOOL v51 = os_log_type_enabled(v49, v50);
    uint64_t v162 = a1;
    if (v51)
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v159 = v43;
      uint64_t v53 = (uint8_t *)v52;
      v177[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v53 = 136315138;
      id v158 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))(v53 + 4);
      uint64_t v54 = (uint64_t *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
      uint64_t v55 = v48;
      uint64_t v56 = v42;
      uint64_t v57 = a3;
      uint64_t v59 = *v54;
      unint64_t v58 = v54[1];
      swift_bridgeObjectRetain();
      uint64_t v60 = v59;
      a3 = v57;
      uint64_t v42 = v56;
      uint64_t v48 = v55;
      uint64_t v174 = sub_100290514(v60, v58, v177);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Got request for \"%s\"", v53, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v43 = v159;
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    uint64_t v72 = v172;
    uint64_t v71 = v173;
    if (*(unsigned char *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) != 1)
    {
      int64_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      BOOL v82 = os_log_type_enabled(v80, v81);
      int v83 = v162;
      if (v82)
      {
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 0;
        _os_log_impl((void *)&_mh_execute_header, v80, v81, "First APDU of session is not SELECT", v84, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(a3 + v42) = 0;
      uint64_t v85 = *(void (**)(void, uint64_t))(v48 + 32);
      swift_retain();
      v85(0, 1);
      uint64_t v86 = swift_release();
      sub_100179F68(v86);
      swift_release_n();
      uint64_t v66 = v83;
      goto LABEL_66;
    }
    if (*(unsigned char *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8)) {
      goto LABEL_20;
    }
    uint64_t v87 = *(void *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
    if ((v87 & 1) == 0)
    {
      if ((v87 & 2) != 0)
      {
        uint64_t v88 = v48 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
        if ((*(unsigned char *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber + 8) & 1) != 0
          || (uint64_t v89 = *(void *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_peer)) == 0
          || *(void *)v88 != *(void *)(v89 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber))
        {
          swift_retain_n();
          uint64_t v90 = Logger.logObject.getter();
          os_log_type_t v91 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v90, v91))
          {
            uint64_t v92 = -1;
            uint64_t v93 = swift_slowAlloc();
            *(_DWORD *)uint64_t v93 = 134218240;
            uint64_t v94 = *(void *)v88;
            if (*(unsigned char *)(v88 + 8)) {
              uint64_t v94 = -1;
            }
            v177[0] = v94;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v93 + 12) = 2048;
            uint64_t v95 = *(void *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
            if (v95) {
              uint64_t v92 = *(void *)(v95 + OBJC_IVAR____TtC10seserviced4Peer_sequenceNumber);
            }
            char v96 = v162;
            swift_release();
            v177[0] = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v90, v91, "Got different sequence numbers request %ld current %ld", (uint8_t *)v93, 0x16u);
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
            char v96 = v162;
          }

          *(unsigned char *)(a3 + v42) = 0;
          sub_100179F68(v119);
          swift_release_n();
          uint64_t v66 = v96;
          goto LABEL_66;
        }
      }
      goto LABEL_20;
    }
    uint64_t v155 = v48 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier;
    sub_100170994(v48 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, v172, &qword_100455EB0);
    uint64_t v107 = (void *)v171;
    uint64_t v108 = v161;
    id v158 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48);
    unsigned int v109 = v158(v72, 1, v161);
    uint64_t v156 = a3;
    uint64_t v157 = v48;
    if (v109 == 1)
    {
      sub_10008E734(v72, &qword_100455EB0);
LABEL_56:
      swift_retain_n();
      uint64_t v133 = Logger.logObject.getter();
      os_log_type_t v134 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v133, v134))
      {
        uint64_t v135 = 1819047278;
        uint64_t v136 = swift_slowAlloc();
        uint64_t v176 = swift_slowAlloc();
        *(_DWORD *)uint64_t v136 = 136315394;
        uint64_t v137 = v165;
        sub_100170994(v155, v165, &qword_100455EB0);
        uint64_t v138 = v161;
        if (v158(v137, 1, v161) == 1)
        {
          sub_10008E734(v137, &qword_100455EB0);
          unint64_t v139 = 0xE400000000000000;
          uint64_t v140 = 1819047278;
        }
        else
        {
          uint64_t v140 = UUID.uuidString.getter();
          unint64_t v139 = v143;
          (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v137, v138);
        }
        v177[0] = sub_100290514(v140, v139, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v144 = v157;
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v136 + 12) = 2080;
        uint64_t v145 = *(void *)(v144 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
        if (v145)
        {
          uint64_t v146 = v145 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
          swift_beginAccess();
          uint64_t v147 = v171;
          unint64_t v148 = v164;
          uint64_t v149 = v146;
          uint64_t v150 = v161;
          (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v164, v149, v161);
          uint64_t v135 = UUID.uuidString.getter();
          unint64_t v152 = v151;
          (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v150);
        }
        else
        {
          unint64_t v152 = 0xE400000000000000;
        }
        uint64_t v142 = v162;
        uint64_t v175 = sub_100290514(v135, v152, &v176);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v133, v134, "Got different connection identifiers request %s current %s", (uint8_t *)v136, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        a3 = v156;
      }
      else
      {
        swift_release_n();

        uint64_t v142 = v162;
      }
      *(unsigned char *)(a3 + v42) = 0;
      sub_100179F68(v141);
      swift_release_n();
      uint64_t v66 = v142;
      goto LABEL_66;
    }
    uint64_t v159 = v43;
    uint64_t v110 = (void (*)(char *, uint64_t, uint64_t))v107[4];
    uint64_t v111 = v169;
    uint64_t v172 = (uint64_t)(v107 + 4);
    uint64_t v154 = v110;
    v110(v169, v72, v108);
    unint64_t v112 = (void (*)(uint64_t, char *, uint64_t))v107[2];
    v112(v71, v111, v108);
    unint64_t v113 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v107[7];
    uint64_t v114 = v71;
    uint64_t v115 = 1;
    v113(v114, 0, 1, v108);
    uint64_t v116 = *(void *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (v116)
    {
      uint64_t v117 = (char *)(v116 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier);
      swift_beginAccess();
      uint64_t v118 = v168;
      v112(v168, v117, v108);
      uint64_t v115 = 0;
    }
    else
    {
      uint64_t v118 = v168;
    }
    v113(v118, v115, 1, v108);
    uint64_t v120 = v167;
    uint64_t v121 = v167 + *(int *)(v166 + 48);
    uint64_t v122 = v173;
    sub_100170994(v173, v167, &qword_100455EB0);
    sub_100170994(v118, v121, &qword_100455EB0);
    unint64_t v123 = v158;
    BOOL v124 = v158(v120, 1, v108) == 1;
    a3 = v156;
    uint64_t v125 = v108;
    uint64_t v126 = v118;
    uint64_t v48 = v157;
    if (v124)
    {
      sub_10008E734(v126, &qword_100455EB0);
      sub_10008E734(v122, &qword_100455EB0);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v169, v108);
      if (v123(v121, 1, v108) != 1)
      {
LABEL_54:
        sub_10008E734(v120, &qword_10045BEE0);
        goto LABEL_56;
      }
      sub_10008E734(v120, &qword_100455EB0);
    }
    else
    {
      uint64_t v127 = v163;
      sub_100170994(v120, v163, &qword_100455EB0);
      unsigned int v128 = v123(v121, 1, v125);
      if (v128 == 1)
      {
        sub_10008E734(v168, &qword_100455EB0);
        sub_10008E734(v173, &qword_100455EB0);
        char v129 = *(void (**)(char *, uint64_t))(v171 + 8);
        v129(v169, v125);
        v129((char *)v127, v125);
        goto LABEL_54;
      }
      char v130 = v164;
      v154(v164, v121, v125);
      sub_1001828B4((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      LODWORD(v172) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v131 = v127;
      char v132 = *(void (**)(char *, uint64_t))(v171 + 8);
      v132(v130, v125);
      sub_10008E734(v168, &qword_100455EB0);
      sub_10008E734(v173, &qword_100455EB0);
      v132(v169, v125);
      v132((char *)v131, v125);
      sub_10008E734(v167, &qword_100455EB0);
      if ((v172 & 1) == 0) {
        goto LABEL_56;
      }
    }
LABEL_20:
    uint64_t v73 = OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress;
    *(unsigned char *)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_expressTransactionInProgress) = 1;
    sub_1002B9140(0xD000000000000042, 0x80000001003B5390, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
    uint64_t v74 = *(void (**)(void *, void))(v48 + 32);
    __int16 v75 = v162;
    sub_100182830(v162, 0);
    swift_retain();
    v74(v75, 0);
    sub_10018283C(v75, 0);
    swift_release();
    if (*(unsigned char *)(v48 + 24))
    {
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v76, v77))
      {
        long long v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v78 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Releasing the SE", v78, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(a3 + v73) = 0;
      sub_1002B9140(0xD000000000000041, 0x80000001003B5320, 0, 0xF000000000000000, 0, 0xF000000000000000, 0);
      *(unsigned char *)(a3 + v42) = 0;
      goto LABEL_40;
    }
    uint64_t v97 = *(void *)(v48 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
    if (v97)
    {
      double v98 = *(double *)(v48 + 16);
      uint64_t v100 = (uint64_t)v170;
      uint64_t v99 = v171;
      uint64_t v101 = v161;
      (*(void (**)(char *, uint64_t, uint64_t))(v171 + 16))(v170, v97 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v161);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v99 + 56))(v100, 0, 1, v101);
      uint64_t v102 = a3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier;
      swift_beginAccess();
      sub_10017FAB4(v100, v102);
      swift_endAccess();
      uint64_t v103 = v48 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier;
      uint64_t v104 = a3 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier;
      swift_beginAccess();
      sub_100182848(v103, v104);
      swift_endAccess();
      os_log_type_t v105 = *(void **)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle);
      *(void *)(a3 + OBJC_IVAR____TtC10seserviced5DSKSE_secureElementHandle) = v75;
      id v106 = v160;

      *(unsigned char *)(a3 + v42) = 3;
      sub_10017D794(v98);
LABEL_40:
      sub_100179F68(v79);
      swift_release_n();
      uint64_t v66 = v75;
LABEL_66:
      char v67 = 0;
LABEL_67:
      sub_10018283C(v66, v67);
      return;
    }
    goto LABEL_69;
  }
  int64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Got SE but no request", v70, 2u);
    swift_slowDealloc();
  }
  sub_10018283C(a1, 0);

  *(unsigned char *)(a3 + v42) = 0;
}

uint64_t sub_10017ED60(void *a1, uint64_t a2)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v34 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v7, v8);
  uint64_t v37 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_100455EB0);
  uint64_t v12 = __chkstk_darwin(v10 - 8, v11);
  uint64_t v35 = (uint64_t)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15, v18);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = *(void *)(*a1 + OBJC_IVAR____TtC10seserviced9SERequest_peer);
  if (v21)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v22((char *)&v34 - v19, v21 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v3);
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v23(v20, 0, 1, v3);
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v23((char *)&v34 - v19, 1, 1, v3);
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  }
  v22(v17, v36, v3);
  v23(v17, 0, 1, v3);
  uint64_t v24 = v37;
  uint64_t v25 = v37 + *(int *)(v7 + 48);
  sub_100170994((uint64_t)v20, v37, &qword_100455EB0);
  sub_100170994((uint64_t)v17, v25, &qword_100455EB0);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26(v24, 1, v3) == 1)
  {
    sub_10008E734((uint64_t)v17, &qword_100455EB0);
    sub_10008E734((uint64_t)v20, &qword_100455EB0);
    int v27 = v26(v25, 1, v3);
    if (v27 == 1) {
      uint64_t v28 = &qword_100455EB0;
    }
    else {
      uint64_t v28 = &qword_10045BEE0;
    }
    if (v27 == 1) {
      char v29 = -1;
    }
    else {
      char v29 = 0;
    }
  }
  else
  {
    uint64_t v30 = v35;
    sub_100170994(v24, v35, &qword_100455EB0);
    if (v26(v25, 1, v3) == 1)
    {
      sub_10008E734((uint64_t)v17, &qword_100455EB0);
      sub_10008E734((uint64_t)v20, &qword_100455EB0);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v30, v3);
      char v29 = 0;
      uint64_t v28 = &qword_10045BEE0;
    }
    else
    {
      uint64_t v31 = v34;
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v34, v25, v3);
      sub_1001828B4((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v4 + 8);
      v32(v31, v3);
      uint64_t v28 = &qword_100455EB0;
      sub_10008E734((uint64_t)v17, &qword_100455EB0);
      sub_10008E734((uint64_t)v20, &qword_100455EB0);
      v32((char *)v30, v3);
    }
  }
  sub_10008E734(v24, v28);
  return v29 & 1;
}

unint64_t sub_10017F1D8@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378480;
  *(void *)(inited + 32) = 0xD000000000000011;
  *(void *)(inited + 40) = 0x80000001003B53F0;
  char v10 = *(unsigned char *)(v8 + 24);
  *(void *)&long long v28 = *(void *)(v8 + 16);
  BYTE8(v28) = v10;
  *(void *)(inited + 48) = String.init<A>(describing:)();
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = 0x80000001003B41C0;
  sub_100170994(v8 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, (uint64_t)v7, &qword_100455EB0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, v12) == 1)
  {
    sub_10008E734((uint64_t)v7, &qword_100455EB0);
    uint64_t v14 = (uint64_t *)(inited + 96);
    *(void *)(inited + 120) = &type metadata for String;
  }
  else
  {
    int v27 = a2;
    uint64_t v15 = UUID.uuidString.getter();
    unint64_t v17 = v16;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v12);
    uint64_t v14 = (uint64_t *)(inited + 96);
    *(void *)(inited + 120) = &type metadata for String;
    if (v17)
    {
      *uint64_t v14 = v15;
      a2 = v27;
      goto LABEL_7;
    }
    a2 = v27;
  }
  *uint64_t v14 = 1701736302;
  unint64_t v17 = 0xE400000000000000;
LABEL_7:
  *(void *)(inited + 104) = v17;
  strcpy((char *)(inited + 128), "handoffToken");
  *(unsigned char *)(inited + 141) = 0;
  *(_WORD *)(inited + 142) = -5120;
  sub_100170994(v8 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, (uint64_t)&v28, &qword_100454058);
  BOOL v18 = v29 != 0;
  sub_10008E734((uint64_t)&v28, &qword_100454058);
  *(unsigned char *)(inited + 144) = v18;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(void *)(inited + 176) = 0xD000000000000010;
  *(void *)(inited + 184) = 0x80000001003B5410;
  *(unsigned char *)(inited + 192) = *(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting);
  *(void *)(inited + 216) = &type metadata for Bool;
  *(void *)(inited + 224) = 1919247728;
  *(void *)(inited + 232) = 0xE400000000000000;
  if (*(void *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_peer))
  {
    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v21 = (uint64_t *)(inited + 240);
    *(void *)(inited + 264) = &type metadata for String;
    if (v20)
    {
      *uint64_t v21 = v19;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v21 = (uint64_t *)(inited + 240);
    *(void *)(inited + 264) = &type metadata for String;
  }
  *uint64_t v21 = 1701736302;
  unint64_t v20 = 0xE400000000000000;
LABEL_12:
  *(void *)(inited + 248) = v20;
  *(void *)(inited + 272) = 0x797469726F697270;
  *(void *)(inited + 280) = 0xE800000000000000;
  *(unsigned char *)(inited + 288) = *(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_priority);
  *(void *)(inited + 312) = &type metadata for SERequest.Priority;
  *(void *)(inited + 320) = 0x6E6F73616572;
  *(void *)(inited + 328) = 0xE600000000000000;
  uint64_t v22 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_reason + 8);
  *(void *)(inited + 336) = *(void *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
  *(void *)(inited + 344) = v22;
  *(void *)(inited + 360) = &type metadata for String;
  strcpy((char *)(inited + 368), "sequenceNumber");
  *(unsigned char *)(inited + 383) = -18;
  if (*(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber + 8))
  {
    *(void *)(inited + 408) = &type metadata for String;
    *(void *)(inited + 384) = 1701736302;
    *(void *)(inited + 392) = 0xE400000000000000;
  }
  else
  {
    uint64_t v23 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber);
    char v29 = &type metadata for Int;
    *(void *)&long long v28 = v23;
    sub_1000761D0(&v28, (_OWORD *)(inited + 384));
  }
  swift_bridgeObjectRetain();
  strcpy((char *)(inited + 416), "sessionChecks");
  *(_WORD *)(inited + 430) = -4864;
  char v24 = *(unsigned char *)(v8 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8);
  *(void *)(inited + 456) = &type metadata for Bool;
  *(unsigned char *)(inited + 432) = (v24 & 1) == 0;
  unint64_t result = sub_1001DB224(inited);
  *a2 = result;
  return result;
}

uint64_t sub_10017F644()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced5DSKSE_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10008E734(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerConnectionIdentifier, &qword_100455EB0);
  sub_10008E734(v0 + OBJC_IVAR____TtC10seserviced5DSKSE_ownerIdentifier, &qword_100455EB0);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10017F744()
{
  return type metadata accessor for DSKSE();
}

uint64_t type metadata accessor for DSKSE()
{
  uint64_t result = qword_1004567C0;
  if (!qword_1004567C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10017F798()
{
  type metadata accessor for Logger();
  if (v0 <= 0x3F)
  {
    sub_10017F890();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_10017F890()
{
  if (!qword_1004567D0)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1004567D0);
    }
  }
}

ValueMetadata *type metadata accessor for SEError()
{
  return &type metadata for SEError;
}

unsigned char *_s10seserviced7SEErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10017F9CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKSE.State()
{
  return &type metadata for DSKSE.State;
}

unint64_t sub_10017FA08()
{
  unint64_t result = qword_100456890;
  if (!qword_100456890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456890);
  }
  return result;
}

unint64_t sub_10017FA60()
{
  unint64_t result = qword_100456898;
  if (!qword_100456898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456898);
  }
  return result;
}

uint64_t sub_10017FAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10017FB1C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1002C09FC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002CBE70();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 24 * v4);
  sub_100180554(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_10017FC44@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1002C0AD0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002CC478();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    sub_1000761D0((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    sub_100180BFC(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10017FD48(uint64_t a1, uint64_t a2)
{
  return sub_100180260(a1, a2, (void (*)(void))sub_1002CC660);
}

double sub_10017FD60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1002C0BAC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002CC66C();
      uint64_t v11 = v13;
    }
    sub_10006D144(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
    sub_10010197C((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    sub_100180DD4(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10017FE6C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002C0BAC(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002CCBF4();
    uint64_t v9 = v12;
  }
  sub_10006D144(*(void *)(*(void *)(v9 + 48) + 16 * v6), *(void *)(*(void *)(v9 + 48) + 16 * v6 + 8));
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_100180FC8(v6, v9);
  *int v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_10017FF3C(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002C0AD0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *int v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002CCDA8();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  sub_1001811B0(v6, v9);
  *int v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

double sub_10018000C@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1002C09FC(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *int v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002CCF60();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    *a2 = *(_OWORD *)(*(void *)(v9 + 56) + 16 * v6);
    sub_100181388(v6, v9);
    *int v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = xmmword_100378280;
  }
  return result;
}

uint64_t sub_100180118(int a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1002C0D48(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002CD23C();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_100181680(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001801B0(int a1)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1002C0D48(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  unint64_t v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002CD248();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  sub_100181680(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100180248(uint64_t a1, uint64_t a2)
{
  return sub_100180260(a1, a2, (void (*)(void))sub_1002CDDC8);
}

uint64_t sub_100180260(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  unint64_t v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1002C0BAC(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v5;
  uint64_t v14 = *v5;
  *unint64_t v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    uint64_t v11 = v14;
  }
  sub_10006D144(*(void *)(*(void *)(v11 + 48) + 16 * v8), *(void *)(*(void *)(v11 + 48) + 16 * v8 + 8));
  uint64_t v12 = *(void *)(*(void *)(v11 + 56) + 8 * v8);
  sub_100180FC8(v8, v11);
  *unint64_t v5 = v11;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_100180340(uint64_t a1, uint64_t a2)
{
  return sub_100180260(a1, a2, (void (*)(void))sub_1002CDDD4);
}

uint64_t sub_100180358(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1002C09FC(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 3;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002CDF90();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 + 56) + v4);
  sub_100181824(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_100180450(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1002C09FC(a1);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v1;
    uint64_t v13 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002CE220();
      uint64_t v8 = v13;
    }
    uint64_t v9 = *(void *)(v8 + 48);
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
    int v11 = *(unsigned __int16 *)(*(void *)(v8 + 56) + 2 * v4);
    sub_100181B1C(v4, v8);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
    int v11 = 0;
  }
  return v11 & 0xFFFEFFFF | (((v6 & 1) == 0) << 16);
}

unint64_t sub_100180554(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      unint64_t v37 = (result + 1) & v13;
      BOOL v38 = v14;
      uint64_t v15 = *(void *)(v5 + 72);
      uint64_t v39 = v5 + 16;
      uint64_t v36 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v16 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v15;
        int64_t v19 = v15 * v12;
        uint64_t v20 = v16;
        v38(v9, *(void *)(a2 + 48) + v15 * v12, v4);
        sub_1001828B4((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v36)(v9, v4);
        uint64_t v16 = v20;
        unint64_t v22 = v21 & v20;
        if (a1 >= (uint64_t)v37)
        {
          if (v22 >= v37 && a1 >= (uint64_t)v22)
          {
LABEL_16:
            uint64_t v25 = *(void *)(a2 + 48);
            unint64_t result = v25 + v18 * a1;
            uint64_t v10 = v17;
            if (v18 * a1 < v19 || (uint64_t v15 = v18, result >= v25 + v19 + v18))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
LABEL_21:
              uint64_t v15 = v18;
              uint64_t v16 = v20;
            }
            else if (v18 * a1 != v19)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = v26 + 24 * a1;
            long long v28 = (long long *)(v26 + 24 * v12);
            if (a1 != v12 || (a1 = v12, v27 >= (unint64_t)v28 + 24))
            {
              long long v29 = *v28;
              *(void *)(v27 + 16) = *((void *)v28 + 2);
              *(_OWORD *)unint64_t v27 = v29;
              a1 = v12;
            }
            goto LABEL_5;
          }
        }
        else if (v22 >= v37 || a1 >= (uint64_t)v22)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
        uint64_t v15 = v18;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v16;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100180870(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v11 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        unint64_t result = Hasher._finalize()();
        unint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          unint64_t v17 = v16 + 40 * v3;
          uint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *int64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  BOOL v23 = __OFSUB__(v22, 1);
  uint64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100180A40(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::UInt v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          unint64_t v12 = (void *)(v11 + 8 * v3);
          uint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *unint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100180BFC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100180DD4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v11 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        unint64_t v13 = v11[1];
        Hasher.init(_seed:)();
        sub_10006D0EC(v12, v13);
        Data.hash(into:)();
        Swift::Int v14 = Hasher._finalize()();
        unint64_t result = sub_10006D144(v12, v13);
        unint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          uint64_t v16 = *(void *)(a2 + 48);
          unint64_t v17 = (_OWORD *)(v16 + 16 * v3);
          uint64_t v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1) {
            _OWORD *v17 = *v18;
          }
          uint64_t v19 = *(void *)(a2 + 56);
          unint64_t v20 = v19 + 40 * v3;
          uint64_t v21 = (long long *)(v19 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            long long v9 = *v21;
            long long v10 = v21[1];
            *(void *)(v20 + 32) = *((void *)v21 + 4);
            *(_OWORD *)unint64_t v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *BOOL v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100180FC8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        unint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        sub_10006D0EC(v10, v11);
        Data.hash(into:)();
        Swift::Int v12 = Hasher._finalize()();
        unint64_t result = sub_10006D144(v10, v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *unint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1001811B0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v9 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          Swift::Int v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *Swift::Int v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          unint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  uint64_t *v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100181388(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v6);
  Swift::Int v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v35 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v13 = v35;
    if ((*(void *)(v35 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v32 = (result + 1) & v12;
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v34 = v5 + 16;
      uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = *(void *)(v5 + 72);
      do
      {
        uint64_t v16 = v15;
        int64_t v17 = v15 * v11;
        v33(v9, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1001828B4((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v14)(v9, v4);
        unint64_t v19 = v18 & v12;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            uint64_t v15 = v16;
            unint64_t result = v22 + v16 * a1;
            if (v16 * a1 < v17 || result >= v22 + v17 + v16)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            BOOL v24 = (_OWORD *)(v23 + 16 * a1);
            uint64_t v25 = (_OWORD *)(v23 + 16 * v11);
            uint64_t v13 = v35;
            if (a1 != v11 || (a1 = v11, v24 >= v25 + 1))
            {
              *BOOL v24 = *v25;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        uint64_t v13 = v35;
        uint64_t v15 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v13 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v26 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *BOOL v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100181680(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (_DWORD *)(v9 + 4 * v6);
        unint64_t result = static Hasher._hash(seed:bytes:count:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (_DWORD *)(v9 + 4 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            int64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100181824(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v35 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v13 = v35;
    if ((*(void *)(v35 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v32 = (result + 1) & v12;
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v34 = v5 + 16;
      uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = *(void *)(v5 + 72);
      do
      {
        uint64_t v16 = v15;
        int64_t v17 = v15 * v11;
        v33(v9, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1001828B4((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v14)(v9, v4);
        unint64_t v19 = v18 & v12;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            uint64_t v15 = v16;
            unint64_t result = v22 + v16 * a1;
            if (v16 * a1 < v17 || result >= v22 + v17 + v16)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            BOOL v24 = (unsigned char *)(v23 + a1);
            uint64_t v25 = (unsigned char *)(v23 + v11);
            uint64_t v13 = v35;
            if (a1 != v11 || (a1 = v11, v24 >= v25 + 1))
            {
              *BOOL v24 = *v25;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        uint64_t v13 = v35;
        uint64_t v15 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v13 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v26 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *BOOL v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100181B1C(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    uint64_t v35 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v13 = v35;
    if ((*(void *)(v35 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v32 = (result + 1) & v12;
      uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v34 = v5 + 16;
      uint64_t v14 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v15 = *(void *)(v5 + 72);
      do
      {
        uint64_t v16 = v15;
        int64_t v17 = v15 * v11;
        v33(v9, *(void *)(a2 + 48) + v15 * v11, v4);
        sub_1001828B4((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v14)(v9, v4);
        unint64_t v19 = v18 & v12;
        if (a1 >= (uint64_t)v32)
        {
          if (v19 >= v32 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            uint64_t v22 = *(void *)(a2 + 48);
            uint64_t v15 = v16;
            unint64_t result = v22 + v16 * a1;
            if (v16 * a1 < v17 || result >= v22 + v17 + v16)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v16 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            BOOL v24 = (_WORD *)(v23 + 2 * a1);
            uint64_t v25 = (_WORD *)(v23 + 2 * v11);
            uint64_t v13 = v35;
            if (a1 != v11 || (a1 = v11, v24 >= v25 + 1))
            {
              *BOOL v24 = *v25;
              a1 = v11;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v32 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        uint64_t v13 = v35;
        uint64_t v15 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v13 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    BOOL v26 = (uint64_t *)(v13 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << a1) - 1;
  }
  else
  {
    BOOL v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << a1) - 1;
  }
  *BOOL v26 = v28 & v27;
  uint64_t v29 = *(void *)(a2 + 16);
  BOOL v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_100181E14(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (_WORD *)(v9 + 2 * v6);
        unint64_t result = static Hasher._hash(seed:bytes:count:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (_WORD *)(v9 + 2 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            int64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_100181FB0(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v6 = *(void *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      swift_release();
      if (a2 && v6 == a2) {
        break;
      }
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v8 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

uint64_t sub_1001820A8(uint64_t *a1)
{
  unint64_t v2 = *a1;
  if ((unint64_t)*a1 >> 62) {
    goto LABEL_66;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    unint64_t v10 = *a1;
    if (v10 >> 62) {
      goto LABEL_74;
    }
    return *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
LABEL_3:
  unint64_t v4 = 0;
  while (1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v5 = *(void *)(v2 + 8 * v4 + 32);
      swift_retain();
    }
    if (!*(void *)(v5 + OBJC_IVAR____TtC10seserviced9SERequest_peer)
      || (swift_retain(),
          swift_retain(),
          char v6 = static UUID.== infix(_:_:)(),
          swift_release(),
          swift_release(),
          (v6 & 1) == 0))
    {
      swift_release();
      goto LABEL_13;
    }
    uint64_t v7 = *(void *)(v5 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
    char v8 = *(unsigned char *)(v5 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8);
    swift_release();
    if (v8 & 1) == 0 && (v7) {
      break;
    }
LABEL_13:
    unint64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      swift_bridgeObjectRetain();
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
      if (!v3) {
        goto LABEL_15;
      }
      goto LABEL_3;
    }
    ++v4;
    if (v9 == v3) {
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else if (!((unint64_t)*a1 >> 62))
  {
    if (v12 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_21;
    }
    return v4;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v12 == v29) {
    return v4;
  }
LABEL_21:
  unint64_t v13 = v4 + 5;
  while (2)
  {
    unint64_t v2 = v13 - 4;
    uint64_t v14 = *a1;
    if ((*a1 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      if ((v2 & 0x8000000000000000) != 0) {
        goto LABEL_62;
      }
      if (v2 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_63;
      }
      uint64_t v15 = *(void *)(v14 + 8 * v13);
      swift_retain();
    }
    if (!*(void *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_peer)
      || (swift_retain(),
          swift_retain(),
          char v16 = static UUID.== infix(_:_:)(),
          swift_release(),
          swift_release(),
          (v16 & 1) == 0))
    {
      swift_release();
      if (v2 != v4) {
        goto LABEL_33;
      }
      goto LABEL_51;
    }
    uint64_t v17 = *(void *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks);
    char v18 = *(unsigned char *)(v15 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks + 8);
    swift_release();
    if (v18 & 1) == 0 && (v17)
    {
LABEL_52:
      unint64_t v26 = v13 - 3;
      if (__OFADD__(v2, 1)) {
        goto LABEL_64;
      }
      if ((unint64_t)*a1 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v27 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v13;
      if (v26 == v27) {
        return v4;
      }
      continue;
    }
    break;
  }
  if (v2 == v4) {
    goto LABEL_51;
  }
LABEL_33:
  uint64_t v19 = *a1;
  if ((*a1 & 0xC000000000000001) != 0)
  {
    uint64_t v20 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v19 = *a1;
    if ((*a1 & 0xC000000000000001) == 0) {
      goto LABEL_37;
    }
    goto LABEL_60;
  }
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v4 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_69;
    }
    uint64_t v20 = *(void *)(v19 + 8 * v4 + 32);
    swift_retain();
    if ((v19 & 0xC000000000000001) == 0)
    {
LABEL_37:
      if ((v2 & 0x8000000000000000) != 0) {
        goto LABEL_70;
      }
      if (v2 >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_71;
      }
      uint64_t v21 = *(void *)(v19 + 8 * v13);
      swift_retain();
LABEL_40:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v19;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v19 < 0 || (v19 & 0x4000000000000000) != 0)
      {
        uint64_t v19 = sub_1000FADE4(v19);
        *a1 = v19;
      }
      *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 8 * v4 + 0x20) = v21;
      swift_release();
      specialized Array._endMutation()();
      uint64_t v23 = *a1;
      int v24 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *a1 = v23;
      if (!v24 || v23 < 0 || (v23 & 0x4000000000000000) != 0)
      {
        uint64_t v23 = sub_1000FADE4(v23);
        *a1 = v23;
      }
      if ((v2 & 0x8000000000000000) != 0) {
        goto LABEL_72;
      }
      if (v2 >= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_73;
      }
      *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 8 * v13) = v20;
      swift_release();
      specialized Array._endMutation()();
LABEL_51:
      if (__OFADD__(v4++, 1)) {
        goto LABEL_65;
      }
      goto LABEL_52;
    }
LABEL_60:
    uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v19 = *a1;
    goto LABEL_40;
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v28;
}

void *sub_100182560(unint64_t a1, uint64_t a2)
{
  unint64_t v2 = a1;
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v22 = v3;
    unint64_t v23 = v2 & 0xC000000000000001;
    uint64_t v4 = 4;
    while (1)
    {
      id v7 = v23 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v2 + 8 * v4);
      char v8 = v7;
      uint64_t v9 = v4 - 3;
      if (__OFADD__(v4 - 4, 1)) {
        break;
      }
      id v10 = [v7 activeEndpoint];
      if (v10)
      {
        unint64_t v11 = v10;
        unint64_t v12 = v2;
        id v13 = [v10 publicKeyIdentifier];

        uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v16 = v15;

        uint64_t v17 = *(void *)(a2 + 16);
        unint64_t v18 = *(void *)(a2 + 24);
        sub_10006D0EC(v17, v18);
        sub_10006D0EC(v14, v16);
        char v19 = sub_100088AE4(v14, v16, v17, v18);
        uint64_t v20 = v17;
        unint64_t v2 = v12;
        sub_10006D144(v20, v18);
        sub_10006D144(v14, v16);
        sub_10006D144(v14, v16);
        if (v19)
        {
          swift_bridgeObjectRelease();
          return v8;
        }
      }
      else
      {
        uint64_t v5 = *(void *)(a2 + 16);
        unint64_t v6 = *(void *)(a2 + 24);
        sub_10006D0EC(v5, v6);
        sub_100075868(0, 0xF000000000000000);
        sub_100075868(v5, v6);
      }

      ++v4;
      if (v9 == v22) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
  }
LABEL_16:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100182764()
{
  swift_release();

  return _swift_deallocObject(v0, 28, 7);
}

void sub_10018279C(void *a1, char a2)
{
  sub_10017D978(a1, a2 & 1, *(void *)(v2 + 16), *(_DWORD *)(v2 + 24));
}

uint64_t sub_1001827AC()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001827EC(void *a1, uint64_t a2)
{
  return sub_100121D38(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1001827F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100182808()
{
  return swift_release();
}

uint64_t sub_100182810(void *a1)
{
  return sub_10017ED60(a1, *(void *)(v1 + 16)) & 1;
}

id sub_100182830(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void sub_10018283C(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100182848(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001828B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001828FC()
{
  unint64_t result = qword_1004566F8;
  if (!qword_1004566F8)
  {
    sub_10006D220(&qword_1004566F0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004566F8);
  }
  return result;
}

void sub_100182958()
{
  sub_100179AB0(v0);
}

uint64_t sub_100182970(uint64_t a1)
{
  if (a1 < 0) {
    return 0;
  }
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100182A64);
      }
      uint64_t v5 = (int)v5;
LABEL_7:
      if (v5 < a1) {
        return 0;
      }
LABEL_8:
      sub_10006D0EC(*(void *)v1, *(void *)(v1 + 8));
      sub_10023CC58(a1, v2, v3, (uint64_t *)&v11);
      uint64_t v9 = v11;
      sub_100081790(a1, v2, v3, (uint64_t *)&v11);
      *(_OWORD *)uint64_t v1 = v11;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v2 + 16);
      uint64_t v6 = *(void *)(v2 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_7;
      }
      goto LABEL_13;
    case 3uLL:
      if (a1) {
        return 0;
      }
      goto LABEL_8;
    default:
      uint64_t v5 = BYTE6(v3);
      goto LABEL_7;
  }
  return v9;
}

uint64_t sub_100182A74()
{
  uint64_t result = sub_10011FE64(0xD000000000000014, 0x80000001003B5480);
  if (v1 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    qword_100468740 = result;
    *(void *)algn_100468748 = v1;
  }
  return result;
}

uint64_t sub_100182AC0(void *a1)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = sub_100056638(a1, isa);

  if (v3)
  {
    swift_willThrow();
  }
  else
  {
    uint64_t v5 = sub_100088F40((uint64_t)&off_10040E660);
    unint64_t v7 = v6;
    Class v8 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v5, v7);
    id v14 = 0;
    uint64_t v9 = (id *)sub_100056104(a1, v8, &v14);

    if (v9)
    {
      id v10 = v14;
      long long v11 = sub_10005D558(v9);

      uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      return v4;
    }
    id v13 = v14;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  return 0;
}

void *sub_100182C50(void *a1)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v4 = sub_100056638(a1, isa);

  if (!v4)
  {
    uint64_t v31 = sub_100259D9C(0, 16, 0, _swiftEmptyArrayStorage);
    uint64_t v5 = 0;
    uint64_t v36 = sub_100088F40((uint64_t)&off_10040E968);
    unint64_t v37 = v6;
    while (1)
    {
      Data._Representation.subscript.setter();
      uint64_t v12 = v36;
      unint64_t v11 = v37;
      sub_10006D0EC(v36, v37);
      Class v13 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v12, v11);
      id v34 = 0;
      id v14 = (id *)sub_10005603C(a1, (uint64_t)v13, &v34);

      if (!v14) {
        break;
      }
      id v15 = v34;
      int v16 = sub_10005D5A8((uint64_t)v14);
      if (v16 == 36864)
      {
        uint64_t v17 = sub_10005D558(v14);
        unint64_t v18 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        sub_100222D90((uint64_t)&v38);
        id v34 = v18;
        uint64_t v35 = v20;
        sub_10006D0EC((uint64_t)v18, v20);
        unint64_t v21 = sub_100188FB0((uint64_t)&v34, &v38);
        if (v1)
        {
          sub_10006D144((uint64_t)v34, v35);
          sub_10006D144((uint64_t)v18, v20);
          sub_10016FB80(&v39, &v44);
          sub_10016FBDC((uint64_t)&v44);
          uint64_t v33 = v40;
          sub_10016FC34((uint64_t)&v33);

          sub_10006D144(v12, v11);
          swift_bridgeObjectRelease();
          return v31;
        }
        unint64_t v22 = v21;
        sub_10006D144((uint64_t)v34, v35);
        sub_10016FB80(&v39, &v43);
        sub_10016FBDC((uint64_t)&v43);
        uint64_t v32 = v40;
        sub_10016FC34((uint64_t)&v32);
        sub_100222F18(v22, (unint64_t)v41);
        sub_10006D144((uint64_t)v18, v20);
        sub_1001830F4((uint64_t *)v41, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
        unint64_t v23 = v31;
        unint64_t v25 = v31[2];
        unint64_t v24 = v31[3];
        if (v25 >= v24 >> 1) {
          unint64_t v23 = sub_100259D9C((void *)(v24 > 1), v25 + 1, 1, v31);
        }
        v23[2] = v25 + 1;
        uint64_t v31 = v23;
        unint64_t v7 = &v23[9 * v25];
        *((_OWORD *)v7 + 2) = v41[0];
        long long v8 = v41[1];
        long long v9 = v41[2];
        long long v10 = v41[3];
        *((unsigned char *)v7 + 96) = v42;
        *((_OWORD *)v7 + 4) = v9;
        *((_OWORD *)v7 + 5) = v10;
        *((_OWORD *)v7 + 3) = v8;

        sub_1001830F4((uint64_t *)v41, (void (*)(uint64_t, uint64_t))sub_10006D144);
      }
      else
      {
        if (v16 != 27266)
        {
          swift_bridgeObjectRelease();
          sub_1000AE7D8();
          id v34 = 0;
          uint64_t v35 = 0xE000000000000000;
          _StringGuts.grow(_:)(25);
          swift_bridgeObjectRelease();
          id v34 = (id)0xD000000000000017;
          uint64_t v35 = 0x80000001003B5460;
          sub_10006C51C(&qword_100457200);
          uint64_t v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_100378290;
          __int16 v28 = sub_10005D5A8((uint64_t)v14);
          *(void *)(v27 + 56) = &type metadata for UInt16;
          *(void *)(v27 + 64) = &protocol witness table for UInt16;
          *(_WORD *)(v27 + 32) = v28;
          v29._countAndFlagsBits = String.init(format:_:)();
          String.append(_:)(v29);
          swift_bridgeObjectRelease();
          sub_100299FAC(0, 1, (uint64_t)v34, v35, 0);
          swift_willThrow();

          goto LABEL_18;
        }
      }
      if (++v5 == 16) {
        goto LABEL_18;
      }
    }
    id v26 = v34;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_18:
    sub_10006D144(v12, v11);
    return v31;
  }
  swift_willThrow();
  return v31;
}

uint64_t *sub_1001830F4(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  return a1;
}

uint64_t sub_100183180(void *a1)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v4 = sub_100056638(a1, isa);

  if (v4)
  {
    swift_willThrow();
  }
  else
  {
    uint64_t v5 = sub_100088F40((uint64_t)&off_10040E990);
    unint64_t v7 = v6;
    Class v8 = Data._bridgeToObjectiveC()().super.isa;
    id v20 = 0;
    uint64_t v9 = (id *)sub_10005603C(a1, (uint64_t)v8, &v20);

    uint64_t v1 = (uint64_t)v20;
    if (v9)
    {
      id v10 = v20;
      unint64_t v11 = sub_10005D558(v9);
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      switch(v14 >> 62)
      {
        case 1uLL:
          sub_10006D144(v12, v14);
          uint64_t v16 = (int)v12;
          uint64_t v17 = v12 >> 32;
          goto LABEL_13;
        case 2uLL:
          uint64_t v16 = *(void *)(v12 + 16);
          uint64_t v17 = *(void *)(v12 + 24);
          sub_10006D144(v12, v14);
LABEL_13:
          if (v16 == v17) {
            goto LABEL_14;
          }
          goto LABEL_15;
        case 3uLL:
          sub_10006D144(v12, v14);
          goto LABEL_14;
        default:
          sub_10006D144(v12, v14);
          if ((v14 & 0xFF000000000000) != 0)
          {
LABEL_15:
            unint64_t v18 = sub_10005D558(v9);
            uint64_t v1 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            sub_10006D144(v5, v7);
          }
          else
          {
LABEL_14:
            sub_10006D144(v5, v7);
            uint64_t v1 = 0;
          }

          break;
      }
    }
    else
    {
      id v15 = v20;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10006D144(v5, v7);
    }
  }
  return v1;
}

void sub_1001833E8(void *a1)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v3 = sub_100056638(a1, isa);

  if (v3)
  {
    swift_willThrow();
  }
  else
  {
    Class v4 = Data._bridgeToObjectiveC()().super.isa;
    id v8 = 0;
    id v5 = sub_100056348(a1, 128, 1, 0, 0, v4, 0, &v8);

    if (v5)
    {
      id v6 = v8;
    }
    else
    {
      id v7 = v8;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
}

uint64_t sub_10018354C(void *a1, unsigned __int16 a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 0xEu)
  {
    uint64_t v4 = 0;
  }
  else
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    uint64_t v4 = __DataStorage.init(capacity:)() | 0x4000000000000000;
  }
  LOWORD(v6) = 0;
  uint64_t v43 = 0;
  unint64_t v44 = v4;
  while (2)
  {
    if (((a2 - (unsigned __int16)v6) & 0xFFFF0000) != 0)
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
    }
    if ((unsigned __int16)(a2 - v6) >= 0x2E4u) {
      unsigned int v7 = 740;
    }
    else {
      unsigned int v7 = (unsigned __int16)(a2 - v6);
    }
    id v41 = 0;
    id v8 = (id *)sub_100056504(a1, 128, 6, SBYTE1(v6), v6, 0, v7, &v41);
    if (v8)
    {
      uint64_t v9 = v8;
      id v10 = v41;
      unint64_t v11 = sub_10005D558(v9);
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      switch(v14 >> 62)
      {
        case 1uLL:
          sub_10006D144(v12, v14);
          if (__OFSUB__(HIDWORD(v12), v12)) {
            goto LABEL_47;
          }
          if (HIDWORD(v12) - v12 == (unint64_t)v7) {
            goto LABEL_22;
          }
          goto LABEL_36;
        case 2uLL:
          uint64_t v15 = *(void *)(v12 + 16);
          uint64_t v16 = *(void *)(v12 + 24);
          sub_10006D144(v12, v14);
          if (__OFSUB__(v16, v15)) {
            goto LABEL_48;
          }
          if (v16 - v15 == v7)
          {
LABEL_22:
            uint64_t v17 = sub_10005D558(v9);
            uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v20 = v19;

            Data.append(_:)();
            sub_10006D144(v18, v20);
            unint64_t v21 = sub_10005D558(v9);
            uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v24 = v23;

            switch(v24 >> 62)
            {
              case 1uLL:

                sub_10006D144(v22, v24);
                LODWORD(v25) = HIDWORD(v22) - v22;
                if (__OFSUB__(HIDWORD(v22), v22)) {
                  goto LABEL_50;
                }
                unint64_t v25 = (int)v25;
LABEL_30:
                if ((v25 & 0x8000000000000000) != 0 || v25 >= 0x10000)
                {
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
                  JUMPOUT(0x100183B30);
                }
LABEL_32:
                int v6 = (unsigned __int16)v6 + (unsigned __int16)v25;
                if ((v6 & 0x10000) != 0) {
                  goto LABEL_46;
                }
                if ((unsigned __int16)v6 != a2) {
                  continue;
                }
                uint64_t result = v43;
                break;
              case 2uLL:
                uint64_t v27 = *(void *)(v22 + 16);
                uint64_t v26 = *(void *)(v22 + 24);

                sub_10006D144(v22, v24);
                unint64_t v25 = v26 - v27;
                if (!__OFSUB__(v26, v27)) {
                  goto LABEL_30;
                }
                goto LABEL_49;
              case 3uLL:

                sub_10006D144(v22, v24);
                LOWORD(v25) = 0;
                goto LABEL_32;
              default:

                sub_10006D144(v22, v24);
                LOWORD(v25) = BYTE6(v24);
                goto LABEL_32;
            }
            return result;
          }
LABEL_36:
          id v41 = 0;
          uint64_t v42 = 0xE000000000000000;
          _StringGuts.grow(_:)(62);
          v29._countAndFlagsBits = 0xD00000000000001ELL;
          v29._object = (void *)0x80000001003B54E0;
          String.append(_:)(v29);
          v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v30);
          swift_bridgeObjectRelease();
          v31._object = (void *)0x80000001003B5500;
          v31._countAndFlagsBits = 0xD000000000000011;
          String.append(_:)(v31);
          v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v32);
          swift_bridgeObjectRelease();
          v33._countAndFlagsBits = 0x746F672074756220;
          v33._object = (void *)0xE900000000000020;
          String.append(_:)(v33);
          id v34 = sub_10005D558(v9);
          uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v37 = v36;

          switch(v37 >> 62)
          {
            case 1uLL:
              sub_10006D144(v35, v37);
              if (!__OFSUB__(HIDWORD(v35), v35)) {
                goto LABEL_43;
              }
              goto LABEL_51;
            case 2uLL:
              uint64_t v39 = *(void *)(v35 + 16);
              uint64_t v38 = *(void *)(v35 + 24);
              sub_10006D144(v35, v37);
              uint64_t v35 = v38 - v39;
              if (!__OFSUB__(v38, v39)) {
                goto LABEL_43;
              }
              __break(1u);
LABEL_42:
              sub_10006D144(v35, v37);
LABEL_43:
              sub_1000AE7D8();
              v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
              String.append(_:)(v40);
              swift_bridgeObjectRelease();
              sub_100299FAC(0, 1, (uint64_t)v41, v42, 0);
              swift_willThrow();

              break;
            default:
              goto LABEL_42;
          }
          break;
        case 3uLL:
          sub_10006D144(v12, v14);
          if (v7) {
            goto LABEL_36;
          }
          goto LABEL_22;
        default:
          sub_10006D144(v12, v14);
          if (BYTE6(v14) != (unint64_t)v7) {
            goto LABEL_36;
          }
          goto LABEL_22;
      }
    }
    else
    {
      id v28 = v41;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return sub_10006D144(v43, v44);
  }
}

Class sub_100183B60(void *a1)
{
  uint64_t v3 = self;
  id v5 = sub_100056FD0(a1, v4);
  id v6 = [v5 seid];

  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  v10.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v7, v9);
  id v53 = 0;
  CFDataRef v11 = sub_100031D94(v3, v10.super.isa, &v53);

  id v12 = v53;
  if (!v11)
  {
    unint64_t v23 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return v10.super.isa;
  }
  uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v15 = v14;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v53 = 0;
  uint64_t v17 = (id *)sub_100056348(a1, 128, 3, 0, 0, isa, 0, &v53);

  if (!v17)
  {
    id v24 = v53;
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_22:
    sub_10006D144(v13, v15);
    return v10.super.isa;
  }
  id v18 = v53;
  unint64_t v19 = sub_10005D558(v17);
  v10.super.Class isa = (Class)static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  switch(v21 >> 62)
  {
    case 1uLL:
      sub_10006D144((uint64_t)v10.super.isa, v21);
      LODWORD(v22) = HIDWORD(v10.super.isa) - LODWORD(v10.super.isa);
      if (__OFSUB__(HIDWORD(v10.super.isa), v10.super.isa))
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      uint64_t v22 = (int)v22;
LABEL_10:
      if (v22 != 2)
      {
LABEL_14:
        id v53 = 0;
        uint64_t v54 = 0xE000000000000000;
        _StringGuts.grow(_:)(54);
        v31._object = (void *)0x80000001003B54A0;
        v31._countAndFlagsBits = 0xD000000000000034;
        String.append(_:)(v31);
        Swift::String v32 = sub_10005D558(v17);
        uint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v34;

        switch(v35 >> 62)
        {
          case 1uLL:
            sub_10006D144(v33, v35);
            if (!__OFSUB__(HIDWORD(v33), v33)) {
              goto LABEL_21;
            }
            goto LABEL_34;
          case 2uLL:
            v10.super.Class isa = *(Class *)(v33 + 16);
            uint64_t v36 = *(void *)(v33 + 24);
            sub_10006D144(v33, v35);
            unint64_t v35 = v36 - (unint64_t)v10.super.isa;
            if (!__OFSUB__(v36, v10.super.isa)) {
              goto LABEL_21;
            }
            __break(1u);
LABEL_20:
            sub_10006D144(v33, v35);
LABEL_21:
            sub_1000AE7D8();
            v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v37);
            swift_bridgeObjectRelease();
            sub_100299FAC(0, 1, (uint64_t)v53, v54, 0);
            swift_willThrow();

            break;
          default:
            goto LABEL_20;
        }
        goto LABEL_22;
      }
      uint64_t v27 = sub_10005D558(v17);
      v10.super.Class isa = (Class)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      unsigned __int16 v30 = sub_10007D08C((uint64_t)v10.super.isa, v29, 0, 0, 0);
      if (v1)
      {
        sub_10006D144(v13, v15);

        return v10.super.isa;
      }
      uint64_t v39 = (void *)sub_10018354C(a1, v30);
      unint64_t v41 = v40;
      id v53 = v39;
      uint64_t v54 = v40;
      sub_10006D0EC((uint64_t)v39, v40);
      uint64_t v42 = sub_10018CE08((uint64_t *)&v53, 0);
      uint64_t v44 = v43;
      unint64_t v46 = v45;
      sub_10006D144((uint64_t)v53, v54);
      uint64_t v47 = sub_10018D5B0(v42, v44, v46);
      if (v47 < 0)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
      }
      uint64_t v48 = v47;
      uint64_t v52 = (uint64_t)v39;
      v10.super.Class isa = (Class)Data._Representation.subscript.getter();
      uint64_t v49 = 0;
      switch(v41 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v52), v52))
          {
            __break(1u);
LABEL_38:
            __break(1u);
            JUMPOUT(0x1001840F4);
          }
          uint64_t v49 = HIDWORD(v52) - (int)v52;
LABEL_30:
          if (v49 < v48) {
            goto LABEL_36;
          }
          Data._Representation.subscript.getter();
          sub_10006D144(v44, v46);
          sub_10006D144(v52, v41);

          sub_10006D144(v13, v15);
          break;
        case 2uLL:
          uint64_t v51 = *(void *)(v52 + 16);
          uint64_t v50 = *(void *)(v52 + 24);
          uint64_t v49 = v50 - v51;
          if (!__OFSUB__(v50, v51)) {
            goto LABEL_30;
          }
          goto LABEL_38;
        case 3uLL:
          goto LABEL_30;
        default:
          uint64_t v49 = BYTE6(v41);
          goto LABEL_30;
      }
      return v10.super.isa;
    case 2uLL:
      uint64_t v26 = *((void *)v10.super.isa + 2);
      uint64_t v25 = *((void *)v10.super.isa + 3);
      sub_10006D144((uint64_t)v10.super.isa, v21);
      uint64_t v22 = v25 - v26;
      if (!__OFSUB__(v25, v26)) {
        goto LABEL_10;
      }
      goto LABEL_33;
    case 3uLL:
      sub_10006D144((uint64_t)v10.super.isa, v21);
      goto LABEL_14;
    default:
      sub_10006D144((uint64_t)v10.super.isa, v21);
      uint64_t v22 = BYTE6(v21);
      goto LABEL_10;
  }
}

uint64_t sub_100184124(void *a1)
{
  uint64_t result = sub_100183180(a1);
  if (!v1)
  {
    unint64_t v5 = v4;
    uint64_t result = sub_100075868(result, v4);
    if (v5 >> 60 != 15)
    {
      if (qword_100453718 != -1) {
        swift_once();
      }
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v7 = sub_100056638(a1, isa);

      if (v7)
      {
        return swift_willThrow();
      }
      else
      {
        uint64_t v8 = sub_100088F40((uint64_t)&off_10040E9B8);
        unint64_t v10 = v9;
        Class v11 = Data._bridgeToObjectiveC()().super.isa;
        id v15 = 0;
        id v12 = sub_100056104(a1, v11, &v15);

        if (v12)
        {
          id v13 = v15;
        }
        else
        {
          id v14 = v15;
          _convertNSErrorToError(_:)();

          swift_willThrow();
        }
        return sub_10006D144(v8, v10);
      }
    }
  }
  return result;
}

uint64_t sub_1001842A0(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_100088F40((uint64_t)&off_10040EA38);
  unint64_t v8 = v7;
  unint64_t v19 = v7;
  sub_10006D0EC(v6, v7);
  sub_10006D0EC(a2, a3);
  sub_100141068(a2, a3);
  sub_10006D144(a2, a3);
  sub_10006D144(v6, v8);
  uint64_t v10 = v6;
  unint64_t v9 = v19;
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v12 = sub_100056638(a1, isa);

  if (v12)
  {
    swift_willThrow();
    return sub_10006D144(v10, v19);
  }
  else
  {
    Class v14 = Data._bridgeToObjectiveC()().super.isa;
    id v18 = 0;
    id v15 = sub_100056104(a1, v14, &v18);

    if (v15)
    {
      id v16 = v18;
    }
    else
    {
      id v17 = v18;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return sub_10006D144(v10, v9);
  }
}

uint64_t sub_100184464@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v12 = sub_100056638(a1, isa);

  if (v12) {
    return swift_willThrow();
  }
  id v14 = [self randomData:16];
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  uint64_t v72 = v15;
  unint64_t v73 = v17;
  uint64_t v74 = a2;
  unint64_t v75 = a3;
  char v76 = a4 & 1;
  sub_10006D0EC(a2, a3);
  uint64_t v18 = sub_100222474();
  if (v5)
  {
    sub_10006D144(v15, v17);
    return sub_10006D144(a2, a3);
  }
  else
  {
    unint64_t v55 = v17;
    uint64_t v56 = v15;
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    Class v22 = Data._bridgeToObjectiveC()().super.isa;
    id v58 = 0;
    id v23 = sub_100056104(a1, v22, &v58);

    if (v23)
    {
      uint64_t v54 = v20;
      id v24 = v58;
      uint64_t v25 = (id *)v23;
      uint64_t v26 = sub_10005D558(v25);
      uint64_t v27 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v29 = v28;

      sub_100224D70((uint64_t)&v60);
      id v58 = v27;
      unint64_t v59 = v29;
      sub_10006D0EC((uint64_t)v27, v29);
      unint64_t v39 = sub_100188FB0((uint64_t)&v58, &v60);
      sub_10006D144((uint64_t)v58, v59);
      sub_10016FB80(&v61, &v71);
      sub_10016FBDC((uint64_t)&v71);
      uint64_t v57 = v62;
      sub_10016FC34((uint64_t)&v57);
      sub_10022553C(v39, (uint64_t)v63);
      long long v52 = v63[1];
      long long v53 = v63[0];
      long long v51 = v63[2];
      uint64_t v49 = v65;
      uint64_t v50 = v64;
      char v48 = v66;
      long long v46 = v68;
      long long v47 = v67;
      uint64_t v44 = v70;
      uint64_t v45 = v69;
      sub_10006D144((uint64_t)v27, v29);
      unint64_t v40 = sub_10005D558(v25);

      uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v42;

      sub_10006D144(v54, v21);
      sub_10006D144(v56, v55);
      uint64_t result = sub_10006D144(a2, a3);
      *(_OWORD *)a5 = v53;
      *(_OWORD *)(a5 + 16) = v52;
      *(_OWORD *)(a5 + 32) = v51;
      *(void *)(a5 + 48) = v50;
      *(void *)(a5 + 56) = v49;
      *(unsigned char *)(a5 + 64) = v48;
      *(_OWORD *)(a5 + 72) = v47;
      *(_OWORD *)(a5 + 88) = v46;
      *(void *)(a5 + 104) = v45;
      *(void *)(a5 + 112) = v44;
      *(void *)(a5 + 120) = v41;
      *(void *)(a5 + 128) = v43;
    }
    else
    {
      id v30 = v58;
      uint64_t v31 = _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_1000AE7D8();
      id v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(34);
      swift_bridgeObjectRelease();
      id v58 = (id)0xD000000000000020;
      unint64_t v59 = 0x80000001003B5520;
      unint64_t v32 = v21;
      sub_10023CDF4(v20, v21);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = v33;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      uint64_t v37 = (uint64_t)v58;
      uint64_t v38 = v59;
      swift_errorRetain();
      sub_100299FAC(0, 1, v37, v38, v31);
      swift_willThrow();
      sub_10006D144(v20, v32);
      sub_10006D144(v56, v55);
      sub_10006D144(a2, a3);
      return swift_errorRelease();
    }
  }
  return result;
}

void sub_100184A9C(void *a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v29 = 0;
  unint64_t v30 = __DataStorage.init(capacity:)() | 0x4000000000000000;
  LODWORD(v6) = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_16:
        __break(1u);
      }
      unint64_t v6 = (int)v6;
LABEL_6:
      if ((v6 & 0x8000000000000000) != 0 || v6 >= 0x10000)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100184E3CLL);
      }
LABEL_8:
      __int16 v27 = bswap32(v6) >> 16;
      v28[3] = &type metadata for UnsafeRawBufferPointer;
      void v28[4] = &protocol witness table for UnsafeRawBufferPointer;
      v28[0] = &v27;
      v28[1] = v28;
      sub_100075908(v28, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.append(contentsOf:)();
      sub_10007594C((uint64_t)v28);
      uint64_t v10 = sub_1002B4084(a2, a3);
      unint64_t v12 = v11;
      Data.append(_:)();
      sub_10006D144(v10, v12);
      uint64_t v14 = v29;
      unint64_t v13 = v30;
      sub_10006D0EC(v29, v30);
      uint64_t v15 = sub_10018F730(192, v14, v13);
      unint64_t v17 = v16;
      sub_10006D144(v14, v13);
      if (qword_100453718 != -1) {
        swift_once();
      }
      v28[0] = sub_10023CDF4(qword_100468740, *(unint64_t *)algn_100468748);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      v28[0] = 0;
      id v20 = sub_10005BA00(a1, v18, isa, 0, 2, v28);

      id v21 = v28[0];
      if (v20)
      {
        id v22 = v28[0];
        uint64_t v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        sub_10006D144(v23, v24);

        if (v21)
        {
LABEL_12:
          id v25 = v21;
          swift_willThrow();
          sub_10006D144(v15, v17);

          sub_10006D144(v14, v13);
          return;
        }
      }
      else
      {
        id v26 = v28[0];
        if (v21) {
          goto LABEL_12;
        }
      }
      sub_10006D144(v14, v13);
      sub_10006D144(v15, v17);
      return;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      unint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_8;
    default:
      LODWORD(v6) = BYTE6(a3);
      goto LABEL_8;
  }
}

uint64_t sub_100184E4C(void *a1, __int16 a2)
{
  sub_10006C51C(&qword_1004568A8);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_100378460;
  *(_WORD *)(v4 + 32) = 1152;
  *(unsigned char *)(v4 + 34) = HIBYTE(a2);
  *(unsigned char *)(v4 + 35) = a2;
  uint64_t v5 = sub_100088F40(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v13 = 0;
  id v9 = sub_100056104(a1, isa, &v13);

  if (v9)
  {
    id v10 = v13;
  }
  else
  {
    id v11 = v13;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return sub_10006D144(v5, v7);
}

void sub_100184F80(void *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3 >> 62;
  unint64_t v5 = a3;
  uint64_t v6 = a2;
  unint64_t v7 = a1;
  LOWORD(a2) = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v6), v6)) {
        goto LABEL_54;
      }
      a2 = HIDWORD(v6) - (int)v6;
LABEL_6:
      if ((a2 & 0x8000000000000000) != 0 || a2 >= 0x10000) {
        goto LABEL_60;
      }
LABEL_8:
      sub_100184E4C(a1, a2);
      if (v3) {
        return;
      }
      unsigned __int16 v10 = 0;
      unint64_t v11 = HIDWORD(v6) - (int)v6;
      unint64_t v12 = BYTE6(v5);
      BOOL v13 = __OFSUB__(HIDWORD(v6), v6);
      unint64_t v14 = (int)v6;
      uint64_t v15 = v6 >> 32;
      uint64_t v16 = v4;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(v6 + 16);
      uint64_t v8 = *(void *)(v6 + 24);
      a2 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_55;
    case 3uLL:
      goto LABEL_8;
    default:
      LOWORD(a2) = BYTE6(a3);
      goto LABEL_8;
  }
  while (2)
  {
    unint64_t v17 = v12;
    switch(v16)
    {
      case 1:
        unint64_t v17 = v11;
        if (v13) {
          goto LABEL_57;
        }
        goto LABEL_17;
      case 2:
        uint64_t v19 = *(void *)(v6 + 16);
        uint64_t v18 = *(void *)(v6 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        unint64_t v17 = v18 - v19;
        if (!v20) {
          goto LABEL_17;
        }
        goto LABEL_56;
      case 3:
        if (!v10) {
          return;
        }
        LOWORD(v21) = 0;
        goto LABEL_27;
      default:
LABEL_17:
        if (v17 == v10) {
          return;
        }
        LOWORD(v21) = v12;
        if (!v4) {
          goto LABEL_27;
        }
        if (v4 == 1)
        {
          unint64_t v21 = v11;
          if (v13) {
            goto LABEL_58;
          }
        }
        else
        {
          uint64_t v23 = *(void *)(v6 + 16);
          uint64_t v22 = *(void *)(v6 + 24);
          BOOL v20 = __OFSUB__(v22, v23);
          unint64_t v21 = v22 - v23;
          if (v20) {
            goto LABEL_59;
          }
        }
        if ((v21 & 0x8000000000000000) != 0 || v21 >= 0x10000)
        {
LABEL_60:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_61:
          __break(1u);
          JUMPOUT(0x10018539CLL);
        }
LABEL_27:
        int v24 = (unsigned __int16)v21 - v10;
        if ((v24 & 0xFFFF0000) != 0)
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
        }
        int v24 = (unsigned __int16)v24;
        if ((unsigned __int16)v24 >= 0x2E4u) {
          int v24 = 740;
        }
        int v25 = v24 + v10;
        if ((v25 & 0x10000) != 0) {
          goto LABEL_50;
        }
        break;
    }
    unsigned __int16 v26 = 0;
    unint64_t v27 = v14;
    switch(v16)
    {
      case 1:
        goto LABEL_36;
      case 2:
        unint64_t v27 = *(void *)(v6 + 16);
LABEL_36:
        if ((v27 & 0x8000000000000000) == 0)
        {
          unsigned __int16 v26 = v27;
          if (v27 >> 16) {
            goto LABEL_61;
          }
LABEL_32:
          __int16 v28 = 0;
          unint64_t v29 = v15;
          switch(v16)
          {
            case 0:
              __int16 v28 = v12;
              goto LABEL_34;
            case 1:
              goto LABEL_40;
            case 2:
              unint64_t v29 = *(void *)(v6 + 24);
LABEL_40:
              if ((v29 & 0x8000000000000000) != 0) {
                goto LABEL_51;
              }
              if (v29 >> 16) {
                goto LABEL_52;
              }
              char v30 = HIBYTE(v10);
LABEL_43:
              if ((unsigned __int16)v29 < v26) {
                goto LABEL_53;
              }
              uint64_t v43 = v15;
              unint64_t v44 = v14;
              BOOL v45 = v13;
              unint64_t v46 = v12;
              unint64_t v47 = v4;
              unint64_t v31 = v11;
              uint64_t v32 = v6;
              unint64_t v33 = v5;
              char v48 = v30;
              uint64_t v34 = Data._Representation.subscript.getter();
              unint64_t v35 = v7;
              unint64_t v37 = v36;
              Class isa = Data._bridgeToObjectiveC()().super.isa;
              unint64_t v39 = v37;
              unint64_t v7 = v35;
              sub_10006D144(v34, v39);
              id v49 = 0;
              id v40 = sub_100056504(v35, 128, 5, v48, v10, isa, 0, &v49);

              if (!v40)
              {
                id v42 = v49;
                _convertNSErrorToError(_:)();

                swift_willThrow();
                return;
              }
              id v41 = v49;

              unsigned __int16 v10 = v25;
              unint64_t v11 = v31;
              unint64_t v5 = v33;
              unint64_t v12 = v46;
              unint64_t v4 = v47;
              uint64_t v6 = v32;
              BOOL v13 = v45;
              uint64_t v15 = v43;
              unint64_t v14 = v44;
              break;
            case 3:
LABEL_34:
              char v30 = HIBYTE(v10);
              LOWORD(v29) = v28;
              goto LABEL_43;
            default:
              JUMPOUT(0);
          }
          continue;
        }
        __break(1u);
        return;
      default:
        goto LABEL_32;
    }
  }
}

unint64_t sub_1001853DC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  uint64_t v64 = a1;
  uint64_t v9 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v9 - 8, v10);
  unint64_t v12 = (uint64_t *)((char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100186250(a4, (uint64_t)v12);
  uint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  uint64_t v16 = v12[6];
  unint64_t v15 = v12[7];
  sub_10006D0EC(v14, v13);
  sub_10006D0EC(v16, v15);
  sub_1001862B4((uint64_t)v12);
  long long v68 = &_s14ExportTLKInputVN;
  uint64_t v69 = &off_100416B40;
  unint64_t v17 = (void *)swift_allocObject();
  id v66 = v17;
  v17[2] = a2;
  v17[3] = a3;
  void v17[4] = v14;
  v17[5] = v13;
  v17[6] = v16;
  v17[7] = v15;
  sub_10006D0EC(a2, a3);
  sub_10006D0EC(v14, v13);
  sub_10006D0EC(v16, v15);
  sub_10006D0EC(a2, a3);
  sub_1001861FC(v14, v13, v16, v15);
  uint64_t v18 = sub_100188DF0(&v66);
  if (!v4)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    unint64_t v63 = a3;
    sub_10007594C((uint64_t)&v66);
    sub_100184A9C(v64, v20, v21);
    unint64_t v22 = v20;
    unint64_t v5 = 0;
    unint64_t v61 = v22;
    unint64_t v62 = v21;
    uint64_t v60 = a2;
    if (qword_100453718 != -1) {
      swift_once();
    }
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    int v24 = v64;
    id v25 = sub_100056638(v64, isa);

    unint64_t v26 = v15;
    if (v25)
    {
      swift_willThrow();
      sub_10006D144(v61, v62);
      sub_10006D144(v60, v63);
      sub_1001861A8(v14, v13, v16, v15);
      sub_10006D144(v14, v13);
      uint64_t v27 = v16;
    }
    else
    {
      sub_100184F80(v24, v61, v62);
      uint64_t v30 = v16;
      uint64_t v31 = sub_100088F40((uint64_t)&off_10040EF10);
      unint64_t v33 = v32;
      Class v34 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v31, v33);
      id v66 = 0;
      unint64_t v35 = (id *)sub_100056104(v24, v34, &v66);

      unint64_t v5 = (unint64_t)v66;
      if (!v35)
      {
        id v42 = v66;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10006D144(v14, v13);
        sub_10006D144(v30, v26);
        sub_10006D144(v60, v63);
        sub_1001861A8(v14, v13, v30, v26);
        uint64_t v27 = v61;
        unint64_t v28 = v62;
        goto LABEL_9;
      }
      id v36 = v66;
      unint64_t v37 = sub_10005D558(v35);
      uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      switch(v40 >> 62)
      {
        case 1uLL:
          sub_10006D144(v38, v40);
          LODWORD(v41) = HIDWORD(v38) - v38;
          if (__OFSUB__(HIDWORD(v38), v38))
          {
            __break(1u);
LABEL_31:
            __break(1u);
          }
          uint64_t v41 = (int)v41;
LABEL_18:
          if (v41 == 2)
          {
            unint64_t v46 = sub_10005D558(v35);
            uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v49 = v48;

            unsigned __int16 v50 = sub_10007D08C(v47, v49, 0, 0, 0);
            unint64_t v5 = sub_10018354C(v64, v50);

            sub_10006D144(v61, v62);
            sub_10006D144(v60, v63);
            sub_1001861A8(v14, v13, v30, v26);
            sub_10006D144(v14, v13);
            sub_10006D144(v30, v26);
            return v5;
          }
LABEL_21:
          id v66 = 0;
          uint64_t v67 = 0xE000000000000000;
          _StringGuts.grow(_:)(54);
          v51._object = (void *)0x80000001003B54A0;
          v51._countAndFlagsBits = 0xD000000000000034;
          String.append(_:)(v51);
          long long v52 = sub_10005D558(v35);
          uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v55 = v54;

          switch(v55 >> 62)
          {
            case 1uLL:
              sub_10006D144(v53, v55);
              if (__OFSUB__(HIDWORD(v53), v53))
              {
                __break(1u);
                JUMPOUT(0x100185B00);
              }
              unint64_t v55 = HIDWORD(v53) - (int)v53;
              break;
            case 2uLL:
              uint64_t v57 = *(void *)(v53 + 16);
              uint64_t v56 = *(void *)(v53 + 24);
              sub_10006D144(v53, v55);
              unint64_t v55 = v56 - v57;
              if (__OFSUB__(v56, v57))
              {
                __break(1u);
                goto LABEL_28;
              }
              break;
            case 3uLL:
LABEL_28:
              sub_10006D144(v53, v55);
              unint64_t v55 = 0;
              break;
            default:
              sub_10006D144(v53, v55);
              unint64_t v55 = BYTE6(v55);
              break;
          }
          unint64_t v58 = sub_1000AE7D8();
          unint64_t v65 = v55;
          v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v59);
          swift_bridgeObjectRelease();
          unint64_t v5 = v58;
          sub_100299FAC(0, 1, (uint64_t)v66, v67, 0);
          swift_willThrow();

          sub_10006D144(v61, v62);
          sub_10006D144(v60, v63);
          sub_1001861A8(v14, v13, v30, v26);
          sub_10006D144(v14, v13);
          uint64_t v27 = v30;
          break;
        case 2uLL:
          uint64_t v43 = v38;
          uint64_t v44 = *(void *)(v38 + 24);
          uint64_t v45 = *(void *)(v43 + 16);
          sub_10006D144(v43, v40);
          uint64_t v41 = v44 - v45;
          if (!__OFSUB__(v44, v45)) {
            goto LABEL_18;
          }
          goto LABEL_31;
        case 3uLL:
          sub_10006D144(v38, v40);
          goto LABEL_21;
        default:
          sub_10006D144(v38, v40);
          uint64_t v41 = BYTE6(v40);
          goto LABEL_18;
      }
    }
    unint64_t v28 = v26;
LABEL_9:
    sub_10006D144(v27, v28);
    return v5;
  }
  sub_10006D144(v14, v13);
  sub_10006D144(v16, v15);
  sub_10006D144(a2, a3);
  sub_1001861A8(v14, v13, v16, v15);
  sub_10007594C((uint64_t)&v66);
  return v5;
}

id sub_100185B20(id a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = sub_100056638(a1, isa);

  if (v10)
  {
    swift_willThrow();
  }
  else
  {
    unint64_t v49 = &_s14ExportTLKInputVN;
    unsigned __int16 v50 = &off_100416B40;
    uint64_t v11 = (void *)swift_allocObject();
    id v47 = v11;
    _OWORD v11[2] = a2;
    v11[3] = a3;
    v11[4] = a4;
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = 0x2000000000000000;
    swift_bridgeObjectRetain_n();
    sub_10006D0EC(a2, a3);
    sub_10006D0EC(a2, a3);
    sub_1001861FC(a4, 0, 0, 0x2000000000000000uLL);
    uint64_t v12 = sub_100188DF0(&v47);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_10006D144(a2, a3);
      sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
      sub_10007594C((uint64_t)&v47);
    }
    else
    {
      unint64_t v14 = v12;
      unint64_t v15 = v13;
      sub_10007594C((uint64_t)&v47);
      sub_100184A9C(a1, v14, v15);
      Class v16 = Data._bridgeToObjectiveC()().super.isa;
      id v17 = sub_100056638(a1, v16);

      if (v17)
      {
        swift_willThrow();
      }
      else
      {
        sub_100184F80(a1, v14, v15);
        uint64_t v19 = sub_100088F40((uint64_t)&off_10040EF38);
        unint64_t v21 = v20;
        Class v44 = Data._bridgeToObjectiveC()().super.isa;
        sub_10006D144(v19, v21);
        id v47 = 0;
        unint64_t v22 = (id *)sub_100056104(a1, v44, &v47);

        if (!v22)
        {
          a1 = v47;
          _convertNSErrorToError(_:)();

          swift_willThrow();
          swift_bridgeObjectRelease();
          sub_10006D144(a2, a3);
          sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
          sub_10006D144(v14, v15);
          return a1;
        }
        id v23 = v47;
        uint64_t v43 = v22;
        int v24 = sub_10005D558(v22);
        uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v26 = v25;

        switch(v26 >> 62)
        {
          case 1uLL:
            sub_10006D144(v45, v26);
            LODWORD(v27) = HIDWORD(v45) - v45;
            if (__OFSUB__(HIDWORD(v45), v45))
            {
              __break(1u);
LABEL_30:
              __break(1u);
LABEL_31:
              __break(1u);
LABEL_32:
              __break(1u);
              JUMPOUT(0x100186184);
            }
            uint64_t v27 = (int)v27;
LABEL_19:
            unint64_t v29 = v43;
            if (v27 == 2)
            {
              uint64_t v30 = sub_10005D558(v43);
              uint64_t v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v46 = v32;

              unsigned __int16 v33 = sub_10007D08C(v31, v46, 0, 0, 0);
              a1 = (id)sub_10018354C(a1, v33);

              sub_10006D144(v14, v15);
              sub_10006D144(a2, a3);
              sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
              swift_bridgeObjectRelease();
              return a1;
            }
LABEL_22:
            id v47 = 0;
            uint64_t v48 = 0xE000000000000000;
            _StringGuts.grow(_:)(54);
            v34._object = (void *)0x80000001003B54A0;
            v34._countAndFlagsBits = 0xD000000000000034;
            String.append(_:)(v34);
            unint64_t v35 = sub_10005D558(v29);
            uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;

            switch(v38 >> 62)
            {
              case 1uLL:
                sub_10006D144(v36, v38);
                if (!__OFSUB__(HIDWORD(v36), v36)) {
                  goto LABEL_28;
                }
                goto LABEL_31;
              case 2uLL:
                uint64_t v40 = *(void *)(v36 + 16);
                uint64_t v39 = *(void *)(v36 + 24);
                sub_10006D144(v36, v38);
                if (__OFSUB__(v39, v40)) {
                  goto LABEL_32;
                }
                unint64_t v29 = v43;
LABEL_28:
                a1 = (id)sub_1000AE7D8();
                v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v41);
                swift_bridgeObjectRelease();
                sub_100299FAC(0, 1, (uint64_t)v47, v48, 0);
                swift_willThrow();

                break;
              default:
                sub_10006D144(v36, v38);
                goto LABEL_28;
            }
            break;
          case 2uLL:
            uint64_t v28 = *(void *)(v45 + 16);
            uint64_t v42 = *(void *)(v45 + 24);
            sub_10006D144(v45, v26);
            uint64_t v27 = v42 - v28;
            if (!__OFSUB__(v42, v28)) {
              goto LABEL_19;
            }
            goto LABEL_30;
          case 3uLL:
            sub_10006D144(v45, v26);
            unint64_t v29 = v43;
            goto LABEL_22;
          default:
            sub_10006D144(v45, v26);
            uint64_t v27 = BYTE6(v26);
            goto LABEL_19;
        }
      }
      sub_10006D144(v14, v15);
      sub_10006D144(a2, a3);
      sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
      swift_bridgeObjectRelease();
    }
  }
  return a1;
}

uint64_t sub_1001861A8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_10006D144(a1, a2);
    return sub_10006D144(a3, a4);
  }
}

uint64_t sub_1001861FC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x2000000000000000) != 0)
  {
    return swift_bridgeObjectRetain();
  }
  else
  {
    sub_10006D0EC(a1, a2);
    return sub_10006D0EC(a3, a4);
  }
}

uint64_t sub_100186250(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SESPeerIdentityData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001862B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SESPeerIdentityData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100186310(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v37 = a1;
  uint64_t v8 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (Class *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100186250(a4, (uint64_t)v11);
  uint64_t v13 = v11[4];
  unint64_t v12 = v11[5];
  uint64_t v15 = v11[6];
  unint64_t v14 = v11[7];
  sub_10006D0EC(v13, v12);
  sub_10006D0EC(v15, v14);
  sub_1001862B4((uint64_t)v11);
  v38[3] = &_s14ImportTLKInputVN;
  v38[4] = &off_100416B30;
  Class v16 = (void *)swift_allocObject();
  v38[0] = v16;
  void v16[2] = a2;
  v16[3] = a3;
  v16[4] = v13;
  v16[5] = v12;
  v16[6] = v15;
  v16[7] = v14;
  sub_10006D0EC(a2, a3);
  sub_10006D0EC(v13, v12);
  sub_10006D0EC(v15, v14);
  sub_10006D0EC(a2, a3);
  sub_1001861FC(v13, v12, v15, v14);
  uint64_t v17 = sub_100188DF0(v38);
  if (v4)
  {
    sub_10006D144(v13, v12);
    sub_10006D144(v15, v14);
    sub_10006D144(a2, a3);
    sub_1001861A8(v13, v12, v15, v14);
    return sub_10007594C((uint64_t)v38);
  }
  else
  {
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    sub_10007594C((uint64_t)v38);
    sub_100184A9C(v37, v20, v21);
    unint64_t v22 = v37;
    unint64_t v35 = v21;
    unint64_t v36 = v20;
    if (qword_100453718 != -1) {
      swift_once();
    }
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v24 = sub_100056638(v22, isa);

    if (v24)
    {
      swift_willThrow();
      sub_10006D144(v36, v35);
      sub_10006D144(a2, a3);
      sub_1001861A8(v13, v12, v15, v14);
      sub_10006D144(v13, v12);
      uint64_t v25 = v15;
      unint64_t v26 = v14;
    }
    else
    {
      sub_100184F80(v37, v36, v35);
      uint64_t v27 = sub_100088F40((uint64_t)&off_10040EF88);
      unint64_t v29 = v28;
      Class v34 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v27, v29);
      v38[0] = 0;
      Class v30 = v34;
      id v31 = sub_100056104(v37, v34, v38);

      if (v31)
      {
        id v32 = v38[0];
      }
      else
      {
        id v33 = v38[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
      sub_10006D144(v13, v12);
      sub_10006D144(v15, v14);
      sub_10006D144(a2, a3);
      sub_1001861A8(v13, v12, v15, v14);
      unint64_t v26 = v35;
      uint64_t v25 = v36;
    }
    return sub_10006D144(v25, v26);
  }
}

uint64_t sub_1001866FC(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (qword_100453718 != -1) {
    swift_once();
  }
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v10 = sub_100056638(a1, isa);

  if (v10) {
    return swift_willThrow();
  }
  v26[3] = &_s14ImportTLKInputVN;
  v26[4] = &off_100416B30;
  unint64_t v12 = (void *)swift_allocObject();
  v26[0] = v12;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = 0;
  v12[6] = 0;
  v12[7] = 0x2000000000000000;
  swift_bridgeObjectRetain_n();
  sub_10006D0EC(a2, a3);
  sub_10006D0EC(a2, a3);
  sub_1001861FC(a4, 0, 0, 0x2000000000000000uLL);
  uint64_t v13 = sub_100188DF0(v26);
  if (v4)
  {
    swift_bridgeObjectRelease();
    sub_10006D144(a2, a3);
    sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
    return sub_10007594C((uint64_t)v26);
  }
  else
  {
    unint64_t v15 = v13;
    unint64_t v16 = v14;
    sub_10007594C((uint64_t)v26);
    sub_100184A9C(a1, v15, v16);
    Class v17 = Data._bridgeToObjectiveC()().super.isa;
    id v18 = sub_100056638(a1, v17);

    if (v18)
    {
      swift_willThrow();
      sub_10006D144(v15, v16);
      sub_10006D144(a2, a3);
      sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
      return swift_bridgeObjectRelease();
    }
    else
    {
      sub_100184F80(a1, v15, v16);
      uint64_t v19 = sub_100088F40((uint64_t)&off_10040F0B8);
      unint64_t v21 = v20;
      Class v25 = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v19, v21);
      v26[0] = 0;
      id v22 = sub_100056104(a1, v25, v26);

      if (v22)
      {
        id v23 = v26[0];
        swift_bridgeObjectRelease();
      }
      else
      {
        id v24 = v26[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_bridgeObjectRelease();
      }
      sub_10006D144(a2, a3);
      sub_1001861A8(a4, 0, 0, 0x2000000000000000uLL);
      return sub_10006D144(v15, v16);
    }
  }
}

uint64_t sub_100186A68()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_1001861A8(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 64, 7);
}

ValueMetadata *type metadata accessor for Henosis()
{
  return &type metadata for Henosis;
}

uint64_t sub_100186ABC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  type metadata accessor for SHA256Digest();
  sub_100188360(&qword_1004568B8, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  unint64_t v4 = dispatch thunk of static Digest.byteCount.getter();
  if ((a3 & 0x8000000000000000) != 0 || (v4 & 0x8000000000000000) != 0) {
    goto LABEL_7;
  }
  if (!is_mul_ok(v4, 0xFFFFFFFFuLL))
  {
    __break(1u);
LABEL_7:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_8;
  }
  if (0xFFFFFFFF * v4 > a3)
  {
    uint64_t v7 = sub_100089000(a3);
    unint64_t v8 = v5;
    __chkstk_darwin(v7, v5);
    SharedSecret.withUnsafeBytes<A>(_:)();
    sub_10006D0EC(v7, v8);
    Data.subdata(in:)();
    sub_10006D144(v7, v8);
    SymmetricKey.init<A>(data:)();
    return sub_10006D144(v7, v8);
  }
LABEL_8:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100186CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v62 = a6;
  uint64_t v63 = a7;
  uint64_t v64 = a1;
  uint64_t v65 = a2;
  uint64_t v61 = type metadata accessor for SHA256Digest();
  uint64_t v10 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v11);
  uint64_t v60 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SHA256();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t result = __chkstk_darwin(v13, v15);
  id v18 = (char *)v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3 >= 1)
  {
    uint64_t v68 = a3;
    uint64_t v19 = sub_100188360((unint64_t *)&qword_1004568C0, (void (*)(uint64_t))&type metadata accessor for SHA256);
    uint64_t v53 = a5 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v67 = a4;
    uint64_t v51 = (int)a4;
    uint64_t v50 = a4 >> 32;
    v49[1] = (a4 >> 32) - (int)a4;
    uint64_t v49[2] = (char *)v72 + BYTE6(a5);
    uint64_t v57 = (void (**)(uint64_t *, char *, uint64_t))(v10 + 16);
    uint64_t v56 = (void (**)(char *, uint64_t))(v10 + 8);
    unint64_t v55 = (uint64_t (**)(char *, uint64_t))(v14 + 8);
    unsigned int v20 = 1;
    long long v59 = xmmword_100378460;
    unint64_t v58 = a5 >> 62;
    unint64_t v54 = (char *)&type metadata for () + 8;
    unint64_t v52 = a5;
    uint64_t v66 = v19;
    do
    {
      dispatch thunk of HashFunction.init()();
      sub_10006C51C(&qword_1004568A8);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = v59;
      *(unsigned char *)(v21 + 32) = HIBYTE(v20);
      *(unsigned char *)(v21 + 33) = BYTE2(v20);
      if (v20 == 0x10000)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10018760CLL);
      }
      uint64_t v22 = v21;
      *(_WORD *)(v21 + 34) = bswap32(v20) >> 16;
      uint64_t v23 = sub_10006C51C(&qword_1004545C0);
      uint64_t v73 = v23;
      unint64_t v74 = sub_100188304();
      v72[0] = v22;
      id v24 = sub_100075908(v72, v23);
      uint64_t v25 = *v24;
      size_t v26 = *(void *)(*v24 + 16);
      if (v26)
      {
        if (v26 >= 0xF)
        {
          type metadata accessor for __DataStorage();
          swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v27 = __DataStorage.init(bytes:length:)();
          if (v26 > 0x7FFFFFFE)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t inited = swift_initStackObject();
            *(void *)(inited + 16) = 0;
            *(void *)(inited + 24) = v26;
            swift_bridgeObjectRelease();
            sub_10007594C((uint64_t)v72);
            uint64_t v32 = *(void *)(inited + 16);
            uint64_t v33 = *(void *)(inited + 24);
            swift_retain();
            if (__DataStorage._bytes.getter() && __OFSUB__(v32, __DataStorage._offset.getter())) {
              goto LABEL_40;
            }
            if (__OFSUB__(v33, v32)) {
              goto LABEL_37;
            }
            __DataStorage._length.getter();
            dispatch thunk of HashFunction.update(bufferPointer:)();
            swift_release();
            swift_setDeallocating();
            Data.RangeReference.__deallocating_deinit();
            swift_release();
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_10007594C((uint64_t)v72);
            sub_10006D0EC(v26 << 32, v27 | 0x4000000000000000);
            if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter())) {
              goto LABEL_39;
            }
            __DataStorage._length.getter();
            dispatch thunk of HashFunction.update(bufferPointer:)();
            swift_release_n();
          }
          a5 = v52;
          goto LABEL_18;
        }
        memset(__dst, 0, sizeof(__dst));
        char v71 = v26;
        memcpy(__dst, (const void *)(v25 + 32), v26);
        __int16 v28 = *(_WORD *)&__dst[12];
        uint64_t v29 = *(void *)__dst;
        int v30 = *(_DWORD *)&__dst[8];
        sub_10007594C((uint64_t)v72);
        v72[0] = v29;
        LODWORD(v72[1]) = v30;
        WORD2(v72[1]) = v28;
      }
      else
      {
        sub_10007594C((uint64_t)v72);
        memset(v72, 0, 14);
      }
      dispatch thunk of HashFunction.update(bufferPointer:)();
LABEL_18:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      uint64_t v34 = v67;
      switch(v58)
      {
        case 1uLL:
          if (v50 < v51) {
            goto LABEL_34;
          }
          sub_10006D0EC(v67, a5);
          if (__DataStorage._bytes.getter() && __OFSUB__(v51, __DataStorage._offset.getter())) {
            goto LABEL_38;
          }
          __DataStorage._length.getter();
LABEL_29:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          uint64_t v39 = v34;
          unint64_t v41 = a5;
          unint64_t v40 = a5;
          break;
        case 2uLL:
          uint64_t v35 = *(void *)(v67 + 16);
          unint64_t v36 = a5;
          uint64_t v37 = *(void *)(v67 + 24);
          sub_10006D0EC(v67, v36);
          swift_retain();
          swift_retain();
          if (__DataStorage._bytes.getter() && __OFSUB__(v35, __DataStorage._offset.getter())) {
            goto LABEL_36;
          }
          if (__OFSUB__(v37, v35)) {
            goto LABEL_35;
          }
          __DataStorage._length.getter();
          dispatch thunk of HashFunction.update(bufferPointer:)();
          swift_release();
          uint64_t v38 = v67;
          swift_release();
          uint64_t v39 = v38;
          unint64_t v40 = v52;
          unint64_t v41 = v52;
          break;
        case 3uLL:
          memset(v72, 0, 14);
          goto LABEL_29;
        default:
          v72[0] = v67;
          LOWORD(v72[1]) = a5;
          BYTE2(v72[1]) = BYTE2(a5);
          BYTE3(v72[1]) = BYTE3(a5);
          BYTE4(v72[1]) = BYTE4(a5);
          BYTE5(v72[1]) = BYTE5(a5);
          goto LABEL_29;
      }
      sub_10006D144(v39, v40);
      uint64_t v42 = v60;
      dispatch thunk of HashFunction.finalize()();
      uint64_t v43 = v61;
      uint64_t v73 = v61;
      unint64_t v74 = sub_100188360(&qword_1004568C8, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
      Class v44 = sub_1001883A8(v72);
      (*v57)(v44, v42, v43);
      uint64_t v45 = sub_100075908(v72, v73);
      __chkstk_darwin(v45, v46);
      uint64_t v47 = v69;
      dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
      sub_10007594C((uint64_t)v72);
      (*v56)(v42, v43);
      uint64_t result = (*v55)(v18, v13);
      uint64_t v48 = v68 - v63;
      if (__OFSUB__(v68, v63))
      {
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
      }
      v68 -= v63;
      uint64_t v69 = v47;
      ++v20;
      a5 = v41;
    }
    while (v48 > 0);
  }
  return result;
}

uint64_t sub_10018761C()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  unint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = P256.KeyAgreement.PublicKey.x963Representation.getter();
  unint64_t v7 = v6;
  uint64_t v8 = String.count.getter();
  uint64_t v9 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v10 = String.count.getter();
  uint64_t v11 = v9 + v10;
  if (__OFADD__(v9, v10))
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x1001879C4);
  }
  uint64_t v12 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      LODWORD(v12) = HIDWORD(v5) - v5;
      if (__OFSUB__(HIDWORD(v5), v5)) {
        goto LABEL_17;
      }
      uint64_t v12 = (int)v12;
LABEL_8:
      if (__OFADD__(v11, v12)) {
        goto LABEL_16;
      }
      v30[0] = sub_100089000(v11 + v12);
      v30[1] = v16;
      sub_10006C51C(&qword_1004568A8);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_100378290;
      unint64_t v18 = String.count.getter();
      if ((v18 & 0x8000000000000000) != 0 || v18 >= 0x100) {
        goto LABEL_21;
      }
      *(unsigned char *)(v17 + 32) = v18;
      uint64_t v19 = sub_100088F40(v17);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      Data.append(_:)();
      sub_10006D144(v19, v21);
      static String.Encoding.utf8.getter();
      uint64_t v22 = String.data(using:allowLossyConversion:)();
      unint64_t v24 = v23;
      uint64_t v25 = *(void (**)(char *, uint64_t))(v1 + 8);
      v25(v4, v0);
      if (v24 >> 60 == 15) {
        goto LABEL_19;
      }
      Data.append(_:)();
      sub_100075868(v22, v24);
      static String.Encoding.utf8.getter();
      uint64_t v26 = String.data(using:allowLossyConversion:)();
      unint64_t v28 = v27;
      v25(v4, v0);
      if (v28 >> 60 == 15) {
        goto LABEL_20;
      }
      Data.append(_:)();
      sub_100075868(v26, v28);
      Data.append(_:)();
      sub_10006D144(v5, v7);
      return v30[0];
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v13 = *(void *)(v5 + 24);
      BOOL v15 = __OFSUB__(v13, v14);
      uint64_t v12 = v13 - v14;
      if (!v15) {
        goto LABEL_8;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_8;
    default:
      uint64_t v12 = BYTE6(v7);
      goto LABEL_8;
  }
}

char *sub_1001879D4(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v72 = a1;
  uint64_t v73 = a2;
  uint64_t v6 = sub_10006C51C(&qword_1004568B0);
  __chkstk_darwin(v6 - 8, v7);
  object = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v69 = *(void *)(v9 - 8);
  uint64_t v70 = v9;
  __chkstk_darwin(v9, v10);
  char v71 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for SymmetricKey();
  uint64_t v77 = *(void *)(v79 - 8);
  __chkstk_darwin(v79, v12);
  unint64_t v75 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for SharedSecret();
  uint64_t v76 = *(void *)(v78 - 8);
  __chkstk_darwin(v78, v14);
  os_log_type_t v81 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v80 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v82 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20, v21);
  unint64_t v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  unint64_t v27 = (char *)&v61 - v26;
  v84[0] = a3;
  v84[1] = a4;
  sub_10006D0EC(a3, a4);
  uint64_t v28 = v85;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  if (!v28)
  {
    unint64_t v66 = a4;
    uint64_t v67 = v24;
    uint64_t v65 = a3;
    uint64_t v68 = v16;
    uint64_t v29 = v82;
    uint64_t v85 = v20;
    P256.KeyAgreement.PrivateKey.init()();
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
    uint64_t v62 = v27;
    uint64_t v63 = v19;
    int v30 = v67;
    P256.KeyAgreement.PrivateKey.publicKey.getter();
    uint64_t v31 = sub_10018761C();
    uint64_t v33 = v32;
    uint64_t v64 = *(void (**)(char *, uint64_t))(v29 + 8);
    v64(v30, v85);
    sub_100186ABC(v31, v33, 0x20uLL);
    v84[0] = v72;
    v84[1] = v73;
    long long v83 = xmmword_10037A250;
    sub_10008BFB8();
    uint64_t v34 = (uint64_t)object;
    AES.GCM.Nonce.init<A>(data:)();
    uint64_t v61 = v31;
    unint64_t v72 = v33;
    uint64_t v82 = v29 + 8;
    uint64_t v35 = type metadata accessor for AES.GCM.Nonce();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
    static AES.GCM.seal<A>(_:using:nonce:)();
    uint64_t v36 = v80;
    uint64_t v73 = 0;
    sub_10008E734(v34, &qword_1004568B0);
    sub_10006C51C(&qword_100455670);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378460;
    strcpy((char *)v84, "version");
    v84[1] = 0xE700000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v39;
    *(void *)(inited + 80) = v40;
    strcpy((char *)v84, "publicKeyHash");
    HIWORD(v84[1]) = -4864;
    AnyHashable.init<A>(_:)();
    uint64_t v41 = sub_1002B3BD0(v65, v66);
    unint64_t v43 = v42;
    Swift::String v44 = Data.base64EncodedString(options:)(0);
    object = (char *)v44._object;
    sub_10006D144(v41, v43);
    *(void *)(inited + 168) = &type metadata for String;
    uint64_t v45 = object;
    *(void *)(inited + 144) = v44._countAndFlagsBits;
    *(void *)(inited + 152) = v45;
    v84[0] = 0xD000000000000012;
    v84[1] = 0x80000001003B29F0;
    AnyHashable.init<A>(_:)();
    uint64_t v46 = v67;
    P256.KeyAgreement.PrivateKey.publicKey.getter();
    uint64_t v47 = P256.KeyAgreement.PublicKey.x963Representation.getter();
    unint64_t v49 = v48;
    v64(v46, v85);
    Swift::String v50 = Data.base64EncodedString(options:)(0);
    sub_10006D144(v47, v49);
    *(void *)(inited + 240) = &type metadata for String;
    *(Swift::String *)(inited + 216) = v50;
    v84[0] = 1635017060;
    v84[1] = 0xE400000000000000;
    AnyHashable.init<A>(_:)();
    uint64_t v51 = v71;
    uint64_t v52 = AES.GCM.SealedBox.ciphertext.getter();
    unint64_t v54 = v53;
    uint64_t v55 = AES.GCM.SealedBox.tag.getter();
    unint64_t v57 = v56;
    v84[0] = v52;
    v84[1] = v54;
    sub_10006D0EC(v52, v54);
    sub_100141068(v55, v57);
    sub_10006D144(v55, v57);
    sub_10006D144(v52, v54);
    uint64_t v58 = v84[0];
    unint64_t v59 = v84[1];
    Swift::String v60 = Data.base64EncodedString(options:)(0);
    sub_10006D144(v58, v59);
    *(void *)(inited + 312) = &type metadata for String;
    *(Swift::String *)(inited + 288) = v60;
    uint64_t v19 = (char *)sub_1001DB24C(inited);
    sub_10006D144(v61, v72);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v51, v70);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v75, v79);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v81, v78);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v63, v68);
    v64(v62, v85);
  }
  return v19;
}

uint64_t sub_1001882E0(uint64_t a1, uint64_t a2)
{
  return sub_100186CF4(a1, a2, *(void *)(v2 + 16), **(void **)(v2 + 24), *(void *)(*(void *)(v2 + 24) + 8), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

unint64_t sub_100188304()
{
  unint64_t result = qword_1004545C8;
  if (!qword_1004545C8)
  {
    sub_10006D220(&qword_1004545C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004545C8);
  }
  return result;
}

uint64_t sub_100188360(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_1001883A8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10018840C()
{
  return sub_1000888E0();
}

char *sub_100188428(uint64_t a1, uint64_t a2)
{
  uint64_t v70 = a2;
  uint64_t v3 = type metadata accessor for AES.GCM.Nonce();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v64 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SymmetricKey();
  uint64_t v65 = *(void *)(v11 - 8);
  uint64_t v66 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SharedSecret();
  uint64_t v67 = *(void *)(v15 - 8);
  uint64_t v68 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v19 = *(void *)(v69 - 8);
  __chkstk_darwin(v69, v20);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v71 = 0xD000000000000012;
  unint64_t v72 = 0x80000001003B29F0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v23 = sub_1002C0B68((uint64_t)v73), (v24 & 1) != 0))
  {
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v23, (uint64_t)&v74);
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  sub_1000AE724((uint64_t)v73);
  if (!*((void *)&v75 + 1))
  {
    sub_10008E734((uint64_t)&v74, (uint64_t *)&unk_1004556C0);
    goto LABEL_10;
  }
  uint64_t v63 = v19;
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    sub_1000AE7D8();
    int v30 = "Missing ephemeralPublicKey";
    goto LABEL_11;
  }
  uint64_t v60 = v7;
  uint64_t v25 = v14;
  uint64_t v26 = v18;
  unint64_t v27 = v22;
  uint64_t v61 = Data.init(base64Encoded:options:)();
  unint64_t v29 = v28;
  swift_bridgeObjectRelease();
  uint64_t v62 = (char *)v29;
  if (v29 >> 60 == 15)
  {
    sub_1000AE7D8();
    int v30 = "Invalid ephemeralPublicKey";
LABEL_11:
    sub_100299FAC(0, 1, 0xD00000000000001ALL, (unint64_t)(v30 - 32) | 0x8000000000000000, 0);
    swift_willThrow();
    return v6;
  }
  unint64_t v71 = 1635017060;
  unint64_t v72 = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v32 = sub_1002C0B68((uint64_t)v73);
    uint64_t v33 = v27;
    if (v34)
    {
      sub_1000AA580(*(void *)(a1 + 56) + 32 * v32, (uint64_t)&v74);
    }
    else
    {
      long long v74 = 0u;
      long long v75 = 0u;
    }
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
    uint64_t v33 = v27;
  }
  uint64_t v35 = v26;
  sub_1000AE724((uint64_t)v73);
  if (!*((void *)&v75 + 1))
  {
    sub_10008E734((uint64_t)&v74, (uint64_t *)&unk_1004556C0);
    uint64_t v6 = v62;
    uint64_t v38 = v61;
LABEL_24:
    sub_1000AE7D8();
    sub_100299FAC(0, 1, 0x20676E697373694DLL, 0xEC00000061746164, 0);
    swift_willThrow();
    uint64_t v42 = v38;
    unint64_t v43 = (unint64_t)v6;
    goto LABEL_25;
  }
  uint64_t v36 = v25;
  char v37 = swift_dynamicCast();
  uint64_t v38 = v61;
  if ((v37 & 1) == 0)
  {
    uint64_t v6 = v62;
    goto LABEL_24;
  }
  uint64_t v59 = Data.init(base64Encoded:options:)();
  unint64_t v40 = v39;
  swift_bridgeObjectRelease();
  unint64_t v41 = (unint64_t)v62;
  if (v40 >> 60 == 15)
  {
    sub_1000AE7D8();
    sub_100299FAC(0, 1, 0x2064696C61766E49, 0xEC00000061746164, 0);
    swift_willThrow();
    uint64_t v42 = v38;
    unint64_t v43 = v41;
LABEL_25:
    sub_100075868(v42, v43);
    return v6;
  }
  unint64_t v58 = v40;
  *(void *)&v73[0] = v38;
  *((void *)&v73[0] + 1) = v62;
  sub_10006D0EC(v38, (unint64_t)v62);
  unint64_t v44 = v76;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  if (v44)
  {
    sub_100075868(v38, v41);
    uint64_t v42 = v59;
    unint64_t v43 = v58;
    goto LABEL_25;
  }
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
  uint64_t v70 = sub_10018761C();
  unint64_t v76 = v45;
  sub_100186ABC(v70, v45, 0x20uLL);
  unint64_t v46 = v58 >> 62;
  uint64_t v47 = 0;
  uint64_t v48 = v59;
  switch(v58 >> 62)
  {
    case 1uLL:
      LODWORD(v47) = HIDWORD(v59) - v59;
      if (__OFSUB__(HIDWORD(v59), v59)) {
        goto LABEL_46;
      }
      uint64_t v47 = (int)v47;
LABEL_34:
      uint64_t v57 = v47 - 16;
      if (__OFSUB__(v47, 16))
      {
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        JUMPOUT(0x100188DD0);
      }
      v73[0] = xmmword_10037A250;
      sub_10008BFB8();
      AES.GCM.Nonce.init<A>(data:)();
      if (v57 < 0) {
        goto LABEL_44;
      }
      *(void *)&v73[0] = Data.subdata(in:)();
      *((void *)&v73[0] + 1) = v52;
      uint64_t v53 = 0;
      switch((int)v46)
      {
        case 1:
          if (__OFSUB__(HIDWORD(v48), v48)) {
            goto LABEL_48;
          }
          uint64_t v53 = HIDWORD(v48) - (int)v48;
LABEL_41:
          if (v53 < v57) {
            goto LABEL_45;
          }
          *(void *)&long long v74 = Data.subdata(in:)();
          *((void *)&v74 + 1) = v56;
          AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
          uint64_t v6 = (char *)static AES.GCM.open(_:using:)();
          sub_10006D144(v70, v76);
          sub_100075868(v59, v58);
          sub_100075868(v61, (unint64_t)v62);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v10, v60);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v66);
          (*(void (**)(char *, uint64_t))(v67 + 8))(v35, v68);
          (*(void (**)(char *, uint64_t))(v63 + 8))(v33, v69);
          break;
        case 2:
          uint64_t v55 = *(void *)(v48 + 16);
          uint64_t v54 = *(void *)(v48 + 24);
          uint64_t v53 = v54 - v55;
          if (!__OFSUB__(v54, v55)) {
            goto LABEL_41;
          }
          goto LABEL_49;
        case 3:
          goto LABEL_41;
        default:
          uint64_t v53 = BYTE6(v58);
          goto LABEL_41;
      }
      return v6;
    case 2uLL:
      uint64_t v50 = *(void *)(v59 + 16);
      uint64_t v49 = *(void *)(v59 + 24);
      BOOL v51 = __OFSUB__(v49, v50);
      uint64_t v47 = v49 - v50;
      if (!v51) {
        goto LABEL_34;
      }
      goto LABEL_47;
    case 3uLL:
      goto LABEL_34;
    default:
      uint64_t v47 = BYTE6(v58);
      goto LABEL_34;
  }
}

uint64_t sub_100188DF0(void *a1)
{
  sub_100075908(a1, a1[3]);
  swift_getDynamicType();
  (*(void (**)(uint64_t *__return_ptr))(a1[4] + 8))(&v10);
  uint64_t v3 = v12;
  uint64_t v4 = v13;
  unsigned __int8 v5 = v14;
  uint64_t v6 = sub_10018DB70((uint64_t)a1, v10, v11, v12, v13, v14);
  sub_10016FC10(v3, v4, v5);
  if (v1)
  {
    uint64_t v22 = v15;
    return sub_10016FC34((uint64_t)&v22);
  }
  else
  {
    uint64_t v21 = v15;
    sub_10016FC34((uint64_t)&v21);
    v9[0] = sub_100089000(v6);
    v9[1] = v7;
    sub_100075908(a1, a1[3]);
    swift_getDynamicType();
    (*(void (**)(__n128 *__return_ptr))(a1[4] + 8))(&v16);
    sub_10018ADFC(a1, &v16, (uint64_t)v9);
    sub_10016FB80(&v17, &v20);
    sub_10016FBDC((uint64_t)&v20);
    uint64_t v19 = v18;
    sub_10016FC34((uint64_t)&v19);
    return v9[0];
  }
}

void sub_100188F88(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = -64;
  *(void *)(a1 + 40) = &_swiftEmptyArrayStorage;
}

unint64_t sub_100188FB0(uint64_t a1, __n128 *a2)
{
  sub_10016FB80(a2 + 1, &v103);
  sub_10016FB80(&v103, &v120);
  if (v121 <= 0x3Fu)
  {
    unint64_t v5 = v120.n128_u64[0];
    sub_10018F838((uint64_t)&v103);
    uint64_t v6 = sub_10018C488((uint64_t *)a1, 1);
    if (v2)
    {
      sub_10016FBDC((uint64_t)&v103);
    }
    else
    {
      uint64_t v96 = a1;
      a1 = *(void *)(v5 + 16);
      if (a1)
      {
        unint64_t v25 = v5 + 48;
        uint64_t v97 = v6;
        while ((*(unsigned char *)(v25 + 8) & 1) == 0)
        {
          if (*(void *)v25 == v6)
          {
            uint64_t v29 = *(void *)(v25 - 8);
            uint64_t v98 = *(void *)(v25 - 16);
            char v99 = *(unsigned char *)(v25 + 9);
            uint64_t v30 = *(void *)(v25 + 16);
            uint64_t v31 = *(void *)(v25 + 24);
            unsigned __int8 v32 = *(unsigned char *)(v25 + 32);
            uint64_t v33 = *(void *)(v25 + 40);
            swift_bridgeObjectRetain();
            sub_10018F814(v30, v31, v32);
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1002CFB78(0, _swiftEmptyArrayStorage[2] + 1, 1);
            }
            unint64_t v27 = _swiftEmptyArrayStorage[2];
            unint64_t v26 = _swiftEmptyArrayStorage[3];
            if (v27 >= v26 >> 1) {
              sub_1002CFB78(v26 > 1, v27 + 1, 1);
            }
            _swiftEmptyArrayStorage[2] = v27 + 1;
            unint64_t v28 = &_swiftEmptyArrayStorage[8 * v27];
            uint64_t v6 = v97;
            void v28[4] = v98;
            id v28[5] = v29;
            v28[6] = v97;
            *((unsigned char *)v28 + 56) = 0;
            *((unsigned char *)v28 + 57) = v99;
            v28[8] = v30;
            v28[9] = v31;
            *((unsigned char *)v28 + 80) = v32;
            v28[11] = v33;
          }
          v25 += 64;
          if (!--a1) {
            goto LABEL_27;
          }
        }
LABEL_62:
        sub_10007BF50();
        swift_allocError();
        *(void *)(v61 + 8) = 0;
        *(void *)(v61 + 16) = 0;
        *(void *)uint64_t v61 = 5;
        *(unsigned char *)(v61 + 24) = 3;
        swift_willThrow();
        sub_10016FBDC((uint64_t)&v103);
        swift_release();
      }
      else
      {
LABEL_27:
        sub_10016FBDC((uint64_t)&v103);
        if (_swiftEmptyArrayStorage[2])
        {
          uint64_t v34 = _swiftEmptyArrayStorage[5];
          uint64_t v100 = _swiftEmptyArrayStorage[4];
          uint64_t v35 = _swiftEmptyArrayStorage[6];
          char v36 = _swiftEmptyArrayStorage[7];
          char v37 = BYTE1(_swiftEmptyArrayStorage[7]);
          uint64_t v38 = _swiftEmptyArrayStorage[8];
          uint64_t v39 = _swiftEmptyArrayStorage[9];
          uint64_t v40 = _swiftEmptyArrayStorage[11];
          unsigned __int8 v41 = _swiftEmptyArrayStorage[10];
          swift_bridgeObjectRetain();
          sub_10018F814(v38, v39, v41);
          swift_bridgeObjectRetain();
          swift_release();
          uint64_t v104 = v35;
          char v105 = v36;
          char v106 = v37;
          uint64_t v107 = v38;
          uint64_t v108 = v39;
          unsigned __int8 v109 = v41;
          uint64_t v110 = v40;
          uint64_t v42 = swift_allocObject();
          swift_bridgeObjectRetain();
          sub_10018F814(v38, v39, v41);
          swift_bridgeObjectRetain();
          sub_10016FC10(v38, v39, v41);
          swift_bridgeObjectRelease();
          *(void *)(v42 + 16) = v100;
          *(void *)(v42 + 24) = v34;
          uint64_t v43 = sub_100188FB0(v96, &v104);
          swift_bridgeObjectRelease();
          sub_10016FC10(v38, v39, v41);
          swift_bridgeObjectRelease();
          *(void *)(v42 + 32) = v43;
          return v42 | 0xA000000000000000;
        }
        else
        {
          swift_release();
          sub_10007BF50();
          swift_allocError();
          *(void *)(v62 + 8) = 0;
          *(void *)(v62 + 16) = 0;
          *(void *)uint64_t v62 = 2;
          *(unsigned char *)(v62 + 24) = 3;
          swift_willThrow();
        }
      }
    }
    return a1;
  }
  sub_10016FB80(&v103, &v118);
  if (v119 == 192 && !v118.n128_u64[1] && v118.n128_u64[0] == 3)
  {
    uint64_t v7 = sub_10018CE08((uint64_t *)a1, 1);
    if (v2) {
      return a1;
    }
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    if ((a2->n128_u8[8] & 1) != 0 || (uint64_t v12 = v7, v13 = a2->n128_u64[0], a2->n128_u64[0] == v7))
    {
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = v10;
      *(void *)(v66 + 24) = v11;
      return v66 | 0x2000000000000000;
    }
    uint64_t v14 = *(void *)a1;
    unint64_t v15 = *(void *)(a1 + 8);
    a1 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        a1 = (int)v14;
        break;
      case 2uLL:
        a1 = *(void *)(v14 + 16);
        break;
      default:
        break;
    }
    sub_10007BF50();
    swift_allocError();
    *(void *)uint64_t v85 = v12;
    *(void *)(v85 + 8) = v13;
    *(void *)(v85 + 16) = a1;
    *(unsigned char *)(v85 + 24) = 0;
    swift_willThrow();
    uint64_t v86 = v10;
    unint64_t v87 = v11;
LABEL_109:
    sub_10006D144(v86, v87);
    return a1;
  }
  uint64_t v16 = sub_10018CE08((uint64_t *)a1, 0);
  if (v2) {
    return a1;
  }
  uint64_t v19 = v16;
  uint64_t v20 = v17;
  unint64_t v21 = v18;
  uint64_t v101 = v17;
  unint64_t v102 = v18;
  if ((a2->n128_u8[8] & 1) == 0)
  {
    unint64_t v22 = a2->n128_u64[0];
    if (a2->n128_u64[0] != v16)
    {
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = 0;
      switch(*(void *)(a1 + 8) >> 62)
      {
        case 1:
          uint64_t v24 = (int)v23;
          break;
        case 2:
          uint64_t v24 = *(void *)(v23 + 16);
          break;
        default:
          break;
      }
      sub_10007BF50();
      swift_allocError();
      *(void *)uint64_t v68 = v19;
      *(void *)(v68 + 8) = v22;
      *(void *)(v68 + 16) = v24;
      *(unsigned char *)(v68 + 24) = 0;
LABEL_107:
      swift_willThrow();
LABEL_108:
      uint64_t v86 = v101;
      unint64_t v87 = v102;
      goto LABEL_109;
    }
  }
  unint64_t v44 = a2[2].n128_u64[1];
  uint64_t v45 = *(void *)(v44 + 16);
  if (v45)
  {
    unint64_t v46 = (unint64_t)v18 >> 62;
    int v47 = HIDWORD(v17) - v17;
    BOOL v48 = __OFSUB__(HIDWORD(v17), v17);
    uint64_t v49 = (unsigned __int8 *)(v44 + 72);
    while (1)
    {
      uint64_t v50 = (uint64_t *)*((void *)v49 - 3);
      uint64_t v51 = *(v49 - 16);
      uint64_t v52 = *((void *)v49 - 1);
      uint64_t v53 = *v49;
      if ((*(v49 - 32) & 1) == 0)
      {
        uint64_t v18 = *((void *)v49 - 5);
        uint64_t v54 = BYTE6(v21);
        switch((int)v46)
        {
          case 1:
            uint64_t v54 = v47;
            if (v48) {
              goto LABEL_121;
            }
            goto LABEL_41;
          case 2:
            uint64_t v56 = *(void *)(v20 + 16);
            uint64_t v55 = *(void *)(v20 + 24);
            uint64_t v54 = v55 - v56;
            if (!__OFSUB__(v55, v56)) {
              goto LABEL_41;
            }
            goto LABEL_122;
          case 3:
            if (v18 <= 0) {
              break;
            }
LABEL_104:
            uint64_t v67 = 0;
            goto LABEL_105;
          default:
LABEL_41:
            if (v54 < v18) {
              goto LABEL_68;
            }
            break;
        }
      }
      if ((v51 & 1) == 0)
      {
        uint64_t v51 = BYTE6(v21);
        switch((int)v46)
        {
          case 1:
            uint64_t v51 = v47;
            if (v48) {
              goto LABEL_123;
            }
            goto LABEL_49;
          case 2:
            uint64_t v58 = *(void *)(v20 + 16);
            uint64_t v57 = *(void *)(v20 + 24);
            uint64_t v51 = v57 - v58;
            if (!__OFSUB__(v57, v58)) {
              goto LABEL_49;
            }
            goto LABEL_124;
          case 3:
            if (((unint64_t)v50 & 0x8000000000000000) == 0) {
              break;
            }
            goto LABEL_104;
          default:
LABEL_49:
            if ((uint64_t)v50 < v51) {
              goto LABEL_68;
            }
            break;
        }
      }
      if ((v53 & 1) == 0) {
        break;
      }
LABEL_35:
      v49 += 48;
      if (!--v45) {
        goto LABEL_64;
      }
    }
    uint64_t v53 = 0;
    switch((int)v46)
    {
      case 0:
        uint64_t v53 = BYTE6(v21);
        goto LABEL_58;
      case 1:
        uint64_t v53 = v47;
        if (v48) {
          goto LABEL_125;
        }
        goto LABEL_58;
      case 2:
        uint64_t v60 = *(void *)(v20 + 16);
        uint64_t v59 = *(void *)(v20 + 24);
        uint64_t v53 = v59 - v60;
        if (!__OFSUB__(v59, v60)) {
          goto LABEL_58;
        }
        goto LABEL_126;
      case 3:
LABEL_58:
        if (!v52)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
          JUMPOUT(0x100189BCCLL);
        }
        if (v53 == 0x8000000000000000 && v52 == -1)
        {
          __break(1u);
          goto LABEL_62;
        }
        if (!(v53 % v52)) {
          goto LABEL_35;
        }
LABEL_68:
        uint64_t v67 = 0;
        switch((int)v46)
        {
          case 1:
            uint64_t v67 = v47;
            if (!v48) {
              goto LABEL_105;
            }
            __break(1u);
            break;
          case 2:
            break;
          case 3:
            goto LABEL_105;
          default:
            uint64_t v67 = BYTE6(v21);
            goto LABEL_105;
        }
        uint64_t v89 = *(void *)(v20 + 16);
        uint64_t v88 = *(void *)(v20 + 24);
        uint64_t v67 = v88 - v89;
        if (!__OFSUB__(v88, v89))
        {
LABEL_105:
          sub_10007BF50();
          swift_allocError();
          *(void *)uint64_t v64 = v19;
          *(void *)(v64 + 8) = v67;
          *(void *)(v64 + 16) = 0;
          char v65 = 1;
LABEL_106:
          *(unsigned char *)(v64 + 24) = v65;
          goto LABEL_107;
        }
        __break(1u);
LABEL_98:
        uint64_t v71 = (uint64_t)sub_100189C5C(v50, v51, v18);
LABEL_99:
        if (v53)
        {
          swift_deallocUninitializedObject();
          goto LABEL_108;
        }
        *(void *)(v20 + 16) = v71;
        a1 = v20 | 0x6000000000000000;
        sub_10006D144(v101, v102);
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
LABEL_64:
    sub_10016FB80(&v103, &v114);
    unsigned __int8 v63 = v115;
    switch(v115 >> 6)
    {
      case 1:
        v115 &= 0x3Fu;
        __n128 v116 = v114;
        char v117 = v63 & 0x3F;
        sub_10018F7FC(&v116.n128_i64[1], (uint64_t)v122);
        sub_10018F7FC(v122, (uint64_t)&v124);
        char v69 = v125;
        uint64_t v70 = v124;
        uint64_t v20 = swift_allocObject();
        uint64_t v51 = v116.n128_u64[0];
        uint64_t v50 = &v101;
        LOBYTE(v18) = v70;
        uint64_t v53 = 0;
        if ((v69 & 1) == 0) {
          goto LABEL_98;
        }
        uint64_t v71 = sub_10018A300(&v101, v116.n128_i64[0], v70);
        goto LABEL_99;
      case 2:
        v115 &= 0x3Fu;
        __n128 v72 = *(__n128 *)(v114.n128_u64[0] + 32);
        long long v111 = *(_OWORD *)(v114.n128_u64[0] + 16);
        __n128 v112 = v72;
        long long v113 = *(_OWORD *)(v114.n128_u64[0] + 48);
        sub_10016FB80(&v112, &v123);
        uint64_t v126 = *((void *)&v113 + 1);
        a1 = swift_allocObject();
        sub_10018F838((uint64_t)&v123);
        sub_10018F86C((uint64_t)&v126);
        uint64_t v73 = _swiftEmptyArrayStorage;
        while (2)
        {
          switch(v21 >> 62)
          {
            case 1uLL:
              LODWORD(v74) = HIDWORD(v20) - v20;
              if (__OFSUB__(HIDWORD(v20), v20)) {
                goto LABEL_127;
              }
              uint64_t v74 = (int)v74;
LABEL_80:
              if (!v74)
              {
LABEL_112:
                *(void *)(a1 + 16) = v73;
                sub_10016FBDC((uint64_t)&v123);
                sub_10016FC34((uint64_t)&v126);
                sub_10006D144(v20, v21);
                return a1 | 0x8000000000000000;
              }
              uint64_t v78 = sub_10018C488(&v101, 1);
              if ((BYTE8(v111) & 1) != 0 || (uint64_t v79 = v78, v80 = v111, (void)v111 == v78))
              {
                uint64_t v81 = sub_100188FB0(&v101, &v111);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v73 = sub_100259C8C(0, v73[2] + 1, 1, v73);
                }
                unint64_t v83 = v73[2];
                unint64_t v82 = v73[3];
                if (v83 >= v82 >> 1) {
                  uint64_t v73 = sub_100259C8C((void *)(v82 > 1), v83 + 1, 1, v73);
                }
                v73[2] = v83 + 1;
                v73[v83 + 4] = v81;
                uint64_t v20 = v101;
                unint64_t v21 = v102;
                continue;
              }
              swift_bridgeObjectRelease();
              uint64_t v92 = 0;
              switch(v102 >> 62)
              {
                case 1uLL:
                  uint64_t v92 = (int)v101;
                  break;
                case 2uLL:
                  uint64_t v92 = *(void *)(v101 + 16);
                  break;
                default:
                  break;
              }
              sub_10007BF50();
              swift_allocError();
              *(void *)uint64_t v94 = v79;
              *(void *)(v94 + 8) = v80;
              *(void *)(v94 + 16) = v92;
              *(unsigned char *)(v94 + 24) = 0;
              swift_willThrow();
              swift_deallocUninitializedObject();
              sub_10016FBDC((uint64_t)&v123);
              sub_10016FC34((uint64_t)&v126);
              break;
            case 2uLL:
              uint64_t v76 = *(void *)(v20 + 16);
              uint64_t v75 = *(void *)(v20 + 24);
              BOOL v77 = __OFSUB__(v75, v76);
              uint64_t v74 = v75 - v76;
              if (!v77) {
                goto LABEL_80;
              }
              goto LABEL_128;
            case 3uLL:
              goto LABEL_112;
            default:
              uint64_t v74 = BYTE6(v21);
              goto LABEL_80;
          }
          goto LABEL_108;
        }
      case 3:
        if (v115 == 192 && *(_OWORD *)&v114 == 0)
        {
          uint64_t v84 = swift_allocObject();
          *(void *)(v84 + 16) = v20;
          *(void *)(v84 + 24) = v21;
          a1 = v84 | 0x2000000000000000;
        }
        else if (v115 == 192 && *(_OWORD *)&v114 == 1)
        {
          uint64_t v90 = swift_allocObject();
          *(void *)(v90 + 16) = v19;
          sub_10006D0EC(v20, v21);
          unint64_t v93 = sub_10018D1D4(v20, v21);
          sub_10006D144(v20, v21);
          *(void *)(v90 + 24) = v93;
          sub_10006D144(v20, v21);
          a1 = v90 | 0x4000000000000000;
        }
        else
        {
          if (v115 != 192 || *(_OWORD *)&v114 != 2)
          {
LABEL_66:
            sub_10007BF50();
            swift_allocError();
            *(void *)(v64 + 8) = 0;
            *(void *)(v64 + 16) = 0;
            *(void *)uint64_t v64 = 2;
            char v65 = 3;
            goto LABEL_106;
          }
          a1 = swift_allocObject();
          sub_10006D0EC(v20, v21);
          char v95 = sub_10018D48C(v20, v21);
          sub_10006D144(v20, v21);
          *(unsigned char *)(a1 + 16) = v95 & 1;
          sub_10006D144(v20, v21);
        }
        break;
      default:
        v115 &= 0x3Fu;
        goto LABEL_66;
    }
  }
  return a1;
}

void *sub_100189C5C(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v8 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v65 = a2;
  if (!v8)
  {
    uint64_t v61 = &_swiftEmptyDictionarySingleton;
    goto LABEL_47;
  }
  unint64_t v67 = 0;
  char v58 = a3;
  uint64_t v59 = a2 + 32;
  uint64_t v60 = a1;
  uint64_t v61 = &_swiftEmptyDictionarySingleton;
  unint64_t v64 = v8;
  while (2)
  {
    if (v67 >= v8) {
      goto LABEL_49;
    }
    uint64_t v9 = v59 + (v67 << 6);
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 16);
    char v12 = *(unsigned char *)(v9 + 24);
    int v13 = *(unsigned __int8 *)(v9 + 25);
    uint64_t v14 = *(void *)(v9 + 40);
    unsigned __int8 v71 = *(unsigned char *)(v9 + 48);
    unint64_t v15 = v67 + 1;
    uint64_t v16 = *a1;
    unint64_t v17 = a1[1];
    uint64_t v72 = *(void *)(v9 + 56);
    uint64_t v73 = *(void *)(v9 + 32);
    switch(v17 >> 62)
    {
      case 1uLL:
        BOOL v18 = __OFSUB__(HIDWORD(v16), v16);
        LODWORD(v16) = HIDWORD(v16) - v16;
        if (v18) {
          goto LABEL_50;
        }
        uint64_t v16 = (int)v16;
LABEL_9:
        if (!v16)
        {
LABEL_32:
          if (!*(unsigned char *)(v9 + 25))
          {
LABEL_40:
            swift_bridgeObjectRetain();
            sub_10018F814(v73, v14, v71);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_10007BF50();
            swift_allocError();
            *(void *)(v48 + 8) = 0;
            *(void *)(v48 + 16) = 0;
            *(void *)uint64_t v48 = 1;
            *(unsigned char *)(v48 + 24) = 3;
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v49 = v73;
            uint64_t v50 = v14;
            unsigned __int8 v51 = v71;
LABEL_46:
            sub_10016FC10(v49, v50, v51);
            goto LABEL_47;
          }
          if (v15 == v8)
          {
LABEL_38:
            swift_bridgeObjectRetain();
            sub_10018F814(v73, v14, v71);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_10016FC10(v73, v14, v71);
            goto LABEL_47;
          }
          int v47 = (unsigned char *)(v65 + (v67 << 6) + 121);
          while (v15 < v8)
          {
            if (*v47 != 1) {
              goto LABEL_40;
            }
            ++v15;
            v47 += 64;
            if (v8 == v15) {
              goto LABEL_38;
            }
          }
LABEL_52:
          __break(1u);
          JUMPOUT(0x10018A2E0);
        }
        uint64_t v22 = *(void *)(v9 + 8);
        swift_bridgeObjectRetain();
        uint64_t v23 = v14;
        sub_10018F814(v73, v14, v71);
        swift_bridgeObjectRetain();
        uint64_t v24 = sub_10018C488(a1, 1);
        if (v4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v45 = v73;
          uint64_t v46 = v14;
LABEL_31:
          sub_10016FC10(v45, v46, v71);
          goto LABEL_47;
        }
        uint64_t v25 = v24;
        if (v11 == v24) {
          char v26 = 1;
        }
        else {
          char v26 = v12;
        }
        if (v26)
        {
          char v27 = v12;
          uint64_t v63 = v10;
          uint64_t v29 = v72;
          uint64_t v28 = v73;
          unsigned __int8 v30 = v71;
          ++v67;
          goto LABEL_25;
        }
        if (!v13)
        {
          unsigned __int8 v30 = v71;
          uint64_t v41 = v73;
LABEL_42:
          uint64_t v52 = v25;
          uint64_t v53 = v11;
          swift_bridgeObjectRelease();
          uint64_t v54 = *v60;
          uint64_t v55 = 0;
          switch((unint64_t)v60[1] >> 62)
          {
            case 1uLL:
              uint64_t v55 = (int)v54;
              break;
            case 2uLL:
              uint64_t v55 = *(void *)(v54 + 16);
              break;
            default:
              break;
          }
          sub_10007BF50();
          swift_allocError();
          *(void *)uint64_t v56 = v52;
          *(void *)(v56 + 8) = v53;
          *(void *)(v56 + 16) = v55;
          *(unsigned char *)(v56 + 24) = 0;
          swift_willThrow();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v49 = v41;
          uint64_t v50 = v23;
          unsigned __int8 v51 = v30;
          goto LABEL_46;
        }
        unint64_t v31 = v67 + 1;
        uint64_t v32 = v67 << 6;
        uint64_t v62 = v24;
        while (1)
        {
          if (v64 == v31)
          {
            if ((v58 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              sub_10007BF50();
              swift_allocError();
              *(void *)(v44 + 8) = 0;
              *(void *)(v44 + 16) = 0;
              *(void *)uint64_t v44 = 1;
              *(unsigned char *)(v44 + 24) = 3;
              swift_willThrow();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v45 = v73;
            uint64_t v46 = v14;
            goto LABEL_31;
          }
          if (v31 >= v64)
          {
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
            goto LABEL_52;
          }
          unint64_t v68 = v31;
          uint64_t v63 = *(void *)(v65 + v32 + 96);
          uint64_t v69 = *(void *)(v65 + v32 + 112);
          char v70 = *(unsigned char *)(v65 + v32 + 120);
          int v66 = *(unsigned __int8 *)(v65 + v32 + 121);
          uint64_t v33 = *(void *)(v65 + v32 + 128);
          uint64_t v34 = *(void *)(v65 + v32 + 136);
          unsigned __int8 v35 = *(unsigned char *)(v65 + v32 + 144);
          uint64_t v36 = *(void *)(v65 + v32 + 152);
          uint64_t v37 = *(void *)(v65 + v32 + 104);
          swift_bridgeObjectRetain();
          uint64_t v38 = v33;
          uint64_t v39 = v33;
          uint64_t v23 = v34;
          uint64_t v40 = v34;
          unsigned __int8 v30 = v35;
          sub_10018F814(v39, v40, v35);
          uint64_t v29 = v36;
          uint64_t v11 = v69;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          sub_10016FC10(v73, v14, v71);
          swift_bridgeObjectRelease();
          char v27 = v70;
          uint64_t v25 = v62;
          if ((v70 & 1) != 0 || v69 == v62) {
            break;
          }
          v32 += 64;
          unint64_t v31 = v68 + 1;
          uint64_t v73 = v38;
          uint64_t v41 = v38;
          uint64_t v14 = v23;
          unsigned __int8 v71 = v30;
          if (!v66) {
            goto LABEL_42;
          }
        }
        unint64_t v67 = v68 + 1;
        uint64_t v28 = v38;
        uint64_t v22 = v37;
        LOBYTE(v13) = v66;
LABEL_25:
        uint64_t v74 = v11;
        char v75 = v27;
        char v76 = v13;
        uint64_t v77 = v28;
        uint64_t v78 = v23;
        unsigned __int8 v79 = v30;
        uint64_t v80 = v29;
        swift_bridgeObjectRetain();
        sub_10018F814(v28, v23, v30);
        swift_bridgeObjectRetain();
        uint64_t v42 = sub_100188FB0(v60, &v74);
        sub_10016FC10(v28, v23, v30);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v81 = v61;
        sub_1002CA544(v42, v63, v22, isUniquelyReferenced_nonNull_native);
        uint64_t v61 = v81;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10016FC10(v28, v23, v30);
        swift_bridgeObjectRelease();
        unint64_t v8 = v64;
        uint64_t v4 = 0;
        a1 = v60;
        if (v67 != v64) {
          continue;
        }
LABEL_47:
        swift_bridgeObjectRelease();
        return v61;
      case 2uLL:
        uint64_t v21 = v16 + 16;
        uint64_t v19 = *(void *)(v16 + 16);
        uint64_t v20 = *(void *)(v21 + 8);
        BOOL v18 = __OFSUB__(v20, v19);
        uint64_t v16 = v20 - v19;
        if (!v18) {
          goto LABEL_9;
        }
        goto LABEL_51;
      case 3uLL:
        goto LABEL_32;
      default:
        uint64_t v16 = BYTE6(v17);
        goto LABEL_9;
    }
  }
}

uint64_t sub_10018A300(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v95 = a3;
  uint64_t v96 = a1;
  uint64_t v6 = a2;
  unint64_t v7 = *(void *)(a2 + 16);
  unint64_t v105 = v7;
  uint64_t v106 = a2;
  if (v7)
  {
    uint64_t v93 = v3;
    unint64_t v8 = (void *)(a2 + 32);
    swift_bridgeObjectRetain();
    uint64_t v103 = 0;
    unint64_t v9 = 0;
    uint64_t v94 = (void *)(v6 + 32);
    while (1)
    {
      uint64_t v10 = &v8[8 * v9];
      uint64_t v11 = v10[1];
      uint64_t v104 = (unint64_t *)v10[2];
      uint64_t v12 = v10[4];
      uint64_t v4 = v10[5];
      LODWORD(v13) = *((unsigned __int8 *)v10 + 48);
      uint64_t v14 = v10[7];
      LODWORD(v102) = *((unsigned __int8 *)v10 + 24);
      swift_bridgeObjectRetain();
      sub_10018F814(v12, v4, v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10018F814(v12, v4, v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_10016FC10(v12, v4, v13);
      uint64_t v101 = v14;
      swift_bridgeObjectRelease();
      if (v102) {
        goto LABEL_70;
      }
      unint64_t v15 = v9 + 1;
      if (v15 == v7) {
        break;
      }
      uint64_t v98 = v11;
      uint64_t v99 = v12;
      uint64_t v100 = v4;
      LODWORD(v102) = v13;
      swift_bridgeObjectRetain();
      uint64_t v16 = v103;
      unint64_t v97 = v15;
      do
      {
        if (v15 >= v7)
        {
          __break(1u);
LABEL_79:
          swift_bridgeObjectRelease_n();
          sub_10016FC10(v102, v103, v104);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        uint64_t v17 = v6 + v16;
        BOOL v18 = *(unint64_t **)(v6 + v16 + 112);
        uint64_t v20 = *(void *)(v17 + 128);
        uint64_t v19 = *(void *)(v17 + 136);
        unsigned __int8 v21 = *(unsigned char *)(v17 + 144);
        char v22 = *(unsigned char *)(v17 + 120);
        swift_bridgeObjectRetain();
        sub_10018F814(v20, v19, v21);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_10018F814(v20, v19, v21);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_10016FC10(v20, v19, v21);
        swift_bridgeObjectRelease();
        if ((v22 & 1) != 0 || v104 == v18)
        {
          swift_bridgeObjectRelease();
          sub_10007BF50();
          swift_allocError();
          *(void *)(v23 + 8) = 0;
          *(void *)(v23 + 16) = 0;
          *(void *)uint64_t v23 = 2;
          *(unsigned char *)(v23 + 24) = 3;
          swift_willThrow();
          swift_bridgeObjectRelease();
          sub_10016FC10(v20, v19, v21);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10016FC10(v99, v100, v102);
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        ++v15;
        swift_bridgeObjectRelease();
        sub_10016FC10(v20, v19, v21);
        swift_bridgeObjectRelease();
        v16 += 64;
        unint64_t v7 = v105;
        uint64_t v6 = v106;
      }
      while (v105 != v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10016FC10(v99, v100, v102);
      swift_bridgeObjectRelease();
      v103 += 64;
      unint64_t v8 = v94;
      unint64_t v9 = v97;
    }
    swift_bridgeObjectRelease();
    sub_10016FC10(v12, v4, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v93;
    uint64_t v24 = v96;
    if (v7 > 0x40)
    {
      sub_10007BF50();
      swift_allocError();
      *(void *)(v89 + 8) = 0;
      *(void *)(v89 + 16) = 0;
      *(void *)uint64_t v89 = 2;
      char v90 = 3;
LABEL_75:
      *(unsigned char *)(v89 + 24) = v90;
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v24 = a1;
  }
  unint64_t v92 = 0;
  uint64_t v94 = &_swiftEmptyDictionarySingleton;
LABEL_14:
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  switch(v26 >> 62)
  {
    case 1uLL:
      BOOL v27 = __OFSUB__(HIDWORD(v25), v25);
      LODWORD(v25) = HIDWORD(v25) - v25;
      if (v27)
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        JUMPOUT(0x10018ADB0);
      }
      uint64_t v25 = (int)v25;
LABEL_19:
      if (!v25)
      {
LABEL_59:
        if (v7)
        {
          swift_bridgeObjectRetain();
          unint64_t v78 = 0;
          unsigned __int8 v79 = (unsigned __int8 *)(v6 + 57);
          do
          {
            uint64_t v80 = *(void *)(v79 + 7);
            uint64_t v81 = *(void *)(v79 + 15);
            unsigned __int8 v82 = v79[23];
            int v83 = *v79;
            swift_bridgeObjectRetain();
            sub_10018F814(v80, v81, v82);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            sub_10018F814(v80, v81, v82);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            sub_10016FC10(v80, v81, v82);
            swift_bridgeObjectRelease();
            if (v83 != 1 && (v78 > 0x3F || ((v92 >> v78) & 1) == 0))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_10007BF50();
              swift_allocError();
              *(void *)(v84 + 8) = 0;
              *(void *)(v84 + 16) = 0;
              *(void *)uint64_t v84 = 3;
              *(unsigned char *)(v84 + 24) = 3;
              swift_willThrow();
              swift_bridgeObjectRelease();
              sub_10016FC10(v80, v81, v82);
              return swift_bridgeObjectRelease();
            }
            ++v78;
            swift_bridgeObjectRelease();
            sub_10016FC10(v80, v81, v82);
            swift_bridgeObjectRelease();
            v79 += 64;
          }
          while (v105 != v78);
          swift_bridgeObjectRelease();
        }
        return (uint64_t)v94;
      }
      uint64_t v31 = sub_10018C488(v24, 1);
      if (v5) {
        return swift_bridgeObjectRelease();
      }
      uint64_t v12 = v31;
      uint64_t v32 = &v92;
      swift_bridgeObjectRetain();
      unint64_t v13 = 0;
      uint64_t v33 = _swiftEmptyArrayStorage;
LABEL_22:
      if (v13 <= v7) {
        unint64_t v34 = v7;
      }
      else {
        unint64_t v34 = v13;
      }
      unint64_t v35 = v13 << 6;
      break;
    case 2uLL:
      uint64_t v30 = v25 + 16;
      uint64_t v28 = *(void *)(v25 + 16);
      uint64_t v29 = *(void *)(v30 + 8);
      BOOL v27 = __OFSUB__(v29, v28);
      uint64_t v25 = v29 - v28;
      if (!v27) {
        goto LABEL_19;
      }
      goto LABEL_82;
    case 3uLL:
      goto LABEL_59;
    default:
      uint64_t v25 = BYTE6(v26);
      goto LABEL_19;
  }
  while (1)
  {
    if (v7 == v13)
    {
      swift_bridgeObjectRelease();
      if (v33[2] == 1)
      {
        uint64_t v93 = 0;
        unint64_t v51 = v33[4];
        uint64_t v101 = v33[5];
        uint64_t v52 = v33[6];
        uint64_t v53 = v33[7];
        char v54 = *((unsigned char *)v33 + 64);
        char v55 = *((unsigned char *)v33 + 65);
        uint64_t v56 = v33[9];
        uint64_t v57 = v33[10];
        int v58 = *((unsigned __int8 *)v33 + 88);
        uint64_t v59 = v33[12];
        swift_bridgeObjectRetain();
        uint64_t v102 = v56;
        uint64_t v103 = v57;
        LODWORD(v104) = v58;
        sub_10018F814(v56, v57, v58);
        swift_bridgeObjectRetain();
        swift_release();
        if (v51 - 65 < 0xFFFFFFFFFFFFFF7FLL) {
          goto LABEL_39;
        }
        if ((v51 & 0x8000000000000000) != 0)
        {
          if (v51 <= 0xFFFFFFFFFFFFFFC0)
          {
LABEL_39:
            unint64_t v60 = 0;
            uint64_t v61 = v96;
          }
          else
          {
            unint64_t v60 = 1uLL >> -(char)v51;
            uint64_t v61 = v96;
            if ((v60 & v92) != 0)
            {
LABEL_80:
              swift_bridgeObjectRelease();
              sub_10007BF50();
              swift_allocError();
              *(void *)(v91 + 8) = 0;
              *(void *)(v91 + 16) = 0;
              *(void *)uint64_t v91 = 6;
              *(unsigned char *)(v91 + 24) = 3;
              swift_willThrow();
              swift_bridgeObjectRelease();
              sub_10016FC10(v102, v103, v104);
              return swift_bridgeObjectRelease();
            }
          }
        }
        else
        {
          uint64_t v61 = v96;
          if (v51 >= 0x40)
          {
            unint64_t v60 = 0;
          }
          else
          {
            unint64_t v60 = 1 << v51;
            if (((1 << v51) & v92) != 0) {
              goto LABEL_80;
            }
          }
        }
        uint64_t v107 = v53;
        char v108 = v54;
        char v109 = v55;
        uint64_t v63 = v102;
        uint64_t v62 = v103;
        uint64_t v110 = v102;
        uint64_t v111 = v103;
        unsigned __int8 v64 = v104;
        char v112 = (char)v104;
        uint64_t v113 = v59;
        swift_bridgeObjectRetain();
        sub_10018F814(v63, v62, v64);
        swift_bridgeObjectRetain();
        sub_10016FC10(v63, v62, v64);
        swift_bridgeObjectRelease();
        uint64_t v65 = v93;
        uint64_t v66 = sub_100188FB0(v61, &v107);
        unint64_t v67 = v94;
        if (v65) {
          goto LABEL_79;
        }
        uint64_t v68 = v66;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        __n128 v114 = v67;
        unint64_t v71 = sub_1002C0AD0(v101, v52);
        uint64_t v72 = v67[2];
        BOOL v73 = (v70 & 1) == 0;
        uint64_t v74 = v72 + v73;
        if (__OFADD__(v72, v73)) {
          goto LABEL_83;
        }
        uint64_t v4 = v70;
        if (v67[3] >= v74)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_1002CD8AC();
          }
        }
        else
        {
          sub_1002C5C0C(v74, isUniquelyReferenced_nonNull_native);
          uint64_t v75 = sub_1002C0AD0(v101, v52);
          if ((v4 & 1) != (v76 & 1)) {
            goto LABEL_84;
          }
          unint64_t v71 = v75;
        }
        uint64_t v94 = v114;
        if (v4)
        {
          uint64_t v77 = v114[7];
          swift_release();
          *(void *)(v77 + 8 * v71) = v68;
        }
        else
        {
          sub_1002CBB18(v71, v101, v52, v68, v114);
          swift_bridgeObjectRetain();
        }
        uint64_t v6 = v106;
        uint64_t v24 = v96;
        v92 |= v60;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        sub_10016FC10(v102, v103, v104);
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        unint64_t v7 = v105;
        goto LABEL_14;
      }
      swift_release();
      if ((v95 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v86 = *v96;
        uint64_t v87 = 0;
        switch((unint64_t)v96[1] >> 62)
        {
          case 1uLL:
            uint64_t v87 = (int)v86;
            break;
          case 2uLL:
            uint64_t v87 = *(void *)(v86 + 16);
            break;
          default:
            break;
        }
        sub_10007BF50();
        swift_allocError();
        *(void *)uint64_t v89 = v12;
        *(void *)(v89 + 8) = v87;
        *(void *)(v89 + 16) = 0;
        char v90 = 2;
        goto LABEL_75;
      }
      uint64_t v24 = v96;
      sub_10018CE08(v96, 0);
      sub_10006D144(v49, v50);
      goto LABEL_14;
    }
    if (v34 == v13) {
      break;
    }
    uint64_t v4 = *(void *)(v6 + v35 + 48);
    char v36 = *(unsigned char *)(v6 + v35 + 56);
    ++v13;
    v35 += 64;
    if ((v36 & 1) != 0 || v4 == v12)
    {
      uint64_t v104 = v32;
      uint64_t v37 = v6 + v35;
      uint64_t v38 = *(void *)(v37 - 24);
      unint64_t v97 = *(void *)(v37 - 32);
      uint64_t v98 = v38;
      LODWORD(v99) = *(unsigned __int8 *)(v37 - 7);
      uint64_t v39 = *(void *)v37;
      uint64_t v40 = *(void *)(v37 + 8);
      int v41 = *(unsigned __int8 *)(v37 + 16);
      uint64_t v42 = *(void *)(v37 + 24);
      swift_bridgeObjectRetain();
      uint64_t v102 = v40;
      uint64_t v103 = v39;
      LODWORD(v101) = v41;
      sub_10018F814(v39, v40, v41);
      uint64_t v100 = v42;
      swift_bridgeObjectRetain();
      char v43 = swift_isUniquelyReferenced_nonNull_native();
      __n128 v114 = v33;
      if ((v43 & 1) == 0)
      {
        sub_1002CFB58(0, v33[2] + 1, 1);
        uint64_t v33 = v114;
      }
      unint64_t v45 = v33[2];
      unint64_t v44 = v33[3];
      if (v45 >= v44 >> 1)
      {
        sub_1002CFB58(v44 > 1, v45 + 1, 1);
        uint64_t v33 = v114;
      }
      v33[2] = v45 + 1;
      uint64_t v46 = &v33[9 * v45];
      unint64_t v47 = v97;
      v46[4] = v13 - 1;
      v46[5] = v47;
      v46[6] = v98;
      v46[7] = v4;
      *((unsigned char *)v46 + 64) = v36;
      *((unsigned char *)v46 + 65) = v99;
      uint64_t v48 = v102;
      v46[9] = v103;
      v46[10] = v48;
      *((unsigned char *)v46 + 88) = v101;
      v46[12] = v100;
      unint64_t v7 = v105;
      uint64_t v6 = v106;
      uint64_t v32 = v104;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_70:
  swift_bridgeObjectRelease();
  sub_10007BF50();
  swift_allocError();
  *(void *)(v88 + 8) = 0;
  *(void *)(v88 + 16) = 0;
  *(void *)uint64_t v88 = 2;
  *(unsigned char *)(v88 + 24) = 3;
  swift_willThrow();
  swift_bridgeObjectRelease();
  sub_10016FC10(v12, v4, v13);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10018ADD0(uint64_t a1, uint64_t a2)
{
  return sub_10018DB70(a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24), *(unsigned __int8 *)(a2 + 32));
}

uint64_t sub_10018ADFC(void *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Mirror();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v124 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018F7FC((uint64_t *)a2, (uint64_t)v133);
  sub_10018F7FC(v133, (uint64_t)&v146);
  char v12 = v147;
  if (v147)
  {
    sub_10016FB80(a2 + 1, &v132);
    sub_10016FB80(&v132, &v148);
    if (v149 >= 0x40u)
    {
      sub_10007BF50();
      swift_allocError();
      uint64_t v26 = 2;
      goto LABEL_90;
    }
    uint64_t v110 = v8;
    uint64_t v111 = a3;
    uint64_t v109 = v9;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v110 = v8;
    uint64_t v111 = a3;
    uint64_t v109 = v9;
    uint64_t v13 = v146;
  }
  uint64_t v15 = a2[1].n128_i64[0];
  uint64_t v14 = a2[1].n128_i64[1];
  LODWORD(v16) = a2[2].n128_u8[0];
  switch(v16 >> 6)
  {
    case 1u:
      uint64_t v108 = v13;
      uint64_t v106 = v14;
      int v107 = v16;
      if (v12) {
        goto LABEL_119;
      }
      uint64_t v28 = a1[3];
      unint64_t v105 = a1;
      uint64_t v29 = sub_100075908(a1, v28);
      v126[1] = v28;
      uint64_t v30 = sub_1001883A8(v125);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v28 - 8) + 16))(v30, v29, v28);
      swift_bridgeObjectRetain();
      Mirror.init(reflecting:)();
      uint64_t v31 = *(void *)(v15 + 16);
      if (!v31)
      {
        uint64_t v82 = 0;
        LOBYTE(v16) = v107;
        uint64_t v14 = v106;
LABEL_78:
        (*(void (**)(char *, uint64_t))(v109 + 8))(v124, v110);
        uint64_t v88 = v111;
        sub_10018E894(v108);
        sub_10018E9E8(v82);
        sub_10018F204(v105, v15, v14, v16 & 1, v88);
        return sub_10016FC10(v15, v14, v16);
      }
      uint64_t v113 = v126;
      swift_bridgeObjectRetain();
      uint64_t v115 = 0;
      uint64_t v32 = (uint64_t *)&unk_1004556C0;
      uint64_t v33 = v15 + 48;
      char v112 = (char *)&type metadata for Any + 8;
      uint64_t v114 = v15;
      while (2)
      {
        unint64_t v35 = v32;
        uint64_t v36 = *(void *)(v33 - 8);
        uint64_t v118 = *(void *)v33;
        uint64_t v119 = v31;
        int v37 = *(unsigned __int8 *)(v33 + 8);
        int v116 = *(unsigned __int8 *)(v33 + 9);
        int v117 = v37;
        uint64_t v39 = *(void *)(v33 + 16);
        uint64_t v38 = *(void *)(v33 + 24);
        int v40 = *(unsigned __int8 *)(v33 + 32);
        uint64_t v41 = *(void *)(v33 + 40);
        uint64_t v42 = v4;
        uint64_t v43 = *(void *)(v33 - 16);
        swift_bridgeObjectRetain();
        uint64_t v121 = v39;
        uint64_t v122 = v38;
        int v123 = v40;
        sub_10018F814(v39, v38, v40);
        uint64_t v120 = v41;
        swift_bridgeObjectRetain();
        uint64_t v44 = Mirror.children.getter();
        __chkstk_darwin(v44, v45);
        *(&v104 - 2) = v43;
        *(&v104 - 1) = v36;
        uint64_t v46 = dispatch thunk of _AnySequenceBox._filter(_:)();
        uint64_t v4 = v42;
        swift_bridgeObjectRelease();
        swift_release();
        if (*(void *)(v46 + 16) != 1)
        {
          uint64_t v84 = v114;
          uint64_t v85 = v106;
          unsigned __int8 v86 = v107;
          sub_10016FC10(v114, v106, v107);
          swift_bridgeObjectRelease();
          sub_10007BF50();
          swift_allocError();
          *(void *)(v87 + 8) = 0;
          *(void *)(v87 + 16) = 0;
          *(void *)uint64_t v87 = 2;
          *(unsigned char *)(v87 + 24) = 3;
          swift_willThrow();
          sub_10016FC10(v121, v122, v123);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v109 + 8))(v124, v110);
          return sub_10016FC10(v84, v85, v86);
        }
        sub_10018F8B4(v46 + 32, (uint64_t)v125);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = v35;
        sub_10006C51C(v35);
        swift_dynamicCast();
        uint64_t v15 = v114;
        if (*((void *)&v128 + 1))
        {
          sub_1000761D0(&v127, &v130);
          sub_1000AA580((uint64_t)&v130, (uint64_t)&v127);
          sub_10006C51C((uint64_t *)&unk_10045B6E0);
          swift_dynamicCast();
          uint64_t v48 = v121;
          uint64_t v47 = v122;
          unsigned __int8 v49 = v123;
          uint64_t v50 = sub_10018DB70((uint64_t)v125, v118, v117, v121, v122, v123);
          if (v4)
          {
            sub_10016FC10(v48, v47, v49);
            swift_bridgeObjectRelease();
            sub_10007594C((uint64_t)&v130);
            uint64_t v91 = v106;
            unsigned __int8 v92 = v107;
            sub_10016FC10(v15, v106, v107);
            (*(void (**)(char *, uint64_t))(v109 + 8))(v124, v110);
            sub_10007594C((uint64_t)v125);
            return sub_10016FC10(v15, v91, v92);
          }
          BOOL v51 = __OFADD__(v115, v50);
          v115 += v50;
          if (v51)
          {
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            __break(1u);
LABEL_117:
            __break(1u);
LABEL_118:
            __break(1u);
LABEL_119:
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
            JUMPOUT(0x10018BC3CLL);
          }
          sub_10007594C((uint64_t)&v130);
          sub_10016FC10(v48, v47, v49);
          swift_bridgeObjectRelease();
          sub_10007594C((uint64_t)v125);
LABEL_17:
          v33 += 64;
          uint64_t v31 = v119 - 1;
          if (v119 == 1)
          {
            uint64_t v14 = v106;
            LOBYTE(v16) = v107;
            sub_10016FC10(v15, v106, v107);
            uint64_t v82 = v115;
            goto LABEL_78;
          }
          continue;
        }
        break;
      }
      sub_10008E734((uint64_t)&v127, v35);
      unsigned __int8 v34 = v123;
      if (v116)
      {
        sub_10016FC10(v121, v122, v123);
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      uint64_t v91 = v106;
      unsigned __int8 v92 = v107;
      sub_10016FC10(v15, v106, v107);
      sub_10007BF50();
      swift_allocError();
      *(void *)(v97 + 8) = 0;
      *(void *)(v97 + 16) = 0;
      *(void *)uint64_t v97 = 3;
      *(unsigned char *)(v97 + 24) = 3;
      swift_willThrow();
      sub_10016FC10(v121, v122, v34);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v109 + 8))(v124, v110);
      return sub_10016FC10(v15, v91, v92);
    case 2u:
      __n128 v27 = *(__n128 *)(v15 + 32);
      long long v134 = *(_OWORD *)(v15 + 16);
      __n128 v135 = v27;
      long long v136 = *(_OWORD *)(v15 + 48);
      sub_10016FB80(&v135, v150);
      uint64_t v151 = *((void *)&v136 + 1);
      sub_10010DDC4((uint64_t)a1, (uint64_t)&v130);
      sub_10018F814(v15, v14, v16);
      sub_10018F838((uint64_t)v150);
      sub_10018F86C((uint64_t)&v151);
      sub_10006C51C((uint64_t *)&unk_10045B6E0);
      sub_10006C51C(&qword_1004568D0);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_59;
      }
      sub_10010197C(&v127, (uint64_t)v125);
      if (v12) {
        goto LABEL_120;
      }
      sub_10018BC9C(v125, v13, (uint64_t)&v134, v111);
      sub_10007594C((uint64_t)v125);
      goto LABEL_60;
    case 3u:
      if (v14 | v15 || v16 != 192)
      {
        if (v15 == 1 && !v14 && v16 == 192)
        {
          sub_10010DDC4((uint64_t)a1, (uint64_t)v125);
          sub_10006C51C((uint64_t *)&unk_10045B6E0);
          if (swift_dynamicCast())
          {
            if (v12) {
              goto LABEL_122;
            }
            return sub_10018EE04(v13, v130);
          }
        }
        else if (v15 == 2 && !v14 && v16 == 192)
        {
          sub_10010DDC4((uint64_t)a1, (uint64_t)v125);
          sub_10006C51C((uint64_t *)&unk_10045B6E0);
          if (swift_dynamicCast())
          {
            if (v12) {
              goto LABEL_123;
            }
            int v83 = v130;
            sub_10018E894(v13);
            sub_100265B48(1);
            return sub_100265B48(v83 << 31 >> 31);
          }
        }
        else
        {
          sub_10010DDC4((uint64_t)a1, (uint64_t)v125);
          sub_10006C51C((uint64_t *)&unk_10045B6E0);
          if (swift_dynamicCast())
          {
            unint64_t v16 = *((void *)&v130 + 1);
            uint64_t v93 = v130;
            Data.append(_:)();
            uint64_t v94 = v93;
            return sub_10006D144(v94, v16);
          }
        }
      }
      else
      {
        uint64_t v108 = v13;
        sub_10010DDC4((uint64_t)a1, (uint64_t)v125);
        sub_10006C51C((uint64_t *)&unk_10045B6E0);
        if (swift_dynamicCast())
        {
          uint64_t v124 = v3;
          unint64_t v16 = *((void *)&v130 + 1);
          uint64_t v14 = v130;
          unint64_t v52 = a2[2].n128_u64[1];
          uint64_t v53 = *(void *)(v52 + 16);
          uint64_t v54 = *((void *)&v130 + 1) >> 62;
          if (v53)
          {
            int v55 = DWORD1(v130) - v130;
            BOOL v56 = __OFSUB__(DWORD1(v130), v130);
            uint64_t v15 = v55;
            uint64_t v57 = (unsigned char *)(v52 + 72);
            uint64_t v58 = v54;
            while (1)
            {
              uint64_t v59 = *((void *)v57 - 3);
              uint64_t v60 = *((void *)v57 - 1);
              if ((*(v57 - 32) & 1) == 0)
              {
                uint64_t v61 = *((void *)v57 - 5);
                uint64_t v62 = BYTE14(v130);
                switch((int)v54)
                {
                  case 1:
                    uint64_t v62 = v55;
                    if (v56) {
                      goto LABEL_110;
                    }
                    goto LABEL_38;
                  case 2:
                    uint64_t v64 = *(void *)(v130 + 16);
                    uint64_t v63 = *(void *)(v130 + 24);
                    uint64_t v62 = v63 - v64;
                    if (!__OFSUB__(v63, v64)) {
                      goto LABEL_38;
                    }
                    goto LABEL_111;
                  case 3:
                    if (v61 <= 0) {
                      break;
                    }
                    goto LABEL_91;
                  default:
LABEL_38:
                    if (v62 < v61) {
                      goto LABEL_91;
                    }
                    break;
                }
              }
              if ((*(v57 - 16) & 1) == 0)
              {
                uint64_t v65 = BYTE14(v130);
                switch((int)v54)
                {
                  case 1:
                    uint64_t v65 = v55;
                    if (v56) {
                      goto LABEL_112;
                    }
                    goto LABEL_46;
                  case 2:
                    uint64_t v67 = *(void *)(v130 + 16);
                    uint64_t v66 = *(void *)(v130 + 24);
                    BOOL v51 = __OFSUB__(v66, v67);
                    uint64_t v65 = v66 - v67;
                    if (!v51) {
                      goto LABEL_46;
                    }
                    goto LABEL_113;
                  case 3:
                    if ((v59 & 0x8000000000000000) == 0) {
                      break;
                    }
                    goto LABEL_91;
                  default:
LABEL_46:
                    if (v59 < v65) {
                      goto LABEL_91;
                    }
                    break;
                }
              }
              if ((*v57 & 1) == 0) {
                break;
              }
LABEL_32:
              v57 += 48;
              if (!--v53) {
                goto LABEL_80;
              }
            }
            uint64_t v68 = 0;
            switch((int)v54)
            {
              case 0:
                uint64_t v68 = BYTE14(v130);
                goto LABEL_55;
              case 1:
                uint64_t v68 = v55;
                if (v56) {
                  goto LABEL_114;
                }
                goto LABEL_55;
              case 2:
                uint64_t v70 = *(void *)(v130 + 16);
                uint64_t v69 = *(void *)(v130 + 24);
                BOOL v51 = __OFSUB__(v69, v70);
                uint64_t v68 = v69 - v70;
                if (!v51) {
                  goto LABEL_55;
                }
                goto LABEL_115;
              case 3:
LABEL_55:
                if (!v60) {
                  goto LABEL_109;
                }
                if (v68 == 0x8000000000000000 && v60 == -1)
                {
                  __break(1u);
LABEL_59:
                  uint64_t v129 = 0;
                  long long v127 = 0u;
                  long long v128 = 0u;
                  sub_10008E734((uint64_t)&v127, &qword_1004568D8);
                  sub_10007BF50();
                  swift_allocError();
                  *(void *)(v71 + 8) = 0;
                  *(void *)(v71 + 16) = 0;
                  *(void *)uint64_t v71 = 2;
                  *(unsigned char *)(v71 + 24) = 3;
                  swift_willThrow();
LABEL_60:
                  sub_10016FBDC((uint64_t)v150);
                  sub_10016FC34((uint64_t)&v151);
                  return sub_10016FC10(v15, v14, v16);
                }
                if (!(v68 % v60)) {
                  goto LABEL_32;
                }
LABEL_91:
                sub_10018F7FC(v133, (uint64_t)&v144);
                if (v145)
                {
                  sub_10007BF50();
                  swift_allocError();
                  *(void *)(v95 + 8) = 0;
                  *(void *)(v95 + 16) = 0;
                  *(void *)uint64_t v95 = 5;
                  char v96 = 3;
                }
                else
                {
                  uint64_t v98 = v144;
                  uint64_t v99 = 0;
                  switch(v58)
                  {
                    case 0:
                      uint64_t v99 = BYTE6(v16);
                      goto LABEL_104;
                    case 1:
                      uint64_t v99 = v15;
                      if (!v56) {
                        goto LABEL_104;
                      }
                      __break(1u);
LABEL_103:
                      uint64_t v103 = *(void *)(v14 + 16);
                      uint64_t v102 = *(void *)(v14 + 24);
                      uint64_t v99 = v102 - v103;
                      if (__OFSUB__(v102, v103)) {
                        goto LABEL_118;
                      }
LABEL_104:
                      sub_10007BF50();
                      swift_allocError();
                      *(void *)uint64_t v95 = v98;
                      *(void *)(v95 + 8) = v99;
                      *(void *)(v95 + 16) = 0;
                      char v96 = 1;
                      break;
                    case 2:
                      goto LABEL_103;
                    case 3:
                      goto LABEL_104;
                    default:
                      goto LABEL_124;
                  }
                }
                *(unsigned char *)(v95 + 24) = v96;
                swift_willThrow();
                break;
              default:
LABEL_124:
                JUMPOUT(0);
            }
          }
          else
          {
LABEL_80:
            if (v12) {
              goto LABEL_121;
            }
            sub_10018E894(v108);
            uint64_t v89 = 0;
            switch(v54)
            {
              case 1:
                if (__OFSUB__(HIDWORD(v14), v14)) {
                  goto LABEL_116;
                }
                uint64_t v89 = HIDWORD(v14) - (int)v14;
LABEL_100:
                sub_10018E9E8(v89);
                Data.append(_:)();
                break;
              case 2:
                uint64_t v101 = *(void *)(v14 + 16);
                uint64_t v100 = *(void *)(v14 + 24);
                uint64_t v89 = v100 - v101;
                if (!__OFSUB__(v100, v101)) {
                  goto LABEL_100;
                }
                goto LABEL_117;
              case 3:
                goto LABEL_100;
              default:
                uint64_t v89 = BYTE6(v16);
                goto LABEL_100;
            }
          }
          uint64_t v94 = v14;
          return sub_10006D144(v94, v16);
        }
      }
      sub_10007BF50();
      swift_allocError();
      uint64_t v26 = 4;
      break;
    default:
      uint64_t v17 = a2[1].n128_i64[1];
      unsigned __int8 v18 = a2[2].n128_u8[0];
      uint64_t v19 = a1[3];
      uint64_t v20 = sub_100075908(a1, v19);
      uint64_t v131 = v19;
      unsigned __int8 v21 = sub_1001883A8((uint64_t *)&v130);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v19 - 8) + 16))(v21, v20, v19);
      swift_bridgeObjectRetain();
      uint64_t v22 = sub_10018BD80((uint64_t)v125, (uint64_t)&v130);
      if (v3)
      {
        sub_10016FC10(v15, v17, v16);
        uint64_t v24 = (uint64_t *)&v130;
      }
      else
      {
        uint64_t v73 = v22;
        uint64_t v74 = v23;
        sub_10007594C((uint64_t)&v130);
        uint64_t v75 = sub_10018C2B4(v15, v73, v74);
        swift_bridgeObjectRelease();
        sub_10016FC10(v15, v17, v18);
        if (*(void *)(v75 + 16))
        {
          uint64_t v76 = *(void *)(v75 + 48);
          uint64_t v124 = 0;
          char v77 = *(unsigned char *)(v75 + 56);
          int v123 = *(unsigned __int8 *)(v75 + 57);
          uint64_t v78 = *(void *)(v75 + 64);
          uint64_t v79 = *(void *)(v75 + 72);
          uint64_t v80 = *(void *)(v75 + 88);
          unsigned __int8 v81 = *(unsigned char *)(v75 + 80);
          swift_bridgeObjectRetain();
          sub_10018F814(v78, v79, v81);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v137 = v76;
          char v138 = v77;
          char v139 = v123;
          uint64_t v140 = v78;
          uint64_t v141 = v79;
          unsigned __int8 v142 = v81;
          uint64_t v143 = v80;
          sub_10018ADFC(v125, &v137, v111);
          swift_bridgeObjectRelease();
          sub_10016FC10(v78, v79, v81);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_10007BF50();
          swift_allocError();
          *(void *)(v90 + 8) = 0;
          *(void *)(v90 + 16) = 0;
          *(void *)uint64_t v90 = 2;
          *(unsigned char *)(v90 + 24) = 3;
          swift_willThrow();
        }
        uint64_t v24 = v125;
      }
      return sub_10007594C((uint64_t)v24);
  }
LABEL_90:
  *(void *)(v25 + 8) = 0;
  *(void *)(v25 + 16) = 0;
  *(void *)uint64_t v25 = v26;
  *(unsigned char *)(v25 + 24) = 3;
  return swift_willThrow();
}

uint64_t sub_10018BC9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10018BFDC(a1, a3);
  if (!v4)
  {
    uint64_t v10 = result;
    sub_10018E894(a2);
    sub_10018E9E8(v10);
    uint64_t v11 = sub_100075908(a1, a1[3]);
    char v12 = sub_1002D9B38(*v11);
    uint64_t v13 = v12[2];
    if (v13)
    {
      uint64_t v14 = (uint64_t)(v12 + 4);
      do
      {
        sub_10010DDC4(v14, (uint64_t)v15);
        sub_10018ADFC(v15, a3, a4);
        sub_10007594C((uint64_t)v15);
        v14 += 40;
        --v13;
      }
      while (v13);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10018BD80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Mirror();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000AA580(a2, (uint64_t)&v18);
  Mirror.init(reflecting:)();
  Mirror.children.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v9 = &v18;
  sub_1000BB3E4(&v18);
  swift_release();
  if (!v20)
  {
    char v12 = (uint64_t *)&unk_1004568E8;
    uint64_t v13 = (long long *)&v18;
LABEL_7:
    sub_10008E734((uint64_t)v13, v12);
    sub_10007BF50();
    swift_allocError();
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = 2;
    *(unsigned char *)(v14 + 24) = 3;
    swift_willThrow();
    return (uint64_t)v9;
  }
  unint64_t v10 = *((void *)&v18 + 1);
  uint64_t v9 = (unsigned long long *)v18;
  unsigned long long v21 = v18;
  sub_1000761D0(&v19, v22);
  unsigned long long v18 = __PAIR128__(v10, (unint64_t)v9);
  sub_1000AA580((uint64_t)v22, (uint64_t)&v19);
  swift_bridgeObjectRetain();
  sub_10006C51C((uint64_t *)&unk_10045B6E0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    swift_bridgeObjectRelease();
    sub_10008E734((uint64_t)&v21, &qword_1004568E0);
    char v12 = (uint64_t *)&unk_1004568F0;
    uint64_t v13 = v15;
    goto LABEL_7;
  }
  sub_10010197C(v15, (uint64_t)v17);
  unsigned long long v18 = __PAIR128__(v10, (unint64_t)v9);
  uint64_t result = sub_1000AA580((uint64_t)v22, (uint64_t)&v19);
  if (v10)
  {
    sub_10008E734((uint64_t)&v21, &qword_1004568E0);
    sub_10010197C(v17, a1);
    sub_10007594C((uint64_t)&v19);
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10018BFDC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100075908(a1, a1[3]);
  uint64_t v5 = sub_1002D9B38(*v4);
  int64_t v6 = v5[2];
  if (v6)
  {
    unsigned long long v18 = _swiftEmptyArrayStorage;
    sub_1002CFBC8(0, v6, 0);
    uint64_t v7 = (uint64_t)(v5 + 4);
    do
    {
      sub_10010DDC4(v7, (uint64_t)v17);
      uint64_t v8 = sub_10018ADD0((uint64_t)v17, a2);
      sub_10007594C((uint64_t)v17);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_release();
        return a2;
      }
      uint64_t v9 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFBC8(0, v9[2] + 1, 1);
        uint64_t v9 = v18;
      }
      unint64_t v11 = v9[2];
      unint64_t v10 = v9[3];
      if (v11 >= v10 >> 1)
      {
        sub_1002CFBC8(v10 > 1, v11 + 1, 1);
        uint64_t v9 = v18;
      }
      void v9[2] = v11 + 1;
      v9[v11 + 4] = v8;
      v7 += 40;
      --v6;
    }
    while (v6);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = v9[2];
    if (!v12) {
      goto LABEL_17;
    }
LABEL_11:
    uint64_t v13 = 0;
    a2 = 0;
    while (1)
    {
      uint64_t v14 = v9[v13 + 4];
      BOOL v15 = __OFADD__(a2, v14);
      a2 += v14;
      if (v15) {
        break;
      }
      if (v12 == ++v13)
      {
        swift_bridgeObjectRelease();
        return a2;
      }
    }
    __break(1u);
    return result;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v9 = _swiftEmptyArrayStorage;
  uint64_t v12 = _swiftEmptyArrayStorage[2];
  if (v12) {
    goto LABEL_11;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_10018C198(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10006C51C(&qword_1004568A8);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

size_t sub_10018C200(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    size_t v5 = _swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    sub_10006C51C(&qword_1004568A8);
    size_t v5 = (void *)swift_allocObject();
    uint64_t result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_10018C2B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0;
  unint64_t v4 = *(void *)(result + 16);
  uint64_t v5 = result + 88;
  uint64_t v22 = result + 88;
  uint64_t v23 = _swiftEmptyArrayStorage;
  unint64_t v29 = v4;
LABEL_2:
  if (v3 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v30 = v6 + 1;
  uint64_t v7 = (void *)(v5 + (v3 << 6));
  while (1)
  {
    if (v4 == v3) {
      return (uint64_t)v23;
    }
    uint64_t v8 = v3++;
    if (v30 == v3) {
      break;
    }
    uint64_t v10 = *(v7 - 7);
    uint64_t v9 = *(v7 - 6);
    uint64_t v28 = *(v7 - 5);
    char v26 = *((unsigned char *)v7 - 31);
    char v27 = *((unsigned char *)v7 - 32);
    uint64_t v11 = *(v7 - 3);
    uint64_t v12 = *(v7 - 2);
    unsigned __int8 v13 = *((unsigned char *)v7 - 8);
    uint64_t v14 = *v7;
    if (v10 == a2 && v9 == a3)
    {
      uint64_t v10 = a2;
      uint64_t v9 = a3;
LABEL_15:
      swift_bridgeObjectRetain();
      sub_10018F814(v11, v12, v13);
      swift_bridgeObjectRetain();
      uint64_t v16 = v23;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = sub_1002CFB78(0, v23[2] + 1, 1);
        uint64_t v16 = v23;
      }
      unint64_t v18 = v16[2];
      unint64_t v17 = v16[3];
      unint64_t v19 = v18 + 1;
      unint64_t v4 = v29;
      if (v18 >= v17 >> 1)
      {
        unint64_t v21 = v18 + 1;
        unint64_t v31 = v16[2];
        uint64_t result = sub_1002CFB78(v17 > 1, v18 + 1, 1);
        unint64_t v19 = v21;
        unint64_t v4 = v29;
        unint64_t v18 = v31;
        uint64_t v16 = v23;
      }
      unint64_t v3 = v8 + 1;
      void v16[2] = v19;
      uint64_t v23 = v16;
      uint64_t v20 = &v16[8 * v18];
      v20[4] = v10;
      v20[5] = v9;
      v20[6] = v28;
      *((unsigned char *)v20 + 56) = v27;
      *((unsigned char *)v20 + 57) = v26;
      v20[8] = v11;
      v20[9] = v12;
      *((unsigned char *)v20 + 80) = v13;
      v20[11] = v14;
      uint64_t v5 = v22;
      goto LABEL_2;
    }
    v7 += 8;
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    unint64_t v4 = v29;
    if (result) {
      goto LABEL_15;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10018C488(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 >> 62;
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_61;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (!v7) {
        goto LABEL_39;
      }
      unsigned __int8 v11 = Data.subscript.getter();
      uint64_t v2 = v11;
      if ((~v11 & 0x1E) != 0)
      {
        if (a2) {
          return v2;
        }
        if (v5)
        {
          if (v5 == 1)
          {
            uint64_t v14 = (int)v3 + 1;
            uint64_t v15 = v3 >> 32;
          }
          else
          {
            uint64_t v26 = *(void *)(v3 + 16);
            uint64_t v14 = v26 + 1;
            if (__OFADD__(v26, 1))
            {
LABEL_64:
              __break(1u);
              goto LABEL_65;
            }
            uint64_t v15 = *(void *)(v3 + 24);
            swift_retain();
          }
          swift_retain();
        }
        else
        {
          uint64_t v15 = BYTE6(v4);
          uint64_t v14 = 1;
        }
        if (v15 < v14) {
          goto LABEL_69;
        }
LABEL_52:
        uint64_t v27 = Data._Representation.subscript.getter();
        uint64_t v29 = v28;
        sub_10006D144(v3, v4);
        sub_10006D144(v3, v4);
        *a1 = v27;
        a1[1] = v29;
        return v2;
      }
      if (v5)
      {
        if (v5 == 1)
        {
          uint64_t v12 = (int)v3 + 1;
          uint64_t v13 = v3 >> 32;
        }
        else
        {
          uint64_t v16 = *(void *)(v3 + 16);
          uint64_t v12 = v16 + 1;
          if (__OFADD__(v16, 1))
          {
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          uint64_t v13 = *(void *)(v3 + 24);
        }
      }
      else
      {
        uint64_t v13 = BYTE6(v4);
        uint64_t v12 = 1;
      }
      if (v13 < v12) {
        goto LABEL_68;
      }
      if (v12 == v13)
      {
LABEL_39:
        sub_10007BF50();
        swift_allocError();
        *(void *)(v24 + 8) = 0;
        *(void *)(v24 + 16) = 0;
        *(void *)uint64_t v24 = 0;
        *(unsigned char *)(v24 + 24) = 3;
        swift_willThrow();
        return v2;
      }
      uint64_t v31 = v3 >> 32;
      while (1)
      {
        if (v12 >= v13)
        {
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v5)
        {
          if (v5 == 1)
          {
            if (v12 < (int)v3 || v12 >= v31) {
              goto LABEL_57;
            }
            uint64_t v17 = __DataStorage._bytes.getter();
            if (!v17)
            {
              __break(1u);
LABEL_67:
              __break(1u);
LABEL_68:
              __break(1u);
LABEL_69:
              __break(1u);
              JUMPOUT(0x10018C8B4);
            }
            uint64_t v18 = v17;
            uint64_t v19 = __DataStorage._offset.getter();
            uint64_t v20 = v12 - v19;
            if (__OFSUB__(v12, v19)) {
              goto LABEL_59;
            }
          }
          else
          {
            if (v12 < *(void *)(v3 + 16)) {
              goto LABEL_56;
            }
            if (v12 >= *(void *)(v3 + 24)) {
              goto LABEL_58;
            }
            uint64_t v22 = __DataStorage._bytes.getter();
            if (!v22) {
              goto LABEL_67;
            }
            uint64_t v18 = v22;
            uint64_t v23 = __DataStorage._offset.getter();
            uint64_t v20 = v12 - v23;
            if (__OFSUB__(v12, v23)) {
              goto LABEL_60;
            }
          }
          uint64_t v21 = *(unsigned __int8 *)(v18 + v20);
        }
        else
        {
          if (v12 >= BYTE6(v4)) {
            goto LABEL_55;
          }
          uint64_t v33 = v3;
          __int16 v34 = v4;
          char v35 = BYTE2(v4);
          char v36 = BYTE3(v4);
          char v37 = BYTE4(v4);
          char v38 = BYTE5(v4);
          uint64_t v21 = *((unsigned __int8 *)&v33 + v12);
        }
        uint64_t v2 = v21 | (v2 << 8);
        if ((v21 & 0x80) == 0) {
          break;
        }
        if (v13 == ++v12) {
          goto LABEL_39;
        }
      }
      if ((a2 & 1) == 0)
      {
        uint64_t v25 = BYTE6(v4);
        if (v5)
        {
          if (v5 != 1)
          {
            uint64_t v31 = *(void *)(v3 + 24);
            swift_retain();
          }
          swift_retain();
          uint64_t v25 = v31;
        }
        if (v25 > v12) {
          goto LABEL_52;
        }
LABEL_65:
        __break(1u);
      }
      return v2;
    case 2uLL:
      uint64_t v9 = *(void *)(v3 + 16);
      uint64_t v8 = *(void *)(v3 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_62;
    case 3uLL:
      goto LABEL_39;
    default:
      uint64_t v7 = BYTE6(v4);
      goto LABEL_6;
  }
}

uint64_t sub_10018C8C4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 >> 62;
  switch(v4 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(v3) - v3;
      if (__OFSUB__(HIDWORD(v3), v3)) {
        goto LABEL_85;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (!v7) {
        goto LABEL_28;
      }
      sub_10006D0EC(*a1, v4);
      __int16 v11 = sub_1000BB28C(v3, v4);
      sub_10006D144(v3, v4);
      if ((v11 & 0x100) != 0)
      {
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
        goto LABEL_99;
      }
      uint64_t v2 = v11;
      if (v11 <= 0x7Fu)
      {
        if (!v5)
        {
          uint64_t v13 = BYTE6(v4);
          uint64_t v12 = 1;
          goto LABEL_21;
        }
        if (v5 == 1)
        {
          uint64_t v12 = (int)v3 + 1;
          uint64_t v13 = v3 >> 32;
LABEL_20:
          swift_retain();
LABEL_21:
          if (v13 >= v12)
          {
LABEL_77:
            uint64_t v34 = Data._Representation.subscript.getter();
            uint64_t v36 = v35;
            sub_10006D144(v3, v4);
            sub_10006D144(v3, v4);
            *a1 = v34;
            a1[1] = v36;
            return v2;
          }
LABEL_99:
          __break(1u);
          JUMPOUT(0x10018CDF8);
        }
        uint64_t v15 = *(void *)(v3 + 16);
        uint64_t v12 = v15 + 1;
        if (!__OFADD__(v15, 1))
        {
          uint64_t v13 = *(void *)(v3 + 24);
          swift_retain();
          goto LABEL_20;
        }
        goto LABEL_89;
      }
      if (v5)
      {
        if (v5 == 1)
        {
          LODWORD(v14) = HIDWORD(v3) - v3;
          if (__OFSUB__(HIDWORD(v3), v3))
          {
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
            goto LABEL_90;
          }
          uint64_t v14 = (int)v14;
        }
        else
        {
          uint64_t v17 = *(void *)(v3 + 16);
          uint64_t v16 = *(void *)(v3 + 24);
          BOOL v10 = __OFSUB__(v16, v17);
          uint64_t v14 = v16 - v17;
          if (v10)
          {
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
            goto LABEL_92;
          }
        }
      }
      else
      {
        uint64_t v14 = BYTE6(v4);
      }
      uint64_t v2 = v11 & 0x7F;
      if (v14 <= v2)
      {
LABEL_28:
        sub_10007BF50();
        swift_allocError();
        v19[2] = 0;
        uint64_t v20 = v19 + 3;
        *uint64_t v19 = 0;
      }
      else
      {
        if (v5)
        {
          if (v5 == 1) {
            uint64_t v18 = (int)v3;
          }
          else {
            uint64_t v18 = *(void *)(v3 + 16);
          }
        }
        else
        {
          uint64_t v18 = 0;
        }
        if (__OFADD__(v18, 1))
        {
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        if (Data.subscript.getter())
        {
          if (v5)
          {
            if (v5 == 1)
            {
              uint64_t v21 = (int)v3;
              uint64_t v22 = (int)v3 + 1;
            }
            else
            {
              uint64_t v21 = *(void *)(v3 + 16);
              uint64_t v22 = v21 + 1;
              if (__OFADD__(v21, 1)) {
                goto LABEL_95;
              }
            }
          }
          else
          {
            uint64_t v22 = 1;
            uint64_t v21 = 0;
          }
          uint64_t v23 = v21 + 1;
          uint64_t v24 = v23 + v2;
          if (__OFADD__(v23, v2)) {
            goto LABEL_91;
          }
          if (v24 < v22)
          {
LABEL_92:
            __break(1u);
            goto LABEL_93;
          }
          if (v22 == v24)
          {
            uint64_t v2 = 0;
LABEL_44:
            uint64_t v1 = (v11 & 0x7F) + 1;
            if (v5)
            {
              if (v5 == 1)
              {
                uint64_t v25 = (int)v3;
              }
              else
              {
                uint64_t v25 = *(void *)(v3 + 16);
                swift_retain();
              }
              swift_retain();
            }
            else
            {
LABEL_67:
              uint64_t v25 = v5;
            }
            if (!__OFADD__(v25, v1))
            {
              if (v5)
              {
                if (v5 == 1) {
                  uint64_t v33 = v3 >> 32;
                }
                else {
                  uint64_t v33 = *(void *)(v3 + 24);
                }
              }
              else
              {
                uint64_t v33 = BYTE6(v4);
              }
              if (v33 >= v25 + v1) {
                goto LABEL_77;
              }
              goto LABEL_94;
            }
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
          }
          uint64_t v2 = 0;
          while (v22 < v24)
          {
            if (v5)
            {
              if (v5 == 1)
              {
                if (v22 < (int)v3 || v22 >= v3 >> 32) {
                  goto LABEL_82;
                }
                uint64_t v27 = __DataStorage._bytes.getter();
                if (!v27) {
                  goto LABEL_97;
                }
                uint64_t v28 = v27;
                uint64_t v29 = __DataStorage._offset.getter();
                uint64_t v30 = v22 - v29;
                if (__OFSUB__(v22, v29)) {
                  goto LABEL_84;
                }
              }
              else
              {
                if (v22 < *(void *)(v3 + 16)) {
                  goto LABEL_81;
                }
                if (v22 >= *(void *)(v3 + 24)) {
                  goto LABEL_83;
                }
                uint64_t v31 = __DataStorage._bytes.getter();
                if (!v31) {
                  goto LABEL_98;
                }
                uint64_t v28 = v31;
                uint64_t v32 = __DataStorage._offset.getter();
                uint64_t v30 = v22 - v32;
                if (__OFSUB__(v22, v32))
                {
                  __break(1u);
                  goto LABEL_67;
                }
              }
              uint64_t v26 = *(unsigned __int8 *)(v28 + v30);
            }
            else
            {
              if (v22 >= BYTE6(v4)) {
                goto LABEL_80;
              }
              uint64_t v38 = v3;
              __int16 v39 = v4;
              char v40 = BYTE2(v4);
              char v41 = BYTE3(v4);
              char v42 = BYTE4(v4);
              char v43 = BYTE5(v4);
              uint64_t v26 = *((unsigned __int8 *)&v38 + v22);
            }
            ++v22;
            uint64_t v2 = v26 | (v2 << 8);
            if (v24 == v22) {
              goto LABEL_44;
            }
          }
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
          goto LABEL_87;
        }
        sub_10007BF50();
        swift_allocError();
        v19[2] = 0;
        uint64_t v20 = v19 + 3;
        *uint64_t v19 = 8;
      }
      v19[1] = 0;
      *uint64_t v20 = 3;
      swift_willThrow();
      return v2;
    case 2uLL:
      uint64_t v9 = *(void *)(v3 + 16);
      uint64_t v8 = *(void *)(v3 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_86;
    case 3uLL:
      goto LABEL_28;
    default:
      uint64_t v7 = BYTE6(v4);
      goto LABEL_6;
  }
}

uint64_t sub_10018CE08(uint64_t *a1, char a2)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  sub_10006D0EC(*a1, v7);
  uint64_t v8 = sub_10018C488(a1, 0);
  if (!v2)
  {
    uint64_t v3 = v8;
    uint64_t v9 = sub_10018C8C4(a1);
    uint64_t v10 = *a1;
    unint64_t v11 = a1[1];
    uint64_t v12 = v9;
    switch(v11 >> 62)
    {
      case 1uLL:
        uint64_t v12 = v9 + (int)v10;
        if (__OFADD__(v9, (int)v10)) {
          goto LABEL_33;
        }
        if (v10 >> 32 < v12) {
          goto LABEL_19;
        }
        goto LABEL_10;
      case 2uLL:
        uint64_t v13 = *(void *)(v10 + 16);
        uint64_t v12 = v13 + v9;
        if (__OFADD__(v13, v9)) {
          goto LABEL_34;
        }
        if (*(void *)(v10 + 24) >= v12)
        {
LABEL_10:
          unint64_t v23 = v11 >> 62;
          uint64_t v25 = *a1;
          BOOL v14 = (a2 & 1) == 0;
          if (a2) {
            uint64_t v15 = v6;
          }
          else {
            uint64_t v15 = *a1;
          }
          unint64_t v26 = a1[1];
          if (v14) {
            unint64_t v16 = a1[1];
          }
          else {
            unint64_t v16 = v7;
          }
          uint64_t v17 = 0;
          switch(v16 >> 62)
          {
            case 1uLL:
              uint64_t v17 = (int)v15;
              goto LABEL_23;
            case 2uLL:
              uint64_t v17 = *(void *)(v15 + 16);
LABEL_23:
              sub_10006D0EC(v15, v16);
              break;
            default:
              break;
          }
          if (v12 < v17)
          {
            __break(1u);
          }
          else
          {
            Data._Representation.subscript.getter();
            sub_10006D144(v15, v16);
            uint64_t v20 = 0;
            switch((int)v23)
            {
              case 1:
                uint64_t v20 = v25 >> 32;
                break;
              case 2:
                uint64_t v20 = *(void *)(v25 + 24);
                break;
              case 3:
                break;
              default:
                uint64_t v20 = BYTE6(v26);
                break;
            }
            if (v20 >= v12)
            {
              uint64_t v24 = Data._Representation.subscript.getter();
              uint64_t v22 = v21;
              sub_10006D144(v25, v26);
              sub_10006D144(v6, v7);
              *a1 = v24;
              a1[1] = v22;
              return v3;
            }
          }
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          __break(1u);
          JUMPOUT(0x10018D088);
        }
LABEL_19:
        sub_10007BF50();
        swift_allocError();
        *(void *)(v18 + 8) = 0;
        *(void *)(v18 + 16) = 0;
        *(void *)uint64_t v18 = 0;
        *(unsigned char *)(v18 + 24) = 3;
        swift_willThrow();
        break;
      case 3uLL:
        if (v9 > 0) {
          goto LABEL_19;
        }
        goto LABEL_10;
      default:
        if (BYTE6(v11) < v9) {
          goto LABEL_19;
        }
        goto LABEL_10;
    }
  }
  sub_10006D144(v6, v7);
  return v3;
}

uint64_t sub_10018D0B8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v15 = a1;
  unint64_t v16 = a2;
  sub_10006D0EC(a1, a2);
  uint64_t v7 = sub_10018CE08(&v15, 0);
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  sub_10006D144(v15, v16);
  if (!v3 && v7 != a3)
  {
    uint64_t v12 = 0;
    switch(a2 >> 62)
    {
      case 1uLL:
        uint64_t v12 = (int)a1;
        break;
      case 2uLL:
        uint64_t v12 = *(void *)(a1 + 16);
        break;
      default:
        break;
    }
    sub_10007BF50();
    swift_allocError();
    *(void *)uint64_t v13 = v7;
    *(void *)(v13 + 8) = a3;
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = 0;
    swift_willThrow();
    sub_10006D144(v9, v11);
  }
  return v9;
}

unint64_t sub_10018D1D4(uint64_t a1, unint64_t i)
{
  uint64_t v4 = type metadata accessor for Data.Iterator();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = i >> 62;
  switch(i >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 < 1) {
        goto LABEL_14;
      }
      if (v9)
      {
        if (v9 == 1)
        {
          LODWORD(v14) = HIDWORD(a1) - a1;
          if (__OFSUB__(HIDWORD(a1), a1))
          {
LABEL_26:
            __break(1u);
            goto LABEL_27;
          }
          uint64_t v14 = (int)v14;
        }
        else
        {
          uint64_t v16 = *(void *)(a1 + 16);
          uint64_t v15 = *(void *)(a1 + 24);
          BOOL v13 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (v13)
          {
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            goto LABEL_29;
          }
        }
      }
      else
      {
        uint64_t v14 = BYTE6(i);
      }
      if (v14 > 8)
      {
LABEL_14:
        sub_10007BF50();
        swift_allocError();
        *(void *)(v17 + 8) = 0;
        *(void *)(v17 + 16) = 0;
        *(void *)uint64_t v17 = 0;
        *(unsigned char *)(v17 + 24) = 3;
        swift_willThrow();
        return i;
      }
      sub_10006D0EC(a1, i);
      __int16 v18 = sub_1000BB28C(a1, i);
      sub_10006D144(a1, i);
      if ((v18 & 0x100) != 0) {
        goto LABEL_28;
      }
      if ((v18 & 0x80) != 0)
      {
LABEL_29:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10018D47CLL);
      }
      if (v9) {
        sub_10006D0EC(a1, i);
      }
      Data.Iterator.init(_:at:)();
      Swift::UInt8_optional v19 = Data.Iterator.next()();
      for (i = 0; (*(_WORD *)&v19 & 0x100) == 0; Swift::UInt8_optional v19 = Data.Iterator.next()())
        uint64_t i = v19.value | (i << 8);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if ((i & 0x8000000000000000) != 0)
      {
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      return i;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v10 = BYTE6(i);
      goto LABEL_6;
  }
}

uint64_t sub_10018D48C(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x10018D5A0);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 1) {
        goto LABEL_11;
      }
      sub_10006D0EC(a1, a2);
      __int16 v8 = sub_1000BB28C(a1, a2);
      sub_10006D144(a1, a2);
      if ((v8 & 0x100) != 0) {
        goto LABEL_11;
      }
      char v9 = v8;
      if ((_BYTE)v8)
      {
        if (v8 == 255)
        {
          char v9 = 1;
        }
        else
        {
LABEL_11:
          sub_10007BF50();
          swift_allocError();
          *(void *)(v10 + 8) = 0;
          *(void *)(v10 + 16) = 0;
          *(void *)uint64_t v10 = 7;
          *(unsigned char *)(v10 + 24) = 3;
          swift_willThrow();
        }
      }
      return v9 & 1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_14;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10018D5B0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 >= 255)
  {
    if ((unint64_t)a1 > 0xFFFE) {
      goto LABEL_26;
    }
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = 1;
  switch(a3 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a2) - a2;
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_22;
      }
      uint64_t v5 = (int)v5;
LABEL_10:
      uint64_t v4 = 1;
      if (v5 >= 127)
      {
        do
        {
          ++v4;
          BOOL v9 = (unint64_t)v5 >= 0x100;
          uint64_t v5 = (unint64_t)v5 >> 8;
        }
        while (v9);
      }
LABEL_12:
      BOOL v8 = __OFADD__(v3, v4);
      uint64_t v10 = v3 + v4;
      if (v8)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10018D724);
      }
      uint64_t v11 = 0;
      switch(a3 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a2), a2)) {
            goto LABEL_24;
          }
          uint64_t v11 = HIDWORD(a2) - (int)a2;
LABEL_18:
          uint64_t result = v10 + v11;
          if (__OFADD__(v10, v11)) {
            goto LABEL_21;
          }
          return result;
        case 2uLL:
          uint64_t v13 = *(void *)(a2 + 16);
          uint64_t v12 = *(void *)(a2 + 24);
          BOOL v8 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v8) {
            goto LABEL_18;
          }
          goto LABEL_25;
        case 3uLL:
          goto LABEL_18;
        default:
          uint64_t v11 = BYTE6(a3);
          goto LABEL_18;
      }
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_10;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v5 = BYTE6(a3);
      goto LABEL_10;
  }
}

uint64_t sub_10018D744(unint64_t a1)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
LABEL_57:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x10018DB40);
  }
  if (!a1) {
    return 1;
  }
  unint64_t __src = bswap64(a1);
  unint64_t v1 = sub_1001B32C8(&__src, 8);
  unint64_t v3 = v2 >> 62;
  uint64_t v4 = v1;
  unint64_t v5 = v2;
  uint64_t v6 = 0;
  uint64_t v39 = (int)v1;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v6 = (int)v1;
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v1 + 16);
      break;
    default:
      break;
  }
  uint64_t v8 = (uint64_t)v1 >> 32;
  uint64_t v9 = BYTE6(v2);
  unint64_t v37 = v1 >> 16;
  unint64_t v38 = v1 >> 8;
  unint64_t v35 = HIDWORD(v1);
  unint64_t v36 = v1 >> 24;
  unint64_t v33 = HIWORD(v1);
  unint64_t v34 = v1 >> 40;
  unint64_t v31 = v2 >> 8;
  unint64_t v32 = HIBYTE(v1);
  unint64_t v29 = v2 >> 24;
  unint64_t v30 = v2 >> 16;
  uint64_t v27 = v6;
  unint64_t v28 = HIDWORD(v2);
  unint64_t v10 = v2 >> 40;
  while (2)
  {
    uint64_t v11 = BYTE6(v5);
    switch((int)v3)
    {
      case 0:
        goto LABEL_11;
      case 1:
        uint64_t v11 = v4 >> 32;
        goto LABEL_11;
      case 2:
        uint64_t v11 = *(void *)(v4 + 24);
LABEL_11:
        if (v6 == v11) {
          goto LABEL_29;
        }
        if (!v3)
        {
          if (v6 < BYTE6(v5))
          {
            v40[0] = v4;
            v40[1] = v38;
            v40[2] = v37;
            v40[3] = v36;
            v40[4] = v35;
            v40[5] = v34;
            v40[6] = v33;
            v40[7] = v32;
            v40[8] = v5;
            v40[9] = v31;
            v40[10] = v30;
            v40[11] = v29;
            v40[12] = v28;
            v40[13] = v10;
            if (v40[v6]) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
        if (v3 == 1)
        {
          if (v6 < v39 || v6 >= v8) {
            goto LABEL_45;
          }
          sub_10006D0EC(v4, v5);
          uint64_t v12 = __DataStorage._bytes.getter();
          if (!v12) {
            goto LABEL_54;
          }
          uint64_t v13 = v12;
          uint64_t v14 = __DataStorage._offset.getter();
          uint64_t v15 = v6 - v14;
          if (__OFSUB__(v6, v14)) {
            goto LABEL_47;
          }
        }
        else
        {
          if (v6 < *(void *)(v4 + 16)) {
            goto LABEL_44;
          }
          if (v6 >= *(void *)(v4 + 24)) {
            goto LABEL_46;
          }
          sub_10006D0EC(v4, v5);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_55;
          }
          uint64_t v13 = v16;
          uint64_t v17 = __DataStorage._offset.getter();
          uint64_t v15 = v6 - v17;
          if (__OFSUB__(v6, v17)) {
            goto LABEL_48;
          }
        }
        int v18 = *(unsigned __int8 *)(v13 + v15);
        sub_10006D144(v4, v5);
        if (!v18)
        {
LABEL_28:
          ++v6;
          continue;
        }
LABEL_29:
        if (v3)
        {
          uint64_t v9 = v4 >> 32;
          if (v3 != 1) {
            uint64_t v9 = *(void *)(v4 + 24);
          }
        }
        if (v9 < v6)
        {
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
        }
LABEL_33:
        uint64_t v19 = Data._Representation.subscript.getter();
        unint64_t v21 = v20;
        sub_10006D144(v4, v5);
        uint64_t v22 = 0;
        switch(v21 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v19), v19)) {
              goto LABEL_51;
            }
            uint64_t v22 = HIDWORD(v19) - (int)v19;
LABEL_38:
            sub_10006D0EC(v19, v21);
            unsigned int v25 = sub_1000BB28C(v19, v21);
            sub_10006D144(v19, v21);
            if ((v25 & 0x100) != 0)
            {
              __break(1u);
              goto LABEL_57;
            }
            sub_10006D144(v19, v21);
            uint64_t v26 = (v25 >> 7) & 1;
            uint64_t result = v22 + v26;
            if (__OFADD__(v22, v26)) {
              goto LABEL_50;
            }
            return result;
          case 2uLL:
            uint64_t v24 = *(void *)(v19 + 16);
            uint64_t v23 = *(void *)(v19 + 24);
            uint64_t v22 = v23 - v24;
            if (!__OFSUB__(v23, v24)) {
              goto LABEL_38;
            }
            goto LABEL_52;
          case 3uLL:
            goto LABEL_38;
          default:
            uint64_t v22 = BYTE6(v21);
            goto LABEL_38;
        }
      case 3:
        if (!v27) {
          goto LABEL_33;
        }
        goto LABEL_53;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_10018DB70(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = type metadata accessor for Mirror();
  __chkstk_darwin(v14, v15);
  uint64_t v93 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a6 >> 6)
  {
    case 1:
      uint64_t v86 = v16;
      uint64_t v87 = a5;
      uint64_t v32 = *(void *)(a1 + 24);
      a1 = (uint64_t)sub_100075908((void *)a1, v32);
      v102[1] = v32;
      unint64_t v33 = sub_1001883A8(&v101);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v33, a1, v32);
      swift_bridgeObjectRetain();
      Mirror.init(reflecting:)();
      uint64_t v34 = *(void *)(a4 + 16);
      if (!v34)
      {
        uint64_t v91 = 0;
        uint64_t v58 = v87;
LABEL_35:
        (*(void (**)(char *, uint64_t))(v86 + 8))(v93, v14);
        sub_10016FC10(a4, v58, a6);
        uint64_t v31 = v91;
LABEL_36:
        if (a3)
        {
          sub_10007BF50();
          swift_allocError();
          *(void *)(v65 + 8) = 0;
          *(void *)(v65 + 16) = 0;
          *(void *)uint64_t v65 = 5;
          *(unsigned char *)(v65 + 24) = 3;
          swift_willThrow();
          return a1;
        }
        if (a2 >= 255)
        {
          if ((unint64_t)a2 >= 0xFFFF) {
            goto LABEL_77;
          }
          uint64_t v64 = 2;
          if (v31 >= 127) {
            goto LABEL_44;
          }
          uint64_t v63 = 1;
        }
        else
        {
          uint64_t v63 = 1;
          uint64_t v64 = 1;
          if (v31 >= 127)
          {
LABEL_44:
            uint64_t v66 = 1;
            uint64_t v67 = v31;
            while (1)
            {
              uint64_t v63 = v66 + 1;
              if (__OFADD__(v66, 1)) {
                break;
              }
              ++v66;
              BOOL v68 = (unint64_t)v67 >= 0x100;
              v67 >>= 8;
              if (!v68) {
                goto LABEL_47;
              }
            }
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x10018E864);
          }
        }
LABEL_47:
        BOOL v69 = __OFADD__(v64, v63);
        uint64_t v70 = v64 + v63;
        if (!v69)
        {
          a1 = v70 + v31;
          if (__OFADD__(v70, v31))
          {
            __break(1u);
LABEL_51:
            swift_bridgeObjectRelease();
            sub_10007BF50();
            swift_allocError();
            *(void *)(v71 + 8) = 0;
            *(void *)(v71 + 16) = 0;
            *(void *)uint64_t v71 = 2;
            *(unsigned char *)(v71 + 24) = 3;
            swift_willThrow();
            uint64_t v23 = &v101;
LABEL_4:
            sub_10007594C((uint64_t)v23);
          }
          return a1;
        }
        goto LABEL_74;
      }
      uint64_t v84 = v14;
      HIDWORD(v82) = a3;
      uint64_t v83 = a2;
      int v85 = a6;
      uint64_t v110 = v7;
      uint64_t v89 = v102;
      swift_bridgeObjectRetain();
      uint64_t v91 = 0;
      unint64_t v35 = (uint64_t *)&unk_1004556C0;
      uint64_t v36 = a4 + 48;
      uint64_t v88 = (char *)&type metadata for Any + 8;
      uint64_t v90 = a4;
      break;
    case 2:
      __n128 v24 = *(__n128 *)(a4 + 32);
      long long v105 = *(_OWORD *)(a4 + 16);
      long long v25 = *(_OWORD *)(a4 + 48);
      __n128 v106 = v24;
      long long v107 = v25;
      sub_10016FB80(&v106, &v108);
      uint64_t v109 = *((void *)&v107 + 1);
      sub_10010DDC4(a1, (uint64_t)&v101);
      sub_10018F814(a4, a5, a6);
      sub_10018F838((uint64_t)&v108);
      sub_10018F86C((uint64_t)&v109);
      a1 = sub_10006C51C((uint64_t *)&unk_10045B6E0);
      sub_10006C51C(&qword_1004568D0);
      swift_dynamicCast();
      uint64_t v26 = sub_10018BFDC(&v103, &v105);
      if (v6)
      {
        sub_10016FBDC((uint64_t)&v108);
        sub_10016FC34((uint64_t)&v109);
        sub_10007594C((uint64_t)&v103);
        uint64_t v27 = a4;
        uint64_t v28 = a5;
        unsigned __int8 v29 = a6;
        goto LABEL_64;
      }
      uint64_t v50 = v26;
      sub_10016FBDC((uint64_t)&v108);
      sub_10016FC34((uint64_t)&v109);
      sub_10007594C((uint64_t)&v103);
      sub_10016FC10(a4, a5, a6);
      uint64_t v31 = v50;
      goto LABEL_36;
    case 3:
      if (a5 | a4 || a6 != 192)
      {
        if (a4 == 1 && !a5 && a6 == 192)
        {
          sub_10010DDC4(a1, (uint64_t)&v101);
          sub_10006C51C((uint64_t *)&unk_10045B6E0);
          swift_dynamicCast();
          uint64_t v31 = sub_10018D744(v103);
        }
        else
        {
          if (a4 != 2 || a5 || a6 != 192)
          {
            sub_10010DDC4(a1, (uint64_t)&v101);
            sub_10006C51C((uint64_t *)&unk_10045B6E0);
            swift_dynamicCast();
            a1 = *((void *)&v103 + 1);
            uint64_t v73 = v103;
            switch(*((void *)&v103 + 1) >> 62)
            {
              case 1:
                unint64_t v81 = DWORD1(v103);
                sub_10006D144(v103, *((unint64_t *)&v103 + 1));
                if (__OFSUB__(v81, v73)) {
                  goto LABEL_76;
                }
                a1 = (int)v81 - (int)v73;
                break;
              case 2:
                uint64_t v80 = *(void *)(v103 + 16);
                uint64_t v79 = *(void *)(v103 + 24);
                sub_10006D144(v103, *((unint64_t *)&v103 + 1));
                a1 = v79 - v80;
                if (!__OFSUB__(v79, v80)) {
                  return a1;
                }
                __break(1u);
LABEL_69:
                sub_10006D144(v73, a1);
                a1 = 0;
                break;
              case 3:
                goto LABEL_69;
              default:
                sub_10006D144(v103, *((unint64_t *)&v103 + 1));
                return BYTE6(a1);
            }
            return a1;
          }
          uint64_t v31 = 1;
        }
      }
      else
      {
        sub_10010DDC4(a1, (uint64_t)&v101);
        sub_10006C51C((uint64_t *)&unk_10045B6E0);
        swift_dynamicCast();
        a1 = *((void *)&v103 + 1);
        uint64_t v30 = v103;
        switch(*((void *)&v103 + 1) >> 62)
        {
          case 1:
            unint64_t v76 = DWORD1(v103);
            sub_10006D144(v103, *((unint64_t *)&v103 + 1));
            if (__OFSUB__(v76, v30)) {
              goto LABEL_75;
            }
            uint64_t v31 = (int)v76 - (int)v30;
            break;
          case 2:
            uint64_t v75 = *(void *)(v103 + 16);
            uint64_t v74 = *(void *)(v103 + 24);
            sub_10006D144(v103, *((unint64_t *)&v103 + 1));
            uint64_t v31 = v74 - v75;
            if (!__OFSUB__(v74, v75)) {
              goto LABEL_36;
            }
            __break(1u);
LABEL_58:
            sub_10006D144(v30, a1);
            uint64_t v31 = 0;
            break;
          case 3:
            goto LABEL_58;
          default:
            sub_10006D144(v103, *((unint64_t *)&v103 + 1));
            uint64_t v31 = BYTE6(a1);
            goto LABEL_36;
        }
      }
      goto LABEL_36;
    default:
      uint64_t v18 = a5;
      uint64_t v19 = *(void *)(a1 + 24);
      a1 = (uint64_t)sub_100075908((void *)a1, v19);
      uint64_t v104 = v19;
      unint64_t v20 = sub_1001883A8((uint64_t *)&v103);
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v20, a1, v19);
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_10018BD80((uint64_t)&v101, (uint64_t)&v103);
      if (v6)
      {
        sub_10016FC10(a4, v18, a6);
        uint64_t v23 = (uint64_t *)&v103;
        goto LABEL_4;
      }
      uint64_t v51 = v21;
      uint64_t v52 = v22;
      sub_10007594C((uint64_t)&v103);
      a1 = sub_10018C2B4(a4, v51, v52);
      swift_bridgeObjectRelease();
      sub_10016FC10(a4, v18, a6);
      if (!*(void *)(a1 + 16)) {
        goto LABEL_51;
      }
      uint64_t v53 = *(void *)(a1 + 48);
      uint64_t v54 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v55 = *(void *)(a1 + 64);
      uint64_t v56 = *(void *)(a1 + 72);
      uint64_t v57 = *(unsigned __int8 *)(a1 + 80);
      swift_bridgeObjectRetain();
      sub_10018F814(v55, v56, v57);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1 = sub_10018DB70(&v101, v53, v54, v55, v56, v57);
      swift_bridgeObjectRelease();
      sub_10016FC10(v55, v56, v57);
      swift_bridgeObjectRelease();
      sub_10007594C((uint64_t)&v101);
      return a1;
  }
  while (1)
  {
    unint64_t v37 = v35;
    uint64_t v94 = v34;
    uint64_t v92 = *(void *)v36;
    uint64_t v38 = *(unsigned __int8 *)(v36 + 8);
    char v39 = *(unsigned char *)(v36 + 9);
    uint64_t v41 = *(void *)(v36 + 16);
    uint64_t v40 = *(void *)(v36 + 24);
    unsigned int v42 = *(unsigned __int8 *)(v36 + 32);
    uint64_t v43 = *(void *)(v36 + 40);
    swift_bridgeObjectRetain();
    uint64_t v96 = v41;
    uint64_t v97 = v40;
    unsigned int v98 = v42;
    sub_10018F814(v41, v40, v42);
    uint64_t v95 = v43;
    swift_bridgeObjectRetain();
    uint64_t v44 = Mirror.children.getter();
    __chkstk_darwin(v44, v45);
    uint64_t v46 = v110;
    a1 = dispatch thunk of _AnySequenceBox._filter(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    if (*(void *)(a1 + 16) != 1)
    {
      uint64_t v59 = v90;
      uint64_t v60 = v87;
      unsigned __int8 v61 = v85;
      sub_10016FC10(v90, v87, v85);
      swift_bridgeObjectRelease();
      sub_10007BF50();
      swift_allocError();
      *(void *)(v62 + 8) = 0;
      *(void *)(v62 + 16) = 0;
      *(void *)uint64_t v62 = 2;
      *(unsigned char *)(v62 + 24) = 3;
      swift_willThrow();
      sub_10016FC10(v96, v97, v98);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v93, v84);
      uint64_t v27 = v59;
      uint64_t v28 = v60;
      goto LABEL_63;
    }
    sub_10018F8B4(a1 + 32, (uint64_t)&v101);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v35 = v37;
    sub_10006C51C(v37);
    swift_dynamicCast();
    if (v100)
    {
      sub_1000761D0(&v99, &v103);
      sub_1000AA580((uint64_t)&v103, (uint64_t)&v99);
      sub_10006C51C((uint64_t *)&unk_10045B6E0);
      swift_dynamicCast();
      uint64_t v47 = v96;
      a1 = v97;
      unsigned __int8 v48 = v98;
      uint64_t v49 = sub_10018DB70(&v101, v92, v38, v96, v97, v98);
      if (v46)
      {
        sub_10016FC10(v47, a1, v48);
        swift_bridgeObjectRelease();
        sub_10007594C((uint64_t)&v103);
        uint64_t v72 = v90;
        a1 = v87;
        unsigned __int8 v61 = v85;
        sub_10016FC10(v90, v87, v85);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v93, v84);
        sub_10007594C((uint64_t)&v101);
        goto LABEL_62;
      }
      a4 = v90;
      if (__OFADD__(v91, v49)) {
        goto LABEL_73;
      }
      v91 += v49;
      uint64_t v110 = 0;
      sub_10007594C((uint64_t)&v103);
      sub_10016FC10(v47, a1, v48);
      swift_bridgeObjectRelease();
      sub_10007594C((uint64_t)&v101);
      goto LABEL_13;
    }
    sub_10008E734((uint64_t)&v99, v37);
    if ((v39 & 1) == 0) {
      break;
    }
    uint64_t v110 = v46;
    sub_10016FC10(v96, v97, v98);
    swift_bridgeObjectRelease();
    a4 = v90;
LABEL_13:
    v36 += 64;
    uint64_t v34 = v94 - 1;
    if (v94 == 1)
    {
      uint64_t v58 = v87;
      LOBYTE(a6) = v85;
      sub_10016FC10(a4, v87, v85);
      a2 = v83;
      LOBYTE(a3) = BYTE4(v82);
      uint64_t v14 = v84;
      goto LABEL_35;
    }
  }
  uint64_t v72 = v90;
  a1 = v87;
  unsigned __int8 v61 = v85;
  sub_10016FC10(v90, v87, v85);
  sub_10007BF50();
  swift_allocError();
  *(void *)(v77 + 8) = 0;
  *(void *)(v77 + 16) = 0;
  *(void *)uint64_t v77 = 3;
  *(unsigned char *)(v77 + 24) = 3;
  swift_willThrow();
  sub_10016FC10(v96, v97, v98);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v93, v84);
LABEL_62:
  uint64_t v27 = v72;
  uint64_t v28 = a1;
LABEL_63:
  unsigned __int8 v29 = v61;
LABEL_64:
  sub_10016FC10(v27, v28, v29);
  return a1;
}

uint64_t sub_10018E894(uint64_t a1)
{
  if (a1 <= 254)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      return Data._Representation.append(contentsOf:)();
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_10;
  }
  if ((unint64_t)a1 > 0xFFFE)
  {
LABEL_10:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  __int16 v2 = bswap32(a1) >> 16;
  if (*(void *)(sub_10018C200((size_t)&v2, (unint64_t)&v3) + 16)) {
    Data._Representation.append(contentsOf:)();
  }
  return swift_release();
}

uint64_t sub_10018E9E8(uint64_t a1)
{
  if (a1 < 128)
  {
    if ((a1 & 0x8000000000000000) == 0) {
      return sub_100265B48(a1);
    }
LABEL_50:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x10018EDE4);
  }
  uint64_t v2 = 0;
  unint64_t v3 = a1;
  do
  {
    ++v2;
    BOOL v4 = v3 > 0xFF;
    v3 >>= 8;
  }
  while (v4);
  if ((v2 | 0x80uLL) >= 0x100) {
    goto LABEL_50;
  }
  sub_100265B48(v2 | 0x80);
  if (a1 >= (uint64_t)&_mh_execute_header) {
    goto LABEL_50;
  }
  unsigned int __src = bswap32(a1);
  unint64_t v5 = sub_1001B32C8(&__src, 4);
  unint64_t v7 = v6 >> 62;
  uint64_t v8 = v5;
  unint64_t v9 = v6;
  uint64_t v10 = 0;
  uint64_t v38 = (int)v5;
  switch(v6 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)v5;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(v5 + 16);
      break;
    default:
      break;
  }
  uint64_t v12 = (uint64_t)v5 >> 32;
  uint64_t v13 = BYTE6(v6);
  unint64_t v36 = v5 >> 16;
  unint64_t v37 = v5 >> 8;
  unint64_t v34 = HIDWORD(v5);
  unint64_t v35 = v5 >> 24;
  unint64_t v32 = HIWORD(v5);
  unint64_t v33 = v5 >> 40;
  unint64_t v30 = v6 >> 8;
  unint64_t v31 = HIBYTE(v5);
  unint64_t v28 = v6 >> 24;
  unint64_t v29 = v6 >> 16;
  unint64_t v27 = HIDWORD(v6);
  unint64_t v14 = v6 >> 40;
  uint64_t v26 = v10;
  while (2)
  {
    uint64_t v15 = BYTE6(v9);
    switch((int)v7)
    {
      case 0:
        goto LABEL_15;
      case 1:
        uint64_t v15 = v8 >> 32;
        goto LABEL_15;
      case 2:
        uint64_t v15 = *(void *)(v8 + 24);
LABEL_15:
        if (v10 == v15) {
          goto LABEL_33;
        }
        if (!v7)
        {
          if (v10 < BYTE6(v9))
          {
            v39[0] = v8;
            v39[1] = v37;
            v39[2] = v36;
            v39[3] = v35;
            v39[4] = v34;
            v39[5] = v33;
            v39[6] = v32;
            v39[7] = v31;
            v39[8] = v9;
            v39[9] = v30;
            v39[10] = v29;
            v39[11] = v28;
            v39[12] = v27;
            v39[13] = v14;
            if (v39[v10]) {
              goto LABEL_33;
            }
            goto LABEL_32;
          }
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
        }
        if (v7 == 1)
        {
          if (v10 < v38 || v10 >= v12) {
            goto LABEL_42;
          }
          sub_10006D0EC(v8, v9);
          uint64_t v16 = __DataStorage._bytes.getter();
          if (!v16) {
            goto LABEL_48;
          }
          uint64_t v17 = v16;
          uint64_t v18 = __DataStorage._offset.getter();
          uint64_t v19 = v10 - v18;
          if (__OFSUB__(v10, v18)) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v10 < *(void *)(v8 + 16)) {
            goto LABEL_41;
          }
          if (v10 >= *(void *)(v8 + 24)) {
            goto LABEL_43;
          }
          sub_10006D0EC(v8, v9);
          uint64_t v20 = __DataStorage._bytes.getter();
          if (!v20) {
            goto LABEL_49;
          }
          uint64_t v17 = v20;
          uint64_t v21 = __DataStorage._offset.getter();
          uint64_t v19 = v10 - v21;
          if (__OFSUB__(v10, v21)) {
            goto LABEL_45;
          }
        }
        int v22 = *(unsigned __int8 *)(v17 + v19);
        sub_10006D144(v8, v9);
        if (!v22)
        {
LABEL_32:
          ++v10;
          continue;
        }
LABEL_33:
        if (v7)
        {
          uint64_t v13 = v8 >> 32;
          if (v7 != 1) {
            uint64_t v13 = *(void *)(v8 + 24);
          }
        }
        if (v13 < v10) {
          goto LABEL_46;
        }
LABEL_37:
        uint64_t v23 = Data._Representation.subscript.getter();
        unint64_t v25 = v24;
        sub_10006D144(v8, v9);
        Data.append(_:)();
        return sub_10006D144(v23, v25);
      case 3:
        if (!v26) {
          goto LABEL_37;
        }
        goto LABEL_47;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_10018EE04(uint64_t a1, unint64_t a2)
{
  sub_10018E894(a1);
  uint64_t v3 = sub_10018D744(a2);
  sub_10018E9E8(v3);
  if (!a2) {
    return sub_100265B48(0);
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
LABEL_50:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x10018F1E4);
  }
  unint64_t __src = bswap64(a2);
  unint64_t v4 = sub_1001B32C8(&__src, 8);
  unint64_t v6 = v5 >> 62;
  uint64_t v7 = v4;
  unint64_t v8 = v5;
  uint64_t v9 = 0;
  uint64_t v38 = (int)v4;
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (int)v4;
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(v4 + 16);
      break;
    default:
      break;
  }
  uint64_t v11 = (uint64_t)v4 >> 32;
  uint64_t v12 = BYTE6(v5);
  unint64_t v36 = v4 >> 16;
  unint64_t v37 = v4 >> 8;
  unint64_t v34 = HIDWORD(v4);
  unint64_t v35 = v4 >> 24;
  unint64_t v32 = HIWORD(v4);
  unint64_t v33 = v4 >> 40;
  unint64_t v30 = v5 >> 8;
  unint64_t v31 = HIBYTE(v4);
  unint64_t v28 = v5 >> 24;
  unint64_t v29 = v5 >> 16;
  unint64_t v27 = HIDWORD(v5);
  unint64_t v13 = v5 >> 40;
  uint64_t v26 = v9;
  while (2)
  {
    uint64_t v14 = BYTE6(v8);
    switch((int)v6)
    {
      case 0:
        goto LABEL_11;
      case 1:
        uint64_t v14 = v7 >> 32;
        goto LABEL_11;
      case 2:
        uint64_t v14 = *(void *)(v7 + 24);
LABEL_11:
        if (v9 == v14) {
          goto LABEL_29;
        }
        if (!v6)
        {
          if (v9 < BYTE6(v8))
          {
            v39[0] = v7;
            v39[1] = v37;
            v39[2] = v36;
            v39[3] = v35;
            v39[4] = v34;
            v39[5] = v33;
            v39[6] = v32;
            v39[7] = v31;
            v39[8] = v8;
            v39[9] = v30;
            v39[10] = v29;
            v39[11] = v28;
            v39[12] = v27;
            v39[13] = v13;
            if (v39[v9]) {
              goto LABEL_29;
            }
            goto LABEL_28;
          }
          __break(1u);
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
        }
        if (v6 == 1)
        {
          if (v9 < v38 || v9 >= v11) {
            goto LABEL_41;
          }
          sub_10006D0EC(v7, v8);
          uint64_t v15 = __DataStorage._bytes.getter();
          if (!v15) {
            goto LABEL_47;
          }
          uint64_t v16 = v15;
          uint64_t v17 = __DataStorage._offset.getter();
          uint64_t v18 = v9 - v17;
          if (__OFSUB__(v9, v17)) {
            goto LABEL_43;
          }
        }
        else
        {
          if (v9 < *(void *)(v7 + 16)) {
            goto LABEL_40;
          }
          if (v9 >= *(void *)(v7 + 24)) {
            goto LABEL_42;
          }
          sub_10006D0EC(v7, v8);
          uint64_t v19 = __DataStorage._bytes.getter();
          if (!v19) {
            goto LABEL_48;
          }
          uint64_t v16 = v19;
          uint64_t v20 = __DataStorage._offset.getter();
          uint64_t v18 = v9 - v20;
          if (__OFSUB__(v9, v20)) {
            goto LABEL_44;
          }
        }
        int v21 = *(unsigned __int8 *)(v16 + v18);
        sub_10006D144(v7, v8);
        if (!v21)
        {
LABEL_28:
          ++v9;
          continue;
        }
LABEL_29:
        if (v6)
        {
          uint64_t v12 = v7 >> 32;
          if (v6 != 1) {
            uint64_t v12 = *(void *)(v7 + 24);
          }
        }
        if (v12 < v9) {
          goto LABEL_45;
        }
LABEL_33:
        uint64_t v22 = Data._Representation.subscript.getter();
        unint64_t v24 = v23;
        sub_10006D144(v7, v8);
        sub_10006D0EC(v22, v24);
        __int16 v25 = sub_1000BB28C(v22, v24);
        sub_10006D144(v22, v24);
        if ((v25 & 0x100) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        if ((v25 & 0x80) != 0) {
          sub_100265B48(0);
        }
        Data.append(_:)();
        return sub_10006D144(v22, v24);
      case 3:
        if (!v26) {
          goto LABEL_33;
        }
        goto LABEL_46;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_10018F204(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v36 = a5;
  uint64_t v9 = type metadata accessor for Mirror();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  unint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1[3];
  uint64_t v15 = sub_100075908(a1, v14);
  v47[1] = v14;
  uint64_t v16 = sub_1001883A8(&v46);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v16, v15, v14);
  char v39 = v13;
  Mirror.init(reflecting:)();
  uint64_t v17 = *(void *)(a2 + 16);
  if (!v17) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v39, v9);
  }
  uint64_t v34 = v10;
  uint64_t v35 = v9;
  uint64_t v38 = v47;
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v18 = (uint64_t *)(a2 + 48);
  unint64_t v37 = (char *)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v40 = v17;
    uint64_t v20 = *(v18 - 2);
    uint64_t v19 = *(v18 - 1);
    char v21 = *((unsigned char *)v18 + 8);
    char v22 = *((unsigned char *)v18 + 9);
    uint64_t v24 = v18[2];
    uint64_t v23 = v18[3];
    int v25 = *((unsigned __int8 *)v18 + 32);
    uint64_t v26 = v18[5];
    uint64_t v49 = *v18;
    char v50 = v21;
    char v51 = v22;
    uint64_t v52 = v24;
    uint64_t v53 = v23;
    char v54 = v25;
    uint64_t v55 = v26;
    swift_bridgeObjectRetain();
    uint64_t v41 = v24;
    uint64_t v42 = v23;
    int v43 = v25;
    sub_10018F814(v24, v23, v25);
    uint64_t v56 = v26;
    swift_bridgeObjectRetain();
    uint64_t v27 = Mirror.children.getter();
    __chkstk_darwin(v27, v28);
    *(&v33 - 2) = v20;
    *(&v33 - 1) = v19;
    uint64_t v29 = dispatch thunk of _AnySequenceBox._filter(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    if (*(void *)(v29 + 16) != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10007BF50();
      swift_allocError();
      *(void *)(v30 + 8) = 0;
      *(void *)(v30 + 16) = 0;
      *(void *)uint64_t v30 = 2;
      *(unsigned char *)(v30 + 24) = 3;
      goto LABEL_15;
    }
    sub_10018F8B4(v29 + 32, (uint64_t)&v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006C51C((uint64_t *)&unk_1004556C0);
    swift_dynamicCast();
    if (!v45) {
      break;
    }
    sub_1000761D0(&v44, v48);
    sub_1000AA580((uint64_t)v48, (uint64_t)&v44);
    sub_10006C51C((uint64_t *)&unk_10045B6E0);
    swift_dynamicCast();
    sub_10018ADFC(&v46, &v49, v36);
    if (v6)
    {
      sub_10016FC10(v41, v42, v43);
      swift_bridgeObjectRelease();
      sub_10007594C((uint64_t)v48);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v35);
      return sub_10007594C((uint64_t)&v46);
    }
    sub_10007594C((uint64_t)v48);
    sub_10016FC10(v41, v42, v43);
    swift_bridgeObjectRelease();
    sub_10007594C((uint64_t)&v46);
LABEL_5:
    v18 += 8;
    uint64_t v17 = v40 - 1;
    if (v40 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = v35;
      uint64_t v10 = v34;
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v39, v9);
    }
  }
  sub_10008E734((uint64_t)&v44, (uint64_t *)&unk_1004556C0);
  if (v22)
  {
    sub_10016FC10(v41, v42, v43);
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  sub_10007BF50();
  swift_allocError();
  *(void *)(v32 + 8) = 0;
  *(void *)(v32 + 16) = 0;
  *(void *)uint64_t v32 = 3;
  *(unsigned char *)(v32 + 24) = 3;
LABEL_15:
  swift_willThrow();
  sub_10016FC10(v41, v42, v43);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v39, v35);
}

uint64_t sub_10018F730(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10018E894(a1);
  uint64_t v5 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10018F7ECLL);
      }
      uint64_t v5 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_10018E9E8(v5);
      Data.append(_:)();
      return 0;
    case 2uLL:
      uint64_t v7 = *(void *)(a2 + 16);
      uint64_t v6 = *(void *)(a2 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v5 = BYTE6(a3);
      goto LABEL_6;
  }
}

uint64_t sub_10018F7FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a1 + 8);
  *(void *)a2 = v2;
  return a2;
}

uint64_t sub_10018F814(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  unsigned int v3 = a3 >> 6;
  if (v3 == 2) {
    return swift_retain();
  }
  if (v3 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10018F838(uint64_t a1)
{
  return a1;
}

uint64_t sub_10018F86C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10018F898(void *a1)
{
  return sub_10018F91C(a1) & 1;
}

uint64_t sub_10018F8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_1004568E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018F91C(void *a1)
{
  uint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  if (*a1 == *(void *)(v1 + 16) && v2 == *(void *)(v1 + 24)) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_10018F978()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10018F9B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10018F9C0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018F9D0()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10018FA08()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void *initializeBufferWithCopyOfBuffer for ASN1DecodedItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ASN1DecodedItem()
{
  return swift_release();
}

void *assignWithCopy for ASN1DecodedItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ASN1DecodedItem(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void *assignWithTake for ASN1DecodedItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1DecodedItem(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASN1DecodedItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(void *)uint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10018FBC0(void *a1)
{
  return *a1 >> 61;
}

void *sub_10018FBCC(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_10018FBDC(uint64_t *result, uint64_t a2)
{
  *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

ValueMetadata *type metadata accessor for ASN1DecodedItem()
{
  return &type metadata for ASN1DecodedItem;
}

uint64_t initializeBufferWithCopyOfBuffer for SERequest.ActionPostRequest(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1SequenceSpec.DecodeMode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1SequenceSpec.DecodeMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10018FCA0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10018FCA8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.DecodeMode()
{
  return &type metadata for ASN1SequenceSpec.DecodeMode;
}

uint64_t getEnumTagSinglePayload for SERequest.ActionPostRequest(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SERequest.ActionPostRequest(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_10018FD14(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10018FD30(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.TagSpec()
{
  return &type metadata for ASN1ItemSpec.TagSpec;
}

uint64_t destroy for ASN1ItemSpec(uint64_t a1)
{
  sub_10016FC10(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 32);
  sub_10018F814(v4, v5, v6);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ASN1ItemSpec(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unsigned __int8 v7 = *((unsigned char *)a2 + 32);
  sub_10018F814(v5, v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_10016FC10(v8, v9, v10);
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ASN1ItemSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  unsigned __int8 v7 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  sub_10016FC10(v5, v6, v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec()
{
  return &type metadata for ASN1ItemSpec;
}

__n128 initializeWithCopy for ASN1Error(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100190078(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 2u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_100190090(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 3;
  if (a2 >= 3)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 3;
    *(void *)__n128 result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ASN1Error()
{
  return &type metadata for ASN1Error;
}

uint64_t destroy for ASN1ItemSpec.DecoderType(uint64_t a1)
{
  return sub_10016FC10(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s10seserviced12ASN1ItemSpecV11DecoderTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10018F814(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ASN1ItemSpec.DecoderType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10018F814(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10016FC10(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ASN1ItemSpec.DecoderType(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10016FC10(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.DecoderType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.DecoderType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t sub_100190264(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16) >> 6;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

uint64_t sub_100190280(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t sub_100190290(uint64_t result, unsigned int a2)
{
  if (a2 < 3)
  {
    *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | ((_BYTE)a2 << 6);
  }
  else
  {
    *(void *)__n128 result = a2 - 3;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = -64;
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.DecoderType()
{
  return &type metadata for ASN1ItemSpec.DecoderType;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.UnorderedDecodeOptions()
{
  return &type metadata for ASN1SequenceSpec.UnorderedDecodeOptions;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec.OrderedDecodeOptions()
{
  return &type metadata for ASN1SequenceSpec.OrderedDecodeOptions;
}

__n128 initializeWithCopy for ASN1ItemSpec.Constraint(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ASN1ItemSpec.Constraint(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ASN1ItemSpec.Constraint(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ASN1ItemSpec.Constraint()
{
  return &type metadata for ASN1ItemSpec.Constraint;
}

uint64_t initializeBufferWithCopyOfBuffer for ASN1SequenceSpec(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ASN1SequenceSpec()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for ASN1SequenceSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for ASN1SequenceSpec(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ASN1SequenceSpec(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ASN1SequenceSpec(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ASN1SequenceSpec()
{
  return &type metadata for ASN1SequenceSpec;
}

unint64_t sub_1001904E4()
{
  unint64_t result = qword_1004568F8;
  if (!qword_1004568F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004568F8);
  }
  return result;
}

unint64_t sub_10019053C()
{
  unint64_t result = qword_100456900;
  if (!qword_100456900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456900);
  }
  return result;
}

unint64_t sub_100190594()
{
  unint64_t result = qword_100456908;
  if (!qword_100456908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456908);
  }
  return result;
}

unint64_t sub_1001905EC()
{
  unint64_t result = qword_100456910;
  if (!qword_100456910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456910);
  }
  return result;
}

unint64_t sub_100190644()
{
  unint64_t result = qword_100456918;
  if (!qword_100456918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456918);
  }
  return result;
}

unint64_t sub_10019069C()
{
  unint64_t result = qword_100456920;
  if (!qword_100456920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456920);
  }
  return result;
}

unint64_t sub_1001906F4()
{
  unint64_t result = qword_100456928;
  if (!qword_100456928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456928);
  }
  return result;
}

unint64_t sub_10019074C()
{
  unint64_t result = qword_100456930;
  if (!qword_100456930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456930);
  }
  return result;
}

uint64_t sub_1001907EC()
{
  qword_100468768 = type metadata accessor for BlessedUserControllerDefault();
  unk_100468770 = &off_100414000;
  sub_1001883A8(qword_100468750);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for BlessedUserControllerDefault()
{
  uint64_t result = qword_100456990;
  if (!qword_100456990) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001908B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_10019091C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_100190980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001909E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_100190A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_100190AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_100190B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100190B24);
}

uint64_t sub_100190B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100190B90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100190BA4);
}

uint64_t sub_100190BA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_100190C14()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double sub_100190CA0()
{
  type metadata accessor for SECQueueManager();
  uint64_t v0 = swift_allocObject();
  sub_10006C51C((uint64_t *)&unk_100456B70);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 48) = 0;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = _swiftEmptyArrayStorage;
  *(void *)(v1 + 40) = 0;
  *(void *)(v0 + 16) = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)(v0 + 56) = 0;
  qword_100468778 = v0;
  return result;
}

void sub_100190D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6 = *(char **)(a1 + 16);
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unsigned __int8 v6 = sub_100259A30(0, *((void *)v6 + 2) + 1, 1, v6);
  }
  unint64_t v8 = *((void *)v6 + 2);
  unint64_t v7 = *((void *)v6 + 3);
  if (v8 >= v7 >> 1) {
    unsigned __int8 v6 = sub_100259A30((char *)(v7 > 1), v8 + 1, 1, v6);
  }
  *((void *)v6 + 2) = v8 + 1;
  uint64_t v9 = &v6[16 * v8];
  *((void *)v9 + 4) = a2;
  *((void *)v9 + 5) = a3;
  *(void *)(a1 + 16) = v6;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E55C(v10, (uint64_t)qword_1004686A8);
  swift_unknownObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v18, ObjectType, a3);
    uint64_t v15 = sub_100124BBC();
    unint64_t v17 = v16;
    sub_10012921C((uint64_t)v18);
    sub_100290514(v15, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Queued SECSession with client info %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
}

uint64_t sub_100190F94(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  unint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v8 = *(os_unfair_lock_s **)(v2 + 16);
  uint64_t v18 = a1;
  uint64_t v15 = sub_100192C30;
  unint64_t v16 = &v17;
  swift_retain();
  os_unfair_lock_lock(v8 + 12);
  sub_100129200((uint64_t)&v8[4]);
  os_unfair_lock_unlock(v8 + 12);
  swift_release();
  uint64_t v9 = *(void *)(v2 + 16);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 48));
  sub_1001D0F30((void *)(v9 + 16), &v19);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 48));
  long long v10 = v19;
  uint64_t result = swift_release();
  if ((void)v10)
  {
    uint64_t v12 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(_OWORD *)(v13 + 32) = v10;
    sub_10028E720((uint64_t)v7, (uint64_t)&unk_100457C90, v13);
    return swift_release();
  }
  return result;
}

void sub_100191134(uint64_t a1, void *a2)
{
  sub_1002C0870(0, 0, (uint64_t)a2, (uint64_t)&off_100416E58);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Queued Admin Session", v5, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100191234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 128) = a4;
  *(void *)(v5 + 136) = a5;
  return _swift_task_switch(sub_100191254, 0, 0);
}

uint64_t sub_100191254()
{
  uint64_t v18 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  swift_unknownObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[17];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    swift_getObjectType();
    uint64_t v6 = _typeName(_:qualified:)();
    v0[14] = sub_100290514(v6, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
    uint64_t v9 = v0[6];
    unint64_t v10 = v0[7];
    swift_bridgeObjectRetain();
    sub_10012921C((uint64_t)(v0 + 2));
    v0[15] = sub_100290514(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting next session %s for client %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_unknownObjectRelease_n();
  }

  uint64_t v16 = v0[17];
  uint64_t v11 = swift_getObjectType();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v16 + 24) + **(int **)(v16 + 24));
  uint64_t v12 = (void *)swift_task_alloc();
  v0[18] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100191574;
  uint64_t v13 = v0[17];
  return v15(v11, v13);
}

uint64_t sub_100191574()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_100191668(void *a1@<X0>, void *a2@<X8>)
{
  if (*a1)
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = qword_1004536D0;
    swift_unknownObjectRetain();
    if (v5 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    swift_unknownObjectRetain_n();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v21, ObjectType, v4);
      uint64_t v11 = sub_100124BBC();
      unint64_t v13 = v12;
      sub_10012921C((uint64_t)v21);
      sub_100290514(v11, v13, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Current session with clientInfo %s is active", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v14 = (void *)a1[2];
  if (!v14[2])
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E55C(v17, (uint64_t)qword_1004686A8);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Pending Session Queue is empty; no session to start",
        v20,
        2u);
      swift_slowDealloc();
    }

    goto LABEL_16;
  }
  uint64_t v16 = v14[4];
  uint64_t v15 = v14[5];
  swift_unknownObjectRetain();
  sub_1002D2A3C(0, 1);
  *a1 = v16;
  a1[1] = v15;
  if (!a1[3]) {
    a1[3] = os_transaction_create();
  }
  *a2 = v16;
  a2[1] = v15;
  swift_unknownObjectRetain();
}

void sub_100191994(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v10)(uint64_t *__return_ptr, uint64_t, uint64_t);
  long long v11;
  uint64_t v12;
  long long v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(long long *__return_ptr, uint64_t, uint64_t);
  long long v38;
  long long v39;
  char v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void (*v76)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(long long *__return_ptr, uint64_t, uint64_t);
  long long v81;
  uint64_t v82;
  _OWORD v83[6];
  _OWORD v84[6];
  long long v85;
  uint64_t v86;
  long long v87;
  uint64_t v88;
  long long v89[6];
  long long v90[3];
  int v91;
  long long v92;
  long long v93;
  _OWORD v94[2];
  uint64_t v95;

  unint64_t v7 = a1;
  if (*a1)
  {
    uint64_t v8 = a1[1];
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v10 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v8 + 8);
    swift_unknownObjectRetain();
    uint64_t v79 = v8;
    unint64_t v76 = v10;
    v10((uint64_t *)v83, ObjectType, v8);
    v94[0] = v83[0];
    uint64_t v11 = v83[0];
    swift_bridgeObjectRetain();
    sub_10012921C((uint64_t)v83);
    unint64_t v12 = swift_getObjectType();
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v84, v12, a3);
    uint64_t v93 = v84[0];
    unint64_t v13 = v84[0];
    swift_bridgeObjectRetain();
    sub_10012921C((uint64_t)v84);
    if (v11 == v13)
    {
      sub_100079B14((uint64_t)&v93);
      sub_100079B14((uint64_t)v94);
LABEL_5:
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E55C(v15, (uint64_t)qword_1004686A8);
      swift_unknownObjectRetain_n();
      uint64_t v16 = Logger.logObject.getter();
      uint64_t v17 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(void *)&v90[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        v76((uint64_t *)v89, ObjectType, v79);
        os_log_type_t v19 = sub_100124BBC();
        uint64_t v20 = a5;
        uint64_t v22 = v21;
        sub_10012921C((uint64_t)v89);
        *(void *)&uint64_t v87 = sub_100290514(v19, v22, (uint64_t *)v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_unknownObjectRelease_n();
        a5 = v20;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing current session with client info %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      swift_unknownObjectRelease();
      *unint64_t v7 = 0;
      v7[1] = 0;
      swift_beginAccess();
      sub_100192B68(a4 + 24, (uint64_t)&v87);
      if (v88)
      {
        sub_10010DDC4((uint64_t)&v87, (uint64_t)&v85);
        sub_100192BD0((uint64_t)&v87);
        sub_100075908(&v85, v86);
        uint64_t v23 = v79;
        v76((uint64_t *)v90, ObjectType, v79);
        sub_10012921C((uint64_t)v90);
        uint64_t v24 = v91;
        int v25 = Logger.logObject.getter();
        uint64_t v26 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "didDequeueActiveSession: Current assertion (if any) invalidated", v27, 2u);
          swift_slowDealloc();
        }

        sub_1001260E0(v24);
        sub_10007594C((uint64_t)&v85);
      }
      else
      {
        sub_100192BD0((uint64_t)&v87);
        uint64_t v23 = v79;
      }
      uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(ObjectType, v23);
      if (v28)
      {
        uint64_t v29 = (void *)v28;
        if (a5) {
          uint64_t v30 = (void *)_convertErrorToNSError(_:)();
        }
        else {
          uint64_t v30 = 0;
        }
        [v29 sessionEndedWithError:v30];

        swift_unknownObjectRelease();
      }
      swift_unknownObjectRelease();
LABEL_44:
      if (!*(void *)(v7[2] + 16))
      {
        swift_unknownObjectRelease();
        v7[3] = 0;
      }
      return;
    }
    uint64_t v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_100079B14((uint64_t)&v93);
    sub_100079B14((uint64_t)v94);
    if (v14) {
      goto LABEL_5;
    }
    swift_unknownObjectRelease();
  }
  unint64_t v31 = v7[2];
  uint64_t v32 = *(void *)(v31 + 16);
  uint64_t v77 = v7;
  if (!v32)
  {
LABEL_27:
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_10008E55C(v41, (uint64_t)qword_1004686A8);
    swift_unknownObjectRetain_n();
    uint64_t v42 = Logger.logObject.getter();
    int v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      long long v44 = (uint8_t *)swift_slowAlloc();
      *(void *)&v89[0] = swift_slowAlloc();
      *(_DWORD *)long long v44 = 136315138;
      uint64_t v45 = swift_getObjectType();
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 8))(v90, v45, a3);
      uint64_t v46 = sub_100124BBC();
      unsigned __int8 v48 = v47;
      sub_10012921C((uint64_t)v90);
      uint64_t v95 = sub_100290514(v46, v48, (uint64_t *)v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Session with client info %s is not active nor pending", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease_n();
    }
    goto LABEL_44;
  }
  uint64_t v74 = a5;
  uint64_t v33 = a3;
  uint64_t v78 = swift_getObjectType();
  uint64_t v80 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a3 + 8);
  swift_bridgeObjectRetain();
  uint64_t v34 = (uint64_t *)(v31 + 40);
  while (1)
  {
    uint64_t v35 = *v34;
    uint64_t v36 = swift_getObjectType();
    unint64_t v37 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v35 + 8);
    swift_unknownObjectRetain();
    v37(&v85, v36, v35);
    unint64_t v81 = v85;
    uint64_t v38 = v85;
    swift_bridgeObjectRetain();
    sub_10012921C((uint64_t)&v85);
    v80(&v87, v78, v33);
    uint64_t v92 = v87;
    char v39 = v87;
    swift_bridgeObjectRetain();
    sub_10012921C((uint64_t)&v87);
    if (v38 == v39)
    {
      sub_100079B14((uint64_t)&v92);
      sub_100079B14((uint64_t)&v81);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      goto LABEL_33;
    }
    uint64_t v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_100079B14((uint64_t)&v92);
    sub_100079B14((uint64_t)&v81);
    swift_unknownObjectRelease();
    if (v40) {
      break;
    }
    v34 += 2;
    if (!--v32)
    {
      swift_bridgeObjectRelease();
      a3 = v33;
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease();
LABEL_33:
  uint64_t v49 = v33;
  v80(v89, v78, v33);
  char v50 = swift_bridgeObjectRetain();
  char v51 = sub_100192A30(v50, (uint64_t *)v89);
  uint64_t v53 = v52;
  swift_bridgeObjectRelease();
  if ((v53 & 1) == 0)
  {
    sub_100178A30(v51);
    uint64_t v55 = v54;
    sub_10012921C((uint64_t)v89);
    uint64_t v56 = swift_getObjectType();
    uint64_t v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 16))(v56, v55);
    if (v57)
    {
      uint64_t v58 = (void *)v57;
      if (v74) {
        uint64_t v59 = (void *)_convertErrorToNSError(_:)();
      }
      else {
        uint64_t v59 = 0;
      }
      [v58 sessionEndedWithError:v59];

      swift_unknownObjectRelease();
    }
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_10008E55C(v67, (uint64_t)qword_1004686A8);
    swift_unknownObjectRetain_n();
    BOOL v68 = Logger.logObject.getter();
    BOOL v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 136315138;
      v80(v90, v78, v49);
      uint64_t v71 = sub_100124BBC();
      uint64_t v73 = v72;
      sub_10012921C((uint64_t)v90);
      uint64_t v82 = sub_100290514(v71, v73, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Removing pending session with client info %s", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
    }
    unint64_t v7 = v77;
    goto LABEL_44;
  }
  sub_10012921C((uint64_t)v89);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  sub_10008E55C(v60, (uint64_t)qword_1004686A8);
  swift_unknownObjectRetain_n();
  unsigned __int8 v61 = Logger.logObject.getter();
  uint64_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v63 = 136315138;
    v80(v90, v78, v33);
    uint64_t v64 = sub_100124BBC();
    uint64_t v66 = v65;
    sub_10012921C((uint64_t)v90);
    uint64_t v82 = sub_100290514(v64, v66, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "Unable to retrieve queued session with client info %s", v63, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
}

uint64_t sub_1001925C4()
{
  swift_release();
  sub_100192BD0(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SECQueueManager()
{
  return self;
}

uint64_t sub_100192628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

void *sub_100192634(void *result)
{
  if (*result) {
    return (void *)swift_release();
  }
  return result;
}

void *sub_100192648(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

void *sub_10019268C(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_100192704(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t sub_100192770(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1001927CC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for SECSessionManagementDelegate()
{
  return sub_1000B3E5C();
}

uint64_t destroy for SECQueueManagerProtected()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for SECQueueManagerProtected(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for SECQueueManagerProtected(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SECQueueManagerProtected(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SECQueueManagerProtected(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SECQueueManagerProtected(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECQueueManagerProtected()
{
  return &type metadata for SECQueueManagerProtected;
}

uint64_t sub_100192A30(uint64_t a1, uint64_t *a2)
{
  void (*v9)(_OWORD *__return_ptr, uint64_t, uint64_t);
  long long v10;
  char v12;
  _OWORD v14[6];
  long long v15;

  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    uint64_t v7 = *i;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = *(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8);
    swift_unknownObjectRetain();
    v9(v14, ObjectType, v7);
    uint64_t v15 = v14[0];
    unint64_t v10 = v14[0];
    swift_bridgeObjectRetain();
    sub_10012921C((uint64_t)v14);
    if ((void)v10 == v4 && *((void *)&v10 + 1) == v5) {
      break;
    }
    unint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    sub_100079B14((uint64_t)&v15);
    swift_unknownObjectRelease();
    if (v12) {
      return v3;
    }
    if (v2 == ++v3) {
      return 0;
    }
  }
  sub_100079B14((uint64_t)&v15);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_100192B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455BD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100192BD0(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455BD0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_100192C30(uint64_t a1)
{
  sub_100191134(a1, *(void **)(v1 + 16));
}

uint64_t sub_100192C4C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t *sub_100192C8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = v15;
  uint64_t v47 = a15;
  uint64_t v48 = a6;
  int v44 = a7;
  int v45 = a13;
  uint64_t v42 = *v15;
  uint64_t v43 = a4;
  uint64_t v22 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v22 - 8, v23);
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v26 = (char *)&v42 - v25;
  uint64_t v46 = a8;
  if (!a8)
  {
    if (a5)
    {
      if (a10) {
        goto LABEL_23;
      }
      uint64_t v28 = a11;
      swift_bridgeObjectRelease();
      if (qword_100453920 != -1) {
        swift_once();
      }
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v33, v34))
      {
LABEL_29:

        goto LABEL_30;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Requesting session checks with no peer";
    }
    else
    {
      uint64_t v28 = a11;
      swift_bridgeObjectRelease();
      if (qword_100453920 != -1) {
        swift_once();
      }
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v33, v34)) {
        goto LABEL_29;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "Requesting SE hold with no peer";
    }
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
    swift_slowDealloc();
    goto LABEL_29;
  }
  if ((a10 & 1) == 0)
  {
    sub_10019366C(a11, (uint64_t)&v42 - v25);
    if (a9)
    {
      uint64_t v27 = type metadata accessor for UUID();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27) == 1)
      {
        uint64_t v28 = a11;
        sub_10008E734((uint64_t)v26, &qword_100455EB0);
        swift_bridgeObjectRelease();
        if (qword_100453920 != -1) {
          swift_once();
        }
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v29, v30)) {
          goto LABEL_22;
        }
        unint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v31 = 0;
        uint64_t v32 = "Requesting connection identifier check with no connection identifier";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v29, v30, v32, v31, 2u);
        swift_slowDealloc();
LABEL_22:

        swift_release();
LABEL_30:
        swift_release();
        sub_10008E734(v28, &qword_100455EB0);
        sub_10008E734(v48, &qword_100454058);
        swift_deallocPartialClassInstance();
        return 0;
      }
    }
    sub_10008E734((uint64_t)v26, &qword_100455EB0);
    if (a9 & 2) != 0 && (v45)
    {
      uint64_t v28 = a11;
      swift_bridgeObjectRelease();
      if (qword_100453920 != -1) {
        swift_once();
      }
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v29, v30)) {
        goto LABEL_22;
      }
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v31 = 0;
      uint64_t v32 = "Requesting sequence number check with no sequence number";
      goto LABEL_21;
    }
  }
LABEL_23:
  unint64_t v37 = (uint64_t *)((char *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_reason);
  *unint64_t v37 = a1;
  v37[1] = a2;
  *((unsigned char *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_isBlockSelecting) = a3 & 1;
  long long v15[2] = v43;
  *((unsigned char *)v15 + 24) = a5 & 1;
  sub_100076148(v48, (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, &qword_100454058);
  *((unsigned char *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_priority) = v44;
  *(uint64_t *)((char *)v15 + OBJC_IVAR____TtC10seserviced9SERequest_peer) = v46;
  uint64_t v38 = (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_sessionChecks;
  *(void *)uint64_t v38 = a9;
  *(unsigned char *)(v38 + 8) = a10 & 1;
  sub_100076148(a11, (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, &qword_100455EB0);
  uint64_t v39 = (uint64_t)v15 + OBJC_IVAR____TtC10seserviced9SERequest_sequenceNumber;
  *(void *)uint64_t v39 = a12;
  *(unsigned char *)(v39 + 8) = v45 & 1;
  uint64_t v40 = v47;
  v15[4] = a14;
  v15[5] = v40;
  return v16;
}

unint64_t sub_10019320C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1001936D4(*a1);
  *a2 = result;
  return result;
}

void sub_100193238(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100193244(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100193258(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10019326C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_100193280(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t sub_100193294()
{
  swift_release();
  sub_10008E734(v0 + OBJC_IVAR____TtC10seserviced9SERequest_connectionIdentifier, &qword_100455EB0);
  sub_10008E734(v0 + OBJC_IVAR____TtC10seserviced9SERequest_handoffToken, &qword_100454058);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100193344()
{
  return type metadata accessor for SERequest();
}

uint64_t type metadata accessor for SERequest()
{
  uint64_t result = qword_100456BA8;
  if (!qword_100456BA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100193398()
{
  sub_10017F890();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t getEnumTagSinglePayload for SERequest.Priority(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SERequest.Priority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001935CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SERequest.Priority()
{
  return &type metadata for SERequest.Priority;
}

ValueMetadata *type metadata accessor for SERequest.ActionPostRequest()
{
  return &type metadata for SERequest.ActionPostRequest;
}

unint64_t sub_100193618()
{
  unint64_t result = qword_100456C78;
  if (!qword_100456C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456C78);
  }
  return result;
}

uint64_t sub_10019366C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001936D4(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_1001936E4()
{
  *(void *)&long long v44 = 0;
  *((void *)&v44 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(192);
  uint64_t v49 = 0;
  unint64_t v50 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000016;
  v1._object = (void *)0x80000001003B5880;
  String.append(_:)(v1);
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 16)) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x80000001003B58A0;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + 17)) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 17)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._object = (void *)0x80000001003B58C0;
  v9._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + 18)) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 18)) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001003B58F0;
  v13._countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v13);
  if (*(unsigned char *)(v0 + 19)) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 19)) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x80000001003B5920;
  v17._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v17);
  if (*(unsigned char *)(v0 + 20)) {
    uint64_t v18 = 1702195828;
  }
  else {
    uint64_t v18 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 20)) {
    unint64_t v19 = 0xE400000000000000;
  }
  else {
    unint64_t v19 = 0xE500000000000000;
  }
  unint64_t v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._object = (void *)0x80000001003B5940;
  v21._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v21);
  if (*(unsigned char *)(v0 + 21)) {
    uint64_t v22 = 1702195828;
  }
  else {
    uint64_t v22 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 21)) {
    unint64_t v23 = 0xE400000000000000;
  }
  else {
    unint64_t v23 = 0xE500000000000000;
  }
  unint64_t v24 = v23;
  String.append(_:)(*(Swift::String *)&v22);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x6469646E6163200ALL;
  v25._object = (void *)0xED00002073657461;
  String.append(_:)(v25);
  uint64_t v26 = *(void *)(v0 + 24);
  int64_t v27 = *(void *)(v26 + 16);
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (v27)
  {
    uint64_t v48 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CF994(0, v27, 0);
    uint64_t v28 = _swiftEmptyArrayStorage;
    uint64_t v29 = (void **)(v26 + 64);
    do
    {
      uint64_t v31 = (uint64_t)*(v29 - 4);
      os_log_type_t v30 = *(v29 - 3);
      uint64_t v32 = (uint64_t)*(v29 - 2);
      uint64_t v33 = (uint64_t)*(v29 - 1);
      os_log_type_t v34 = *v29;
      *(void *)&long long v44 = 0;
      *((void *)&v44 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      *(void *)&long long v44 = 0x4920656C646E7542;
      *((void *)&v44 + 1) = 0xEA00000000002044;
      swift_bridgeObjectRetain();
      v35._countAndFlagsBits = v31;
      v35._object = v30;
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 0x20656D614E202CLL;
      v36._object = (void *)0xE700000000000000;
      String.append(_:)(v36);
      swift_bridgeObjectRetain();
      v37._countAndFlagsBits = v33;
      v37._object = v34;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 0x6E69616D6F44202CLL;
      v38._object = (void *)0xE900000000000020;
      String.append(_:)(v38);
      uint64_t v47 = v32;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v40 = v44;
      uint64_t v48 = v28;
      unint64_t v42 = v28[2];
      unint64_t v41 = v28[3];
      if (v42 >= v41 >> 1)
      {
        sub_1002CF994(v41 > 1, v42 + 1, 1);
        uint64_t v28 = v48;
      }
      v29 += 5;
      int v45 = &type metadata for String;
      uint64_t v46 = &protocol witness table for String;
      long long v44 = v40;
      void v28[2] = v42 + 1;
      sub_10010197C(&v44, (uint64_t)&v28[5 * v42 + 4]);
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  sub_10023D68C((uint64_t)v28);
  swift_bridgeObjectRelease();
  return v49;
}

uint64_t sub_100193B0C()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_100193B44()
{
  uint64_t v1 = v0;
  memset(v39, 0, 32);
  v39[32] = 1;
  char v2 = sub_1002973F0(6, (uint64_t)v39, 0, 0);
  char v3 = sub_1002973F0(5, (uint64_t)v39, 0, 0);
  char v4 = sub_1002973F0(4, (uint64_t)v39, 0, 0);
  char v5 = sub_1002973F0(3, (uint64_t)v39, 0, 0);
  if (v2)
  {
    if (v3)
    {
      if (v4) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = 4;
      }
      if (v5) {
        goto LABEL_24;
      }
LABEL_23:
      v6 |= 8uLL;
      goto LABEL_24;
    }
    if (v4) {
      uint64_t v6 = 2;
    }
    else {
      uint64_t v6 = 6;
    }
    if ((v5 & 1) == 0) {
      goto LABEL_23;
    }
  }
  else if (v3)
  {
    if (v4) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = 5;
    }
    if ((v5 & 1) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    if (v4) {
      uint64_t v6 = 3;
    }
    else {
      uint64_t v6 = 7;
    }
    if ((v5 & 1) == 0) {
      goto LABEL_23;
    }
  }
LABEL_24:
  uint64_t v7 = *(void *)(v1 + 24);
  *(unsigned char *)(v7 + 20) = (v6 & 1) == 0;
  *(unsigned char *)(v7 + 21) = (v6 & 4) == 0;
  if (qword_1004536C8 != -1) {
    swift_once();
  }
  if (sub_1001204E0())
  {
    unint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      v31[0] = sub_100290514(0x6C69636E6F636572, 0xEB00000000292865, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: Pending migration -- should not show default contactless pane", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(_WORD *)(*(void *)(v1 + 24) + 18) = 0;
  }
  else
  {
    sub_1002A6088(v31);
    sub_100076148((uint64_t)v31, (uint64_t)&v32, &qword_100455AC8);
    unint64_t v11 = v33;
    if (v33)
    {
      uint64_t v12 = v32;
      long long v36 = v35;
      if (v34 == 2 || v34 == 1)
      {
        TCCContext.checkTCCAccess(to:for:)();
        uint64_t v13 = TCCContext.TCCAccess.rawValue.getter();
        if (v13 == TCCContext.TCCAccess.rawValue.getter())
        {
          long long v38 = v36;
          swift_bridgeObjectRetain();
          sub_100079AE8((uint64_t)&v38);
          uint64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v14, v15))
          {
            unint64_t v16 = (uint8_t *)swift_slowAlloc();
            v37[0] = swift_slowAlloc();
            *(_DWORD *)unint64_t v16 = 136315138;
            swift_bridgeObjectRetain();
            sub_100290514(v12, v11, v37);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            sub_100079B14((uint64_t)&v38);
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v38);
            _os_log_impl((void *)&_mh_execute_header, v14, v15, "External default app %s found on restore", v16, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease();

            sub_100079B14((uint64_t)&v38);
            swift_bridgeObjectRelease();
            sub_100079B14((uint64_t)&v38);
          }
          sub_100194A60();
          goto LABEL_44;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        v37[0] = v32;
        v37[1] = v33;
        sub_100079B14((uint64_t)v37);
      }
      long long v38 = v36;
      sub_100079B14((uint64_t)&v38);
    }
    Swift::String v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v19 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Reconciling with ineligibility %ld", v19, 0xCu);
      swift_slowDealloc();
    }

    __int16 v20 = sub_100194134(0, v6);
    uint64_t v22 = v21;
    __int16 v23 = sub_100194134(1, v6);
    uint64_t v24 = *(void *)(v1 + 24);
    *(unsigned char *)(v24 + 16) = HIBYTE(v20) & 1;
    *(unsigned char *)(v24 + 17) = HIBYTE(v23) & 1;
    uint64_t v25 = *(void *)(v1 + 24);
    *(unsigned char *)(v25 + 18) = v20 & 1;
    *(unsigned char *)(v25 + 19) = v23 & 1;
    sub_1000D91D0(v26);
    sub_1000D91D0(v22);
    uint64_t v27 = *(void *)(v1 + 24);
    swift_retain();
    uint64_t v28 = sub_1000B27E8((uint64_t)&_swiftEmptySetSingleton);
    swift_bridgeObjectRelease();
    *(void *)(v27 + 24) = v28;
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_44:
  uint64_t v29 = swift_retain();
  sub_1002A80FC(v29);
  return swift_release();
}

uint64_t sub_100194134(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v3 = sub_1001953A4();
  uint64_t v4 = TCCContext.TCCService.rawValue.getter();
  uint64_t v5 = TCCContext.TCCService.rawValue.getter();
  uint64_t v6 = 4;
  if (v4 == v5) {
    uint64_t v6 = 1;
  }
  if ((v6 & a2) == 0)
  {
    int v11 = v3 & 1;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      v66[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      sub_100290514(0xD00000000000001DLL, 0x80000001003B59A0, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      uint64_t v15 = TCCContext.TCCService.tccString.getter();
      uint64_t v58 = sub_100290514(v15, v16, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s Set Default is eligible for service %s, doing regular reconciliation for this service", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100195BC8();
    return v11 | ((v3 > 0xFFu) << 8);
  }
  uint64_t v7 = TCCContext.TCCService.rawValue.getter();
  uint64_t v8 = TCCContext.TCCService.rawValue.getter();
  uint64_t v9 = 8;
  if (v7 == v8) {
    uint64_t v9 = 2;
  }
  uint64_t v54 = v9 & a2;
  uint64_t v56 = &_swiftEmptySetSingleton;
  id v10 = objc_allocWithZone((Class)LSApplicationRecord);
  id v17 = sub_10019636C(0xD000000000000012, 0x80000001003B5960, 0);
  unsigned __int16 v18 = v3;
  id v19 = [v17 localizedName];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  unsigned __int16 v3 = v18;
  v66[0] = 0xD000000000000012;
  v66[1] = 0x80000001003B5960;
  void v66[2] = 3;
  v66[3] = v20;
  v66[4] = v22;
  sub_1000EAB70((uint64_t)&v58, (Swift::Int)v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v54) {
    goto LABEL_29;
  }
  sub_1002A6088(v57);
  sub_100076148((uint64_t)v57, (uint64_t)&v58, &qword_100455AC8);
  unint64_t v23 = v59;
  if (!v59) {
    goto LABEL_29;
  }
  uint64_t v24 = v58;
  uint64_t v25 = v60;
  long long v62 = v61;
  if (v58 == 0xD000000000000012 && v59 == 0x80000001003B5960)
  {
    if (v60 != 1)
    {
      if (v60 != 2)
      {
        if (v60 == 3) {
          goto LABEL_26;
        }
LABEL_27:
        uint64_t v29 = &v63;
        goto LABEL_28;
      }
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v53 = v25;
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0 && v25 == 3) {
    goto LABEL_26;
  }
  if (v25 != 2)
  {
    if (v25 != 1) {
      goto LABEL_27;
    }
    goto LABEL_22;
  }
LABEL_23:
  uint64_t v53 = v25;
LABEL_24:
  uint64_t v26 = TCCContext.TCCService.rawValue.getter();
  if (v26 != TCCContext.TCCService.rawValue.getter())
  {
LABEL_26:
    uint64_t v29 = &v65;
LABEL_28:
    swift_bridgeObjectRelease();
    *(_OWORD *)uint64_t v29 = v62;
    sub_100079B14((uint64_t)v29);
    unsigned __int16 v3 = v18;
LABEL_29:
    uint64_t v30 = v56[2];
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    if (v30)
    {
      if (v33)
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "One of the out of region eligibility conditions not satisfied and but exist candidates, show default app pane", v34, 2u);
        swift_slowDealloc();
      }

      int v11 = 1;
    }
    else
    {
      if (v33)
      {
        long long v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "One of the out of region eligibility conditions not satisfied and no candidates, should not show default app pane", v35, 2u);
        swift_slowDealloc();
      }

      int v11 = 0;
    }
    return v11 | ((v3 > 0xFFu) << 8);
  }
  uint64_t v52 = v24;
  id v27 = objc_allocWithZone((Class)LSApplicationRecord);
  id v28 = sub_10019636C(0xD000000000000012, 0x80000001003B5960, 0);
  Swift::String v37 = v28;
  id v38 = [v28 localizedName];
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v39;

  uint64_t v40 = v52;
  uint64_t v41 = TCCContext.checkTCCAccess(to:for:)();
  long long v64 = v62;
  swift_bridgeObjectRetain();
  sub_100079AE8((uint64_t)&v64);
  swift_bridgeObjectRetain();
  sub_100079AE8((uint64_t)&v64);
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136316162;
    sub_100290514(0xD00000000000001DLL, 0x80000001003B59A0, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 22) = 2080;
    swift_bridgeObjectRetain();
    sub_100290514(v52, v23, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_100079B14((uint64_t)&v64);
    swift_bridgeObjectRelease();
    sub_100079B14((uint64_t)&v64);
    *(_WORD *)(v44 + 32) = 2080;
    uint64_t v45 = TCCContext.TCCAccess.description.getter();
    sub_100290514(v45, v46, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 42) = 2080;
    uint64_t v47 = TCCContext.TCCService.tccString.getter();
    sub_100290514(v47, v48, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v40 = v52;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s Ineligibility %ld Default app %s TCC access %s to service %s", (uint8_t *)v44, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();

    sub_100079B14((uint64_t)&v64);
    swift_bridgeObjectRelease();
    sub_100079B14((uint64_t)&v64);
  }
  if ((unint64_t)(v41 - 1) < 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100079B14((uint64_t)&v64);
    int v11 = 0;
    unsigned __int16 v3 = v18;
    return v11 | ((v3 > 0xFFu) << 8);
  }
  if (!v41)
  {
    swift_bridgeObjectRelease();
    sub_10006C51C(&qword_100454A48);
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 32) = 0xD000000000000012;
    *(_OWORD *)(inited + 16) = xmmword_1003782A0;
    *(void *)(inited + 40) = 0x80000001003B5960;
    *(void *)(inited + 48) = 3;
    *(void *)(inited + 56) = v50;
    *(void *)(inited + 64) = v51;
    *(void *)(inited + 72) = v40;
    *(void *)(inited + 80) = v23;
    *(void *)(inited + 88) = v53;
    *(_OWORD *)(inited + 96) = v62;
    sub_10008C2E4(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    int v11 = 1;
    unsigned __int16 v3 = v18;
    return v11 | ((v3 > 0xFFu) << 8);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100194A60()
{
  uint64_t v1 = v0;
  sub_1002A6088(v56);
  sub_100076148((uint64_t)v56, (uint64_t)&v57, &qword_100455AC8);
  if (*((void *)&v57 + 1))
  {
    uint64_t v2 = v58;
    long long v60 = v59;
    long long v61 = v57;
    switch(v58)
    {
      case 3:
        id v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 136315138;
          v53[0] = sub_100290514(0xD000000000000016, 0x80000001003B5980, (uint64_t *)&v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_type_t v13 = "%s: Default app is passbook -- should show no panes";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v10, v11, v13, v12, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        break;
      case 2:
        char v4 = 0;
        char v3 = 1;
LABEL_12:
        sub_10006C51C(&qword_100454A48);
        uint64_t v14 = swift_allocObject();
        long long v15 = v57;
        *(_OWORD *)(v14 + 16) = xmmword_100378290;
        *(_OWORD *)(v14 + 32) = v15;
        *(void *)(v14 + 48) = v2;
        *(_OWORD *)(v14 + 56) = v59;
        *(void *)&long long v62 = v14;
        id v16 = objc_allocWithZone((Class)LSApplicationRecord);
        swift_bridgeObjectRetain();
        id v21 = sub_10019636C(0xD000000000000012, 0x80000001003B5960, 0);
        char v22 = v3;
        id v23 = [v21 localizedName];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v24;

        uint64_t v26 = *(void *)(v14 + 16);
        if (v26)
        {
          id v27 = (uint64_t *)(v14 + 48);
          while (1)
          {
            if ((uint64_t v28 = *v27, *(v27 - 2) == 0xD000000000000012) && *(v27 - 1) == 0x80000001003B5960
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              if (v28 == 3) {
                break;
              }
            }
            v27 += 5;
            if (!--v26) {
              goto LABEL_27;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          char v20 = v22;
        }
        else
        {
LABEL_27:
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v14 = (uint64_t)sub_10025990C(0, *(void *)(v14 + 16) + 1, 1, (void *)v14);
          }
          char v20 = v22;
          unint64_t v30 = *(void *)(v14 + 16);
          unint64_t v29 = *(void *)(v14 + 24);
          if (v30 >= v29 >> 1) {
            uint64_t v14 = (uint64_t)sub_10025990C((void *)(v29 > 1), v30 + 1, 1, (void *)v14);
          }
          *(void *)(v14 + 16) = v30 + 1;
          uint64_t v31 = (void *)(v14 + 40 * v30);
          v31[4] = 0xD000000000000012;
          uint64_t v31[5] = 0x80000001003B5960;
          v31[6] = 3;
          v31[7] = v50;
          v31[8] = v25;
          *(void *)&long long v62 = v14;
        }
        swift_bridgeObjectRetain_n();
        os_log_type_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v51 = v1;
          uint64_t v34 = swift_slowAlloc();
          v53[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 136315394;
          uint64_t v55 = (void *)sub_100290514(0xD000000000000016, 0x80000001003B5980, v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v34 + 12) = 2080;
          int64_t v35 = *(void *)(v14 + 16);
          if (v35)
          {
            os_log_type_t v48 = v33;
            uint64_t v49 = v32;
            char v52 = v4;
            uint64_t v55 = _swiftEmptyArrayStorage;
            swift_bridgeObjectRetain();
            sub_1002CF974(0, v35, 0);
            long long v36 = v55;
            Swift::String v37 = (uint64_t *)(v14 + 40);
            do
            {
              uint64_t v38 = *(v37 - 1);
              uint64_t v39 = *v37;
              uint64_t v55 = v36;
              unint64_t v41 = v36[2];
              unint64_t v40 = v36[3];
              swift_bridgeObjectRetain();
              if (v41 >= v40 >> 1)
              {
                sub_1002CF974(v40 > 1, v41 + 1, 1);
                long long v36 = v55;
              }
              v37 += 5;
              v36[2] = v41 + 1;
              unint64_t v42 = &v36[2 * v41];
              unsigned char v42[4] = v38;
              v42[5] = v39;
              --v35;
            }
            while (v35);
            swift_bridgeObjectRelease();
            char v4 = v52;
            os_log_type_t v32 = v49;
            os_log_type_t v33 = v48;
          }
          uint64_t v43 = Array.description.getter();
          unint64_t v45 = v44;
          swift_bridgeObjectRelease();
          uint64_t v55 = (void *)sub_100290514(v43, v45, v53);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: Overwriting %s to default app candidate list due to default app found upon restore", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v1 = v51;
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
        uint64_t v46 = *(void *)(v1 + 24);
        swift_beginAccess();
        *(void *)(v46 + 24) = v62;
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_43;
      case 1:
        char v3 = 0;
        char v4 = 1;
        goto LABEL_12;
      default:
        id v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v55 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v12 = 136315138;
          v53[0] = sub_100290514(0xD000000000000016, 0x80000001003B5980, (uint64_t *)&v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          os_log_type_t v13 = "%s: Missing domain when reconciling panes -- showing no panes";
          goto LABEL_15;
        }
        break;
    }
    long long v62 = v61;
    sub_100079B14((uint64_t)&v62);
    *(_OWORD *)uint64_t v53 = v60;
    sub_100079B14((uint64_t)v53);

    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      id v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = (void *)swift_slowAlloc();
      *(_DWORD *)id v19 = 136315138;
      uint64_t v54 = sub_100290514(0xD000000000000016, 0x80000001003B5980, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s: Overwriting empty list to default app candidate list due to no default app found upon restore", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    *(void *)(*(void *)(v1 + 24) + 24) = _swiftEmptyArrayStorage;
    uint64_t result = swift_bridgeObjectRelease();
    char v20 = 0;
    char v4 = 0;
LABEL_43:
    uint64_t v47 = *(unsigned char **)(v1 + 24);
    v47[18] = v20;
    v47[19] = v4;
    v47[16] = v20;
    v47[17] = v4;
    return result;
  }
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    v53[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)&long long v62 = sub_100290514(0xD000000000000016, 0x80000001003B5980, v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Unexpected no default app found on restore, nuke UD", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v8 = *(void *)(v1 + 24);
  *(_WORD *)(v8 + 20) = 0;
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v8 + 24) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001953A4()
{
  uint64_t v0 = TCCContext.getTCCKnownBundleIds(for:filter:)();
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  if (v2)
  {
    unint64_t v3 = 0;
    char v38 = 0;
    unsigned int v4 = 0;
    uint64_t v5 = (unint64_t *)(v0 + 40);
    uint64_t v37 = v2 - 1;
    uint64_t v35 = v0;
    while (1)
    {
      uint64_t v10 = *(v5 - 1);
      unint64_t v9 = *v5;
      swift_bridgeObjectRetain();
      TCCContext.checkTCCAccess(to:for:)();
      id v11 = objc_allocWithZone((Class)LSApplicationRecord);
      swift_bridgeObjectRetain();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v42[0] = 0;
      id v13 = [v11 initWithBundleIdentifier:v12 allowPlaceholder:0 error:v42];

      if (!v13)
      {
        unsigned int v36 = v4;
        id v16 = v42[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_bridgeObjectRetain();
        swift_errorRetain();
        id v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v6 = swift_slowAlloc();
          v42[0] = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v6 = 136315394;
          swift_getErrorValue();
          uint64_t v7 = Error.localizedDescription.getter();
          *(void *)(v6 + 4) = sub_100290514(v7, v8, (uint64_t *)v42);
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          *(_WORD *)(v6 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v6 + 14) = sub_100290514(v10, v9, (uint64_t *)v42);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "computeShouldShowPanes: Error %s when initializing LSApplicationRecord for %s", (uint8_t *)v6, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v1 = v35;
          swift_slowDealloc();
          swift_errorRelease();
        }
        else
        {
          swift_errorRelease();

          swift_errorRelease();
          swift_errorRelease();
          swift_bridgeObjectRelease_n();
        }
        unsigned int v4 = v36;
        if (v37 == v3)
        {
          swift_bridgeObjectRelease();
          if ((v38 & 1) == 0)
          {
            int v33 = 0;
            return v33 | v4 & 1;
          }
          goto LABEL_67;
        }
        goto LABEL_5;
      }
      id v14 = v42[0];
      swift_bridgeObjectRelease();
      if (v38)
      {
        if (v4)
        {
          swift_bridgeObjectRelease();

LABEL_65:
          LOBYTE(v4) = 1;
LABEL_67:
          int v33 = 256;
          return v33 | v4 & 1;
        }
        unsigned __int8 v15 = 1;
        goto LABEL_32;
      }
      uint64_t v19 = TCCContext.TCCAccess.rawValue.getter();
      if (v19 != TCCContext.TCCAccess.rawValue.getter()) {
        break;
      }
      if (v4)
      {

        if (v37 == v3) {
          goto LABEL_69;
        }
LABEL_25:
        char v38 = 0;
        unsigned int v4 = 1;
        goto LABEL_5;
      }
      unsigned __int8 v15 = 0;
LABEL_32:
      uint64_t v24 = TCCContext.TCCAccess.rawValue.getter();
      if (v24 != TCCContext.TCCAccess.rawValue.getter())
      {

        if (v15) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      id v25 = [v13 entitlements];
      TCCContext.TCCService.defaultAppEntitlement.getter();
      NSString v26 = String._bridgeToObjectiveC()();
      sub_100132B84();
      uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      id v28 = [v25 objectForKey:v26 ofClass:ObjCClassFromMetadata];

      if (v28)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v40 = 0u;
        long long v41 = 0u;
      }
      sub_100076148((uint64_t)&v40, (uint64_t)v42, (uint64_t *)&unk_1004556C0);
      if (!v43)
      {
        sub_1000AE778((uint64_t)v42);
LABEL_44:

        swift_bridgeObjectRelease();
        uint64_t v1 = v35;
        if (v15) {
          goto LABEL_55;
        }
        goto LABEL_57;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_44;
      }
      unsigned __int8 v29 = [v39 BOOLValue];

      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0) {
        goto LABEL_54;
      }
      id v30 = [v13 entitlements];
      TCCContext.TCCService.serviceEntitlement.getter();
      NSString v31 = String._bridgeToObjectiveC()();
      id v32 = [v30 objectForKey:v31 ofClass:ObjCClassFromMetadata];

      if (v32)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v40 = 0u;
        long long v41 = 0u;
      }
      sub_100076148((uint64_t)&v40, (uint64_t)v42, (uint64_t *)&unk_1004556C0);
      if (!v43)
      {
        sub_1000AE778((uint64_t)v42);
LABEL_53:

        swift_bridgeObjectRelease();
LABEL_54:

        uint64_t v1 = v35;
        if (v15) {
          goto LABEL_55;
        }
LABEL_57:
        if (v37 == v3) {
          goto LABEL_61;
        }
        unsigned int v4 = 0;
        char v38 = 0;
        goto LABEL_5;
      }
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_53;
      }
      unsigned int v4 = [v39 BOOLValue];

      swift_bridgeObjectRelease();
      uint64_t v1 = v35;
      if (v15)
      {
        if (v4) {
          goto LABEL_72;
        }
LABEL_55:
        if (v37 == v3)
        {
          swift_bridgeObjectRelease();
          LOBYTE(v4) = 0;
          goto LABEL_67;
        }
        unsigned int v4 = 0;
        char v38 = 1;
        goto LABEL_5;
      }
      if (v37 == v3)
      {
        swift_bridgeObjectRelease();
        int v33 = 0;
        return v33 | v4 & 1;
      }
      char v38 = 0;
LABEL_5:
      ++v3;
      v5 += 2;
      if (v3 >= *(void *)(v1 + 16))
      {
        __break(1u);
LABEL_72:
        swift_bridgeObjectRelease();
        goto LABEL_65;
      }
    }
    char v20 = v4;
    id v21 = [v13 entitlements];
    TCCContext.TCCService.serviceEntitlement.getter();
    NSString v22 = String._bridgeToObjectiveC()();
    sub_100132B84();
    id v23 = [v21 objectForKey:v22 ofClass:swift_getObjCClassFromMetadata()];

    if (v23)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v40 = 0u;
      long long v41 = 0u;
    }
    sub_100076148((uint64_t)&v40, (uint64_t)v42, (uint64_t *)&unk_1004556C0);
    if (v43)
    {
      if (swift_dynamicCast())
      {
        unsigned __int8 v15 = [v39 BOOLValue];

        swift_bridgeObjectRelease();
        if (v20)
        {

          if (v15) {
            goto LABEL_72;
          }
          uint64_t v1 = v35;
          if (v37 == v3)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            int v33 = 0;
            LOBYTE(v4) = 1;
            return v33 | v4 & 1;
          }
          goto LABEL_25;
        }
        goto LABEL_31;
      }
    }
    else
    {
      sub_1000AE778((uint64_t)v42);
    }

    swift_bridgeObjectRelease();
    if (v20)
    {

      if (v37 == v3) {
        goto LABEL_69;
      }
      char v38 = 0;
      unsigned int v4 = 1;
      uint64_t v1 = v35;
      goto LABEL_5;
    }
    unsigned __int8 v15 = 0;
LABEL_31:
    uint64_t v1 = v35;
    goto LABEL_32;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  LOBYTE(v4) = 0;
  int v33 = 0;
  return v33 | v4 & 1;
}

void *sub_100195BC8()
{
  uint64_t v0 = TCCContext.getTCCKnownBundleIds(for:filter:)();
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v33 = v0;
  uint64_t v2 = (unint64_t *)(v0 + 40);
  do
  {
    uint64_t v3 = *(v2 - 1);
    unint64_t v4 = *v2;
    id v5 = objc_allocWithZone((Class)LSApplicationRecord);
    swift_bridgeObjectRetain_n();
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v38[0] = 0;
    id v7 = [v5 initWithBundleIdentifier:v6 allowPlaceholder:0 error:v38];

    if (v7)
    {
      id v8 = v38[0];
      TCCContext.checkTCCAccess(to:for:)();
      uint64_t v9 = TCCContext.TCCAccess.rawValue.getter();
      if (v9 != TCCContext.TCCAccess.rawValue.getter()) {
        goto LABEL_3;
      }
      id v10 = [v7 entitlements];
      TCCContext.TCCService.defaultAppEntitlement.getter();
      NSString v11 = String._bridgeToObjectiveC()();
      sub_100132B84();
      id v12 = [v10 objectForKey:v11 ofClass:swift_getObjCClassFromMetadata()];

      if (v12)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v37, 0, sizeof(v37));
      }
      sub_100076148((uint64_t)v37, (uint64_t)v38, (uint64_t *)&unk_1004556C0);
      if (v39)
      {
        if (swift_dynamicCast())
        {
          unsigned __int8 v19 = [v35 BOOLValue];

          swift_bridgeObjectRelease();
          if ((v19 & 1) == 0)
          {
LABEL_3:
            swift_bridgeObjectRelease();

            goto LABEL_4;
          }
          uint64_t v20 = TCCContext.TCCService.rawValue.getter();
          if (v20 == TCCContext.TCCService.rawValue.getter()) {
            uint64_t v21 = 2;
          }
          else {
            uint64_t v21 = 1;
          }
          id v22 = [v7 localizedName:v33];
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          v36[0] = v3;
          v36[1] = v4;
          v36[2] = v21;
          v36[3] = v23;
          v36[4] = v25;
          sub_1000EAB70((uint64_t)v38, (Swift::Int)v36);

          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
      }
      else
      {
        sub_1000AE778((uint64_t)v38);
      }
      swift_bridgeObjectRelease();

LABEL_22:
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    uint64_t v34 = v3;
    id v13 = v38[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      v38[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315394;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      *(void *)(v16 + 4) = sub_100290514(v17, v18, (uint64_t *)v38);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v16 + 14) = sub_100290514(v34, v4, (uint64_t *)v38);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "defaultAppCandidates: Error %s when initializing LSApplicationRecord for %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
    }
LABEL_4:
    v2 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
LABEL_25:
  id v26 = objc_allocWithZone((Class)LSApplicationRecord);
  id v27 = sub_10019636C(0xD000000000000012, 0x80000001003B5960, 0);
  id v28 = [v27 localizedName];
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = v30;

  v38[0] = (id)0xD000000000000012;
  v38[1] = (id)0x80000001003B5960;
  v38[2] = (id)3;
  uint64_t v39 = v29;
  uint64_t v40 = v31;
  sub_1000EAB70((uint64_t)v37, (Swift::Int)v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return &_swiftEmptySetSingleton;
}

BOOL sub_100196164()
{
  uint64_t v0 = TCCContext.TCCAccess.rawValue.getter();
  return v0 == TCCContext.TCCAccess.rawValue.getter();
}

uint64_t sub_100196198()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced25SECSettingsPaneReconciler_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_100196248()
{
  return type metadata accessor for SECSettingsPaneReconciler();
}

uint64_t type metadata accessor for SECSettingsPaneReconciler()
{
  uint64_t result = qword_100456CB0;
  if (!qword_100456CB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10019629C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for SECSettingsPaneReconciler.PaneConfig()
{
  return self;
}

id sub_10019636C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_100196448()
{
  CFErrorRef error = 0;
  unint64_t v1 = *v0;
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  CFDataRef v3 = SecKeyCreateSignature(v1, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, isa, &error);

  if (v3)
  {
    static Data._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  if (qword_100453730 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E55C(v4, (uint64_t)qword_100456F10);
  NSString v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136315138;
    swift_beginAccess();
    CFErrorRef v8 = error;
    if (error)
    {
      type metadata accessor for CFError(0);
      sub_100196F88();
      uint64_t v9 = Error.localizedDescription.getter();
      unint64_t v11 = v10;
    }
    else
    {
      unint64_t v11 = 0xED0000726F727265;
      uint64_t v9 = 0x206E776F6E6B6E55;
    }
    sub_100290514(v9, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SecKeyCreateSignature failed with error %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_100196F34();
  swift_allocError();
  *id v12 = 1;
  return swift_willThrow();
}

void sub_1001966F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100456F50);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  sub_1002BBADC(a2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1001979AC;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100196E08;
  uint64_t aBlock[3] = &unk_100414260;
  unint64_t v11 = _Block_copy(aBlock);
  swift_release();
  DeviceIdentityIssueClientCertificateWithCompletion();
  _Block_release(v11);
}

void sub_1001968D8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_100453730 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E55C(v3, (uint64_t)qword_100456F10);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446210;
      uint64_t v7 = (void *)_convertErrorToNSError(_:)();
      id v8 = [v7 debugDescription];

      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v11 = v10;

      sub_100290514(v9, v11, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Device Identity Error %{public}s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_100196F34();
    uint64_t v16 = swift_allocError();
    unsigned char *v17 = 2;
    v30[0] = v16;
    sub_10006C51C(&qword_100456F50);
    CheckedContinuation.resume(throwing:)();
    swift_errorRelease();
  }
  else if (a1)
  {
    if (a2 && *(void *)(a2 + 16) == 2)
    {
      sub_1000AA580(a2 + 32, (uint64_t)v30);
      type metadata accessor for SecCertificate(0);
      swift_dynamicCast();
      sub_1000AA580(a2 + 64, (uint64_t)v30);
      swift_dynamicCast();
      sub_10006C51C(&qword_1004557C0);
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_10037AA50;
      *(void *)(v14 + 32) = v29;
      *(void *)(v14 + 40) = v29;
      v30[0] = v14;
      specialized Array._endMutation()();
      uint64_t v15 = v30[0];
      v30[0] = (uint64_t)a1;
      v30[1] = v15;
      sub_10006C51C(&qword_100456F50);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      if (qword_100453730 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      sub_10008E55C(v18, (uint64_t)qword_100456F10);
      unsigned __int8 v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Device Identity returned nil/empty certificates", v21, 2u);
        swift_slowDealloc();
      }

      sub_100196F34();
      uint64_t v22 = swift_allocError();
      unsigned char *v23 = 2;
      v30[0] = v22;
      sub_10006C51C(&qword_100456F50);
      CheckedContinuation.resume(throwing:)();
    }
  }
  else
  {
    if (qword_100453730 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E55C(v24, (uint64_t)qword_100456F10);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      id v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Device Identity returned nil reference key", v27, 2u);
      swift_slowDealloc();
    }

    sub_100196F34();
    swift_allocError();
    unsigned char *v28 = 2;
    sub_10006C51C(&qword_100456F50);
    CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_100196E08(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  if (a3) {
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a2;
  id v9 = a4;
  v6(a2, v7, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100196EBC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100456F10);
  sub_10008E55C(v0, (uint64_t)qword_100456F10);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

unint64_t sub_100196F34()
{
  unint64_t result = qword_100456F28;
  if (!qword_100456F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456F28);
  }
  return result;
}

unint64_t sub_100196F88()
{
  unint64_t result = qword_100456F30;
  if (!qword_100456F30)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456F30);
  }
  return result;
}

uint64_t sub_100196FE0(uint64_t a1)
{
  *(void *)(v1 + 352) = a1;
  return _swift_task_switch(sub_100197070, 0, 0);
}

uint64_t sub_100197070()
{
  uint64_t v43 = v0;
  uint64_t v1 = (void **)(v0 + 328);
  *(void *)(v0 + 328) = 0;
  SecAccessControlRef v2 = SecAccessControlCreateWithFlags(kCFAllocatorDefault, kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly, 0x40000000uLL, (CFErrorRef *)(v0 + 328));
  *(void *)(v0 + 360) = v2;
  if (v2)
  {
    sub_10006C51C(&qword_100456F40);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100379160;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 72) = &type metadata for Int;
    *(void *)(inited + 48) = 60;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 88) = v5;
    *(void *)(inited + 120) = &type metadata for Int;
    *(void *)(inited + 96) = 43200;
    *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 136) = v6;
    *(void *)(inited + 168) = &type metadata for Int;
    *(void *)(inited + 144) = 1;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 184) = v7;
    uint64_t v8 = SecAccessControlCopyData();
    if (v8)
    {
      uint64_t v16 = (void *)v8;
      uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;

      *(void *)(inited + 216) = &type metadata for Data;
      *(void *)(inited + 192) = v17;
      *(void *)(inited + 200) = v19;
      *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 232) = v20;
      sub_10006C51C(&qword_10045B590);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_100379160;
      *(void *)(v21 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 40) = v22;
      *(void *)(v21 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 56) = v23;
      *(void *)(v21 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 72) = v24;
      *(void *)(v21 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 88) = v25;
      *(void *)(v21 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v21 + 104) = v26;
      *(void *)(inited + 264) = sub_10006C51C((uint64_t *)&unk_100455EA0);
      *(void *)(inited + 240) = v21;
      unint64_t v27 = sub_1001DB948(inited);
      *(void *)(v0 + 368) = v27;
      uint64_t v28 = swift_task_alloc();
      *(void *)(v0 + 376) = v28;
      *(void *)(v28 + 16) = v27;
      uint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v29;
      uint64_t v30 = sub_10006C51C(&qword_100456F48);
      void *v29 = v0;
      v29[1] = sub_1001975A0;
      uint64_t v15 = v30;
      uint64_t v8 = v0 + 312;
      unint64_t v12 = 0x80000001003B59F0;
      id v13 = sub_100197910;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v11 = 0xD000000000000024;
      uint64_t v14 = v28;
    }
    else
    {
      __break(1u);
    }
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, v9, v10, v11, v12, v13, v14, v15);
  }
  else
  {
    if (qword_100453730 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E55C(v31, (uint64_t)qword_100456F10);
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_beginAccess();
      id v35 = *v1;
      if (*v1)
      {
        *(void *)(v0 + 336) = v35;
        type metadata accessor for CFError(0);
        sub_100196F88();
        uint64_t v36 = Error.localizedDescription.getter();
        unint64_t v38 = v37;
      }
      else
      {
        unint64_t v38 = 0xE700000000000000;
        uint64_t v36 = 0x6E776F6E6B6E55;
      }
      *(void *)(v0 + 344) = sub_100290514(v36, v38, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "SecAccessControlCreateWithFlags failed with error %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    sub_100196F34();
    swift_allocError();
    *uint64_t v39 = 0;
    swift_willThrow();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    return v40();
  }
}

uint64_t sub_1001975A0()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    SecAccessControlRef v2 = sub_100197864;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    SecAccessControlRef v2 = sub_1001976F8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001976F8()
{
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_13;
    }
    uint64_t v3 = (__SecCertificate *)*(id *)(v1 + 32);
  }
  uint64_t v4 = v3;
  CFDataRef v5 = SecCertificateCopyData(v3);
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = (__SecCertificate *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_8;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL) {
LABEL_13:
  }
    __break(1u);
  uint64_t v9 = (__SecCertificate *)*(id *)(v1 + 40);
LABEL_8:
  uint64_t v10 = v9;
  unint64_t v12 = (void *)v0[44];
  unint64_t v11 = (void *)v0[45];
  swift_bridgeObjectRelease();
  CFDataRef v13 = SecCertificateCopyData(v10);
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  *unint64_t v12 = v2;
  v12[1] = v6;
  v12[2] = v8;
  v12[3] = v14;
  v12[4] = v16;
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100197864()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100197910(uint64_t a1)
{
  sub_1001966F8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100197918()
{
  uint64_t v1 = sub_10006C51C(&qword_100456F50);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

void sub_1001979AC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10006C51C(&qword_100456F50);

  sub_1001968D8(a1, a2, a3);
}

uint64_t sub_100197A38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100197A48()
{
  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for SESBAAWrapper.ErrorCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100197B1CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESBAAWrapper.ErrorCode()
{
  return &type metadata for SESBAAWrapper.ErrorCode;
}

unint64_t sub_100197B58()
{
  unint64_t result = qword_100456F58;
  if (!qword_100456F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100456F58);
  }
  return result;
}

void *sub_100197BAC(uint64_t a1)
{
  uint64_t v2 = v1;
  int64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = a1;
  sub_1002CFC30(0, v3, 0);
  unint64_t result = (void *)sub_10019CFBC(v4);
  uint64_t v7 = (uint64_t)result;
  uint64_t v8 = 0;
  uint64_t v9 = v4 + 64;
  uint64_t v29 = v4 + 80;
  int64_t v30 = v3;
  int v31 = v6;
  uint64_t v32 = v4 + 64;
  uint64_t v33 = v4;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(unsigned char *)(v4 + 32))
  {
    unint64_t v12 = (unint64_t)v7 >> 6;
    if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
      goto LABEL_23;
    }
    if (*(_DWORD *)(v4 + 36) != v6) {
      goto LABEL_24;
    }
    uint64_t v34 = v8;
    uint64_t v13 = *(void *)(v4 + 56);
    uint64_t v14 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v7);
    uint64_t v16 = *v14;
    unint64_t v15 = v14[1];
    uint64_t v17 = *(void *)(v13 + 8 * v7);
    sub_10006D0EC(*v14, v15);
    swift_bridgeObjectRetain();
    sub_10006D0EC(v16, v15);
    swift_bridgeObjectRetain();
    sub_10006D144(v16, v15);
    swift_bridgeObjectRelease();
    uint64_t v35 = v2;
    sub_10023CDF4(v16, v15);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v18 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_10006D144(v16, v15);
    unint64_t result = (void *)swift_bridgeObjectRelease();
    unint64_t v22 = _swiftEmptyArrayStorage[2];
    unint64_t v21 = _swiftEmptyArrayStorage[3];
    if (v22 >= v21 >> 1) {
      unint64_t result = (void *)sub_1002CFC30(v21 > 1, v22 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v22 + 1;
    uint64_t v23 = &_swiftEmptyArrayStorage[3 * v22];
    v23[4] = v18;
    v23[5] = v20;
    void v23[6] = v17;
    uint64_t v4 = v33;
    int64_t v10 = 1 << *(unsigned char *)(v33 + 32);
    if (v7 >= v10) {
      goto LABEL_25;
    }
    uint64_t v9 = v32;
    uint64_t v24 = *(void *)(v32 + 8 * v12);
    if ((v24 & (1 << v7)) == 0) {
      goto LABEL_26;
    }
    int v6 = v31;
    if (*(_DWORD *)(v33 + 36) != v31) {
      goto LABEL_27;
    }
    unint64_t v25 = v24 & (-2 << (v7 & 0x3F));
    if (v25)
    {
      int64_t v10 = __clz(__rbit64(v25)) | v7 & 0xFFFFFFFFFFFFFFC0;
      uint64_t v2 = v35;
      int64_t v11 = v30;
    }
    else
    {
      unint64_t v26 = v12 + 1;
      unint64_t v27 = (unint64_t)(v10 + 63) >> 6;
      uint64_t v2 = v35;
      int64_t v11 = v30;
      if (v12 + 1 < v27)
      {
        unint64_t v28 = *(void *)(v32 + 8 * v26);
        if (v28)
        {
LABEL_20:
          int64_t v10 = __clz(__rbit64(v28)) + (v26 << 6);
        }
        else
        {
          while (v27 - 2 != v12)
          {
            unint64_t v28 = *(void *)(v29 + 8 * v12++);
            if (v28)
            {
              unint64_t v26 = v12 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    uint64_t v8 = v34 + 1;
    uint64_t v7 = v10;
    if (v34 + 1 == v11) {
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_100197EB4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  int64_t v11 = (void *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v12 = qword_100468A38;
  *int64_t v11 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  id v13 = (id)v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v11, v7);
  if (v12)
  {
    unint64_t v15 = (uint64_t *)(v3 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
    swift_beginAccess();
    uint64_t v16 = *v15;
    if (*(void *)(*v15 + 16))
    {
      sub_10006D0EC(a2, a3);
      uint64_t v17 = sub_1002C0BAC(a2, a3);
      if (v18)
      {
        sub_10010DDC4(*(void *)(v16 + 56) + 40 * v17, (uint64_t)&v21);
      }
      else
      {
        uint64_t v23 = 0;
        long long v21 = 0u;
        long long v22 = 0u;
      }
      sub_10006D144(a2, a3);
    }
    else
    {
      uint64_t v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
    }
    swift_endAccess();
    uint64_t v19 = *((void *)&v22 + 1);
    sub_10008E734((uint64_t)&v21, (uint64_t *)&unk_100458820);
    if (v19)
    {
      sub_10007567C();
      swift_allocError();
      *uint64_t v20 = 0;
      return swift_willThrow();
    }
    else
    {
      sub_10010DDC4(a1, (uint64_t)&v21);
      swift_beginAccess();
      sub_10006D0EC(a2, a3);
      sub_1001F8738((uint64_t)&v21, a2, a3);
      return swift_endAccess();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100198138()
{
  type metadata accessor for DSKExpress();
  swift_allocObject();
  uint64_t result = sub_100198178();
  qword_1004687C0 = result;
  return result;
}

uint64_t sub_100198178()
{
  uint64_t v1 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  uint64_t v2 = OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress;
  void aBlock[6] = 0xD000000000000014;
  aBlock[7] = 0x80000001003B1620;
  aBlock[8] = 0xD000000000000022;
  aBlock[9] = 0x80000001003B5BD0;
  __int16 v10 = 256;
  sub_1001AF4B4();
  *(unsigned char *)(v0 + v2) = v3 & 1;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys) = &_swiftEmptySetSingleton;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems) = &_swiftEmptyDictionarySingleton;
  if ((v3 & 1) == 0)
  {
    uint64_t v4 = self;
    NSString v5 = String._bridgeToObjectiveC()();
    NSString v6 = String._bridgeToObjectiveC()();
  }
  if (qword_100453928 != -1) {
    swift_once();
  }
  aBlock[4] = sub_10019CB70;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002B9D80;
  uint64_t aBlock[3] = &unk_1004143A8;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v7);
  return v1;
}

_DWORD *sub_1001983C8()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress);
  long long v99 = &type metadata for Bool;
  LOBYTE(v98) = v1;
  sub_1000761D0(&v98, &v96);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(&v96, 0xD000000000000012, 0x80000001003B5AA0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v87 = v0;
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys);
  unint64_t v89 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) == 0)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_90;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = __CocoaSet.count.getter();
  if (!v4) {
    goto LABEL_6;
  }
LABEL_3:
  sub_1002CFA20(0, v4 & ~(v4 >> 63), 0);
  if (v89)
  {
    uint64_t v5 = __CocoaSet.startIndex.getter();
    unsigned __int8 v7 = 1;
  }
  else
  {
    uint64_t v5 = sub_1000FCB1C(v3);
    unsigned __int8 v7 = v8 & 1;
  }
  *(void *)&long long v96 = v5;
  *((void *)&v96 + 1) = v6;
  unsigned __int8 v97 = v7;
  if (v4 < 0) {
    goto LABEL_117;
  }
  uint64_t v9 = 0;
  uint64_t v90 = v3;
  uint64_t v88 = v4;
  while (2)
  {
    if (v9 == v4) {
      goto LABEL_108;
    }
    uint64_t v91 = v9 + 1;
    uint64_t v17 = sub_1000FC000(v96, SDWORD2(v96), v97, v3);
    sub_10006C51C(&qword_1004587F0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003782A0;
    *(void *)(inited + 32) = 0xD000000000000010;
    *(void *)(inited + 40) = 0x80000001003B5B90;
    uint64_t v19 = *(void *)(v17 + 32);
    uint64_t v93 = v17;
    unint64_t v94 = *(void *)(v17 + 40);
    unint64_t v20 = v94 >> 62;
    uint64_t v21 = inited;
    uint64_t v92 = inited;
    switch(v94 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v19), v19)) {
          goto LABEL_111;
        }
        uint64_t v22 = HIDWORD(v19) - (int)v19;
LABEL_18:
        if (!v22) {
          goto LABEL_46;
        }
        int64_t v25 = v22 & ~(v22 >> 63);
        sub_1002CF974(0, v25, 0);
        if (!v20)
        {
          if ((v22 & 0x8000000000000000) == 0)
          {
            uint64_t v26 = 0;
            goto LABEL_26;
          }
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
        }
        if (v20 == 1) {
          uint64_t v26 = (int)v19;
        }
        else {
          uint64_t v26 = *(void *)(v19 + 16);
        }
        if (v22 < 0) {
          goto LABEL_109;
        }
        do
        {
LABEL_26:
          if (!v25)
          {
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
            goto LABEL_115;
          }
          if (v20)
          {
            if (v20 == 1)
            {
              if (v26 < (int)v19 || v26 >= v19 >> 32) {
                goto LABEL_98;
              }
              uint64_t v27 = __DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_118;
              }
              uint64_t v28 = v27;
              uint64_t v29 = __DataStorage._offset.getter();
              uint64_t v30 = v26 - v29;
              if (__OFSUB__(v26, v29)) {
                goto LABEL_100;
              }
            }
            else
            {
              if (v26 < *(void *)(v19 + 16)) {
                goto LABEL_96;
              }
              if (v26 >= *(void *)(v19 + 24)) {
                goto LABEL_99;
              }
              uint64_t v32 = __DataStorage._bytes.getter();
              if (!v32) {
                goto LABEL_119;
              }
              uint64_t v28 = v32;
              uint64_t v33 = __DataStorage._offset.getter();
              uint64_t v30 = v26 - v33;
              if (__OFSUB__(v26, v33)) {
                goto LABEL_101;
              }
            }
            char v31 = *(unsigned char *)(v28 + v30);
          }
          else
          {
            if (v26 >= BYTE6(v94)) {
              goto LABEL_97;
            }
            *(void *)&long long v98 = v19;
            DWORD2(v98) = v94;
            WORD6(v98) = WORD2(v94);
            char v31 = *((unsigned char *)&v98 + v26);
          }
          sub_10006C51C(&qword_100457200);
          uint64_t v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = xmmword_100378290;
          *(void *)(v34 + 56) = &type metadata for UInt8;
          *(void *)(v34 + 64) = &protocol witness table for UInt8;
          *(unsigned char *)(v34 + 32) = v31;
          uint64_t v35 = String.init(format:_:)();
          uint64_t v37 = v36;
          unint64_t v39 = _swiftEmptyArrayStorage[2];
          unint64_t v38 = _swiftEmptyArrayStorage[3];
          if (v39 >= v38 >> 1) {
            sub_1002CF974(v38 > 1, v39 + 1, 1);
          }
          _swiftEmptyArrayStorage[2] = v39 + 1;
          uint64_t v40 = &_swiftEmptyArrayStorage[2 * v39];
          v40[4] = v35;
          v40[5] = v37;
          ++v26;
          --v25;
          --v22;
          LODWORD(v20) = v94 >> 62;
        }
        while (v22);
        uint64_t v3 = v90;
        uint64_t v21 = v92;
LABEL_46:
        *(void *)&long long v98 = _swiftEmptyArrayStorage;
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v43 = v42;
        swift_bridgeObjectRelease();
        *(void *)(v21 + 48) = v41;
        *(void *)(v21 + 56) = v43;
        strcpy((char *)(v21 + 64), "keyIdentifier");
        *(_WORD *)(v21 + 78) = -4864;
        uint64_t v44 = *(void *)(v93 + 16);
        unint64_t v95 = *(void *)(v93 + 24);
        unint64_t v45 = v95 >> 62;
        switch(v95 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v44), v44)) {
              goto LABEL_113;
            }
            uint64_t v46 = HIDWORD(v44) - (int)v44;
LABEL_51:
            if (!v46) {
              goto LABEL_80;
            }
            int64_t v49 = v46 & ~(v46 >> 63);
            sub_1002CF974(0, v49, 0);
            if (!v45)
            {
              if ((v46 & 0x8000000000000000) == 0)
              {
                uint64_t v50 = 0;
                goto LABEL_60;
              }
              goto LABEL_116;
            }
            if (v45 == 1) {
              uint64_t v50 = (int)v44;
            }
            else {
              uint64_t v50 = *(void *)(v44 + 16);
            }
            if (v46 < 0) {
              goto LABEL_110;
            }
            do
            {
LABEL_60:
              if (!v49) {
                goto LABEL_95;
              }
              if (v45)
              {
                if (v45 == 1)
                {
                  if (v50 < (int)v44 || v50 >= v44 >> 32) {
                    goto LABEL_104;
                  }
                  uint64_t v51 = __DataStorage._bytes.getter();
                  if (!v51) {
                    goto LABEL_120;
                  }
                  uint64_t v52 = v51;
                  uint64_t v53 = __DataStorage._offset.getter();
                  uint64_t v54 = v50 - v53;
                  if (__OFSUB__(v50, v53)) {
                    goto LABEL_106;
                  }
                }
                else
                {
                  if (v50 < *(void *)(v44 + 16)) {
                    goto LABEL_102;
                  }
                  if (v50 >= *(void *)(v44 + 24)) {
                    goto LABEL_105;
                  }
                  uint64_t v56 = __DataStorage._bytes.getter();
                  if (!v56) {
                    goto LABEL_121;
                  }
                  uint64_t v52 = v56;
                  uint64_t v57 = __DataStorage._offset.getter();
                  uint64_t v54 = v50 - v57;
                  if (__OFSUB__(v50, v57)) {
                    goto LABEL_107;
                  }
                }
                char v55 = *(unsigned char *)(v52 + v54);
              }
              else
              {
                if (v50 >= BYTE6(v95)) {
                  goto LABEL_103;
                }
                *(void *)&long long v98 = v44;
                DWORD2(v98) = v95;
                WORD6(v98) = WORD2(v95);
                char v55 = *((unsigned char *)&v98 + v50);
              }
              sub_10006C51C(&qword_100457200);
              uint64_t v58 = swift_allocObject();
              *(_OWORD *)(v58 + 16) = xmmword_100378290;
              *(void *)(v58 + 56) = &type metadata for UInt8;
              *(void *)(v58 + 64) = &protocol witness table for UInt8;
              *(unsigned char *)(v58 + 32) = v55;
              uint64_t v59 = String.init(format:_:)();
              uint64_t v61 = v60;
              unint64_t v63 = _swiftEmptyArrayStorage[2];
              unint64_t v62 = _swiftEmptyArrayStorage[3];
              if (v63 >= v62 >> 1) {
                sub_1002CF974(v62 > 1, v63 + 1, 1);
              }
              _swiftEmptyArrayStorage[2] = v63 + 1;
              long long v64 = &_swiftEmptyArrayStorage[2 * v63];
              v64[4] = v59;
              v64[5] = v61;
              ++v50;
              --v49;
              --v46;
              LODWORD(v45) = v95 >> 62;
            }
            while (v46);
            uint64_t v3 = v90;
LABEL_80:
            *(void *)&long long v98 = _swiftEmptyArrayStorage;
            uint64_t v65 = BidirectionalCollection<>.joined(separator:)();
            uint64_t v67 = v66;
            swift_bridgeObjectRelease();
            *(void *)(v92 + 80) = v65;
            *(void *)(v92 + 88) = v67;
            unint64_t v68 = sub_1001DB39C(v92);
            swift_release();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1002CFA20(0, _swiftEmptyArrayStorage[2] + 1, 1);
            }
            unint64_t v70 = _swiftEmptyArrayStorage[2];
            unint64_t v69 = _swiftEmptyArrayStorage[3];
            if (v70 >= v69 >> 1) {
              sub_1002CFA20(v69 > 1, v70 + 1, 1);
            }
            _swiftEmptyArrayStorage[2] = v70 + 1;
            _swiftEmptyArrayStorage[v70 + 4] = v68;
            if (!v89)
            {
              long long v10 = v96;
              char v11 = v97;
              uint64_t v12 = sub_1000FAE78(v96, *((void *)&v96 + 1), v97, v3);
              uint64_t v14 = v13;
              char v16 = v15;
              sub_10008B004(v10, *((uint64_t *)&v10 + 1), v11);
              *(void *)&long long v96 = v12;
              *((void *)&v96 + 1) = v14;
              uint64_t v3 = v90;
              unsigned __int8 v97 = v16 & 1;
              goto LABEL_11;
            }
            if ((v97 & 1) == 0) {
              goto LABEL_122;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            sub_10006C51C((uint64_t *)&unk_100457208);
            uint64_t v71 = (void (*)(long long *, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v71(&v98, 0);
LABEL_11:
            uint64_t v4 = v88;
            uint64_t v9 = v91;
            if (v91 != v88) {
              continue;
            }
            sub_10008B004(v96, *((uint64_t *)&v96 + 1), v97);
            swift_bridgeObjectRelease();
LABEL_90:
            long long v99 = (void *)sub_10006C51C((uint64_t *)&unk_100455780);
            *(void *)&long long v98 = _swiftEmptyArrayStorage;
            sub_1000761D0(&v98, &v96);
            char v72 = swift_isUniquelyReferenced_nonNull_native();
            sub_1002C9648(&v96, 0x4B73736572707865, 0xEB00000000737965, v72);
            swift_bridgeObjectRelease();
            LOBYTE(v98) = *(unsigned char *)(v87 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
            uint64_t v73 = String.init<A>(describing:)();
            long long v99 = &type metadata for String;
            *(void *)&long long v98 = v73;
            *((void *)&v98 + 1) = v74;
            sub_1000761D0(&v98, &v96);
            char v75 = swift_isUniquelyReferenced_nonNull_native();
            sub_1002C9648(&v96, 0x5373736572707865, 0xEC00000065746174, v75);
            swift_bridgeObjectRelease();
            char v76 = *(unsigned char *)(v87 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning);
            long long v99 = &type metadata for Bool;
            LOBYTE(v98) = v76;
            sub_1000761D0(&v98, &v96);
            char v77 = swift_isUniquelyReferenced_nonNull_native();
            sub_1002C9648(&v96, 0x6E696E6E75527369, 0xE900000000000067, v77);
            swift_bridgeObjectRelease();
            swift_beginAccess();
            uint64_t v78 = swift_bridgeObjectRetain();
            uint64_t v79 = sub_100197BAC(v78);
            swift_bridgeObjectRelease();
            if (v79[2])
            {
              sub_10006C51C(&qword_100457218);
              uint64_t v80 = (void *)static _DictionaryStorage.allocate(capacity:)();
            }
            else
            {
              uint64_t v80 = &_swiftEmptyDictionarySingleton;
            }
            *(void *)&long long v98 = v80;
            unint64_t v81 = (void *)swift_bridgeObjectRetain();
            sub_10019CB8C(v81, 1, &v98);
            swift_bridgeObjectRelease();
            uint64_t v82 = v98;
            long long v99 = (void *)sub_10006C51C((uint64_t *)&unk_100457220);
            *(void *)&long long v98 = v82;
            sub_1000761D0(&v98, &v96);
            char v83 = swift_isUniquelyReferenced_nonNull_native();
            sub_1002C9648(&v96, 0xD00000000000001BLL, 0x80000001003B5AE0, v83);
            swift_bridgeObjectRelease();
            sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
            swift_bridgeObjectRelease();
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            int v85 = sub_1000190DC((uint64_t)"dskexpress.state", (uint64_t)isa);

            return v85;
          case 2uLL:
            uint64_t v48 = *(void *)(v44 + 16);
            uint64_t v47 = *(void *)(v44 + 24);
            uint64_t v46 = v47 - v48;
            if (!__OFSUB__(v47, v48)) {
              goto LABEL_51;
            }
            goto LABEL_114;
          case 3uLL:
            goto LABEL_80;
          default:
            uint64_t v46 = BYTE6(v95);
            goto LABEL_51;
        }
      case 2uLL:
        uint64_t v24 = *(void *)(v19 + 16);
        uint64_t v23 = *(void *)(v19 + 24);
        uint64_t v22 = v23 - v24;
        if (!__OFSUB__(v23, v24)) {
          goto LABEL_18;
        }
        goto LABEL_112;
      case 3uLL:
        goto LABEL_46;
      default:
        uint64_t v22 = BYTE6(v94);
        goto LABEL_18;
    }
  }
}

void sub_1001990EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning;
    char v10 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning);
    char v11 = Logger.logObject.getter();
    if (v10)
    {
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "DSKExpress is already running", v13, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v14))
      {
        char v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v14, "Starting DSKExpress", v15, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v1 + v9) = 1;
      sub_10019932C();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10019932C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0) {
    __break(1u);
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) == 1)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress)) {
      return;
    }
    uint64_t v9 = self;
    v50[0] = 0;
    char v10 = sub_10005903C(v9, v50);
    if (v10)
    {
      char v11 = v10;
      id v12 = v50[0];
      if ([v11 state] == (id)1) {
        char v13 = 1;
      }
      else {
        char v13 = 2 * ([v11 state] == (id)3);
      }
      uint64_t v23 = OBJC_IVAR____TtC10seserviced10DSKExpress_expressState;
      *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = v13;
      swift_retain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        uint64_t v48 = v11;
        *(_DWORD *)uint64_t v26 = 136315138;
        v50[0] = v27;
        LOBYTE(v49) = *(unsigned char *)(v1 + v23);
        uint64_t v28 = String.init<A>(describing:)();
        uint64_t v49 = sub_100290514(v28, v29, (uint64_t *)v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Express state %s", v26, 0xCu);
        swift_arrayDestroy();
        char v11 = v48;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      if (*(unsigned char *)(v1 + v23))
      {
        id v30 = [v11 passConfigs];
        if (v30)
        {
          char v31 = v30;
          sub_10006C51C((uint64_t *)&unk_100455730);
          uint64_t v32 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v33 = sub_1000E6A58(v32);
          swift_bridgeObjectRelease();
          if (v33)
          {
            swift_bridgeObjectRetain_n();
            uint64_t v34 = Logger.logObject.getter();
            os_log_type_t v35 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v34, v35))
            {
              uint64_t v36 = (uint8_t *)swift_slowAlloc();
              uint64_t v37 = (void *)swift_slowAlloc();
              uint64_t v48 = v11;
              v50[0] = v37;
              *(_DWORD *)uint64_t v36 = 136315138;
              swift_bridgeObjectRetain();
              sub_10006C51C(&qword_100457240);
              uint64_t v38 = Array.description.getter();
              unint64_t v40 = v39;
              swift_bridgeObjectRelease();
              uint64_t v49 = sub_100290514(v38, v40, (uint64_t *)v50);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v34, v35, "Express passes %s", v36, 0xCu);
              swift_arrayDestroy();
              char v11 = v48;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_bridgeObjectRelease_n();
            }

            swift_retain();
            uint64_t v44 = sub_10019D4D4((uint64_t)v33, v1);
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v45 = sub_100089A28((unint64_t)v44);
            swift_bridgeObjectRelease();
            *(void *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys) = v45;
            swift_bridgeObjectRelease();
            swift_beginAccess();
            uint64_t v46 = swift_bridgeObjectRetain();
            sub_10019D608(v46, (void (*)(uint64_t, unint64_t, unsigned char *))sub_10019D8DC);
            swift_bridgeObjectRelease();

            return;
          }
        }
        uint64_t v41 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to retrieve pass configurations", v43, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v1 + v23) = 0;
      }
      sub_100199E24();

      return;
    }
    id v17 = v50[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    char v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      v50[0] = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136315138;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      uint64_t v49 = sub_100290514(v21, v22, (uint64_t *)v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to retrieve the express configuration %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
    {
      *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
      sub_100199E24();
    }
    swift_errorRelease();
  }
  else
  {
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Not running", v16, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_100199B6C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    uint64_t v9 = OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning;
    int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning);
    char v11 = Logger.logObject.getter();
    if (v10 == 1)
    {
      os_log_type_t v12 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v11, v12))
      {
        char v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Stopping DSKExpress", v13, 2u);
        swift_slowDealloc();
      }

      if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
      {
        *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState) = 0;
        sub_100199E24();
      }
      os_log_type_t v14 = (void *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems);
      swift_beginAccess();
      *os_log_type_t v14 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      os_log_type_t v15 = (void *)(v1 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
      swift_beginAccess();
      *os_log_type_t v15 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      *(unsigned char *)(v1 + v9) = 0;
    }
    else
    {
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v16))
      {
        id v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v16, "DSKExpress is not running", v17, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100199E24()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v31 - 8);
  __chkstk_darwin(v31, v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressKeys) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  int v10 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_delegates);
  swift_beginAccess();
  uint64_t v11 = *v10;
  uint64_t v12 = *(void *)(*v10 + 64);
  uint64_t v26 = *v10 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v27 = (unint64_t)(v13 + 63) >> 6;
  id v30 = v35;
  unint64_t v29 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v28 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v32 = v11;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v17 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    sub_10010DDC4(*(void *)(v32 + 56) + 40 * i, (uint64_t)v38);
    sub_10010197C(v38, (uint64_t)v37);
    if (qword_100453928 != -1) {
      swift_once();
    }
    sub_10010DDC4((uint64_t)v37, (uint64_t)v36);
    uint64_t v23 = swift_allocObject();
    sub_10010197C(v36, v23 + 16);
    v35[2] = sub_10019D88C;
    v35[3] = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v35[0] = sub_10007C0C4;
    v35[1] = &unk_100414448;
    uint64_t v24 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter();
    uint64_t v33 = _swiftEmptyArrayStorage;
    sub_10019D894((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10006C51C((uint64_t *)&unk_100455710);
    sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v24);
    (*v29)(v5, v1);
    (*v28)(v9, v31);
    swift_release();
    uint64_t result = sub_10007594C((uint64_t)v37);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v20 >= v27) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v27) {
        goto LABEL_27;
      }
      unint64_t v21 = *(void *)(v26 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v27) {
          goto LABEL_27;
        }
        unint64_t v21 = *(void *)(v26 + 8 * v17);
        if (!v21)
        {
          int64_t v17 = v20 + 3;
          if (v20 + 3 >= v27) {
            goto LABEL_27;
          }
          unint64_t v21 = *(void *)(v26 + 8 * v17);
          if (!v21)
          {
            int64_t v17 = v20 + 4;
            if (v20 + 4 >= v27) {
              goto LABEL_27;
            }
            unint64_t v21 = *(void *)(v26 + 8 * v17);
            if (!v21) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 5;
  if (v22 >= v27)
  {
LABEL_27:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  unint64_t v21 = *(void *)(v26 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v27) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v26 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_10019A3BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(v5 + 16) || (uint64_t v8 = sub_1002C0AD0(v6, v7), (v9 & 1) == 0))
  {
    long long v43 = 0u;
    long long v44 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_1000AA580(*(void *)(v5 + 56) + 32 * v8, (uint64_t)&v43);
  swift_bridgeObjectRelease();
  if (!*((void *)&v44 + 1))
  {
LABEL_9:
    sub_10008E734((uint64_t)&v43, (uint64_t *)&unk_1004556C0);
    goto LABEL_10;
  }
  if (swift_dynamicCast())
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v5 + 16) && (uint64_t v12 = sub_1002C0AD0(v10, v11), (v13 & 1) != 0))
    {
      sub_1000AA580(*(void *)(v5 + 56) + 32 * v12, (uint64_t)&v43);
    }
    else
    {
      long long v43 = 0u;
      long long v44 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v44 + 1))
    {
      if swift_dynamicCast() && (v41)
      {
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (*(void *)(v5 + 16) && (uint64_t v17 = sub_1002C0AD0(v15, v16), (v18 & 1) != 0))
        {
          sub_1000AA580(*(void *)(v5 + 56) + 32 * v17, (uint64_t)&v43);
        }
        else
        {
          long long v43 = 0u;
          long long v44 = 0u;
        }
        swift_bridgeObjectRelease();
        if (!*((void *)&v44 + 1))
        {
          swift_bridgeObjectRelease();
          sub_10008E734((uint64_t)&v43, (uint64_t *)&unk_1004556C0);
          goto LABEL_27;
        }
        if ((swift_dynamicCast() & 1) == 0 || (uint64_t v19 = sub_10011FE64(v41, v42), v20 >> 60 == 15))
        {
          swift_bridgeObjectRelease();
LABEL_27:
          swift_bridgeObjectRetain_n();
          unint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            uint64_t v45 = swift_slowAlloc();
            *(void *)&long long v43 = v45;
            *(_DWORD *)uint64_t v23 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v24 = Dictionary.description.getter();
            unint64_t v26 = v25;
            swift_bridgeObjectRelease();
            sub_100290514(v24, v26, (uint64_t *)&v43);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Malformed pass config %s", v23, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          goto LABEL_10;
        }
        uint64_t v27 = v19;
        unint64_t v28 = v20;
        uint64_t v29 = sub_10011FE64(v41, v42);
        if (v30 >> 60 == 15)
        {
          sub_100075868(v27, v28);
          goto LABEL_27;
        }
        uint64_t v31 = v29;
        unint64_t v32 = v30;
        uint64_t v45 = v27;
        uint64_t v33 = (uint64_t *)(a2 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems);
        swift_beginAccess();
        uint64_t v34 = *v33;
        if (*(void *)(v34 + 16))
        {
          uint64_t v35 = v45;
          sub_10006D0EC(v45, v28);
          uint64_t v36 = sub_1002C0BAC(v35, v28);
          if (v37)
          {
            uint64_t v38 = *(void **)(*(void *)(v34 + 56) + 8 * v36);
            swift_endAccess();
            swift_bridgeObjectRetain();
            sub_100075868(v35, v28);
            swift_bridgeObjectRetain();
            uint64_t v39 = swift_bridgeObjectRetain();
            uint64_t v40 = sub_10019D318(v39, v38);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
LABEL_38:
            type metadata accessor for DSKExpress.ExpressKey();
            uint64_t result = (void *)swift_allocObject();
            result[2] = v31;
            result[3] = v32;
            result[4] = v45;
            result[5] = v28;
            result[6] = v40;
            goto LABEL_11;
          }
          sub_100075868(v35, v28);
        }
        swift_endAccess();
        uint64_t v40 = 0;
        goto LABEL_38;
      }
    }
    else
    {
      sub_10008E734((uint64_t)&v43, (uint64_t *)&unk_1004556C0);
    }
    swift_bridgeObjectRelease();
  }
LABEL_10:
  uint64_t result = 0;
LABEL_11:
  *a3 = result;
  return result;
}

uint64_t sub_10019A880(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v25 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v24 - 8);
  __chkstk_darwin(v24, v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = *(unsigned char *)(a4 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState);
  sub_10006D0EC(a1, a2);
  uint64_t v17 = swift_bridgeObjectRetain();
  char v18 = sub_10019D8E4(v17, a1, a2);
  sub_10006D144(a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_100089BA0((uint64_t)v18);
  swift_bridgeObjectRelease();
  if (qword_100453928 != -1) {
    swift_once();
  }
  sub_10010DDC4(a3, (uint64_t)v28);
  uint64_t v20 = swift_allocObject();
  sub_10010197C(v28, v20 + 16);
  *(unsigned char *)(v20 + 56) = v16;
  *(void *)(v20 + 64) = v19;
  aBlock[4] = sub_10019E0F0;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_100414498;
  unint64_t v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter();
  unint64_t v26 = _swiftEmptyArrayStorage;
  sub_10019D894((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v24);
  return swift_release();
}

uint64_t sub_10019AC00(void *a1, char a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  sub_100075908(a1, a1[3]);
  type metadata accessor for DSKExpress.ExpressReport();
  uint64_t inited = swift_initStackObject();
  *(unsigned char *)(inited + 16) = a2;
  *(void *)(inited + 24) = a3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

void sub_10019AC80(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    return;
  }
  uint64_t v15 = (uint64_t *)(v4 + OBJC_IVAR____TtC10seserviced10DSKExpress_requestedConfigurationItems);
  swift_beginAccess();
  uint64_t v16 = *v15;
  if (*(void *)(*v15 + 16))
  {
    sub_10006D0EC(a2, a3);
    uint64_t v17 = sub_1002C0BAC(a2, a3);
    if (v18)
    {
      uint64_t v19 = *(void **)(*(void *)(v16 + 56) + 8 * v17);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v19 = 0;
    }
    sub_10006D144(a2, a3);
  }
  else
  {
    uint64_t v19 = 0;
  }
  swift_endAccess();
  swift_beginAccess();
  if (!a1)
  {
    sub_10006D0EC(a2, a3);
    sub_10017FD48(a2, a3);
    sub_10006D144(a2, a3);
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (!v19) {
      return;
    }
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  sub_10006D0EC(a2, a3);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *v15;
  *uint64_t v15 = 0x8000000000000000;
  sub_1002C97F8((uint64_t)a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v15 = v22;
  swift_bridgeObjectRelease();
  sub_10006D144(a2, a3);
  swift_endAccess();
  if (!v19 || (char v21 = sub_1002E4424(v19, a1), swift_bridgeObjectRelease(), (v21 & 1) == 0)) {
LABEL_16:
  }
    sub_10019932C();
}

uint64_t sub_10019AF40(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    swift_once();
    goto LABEL_6;
  }
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced10DSKExpress_debugBypassExpress) & 1) == 0)
  {
    uint64_t v25 = OBJC_IVAR____TtC10seserviced10DSKExpress_expressState;
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced10DSKExpress_expressState))
    {
      sub_10006D0EC(a1, a2);
      uint64_t v26 = swift_bridgeObjectRetain();
      uint64_t v27 = sub_10019D8E4(v26, a1, a2);
      sub_10006D144(a1, a2);
      swift_bridgeObjectRelease();
      unint64_t v28 = (void *)sub_100089BA0((uint64_t)v27);
      swift_bridgeObjectRelease();
      char v29 = *(unsigned char *)(v2 + v25);
    }
    else
    {
      char v29 = 0;
      unint64_t v28 = &_swiftEmptySetSingleton;
    }
    goto LABEL_32;
  }
  uint64_t v9 = (void *)swift_allocObject();
  void v9[2] = a1;
  v9[3] = a2;
  sub_10006D0EC(a1, a2);
  if (qword_1004536D8 != -1) {
    goto LABEL_34;
  }
LABEL_6:
  uint64_t v12 = off_100455CB0;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10019D814;
  *(void *)(v13 + 24) = v9;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  v52[-4] = sub_100078544;
  v52[-3] = v15;
  v52[-2] = v12;
  __chkstk_darwin(v15, v16);
  v52[-2] = sub_1000A2ABC;
  v52[-1] = v17;
  uint64_t v19 = v18 + 4;
  swift_retain();
  os_unfair_lock_lock(v19);
  sub_100079ACC(v54);
  os_unfair_lock_unlock(v19);
  uint64_t v20 = v54[0];
  swift_release();
  swift_release();
  unint64_t v53 = v20 & 0xC000000000000001;
  if ((v20 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = __CocoaSet.count.getter();
    if (v21) {
      goto LABEL_8;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    unint64_t v30 = _swiftEmptyArrayStorage;
LABEL_31:
    unint64_t v28 = (void *)sub_100089BA0((uint64_t)v30);
    swift_bridgeObjectRelease();
    char v29 = 1;
LABEL_32:
    type metadata accessor for DSKExpress.ExpressReport();
    uint64_t result = swift_allocObject();
    *(unsigned char *)(result + 16) = v29;
    *(void *)(result + 24) = v28;
    return result;
  }
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v58 = _swiftEmptyArrayStorage;
  sub_1002CFA80(0, v21 & ~(v21 >> 63), 0);
  if (v53)
  {
    uint64_t result = __CocoaSet.startIndex.getter();
    unsigned __int8 v24 = 1;
  }
  else
  {
    uint64_t result = sub_1000FCB1C(v20);
    unsigned __int8 v24 = v31 & 1;
  }
  uint64_t v55 = result;
  uint64_t v56 = v23;
  unsigned __int8 v57 = v24;
  if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t v32 = v20 & 0xFFFFFFFFFFFFFF8;
    if (v20 < 0) {
      uint64_t v32 = v20;
    }
    v52[1] = v32;
    do
    {
      while (1)
      {
        uint64_t v39 = v55;
        uint64_t v38 = v56;
        uint64_t v40 = v57;
        sub_1000FB200(v55, v56, v57, v20);
        unint64_t v42 = v41;
        id v43 = [v41 publicKeyIdentifier];
        uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v46 = v45;

        uint64_t v47 = v58;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1002CFA80(0, v47[2] + 1, 1);
          uint64_t v47 = v58;
        }
        unint64_t v49 = v47[2];
        unint64_t v48 = v47[3];
        if (v49 >= v48 >> 1)
        {
          uint64_t result = sub_1002CFA80(v48 > 1, v49 + 1, 1);
          uint64_t v47 = v58;
        }
        void v47[2] = v49 + 1;
        uint64_t v50 = &v47[2 * v49];
        v50[4] = v44;
        v50[5] = v46;
        if (v53) {
          break;
        }
        uint64_t v33 = sub_1000FAE78(v39, v38, v40, v20);
        uint64_t v35 = v34;
        char v37 = v36;
        sub_10008B004(v39, v38, v40);
        uint64_t v55 = v33;
        uint64_t v56 = v35;
        unsigned __int8 v57 = v37 & 1;
        if (!--v21) {
          goto LABEL_30;
        }
      }
      if ((v40 & 1) == 0) {
        goto LABEL_36;
      }
      if (__CocoaSet.Index.handleBitPattern.getter()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_10006C51C((uint64_t *)&unk_100457230);
      uint64_t v51 = (void (*)(void *, void))Set.Index._asCocoa.modify();
      __CocoaSet.formIndex(after:isUnique:)();
      v51(v54, 0);
      --v21;
    }
    while (v21);
LABEL_30:
    sub_10008B004(v55, v56, v57);
    swift_bridgeObjectRelease();
    unint64_t v30 = v58;
    goto LABEL_31;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_10019B4E8(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = [a1 appletIdentifier];
  uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  LOBYTE(a3) = sub_100088AE4(v6, v8, a2, a3);
  sub_10006D144(v6, v8);
  return a3 & 1;
}

uint64_t sub_10019B56C(void *a1)
{
  uint64_t v1 = a1[4];
  sub_100075908(a1, a1[3]);
  type metadata accessor for DSKExpress.ExpressReport();
  uint64_t inited = swift_initStackObject();
  *(unsigned char *)(inited + 16) = 0;
  *(void *)(inited + 24) = &_swiftEmptySetSingleton;
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10019B5E0()
{
  uint64_t v67 = 0;
  unint64_t v68 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  uint64_t v65 = 0;
  unint64_t v66 = 0xE000000000000000;
  v1._countAndFlagsBits = 0x2073736572707845;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
  LOBYTE(v67) = *(unsigned char *)(v0 + 16);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x207379656B20;
  v3._object = (void *)0xE600000000000000;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + 24);
  int64_t v5 = *(void *)(v4 + 16);
  if (!v5)
  {
    uint64_t v6 = _swiftEmptyArrayStorage;
    goto LABEL_47;
  }
  long long v64 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  sub_1002CF994(0, v5, 0);
  uint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v7 = sub_100203450(v4);
  uint64_t v9 = 0;
  int v11 = v10 & 1;
  uint64_t v50 = v4 + 56;
  long long v61 = xmmword_100378290;
  uint64_t v47 = v4;
  int64_t v49 = v5;
  do
  {
    if (v7 < 0 || v7 >= 1 << *(unsigned char *)(v4 + 32)) {
      goto LABEL_55;
    }
    if (((*(void *)(v50 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
      goto LABEL_56;
    }
    if (*(_DWORD *)(v4 + 36) != v8) {
      goto LABEL_57;
    }
    int v51 = v11;
    uint64_t v52 = v8;
    uint64_t v53 = v7;
    uint64_t v54 = v9 + 1;
    uint64_t v12 = (unint64_t *)(*(void *)(v4 + 48) + 16 * v7);
    unint64_t v13 = *v12;
    unint64_t v59 = v12[1];
    unint64_t v14 = v59 >> 62;
    uint64_t v15 = _swiftEmptyArrayStorage;
    switch(v59 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v13), v13)) {
          goto LABEL_59;
        }
        unint64_t v58 = HIDWORD(v13);
        uint64_t v16 = HIDWORD(v13) - (int)v13;
LABEL_13:
        sub_10006D0EC(v13, v59);
        if (!v16)
        {
LABEL_9:
          uint64_t v15 = _swiftEmptyArrayStorage;
          goto LABEL_42;
        }
LABEL_14:
        unint64_t v63 = _swiftEmptyArrayStorage;
        int64_t v19 = v16 & ~(v16 >> 63);
        sub_1002CF974(0, v19, 0);
        uint64_t v15 = v63;
        uint64_t v57 = (int)v13;
        unint64_t v48 = v6;
        if (v14)
        {
          if (v14 == 1) {
            uint64_t v20 = v57;
          }
          else {
            uint64_t v20 = *(void *)(v13 + 16);
          }
          if (v16 < 0) {
            goto LABEL_58;
          }
        }
        else
        {
          if (v16 < 0) {
            goto LABEL_61;
          }
          uint64_t v20 = 0;
        }
        unint64_t v60 = v59 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v55 = (uint64_t)v13 >> 32;
        uint64_t v56 = BYTE6(v59);
        unint64_t v62 = v14;
        break;
      case 2uLL:
        unint64_t v58 = HIDWORD(v13);
        uint64_t v18 = *(void *)(v13 + 16);
        uint64_t v17 = *(void *)(v13 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_13;
        }
        goto LABEL_60;
      case 3uLL:
        goto LABEL_42;
      default:
        unint64_t v58 = HIDWORD(v13);
        uint64_t v16 = BYTE6(v59);
        if (!BYTE6(v59)) {
          goto LABEL_9;
        }
        goto LABEL_14;
    }
    do
    {
      if (!v19)
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
      }
      if (v14)
      {
        if (v14 == 1)
        {
          if (v20 < v57 || v20 >= v55) {
            goto LABEL_49;
          }
          uint64_t v21 = __DataStorage._bytes.getter();
          if (!v21) {
            goto LABEL_62;
          }
          uint64_t v22 = v21;
          uint64_t v23 = __DataStorage._offset.getter();
          uint64_t v24 = v20 - v23;
          if (__OFSUB__(v20, v23)) {
            goto LABEL_52;
          }
        }
        else
        {
          if (v20 < *(void *)(v13 + 16)) {
            goto LABEL_51;
          }
          if (v20 >= *(void *)(v13 + 24)) {
            goto LABEL_53;
          }
          uint64_t v26 = __DataStorage._bytes.getter();
          if (!v26) {
            goto LABEL_63;
          }
          uint64_t v22 = v26;
          uint64_t v27 = __DataStorage._offset.getter();
          uint64_t v24 = v20 - v27;
          if (__OFSUB__(v20, v27)) {
            goto LABEL_54;
          }
        }
        char v25 = *(unsigned char *)(v22 + v24);
      }
      else
      {
        if (v20 >= v56) {
          goto LABEL_50;
        }
        LOWORD(v67) = v13;
        BYTE2(v67) = BYTE2(v13);
        BYTE3(v67) = BYTE3(v13);
        BYTE4(v67) = v58;
        BYTE5(v67) = BYTE5(v13);
        BYTE6(v67) = BYTE6(v13);
        HIBYTE(v67) = HIBYTE(v13);
        LODWORD(v68) = v59;
        WORD2(v68) = WORD2(v59);
        char v25 = *((unsigned char *)&v67 + v20);
      }
      sub_10006C51C(&qword_100457200);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = v61;
      *(void *)(v28 + 56) = &type metadata for UInt8;
      *(void *)(v28 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v28 + 32) = v25;
      uint64_t v29 = String.init(format:_:)();
      unint64_t v14 = v30;
      unint64_t v63 = v15;
      unint64_t v32 = v15[2];
      unint64_t v31 = v15[3];
      if (v32 >= v31 >> 1)
      {
        sub_1002CF974(v31 > 1, v32 + 1, 1);
        uint64_t v15 = v63;
      }
      long long v15[2] = v32 + 1;
      uint64_t v33 = &v15[2 * v32];
      v33[4] = v29;
      v33[5] = v14;
      ++v20;
      --v19;
      --v16;
      LODWORD(v14) = v62;
    }
    while (v16);
    uint64_t v4 = v47;
    uint64_t v6 = v48;
LABEL_42:
    uint64_t v67 = v15;
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v34 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    unint64_t v69 = &type metadata for String;
    unint64_t v70 = &protocol witness table for String;
    sub_10006D144(v13, v59);
    uint64_t v67 = (void *)v34;
    unint64_t v68 = v36;
    long long v64 = v6;
    unint64_t v38 = v6[2];
    unint64_t v37 = v6[3];
    if (v38 >= v37 >> 1) {
      sub_1002CF994(v37 > 1, v38 + 1, 1);
    }
    uint64_t v39 = (uint64_t)v69;
    uint64_t v40 = (uint64_t)v70;
    uint64_t v41 = sub_10019E154((uint64_t)&v67, (uint64_t)v69);
    __chkstk_darwin(v41, v41);
    id v43 = (char *)&v47 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v44 + 16))(v43);
    sub_10019CF20(v38, (uint64_t)v43, (uint64_t *)&v64, v39, v40);
    sub_10007594C((uint64_t)&v67);
    uint64_t v6 = v64;
    uint64_t v7 = sub_1000FAE78(v53, v52, v51 & 1, v4);
    int v11 = v45 & 1;
    uint64_t v9 = v54;
  }
  while (v54 != v49);
  sub_10008B004(v7, v8, v11);
  swift_bridgeObjectRelease();
LABEL_47:
  sub_10023D68C((uint64_t)v6);
  swift_bridgeObjectRelease();
  return v65;
}

uint64_t sub_10019BC94()
{
  return sub_10019B5E0();
}

uint64_t sub_10019BCB8()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10006D144(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

Swift::Int sub_10019BD00()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  sub_10006D0EC(v2, v3);
  Data.hash(into:)();
  sub_10006D144(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10019BD68()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  sub_10006D0EC(v2, v3);
  Data.hash(into:)();

  return sub_10006D144(v2, v3);
}

Swift::Int sub_10019BDCC()
{
  Hasher.init(_seed:)();
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  unint64_t v2 = *(void *)(*(void *)v0 + 24);
  sub_10006D0EC(v1, v2);
  Data.hash(into:)();
  sub_10006D144(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10019BE30(uint64_t a1, uint64_t a2)
{
  return sub_100088AE4(*(void *)(*(void *)a1 + 16), *(void *)(*(void *)a1 + 24), *(void *)(*(void *)a2 + 16), *(void *)(*(void *)a2 + 24));
}

uint64_t sub_10019BE44()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced10DSKExpress_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_10019BF14()
{
  return type metadata accessor for DSKExpress();
}

uint64_t type metadata accessor for DSKExpress()
{
  uint64_t result = qword_100456FC0;
  if (!qword_100456FC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10019BF68()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DSKExpress.ExpressReport()
{
  return self;
}

uint64_t type metadata accessor for DSKExpress.ExpressKey()
{
  return self;
}

uint64_t sub_10019C068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v21[0] = qword_100468A38;
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v18[2] = v4;
  uint64_t v18[3] = a1;
  v18[4] = a2;
  v18[5] = a3;
  aBlock[4] = sub_10019E148;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_1004144E8;
  int64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  static DispatchQoS.unspecified.getter();
  v21[1] = _swiftEmptyArrayStorage;
  sub_10019D894((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release();
}

void sub_10019C37C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced10DSKExpress_isRunning) == 1)
  {
    if (a2 == 0xD00000000000001ELL && a3 == 0x80000001003B5C00
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v7 = (const char *)XPC_EVENT_KEY_NAME.getter();
      if (!xpc_dictionary_get_string(a4, v7)) {
        goto LABEL_18;
      }
      uint64_t v9 = String.init(cString:)();
      unint64_t v10 = v8;
      if (v9 == 0x64616F6C796150 && v8 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v11 = String.utf8CString.getter();
        swift_bridgeObjectRelease();
        string = xpc_dictionary_get_string(a4, (const char *)(v11 + 32));
        swift_release();
        if (string)
        {
          uint64_t v14 = String.init(cString:)();
          unint64_t v15 = v13;
          if (v14 == 0xD00000000000002CLL && v13 == 0x80000001003B5C60
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v16 = Logger.logObject.getter();
            os_log_type_t v17 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v16, v17))
            {
              uint64_t v18 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v18 = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received UWB express config change event", v18, 2u);
              swift_slowDealloc();
            }

            sub_10019932C();
            return;
          }
          swift_bridgeObjectRetain();
          oslog = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(oslog, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            uint64_t v26 = swift_slowAlloc();
            *(_DWORD *)uint64_t v23 = 136315138;
            swift_bridgeObjectRetain();
            sub_100290514(v14, v15, &v26);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            uint64_t v24 = "Ignoring event string value %s";
            goto LABEL_27;
          }
          goto LABEL_29;
        }
LABEL_18:
        oslog = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(oslog, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v20 = 0;
          uint64_t v21 = "Bad XPC event dictionary";
          goto LABEL_20;
        }
        goto LABEL_30;
      }
      swift_bridgeObjectRetain();
      oslog = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(oslog, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        swift_bridgeObjectRetain();
        sub_100290514(v9, v10, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v24 = "Ignoring event string key %s";
        goto LABEL_27;
      }
    }
    else
    {
      swift_bridgeObjectRetain_n();
      oslog = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(oslog, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136315138;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v24 = "Ignoring stream %s";
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, oslog, v22, v24, v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return;
      }
    }
LABEL_29:
    swift_bridgeObjectRelease_n();
    goto LABEL_30;
  }
  oslog = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    uint64_t v21 = "Not running";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, oslog, v19, v21, v20, 2u);
    swift_slowDealloc();
  }
LABEL_30:
}

unsigned char *storeEnumTagSinglePayload for DSKExpress.ExpressState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10019CA98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKExpress.ExpressState()
{
  return &type metadata for DSKExpress.ExpressState;
}

unint64_t sub_10019CAD4()
{
  unint64_t result = qword_1004571E8;
  if (!qword_1004571E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004571E8);
  }
  return result;
}

uint64_t sub_10019CB28()
{
  return sub_10019D894((unint64_t *)&unk_1004571F0, (void (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey);
}

uint64_t sub_10019CB74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10019CB84()
{
  return swift_release();
}

uint64_t sub_10019CB8C(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v43 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1002C0AD0(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1002CDC10();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    os_log_type_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v20 = (uint64_t *)(v19[6] + 16 * v11);
    *uint64_t v20 = v7;
    v20[1] = v6;
    *(void *)(v19[7] + 8 * v11) = v8;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v19[2] = v23;
    uint64_t v24 = v43 - 1;
    if (v43 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (unint64_t i = a1 + 9; ; i += 3)
    {
      uint64_t v27 = *(i - 2);
      uint64_t v26 = *(i - 1);
      uint64_t v28 = *i;
      uint64_t v29 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v30 = sub_1002C0AD0(v27, v26);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v22 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v22) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_1002C61F4(v34, 1);
        unint64_t v30 = sub_1002C0AD0(v27, v26);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      unint64_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      unint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
      *unint64_t v38 = v27;
      v38[1] = v26;
      *(void *)(v37[7] + 8 * v30) = v28;
      uint64_t v39 = v37[2];
      BOOL v22 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v22) {
        goto LABEL_24;
      }
      _OWORD v37[2] = v40;
      if (!--v24) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002C61F4(v14, a2 & 1);
  uint64_t v16 = sub_1002C0AD0(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000001003B4890;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10019CF20(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_1001883A8((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return sub_10010197C(&v12, v10 + 40 * a1 + 32);
}

uint64_t sub_10019CFBC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_10019D044(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = (unint64_t *)result;
  int64_t v4 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = a3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 64);
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  BOOL v33 = a4;
  char v25 = a4 + 7;
  while (1)
  {
    while (1)
    {
      if (v7)
      {
        unint64_t v8 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v9 = v8 | (v4 << 6);
      }
      else
      {
        int64_t v10 = v4 + 1;
        if (__OFADD__(v4, 1)) {
          goto LABEL_42;
        }
        if (v10 >= v28) {
          return sub_1002B20EC(v24, a2, v26, a3);
        }
        unint64_t v11 = *(void *)(v27 + 8 * v10);
        ++v4;
        if (!v11)
        {
          int64_t v4 = v10 + 1;
          if (v10 + 1 >= v28) {
            return sub_1002B20EC(v24, a2, v26, a3);
          }
          unint64_t v11 = *(void *)(v27 + 8 * v4);
          if (!v11)
          {
            int64_t v4 = v10 + 2;
            if (v10 + 2 >= v28) {
              return sub_1002B20EC(v24, a2, v26, a3);
            }
            unint64_t v11 = *(void *)(v27 + 8 * v4);
            if (!v11)
            {
              int64_t v12 = v10 + 3;
              if (v12 >= v28) {
                return sub_1002B20EC(v24, a2, v26, a3);
              }
              unint64_t v11 = *(void *)(v27 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  int64_t v4 = v12 + 1;
                  if (__OFADD__(v12, 1)) {
                    goto LABEL_43;
                  }
                  if (v4 >= v28) {
                    return sub_1002B20EC(v24, a2, v26, a3);
                  }
                  unint64_t v11 = *(void *)(v27 + 8 * v4);
                  ++v12;
                  if (v11) {
                    goto LABEL_20;
                  }
                }
              }
              int64_t v4 = v12;
            }
          }
        }
LABEL_20:
        unint64_t v7 = (v11 - 1) & v11;
        unint64_t v9 = __clz(__rbit64(v11)) + (v4 << 6);
      }
      uint64_t v13 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v9);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      sub_1000AA580(*(void *)(a3 + 56) + 32 * v9, (uint64_t)v32);
      v30[0] = v14;
      v30[1] = v15;
      sub_1000AA580((uint64_t)v32, (uint64_t)&v31);
      uint64_t v16 = v33[2];
      if (v16) {
        break;
      }
LABEL_4:
      swift_bridgeObjectRetain_n();
      sub_10008E734((uint64_t)v30, &qword_100457258);
      sub_10007594C((uint64_t)v32);
      uint64_t result = swift_bridgeObjectRelease();
    }
    if (v33[4] != v14 || v33[5] != v15)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0) {
        break;
      }
    }
LABEL_37:
    swift_bridgeObjectRetain_n();
    sub_10008E734((uint64_t)v30, &qword_100457258);
    sub_10007594C((uint64_t)v32);
    uint64_t result = swift_bridgeObjectRelease();
    *(unint64_t *)((char *)v24 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    if (__OFADD__(v26++, 1))
    {
      __break(1u);
      return sub_1002B20EC(v24, a2, v26, a3);
    }
  }
  if (v16 == 1) {
    goto LABEL_4;
  }
  uint64_t v18 = v25;
  uint64_t v19 = 1;
  while (1)
  {
    uint64_t v20 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (*(v18 - 1) == v14 && *v18 == v15) {
      goto LABEL_37;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_37;
    }
    v18 += 2;
    ++v19;
    if (v20 == v16) {
      goto LABEL_4;
    }
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_10019D318(uint64_t a1, void *a2)
{
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v6 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v10);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_10019D044((uint64_t)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a1, a2);
    swift_bridgeObjectRelease();
    if (v2) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    int64_t v12 = (void *)swift_slowAlloc();
    bzero(v12, v8);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_10019D044((uint64_t)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v11;
}

void *sub_10019D4D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v10 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v9 = *(void *)(a1 + 8 * i + 32);
      swift_bridgeObjectRetain();
      sub_10019A3BC(&v9, a2, &v8);
      if (v2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      if (v8)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    return (void *)v10;
  }
  return result;
}

uint64_t sub_10019D608(uint64_t a1, void (*a2)(uint64_t, unint64_t, unsigned char *))
{
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v15);
    ++v9;
    if (!v16)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v20 + 8 * v9);
      if (!v16)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v20 + 8 * v9);
        if (!v16)
        {
          int64_t v9 = v15 + 3;
          if (v15 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v20 + 8 * v9);
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    int64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_10010DDC4(*(void *)(a1 + 56) + 40 * v11, (uint64_t)v19);
    v18[0] = v13;
    v18[1] = v14;
    sub_10006D0EC(v13, v14);
    a2(v13, v14, v19);
    uint64_t result = sub_10008E734((uint64_t)v18, (uint64_t *)&unk_100457248);
  }
  int64_t v17 = v15 + 4;
  if (v17 >= v7) {
    return swift_release();
  }
  unint64_t v16 = *(void *)(v20 + 8 * v17);
  if (v16)
  {
    int64_t v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v20 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10019D7DC()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10019D814(void *a1)
{
  return sub_10019B4E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10019D81C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10019D854()
{
  sub_10007594C(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10019D88C()
{
  return sub_10019B56C((void *)(v0 + 16));
}

uint64_t sub_10019D894(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10019D8DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10019A880(a1, a2, a3, v3);
}

char *sub_10019D8E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKExpress.ExpressKey();
    sub_10019D894(&qword_1004545D0, (void (*)(uint64_t))type metadata accessor for DSKExpress.ExpressKey);
    uint64_t v7 = a2;
    Set.Iterator.init(_cocoa:)();
    uint64_t v6 = __s1[2];
    uint64_t v52 = __s1[3];
    uint64_t v8 = __s1[4];
    int64_t v9 = __s1[5];
    unint64_t v10 = __s1[6];
  }
  else
  {
    uint64_t v7 = a2;
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v52 = a1 + 56;
    uint64_t v8 = ~v11;
    uint64_t v12 = -v11;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v10 = v13 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
  }
  int64_t v51 = (unint64_t)(v8 + 64) >> 6;
  BOOL v14 = __OFSUB__(HIDWORD(v7), v7);
  BOOL v47 = v14;
  uint64_t v46 = HIDWORD(v7) - (int)v7;
  uint64_t v44 = (char *)_swiftEmptyArrayStorage;
  uint64_t v45 = v6;
  while (2)
  {
    int64_t v15 = v9;
    if (v6 < 0)
    {
      uint64_t v18 = __CocoaSet.Iterator.next()();
      if (v18)
      {
        uint64_t v53 = v18;
        type metadata accessor for DSKExpress.ExpressKey();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        uint64_t v19 = (void *)__s1[0];
        swift_unknownObjectRelease();
        if (v19) {
          goto LABEL_31;
        }
      }
    }
    else
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v9 << 6);
      }
      else
      {
        ++v9;
        if (__OFADD__(v15, 1))
        {
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
        }
        if (v9 >= v51) {
          break;
        }
        unint64_t v20 = *(void *)(v52 + 8 * v9);
        if (!v20)
        {
          int64_t v21 = v15 + 2;
          if (v15 + 2 >= v51) {
            break;
          }
          unint64_t v20 = *(void *)(v52 + 8 * v21);
          if (v20) {
            goto LABEL_28;
          }
          int64_t v21 = v15 + 3;
          if (v15 + 3 >= v51) {
            break;
          }
          unint64_t v20 = *(void *)(v52 + 8 * v21);
          if (v20) {
            goto LABEL_28;
          }
          int64_t v21 = v15 + 4;
          if (v15 + 4 >= v51) {
            break;
          }
          unint64_t v20 = *(void *)(v52 + 8 * v21);
          if (v20)
          {
LABEL_28:
            int64_t v9 = v21;
          }
          else
          {
            int64_t v9 = v15 + 5;
            if (v15 + 5 >= v51) {
              break;
            }
            unint64_t v20 = *(void *)(v52 + 8 * v9);
            if (!v20)
            {
              int64_t v42 = v15 + 6;
              do
              {
                if (v51 == v42) {
                  goto LABEL_73;
                }
                unint64_t v20 = *(void *)(v52 + 8 * v42++);
              }
              while (!v20);
              int64_t v9 = v42 - 1;
            }
          }
        }
        unint64_t v10 = (v20 - 1) & v20;
        unint64_t v17 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      uint64_t v19 = *(void **)(*(void *)(v6 + 48) + 8 * v17);
      swift_retain();
      if (v19)
      {
LABEL_31:
        uint64_t v23 = v19[4];
        unint64_t v22 = v19[5];
        uint64_t v24 = 0;
        switch(v22 >> 62)
        {
          case 1uLL:
            LODWORD(v24) = HIDWORD(v23) - v23;
            if (__OFSUB__(HIDWORD(v23), v23)) {
              goto LABEL_75;
            }
            uint64_t v24 = (int)v24;
LABEL_36:
            uint64_t v28 = BYTE6(a3);
            switch(a3 >> 62)
            {
              case 1uLL:
                uint64_t v28 = v46;
                if (v47) {
                  goto LABEL_76;
                }
                goto LABEL_40;
              case 2uLL:
                uint64_t v30 = *(void *)(v7 + 16);
                uint64_t v29 = *(void *)(v7 + 24);
                BOOL v27 = __OFSUB__(v29, v30);
                uint64_t v28 = v29 - v30;
                if (!v27) {
                  goto LABEL_40;
                }
                goto LABEL_77;
              case 3uLL:
                if (v24) {
                  goto LABEL_12;
                }
                goto LABEL_62;
              default:
LABEL_40:
                if (v24 == v28)
                {
                  if (v24 >= 1)
                  {
                    switch(v22 >> 62)
                    {
                      case 1uLL:
                        if (v23 >> 32 < (int)v23) {
                          goto LABEL_79;
                        }
                        unint64_t v49 = v10;
                        sub_10006D0EC(a2, a3);
                        sub_10006D0EC(v23, v22);
                        uint64_t v35 = __DataStorage._bytes.getter();
                        if (!v35) {
                          goto LABEL_59;
                        }
                        uint64_t v36 = __DataStorage._offset.getter();
                        if (__OFSUB__((int)v23, v36)) {
                          goto LABEL_82;
                        }
                        v35 += (int)v23 - v36;
LABEL_59:
                        __DataStorage._length.getter();
                        uint64_t v7 = a2;
                        sub_1001E5240(v35, a2, a3, (char *)__s1);
                        if (v4) {
                          goto LABEL_85;
                        }
                        uint64_t v4 = 0;
                        sub_10006D144(a2, a3);
                        sub_10006D144(v23, v22);
                        goto LABEL_61;
                      case 2uLL:
                        unint64_t v49 = v10;
                        uint64_t v31 = v7;
                        uint64_t v32 = *(void *)(v23 + 16);
                        uint64_t v33 = *(void *)(v23 + 24);
                        sub_10006D0EC(v31, a3);
                        swift_retain();
                        swift_retain();
                        unint64_t v22 = __DataStorage._bytes.getter();
                        if (!v22) {
                          goto LABEL_49;
                        }
                        uint64_t v34 = __DataStorage._offset.getter();
                        if (__OFSUB__(v32, v34)) {
                          goto LABEL_81;
                        }
                        v22 += v32 - v34;
LABEL_49:
                        if (__OFSUB__(v33, v32)) {
                          goto LABEL_80;
                        }
                        __DataStorage._length.getter();
                        uint64_t v7 = a2;
                        sub_1001E5240(v22, a2, a3, (char *)__s1);
                        if (v4) {
                          goto LABEL_84;
                        }
                        uint64_t v4 = 0;
                        sub_10006D144(a2, a3);
                        swift_release();
                        swift_release();
LABEL_61:
                        uint64_t v6 = v45;
                        unint64_t v10 = v49;
                        if (__s1[0]) {
                          break;
                        }
                        goto LABEL_12;
                      case 3uLL:
                        memset(__s1, 0, 14);
                        sub_10006D0EC(v7, a3);
                        sub_1001E5240((uint64_t)__s1, v7, a3, (char *)&v53);
                        if (v4) {
                          goto LABEL_83;
                        }
                        uint64_t v4 = 0;
                        sub_10006D144(v7, a3);
                        if (v53) {
                          break;
                        }
                        goto LABEL_12;
                      default:
                        __s1[0] = v19[4];
                        LOWORD(__s1[1]) = v22;
                        BYTE2(__s1[1]) = BYTE2(v22);
                        BYTE3(__s1[1]) = BYTE3(v22);
                        BYTE4(__s1[1]) = BYTE4(v22);
                        BYTE5(__s1[1]) = BYTE5(v22);
                        sub_10006D0EC(v7, a3);
                        sub_1001E5240((uint64_t)__s1, v7, a3, (char *)&v53);
                        if (v4)
                        {
LABEL_83:
                          sub_10006D144(v7, a3);
                          __break(1u);
LABEL_84:
                          sub_10006D144(v7, a3);
                          swift_release();
                          swift_release();
                          __break(1u);
LABEL_85:
                          sub_10006D144(v7, a3);
                          sub_10006D144(v23, v22);
                          __break(1u);
                          JUMPOUT(0x10019E080);
                        }
                        sub_10006D144(v7, a3);
                        uint64_t v4 = 0;
                        if (v53) {
                          break;
                        }
                        goto LABEL_12;
                    }
                  }
LABEL_62:
                  unint64_t v50 = v10;
                  uint64_t v37 = v19[2];
                  unint64_t v38 = v19[3];
                  sub_10006D0EC(v37, v38);
                  swift_release();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v44 = sub_100258EB0(0, *((void *)v44 + 2) + 1, 1, v44);
                  }
                  unint64_t v40 = *((void *)v44 + 2);
                  unint64_t v39 = *((void *)v44 + 3);
                  if (v40 >= v39 >> 1) {
                    uint64_t v44 = sub_100258EB0((char *)(v39 > 1), v40 + 1, 1, v44);
                  }
                  *((void *)v44 + 2) = v40 + 1;
                  Swift::String v41 = &v44[16 * v40];
                  *((void *)v41 + 4) = v37;
                  *((void *)v41 + 5) = v38;
                  uint64_t v7 = a2;
                  unint64_t v10 = v50;
                }
                else
                {
LABEL_12:
                  swift_release();
                }
                break;
            }
            continue;
          case 2uLL:
            uint64_t v26 = *(void *)(v23 + 16);
            uint64_t v25 = *(void *)(v23 + 24);
            BOOL v27 = __OFSUB__(v25, v26);
            uint64_t v24 = v25 - v26;
            if (!v27) {
              goto LABEL_36;
            }
            __break(1u);
LABEL_75:
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
            goto LABEL_78;
          case 3uLL:
            goto LABEL_36;
          default:
            uint64_t v24 = BYTE6(v22);
            goto LABEL_36;
        }
      }
    }
    break;
  }
LABEL_73:
  sub_10008C4F0();
  return v44;
}

uint64_t sub_10019E0B0()
{
  sub_10007594C(v0 + 16);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10019E0F0()
{
  return sub_10019AC00((void *)(v0 + 16), *(unsigned char *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_10019E100()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_10019E148()
{
  sub_10019C37C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10019E154(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *sub_10019E1BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10006D0EC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    unint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = (int *)type metadata accessor for CreationMetadata(0);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_10006C51C(&qword_1004572C0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = v11[1];
      *unint64_t v10 = *v11;
      v10[1] = v16;
      uint64_t v17 = v12[5];
      unint64_t v39 = (char *)v10 + v17;
      uint64_t v18 = (char *)v11 + v17;
      uint64_t v19 = type metadata accessor for Date();
      unint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v39, v18, v19);
      uint64_t v21 = v12[6];
      unint64_t v22 = (void *)((char *)v10 + v21);
      uint64_t v23 = (void *)((char *)v11 + v21);
      uint64_t v24 = v23[1];
      *unint64_t v22 = *v23;
      v22[1] = v24;
      uint64_t v25 = v12[7];
      uint64_t v26 = (void *)((char *)v10 + v25);
      BOOL v27 = (void *)((char *)v11 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v12[8];
      uint64_t v30 = (void *)((char *)v10 + v29);
      uint64_t v31 = (void *)((char *)v11 + v29);
      uint64_t v32 = v31[1];
      *uint64_t v30 = *v31;
      v30[1] = v32;
      uint64_t v33 = v12[9];
      uint64_t v34 = (void *)((char *)v10 + v33);
      uint64_t v35 = (void *)((char *)v11 + v33);
      uint64_t v36 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v36;
      uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t type metadata accessor for CreationMetadata(uint64_t a1)
{
  return sub_100087C90(a1, qword_1004573B8);
}

uint64_t sub_10019E418(uint64_t a1, uint64_t a2)
{
  sub_10006D144(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for CreationMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v4 + *(int *)(v5 + 20);
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_10019E540(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (uint64_t *)((char *)a1 + v8);
  unint64_t v10 = (uint64_t *)((char *)a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10006C51C(&qword_1004572C0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    uint64_t v15 = v11[5];
    uint64_t v37 = (char *)v9 + v15;
    uint64_t v16 = (char *)v10 + v15;
    uint64_t v17 = type metadata accessor for Date();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_bridgeObjectRetain();
    v18(v37, v16, v17);
    uint64_t v19 = v11[6];
    unint64_t v20 = (void *)((char *)v9 + v19);
    uint64_t v21 = (void *)((char *)v10 + v19);
    uint64_t v22 = v21[1];
    *unint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = v11[7];
    uint64_t v24 = (void *)((char *)v9 + v23);
    uint64_t v25 = (void *)((char *)v10 + v23);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    uint64_t v27 = v11[8];
    uint64_t v28 = (void *)((char *)v9 + v27);
    uint64_t v29 = (void *)((char *)v10 + v27);
    uint64_t v30 = v29[1];
    void *v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = v11[9];
    uint64_t v32 = (void *)((char *)v9 + v31);
    uint64_t v33 = (void *)((char *)v10 + v31);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = *(void (**)(void *, void, uint64_t, int *))(v12 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t *sub_10019E72C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10006D144(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (uint64_t *)((char *)a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  uint64_t v13 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v15 = *(uint64_t (**)(void *, uint64_t, int *))(v14 + 48);
  LODWORD(v7) = v15(v11, 1, v13);
  int v16 = v15(v12, 1, v13);
  if (!v7)
  {
    if (!v16)
    {
      *uint64_t v11 = *v12;
      v11[1] = v12[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v36 = v13[5];
      uint64_t v37 = (char *)v11 + v36;
      unint64_t v38 = (char *)v12 + v36;
      uint64_t v39 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 24))(v37, v38, v39);
      uint64_t v40 = v13[6];
      Swift::String v41 = (void *)((char *)v11 + v40);
      int64_t v42 = (void *)((char *)v12 + v40);
      *Swift::String v41 = *v42;
      v41[1] = v42[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = v13[7];
      uint64_t v44 = (void *)((char *)v11 + v43);
      uint64_t v45 = (void *)((char *)v12 + v43);
      *uint64_t v44 = *v45;
      v44[1] = v45[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v46 = v13[8];
      BOOL v47 = (void *)((char *)v11 + v46);
      unint64_t v48 = (void *)((char *)v12 + v46);
      *BOOL v47 = *v48;
      v47[1] = v48[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v49 = v13[9];
      unint64_t v50 = (void *)((char *)v11 + v49);
      int64_t v51 = (void *)((char *)v12 + v49);
      *unint64_t v50 = *v51;
      v50[1] = v51[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001A691C((uint64_t)v11, type metadata accessor for CreationMetadata);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v34 = sub_10006C51C(&qword_1004572C0);
    memcpy(v11, v12, *(void *)(*(void *)(v34 - 8) + 64));
    return a1;
  }
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  uint64_t v17 = v13[5];
  uint64_t v52 = (char *)v11 + v17;
  uint64_t v18 = (char *)v12 + v17;
  uint64_t v19 = type metadata accessor for Date();
  unint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
  swift_bridgeObjectRetain();
  v20(v52, v18, v19);
  uint64_t v21 = v13[6];
  uint64_t v22 = (void *)((char *)v11 + v21);
  uint64_t v23 = (void *)((char *)v12 + v21);
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  uint64_t v24 = v13[7];
  uint64_t v25 = (void *)((char *)v11 + v24);
  uint64_t v26 = (void *)((char *)v12 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  uint64_t v27 = v13[8];
  uint64_t v28 = (void *)((char *)v11 + v27);
  uint64_t v29 = (void *)((char *)v12 + v27);
  void *v28 = *v29;
  v28[1] = v29[1];
  uint64_t v30 = v13[9];
  uint64_t v31 = (void *)((char *)v11 + v30);
  uint64_t v32 = (void *)((char *)v12 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  uint64_t v33 = *(void (**)(void *, void, uint64_t, int *))(v14 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v11, 0, 1, v13);
  return a1;
}

_OWORD *sub_10019EAA4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (_OWORD *)((char *)a2 + v4);
  unint64_t v7 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_10006C51C(&qword_1004572C0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *uint64_t v5 = *v6;
    uint64_t v10 = v7[5];
    uint64_t v11 = (char *)v5 + v10;
    uint64_t v12 = (char *)v6 + v10;
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    *(_OWORD *)((char *)v5 + v7[6]) = *(_OWORD *)((char *)v6 + v7[6]);
    *(_OWORD *)((char *)v5 + v7[7]) = *(_OWORD *)((char *)v6 + v7[7]);
    *(_OWORD *)((char *)v5 + v7[8]) = *(_OWORD *)((char *)v6 + v7[8]);
    *(_OWORD *)((char *)v5 + v7[9]) = *(_OWORD *)((char *)v6 + v7[9]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t *sub_10019EC20(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10006D144(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (uint64_t *)((char *)a1 + v8);
  uint64_t v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v22 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v22;
      swift_bridgeObjectRelease();
      uint64_t v23 = v11[5];
      uint64_t v24 = (char *)v9 + v23;
      uint64_t v25 = (char *)v10 + v23;
      uint64_t v26 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
      uint64_t v27 = v11[6];
      uint64_t v28 = (void *)((char *)v9 + v27);
      uint64_t v29 = (void *)((char *)v10 + v27);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      void *v28 = v31;
      v28[1] = v30;
      swift_bridgeObjectRelease();
      uint64_t v32 = v11[7];
      uint64_t v33 = (void *)((char *)v9 + v32);
      uint64_t v34 = (void *)((char *)v10 + v32);
      uint64_t v36 = *v34;
      uint64_t v35 = v34[1];
      *uint64_t v33 = v36;
      v33[1] = v35;
      swift_bridgeObjectRelease();
      uint64_t v37 = v11[8];
      unint64_t v38 = (void *)((char *)v9 + v37);
      uint64_t v39 = (void *)((char *)v10 + v37);
      uint64_t v41 = *v39;
      uint64_t v40 = v39[1];
      *unint64_t v38 = v41;
      v38[1] = v40;
      swift_bridgeObjectRelease();
      uint64_t v42 = v11[9];
      uint64_t v43 = (void *)((char *)v9 + v42);
      uint64_t v44 = (void *)((char *)v10 + v42);
      uint64_t v46 = *v44;
      uint64_t v45 = v44[1];
      *uint64_t v43 = v46;
      v43[1] = v45;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001A691C((uint64_t)v9, type metadata accessor for CreationMetadata);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v20 = sub_10006C51C(&qword_1004572C0);
    memcpy(v9, v10, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  uint64_t v16 = v11[5];
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = (char *)v10 + v16;
  uint64_t v19 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(_OWORD *)((char *)v9 + v11[6]) = *(_OWORD *)((char *)v10 + v11[6]);
  *(_OWORD *)((char *)v9 + v11[7]) = *(_OWORD *)((char *)v10 + v11[7]);
  *(_OWORD *)((char *)v9 + v11[8]) = *(_OWORD *)((char *)v10 + v11[8]);
  *(_OWORD *)((char *)v9 + v11[9]) = *(_OWORD *)((char *)v10 + v11[9]);
  (*(void (**)(void *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_10019EEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019EED0);
}

uint64_t sub_10019EED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_10006C51C(&qword_1004572C0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10019EF90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019EFA4);
}

void *sub_10019EFA4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_10006C51C(&qword_1004572C0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SESTLKRecordData(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_100457320);
}

void sub_10019F078()
{
  sub_1001A3ECC(319, (unint64_t *)&qword_100457330, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_10019F12C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    int v15 = (uint64_t *)((char *)v4 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *int v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (uint64_t *)((char *)v4 + v14);
    uint64_t v19 = (uint64_t *)((char *)a2 + v14);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    uint64_t v23 = (uint64_t *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    void *v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = (uint64_t *)((char *)v4 + v22);
    uint64_t v27 = (uint64_t *)((char *)a2 + v22);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10019F288(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10019F348(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v12);
  int v15 = (void *)((char *)a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = (void *)((char *)a1 + v13);
  uint64_t v18 = (void *)((char *)a2 + v13);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = a3[9];
  uint64_t v22 = (void *)((char *)a1 + v20);
  uint64_t v23 = (void *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)((char *)a1 + v21);
  uint64_t v26 = (void *)((char *)a2 + v21);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10019F454(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)((char *)a1 + v13);
  int v15 = (void *)((char *)a2 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10019F5A8(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

void *sub_10019F65C(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  void *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[9];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10019F760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019F774);
}

uint64_t sub_10019F774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_10019F824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019F838);
}

uint64_t sub_10019F838(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10019F8E0()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_10019F988(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10006D0EC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_10006D0EC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_10006D0EC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_10006D0EC(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = type metadata accessor for SESPeerIdentityData(0);
    uint64_t v16 = *(int *)(v15 + 32);
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = type metadata accessor for Date();
    uint64_t v20 = *(void *)(v19 - 8);
    long long v127 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    if (v127(v18, 1, v19))
    {
      uint64_t v21 = sub_10006C51C(&qword_1004564D0);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v130 = v15;
    uint64_t v23 = *(int *)(v15 + 36);
    uint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = (int *)type metadata accessor for CreationMetadata(0);
    uint64_t v27 = *((void *)v26 - 1);
    uint64_t v131 = *(unsigned int (**)(void *, uint64_t, int *))(v27 + 48);
    uint64_t v132 = v6;
    uint64_t v133 = v19;
    uint64_t v128 = v27;
    uint64_t v129 = v20;
    if (v131(v25, 1, v26))
    {
      uint64_t v28 = sub_10006C51C(&qword_1004572C0);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v29;
      uint64_t v30 = v26[5];
      uint64_t v31 = (char *)v24 + v30;
      uint64_t v32 = (char *)v25 + v30;
      uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
      swift_bridgeObjectRetain();
      v33(v31, v32, v19);
      uint64_t v34 = v26[6];
      uint64_t v35 = (void *)((char *)v24 + v34);
      uint64_t v36 = (void *)((char *)v25 + v34);
      uint64_t v37 = v36[1];
      void *v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v26[7];
      uint64_t v39 = (void *)((char *)v24 + v38);
      uint64_t v40 = (void *)((char *)v25 + v38);
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      uint64_t v42 = v26[8];
      uint64_t v43 = (void *)((char *)v24 + v42);
      uint64_t v44 = (void *)((char *)v25 + v42);
      uint64_t v45 = v44[1];
      *uint64_t v43 = *v44;
      v43[1] = v45;
      uint64_t v46 = v26[9];
      BOOL v47 = (void *)((char *)v24 + v46);
      unint64_t v48 = (void *)((char *)v25 + v46);
      uint64_t v49 = v48[1];
      *BOOL v47 = *v48;
      v47[1] = v49;
      unint64_t v50 = *(void (**)(void *, void, uint64_t, int *))(v27 + 56);
      swift_bridgeObjectRetain();
      uint64_t v6 = v132;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v50(v24, 0, 1, v26);
    }
    uint64_t v51 = *(int *)(v6 + 20);
    uint64_t v52 = (uint64_t *)((char *)a1 + v51);
    uint64_t v53 = (char *)a2 + v51;
    uint64_t v54 = *(uint64_t *)((char *)a2 + v51);
    unint64_t v55 = *(uint64_t *)((char *)a2 + v51 + 8);
    sub_10006D0EC(v54, v55);
    *uint64_t v52 = v54;
    v52[1] = v55;
    uint64_t v56 = *((void *)v53 + 2);
    unint64_t v57 = *((void *)v53 + 3);
    sub_10006D0EC(v56, v57);
    void v52[2] = v56;
    v52[3] = v57;
    uint64_t v58 = *((void *)v53 + 4);
    unint64_t v59 = *((void *)v53 + 5);
    sub_10006D0EC(v58, v59);
    v52[4] = v58;
    _OWORD v52[5] = v59;
    uint64_t v60 = *((void *)v53 + 6);
    unint64_t v61 = *((void *)v53 + 7);
    sub_10006D0EC(v60, v61);
    v52[6] = v60;
    v52[7] = v61;
    uint64_t v62 = v130;
    uint64_t v63 = *(int *)(v130 + 32);
    long long v64 = (char *)v52 + v63;
    uint64_t v65 = &v53[v63];
    if (v127(&v53[v63], 1, v19))
    {
      uint64_t v66 = sub_10006C51C(&qword_1004564D0);
      memcpy(v64, v65, *(void *)(*(void *)(v66 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v64, v65, v19);
      uint64_t v62 = v130;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v129 + 56))(v64, 0, 1, v19);
    }
    uint64_t v67 = *(int *)(v62 + 36);
    unint64_t v68 = (uint64_t *)((char *)v52 + v67);
    unint64_t v69 = &v53[v67];
    unint64_t v70 = v131;
    if (v131(&v53[v67], 1, v26))
    {
      uint64_t v71 = sub_10006C51C(&qword_1004572C0);
      memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
      uint64_t v72 = v128;
    }
    else
    {
      uint64_t v73 = *((void *)v69 + 1);
      *unint64_t v68 = *(void *)v69;
      v68[1] = v73;
      uint64_t v74 = v26[5];
      char v75 = (char *)v68 + v74;
      char v76 = &v69[v74];
      char v77 = *(void (**)(char *, char *, uint64_t))(v129 + 16);
      swift_bridgeObjectRetain();
      v77(v75, v76, v133);
      uint64_t v78 = v26[6];
      uint64_t v79 = (void *)((char *)v68 + v78);
      uint64_t v80 = &v69[v78];
      uint64_t v81 = *((void *)v80 + 1);
      *uint64_t v79 = *(void *)v80;
      v79[1] = v81;
      uint64_t v82 = v26[7];
      char v83 = (void *)((char *)v68 + v82);
      uint64_t v84 = &v69[v82];
      uint64_t v85 = *((void *)v84 + 1);
      *char v83 = *(void *)v84;
      v83[1] = v85;
      uint64_t v86 = v26[8];
      uint64_t v87 = (void *)((char *)v68 + v86);
      uint64_t v88 = &v69[v86];
      uint64_t v89 = *((void *)v88 + 1);
      *uint64_t v87 = *(void *)v88;
      v87[1] = v89;
      uint64_t v90 = v26[9];
      uint64_t v91 = (void *)((char *)v68 + v90);
      uint64_t v92 = &v69[v90];
      uint64_t v93 = *((void *)v92 + 1);
      *uint64_t v91 = *(void *)v92;
      v91[1] = v93;
      uint64_t v72 = v128;
      unint64_t v94 = *(void (**)(void *, void, uint64_t, int *))(v128 + 56);
      swift_bridgeObjectRetain();
      unint64_t v70 = v131;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v94(v68, 0, 1, v26);
    }
    uint64_t v95 = *(int *)(v132 + 24);
    long long v96 = (uint64_t *)((char *)a1 + v95);
    unsigned __int8 v97 = (uint64_t *)((char *)a2 + v95);
    uint64_t v98 = *v97;
    unint64_t v99 = v97[1];
    sub_10006D0EC(*v97, v99);
    *long long v96 = v98;
    v96[1] = v99;
    uint64_t v100 = *(int *)(v132 + 28);
    uint64_t v101 = (uint64_t *)((char *)a1 + v100);
    uint64_t v102 = (uint64_t *)((char *)a2 + v100);
    if (v70(v102, 1, v26))
    {
      uint64_t v103 = sub_10006C51C(&qword_1004572C0);
      memcpy(v101, v102, *(void *)(*(void *)(v103 - 8) + 64));
    }
    else
    {
      uint64_t v104 = v102[1];
      *uint64_t v101 = *v102;
      v101[1] = v104;
      uint64_t v105 = v26[5];
      __n128 v106 = (char *)v101 + v105;
      long long v107 = (char *)v102 + v105;
      __n128 v108 = *(void (**)(char *, char *, uint64_t))(v129 + 16);
      swift_bridgeObjectRetain();
      v108(v106, v107, v133);
      uint64_t v109 = v26[6];
      uint64_t v110 = (void *)((char *)v101 + v109);
      uint64_t v111 = (void *)((char *)v102 + v109);
      uint64_t v112 = v111[1];
      void *v110 = *v111;
      v110[1] = v112;
      uint64_t v113 = v26[7];
      uint64_t v114 = (void *)((char *)v101 + v113);
      uint64_t v115 = (void *)((char *)v102 + v113);
      uint64_t v116 = v115[1];
      void *v114 = *v115;
      v114[1] = v116;
      uint64_t v117 = v26[8];
      uint64_t v118 = (void *)((char *)v101 + v117);
      uint64_t v119 = (void *)((char *)v102 + v117);
      uint64_t v120 = v119[1];
      *uint64_t v118 = *v119;
      v118[1] = v120;
      uint64_t v121 = v26[9];
      uint64_t v122 = (void *)((char *)v101 + v121);
      int v123 = (void *)((char *)v102 + v121);
      uint64_t v124 = v123[1];
      *uint64_t v122 = *v123;
      v122[1] = v124;
      char v125 = *(void (**)(void *, void, uint64_t, int *))(v72 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v125(v101, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t type metadata accessor for SESPeerIdentityData(uint64_t a1)
{
  return sub_100087C90(a1, (uint64_t *)&unk_1004574F0);
}

uint64_t sub_1001A008C(uint64_t a1, uint64_t a2)
{
  sub_10006D144(*(void *)a1, *(void *)(a1 + 8));
  sub_10006D144(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10006D144(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10006D144(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (!v7(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + *(int *)(v4 + 36);
  uint64_t v9 = type metadata accessor for CreationMetadata(0);
  unint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
  if (!v10(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v8 + *(int *)(v9 + 20), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = a2;
  uint64_t v11 = a1 + *(int *)(a2 + 20);
  sub_10006D144(*(void *)v11, *(void *)(v11 + 8));
  sub_10006D144(*(void *)(v11 + 16), *(void *)(v11 + 24));
  sub_10006D144(*(void *)(v11 + 32), *(void *)(v11 + 40));
  sub_10006D144(*(void *)(v11 + 48), *(void *)(v11 + 56));
  uint64_t v12 = v11 + *(int *)(v4 + 32);
  if (!v7(v12, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v12, v6);
  }
  uint64_t v13 = v11 + *(int *)(v4 + 36);
  if (!v10(v13, 1, v9))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v13 + *(int *)(v9 + 20), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_10006D144(*(void *)(a1 + *(int *)(v16 + 24)), *(void *)(a1 + *(int *)(v16 + 24) + 8));
  uint64_t v14 = a1 + *(int *)(v16 + 28);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v14, 1, v9);
  if (!result)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14 + *(int *)(v9 + 20), v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1001A0400(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10006D0EC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_10006D0EC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_10006D0EC(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v15 = *(int *)(v14 + 32);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  char v125 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v125(v17, 1, v18))
  {
    uint64_t v20 = sub_10006C51C(&qword_1004564D0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v128 = v14;
  uint64_t v21 = *(int *)(v14 + 36);
  uint64_t v22 = (uint64_t *)((char *)a1 + v21);
  uint64_t v23 = (uint64_t *)((char *)a2 + v21);
  uint64_t v24 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v25 = *((void *)v24 - 1);
  uint64_t v129 = *(unsigned int (**)(void *, uint64_t, int *))(v25 + 48);
  uint64_t v130 = a3;
  uint64_t v131 = v18;
  uint64_t v126 = v25;
  uint64_t v127 = v19;
  if (v129(v23, 1, v24))
  {
    uint64_t v26 = sub_10006C51C(&qword_1004572C0);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v27 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v27;
    uint64_t v28 = v24[5];
    uint64_t v29 = (char *)v22 + v28;
    uint64_t v30 = (char *)v23 + v28;
    uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    swift_bridgeObjectRetain();
    v31(v29, v30, v18);
    uint64_t v32 = v24[6];
    uint64_t v33 = (void *)((char *)v22 + v32);
    uint64_t v34 = (void *)((char *)v23 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = v24[7];
    uint64_t v37 = (void *)((char *)v22 + v36);
    uint64_t v38 = (void *)((char *)v23 + v36);
    uint64_t v39 = v38[1];
    *uint64_t v37 = *v38;
    v37[1] = v39;
    uint64_t v40 = v24[8];
    uint64_t v41 = (void *)((char *)v22 + v40);
    uint64_t v42 = (void *)((char *)v23 + v40);
    uint64_t v43 = v42[1];
    *uint64_t v41 = *v42;
    v41[1] = v43;
    uint64_t v44 = v24[9];
    uint64_t v45 = (void *)((char *)v22 + v44);
    uint64_t v46 = (void *)((char *)v23 + v44);
    uint64_t v47 = v46[1];
    *uint64_t v45 = *v46;
    v45[1] = v47;
    unint64_t v48 = *(void (**)(void *, void, uint64_t, int *))(v25 + 56);
    swift_bridgeObjectRetain();
    a3 = v130;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v48(v22, 0, 1, v24);
  }
  uint64_t v49 = *(int *)(a3 + 20);
  unint64_t v50 = (uint64_t *)((char *)a1 + v49);
  uint64_t v51 = (char *)a2 + v49;
  uint64_t v52 = *(uint64_t *)((char *)a2 + v49);
  unint64_t v53 = *(uint64_t *)((char *)a2 + v49 + 8);
  sub_10006D0EC(v52, v53);
  *unint64_t v50 = v52;
  v50[1] = v53;
  uint64_t v54 = *((void *)v51 + 2);
  unint64_t v55 = *((void *)v51 + 3);
  sub_10006D0EC(v54, v55);
  v50[2] = v54;
  id v50[3] = v55;
  uint64_t v56 = *((void *)v51 + 4);
  unint64_t v57 = *((void *)v51 + 5);
  sub_10006D0EC(v56, v57);
  v50[4] = v56;
  v50[5] = v57;
  uint64_t v58 = *((void *)v51 + 6);
  unint64_t v59 = *((void *)v51 + 7);
  sub_10006D0EC(v58, v59);
  v50[6] = v58;
  v50[7] = v59;
  uint64_t v60 = v128;
  uint64_t v61 = *(int *)(v128 + 32);
  uint64_t v62 = (char *)v50 + v61;
  uint64_t v63 = &v51[v61];
  if (v125(&v51[v61], 1, v18))
  {
    uint64_t v64 = sub_10006C51C(&qword_1004564D0);
    memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v62, v63, v18);
    uint64_t v60 = v128;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v127 + 56))(v62, 0, 1, v18);
  }
  uint64_t v65 = *(int *)(v60 + 36);
  uint64_t v66 = (uint64_t *)((char *)v50 + v65);
  uint64_t v67 = &v51[v65];
  unint64_t v68 = v129;
  if (v129(&v51[v65], 1, v24))
  {
    uint64_t v69 = sub_10006C51C(&qword_1004572C0);
    memcpy(v66, v67, *(void *)(*(void *)(v69 - 8) + 64));
    uint64_t v70 = v126;
  }
  else
  {
    uint64_t v71 = *((void *)v67 + 1);
    *uint64_t v66 = *(void *)v67;
    v66[1] = v71;
    uint64_t v72 = v24[5];
    uint64_t v73 = (char *)v66 + v72;
    uint64_t v74 = &v67[v72];
    char v75 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
    swift_bridgeObjectRetain();
    v75(v73, v74, v131);
    uint64_t v76 = v24[6];
    char v77 = (void *)((char *)v66 + v76);
    uint64_t v78 = &v67[v76];
    uint64_t v79 = *((void *)v78 + 1);
    *char v77 = *(void *)v78;
    v77[1] = v79;
    uint64_t v80 = v24[7];
    uint64_t v81 = (void *)((char *)v66 + v80);
    uint64_t v82 = &v67[v80];
    uint64_t v83 = *((void *)v82 + 1);
    *uint64_t v81 = *(void *)v82;
    v81[1] = v83;
    uint64_t v84 = v24[8];
    uint64_t v85 = (void *)((char *)v66 + v84);
    uint64_t v86 = &v67[v84];
    uint64_t v87 = *((void *)v86 + 1);
    *uint64_t v85 = *(void *)v86;
    v85[1] = v87;
    uint64_t v88 = v24[9];
    uint64_t v89 = (void *)((char *)v66 + v88);
    uint64_t v90 = &v67[v88];
    uint64_t v91 = *((void *)v90 + 1);
    *uint64_t v89 = *(void *)v90;
    v89[1] = v91;
    uint64_t v70 = v126;
    uint64_t v92 = *(void (**)(void *, void, uint64_t, int *))(v126 + 56);
    swift_bridgeObjectRetain();
    unint64_t v68 = v129;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v92(v66, 0, 1, v24);
  }
  uint64_t v93 = *(int *)(v130 + 24);
  unint64_t v94 = (uint64_t *)((char *)a1 + v93);
  uint64_t v95 = (uint64_t *)((char *)a2 + v93);
  uint64_t v96 = *v95;
  unint64_t v97 = v95[1];
  sub_10006D0EC(*v95, v97);
  *unint64_t v94 = v96;
  v94[1] = v97;
  uint64_t v98 = *(int *)(v130 + 28);
  unint64_t v99 = (uint64_t *)((char *)a1 + v98);
  uint64_t v100 = (uint64_t *)((char *)a2 + v98);
  if (v68(v100, 1, v24))
  {
    uint64_t v101 = sub_10006C51C(&qword_1004572C0);
    memcpy(v99, v100, *(void *)(*(void *)(v101 - 8) + 64));
  }
  else
  {
    uint64_t v102 = v100[1];
    *unint64_t v99 = *v100;
    v99[1] = v102;
    uint64_t v103 = v24[5];
    uint64_t v104 = (char *)v99 + v103;
    uint64_t v105 = (char *)v100 + v103;
    __n128 v106 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
    swift_bridgeObjectRetain();
    v106(v104, v105, v131);
    uint64_t v107 = v24[6];
    __n128 v108 = (void *)((char *)v99 + v107);
    uint64_t v109 = (void *)((char *)v100 + v107);
    uint64_t v110 = v109[1];
    *__n128 v108 = *v109;
    v108[1] = v110;
    uint64_t v111 = v24[7];
    uint64_t v112 = (void *)((char *)v99 + v111);
    uint64_t v113 = (void *)((char *)v100 + v111);
    uint64_t v114 = v113[1];
    *uint64_t v112 = *v113;
    v112[1] = v114;
    uint64_t v115 = v24[8];
    uint64_t v116 = (void *)((char *)v99 + v115);
    uint64_t v117 = (void *)((char *)v100 + v115);
    uint64_t v118 = v117[1];
    *uint64_t v116 = *v117;
    v116[1] = v118;
    uint64_t v119 = v24[9];
    uint64_t v120 = (void *)((char *)v99 + v119);
    uint64_t v121 = (void *)((char *)v100 + v119);
    uint64_t v122 = v121[1];
    void *v120 = *v121;
    v120[1] = v122;
    int v123 = *(void (**)(void *, void, uint64_t, int *))(v70 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v123(v99, 0, 1, v24);
  }
  return a1;
}

uint64_t *sub_1001A0A94(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10006D144(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_10006D0EC(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10006D144(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_10006D0EC(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10006D144(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_10006D0EC(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10006D144(v20, v21);
  uint64_t v178 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v22 = *(int *)(v178 + 32);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v177 = *(void *)(v25 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v177 + 48);
  int v27 = v26(v23, 1, v25);
  uint64_t v174 = v26;
  int v28 = v26(v24, 1, v25);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v177 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v177 + 8))(v23, v25);
LABEL_6:
    uint64_t v29 = sub_10006C51C(&qword_1004564D0);
    memcpy(v23, v24, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v177 + 24))(v23, v24, v25);
LABEL_7:
  uint64_t v30 = a3;
  uint64_t v31 = *(int *)(v178 + 36);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v173 = *((void *)v34 - 1);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, int *))(v173 + 48);
  int v36 = v35(v32, 1, v34);
  int v37 = v35(v33, 1, v34);
  uint64_t v175 = v25;
  uint64_t v176 = v35;
  if (v36)
  {
    if (!v37)
    {
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      uint64_t v38 = v34[5];
      uint64_t v39 = &v32[v38];
      uint64_t v40 = &v33[v38];
      uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v177 + 16);
      swift_bridgeObjectRetain();
      v41(v39, v40, v175);
      uint64_t v42 = v34[6];
      uint64_t v43 = &v32[v42];
      uint64_t v44 = &v33[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      uint64_t v45 = v34[7];
      uint64_t v46 = &v32[v45];
      uint64_t v47 = &v33[v45];
      *(void *)uint64_t v46 = *(void *)v47;
      *((void *)v46 + 1) = *((void *)v47 + 1);
      uint64_t v48 = v34[8];
      uint64_t v49 = &v32[v48];
      unint64_t v50 = &v33[v48];
      *(void *)uint64_t v49 = *(void *)v50;
      *((void *)v49 + 1) = *((void *)v50 + 1);
      uint64_t v51 = v34[9];
      uint64_t v52 = &v32[v51];
      unint64_t v53 = &v33[v51];
      *(void *)uint64_t v52 = *(void *)v53;
      *((void *)v52 + 1) = *((void *)v53 + 1);
      uint64_t v54 = *(void (**)(void *, void, uint64_t, int *))(v173 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v54(v32, 0, 1, v34);
      uint64_t v25 = v175;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    sub_1001A691C((uint64_t)v32, type metadata accessor for CreationMetadata);
LABEL_12:
    uint64_t v55 = sub_10006C51C(&qword_1004572C0);
    memcpy(v32, v33, *(void *)(*(void *)(v55 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v177 + 24))(&v32[v34[5]], &v33[v34[5]], v25);
  uint64_t v137 = v34[6];
  char v138 = &v32[v137];
  char v139 = &v33[v137];
  *(void *)char v138 = *(void *)v139;
  *((void *)v138 + 1) = *((void *)v139 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v140 = v34[7];
  uint64_t v141 = &v32[v140];
  unsigned __int8 v142 = &v33[v140];
  *(void *)uint64_t v141 = *(void *)v142;
  *((void *)v141 + 1) = *((void *)v142 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v143 = v34[8];
  uint64_t v144 = &v32[v143];
  char v145 = &v33[v143];
  *(void *)uint64_t v144 = *(void *)v145;
  *((void *)v144 + 1) = *((void *)v145 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v146 = v34[9];
  char v147 = &v32[v146];
  __n128 v148 = &v33[v146];
  *(void *)char v147 = *(void *)v148;
  *((void *)v147 + 1) = *((void *)v148 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v56 = *(int *)(v30 + 20);
  unint64_t v57 = (uint64_t *)((char *)a1 + v56);
  uint64_t v58 = (uint64_t *)((char *)a2 + v56);
  uint64_t v59 = *(uint64_t *)((char *)a2 + v56);
  unint64_t v60 = *(uint64_t *)((char *)a2 + v56 + 8);
  sub_10006D0EC(v59, v60);
  uint64_t v61 = *v57;
  unint64_t v62 = v57[1];
  *unint64_t v57 = v59;
  v57[1] = v60;
  sub_10006D144(v61, v62);
  uint64_t v63 = v58[2];
  unint64_t v64 = v58[3];
  sub_10006D0EC(v63, v64);
  uint64_t v65 = v57[2];
  unint64_t v66 = v57[3];
  v57[2] = v63;
  unint64_t v57[3] = v64;
  sub_10006D144(v65, v66);
  uint64_t v67 = v58[4];
  unint64_t v68 = v58[5];
  sub_10006D0EC(v67, v68);
  uint64_t v69 = v57[4];
  unint64_t v70 = v57[5];
  v57[4] = v67;
  uint64_t v57[5] = v68;
  sub_10006D144(v69, v70);
  uint64_t v71 = v58[6];
  unint64_t v72 = v58[7];
  sub_10006D0EC(v71, v72);
  uint64_t v73 = v57[6];
  unint64_t v74 = v57[7];
  v57[6] = v71;
  v57[7] = v72;
  sub_10006D144(v73, v74);
  uint64_t v75 = *(int *)(v178 + 32);
  uint64_t v76 = (char *)v57 + v75;
  char v77 = (char *)v58 + v75;
  int v78 = v174((char *)v57 + v75, 1, v25);
  int v79 = v174(v77, 1, v25);
  if (v78)
  {
    if (!v79)
    {
      (*(void (**)(char *, char *, uint64_t))(v177 + 16))(v76, v77, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v177 + 56))(v76, 0, 1, v25);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v79)
  {
    (*(void (**)(char *, uint64_t))(v177 + 8))(v76, v25);
LABEL_18:
    uint64_t v80 = sub_10006C51C(&qword_1004564D0);
    memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v177 + 24))(v76, v77, v25);
LABEL_19:
  uint64_t v81 = *(int *)(v178 + 36);
  uint64_t v82 = (uint64_t *)((char *)v57 + v81);
  uint64_t v83 = (char *)v58 + v81;
  uint64_t v84 = (char *)v57 + v81;
  uint64_t v85 = v176;
  int v86 = v176(v84, 1, v34);
  int v87 = v176(v83, 1, v34);
  if (v86)
  {
    uint64_t v88 = v30;
    if (!v87)
    {
      void *v82 = *(void *)v83;
      v82[1] = *((void *)v83 + 1);
      uint64_t v89 = v34[5];
      uint64_t v90 = (char *)v82 + v89;
      uint64_t v91 = &v83[v89];
      uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v177 + 16);
      swift_bridgeObjectRetain();
      v92(v90, v91, v175);
      uint64_t v93 = v34[6];
      unint64_t v94 = (void *)((char *)v82 + v93);
      uint64_t v95 = &v83[v93];
      *unint64_t v94 = *(void *)v95;
      v94[1] = *((void *)v95 + 1);
      uint64_t v96 = v34[7];
      unint64_t v97 = (void *)((char *)v82 + v96);
      uint64_t v98 = &v83[v96];
      *unint64_t v97 = *(void *)v98;
      v97[1] = *((void *)v98 + 1);
      uint64_t v99 = v34[8];
      uint64_t v100 = (void *)((char *)v82 + v99);
      uint64_t v101 = &v83[v99];
      *uint64_t v100 = *(void *)v101;
      v100[1] = *((void *)v101 + 1);
      uint64_t v102 = v34[9];
      uint64_t v103 = (void *)((char *)v82 + v102);
      uint64_t v104 = &v83[v102];
      *uint64_t v103 = *(void *)v104;
      v103[1] = *((void *)v104 + 1);
      uint64_t v105 = *(void (**)(void *, void, uint64_t, int *))(v173 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v105(v82, 0, 1, v34);
      uint64_t v85 = v176;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  uint64_t v88 = v30;
  if (v87)
  {
    sub_1001A691C((uint64_t)v82, type metadata accessor for CreationMetadata);
LABEL_24:
    uint64_t v106 = sub_10006C51C(&qword_1004572C0);
    memcpy(v82, v83, *(void *)(*(void *)(v106 - 8) + 64));
    goto LABEL_25;
  }
  void *v82 = *(void *)v83;
  v82[1] = *((void *)v83 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v177 + 24))((char *)v82 + v34[5], &v83[v34[5]], v175);
  uint64_t v149 = v34[6];
  uint64_t v150 = (void *)((char *)v82 + v149);
  uint64_t v151 = &v83[v149];
  *uint64_t v150 = *(void *)v151;
  v150[1] = *((void *)v151 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v152 = v34[7];
  uint64_t v153 = (void *)((char *)v82 + v152);
  uint64_t v154 = &v83[v152];
  *uint64_t v153 = *(void *)v154;
  v153[1] = *((void *)v154 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v155 = v34[8];
  uint64_t v156 = (void *)((char *)v82 + v155);
  uint64_t v157 = &v83[v155];
  *uint64_t v156 = *(void *)v157;
  v156[1] = *((void *)v157 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v158 = v34[9];
  uint64_t v159 = (void *)((char *)v82 + v158);
  id v160 = &v83[v158];
  *uint64_t v159 = *(void *)v160;
  v159[1] = *((void *)v160 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v107 = *(int *)(v88 + 24);
  __n128 v108 = (uint64_t *)((char *)a1 + v107);
  uint64_t v109 = (uint64_t *)((char *)a2 + v107);
  uint64_t v110 = *v109;
  unint64_t v111 = v109[1];
  sub_10006D0EC(*v109, v111);
  uint64_t v112 = *v108;
  unint64_t v113 = v108[1];
  *__n128 v108 = v110;
  v108[1] = v111;
  sub_10006D144(v112, v113);
  uint64_t v114 = *(int *)(v88 + 28);
  uint64_t v115 = (char *)a1 + v114;
  uint64_t v116 = (char *)a2 + v114;
  LODWORD(v110) = v85((char *)a1 + v114, 1, v34);
  int v117 = v85(v116, 1, v34);
  if (!v110)
  {
    if (!v117)
    {
      *(void *)uint64_t v115 = *(void *)v116;
      *((void *)v115 + 1) = *((void *)v116 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v177 + 24))(&v115[v34[5]], &v116[v34[5]], v175);
      uint64_t v161 = v34[6];
      uint64_t v162 = &v115[v161];
      uint64_t v163 = &v116[v161];
      *(void *)uint64_t v162 = *(void *)v163;
      *((void *)v162 + 1) = *((void *)v163 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v164 = v34[7];
      uint64_t v165 = &v115[v164];
      uint64_t v166 = &v116[v164];
      *(void *)uint64_t v165 = *(void *)v166;
      *((void *)v165 + 1) = *((void *)v166 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v167 = v34[8];
      uint64_t v168 = &v115[v167];
      uint64_t v169 = &v116[v167];
      *(void *)uint64_t v168 = *(void *)v169;
      *((void *)v168 + 1) = *((void *)v169 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v170 = v34[9];
      uint64_t v171 = &v115[v170];
      uint64_t v172 = &v116[v170];
      *(void *)uint64_t v171 = *(void *)v172;
      *((void *)v171 + 1) = *((void *)v172 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001A691C((uint64_t)v115, type metadata accessor for CreationMetadata);
    goto LABEL_30;
  }
  if (v117)
  {
LABEL_30:
    uint64_t v135 = sub_10006C51C(&qword_1004572C0);
    memcpy(v115, v116, *(void *)(*(void *)(v135 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v115 = *(void *)v116;
  *((void *)v115 + 1) = *((void *)v116 + 1);
  uint64_t v118 = v34[5];
  uint64_t v119 = &v115[v118];
  uint64_t v120 = &v116[v118];
  uint64_t v121 = *(void (**)(char *, char *, uint64_t))(v177 + 16);
  swift_bridgeObjectRetain();
  v121(v119, v120, v175);
  uint64_t v122 = v34[6];
  int v123 = &v115[v122];
  uint64_t v124 = &v116[v122];
  *(void *)int v123 = *(void *)v124;
  *((void *)v123 + 1) = *((void *)v124 + 1);
  uint64_t v125 = v34[7];
  uint64_t v126 = &v115[v125];
  uint64_t v127 = &v116[v125];
  *(void *)uint64_t v126 = *(void *)v127;
  *((void *)v126 + 1) = *((void *)v127 + 1);
  uint64_t v128 = v34[8];
  uint64_t v129 = &v115[v128];
  uint64_t v130 = &v116[v128];
  *(void *)uint64_t v129 = *(void *)v130;
  *((void *)v129 + 1) = *((void *)v130 + 1);
  uint64_t v131 = v34[9];
  uint64_t v132 = &v115[v131];
  uint64_t v133 = &v116[v131];
  *(void *)uint64_t v132 = *(void *)v133;
  *((void *)v132 + 1) = *((void *)v133 + 1);
  long long v134 = *(void (**)(char *, void, uint64_t, int *))(v173 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v134(v115, 0, 1, v34);
  return a1;
}

_OWORD *sub_1001A166C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v8 = *(int *)(v7 + 32);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v42(v10, 1, v11))
  {
    uint64_t v13 = sub_10006C51C(&qword_1004564D0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(v7 + 36);
  unint64_t v15 = (_OWORD *)((char *)a1 + v14);
  uint64_t v16 = (_OWORD *)((char *)a2 + v14);
  unint64_t v17 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v18 = *((void *)v17 - 1);
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, int *))(v18 + 48);
  uint64_t v44 = v18;
  uint64_t v45 = v12;
  if (v43((char *)v16, 1, v17))
  {
    uint64_t v19 = sub_10006C51C(&qword_1004572C0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *unint64_t v15 = *v16;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v15 + v17[5], (char *)v16 + v17[5], v11);
    *(_OWORD *)((char *)v15 + v17[6]) = *(_OWORD *)((char *)v16 + v17[6]);
    *(_OWORD *)((char *)v15 + v17[7]) = *(_OWORD *)((char *)v16 + v17[7]);
    *(_OWORD *)((char *)v15 + v17[8]) = *(_OWORD *)((char *)v16 + v17[8]);
    *(_OWORD *)((char *)v15 + v17[9]) = *(_OWORD *)((char *)v16 + v17[9]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = *(int *)(a3 + 20);
  unint64_t v21 = (_OWORD *)((char *)a1 + v20);
  uint64_t v22 = (char *)a2 + v20;
  long long v23 = *(_OWORD *)((char *)a2 + v20 + 16);
  *unint64_t v21 = *(_OWORD *)((char *)a2 + v20);
  v21[1] = v23;
  long long v24 = *(_OWORD *)((char *)a2 + v20 + 48);
  void v21[2] = *(_OWORD *)((char *)a2 + v20 + 32);
  v21[3] = v24;
  uint64_t v25 = *(int *)(v7 + 32);
  uint64_t v26 = (char *)v21 + v25;
  int v27 = &v22[v25];
  if (v42(&v22[v25], 1, v11))
  {
    uint64_t v28 = sub_10006C51C(&qword_1004564D0);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v26, v27, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v26, 0, 1, v11);
  }
  uint64_t v29 = *(int *)(v7 + 36);
  uint64_t v30 = (_OWORD *)((char *)v21 + v29);
  uint64_t v31 = &v22[v29];
  if (v43(&v22[v29], 1, v17))
  {
    uint64_t v32 = sub_10006C51C(&qword_1004572C0);
    memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    uint64_t v34 = v45;
    uint64_t v33 = a3;
    uint64_t v35 = v44;
  }
  else
  {
    *uint64_t v30 = *(_OWORD *)v31;
    uint64_t v34 = v45;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))((char *)v30 + v17[5], &v31[v17[5]], v11);
    *(_OWORD *)((char *)v30 + v17[6]) = *(_OWORD *)&v31[v17[6]];
    *(_OWORD *)((char *)v30 + v17[7]) = *(_OWORD *)&v31[v17[7]];
    *(_OWORD *)((char *)v30 + v17[8]) = *(_OWORD *)&v31[v17[8]];
    *(_OWORD *)((char *)v30 + v17[9]) = *(_OWORD *)&v31[v17[9]];
    uint64_t v35 = v44;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v44 + 56))(v30, 0, 1, v17);
    uint64_t v33 = a3;
  }
  uint64_t v36 = *(int *)(v33 + 24);
  uint64_t v37 = *(int *)(v33 + 28);
  *(_OWORD *)((char *)a1 + v36) = *(_OWORD *)((char *)a2 + v36);
  uint64_t v38 = (_OWORD *)((char *)a1 + v37);
  uint64_t v39 = (_OWORD *)((char *)a2 + v37);
  if (v43((char *)v39, 1, v17))
  {
    uint64_t v40 = sub_10006C51C(&qword_1004572C0);
    memcpy(v38, v39, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    *uint64_t v38 = *v39;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))((char *)v38 + v17[5], (char *)v39 + v17[5], v11);
    *(_OWORD *)((char *)v38 + v17[6]) = *(_OWORD *)((char *)v39 + v17[6]);
    *(_OWORD *)((char *)v38 + v17[7]) = *(_OWORD *)((char *)v39 + v17[7]);
    *(_OWORD *)((char *)v38 + v17[8]) = *(_OWORD *)((char *)v39 + v17[8]);
    *(_OWORD *)((char *)v38 + v17[9]) = *(_OWORD *)((char *)v39 + v17[9]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v35 + 56))(v38, 0, 1, v17);
  }
  return a1;
}

uint64_t *sub_1001A1B78(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10006D144(v5, v6);
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10006D144(v7, v8);
  uint64_t v9 = a1[4];
  unint64_t v10 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10006D144(v9, v10);
  uint64_t v11 = a1[6];
  unint64_t v12 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10006D144(v11, v12);
  uint64_t v136 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v13 = *(int *)(v136 + 32);
  uint64_t v14 = (char *)a1 + v13;
  unint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v135 = *(void *)(v16 - 8);
  unint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v135 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  uint64_t v134 = v16;
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v135 + 8))(v14, v16);
LABEL_6:
    uint64_t v20 = sub_10006C51C(&qword_1004564D0);
    memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v135 + 40))(v14, v15, v16);
LABEL_7:
  uint64_t v21 = *(int *)(v136 + 36);
  uint64_t v22 = (char *)a1 + v21;
  long long v23 = (char *)a2 + v21;
  long long v24 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v131 = *((void *)v24 - 1);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, int *))(v131 + 48);
  int v26 = v25(v22, 1, v24);
  uint64_t v132 = v25;
  int v27 = v25(v23, 1, v24);
  if (v26)
  {
    if (!v27)
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
      uint64_t v28 = v134;
      (*(void (**)(char *, char *, uint64_t))(v135 + 32))(&v22[v24[5]], &v23[v24[5]], v134);
      *(_OWORD *)&v22[v24[6]] = *(_OWORD *)&v23[v24[6]];
      *(_OWORD *)&v22[v24[7]] = *(_OWORD *)&v23[v24[7]];
      *(_OWORD *)&v22[v24[8]] = *(_OWORD *)&v23[v24[8]];
      *(_OWORD *)&v22[v24[9]] = *(_OWORD *)&v23[v24[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v131 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    sub_1001A691C((uint64_t)v22, type metadata accessor for CreationMetadata);
LABEL_12:
    uint64_t v29 = sub_10006C51C(&qword_1004572C0);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v28 = v134;
    goto LABEL_13;
  }
  uint64_t v51 = *((void *)v23 + 1);
  *(void *)uint64_t v22 = *(void *)v23;
  *((void *)v22 + 1) = v51;
  swift_bridgeObjectRelease();
  uint64_t v28 = v134;
  (*(void (**)(char *, char *, uint64_t))(v135 + 40))(&v22[v24[5]], &v23[v24[5]], v134);
  uint64_t v52 = v24[6];
  unint64_t v53 = &v22[v52];
  uint64_t v54 = &v23[v52];
  uint64_t v56 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  *(void *)unint64_t v53 = v56;
  *((void *)v53 + 1) = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = v24[7];
  uint64_t v58 = &v22[v57];
  uint64_t v59 = &v23[v57];
  uint64_t v61 = *(void *)v59;
  uint64_t v60 = *((void *)v59 + 1);
  *(void *)uint64_t v58 = v61;
  *((void *)v58 + 1) = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = v24[8];
  uint64_t v63 = &v22[v62];
  unint64_t v64 = &v23[v62];
  uint64_t v66 = *(void *)v64;
  uint64_t v65 = *((void *)v64 + 1);
  *(void *)uint64_t v63 = v66;
  *((void *)v63 + 1) = v65;
  swift_bridgeObjectRelease();
  uint64_t v67 = v24[9];
  unint64_t v68 = &v22[v67];
  uint64_t v69 = &v23[v67];
  uint64_t v71 = *(void *)v69;
  uint64_t v70 = *((void *)v69 + 1);
  *(void *)unint64_t v68 = v71;
  *((void *)v68 + 1) = v70;
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v30 = *(int *)(a3 + 20);
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (_OWORD *)((char *)a2 + v30);
  uint64_t v33 = *(uint64_t *)((char *)a1 + v30);
  unint64_t v34 = *(uint64_t *)((char *)a1 + v30 + 8);
  *(_OWORD *)((char *)a1 + v30) = *(_OWORD *)((char *)a2 + v30);
  sub_10006D144(v33, v34);
  uint64_t v35 = v31[2];
  unint64_t v36 = v31[3];
  *((_OWORD *)v31 + 1) = v32[1];
  sub_10006D144(v35, v36);
  uint64_t v37 = v31[4];
  unint64_t v38 = v31[5];
  *((_OWORD *)v31 + 2) = v32[2];
  sub_10006D144(v37, v38);
  uint64_t v39 = v31[6];
  unint64_t v40 = v31[7];
  *((_OWORD *)v31 + 3) = v32[3];
  sub_10006D144(v39, v40);
  uint64_t v41 = *(int *)(v136 + 32);
  uint64_t v42 = (char *)v31 + v41;
  uint64_t v43 = (char *)v32 + v41;
  int v44 = v17((char *)v31 + v41, 1, v28);
  uint64_t v45 = v28;
  int v46 = v44;
  int v47 = v17(v43, 1, v45);
  if (v46)
  {
    if (v47)
    {
      uint64_t v48 = sub_10006C51C(&qword_1004564D0);
      memcpy(v42, v43, *(void *)(*(void *)(v48 - 8) + 64));
      uint64_t v49 = v134;
    }
    else
    {
      uint64_t v49 = v134;
      (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v42, v43, v134);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(v42, 0, 1, v134);
    }
  }
  else
  {
    uint64_t v49 = v134;
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v135 + 8))(v42, v134);
      uint64_t v50 = sub_10006C51C(&qword_1004564D0);
      memcpy(v42, v43, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v135 + 40))(v42, v43, v134);
    }
  }
  uint64_t v72 = *(int *)(v136 + 36);
  uint64_t v73 = (char *)v31 + v72;
  unint64_t v74 = (char *)v32 + v72;
  int v75 = v132((char *)v31 + v72, 1, v24);
  int v76 = v132(v74, 1, v24);
  if (v75)
  {
    uint64_t v77 = a3;
    if (!v76)
    {
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      (*(void (**)(char *, char *, uint64_t))(v135 + 32))(&v73[v24[5]], &v74[v24[5]], v49);
      *(_OWORD *)&v73[v24[6]] = *(_OWORD *)&v74[v24[6]];
      *(_OWORD *)&v73[v24[7]] = *(_OWORD *)&v74[v24[7]];
      *(_OWORD *)&v73[v24[8]] = *(_OWORD *)&v74[v24[8]];
      *(_OWORD *)&v73[v24[9]] = *(_OWORD *)&v74[v24[9]];
      (*(void (**)(char *, void, uint64_t, int *))(v131 + 56))(v73, 0, 1, v24);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v77 = a3;
  if (v76)
  {
    sub_1001A691C((uint64_t)v73, type metadata accessor for CreationMetadata);
LABEL_27:
    uint64_t v78 = sub_10006C51C(&qword_1004572C0);
    memcpy(v73, v74, *(void *)(*(void *)(v78 - 8) + 64));
    goto LABEL_28;
  }
  uint64_t v89 = *((void *)v74 + 1);
  *(void *)uint64_t v73 = *(void *)v74;
  *((void *)v73 + 1) = v89;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v135 + 40))(&v73[v24[5]], &v74[v24[5]], v49);
  uint64_t v90 = v24[6];
  uint64_t v91 = &v73[v90];
  uint64_t v92 = &v74[v90];
  uint64_t v94 = *(void *)v92;
  uint64_t v93 = *((void *)v92 + 1);
  *(void *)uint64_t v91 = v94;
  *((void *)v91 + 1) = v93;
  swift_bridgeObjectRelease();
  uint64_t v95 = v24[7];
  uint64_t v96 = &v73[v95];
  unint64_t v97 = &v74[v95];
  uint64_t v99 = *(void *)v97;
  uint64_t v98 = *((void *)v97 + 1);
  *(void *)uint64_t v96 = v99;
  *((void *)v96 + 1) = v98;
  swift_bridgeObjectRelease();
  uint64_t v100 = v24[8];
  uint64_t v101 = &v73[v100];
  uint64_t v102 = &v74[v100];
  uint64_t v104 = *(void *)v102;
  uint64_t v103 = *((void *)v102 + 1);
  *(void *)uint64_t v101 = v104;
  *((void *)v101 + 1) = v103;
  swift_bridgeObjectRelease();
  uint64_t v105 = v24[9];
  uint64_t v106 = &v73[v105];
  uint64_t v107 = &v74[v105];
  uint64_t v109 = *(void *)v107;
  uint64_t v108 = *((void *)v107 + 1);
  *(void *)uint64_t v106 = v109;
  *((void *)v106 + 1) = v108;
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v79 = *(int *)(v77 + 24);
  uint64_t v80 = *(uint64_t *)((char *)a1 + v79);
  unint64_t v81 = *(uint64_t *)((char *)a1 + v79 + 8);
  *(_OWORD *)((char *)a1 + v79) = *(_OWORD *)((char *)a2 + v79);
  sub_10006D144(v80, v81);
  uint64_t v82 = *(int *)(v77 + 28);
  uint64_t v83 = (char *)a1 + v82;
  uint64_t v84 = (char *)a2 + v82;
  int v85 = v132((char *)a1 + v82, 1, v24);
  int v86 = v132(v84, 1, v24);
  if (!v85)
  {
    if (!v86)
    {
      uint64_t v110 = *((void *)v84 + 1);
      *(void *)uint64_t v83 = *(void *)v84;
      *((void *)v83 + 1) = v110;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v135 + 40))(&v83[v24[5]], &v84[v24[5]], v49);
      uint64_t v111 = v24[6];
      uint64_t v112 = &v83[v111];
      unint64_t v113 = &v84[v111];
      uint64_t v115 = *(void *)v113;
      uint64_t v114 = *((void *)v113 + 1);
      *(void *)uint64_t v112 = v115;
      *((void *)v112 + 1) = v114;
      swift_bridgeObjectRelease();
      uint64_t v116 = v24[7];
      int v117 = &v83[v116];
      uint64_t v118 = &v84[v116];
      uint64_t v120 = *(void *)v118;
      uint64_t v119 = *((void *)v118 + 1);
      *(void *)int v117 = v120;
      *((void *)v117 + 1) = v119;
      swift_bridgeObjectRelease();
      uint64_t v121 = v24[8];
      uint64_t v122 = &v83[v121];
      int v123 = &v84[v121];
      uint64_t v125 = *(void *)v123;
      uint64_t v124 = *((void *)v123 + 1);
      *(void *)uint64_t v122 = v125;
      *((void *)v122 + 1) = v124;
      swift_bridgeObjectRelease();
      uint64_t v126 = v24[9];
      uint64_t v127 = &v83[v126];
      uint64_t v128 = &v84[v126];
      uint64_t v130 = *(void *)v128;
      uint64_t v129 = *((void *)v128 + 1);
      *(void *)uint64_t v127 = v130;
      *((void *)v127 + 1) = v129;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001A691C((uint64_t)v83, type metadata accessor for CreationMetadata);
    goto LABEL_33;
  }
  if (v86)
  {
LABEL_33:
    uint64_t v87 = sub_10006C51C(&qword_1004572C0);
    memcpy(v83, v84, *(void *)(*(void *)(v87 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
  (*(void (**)(char *, char *, uint64_t))(v135 + 32))(&v83[v24[5]], &v84[v24[5]], v49);
  *(_OWORD *)&v83[v24[6]] = *(_OWORD *)&v84[v24[6]];
  *(_OWORD *)&v83[v24[7]] = *(_OWORD *)&v84[v24[7]];
  *(_OWORD *)&v83[v24[8]] = *(_OWORD *)&v84[v24[8]];
  *(_OWORD *)&v83[v24[9]] = *(_OWORD *)&v84[v24[9]];
  (*(void (**)(char *, void, uint64_t, int *))(v131 + 56))(v83, 0, 1, v24);
  return a1;
}

uint64_t sub_1001A24BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A24D0);
}

uint64_t sub_1001A24D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 12)
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = sub_10006C51C(&qword_1004572C0);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 28);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_1001A2610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A2624);
}

uint64_t sub_1001A2624(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 12)
  {
    uint64_t v11 = (void *)(a1 + *(int *)(a4 + 24));
    *uint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v12 = sub_10006C51C(&qword_1004572C0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 28);
    return v13(v15, a2, a2, v14);
  }
  return result;
}

uint64_t type metadata accessor for SESTLKShareData(uint64_t a1)
{
  return sub_100087C90(a1, qword_100457458);
}

void sub_1001A2780()
{
  type metadata accessor for SESPeerIdentityData(319);
  if (v0 <= 0x3F)
  {
    sub_1001A3ECC(319, (unint64_t *)&qword_100457330, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_1001A2870(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10006D0EC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_10006D0EC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_10006D0EC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_10006D0EC(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)a1 + v15;
    unint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10006C51C(&qword_1004564D0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v22 = *(int *)(a3 + 36);
    long long v23 = (uint64_t *)((char *)a1 + v22);
    long long v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = (int *)type metadata accessor for CreationMetadata(0);
    uint64_t v26 = *((void *)v25 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
    {
      uint64_t v27 = sub_10006C51C(&qword_1004572C0);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      uint64_t v28 = v24[1];
      void *v23 = *v24;
      v23[1] = v28;
      uint64_t v29 = v25[5];
      uint64_t v30 = (char *)v23 + v29;
      uint64_t v31 = (char *)v24 + v29;
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
      swift_bridgeObjectRetain();
      v32(v30, v31, v18);
      uint64_t v33 = v25[6];
      unint64_t v34 = (void *)((char *)v23 + v33);
      uint64_t v35 = (void *)((char *)v24 + v33);
      uint64_t v36 = v35[1];
      *unint64_t v34 = *v35;
      v34[1] = v36;
      uint64_t v37 = v25[7];
      unint64_t v38 = (void *)((char *)v23 + v37);
      uint64_t v39 = (void *)((char *)v24 + v37);
      uint64_t v40 = v39[1];
      *unint64_t v38 = *v39;
      v38[1] = v40;
      uint64_t v41 = v25[8];
      uint64_t v42 = (void *)((char *)v23 + v41);
      uint64_t v43 = (void *)((char *)v24 + v41);
      uint64_t v44 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v44;
      uint64_t v45 = v25[9];
      int v46 = (void *)((char *)v23 + v45);
      int v47 = (void *)((char *)v24 + v45);
      uint64_t v48 = v47[1];
      *int v46 = *v47;
      v46[1] = v48;
      uint64_t v49 = *(void (**)(void *, void, uint64_t, int *))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49(v23, 0, 1, v25);
    }
  }
  return a1;
}

uint64_t sub_1001A2BA4(uint64_t a1, uint64_t a2)
{
  sub_10006D144(*(void *)a1, *(void *)(a1 + 8));
  sub_10006D144(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10006D144(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10006D144(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 36);
  uint64_t v8 = type metadata accessor for CreationMetadata(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7 + *(int *)(v8 + 20), v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1001A2D4C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10006D0EC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_10006D0EC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_10006D0EC(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_10006C51C(&qword_1004564D0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v20 = *(int *)(a3 + 36);
  uint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  long long v23 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v24 = *((void *)v23 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = sub_10006C51C(&qword_1004572C0);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v26;
    uint64_t v27 = v23[5];
    uint64_t v28 = (char *)v21 + v27;
    uint64_t v29 = (char *)v22 + v27;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    swift_bridgeObjectRetain();
    v30(v28, v29, v17);
    uint64_t v31 = v23[6];
    uint64_t v32 = (void *)((char *)v21 + v31);
    uint64_t v33 = (void *)((char *)v22 + v31);
    uint64_t v34 = v33[1];
    *uint64_t v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = v23[7];
    uint64_t v36 = (void *)((char *)v21 + v35);
    uint64_t v37 = (void *)((char *)v22 + v35);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = v23[8];
    uint64_t v40 = (void *)((char *)v21 + v39);
    uint64_t v41 = (void *)((char *)v22 + v39);
    uint64_t v42 = v41[1];
    *uint64_t v40 = *v41;
    v40[1] = v42;
    uint64_t v43 = v23[9];
    uint64_t v44 = (void *)((char *)v21 + v43);
    uint64_t v45 = (void *)((char *)v22 + v43);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    int v47 = *(void (**)(void *, void, uint64_t, int *))(v24 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v47(v21, 0, 1, v23);
  }
  return a1;
}

uint64_t *sub_1001A3030(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10006D0EC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10006D144(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_10006D0EC(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10006D144(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_10006D0EC(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10006D144(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_10006D0EC(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10006D144(v20, v21);
  uint64_t v22 = *(int *)(a3 + 32);
  long long v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_6:
    uint64_t v30 = sub_10006C51C(&qword_1004564D0);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 24))(v23, v24, v25);
LABEL_7:
  uint64_t v31 = *(int *)(a3 + 36);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v35 = *((void *)v34 - 1);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, int *))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = *((void *)v33 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v26 + 24))(&v32[v34[5]], &v33[v34[5]], v25);
      uint64_t v58 = v34[6];
      uint64_t v59 = &v32[v58];
      uint64_t v60 = &v33[v58];
      *(void *)uint64_t v59 = *(void *)v60;
      *((void *)v59 + 1) = *((void *)v60 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v61 = v34[7];
      uint64_t v62 = &v32[v61];
      uint64_t v63 = &v33[v61];
      *(void *)uint64_t v62 = *(void *)v63;
      *((void *)v62 + 1) = *((void *)v63 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v64 = v34[8];
      uint64_t v65 = &v32[v64];
      uint64_t v66 = &v33[v64];
      *(void *)uint64_t v65 = *(void *)v66;
      *((void *)v65 + 1) = *((void *)v66 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v67 = v34[9];
      unint64_t v68 = &v32[v67];
      uint64_t v69 = &v33[v67];
      *(void *)unint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001A691C((uint64_t)v32, type metadata accessor for CreationMetadata);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    uint64_t v56 = sub_10006C51C(&qword_1004572C0);
    memcpy(v32, v33, *(void *)(*(void *)(v56 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  uint64_t v39 = v34[5];
  uint64_t v40 = &v32[v39];
  uint64_t v41 = &v33[v39];
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  swift_bridgeObjectRetain();
  v42(v40, v41, v25);
  uint64_t v43 = v34[6];
  uint64_t v44 = &v32[v43];
  uint64_t v45 = &v33[v43];
  *(void *)uint64_t v44 = *(void *)v45;
  *((void *)v44 + 1) = *((void *)v45 + 1);
  uint64_t v46 = v34[7];
  int v47 = &v32[v46];
  uint64_t v48 = &v33[v46];
  *(void *)int v47 = *(void *)v48;
  *((void *)v47 + 1) = *((void *)v48 + 1);
  uint64_t v49 = v34[8];
  uint64_t v50 = &v32[v49];
  uint64_t v51 = &v33[v49];
  *(void *)uint64_t v50 = *(void *)v51;
  *((void *)v50 + 1) = *((void *)v51 + 1);
  uint64_t v52 = v34[9];
  unint64_t v53 = &v32[v52];
  uint64_t v54 = &v33[v52];
  *(void *)unint64_t v53 = *(void *)v54;
  *((void *)v53 + 1) = *((void *)v54 + 1);
  uint64_t v55 = *(void (**)(char *, void, uint64_t, int *))(v35 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v55(v32, 0, 1, v34);
  return a1;
}

_OWORD *sub_1001A34F0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10006C51C(&qword_1004564D0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = *(int *)(a3 + 36);
  unint64_t v15 = (_OWORD *)((char *)a1 + v14);
  uint64_t v16 = (_OWORD *)((char *)a2 + v14);
  unint64_t v17 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v18 = *((void *)v17 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = sub_10006C51C(&qword_1004572C0);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *unint64_t v15 = *v16;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v15 + v17[5], (char *)v16 + v17[5], v11);
    *(_OWORD *)((char *)v15 + v17[6]) = *(_OWORD *)((char *)v16 + v17[6]);
    *(_OWORD *)((char *)v15 + v17[7]) = *(_OWORD *)((char *)v16 + v17[7]);
    *(_OWORD *)((char *)v15 + v17[8]) = *(_OWORD *)((char *)v16 + v17[8]);
    *(_OWORD *)((char *)v15 + v17[9]) = *(_OWORD *)((char *)v16 + v17[9]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t *sub_1001A3744(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10006D144(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10006D144(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10006D144(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10006D144(v12, v13);
  uint64_t v14 = *(int *)(a3 + 32);
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    uint64_t v22 = sub_10006C51C(&qword_1004564D0);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = *(int *)(a3 + 36);
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v27 = *((void *)v26 - 1);
  int v28 = *(uint64_t (**)(char *, uint64_t, int *))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      uint64_t v33 = *((void *)v25 + 1);
      *(void *)uint64_t v24 = *(void *)v25;
      *((void *)v24 + 1) = v33;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(&v24[v26[5]], &v25[v26[5]], v17);
      uint64_t v34 = v26[6];
      uint64_t v35 = &v24[v34];
      uint64_t v36 = &v25[v34];
      uint64_t v38 = *(void *)v36;
      uint64_t v37 = *((void *)v36 + 1);
      *(void *)uint64_t v35 = v38;
      *((void *)v35 + 1) = v37;
      swift_bridgeObjectRelease();
      uint64_t v39 = v26[7];
      uint64_t v40 = &v24[v39];
      uint64_t v41 = &v25[v39];
      uint64_t v43 = *(void *)v41;
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v42;
      swift_bridgeObjectRelease();
      uint64_t v44 = v26[8];
      uint64_t v45 = &v24[v44];
      uint64_t v46 = &v25[v44];
      uint64_t v48 = *(void *)v46;
      uint64_t v47 = *((void *)v46 + 1);
      *(void *)uint64_t v45 = v48;
      *((void *)v45 + 1) = v47;
      swift_bridgeObjectRelease();
      uint64_t v49 = v26[9];
      uint64_t v50 = &v24[v49];
      uint64_t v51 = &v25[v49];
      uint64_t v53 = *(void *)v51;
      uint64_t v52 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = v53;
      *((void *)v50 + 1) = v52;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001A691C((uint64_t)v24, type metadata accessor for CreationMetadata);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    uint64_t v31 = sub_10006C51C(&qword_1004572C0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(&v24[v26[5]], &v25[v26[5]], v17);
  *(_OWORD *)&v24[v26[6]] = *(_OWORD *)&v25[v26[6]];
  *(_OWORD *)&v24[v26[7]] = *(_OWORD *)&v25[v26[7]];
  *(_OWORD *)&v24[v26[8]] = *(_OWORD *)&v25[v26[8]];
  *(_OWORD *)&v24[v26[9]] = *(_OWORD *)&v25[v26[9]];
  (*(void (**)(char *, void, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

uint64_t sub_1001A3B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A3B2C);
}

uint64_t sub_1001A3B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_10006C51C(&qword_1004564D0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10006C51C(&qword_1004572C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1001A3C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A3C80);
}

void *sub_1001A3C80(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = sub_10006C51C(&qword_1004564D0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10006C51C(&qword_1004572C0);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 36);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1001A3DBC()
{
  sub_1001A3ECC(319, (unint64_t *)&unk_100457500, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    sub_1001A3ECC(319, (unint64_t *)&qword_100457330, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1001A3ECC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1001A3F20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = sub_10006C51C(&qword_1004575E0);
  __chkstk_darwin(v4 - 8, v5);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  uint64_t v8 = type metadata accessor for SESTLKRecordData(0);
  id v9 = [v1 recordData];
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  sub_1001A68D4(&qword_1004575E8, (void (*)(uint64_t))type metadata accessor for SESTLKRecordData);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  if (v2)
  {
    swift_errorRelease();
    sub_10006D144(v10, v12);
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    sub_10008E734((uint64_t)v7, &qword_1004575E0);
    id v13 = [v1 recordData];
    uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;

    uint64_t v17 = (char *)a1 + *(int *)(v8 + 20);
    uint64_t v18 = type metadata accessor for CreationMetadata(0);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    *a1 = v14;
    a1[1] = v16;
  }
  else
  {
    sub_10006D144(v10, v12);
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
    return sub_1001A6CDC((uint64_t)v7, (uint64_t)a1, type metadata accessor for SESTLKRecordData);
  }
  return result;
}

void sub_1001A41BC(uint64_t *a1@<X8>)
{
  *a1 = sub_1001A5E74(0x726556646C697542, 0xEC0000006E6F6973, 3227953);
  a1[1] = v2;
  uint64_t v3 = (int *)type metadata accessor for CreationMetadata(0);
  static Date.now.getter();
  uint64_t v4 = sub_1001A5E74(0x536C65646F4D5748, 0xEA00000000007274, 0x6E776F6E6B6E553CLL);
  uint64_t v5 = (uint64_t *)((char *)a1 + v3[6]);
  *uint64_t v5 = v4;
  v5[1] = v6;
  uint64_t v7 = sub_1001A5E74(0x754E6C6169726553, 0xEC0000007265626DLL, 0x6E776F6E6B6E553CLL);
  uint64_t v8 = (uint64_t *)((char *)a1 + v3[7]);
  *uint64_t v8 = v7;
  v8[1] = v9;
  if (!os_variant_has_internal_diagnostics()) {
    goto LABEL_7;
  }
  id v10 = [self defaultStore];
  if (!v10) {
    goto LABEL_7;
  }
  unint64_t v11 = v10;
  id v12 = [v10 aa_primaryAppleAccount];
  if (!v12)
  {

LABEL_7:
    uint64_t v19 = (uint64_t *)((char *)a1 + v3[8]);
    *uint64_t v19 = 0;
    v19[1] = 0;
    uint64_t v20 = (uint64_t *)((char *)a1 + v3[9]);
    *uint64_t v20 = 0;
    v20[1] = 0;
    return;
  }
  id v13 = v12;
  id v14 = [v12 username];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  int v21 = (uint64_t *)((char *)a1 + v3[8]);
  *int v21 = v16;
  v21[1] = v18;
  id v22 = [v13 aa_altDSID];
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;
  }
  else
  {

    uint64_t v24 = 0;
    uint64_t v26 = 0;
  }
  uint64_t v27 = (uint64_t *)((char *)a1 + v3[9]);
  *uint64_t v27 = v24;
  v27[1] = v26;
}

uint64_t sub_1001A43D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_100457590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_1001A6A38();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  v11[15] = 0;
  sub_1001A6A8C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for SESTLKRecordData(0);
    LOBYTE(v12) = 1;
    type metadata accessor for CreationMetadata(0);
    sub_1001A68D4(&qword_1004575A0, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001A45A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10006C51C(&qword_100457580);
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  __chkstk_darwin(v7, v8);
  id v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SESTLKRecordData(0);
  uint64_t v13 = __chkstk_darwin(v11 - 8, v12);
  uint64_t v15 = (_OWORD *)((char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = (uint64_t *)((char *)v15 + *(int *)(v13 + 28));
  sub_1001A41BC(v16);
  uint64_t v17 = type metadata accessor for CreationMetadata(0);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
  sub_100075908(a1, a1[3]);
  sub_1001A6A38();
  uint64_t v18 = v24;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    sub_10007594C((uint64_t)a1);
    return sub_10008E734((uint64_t)v16, &qword_1004572C0);
  }
  else
  {
    char v26 = 0;
    sub_1001A6880();
    uint64_t v19 = v23;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *uint64_t v15 = v25;
    LOBYTE(v25) = 1;
    sub_1001A68D4(&qword_100457560, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v19);
    sub_100127B84((uint64_t)v6, (uint64_t)v16, &qword_1004572C0);
    sub_1001A69D0((uint64_t)v15, v21, type metadata accessor for SESTLKRecordData);
    sub_10007594C((uint64_t)a1);
    return sub_1001A691C((uint64_t)v15, type metadata accessor for SESTLKRecordData);
  }
}

uint64_t sub_1001A48FC()
{
  if (*v0) {
    return 0xD000000000000010;
  }
  else {
    return 0x5464657070617277;
  }
}

uint64_t sub_1001A4940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A7488(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A4968(uint64_t a1)
{
  unint64_t v2 = sub_1001A6A38();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A49A4(uint64_t a1)
{
  unint64_t v2 = sub_1001A6A38();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A49E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A45A0(a1, a2);
}

uint64_t sub_1001A49F8(void *a1)
{
  return sub_1001A43D0(a1);
}

unint64_t sub_1001A4A10(char a1)
{
  unint64_t result = 0x6E65644972656570;
  switch(a1)
  {
    case 1:
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0x7472654364736163;
      break;
    case 4:
      unint64_t result = 0x6E6F697461657263;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001A4AFC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_1004575D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1001A682C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v13 = *v3;
  char v12 = 0;
  sub_1001A6A8C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v13 = v3[1];
    char v12 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = v3[2];
    char v12 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = v3[3];
    char v12 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for SESPeerIdentityData(0);
    LOBYTE(v13) = 4;
    type metadata accessor for Date();
    sub_1001A68D4(&qword_1004575C0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    type metadata accessor for CreationMetadata(0);
    sub_1001A68D4(&qword_1004575A0, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001A4E00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v37 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10006C51C(&qword_1004564D0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_100457540);
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  __chkstk_darwin(v10, v11);
  long long v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v15 = v14 - 8;
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (_OWORD *)((char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = (char *)v18 + *(int *)(v15 + 40);
  static Date.now.getter();
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  uint64_t v42 = (uint64_t)v19;
  v21(v19, 0, 1, v20);
  uint64_t v22 = (uint64_t *)((char *)v18 + *(int *)(v15 + 44));
  sub_1001A41BC(v22);
  uint64_t v23 = type metadata accessor for CreationMetadata(0);
  uint64_t v24 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v41 = v22;
  v24(v22, 0, 1, v23);
  uint64_t v25 = a1[3];
  uint64_t v40 = a1;
  sub_100075908(a1, v25);
  sub_1001A682C();
  char v26 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    uint64_t v29 = (uint64_t)v41;
    uint64_t v28 = v42;
    sub_10007594C((uint64_t)v40);
    sub_10008E734(v28, &qword_1004564D0);
    return sub_10008E734(v29, &qword_1004572C0);
  }
  else
  {
    v35[1] = v20;
    uint64_t v43 = v9;
    uint64_t v27 = v38;
    char v45 = 0;
    sub_1001A6880();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v30 = (uint64_t)v18;
    *uint64_t v18 = v44;
    char v45 = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v18[1] = v44;
    char v45 = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v31 = v42;
    void v18[2] = v44;
    char v45 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18[3] = v44;
    LOBYTE(v44) = 4;
    sub_1001A68D4(&qword_100457558, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v32 = (uint64_t)v43;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_100127B84(v32, v31, &qword_1004564D0);
    LOBYTE(v44) = 5;
    sub_1001A68D4(&qword_100457560, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    uint64_t v33 = (uint64_t)v37;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v39);
    sub_100127B84(v33, (uint64_t)v41, &qword_1004572C0);
    sub_1001A69D0(v30, v36, type metadata accessor for SESPeerIdentityData);
    sub_10007594C((uint64_t)v40);
    return sub_1001A691C(v30, type metadata accessor for SESPeerIdentityData);
  }
}

unint64_t sub_1001A5434()
{
  return sub_1001A4A10(*v0);
}

uint64_t sub_1001A543C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A7584(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001A5464(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1001A5470(uint64_t a1)
{
  unint64_t v2 = sub_1001A682C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A54AC(uint64_t a1)
{
  unint64_t v2 = sub_1001A682C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A54E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A4E00(a1, a2);
}

uint64_t sub_1001A5500(void *a1)
{
  return sub_1001A4AFC(a1);
}

unint64_t sub_1001A5518(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 2:
      unint64_t result = 0x6574707972636E65;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001A55B0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_1004575C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1001A697C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  type metadata accessor for SESPeerIdentityData(0);
  sub_1001A68D4(&qword_100456528, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for SESTLKShareData(0);
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v10 + 24));
    char v13 = 2;
    sub_1001A6A8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    type metadata accessor for CreationMetadata(0);
    sub_1001A68D4(&qword_1004575A0, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001A5838@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v3 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v31 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v7 = __chkstk_darwin(v34, v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v33 = (char *)&v29 - v11;
  uint64_t v36 = sub_10006C51C(&qword_100457570);
  uint64_t v32 = *(void *)(v36 - 8);
  __chkstk_darwin(v36, v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SESTLKShareData(0);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (uint64_t *)&v19[*(int *)(v17 + 28)];
  sub_1001A41BC(v20);
  uint64_t v21 = type metadata accessor for CreationMetadata(0);
  uint64_t v22 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  uint64_t v37 = v20;
  v22(v20, 0, 1, v21);
  sub_100075908(a1, a1[3]);
  sub_1001A697C();
  uint64_t v35 = v14;
  uint64_t v23 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    sub_10007594C((uint64_t)a1);
    return sub_10008E734((uint64_t)v37, &qword_1004572C0);
  }
  else
  {
    uint64_t v38 = v21;
    uint64_t v24 = v32;
    uint64_t v25 = (uint64_t)a1;
    LOBYTE(v39) = 0;
    sub_1001A68D4(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    uint64_t v26 = (uint64_t)v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1001A6CDC(v26, (uint64_t)v19, type metadata accessor for SESPeerIdentityData);
    LOBYTE(v39) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1001A6CDC((uint64_t)v9, (uint64_t)&v19[*(int *)(v15 + 20)], type metadata accessor for SESPeerIdentityData);
    char v40 = 2;
    sub_1001A6880();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v19[*(int *)(v15 + 24)] = v39;
    LOBYTE(v39) = 3;
    sub_1001A68D4(&qword_100457560, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    uint64_t v27 = (uint64_t)v31;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v35, v36);
    sub_100127B84(v27, (uint64_t)v37, &qword_1004572C0);
    sub_1001A69D0((uint64_t)v19, v30, type metadata accessor for SESTLKShareData);
    sub_10007594C(v25);
    return sub_1001A691C((uint64_t)v19, type metadata accessor for SESTLKShareData);
  }
}

unint64_t sub_1001A5D9C()
{
  return sub_1001A5518(*v0);
}

uint64_t sub_1001A5DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A784C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A5DCC(uint64_t a1)
{
  unint64_t v2 = sub_1001A697C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A5E08(uint64_t a1)
{
  unint64_t v2 = sub_1001A697C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A5E44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A5838(a1, a2);
}

uint64_t sub_1001A5E5C(void *a1)
{
  return sub_1001A55B0(a1);
}

uint64_t sub_1001A5E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  MGCopyAnswer();

  sub_10006C51C(&qword_100457568);
  if (swift_dynamicCast() && v7) {
    return v6;
  }
  swift_bridgeObjectRetain();
  return a3;
}

uint64_t sub_1001A5F14(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_1004575B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_1001A6AE0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for CreationMetadata(0);
    v9[14] = 1;
    type metadata accessor for Date();
    sub_1001A68D4(&qword_1004575C0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[11] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v9[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1001A6190@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_1004575A8);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for CreationMetadata(0);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (void *)((char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = a1[3];
  long long v39 = a1;
  sub_100075908(a1, v16);
  sub_1001A6AE0();
  uint64_t v38 = v11;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)v39);
  }
  uint64_t v17 = v36;
  char v45 = 0;
  *uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  v15[1] = v18;
  char v44 = 1;
  sub_1001A68D4(&qword_100457558, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))((char *)v15 + v12[5], v7, v4);
  char v43 = 2;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = (uint64_t *)((char *)v15 + v12[6]);
  *uint64_t v20 = v19;
  v20[1] = v21;
  char v42 = 3;
  v33[1] = 0;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v23 = (uint64_t *)((char *)v15 + v12[7]);
  uint64_t *v23 = v22;
  v23[1] = v24;
  char v41 = 4;
  uint64_t v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v26 = (uint64_t *)((char *)v15 + v12[8]);
  *uint64_t v26 = v25;
  v26[1] = v27;
  char v40 = 5;
  uint64_t v28 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v30 = v29;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v38, v37);
  uint64_t v31 = (uint64_t *)((char *)v15 + v12[9]);
  uint64_t *v31 = v28;
  v31[1] = v30;
  sub_1001A69D0((uint64_t)v15, v34, type metadata accessor for CreationMetadata);
  sub_10007594C((uint64_t)v39);
  return sub_1001A691C((uint64_t)v15, type metadata accessor for CreationMetadata);
}

uint64_t sub_1001A66A8()
{
  uint64_t result = 0x6F69737265567773;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1702125924;
      break;
    case 2:
      uint64_t result = 0x6C65646F6DLL;
      break;
    case 3:
      uint64_t result = 0x656369766564;
      break;
    case 4:
      uint64_t result = 1684632420;
      break;
    case 5:
      uint64_t result = 0x44495344746C61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001A675C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001A7A14(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A6784(uint64_t a1)
{
  unint64_t v2 = sub_1001A6AE0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A67C0(uint64_t a1)
{
  unint64_t v2 = sub_1001A6AE0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A67FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A6190(a1, a2);
}

uint64_t sub_1001A6814(void *a1)
{
  return sub_1001A5F14(a1);
}

unint64_t sub_1001A682C()
{
  unint64_t result = qword_100457548;
  if (!qword_100457548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457548);
  }
  return result;
}

unint64_t sub_1001A6880()
{
  unint64_t result = qword_100457550;
  if (!qword_100457550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457550);
  }
  return result;
}

uint64_t sub_1001A68D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001A691C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1001A697C()
{
  unint64_t result = qword_100457578;
  if (!qword_100457578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457578);
  }
  return result;
}

uint64_t sub_1001A69D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_1001A6A38()
{
  unint64_t result = qword_100457588;
  if (!qword_100457588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457588);
  }
  return result;
}

unint64_t sub_1001A6A8C()
{
  unint64_t result = qword_100457598;
  if (!qword_100457598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457598);
  }
  return result;
}

unint64_t sub_1001A6AE0()
{
  unint64_t result = qword_1004575B0;
  if (!qword_1004575B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004575B0);
  }
  return result;
}

uint64_t sub_1001A6B34()
{
  NSString v1 = String._bridgeToObjectiveC()();
  v2.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  v3.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for SESTLKShareData(0);
  v4.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1001A68D4(&qword_1004575D8, (void (*)(uint64_t))type metadata accessor for SESTLKShareData);
  uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v0)
  {

    return swift_release();
  }
  else
  {
    uint64_t v8 = v5;
    unint64_t v9 = v6;
    swift_release();
    uint64_t v10 = self;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v8, v9);
    id v12 = [v10 withView:v1 tlkUUID:v2.super.isa sourcePeerIdentifier:v3.super.isa targetPeerIdentifier:v4.super.isa shareData:isa];

    return (uint64_t)v12;
  }
}

uint64_t sub_1001A6CDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for CreationMetadata.CodingKeys()
{
  return &type metadata for CreationMetadata.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SESTLKRecordData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A6E28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESTLKRecordData.CodingKeys()
{
  return &type metadata for SESTLKRecordData.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SESTLKShareData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A6F2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESTLKShareData.CodingKeys()
{
  return &type metadata for SESTLKShareData.CodingKeys;
}

unsigned char *_s10seserviced16CreationMetadataV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001A7030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SESPeerIdentityData.CodingKeys()
{
  return &type metadata for SESPeerIdentityData.CodingKeys;
}

unint64_t sub_1001A706C()
{
  unint64_t result = qword_1004575F0;
  if (!qword_1004575F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004575F0);
  }
  return result;
}

unint64_t sub_1001A70C4()
{
  unint64_t result = qword_1004575F8;
  if (!qword_1004575F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004575F8);
  }
  return result;
}

unint64_t sub_1001A711C()
{
  unint64_t result = qword_100457600;
  if (!qword_100457600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457600);
  }
  return result;
}

unint64_t sub_1001A7174()
{
  unint64_t result = qword_100457608;
  if (!qword_100457608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457608);
  }
  return result;
}

unint64_t sub_1001A71CC()
{
  unint64_t result = qword_100457610;
  if (!qword_100457610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457610);
  }
  return result;
}

unint64_t sub_1001A7224()
{
  unint64_t result = qword_100457618;
  if (!qword_100457618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457618);
  }
  return result;
}

unint64_t sub_1001A727C()
{
  unint64_t result = qword_100457620;
  if (!qword_100457620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457620);
  }
  return result;
}

unint64_t sub_1001A72D4()
{
  unint64_t result = qword_100457628;
  if (!qword_100457628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457628);
  }
  return result;
}

unint64_t sub_1001A732C()
{
  unint64_t result = qword_100457630;
  if (!qword_100457630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457630);
  }
  return result;
}

unint64_t sub_1001A7384()
{
  unint64_t result = qword_100457638;
  if (!qword_100457638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457638);
  }
  return result;
}

unint64_t sub_1001A73DC()
{
  unint64_t result = qword_100457640;
  if (!qword_100457640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457640);
  }
  return result;
}

unint64_t sub_1001A7434()
{
  unint64_t result = qword_100457648;
  if (!qword_100457648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457648);
  }
  return result;
}

uint64_t sub_1001A7488(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5464657070617277 && a2 == 0xEA00000000004B4CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003B5CD0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001A7584(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65644972656570 && a2 == 0xEE00726569666974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001003B5C90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001003B5CB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7472654364736163 && a2 == 0xEF65746163696669 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F697461657263 && a2 == 0xEC000000656D6954 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003B5CD0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1001A784C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x80000001003B5CF0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001003B5D10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xED0000626F6C4264 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003B5CD0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1001A7A14(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F69737265567773 && a2 == 0xE90000000000006ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1684632420 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x44495344746C61 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void sub_1001A7C74(void *a1)
{
  uint64_t v2 = v1;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E55C(v4, (uint64_t)qword_1004686A8);
  id v5 = a1;
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    unint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v9 = v5;

    uint64_t v2 = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removing %@ from background assertion table", v8, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v11 = [v5 processIdentifier];
  if ((int)v11 < 1)
  {
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid PID provided for invalidation", v18, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v13 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions);
    uint64_t v14 = __chkstk_darwin(v11, v12);
    __chkstk_darwin(v14, v15);
    swift_retain();
    os_unfair_lock_lock(v13 + 6);
    sub_100129CD0((uint64_t)&v13[4]);
    os_unfair_lock_unlock(v13 + 6);
    swift_release();
  }
}

void sub_1001A7F70(uint64_t *a1, int a2, char a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(*a1 + 16) && (sub_1002C0D48(a2), (v9 & 1) != 0))
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004686A8);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unexpected assertion exist, pid=%d)", v13, 8u);
      swift_slowDealloc();
    }
  }
  else
  {
    type metadata accessor for BackgroundAssertionHandle();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 48) = 0;
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v14 + 16) = a3;
    *(_DWORD *)(v14 + 20) = a2;
    uint64_t v15 = *(void **)(v14 + 24);
    *(void *)(v14 + 24) = 0;
    swift_unknownObjectRetain();

    *(void *)(v14 + 48) = a5;
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    uint64_t v16 = *(void **)(v14 + 32);
    *(void *)(v14 + 32) = 0;

    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *a1;
    *a1 = 0x8000000000000000;
    sub_1002CA86C(v14, a2, isUniquelyReferenced_nonNull_native);
    *a1 = v18;
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001A8180(uint64_t *a1, void *a2, int a3)
{
  unint64_t v5 = sub_1002C0D48(a3);
  if (v6)
  {
    unint64_t v7 = v5;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *a1;
    uint64_t v12 = *a1;
    *a1 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1002CDC1C();
      uint64_t v9 = v12;
    }
    uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v7);
    sub_10018181C(v7, v9);
    *a1 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = 0;
  }
  *a2 = v10;
  return swift_release();
}

void sub_1001A8238(int a1, id a2)
{
  id v3 = [a2 processIdentifier];
  if ((int)v3 < 1)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E55C(v8, (uint64_t)qword_1004686A8);
    id v11 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v9, "Invalid PID", v10, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    unint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions);
    uint64_t v6 = __chkstk_darwin(v3, v4);
    __chkstk_darwin(v6, v7);
    swift_retain();
    os_unfair_lock_lock(v5 + 6);
    sub_100129CD0((uint64_t)&v5[4]);
    os_unfair_lock_unlock(v5 + 6);
    swift_release();
  }
}

void sub_1001A840C(uint64_t *a1, int a2, char a3)
{
  uint64_t v3 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v5 = sub_1002C0D48(a2), (v6 & 1) != 0))
  {
    *(unsigned char *)(*(void *)(*(void *)(v3 + 56) + 8 * v5) + 16) = a3;
    if (a3)
    {
      swift_retain();
      if (a3 == 1) {
        sub_1002B4A44();
      }
      else {
        sub_1002B4BA4();
      }
    }
    else
    {
      swift_retain();
      sub_1002B47E4();
    }
    swift_release();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Assertion for %d not found", v10, 8u);
      swift_slowDealloc();
    }
  }
}

void sub_1001A8590(int a1)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v6 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Wired transceive detected for %d, setting up background timer", v6, 8u);
    swift_slowDealloc();
  }

  if (a1 < 1)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalid PID", v14, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    os_log_type_t v9 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions);
    uint64_t v10 = __chkstk_darwin(v7, v8);
    __chkstk_darwin(v10, v11);
    swift_retain();
    os_unfair_lock_lock(v9 + 6);
    sub_100129CD0((uint64_t)&v9[4]);
    os_unfair_lock_unlock(v9 + 6);
    swift_release();
  }
}

void sub_1001A87CC(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(*(void *)a1 + 16) && (sub_1002C0D48(a2), (v4 & 1) != 0))
  {
    os_log_type_t v5 = *(void **)(a3 + OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_queue);
    swift_retain();
    sub_1002B4D04(v5);
    swift_release();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v9 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing assertion for %d, no background assertion support for this client", v9, 8u);
      swift_slowDealloc();
    }
  }
}

void sub_1001A8934(uint64_t a1, uint64_t a2)
{
  if ((int)a1 < 1)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v7, "Invalid PID", v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions);
    uint64_t v4 = __chkstk_darwin(a1, a2);
    __chkstk_darwin(v4, v5);
    swift_retain();
    os_unfair_lock_lock(v3 + 6);
    sub_100129200((uint64_t)&v3[4]);
    os_unfair_lock_unlock(v3 + 6);
    swift_release();
  }
}

unint64_t sub_1001A8AEC(unint64_t result, int a2)
{
  if (*(void *)(*(void *)result + 16))
  {
    unint64_t result = sub_1002C0D48(a2);
    if (v2)
    {
      swift_retain();
      sub_1002B4660();
      return swift_release();
    }
  }
  return result;
}

id sub_1001A8B44()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "BackgroundAssertionMonitor.deinit()", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = *(void *)&v1[OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions];
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  sub_1000B3EB8((uint64_t *)(v7 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_release();
  v9.receiver = v1;
  v9.super_class = ObjectType;
  return [super dealloc];
}

void sub_1001A8C94(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v11 >= v6) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      int64_t v7 = v11 + 1;
      if (v11 + 1 >= v6) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v2 + 8 * v7);
      if (!v12)
      {
        int64_t v7 = v11 + 2;
        if (v11 + 2 >= v6) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v7);
        if (!v12) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_22:
    uint64_t v14 = *(void *)(*(void *)(v1 + 56) + 8 * v10);
    uint64_t v15 = qword_1004536D0;
    swift_retain();
    if (v15 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E55C(v16, (uint64_t)qword_1004686A8);
    swift_retain();
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67109120;
      *(_DWORD *)(v19 + 4) = *(_DWORD *)(v14 + 20);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Stopping timer for pid %d", (uint8_t *)v19, 8u);
      swift_slowDealloc();

      uint64_t v20 = *(void **)(v14 + 24);
      if (v20) {
        goto LABEL_26;
      }
    }
    else
    {

      swift_release();
      uint64_t v20 = *(void **)(v14 + 24);
      if (v20)
      {
LABEL_26:
        [v20 invalidate];
        uint64_t v21 = *(void **)(v14 + 24);
        goto LABEL_29;
      }
    }
    uint64_t v21 = 0;
LABEL_29:
    *(void *)(v14 + 24) = 0;

    uint64_t v22 = *(void *)(v14 + 32);
    if (v22)
    {
      sub_100052B14(v22);
      os_log_type_t v8 = *(void **)(v14 + 32);
    }
    else
    {
      os_log_type_t v8 = 0;
    }
    *(void *)(v14 + 32) = 0;
    swift_release();
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v6)
  {
LABEL_31:
    swift_release();
    swift_bridgeObjectRelease();
    *a1 = (uint64_t)&_swiftEmptyDictionarySingleton;
    return;
  }
  unint64_t v12 = *(void *)(v2 + 8 * v13);
  if (v12)
  {
    int64_t v7 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v7);
    ++v13;
    if (v12) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
}

void sub_1001A8FE8(void *a1, uint64_t a2, void *a3, const char *a4, int a5)
{
  uint64_t v8 = qword_1004536D0;
  id v9 = a3;
  id v14 = a1;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10008E55C(v10, (uint64_t)qword_1004686A8);
  int64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    int64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, a4, v13, 2u);
    swift_slowDealloc();
  }

  sub_1001A8238(a5, v9);
}

id sub_1001A9110()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1, v2);
  uint64_t v23 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v5);
  int64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_type_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v15 = OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_assertions;
  unint64_t v16 = sub_1001E6D34((uint64_t)_swiftEmptyArrayStorage);
  sub_10006C51C(&qword_1004576E8);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 24) = 0;
  *(void *)(v17 + 16) = v16;
  *(void *)&v0[v15] = v17;
  uint64_t v21 = OBJC_IVAR____TtC10seserviced22SECBackgroundAssertion_queue;
  sub_10007BEB4();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
  os_log_type_t v18 = v0;
  DispatchQoS.init(qosClass:relativePriority:)();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v22);
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1001A94BC();
  sub_10006C51C(&qword_1004566F0);
  sub_1001828FC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v21] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v25.receiver = v18;
  v25.super_class = ObjectType;
  return [super init];
}

uint64_t type metadata accessor for SECBackgroundAssertion()
{
  return self;
}

unint64_t sub_1001A9480(unint64_t a1)
{
  return sub_1001A8AEC(a1, *(_DWORD *)(v1 + 16));
}

void sub_1001A949C(uint64_t a1)
{
  sub_1001A87CC(a1, *(_DWORD *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1001A94BC()
{
  unint64_t result = qword_1004566E8;
  if (!qword_1004566E8)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004566E8);
  }
  return result;
}

void sub_1001A9514(uint64_t *a1)
{
  sub_1001A840C(a1, *(_DWORD *)(v1 + 16), *(unsigned char *)(v1 + 20));
}

uint64_t sub_1001A9534(uint64_t *a1)
{
  return sub_1001A8180(a1, *(void **)(v1 + 16), *(_DWORD *)(v1 + 24));
}

char *sub_1001A9554(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v82 = a4;
  uint64_t v83 = (char *)a2;
  uint64_t v84 = (void *)a3;
  uint64_t v5 = type metadata accessor for JPKIInternalTypes.CertificateType();
  uint64_t v77 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for JPKIInternalTypes.CertificateInfo();
  uint64_t v76 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  unint64_t v16 = (char *)&v70 - v15;
  uint64_t v17 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v80 = *(void *)(v17 - 8);
  uint64_t v81 = v17;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  objc_super v25 = (char *)&v70 - v24;
  uint64_t v27 = __chkstk_darwin(v23, v26);
  uint64_t v29 = (char *)&v70 - v28;
  __chkstk_darwin(v27, v30);
  uint64_t v32 = (char *)&v70 - v31;
  uint64_t v79 = a1;
  id v33 = v85;
  sub_1001A9D50(a1, (uint64_t)v83, (unint64_t)v84, (uint64_t)&v70 - v31);
  if (!v33)
  {
    uint64_t v83 = v29;
    uint64_t v71 = v16;
    unint64_t v74 = v8;
    int v75 = v25;
    uint64_t v84 = v21;
    id v85 = 0;
    uint64_t v72 = v13;
    uint64_t v73 = v9;
    id v38 = [objc_allocWithZone((Class)RAPDU) init];
    id v87 = 0;
    long long v39 = v79;
    id v40 = sub_100056348(v79, 0, 176, 136, 0, 0, 0, &v87);
    if (!v40)
    {
      id v50 = v87;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100453740 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_10008E55C(v51, (uint64_t)qword_1004576F0);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      BOOL v54 = os_log_type_enabled(v52, v53);
      uint64_t v34 = v84;
      if (v54)
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        id v87 = (id)swift_slowAlloc();
        id v85 = v38;
        *(_DWORD *)uint64_t v55 = 136315138;
        uint64_t v8 = (char *)(v55 + 4);
        swift_getErrorValue();
        uint64_t v56 = Error.localizedDescription.getter();
        uint64_t v86 = sub_100290514(v56, v57, (uint64_t *)&v87);
        id v38 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Error while reading availability info %s", v55, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v36 = v80;
      uint64_t v35 = v81;
      *uint64_t v34 = 0xD00000000000003CLL;
      v34[1] = 0x80000001003B5DC0;
      (*(void (**)(void *, void, uint64_t))(v36 + 104))(v34, enum case for JPKIInternalTypes.InternalError.internalError(_:), v35);
      sub_1001AEC74();
      swift_willThrowTypedImpl();

      swift_errorRelease();
      goto LABEL_4;
    }
    char v41 = v40;
    id v42 = v87;

    char v43 = v41;
    char v44 = sub_10005D558(v43);
    uint64_t v45 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v47 = v46;

    LODWORD(v44) = Data.subscript.getter();
    sub_10006D144(v45, v47);
    if ((~v44 & 0xC) != 0)
    {
      uint64_t v8 = (char *)_swiftEmptyArrayStorage;
      id v58 = v85;
    }
    else
    {
      id v48 = v85;
      uint64_t v49 = (uint64_t)v83;
      sub_1001AA0C4(v39, 2, (uint64_t)v83);
      if (v48)
      {

        uint64_t v34 = (void *)v49;
        goto LABEL_3;
      }
      id v58 = 0;
      (*(void (**)(char *, void, uint64_t))(v77 + 104))(v74, enum case for JPKIInternalTypes.CertificateType.signing(_:), v78);
      uint64_t v59 = v71;
      JPKIInternalTypes.CertificateInfo.init(type:authTriesRemaining:)();
      uint64_t v8 = (char *)sub_10025A3E4(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
      unint64_t v61 = *((void *)v8 + 2);
      unint64_t v60 = *((void *)v8 + 3);
      if (v61 >= v60 >> 1) {
        uint64_t v8 = (char *)sub_10025A3E4(v60 > 1, v61 + 1, 1, (unint64_t)v8);
      }
      *((void *)v8 + 2) = v61 + 1;
      (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v8[((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80))+ *(void *)(v76 + 72) * v61], v59, v73);
    }
    uint64_t v62 = sub_10005D558(v43);

    uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v65 = v64;

    LODWORD(v62) = Data.subscript.getter();
    sub_10006D144(v63, v65);
    if ((~v62 & 0xC) == 0)
    {
      uint64_t v34 = v75;
      sub_1001AA0C4(v39, 0, (uint64_t)v75);
      if (v58)
      {
        swift_bridgeObjectRelease();

        goto LABEL_3;
      }
      (*(void (**)(char *, void, uint64_t))(v77 + 104))(v74, enum case for JPKIInternalTypes.CertificateType.user(_:), v78);
      JPKIInternalTypes.CertificateInfo.init(type:authTriesRemaining:)();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = (char *)sub_10025A3E4(0, *((void *)v8 + 2) + 1, 1, (unint64_t)v8);
      }
      uint64_t v66 = v73;
      uint64_t v67 = v76;
      unint64_t v69 = *((void *)v8 + 2);
      unint64_t v68 = *((void *)v8 + 3);
      if (v69 >= v68 >> 1) {
        uint64_t v8 = (char *)sub_10025A3E4(v68 > 1, v69 + 1, 1, (unint64_t)v8);
      }
      *((void *)v8 + 2) = v69 + 1;
      (*(void (**)(char *, char *, uint64_t))(v67 + 32))(&v8[((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))+ *(void *)(v67 + 72) * v69], v72, v66);
    }

    return v8;
  }
  uint64_t v34 = v32;
LABEL_3:
  uint64_t v36 = v80;
  uint64_t v35 = v81;
LABEL_4:
  (*(void (**)(uint64_t, void *, uint64_t))(v36 + 32))(v82, v34, v35);
  return v8;
}

void sub_1001A9D50(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (void *)((char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v14 = sub_100056638(a1, isa);

  if (v14)
  {
    uint64_t v31 = a2;
    unint64_t v32 = a3;
    if (qword_100453740 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E55C(v15, (uint64_t)qword_1004576F0);
    id v16 = v14;
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v30 = a4;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v34 = swift_slowAlloc();
      uint64_t v29 = v9;
      *(_DWORD *)uint64_t v20 = 136315138;
      v28[1] = v20 + 4;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      uint64_t v33 = sub_100290514(v21, v22, &v34);
      uint64_t v9 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to select Alphonso : %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a4 = v30;
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v34 = 0;
    unint64_t v35 = 0xE000000000000000;
    uint64_t v24 = v31;
    unint64_t v23 = v32;
    sub_10006D0EC(v31, v32);
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    uint64_t v34 = 0xD00000000000001ALL;
    unint64_t v35 = 0x80000001003B5E90;
    swift_getErrorValue();
    v25._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    uint64_t v26 = v34;
    unint64_t v27 = v35;
    *uint64_t v12 = v24;
    v12[1] = v23;
    v12[2] = v26;
    v12[3] = v27;
    (*(void (**)(uint64_t *, void, uint64_t))(v9 + 104))(v12, enum case for JPKIInternalTypes.InternalError.selectFailed(_:), v8);
    sub_1001AEC74();
    swift_willThrowTypedImpl();

    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 32))(a4, v12, v8);
  }
}

uint64_t sub_1001AA0C4(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (void *)((char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    if (a2 != 2)
    {
      id v39 = 0;
      unint64_t v40 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v22._countAndFlagsBits = 0xD000000000000039;
      v22._object = (void *)0x80000001003B5E00;
      String.append(_:)(v22);
      LOBYTE(v38) = a2;
      _print_unlocked<A, B>(_:_:)();
      unint64_t v23 = v40;
      *uint64_t v10 = v39;
      v10[1] = v23;
      (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for JPKIInternalTypes.InternalError.internalError(_:), v6);
      sub_1001AEC74();
      swift_willThrowTypedImpl();
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v7 + 32))(a3, v10, v6);
    }
    char v11 = -101;
  }
  else
  {
    char v11 = -104;
  }
  sub_10006C51C(&qword_1004568A8);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100379160;
  *(_WORD *)(v12 + 32) = 0x2000;
  *(unsigned char *)(v12 + 34) = 0;
  *(unsigned char *)(v12 + 35) = v11;
  *(unsigned char *)(v12 + 36) = 0;
  uint64_t v13 = sub_100088F40(v12);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v37 = v15;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v39 = 0;
  id v17 = sub_10005603C(a1, (uint64_t)isa, &v39);

  if (!v17)
  {
    id v24 = v39;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100453740 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E55C(v25, (uint64_t)qword_1004576F0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      unint64_t v35 = (void *)swift_slowAlloc();
      id v39 = v35;
      uint64_t v36 = a3;
      *(_DWORD *)uint64_t v28 = 136315138;
      v33[1] = v28 + 4;
      uint64_t v34 = v28;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v38 = sub_100290514(v29, v30, (uint64_t *)&v39);
      a3 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Authentication invalid and failed with error %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_getErrorValue();
    uint64_t v31 = Error.localizedDescription.getter();
    *uint64_t v10 = 0xD000000000000027;
    v10[1] = 0x80000001003B5E40;
    v10[2] = v31;
    v10[3] = v32;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v6);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    sub_10006D144(v13, v37);
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v7 + 32))(a3, v10, v6);
  }
  id v18 = v39;
  id v19 = v17;
  if ((~sub_10005D5A8((uint64_t)v19) & 0x63C0) != 0)
  {

    sub_10006D144(v13, v37);
    return 0;
  }
  else
  {
    char v20 = sub_10005D5A8((uint64_t)v19);

    sub_10006D144(v13, v37);
    return v20 & 0xF;
  }
}

uint64_t sub_1001AA5DC(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v96 = a6;
  uint64_t v92 = a5;
  uint64_t v93 = (void *)a4;
  uint64_t v90 = type metadata accessor for JPKIInternalTypes.CertificateType();
  uint64_t v91 = *(void *)(v90 - 8);
  __chkstk_darwin(v90, v9);
  char v11 = (char *)&v89 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  id v17 = (uint64_t *)((char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __chkstk_darwin(v15, v18);
  uint64_t v21 = (char *)&v89 - v20;
  __chkstk_darwin(v19, v22);
  id v24 = (char *)&v89 - v23;
  uint64_t v25 = v97;
  sub_1001A9D50(a1, (uint64_t)a2, a3, (uint64_t)&v89 - v23);
  if (v25) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v96, v24, v12);
  }
  uint64_t v27 = v91;
  uint64_t v89 = v17;
  uint64_t v94 = v13;
  uint64_t v95 = v12;
  uint64_t v28 = (uint64_t)v93;
  sub_1001AB084(a1, a2, a3, (uint64_t)v93, v92, (uint64_t)v21);
  uint64_t v29 = v28;
  uint64_t v30 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v11, v29, v90);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v11, v30);
  uint64_t v32 = v95;
  uint64_t v33 = v96;
  uint64_t v34 = v94;
  if (v31 == enum case for JPKIInternalTypes.CertificateType.user(_:))
  {
    int v35 = 10;
  }
  else
  {
    if (v31 != enum case for JPKIInternalTypes.CertificateType.signing(_:))
    {
LABEL_73:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x1001AB044);
    }
    int v35 = 1;
  }
  long long v100 = xmmword_100378350;
  LODWORD(v92) = v35;
  v99[0] = 0;
  id v36 = sub_100056348(a1, 0, 176, v35 | 0x80u, 0, 0, 255, v99);
  id v37 = v99[0];
  if (!v36)
  {
    uint64_t v51 = v32;
    id v52 = v99[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v53 = 0;
    unint64_t v54 = 0xC000000000000000;
LABEL_58:
    swift_getErrorValue();
    uint64_t v83 = Error.localizedDescription.getter();
    uint64_t v85 = v84;
    LOBYTE(v99[0]) = v92;
    uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
    id v87 = v89;
    *uint64_t v89 = v83;
    v87[1] = v85;
    v87[2] = v86;
    v87[3] = v88;
    (*(void (**)(uint64_t *, void, uint64_t))(v34 + 104))(v87, enum case for JPKIInternalTypes.InternalError.certificateReadFailed(_:), v51);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v34 + 32))(v33, v87, v51);
    return sub_10006D144(v53, v54);
  }
  uint64_t v91 = 0;
  uint64_t v38 = (id *)v36;
  id v39 = v37;
  unint64_t v40 = sub_10005D558(v38);
  uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v43 = v42;

  sub_10006D0EC(v41, v43);
  sub_100141068(v41, v43);
  sub_10006D144(v41, v43);
  unint64_t v44 = v43;
  uint64_t v45 = v38;
  sub_10006D144(v41, v44);
  unint64_t v46 = sub_10005D558(v38);

  uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v49 = v48;

  switch(v49 >> 62)
  {
    case 1uLL:
      sub_10006D144(v47, v49);
      if (__OFSUB__(HIDWORD(v47), v47)) {
        goto LABEL_72;
      }
      uint64_t v50 = HIDWORD(v47) - (int)v47;
      break;
    case 2uLL:
      uint64_t v55 = v38;
      uint64_t v57 = *(void *)(v47 + 16);
      uint64_t v56 = *(void *)(v47 + 24);
      sub_10006D144(v47, v49);
      uint64_t v50 = v56 - v57;
      if (__OFSUB__(v56, v57)) {
        goto LABEL_71;
      }
      uint64_t v45 = v55;
      break;
    case 3uLL:
      sub_10006D144(v47, v49);
      uint64_t v50 = 0;
      break;
    default:
      sub_10006D144(v47, v49);
      uint64_t v50 = BYTE6(v49);
      break;
  }
  uint64_t v93 = a1;
  while (2)
  {
    unint64_t v54 = *((void *)&v100 + 1);
    uint64_t v53 = v100;
    uint64_t v60 = 0;
    switch(*((void *)&v100 + 1) >> 62)
    {
      case 1:
        if (__OFSUB__(DWORD1(v100), v100)) {
          goto LABEL_64;
        }
        if (DWORD1(v100) - (int)v100 >= 3900) {
          goto LABEL_59;
        }
        goto LABEL_27;
      case 2:
        uint64_t v62 = *(void *)(v100 + 16);
        uint64_t v61 = *(void *)(v100 + 24);
        BOOL v59 = __OFSUB__(v61, v62);
        uint64_t v60 = v61 - v62;
        if (v59) {
          goto LABEL_63;
        }
        if (v60 < 3900)
        {
          if (*((void *)&v100 + 1) >> 62 != 2)
          {
LABEL_27:
            if (__OFSUB__(DWORD1(v100), v100)) {
              goto LABEL_62;
            }
            uint64_t v60 = DWORD1(v100) - (int)v100;
          }
LABEL_29:
          uint64_t v63 = 3900 - v60;
          if (__OFSUB__(3900, v60))
          {
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
          }
          if (v63 > 254)
          {
            LOBYTE(v63) = -1;
          }
          else if (v63 < 0)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            goto LABEL_73;
          }
          v99[0] = 0;
          id v64 = sub_100056348(a1, 0, 176, SBYTE1(v50), v50, 0, v63, v99);
          if (!v64)
          {
            uint64_t v51 = v32;
            id v82 = v99[0];
            _convertNSErrorToError(_:)();

            swift_willThrow();
            uint64_t v33 = v96;
            goto LABEL_58;
          }
          unint64_t v65 = v64;
          id v66 = v99[0];

          unint64_t v97 = v65;
          uint64_t v67 = sub_10005D558(v97);
          unint64_t v68 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v70 = v69;

          v99[3] = &type metadata for Data;
          v99[4] = &protocol witness table for Data;
          v99[0] = v68;
          v99[1] = v70;
          uint64_t v71 = sub_100075908(v99, (uint64_t)&type metadata for Data);
          uint64_t v73 = *v71;
          unint64_t v72 = v71[1];
          switch(v72 >> 62)
          {
            case 1uLL:
              if (v73 >> 32 < (int)v73) {
                goto LABEL_65;
              }
              sub_10006D0EC((uint64_t)v68, (unint64_t)v70);
              sub_10006D0EC(v73, v72);
              if (__DataStorage._bytes.getter() && __OFSUB__((int)v73, __DataStorage._offset.getter())) {
                goto LABEL_70;
              }
              __DataStorage._length.getter();
              Data._Representation.append(contentsOf:)();
              sub_10006D144(v73, v72);
              goto LABEL_50;
            case 2uLL:
              uint64_t v74 = *(void *)(v73 + 16);
              uint64_t v75 = *(void *)(v73 + 24);
              sub_10006D0EC((uint64_t)v68, (unint64_t)v70);
              swift_retain();
              swift_retain();
              if (__DataStorage._bytes.getter())
              {
                if (__OFSUB__(v74, __DataStorage._offset.getter())) {
                  goto LABEL_69;
                }
                if (__OFSUB__(v75, v74)) {
                  goto LABEL_66;
                }
              }
              else if (__OFSUB__(v75, v74))
              {
                goto LABEL_66;
              }
              __DataStorage._length.getter();
              Data._Representation.append(contentsOf:)();
              swift_release();
              swift_release();
LABEL_50:
              uint64_t v34 = v94;
              uint64_t v32 = v95;
              a1 = v93;
LABEL_51:
              sub_10007594C((uint64_t)v99);
              sub_10006D144((uint64_t)v68, (unint64_t)v70);
              uint64_t v45 = v97;
              uint64_t v76 = sub_10005D558(v97);

              uint64_t v77 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v79 = v78;

              switch(v79 >> 62)
              {
                case 1uLL:
                  sub_10006D144(v77, v79);
                  LODWORD(v58) = HIDWORD(v77) - v77;
                  if (__OFSUB__(HIDWORD(v77), v77)) {
                    goto LABEL_68;
                  }
                  uint64_t v58 = (int)v58;
                  break;
                case 2uLL:
                  uint64_t v81 = *(void *)(v77 + 16);
                  uint64_t v80 = *(void *)(v77 + 24);
                  sub_10006D144(v77, v79);
                  uint64_t v58 = v80 - v81;
                  if (__OFSUB__(v80, v81)) {
                    goto LABEL_67;
                  }
                  uint64_t v45 = v97;
                  break;
                case 3uLL:
                  sub_10006D144(v77, v79);
                  uint64_t v58 = 0;
                  break;
                default:
                  sub_10006D144(v77, v79);
                  uint64_t v58 = BYTE6(v79);
                  break;
              }
              BOOL v59 = __OFADD__(v50, v58);
              v50 += v58;
              if (v59) {
                goto LABEL_61;
              }
              break;
            case 3uLL:
              memset(v98, 0, 14);
              sub_10006D0EC((uint64_t)v68, (unint64_t)v70);
              Data._Representation.append(contentsOf:)();
              goto LABEL_51;
            default:
              v98[0] = *v71;
              LOWORD(v98[1]) = v72;
              BYTE2(v98[1]) = BYTE2(v72);
              BYTE3(v98[1]) = BYTE3(v72);
              BYTE4(v98[1]) = BYTE4(v72);
              BYTE5(v98[1]) = BYTE5(v72);
              sub_10006D0EC((uint64_t)v68, (unint64_t)v70);
              Data._Representation.append(contentsOf:)();
              goto LABEL_51;
          }
          continue;
        }
LABEL_59:

        type metadata accessor for JPKIInternalTypes.CertificateData();
        return JPKIInternalTypes.CertificateData.__allocating_init(certificateData:)();
      case 3:
        goto LABEL_29;
      default:
        uint64_t v60 = BYTE14(v100);
        goto LABEL_29;
    }
  }
}

uint64_t sub_1001AB084(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a6;
  uint64_t v29 = a2;
  unint64_t v30 = a3;
  uint64_t v31 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v9 = *(void *)(v31 - 8);
  uint64_t v11 = __chkstk_darwin(v31, v10);
  uint64_t v13 = (void **)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (void **)((char *)&v29 - v15);
  uint64_t v17 = type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, a5, v17);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v21, v17);
  if (v22 == enum case for JPKIInternalTypes.UserAuthenticationInternal.standard(_:))
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v21, v17);
    uint64_t v23 = v33;
    sub_1001ABCFC(a1, a4, *(void *)v21, *((void **)v21 + 1), v16);
    if (v23)
    {
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v9 + 32))(v32, v16, v31);
    }
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v24 = a1;
    uint64_t v25 = v33;
    if (v22 == enum case for JPKIInternalTypes.UserAuthenticationInternal.biometry(_:))
    {
      (*(void (**)(char *, uint64_t))(v18 + 96))(v21, v17);
      uint64_t v26 = *(void *)v21;
      unint64_t v27 = *((void *)v21 + 1);
      sub_1001ACFC0(v24, v29, v30, a4, v26, v27, v13);
      if (v25)
      {
        sub_10006D144(v26, v27);
        uint64_t v16 = v13;
        return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v9 + 32))(v32, v16, v31);
      }
      return sub_10006D144(v26, v27);
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001AB388(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v81 = a3;
  uint64_t v85 = a5;
  uint64_t v78 = a4;
  uint64_t v80 = a2;
  uint64_t v83 = a1;
  uint64_t v76 = type metadata accessor for String.Encoding();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76, v9);
  uint64_t v74 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for JPKIInternalTypes.CertificateType();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73, v11);
  uint64_t v71 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v86 = *(void *)(v13 - 8);
  uint64_t v87 = v13;
  uint64_t v15 = __chkstk_darwin(v13, v14);
  unint64_t v69 = (char *)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v77 = (void *)((char *)v67 - v19);
  __chkstk_darwin(v18, v20);
  uint64_t v79 = (uint64_t)v67 - v21;
  uint64_t v22 = type metadata accessor for JPKIInternalTypes.UserAuthentication();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v25 = __chkstk_darwin(v22, v24);
  unint64_t v27 = (void *)((char *)v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v25, v28);
  unint64_t v30 = (void *)((char *)v67 - v29);
  uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v84((char *)v67 - v29, a6, v22);
  uint64_t v31 = *(uint64_t (**)(uint64_t *, uint64_t))(v23 + 88);
  int v32 = v31(v30, v22);
  if (v32 != enum case for JPKIInternalTypes.UserAuthentication.standard(_:))
  {
    unint64_t v27 = v30;
LABEL_7:
    (*(void (**)(uint64_t *, uint64_t))(v23 + 8))(v27, v22);
    *a7 = 0xD000000000000014;
    a7[1] = 0x80000001003B60C0;
    a7[2] = 0xD000000000000029;
    a7[3] = 0x80000001003B60E0;
    (*(void (**)(void *, void, uint64_t))(v86 + 104))(a7, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v87);
    sub_1001AEC74();
    return swift_willThrowTypedImpl();
  }
  int v33 = v32;
  uint64_t v70 = a7;
  unint64_t v68 = *(void (**)(uint64_t *, uint64_t))(v23 + 96);
  v68(v30, v22);
  v67[1] = *v30;
  v84((char *)v27, v85, v22);
  if (v31(v27, v22) != v33)
  {
    swift_bridgeObjectRelease();
    a7 = v70;
    goto LABEL_7;
  }
  v68(v27, v22);
  uint64_t v35 = *v27;
  uint64_t v34 = (void *)v27[1];
  uint64_t v36 = v82;
  id v37 = v83;
  uint64_t v38 = v79;
  sub_1001A9D50(v83, v80, v81, v79);
  if (v36)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v86 + 32))(v70, v38, v87);
  }
  else
  {
    uint64_t v40 = v78;
    sub_1001ABCFC(v37, v78, v35, v34, v77);
    swift_bridgeObjectRelease();
    uint64_t v41 = v72;
    unint64_t v42 = v71;
    uint64_t v43 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v40, v73);
    int v44 = (*(uint64_t (**)(char *, uint64_t))(v41 + 88))(v42, v43);
    int v45 = v44;
    int v46 = enum case for JPKIInternalTypes.CertificateType.user(_:);
    if (v44 == enum case for JPKIInternalTypes.CertificateType.user(_:)
      || v44 == enum case for JPKIInternalTypes.CertificateType.signing(_:))
    {
      uint64_t v47 = v74;
      static String.Encoding.ascii.getter();
      uint64_t v48 = String.data(using:allowLossyConversion:)();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v75 + 8))(v47, v76);
      if (v50 >> 60 == 15)
      {
        Class isa = 0;
      }
      else
      {
        sub_10006D0EC(v48, v50);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100075868(v48, v50);
      }
      id v89 = 0;
      if (v45 == v46) {
        char v52 = -104;
      }
      else {
        char v52 = -101;
      }
      id v53 = sub_100056348(v37, 0, 36, 1, v52, isa, 0, &v89);

      if (v53)
      {
        id v54 = v89;

        return sub_100075868(v48, v50);
      }
      else
      {
        id v55 = v89;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_100075868(v48, v50);
        if (qword_100453740 != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        sub_10008E55C(v56, (uint64_t)qword_1004576F0);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v57, v58))
        {
          BOOL v59 = (uint8_t *)swift_slowAlloc();
          id v89 = (id)swift_slowAlloc();
          *(_DWORD *)BOOL v59 = 136315138;
          swift_getErrorValue();
          uint64_t v60 = Error.localizedDescription.getter();
          uint64_t v88 = sub_100290514(v60, v61, (uint64_t *)&v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Currenty authentication invalid and failed with error %s", v59, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        uint64_t v62 = v87;
        uint64_t v63 = v69;
        swift_getErrorValue();
        uint64_t v64 = Error.localizedDescription.getter();
        *uint64_t v63 = 0xD000000000000027;
        v63[1] = 0x80000001003B5E40;
        v63[2] = v64;
        _OWORD v63[3] = v65;
        uint64_t v66 = v86;
        (*(void (**)(void *, void, uint64_t))(v86 + 104))(v63, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v62);
        sub_1001AEC74();
        swift_willThrowTypedImpl();
        swift_errorRelease();
        return (*(uint64_t (**)(void *, void *, uint64_t))(v66 + 32))(v70, v63, v62);
      }
    }
    else
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001ABCFC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v88 = a5;
  uint64_t v87 = a1;
  uint64_t v8 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v89 = *(void *)(v8 - 8);
  uint64_t v90 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v86 = (uint64_t *)((char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for String.Encoding();
  uint64_t v12 = *(void **)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for JPKIInternalTypes.CertificateType();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a2, v16);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  int v22 = enum case for JPKIInternalTypes.CertificateType.user(_:);
  if (v21 != enum case for JPKIInternalTypes.CertificateType.user(_:)
    && v21 != enum case for JPKIInternalTypes.CertificateType.signing(_:))
  {
    while (1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_48:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_49:
      id v92 = 0;
      unint64_t v93 = 0xE000000000000000;
      _StringGuts.grow(_:)(44);
      swift_bridgeObjectRelease();
      id v92 = (id)0xD000000000000017;
      unint64_t v93 = 0x80000001003B5F60;
      LOWORD(v91) = sub_10005D5A8((uint64_t)v12);
      v82._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      v83._object = (void *)0x80000001003B5F80;
      v83._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v83);
      v84._countAndFlagsBits = 0xD000000000000046;
      v84._object = (void *)0x80000001003B5FA0;
      String.append(_:)(v84);
    }
  }
  int v24 = v21;
  static String.Encoding.ascii.getter();
  uint64_t v25 = String.data(using:allowLossyConversion:)();
  unint64_t v27 = v26;
  uint64_t v28 = (void (*)(char *, uint64_t))v12[1];
  ++v12;
  v28(v15, v11);
  if (v27 >> 60 == 15)
  {
    if (qword_100453740 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E55C(v29, (uint64_t)qword_1004576F0);
    swift_bridgeObjectRetain_n();
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      int v32 = (uint8_t *)swift_slowAlloc();
      id v92 = (id)swift_slowAlloc();
      *(_DWORD *)int v32 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v96 = sub_100290514(a3, (unint64_t)a4, (uint64_t *)&v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Invalid auth string provided, cannot decode %s in ascii", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v36 = v88;
    uint64_t v37 = v89;
    uint64_t v38 = v90;
    id v92 = 0;
    unint64_t v93 = 0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    id v92 = (id)0xD00000000000001ELL;
    unint64_t v93 = 0x80000001003B5F40;
    v39._countAndFlagsBits = a3;
    v39._object = a4;
    String.append(_:)(v39);
    unint64_t v40 = v93;
    *uint64_t v36 = v92;
    v36[1] = v40;
    (*(void (**)(void *, void, uint64_t))(v37 + 104))(v36, enum case for JPKIInternalTypes.InternalError.typeMismatch(_:), v38);
    sub_1001AEC74();
    return swift_willThrowTypedImpl();
  }
  sub_10006C51C(&qword_1004568A8);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_100379160;
  *(_WORD *)(v33 + 32) = 0x2000;
  *(unsigned char *)(v33 + 34) = 0;
  if (v24 == v22) {
    char v34 = -104;
  }
  else {
    char v34 = -101;
  }
  *(unsigned char *)(v33 + 35) = v34;
  LOBYTE(v35) = 0;
  switch(v27 >> 62)
  {
    case 1uLL:
      LODWORD(v35) = HIDWORD(v25) - v25;
      if (__OFSUB__(HIDWORD(v25), v25))
      {
        __break(1u);
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      unint64_t v35 = (int)v35;
LABEL_21:
      if ((v35 & 0x8000000000000000) != 0 || v35 >= 0x100) {
        goto LABEL_48;
      }
LABEL_23:
      *(unsigned char *)(v33 + 36) = v35;
      uint64_t v45 = sub_100088F40(v33);
      unint64_t v47 = v46;
      swift_bridgeObjectRelease();
      uint64_t v96 = v45;
      unint64_t v97 = v47;
      Data.append(_:)();
      uint64_t v48 = sub_10006C51C(&qword_100454158);
      uint64_t v94 = v48;
      uint64_t v95 = sub_10008C0B0((unint64_t *)&qword_100454160, &qword_100454158);
      LOBYTE(v92) = 0;
      LOBYTE(v91) = *(unsigned char *)sub_100075908(&v92, v48);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)&v92);
      uint64_t v49 = v96;
      unint64_t v50 = v97;
      sub_10006D0EC(v96, v97);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10006D144(v49, v50);
      id v92 = 0;
      id v52 = sub_10005603C(v87, (uint64_t)isa, &v92);

      if (v52)
      {
        id v53 = v92;
        uint64_t v12 = v52;
        int v54 = sub_10005D5A8((uint64_t)v12);
        if (v54 != 27012)
        {
          if (v54 == 36864)
          {
            sub_100075868(v25, v27);

            return sub_10006D144(v49, v50);
          }
          if ((v54 - 25552) < 0xFFFFFFF0) {
            goto LABEL_49;
          }
          char v70 = sub_10005D5A8((uint64_t)v12);

          uint64_t v71 = (void *)(v70 & 0xF);
          if (qword_100453740 != -1) {
            swift_once();
          }
          uint64_t v72 = type metadata accessor for Logger();
          sub_10008E55C(v72, (uint64_t)qword_1004576F0);
          uint64_t v73 = Logger.logObject.getter();
          os_log_type_t v74 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v73, v74))
          {
            uint64_t v75 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v75 = 134217984;
            id v92 = v71;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v73, v74, "Incorrect user authentication, %ld retries left", v75, 0xCu);
            swift_slowDealloc();
          }

          unint64_t v69 = v88;
          uint64_t v68 = v89;
          *uint64_t v88 = v71;
          uint64_t v67 = enum case for JPKIInternalTypes.InternalError.incorrectUserAuthentication(_:);
          goto LABEL_41;
        }

        if (qword_100453740 == -1)
        {
LABEL_32:
          uint64_t v63 = type metadata accessor for Logger();
          sub_10008E55C(v63, (uint64_t)qword_1004576F0);
          uint64_t v64 = Logger.logObject.getter();
          os_log_type_t v65 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v66 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v66 = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "User authentication method blocked", v66, 2u);
            swift_slowDealloc();
          }

          uint64_t v67 = enum case for JPKIInternalTypes.InternalError.userAuthenticationMethodBlocked(_:);
          unint64_t v69 = v88;
          uint64_t v68 = v89;
LABEL_41:
          (*(void (**)(void *, uint64_t, uint64_t))(v68 + 104))(v69, v67, v90);
          sub_1001AEC74();
          swift_willThrowTypedImpl();
          sub_100075868(v25, v27);

          return sub_10006D144(v96, v97);
        }
LABEL_46:
        swift_once();
        goto LABEL_32;
      }
      uint64_t v55 = v25;
      id v56 = v92;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100453740 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_10008E55C(v57, (uint64_t)qword_1004576F0);
      swift_errorRetain();
      swift_errorRetain();
      os_log_type_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        id v92 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        uint64_t v87 = v60 + 4;
        swift_getErrorValue();
        uint64_t v61 = Error.localizedDescription.getter();
        uint64_t v91 = sub_100290514(v61, v62, (uint64_t *)&v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Authentication invalid and failed with error %s", v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      uint64_t v76 = v88;
      swift_getErrorValue();
      uint64_t v77 = Error.localizedDescription.getter();
      uint64_t v78 = v86;
      *uint64_t v86 = 0xD000000000000027;
      v78[1] = 0x80000001003B5E40;
      uint64_t v78[2] = v77;
      v78[3] = v79;
      uint64_t v81 = v89;
      uint64_t v80 = v90;
      (*(void (**)(void *, void, uint64_t))(v89 + 104))(v78, enum case for JPKIInternalTypes.InternalError.invalidPINorPasscode(_:), v90);
      sub_1001AEC74();
      swift_willThrowTypedImpl();
      sub_100075868(v55, v27);
      swift_errorRelease();
      sub_10006D144(v96, v97);
      return (*(uint64_t (**)(void *, void *, uint64_t))(v81 + 32))(v76, v78, v80);
    case 2uLL:
      uint64_t v43 = *(void *)(v25 + 16);
      uint64_t v42 = *(void *)(v25 + 24);
      BOOL v44 = __OFSUB__(v42, v43);
      unint64_t v35 = v42 - v43;
      if (!v44) {
        goto LABEL_21;
      }
      goto LABEL_45;
    case 3uLL:
      goto LABEL_23;
    default:
      LOBYTE(v35) = BYTE6(v27);
      goto LABEL_23;
  }
}

uint64_t sub_1001ACA44(void *a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v51 = a7;
  v46[1] = a4;
  v46[2] = a5;
  uint64_t v12 = type metadata accessor for JPKIInternalTypes.CertificateType();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v48 = *(void *)(v17 - 8);
  uint64_t v49 = v17;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  int v21 = (void *)((char *)v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v22);
  int v24 = (void *)((char *)v46 - v23);
  unint64_t v47 = a1;
  uint64_t v25 = v52;
  uint64_t v26 = sub_1001AA5DC(a1, a2, a3, a6, v51, (uint64_t)v46 - v23);
  if (v25)
  {
    int v21 = v24;
    uint64_t v28 = v49;
    uint64_t v27 = v50;
    uint64_t v29 = v48;
    goto LABEL_3;
  }
  uint64_t v52 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a6, v12);
  int v30 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v30 == enum case for JPKIInternalTypes.CertificateType.user(_:))
  {
    char v31 = -105;
LABEL_8:
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v55 = 0;
    uint64_t v33 = (id *)sub_100056348(v47, 128, 42, 0, v31, isa, 0, &v55);

    id v34 = v55;
    if (v33)
    {
      type metadata accessor for JPKIInternalTypes.DigitalSignature();
      id v35 = v34;
      uint64_t v36 = sub_10005D558(v33);
      static Data._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v13 = JPKIInternalTypes.DigitalSignature.__allocating_init(certificate:signature:)();
      return v13;
    }
    id v38 = v55;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100453740 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_10008E55C(v39, (uint64_t)qword_1004576F0);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      id v55 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_getErrorValue();
      uint64_t v43 = Error.localizedDescription.getter();
      uint64_t v53 = sub_100290514(v43, v44, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to perform compute digital signature operation with error %s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v28 = v49;
    uint64_t v27 = v50;
    uint64_t v29 = v48;
    swift_getErrorValue();
    uint64_t v13 = v54;
    *int v21 = Error.localizedDescription.getter();
    v21[1] = v45;
    (*(void (**)(uint64_t *, void, uint64_t))(v29 + 104))(v21, enum case for JPKIInternalTypes.InternalError.signingFailed(_:), v28);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    swift_release();
    swift_errorRelease();
LABEL_3:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v29 + 32))(v27, v21, v28);
    return v13;
  }
  if (v30 == enum case for JPKIInternalTypes.CertificateType.signing(_:))
  {
    char v31 = -102;
    goto LABEL_8;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1001ACFC0(void *a1, void *a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v158 = a7;
  unint64_t v155 = a5;
  uint64_t v156 = a6;
  uint64_t v10 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v143 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v143 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v143 - v21;
  uint64_t v23 = v157;
  uint64_t v24 = sub_1001AE144((unint64_t)a1, (uint64_t)a2, a3, (uint64_t)&v143 - v21);
  if (v23)
  {
    (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v158, v22, v10);
    return;
  }
  uint64_t v157 = v24;
  unint64_t v153 = 0;
  unint64_t v154 = v25;
  unint64_t v146 = (unint64_t)v19;
  id v147 = a2;
  unint64_t v148 = a3;
  uint64_t v152 = a1;
  char v145 = v15;
  if (qword_100453740 != -1) {
    swift_once();
  }
  uint64_t v151 = v11;
  uint64_t v26 = type metadata accessor for Logger();
  uint64_t v27 = sub_10008E55C(v26, (uint64_t)qword_1004576F0);
  uint64_t v28 = v157;
  unint64_t v29 = v154;
  sub_10006D0EC(v157, v154);
  sub_10006D0EC(v28, v29);
  uint64_t v149 = (uint8_t *)v27;
  int v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v150 = v10;
  if (v32)
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    id v160 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v144 = v33 + 4;
    unint64_t v34 = v153;
    id v35 = sub_10023CDF4(v157, v29);
    unint64_t v153 = v34;
    uint64_t v159 = (uint64_t)v35;
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v36 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v38 = v37;
    swift_bridgeObjectRelease();
    uint64_t v159 = sub_100290514(v36, v38, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v39 = v154;
    swift_bridgeObjectRelease();
    sub_10006D144(v157, v39);
    sub_10006D144(v157, v39);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Performing biometric with ACL %s", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10006D144(v28, v29);
    sub_10006D144(v28, v29);
  }

  unint64_t v40 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v42 = String._bridgeToObjectiveC()();
  Class v43 = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v44 = v152;
  id v46 = sub_100056FD0(v152, v45);
  id v47 = [v46 seid];

  uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v50 = v49;

  Class v51 = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v52 = v50;
  uint64_t v53 = v44;
  sub_10006D144(v48, v52);
  id v160 = 0;
  id v54 = [v40 performChainAuthIfNeededForACL:isa operation:v42 auth:v43 seHandle:v44 seid:v51 error:&v160];

  if (v160)
  {
    id v55 = v160;

    swift_willThrow();
    id v56 = v55;
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
      id v160 = (id)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v59 = 136315138;
      swift_getErrorValue();
      uint64_t v60 = Error.localizedDescription.getter();
      uint64_t v159 = sub_100290514(v60, v61, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failed to perform chain verification : %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v73 = v158;
    uint64_t v74 = v151;
    unint64_t v75 = v154;
    uint64_t v76 = (void *)_convertErrorToNSError(_:)();
    id v77 = [v76 code];

    *uint64_t v73 = v77;
    (*(void (**)(void *, void, uint64_t))(v74 + 104))(v73, enum case for JPKIInternalTypes.InternalError.biometryFailed(_:), v150);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    sub_10006D144(v157, v75);

    return;
  }
  sub_100056B94(v44);
  unint64_t v62 = v158;
  uint64_t v63 = v151;
  if (!v54)
  {
    *uint64_t v158 = 0xD00000000000001ALL;
    v62[1] = 0x80000001003B6050;
    (*(void (**)(void *, void, uint64_t))(v63 + 104))(v62, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v150);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    sub_10006D144(v157, v154);
    return;
  }
  id v64 = [v54 resolvedAuthorization];
  uint64_t v65 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v67 = v66;

  uint64_t v68 = v44;
  unint64_t v69 = v153;
  unint64_t v70 = v146;
  sub_1001A9D50(v68, (uint64_t)v147, v148, v146);
  uint64_t v71 = v53;
  unint64_t v72 = v154;
  if (v69)
  {
    sub_10006D144(v157, v154);
    sub_10006D144(v65, v67);
    (*(void (**)(void *, unint64_t, uint64_t))(v63 + 32))(v62, v70, v150);
LABEL_14:

    return;
  }
  uint64_t v156 = v65;
  uint64_t v78 = v71;
  unint64_t v148 = sub_100088F40((uint64_t)&off_10040F108);
  unint64_t v153 = v79;
  Class v80 = Data._bridgeToObjectiveC()().super.isa;
  id v160 = 0;
  uint64_t v81 = (id *)sub_100056104(v78, v80, &v160);

  unint64_t v155 = v67;
  if (!v81)
  {
    id v108 = v160;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = (uint8_t *)swift_slowAlloc();
      id v160 = (id)swift_slowAlloc();
      id v147 = v54;
      *(_DWORD *)uint64_t v111 = 136315138;
      swift_getErrorValue();
      uint64_t v112 = Error.localizedDescription.getter();
      uint64_t v159 = sub_100290514(v112, v113, (uint64_t *)&v160);
      unint64_t v72 = v154;
      id v54 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Failed to get nonce %s", v111, 0xCu);
      swift_arrayDestroy();
      uint64_t v63 = v151;
      swift_slowDealloc();
      unint64_t v62 = v158;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v120 = v145;
    id v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    id v160 = (id)0xD000000000000015;
    unint64_t v161 = 0x80000001003B5FF0;
    swift_getErrorValue();
    v121._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v121);
    swift_bridgeObjectRelease();
    unint64_t v122 = v161;
    void *v120 = v160;
    v120[1] = v122;
    uint64_t v123 = v150;
    (*(void (**)(void *, void, uint64_t))(v63 + 104))(v120, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v150);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    sub_10006D144(v157, v72);
    sub_10006D144(v148, v153);
    sub_10006D144(v156, v155);
    swift_errorRelease();
    (*(void (**)(void *, void *, uint64_t))(v63 + 32))(v62, v120, v123);
    goto LABEL_14;
  }
  id v147 = v54;
  id v82 = v160;
  Swift::String v83 = sub_10005D558(v81);

  uint64_t v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v86 = v85;

  id v143 = self;
  sub_10006D0EC(v84, v86);
  Class v87 = Data._bridgeToObjectiveC()().super.isa;
  id v89 = sub_100056FD0(v152, v88);
  id v90 = [v89 seid];

  uint64_t v91 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v93 = v92;

  Class v94 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v91, v93);
  Class v95 = Data._bridgeToObjectiveC()().super.isa;
  NSString v96 = String._bridgeToObjectiveC()();
  uint64_t v97 = v84;
  Class v98 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v144 = (uint8_t *)v97;
  unint64_t v146 = v86;
  sub_10006D144(v97, v86);
  id v160 = 0;
  id v99 = [v143 performOperationApprovalV3:v87 seid:v94 acl:v95 operation:v96 nonce:v98 error:&v160];

  id v100 = v160;
  if (v99)
  {
    uint64_t v101 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v103 = v102;

    sub_10006D0EC(v101, v103);
    Class v104 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v101, v103);
    id v160 = 0;
    id v105 = sub_100056348(v152, 128, 251, 1, 0, v104, 0, &v160);

    id v106 = v147;
    if (v105)
    {
      id v107 = v160;
      sub_10006D144(v157, v154);

      sub_10006D144(v101, v103);
      sub_10006D144((uint64_t)v144, v146);
      sub_10006D144(v148, v153);
      sub_10006D144(v156, v155);

      return;
    }
    id v124 = v160;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v127 = (uint8_t *)swift_slowAlloc();
      uint64_t v152 = (void *)swift_slowAlloc();
      id v160 = v152;
      *(_DWORD *)uint64_t v127 = 136315138;
      uint64_t v149 = v127 + 4;
      swift_getErrorValue();
      uint64_t v128 = Error.localizedDescription.getter();
      uint64_t v159 = sub_100290514(v128, v129, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "Applet rejected OP : %s", v127, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v137 = v151;
    unint64_t v138 = v154;
    id v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    id v160 = (id)0xD000000000000014;
    unint64_t v161 = 0x80000001003B6030;
    swift_getErrorValue();
    v139._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v139);
    swift_bridgeObjectRelease();
    unint64_t v140 = v161;
    uint64_t v141 = v145;
    *char v145 = v160;
    v141[1] = v140;
    uint64_t v142 = v150;
    (*(void (**)(void *, void, uint64_t))(v137 + 104))(v141, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v150);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    sub_10006D144(v157, v138);
    sub_10006D144(v101, v103);
    sub_10006D144((uint64_t)v144, v146);
    sub_10006D144(v148, v153);
    sub_10006D144(v156, v155);
    swift_errorRelease();
    (*(void (**)(void *, void *, uint64_t))(v137 + 32))(v158, v141, v142);
  }
  else
  {
    uint64_t v114 = v100;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v115, v116))
    {
      int v117 = (uint8_t *)swift_slowAlloc();
      id v160 = (id)swift_slowAlloc();
      *(_DWORD *)int v117 = 136315138;
      swift_getErrorValue();
      uint64_t v118 = Error.localizedDescription.getter();
      uint64_t v159 = sub_100290514(v118, v119, (uint64_t *)&v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "Failed to authorize : %s", v117, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v130 = v158;
    uint64_t v131 = v151;
    unint64_t v132 = v154;
    uint64_t v133 = v145;
    id v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    id v160 = (id)0xD000000000000017;
    unint64_t v161 = 0x80000001003B6010;
    swift_getErrorValue();
    v134._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v134);
    swift_bridgeObjectRelease();
    unint64_t v135 = v161;
    *uint64_t v133 = v160;
    v133[1] = v135;
    uint64_t v136 = v150;
    (*(void (**)(void *, void, uint64_t))(v131 + 104))(v133, enum case for JPKIInternalTypes.InternalError.operationApprovalFailed(_:), v150);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    sub_10006D144(v157, v132);
    sub_10006D144((uint64_t)v144, v146);
    sub_10006D144(v148, v153);
    sub_10006D144(v156, v155);
    swift_errorRelease();
    (*(void (**)(void *, void *, uint64_t))(v131 + 32))(v130, v133, v136);
  }
}

uint64_t sub_1001AE144(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (void *)((char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v28 - v17;
  long long v29 = xmmword_100378280;
  sub_100079C04(a2, a3, (uint64_t)&off_10040F0E0, a1, (uint64_t *)&v29);
  if (!v4)
  {
    if (*((void *)&v29 + 1) >> 60 != 15) {
      return v29;
    }
    sub_1001AEC74();
    uint64_t v6 = swift_allocError();
    *uint64_t v19 = 0xD000000000000013;
    v19[1] = 0x80000001003B60A0;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v19, enum case for JPKIInternalTypes.InternalError.internalError(_:), v10);
    swift_willThrow();
  }
  sub_100075868(v29, *((unint64_t *)&v29 + 1));
  *(void *)&long long v29 = v6;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v15, v18, v10);
    (*(void (**)(uint64_t, void *, uint64_t))(v11 + 16))(a4, v15, v10);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    (*(void (**)(void *, uint64_t))(v11 + 8))(v15, v10);
    return swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    *(void *)&long long v29 = 0;
    *((void *)&v29 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&long long v29 = 0xD000000000000021;
    *((void *)&v29 + 1) = 0x80000001003B6070;
    id v28[5] = sub_10023CDF4(a2, a3);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 2112032;
    v25._object = (void *)0xE300000000000000;
    String.append(_:)(v25);
    swift_getErrorValue();
    v26._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    uint64_t v27 = *((void *)&v29 + 1);
    *uint64_t v15 = v29;
    v15[1] = v27;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v15, enum case for JPKIInternalTypes.InternalError.internalError(_:), v10);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t, void *, uint64_t))(v11 + 32))(a4, v15, v10);
  }
}

uint64_t sub_1001AE52C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = (id)SESKeyGetDesignatedKeys();
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v8 = v7;
  sub_1001112F0();
  unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v35 = v2;
  uint64_t v36 = a1;
  uint64_t v34 = v3;
  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
    goto LABEL_11;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
  {
LABEL_11:
    swift_bridgeObjectRelease_n();
    uint64_t v2 = v35;
    a1 = v36;
    uint64_t v3 = v34;
LABEL_12:
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, enum case for JPKIInternalTypes.InternalError.designatedKeyNotFound(_:), v2);
    sub_1001AEC74();
    swift_willThrowTypedImpl();
    goto LABEL_13;
  }
LABEL_4:
  uint64_t v11 = 4;
  while (1)
  {
    if ((v9 & 0xC000000000000001) != 0) {
      id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v12 = *(id *)(v9 + 8 * v11);
    }
    uint64_t v13 = v12;
    uint64_t v14 = v11 - 3;
    if (__OFADD__(v11 - 4, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if ([v12 designation] == (id)2) {
      break;
    }

    ++v11;
    if (v14 == v10) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v16 = self;
  id v17 = [v13 assetACL];
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v20 = v19;

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v18, v20);
  id v38 = 0;
  id v22 = [v16 getACLfromAssetACL:isa error:&v38];

  id v23 = v38;
  if (v22)
  {
    a1 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return a1;
  }
  Swift::String v24 = v23;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100453740 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E55C(v25, (uint64_t)qword_1004576F0);
  swift_errorRetain();
  swift_errorRetain();
  Swift::String v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v2 = v35;
  if (v28)
  {
    long long v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    id v38 = v33;
    *(_DWORD *)long long v29 = 136315138;
    BOOL v32 = v29 + 4;
    swift_getErrorValue();
    uint64_t v30 = Error.localizedDescription.getter();
    uint64_t v37 = sub_100290514(v30, v31, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to decode assetACL? %s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a1 = v36;
  uint64_t v3 = v34;
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v6, enum case for JPKIInternalTypes.InternalError.designatedKeyCorrupt(_:), v2);
  sub_1001AEC74();
  swift_willThrowTypedImpl();

  swift_errorRelease();
LABEL_13:
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v6, v2);
  return a1;
}

uint64_t sub_1001AEA30(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t result = sub_10018D0B8(a1, a2, 227);
  if (!v3)
  {
    uint64_t v7 = result;
    unint64_t v8 = v6;
    uint64_t v9 = sub_10018D0B8(result, v6, 218);
    uint64_t v11 = v10;
    sub_10006D144(v7, v8);
    uint64_t v12 = *a3;
    unint64_t v13 = a3[1];
    *a3 = v9;
    a3[1] = v11;
    return sub_100075868(v12, v13);
  }
  return result;
}

BOOL sub_1001AEAC0(char *a1, char *a2)
{
  return byte_10037B3B6[*a1] == byte_10037B3B6[*a2];
}

Swift::Int sub_1001AEAE4()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_10037B3B6[v1]);
  return Hasher._finalize()();
}

void sub_1001AEB34()
{
  Hasher._combine(_:)(byte_10037B3B6[*v0]);
}

Swift::Int sub_1001AEB6C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(byte_10037B3B6[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001AEBB8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1001AEE28(*a1);
  *a2 = result;
  return result;
}

void sub_1001AEBE4(unsigned char *a1@<X8>)
{
  *a1 = byte_10037B3B6[*v1];
}

uint64_t sub_1001AEBFC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_1004576F0);
  sub_10008E55C(v0, (uint64_t)qword_1004576F0);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

unint64_t sub_1001AEC74()
{
  unint64_t result = qword_100457768;
  if (!qword_100457768)
  {
    type metadata accessor for JPKIInternalTypes.InternalError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457768);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for fileIEFs(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001AED98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for fileIEFs()
{
  return &type metadata for fileIEFs;
}

unint64_t sub_1001AEDD4()
{
  unint64_t result = qword_100457770;
  if (!qword_100457770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457770);
  }
  return result;
}

uint64_t sub_1001AEE28(unsigned __int8 a1)
{
  int v1 = a1 - 1;
  uint64_t result = 1;
  switch(v1)
  {
    case 0:
      uint64_t result = 2;
      break;
    case 1:
      uint64_t result = 3;
      break;
    case 7:
      uint64_t result = 8;
      break;
    case 9:
      uint64_t result = 0;
      break;
    case 10:
      return result;
    case 22:
      uint64_t result = 6;
      break;
    case 23:
      uint64_t result = 4;
      break;
    case 25:
      uint64_t result = 7;
      break;
    case 26:
      uint64_t result = 5;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

void sub_1001AEF10()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for PassSelectionObserver());
  int v1 = sub_1002561F0(0, 1.0, 60.0);
  if (qword_100453750 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_100457778);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Started", v5, 2u);
    swift_slowDealloc();
  }

  qword_1004687C8 = (uint64_t)v1;
}

void sub_1001AF014(char a1)
{
  if (qword_100453750 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_100457778);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received %{BOOL}d status", v5, 8u);
    swift_slowDealloc();
  }

  if (a1) {
    sub_100256478();
  }
  else {
    sub_10025681C();
  }
}

id sub_1001AF144()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PassSelectionObserver();
  return [super dealloc];
}

uint64_t type metadata accessor for PassSelectionObserver()
{
  return self;
}

uint64_t sub_1001AF1A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100457778);
  sub_10008E55C(v0, (uint64_t)qword_100457778);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

void sub_1001AF218()
{
  if ((*(unsigned char *)(v0 + 48) & 1) != 0 && (SESInternalVariant() & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    return;
  }
  id v1 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithSuiteName:v2];

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 valueForKey:v4];

    if (v5)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000761D0(&v6, v7);
    }
    else
    {
      memset(v7, 0, sizeof(v7));
    }
    sub_10006C51C((uint64_t *)&unk_1004556C0);
    if (!swift_dynamicCast() || !*((void *)&v6 + 1)) {
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001AF368()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0 || SESInternalVariant())
  {
    id v1 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithSuiteName:v2];

    if (v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [v3 valueForKey:v4];

      if (v5)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0(&v6, v7);
      }
      else
      {
        memset(v7, 0, sizeof(v7));
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001AF4B4()
{
  if ((*(unsigned char *)(v0 + 33) & 1) == 0 || SESInternalVariant())
  {
    id v1 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithSuiteName:v2];

    if (v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [v3 valueForKey:v4];

      if (v5)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0(&v6, v7);
      }
      else
      {
        memset(v7, 0, sizeof(v7));
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001AF604()
{
  if ((*(unsigned char *)(v0 + 33) & 1) == 0 || SESInternalVariant())
  {
    id v1 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithSuiteName:v2];

    if (v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [v3 valueForKey:v4];

      if (v5)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0(&v6, v7);
      }
      else
      {
        memset(v7, 0, sizeof(v7));
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001AF748()
{
  if ((*(unsigned char *)(v0 + 40) & 1) == 0 || SESInternalVariant())
  {
    id v1 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithSuiteName:v2];

    if (v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [v3 valueForKey:v4];

      if (v5)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0(&v6, v7);
      }
      else
      {
        memset(v7, 0, sizeof(v7));
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001AF88C()
{
  if ((*(unsigned char *)(v0 + 48) & 1) != 0 && (SESInternalVariant() & 1) == 0)
  {
LABEL_9:
    swift_bridgeObjectRetain();
    return;
  }
  id v1 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v3 = [v1 initWithSuiteName:v2];

  if (v3)
  {
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 valueForKey:v4];

    if (v5)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      sub_1000761D0(&v6, v7);
    }
    else
    {
      memset(v7, 0, sizeof(v7));
    }
    sub_10006C51C((uint64_t *)&unk_1004556C0);
    sub_10006C51C((uint64_t *)&unk_100457940);
    if (!swift_dynamicCast() || *((void *)&v6 + 1) == 1) {
      goto LABEL_9;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001AF9EC()
{
  if ((*(unsigned char *)(v0 + 41) & 1) == 0 || SESInternalVariant())
  {
    id v1 = objc_allocWithZone((Class)NSUserDefaults);
    swift_bridgeObjectRetain();
    NSString v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v3 = [v1 initWithSuiteName:v2];

    if (v3)
    {
      NSString v4 = String._bridgeToObjectiveC()();
      id v5 = [v3 valueForKey:v4];

      if (v5)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
        sub_1000761D0(&v6, v7);
      }
      else
      {
        memset(v7, 0, sizeof(v7));
      }
      sub_10006C51C((uint64_t *)&unk_1004556C0);
      sub_10006C51C(&qword_100457958);
      swift_dynamicCast();
    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1001AFB54()
{
  uint64_t v0 = (char *)objc_allocWithZone((Class)type metadata accessor for LyonGeofenceException());
  uint64_t v1 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager;
  id v2 = objc_allocWithZone((Class)HMHomeManagerConfiguration);
  id v3 = v0;
  id v4 = [v2 initWithOptions:8 cachePolicy:0];
  id v5 = [objc_allocWithZone((Class)HMHomeManager) initWithConfiguration:v4];

  *(void *)&v0[v1] = v5;
  v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes] = 0;
  *(void *)&v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates] = _swiftEmptyArrayStorage;
  *(void *)&v3[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion] = 0;
  uint64_t v6 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome;
  sub_1001AF4B4();
  v3[v6] = v7 & 1;

  unint64_t v8 = sub_1002561F0(0, 1.0, 300.0);
  uint64_t v9 = qword_100453760;
  uint64_t v10 = v8;
  if (v9 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E55C(v11, (uint64_t)qword_1004577C0);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Started geofence exception", v14, 2u);
    swift_slowDealloc();
  }

  qword_1004687D0 = (uint64_t)v10;
}

void sub_1001AFD5C()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager);
  id v2 = [v1 homes];
  sub_1001B2A70();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_10;
    }
  }
  if (v4 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v3 + 8 * i + 32);
    }
    char v7 = v6;
    [v6 setDelegate:0];
  }
LABEL_10:
  swift_bridgeObjectRelease();
  uint64_t v8 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion;
  if (*(void *)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion)) {
    [v1 _endActiveAssertion:];
  }
  *(void *)(v0 + v8) = 0;
  swift_unknownObjectRelease();
  [v1 setDelegate:0];
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes) = 0;
}

void sub_1001AFECC(void *a1)
{
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v45 - 8);
  __chkstk_darwin(v45, v3);
  unint64_t v44 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes) = 1;
  uint64_t v5 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion;
  if (*(void *)((char *)a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_assertion)) {
    [*(id *)((char *)a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager) _endActiveAssertion:];
  }
  id v6 = *(void **)((char *)a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 _beginActiveAssertionWithReason:v7];

  *(void *)((char *)a1 + v5) = v8;
  swift_unknownObjectRelease();
  id v9 = [v6 homes];
  sub_1001B2A70();
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_5;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    sub_1001B0458();
    return;
  }
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v11) {
    goto LABEL_30;
  }
LABEL_5:
  if (v11 >= 1)
  {
    v40[0] = a1;
    a1 = (void *)((char *)a1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
    unint64_t v12 = v10 & 0xC000000000000001;
    swift_beginAccess();
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    NSString v42 = (void (**)(char *, uint64_t))(v2 + 8);
    *(void *)&long long v15 = 136315138;
    long long v41 = v15;
    v40[1] = (char *)&type metadata for Any + 8;
    Class v43 = a1;
    unint64_t v48 = v10 & 0xC000000000000001;
    while (1)
    {
      if (v12) {
        id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v16 = *(id *)(v10 + 8 * v13 + 32);
      }
      uint64_t v2 = *a1;
      id v17 = v16;
      unint64_t v18 = swift_bridgeObjectRetain();
      unint64_t v19 = (unint64_t)sub_1001B2544(v18, v17);
      swift_bridgeObjectRelease();

      if (v19 >> 62)
      {
        if (!_CocoaArrayWrapper.endIndex.getter())
        {
LABEL_22:
          swift_bridgeObjectRelease();
          if (qword_100453760 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          sub_10008E55C(v24, (uint64_t)qword_1004577C0);
          id v25 = v17;
          Swift::String v26 = Logger.logObject.getter();
          os_log_type_t v27 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v26, v27))
          {
            BOOL v28 = (_DWORD *)swift_slowAlloc();
            id v46 = v28;
            uint64_t v47 = swift_slowAlloc();
            uint64_t v49 = v47;
            _DWORD *v28 = v41;
            id v29 = [v25 uniqueIdentifier];
            uint64_t v30 = v44;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            uint64_t v31 = v14;
            uint64_t v32 = v11;
            unint64_t v33 = v10;
            uint64_t v34 = UUID.uuidString.getter();
            unint64_t v36 = v35;
            (*v42)(v30, v45);
            uint64_t v37 = v34;
            unint64_t v10 = v33;
            uint64_t v11 = v32;
            uint64_t v14 = v31;
            uint64_t v38 = sub_100290514(v37, v36, &v49);
            unint64_t v39 = (uint8_t *)v46;
            *(void *)(v46 + 1) = v38;

            a1 = v43;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v26, v27, "No homeDelegate registered for UUID %s", v39, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          unint64_t v12 = v48;
          goto LABEL_9;
        }
      }
      else if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_22;
      }
      if ((v19 & 0xC000000000000001) != 0)
      {
        unint64_t v20 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_29;
        }
        unint64_t v20 = *(id *)(v19 + 32);
      }
      uint64_t v21 = v20;
      swift_bridgeObjectRelease();
      [v17 setDelegate:v21];
      unint64_t v22 = (unint64_t)[v17 homeLocationStatus];
      unsigned int v23 = 0x1020003u >> (8 * v22);
      if (v22 >= 4) {
        LOBYTE(v23) = 3;
      }
      v21[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location] = v23;
      sub_1001B19B0();

LABEL_9:
      if (v11 == ++v13) {
        goto LABEL_30;
      }
    }
  }
  __break(1u);
}

void sub_1001B0458()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    goto LABEL_18;
  }
LABEL_2:
  uint64_t v7 = qword_100468A38;
  *id v6 = qword_100468A38;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes) != 1) {
    return;
  }
  id v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates);
  swift_beginAccess();
  uint64_t v2 = *v6;
  if ((unint64_t)*v6 >> 62)
  {
LABEL_20:
    swift_bridgeObjectRetain_n();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9)
    {
LABEL_21:
      swift_bridgeObjectRelease_n();
      if (qword_100453760 != -1) {
        goto LABEL_46;
      }
      goto LABEL_22;
    }
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v9) {
    goto LABEL_21;
  }
LABEL_6:
  uint64_t v10 = 4;
  while (1)
  {
    uint64_t v11 = v10 - 4;
    if ((v2 & 0xC000000000000001) != 0)
    {
      unint64_t v12 = (unsigned char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v11, 1);
      uint64_t v3 = v10 - 3;
      if (v13) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v12 = *(id *)(v2 + 8 * v10);
      BOOL v13 = __OFADD__(v11, 1);
      uint64_t v3 = v10 - 3;
      if (v13)
      {
LABEL_17:
        __break(1u);
LABEL_18:
        swift_once();
        goto LABEL_2;
      }
    }
    if (v12[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] == 1) {
      break;
    }

LABEL_8:
    ++v10;
    if (v3 == v9) {
      goto LABEL_21;
    }
  }
  int v14 = v12[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];

  if (v14) {
    goto LABEL_8;
  }
  swift_bridgeObjectRelease_n();
  sub_100256478();
  while (1)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome) == 1)
    {
      if (qword_100453830 != -1) {
        swift_once();
      }
      int v19 = 0;
      goto LABEL_52;
    }
    uint64_t v1 = *v6;
    if (!((unint64_t)*v6 >> 62))
    {
      uint64_t v20 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (!v20) {
        break;
      }
      goto LABEL_31;
    }
    swift_bridgeObjectRetain_n();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    if (!v20) {
      break;
    }
LABEL_31:
    uint64_t v21 = 4;
    while (1)
    {
      uint64_t v22 = v21 - 4;
      if ((v1 & 0xC000000000000001) == 0) {
        break;
      }
      unsigned int v23 = (unsigned __int8 *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v13 = __OFADD__(v22, 1);
      id v6 = (uint64_t *)(v21 - 3);
      if (v13) {
        goto LABEL_45;
      }
LABEL_39:
      if (v23[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] == 1)
      {
        unsigned int v24 = v23[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];

        if (v24 <= 3 && v24 != 2)
        {
          int v26 = 0;
          goto LABEL_49;
        }
      }
      else
      {
      }
      ++v21;
      if (v6 == (uint64_t *)v20) {
        goto LABEL_48;
      }
    }
    unsigned int v23 = (unsigned __int8 *)*(id *)(v1 + 8 * v21);
    BOOL v13 = __OFADD__(v22, 1);
    id v6 = (uint64_t *)(v21 - 3);
    if (!v13) {
      goto LABEL_39;
    }
LABEL_45:
    __break(1u);
LABEL_46:
    swift_once();
LABEL_22:
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E55C(v15, (uint64_t)qword_1004577C0);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No home within geofence", v18, 2u);
      swift_slowDealloc();
    }

    sub_10025681C();
  }
LABEL_48:
  int v26 = 1;
LABEL_49:
  swift_bridgeObjectRelease_n();
  if (qword_100453830 != -1) {
    swift_once();
  }
  int v19 = v26;
LABEL_52:
  sub_100255268(2, 2, 2, 0, v19);
}

void sub_1001B091C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 homeUUIDString];
  if (!v4)
  {
    if (qword_100453760 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E55C(v18, (uint64_t)qword_1004577C0);
    id v19 = a1;
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      id v23 = [v19 publicKeyIdentifier];
      uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t v48 = (uint64_t)sub_10023CDF4(v24, v26);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v27 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      sub_10006D144(v24, v26);
      uint64_t v48 = sub_100290514(v27, v29, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No home uuid found for %s, forcing scan to always be on", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    v2[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome] = 1;
    sub_1001B0458();
    return;
  }
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = v7;

  uint64_t v9 = (objc_class *)type metadata accessor for LyonHomeDelegate();
  uint64_t v10 = objc_allocWithZone(v9);
  uint64_t v11 = (uint64_t *)&v10[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
  uint64_t v45 = v6;
  *uint64_t v11 = v6;
  v11[1] = (uint64_t)v8;
  p_vtable = _TtC10seserviced10DSKExpress.vtable;
  v10[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location] = 3;
  v10[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress] = 0;
  v47.receiver = v10;
  v47.super_class = v9;
  swift_bridgeObjectRetain();
  id v13 = [super init];
  if (qword_100453760 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E55C(v14, (uint64_t)qword_1004577C0);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    v46[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v17 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_100290514(v45, (unint64_t)v8, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Home with %s added to list", v17, 0xCu);
    swift_arrayDestroy();
    p_vtable = (void **)(_TtC10seserviced10DSKExpress + 24);
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = &v2[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeDelegates];
  swift_beginAccess();
  id v31 = v13;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  uint64_t v32 = OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes;
  if (v2[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_hasLoadedHomes] != 1)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    unint64_t v40 = v2;
    long long v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      v46[0] = swift_slowAlloc();
      int v44 = v2[v32];
      *(_DWORD *)uint64_t v43 = 67109378;
      LODWORD(v48) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v43 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v48 = sub_100290514(v45, (unint64_t)v8, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "hasLoadedHomes: %{BOOL}d Could not find home for UUID %s, treating endpoing as having unknown location", (uint8_t *)v43, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1001B0458();

    return;
  }
  id v33 = [*(id *)&v2[OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager] homes];
  sub_1001B2A70();
  unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  unint64_t v35 = (unint64_t)sub_1001B22E4(v34, v45, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v35 >> 62)
  {
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_16;
    }
    goto LABEL_25;
  }
  if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
LABEL_16:
  if ((v35 & 0xC000000000000001) != 0)
  {
    id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v36 = *(id *)(v35 + 32);
  }
  uint64_t v37 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  [v37 setDelegate:v31];
  unint64_t v38 = (unint64_t)[v37 homeLocationStatus];
  unsigned int v39 = 0x1020003u >> (8 * v38);
  if (v38 >= 4) {
    LOBYTE(v39) = 3;
  }
  *((unsigned char *)p_vtable[276] + (void)v31) = v39;
  sub_1001B19B0();
  sub_1001B0458();
}

void sub_1001B10C8(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = swift_bridgeObjectRetain();
  unint64_t v5 = sub_1001B2930(v4, a1, a2);
  char v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_endAccess();
    if (qword_100453760 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004577C0);
    swift_bridgeObjectRetain_n();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v12 = 136315138;
      swift_bridgeObjectRetain();
      sub_100290514(a1, a2, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s did not exist, nothing to remove", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    id v8 = (void *)sub_10017892C(v5);
    swift_endAccess();

    sub_1001B0458();
  }
}

uint64_t sub_1001B1300(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v29[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, void *))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v6 + 8))(v9, v5);
  if (v10)
  {
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_forceNotOutOfHome)) {
      return 3;
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    unint64_t v13 = swift_bridgeObjectRetain();
    unint64_t v5 = 0;
    unint64_t v2 = (unint64_t)sub_1001B27AC(v13, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!(v2 >> 62))
    {
      if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_8;
      }
LABEL_18:
      swift_bridgeObjectRelease();
      if (qword_100453760 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E55C(v23, (uint64_t)qword_1004577C0);
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        unint64_t v26 = (uint8_t *)swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v26 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v28 = sub_100290514(a1, a2, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v12 = 3;
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Could not find homeDelegate for UUID %s, defaulting to unknown location", v26, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return v12;
      }

      swift_bridgeObjectRelease_n();
      return 3;
    }
  }
  else
  {
    __break(1u);
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v14 = *(id *)(v2 + 32);
  }
  unint64_t v5 = v14;
  swift_bridgeObjectRelease();
  if (qword_100453760 != -1) {
LABEL_26:
  }
    swift_once();
  uint64_t v15 = type metadata accessor for Logger();
  sub_10008E55C(v15, (uint64_t)qword_1004577C0);
  swift_bridgeObjectRetain_n();
  os_log_type_t v16 = v5;
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  p_vtable = _TtC10seserviced10DSKExpress.vtable;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    v29[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315394;
    LOBYTE(v28) = v16[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location];
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v28 = sub_100290514(v21, v22, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    p_vtable = (void **)(_TtC10seserviced10DSKExpress + 24);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_100290514(a1, a2, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Found location %s for home %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v12 = *((unsigned __int8 *)p_vtable[276] + (void)v16);

  return v12;
}

uint64_t sub_1001B1888()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

id sub_1001B18D8()
{
  return sub_1001B2040(type metadata accessor for LyonGeofenceException);
}

uint64_t type metadata accessor for LyonGeofenceException()
{
  return self;
}

id sub_1001B1970()
{
  return [*(id *)(*v0 + OBJC_IVAR____TtC10seserviced21LyonGeofenceException_homeManager) setDelegate:];
}

void sub_1001B198C()
{
}

void sub_1001B19B0()
{
  if (qword_100453760 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004577C0);
  uint64_t v9 = v0;
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v5 = String.init<A>(describing:)();
    sub_100290514(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v7 = *(void *)&v9[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
    unint64_t v8 = *(void *)&v9[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
    swift_bridgeObjectRetain();
    sub_100290514(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Set location to %s for %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_1001B1C1C(void *a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  v18[0] = qword_100468A38;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  *(void *)(v13 + 24) = a1;
  aBlock[4] = sub_1001B22C4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_1004148C8;
  uint64_t v14 = _Block_copy(aBlock);
  id v15 = v1;
  id v16 = a1;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release();
}

void sub_1001B1EE0(uint64_t a1, id a2)
{
  unint64_t v3 = (unint64_t)[a2 homeLocationStatus];
  unsigned int v4 = 0x1020003u >> (8 * v3);
  if (v3 >= 4) {
    LOBYTE(v4) = 3;
  }
  *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_location) = v4;
  sub_1001B19B0();
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_isExpress) == 1)
  {
    if (qword_100453758 != -1) {
      swift_once();
    }
    sub_1001B0458();
  }
}

id sub_1001B2028()
{
  return sub_1001B2040(type metadata accessor for LyonHomeDelegate);
}

id sub_1001B2040(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return [super dealloc];
}

uint64_t type metadata accessor for LyonHomeDelegate()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for GeofenceState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B217CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GeofenceState()
{
  return &type metadata for GeofenceState;
}

unint64_t sub_1001B21B8()
{
  unint64_t result = qword_100457930;
  if (!qword_100457930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457930);
  }
  return result;
}

uint64_t sub_1001B220C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_1004577C0);
  sub_10008E55C(v0, (uint64_t)qword_1004577C0);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001B2284()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_1001B22C4()
{
  sub_1001B1EE0(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_1001B22CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001B22DC()
{
  return swift_release();
}

void *sub_1001B22E4(unint64_t a1, uint64_t a2, void **a3)
{
  unsigned int v4 = v3;
  uint64_t v24 = a3;
  uint64_t v26 = a2;
  uint64_t v25 = type metadata accessor for UUID();
  unsigned int v6 = *(void (***)(char *, uint64_t))(v25 - 8);
  __chkstk_darwin(v25, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      unint64_t v11 = 0;
      unint64_t v23 = a1 & 0xC000000000000001;
      uint64_t v21 = v4;
      uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8;
      uint64_t v12 = v6 + 1;
      while (v23)
      {
        uint64_t v13 = (void (**)(char *, uint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unsigned int v6 = v13;
        unint64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          goto LABEL_18;
        }
        unint64_t v15 = a1;
        id v16 = [v13 uniqueIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v17 = UUID.uuidString.getter();
        unsigned int v4 = v18;
        (*v12)(v9, v25);
        if (v17 == v26 && v4 == v24)
        {
          swift_bridgeObjectRelease();
LABEL_14:
          unsigned int v4 = &v27;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v19) {
          goto LABEL_14;
        }

LABEL_5:
        a1 = v15;
        ++v11;
        if (v14 == v10) {
          return v27;
        }
      }
      if (v11 < *(void *)(v22 + 16)) {
        break;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      if (!v10) {
        return _swiftEmptyArrayStorage;
      }
    }
    uint64_t v13 = (void (**)(char *, uint64_t))*(id *)(a1 + 8 * v11 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001B2544(unint64_t a1, void *a2)
{
  int v3 = v2;
  id v28 = a2;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v6);
  uint64_t v26 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v8)
  {
    while (1)
    {
      unint64_t v9 = 0;
      uint64_t v24 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v25 = a1 & 0xC000000000000001;
      uint64_t v21 = v3;
      uint64_t v22 = (void (**)(void **, uint64_t))(v5 + 8);
      unint64_t v23 = a1;
      while (v25)
      {
        uint64_t v10 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v11 = v10;
        unint64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_21;
        }
        uint64_t v14 = *(void *)&v10[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID];
        uint64_t v13 = *(void *)&v10[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8];
        id v15 = [v28 uniqueIdentifier];
        int v3 = (void **)v26;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v16 = UUID.uuidString.getter();
        uint64_t v18 = v17;
        (*v22)(v3, v27);
        if (v14 == v16 && v13 == v18)
        {
          swift_bridgeObjectRelease();
LABEL_17:
          int v3 = &v29;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v5 = v29[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_5;
        }
        uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v5) {
          goto LABEL_17;
        }

LABEL_5:
        a1 = v23;
        ++v9;
        if (v12 == v8) {
          return v29;
        }
      }
      if (v9 < *(void *)(v24 + 16)) {
        break;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      if (!v8) {
        return _swiftEmptyArrayStorage;
      }
    }
    uint64_t v10 = (char *)*(id *)(a1 + 8 * v9 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1001B27AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_20;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6)
  {
    while (1)
    {
      unint64_t v7 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        unint64_t v9 = v8;
        unint64_t v10 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_19;
        }
        BOOL v11 = *(void *)&v8[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID] == a2
           && *(void *)&v8[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8] == a3;
        if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v7;
        if (v10 == v6) {
          return _swiftEmptyArrayStorage;
        }
      }
      if (v7 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (!v6) {
        return _swiftEmptyArrayStorage;
      }
    }
    uint64_t v8 = (char *)*(id *)(a1 + 8 * v7 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001B2930(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    for (uint64_t i = 0; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        uint64_t v8 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        uint64_t v8 = (char *)*(id *)(a1 + 8 * i + 32);
      }
      unint64_t v9 = v8;
      if (*(void *)&v8[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID] == a2
        && *(void *)&v8[OBJC_IVAR____TtC10seserviced16LyonHomeDelegate_homeUUID + 8] == a3)
      {

        return i;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();

      if (v11) {
        return i;
      }
      uint64_t v12 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if (v12 == v6) {
        return 0;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return 0;
}

unint64_t sub_1001B2A70()
{
  unint64_t result = qword_100457950;
  if (!qword_100457950)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100457950);
  }
  return result;
}

uint64_t sub_1001B2AB0()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v14[0] - 8);
  __chkstk_darwin(v14[0], v7);
  unint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v0;
  aBlock[4] = sub_1001B2DA0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_100414918;
  char v11 = _Block_copy(aBlock);
  id v12 = v0;
  static DispatchQoS.unspecified.getter();
  v14[1] = _swiftEmptyArrayStorage;
  sub_1000AF580();
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, void))(v6 + 8))(v9, v14[0]);
  return swift_release();
}

uint64_t sub_1001B2D68()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001B2DA0()
{
  sub_1001AFECC(*(void **)(v0 + 16));
}

uint64_t sub_1001B2DB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 16)
      {
LABEL_13:
        sub_10006D144(a1, a2);
        uint64_t v11 = type metadata accessor for UUID();
        id v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
        uint64_t v13 = v11;
        uint64_t v14 = a3;
        uint64_t v15 = 1;
        goto LABEL_19;
      }
      if (v4)
      {
        if (v4 != 1)
        {
          uint64_t v16 = *(void *)(a1 + 16);
          swift_retain();
          swift_retain();
          if (!__DataStorage._bytes.getter())
          {
LABEL_28:
            __DataStorage._length.getter();
            __break(1u);
            JUMPOUT(0x1001B30C4);
          }
          if (!__OFSUB__(v16, __DataStorage._offset.getter()))
          {
            __DataStorage._length.getter();
            swift_release();
            swift_release();
            goto LABEL_18;
          }
          goto LABEL_25;
        }
        if ((int)a1 <= a1 >> 32)
        {
          if (!__DataStorage._bytes.getter())
          {
LABEL_27:
            __DataStorage._length.getter();
            __break(1u);
            goto LABEL_28;
          }
          if (!__OFSUB__((int)a1, __DataStorage._offset.getter()))
          {
            __DataStorage._length.getter();
            goto LABEL_18;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_18:
      UUID.init(uuid:)();
      sub_10006D144(a1, a2);
      uint64_t v17 = type metadata accessor for UUID();
      id v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
      uint64_t v13 = v17;
      uint64_t v14 = a3;
      uint64_t v15 = 0;
LABEL_19:
      return v12(v14, v15, 1, v13);
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t UUID.data()()
{
  uint64_t __src = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  UUID.uuid.getter();
  return sub_1001B32C8(&__src, 16);
}

uint64_t UUID.utf8Data(stringCase:)(char a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  char v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.uuidString.getter();
  if (a1) {
    String.uppercased()();
  }
  else {
    String.lowercased()();
  }
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v7 = String.data(using:allowLossyConversion:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t sub_1001B32C8(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_100088D7C(__src, &__src[a2]);
  }
  type metadata accessor for __DataStorage();
  swift_allocObject();
  __DataStorage.init(bytes:length:)();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  type metadata accessor for Data.RangeReference();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

unint64_t sub_1001B3380()
{
  unint64_t result = qword_1004579C0;
  if (!qword_1004579C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004579C0);
  }
  return result;
}

unsigned char *_s18UTF8DataStringCaseOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001B34A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UUID.UTF8DataStringCase()
{
  return &type metadata for UUID.UTF8DataStringCase;
}

uint64_t *sub_1001B34D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, NSObject *a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X8>)
{
  unint64_t v117 = a6;
  uint64_t v118 = a5;
  unint64_t v140 = a4;
  uint64_t v119 = a7;
  uint64_t v10 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v116 = (uint64_t)v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
  uint64_t v14 = __chkstk_darwin(v121, v13);
  uint64_t v115 = (uint64_t)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  uint64_t v120 = (char *)v107 - v17;
  sub_10006C51C(&qword_100457A60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100379160;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(void *)(inited + 40) = kSecClassGenericPassword;
  *(void *)(inited + 64) = v19;
  *(void *)(inited + 72) = kSecAttrAccount;
  *(void *)(inited + 80) = a1;
  *(void *)(inited + 88) = a2;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 112) = kSecAttrService;
  CFStringRef v20 = (id)kSecClass;
  CFStringRef v21 = (id)kSecClassGenericPassword;
  CFStringRef v22 = (id)kSecAttrAccount;
  swift_bridgeObjectRetain();
  CFStringRef v23 = (id)kSecAttrService;
  uint64_t v24 = a3;
  *(Swift::String *)(inited + 120) = Data.base64EncodedString(options:)(0);
  *(void *)(inited + 144) = &type metadata for String;
  *(void *)(inited + 152) = kSecAttrAccessGroup;
  *(void *)(inited + 160) = 0xD000000000000033;
  *(void *)(inited + 168) = 0x80000001003B6320;
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 192) = kSecAttrSynchronizable;
  *(void *)(inited + 224) = &type metadata for Bool;
  *(unsigned char *)(inited + 200) = 1;
  CFStringRef v25 = (id)kSecAttrAccessGroup;
  CFStringRef v26 = (id)kSecAttrSynchronizable;
  unint64_t v27 = sub_1001DB818(inited);
  if (qword_100453778 != -1) {
    swift_once();
  }
  swift_getObjectType();
  uint64_t v28 = v122;
  id v29 = sub_10029C100(v27, 1);
  if (v28)
  {
    swift_bridgeObjectRelease();
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E55C(v31, (uint64_t)qword_1004687D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v123 = swift_slowAlloc();
      *(_DWORD *)unint64_t v34 = 136315138;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      uint64_t v124 = sub_100290514(v35, v36, (uint64_t *)&v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Error querying regular keychain item : %s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10016FF34();
    swift_allocError();
    *uint64_t v45 = 26;
    swift_willThrow();
    return (uint64_t *)swift_errorRelease();
  }
  else
  {
    uint64_t v37 = (uint64_t)v29;
    unint64_t v38 = v30;
    swift_bridgeObjectRelease();
    if (v38 >> 60 == 15)
    {
      if (qword_100453768 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_10008E55C(v39, (uint64_t)qword_1004687D8);
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v40, v41))
      {
        os_log_type_t v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Recovery item not found (yet)", v42, 2u);
        swift_slowDealloc();
      }

      sub_10016FF34();
      swift_allocError();
      *uint64_t v43 = 17;
      return (uint64_t *)swift_willThrow();
    }
    else
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_10006D0EC(v37, v38);
      PropertyListDecoder.init()();
      sub_1001BBAA8(&qword_100457A68, (void (*)(uint64_t))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
      uint64_t v46 = (uint64_t)v120;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      uint64_t v47 = v119;
      sub_1001BBA40(v46, v119, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
      uint64_t v49 = *(void *)(v47 + 48);
      unint64_t v48 = *(void *)(v47 + 56);
      sub_10022510C((uint64_t)&v125);
      *(void *)&long long v123 = v49;
      *((void *)&v123 + 1) = v48;
      sub_10006D0EC(v49, v48);
      sub_10006D0EC(v49, v48);
      unint64_t v50 = sub_100188FB0((uint64_t)&v123, &v125);
      sub_10006D144(v123, *((unint64_t *)&v123 + 1));
      sub_10016FB80(&v126, &v139);
      sub_10016FBDC((uint64_t)&v139);
      uint64_t v138 = v127;
      sub_10016FC34((uint64_t)&v138);
      sub_100225EDC(v50, v128);
      uint64_t v122 = v37;
      sub_10006D144(v49, v48);
      long long v137 = v128[4];
      sub_100224FA0((uint64_t)&v129);
      long long v123 = v137;
      sub_100170740((uint64_t)&v137);
      sub_100170740((uint64_t)&v137);
      unint64_t v51 = sub_100188FB0((uint64_t)&v123, &v129);
      sub_10006D144(v123, *((unint64_t *)&v123 + 1));
      sub_10016FB80(&v130, &v136);
      sub_10016FBDC((uint64_t)&v136);
      uint64_t v135 = v131;
      sub_10016FC34((uint64_t)&v135);
      sub_1002268D0(v51, v132);
      uint64_t v52 = v122;
      sub_100170770((uint64_t)&v137);
      sub_1001B6E74((uint64_t *)v128);
      uint64_t v53 = v133;
      unint64_t v54 = v134;
      sub_10006D0EC(v133, v134);
      sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
      unint64_t v55 = v117;
      LOBYTE(v51) = sub_100088AE4(v53, v54, v118, v117);
      uint64_t v114 = v53;
      sub_10006D144(v53, v54);
      if (v51)
      {
        sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
        sub_100075868(v52, v38);
        sub_100075868(v52, v38);
        return sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
      }
      else
      {
        unint64_t v111 = v54;
        if (qword_100453768 != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        uint64_t v57 = v24;
        uint64_t v58 = sub_10008E55C(v56, (uint64_t)qword_1004687D8);
        os_log_type_t v59 = v140;
        sub_10006D0EC(v24, (unint64_t)v140);
        uint64_t v60 = v118;
        sub_10006D0EC(v118, v55);
        sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D0EC);
        uint64_t v112 = v57;
        sub_10006D0EC(v57, (unint64_t)v59);
        sub_10006D0EC(v60, v55);
        uint64_t v120 = (char *)v58;
        unint64_t v61 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        int v63 = v62;
        unint64_t v113 = v61;
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v64 = swift_slowAlloc();
          int v110 = v63;
          uint64_t v65 = v64;
          uint64_t v109 = swift_slowAlloc();
          *(void *)&long long v123 = v109;
          *(_DWORD *)uint64_t v65 = 136315650;
          v107[1] = v65 + 4;
          uint64_t v66 = v112;
          unint64_t v67 = sub_10023CDF4(v112, (unint64_t)v59);
          id v108 = 0;
          uint64_t v124 = (uint64_t)v67;
          uint64_t v68 = sub_10006C51C((uint64_t *)&unk_100455EA0);
          unint64_t v69 = sub_1000756D0();
          v107[2] = v68;
          v107[3] = v69;
          uint64_t v70 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v72 = v71;
          swift_bridgeObjectRelease();
          uint64_t v124 = sub_100290514(v70, v72, (uint64_t *)&v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v66, (unint64_t)v59);
          sub_10006D144(v66, (unint64_t)v59);
          *(_WORD *)(v65 + 12) = 2080;
          uint64_t v73 = v108;
          uint64_t v74 = sub_10023CDF4(v114, v111);
          unint64_t v140 = v73;
          uint64_t v124 = (uint64_t)v74;
          uint64_t v75 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v77 = v76;
          swift_bridgeObjectRelease();
          uint64_t v124 = sub_100290514(v75, v77, (uint64_t *)&v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
          sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
          uint64_t v78 = (uint8_t *)v65;
          *(_WORD *)(v65 + 22) = 2080;
          uint64_t v114 = v65 + 24;
          unint64_t v79 = v117;
          uint64_t v80 = v118;
          uint64_t v124 = (uint64_t)sub_10023CDF4(v118, v117);
          uint64_t v81 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v83 = v82;
          swift_bridgeObjectRelease();
          uint64_t v124 = sub_100290514(v81, v83, (uint64_t *)&v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v52 = v122;
          swift_bridgeObjectRelease();
          sub_10006D144(v80, v79);
          sub_10006D144(v80, v79);
          uint64_t v84 = v113;
          _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v110, "Recovery blob for %s has DSID %s accounts has %s", v78, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v85 = v112;
          sub_10006D144(v112, (unint64_t)v59);
          sub_10006D144(v85, (unint64_t)v59);
          sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
          sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
          uint64_t v86 = v118;
          sub_10006D144(v118, v55);
          sub_10006D144(v86, v55);
        }
        sub_10006D0EC(v52, v38);
        sub_10006D0EC(v52, v38);
        Class v87 = Logger.logObject.getter();
        os_log_type_t v88 = static os_log_type_t.error.getter();
        unint64_t v140 = v87;
        if (os_log_type_enabled(v87, v88))
        {
          id v89 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v123 = swift_slowAlloc();
          *(_DWORD *)id v89 = 136315138;
          Swift::String v90 = Data.base64EncodedString(options:)(0);
          uint64_t v124 = sub_100290514(v90._countAndFlagsBits, (unint64_t)v90._object, (uint64_t *)&v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v91 = v119;
          swift_bridgeObjectRelease();
          sub_100075868(v52, v38);
          sub_100075868(v52, v38);
          unint64_t v92 = v140;
          _os_log_impl((void *)&_mh_execute_header, v140, v88, "Recovery blob: %s", v89, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100075868(v52, v38);
          sub_100075868(v52, v38);

          uint64_t v91 = v119;
        }
        uint64_t v93 = v115;
        sub_1001B6FF0(v91, v115, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
        Class v94 = Logger.logObject.getter();
        os_log_type_t v95 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v94, v95))
        {
          NSString v96 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v123 = swift_slowAlloc();
          *(_DWORD *)NSString v96 = 136315138;
          unint64_t v140 = (v96 + 4);
          Swift::String v97 = Data.base64EncodedString(options:)(0);
          uint64_t v124 = sub_100290514(v97._countAndFlagsBits, (unint64_t)v97._object, (uint64_t *)&v123);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v91 = v119;
          swift_bridgeObjectRelease();
          sub_1001BB9E0(v93, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Encrypted blob: %s", v96, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1001BB9E0(v93, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
        }

        uint64_t v98 = v122;
        uint64_t v99 = v116;
        sub_1001B7058(v91 + *(int *)(v121 + 36), v116);
        uint64_t v100 = type metadata accessor for CreationMetadata(0);
        int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48))(v99, 1, v100);
        sub_1001B70C0(v99);
        if (v101 == 1)
        {
          sub_10016FF34();
          swift_allocError();
          char v103 = 29;
        }
        else
        {
          Class v104 = self;
          NSString v105 = String._bridgeToObjectiveC()();
          NSString v106 = String._bridgeToObjectiveC()();
          [v104 requestTapToRadar:v105 client:v106];

          sub_10016FF34();
          swift_allocError();
          char v103 = 33;
        }
        *unint64_t v102 = v103;
        swift_willThrow();
        sub_100075868(v98, v38);
        sub_100075868(v98, v38);
        sub_1001B6F48(v132, (void (*)(uint64_t, uint64_t))sub_10006D144);
        return (uint64_t *)sub_1001BB9E0(v91, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
      }
    }
  }
}

uint64_t sub_1001B4828()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_1004687D8);
  sub_10008E55C(v0, (uint64_t)qword_1004687D8);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001B48A0()
{
  uint64_t v0 = type metadata accessor for SESDataTask();
  uint64_t result = swift_allocObject();
  qword_100468808 = v0;
  unk_100468810 = &off_100412868;
  qword_1004687F0 = result;
  return result;
}

id sub_1001B48EC()
{
  id result = [self sharedInstance];
  qword_100468818 = (uint64_t)result;
  return result;
}

uint64_t sub_1001B4928(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_100457B30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1001BB98C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 32);
    char v12 = 2;
    sub_1001A6A8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 48);
    char v12 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
    LOBYTE(v13) = 4;
    type metadata accessor for SESPeerIdentityData(0);
    sub_1001BBAA8(&qword_100456528, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v13) = 5;
    type metadata accessor for CreationMetadata(0);
    sub_1001BBAA8(&qword_1004575A0, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001B4C04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = sub_10006C51C(&qword_1004572C0);
  __chkstk_darwin(v3 - 8, v4);
  unint64_t v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for SESPeerIdentityData(0);
  __chkstk_darwin(v32, v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = sub_10006C51C(&qword_100457B40);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v33, v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t *)&v16[*(int *)(v14 + 36)];
  sub_1001A41BC(v17);
  uint64_t v18 = type metadata accessor for CreationMetadata(0);
  uint64_t v19 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v35 = v17;
  v19(v17, 0, 1, v18);
  uint64_t v20 = a1[3];
  unint64_t v34 = a1;
  sub_100075908(a1, v20);
  sub_1001BB98C();
  uint64_t v21 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    uint64_t v24 = (uint64_t)v35;
    sub_10007594C((uint64_t)v34);
    return sub_1001B70C0(v24);
  }
  else
  {
    uint64_t v36 = v18;
    uint64_t v22 = (uint64_t)v8;
    uint64_t v23 = v31;
    LOBYTE(v37) = 0;
    *(void *)uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v16 + 1) = v25;
    LOBYTE(v37) = 1;
    *((void *)v16 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v16 + 3) = v26;
    char v38 = 2;
    sub_1001A6880();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_OWORD *)v16 + 2) = v37;
    char v38 = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *((_OWORD *)v16 + 3) = v37;
    LOBYTE(v37) = 4;
    sub_1001BBAA8(&qword_100456490, (void (*)(uint64_t))type metadata accessor for SESPeerIdentityData);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_1001BBA40(v22, (uint64_t)&v16[*(int *)(v12 + 32)], type metadata accessor for SESPeerIdentityData);
    LOBYTE(v37) = 5;
    sub_1001BBAA8(&qword_100457560, (void (*)(uint64_t))type metadata accessor for CreationMetadata);
    uint64_t v27 = (uint64_t)v30;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v11, v33);
    sub_1001BBAF0(v27, (uint64_t)v35);
    sub_1001B6FF0((uint64_t)v16, v29, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
    sub_10007594C((uint64_t)v34);
    return sub_1001BB9E0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  }
}

unint64_t sub_1001B51F0()
{
  unint64_t result = 0x6E6F69676572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x656D614E77656976;
      break;
    case 2:
      unint64_t result = 0x444955556B6C74;
      break;
    case 3:
      unint64_t result = 0x6574707972636E65;
      break;
    case 4:
      unint64_t result = 0x746E656449637273;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001B52CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001BBD74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B52F4(uint64_t a1)
{
  unint64_t v2 = sub_1001BB98C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B5330(uint64_t a1)
{
  unint64_t v2 = sub_1001BB98C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001B536C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001B4C04(a1, a2);
}

uint64_t sub_1001B5384(void *a1)
{
  return sub_1001B4928(a1);
}

uint64_t sub_1001B539C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100455F78 + dword_100455F78);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1001B5450;
  return v7(a1, a2);
}

uint64_t sub_1001B5450(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *v3;
  *(void *)(*v3 + 88) = v2;
  swift_task_dealloc();
  if (v2)
  {
    return _swift_task_switch(sub_1001B55C4, 0, 0);
  }
  else
  {
    uint64_t v8 = (*(void *)(v6 + 88) != 0) << 8;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
    return v9(a1, a2, v8);
  }
}

uint64_t sub_1001B55C4()
{
  *(void *)(v0 + 64) = *(void *)(v0 + 88);
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    unint64_t v2 = *(void *)(v0 + 40);
    unint64_t v1 = *(void *)(v0 + 48);
    int v3 = *(unsigned __int8 *)(v0 + 56);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    swift_getErrorValue();
    v4._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    unint64_t v2 = 0xD000000000000015;
    unint64_t v1 = 0x80000001003B6500;
    int v3 = 3;
  }
  uint64_t v5 = v3 | ((*(void *)(v0 + 88) != 0) << 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t, unint64_t, uint64_t))(v0 + 8);
  return v6(v2, v1, v5);
}

void sub_1001B572C()
{
  swift_beginAccess();
  if (byte_1004579E9 == 1 && !SESInternalVariant()) {
    goto LABEL_5;
  }
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2)
  {
    uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    NSString v4 = String._bridgeToObjectiveC()();
    [v2 setValue:v3 forKey:v4];

    swift_unknownObjectRelease();
LABEL_5:
    swift_endAccess();
    return;
  }
  __break(1u);
}

void sub_1001B5844(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  long long v25 = *(_OWORD *)&qword_1004579C8;
  long long v26 = *(_OWORD *)&qword_1004579D8;
  sub_100079AE8((uint64_t)&v25);
  sub_100079AE8((uint64_t)&v26);
  sub_1001AF4B4();
  char v5 = v4;
  sub_100079B14((uint64_t)&v25);
  sub_100079B14((uint64_t)&v26);
  if ((v5 & 1) == 0)
  {
    sub_10006C51C(&qword_100457A60);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100379160;
    *(void *)(inited + 32) = kSecClass;
    type metadata accessor for CFString(0);
    *(void *)(inited + 40) = kSecClassGenericPassword;
    *(void *)(inited + 64) = v7;
    *(void *)(inited + 72) = kSecAttrAccount;
    *(void *)(inited + 80) = a1;
    *(void *)(inited + 88) = a2;
    *(void *)(inited + 104) = &type metadata for String;
    *(void *)(inited + 112) = kSecAttrService;
    CFStringRef v8 = (id)kSecClass;
    CFStringRef v9 = (id)kSecClassGenericPassword;
    CFStringRef v10 = (id)kSecAttrAccount;
    swift_bridgeObjectRetain();
    CFStringRef v11 = (id)kSecAttrService;
    *(Swift::String *)(inited + 120) = Data.base64EncodedString(options:)(0);
    *(void *)(inited + 144) = &type metadata for String;
    *(void *)(inited + 152) = kSecAttrAccessGroup;
    *(void *)(inited + 160) = 0xD000000000000033;
    *(void *)(inited + 168) = 0x80000001003B6320;
    *(void *)(inited + 184) = &type metadata for String;
    *(void *)(inited + 192) = kSecAttrSynchronizable;
    *(void *)(inited + 224) = &type metadata for Bool;
    *(unsigned char *)(inited + 200) = 1;
    CFStringRef v12 = (id)kSecAttrAccessGroup;
    CFStringRef v13 = (id)kSecAttrSynchronizable;
    unint64_t v14 = sub_1001DB818(inited);
    if (qword_100453778 != -1) {
      swift_once();
    }
    uint64_t v15 = (void *)qword_100468818;
    sub_1002BB714(v14);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = 0;
    LODWORD(v15) = [v15 updateToApplePayView:isa error:&v27];

    if (v15)
    {
      id v17 = v27;
    }
    else
    {
      id v18 = v27;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100453768 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E55C(v19, (uint64_t)qword_1004687D8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        id v27 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315138;
        swift_getErrorValue();
        uint64_t v23 = Error.localizedDescription.getter();
        sub_100290514(v23, v24, (uint64_t *)&v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to update recovery blob %s", v22, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
    }
    sub_1001B572C();
  }
}

uint64_t sub_1001B5C94(char a1, uint64_t a2, unint64_t a3)
{
  if (qword_100453768 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10008E55C(v6, (uint64_t)qword_1004687D8);
  swift_bridgeObjectRetain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    CFStringRef v9 = (uint8_t *)swift_slowAlloc();
    *(void *)&v25[0] = swift_slowAlloc();
    *(_DWORD *)CFStringRef v9 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v28 = sub_100290514(a2, a3, (uint64_t *)v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Encrypting towards region %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if ((a1 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if ((a1 & 1) == 0)
    {
LABEL_5:
      v25[0] = unk_100457A28;
      v25[1] = unk_100457A38;
      __int16 v26 = word_100457A48;
      long long v27 = unk_100457A28;
      long long v28 = unk_100457A38;
      sub_100079AE8((uint64_t)&v27);
      sub_100079AE8((uint64_t)&v28);
      sub_1001AF4B4();
      char v11 = v10;
      sub_100079B14((uint64_t)&v27);
      sub_100079B14((uint64_t)&v28);
      sub_10006C51C(&qword_100459B10);
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_1003782A0;
      if (v11)
      {
        if (qword_1004538B8 != -1) {
          swift_once();
        }
        uint64_t v13 = qword_1004689A0;
        unint64_t v14 = *(void *)algn_1004689A8;
        *(void *)(v12 + 32) = qword_1004689A0;
        *(void *)(v12 + 40) = v14;
        sub_10006D0EC(v13, v14);
        if (qword_1004538C0 != -1) {
          swift_once();
        }
        uint64_t v15 = &qword_1004689B0;
      }
      else
      {
        if (qword_1004538B8 != -1) {
          swift_once();
        }
        uint64_t v18 = qword_1004689A0;
        unint64_t v19 = *(void *)algn_1004689A8;
        *(void *)(v12 + 32) = qword_1004689A0;
        *(void *)(v12 + 40) = v19;
        sub_10006D0EC(v18, v19);
        if (qword_1004538C8 != -1) {
          swift_once();
        }
        uint64_t v15 = &qword_1004689C0;
      }
      goto LABEL_30;
    }
  }
  if (a2 == 20035 && a3 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    sub_10006C51C(&qword_100459B10);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1003782A0;
    if (qword_1004538D0 != -1) {
      swift_once();
    }
    uint64_t v16 = qword_1004689D0;
    unint64_t v17 = *(void *)algn_1004689D8;
    *(void *)(v12 + 32) = qword_1004689D0;
    *(void *)(v12 + 40) = v17;
    sub_10006D0EC(v16, v17);
    if (qword_1004538E0 != -1) {
      swift_once();
    }
    uint64_t v15 = &qword_1004689F0;
  }
  else
  {
    sub_10006C51C(&qword_100459B10);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1003782A0;
    if (qword_1004538D0 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_1004689D0;
    unint64_t v21 = *(void *)algn_1004689D8;
    *(void *)(v12 + 32) = qword_1004689D0;
    *(void *)(v12 + 40) = v21;
    sub_10006D0EC(v20, v21);
    if (qword_1004538D8 != -1) {
      swift_once();
    }
    uint64_t v15 = &qword_1004689E0;
  }
LABEL_30:
  uint64_t v22 = *v15;
  unint64_t v23 = v15[1];
  *(void *)(v12 + 48) = *v15;
  *(void *)(v12 + 56) = v23;
  sub_10006D0EC(v22, v23);
  return v12;
}

id sub_1001B6144(void *a1, __CFString *a2, __CFString *a3, uint64_t a4, unint64_t a5, unint64_t a6)
{
  unint64_t v94 = a6;
  unint64_t v99 = a5;
  uint64_t v11 = type metadata accessor for SEKeySyncRecovery.RecoveryRecord();
  __chkstk_darwin(v11, v12);
  Swift::String v97 = (uint64_t *)((char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  id result = [self currentLocale];
  if (!result)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v15 = result;
  os_log_type_t v95 = a2;
  NSString v96 = a3;
  id v16 = [result countryCode];

  if (v16)
  {
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;
  }
  else
  {
    unint64_t v20 = 0xE200000000000000;
    uint64_t v18 = 21333;
  }
  id v21 = sub_100056FD0(a1, v17);
  char v22 = [v21 isProd];

  uint64_t v23 = sub_1001B5C94(v22, v18, v20);
  uint64_t v24 = a4;
  uint64_t v98 = a4;
  unint64_t v25 = v20;
  unint64_t v26 = v99;
  id v27 = sub_100185B20(a1, v24, v99, v23);
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10016FF34();
    swift_allocError();
    unsigned char *v29 = 16;
    swift_willThrow();
    return (id)swift_errorRelease();
  }
  uint64_t v30 = (uint64_t)v27;
  unint64_t v31 = v28;
  swift_bridgeObjectRelease();
  uint64_t v32 = *(int *)(v11 + 32);
  unint64_t v92 = v11;
  uint64_t v33 = v97;
  sub_1001B6FF0(v94, (uint64_t)v97 + v32, type metadata accessor for SESPeerIdentityData);
  unint64_t v34 = (uint64_t *)((char *)v33 + *(int *)(v11 + 36));
  sub_10006D0EC(v30, v31);
  swift_bridgeObjectRetain();
  uint64_t v93 = v30;
  uint64_t v35 = v18;
  uint64_t v36 = v96;
  swift_bridgeObjectRetain();
  unint64_t v94 = v31;
  uint64_t v37 = v98;
  sub_10006D0EC(v98, v26);
  sub_1001A41BC(v34);
  uint64_t v38 = type metadata accessor for CreationMetadata(0);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v34, 0, 1, v38);
  uint64_t v91 = v35;
  *uint64_t v33 = v35;
  v33[1] = v25;
  void v33[2] = (uint64_t)v95;
  v33[3] = (uint64_t)v36;
  v33[4] = v37;
  v33[5] = v26;
  unint64_t v39 = v94;
  v33[6] = v93;
  v33[7] = v39;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  sub_1001BBAA8(&qword_100457A50, (void (*)(uint64_t))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
  uint64_t v40 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v85 = v25;
  uint64_t v41 = v40;
  uint64_t v90 = v40;
  unint64_t v43 = v42;
  swift_release();
  sub_10006C51C(&qword_100455670);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10037B540;
  CFStringRef v101 = kSecClass;
  id v89 = (id)(id)kSecClass;
  sub_10006D0EC(v41, v43);
  type metadata accessor for CFString(0);
  unint64_t v92 = v43;
  uint64_t v46 = v45;
  sub_1001BBAA8((unint64_t *)&qword_100453E48, type metadata accessor for CFString);
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = v46;
  *(void *)(inited + 72) = kSecClassGenericPassword;
  CFStringRef v101 = kSecAttrAccessible;
  os_log_type_t v88 = (id)(id)kSecAttrAccessible;
  CFStringRef v47 = (id)kSecClassGenericPassword;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = v46;
  *(void *)(inited + 144) = kSecAttrAccessibleAfterFirstUnlock;
  CFStringRef v101 = kSecAttrAccount;
  Class v87 = (id)(id)kSecAttrAccount;
  CFStringRef v48 = (id)kSecAttrAccessibleAfterFirstUnlock;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 240) = &type metadata for String;
  uint64_t v49 = v96;
  *(void *)(inited + 216) = v95;
  *(void *)(inited + 224) = v49;
  CFStringRef v101 = kSecAttrService;
  unint64_t v50 = (id)kSecAttrService;
  swift_bridgeObjectRetain();
  NSString v96 = v50;
  AnyHashable.init<A>(_:)();
  Swift::String v51 = Data.base64EncodedString(options:)(0);
  *(void *)(inited + 312) = &type metadata for String;
  *(Swift::String *)(inited + 288) = v51;
  CFStringRef v101 = kSecAttrAccessGroup;
  uint64_t v52 = (id)(id)kSecAttrAccessGroup;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 384) = &type metadata for String;
  *(void *)(inited + 360) = 0xD000000000000033;
  *(void *)(inited + 368) = 0x80000001003B6320;
  CFStringRef v101 = kSecAttrSynchronizable;
  os_log_type_t v95 = (id)(id)kSecAttrSynchronizable;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 456) = &type metadata for Bool;
  *(unsigned char *)(inited + 432) = 1;
  CFStringRef v101 = kSecValueData;
  uint64_t v86 = (id)(id)kSecValueData;
  AnyHashable.init<A>(_:)();
  uint64_t v53 = v90;
  unint64_t v54 = v92;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v53, v54);
  id result = (id)sub_1001B6E34();
  *(void *)(inited + 528) = result;
  *(void *)(inited + 504) = isa;
  if (!kSecAttrSyncViewHint) {
    goto LABEL_25;
  }
  CFStringRef v101 = kSecAttrSyncViewHint;
  uint64_t v56 = (id)(id)kSecAttrSyncViewHint;
  id result = (id)AnyHashable.init<A>(_:)();
  if (!kSecAttrViewHintApplePay)
  {
LABEL_26:
    __break(1u);
    return result;
  }
  id v57 = kSecAttrViewHintApplePay;

  *(void *)(inited + 600) = v46;
  *(void *)(inited + 576) = v57;
  sub_1001DB24C(inited);
  uint64_t v59 = v98;
  unint64_t v58 = v99;
  if (qword_100453778 != -1) {
    swift_once();
  }
  uint64_t v60 = (void *)qword_100468818;
  Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned int v62 = [v60 addItem:v61];

  if (v62)
  {
    swift_bridgeObjectRelease();
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_10008E55C(v63, (uint64_t)qword_1004687D8);
    sub_10006D0EC(v59, v58);
    sub_10006D0EC(v59, v58);
    uint64_t v64 = Logger.logObject.getter();
    os_log_type_t v65 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v65))
    {
      uint64_t v66 = swift_slowAlloc();
      NSString v96 = (__CFString *)swift_slowAlloc();
      CFStringRef v101 = v96;
      *(_DWORD *)uint64_t v66 = 136315394;
      Swift::String v67 = Data.base64EncodedString(options:)(0);
      uint64_t v100 = sub_100290514(v67._countAndFlagsBits, (unint64_t)v67._object, (uint64_t *)&v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(v59, v58);
      sub_10006D144(v59, v58);
      *(_WORD *)(v66 + 12) = 1024;
      LODWORD(v100) = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed to add recovery record for %s status %d", (uint8_t *)v66, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10006D144(v59, v58);
      sub_10006D144(v59, v58);
    }

    unint64_t v83 = v94;
    sub_10016FF34();
    swift_allocError();
    *uint64_t v84 = 25;
    swift_willThrow();
    sub_10006D144(v93, v83);
    sub_10006D144(v90, v92);
  }
  else
  {
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    sub_10008E55C(v68, (uint64_t)qword_1004687D8);
    sub_10006D0EC(v59, v58);
    unint64_t v69 = v85;
    swift_bridgeObjectRetain();
    sub_10006D0EC(v59, v58);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.info.getter();
    int v72 = v71;
    BOOL v73 = os_log_type_enabled(v70, v71);
    uint64_t v74 = v91;
    if (v73)
    {
      uint64_t v75 = swift_slowAlloc();
      LODWORD(v96) = v72;
      uint64_t v76 = v75;
      os_log_type_t v95 = (__CFString *)swift_slowAlloc();
      CFStringRef v101 = v95;
      *(_DWORD *)uint64_t v76 = 136315394;
      id v89 = (__CFString *)v70;
      swift_bridgeObjectRetain();
      uint64_t v100 = sub_100290514(v74, v69, (uint64_t *)&v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v76 + 12) = 2080;
      uint64_t v91 = v76 + 14;
      uint64_t v100 = (uint64_t)sub_10023CDF4(v59, v58);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_1000756D0();
      BidirectionalCollection<>.joined(separator:)();
      swift_bridgeObjectRelease();
      sub_1002406B4(8);
      unint64_t v77 = v58;
      swift_bridgeObjectRelease();
      uint64_t v78 = static String._fromSubstring(_:)();
      unint64_t v80 = v79;
      swift_bridgeObjectRelease();
      uint64_t v100 = sub_100290514(v78, v80, (uint64_t *)&v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = v98;
      sub_10006D144(v98, v77);
      sub_10006D144(v81, v77);
      unint64_t v82 = v89;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v89, (os_log_type_t)v96, "Stored recovery record region %s TLK %s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_10006D144(v90, v92);
      sub_10006D144(v93, v94);
    }
    else
    {
      sub_10006D144(v90, v92);
      sub_10006D144(v93, v94);

      sub_10006D144(v59, v58);
      sub_10006D144(v59, v58);
      swift_bridgeObjectRelease_n();
    }
  }
  return (id)sub_1001BB9E0((uint64_t)v97, (uint64_t (*)(void))type metadata accessor for SEKeySyncRecovery.RecoveryRecord);
}

uint64_t type metadata accessor for SEKeySyncRecovery.RecoveryRecord()
{
  uint64_t result = qword_100457AE8;
  if (!qword_100457AE8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1001B6E34()
{
  unint64_t result = qword_100457A58;
  if (!qword_100457A58)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100457A58);
  }
  return result;
}

uint64_t *sub_1001B6E74(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  uint64_t v10 = a1[10];
  unint64_t v12 = a1[11];
  unint64_t v13 = a1[13];
  uint64_t v16 = a1[14];
  uint64_t v14 = a1[12];
  unint64_t v15 = a1[15];
  sub_10006D144(*a1, a1[1]);
  sub_10006D144(v2, v3);
  sub_10006D144(v4, v5);
  sub_10006D144(v6, v7);
  sub_10006D144(v8, v9);
  sub_10006D144(v10, v12);
  sub_10006D144(v14, v13);
  sub_10006D144(v16, v15);
  return a1;
}

uint64_t *sub_1001B6F48(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  return a1;
}

uint64_t sub_1001B6FF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001B7058(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_1004572C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B70C0(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_1004572C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001B7120(char a1, uint64_t a2, uint64_t a3)
{
  v18[0] = unk_1004579F0;
  v18[1] = unk_100457A00;
  void v18[2] = xmmword_100457A10;
  char v19 = byte_100457A20;
  sub_1001172B8((uint64_t)v18);
  sub_1001AF88C();
  uint64_t v7 = v6;
  unint64_t v9 = v8;
  sub_100117304((uint64_t)v18);
  if (v9)
  {
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004687D8);
    swift_bridgeObjectRetain_n();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)unint64_t v13 = 136315138;
      swift_bridgeObjectRetain();
      sub_100290514(v7, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Overriding URL via defaults - %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    BOOL v15 = a2 == 20035 && a3 == 0xE200000000000000;
    if (a1)
    {
      if (v15)
      {
        return 0xD000000000000038;
      }
      else if (_stringCompareWithSmolCheck(_:_:expecting:)())
      {
        return 0xD000000000000038;
      }
      else
      {
        return 0xD000000000000035;
      }
    }
    else
    {
      uint64_t v7 = 0xD000000000000041;
      if (!v15 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0xD000000000000039;
      }
    }
  }
  return v7;
}

void sub_1001B73DC(uint64_t a1, void *a2, char a3)
{
  if (a3)
  {
    if (a3 == 1)
    {
      uint64_t v5 = self;
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = a1;
      v6._object = a2;
      String.append(_:)(v6);
      NSString v7 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v12 = String._bridgeToObjectiveC()();
      [v5 requestTapToRadar:v7 client:v12];
    }
  }
  else
  {
    unint64_t v8 = self;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    [v8 requestTapToRadar:v10 client:v11];
  }
}

uint64_t sub_1001B75D4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 304) = a1;
  *(void *)(v2 + 312) = a2;
  return _swift_task_switch(sub_1001B7664, 0, 0);
}

uint64_t sub_1001B7664()
{
  uint64_t v59 = v0;
  NSString v1 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[36] = 0;
  id v3 = [v1 JSONObjectWithData:isa options:0 error:v0 + 36];

  uint64_t v4 = (void *)v0[36];
  if (!v3)
  {
    id v27 = v4;
    _convertNSErrorToError(_:)();

LABEL_19:
    swift_willThrow();
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_10008E55C(v29, (uint64_t)qword_1004687D8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315138;
      swift_getErrorValue();
      uint64_t v33 = Error.localizedDescription.getter();
      v0[32] = sub_100290514(v33, v34, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to decode JSON object %s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v35 = v0[38];
    unint64_t v36 = v0[39];
    sub_10006D0EC(v35, v36);
    sub_10006D0EC(v35, v36);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v41 = v0[38];
    unint64_t v40 = v0[39];
    if (v39)
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)unint64_t v42 = 136315138;
      Swift::String v43 = Data.base64EncodedString(options:)(0);
      v0[34] = sub_100290514(v43._countAndFlagsBits, (unint64_t)v43._object, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(v41, v40);
      sub_10006D144(v41, v40);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s", v42, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10006D144(v0[38], v0[39]);
      sub_10006D144(v41, v40);
    }

    sub_10016FF34();
    swift_allocError();
    *int v44 = 6;
    swift_willThrow();
    swift_errorRelease();
    goto LABEL_30;
  }
  uint64_t v5 = v0 + 31;
  id v6 = v4;
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10006C51C(&qword_100457240);
  if (!swift_dynamicCast())
  {
    sub_10016FF34();
    swift_allocError();
    unsigned char *v28 = 6;
    goto LABEL_19;
  }
  uint64_t v7 = *v5;
  if (!*(void *)(*v5 + 16)) {
    goto LABEL_13;
  }
  uint64_t v8 = sub_1002C0AD0(0x6570706172776552, 0xED0000626F6C4264);
  if ((v9 & 1) == 0) {
    goto LABEL_13;
  }
  sub_1000AA580(*(void *)(v7 + 56) + 32 * v8, (uint64_t)(v0 + 2));
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v10 = sub_10011FE64(v0[28], v0[29]);
  v0[40] = v10;
  v0[41] = v11;
  if (v11 >> 60 == 15) {
    goto LABEL_13;
  }
  uint64_t v12 = v10;
  unint64_t v13 = v11;
  if (!*(void *)(v7 + 16)
    || (uint64_t v14 = sub_1002C0AD0(0xD000000000000012, 0x80000001003B64C0), (v15 & 1) == 0)
    || (sub_1000AA580(*(void *)(v7 + 56) + 32 * v14, (uint64_t)(v0 + 10)), (swift_dynamicCast() & 1) == 0)
    || (uint64_t v16 = sub_10011FE64(v0[24], v0[25]), v0[42] = v16, v0[43] = v17, v17 >> 60 == 15))
  {
    uint64_t v18 = v12;
    unint64_t v19 = v13;
LABEL_12:
    sub_100075868(v18, v19);
LABEL_13:
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E55C(v20, (uint64_t)qword_1004687D8);
    swift_bridgeObjectRetain();
    id v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v24 = Dictionary.Keys.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      v0[30] = sub_100290514(v24, v26, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing or malformed response %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_10016FF34();
    swift_allocError();
    *uint64_t v45 = 18;
    swift_willThrow();
LABEL_30:
    uint64_t v46 = (uint64_t (*)(void))v0[1];
    return v46();
  }
  uint64_t v48 = v16;
  unint64_t v49 = v17;
  if (!*(void *)(v7 + 16) || (uint64_t v50 = sub_1002C0AD0(0xD00000000000001ALL, 0x80000001003B64E0), (v51 & 1) == 0))
  {
    sub_100075868(v12, v13);
    uint64_t v18 = v48;
    unint64_t v19 = v49;
    goto LABEL_12;
  }
  sub_1000AA580(*(void *)(v7 + 56) + 32 * v50, (uint64_t)(v0 + 6));
  if ((swift_dynamicCast() & 1) == 0 || (v0[44] = sub_10011FE64(v0[26], v0[27]), v0[45] = v52, v52 >> 60 == 15))
  {
    sub_100075868(v12, v13);
    sub_100075868(v48, v49);
    goto LABEL_13;
  }
  swift_bridgeObjectRelease();
  if (qword_100453768 != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  v0[46] = sub_10008E55C(v53, (uint64_t)qword_1004687D8);
  unint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Got response data for rewrap, asking for SE", v56, 2u);
    swift_slowDealloc();
  }

  if (qword_1004536F8 != -1) {
    swift_once();
  }
  id v57 = (void *)swift_task_alloc();
  v0[47] = v57;
  *id v57 = v0;
  v57[1] = sub_1001B8064;
  return sub_1001516F8();
}

uint64_t sub_1001B8064(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 384) = a1;
  *(void *)(v3 + 392) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001B8584;
  }
  else {
    uint64_t v4 = sub_1001B81A4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001B81A4()
{
  uint64_t v37 = v0;
  uint64_t v1 = (void *)v0[48];
  uint64_t v2 = v0[49];
  uint64_t v4 = v0[44];
  unint64_t v3 = v0[45];
  uint64_t v6 = v0[42];
  unint64_t v5 = v0[43];
  uint64_t v8 = v0[40];
  unint64_t v7 = v0[41];
  sub_10006C51C(&qword_100459B10);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1003782A0;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + 40) = v3;
  *(void *)(v9 + 48) = v6;
  *(void *)(v9 + 56) = v5;
  sub_1000758F4(v4, v3);
  sub_1000758F4(v6, v5);
  sub_1001866FC(v1, v8, v7, v9);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      v0[37] = sub_100290514(v13, v14, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to import rewrapped server TLK : %s", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v26 = (void *)v0[48];
    uint64_t v28 = v0[44];
    unint64_t v27 = v0[45];
    uint64_t v30 = v0[42];
    unint64_t v29 = v0[43];
    uint64_t v31 = v0[40];
    unint64_t v35 = v0[41];
    sub_10016FF34();
    swift_allocError();
    *uint64_t v32 = 19;
    swift_willThrow();
    swift_errorRelease();

    sub_100075868(v28, v27);
    sub_100075868(v30, v29);
    sub_100075868(v31, v35);
    uint64_t v33 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = (void *)v0[48];
    uint64_t v19 = v0[44];
    unint64_t v20 = v0[45];
    uint64_t v22 = v0[42];
    unint64_t v21 = v0[43];
    uint64_t v24 = v0[40];
    unint64_t v23 = v0[41];
    if (v17)
    {
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully imported rewrapped server TLK", v25, 2u);
      swift_slowDealloc();
      sub_100075868(v24, v23);

      sub_100075868(v22, v21);
      sub_100075868(v19, v20);
    }
    else
    {
      sub_100075868(v0[40], v0[41]);
      sub_100075868(v22, v21);
      sub_100075868(v19, v20);
    }
    uint64_t v33 = (uint64_t (*)(void))v0[1];
  }
  return v33();
}

uint64_t sub_1001B8584()
{
  uint64_t v1 = v0[42];
  unint64_t v2 = v0[43];
  uint64_t v4 = v0[40];
  unint64_t v3 = v0[41];
  sub_100075868(v0[44], v0[45]);
  sub_100075868(v1, v2);
  sub_100075868(v4, v3);
  unint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_1001B8644(uint64_t a1, uint64_t a2, char a3)
{
  *(unsigned char *)(v3 + 426) = a3;
  *(void *)(v3 + 312) = a1;
  *(void *)(v3 + 320) = a2;
  sub_10006C51C(&qword_100455978);
  *(void *)(v3 + 328) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for URLRequest();
  *(void *)(v3 + 336) = v4;
  *(void *)(v3 + 344) = *(void *)(v4 - 8);
  *(void *)(v3 + 352) = swift_task_alloc();
  return _swift_task_switch(sub_1001B8738, 0, 0);
}

uint64_t sub_1001B8738()
{
  uint64_t v74 = v0;
  uint64_t v1 = v0[39];
  uint64_t v65 = v0[40];
  uint64_t v68 = v1;
  sub_10006C51C(&qword_1004587F0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100379160;
  *(void *)(inited + 32) = 0xD000000000000017;
  *(void *)(inited + 40) = 0x80000001003B63B0;
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SEKeySyncRecovery.RecoveryRecord() + 32);
  v0[27] = sub_10023CDF4(*(void *)(v3 + 48), *(void *)(v3 + 56));
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_1000756D0();
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v6;
  *(void *)(inited + 64) = 0xD000000000000013;
  *(void *)(inited + 72) = 0x80000001003B63D0;
  v0[29] = sub_10023CDF4(*(void *)(v3 + 32), *(void *)(v3 + 40));
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *(void *)(inited + 80) = v7;
  *(void *)(inited + 88) = v9;
  *(void *)(inited + 96) = 0xD000000000000015;
  *(void *)(inited + 104) = 0x80000001003B63F0;
  os_log_type_t v71 = v0;
  v0[31] = sub_10023CDF4(*(void *)(v65 + 48), *(void *)(v65 + 56));
  uint64_t v10 = v0 + 31;
  uint64_t v11 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v11;
  *(void *)(inited + 120) = v13;
  *(void *)(inited + 128) = 0xD000000000000011;
  *(void *)(inited + 136) = 0x80000001003B6410;
  v10[2] = sub_10023CDF4(*(void *)(v65 + 16), *(void *)(v65 + 24));
  uint64_t v14 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v14;
  *(void *)(inited + 152) = v16;
  strcpy((char *)(inited + 160), "EncryptedBlob");
  *(_WORD *)(inited + 174) = -4864;
  v10[4] = sub_10023CDF4(*(void *)(v68 + 48), *(void *)(v68 + 56));
  uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  *(void *)(inited + 176) = v17;
  *(void *)(inited + 184) = v19;
  unint64_t v20 = sub_1001DB39C(inited);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v10[5] = v20;
  sub_10006C51C(&qword_100455790);
  sub_1001B97BC();
  uint64_t v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v23 = v22;
  v10[14] = v21;
  v10[15] = v22;
  swift_release();
  swift_bridgeObjectRelease();
  unsigned int v62 = v10;
  uint64_t v69 = v71[41];
  char v67 = *((unsigned char *)v71 + 426);
  uint64_t v66 = (uint64_t *)v71[39];
  sub_10006D0EC(v21, v23);
  uint64_t v24 = sub_1001A5E74(0x54746375646F7250, 0xEB00000000657079, 0x2C31656E6F685069);
  unint64_t v26 = v25;
  uint64_t v63 = sub_1001A5E74(0x4E746375646F7250, 0xEB00000000656D61, 0x4F20656E6F685069);
  uint64_t v28 = v27;
  uint64_t v64 = sub_1001A5E74(0x56746375646F7250, 0xEE006E6F69737265, 3157553);
  uint64_t v30 = v29;
  uint64_t v31 = sub_1001A5E74(0x726556646C697542, 0xEC0000006E6F6973, 3227953);
  uint64_t v33 = v32;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v73[0] = 60;
  v73[1] = 0xE100000000000000;
  v34._countAndFlagsBits = v24;
  v34._object = v26;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 3940414;
  v35._object = (void *)0xE300000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = v63;
  v36._object = v28;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 59;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  v38._countAndFlagsBits = v64;
  v38._object = v30;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 59;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v31;
  v40._object = v33;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 3940414;
  v41._object = (void *)0xE300000000000000;
  String.append(_:)(v41);
  v42._countAndFlagsBits = 0xD000000000000022;
  v42._object = (void *)0x80000001003B6430;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 10272;
  v43._object = (void *)0xE200000000000000;
  String.append(_:)(v43);
  v44._countAndFlagsBits = 0xD000000000000022;
  v44._object = (void *)0x80000001003B6430;
  String.append(_:)(v44);
  v45._countAndFlagsBits = 15913;
  v45._object = (void *)0xE200000000000000;
  String.append(_:)(v45);
  unint64_t v46 = sub_1001B7120(v67, *v66, v66[1]);
  unint64_t v48 = v47;
  URL.init(string:)();
  uint64_t v49 = type metadata accessor for URL();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 48))(v69, 1, v49);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v70 = v46;
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    URLRequest.httpMethod.setter();
    URLRequest.httpBody.setter();
    v51._object = (void *)0x80000001003B6460;
    v52._countAndFlagsBits = 60;
    v52._object = (void *)0xE100000000000000;
    v51._countAndFlagsBits = 0xD000000000000013;
    URLRequest.addValue(_:forHTTPHeaderField:)(v52, v51);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0xD00000000000001FLL;
    v53._object = (void *)0x80000001003B6480;
    v54._countAndFlagsBits = 0x2D746E65746E6F43;
    v54._object = (void *)0xEC00000065707954;
    URLRequest.addValue(_:forHTTPHeaderField:)(v53, v54);
    if (qword_100453768 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    v71[47] = sub_10008E55C(v55, (uint64_t)qword_1004687D8);
    swift_bridgeObjectRetain();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    uint64_t v58 = v71;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = 136315138;
      swift_bridgeObjectRetain();
      v62[7] = sub_100290514(v70, v48, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Making recovery request to URL %s", v59, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (qword_100453770 != -1) {
      swift_once();
    }
    int v72 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100457A80 + dword_100457A80);
    uint64_t v60 = (void *)swift_task_alloc();
    v58[48] = v60;
    void *v60 = v58;
    v60[1] = sub_1001B907C;
    uint64_t v61 = v58[44];
    return v72(v61, 1);
  }
  return result;
}

uint64_t sub_1001B907C(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 392) = a1;
  *(void *)(v4 + 400) = a2;
  *(_WORD *)(v4 + 424) = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_1001B9180, 0, 0);
}

uint64_t sub_1001B9180()
{
  uint64_t v26 = v0;
  __int16 v1 = *(_WORD *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 400);
  if ((v1 & 0x100) != 0)
  {
    sub_1001391C4(*(void *)(v0 + 392), *(void *)(v0 + 400), *(_WORD *)(v0 + 424));
    sub_1001391C4(v2, v3, v1);
    sub_1001391C4(v2, v3, v1);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    __int16 v8 = *(_WORD *)(v0 + 424);
    uint64_t v10 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 400);
    if (v7)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      unint64_t v12 = sub_100132F7C(v10, v9, v8);
      *(void *)(v0 + 296) = sub_100290514(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001B9828(v10, v9, v8, 1);
      sub_1001B9828(v10, v9, v8, 1);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Recovery task failed : %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001B9828(*(void *)(v0 + 392), *(void *)(v0 + 400), *(_WORD *)(v0 + 424), 1);
      sub_1001B9828(v10, v9, v8, 1);
    }

    uint64_t v14 = *(void *)(v0 + 392);
    uint64_t v15 = *(void **)(v0 + 400);
    uint64_t v17 = *(void *)(v0 + 360);
    unint64_t v16 = *(void *)(v0 + 368);
    uint64_t v18 = *(void *)(v0 + 344);
    uint64_t v24 = *(void *)(v0 + 352);
    uint64_t v19 = *(void *)(v0 + 336);
    char v20 = *(unsigned char *)(v0 + 424);
    sub_1001B73DC(v14, v15, v20);
    sub_10016FF34();
    swift_allocError();
    *uint64_t v21 = 18;
    swift_willThrow();
    sub_10006D144(v17, v16);
    sub_1001B9828(v14, (uint64_t)v15, v20, 1);
    sub_1001B9828(v14, (uint64_t)v15, v20, 1);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v24, v19);
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    sub_10006D0EC(*(void *)(v0 + 392), *(void *)(v0 + 400));
    uint64_t v4 = swift_task_alloc();
    *(void *)(v0 + 408) = v4;
    *(void *)uint64_t v4 = v0;
    *(void *)(v4 + 8) = sub_1001B94F4;
    *(_OWORD *)(v4 + 304) = *(_OWORD *)(v0 + 392);
    return _swift_task_switch(sub_1001B7664, 0, 0);
  }
}

uint64_t sub_1001B94F4()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001B96E4;
  }
  else {
    uint64_t v2 = sub_1001B9608;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001B9608()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 336);
  char v6 = *(unsigned char *)(v0 + 424);
  sub_10006D144(*(void *)(v0 + 360), *(void *)(v0 + 368));
  sub_1001B9828(v1, v2, v6, 0);
  sub_1001B9828(v1, v2, v6, 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1001B96E4()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v5 = *(void *)(v0 + 336);
  char v6 = *(unsigned char *)(v0 + 424);
  sub_10006D144(*(void *)(v0 + 360), *(void *)(v0 + 368));
  sub_1001B9828(v1, v2, v6, 0);
  sub_1001B9828(v1, v2, v6, 0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

unint64_t sub_1001B97BC()
{
  unint64_t result = qword_100457A78;
  if (!qword_100457A78)
  {
    sub_10006D220(&qword_100455790);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457A78);
  }
  return result;
}

uint64_t sub_1001B9828(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    return sub_1001334F8(a1, a2, a3);
  }
  else {
    return sub_10006D144(a1, a2);
  }
}

uint64_t *sub_1001B9834(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v31 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10006D0EC(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[6];
    unint64_t v12 = a2[7];
    sub_10006D0EC(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (uint64_t *)((char *)a1 + v13);
    uint64_t v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = *(uint64_t *)((char *)a2 + v13);
    unint64_t v17 = *(uint64_t *)((char *)a2 + v13 + 8);
    sub_10006D0EC(v16, v17);
    *uint64_t v14 = v16;
    v14[1] = v17;
    uint64_t v18 = v15[2];
    unint64_t v19 = v15[3];
    sub_10006D0EC(v18, v19);
    void v14[2] = v18;
    void v14[3] = v19;
    uint64_t v20 = v15[4];
    unint64_t v21 = v15[5];
    sub_10006D0EC(v20, v21);
    v14[4] = v20;
    v14[5] = v21;
    uint64_t v22 = v15[6];
    unint64_t v23 = v15[7];
    sub_10006D0EC(v22, v23);
    v14[6] = v22;
    v14[7] = v23;
    uint64_t v24 = type metadata accessor for SESPeerIdentityData(0);
    uint64_t v25 = *(int *)(v24 + 32);
    uint64_t v26 = (char *)v14 + v25;
    uint64_t v27 = (char *)v15 + v25;
    uint64_t v28 = type metadata accessor for Date();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v91 = v28;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = sub_10006C51C(&qword_1004564D0);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    uint64_t v32 = *(int *)(v24 + 36);
    uint64_t v33 = (uint64_t *)((char *)v14 + v32);
    Swift::String v34 = (void *)((char *)v15 + v32);
    Swift::String v35 = (int *)type metadata accessor for CreationMetadata(0);
    uint64_t v36 = *((void *)v35 - 1);
    Swift::String v37 = *(unsigned int (**)(void, void, void))(v36 + 48);
    uint64_t v90 = v29;
    if (v37(v34, 1, v35))
    {
      uint64_t v38 = sub_10006C51C(&qword_1004572C0);
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v39 = v34[1];
      *uint64_t v33 = *v34;
      v33[1] = v39;
      uint64_t v40 = v35[5];
      uint64_t v89 = v36;
      Swift::String v41 = (char *)v33 + v40;
      os_log_type_t v88 = v37;
      Swift::String v42 = (char *)v34 + v40;
      Swift::String v43 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
      swift_bridgeObjectRetain();
      v43(v41, v42, v28);
      uint64_t v44 = v35[6];
      Swift::String v45 = (void *)((char *)v33 + v44);
      unint64_t v46 = (void *)((char *)v34 + v44);
      uint64_t v47 = v46[1];
      *Swift::String v45 = *v46;
      v45[1] = v47;
      uint64_t v48 = v35[7];
      uint64_t v49 = (void *)((char *)v33 + v48);
      uint64_t v50 = (void *)((char *)v34 + v48);
      uint64_t v51 = v50[1];
      *uint64_t v49 = *v50;
      v49[1] = v51;
      uint64_t v52 = v35[8];
      Swift::String v53 = (void *)((char *)v33 + v52);
      Swift::String v54 = (void *)((char *)v34 + v52);
      uint64_t v55 = v54[1];
      void *v53 = *v54;
      v53[1] = v55;
      uint64_t v56 = v35[9];
      os_log_type_t v57 = (void *)((char *)v33 + v56);
      uint64_t v58 = (void *)((char *)v34 + v56);
      uint64_t v59 = v58[1];
      *os_log_type_t v57 = *v58;
      v57[1] = v59;
      uint64_t v60 = *(void (**)(void *, void, uint64_t, int *))(v89 + 56);
      swift_bridgeObjectRetain();
      uint64_t v36 = v89;
      swift_bridgeObjectRetain();
      Swift::String v37 = v88;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v60(v33, 0, 1, v35);
    }
    uint64_t v61 = *(int *)(a3 + 36);
    unsigned int v62 = (uint64_t *)((char *)a1 + v61);
    uint64_t v63 = (uint64_t *)((char *)a2 + v61);
    if (v37(v63, 1, v35))
    {
      uint64_t v64 = sub_10006C51C(&qword_1004572C0);
      memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64));
    }
    else
    {
      uint64_t v65 = v63[1];
      *unsigned int v62 = *v63;
      v62[1] = v65;
      uint64_t v66 = v35[5];
      char v67 = (char *)v62 + v66;
      uint64_t v68 = (char *)v63 + v66;
      uint64_t v69 = *(void (**)(char *, char *, uint64_t))(v90 + 16);
      swift_bridgeObjectRetain();
      v69(v67, v68, v91);
      uint64_t v70 = v35[6];
      os_log_type_t v71 = (void *)((char *)v62 + v70);
      int v72 = (void *)((char *)v63 + v70);
      uint64_t v73 = v72[1];
      *os_log_type_t v71 = *v72;
      v71[1] = v73;
      uint64_t v74 = v35[7];
      uint64_t v75 = (void *)((char *)v62 + v74);
      uint64_t v76 = (void *)((char *)v63 + v74);
      uint64_t v77 = v76[1];
      *uint64_t v75 = *v76;
      v75[1] = v77;
      uint64_t v78 = v35[8];
      unint64_t v79 = (void *)((char *)v62 + v78);
      unint64_t v80 = (void *)((char *)v63 + v78);
      uint64_t v81 = v80[1];
      *unint64_t v79 = *v80;
      v79[1] = v81;
      uint64_t v82 = v35[9];
      unint64_t v83 = (void *)((char *)v62 + v82);
      uint64_t v84 = (void *)((char *)v63 + v82);
      uint64_t v85 = v84[1];
      *unint64_t v83 = *v84;
      v83[1] = v85;
      uint64_t v86 = *(void (**)(void *, void, uint64_t, int *))(v36 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v86(v62, 0, 1, v35);
    }
  }
  return a1;
}

uint64_t sub_1001B9D10(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10006D144(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10006D144(*(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  sub_10006D144(*(void *)v4, *(void *)(v4 + 8));
  sub_10006D144(*(void *)(v4 + 16), *(void *)(v4 + 24));
  sub_10006D144(*(void *)(v4 + 32), *(void *)(v4 + 40));
  sub_10006D144(*(void *)(v4 + 48), *(void *)(v4 + 56));
  uint64_t v5 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v6 = v4 + *(int *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = v4 + *(int *)(v5 + 36);
  uint64_t v10 = type metadata accessor for CreationMetadata(0);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (!v11(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9 + *(int *)(v10 + 20), v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = a1 + *(int *)(a2 + 36);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11)(v12, 1, v10);
  if (!result)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12 + *(int *)(v10 + 20), v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1001B9F80(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_10006D0EC(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = *(void *)((char *)a2 + v12);
  unint64_t v16 = *(void *)((char *)a2 + v12 + 8);
  sub_10006D0EC(v15, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = v14[2];
  unint64_t v18 = v14[3];
  sub_10006D0EC(v17, v18);
  v13[2] = v17;
  uint64_t v13[3] = v18;
  uint64_t v19 = v14[4];
  unint64_t v20 = v14[5];
  sub_10006D0EC(v19, v20);
  _OWORD v13[4] = v19;
  v13[5] = v20;
  uint64_t v21 = v14[6];
  unint64_t v22 = v14[7];
  sub_10006D0EC(v21, v22);
  void v13[6] = v21;
  v13[7] = v22;
  uint64_t v23 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v24 = *(int *)(v23 + 32);
  uint64_t v25 = (char *)v13 + v24;
  uint64_t v26 = (char *)v14 + v24;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v89 = v27;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = sub_10006C51C(&qword_1004564D0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = *(int *)(v23 + 36);
  uint64_t v31 = (uint64_t *)((char *)v13 + v30);
  uint64_t v32 = (void *)((char *)v14 + v30);
  uint64_t v33 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v34 = *((void *)v33 - 1);
  Swift::String v35 = *(unsigned int (**)(void, void, void))(v34 + 48);
  uint64_t v88 = v28;
  if (v35(v32, 1, v33))
  {
    uint64_t v36 = sub_10006C51C(&qword_1004572C0);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    uint64_t v37 = v32[1];
    void *v31 = *v32;
    v31[1] = v37;
    uint64_t v38 = v33[5];
    uint64_t v87 = v34;
    uint64_t v39 = (char *)v31 + v38;
    uint64_t v86 = v35;
    uint64_t v40 = (char *)v32 + v38;
    Swift::String v41 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
    swift_bridgeObjectRetain();
    v41(v39, v40, v27);
    uint64_t v42 = v33[6];
    Swift::String v43 = (void *)((char *)v31 + v42);
    uint64_t v44 = (void *)((char *)v32 + v42);
    uint64_t v45 = v44[1];
    *Swift::String v43 = *v44;
    v43[1] = v45;
    uint64_t v46 = v33[7];
    uint64_t v47 = (void *)((char *)v31 + v46);
    uint64_t v48 = (void *)((char *)v32 + v46);
    uint64_t v49 = v48[1];
    *uint64_t v47 = *v48;
    v47[1] = v49;
    uint64_t v50 = v33[8];
    uint64_t v51 = (void *)((char *)v31 + v50);
    uint64_t v52 = (void *)((char *)v32 + v50);
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    uint64_t v54 = v33[9];
    uint64_t v55 = (void *)((char *)v31 + v54);
    uint64_t v56 = (void *)((char *)v32 + v54);
    uint64_t v57 = v56[1];
    void *v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = *(void (**)(void *, void, uint64_t, int *))(v87 + 56);
    swift_bridgeObjectRetain();
    uint64_t v34 = v87;
    swift_bridgeObjectRetain();
    Swift::String v35 = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v58(v31, 0, 1, v33);
  }
  uint64_t v59 = *(int *)(a3 + 36);
  uint64_t v60 = (void *)((char *)a1 + v59);
  uint64_t v61 = (void *)((char *)a2 + v59);
  if (v35(v61, 1, v33))
  {
    uint64_t v62 = sub_10006C51C(&qword_1004572C0);
    memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
  }
  else
  {
    uint64_t v63 = v61[1];
    void *v60 = *v61;
    v60[1] = v63;
    uint64_t v64 = v33[5];
    uint64_t v65 = (char *)v60 + v64;
    uint64_t v66 = (char *)v61 + v64;
    char v67 = *(void (**)(char *, char *, uint64_t))(v88 + 16);
    swift_bridgeObjectRetain();
    v67(v65, v66, v89);
    uint64_t v68 = v33[6];
    uint64_t v69 = (void *)((char *)v60 + v68);
    uint64_t v70 = (void *)((char *)v61 + v68);
    uint64_t v71 = v70[1];
    void *v69 = *v70;
    v69[1] = v71;
    uint64_t v72 = v33[7];
    uint64_t v73 = (void *)((char *)v60 + v72);
    uint64_t v74 = (void *)((char *)v61 + v72);
    uint64_t v75 = v74[1];
    *uint64_t v73 = *v74;
    v73[1] = v75;
    uint64_t v76 = v33[8];
    uint64_t v77 = (void *)((char *)v60 + v76);
    uint64_t v78 = (void *)((char *)v61 + v76);
    uint64_t v79 = v78[1];
    *uint64_t v77 = *v78;
    v77[1] = v79;
    uint64_t v80 = v33[9];
    uint64_t v81 = (void *)((char *)v60 + v80);
    uint64_t v82 = (void *)((char *)v61 + v80);
    uint64_t v83 = v82[1];
    *uint64_t v81 = *v82;
    v81[1] = v83;
    uint64_t v84 = *(void (**)(void *, void, uint64_t, int *))(v34 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v84(v60, 0, 1, v33);
  }
  return a1;
}

char *sub_1001BA40C(char *a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *((void *)a1 + 1) = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = a2[2];
  *((void *)a1 + 3) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  sub_10006D0EC(v6, v7);
  uint64_t v8 = *((void *)a1 + 4);
  unint64_t v9 = *((void *)a1 + 5);
  *((void *)a1 + 4) = v6;
  *((void *)a1 + 5) = v7;
  sub_10006D144(v8, v9);
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_10006D0EC(v10, v11);
  uint64_t v12 = *((void *)a1 + 6);
  unint64_t v13 = *((void *)a1 + 7);
  *((void *)a1 + 6) = v10;
  *((void *)a1 + 7) = v11;
  sub_10006D144(v12, v13);
  unint64_t v117 = a2;
  uint64_t v118 = a3;
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = (uint64_t *)&a1[v14];
  unint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = *(void *)((char *)a2 + v14);
  unint64_t v18 = *(void *)((char *)a2 + v14 + 8);
  sub_10006D0EC(v17, v18);
  uint64_t v19 = *v15;
  unint64_t v20 = v15[1];
  *uint64_t v15 = v17;
  v15[1] = v18;
  sub_10006D144(v19, v20);
  uint64_t v21 = v16[2];
  unint64_t v22 = v16[3];
  sub_10006D0EC(v21, v22);
  uint64_t v23 = v15[2];
  unint64_t v24 = v15[3];
  long long v15[2] = v21;
  v15[3] = v22;
  sub_10006D144(v23, v24);
  uint64_t v25 = v16[4];
  unint64_t v26 = v16[5];
  sub_10006D0EC(v25, v26);
  uint64_t v27 = v15[4];
  unint64_t v28 = v15[5];
  v15[4] = v25;
  v15[5] = v26;
  sub_10006D144(v27, v28);
  uint64_t v29 = v16[6];
  unint64_t v30 = v16[7];
  sub_10006D0EC(v29, v30);
  uint64_t v31 = v15[6];
  unint64_t v32 = v15[7];
  v15[6] = v29;
  v15[7] = v30;
  sub_10006D144(v31, v32);
  uint64_t v33 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v34 = *(int *)(v33 + 32);
  Swift::String v35 = (char *)v15 + v34;
  uint64_t v36 = (char *)v16 + v34;
  uint64_t v37 = type metadata accessor for Date();
  uint64_t v119 = *(void *)(v37 - 8);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 48);
  int v39 = v38(v35, 1, v37);
  uint64_t v120 = v37;
  int v40 = v38(v36, 1, v37);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v119 + 16))(v35, v36, v37);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v35, 0, 1, v37);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v119 + 8))(v35, v37);
LABEL_6:
    uint64_t v41 = sub_10006C51C(&qword_1004564D0);
    memcpy(v35, v36, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v119 + 24))(v35, v36, v37);
LABEL_7:
  uint64_t v42 = *(int *)(v33 + 36);
  Swift::String v43 = (char *)v15 + v42;
  uint64_t v44 = (char *)v16 + v42;
  uint64_t v45 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v46 = *((void *)v45 - 1);
  uint64_t v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  int v48 = v47(v43, 1, v45);
  int v49 = v47(v44, 1, v45);
  uint64_t v116 = v46;
  if (v48)
  {
    if (!v49)
    {
      *(void *)Swift::String v43 = *(void *)v44;
      *((void *)v43 + 1) = *((void *)v44 + 1);
      uint64_t v50 = v45[5];
      uint64_t v51 = &v43[v50];
      uint64_t v52 = &v44[v50];
      uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
      swift_bridgeObjectRetain();
      v115(v51, v52, v120);
      uint64_t v53 = v45[6];
      uint64_t v54 = &v43[v53];
      uint64_t v55 = &v44[v53];
      *(void *)uint64_t v54 = *(void *)v55;
      *((void *)v54 + 1) = *((void *)v55 + 1);
      uint64_t v56 = v45[7];
      uint64_t v57 = &v43[v56];
      uint64_t v58 = &v44[v56];
      *(void *)uint64_t v57 = *(void *)v58;
      *((void *)v57 + 1) = *((void *)v58 + 1);
      uint64_t v59 = v45[8];
      uint64_t v60 = &v43[v59];
      uint64_t v61 = &v44[v59];
      *(void *)uint64_t v60 = *(void *)v61;
      *((void *)v60 + 1) = *((void *)v61 + 1);
      uint64_t v62 = v45[9];
      uint64_t v63 = &v43[v62];
      uint64_t v64 = &v44[v62];
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = *((void *)v64 + 1);
      uint64_t v65 = *(void (**)(char *, void, uint64_t, int *))(v46 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v65(v43, 0, 1, v45);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v49)
  {
    sub_1001BB9E0((uint64_t)v43, type metadata accessor for CreationMetadata);
LABEL_12:
    uint64_t v66 = sub_10006C51C(&qword_1004572C0);
    memcpy(v43, v44, *(void *)(*(void *)(v66 - 8) + 64));
    goto LABEL_13;
  }
  *(void *)Swift::String v43 = *(void *)v44;
  *((void *)v43 + 1) = *((void *)v44 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v119 + 24))(&v43[v45[5]], &v44[v45[5]], v120);
  uint64_t v91 = v45[6];
  unint64_t v92 = &v43[v91];
  uint64_t v93 = &v44[v91];
  *(void *)unint64_t v92 = *(void *)v93;
  *((void *)v92 + 1) = *((void *)v93 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v94 = v45[7];
  os_log_type_t v95 = &v43[v94];
  NSString v96 = &v44[v94];
  *(void *)os_log_type_t v95 = *(void *)v96;
  *((void *)v95 + 1) = *((void *)v96 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = v45[8];
  uint64_t v98 = &v43[v97];
  unint64_t v99 = &v44[v97];
  *(void *)uint64_t v98 = *(void *)v99;
  *((void *)v98 + 1) = *((void *)v99 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v100 = v45[9];
  CFStringRef v101 = &v43[v100];
  unint64_t v102 = &v44[v100];
  *(void *)CFStringRef v101 = *(void *)v102;
  *((void *)v101 + 1) = *((void *)v102 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_13:
  uint64_t v67 = *(int *)(v118 + 36);
  uint64_t v68 = &a1[v67];
  uint64_t v69 = (char *)v117 + v67;
  int v70 = v47(&a1[v67], 1, v45);
  int v71 = v47(v69, 1, v45);
  if (!v70)
  {
    if (!v71)
    {
      *(void *)uint64_t v68 = *(void *)v69;
      *((void *)v68 + 1) = *((void *)v69 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v119 + 24))(&v68[v45[5]], &v69[v45[5]], v120);
      uint64_t v103 = v45[6];
      Class v104 = &v68[v103];
      NSString v105 = &v69[v103];
      *(void *)Class v104 = *(void *)v105;
      *((void *)v104 + 1) = *((void *)v105 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v106 = v45[7];
      id v107 = &v68[v106];
      id v108 = &v69[v106];
      *(void *)id v107 = *(void *)v108;
      *((void *)v107 + 1) = *((void *)v108 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v109 = v45[8];
      int v110 = &v68[v109];
      unint64_t v111 = &v69[v109];
      *(void *)int v110 = *(void *)v111;
      *((void *)v110 + 1) = *((void *)v111 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v112 = v45[9];
      unint64_t v113 = &v68[v112];
      uint64_t v114 = &v69[v112];
      *(void *)unint64_t v113 = *(void *)v114;
      *((void *)v113 + 1) = *((void *)v114 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001BB9E0((uint64_t)v68, type metadata accessor for CreationMetadata);
    goto LABEL_18;
  }
  if (v71)
  {
LABEL_18:
    uint64_t v89 = sub_10006C51C(&qword_1004572C0);
    memcpy(v68, v69, *(void *)(*(void *)(v89 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v68 = *(void *)v69;
  *((void *)v68 + 1) = *((void *)v69 + 1);
  uint64_t v72 = v45[5];
  uint64_t v73 = &v68[v72];
  uint64_t v74 = &v69[v72];
  uint64_t v75 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  swift_bridgeObjectRetain();
  v75(v73, v74, v120);
  uint64_t v76 = v45[6];
  uint64_t v77 = &v68[v76];
  uint64_t v78 = &v69[v76];
  *(void *)uint64_t v77 = *(void *)v78;
  *((void *)v77 + 1) = *((void *)v78 + 1);
  uint64_t v79 = v45[7];
  uint64_t v80 = &v68[v79];
  uint64_t v81 = &v69[v79];
  *(void *)uint64_t v80 = *(void *)v81;
  *((void *)v80 + 1) = *((void *)v81 + 1);
  uint64_t v82 = v45[8];
  uint64_t v83 = &v68[v82];
  uint64_t v84 = &v69[v82];
  *(void *)uint64_t v83 = *(void *)v84;
  *((void *)v83 + 1) = *((void *)v84 + 1);
  uint64_t v85 = v45[9];
  uint64_t v86 = &v68[v85];
  uint64_t v87 = &v69[v85];
  *(void *)uint64_t v86 = *(void *)v87;
  *((void *)v86 + 1) = *((void *)v87 + 1);
  uint64_t v88 = *(void (**)(char *, void, uint64_t, int *))(v116 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v88(v68, 0, 1, v45);
  return a1;
}

_OWORD *sub_1001BAC00(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (_OWORD *)((char *)a1 + v7);
  unint64_t v9 = (char *)a2 + v7;
  long long v10 = *(_OWORD *)((char *)a2 + v7 + 16);
  *uint64_t v8 = *(_OWORD *)((char *)a2 + v7);
  v8[1] = v10;
  long long v11 = *(_OWORD *)((char *)a2 + v7 + 48);
  v8[2] = *(_OWORD *)((char *)a2 + v7 + 32);
  v8[3] = v11;
  uint64_t v12 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v13 = *(int *)(v12 + 32);
  uint64_t v14 = (char *)v8 + v13;
  uint64_t v15 = &v9[v13];
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10006C51C(&qword_1004564D0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = *(int *)(v12 + 36);
  unint64_t v20 = (_OWORD *)((char *)v8 + v19);
  uint64_t v21 = &v9[v19];
  unint64_t v22 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v23 = *((void *)v22 - 1);
  unint64_t v24 = *(unsigned int (**)(char *, uint64_t, int *))(v23 + 48);
  if (v24(v21, 1, v22))
  {
    uint64_t v25 = sub_10006C51C(&qword_1004572C0);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    *unint64_t v20 = *(_OWORD *)v21;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v20 + v22[5], &v21[v22[5]], v16);
    *(_OWORD *)((char *)v20 + v22[6]) = *(_OWORD *)&v21[v22[6]];
    *(_OWORD *)((char *)v20 + v22[7]) = *(_OWORD *)&v21[v22[7]];
    *(_OWORD *)((char *)v20 + v22[8]) = *(_OWORD *)&v21[v22[8]];
    *(_OWORD *)((char *)v20 + v22[9]) = *(_OWORD *)&v21[v22[9]];
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v26 = v23;
  uint64_t v27 = *(int *)(a3 + 36);
  unint64_t v28 = (_OWORD *)((char *)a1 + v27);
  uint64_t v29 = (_OWORD *)((char *)a2 + v27);
  if (v24((char *)v29, 1, v22))
  {
    uint64_t v30 = sub_10006C51C(&qword_1004572C0);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    _OWORD *v28 = *v29;
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))((char *)v28 + v22[5], (char *)v29 + v22[5], v16);
    *(_OWORD *)((char *)v28 + v22[6]) = *(_OWORD *)((char *)v29 + v22[6]);
    *(_OWORD *)((char *)v28 + v22[7]) = *(_OWORD *)((char *)v29 + v22[7]);
    *(_OWORD *)((char *)v28 + v22[8]) = *(_OWORD *)((char *)v29 + v22[8]);
    *(_OWORD *)((char *)v28 + v22[9]) = *(_OWORD *)((char *)v29 + v22[9]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v26 + 56))(v28, 0, 1, v22);
  }
  return a1;
}

void *sub_1001BAF6C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10006D144(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10006D144(v10, v11);
  uint64_t v93 = a2;
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)(a2 + v12);
  uint64_t v15 = *(void *)((char *)a1 + v12);
  unint64_t v16 = *(void *)((char *)a1 + v12 + 8);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10006D144(v15, v16);
  uint64_t v17 = v13[2];
  unint64_t v18 = v13[3];
  *((_OWORD *)v13 + 1) = v14[1];
  sub_10006D144(v17, v18);
  uint64_t v19 = v13[4];
  unint64_t v20 = v13[5];
  *((_OWORD *)v13 + 2) = v14[2];
  sub_10006D144(v19, v20);
  uint64_t v21 = v13[6];
  unint64_t v22 = v13[7];
  *((_OWORD *)v13 + 3) = v14[3];
  sub_10006D144(v21, v22);
  uint64_t v92 = type metadata accessor for SESPeerIdentityData(0);
  uint64_t v23 = *(int *)(v92 + 32);
  unint64_t v24 = (char *)v13 + v23;
  uint64_t v25 = (char *)v14 + v23;
  uint64_t v26 = type metadata accessor for Date();
  uint64_t v94 = *(void *)(v26 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  int v28 = v27(v24, 1, v26);
  int v29 = v27(v25, 1, v26);
  if (v28)
  {
    if (v29)
    {
      uint64_t v30 = sub_10006C51C(&qword_1004564D0);
      memcpy(v24, v25, *(void *)(*(void *)(v30 - 8) + 64));
      uint64_t v31 = v26;
    }
    else
    {
      uint64_t v31 = v26;
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v24, 0, 1, v26);
    }
  }
  else
  {
    uint64_t v31 = v26;
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v94 + 8))(v24, v26);
      uint64_t v32 = sub_10006C51C(&qword_1004564D0);
      memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 40))(v24, v25, v26);
    }
  }
  uint64_t v33 = *(int *)(v92 + 36);
  uint64_t v34 = (char *)v13 + v33;
  Swift::String v35 = (char *)v14 + v33;
  uint64_t v36 = (int *)type metadata accessor for CreationMetadata(0);
  uint64_t v37 = *((void *)v36 - 1);
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (v40)
    {
      uint64_t v41 = v37;
LABEL_13:
      uint64_t v42 = sub_10006C51C(&qword_1004572C0);
      memcpy(v34, v35, *(void *)(*(void *)(v42 - 8) + 64));
      goto LABEL_16;
    }
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v34[v36[5]], &v35[v36[5]], v31);
    *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
    *(_OWORD *)&v34[v36[7]] = *(_OWORD *)&v35[v36[7]];
    *(_OWORD *)&v34[v36[8]] = *(_OWORD *)&v35[v36[8]];
    *(_OWORD *)&v34[v36[9]] = *(_OWORD *)&v35[v36[9]];
    uint64_t v41 = v37;
    (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
  }
  else
  {
    uint64_t v41 = v37;
    if (v40)
    {
      sub_1001BB9E0((uint64_t)v34, type metadata accessor for CreationMetadata);
      goto LABEL_13;
    }
    uint64_t v43 = *((void *)v35 + 1);
    *(void *)uint64_t v34 = *(void *)v35;
    *((void *)v34 + 1) = v43;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v94 + 40))(&v34[v36[5]], &v35[v36[5]], v31);
    uint64_t v44 = v36[6];
    uint64_t v45 = &v34[v44];
    uint64_t v46 = (uint64_t *)&v35[v44];
    uint64_t v48 = *v46;
    uint64_t v47 = v46[1];
    *(void *)uint64_t v45 = v48;
    *((void *)v45 + 1) = v47;
    swift_bridgeObjectRelease();
    uint64_t v49 = v36[7];
    uint64_t v50 = &v34[v49];
    uint64_t v51 = (uint64_t *)&v35[v49];
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    *(void *)uint64_t v50 = v53;
    *((void *)v50 + 1) = v52;
    swift_bridgeObjectRelease();
    uint64_t v54 = v36[8];
    uint64_t v55 = &v34[v54];
    uint64_t v56 = (uint64_t *)&v35[v54];
    uint64_t v58 = *v56;
    uint64_t v57 = v56[1];
    *(void *)uint64_t v55 = v58;
    *((void *)v55 + 1) = v57;
    swift_bridgeObjectRelease();
    uint64_t v59 = v36[9];
    uint64_t v60 = &v34[v59];
    uint64_t v61 = (uint64_t *)&v35[v59];
    uint64_t v63 = *v61;
    uint64_t v62 = v61[1];
    *(void *)uint64_t v60 = v63;
    *((void *)v60 + 1) = v62;
    swift_bridgeObjectRelease();
  }
LABEL_16:
  uint64_t v64 = *(int *)(a3 + 36);
  uint64_t v65 = (char *)a1 + v64;
  uint64_t v66 = (char *)(v93 + v64);
  int v67 = v38((char *)a1 + v64, 1, v36);
  int v68 = v38(v66, 1, v36);
  if (!v67)
  {
    if (!v68)
    {
      uint64_t v71 = *((void *)v66 + 1);
      *(void *)uint64_t v65 = *(void *)v66;
      *((void *)v65 + 1) = v71;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v94 + 40))(&v65[v36[5]], &v66[v36[5]], v31);
      uint64_t v72 = v36[6];
      uint64_t v73 = &v65[v72];
      uint64_t v74 = &v66[v72];
      uint64_t v76 = *(void *)v74;
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = v76;
      *((void *)v73 + 1) = v75;
      swift_bridgeObjectRelease();
      uint64_t v77 = v36[7];
      uint64_t v78 = &v65[v77];
      uint64_t v79 = &v66[v77];
      uint64_t v81 = *(void *)v79;
      uint64_t v80 = *((void *)v79 + 1);
      *(void *)uint64_t v78 = v81;
      *((void *)v78 + 1) = v80;
      swift_bridgeObjectRelease();
      uint64_t v82 = v36[8];
      uint64_t v83 = &v65[v82];
      uint64_t v84 = &v66[v82];
      uint64_t v86 = *(void *)v84;
      uint64_t v85 = *((void *)v84 + 1);
      *(void *)uint64_t v83 = v86;
      *((void *)v83 + 1) = v85;
      swift_bridgeObjectRelease();
      uint64_t v87 = v36[9];
      uint64_t v88 = &v65[v87];
      uint64_t v89 = &v66[v87];
      uint64_t v91 = *(void *)v89;
      uint64_t v90 = *((void *)v89 + 1);
      *(void *)uint64_t v88 = v91;
      *((void *)v88 + 1) = v90;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1001BB9E0((uint64_t)v65, type metadata accessor for CreationMetadata);
    goto LABEL_21;
  }
  if (v68)
  {
LABEL_21:
    uint64_t v69 = sub_10006C51C(&qword_1004572C0);
    memcpy(v65, v66, *(void *)(*(void *)(v69 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v65[v36[5]], &v66[v36[5]], v31);
  *(_OWORD *)&v65[v36[6]] = *(_OWORD *)&v66[v36[6]];
  *(_OWORD *)&v65[v36[7]] = *(_OWORD *)&v66[v36[7]];
  *(_OWORD *)&v65[v36[8]] = *(_OWORD *)&v66[v36[8]];
  *(_OWORD *)&v65[v36[9]] = *(_OWORD *)&v66[v36[9]];
  (*(void (**)(char *, void, uint64_t, int *))(v41 + 56))(v65, 0, 1, v36);
  return a1;
}

uint64_t sub_1001BB5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001BB5E0);
}

uint64_t sub_1001BB5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SESPeerIdentityData(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10006C51C(&qword_1004572C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1001BB710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001BB724);
}

uint64_t sub_1001BB724(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for SESPeerIdentityData(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_10006C51C(&qword_1004572C0);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1001BB854()
{
  type metadata accessor for SESPeerIdentityData(319);
  if (v0 <= 0x3F)
  {
    sub_1001BB934();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_1001BB934()
{
  if (!qword_100457330)
  {
    type metadata accessor for CreationMetadata(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100457330);
    }
  }
}

unint64_t sub_1001BB98C()
{
  unint64_t result = qword_100457B38;
  if (!qword_100457B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457B38);
  }
  return result;
}

uint64_t sub_1001BB9E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001BBA40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1001BBAA8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001BBAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_1004572C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SEKeySyncRecovery()
{
  return &type metadata for SEKeySyncRecovery;
}

unsigned char *storeEnumTagSinglePayload for SEKeySyncRecovery.RecoveryRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001BBC34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEKeySyncRecovery.RecoveryRecord.CodingKeys()
{
  return &type metadata for SEKeySyncRecovery.RecoveryRecord.CodingKeys;
}

unint64_t sub_1001BBC70()
{
  unint64_t result = qword_100457B48;
  if (!qword_100457B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457B48);
  }
  return result;
}

unint64_t sub_1001BBCC8()
{
  unint64_t result = qword_100457B50;
  if (!qword_100457B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457B50);
  }
  return result;
}

unint64_t sub_1001BBD20()
{
  unint64_t result = qword_100457B58;
  if (!qword_100457B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457B58);
  }
  return result;
}

uint64_t sub_1001BBD74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F69676572 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E77656976 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x444955556B6C74 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746E656449637273 && a2 == 0xEB00000000797469 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001003B5CD0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void *sub_1001BC028(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v6 = sub_10006C51C(&qword_100456220);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CredentialType();
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v34 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v31 = (char *)v28 - v16;
  uint64_t v17 = *(void *)(a3 + 16);
  if (!v17) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v29 = v15;
  uint64_t v32 = (void (**)(char *))(v15 + 32);
  uint64_t v33 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  v28[1] = a3;
  unint64_t v18 = (uint64_t *)(a3 + 48);
  int v40 = _swiftEmptyArrayStorage;
  uint64_t v30 = a1;
  do
  {
    uint64_t v19 = *(v18 - 1);
    uint64_t v20 = *v18;
    v36[0] = *(v18 - 2);
    v36[1] = v19;
    long long v36[2] = v20;
    long long v21 = *(_OWORD *)(v18 + 3);
    long long v37 = *(_OWORD *)(v18 + 1);
    long long v38 = v21;
    long long v39 = *(_OWORD *)(v18 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(v36);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v40;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((*v33)(v9, 1, v10) == 1)
    {
      sub_10008E734((uint64_t)v9, &qword_100456220);
    }
    else
    {
      unint64_t v22 = v31;
      uint64_t v23 = *v32;
      (*v32)(v31);
      ((void (*)(char *, char *, uint64_t))v23)(v34, v22, v10);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v40 = (void *)sub_10025A510(0, v40[2] + 1, 1, (unint64_t)v40);
      }
      unint64_t v25 = v40[2];
      unint64_t v24 = v40[3];
      if (v25 >= v24 >> 1) {
        int v40 = (void *)sub_10025A510(v24 > 1, v25 + 1, 1, (unint64_t)v40);
      }
      uint64_t v26 = v40;
      void v40[2] = v25 + 1;
      ((void (*)(char *, char *, uint64_t))v23)((char *)v26+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v25, v34, v10);
      a1 = v30;
    }
    v18 += 9;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  return v40;
}

uint64_t sub_1001BC37C(unsigned __int8 *a1, uint64_t (*a2)(void))
{
  return a2(*a1);
}

uint64_t sub_1001BC3A8(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1001BC3D0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1001BC3F8(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return _swift_task_switch(sub_1001BC4C8, 0, 0);
}

uint64_t sub_1001BC4C8()
{
  uint64_t v148 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 152);
  BOOL v2 = *(void **)(v0 + 160);
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 200) = sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  id v4 = v2;
  id v5 = v1;
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  unint64_t v146 = (id *)(v0 + 152);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v138 = *(void *)(v0 + 168);
    uint64_t v12 = *(void **)(v0 + 160);
    __n128 v136 = *(void **)(v0 + 152);
    uint64_t v13 = swift_slowAlloc();
    v147[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = UUID.uuidString.getter();
    *(void *)(v0 + 136) = sub_100290514(v14, v15, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2080;
    CredentialInternal.identifier.getter();
    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v18 = v17;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v138);
    *(void *)(v0 + 144) = sub_100290514(v16, v18, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Session %s: Getting NFCredentialSessionHandle for credential %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v19 = *(void **)(v0 + 152);
    uint64_t v20 = *(void **)(v0 + 160);
  }
  long long v21 = *(char **)(v0 + 160);
  unint64_t v22 = &v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v24 = *(void *)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v23 = *(void *)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8];
  uint64_t v25 = *(void *)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16];
  unint64_t v26 = *(void *)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
  uint64_t v27 = (void *)v26;
  if (!(v26 >> 62)) {
    goto LABEL_9;
  }
  if (v26 >> 62 == 1)
  {
    uint64_t v27 = (void *)(v26 & 0x3FFFFFFFFFFFFFFFLL);
LABEL_9:
    if (v23)
    {
      uint64_t v29 = *(void *)(v0 + 184);
      uint64_t v28 = *(void *)(v0 + 192);
      uint64_t v30 = *(void *)(v0 + 176);
      uint64_t v31 = *(void **)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16];
      uint64_t v139 = *(void *)(v0 + 168);
      uint64_t v32 = *(void **)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8];
      id v33 = (id)v23;
      unint64_t v140 = v32;
      sub_1001D05A4((id)v24, v32, v31, v26);
      uint64_t v135 = v31;
      id v34 = v31;
      id v142 = v27;
      id v35 = v33;
      id v36 = (id)v24;
      CredentialInternal.identifier.getter();
      CredentialInternal.identifier.getter();
      LOBYTE(v33) = static UUID.== infix(_:_:)();
      long long v37 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v37(v29, v139);
      long long v137 = v37;
      v37(v28, v139);
      if (v33)
      {
        id v38 = *v146;
        id v39 = v35;
        id v40 = v36;
        id v41 = v34;
        id v42 = v142;
        id v43 = v38;
        id v44 = v39;
        id v45 = v40;
        id v46 = v41;
        id v47 = v42;
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v131 = v47;
          uint64_t v50 = *(void *)(v0 + 192);
          *(void *)__n128 v129 = *(void *)(v0 + 168);
          uint64_t v51 = *(void **)(v0 + 152);
          uint64_t v144 = v48;
          uint64_t v52 = swift_slowAlloc();
          v147[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v52 = 136315394;
          os_log_type_t type = v49;
          CredentialInternal.identifier.getter();
          uint64_t v53 = UUID.uuidString.getter();
          uint64_t v133 = v46;
          unint64_t v55 = v54;
          v137(v50, *(void *)v129);
          *(void *)(v0 + 104) = sub_100290514(v53, v55, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v52 + 12) = 2080;
          uint64_t v56 = UUID.uuidString.getter();
          *(void *)(v0 + 112) = sub_100290514(v56, v57, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v144, type, "Returning existing NFCredentialSessionHandle for credential %s with assertion %s", (uint8_t *)v52, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          id v116 = *v146;
        }
        unint64_t v117 = v135;
        id v80 = v142;
      }
      else
      {
        uint64_t v74 = *(void **)(v0 + 152);
        id v75 = *(id *)(v0 + 160);
        id v76 = v74;
        id v77 = v35;
        id v78 = v36;
        id v79 = v34;
        id v80 = v142;
        id v81 = v142;
        id v82 = v75;
        id v83 = v76;
        id v84 = v77;
        id v85 = v78;
        id v86 = v79;
        id v87 = v81;
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v88, v89))
        {
          log = v88;
          uint64_t v90 = *(void *)(v0 + 192);
          uint64_t v91 = *(void **)(v0 + 160);
          uint64_t v128 = *(void *)(v0 + 168);
          unint64_t v132 = v86;
          uint64_t v92 = *(void **)(v0 + 152);
          uint64_t v93 = swift_slowAlloc();
          v147[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v93 = 136315650;
          os_log_type_t v130 = v89;
          uint64_t v94 = UUID.uuidString.getter();
          *(void *)(v0 + 80) = sub_100290514(v94, v95, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v93 + 12) = 2080;
          CredentialInternal.identifier.getter();
          uint64_t v96 = UUID.uuidString.getter();
          unint64_t v98 = v97;
          v137(v90, v128);
          *(void *)(v0 + 88) = sub_100290514(v96, v98, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v80 = v142;
          swift_bridgeObjectRelease();

          *(_WORD *)(v93 + 22) = 2080;
          uint64_t v99 = UUID.uuidString.getter();
          *(void *)(v0 + 96) = sub_100290514(v99, v100, v147);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, log, v130, "Session %s: Returning a new NFCredentialSessionHandle for credential %s, handing over assertion %s", (uint8_t *)v93, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          uint64_t v119 = *(void **)(v0 + 152);
          uint64_t v118 = *(void **)(v0 + 160);
        }
        unint64_t v117 = v135;
        id v120 = *v146;

        id v45 = *v146;
      }
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v121 = *(uint64_t (**)(id, void *, void *, id))(v0 + 8);
      return v121(v45, v140, v117, v80);
    }
    sub_1001D05A4(*(id *)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState], 0, *(void **)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16], *(void *)&v21[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24]);
    long long v21 = *(char **)(v0 + 160);
    goto LABEL_17;
  }
  if (v26 == 0x8000000000000000 && !(v25 | v23 | v24))
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v27 = 0;
LABEL_17:
    *(void *)(v0 + 216) = v25;
    *(void *)(v0 + 224) = v27;
    *(void *)(v0 + 208) = v24;
    uint64_t v58 = *(void **)(v0 + 152);
    uint64_t v59 = v21;
    id v60 = v58;
    uint64_t v61 = v59;
    id v62 = v60;
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = *(void *)(v0 + 192);
      uint64_t v66 = *(void *)(v0 + 176);
      uint64_t v145 = *(void *)(v0 + 168);
      int v67 = *(void **)(v0 + 160);
      id v143 = *(void **)(v0 + 152);
      uint64_t v68 = swift_slowAlloc();
      v147[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315394;
      uint64_t v69 = UUID.uuidString.getter();
      *(void *)(v0 + 64) = sub_100290514(v69, v70, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v68 + 12) = 2080;
      CredentialInternal.identifier.getter();
      uint64_t v71 = UUID.uuidString.getter();
      unint64_t v73 = v72;
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v65, v145);
      *(void *)(v0 + 72) = sub_100290514(v71, v73, v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Session %s: No current NFCredentialSessionHandle, starting a new one for credential %s", (uint8_t *)v68, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v102 = *(void **)(v0 + 152);
      CFStringRef v101 = *(void **)(v0 + 160);
    }
    *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 160)
                                      + OBJC_IVAR____TtC10seserviced14SECUserSession_nearFieldEventDelegate);
    uint64_t v103 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v103;
    uint64_t v104 = sub_10006C51C(&qword_100457D30);
    *uint64_t v103 = v0;
    v103[1] = sub_1001BD3A0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000031, 0x80000001003B3B50, sub_10011848C, 0, v104);
  }
  NSString v105 = v21;
  uint64_t v106 = Logger.logObject.getter();
  os_log_type_t v107 = static os_log_type_t.error.getter();
  BOOL v108 = os_log_type_enabled(v106, v107);
  uint64_t v109 = *(void **)(v0 + 160);
  if (v108)
  {
    uint64_t v110 = swift_slowAlloc();
    v147[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v110 = 136315394;
    uint64_t v111 = UUID.uuidString.getter();
    *(void *)(v0 + 120) = sub_100290514(v111, v112, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v110 + 12) = 2080;
    unint64_t v113 = *((void *)v22 + 3);
    if (v113 >> 62)
    {
      if (v113 >> 62 == 1)
      {
        unint64_t v114 = 0xE500000000000000;
        uint64_t v115 = 0x6465726957;
      }
      else
      {
        BOOL v122 = (*((void *)v22 + 2) | *(void *)v22 | *((void *)v22 + 1)) == 0;
        BOOL v123 = v113 == 0x8000000000000000;
        if (v123 && v122) {
          uint64_t v115 = 0x656D6567616E614DLL;
        }
        else {
          uint64_t v115 = 0x64696C61766E49;
        }
        if (v123 && v122) {
          unint64_t v114 = 0xEA0000000000746ELL;
        }
        else {
          unint64_t v114 = 0xE700000000000000;
        }
      }
    }
    else
    {
      unint64_t v114 = 0xED00006E6F697461;
      uint64_t v115 = 0x6C756D4564726143;
    }
    uint64_t v124 = *(void **)(v0 + 160);
    *(void *)(v0 + 128) = sub_100290514(v115, v114, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v106, v107, "Session %s: getNFCredentialSessionHandle: Unexpected state %s, expected not Invalid", (uint8_t *)v110, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10008E594();
  swift_allocError();
  *__n128 v125 = 10;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  __n128 v126 = *(uint64_t (**)(void))(v0 + 8);
  return v126();
}

uint64_t sub_1001BD3A0()
{
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    BOOL v2 = sub_1001BD4B4;
  }
  else {
    BOOL v2 = sub_1001BD530;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001BD4B4()
{
  sub_1001D2F48(*(void **)(v0 + 208), 0, *(void **)(v0 + 216), *(void **)(v0 + 224));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001BD530()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  [v1 setEventDelegate:*(void *)(v0 + 232)];
  if (qword_1004538F8 != -1) {
    swift_once();
  }
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = (void *)(qword_10045AAE8 + 16);
  id v5 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_100127B64(v4, v47);
  os_unfair_lock_unlock(v5);
  if (!v3)
  {
    uint64_t v6 = v47[0];
    swift_release();
    id v7 = *(void **)(v6 + 16);
    id v8 = v7;
    swift_release();
    if (v7)
    {
      id v9 = *(id *)(v0 + 160);
      id v10 = v8;
      id v11 = v9;
      id v12 = v10;
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      BOOL v15 = os_log_type_enabled(v13, v14);
      uint64_t v16 = *(void **)(v0 + 160);
      if (v15)
      {
        id v44 = v1;
        uint64_t v17 = swift_slowAlloc();
        v47[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315394;
        uint64_t v18 = UUID.uuidString.getter();
        *(void *)(v0 + 48) = sub_100290514(v18, v19, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        *(_WORD *)(v17 + 12) = 2080;
        uint64_t v20 = UUID.uuidString.getter();
        *(void *)(v0 + 56) = sub_100290514(v20, v21, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Session %s: Relinquishing existing presentment intent assertion with identifier %s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v1 = v44;
        swift_slowDealloc();
      }
      else
      {
      }
      uint64_t v22 = qword_10045AAE8;
      swift_retain();
      os_unfair_lock_lock((os_unfair_lock_t)(v22 + 24));
      sub_100127B64((void *)(v22 + 16), v47);
      os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 24));
      swift_release();
      sub_100298A58();
      swift_release();
    }
    uint64_t v23 = qword_10045AAE8;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 24));
    sub_100127B64((void *)(v23 + 16), v47);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 24));
    swift_release();
    LOBYTE(v47[0]) = 1;
    sub_100297F00(0x100000000uLL);
    uint64_t v25 = v24;
    id v45 = v1;
    unint64_t v26 = *(void **)(v0 + 160);
    swift_release();
    id v27 = v26;
    id v28 = v25;
    id v29 = v27;
    id v30 = v28;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    id v34 = *(void **)(v0 + 160);
    if (v33)
    {
      id v46 = *(void **)(v0 + 224);
      id v42 = *(void **)(v0 + 208);
      id v43 = *(void **)(v0 + 216);
      uint64_t v35 = swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v35 = 136315394;
      uint64_t v36 = UUID.uuidString.getter();
      *(void *)(v0 + 32) = sub_100290514(v36, v37, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v38 = UUID.uuidString.getter();
      *(void *)(v0 + 40) = sub_100290514(v38, v39, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Session %s: Starting new assertion with identifier %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001D2F48(v42, 0, v43, v46);
    }
    else
    {
      sub_1001D2F48(*(void **)(v0 + 208), 0, *(void **)(v0 + 216), *(void **)(v0 + 224));
    }
    id v40 = *(id *)(v0 + 152);
    swift_task_dealloc();
    swift_task_dealloc();
    id v41 = *(void (**)(id, void *, uint64_t, id))(v0 + 8);
    v41(v40, v45, v2, v30);
  }
}

void sub_1001BDB6C(void *a1, void *a2, void *a3, unint64_t a4)
{
  id v9 = &v4[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v10 = a4 & 0xC000000000000000;
  id v11 = *(void **)&v4[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  id v12 = *(void **)&v4[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8];
  os_log_type_t v14 = *(void **)&v4[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16];
  unint64_t v13 = *(void *)&v4[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
  *(void *)id v9 = a1;
  *((void *)v9 + 1) = a2;
  *((void *)v9 + 2) = a3;
  *((void *)v9 + 3) = a4;
  sub_1001D05A4(a1, a2, a3, a4);
  sub_1001D0630(v11, v12, v14, v13);
  if (v13 >> 62 != 1 || v10 == 0x4000000000000000)
  {
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E55C(v16, (uint64_t)qword_1004686A8);
    uint64_t v17 = v4;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Client %d switched away from Wired mode, stopping any active background assertion timers", v20, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v23 = (void *)Strong;
      sub_1001A8934(*(unsigned int *)&v17[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 48], v22);
      sub_1001D0630(a1, a2, a3, a4);

      return;
    }
  }
  sub_1001D0630(a1, a2, a3, a4);
}

uint64_t sub_1001BDDAC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    uint64_t v4 = swift_allocError();
    *id v5 = a2;
    id v6 = a2;
    return _swift_continuation_throwingResumeWithError(v2, v4);
  }
  else
  {
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1001BDE44()
{
  v1[19] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[20] = v2;
  v1[21] = *(void *)(v2 - 8);
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_1001BDF04, 0, 0);
}

uint64_t sub_1001BDF04()
{
  uint64_t v63 = v0;
  uint64_t v1 = (id *)(v0 + 19);
  uint64_t v2 = (char *)v0[19];
  uint64_t v3 = v0 + 17;
  uint64_t v4 = &v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  unint64_t v6 = *(void *)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8];
  v0[23] = v6;
  unint64_t v8 = *((void *)v4 + 2);
  unint64_t v7 = *((void *)v4 + 3);
  id v9 = (void *)v7;
  if (v7 >> 62)
  {
    if (v7 >> 62 != 1)
    {
      if (v7 != 0x8000000000000000 || (v8 | v6 | v5) != 0)
      {
        uint64_t v61 = v0;
        if (qword_1004536D0 != -1)
        {
          swift_once();
          uint64_t v2 = (char *)*v1;
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_10008E55C(v35, (uint64_t)qword_1004686A8);
        uint64_t v36 = v2;
        unint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        BOOL v39 = os_log_type_enabled(v37, v38);
        id v40 = *v1;
        if (v39)
        {
          uint64_t v41 = swift_slowAlloc();
          v62[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 136315394;
          uint64_t v42 = UUID.uuidString.getter();
          *uint64_t v3 = sub_100290514(v42, v43, v62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v41 + 12) = 2080;
          unint64_t v44 = *((void *)v4 + 3);
          if (v44 >> 62)
          {
            if (v44 >> 62 == 1)
            {
              unint64_t v45 = 0xE500000000000000;
              uint64_t v46 = 0x6465726957;
            }
            else
            {
              BOOL v51 = (*((void *)v4 + 2) | *(void *)v4 | *((void *)v4 + 1)) == 0;
              BOOL v52 = v44 == 0x8000000000000000;
              if (v52 && v51) {
                uint64_t v46 = 0x656D6567616E614DLL;
              }
              else {
                uint64_t v46 = 0x64696C61766E49;
              }
              if (v52 && v51) {
                unint64_t v45 = 0xEA0000000000746ELL;
              }
              else {
                unint64_t v45 = 0xE700000000000000;
              }
            }
          }
          else
          {
            unint64_t v45 = 0xED00006E6F697461;
            uint64_t v46 = 0x6C756D4564726143;
          }
          id v53 = *v1;
          *(v1 - 1) = (id)sub_100290514(v46, v45, v62);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Session %s: Unexpected state %s while invalidating NFCredentialSessionHandle, expected not Invalid", (uint8_t *)v41, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v0 = v61;
      }
      goto LABEL_37;
    }
    id v9 = (void *)(v7 & 0x3FFFFFFFFFFFFFFFLL);
  }
  sub_1001D05A4((id)v5, (void *)v6, (void *)v8, v7);
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  id v10 = *v1;
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E55C(v11, (uint64_t)qword_1004686A8);
  id v12 = (id)v8;
  id v13 = v9;
  id v14 = v10;
  id v15 = (id)v5;
  id v16 = (id)v6;
  id v17 = v12;
  id v18 = v13;
  id v19 = v14;
  id v20 = v15;
  id v21 = v16;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v59 = v17;
    id v60 = v21;
    uint64_t v24 = v0[21];
    uint64_t v25 = v0[22];
    unint64_t v26 = (void *)v0[19];
    uint64_t v56 = v0[20];
    log = v22;
    uint64_t v27 = swift_slowAlloc();
    v62[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    os_log_type_t type = v23;
    uint64_t v28 = UUID.uuidString.getter();
    v0[15] = sub_100290514(v28, v29, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v27 + 12) = 2080;
    CredentialInternal.identifier.getter();
    uint64_t v30 = UUID.uuidString.getter();
    unint64_t v32 = v31;
    uint64_t v33 = v25;
    id v21 = v60;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v33, v56);
    id v17 = v59;
    v0[16] = sub_100290514(v30, v32, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, log, type, "Session %s: Invalidating NFCredentialSessionHandle for credential %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v47 = *v1;
  }
  if (v6)
  {
    if (qword_1004538F8 != -1) {
      swift_once();
    }
    uint64_t v48 = (void *)(qword_10045AAE8 + 16);
    uint64_t v49 = (os_unfair_lock_s *)(qword_10045AAE8 + 24);
    swift_retain();
    os_unfair_lock_lock(v49);
    sub_100127B64(v48, v62);
    os_unfair_lock_unlock(v49);
    swift_release();
    sub_100298A58();
    swift_release();
    [v21 setEventDelegate:0];
    v0[2] = v0;
    v0[3] = sub_1001BE6A4;
    uint64_t v50 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1001BE804;
    v0[13] = &unk_100414D68;
    v0[14] = v50;
    [v21 endSessionWithCompletion:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
  sub_1001BDB6C(0, 0, 0, 0x8000000000000000);
LABEL_37:
  swift_task_dealloc();
  unint64_t v54 = (uint64_t (*)(void))v0[1];
  return v54();
}

uint64_t sub_1001BE6A4()
{
  return _swift_task_switch(sub_1001BE784, 0, 0);
}

uint64_t sub_1001BE784()
{
  sub_1001BDB6C(0, 0, 0, 0x8000000000000000);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001BE804(uint64_t a1)
{
  return _swift_continuation_resume(*(void *)(a1 + 32));
}

void sub_1001BE80C(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = &OBJC_PROTOCOL___SEServerProtocol;
  if (!a1)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  id v40 = v11;
  uint64_t v41 = a1;
  uint64_t v42 = v3;
  uint64_t v13 = qword_100453728;
  id v14 = a1;
  id v16 = v14;
  if (v13 != -1) {
    id v14 = (id)swift_once();
  }
  id v17 = *(os_unfair_lock_s **)(qword_100468778 + 16);
  uint64_t v18 = __chkstk_darwin(v14, v15);
  *(&v39 - 4) = (uint64_t)v16;
  *(&v39 - 3) = (uint64_t)&off_100414B20;
  *(&v39 - 2) = v19;
  *(&v39 - 1) = a2;
  __chkstk_darwin(v18, v20);
  *(&v39 - 2) = (uint64_t)sub_1001D1034;
  *(&v39 - 1) = v21;
  id v22 = v16;
  swift_retain();
  os_unfair_lock_lock(v17 + 12);
  sub_1001D1054();
  os_unfair_lock_unlock(v17 + 12);
  swift_release();

  a1 = v41;
  uint64_t v4 = v42;
  uint64_t v11 = v40;
  id v12 = &OBJC_PROTOCOL___SEServerProtocol;
  if (a3)
  {
LABEL_7:
    if (v12[25].class_meths != (__objc2_meth_list *)-1) {
      swift_once();
    }
    uint64_t v23 = *(void *)(qword_100468778 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v23 + 48));
    sub_1001D0F30((void *)(v23 + 16), &v43);
    os_unfair_lock_unlock((os_unfair_lock_t)(v23 + 48));
    long long v24 = v43;
    swift_release();
    if ((void)v24)
    {
      uint64_t v25 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v11, 1, 1, v25);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = 0;
      *(void *)(v26 + 24) = 0;
      *(_OWORD *)(v26 + 32) = v24;
      sub_10028E720((uint64_t)v11, (uint64_t)&unk_100457C90, v26);
      swift_release();
    }
  }
LABEL_11:
  if (a2)
  {
    swift_errorRetain();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E55C(v27, (uint64_t)qword_1004686A8);
    id v28 = a1;
    swift_errorRetain();
    id v29 = v28;
    swift_errorRetain();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc();
      *(void *)&long long v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v44 = (uint64_t)a1;
      id v33 = v29;
      sub_10006C51C(&qword_100457C88);
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v44 = sub_100290514(v34, v35, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v32 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v36 = Error.localizedDescription.getter();
      uint64_t v44 = sub_100290514(v36, v37, (uint64_t *)&v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Session %s ended before it started with error %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    os_log_type_t v38 = *(void (**)(void, uint64_t))v4;
    if (*(void *)v4)
    {
      swift_errorRetain();
      v38(0, a2);
      swift_errorRelease();
      swift_errorRelease();
      sub_10008BECC((uint64_t)v38);
    }
    else
    {
      swift_errorRelease();
    }
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
}

uint64_t sub_1001BED14(void *a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  uint64_t result = __chkstk_darwin(v8 - 8, v9);
  id v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &OBJC_PROTOCOL___SEServerProtocol;
  if (!a1)
  {
    if ((a3 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  uint64_t v41 = v12;
  uint64_t v42 = a1;
  uint64_t v43 = v3;
  uint64_t v14 = qword_100453728;
  id v15 = a1;
  id v17 = v15;
  if (v14 != -1) {
    id v15 = (id)swift_once();
  }
  uint64_t v18 = *(os_unfair_lock_s **)(qword_100468778 + 16);
  uint64_t v19 = __chkstk_darwin(v15, v16);
  *(&v40 - 4) = (uint64_t)v17;
  *(&v40 - 3) = (uint64_t)&off_100416E58;
  *(&v40 - 2) = v20;
  *(&v40 - 1) = a2;
  __chkstk_darwin(v19, v21);
  *(&v40 - 2) = (uint64_t)sub_1001D4E48;
  *(&v40 - 1) = v22;
  id v23 = v17;
  swift_retain();
  os_unfair_lock_lock(v18 + 12);
  sub_1001D4E60();
  os_unfair_lock_unlock(v18 + 12);

  uint64_t result = swift_release();
  a1 = v42;
  uint64_t v4 = v43;
  id v12 = v41;
  uint64_t v13 = &OBJC_PROTOCOL___SEServerProtocol;
  if (a3)
  {
LABEL_7:
    if (v13[25].class_meths != (__objc2_meth_list *)-1) {
      swift_once();
    }
    uint64_t v24 = *(void *)(qword_100468778 + 16);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v24 + 48));
    sub_1001D0F30((void *)(v24 + 16), &v44);
    os_unfair_lock_unlock((os_unfair_lock_t)(v24 + 48));
    long long v25 = v44;
    uint64_t result = swift_release();
    if ((void)v25)
    {
      uint64_t v26 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v12, 1, 1, v26);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = 0;
      *(void *)(v27 + 24) = 0;
      *(_OWORD *)(v27 + 32) = v25;
      sub_10028E720((uint64_t)v12, (uint64_t)&unk_100457D20, v27);
      uint64_t result = swift_release();
    }
  }
LABEL_11:
  if (a2)
  {
    swift_errorRetain();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E55C(v28, (uint64_t)qword_1004686A8);
    id v29 = a1;
    swift_errorRetain();
    id v30 = v29;
    swift_errorRetain();
    os_log_type_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      *(void *)&long long v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v45 = (uint64_t)a1;
      id v34 = v30;
      sub_10006C51C(&qword_100457D18);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v45 = sub_100290514(v35, v36, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      uint64_t v45 = sub_100290514(v37, v38, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Session %s ended before it started with error %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v39 = *(void (**)(void, uint64_t))v4;
    if (*(void *)v4)
    {
      swift_errorRetain();
      v39(0, a2);
      swift_errorRelease();
      swift_errorRelease();
      uint64_t result = sub_10008BECC((uint64_t)v39);
    }
    else
    {
      uint64_t result = swift_errorRelease();
    }
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
  }
  return result;
}

char *sub_1001BF21C(_OWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v10 = v9;
  uint64_t v62 = a8;
  uint64_t v63 = a7;
  uint64_t v57 = a6;
  uint64_t v66 = a9;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v58 = HIDWORD(a2);
  unint64_t v59 = HIDWORD(a3);
  unint64_t v60 = HIDWORD(a4);
  unint64_t v61 = HIDWORD(a5);
  uint64_t v65 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65, v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v10[OBJC_IVAR____TtC10seserviced14SECUserSession_credentials] = _swiftEmptyArrayStorage;
  uint64_t v19 = &v10[OBJC_IVAR____TtC10seserviced14SECUserSession_installFinishedCallback];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v20 = OBJC_IVAR____TtC10seserviced14SECUserSession_nearFieldEventDelegate;
  id v21 = objc_allocWithZone((Class)type metadata accessor for SECUserSession.NearFieldEventDelegate());
  uint64_t v22 = v10;
  *(void *)&v10[v20] = [v21 init];
  id v23 = &v22[OBJC_IVAR____TtC10seserviced14SECUserSession__useNetworkShim];
  *(void *)id v23 = 0xD000000000000014;
  *((void *)v23 + 1) = 0x80000001003B1620;
  *((void *)v23 + 2) = 0xD00000000000001DLL;
  *((void *)v23 + 3) = 0x80000001003B6A10;
  *((_WORD *)v23 + 16) = 256;
  uint64_t v24 = &v22[OBJC_IVAR____TtC10seserviced14SECUserSession__bypassRegistration];
  *(void *)uint64_t v24 = 0xD000000000000014;
  *((void *)v24 + 1) = 0x80000001003B1620;
  *((void *)v24 + 2) = 0xD000000000000020;
  *((void *)v24 + 3) = 0x80000001003B6A30;
  *((_WORD *)v24 + 16) = 256;
  long long v25 = &v22[OBJC_IVAR____TtC10seserviced14SECUserSession__bypassGDPR];
  *(void *)long long v25 = 0xD000000000000014;
  *((void *)v25 + 1) = 0x80000001003B1620;
  *((void *)v25 + 2) = 0xD000000000000018;
  *((void *)v25 + 3) = 0x80000001003B6A60;
  *((_WORD *)v25 + 16) = 256;
  uint64_t v26 = OBJC_IVAR____TtC10seserviced14SECUserSession_remoteNotificationProxy;
  *(void *)&v22[OBJC_IVAR____TtC10seserviced14SECUserSession_remoteNotificationProxy] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v27 = OBJC_IVAR____TtC10seserviced14SECUserSession_isPresentingAuthSheet;
  sub_10006C51C(&qword_1004548F0);
  uint64_t v28 = swift_allocObject();
  *(_DWORD *)(v28 + 20) = 0;
  *(unsigned char *)(v28 + 16) = 0;
  *(void *)&v22[v27] = v28;
  uint64_t v29 = v57;
  id v30 = &v22[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo];
  long long v31 = a1[3];
  *((_OWORD *)v30 + 2) = a1[2];
  *((_OWORD *)v30 + 3) = v31;
  *((_OWORD *)v30 + 4) = a1[4];
  *(_OWORD *)(v30 + 74) = *(_OWORD *)((char *)a1 + 74);
  long long v32 = a1[1];
  *(_OWORD *)id v30 = *a1;
  *((_OWORD *)v30 + 1) = v32;
  uint64_t v33 = &v22[OBJC_IVAR____TtC10seserviced14SECUserSession_auditToken];
  int v34 = v58;
  *(_DWORD *)uint64_t v33 = a2;
  *((_DWORD *)v33 + 1) = v34;
  int v35 = v59;
  *((_DWORD *)v33 + 2) = a3;
  *((_DWORD *)v33 + 3) = v35;
  int v36 = v60;
  *((_DWORD *)v33 + 4) = a4;
  *((_DWORD *)v33 + 5) = v36;
  *((_DWORD *)v33 + 6) = a5;
  uint64_t v37 = v62;
  *((_DWORD *)v33 + 7) = v61;
  unint64_t v38 = &v22[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  *(void *)unint64_t v38 = 0;
  *((void *)v38 + 1) = 0;
  *((void *)v38 + 2) = 0;
  *((void *)v38 + 3) = 0x8000000000000000;
  *(void *)&v22[v26] = v37;
  uint64_t v39 = v63;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v40 = (uint64_t *)&v22[OBJC_IVAR____TtC10seserviced14SECUserSession_sessionManagementDelegate];
  *uint64_t v40 = v29;
  v40[1] = v39;
  uint64_t v41 = type metadata accessor for SECNetworkController();
  uint64_t v42 = swift_allocObject();
  uint64_t v43 = v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration;
  uint64_t v44 = type metadata accessor for SECNetworkConfiguration();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  *(void *)(v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_platformIdentifierLengthWithTag) = 19;
  *(void *)(v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_jsblSequenceCounterLastByteIndex) = 38;
  *(_DWORD *)(v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_platformIdTag) = 57120;
  *(_DWORD *)(v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_jsblSeqCounterTag) = 57137;
  *(_DWORD *)(v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_signatureTag) = 24375;
  *(_DWORD *)(v42 + OBJC_IVAR____TtC10seserviced20SECNetworkController_rndDevTag) = 133;
  uint64_t v45 = (uint64_t *)&v22[OBJC_IVAR____TtC10seserviced14SECUserSession_networkController];
  v45[3] = v41;
  v45[4] = (uint64_t)&off_1004180A0;
  *uint64_t v45 = v42;
  sub_10008BEBC(v29);
  UUID.init()();
  uint64_t v46 = v18;
  id v47 = v66;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v22[OBJC_IVAR____TtC10seserviced14SECUserSession_sessionIdentifier], v46, v65);
  swift_unknownObjectWeakAssign();

  v71.receiver = v22;
  v71.super_class = ObjectType;
  uint64_t v48 = (char *)[super init];
  long long v49 = *(_OWORD *)&v48[OBJC_IVAR____TtC10seserviced14SECUserSession__useNetworkShim + 16];
  long long v72 = *(_OWORD *)&v48[OBJC_IVAR____TtC10seserviced14SECUserSession__useNetworkShim];
  long long v73 = v49;
  __int16 v74 = *(_WORD *)&v48[OBJC_IVAR____TtC10seserviced14SECUserSession__useNetworkShim + 32];
  long long v75 = v72;
  long long v76 = v49;
  uint64_t v50 = v48;
  sub_100079AE8((uint64_t)&v75);
  sub_100079AE8((uint64_t)&v76);
  sub_1001AF4B4();
  LOBYTE(v42) = v51;
  sub_100079B14((uint64_t)&v75);
  sub_100079B14((uint64_t)&v76);
  if (v42)
  {
    uint64_t v52 = type metadata accessor for SECNetworkShim();
    swift_allocObject();
    uint64_t v53 = sub_1002D6640();
    uint64_t v69 = v52;
    unint64_t v70 = &off_100419180;
    swift_unknownObjectRelease();

    sub_10008BECC(v29);
    *(void *)&long long v68 = v53;
    uint64_t v54 = (uint64_t)&v50[OBJC_IVAR____TtC10seserviced14SECUserSession_networkController];
    swift_beginAccess();
    sub_10007594C(v54);
    sub_10010197C(&v68, v54);
    swift_endAccess();
  }
  else
  {
    swift_unknownObjectRelease();

    sub_10008BECC(v29);
  }
  return v50;
}

uint64_t sub_1001BF7C8()
{
  v1[47] = v0;
  v1[48] = swift_getObjectType();
  uint64_t v2 = type metadata accessor for SESFeature.RuntimeFlag();
  v1[49] = v2;
  v1[50] = *(void *)(v2 - 8);
  v1[51] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v1[52] = swift_task_alloc();
  return _swift_task_switch(sub_1001BF8C4, 0, 0);
}

uint64_t sub_1001BF8C4()
{
  uint64_t v29 = v0;
  sub_1001C0CB8();
  if (v1)
  {
    sub_1001C1054();
    if (qword_100453958 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 376);
    uint64_t v3 = qword_100468A98;
    uint64_t v4 = OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo;
    *(void *)(v0 + 424) = qword_100468A98;
    *(void *)(v0 + 432) = v4;
    unint64_t v5 = (void *)(v2 + v4);
    *(void *)(v0 + 440) = *v5;
    *(void *)(v0 + 448) = v5[1];
    swift_bridgeObjectRetain();
    return _swift_task_switch(sub_1001BFC48, v3, 0);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    unint64_t v6 = *(void **)(v0 + 376);
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    id v8 = v6;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    id v12 = *(char **)(v0 + 376);
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v28 = v14;
      id v15 = &v12[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo];
      long long v17 = *(_OWORD *)&v12[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 48];
      long long v16 = *(_OWORD *)&v12[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64];
      long long v18 = *(_OWORD *)&v12[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 32];
      *(_OWORD *)(v0 + 90) = *(_OWORD *)&v12[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 74];
      *(_OWORD *)(v0 + 64) = v17;
      *(_OWORD *)(v0 + 80) = v16;
      *(_OWORD *)(v0 + 48) = v18;
      long long v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)(v0 + 16) = *(_OWORD *)v15;
      *(_OWORD *)(v0 + 32) = v19;
      sub_100129A6C(v0 + 16);
      uint64_t v20 = sub_100124BBC();
      unint64_t v22 = v21;
      sub_10012921C(v0 + 16);
      *(void *)(v0 + 360) = sub_100290514(v20, v22, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client %s currently ineligible for launch", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10008E594();
    uint64_t v23 = swift_allocError();
    *uint64_t v24 = 27;
    swift_willThrow();
    long long v25 = *(void **)(v0 + 376);
    swift_beginAccess();
    swift_errorRetain();
    sub_1001BE80C(v25, v23, 1);
    swift_endAccess();
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

uint64_t sub_1001BFC48()
{
  v0[57] = sub_1002EEA60(v0[55], v0[56]);
  v0[58] = 0;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001BFCE0, 0, 0);
}

uint64_t sub_1001BFCE0()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[47];
  v0[43] = v0[57];
  uint64_t v3 = OBJC_IVAR____TtC10seserviced14SECUserSession_sessionIdentifier;
  v0[59] = OBJC_IVAR____TtC10seserviced14SECUserSession_sessionIdentifier;
  uint64_t v4 = v2 + v3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v1, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v1, 0, 1, v5);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[60] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1001BFE48;
  uint64_t v8 = v0[52];
  return sub_1002AB530((uint64_t)(v0 + 43), 0x206E6F6973736553, 0xED00007472617453, v8);
}

uint64_t sub_1001BFE48()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10008E734(*(void *)(v2 + 416), &qword_100455EB0);
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_1001C0B18;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 416);
    swift_bridgeObjectRelease();
    sub_10008E734(v4, &qword_100455EB0);
    uint64_t v3 = sub_1001BFF9C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001BFF9C()
{
  uint64_t v38 = v0;
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 376) + OBJC_IVAR____TtC10seserviced14SECUserSession_credentials;
  swift_beginAccess();
  *(void *)uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for SESFeature.RuntimeFlag.viennaGDPR(_:), v3);
  LOBYTE(v5) = static SESFeature.isEnabled(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v5)
  {
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1001C04F8;
    v6[30] = *(void *)(v0 + 376);
    return _swift_task_switch(sub_1001C13AC, 0, 0);
  }
  else
  {
    uint64_t v7 = (void *)(v0 + 376);
    if (sub_100129D08())
    {
      uint64_t v8 = *v7 + OBJC_IVAR____TtC10seserviced14SECUserSession_sessionManagementDelegate;
      swift_beginAccess();
      uint64_t v9 = *(void (**)(void, void))v8;
      if (*(void *)v8)
      {
        v9(*v7, 0);
        sub_10008BECC((uint64_t)v9);
      }
      *(void *)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      swift_endAccess();
      if (qword_100453700 != -1) {
        swift_once();
      }
      uint64_t v10 = *(void **)(v0 + 376);
      uint64_t v11 = qword_100468730;
      *(void *)(v0 + 232) = *(void *)(v0 + 384);
      *(void *)(v0 + 240) = &off_100414B10;
      *(void *)(v0 + 208) = v10;
      uint64_t v12 = v11 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate;
      swift_beginAccess();
      id v13 = v10;
      sub_1001D116C(v0 + 208, v12);
      swift_endAccess();
      sub_10008E734(v0 + 208, (uint64_t *)&unk_100456740);
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v14 = (void *)*v7;
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E55C(v15, (uint64_t)qword_1004686A8);
      id v16 = v14;
      long long v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        long long v19 = *(char **)(v0 + 376);
        uint64_t v20 = &v19[*(void *)(v0 + 432)];
        uint64_t v21 = swift_slowAlloc();
        v37[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v21 = 136315394;
        uint64_t v22 = UUID.uuidString.getter();
        *(void *)(v0 + 352) = sub_100290514(v22, v23, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v21 + 12) = 2080;
        long long v24 = *((_OWORD *)v20 + 1);
        *(_OWORD *)(v0 + 112) = *(_OWORD *)v20;
        *(_OWORD *)(v0 + 128) = v24;
        long long v25 = *((_OWORD *)v20 + 2);
        long long v26 = *((_OWORD *)v20 + 3);
        long long v27 = *((_OWORD *)v20 + 4);
        *(_OWORD *)(v0 + 186) = *(_OWORD *)(v20 + 74);
        *(_OWORD *)(v0 + 160) = v26;
        *(_OWORD *)(v0 + 176) = v27;
        *(_OWORD *)(v0 + 144) = v25;
        sub_100129A6C(v0 + 112);
        uint64_t v28 = sub_100124BBC();
        unint64_t v30 = v29;
        sub_10012921C(v0 + 112);
        *(void *)(v0 + 368) = sub_100290514(v28, v30, v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "TCC denied session %s for client %s that is not allowed to use SEC", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        long long v31 = (void *)*v7;
      }
      sub_10008E594();
      uint64_t v32 = swift_allocError();
      *uint64_t v33 = 22;
      swift_willThrow();
      int v34 = (void *)*v7;
      swift_beginAccess();
      swift_errorRetain();
      sub_1001BE80C(v34, v32, 1);
      swift_endAccess();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    int v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
}

uint64_t sub_1001C04F8()
{
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001C0BE8;
  }
  else {
    uint64_t v2 = sub_1001C060C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C060C()
{
  uint64_t v32 = v0;
  uint64_t v1 = (void *)(v0 + 376);
  if (sub_100129D08())
  {
    uint64_t v2 = *v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_sessionManagementDelegate;
    swift_beginAccess();
    uint64_t v3 = *(void (**)(void, void))v2;
    if (*(void *)v2)
    {
      v3(*v1, 0);
      sub_10008BECC((uint64_t)v3);
    }
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    swift_endAccess();
    if (qword_100453700 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void **)(v0 + 376);
    uint64_t v5 = qword_100468730;
    *(void *)(v0 + 232) = *(void *)(v0 + 384);
    *(void *)(v0 + 240) = &off_100414B10;
    *(void *)(v0 + 208) = v4;
    uint64_t v6 = v5 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate;
    swift_beginAccess();
    id v7 = v4;
    sub_1001D116C(v0 + 208, v6);
    swift_endAccess();
    sub_10008E734(v0 + 208, (uint64_t *)&unk_100456740);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)*v1;
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    id v10 = v8;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = *(char **)(v0 + 376);
      uint64_t v14 = &v13[*(void *)(v0 + 432)];
      uint64_t v15 = swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v16 = UUID.uuidString.getter();
      *(void *)(v0 + 352) = sub_100290514(v16, v17, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      long long v18 = *((_OWORD *)v14 + 1);
      *(_OWORD *)(v0 + 112) = *(_OWORD *)v14;
      *(_OWORD *)(v0 + 128) = v18;
      long long v19 = *((_OWORD *)v14 + 2);
      long long v20 = *((_OWORD *)v14 + 3);
      long long v21 = *((_OWORD *)v14 + 4);
      *(_OWORD *)(v0 + 186) = *(_OWORD *)(v14 + 74);
      *(_OWORD *)(v0 + 160) = v20;
      *(_OWORD *)(v0 + 176) = v21;
      *(_OWORD *)(v0 + 144) = v19;
      sub_100129A6C(v0 + 112);
      uint64_t v22 = sub_100124BBC();
      unint64_t v24 = v23;
      sub_10012921C(v0 + 112);
      *(void *)(v0 + 368) = sub_100290514(v22, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "TCC denied session %s for client %s that is not allowed to use SEC", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      long long v25 = (void *)*v1;
    }
    sub_10008E594();
    uint64_t v26 = swift_allocError();
    *long long v27 = 22;
    swift_willThrow();
    uint64_t v28 = (void *)*v1;
    swift_beginAccess();
    swift_errorRetain();
    sub_1001BE80C(v28, v26, 1);
    swift_endAccess();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

uint64_t sub_1001C0A48()
{
  uint64_t v1 = v0[58];
  uint64_t v2 = (void *)v0[47];
  swift_beginAccess();
  swift_errorRetain();
  sub_1001BE80C(v2, v1, 1);
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C0B18()
{
  uint64_t v1 = v0[61];
  uint64_t v2 = (void *)v0[47];
  swift_beginAccess();
  swift_errorRetain();
  sub_1001BE80C(v2, v1, 1);
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C0BE8()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = (void *)v0[47];
  swift_beginAccess();
  swift_errorRetain();
  sub_1001BE80C(v2, v1, 1);
  swift_endAccess();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1001C0CB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)kTCCServiceSecureElementAccess;
  if (kTCCServiceSecureElementAccess)
  {
    uint64_t v3 = &v1[OBJC_IVAR____TtC10seserviced14SECUserSession_auditToken];
    long long v4 = *(_OWORD *)&v1[OBJC_IVAR____TtC10seserviced14SECUserSession_auditToken + 16];
    long long v29 = *(_OWORD *)&v1[OBJC_IVAR____TtC10seserviced14SECUserSession_auditToken];
    long long v30 = v4;
    int v5 = TCCAccessPreflightWithAuditToken();

    uint64_t v6 = v5 != 2;
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      BOOL v27 = v5 != 2;
      id v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)id v10 = 136315138;
      *(void *)&long long v29 = v11;
      if (v5 == 2) {
        uint64_t v12 = 0x7070417473726966;
      }
      else {
        uint64_t v12 = 0xD000000000000013;
      }
      if (v5 == 2) {
        unint64_t v13 = 0xEE0068636E75614CLL;
      }
      else {
        unint64_t v13 = 0x80000001003B68C0;
      }
      *(void *)&v34[0] = sub_100290514(v12, v13, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting session with domain %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v6 = v27;
      swift_slowDealloc();
    }

    long long v14 = *((_OWORD *)v3 + 1);
    v34[0] = *(_OWORD *)v3;
    v34[1] = v14;
    char v35 = 0;
    if ((sub_1002973F0(v6, (uint64_t)v34, 0, 0) & 1) == 0)
    {
      uint64_t v15 = v1;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        long long v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)long long v18 = 136315138;
        uint64_t v28 = v19;
        long long v21 = *(_OWORD *)&v15[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 48];
        long long v20 = *(_OWORD *)&v15[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 64];
        long long v22 = *(_OWORD *)&v15[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 32];
        *(_OWORD *)&v33[10] = *(_OWORD *)&v15[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 74];
        long long v32 = v21;
        *(_OWORD *)uint64_t v33 = v20;
        long long v31 = v22;
        long long v23 = *(_OWORD *)&v15[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 16];
        long long v29 = *(_OWORD *)&v15[OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo];
        long long v30 = v23;
        sub_100129A6C((uint64_t)&v29);
        uint64_t v24 = sub_100124BBC();
        unint64_t v26 = v25;
        sub_10012921C((uint64_t)&v29);
        sub_100290514(v24, v26, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting session for client %s that is ineligible", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001C1054()
{
  uint64_t v1 = v0;
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = (void (**)(uint64_t))(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_installFinishedCallback);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_installFinishedCallback);
  *uint64_t v3 = sub_1001D2A20;
  v3[1] = (void (*)(uint64_t))v2;
  sub_10008BECC(v4);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_nearFieldEventDelegate);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1001D2A28;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = (os_unfair_lock_s **)(v5 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__rfFieldChanged);
  swift_beginAccess();
  os_log_type_t v9 = *v8;
  id v10 = *v8 + 4;
  uint64_t v11 = v9 + 8;
  swift_retain_n();
  os_unfair_lock_lock(v11);
  sub_1001D2A5C(v10);
  os_unfair_lock_unlock(v11);
  sub_10008BECC((uint64_t)sub_1001D2A30);
  swift_endAccess();
  swift_release_n();
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_1001D2A9C;
  *(void *)(v13 + 24) = v12;
  long long v14 = (os_unfair_lock_s **)(v5 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__receivedHciData);
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v16 = *v14 + 4;
  os_log_type_t v17 = v15 + 8;
  swift_retain_n();
  os_unfair_lock_lock(v17);
  sub_1001D2A5C(v16);
  os_unfair_lock_unlock(v17);
  sub_10008BECC((uint64_t)sub_1001D2AA4);
  swift_endAccess();
  swift_release_n();
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_1001D2ADC;
  *(void *)(v19 + 24) = v18;
  long long v20 = (os_unfair_lock_s **)(v5 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__authExpired);
  swift_beginAccess();
  long long v21 = *v20 + 4;
  long long v22 = *v20 + 8;
  swift_retain_n();
  os_unfair_lock_lock(v22);
  sub_1001D2B0C(v21);
  os_unfair_lock_unlock(v22);
  sub_10008BECC((uint64_t)sub_1001D2AE4);
  swift_endAccess();
  return swift_release_n();
}

uint64_t sub_1001C138C()
{
  *(void *)(v1 + 240) = v0;
  return _swift_task_switch(sub_1001C13AC, 0, 0);
}

uint64_t sub_1001C13AC()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[30];
  uint64_t v2 = qword_100468A98;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo;
  v0[31] = qword_100468A98;
  v0[32] = v3;
  uint64_t v4 = (void *)(v1 + v3);
  v0[33] = *v4;
  v0[34] = v4[1];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001C1470, v2, 0);
}

uint64_t sub_1001C1470()
{
  v0[35] = sub_100123C34(v0[33], v0[34]);
  v0[36] = 0;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001C1508, 0, 0);
}

uint64_t sub_1001C1508()
{
  uint64_t v47 = v0;
  uint64_t v1 = *(void **)(v0 + 280);
  if (v1)
  {
    if (ApplicationInfoInternal.bundleId.getter() == 0x6E776F6E6B6E55 && v2 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v4 & 1) == 0)
      {
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v6 = (id *)(v0 + 240);
        uint64_t v5 = *(void **)(v0 + 240);
        uint64_t v7 = type metadata accessor for Logger();
        sub_10008E55C(v7, (uint64_t)qword_1004686A8);
        id v8 = v5;
        os_log_type_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = *(char **)(v0 + 240);
          uint64_t v12 = &v11[*(void *)(v0 + 256)];
          uint64_t v13 = swift_slowAlloc();
          uint64_t v46 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136315394;
          os_log_type_t type = v10;
          uint64_t v14 = UUID.uuidString.getter();
          *(void *)(v0 + 224) = sub_100290514(v14, v15, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          *(_WORD *)(v13 + 12) = 2080;
          long long v16 = *((_OWORD *)v12 + 1);
          *(_OWORD *)(v0 + 16) = *(_OWORD *)v12;
          *(_OWORD *)(v0 + 32) = v16;
          long long v17 = *((_OWORD *)v12 + 2);
          long long v18 = *((_OWORD *)v12 + 3);
          long long v19 = *((_OWORD *)v12 + 4);
          *(_OWORD *)(v0 + 90) = *(_OWORD *)(v12 + 74);
          *(_OWORD *)(v0 + 64) = v18;
          *(_OWORD *)(v0 + 80) = v19;
          *(_OWORD *)(v0 + 48) = v17;
          sub_100129A6C(v0 + 16);
          uint64_t v20 = sub_100124BBC();
          unint64_t v22 = v21;
          sub_10012921C(v0 + 16);
          *(void *)(v0 + 232) = sub_100290514(v20, v22, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v9, type, "Session %s, clientInfo %s, subsequent launch detected", (uint8_t *)v13, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          id v43 = *v6;
        }
        uint64_t v44 = (void *)swift_task_alloc();
        *(void *)(v0 + 296) = v44;
        *uint64_t v44 = v0;
        v44[1] = sub_1001C1AC8;
        return sub_1001D17CC();
      }
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  long long v23 = *(void **)(v0 + 240);
  uint64_t v24 = type metadata accessor for Logger();
  sub_10008E55C(v24, (uint64_t)qword_1004686A8);
  id v25 = v23;
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = *(char **)(v0 + 240);
    long long v29 = &v28[*(void *)(v0 + 256)];
    uint64_t v30 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = UUID.uuidString.getter();
    *(void *)(v0 + 208) = sub_100290514(v31, v32, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v30 + 12) = 2080;
    long long v33 = *((_OWORD *)v29 + 1);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)v29;
    *(_OWORD *)(v0 + 128) = v33;
    long long v34 = *((_OWORD *)v29 + 2);
    long long v35 = *((_OWORD *)v29 + 3);
    long long v36 = *((_OWORD *)v29 + 4);
    *(_OWORD *)(v0 + 186) = *(_OWORD *)(v29 + 74);
    *(_OWORD *)(v0 + 160) = v35;
    *(_OWORD *)(v0 + 176) = v36;
    *(_OWORD *)(v0 + 144) = v34;
    sub_100129A6C(v0 + 112);
    uint64_t v37 = sub_100124BBC();
    unint64_t v39 = v38;
    sub_10012921C(v0 + 112);
    *(void *)(v0 + 216) = sub_100290514(v37, v39, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Session %s, clientInfo %s, first launch detected", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v40 = *(void **)(v0 + 240);
  }
  uint64_t v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 312) = v41;
  *uint64_t v41 = v0;
  v41[1] = sub_1001C1CA4;
  return sub_1001CDF88();
}

uint64_t sub_1001C1AC8()
{
  *(void *)(*(void *)v1 + 304) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001C1C40;
  }
  else {
    uint64_t v2 = sub_1001C1BDC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C1BDC()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C1C40()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C1CA4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001C1D98()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001C1DFC(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR____TtC10seserviced14SECUserSession_remoteNotificationProxy);
    if (v8)
    {
      uint64_t v9 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      os_log_type_t v10 = (void *)swift_allocObject();
      v10[2] = 0;
      v10[3] = 0;
      v10[4] = v8;
      v10[5] = a1;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      sub_10028E720((uint64_t)v5, (uint64_t)&unk_100457D10, (uint64_t)v10);

      swift_release();
      return;
    }
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686A8);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)long long v17 = 136315138;
      uint64_t v19 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Remote notification proxy is unexpectedly nil", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_1004686A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v19 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v12, "%s: self is unexpectedly nil", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001C21F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 120) = a4;
  *(void *)(v5 + 128) = a5;
  return _swift_task_switch(sub_1001C2214, 0, 0);
}

uint64_t sub_1001C2214()
{
  uint64_t v1 = (void *)v0[15];
  type metadata accessor for CredentialInternal();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[17] = isa;
  v0[2] = v0;
  v0[3] = sub_1001C2328;
  uint64_t v3 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001BE804;
  v0[13] = &unk_100414E28;
  v0[14] = v3;
  [v1 installationCompletedWithCredentials:isa completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C2328()
{
  return _swift_task_switch(sub_1001C2408, 0, 0);
}

uint64_t sub_1001C2408()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1001C2468(char a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = *(void *)(Strong + OBJC_IVAR____TtC10seserviced14SECUserSession_remoteNotificationProxy);
    if (v8)
    {
      uint64_t v9 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v5, 1, 1, v9);
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = v8;
      *(unsigned char *)(v10 + 40) = a1 & 1;
      swift_unknownObjectRetain();
      sub_10028E720((uint64_t)v5, (uint64_t)&unk_100457D00, v10);

      swift_release();
      return;
    }
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686A8);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, v16))
    {
      long long v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)long long v17 = 136315138;
      uint64_t v19 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Remote notification proxy is unexpectedly nil", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_1004686A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v19 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v12, "%s: self is unexpectedly nil", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001C2860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 128) = a5;
  *(void *)(v5 + 120) = a4;
  return _swift_task_switch(sub_1001C2884, 0, 0);
}

uint64_t sub_1001C2884()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 128);
  uint64_t v2 = *(void **)(v0 + 120);
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1001C2980;
  uint64_t v3 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_1001BE804;
  *(void *)(v0 + 104) = &unk_100414DE8;
  *(void *)(v0 + 112) = v3;
  [v2 rfFieldChanged:v1 completionHandler:v0 + 80];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001C2980()
{
  return _swift_task_switch(sub_1001C2A60, 0, 0);
}

uint64_t sub_1001C2A60()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001C2A74(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = Strong;
    uint64_t v14 = *(void *)(Strong + OBJC_IVAR____TtC10seserviced14SECUserSession_remoteNotificationProxy);
    if (v14)
    {
      uint64_t v15 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
      os_log_type_t v16 = (void *)swift_allocObject();
      void v16[2] = 0;
      v16[3] = 0;
      v16[4] = v14;
      v16[5] = a1;
      v16[6] = a2;
      v16[7] = a3;
      v16[8] = a4;
      swift_unknownObjectRetain();
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(a3, a4);
      sub_10028E720((uint64_t)v11, (uint64_t)&unk_100457CF0, (uint64_t)v16);

      swift_release();
      return;
    }
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E55C(v20, (uint64_t)qword_1004686A8);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)long long v23 = 136315138;
      uint64_t v25 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: Remote notification proxy is unexpectedly nil", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E55C(v17, (uint64_t)qword_1004686A8);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v25 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v18, "%s: self is unexpectedly nil", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001C2E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[18] = a7;
  v8[19] = a8;
  v8[16] = a5;
  v8[17] = a6;
  v8[15] = a4;
  return _swift_task_switch(sub_1001C2EB8, 0, 0);
}

uint64_t sub_1001C2EB8()
{
  uint64_t v1 = (void *)v0[15];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v0[20] = isa;
  Class v3 = Data._bridgeToObjectiveC()().super.isa;
  v0[21] = v3;
  v0[2] = v0;
  v0[3] = sub_1001C2FE8;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001BE804;
  v0[13] = &unk_100414DA8;
  v0[14] = v4;
  [v1 receivedHciDataWithData:isa appletIdentifier:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C2FE8()
{
  return _swift_task_switch(sub_1001C30C8, 0, 0);
}

uint64_t sub_1001C30C8()
{
  uint64_t v1 = *(void **)(v0 + 160);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void sub_1001C312C()
{
  uint64_t v0 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v0 - 8, v1);
  Class v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = (void *)Strong;
    uint64_t v6 = *(void *)(Strong + OBJC_IVAR____TtC10seserviced14SECUserSession_remoteNotificationProxy);
    if (v6)
    {
      uint64_t v7 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
      uint64_t v8 = (void *)swift_allocObject();
      v8[2] = 0;
      v8[3] = 0;
      v8[4] = v5;
      v8[5] = v6;
      swift_unknownObjectRetain();
      id v9 = v5;
      sub_10028E720((uint64_t)v3, (uint64_t)&unk_100457CD8, (uint64_t)v8);
      swift_release();
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10008E55C(v14, (uint64_t)qword_1004686A8);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v17 = 136315138;
        uint64_t v19 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Remote notification proxy is unexpectedly nil", v17, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
    }
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_1004686A8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v19 = sub_100290514(0xD00000000000001CLL, 0x80000001003B68A0, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: self is unexpectedly nil", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1001C351C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 120) = a5;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v5 + 128) = v6;
  *uint64_t v6 = v5;
  v6[1] = sub_1001C35B0;
  return sub_1001BDE44();
}

uint64_t sub_1001C35B0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C36AC, 0, 0);
}

uint64_t sub_1001C36AC()
{
  uint64_t v1 = (void *)v0[15];
  sub_10008E594();
  swift_allocError();
  *uint64_t v2 = 17;
  uint64_t v3 = _convertErrorToNSError(_:)();
  v0[17] = v3;
  swift_errorRelease();
  v0[2] = v0;
  v0[3] = sub_1001C2328;
  uint64_t v4 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1001BE804;
  v0[13] = &unk_100414D50;
  v0[14] = v4;
  [v1 sessionErrorEventWithReason:v3 completionHandler:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_1001C37EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a5;
  v6[3] = a6;
  uint64_t v7 = (void *)swift_task_alloc();
  v6[4] = v7;
  *uint64_t v7 = v6;
  v7[1] = sub_1001C3884;
  return sub_1001C39E4(1);
}

uint64_t sub_1001C3884()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1001C3980, 0, 0);
}

uint64_t sub_1001C3980()
{
  (*(void (**)(void))(v0 + 16))();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C39E4(char a1)
{
  *(void *)(v2 + 224) = v1;
  *(unsigned char *)(v2 + 264) = a1;
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v2 + 232) = v3;
  *(void *)(v2 + 240) = *(void *)(v3 - 8);
  *(void *)(v2 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_1001C3AA8, 0, 0);
}

uint64_t sub_1001C3AA8()
{
  uint64_t v51 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 224);
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.info.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 224);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v50 = v9;
    uint64_t v10 = UUID.uuidString.getter();
    *(void *)(v0 + 216) = sub_100290514(v10, v11, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "End session %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v12 = *(void *)(v0 + 224) + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState;
  unint64_t v13 = *(void *)v12;
  unint64_t v14 = *(void *)(v12 + 8);
  *(void *)(v0 + 256) = v14;
  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v16 = *(void *)(v12 + 24);
  uint64_t v17 = (void *)v16;
  if (!(v16 >> 62))
  {
LABEL_9:
    id v18 = (id)v15;
    id v19 = v17;
    id v20 = (id)v13;
    id v21 = (id)v14;
    id v48 = v18;
    id v47 = v19;
    id v22 = v20;
    id v23 = v21;
    sub_1001D05A4((id)v13, (void *)v14, (void *)v15, v16);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      long long v49 = v23;
      uint64_t v26 = *(void *)(v0 + 240);
      uint64_t v27 = *(void *)(v0 + 248);
      uint64_t v46 = *(void *)(v0 + 232);
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315138;
      CredentialInternal.identifier.getter();
      uint64_t v29 = UUID.uuidString.getter();
      unint64_t v31 = v30;
      uint64_t v32 = v27;
      id v23 = v49;
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v32, v46);
      *(void *)(v0 + 208) = sub_100290514(v29, v31, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      long long v33 = v47;

      long long v34 = v48;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalidating NFCredentialSessionHandle for credential %s", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      long long v33 = v47;
      long long v34 = v48;
    }
    if (v14)
    {
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1001C4134;
      uint64_t v39 = swift_continuation_init();
      *(void *)(v0 + 120) = _NSConcreteStackBlock;
      *(void *)(v0 + 128) = 0x40000000;
      *(void *)(v0 + 136) = sub_1001BE804;
      *(void *)(v0 + 144) = &unk_100414B50;
      *(void *)(v0 + 152) = v39;
      [v23 endSessionWithCompletion:v0 + 120];
      return _swift_continuation_await(v0 + 16);
    }
    goto LABEL_23;
  }
  if (v16 >> 62 == 1)
  {
    uint64_t v17 = (void *)(v16 & 0x3FFFFFFFFFFFFFFFLL);
    goto LABEL_9;
  }
  if (v16 != 0x8000000000000000 || (v15 | v14 | v13) != 0)
  {
    long long v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      unint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Attempting to end an invalid session, no-op", v38, 2u);
      swift_slowDealloc();
    }

    goto LABEL_26;
  }
LABEL_23:
  sub_1001BDB6C((void *)8, 0, 0, 0x8000000000000000);
  sub_1001CFAE0();
  if (qword_100453700 != -1) {
    swift_once();
  }
  uint64_t v40 = *(void **)(v0 + 224);
  char v41 = *(unsigned char *)(v0 + 264);
  uint64_t v42 = qword_100468730;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 112) = 0;
  uint64_t v43 = v42 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate;
  swift_beginAccess();
  sub_1001D0EC8(v0 + 80, v43);
  swift_endAccess();
  swift_beginAccess();
  sub_1001BE80C(v40, 0, v41);
  swift_endAccess();
LABEL_26:
  swift_task_dealloc();
  uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
  return v44();
}

uint64_t sub_1001C4134()
{
  return _swift_task_switch(sub_1001C4214, 0, 0);
}

uint64_t sub_1001C4214()
{
  sub_1001BDB6C((void *)8, 0, 0, 0x8000000000000000);
  sub_1001CFAE0();
  if (qword_100453700 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 224);
  char v2 = *(unsigned char *)(v0 + 264);
  uint64_t v3 = qword_100468730;
  *(_OWORD *)(v0 + 96) = 0u;
  *(void *)(v0 + 112) = 0;
  *(_OWORD *)(v0 + 80) = 0u;
  uint64_t v4 = v3 + OBJC_IVAR____TtC10seserviced23SECNotificationListener_delegate;
  swift_beginAccess();
  sub_1001D0EC8(v0 + 80, v4);
  swift_endAccess();
  swift_beginAccess();
  sub_1001BE80C(v1, 0, v2);
  swift_endAccess();
  swift_task_dealloc();
  os_log_type_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1001C44D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[13] = a5;
  v6[14] = a6;
  v6[12] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[15] = v7;
  v6[16] = *(void *)(v7 - 8);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  v6[19] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for StateInternal();
  v6[20] = v8;
  v6[21] = *(void *)(v8 - 8);
  v6[22] = swift_task_alloc();
  return _swift_task_switch(sub_1001C4614, 0, 0);
}

uint64_t sub_1001C4614()
{
  os_log_type_t v25 = v0;
  uint64_t v1 = (void **)(v0 + 12);
  char v2 = (char *)v0[12];
  uint64_t v3 = &v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  uint64_t v4 = *(void *)&v2[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
  if (v4 < 0
    && (v4 == 0x8000000000000000
      ? (BOOL v5 = (*((void *)v3 + 1) | *((void *)v3 + 2) | *(void *)v3) == 0)
      : (BOOL v5 = 0),
        v5))
  {
    unint64_t v15 = (void *)swift_task_alloc();
    v0[23] = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1001C4A08;
    return sub_100260638();
  }
  else
  {
    if (qword_1004536D0 != -1)
    {
      swift_once();
      char v2 = (char *)*v1;
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    uint64_t v7 = v2;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      v0[10] = sub_100290514(0xD000000000000022, 0x80000001003B69E0, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2080;
      unint64_t v11 = *((void *)v3 + 3);
      if (v11 >> 62)
      {
        if (v11 >> 62 == 1)
        {
          unint64_t v12 = 0xE500000000000000;
          uint64_t v13 = 0x6465726957;
        }
        else
        {
          BOOL v17 = (*((void *)v3 + 2) | *(void *)v3 | *((void *)v3 + 1)) == 0;
          BOOL v18 = v11 == 0x8000000000000000;
          if (v18 && v17) {
            uint64_t v13 = 0x656D6567616E614DLL;
          }
          else {
            uint64_t v13 = 0x64696C61766E49;
          }
          if (v18 && v17) {
            unint64_t v12 = 0xEA0000000000746ELL;
          }
          else {
            unint64_t v12 = 0xE700000000000000;
          }
        }
      }
      else
      {
        unint64_t v12 = 0xED00006E6F697461;
        uint64_t v13 = 0x6C756D4564726143;
      }
      id v19 = *v1;
      v0[11] = sub_100290514(v13, v12, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: Unexpected state %s, expected Management", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v14 = *v1;
    }
    sub_10008E594();
    uint64_t v20 = swift_allocError();
    *id v21 = 10;
    swift_willThrow();
    id v22 = (void (*)(void, uint64_t))v0[13];
    swift_errorRetain();
    v22(0, v20);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v23 = (uint64_t (*)(void))v0[1];
    return v23();
  }
}

uint64_t sub_1001C4A08(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001C57B0;
  }
  else {
    uint64_t v4 = sub_1001C4B1C;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001C4B1C()
{
  unint64_t v1 = *(void *)(v0 + 192);
  if (v1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  *(void *)(v0 + 208) = v2;
  if (v2)
  {
    *(void *)(v0 + 216) = OBJC_IVAR____TtC10seserviced14SECUserSession_networkController;
    swift_beginAccess();
    uint64_t v3 = 0;
    *(_DWORD *)(v0 + 304) = enum case for StateInternal.installationPending(_:);
    while (1)
    {
      *(void *)(v0 + 224) = _swiftEmptyArrayStorage;
      uint64_t v4 = *(void *)(v0 + 192);
      if ((v4 & 0xC000000000000001) != 0) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v5 = *(id *)(v4 + 8 * v3 + 32);
      }
      uint64_t v6 = v5;
      *(void *)(v0 + 232) = v5;
      *(void *)(v0 + 240) = v3 + 1;
      if (__OFADD__(v3, 1))
      {
        __break(1u);
        goto LABEL_22;
      }
      int v7 = *(_DWORD *)(v0 + 304);
      uint64_t v9 = *(void *)(v0 + 168);
      uint64_t v8 = *(void *)(v0 + 176);
      uint64_t v10 = *(void *)(v0 + 160);
      CredentialInternal.state.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v9 + 88))(v8, v10) == v7) {
        break;
      }
      uint64_t v12 = *(void *)(v0 + 168);
      uint64_t v11 = *(void *)(v0 + 176);
      uint64_t v13 = *(void *)(v0 + 160);

      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      uint64_t v3 = *(void *)(v0 + 240);
      if (v3 == *(void *)(v0 + 208)) {
        goto LABEL_11;
      }
    }
    uint64_t v16 = *(void *)(v0 + 96) + *(void *)(v0 + 216);
    (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
    sub_10010DDC4(v16, v0 + 16);
    uint64_t v17 = *(void *)(v0 + 40);
    uint64_t v18 = *(void *)(v0 + 48);
    sub_100075908((void *)(v0 + 16), v17);
    CredentialInternal.identifier.getter();
    id v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 24) + **(int **)(v18 + 24));
    id v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v19;
    *id v19 = v0;
    v19[1] = sub_1001C4EBC;
    uint64_t v20 = *(void *)(v0 + 152);
    return v22(v20, v17, v18);
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 248) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      unint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 288) = v14;
      *unint64_t v14 = v0;
      v14[1] = sub_1001C55C4;
      return sub_100260C48((uint64_t)_swiftEmptyArrayStorage);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 192), 0);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }
  }
}

uint64_t sub_1001C4EBC(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 264) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 152);
    uint64_t v8 = v4 + 120;
    uint64_t v6 = *(void *)(v4 + 120);
    uint64_t v7 = *(void *)(v8 + 8);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = sub_1001C5868;
  }
  else
  {
    uint64_t v10 = *(void *)(v4 + 152);
    uint64_t v11 = *(void *)(v4 + 120);
    uint64_t v12 = *(void *)(v4 + 128);
    *(unsigned char *)(v4 + 308) = a1;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    *(void *)(v4 + 272) = v13;
    *(void *)(v4 + 280) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v13(v10, v11);
    uint64_t v9 = sub_1001C504C;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_1001C504C()
{
  uint64_t v47 = v0;
  uint64_t v1 = (void *)(v0 + 16);
  int v2 = *(unsigned __int8 *)(v0 + 308);
  sub_10007594C(v0 + 16);
  if (v2 != 2)
  {

    uint64_t v15 = *(void *)(v0 + 224);
    goto LABEL_18;
  }
  if (qword_1004536D0 != -1) {
LABEL_30:
  }
    swift_once();
  uint64_t v3 = *(void **)(v0 + 232);
  uint64_t v4 = type metadata accessor for Logger();
  sub_10008E55C(v4, (uint64_t)qword_1004686A8);
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v0 + 272);
    uint64_t v45 = v1;
    uint64_t v8 = *(void **)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    CredentialInternal.identifier.getter();
    uint64_t v12 = UUID.uuidString.getter();
    unint64_t v14 = v13;
    v43(v9, v10);
    *(void *)(v11 + 4) = sub_100290514(v12, v14, &v46);
    swift_bridgeObjectRelease();

    uint64_t v1 = v45;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Credential %s installation failure", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void **)(v0 + 232);
  }
  CredentialInternal.identifier.getter();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *(void *)(v0 + 224);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v15 = sub_10025A3B0(0, *(void *)(v15 + 16) + 1, 1, *(void *)(v0 + 224));
  }
  unint64_t v19 = *(void *)(v15 + 16);
  unint64_t v18 = *(void *)(v15 + 24);
  if (v19 >= v18 >> 1) {
    uint64_t v15 = sub_10025A3B0(v18 > 1, v19 + 1, 1, v15);
  }
  uint64_t v20 = *(void **)(v0 + 232);
  uint64_t v22 = *(void *)(v0 + 128);
  uint64_t v21 = *(void *)(v0 + 136);
  uint64_t v23 = *(void *)(v0 + 120);
  *(void *)(v15 + 16) = v19 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(v15+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v19, v21, v23);

  while (1)
  {
LABEL_18:
    uint64_t v34 = *(void *)(v0 + 240);
    if (v34 == *(void *)(v0 + 208))
    {
      swift_bridgeObjectRelease();
      *(void *)(v0 + 248) = v15;
      if (*(void *)(v15 + 16))
      {
        long long v35 = (void *)swift_task_alloc();
        *(void *)(v0 + 288) = v35;
        void *v35 = v0;
        v35[1] = sub_1001C55C4;
        return sub_100260C48(v15);
      }
      else
      {
        swift_bridgeObjectRelease();
        (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 192), 0);
        swift_bridgeObjectRelease();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        os_log_type_t v37 = *(uint64_t (**)(void))(v0 + 8);
        return v37();
      }
    }
    *(void *)(v0 + 224) = v15;
    uint64_t v24 = *(void *)(v0 + 192);
    if ((v24 & 0xC000000000000001) != 0) {
      id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v25 = *(id *)(v24 + 8 * v34 + 32);
    }
    uint64_t v26 = v25;
    *(void *)(v0 + 232) = v25;
    *(void *)(v0 + 240) = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    int v27 = *(_DWORD *)(v0 + 304);
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v28 = *(void *)(v0 + 176);
    uint64_t v30 = *(void *)(v0 + 160);
    CredentialInternal.state.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v29 + 88))(v28, v30) == v27) {
      break;
    }
    uint64_t v31 = *(void *)(v0 + 168);
    uint64_t v32 = *(void *)(v0 + 176);
    uint64_t v33 = *(void *)(v0 + 160);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v33);
  }
  uint64_t v38 = *(void *)(v0 + 96) + *(void *)(v0 + 216);
  (*(void (**)(void, void))(*(void *)(v0 + 168) + 8))(*(void *)(v0 + 176), *(void *)(v0 + 160));
  sub_10010DDC4(v38, (uint64_t)v1);
  uint64_t v39 = *(void *)(v0 + 40);
  uint64_t v40 = *(void *)(v0 + 48);
  sub_100075908(v1, v39);
  CredentialInternal.identifier.getter();
  uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 + 24) + **(int **)(v40 + 24));
  char v41 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v41;
  *char v41 = v0;
  v41[1] = sub_1001C4EBC;
  uint64_t v42 = *(void *)(v0 + 152);
  return v44(v42, v39, v40);
}

uint64_t sub_1001C55C4()
{
  *(void *)(*(void *)v1 + 296) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    int v2 = sub_1001C5934;
  }
  else
  {
    int v2 = sub_1001C5708;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C5708()
{
  (*(void (**)(void, void))(v0 + 104))(*(void *)(v0 + 192), 0);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001C57B0()
{
  uint64_t v1 = v0[25];
  int v2 = (void (*)(void, uint64_t))v0[13];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C5868()
{
  sub_10007594C(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 264);
  int v2 = *(void (**)(void, uint64_t))(v0 + 104);
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C5934()
{
  uint64_t v1 = v0[37];
  int v2 = (void (*)(void, uint64_t))v0[13];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C5B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[75] = v15;
  v8[74] = a8;
  v8[73] = a7;
  v8[72] = a6;
  v8[71] = a5;
  v8[70] = a4;
  sub_10006C51C(&qword_100455C60);
  v8[76] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SERError();
  v8[77] = v9;
  v8[78] = *(void *)(v9 - 8);
  v8[79] = swift_task_alloc();
  v8[80] = swift_task_alloc();
  v8[81] = swift_task_alloc();
  v8[82] = type metadata accessor for SECCredentialConfig();
  v8[83] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SESFeature.RuntimeFlag();
  v8[84] = v10;
  v8[85] = *(void *)(v10 - 8);
  v8[86] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v8[87] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[88] = v12;
  v8[89] = *(void *)(v12 + 64);
  v8[90] = swift_task_alloc();
  v8[91] = swift_task_alloc();
  v8[92] = swift_task_alloc();
  v8[93] = swift_task_alloc();
  v8[94] = swift_task_alloc();
  return _swift_task_switch(sub_1001C5D90, 0, 0);
}

uint64_t sub_1001C5D90()
{
  uint64_t v22 = v0;
  uint64_t v1 = (_OWORD *)(*(void *)(v0 + 560) + OBJC_IVAR____TtC10seserviced14SECUserSession_auditToken);
  long long v2 = v1[1];
  *(_OWORD *)(v0 + 368) = *v1;
  *(_OWORD *)(v0 + 384) = v2;
  *(unsigned char *)(v0 + 400) = 0;
  if (sub_1002973F0(2, v0 + 368, 0, 0))
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 760) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1001C6124;
    uint64_t v4 = *(void *)(v0 + 560);
    v3[25] = 3;
    v3[26] = v4;
    return _swift_task_switch(sub_1001C8698, 0, 0);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void **)(v0 + 560);
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    id v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void **)(v0 + 560);
    if (v10)
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v21 = v13;
      uint64_t v14 = UUID.uuidString.getter();
      *(void *)(v0 + 480) = sub_100290514(v14, v15, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Session %s -- Client ineligible to provision credential", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10008E594();
    uint64_t v16 = swift_allocError();
    void *v17 = 27;
    swift_willThrow();
    unint64_t v18 = *(void (**)(void, uint64_t))(v0 + 592);
    swift_errorRetain();
    v18(0, v16);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_1001C6124(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 768) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1001C8038;
  }
  else
  {
    *(unsigned char *)(v4 + 106) = a1 & 1;
    uint64_t v5 = sub_1001C6250;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1001C6250()
{
  uint64_t v62 = v0;
  if (*(unsigned char *)(v0 + 106) != 1)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v22 = *(void **)(v0 + 560);
    uint64_t v23 = type metadata accessor for Logger();
    sub_10008E55C(v23, (uint64_t)qword_1004686A8);
    id v24 = v22;
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v28 = *(void **)(v0 + 560);
    if (v27)
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315138;
      v61[0] = v30;
      uint64_t v31 = UUID.uuidString.getter();
      *(void *)(v0 + 464) = sub_100290514(v31, v32, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Session %s Registration failed after max attempts", v29, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v43 = 28;
    goto LABEL_33;
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 704);
  uint64_t v3 = *(void *)(v0 + 696);
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void **)(v0 + 560);
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v0 + 776) = sub_10008E55C(v6, (uint64_t)qword_1004686A8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 784) = v7;
  *(void *)(v0 + 792) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v4, v3);
  id v8 = v5;
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 752);
  uint64_t v13 = *(void *)(v0 + 704);
  uint64_t v14 = *(void *)(v0 + 696);
  unint64_t v15 = *(void **)(v0 + 560);
  if (v11)
  {
    uint64_t v59 = *(void *)(v0 + 696);
    uint64_t v16 = swift_slowAlloc();
    v61[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    os_log_type_t type = v10;
    uint64_t v17 = UUID.uuidString.getter();
    *(void *)(v0 + 544) = sub_100290514(v17, v18, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v19 = UUID.uuidString.getter();
    *(void *)(v0 + 552) = sub_100290514(v19, v20, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v12, v59);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Session %s: Creating credential with configUUID %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v12, v14);
  }
  *(void *)(v0 + 800) = v21;
  uint64_t v33 = *(char **)(v0 + 560);
  uint64_t v34 = &v33[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  uint64_t v35 = *(void *)&v33[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
  if ((v35 & 0x8000000000000000) == 0
    || v35 != 0x8000000000000000
    || *((void *)v34 + 1) | *((void *)v34 + 2) | *(void *)v34)
  {
    long long v36 = v33;
    os_log_type_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315394;
      *(void *)(v0 + 472) = sub_100290514(0xD000000000000036, 0x80000001003B6940, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2080;
      unint64_t v40 = *((void *)v34 + 3);
      if (v40 >> 62)
      {
        if (v40 >> 62 == 1)
        {
          unint64_t v41 = 0xE500000000000000;
          uint64_t v42 = 0x6465726957;
        }
        else
        {
          BOOL v51 = (*((void *)v34 + 2) | *(void *)v34 | *((void *)v34 + 1)) == 0;
          BOOL v52 = v40 == 0x8000000000000000;
          if (v52 && v51) {
            uint64_t v42 = 0x656D6567616E614DLL;
          }
          else {
            uint64_t v42 = 0x64696C61766E49;
          }
          if (v52 && v51) {
            unint64_t v41 = 0xEA0000000000746ELL;
          }
          else {
            unint64_t v41 = 0xE700000000000000;
          }
        }
      }
      else
      {
        unint64_t v41 = 0xED00006E6F697461;
        uint64_t v42 = 0x6C756D4564726143;
      }
      uint64_t v53 = *(void **)(v0 + 560);
      *(void *)(v0 + 504) = sub_100290514(v42, v41, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s: Unexpected state %s, expected Management", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v44 = *(void **)(v0 + 560);
    }
    uint64_t v43 = 6;
LABEL_33:
    sub_10008E594();
    uint64_t v54 = swift_allocError();
    uint64_t *v55 = v43;
    swift_willThrow();
    uint64_t v56 = *(void (**)(void, uint64_t))(v0 + 592);
    swift_errorRetain();
    v56(0, v54);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
    return v57();
  }
  uint64_t v45 = OBJC_IVAR____TtC10seserviced14SECUserSession_networkController;
  *(void *)(v0 + 808) = OBJC_IVAR____TtC10seserviced14SECUserSession_networkController;
  uint64_t v46 = (uint64_t)&v33[v45];
  swift_beginAccess();
  sub_10010DDC4(v46, v0 + 208);
  uint64_t v47 = *(void *)(v0 + 232);
  uint64_t v48 = *(void *)(v0 + 240);
  sub_100075908((void *)(v0 + 208), v47);
  unint64_t v60 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v48 + 8) + **(int **)(v48 + 8));
  long long v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 816) = v49;
  *long long v49 = v0;
  v49[1] = sub_1001C6AC4;
  return v60(v47, v48);
}

uint64_t sub_1001C6AC4()
{
  *(void *)(*(void *)v1 + 824) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1001C8168;
  }
  else {
    uint64_t v2 = sub_1001C6BD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C6BD8()
{
  uint64_t v1 = *(void *)(v0 + 688);
  uint64_t v2 = *(void *)(v0 + 680);
  uint64_t v3 = *(void *)(v0 + 672);
  sub_10007594C(v0 + 208);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for SESFeature.RuntimeFlag.viennaDynamicSE(_:), v3);
  char v4 = static SESFeature.isEnabled(_:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = *(void *)(v0 + 560);
  uint64_t v6 = v5 + *(void *)(v0 + 808);
  if (v4)
  {
    sub_10010DDC4(v6, v0 + 248);
    uint64_t v7 = *(void *)(v0 + 272);
    uint64_t v8 = *(void *)(v0 + 280);
    sub_100075908((void *)(v0 + 248), v7);
    os_log_type_t v9 = (_OWORD *)(v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
    long long v10 = *(_OWORD *)(v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 16);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
    *(_OWORD *)(v0 + 128) = v10;
    long long v12 = v9[3];
    long long v11 = v9[4];
    long long v13 = v9[2];
    *(_OWORD *)(v0 + 186) = *(_OWORD *)((char *)v9 + 74);
    *(_OWORD *)(v0 + 160) = v12;
    *(_OWORD *)(v0 + 176) = v11;
    *(_OWORD *)(v0 + 144) = v13;
    uint64_t v14 = *(int **)(v8 + 32);
    sub_100129A6C(v0 + 112);
    unint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
    unint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 832) = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_1001C6EF0;
    uint64_t v16 = *(void *)(v0 + 664);
    uint64_t v17 = *(void *)(v0 + 568);
    uint64_t v18 = v0 + 112;
    uint64_t v19 = v7;
    uint64_t v20 = v8;
    uint64_t v21 = v32;
  }
  else
  {
    sub_10010DDC4(v6, v0 + 288);
    uint64_t v22 = *(void *)(v0 + 312);
    uint64_t v23 = *(void *)(v0 + 320);
    sub_100075908((void *)(v0 + 288), v22);
    id v24 = (_OWORD *)(v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
    long long v25 = *(_OWORD *)(v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 16);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v5 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
    *(_OWORD *)(v0 + 32) = v25;
    long long v27 = v24[3];
    long long v26 = v24[4];
    long long v28 = v24[2];
    *(_OWORD *)(v0 + 90) = *(_OWORD *)((char *)v24 + 74);
    *(_OWORD *)(v0 + 64) = v27;
    *(_OWORD *)(v0 + 80) = v26;
    *(_OWORD *)(v0 + 48) = v28;
    uint64_t v29 = *(int **)(v23 + 16);
    sub_100129A6C(v0 + 16);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v29 + *v29);
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1001C791C;
    uint64_t v16 = *(void *)(v0 + 736);
    uint64_t v17 = *(void *)(v0 + 568);
    uint64_t v18 = v0 + 16;
    uint64_t v19 = v22;
    uint64_t v20 = v23;
    uint64_t v21 = v33;
  }
  return v21(v16, v17, v18, v19, v20);
}

uint64_t sub_1001C6EF0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 840) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001C82A0;
  }
  else
  {
    sub_10012921C(v2 + 112);
    uint64_t v3 = sub_1001C700C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001C700C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[98];
  uint64_t v2 = v0[93];
  uint64_t v3 = v0[88];
  uint64_t v4 = v0[87];
  uint64_t v5 = v0[83];
  uint64_t v6 = v0[82];
  uint64_t v7 = v0[71];
  sub_10007594C((uint64_t)(v0 + 31));
  uint64_t v8 = *(void *)(v5 + *(int *)(v6 + 20) + 16);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v9 + 16) = v7;
  swift_bridgeObjectRetain();
  long long v10 = sub_1001BC028((void (*)(void))sub_1001D4654, v9, v8);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v1(v2, v7, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  v0[106] = v12;
  *(void *)(v12 + 16) = v10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v11, v2, v4);
  long long v13 = (void *)swift_task_alloc();
  v0[107] = v13;
  *long long v13 = v0;
  v13[1] = sub_1001C71CC;
  void v13[6] = &unk_100457DC8;
  v13[7] = v12;
  return _swift_task_switch(sub_1001D309C, 0, 0);
}

uint64_t sub_1001C71CC()
{
  *(void *)(*(void *)v1 + 864) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001C7468;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_1001C72E8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001C72E8()
{
  sub_1001400B4(*(void *)(v0 + 664));
  uint64_t v1 = *(void *)(v0 + 560);
  sub_10010DDC4(v1 + *(void *)(v0 + 808), v0 + 288);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 320);
  sub_100075908((void *)(v0 + 288), v2);
  uint64_t v4 = (_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
  long long v5 = *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
  *(_OWORD *)(v0 + 32) = v5;
  long long v7 = v4[3];
  long long v6 = v4[4];
  long long v8 = v4[2];
  *(_OWORD *)(v0 + 90) = *(_OWORD *)((char *)v4 + 74);
  *(_OWORD *)(v0 + 64) = v7;
  *(_OWORD *)(v0 + 80) = v6;
  *(_OWORD *)(v0 + 48) = v8;
  uint64_t v9 = *(int **)(v3 + 16);
  sub_100129A6C(v0 + 16);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 872) = v10;
  *long long v10 = v0;
  v10[1] = sub_1001C791C;
  uint64_t v11 = *(void *)(v0 + 736);
  uint64_t v12 = *(void *)(v0 + 568);
  return v14(v11, v12, v0 + 16, v2, v3);
}

uint64_t sub_1001C7468()
{
  os_log_type_t v37 = v0;
  uint64_t v1 = v0[108];
  swift_release();
  v0[64] = v1;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[98];
    uint64_t v3 = v0[90];
    uint64_t v4 = v0[87];
    uint64_t v5 = v0[81];
    uint64_t v6 = v0[80];
    uint64_t v7 = v0[79];
    uint64_t v8 = v0[78];
    uint64_t v9 = v0[77];
    uint64_t v10 = v0[71];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v6, v5, v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v6, v9);
    v2(v3, v10, v4);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[100];
    uint64_t v15 = v0[90];
    uint64_t v35 = v0[87];
    uint64_t v16 = v0[79];
    uint64_t v17 = v0[78];
    uint64_t v18 = v0[77];
    if (v13)
    {
      os_log_type_t type = v12;
      uint64_t v19 = swift_slowAlloc();
      v36[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315650;
      v0[65] = sub_100290514(0xD000000000000036, 0x80000001003B6940, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      uint64_t v20 = SERError.failureReason.getter();
      if (v21)
      {
        unint64_t v22 = v21;
      }
      else
      {
        uint64_t v20 = 0x6E776F6E6B6E55;
        unint64_t v22 = 0xE700000000000000;
      }
      v0[66] = sub_100290514(v20, v22, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v16, v18);
      *(_WORD *)(v19 + 22) = 2080;
      uint64_t v24 = UUID.uuidString.getter();
      v0[67] = sub_100290514(v24, v25, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v14(v15, v35);
      _os_log_impl((void *)&_mh_execute_header, v11, type, "%s: Reservations Error %s encountered while creating credential with config UUID %s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v0[79], v0[77]);
      v14(v15, v35);
    }

    uint64_t v27 = v0[83];
    uint64_t v28 = v0[80];
    uint64_t v29 = v0[77];
    sub_10008E594();
    uint64_t v26 = swift_allocError();
    *uint64_t v30 = 33;
    swift_willThrow();
    v23(v28, v29);
    sub_1001400B4(v27);
    swift_errorRelease();
  }
  else
  {
    sub_1001400B4(v0[83]);
    swift_errorRelease();
    uint64_t v26 = v0[108];
  }
  uint64_t v31 = (void (*)(void, uint64_t))v0[74];
  swift_errorRetain();
  v31(0, v26);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32();
}

uint64_t sub_1001C791C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_1001C83E4;
  }
  else
  {
    sub_10012921C(v2 + 16);
    uint64_t v3 = sub_1001C7A38;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001C7A38()
{
  sub_10007594C((uint64_t)(v0 + 36));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[111] = v1;
  void *v1 = v0;
  v1[1] = sub_1001C7AE4;
  uint64_t v2 = v0[92];
  uint64_t v3 = v0[73];
  uint64_t v4 = v0[72];
  uint64_t v5 = v0[71];
  return sub_100261E90(v2, v5, v4, v3);
}

uint64_t sub_1001C7AE4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 896) = a1;
  *(void *)(v3 + 904) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_1001C8528;
  }
  else {
    uint64_t v4 = sub_1001C7BFC;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001C7BFC()
{
  uint64_t v40 = v0;
  uint64_t v1 = (_OWORD *)(v0 + 432);
  uint64_t v2 = (_OWORD *)(v0 + 448);
  uint64_t v3 = *(void **)(v0 + 560);
  (*(void (**)(void, void, void))(v0 + 784))(*(void *)(v0 + 728), *(void *)(v0 + 736), *(void *)(v0 + 696));
  id v4 = v3;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v36 = *(void *)(v0 + 728);
    uint64_t v37 = *(void *)(v0 + 696);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
    uint64_t v7 = *(void **)(v0 + 560);
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v39 = v9;
    uint64_t v10 = UUID.uuidString.getter();
    *(void *)(v0 + 488) = sub_100290514(v10, v11, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v12 = UUID.uuidString.getter();
    *(void *)(v0 + 496) = sub_100290514(v12, v13, &v39);
    uint64_t v2 = (_OWORD *)(v0 + 448);
    uint64_t v1 = (_OWORD *)(v0 + 432);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v38(v36, v37);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Session %s Successfully created credential %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
    uint64_t v15 = *(void *)(v0 + 728);
    uint64_t v16 = *(void *)(v0 + 696);
    uint64_t v17 = *(void **)(v0 + 560);

    v14(v15, v16);
  }

  uint64_t v18 = *(void *)(v0 + 560) + OBJC_IVAR____TtC10seserviced14SECUserSession__useNetworkShim;
  long long v20 = *(_OWORD *)v18;
  long long v19 = *(_OWORD *)(v18 + 16);
  *(_WORD *)(v0 + 360) = *(_WORD *)(v18 + 32);
  *(_OWORD *)(v0 + 328) = v20;
  *(_OWORD *)(v0 + 344) = v19;
  *uint64_t v2 = *(_OWORD *)v18;
  _OWORD *v1 = *(_OWORD *)(v0 + 344);
  sub_100079AE8((uint64_t)v2);
  sub_100079AE8((uint64_t)v1);
  sub_1001AF4B4();
  char v22 = v21;
  sub_100079B14((uint64_t)v2);
  sub_100079B14((uint64_t)v1);
  if (v22)
  {
    uint64_t v23 = *(void *)(v0 + 608);
    uint64_t v24 = *(void **)(v0 + 560);
    uint64_t v25 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v23, 1, 1, v25);
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = 0;
    v26[3] = 0;
    v26[4] = v24;
    id v27 = v24;
    sub_1001C974C(v23, (uint64_t)&unk_100457DB8, (uint64_t)v26);
    swift_release();
  }
  uint64_t v28 = *(void **)(v0 + 896);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 800);
  uint64_t v30 = *(void *)(v0 + 736);
  uint64_t v31 = *(void *)(v0 + 696);
  unint64_t v32 = *(void (**)(void *, void))(v0 + 592);
  id v33 = v28;
  v32(v28, 0);

  v29(v30, v31);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_1001C8038()
{
  uint64_t v1 = v0[96];
  uint64_t v2 = (void (*)(void, uint64_t))v0[74];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C8168()
{
  sub_10007594C((uint64_t)(v0 + 26));
  uint64_t v1 = v0[103];
  uint64_t v2 = (void (*)(void, uint64_t))v0[74];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C82A0()
{
  sub_10012921C((uint64_t)(v0 + 14));
  sub_10007594C((uint64_t)(v0 + 31));
  uint64_t v1 = v0[105];
  uint64_t v2 = (void (*)(void, uint64_t))v0[74];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C83E4()
{
  sub_10012921C((uint64_t)(v0 + 2));
  sub_10007594C((uint64_t)(v0 + 36));
  uint64_t v1 = v0[110];
  uint64_t v2 = (void (*)(void, uint64_t))v0[74];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1001C8528()
{
  (*(void (**)(void, void))(v0 + 800))(*(void *)(v0 + 736), *(void *)(v0 + 696));
  uint64_t v1 = *(void *)(v0 + 904);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 592);
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1001C8678(uint64_t a1)
{
  *(void *)(v2 + 200) = a1;
  *(void *)(v2 + 208) = v1;
  return _swift_task_switch(sub_1001C8698, 0, 0);
}

uint64_t sub_1001C8698()
{
  uint64_t v1 = v0[26] + OBJC_IVAR____TtC10seserviced14SECUserSession__bypassRegistration;
  __int16 v2 = *(_WORD *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 15) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 17) = v3;
  *((_WORD *)v0 + 76) = v2;
  long long v4 = *(_OWORD *)v1;
  *((_OWORD *)v0 + 10) = v3;
  *((_OWORD *)v0 + 11) = v4;
  sub_100079AE8((uint64_t)(v0 + 22));
  sub_100079AE8((uint64_t)(v0 + 20));
  sub_1001AF4B4();
  char v6 = v5;
  sub_100079B14((uint64_t)(v0 + 22));
  sub_100079B14((uint64_t)(v0 + 20));
  if (v6)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Bypassing registration, only CAM should be using this!!!", v10, 2u);
      swift_slowDealloc();
    }
    goto LABEL_11;
  }
  uint64_t v11 = v0[25];
  uint64_t v12 = [objc_allocWithZone((Class)PKDeviceRegistrationService) init];
  v0[27] = v12;
  if (v11 < 0)
  {
    __break(1u);
    return _swift_continuation_await(v12);
  }
  uint64_t v8 = v12;
  if (v0[25])
  {
    v0[28] = 0;
    v0[2] = v0;
    v0[7] = v0 + 24;
    v0[3] = sub_1001C8920;
    uint64_t v13 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_1001CF8C8;
    v0[13] = &unk_100415070;
    v0[14] = v13;
    [v8 performDeviceRegistrationWithCompletion:v0 + 10];
    uint64_t v12 = (v0 + 2);
    return _swift_continuation_await(v12);
  }
LABEL_11:

  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14(v6 & 1);
}

uint64_t sub_1001C8920()
{
  return _swift_task_switch(sub_1001C8A00, 0, 0);
}

uint64_t sub_1001C8A00()
{
  uint64_t v1 = *(void *)(v0 + 192);
  if (v1 == 16 || v1 == 32)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registration succeeded", v9, 2u);
      swift_slowDealloc();
    }

    uint64_t v10 = 1;
    goto LABEL_16;
  }
  if (v1 == 64)
  {
    __int16 v2 = *(void **)(v0 + 216);
    sub_10008E594();
    swift_allocError();
    *long long v3 = 28;
    swift_willThrow();

    long long v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v5 = 0;
LABEL_17:
    return v4(v5);
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E55C(v11, (uint64_t)qword_1004686A8);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = *(void *)(v0 + 224);
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    *(void *)(v15 + 4) = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Registration failed, attempt %ld", (uint8_t *)v15, 0xCu);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 224);
  uint64_t v17 = *(void *)(v0 + 200);

  if (v16 + 1 == v17)
  {
    uint64_t v10 = 0;
LABEL_16:

    long long v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
    uint64_t v5 = v10;
    goto LABEL_17;
  }
  uint64_t v20 = *(void *)(v0 + 224) + 1;
  *(void *)(v0 + 224) = v20;
  if (v20 == *(void *)(v0 + 200))
  {
    __break(1u);
  }
  else
  {
    char v21 = *(void **)(v0 + 216);
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 56) = v0 + 192;
    *(void *)(v0 + 24) = sub_1001C8920;
    uint64_t v22 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1001CF8C8;
    *(void *)(v0 + 104) = &unk_100415070;
    *(void *)(v0 + 112) = v22;
    [v21 performDeviceRegistrationWithCompletion:v0 + 80];
    uint64_t v18 = v0 + 16;
  }
  return _swift_continuation_await(v18);
}

uint64_t sub_1001C8D64@<X0>(uint64_t *a1@<X8>)
{
  *a1 = UUID.uuidString.getter();
  a1[1] = v2;
  uint64_t v3 = enum case for CredentialType.Vienna(_:);
  uint64_t v4 = type metadata accessor for CredentialType();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 104))(a1, v3, v4);
  return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
}

uint64_t sub_1001C8E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  uint64_t v9 = type metadata accessor for UUID();
  v5[5] = v9;
  v5[6] = *(void *)(v9 - 8);
  v5[7] = swift_task_alloc();
  type metadata accessor for SESnapshot();
  uint64_t v10 = (void *)swift_task_alloc();
  v5[8] = v10;
  *uint64_t v10 = v5;
  v10[1] = sub_1001C8F4C;
  return static SESnapshot.getCurrentSnapshot(with:seid:)(a1, a2, a3);
}

uint64_t sub_1001C8F4C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 72) = a1;
  *(void *)(v3 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    return _swift_task_switch(sub_1001C909C, 0, 0);
  }
}

uint64_t sub_1001C909C()
{
  uint64_t v22 = v0;
  Swift::Bool v1 = SESnapshot.canFit(credentials:)(v0[3]);
  if (v2)
  {
    rawValue = v0[9]._rawValue;
  }
  else
  {
    if (v1)
    {

      swift_task_dealloc();
      uint64_t v4 = (uint64_t (*)(void))v0[1]._rawValue;
      goto LABEL_12;
    }
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v6 = (void (**)(void *, void *, void *))v0[6]._rawValue;
    uint64_t v5 = v0[7]._rawValue;
    os_log_type_t v8 = v0[4]._rawValue;
    uint64_t v7 = v0[5]._rawValue;
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    v6[2](v5, v8, v7);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = (void (**)(void *, void *))v0[6]._rawValue;
    os_log_type_t v13 = v0[7]._rawValue;
    if (v12)
    {
      uint64_t v20 = v0[5]._rawValue;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = UUID.uuidString.getter();
      v0[2]._rawValue = (void *)sub_100290514(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v14[1](v13, v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cannot fit credential with product config %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v14[1](v0[7]._rawValue, v0[5]._rawValue);
    }

    rawValue = v0[9]._rawValue;
    sub_10008E594();
    swift_allocError();
    *uint64_t v18 = 24;
    swift_willThrow();
  }

  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1]._rawValue;
LABEL_12:
  return v4();
}

uint64_t sub_1001C933C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1001C93D8;
  return static Task<>.sleep(nanoseconds:)(3000000000);
}

uint64_t sub_1001C93D8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_1001C9508, 0, 0);
  }
}

uint64_t sub_1001C9508()
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Firing install complete notification after 3s", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1001C9654;
  return sub_1002624DC();
}

uint64_t sub_1001C9654()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1001C974C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(void *)(a3 + 16)) {
      return swift_task_create();
    }
    goto LABEL_3;
  }
  sub_10008E734(a1, &qword_100455C60);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1001C9BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[23] = a6;
  v7[24] = a7;
  v7[21] = a4;
  v7[22] = a5;
  uint64_t v8 = type metadata accessor for UUID();
  v7[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[26] = v9;
  v7[27] = *(void *)(v9 + 64);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  return _swift_task_switch(sub_1001C9CA0, 0, 0);
}

uint64_t sub_1001C9CA0()
{
  uint64_t v66 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void **)(v0 + 21);
  uint64_t v2 = (void *)v0[21];
  uint64_t v3 = v0[32];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[26];
  uint64_t v6 = v0[22];
  uint64_t v7 = type metadata accessor for Logger();
  v0[33] = sub_10008E55C(v7, (uint64_t)qword_1004686A8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[34] = v8;
  v0[35] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v63 = v8;
  v8(v3, v6, v4);
  id v9 = v2;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[32];
  uint64_t v15 = v0[25];
  uint64_t v14 = v0[26];
  uint64_t v16 = (void *)v0[21];
  if (v12)
  {
    uint64_t v17 = swift_slowAlloc();
    v65[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v18 = UUID.uuidString.getter();
    v0[19] = sub_100290514(v18, v19, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v20 = UUID.uuidString.getter();
    v0[20] = sub_100290514(v20, v21, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Session %s: Deleting credential %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v22(v13, v15);
  }

  v0[36] = v22;
  uint64_t v23 = (char *)v0[21];
  uint64_t v24 = &v23[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState];
  uint64_t v25 = *(void *)&v23[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
  if ((v25 & 0x8000000000000000) == 0
    || v25 != 0x8000000000000000
    || *((void *)v24 + 1) | *((void *)v24 + 2) | *(void *)v24)
  {
    uint64_t v26 = v23;
    id v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 136315394;
      v0[15] = sub_100290514(0xD00000000000001ALL, 0x80000001003B6900, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2080;
      unint64_t v30 = *((void *)v24 + 3);
      if (v30 >> 62)
      {
        if (v30 >> 62 == 1)
        {
          unint64_t v31 = 0xE500000000000000;
          uint64_t v32 = 0x6465726957;
        }
        else
        {
          BOOL v45 = (*((void *)v24 + 2) | *(void *)v24 | *((void *)v24 + 1)) == 0;
          BOOL v46 = v30 == 0x8000000000000000;
          if (v46 && v45) {
            uint64_t v32 = 0x656D6567616E614DLL;
          }
          else {
            uint64_t v32 = 0x64696C61766E49;
          }
          if (v46 && v45) {
            unint64_t v31 = 0xEA0000000000746ELL;
          }
          else {
            unint64_t v31 = 0xE700000000000000;
          }
        }
      }
      else
      {
        unint64_t v31 = 0xED00006E6F697461;
        uint64_t v32 = 0x6C756D4564726143;
      }
      uint64_t v47 = *v1;
      v0[14] = sub_100290514(v32, v31, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s: Unexpected state %s, expected Management", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      id v33 = *v1;
    }
    uint64_t v48 = 10;
    goto LABEL_31;
  }
  uint64_t v34 = v0[22];
  uint64_t v35 = (unint64_t *)&v23[OBJC_IVAR____TtC10seserviced14SECUserSession_credentials];
  swift_beginAccess();
  unint64_t v36 = *v35;
  uint64_t v37 = (void *)swift_task_alloc();
  uint64_t v37[2] = sub_1001CB1CC;
  v37[3] = 0;
  v37[4] = v34;
  swift_bridgeObjectRetain();
  unint64_t v38 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_1001D4E98, v37, v36);
  swift_task_dealloc();
  if (v38 >> 62)
  {
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
  uint64_t result = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!result)
  {
LABEL_35:
    uint64_t v53 = v0[30];
    uint64_t v54 = v0[25];
    uint64_t v55 = v0[22];
    swift_bridgeObjectRelease();
    v63(v53, v55, v54);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    BOOL v58 = os_log_type_enabled(v56, v57);
    uint64_t v59 = v0[30];
    if (v58)
    {
      uint64_t v64 = v0[25];
      uint64_t v60 = swift_slowAlloc();
      v65[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136315394;
      v0[17] = sub_100290514(0xD00000000000001ALL, 0x80000001003B6900, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2080;
      uint64_t v61 = UUID.uuidString.getter();
      v0[18] = sub_100290514(v61, v62, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v22(v59, v64);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s: Attempted to delete a credential %s that does not exist or no access", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v22(v0[30], v0[25]);
    }

    uint64_t v48 = 1;
LABEL_31:
    sub_10008E594();
    uint64_t v49 = swift_allocError();
    *uint64_t v50 = v48;
    swift_willThrow();
    BOOL v51 = (void (*)(uint64_t))v0[23];
    swift_errorRetain();
    v51(v49);
    swift_errorRelease();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v52 = (uint64_t (*)(void))v0[1];
    return v52();
  }
LABEL_16:
  if ((v38 & 0xC000000000000001) != 0)
  {
    id v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v40 = *(id *)(v38 + 32);
  }
  uint64_t v41 = v40;
  v0[37] = v40;
  swift_bridgeObjectRelease();
  id v42 = v41;
  CredentialInternal.identifier.getter();
  uint64_t v43 = (void *)swift_task_alloc();
  v0[38] = v43;
  *uint64_t v43 = v0;
  v43[1] = sub_1001CA544;
  uint64_t v44 = v0[31];
  return sub_1002631C0(v44);
}

uint64_t sub_1001CA544()
{
  uint64_t v2 = (void *)*v1;
  v2[39] = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[36];
  uint64_t v4 = v2[31];
  uint64_t v5 = v2[25];
  if (v0)
  {
    v3(v4, v5);
    uint64_t v6 = sub_1001CAF60;
  }
  else
  {
    v2[40] = (v2[26] + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v3(v4, v5);
    uint64_t v6 = sub_1001CA6D8;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001CA6D8()
{
  uint64_t v1 = *(void *)(v0 + 168) + OBJC_IVAR____TtC10seserviced14SECUserSession__useNetworkShim;
  __int16 v2 = *(_WORD *)(v1 + 32);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 32) = v3;
  *(_WORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)v1;
  *(_OWORD *)(v0 + 96) = v3;
  sub_100079AE8(v0 + 80);
  sub_100079AE8(v0 + 96);
  sub_1001AF4B4();
  char v5 = v4;
  sub_100079B14(v0 + 80);
  sub_100079B14(v0 + 96);
  if (v5)
  {
    if (qword_1004538A8 != -1) {
      swift_once();
    }
    CredentialInternal.identifier.getter();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1001CA9FC;
    uint64_t v7 = *(void *)(v0 + 232);
    return sub_10027F0A0(v7);
  }
  else
  {
    uint64_t v25 = *(void **)(v0 + 296);
    id v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 272);
    uint64_t v11 = *(void *)(v0 + 216);
    uint64_t v10 = *(void *)(v0 + 224);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v15 = *(void **)(v0 + 168);
    uint64_t v14 = *(void *)(v0 + 176);
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = UUID.uuidString.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x80000001003B6920;
    v17._countAndFlagsBits = 0xD000000000000012;
    String.append(_:)(v17);
    *(void *)(v0 + 344) = 0xE800000000000000;
    v9(v10, v14, v12);
    unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = swift_allocObject();
    *(void *)(v0 + 352) = v20;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32))(v20 + v18, v10, v12);
    *(void *)(v20 + v19) = v15;
    *(void *)(v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8)) = v25;
    uint64_t v24 = (uint64_t (*)(void))((char *)&dword_10045AFA0 + dword_10045AFA0);
    id v21 = v15;
    id v22 = v25;
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v23;
    void *v23 = v0;
    v23[1] = sub_1001CAD90;
    return v24();
  }
}

uint64_t sub_1001CA9FC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 232), *(void *)(v2 + 200));
  if (v0) {
    long long v3 = sub_1001CB028;
  }
  else {
    long long v3 = sub_1001CAB6C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001CAB6C()
{
  uint64_t v17 = v0;
  id v1 = *(id *)(v0 + 296);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = *(void **)(v0 + 296);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
    uint64_t v5 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 200);
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    CredentialInternal.identifier.getter();
    uint64_t v7 = UUID.uuidString.getter();
    unint64_t v9 = v8;
    v15(v5, v14);
    *(void *)(v0 + 128) = sub_100290514(v7, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully deleted credential %s with SHIM", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v10 = *(void **)(v0 + 296);
  }
  uint64_t v11 = *(void **)(v0 + 296);
  (*(void (**)(void))(v0 + 184))(0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_1001CAD90()
{
  *(void *)(*(void *)v1 + 368) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CB0F0;
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001CAEB4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CAEB4()
{
  uint64_t v1 = *(void **)(v0 + 296);
  (*(void (**)(void))(v0 + 184))(0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001CAF60()
{
  uint64_t v1 = (void *)v0[37];

  uint64_t v2 = v0[39];
  os_log_type_t v3 = (void (*)(uint64_t))v0[23];
  swift_errorRetain();
  v3(v2);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001CB028()
{
  uint64_t v1 = (void *)v0[37];

  uint64_t v2 = v0[42];
  os_log_type_t v3 = (void (*)(uint64_t))v0[23];
  swift_errorRetain();
  v3(v2);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001CB0F0()
{
  uint64_t v1 = (void *)v0[37];

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[46];
  os_log_type_t v3 = (void (*)(uint64_t))v0[23];
  swift_errorRetain();
  v3(v2);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_1001CB1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  uint64_t v6 = type metadata accessor for UUID();
  v5[17] = v6;
  v5[18] = *(void *)(v6 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  return _swift_task_switch(sub_1001CB2D0, 0, 0);
}

uint64_t sub_1001CB2D0()
{
  uint64_t v62 = v0;
  *(void *)(v0 + 56) = 0;
  uint64_t v1 = (void **)(v0 + 72);
  id v2 = [*(id *)(v0 + 104) listAppletsAndRefreshCache:0 outError:v0 + 56];
  os_log_type_t v3 = *(void **)(v0 + 56);
  if (!v2) {
    goto LABEL_9;
  }
  uint64_t v4 = v2;
  uint64_t v5 = *(void *)(v0 + 112);
  sub_10007582C(0, &qword_100457D90);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v7 = v3;

  uint64_t v8 = (void *)swift_task_alloc();
  v8[2] = v5;
  unint64_t v9 = (unint64_t)sub_1002B9DD0(sub_1001D42E8, v8, v6);
  swift_task_dealloc();
  if (!(v9 >> 62))
  {
    uint64_t v10 = (uint64_t *)(v0 + 96);
    if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v46 = *(void *)(v0 + 144);
    uint64_t v45 = *(void *)(v0 + 152);
    uint64_t v47 = *(void *)(v0 + 136);
    uint64_t v48 = *(void *)(v0 + 112);
    uint64_t v49 = type metadata accessor for Logger();
    sub_10008E55C(v49, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v48, v47);
    id v22 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    BOOL v51 = os_log_type_enabled(v22, v50);
    uint64_t v53 = *(void *)(v0 + 144);
    uint64_t v52 = *(void *)(v0 + 152);
    if (!v51)
    {
      (*(void (**)(void, void))(v53 + 8))(*(void *)(v0 + 152), *(void *)(v0 + 136));
      goto LABEL_23;
    }
    uint64_t v60 = *(void *)(v0 + 136);
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315138;
    uint64_t v55 = UUID.uuidString.getter();
    *uint64_t v10 = sub_100290514(v55, v56, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v60);
    _os_log_impl((void *)&_mh_execute_header, v22, v50, "Nothing to delete in the SE when deleting %s", v54, 0xCu);
    goto LABEL_21;
  }
  uint64_t v10 = (uint64_t *)(v0 + 96);
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_17;
  }
LABEL_4:
  uint64_t v11 = *(void **)(v0 + 104);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  void *v1 = 0;
  LODWORD(v11) = [v11 deleteApplets:isa queueServerConnection:1 outError:v0 + 72];

  os_log_type_t v3 = *v1;
  if (v11)
  {
    uint64_t v13 = qword_1004536D0;
    id v14 = v3;
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v16 = *(void **)(v0 + 120);
    uint64_t v15 = *(void **)(v0 + 128);
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E55C(v17, (uint64_t)qword_1004686A8);
    id v18 = v16;
    id v19 = v15;
    id v20 = v18;
    id v21 = v19;
    id v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v22, v23))
    {
      uint64_t v43 = *(void **)(v0 + 120);
      uint64_t v44 = *(void **)(v0 + 128);

LABEL_23:
      swift_task_dealloc();
      swift_task_dealloc();
      id v42 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_24;
    }
    uint64_t v24 = *(void *)(v0 + 160);
    uint64_t v25 = *(void *)(v0 + 144);
    uint64_t v58 = *(void *)(v0 + 136);
    uint64_t v26 = *(void **)(v0 + 120);
    id v27 = *(void **)(v0 + 128);
    uint64_t v28 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    os_log_type_t type = v23;
    uint64_t v29 = UUID.uuidString.getter();
    *(void *)(v0 + 80) = sub_100290514(v29, v30, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v28 + 12) = 2080;
    CredentialInternal.identifier.getter();
    uint64_t v31 = UUID.uuidString.getter();
    unint64_t v33 = v32;
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v58);
    *(void *)(v0 + 88) = sub_100290514(v31, v33, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v22, type, "Session %s: Successfully MFD credential %s", (uint8_t *)v28, 0x16u);
LABEL_21:
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_23;
  }
LABEL_9:
  id v34 = v3;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_10008E55C(v35, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136315394;
    *(void *)(v0 + 40) = sub_100290514(0xD00000000000001ALL, 0x80000001003B6900, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v39 = Error.localizedDescription.getter();
    *(void *)(v0 + 64) = sub_100290514(v39, v40, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s: Nearfield error %s encountered when deleting applets", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v41 = 8;
  swift_willThrow();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  id v42 = *(uint64_t (**)(void))(v0 + 8);
LABEL_24:
  return v42();
}

uint64_t sub_1001CBABC(void **a1, uint64_t a2)
{
  uint64_t v5 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  id v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  id v18 = (char *)v27 - v17;
  __chkstk_darwin(v16, v19);
  id v21 = (char *)v27 - v20;
  id v22 = *a1;
  sub_10012018C((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_10008E734((uint64_t)v8, &qword_100455EB0);
    LOBYTE(v23) = 0;
  }
  else
  {
    v27[1] = v2;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v8, v9);
    unsigned int v23 = [v22 managedBySP];
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v24(v18, a2, v9);
    v24(v14, (uint64_t)v21, v9);
    if (v23) {
      LOBYTE(v23) = static UUID.== infix(_:_:)();
    }
    uint64_t v25 = *(void (**)(char *, uint64_t))(v10 + 8);
    v25(v14, v9);
    v25(v18, v9);
    v25(v21, v9);
  }
  return v23 & 1;
}

uint64_t sub_1001CBFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 168) = v13;
  *(_OWORD *)(v8 + 152) = v12;
  *(void *)(v8 + 136) = a7;
  *(void *)(v8 + 144) = a8;
  *(void *)(v8 + 120) = a5;
  *(void *)(v8 + 128) = a6;
  *(void *)(v8 + 112) = a4;
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 176) = v9;
  *(void *)(v8 + 184) = *(void *)(v9 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  *(void *)(v8 + 200) = swift_task_alloc();
  *(void *)(v8 + 208) = swift_task_alloc();
  return _swift_task_switch(sub_1001CC0A8, 0, 0);
}

uint64_t sub_1001CC0A8()
{
  uint64_t v167 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = (id *)(v0 + 14);
  uint64_t v2 = (void *)v0[14];
  uint64_t v3 = type metadata accessor for Logger();
  v0[27] = sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  id v4 = v2;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v5 = v4;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t type = static os_log_type_t.info.getter();
  BOOL v7 = os_log_type_enabled(v6, type);
  uint64_t v8 = v0;
  uint64_t v9 = (void *)v0[14];
  if (v7)
  {
    uint64_t v159 = v0 + 13;
    uint64_t v10 = swift_slowAlloc();
    v166[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136316162;
    log = v6;
    uint64_t v11 = UUID.uuidString.getter();
    v0[9] = sub_100290514(v11, v12, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v13 = Array.description.getter();
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    v0[10] = sub_100290514(v13, v15, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v16 = Array.description.getter();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    v0[11] = sub_100290514(v16, v18, v166);
    uint64_t v19 = v0 + 12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = Array.description.getter();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    *uint64_t v19 = sub_100290514(v20, v22, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 42) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v23 = Array.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    *uint64_t v159 = sub_100290514(v23, v25, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Session %s: Modifying access: addingOwners %s, removingOwners %s, addingUsers %s, removingUsers %s", (uint8_t *)v10, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v26 = v8 + 6;
  id v27 = (char *)*v1;
  uint64_t v28 = (char *)*v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState;
  uint64_t v29 = v28[3];
  unint64_t v30 = v8;
  if ((v29 & 0x8000000000000000) == 0 || v29 != 0x8000000000000000 || v28[1] | v28[2] | *v28)
  {
    uint64_t v31 = v27;
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = (uint8_t *)swift_slowAlloc();
      v166[0] = swift_slowAlloc();
      *(_DWORD *)id v34 = 136315138;
      unint64_t v35 = v28[3];
      if (v35 >> 62)
      {
        if (v35 >> 62 == 1)
        {
          unint64_t v36 = 0xE500000000000000;
          uint64_t v37 = 0x6465726957;
        }
        else
        {
          BOOL v65 = (v28[2] | *v28 | v28[1]) == 0;
          BOOL v66 = v35 == 0x8000000000000000;
          if (v66 && v65) {
            uint64_t v37 = 0x656D6567616E614DLL;
          }
          else {
            uint64_t v37 = 0x64696C61766E49;
          }
          if (v66 && v65) {
            unint64_t v36 = 0xEA0000000000746ELL;
          }
          else {
            unint64_t v36 = 0xE700000000000000;
          }
        }
      }
      else
      {
        unint64_t v36 = 0xED00006E6F697461;
        uint64_t v37 = 0x6C756D4564726143;
      }
      id v67 = *v1;
      v8[5] = sub_100290514(v37, v36, v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "modifyAccessForCredential: Unexpected state %s, expected Management", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v30 = v8;
    }
    else
    {
      id v38 = *v1;
    }
    sub_10008E594();
    uint64_t v69 = swift_allocError();
    uint64_t v70 = 10;
    goto LABEL_48;
  }
  uint64_t v39 = v8[19];
  unint64_t v40 = (unint64_t *)&v27[OBJC_IVAR____TtC10seserviced14SECUserSession_credentials];
  swift_beginAccess();
  unint64_t v41 = *v40;
  id v42 = (void *)swift_task_alloc();
  v42[2] = sub_1001CB1CC;
  id v42[3] = 0;
  unsigned char v42[4] = v39;
  swift_bridgeObjectRetain();
  unint64_t v43 = 0;
  unint64_t v44 = (unint64_t)sub_1002B9DD0((uint64_t (*)(id *))sub_10011FB44, v42, v41);
  swift_task_dealloc();
  if (v44 >> 62)
  {
    uint64_t v45 = v30 + 8;
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_16;
    }
    goto LABEL_104;
  }
  uint64_t v45 = v30 + 8;
  if (!*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_104:
    uint64_t v124 = v30[26];
    uint64_t v125 = v30[22];
    uint64_t v126 = v30[23];
    uint64_t v127 = v30[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16))(v124, v127, v125);
    uint64_t v128 = Logger.logObject.getter();
    os_log_type_t v129 = static os_log_type_t.error.getter();
    BOOL v130 = os_log_type_enabled(v128, v129);
    uint64_t v131 = v30[26];
    uint64_t v132 = v30[23];
    if (v130)
    {
      *(void *)typea = v30[22];
      uint64_t v133 = (uint8_t *)swift_slowAlloc();
      v166[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v133 = 136315138;
      uint64_t v134 = UUID.uuidString.getter();
      *uint64_t v45 = sub_100290514(v134, v135, v166);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, os_log_type_t *))(v132 + 8))(v131, *(os_log_type_t **)typea);
      _os_log_impl((void *)&_mh_execute_header, v128, v129, "Adding owner to credential %s that does not exist", v133, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v132 + 8))(v30[26], v30[22]);
    }

    sub_10008E594();
    uint64_t v69 = swift_allocError();
    uint64_t v70 = 1;
LABEL_48:
    *long long v68 = v70;
    swift_willThrow();
    goto LABEL_49;
  }
LABEL_16:
  if ((v44 & 0xC000000000000001) != 0) {
    goto LABEL_109;
  }
  if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v46 = *(id *)(v44 + 32);
    goto LABEL_19;
  }
  __break(1u);
LABEL_111:
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  while (2)
  {
    if (v54)
    {
      v166[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t result = sub_1002CF974(0, v54 & ~(v54 >> 63), 0);
      if (v54 < 0) {
        goto LABEL_150;
      }
      uint64_t v56 = 0;
      uint64_t v26 = (uint64_t *)v166[0];
      do
      {
        if ((v43 & 0xC000000000000001) != 0) {
          id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v57 = *(id *)(v43 + 8 * v56 + 32);
        }
        uint64_t v58 = v57;
        uint64_t v59 = ApplicationInfoInternal.applicationId.getter();
        uint64_t v61 = v60;

        v166[0] = (uint64_t)v26;
        unint64_t v63 = v26[2];
        unint64_t v62 = v26[3];
        if (v63 >= v62 >> 1)
        {
          sub_1002CF974(v62 > 1, v63 + 1, 1);
          uint64_t v26 = (uint64_t *)v166[0];
        }
        ++v56;
        v26[2] = v63 + 1;
        uint64_t v64 = &v26[2 * v63];
        v64[4] = v59;
        v64[5] = v61;
      }
      while (v54 != v56);
      swift_bridgeObjectRelease();
      unint64_t v30 = v158;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = _swiftEmptyArrayStorage;
    }
    uint64_t v83 = v30[15];
    uint64_t v84 = *(void *)(v83 + 16);
    if (v84)
    {
      uint64_t v85 = v83 + 32;
      swift_bridgeObjectRetain();
      uint64_t v86 = 0;
      while (1)
      {
        uint64_t v88 = (void *)(v85 + 16 * v86);
        unint64_t v30 = (void *)*v88;
        uint64_t v89 = v88[1];
        uint64_t v90 = v26[2];
        if (!v90) {
          goto LABEL_66;
        }
        BOOL v91 = v30 == (void *)v26[4] && v89 == v26[5];
        if (!v91 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          if (v90 == 1) {
            goto LABEL_66;
          }
          BOOL v94 = v30 == (void *)v26[6] && v89 == v26[7];
          if (!v94 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
        }
LABEL_58:
        if (++v86 == v84)
        {
          uint64_t v99 = v158;
          swift_bridgeObjectRelease();
          goto LABEL_87;
        }
      }
      if (v90 != 2)
      {
        unint64_t v95 = v26 + 9;
        uint64_t v96 = 2;
        while (1)
        {
          uint64_t v97 = v96 + 1;
          if (__OFADD__(v96, 1)) {
            break;
          }
          BOOL v98 = v30 == (void *)*(v95 - 1) && v89 == *v95;
          if (v98 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_58;
          }
          ++v96;
          v95 += 2;
          if (v97 == v90) {
            goto LABEL_66;
          }
        }
        __break(1u);
LABEL_109:
        id v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_19:
        uint64_t v47 = v46;
        v30[28] = v46;
        uint64_t v48 = v30[16];
        swift_bridgeObjectRelease();
        uint64_t v49 = *(void *)(v48 + 16);
        uint64_t v158 = v30;
        if (v49)
        {
          os_log_type_t v50 = (void *)(v30[14] + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
          BOOL v51 = (void *)(v30[16] + 40);
          while (1)
          {
            BOOL v52 = *(v51 - 1) == *v50 && *v51 == v50[1];
            if (v52 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              break;
            }
            v51 += 2;
            if (!--v49) {
              goto LABEL_27;
            }
          }
          long long v73 = *(void (**)(void, void, void))(v30[23] + 16);
          v73(v30[25], v30[19], v30[22]);
          id v74 = v47;
          long long v75 = Logger.logObject.getter();
          os_log_type_t v76 = static os_log_type_t.error.getter();
          BOOL v77 = os_log_type_enabled(v75, v76);
          uint64_t v78 = v30[25];
          uint64_t v79 = v30[23];
          if (v77)
          {
            uint64_t v161 = v30[22];
            id v80 = (uint8_t *)swift_slowAlloc();
            v166[0] = swift_slowAlloc();
            *(_DWORD *)id v80 = 136315138;
            uint64_t v81 = UUID.uuidString.getter();
            v30[7] = sub_100290514(v81, v82, v166);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v161);
            _os_log_impl((void *)&_mh_execute_header, v75, v76, "Attempted to remove current client as owner of credential %s", v80, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(void, void))(v79 + 8))(v30[25], v30[22]);
          }

          sub_10008E594();
          uint64_t v69 = swift_allocError();
          void *v114 = 18;
          swift_willThrow();
          v73(v30[24], v30[19], v30[22]);
          uint64_t v115 = Logger.logObject.getter();
          os_log_type_t v116 = static os_log_type_t.info.getter();
          BOOL v117 = os_log_type_enabled(v115, v116);
          uint64_t v119 = v30[23];
          uint64_t v118 = v30[24];
          if (v117)
          {
            uint64_t v162 = v30[22];
            id v120 = (uint8_t *)swift_slowAlloc();
            v166[0] = swift_slowAlloc();
            *(_DWORD *)id v120 = 136315138;
            uint64_t v121 = UUID.uuidString.getter();
            *uint64_t v26 = sub_100290514(v121, v122, v166);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v162);
            _os_log_impl((void *)&_mh_execute_header, v115, v116, "Failed to update access to credential %s, rebuilding credential cache", v120, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(void, void))(v119 + 8))(v30[24], v30[22]);
          }

          BOOL v123 = (void *)v30[28];
          swift_willThrow();

LABEL_49:
          objc_super v71 = (void (*)(uint64_t))v30[20];
          swift_errorRetain();
          v71(v69);
          swift_errorRelease();
          swift_errorRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          long long v72 = (uint64_t (*)(void))v30[1];
          return v72();
        }
LABEL_27:
        v47;
        unint64_t v53 = CredentialInternal.ownerApplications.getter();
        unint64_t v43 = v53;
        if (!(v53 >> 62))
        {
          uint64_t v54 = *(void *)((v53 & 0xFFFFFFFFFFFFFF8) + 0x10);
          continue;
        }
        goto LABEL_111;
      }
LABEL_66:
      swift_bridgeObjectRetain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v26 = sub_1002591F8(0, v90 + 1, 1, v26);
      }
      unint64_t v93 = v26[2];
      unint64_t v92 = v26[3];
      if (v93 >= v92 >> 1) {
        uint64_t v26 = sub_1002591F8((void *)(v92 > 1), v93 + 1, 1, v26);
      }
      v26[2] = v93 + 1;
      id v87 = &v26[2 * v93];
      v87[4] = (uint64_t)v30;
      v87[5] = v89;
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
    break;
  }
  uint64_t v99 = v158;
LABEL_87:
  unint64_t v100 = (void *)v99[16];
  swift_bridgeObjectRetain();
  uint64_t v165 = sub_1001D1534((uint64_t)v26, v100);
  v99[29] = v165;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v101 = CredentialInternal.userApplications.getter();
  unint64_t v102 = v101;
  if (v101 >> 62)
  {
    uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
    if (v103) {
      goto LABEL_89;
    }
  }
  else
  {
    uint64_t v103 = *(void *)((v101 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v103)
    {
LABEL_89:
      v166[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t result = sub_1002CF974(0, v103 & ~(v103 >> 63), 0);
      if (v103 < 0) {
        goto LABEL_151;
      }
      uint64_t v104 = 0;
      NSString v105 = (void *)v166[0];
      do
      {
        if ((v102 & 0xC000000000000001) != 0) {
          id v106 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v106 = *(id *)(v102 + 8 * v104 + 32);
        }
        os_log_type_t v107 = v106;
        uint64_t v108 = ApplicationInfoInternal.applicationId.getter();
        uint64_t v110 = v109;

        v166[0] = (uint64_t)v105;
        unint64_t v112 = v105[2];
        unint64_t v111 = v105[3];
        if (v112 >= v111 >> 1)
        {
          sub_1002CF974(v111 > 1, v112 + 1, 1);
          NSString v105 = (void *)v166[0];
        }
        ++v104;
        v105[2] = v112 + 1;
        unint64_t v113 = &v105[2 * v112];
        v113[4] = v108;
        v113[5] = v110;
      }
      while (v103 != v104);
      swift_bridgeObjectRelease();
      uint64_t v99 = v158;
      goto LABEL_114;
    }
  }
  swift_bridgeObjectRelease();
  NSString v105 = _swiftEmptyArrayStorage;
LABEL_114:
  uint64_t v136 = v99[17];
  uint64_t v137 = *(void *)(v136 + 16);
  if (!v137)
  {
    unint64_t v153 = v158;
LABEL_146:
    unint64_t v154 = (void *)v153[18];
    swift_bridgeObjectRetain();
    uint64_t v155 = sub_1001D1534((uint64_t)v105, v154);
    v153[30] = v155;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v156 = (void *)swift_task_alloc();
    v153[31] = v156;
    *uint64_t v156 = v153;
    v156[1] = sub_1001CD324;
    uint64_t v157 = v153[19];
    return sub_1002637DC(v157, v165, v155);
  }
  uint64_t v138 = v136 + 32;
  swift_bridgeObjectRetain();
  uint64_t v139 = 0;
  while (1)
  {
    uint64_t v141 = (uint64_t *)(v138 + 16 * v139);
    uint64_t v143 = *v141;
    uint64_t v142 = v141[1];
    uint64_t v144 = v105[2];
    if (!v144) {
      goto LABEL_125;
    }
    BOOL v145 = v143 == v105[4] && v142 == v105[5];
    if (!v145 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (v144 == 1) {
        goto LABEL_125;
      }
      if (v143 != v105[6] || v142 != v105[7])
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
    }
LABEL_117:
    if (++v139 == v137)
    {
      unint64_t v153 = v158;
      swift_bridgeObjectRelease();
      goto LABEL_146;
    }
  }
  if (v144 == 2)
  {
LABEL_125:
    swift_bridgeObjectRetain_n();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      NSString v105 = sub_1002591F8(0, v144 + 1, 1, v105);
    }
    unint64_t v147 = v105[2];
    unint64_t v146 = v105[3];
    if (v147 >= v146 >> 1) {
      NSString v105 = sub_1002591F8((void *)(v146 > 1), v147 + 1, 1, v105);
    }
    v105[2] = v147 + 1;
    unint64_t v140 = &v105[2 * v147];
    v140[4] = v143;
    v140[5] = v142;
    swift_bridgeObjectRelease();
    goto LABEL_117;
  }
  uint64_t v149 = v105 + 9;
  uint64_t v150 = 2;
  while (1)
  {
    uint64_t v151 = v150 + 1;
    if (__OFADD__(v150, 1)) {
      break;
    }
    if (v143 == *(v149 - 1) && v142 == *v149) {
      goto LABEL_117;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_117;
    }
    ++v150;
    v149 += 2;
    if (v151 == v144) {
      goto LABEL_125;
    }
  }
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_1001CD324()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_1001CD4D8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1001CD448;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CD448()
{
  uint64_t v1 = *(void **)(v0 + 224);
  (*(void (**)(void))(v0 + 160))(0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001CD4D8()
{
  uint64_t v16 = v0;
  uint64_t v1 = v0[23];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[32];
  (*(void (**)(void, void, void))(v1 + 16))(v0[24], v0[19], v0[22]);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v6 = v0[23];
    uint64_t v5 = v0[24];
    uint64_t v14 = v0[22];
    BOOL v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)BOOL v7 = 136315138;
    uint64_t v8 = UUID.uuidString.getter();
    v0[6] = sub_100290514(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v14);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to update access to credential %s, rebuilding credential cache", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
  }

  uint64_t v10 = (void *)v0[28];
  swift_willThrow();

  uint64_t v11 = (void (*)(uint64_t))v0[20];
  swift_errorRetain();
  v11(v2);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

BOOL sub_1001CD714()
{
  CredentialInternal.accessLevel.getter();
  uint64_t v0 = AccessLevelInternal.rawValue.getter();
  return v0 == AccessLevelInternal.rawValue.getter();
}

uint64_t sub_1001CDA9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_1001CDAC0, 0, 0);
}

uint64_t sub_1001CDAC0()
{
  uint64_t v31 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void **)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 24);
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(char **)(v0 + 24);
  if (v7)
  {
    unint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)unint64_t v9 = 136315138;
    unint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 24];
    if (v10 >> 62)
    {
      if (v10 >> 62 == 1)
      {
        unint64_t v11 = 0xE500000000000000;
        uint64_t v12 = 0x6465726957;
      }
      else
      {
        BOOL v13 = (*(void *)&v8[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 16] | *(void *)&v8[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState] | *(void *)&v8[OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState + 8]) == 0;
        BOOL v14 = v10 == 0x8000000000000000;
        if (v14 && v13) {
          uint64_t v12 = 0x656D6567616E614DLL;
        }
        else {
          uint64_t v12 = 0x64696C61766E49;
        }
        if (v14 && v13) {
          unint64_t v11 = 0xEA0000000000746ELL;
        }
        else {
          unint64_t v11 = 0xE700000000000000;
        }
      }
    }
    else
    {
      unint64_t v11 = 0xED00006E6F697461;
      uint64_t v12 = 0x6C756D4564726143;
    }
    uint64_t v15 = *v1;
    *(void *)(v0 + 16) = sub_100290514(v12, v11, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Getting SECSession State = %s", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v16 = (uint64_t)*v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_wrappedState;
  unint64_t v18 = *(void *)v16;
  unint64_t v17 = *(void *)(v16 + 8);
  unint64_t v19 = *(void *)(v16 + 16);
  unint64_t v20 = *(void *)(v16 + 24);
  if (v20 >> 62)
  {
    if (v20 >> 62 != 1)
    {
      BOOL v27 = v20 == 0x8000000000000000 && (v19 | v17 | v18) == 0;
      (*(void (**)(BOOL, void))(v0 + 32))(v27, 0);
      goto LABEL_28;
    }
    unint64_t v21 = *(void (**)(uint64_t, unint64_t))(v0 + 32);
    unint64_t v22 = (void *)(v20 & 0x3FFFFFFFFFFFFFFFLL);
    sub_1001D05A4((id)v18, (void *)v17, (void *)v19, v20);
    id v23 = (id)v18;
    v21(2, v18);
  }
  else
  {
    unint64_t v24 = *(void (**)(uint64_t, unint64_t))(v0 + 32);
    sub_1001D05A4((id)v18, (void *)v17, (void *)v19, v20);
    id v25 = (id)v18;
    v24(3, v18);
  }
LABEL_28:
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_1001CDF88()
{
  v1[24] = v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[25] = v2;
  v1[26] = *(void *)(v2 - 8);
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  return _swift_task_switch(sub_1001CE064, 0, 0);
}

uint64_t sub_1001CE064()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[24];
  uint64_t v2 = qword_100468A98;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo;
  v0[30] = qword_100468A98;
  v0[31] = v3;
  uint64_t v4 = (void *)(v1 + v3);
  v0[32] = *v4;
  v0[33] = v4[1];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001CE128, v2, 0);
}

uint64_t sub_1001CE128()
{
  v0[34] = sub_100123C34(v0[32], v0[33]);
  v0[35] = 0;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001CE1C0, 0, 0);
}

uint64_t sub_1001CE1C0()
{
  uint64_t v1 = (void *)v0[34];

  uint64_t v2 = qword_100468A98;
  v0[36] = qword_100468A98;
  uint64_t v3 = (void *)(v0[24] + v0[31]);
  if (v1)
  {
    v0[37] = v3[2];
    v0[38] = v3[3];
    v0[39] = *v3;
    v0[40] = v3[1];
    uint64_t v4 = sub_1001CE2AC;
  }
  else
  {
    v0[47] = *v3;
    v0[48] = v3[1];
    v0[49] = v3[2];
    v0[50] = v3[3];
    uint64_t v4 = sub_1001CEA04;
  }
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return _swift_task_switch(v5, v2, 0);
}

uint64_t sub_1001CE2AC()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 208);
  id v7 = [*(id *)(v5 + 112) viewContext];
  *(void *)(v0 + 328) = v7;
  uint64_t v8 = (void *)swift_allocObject();
  *(void *)(v0 + 336) = v8;
  v8[2] = v5;
  v8[3] = v2;
  v8[4] = v1;
  v8[5] = v4;
  v8[6] = v3;
  v8[7] = v7;
  *(_DWORD *)(v0 + 156) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  unint64_t v9 = *(void (**)(uint64_t))(v6 + 104);
  *(void *)(v0 + 344) = v9;
  v9(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v7;
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_1001CE438;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1001CE438()
{
  uint64_t v2 = (void *)*v1;
  v2[45] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[36];
  uint64_t v4 = v2[29];
  uint64_t v5 = v2[25];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v2[26] + 8);
  if (v0)
  {
    v6(v4, v5);
    swift_release();
    id v7 = sub_1001CE908;
  }
  else
  {
    v2[46] = v6;
    v6(v4, v5);
    swift_release();
    id v7 = sub_1001CE5F0;
  }
  return _swift_task_switch(v7, v3, 0);
}

uint64_t sub_1001CE5F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001CE66C, 0, 0);
}

uint64_t sub_1001CE66C()
{
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 344);
  *(_DWORD *)(v0 + 556) = *(_DWORD *)(v0 + 156);
  *(void *)(v0 + 456) = v1;
  *(void *)(v0 + 464) = v2;
  uint64_t v3 = *(void *)(v0 + 192) + OBJC_IVAR____TtC10seserviced14SECUserSession__bypassGDPR;
  long long v4 = *(_OWORD *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_WORD *)(v0 + 152) = *(_WORD *)(v3 + 32);
  *(_OWORD *)(v0 + 136) = v5;
  *(_OWORD *)(v0 + 120) = v4;
  long long v6 = *(_OWORD *)v3;
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 176) = v6;
  sub_100079AE8(v0 + 176);
  sub_100079AE8(v0 + 160);
  sub_1001AF4B4();
  char v8 = v7;
  sub_100079B14(v0 + 176);
  sub_100079B14(v0 + 160);
  if (v8)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Bypassing GDPR preentment because of User defaults", v12, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    id v15 = [self sharedInstance];
    *(void *)(v0 + 472) = v15;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1001CF15C;
    uint64_t v16 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1001BDDAC;
    *(void *)(v0 + 104) = &unk_100414C20;
    *(void *)(v0 + 112) = v16;
    [v15 presentGDPRWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_1001CE908()
{
  return _swift_task_switch(sub_1001CE970, 0, 0);
}

uint64_t sub_1001CE970()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CEA04()
{
  uint64_t v2 = *(void *)(v0 + 392);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v4 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 288);
  uint64_t v12 = *(void *)(v0 + 224);
  uint64_t v6 = *(void *)(v0 + 208);
  id v7 = [*(id *)(v5 + 112) viewContext];
  *(void *)(v0 + 408) = v7;
  char v8 = (void *)swift_allocObject();
  *(void *)(v0 + 416) = v8;
  v8[2] = v5;
  v8[3] = v4;
  v8[4] = v3;
  v8[5] = v7;
  v8[6] = v2;
  v8[7] = v1;
  *(_DWORD *)(v0 + 552) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  uint64_t v9 = *(void (**)(uint64_t))(v6 + 104);
  *(void *)(v0 + 424) = v9;
  v9(v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v7;
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 432) = v10;
  *unint64_t v10 = v0;
  v10[1] = sub_1001CEB90;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1001CEB90()
{
  uint64_t v2 = (void *)*v1;
  v2[55] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[36];
  uint64_t v4 = v2[28];
  uint64_t v5 = v2[25];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v2[26] + 8);
  if (v0)
  {
    v6(v4, v5);
    swift_release();
    id v7 = sub_1001CF060;
  }
  else
  {
    v2[56] = v6;
    v6(v4, v5);
    swift_release();
    id v7 = sub_1001CED48;
  }
  return _swift_task_switch(v7, v3, 0);
}

uint64_t sub_1001CED48()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001CEDC4, 0, 0);
}

uint64_t sub_1001CEDC4()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 424);
  *(_DWORD *)(v0 + 556) = *(_DWORD *)(v0 + 552);
  *(void *)(v0 + 456) = v1;
  *(void *)(v0 + 464) = v2;
  uint64_t v3 = *(void *)(v0 + 192) + OBJC_IVAR____TtC10seserviced14SECUserSession__bypassGDPR;
  long long v4 = *(_OWORD *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *(_WORD *)(v0 + 152) = *(_WORD *)(v3 + 32);
  *(_OWORD *)(v0 + 136) = v5;
  *(_OWORD *)(v0 + 120) = v4;
  long long v6 = *(_OWORD *)v3;
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 136);
  *(_OWORD *)(v0 + 176) = v6;
  sub_100079AE8(v0 + 176);
  sub_100079AE8(v0 + 160);
  sub_1001AF4B4();
  char v8 = v7;
  sub_100079B14(v0 + 176);
  sub_100079B14(v0 + 160);
  if (v8)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Bypassing GDPR preentment because of User defaults", v12, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    id v15 = [self sharedInstance];
    *(void *)(v0 + 472) = v15;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1001CF15C;
    uint64_t v16 = swift_continuation_init();
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    *(void *)(v0 + 88) = 0x40000000;
    *(void *)(v0 + 96) = sub_1001BDDAC;
    *(void *)(v0 + 104) = &unk_100414C20;
    *(void *)(v0 + 112) = v16;
    [v15 presentGDPRWithCompletion:v0 + 80];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_1001CF060()
{
  return _swift_task_switch(sub_1001CF0C8, 0, 0);
}

uint64_t sub_1001CF0C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CF15C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 480) = v1;
  if (v1) {
    uint64_t v2 = sub_1001CF83C;
  }
  else {
    uint64_t v2 = sub_1001CF26C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001CF26C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 192);

  uint64_t v3 = (void *)(v2 + v1);
  uint64_t v4 = qword_100468A98;
  *(void *)(v0 + 488) = qword_100468A98;
  *(void *)(v0 + 496) = *v3;
  *(void *)(v0 + 504) = v3[1];
  swift_bridgeObjectRetain();
  *(void *)(v0 + 512) = sub_1001D16FC();
  return _swift_task_switch(sub_1001CF308, v4, 0);
}

uint64_t sub_1001CF308()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v3 = *(void *)(v0 + 488);
  uint64_t v4 = *(void *)(v0 + 496);
  unsigned int v11 = *(_DWORD *)(v0 + 556);
  uint64_t v12 = *(void (**)(uint64_t, void, uint64_t))(v0 + 464);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 200);
  id v7 = [*(id *)(v3 + 112) viewContext];
  *(void *)(v0 + 520) = v7;
  char v8 = (void *)swift_allocObject();
  *(void *)(v0 + 528) = v8;
  v8[2] = v3;
  v8[3] = v4;
  v8[4] = v1;
  v8[5] = v2;
  v8[6] = v7;
  v12(v5, v11, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  v7;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 536) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1001CF484;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1001CF484()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 544) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 488);
  (*(void (**)(void, void))(v2 + 456))(*(void *)(v2 + 216), *(void *)(v2 + 200));
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1001CF6C4;
  }
  else {
    uint64_t v4 = sub_1001CF638;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001CF638()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CF6C4()
{
  return _swift_task_switch(sub_1001CF72C, 0, 0);
}

uint64_t sub_1001CF72C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CF7B4()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001CF83C()
{
  uint64_t v1 = *(void **)(v0 + 472);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001CF8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(*(void *)(v2 + 64) + 40) = a2;
  return _swift_continuation_resume(v2);
}

uint64_t sub_1001CF8EC(unint64_t *a1, unint64_t *a2)
{
  return sub_1001D1208(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1001CF908()
{
  unint64_t v1 = v0[3];
  if (!(v1 >> 62)) {
    return 0x6C756D4564726143;
  }
  if (v1 >> 62 == 1) {
    return 0x6465726957;
  }
  if (v1 == 0x8000000000000000 && (v0[2] | *v0 | v0[1]) == 0) {
    return 0x656D6567616E614DLL;
  }
  return 0x64696C61766E49;
}

uint64_t sub_1001CF9B4()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v3 = __chkstk_darwin(v0, v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v6);
  char v8 = (char *)&v12 - v7;
  CredentialInternal.identifier.getter();
  CredentialInternal.identifier.getter();
  char v9 = static UUID.== infix(_:_:)();
  unint64_t v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v5, v0);
  v10(v8, v0);
  return v9 & 1;
}

uint64_t sub_1001CFAE0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (os_unfair_lock_s **)(v0 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__receivedHciData);
  swift_beginAccess();
  uint64_t v3 = *v2 + 4;
  uint64_t v4 = *v2 + 8;
  os_unfair_lock_lock(v4);
  sub_1001D2A5C(v3);
  os_unfair_lock_unlock(v4);
  sub_10008BECC(0);
  swift_endAccess();
  uint64_t v5 = (os_unfair_lock_s **)(v1 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__rfFieldChanged);
  swift_beginAccess();
  uint64_t v6 = *v5 + 4;
  uint64_t v7 = *v5 + 8;
  os_unfair_lock_lock(v7);
  sub_1001D2A5C(v6);
  os_unfair_lock_unlock(v7);
  sub_10008BECC(0);
  swift_endAccess();
  char v8 = (os_unfair_lock_s **)(v1 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__authExpired);
  swift_beginAccess();
  char v9 = *v8;
  unint64_t v10 = *v8 + 4;
  unsigned int v11 = v9 + 8;
  os_unfair_lock_lock(v9 + 8);
  sub_1001D2B0C(v10);
  os_unfair_lock_unlock(v11);
  sub_10008BECC(0);
  return swift_endAccess();
}

id sub_1001CFE04()
{
  uint64_t v1 = OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__receivedHciData;
  sub_10006C51C(&qword_100457D38);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_DWORD *)(v2 + 32) = 0;
  *(void *)&v0[v1] = v2;
  uint64_t v3 = OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__rfFieldChanged;
  sub_10006C51C(&qword_100457D40);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(void *)&v0[v3] = v4;
  uint64_t v5 = OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__authExpired;
  sub_10006C51C(&qword_100457D48);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(void *)&v0[v5] = v6;
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for SECUserSession.NearFieldEventDelegate();
  return [super init];
}

id sub_1001CFEE8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SECUserSession.NearFieldEventDelegate();
  return [super dealloc];
}

void sub_1001CFF78(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C((uint64_t *)&unk_100457DE8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  id v6 = [self sharedHardwareManager];
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_1001D4924;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100118B5C;
  uint64_t aBlock[3] = &unk_100415048;
  char v9 = _Block_copy(aBlock);
  swift_release();
  id v10 = [v6 startSecureElementManagerSession:v9];
  _Block_release(v9);
  swift_unknownObjectRelease();
}

uint64_t sub_1001D0158(void *a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
LABEL_3:
    sub_10006C51C((uint64_t *)&unk_100457DE8);
    return CheckedContinuation.resume(throwing:)();
  }
  if (!a1)
  {
    uint64_t v4 = type metadata accessor for SERError();
    sub_1001D4838();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, enum case for SERError.internalXPCError(_:), v4);
    goto LABEL_3;
  }
  id v3 = a1;
  sub_10006C51C((uint64_t *)&unk_100457DE8);
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1001D0420()
{
  return type metadata accessor for SECUserSession();
}

uint64_t type metadata accessor for SECUserSession()
{
  uint64_t result = qword_100457BC0;
  if (!qword_100457BC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001D0474()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t type metadata accessor for SECUserSession.NearFieldEventDelegate()
{
  return self;
}

id sub_1001D05A4(id result, void *a2, void *a3, unint64_t a4)
{
  uint64_t v4 = (void *)a4;
  uint64_t v5 = result;
  if (a4 >> 62)
  {
    if (a4 >> 62 != 1) {
      return result;
    }
    id v9 = a2;
    uint64_t v4 = (void *)(a4 & 0x3FFFFFFFFFFFFFFFLL);
  }
  else
  {
    id v9 = a2;
  }
  id v6 = a3;
  id v7 = v4;
  id v8 = v5;

  return v9;
}

void destroy for SECUserSession.State(uint64_t a1)
{
}

void sub_1001D0630(void *a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t v4 = (void *)a4;
  if (a4 >> 62)
  {
    if (a4 >> 62 != 1) {
      return;
    }
    id v6 = a3;
    uint64_t v4 = (void *)(a4 & 0x3FFFFFFFFFFFFFFFLL);
  }
  else
  {
    id v6 = a3;
  }
}

void *initializeWithCopy for SECUserSession.State(void *a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  sub_1001D05A4(*(id *)a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t assignWithCopy for SECUserSession.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  sub_1001D05A4(*(id *)a2, v4, v5, v6);
  id v7 = *(void **)a1;
  id v8 = *(void **)(a1 + 8);
  id v9 = *(void **)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  sub_1001D0630(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SECUserSession.State(uint64_t a1, _OWORD *a2)
{
  id v3 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  long long v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v7;
  sub_1001D0630(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SECUserSession.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 16382);
  }
  unsigned int v3 = (((*(void *)(a1 + 24) >> 50) >> 12) | (4
                                                            * ((*(void *)(a1 + 24) >> 50) & 0xC00 | ((*(void *)(a1 + 24) & 7) << 7) | (*(void *)a1 >> 57) & 0x78 | *(void *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SECUserSession.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 16382;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      unint64_t v3 = (-a2 >> 2) & 0xFFF | ((-a2 & 0x3FFF) << 12);
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1001D0898(void *a1)
{
  uint64_t v1 = a1[3] >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

uint64_t sub_1001D08B8(uint64_t result)
{
  *(void *)(result + 24) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_1001D08C8(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = result[3] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result &= 0xFFFFFFFFFFFFFF8uLL;
    result[3] = v2;
  }
  else
  {
    *uint64_t result = 8 * (a2 - 2);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for SECUserSession.State()
{
  return &type metadata for SECUserSession.State;
}

uint64_t sub_1001D0914@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 8);
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 16);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 24);
  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 32);
  uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo + 40);
  int v9 = *(_DWORD *)(v2 + 48);
  char v10 = *(unsigned char *)(v2 + 52);
  uint64_t v11 = *(void *)(v2 + 72);
  uint64_t v12 = *(void *)(v2 + 80);
  char v13 = *(unsigned char *)(v2 + 88);
  char v14 = *(unsigned char *)(v2 + 89);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(_DWORD *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 52) = v10;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(v2 + 56);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = v13;
  *(unsigned char *)(a1 + 89) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1001D09B4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1001D09C4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10011FE60;
  return sub_1001BF7C8();
}

uint64_t sub_1001D0A50(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  char v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v2;
  v10[5] = a1;
  v10[6] = a2;
  id v11 = v2;
  swift_retain();
  sub_10028E720((uint64_t)v8, (uint64_t)&unk_100457CA0, (uint64_t)v10);
  return swift_release();
}

uint64_t sub_1001D0B64(char a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011FE60;
  return sub_1001C39E4(a1);
}

uint64_t sub_1001D0BF8()
{
  uint64_t v1 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v1 - 8, v2);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = 0;
  v7[3] = 0;
  v7[4] = v0;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  id v9 = v0;
  if (v8 == 1)
  {
    sub_10008E734((uint64_t)v4, &qword_100455C60);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v11 = v12;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
    }
  }
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = &unk_100457E18;
  *(void *)(v13 + 24) = v7;
  if (v11 | v10)
  {
    v15[0] = 0;
    v15[1] = 0;
    long long v15[2] = v10;
    v15[3] = v11;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_1001D0E38()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10011FE60;
  return sub_1002624DC();
}

uint64_t sub_1001D0EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C((uint64_t *)&unk_100456740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double sub_1001D0F30@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100191668(a1, &v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1001D0F6C()
{
  return sub_100129B20(48);
}

uint64_t sub_1001D0F74(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  int v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int v8 = v2;
  v8[1] = sub_10011FE60;
  return sub_100191234(a1, v4, v5, v7, v6);
}

void sub_1001D1034(void *a1)
{
  sub_100191994(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001D1054()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001D1080()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10011FE60;
  *(_OWORD *)(v2 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 32) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1001C3884;
  return sub_1001C39E4(1);
}

uint64_t sub_1001D116C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C((uint64_t *)&unk_100456740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D11D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return sub_10008BEBC(v3);
}

uint64_t sub_1001D1208(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8)
{
  unint64_t v38 = a6;
  unint64_t v39 = a5;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  unint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  unint64_t v22 = (char *)&v34 - v21;
  if (!(a4 >> 62))
  {
    if (!(a8 >> 62))
    {
      id v37 = (id)a7;
      id v36 = (id)a8;
      id v29 = (id)a1;
      id v35 = (id)a2;
      id v30 = (id)a3;
      id v31 = (id)a4;
      id v26 = (id)v39;
      unint64_t v39 = (unint64_t)(id)v38;
      CredentialInternal.identifier.getter();
      CredentialInternal.identifier.getter();
      char v27 = static UUID.== infix(_:_:)();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v15 + 8);
      v32(v19, v14);
      v32(v22, v14);

      goto LABEL_7;
    }
    goto LABEL_19;
  }
  if (a4 >> 62 != 1)
  {
    if (a3 | a2 | a1 || a4 != 0x8000000000000000)
    {
      if (a8 >> 62 != 2 || a8 != 0x8000000000000000 || v39 != 8 || a7 | v38) {
        goto LABEL_19;
      }
    }
    else if (a8 >> 62 != 2 || a7 | v38 | v39 || a8 != 0x8000000000000000)
    {
      goto LABEL_19;
    }
    char v27 = 1;
    return v27 & 1;
  }
  if (a8 >> 62 != 1)
  {
LABEL_19:
    char v27 = 0;
    return v27 & 1;
  }
  id v37 = (id)a7;
  id v36 = (id)(a8 & 0x3FFFFFFFFFFFFFFFLL);
  id v23 = (id)a1;
  id v35 = (id)a2;
  id v24 = (id)a3;
  id v25 = (id)(a4 & 0x3FFFFFFFFFFFFFFFLL);
  id v26 = (id)v39;
  unint64_t v39 = (unint64_t)(id)v38;
  CredentialInternal.identifier.getter();
  CredentialInternal.identifier.getter();
  char v27 = static UUID.== infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28(v19, v14);
  v28(v22, v14);

LABEL_7:
  return v27 & 1;
}

uint64_t sub_1001D1534(uint64_t result, void *a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  unint64_t v4 = 0;
  uint64_t v22 = result + 32;
  uint64_t v20 = a2 + 7;
  uint64_t v21 = _swiftEmptyArrayStorage;
  do
  {
    if (v4 <= v2) {
      unint64_t v5 = v2;
    }
    else {
      unint64_t v5 = v4;
    }
    unint64_t v23 = v5;
    while (1)
    {
      if (v4 == v23) {
        goto LABEL_33;
      }
      uint64_t v6 = (uint64_t *)(v22 + 16 * v4);
      uint64_t v7 = *v6;
      uint64_t v8 = v6[1];
      ++v4;
      uint64_t v9 = a2[2];
      if (!v9) {
        goto LABEL_24;
      }
      double result = a2[4];
      if (result != v7 || a2[5] != v8)
      {
        double result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
      }
LABEL_7:
      if (v4 == v2) {
        return (uint64_t)v21;
      }
    }
    if (v9 != 1)
    {
      uint64_t v11 = v20;
      uint64_t v12 = 1;
      while (1)
      {
        uint64_t v13 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        double result = *(v11 - 1);
        if (result == v7 && *v11 == v8) {
          goto LABEL_7;
        }
        double result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_7;
        }
        v11 += 2;
        ++v12;
        if (v13 == v9) {
          goto LABEL_24;
        }
      }
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
LABEL_24:
    swift_bridgeObjectRetain();
    double result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = v21;
    if ((result & 1) == 0)
    {
      double result = sub_1002CF974(0, v21[2] + 1, 1);
      uint64_t v15 = v21;
    }
    uint64_t v16 = v15;
    unint64_t v18 = v15[2];
    unint64_t v17 = v15[3];
    if (v18 >= v17 >> 1)
    {
      double result = sub_1002CF974(v17 > 1, v18 + 1, 1);
      uint64_t v16 = v21;
    }
    void v16[2] = v18 + 1;
    uint64_t v21 = v16;
    unint64_t v19 = &v16[2 * v18];
    void v19[4] = v7;
    v19[5] = v8;
  }
  while (v4 != v2);
  return (uint64_t)v21;
}

unint64_t sub_1001D16FC()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self bundleWithIdentifier:v0];

  id v2 = [self flowWithBundle:v1];
  if (!v2) {
    goto LABEL_4;
  }
  id v3 = v2;
  unint64_t v4 = (unint64_t)[v3 contentVersion];

  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_4:

    return 0;
  }
  return v4;
}

uint64_t sub_1001D17CC()
{
  v1[40] = v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[41] = v2;
  v1[42] = *(void *)(v2 - 8);
  v1[43] = swift_task_alloc();
  return _swift_task_switch(sub_1001D188C, 0, 0);
}

uint64_t sub_1001D188C()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[40];
  uint64_t v2 = qword_100468A98;
  uint64_t v3 = OBJC_IVAR____TtC10seserviced14SECUserSession_clientInfo;
  v0[44] = qword_100468A98;
  v0[45] = v3;
  uint64_t v4 = (void *)(v1 + v3);
  v0[46] = *v4;
  v0[47] = v4[1];
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1001D1950, v2, 0);
}

uint64_t sub_1001D1950()
{
  v0[48] = sub_100122784(v0[46], v0[47]);
  v0[49] = 0;
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001D19E8, 0, 0);
}

uint64_t sub_1001D19E8()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void **)(v0 + 384);
  if (!v1)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void **)(v0 + 320);
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E55C(v12, (uint64_t)qword_1004686A8);
    id v13 = v11;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    unint64_t v17 = *(void **)(v0 + 320);
    if (v16)
    {
      uint64_t v18 = swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      uint64_t v19 = UUID.uuidString.getter();
      *(void *)(v0 + 288) = sub_100290514(v19, v20, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v18 + 12) = 2080;
      *(void *)(v0 + 312) = sub_100290514(0xD000000000000023, 0x80000001003B6840, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Session %s %s: App Entity does not exist", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10008E594();
    swift_allocError();
    *id v24 = 6;
    swift_willThrow();
    swift_task_dealloc();
    id v25 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_25;
  }
  uint64_t v2 = *(void *)(v0 + 320) + OBJC_IVAR____TtC10seserviced14SECUserSession__bypassGDPR;
  long long v4 = *(_OWORD *)v2;
  long long v3 = *(_OWORD *)(v2 + 16);
  *(_WORD *)(v0 + 248) = *(_WORD *)(v2 + 32);
  *(_OWORD *)(v0 + 216) = v4;
  *(_OWORD *)(v0 + 232) = v3;
  *(_OWORD *)(v0 + 272) = *(_OWORD *)v2;
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 232);
  sub_100079AE8(v0 + 272);
  sub_100079AE8(v0 + 256);
  sub_1001AF4B4();
  char v6 = v5;
  sub_100079B14(v0 + 272);
  sub_100079B14(v0 + 256);
  if (v6)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Bypassing GDPR preentment because of User defaults", v10, 2u);
      swift_slowDealloc();
    }

LABEL_24:
    swift_task_dealloc();
    id v25 = *(uint64_t (**)(void))(v0 + 8);
LABEL_25:
    return v25();
  }
  id v21 = [v1 gdprVersionShown];
  if ((uint64_t)v21 >= (uint64_t)sub_1001D16FC())
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    id v26 = *(void **)(v0 + 320);
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E55C(v27, (uint64_t)qword_1004686A8);
    id v28 = v26;
    id v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = *(char **)(v0 + 320);
      log = v29;
      uint64_t v32 = &v31[*(void *)(v0 + 360)];
      uint64_t v33 = swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      os_log_type_t type = v30;
      uint64_t v34 = UUID.uuidString.getter();
      *(void *)(v0 + 296) = sub_100290514(v34, v35, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v33 + 12) = 2080;
      long long v36 = *((_OWORD *)v32 + 1);
      *(_OWORD *)(v0 + 80) = *(_OWORD *)v32;
      *(_OWORD *)(v0 + 96) = v36;
      long long v37 = *((_OWORD *)v32 + 2);
      long long v38 = *((_OWORD *)v32 + 3);
      long long v39 = *((_OWORD *)v32 + 4);
      *(_OWORD *)(v0 + 154) = *(_OWORD *)(v32 + 74);
      *(_OWORD *)(v0 + 128) = v38;
      *(_OWORD *)(v0 + 144) = v39;
      *(_OWORD *)(v0 + 112) = v37;
      sub_100129A6C(v0 + 80);
      uint64_t v40 = sub_100124BBC();
      unint64_t v42 = v41;
      sub_10012921C(v0 + 80);
      *(void *)(v0 + 304) = sub_100290514(v40, v42, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      id v29 = log;
      _os_log_impl((void *)&_mh_execute_header, log, type, "Session %s: GDPR sheet has been displayed for %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v43 = *(void **)(v0 + 320);
    }
    goto LABEL_24;
  }
  id v22 = [self sharedInstance];
  *(void *)(v0 + 400) = v22;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_1001D20D0;
  uint64_t v23 = swift_continuation_init();
  *(void *)(v0 + 176) = _NSConcreteStackBlock;
  *(void *)(v0 + 184) = 0x40000000;
  *(void *)(v0 + 192) = sub_1001BDDAC;
  *(void *)(v0 + 200) = &unk_100414BB8;
  *(void *)(v0 + 208) = v23;
  [v22 presentGDPRWithCompletion:v0 + 176];
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1001D20D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 408) = v1;
  if (v1) {
    uint64_t v2 = sub_1001D27B8;
  }
  else {
    uint64_t v2 = sub_1001D21E0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001D21E0()
{
  uint64_t v1 = *(void *)(v0 + 360);
  uint64_t v2 = *(void *)(v0 + 320);

  long long v3 = (void *)(v2 + v1);
  uint64_t v4 = qword_100468A98;
  *(void *)(v0 + 416) = qword_100468A98;
  *(void *)(v0 + 424) = *v3;
  *(void *)(v0 + 432) = v3[1];
  swift_bridgeObjectRetain();
  *(void *)(v0 + 440) = sub_1001D16FC();
  return _swift_task_switch(sub_1001D227C, v4, 0);
}

uint64_t sub_1001D227C()
{
  uint64_t v1 = v0[54];
  uint64_t v2 = v0[55];
  uint64_t v3 = v0[52];
  uint64_t v4 = v0[53];
  uint64_t v6 = v0[42];
  uint64_t v5 = v0[43];
  uint64_t v7 = v0[41];
  id v8 = [*(id *)(v3 + 112) viewContext];
  v0[56] = v8;
  os_log_type_t v9 = (void *)swift_allocObject();
  v0[57] = v9;
  void v9[2] = v3;
  v9[3] = v4;
  v9[4] = v1;
  v9[5] = v2;
  v9[6] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v7);
  swift_bridgeObjectRetain();
  swift_retain();
  v8;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[58] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1001D23F0;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1001D23F0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[52];
  (*(void (**)(void, void))(v2[42] + 8))(v2[43], v2[41]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1001D2670;
  }
  else {
    uint64_t v4 = sub_1001D2590;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1001D2590()
{
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_1001D2604, 0, 0);
}

uint64_t sub_1001D2604()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D2670()
{
  return _swift_task_switch(sub_1001D26D8, 0, 0);
}

uint64_t sub_1001D26D8()
{
  uint64_t v1 = *(void **)(v0 + 384);
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001D274C()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D27B8()
{
  uint64_t v1 = (void *)v0[50];
  uint64_t v2 = (void *)v0[48];
  swift_willThrow();

  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void sub_1001D283C()
{
}

uint64_t sub_1001D2854()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001D28A4()
{
  return sub_1001D29BC((uint64_t (*)(void, void, void, void, void, void))sub_100122120);
}

uint64_t sub_1001D28D4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1001D291C()
{
  sub_100123740(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 48));
}

uint64_t sub_1001D2940()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001D2990()
{
  return sub_1001D29BC((uint64_t (*)(void, void, void, void, void, void))sub_100123060);
}

uint64_t sub_1001D29BC(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1001D29E8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001D2A20(uint64_t a1)
{
}

void sub_1001D2A28(char a1)
{
}

uint64_t sub_1001D2A30(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1001D2A5C(void *a1)
{
  return sub_1001D2FA0(a1, (void (*)(void, void))sub_10008C550, (uint64_t (*)(uint64_t, uint64_t))sub_10008C54C);
}

void sub_1001D2A9C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
}

uint64_t sub_1001D2AA4(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void, void, void))(v2 + 16))(*a1, a1[1], *a2, a2[1]);
}

void sub_1001D2ADC()
{
}

uint64_t sub_1001D2AE4()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1001D2B0C(void *a1)
{
  return sub_1001D2FA0(a1, (void (*)(void, void))sub_10008C550, (uint64_t (*)(uint64_t, uint64_t))sub_10008BEBC);
}

uint64_t sub_1001D2B4C()
{
  swift_unknownObjectRelease();

  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D2B94()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011FE60;
  v3[15] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[16] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1001C35B0;
  return sub_1001BDE44();
}

uint64_t sub_1001D2C78()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_10006D144(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10006D144(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001D2CC8()
{
  long long v5 = *(_OWORD *)(v0 + 48);
  long long v6 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10011FE60;
  *(void *)(v3 + 152) = v2;
  *(_OWORD *)(v3 + 136) = v5;
  *(_OWORD *)(v3 + 120) = v6;
  return _swift_task_switch(sub_1001C2EB8, 0, 0);
}

uint64_t sub_1001D2D90()
{
  return sub_100129B20(41);
}

uint64_t sub_1001D2D98()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_10011FE60;
  *(unsigned char *)(v4 + 128) = v3;
  *(void *)(v4 + 120) = v2;
  return _swift_task_switch(sub_1001C2884, 0, 0);
}

uint64_t sub_1001D2E4C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D2E94()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10011FE60;
  *(_OWORD *)(v2 + 120) = v3;
  return _swift_task_switch(sub_1001C2214, 0, 0);
}

uint64_t sub_1001D2F40()
{
  return sub_100129B20(48);
}

void sub_1001D2F48(void *a1, void *a2, void *a3, void *a4)
{
  if (a1)
  {
  }
}

uint64_t sub_1001D2FA0(void *a1, void (*a2)(void, void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  a2(*a1, a1[1]);
  *a1 = v7;
  a1[1] = v8;
  return a3(v7, v8);
}

uint64_t sub_1001D300C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return _swift_task_switch(sub_1001D309C, 0, 0);
}

uint64_t sub_1001D309C()
{
  id v1 = [self sharedHardwareManager];
  NSString v2 = String._bridgeToObjectiveC()();
  v0[4] = 0;
  id v3 = [v1 secureElementWithIdentifier:v2 error:v0 + 4];

  uint64_t v4 = (void *)v0[4];
  if (v3)
  {
    id v5 = v4;
    id v6 = [v3 serialNumber];

    if (v6)
    {
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v9 = v8;
      v0[2] = v7;
      v0[3] = v8;

      v0[8] = v9;
      uint64_t v10 = (void *)swift_task_alloc();
      v0[9] = v10;
      uint64_t v11 = sub_10007582C(0, &qword_100457DE0);
      *uint64_t v10 = v0;
      v10[1] = sub_1001D337C;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 5, 0, 0, 0x5765747563657865, 0xEF293A5F28687469, sub_1001CFF78, 0, v11);
    }
    uint64_t v13 = type metadata accessor for SERError();
    sub_1001D4838();
    swift_allocError();
    *uint64_t v14 = 0xD000000000000013;
    v14[1] = 0x80000001003B6980;
    (*(void (**)(void *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v14, enum case for SERError.resourceUnavailable(_:), v13);
  }
  else
  {
    id v12 = v4;
    _convertNSErrorToError(_:)();
  }
  swift_willThrow();
  os_log_type_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1001D337C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    id v3 = sub_1001D37E0;
  }
  else
  {
    *(void *)(v2 + 88) = *(void *)(v2 + 16);
    id v3 = sub_1001D34D4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001D34D4()
{
  uint64_t v2 = v0[5];
  id v1 = (int *)v0[6];
  v0[12] = v2;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v1 + *v1);
  id v3 = (void *)swift_task_alloc();
  v0[13] = v3;
  *id v3 = v0;
  v3[1] = sub_1001D35E0;
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  return v7(v2, v4, v5);
}

uint64_t sub_1001D35E0()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_1001D3868;
  }
  else {
    uint64_t v2 = sub_1001D3740;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001D3740()
{
  uint64_t v1 = *(void **)(v0 + 96);
  [v1 endSession];

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001D37E0()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1001D3868()
{
  uint64_t v1 = *(void **)(v0 + 96);
  [v1 endSession];

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1001D3908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (os_unfair_lock_s **)(v4 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__receivedHciData);
  swift_beginAccess();
  uint64_t v10 = *v9;
  uint64_t v11 = (uint64_t *)&(*v9)[4];
  swift_retain();
  os_unfair_lock_lock(v10 + 8);
  sub_1001D11D4(v11, v15);
  os_unfair_lock_unlock(v10 + 8);
  id v12 = (void (*)(uint64_t *, void *))v15[0];
  uint64_t result = swift_release();
  if (v12)
  {
    v15[0] = a1;
    v15[1] = a2;
    v14[0] = a3;
    v14[1] = a4;
    v12(v15, v14);
    return sub_10008BECC((uint64_t)v12);
  }
  return result;
}

uint64_t sub_1001D39E0(char a1)
{
  uint64_t v3 = (os_unfair_lock_s **)(v1 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__rfFieldChanged);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v5 = (uint64_t *)&(*v3)[4];
  swift_retain();
  os_unfair_lock_lock(v4 + 8);
  sub_1001D4ECC(v5, (uint64_t *)&v8);
  os_unfair_lock_unlock(v4 + 8);
  id v6 = v8;
  uint64_t result = swift_release();
  if (v6)
  {
    LOBYTE(v8) = a1 & 1;
    v6(&v8);
    return sub_10008BECC((uint64_t)v6);
  }
  return result;
}

uint64_t sub_1001D3AA0()
{
  uint64_t v1 = (os_unfair_lock_s **)(v0 + OBJC_IVAR____TtCC10seserviced14SECUserSession22NearFieldEventDelegate__authExpired);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = (uint64_t *)&(*v1)[4];
  swift_retain();
  os_unfair_lock_lock(v2 + 8);
  sub_1001D4ECC(v3, (uint64_t *)&v6);
  os_unfair_lock_unlock(v2 + 8);
  uint64_t v4 = v6;
  uint64_t result = swift_release();
  if (v4)
  {
    v4(result);
    return sub_10008BECC((uint64_t)v4);
  }
  return result;
}

uint64_t sub_1001D3B50()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001D3B88()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1001D3BA4()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_10011F7E8;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  return _swift_task_switch(sub_1001CDAC0, 0, 0);
}

uint64_t sub_1001D3C58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001D3D6C(uint64_t a1)
{
  type metadata accessor for UUID();
  uint64_t v3 = v1[3];
  uint64_t v11 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10011FE60;
  return sub_1001CBFB0(a1, v11, v3, v4, v5, v6, v7, v8);
}

uint64_t sub_1001D3ECC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1001D3FC0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10011FE60;
  return sub_1001C9BA0(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1001D40FC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1001D41B8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v2 + v7;
  uint64_t v10 = *(void *)(v2 + v8);
  uint64_t v11 = *(void *)(v2 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_10011FE60;
  return sub_1001CB1D0(a1, a2, v9, v10, v11);
}

uint64_t sub_1001D42E8(void **a1)
{
  return sub_1001CBABC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1001D4308()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001D4410(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + v6);
  uint64_t v12 = *(void *)((char *)v1 + v6 + 8);
  uint64_t v13 = *(void *)((char *)v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_10011FE60;
  return sub_1001C5B44(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1001D4574()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10011FE60;
  v3[2] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1001C93D8;
  return static Task<>.sleep(nanoseconds:)(3000000000);
}

uint64_t sub_1001D4654@<X0>(uint64_t *a1@<X8>)
{
  return sub_1001C8D64(a1);
}

uint64_t sub_1001D4670()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001D473C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = v3 + ((*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_10011F7E8;
  return sub_1001C8E2C(a1, a2, a3, v9, v10);
}

unint64_t sub_1001D4838()
{
  unint64_t result = qword_100457DD8;
  if (!qword_100457DD8)
  {
    type metadata accessor for SERError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457DD8);
  }
  return result;
}

uint64_t sub_1001D4890()
{
  uint64_t v1 = sub_10006C51C((uint64_t *)&unk_100457DE8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001D4924(void *a1, uint64_t a2)
{
  sub_10006C51C((uint64_t *)&unk_100457DE8);

  return sub_1001D0158(a1, a2);
}

uint64_t sub_1001D49A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001D49B8()
{
  return swift_release();
}

void sub_1001D49C0(objc_class *a1, uint64_t a2)
{
  sub_10029A20C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001D49CC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10011FE60;
  return sub_1001C44D8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1001D4A94()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1001D4AA8()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001D4AF4()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D4B34()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10011FE60;
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_10011FE60;
  return sub_1002624DC();
}

uint64_t sub_1001D4C08()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void destroy for SECUserSession.NFCredentialSessionHandle(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for SECUserSession.NFCredentialSessionHandle(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void **)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  id v10 = v6;
  return a1;
}

uint64_t assignWithCopy for SECUserSession.NFCredentialSessionHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a1 + 8);
  id v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  uint64_t v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  uint64_t v13 = *(void **)(a2 + 24);
  uint64_t v14 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v13;
  id v15 = v13;

  return a1;
}

uint64_t assignWithTake for SECUserSession.NFCredentialSessionHandle(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  uint64_t v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for SECUserSession.NFCredentialSessionHandle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SECUserSession.NFCredentialSessionHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SECUserSession.NFCredentialSessionHandle()
{
  return &type metadata for SECUserSession.NFCredentialSessionHandle;
}

void sub_1001D4E48(void *a1)
{
}

uint64_t sub_1001D4E60()
{
  return sub_1001D1054();
}

uint64_t sub_1001D4E98(uint64_t *a1)
{
  return sub_10011FB44(a1) & 1;
}

uint64_t sub_1001D4EB4(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_1001BC3A8(a1, a2);
}

uint64_t sub_1001D4ECC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1001D11D4(a1, a2);
}

uint64_t sub_1001D4EE4()
{
  [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP10seserviced25SECredentialServerSession_];
  sub_10007582C(0, &qword_100457E20);
  sub_10006C51C(&qword_100455FA8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10037B8C0;
  uint64_t v1 = type metadata accessor for CredentialInternal();
  *(void *)(v0 + 56) = sub_10006C51C(&qword_100457E28);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = type metadata accessor for InstanceInfoInternal();
  *(void *)(v0 + 88) = sub_10006C51C(&qword_100457E30);
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for ApplicationInfoInternal();
  *(void *)(v0 + 120) = sub_10006C51C(&qword_100457E38);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = sub_10007582C(0, &qword_100457E40);
  *(void *)(v0 + 152) = sub_10006C51C(&qword_100457E48);
  *(void *)(v0 + 128) = v4;
  uint64_t v5 = sub_10007582C(0, &qword_100457E50);
  *(void *)(v0 + 184) = sub_10006C51C(&qword_100457E58);
  *(void *)(v0 + 160) = v5;
  uint64_t v6 = sub_10007582C(0, &qword_100457E60);
  *(void *)(v0 + 216) = sub_10006C51C(&qword_100457E68);
  *(void *)(v0 + 192) = v6;
  uint64_t v7 = sub_10007582C(0, (unint64_t *)&qword_100457A58);
  *(void *)(v0 + 248) = sub_10006C51C(&qword_100457E70);
  *(void *)(v0 + 224) = v7;
  NSSet.init(objects:)();
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

uint64_t sub_1001D51AC()
{
  [self interfaceWithProtocol:&OBJC_PROTOCOL____TtP10seserviced27SECSessionCallbackInterface_];
  sub_10007582C(0, &qword_100457E20);
  sub_10006C51C(&qword_100455FA8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_10037B8C0;
  uint64_t v1 = type metadata accessor for CredentialInternal();
  *(void *)(v0 + 56) = sub_10006C51C(&qword_100457E28);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = type metadata accessor for InstanceInfoInternal();
  *(void *)(v0 + 88) = sub_10006C51C(&qword_100457E30);
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for ApplicationInfoInternal();
  *(void *)(v0 + 120) = sub_10006C51C(&qword_100457E38);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = sub_10007582C(0, &qword_100457E40);
  *(void *)(v0 + 152) = sub_10006C51C(&qword_100457E48);
  *(void *)(v0 + 128) = v4;
  uint64_t v5 = sub_10007582C(0, &qword_100457E50);
  *(void *)(v0 + 184) = sub_10006C51C(&qword_100457E58);
  *(void *)(v0 + 160) = v5;
  uint64_t v6 = sub_10007582C(0, &qword_100457E60);
  *(void *)(v0 + 216) = sub_10006C51C(&qword_100457E68);
  *(void *)(v0 + 192) = v6;
  uint64_t v7 = sub_10007582C(0, (unint64_t *)&qword_100457A58);
  *(void *)(v0 + 248) = sub_10006C51C(&qword_100457E70);
  *(void *)(v0 + 224) = v7;
  NSSet.init(objects:)();
  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  return result;
}

void sub_1001D53F4(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, &qword_100457F00);
    sub_1001DB148();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, "paymentNetworkIdentifier", v16) == (id)138) {
              break;
            }

            uint64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_10007582C(0, &qword_100457F00);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            uint64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      uint64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v15 = v3 + 6;
          while (v8 != v15)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              uint64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_10008C4F0();
    return;
  }
  __break(1u);
}

id sub_1001D56B8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for JPKIXPCServer()) init];
  qword_100468860 = (uint64_t)result;
  return result;
}

id sub_1001D56E8()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1, v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v0[OBJC_IVAR____TtC10seserviced13JPKIXPCServer_listener] = 0;
  uint64_t v16 = OBJC_IVAR____TtC10seserviced13JPKIXPCServer_queue;
  sub_10007582C(0, (unint64_t *)&qword_1004566E0);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  unint64_t v10 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1001DAD88((unint64_t *)&qword_1004566E8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10006C51C(&qword_1004566F0);
  sub_100176E90((unint64_t *)&qword_1004566F8, &qword_1004566F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)&v0[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v11 = &v10[OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup];
  *(void *)uint64_t v11 = 0xD000000000000014;
  *((void *)v11 + 1) = 0x80000001003B1620;
  *((void *)v11 + 2) = 0xD00000000000001FLL;
  *((void *)v11 + 3) = 0x80000001003B6D60;
  *((_WORD *)v11 + 16) = 256;
  id v12 = &v10[OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck];
  *(void *)id v12 = 0xD000000000000014;
  *((void *)v12 + 1) = 0x80000001003B1620;
  *((void *)v12 + 2) = 0xD000000000000034;
  *((void *)v12 + 3) = 0x80000001003B6D80;
  *((_WORD *)v12 + 16) = 256;
  int64_t v13 = &v10[OBJC_IVAR____TtC10seserviced13JPKIXPCServer_serviceName];
  *(void *)int64_t v13 = 0xD000000000000027;
  *((void *)v13 + 1) = 0x80000001003B6DC0;

  v18.receiver = v10;
  v18.super_class = ObjectType;
  return [super init];
}

uint64_t sub_1001D5A44(uint64_t a1, void *a2)
{
  *(void *)(swift_allocObject() + 16) = a2;
  id v3 = a2;
  dispatch thunk of XPCListener.IncomingSessionRequest.accept(incomingMessageHandler:cancellationHandler:)();

  return swift_release();
}

double sub_1001D5AD0@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v127 = a2;
  uint64_t v134 = a3;
  uint64_t v123 = sub_10006C51C(&qword_100457EE0);
  __chkstk_darwin(v123, v4);
  uint64_t v124 = (char *)&v104 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v132 = *(void *)(v6 - 8);
  uint64_t v133 = v6;
  uint64_t v8 = __chkstk_darwin(v6, v7);
  unint64_t v122 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v126 = (uint64_t)&v104 - v12;
  __chkstk_darwin(v11, v13);
  uint64_t v121 = (char *)&v104 - v14;
  uint64_t v15 = type metadata accessor for XPCReceivedMessage();
  uint64_t v130 = *(void *)(v15 - 8);
  uint64_t v131 = v15;
  uint64_t v16 = *(void *)(v130 + 64);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  os_log_type_t v129 = (char *)&v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  uint64_t v125 = (char *)&v104 - v20;
  uint64_t v21 = type metadata accessor for JPKIXPCRequest();
  uint64_t v128 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v128 + 64);
  uint64_t v24 = __chkstk_darwin(v21, v23);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  id v28 = (char *)&v104 - v27;
  uint64_t v30 = __chkstk_darwin(v26, v29);
  uint64_t v32 = (char *)&v104 - v31;
  uint64_t v34 = __chkstk_darwin(v30, v33);
  long long v36 = (char *)&v104 - v35;
  __chkstk_darwin(v34, v37);
  long long v39 = (char *)&v104 - v38;
  sub_1001DAD88(&qword_100457EE8, (void (*)(uint64_t))&type metadata accessor for JPKIXPCRequest);
  XPCReceivedMessage.decode<A>(as:)();
  uint64_t v118 = v32;
  uint64_t v115 = 0;
  uint64_t v110 = v28;
  uint64_t v116 = v16;
  uint64_t v119 = a1;
  uint64_t v120 = (uint64_t)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v128;
  unint64_t v41 = *(void (**)(unint64_t, char *, uint64_t))(v128 + 32);
  uint64_t v114 = v128 + 32;
  unint64_t v113 = v41;
  v41((unint64_t)v39, v36, v21);
  if (qword_100453788 != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  sub_10008E55C(v42, (uint64_t)qword_100457E78);
  unint64_t v43 = v118;
  unint64_t v111 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v111(v118, v39, v21);
  unint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  BOOL v46 = os_log_type_enabled(v44, v45);
  uint64_t v112 = v22;
  if (v46)
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    uint64_t v109 = swift_slowAlloc();
    aBlock[0] = v109;
    *(_DWORD *)uint64_t v47 = 136315138;
    BOOL v117 = (void (*)(char *, uint64_t))(v47 + 4);
    sub_1001DAD88(&qword_100457EF8, (void (*)(uint64_t))&type metadata accessor for JPKIXPCRequest);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    void aBlock[6] = sub_100290514(v48, v49, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v50 = v44;
    uint64_t v51 = v21;
    BOOL v117 = *(void (**)(char *, uint64_t))(v40 + 8);
    v117(v43, v21);
    _os_log_impl((void *)&_mh_execute_header, v50, v45, "Decoded request %s", v47, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v52 = v40;
    uint64_t v53 = v119;
  }
  else
  {
    BOOL v117 = *(void (**)(char *, uint64_t))(v40 + 8);
    v117(v43, v21);

    uint64_t v52 = v40;
    uint64_t v53 = v119;
    uint64_t v51 = v21;
  }
  uint64_t v54 = v130;
  XPCReceivedMessage.detachHandoff()();
  uint64_t v109 = JPKIXPCRequest.passIdentifier.getter();
  uint64_t v119 = v55;
  unint64_t v108 = XPCReceivedMessage.auditToken.getter();
  unint64_t v107 = v56;
  unint64_t v106 = v57;
  unint64_t v105 = v58;
  uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  uint64_t v60 = v125;
  uint64_t v61 = v53;
  unint64_t v62 = v39;
  uint64_t v63 = v54;
  uint64_t v64 = v131;
  v59(v125, v61, v131);
  BOOL v65 = v110;
  uint64_t v118 = v62;
  BOOL v66 = v62;
  uint64_t v67 = v51;
  uint64_t v68 = v51;
  uint64_t v69 = (void (*)(uint64_t, char *, uint64_t))v111;
  v111(v110, v66, v68);
  v59(v129, (uint64_t)v60, v64);
  uint64_t v70 = v67;
  v69(v120, v65, v67);
  unint64_t v71 = (*(unsigned __int8 *)(v63 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  unint64_t v72 = (v116 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v73 = (*(unsigned __int8 *)(v52 + 80) + v72 + 8) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v74 = v64;
  uint64_t v75 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v75 + v71, v60, v74);
  id v76 = v127;
  *(void *)(v75 + v72) = v127;
  v113(v75 + v73, v65, v70);
  id v127 = v76;
  uint64_t v77 = v115;
  uint64_t v78 = v126;
  sub_1001D7A48(v109, v119, v108, v107, v106, v105, v126);
  uint64_t v81 = v70;
  if (v77)
  {
    uint64_t v83 = v132;
    uint64_t v82 = v133;
    uint64_t v84 = *(void (**)(char *, uint64_t, uint64_t))(v132 + 32);
    uint64_t v85 = v121;
    v84(v121, v78, v133);
    uint64_t v86 = v122;
    v84(v122, (uint64_t)v85, v82);
    uint64_t v87 = (uint64_t)v124;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v124, v86, v82);
    swift_storeEnumTagMultiPayload();
    uint64_t v88 = (uint64_t)v129;
    uint64_t v89 = v120;
    sub_1001D67AC(v87, (uint64_t)v129, (uint64_t)v127, v120);
    sub_1001DB018(v87);
    (*(void (**)(char *, uint64_t))(v83 + 8))(v86, v82);
    swift_release();
    uint64_t v90 = v134;
    uint64_t v91 = v88;
    uint64_t v92 = v89;
    uint64_t v81 = v70;
    uint64_t v93 = v131;
  }
  else
  {
    uint64_t v94 = v79;
    unint64_t v95 = v80;
    uint64_t v96 = self;
    sub_10006D0EC(v94, v95);
    NSString v97 = String._bridgeToObjectiveC()();
    BOOL v98 = (void *)swift_allocObject();
    id v99 = v127;
    void v98[2] = v127;
    v98[3] = sub_1001DAF34;
    v98[4] = v75;
    v98[5] = v94;
    v98[6] = v95;
    aBlock[4] = (uint64_t)sub_1001DB0C0;
    aBlock[5] = (uint64_t)v98;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_100118B5C;
    uint64_t aBlock[3] = (uint64_t)&unk_1004152A0;
    unint64_t v100 = _Block_copy(aBlock);
    id v101 = v99;
    swift_retain();
    swift_release();
    sub_100058540(v96, v97, v100);
    sub_10006D144(v94, v95);
    uint64_t v93 = v131;
    _Block_release(v100);
    swift_release();

    uint64_t v90 = v134;
    uint64_t v91 = (uint64_t)v129;
    uint64_t v92 = v120;
  }
  (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v91, v93);

  unint64_t v102 = v117;
  v117((char *)v92, v81);
  swift_bridgeObjectRelease();
  v102(v118, v81);
  *(void *)(v90 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)uint64_t v90 = 0u;
  *(_OWORD *)(v90 + 16) = 0u;
  return result;
}

uint64_t sub_1001D67AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v27[1] = a4;
  uint64_t v30 = a3;
  uint64_t v31 = a2;
  uint64_t v5 = type metadata accessor for JPKIXPCRequest.JPKIOperation();
  uint64_t v28 = *(void *)(v5 - 8);
  uint64_t v29 = v5;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for JPKIXPCResponse();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10006C51C(&qword_100457EE0);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (void **)((char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001DB1B0(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, void **, uint64_t))(v15 + 32))(v18, v22, v14);
    (*(void (**)(void *, char *, uint64_t))(v15 + 16))(v13, v18, v14);
    (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for JPKIXPCResponse.error(_:), v9);
    sub_1001DAD88(&qword_100457EF0, (void (*)(uint64_t))&type metadata accessor for JPKIXPCResponse);
    XPCReceivedMessage.reply<A>(_:)();
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  }
  else
  {
    uint64_t v24 = *v22;
    uint64_t v25 = v22[1];
    unint64_t v26 = (unint64_t)v22[2];
    JPKIXPCRequest.operation.getter();
    sub_1001D6B6C(v24, v25, v26, (uint64_t)v8, v13);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v29);
    sub_1001DAD88(&qword_100457EF0, (void (*)(uint64_t))&type metadata accessor for JPKIXPCResponse);
    XPCReceivedMessage.reply<A>(_:)();
    sub_10006D144((uint64_t)v25, v26);

    return (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  }
}

uint64_t sub_1001D6B6C@<X0>(void *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v132 = a2;
  unint64_t v133 = a3;
  uint64_t v131 = a1;
  uint64_t v128 = a5;
  uint64_t v120 = type metadata accessor for JPKIInternalTypes.UserAuthentication();
  uint64_t v119 = *(void *)(v120 - 8);
  uint64_t v7 = __chkstk_darwin(v120, v6);
  unint64_t v122 = (char *)v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v123 = (char *)v115 - v10;
  uint64_t v11 = type metadata accessor for JPKIInternalTypes.UserAuthenticationInternal();
  uint64_t v135 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v118 = (char *)v115 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v130 = (char *)v115 - v16;
  uint64_t v17 = type metadata accessor for JPKIInternalTypes.CertificateType();
  uint64_t v134 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  BOOL v117 = (char *)v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v121 = (char *)v115 - v23;
  __chkstk_darwin(v22, v24);
  os_log_type_t v129 = (char *)v115 - v25;
  uint64_t v26 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v126 = *(void *)(v26 - 8);
  uint64_t v127 = v26;
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v124 = (char *)v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v125 = (char *)v115 - v32;
  uint64_t v34 = __chkstk_darwin(v31, v33);
  long long v36 = (char *)v115 - v35;
  uint64_t v38 = __chkstk_darwin(v34, v37);
  uint64_t v116 = (uint64_t)v115 - v39;
  uint64_t v41 = __chkstk_darwin(v38, v40);
  unint64_t v43 = (void *)((char *)v115 - v42);
  uint64_t v45 = __chkstk_darwin(v41, v44);
  uint64_t v47 = (char *)v115 - v46;
  __chkstk_darwin(v45, v48);
  os_log_type_t v50 = (char *)v115 - v49;
  uint64_t v51 = type metadata accessor for JPKIXPCRequest.JPKIOperation();
  uint64_t v52 = *(void *)(v51 - 8);
  __chkstk_darwin(v51, v53);
  uint64_t v55 = (void *)((char *)v115 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v56 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v52 + 16);
  v115[1] = a4;
  v56(v55, a4, v51);
  int v57 = (*(uint64_t (**)(uint64_t *, uint64_t))(v52 + 88))(v55, v51);
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.readCertificate(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v52 + 96))(v55, v51);
    unint64_t v58 = (char *)v55 + *(int *)(sub_10006C51C(&qword_100457F28) + 48);
    uint64_t v59 = v134;
    uint64_t v60 = (uint64_t)v129;
    (*(void (**)(char *, uint64_t *, uint64_t))(v134 + 32))(v129, v55, v17);
    uint64_t v61 = v135;
    uint64_t v62 = (uint64_t)v130;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v130, v58, v11);
    uint64_t v87 = sub_1001AA5DC(v131, v132, v133, v60, v62, (uint64_t)v47);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v130, v11);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v129, v17);
    uint64_t v88 = v128;
    *uint64_t v128 = v87;
    uint64_t v89 = (unsigned int *)&enum case for JPKIXPCResponse.readCertificate(_:);
LABEL_7:
    uint64_t v90 = *v89;
    uint64_t v91 = type metadata accessor for JPKIXPCResponse();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v91 - 8) + 104))(v88, v90, v91);
  }
  os_log_type_t v129 = (char *)v11;
  uint64_t v63 = (char *)v17;
  uint64_t v65 = v134;
  uint64_t v64 = v135;
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.changeAuthorization(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v52 + 96))(v55, v51);
    uint64_t v66 = sub_10006C51C(&qword_100457F20);
    uint64_t v67 = (char *)v55 + *(int *)(v66 + 48);
    uint64_t v68 = (char *)v55 + *(int *)(v66 + 64);
    uint64_t v69 = v65;
    uint64_t v70 = *(void (**)(char *, uint64_t *, char *))(v65 + 32);
    uint64_t v71 = (uint64_t)v121;
    uint64_t v130 = v63;
    v70(v121, v55, v63);
    uint64_t v72 = v119;
    unint64_t v73 = *(void (**)(char *, char *, uint64_t))(v119 + 32);
    uint64_t v74 = (uint64_t)v123;
    uint64_t v75 = v67;
    uint64_t v76 = v120;
    v73(v123, v75, v120);
    uint64_t v77 = (uint64_t)v122;
    v73(v122, v68, v76);
    sub_1001AB388(v131, (uint64_t)v132, v133, v71, v74, v77, v43);
    uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v72 + 8);
    v93(v77, v76);
    v93(v74, v76);
    (*(void (**)(uint64_t, char *))(v69 + 8))(v71, v130);
    uint64_t v94 = enum case for JPKIXPCResponse.changeAuthorization(_:);
    uint64_t v95 = type metadata accessor for JPKIXPCResponse();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v95 - 8) + 104))(v128, v94, v95);
  }
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.sign(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v52 + 96))(v55, v51);
    uint64_t v79 = *v55;
    uint64_t v78 = v55[1];
    uint64_t v80 = sub_10006C51C(&qword_100457F18);
    uint64_t v81 = (char *)v55 + *(int *)(v80 + 48);
    uint64_t v82 = (char *)v55 + *(int *)(v80 + 64);
    uint64_t v83 = (uint64_t)v117;
    (*(void (**)(char *, char *, char *))(v65 + 32))(v117, v81, v63);
    uint64_t v84 = (uint64_t)v118;
    uint64_t v85 = v129;
    (*(void (**)(char *, char *, char *))(v64 + 32))(v118, v82, v129);
    unint64_t v86 = v133;
    unint64_t v133 = v78;
    uint64_t v98 = sub_1001ACA44(v131, v132, v86, v79, v78, v83, v84, v116);
    sub_10006D144(v79, v133);
    (*(void (**)(uint64_t, char *))(v64 + 8))(v84, v85);
    (*(void (**)(uint64_t, char *))(v65 + 8))(v83, v63);
    uint64_t v88 = v128;
    *uint64_t v128 = v98;
    uint64_t v89 = (unsigned int *)&enum case for JPKIXPCResponse.sign(_:);
    goto LABEL_7;
  }
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.getInstalledCertificateTypes(_:))
  {
    uint64_t v92 = sub_1001A9554(v131, (uint64_t)v132, v133, (uint64_t)v50);
    uint64_t v88 = v128;
    *uint64_t v128 = v92;
    uint64_t v89 = (unsigned int *)&enum case for JPKIXPCResponse.getInstalledCertificateTypes(_:);
    goto LABEL_7;
  }
  if (v57 == enum case for JPKIXPCRequest.JPKIOperation.getACL(_:))
  {
    uint64_t v97 = sub_1001AE52C((uint64_t)v36);
    uint64_t v88 = v128;
    *uint64_t v128 = v97;
    v88[1] = v114;
    uint64_t v89 = (unsigned int *)&enum case for JPKIXPCResponse.getACL(_:);
    goto LABEL_7;
  }
  sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
  uint64_t v99 = v127;
  uint64_t v100 = swift_allocError();
  unint64_t v102 = v101;
  unint64_t v136 = 0;
  unint64_t v137 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  unint64_t v136 = 0xD000000000000010;
  unint64_t v137 = 0x80000001003B6F80;
  sub_1001DAD88(&qword_100457F10, (void (*)(uint64_t))&type metadata accessor for JPKIXPCRequest.JPKIOperation);
  v103._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v103);
  swift_bridgeObjectRelease();
  unint64_t v104 = v137;
  *unint64_t v102 = v136;
  v102[1] = v104;
  uint64_t v105 = v126;
  (*(void (**)(unint64_t *, void, uint64_t))(v126 + 104))(v102, enum case for JPKIInternalTypes.InternalError.typeMismatch(_:), v99);
  swift_willThrow();
  (*(void (**)(uint64_t *, uint64_t))(v52 + 8))(v55, v51);
  unint64_t v106 = v128;
  unint64_t v107 = v125;
  unint64_t v136 = v100;
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    (*(void (**)(unint64_t *, char *, uint64_t))(v105 + 32))(v106, v107, v99);
    uint64_t v108 = enum case for JPKIXPCResponse.error(_:);
    uint64_t v109 = type metadata accessor for JPKIXPCResponse();
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v109 - 8) + 104))(v106, v108, v109);
    return swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    unint64_t v136 = 0;
    unint64_t v137 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v136 = 0xD000000000000013;
    unint64_t v137 = 0x80000001003B6FA0;
    swift_getErrorValue();
    swift_getDynamicType();
    v110._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v110);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    unint64_t v111 = v137;
    *unint64_t v106 = v136;
    v106[1] = v111;
    (*(void (**)(unint64_t *, void, uint64_t))(v105 + 104))(v106, enum case for JPKIInternalTypes.InternalError.typeMismatch(_:), v99);
    uint64_t v112 = enum case for JPKIXPCResponse.error(_:);
    uint64_t v113 = type metadata accessor for JPKIXPCResponse();
    return (*(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v113 - 8) + 104))(v106, v112, v113);
  }
}

void sub_1001D7A48(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v134 = a7;
  uint64_t v8 = v7;
  uint64_t v135 = (void *)a2;
  uint64_t v136 = a1;
  unint64_t v13 = HIDWORD(a3);
  unint64_t v14 = HIDWORD(a4);
  unint64_t v15 = HIDWORD(a5);
  unint64_t v16 = HIDWORD(a6);
  uint64_t v133 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v149 = *(void *)(v133 - 8);
  uint64_t v18 = __chkstk_darwin(v133, v17);
  uint64_t v130 = (uint64_t *)((char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18, v20);
  uint64_t v132 = (uint64_t *)((char *)&v120 - v21);
  token.val[0] = a3;
  token.val[1] = v13;
  token.val[2] = a4;
  token.val[3] = v14;
  token.val[4] = a5;
  token.val[5] = v15;
  token.val[6] = a6;
  token.val[7] = v16;
  SecTaskRef v22 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  if (!v22)
  {
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E55C(v34, (uint64_t)qword_100457E78);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v149;
    uint64_t v39 = v132;
    if (v37)
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to SecTaskCreateWithAuditToken", v40, 2u);
      swift_slowDealloc();
    }

    *uint64_t v39 = 0xD000000000000025;
    v39[1] = 0x80000001003B6E10;
    uint64_t v41 = v133;
    (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v39, enum case for JPKIInternalTypes.InternalError.internalError(_:), v133);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl();
    goto LABEL_48;
  }
  uint64_t v23 = v22;
  long long v24 = *(_OWORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup + 16);
  long long v142 = *(_OWORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup);
  long long v143 = v24;
  __int16 v144 = *(_WORD *)(v8 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipPassLookup + 32);
  long long v145 = v142;
  long long v146 = v24;
  sub_100079AE8((uint64_t)&v145);
  sub_100079AE8((uint64_t)&v146);
  sub_1001AF4B4();
  char v26 = v25;
  sub_100079B14((uint64_t)&v145);
  sub_100079B14((uint64_t)&v146);
  if (v26)
  {
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10008E55C(v27, (uint64_t)qword_100457E78);
    unint64_t v28 = (unint64_t)v135;
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = v136;
    if (v31)
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(void *)token.val = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v137 = sub_100290514(v32, v28, (uint64_t *)&token);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "INTERNAL -- using passIdentifier as AID %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    sub_10011FE64(v32, v28);
    if (v72 >> 60 != 15) {
      goto LABEL_27;
    }
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v42 = sub_1001D98B8(v23, 0xD000000000000016, 0x80000001003B6E40);
  if (!v43)
  {
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v73 = type metadata accessor for Logger();
    sub_10008E55C(v73, (uint64_t)qword_100457E78);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    BOOL v76 = os_log_type_enabled(v74, v75);
    uint64_t v38 = v149;
    uint64_t v39 = v132;
    if (v76)
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Couldn't lookup kSecEntitlementApplicationIdentifier", v77, 2u);
      swift_slowDealloc();
    }

    *uint64_t v39 = 0xD000000000000034;
    v39[1] = 0x80000001003B6E60;
    uint64_t v41 = v133;
    (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v39, enum case for JPKIInternalTypes.InternalError.internalError(_:), v133);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl();

    goto LABEL_48;
  }
  uint64_t v127 = v8;
  uint64_t v128 = v42;
  unint64_t v129 = v43;
  id v44 = [objc_allocWithZone((Class)PKPassLibrary) init];
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [v44 passWithUniqueID:v45];

  if (!v46)
  {
    swift_bridgeObjectRelease();
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v78 = type metadata accessor for Logger();
    sub_10008E55C(v78, (uint64_t)qword_100457E78);
    unint64_t v79 = (unint64_t)v135;
    swift_bridgeObjectRetain_n();
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      id v125 = v44;
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(void *)token.val = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v83 = v136;
      uint64_t v137 = sub_100290514(v136, v79, (uint64_t *)&token);
      id v44 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed pass lookup for pass(withUniqueID:) %s", v82, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v84 = v134;
      uint64_t v41 = v133;
      uint64_t v38 = v149;
      uint64_t v39 = v132;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v84 = v134;
      uint64_t v41 = v133;
      uint64_t v38 = v149;
      uint64_t v39 = v132;
      uint64_t v83 = v136;
    }
    *uint64_t v39 = v83;
    v39[1] = v79;
    (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v39, enum case for JPKIInternalTypes.InternalError.passLookupFailed(_:), v41);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_bridgeObjectRetain();
    swift_willThrowTypedImpl();

    goto LABEL_49;
  }
  uint64_t v123 = v23;
  LOBYTE(v124) = sub_1001D9DF4(v23, 0xD00000000000002FLL, 0x80000001003B6EA0) & 1;
  int v124 = v124;
  if (qword_100453788 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v48 = sub_10008E55C(v47, (uint64_t)qword_100457E78);
  unint64_t v49 = v129;
  swift_bridgeObjectRetain_n();
  uint64_t v122 = v48;
  os_log_type_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  int v121 = v51;
  BOOL v52 = os_log_type_enabled(v50, v51);
  id v126 = v46;
  if (v52)
  {
    uint64_t v53 = swift_slowAlloc();
    id v125 = v44;
    uint64_t v54 = v53;
    *(void *)token.val = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136315394;
    uint64_t v120 = v54 + 4;
    swift_bridgeObjectRetain();
    uint64_t v137 = sub_100290514(v128, v49, (uint64_t *)&token);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v54 + 12) = 1024;
    int v55 = v124;
    LODWORD(v137) = v124;
    id v46 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v121, "Connection from %s privateEntitlement %{BOOL}d", (uint8_t *)v54, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    id v44 = v125;
    swift_slowDealloc();

    if (v55)
    {
LABEL_18:
      uint64_t v56 = v131;
      goto LABEL_19;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (v124) {
      goto LABEL_18;
    }
  }
  long long v85 = *(_OWORD *)(v127 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck + 16);
  long long v139 = *(_OWORD *)(v127 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck);
  long long v140 = v85;
  __int16 v141 = *(_WORD *)(v127 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer__debugSkipAssociatedApplicationCheck + 32);
  long long v147 = v139;
  long long v148 = v85;
  sub_100079AE8((uint64_t)&v147);
  sub_100079AE8((uint64_t)&v148);
  sub_1001AF4B4();
  char v87 = v86;
  sub_100079B14((uint64_t)&v147);
  sub_100079B14((uint64_t)&v148);
  if ((v87 & 1) == 0)
  {
    uint64_t v88 = v44;
    NSString v89 = String._bridgeToObjectiveC()();
    id v90 = [v88 passUniqueIDsForAssociatedApplicationIdentifier:v89];

    if (!v90)
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = v132;
      uint64_t v106 = (uint64_t)v135;
      uint64_t *v132 = v136;
      v39[1] = v106;
      uint64_t v38 = v149;
      uint64_t v41 = v133;
      (*(void (**)(uint64_t *, void, uint64_t))(v149 + 104))(v39, enum case for JPKIInternalTypes.InternalError.passLookupFailed(_:), v133);
      sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
      swift_bridgeObjectRetain();
      swift_willThrowTypedImpl();

LABEL_47:
LABEL_48:
      uint64_t v84 = v134;
      goto LABEL_49;
    }
    id v125 = v88;
    uint64_t v91 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v92 = (unint64_t)v135;
    if ((sub_1000B6F04(v136, (uint64_t)v135, v91) & 1) == 0)
    {
      swift_bridgeObjectRetain_n();
      unint64_t v107 = v129;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v108 = Logger.logObject.getter();
      os_log_type_t v109 = static os_log_type_t.error.getter();
      uint64_t v110 = v92;
      if (os_log_type_enabled(v108, v109))
      {
        uint64_t v111 = swift_slowAlloc();
        uint64_t v131 = swift_slowAlloc();
        *(void *)token.val = v131;
        *(_DWORD *)uint64_t v111 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v112 = v128;
        uint64_t v137 = sub_100290514(v128, v107, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v111 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v137 = sub_100290514(v136, v92, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v111 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v113 = Set.description.getter();
        unint64_t v115 = v114;
        swift_bridgeObjectRelease();
        uint64_t v137 = sub_100290514(v113, v115, (uint64_t *)&token);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v116 = v91;
        swift_bridgeObjectRelease_n();
        uint64_t v110 = (uint64_t)v135;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "Application %s not permitted for pass %s -- allowed %s", (uint8_t *)v111, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v117 = v136;
        uint64_t v84 = v134;
        uint64_t v41 = v133;
        uint64_t v38 = v149;
        uint64_t v39 = v132;
        uint64_t v118 = v125;
        unint64_t v107 = v129;
      }
      else
      {

        uint64_t v116 = v91;
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v84 = v134;
        uint64_t v41 = v133;
        uint64_t v38 = v149;
        uint64_t v39 = v132;
        uint64_t v118 = v125;
        uint64_t v117 = v136;
        uint64_t v112 = v128;
      }
      *uint64_t v39 = v112;
      v39[1] = v107;
      v39[2] = v117;
      v39[3] = v110;
      v39[4] = v116;
      (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v39, enum case for JPKIInternalTypes.InternalError.passAccessForbidden(_:), v41);
      sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
      swift_bridgeObjectRetain();
      swift_willThrowTypedImpl();

      goto LABEL_65;
    }
    swift_bridgeObjectRelease();
    id v44 = v125;
    id v46 = v126;
  }
  uint64_t v93 = v131;
  uint64_t v39 = v130;
  char v94 = sub_1001DA338(a3, a4, a5, a6, (uint64_t)v130);
  if (v93)
  {
    swift_bridgeObjectRelease();

    uint64_t v84 = v134;
    uint64_t v41 = v133;
    uint64_t v38 = v149;
LABEL_49:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v38 + 32))(v84, v39, v41);
    return;
  }
  uint64_t v56 = 0;
  if ((v94 & 1) == 0)
  {
    unint64_t v101 = v129;
    swift_bridgeObjectRetain_n();
    unint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v102, v103))
    {
      id v125 = v44;
      unint64_t v104 = (uint8_t *)swift_slowAlloc();
      *(void *)token.val = swift_slowAlloc();
      *(_DWORD *)unint64_t v104 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v105 = v128;
      uint64_t v137 = sub_100290514(v128, v101, (uint64_t *)&token);
      id v44 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "Process %s is not in the foreground", v104, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v84 = v134;
      uint64_t v41 = v133;
      uint64_t v38 = v149;
      uint64_t v39 = v132;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v84 = v134;
      uint64_t v41 = v133;
      uint64_t v38 = v149;
      uint64_t v39 = v132;
      uint64_t v105 = v128;
    }
    *uint64_t v39 = v105;
    v39[1] = v101;
    (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v39, enum case for JPKIInternalTypes.InternalError.processNotForeground(_:), v41);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl();

LABEL_65:
    goto LABEL_49;
  }
LABEL_19:
  swift_bridgeObjectRelease();
  id v57 = [v46 secureElementPass];
  uint64_t v38 = v149;
  uint64_t v39 = v132;
  unint64_t v58 = v135;
  if (!v57)
  {
LABEL_44:
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Couldn't find .typeJPKI payment application", v97, 2u);
      id v46 = v126;
      swift_slowDealloc();
    }

    *(void *)token.val = 0;
    *(void *)&token.val[2] = 0xE000000000000000;
    _StringGuts.grow(_:)(81);
    v98._countAndFlagsBits = 0xD00000000000004FLL;
    v98._object = (void *)0x80000001003B6ED0;
    String.append(_:)(v98);
    v99._countAndFlagsBits = v136;
    v99._object = v58;
    String.append(_:)(v99);
    uint64_t v100 = *(void *)&token.val[2];
    *uint64_t v39 = *(void *)token.val;
    v39[1] = v100;
    uint64_t v41 = v133;
    (*(void (**)(uint64_t *, void, uint64_t))(v38 + 104))(v39, enum case for JPKIInternalTypes.InternalError.passInvalid(_:), v133);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl();

    goto LABEL_47;
  }
  uint64_t v59 = v57;
  id v60 = [v57 paymentApplications];

  if (v60)
  {
    sub_10007582C(0, &qword_100457F00);
    sub_1001DB148();
    uint64_t v61 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1001D53F4(v61);
    uint64_t v63 = v62;
    swift_bridgeObjectRelease();
    if (v63)
    {
      id v64 = [v63 applicationIdentifier];

      if (v64)
      {
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;

        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v68 = Logger.logObject.getter();
        os_log_type_t v69 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v68, v69))
        {
          uint64_t v70 = swift_slowAlloc();
          uint64_t v71 = swift_slowAlloc();
          uint64_t v131 = v56;
          *(void *)token.val = v71;
          *(_DWORD *)uint64_t v70 = 136315394;
          id v125 = v44;
          swift_bridgeObjectRetain();
          uint64_t v137 = sub_100290514(v136, (unint64_t)v58, (uint64_t *)&token);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v70 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v137 = sub_100290514(v65, v67, (uint64_t *)&token);
          id v44 = v125;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "Resolved passID %s -> %s", (uint8_t *)v70, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        sub_10011FE64(v65, v67);
        if (v119 >> 60 != 15)
        {

          uint64_t v23 = (__SecTask *)v126;
LABEL_27:

          return;
        }
        goto LABEL_68;
      }
    }
    goto LABEL_44;
  }
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
}

uint64_t sub_1001D91F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v18 - 8);
  uint64_t v28 = v18;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = *(void *)(a3 + OBJC_IVAR____TtC10seserviced13JPKIXPCServer_queue);
  SecTaskRef v22 = (void *)swift_allocObject();
  _OWORD v22[2] = a1;
  v22[3] = a2;
  v22[4] = a4;
  v22[5] = a5;
  v22[6] = a6;
  v22[7] = a7;
  aBlock[4] = sub_1001DB138;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_1004152F0;
  uint64_t v23 = _Block_copy(aBlock);
  sub_10006D0EC(a6, a7);
  id v24 = a1;
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  os_log_type_t v30 = _swiftEmptyArrayStorage;
  sub_1001DAD88((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_100176E90((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
  return swift_release();
}

uint64_t sub_1001D94E0(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = sub_10006C51C(&qword_100457EE0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (uint64_t *)((char *)&v34 - v17);
  if (a1)
  {
    *uint64_t v18 = a1;
    v18[1] = a5;
    void v18[2] = a6;
    swift_storeEnumTagMultiPayload();
    id v19 = a1;
    sub_10006D0EC(a5, a6);
    a3(v18);

    uint64_t v15 = v18;
  }
  else
  {
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10008E55C(v20, (uint64_t)qword_100457E78);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v35 = a3;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      if (a2)
      {
        swift_getErrorValue();
        uint64_t v24 = Error.localizedDescription.getter();
        unint64_t v26 = v25;
      }
      else
      {
        unint64_t v26 = 0xEB000000003E726FLL;
        uint64_t v24 = 0x727265206C696E3CLL;
      }
      uint64_t v36 = sub_100290514(v24, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to get secureElement %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      a3 = v35;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v38 = 0;
    unint64_t v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    uint64_t v38 = 0xD000000000000013;
    unint64_t v39 = 0x80000001003B6DF0;
    if (a2)
    {
      swift_getErrorValue();
      uint64_t v27 = Error.localizedDescription.getter();
    }
    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v36 = v27;
    uint64_t v37 = v28;
    sub_10006C51C((uint64_t *)&unk_100457940);
    v29._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    unint64_t v30 = v39;
    *uint64_t v15 = v38;
    v15[1] = v30;
    uint64_t v31 = enum case for JPKIInternalTypes.InternalError.internalError(_:);
    uint64_t v32 = type metadata accessor for JPKIInternalTypes.InternalError();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 104))(v15, v31, v32);
    swift_storeEnumTagMultiPayload();
    a3(v15);
  }
  return sub_1001DB018((uint64_t)v15);
}

uint64_t sub_1001D98B8(__SecTask *a1, uint64_t a2, unint64_t a3)
{
  CFErrorRef error = 0;
  uint64_t v6 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef v7 = SecTaskCopyValueForEntitlement(a1, v6, &error);

  if (v7)
  {
    swift_unknownObjectRetain();
    if (swift_dynamicCast())
    {
      swift_unknownObjectRelease();
      return v25;
    }
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E55C(v19, (uint64_t)qword_100457E78);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315650;
      swift_bridgeObjectRetain();
      sub_100290514(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v22 + 12) = 2080;
      swift_getObjectType();
      uint64_t v23 = _typeName(_:qualified:)();
      sub_100290514(v23, v24, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 22) = 2080;
      sub_100290514(0x676E69727453, 0xE600000000000000, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to cast result of entitlement %s from %s to %s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease_n();
    }
  }
  else
  {
    CFErrorRef v9 = error;
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_100457E78);
    uint64_t v11 = v9;
    swift_bridgeObjectRetain_n();
    uint64_t v12 = v11;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      sub_100290514(a2, a3, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      if (v9)
      {
        type metadata accessor for CFError(0);
        sub_1001DAD88((unint64_t *)&qword_100456F30, type metadata accessor for CFError);
        uint64_t v16 = Error.localizedDescription.getter();
        unint64_t v18 = v17;
      }
      else
      {
        unint64_t v18 = 0xE500000000000000;
        uint64_t v16 = 0x3E6C696E3CLL;
      }
      sub_100290514(v16, v18, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to SecTaskCopyValueForEntitlement %s : %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return 0;
}

uint64_t sub_1001D9DF4(__SecTask *a1, uint64_t a2, unint64_t a3)
{
  CFErrorRef error = 0;
  uint64_t v6 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef v7 = SecTaskCopyValueForEntitlement(a1, v6, &error);

  if (v7)
  {
    uint64_t v27 = (uint64_t)v7;
    swift_unknownObjectRetain();
    if (swift_dynamicCast())
    {
      swift_unknownObjectRelease();
      return v26;
    }
    else
    {
      if (qword_100453788 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_10008E55C(v19, (uint64_t)qword_100457E78);
      swift_unknownObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        uint64_t v27 = swift_slowAlloc();
        *(_DWORD *)uint64_t v22 = 136315650;
        swift_bridgeObjectRetain();
        sub_100290514(a2, a3, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 12) = 2080;
        swift_getObjectType();
        uint64_t v23 = _typeName(_:qualified:)();
        sub_100290514(v23, v24, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v8 = 2;
        swift_unknownObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v22 + 22) = 2080;
        sub_100290514(1819242306, 0xE400000000000000, &v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to cast result of entitlement %s from %s to %s", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();
      }
      else
      {

        uint64_t v8 = 2;
        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
      }
    }
  }
  else
  {
    CFErrorRef v9 = error;
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10008E55C(v10, (uint64_t)qword_100457E78);
    uint64_t v11 = v9;
    swift_bridgeObjectRetain_n();
    uint64_t v12 = v11;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315394;
      swift_bridgeObjectRetain();
      sub_100290514(a2, a3, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2080;
      if (v9)
      {
        type metadata accessor for CFError(0);
        sub_1001DAD88((unint64_t *)&qword_100456F30, type metadata accessor for CFError);
        uint64_t v16 = Error.localizedDescription.getter();
        unint64_t v18 = v17;
      }
      else
      {
        unint64_t v18 = 0xE500000000000000;
        uint64_t v16 = 0x3E6C696E3CLL;
      }
      sub_100290514(v16, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to SecTaskCopyValueForEntitlement %s : %s", (uint8_t *)v15, 0x16u);
      uint64_t v8 = 2;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v8 = 2;
      swift_bridgeObjectRelease_n();
    }
  }
  return v8;
}

uint64_t sub_1001DA338(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v60 = a5;
  unsigned int v5 = a4;
  unsigned int v6 = a3;
  unsigned int v7 = a2;
  unsigned int v8 = a1;
  unint64_t v9 = HIDWORD(a1);
  unint64_t v10 = HIDWORD(a2);
  unint64_t v11 = HIDWORD(a3);
  unint64_t v12 = HIDWORD(a4);
  uint64_t v13 = type metadata accessor for JPKIInternalTypes.InternalError();
  uint64_t v58 = *(void *)(v13 - 8);
  uint64_t v59 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (void *)((char *)v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  atoken.val[0] = v8;
  atoken.val[1] = v9;
  atoken.val[2] = v7;
  atoken.val[3] = v10;
  atoken.val[4] = v6;
  atoken.val[5] = v11;
  atoken.val[6] = v5;
  atoken.val[7] = v12;
  uint64_t v17 = audit_token_to_pid(&atoken);
  id v18 = [self identifierWithPid:v17];
  if (!v18)
  {
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10008E55C(v33, (uint64_t)qword_100457E78);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = v59;
    if (v36)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Unable to create RBSProcessIdentifier", v38, 2u);
      swift_slowDealloc();
    }

    *uint64_t v16 = 0xD000000000000025;
    v16[1] = 0x80000001003B6F20;
    unint64_t v39 = (void *)v58;
    (*(void (**)(void *, void, uint64_t))(v58 + 104))(v16, enum case for JPKIInternalTypes.InternalError.internalError(_:), v37);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl();
    goto LABEL_20;
  }
  uint64_t v19 = v18;
  uint64_t v20 = self;
  *(void *)atoken.val = 0;
  id v21 = v19;
  id v22 = [v20 handleForIdentifier:v21 error:&atoken];
  if (!v22)
  {
    id v40 = *(id *)atoken.val;
    uint64_t v41 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100453788 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E55C(v42, (uint64_t)qword_100457E78);
    unint64_t v43 = v21;
    id v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      id v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = (void *)swift_slowAlloc();
      *(_DWORD *)id v46 = 138412290;
      v55[1] = v46 + 4;
      uint64_t v57 = v41;
      *(void *)atoken.val = v43;
      uint64_t v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v56 = v19;

      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to create RBSProcessHandle for identifier %@", v46, 0xCu);
      sub_10006C51C(&qword_100455620);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      id v44 = v43;
    }
    uint64_t v37 = v59;

    *uint64_t v16 = 0xD000000000000021;
    v16[1] = 0x80000001003B6F50;
    unint64_t v39 = (void *)v58;
    (*(void (**)(void *, void, uint64_t))(v58 + 104))(v16, enum case for JPKIInternalTypes.InternalError.internalError(_:), v37);
    sub_1001DAD88((unint64_t *)&qword_100457768, (void (*)(uint64_t))&type metadata accessor for JPKIInternalTypes.InternalError);
    swift_willThrowTypedImpl();

    swift_errorRelease();
LABEL_20:
    uint64_t v48 = (void (*)(uint64_t, void *, uint64_t))v39[4];
    LOBYTE(v39) = (_BYTE)v39 + 32;
    v48(v60, v16, v37);
    return v39 & 1;
  }
  uint64_t v23 = v22;
  id v24 = *(id *)atoken.val;

  if (qword_100453788 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_10008E55C(v25, (uint64_t)qword_100457E78);
  unsigned __int8 v26 = v23;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    Swift::String v29 = (uint8_t *)swift_slowAlloc();
    unint64_t v30 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::String v29 = 138412290;
    id v31 = [v26 currentState];
    id v32 = v31;
    if (v31) {
      *(void *)atoken.val = v31;
    }
    else {
      *(void *)atoken.val = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v30 = v32;

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Got RBSProcessState %@", v29, 0xCu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v27 = v26;
  }

  unint64_t v49 = [v26 currentState];
  unint64_t v39 = v49;
  if (v49)
  {
    id v50 = [v49 endowmentNamespaces];

    if (v50)
    {
      uint64_t v51 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      LOBYTE(v39) = sub_1000B6F04(v52, v53, v51);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {

      LOBYTE(v39) = 0;
    }
  }
  else
  {
  }
  return v39 & 1;
}

uint64_t type metadata accessor for JPKIXPCServer()
{
  return self;
}

uint64_t sub_1001DAB58()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_100457E78);
  sub_10008E55C(v0, (uint64_t)qword_100457E78);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001DAD40()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DAD78(uint64_t a1)
{
  return sub_1001D5A44(a1, *(void **)(v1 + 16));
}

double sub_1001DAD80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D5AD0(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1001DAD88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001DADD0()
{
  uint64_t v1 = type metadata accessor for XPCReceivedMessage();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for JPKIXPCRequest();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1001DAF34(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for XPCReceivedMessage() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for JPKIXPCRequest() - 8);
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return sub_1001D67AC(a1, v1 + v4, v7, v8);
}

uint64_t sub_1001DB018(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100457EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001DB078()
{
  swift_release();
  sub_10006D144(*(void *)(v0 + 40), *(void *)(v0 + 48));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001DB0C0(void *a1, uint64_t a2)
{
  return sub_1001D91F4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t sub_1001DB0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001DB0E0()
{
  return swift_release();
}

uint64_t sub_1001DB0E8()
{
  swift_errorRelease();
  swift_release();
  sub_10006D144(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001DB138()
{
  return sub_1001D94E0(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

unint64_t sub_1001DB148()
{
  unint64_t result = qword_100457F08;
  if (!qword_100457F08)
  {
    sub_10007582C(255, &qword_100457F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100457F08);
  }
  return result;
}

uint64_t sub_1001DB1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100457EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001DB224(uint64_t a1)
{
  return sub_1001DB970(a1, (uint64_t *)&unk_100455760, &qword_10045B740, (uint64_t (*)(uint64_t *, unint64_t))sub_1000761D0);
}

unint64_t sub_1001DB24C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C((uint64_t *)&unk_10045B570);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100170994(v6, (uint64_t)v15, &qword_100458110);
    unint64_t result = sub_1002C0B68((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000761D0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DB390(uint64_t a1)
{
  return sub_1001DBDA4(a1, (uint64_t *)&unk_10045B5C0);
}

unint64_t sub_1001DB39C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(&qword_100455770);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1002C0AD0(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DB4C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(&qword_100458118);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *(v4 - 4);
    unint64_t v6 = *(v4 - 3);
    uint64_t v7 = *(v4 - 2);
    unint64_t v8 = *(v4 - 1);
    uint64_t v9 = *v4;
    sub_10006D0EC(v5, v6);
    sub_10006D0EC(v7, v8);
    unint64_t result = sub_1002C0BAC(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = (uint64_t *)(v2[7] + 24 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    v13[2] = v9;
    uint64_t v14 = v2[2];
    BOOL v15 = __OFADD__(v14, 1);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 5;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DB604(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(&qword_100458120);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (id *)(a1 + 40);
  while (1)
  {
    char v5 = *(unsigned char *)v4;
    id v6 = *(v4 - 1);
    unint64_t result = sub_1002C0D90((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v6;
    *(unsigned char *)(v2[7] + result) = v5;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DB704(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(&qword_1004581A0);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unsigned char *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 2);
    uint64_t v6 = *((void *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1002C0AD0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    *(unsigned char *)(v2[7] + result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DB818(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(&qword_10045B6D0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100170994(v6, (uint64_t)&v13, &qword_100458140);
    uint64_t v7 = v13;
    unint64_t result = sub_1002C0D90(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000761D0(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DB948(uint64_t a1)
{
  return sub_1001DB970(a1, &qword_100458178, &qword_100458180, (uint64_t (*)(uint64_t *, unint64_t))sub_1000761D0);
}

unint64_t sub_1001DB970(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  if (!*(void *)(a1 + 16))
  {
    char v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  char v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100170994(v11, (uint64_t)&v20, a3);
    uint64_t v12 = v20;
    uint64_t v13 = v21;
    unint64_t result = sub_1002C0AD0(v20, v21);
    if (v15) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v16 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v16 = v12;
    v16[1] = v13;
    unint64_t result = a4(&v22, v8[7] + 32 * result);
    uint64_t v17 = v8[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v8[2] = v19;
    v11 += 48;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DBAB0(uint64_t a1)
{
  return sub_1001DBEC8(a1, &qword_100458130);
}

unint64_t sub_1001DBABC(uint64_t a1)
{
  return sub_1001DBAD4(a1, (uint64_t *)&unk_10045B640);
}

unint64_t sub_1001DBAC8(uint64_t a1)
{
  return sub_1001DBAD4(a1, &qword_100458128);
}

unint64_t sub_1001DBAD4(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    unint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    sub_10006D0EC(v6, v7);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1002C0BAC(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DBBF0(uint64_t a1)
{
  return sub_1001DBC40(a1, &qword_100458168, &qword_100458170, (uint64_t (*)(void))sub_1002C0FA0);
}

unint64_t sub_1001DBC18(uint64_t a1)
{
  return sub_1001DBC40(a1, &qword_100458158, &qword_100458160, (uint64_t (*)(void))sub_1002C1060);
}

unint64_t sub_1001DBC40(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(a2);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = v7 + 64;
  uint64_t v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100170994(v11, (uint64_t)v18, a3);
    char v12 = v18[0];
    unint64_t result = a4(v18[0]);
    if (v14) {
      break;
    }
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v8[6] + result) = v12;
    unint64_t result = (unint64_t)sub_1000761D0(&v19, (_OWORD *)(v8[7] + 32 * result));
    uint64_t v15 = v8[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v8[2] = v17;
    v11 += 40;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DBD70(uint64_t a1)
{
  return sub_1001DBC40(a1, &qword_100458148, &qword_100458150, (uint64_t (*)(void))sub_1002C1168);
}

unint64_t sub_1001DBD98(uint64_t a1)
{
  return sub_1001DBDA4(a1, &qword_10045B780);
}

unint64_t sub_1001DBDA4(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v6 = (uint64_t)*(v5 - 2);
    uint64_t v7 = (uint64_t)*(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    id v9 = v8;
    unint64_t result = sub_1002C0AD0(v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v12 = (uint64_t *)(v3[6] + 16 * result);
    *char v12 = v6;
    v12[1] = v7;
    *(void *)(v3[7] + 8 * result) = v9;
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DBEBC(uint64_t a1)
{
  return sub_1001DBEC8(a1, &qword_100458190);
}

unint64_t sub_1001DBEC8(uint64_t a1, uint64_t *a2)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(a2);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *(v5 - 2);
    uint64_t v7 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain();
    unint64_t result = sub_1002C0AD0(v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v11 = (uint64_t *)(v3[6] + 16 * result);
    *char v11 = v6;
    v11[1] = v7;
    *(void *)(v3[7] + 8 * result) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001DBFD8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10006C51C(&qword_100458188);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_1002C0AD0(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v10 = (uint64_t *)(v2[6] + 16 * result);
    *char v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1001DC0F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if (v7)
  {
    char v9 = *(unsigned char *)(v1 + 16);
    char v10 = Logger.logObject.getter();
    if (v9)
    {
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        BOOL v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "LyonBLE is already running", v12, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      os_log_type_t v13 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v13, "Starting LyonBLE", v14, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v1 + 16) = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001DC324()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_100468A38;
  *uint64_t v6 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  id v8 = (id)v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v6, v2);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_17:
    uint64_t v13 = swift_once();
LABEL_8:
    uint64_t v15 = __chkstk_darwin(v13, v14);
    *(&v23 - 4) = (uint64_t)sub_100088848;
    *(&v23 - 3) = 0;
    *(&v23 - 2) = v16;
    __chkstk_darwin(v15, v17);
    *(&v23 - 2) = (uint64_t)sub_100079AAC;
    *(&v23 - 1) = v18;
    uint64_t v20 = v19 + 4;
    os_unfair_lock_lock(v19 + 4);
    sub_100079ACC(&v24);
    os_unfair_lock_unlock(v20);
    sub_1001DC6A4(v24);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v1 + 17) == 1)
    {
      if (qword_1004536B0 != -1) {
        swift_once();
      }
      sub_1000CCF24(*(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
      *(unsigned char *)(v1 + 17) = 0;
    }
    *(unsigned char *)(v1 + 16) = 0;
    return;
  }
  int v9 = *(unsigned __int8 *)(v1 + 16);
  char v10 = Logger.logObject.getter();
  if (v9 == 1)
  {
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      BOOL v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Stopping LyonBLE", v12, 2u);
      swift_slowDealloc();
    }

    if (qword_100453910 == -1) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v21, "LyonBLE is not running", v22, 2u);
    swift_slowDealloc();
  }
}

void sub_1001DC6A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1001E757C((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v24;
    uint64_t v23 = v25;
    uint64_t v4 = v26;
    uint64_t v5 = v27;
    unint64_t v6 = v28;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v23 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v5 = 0;
  }
  int64_t v22 = (unint64_t)(v4 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_40;
  }
  type metadata accessor for Peer();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  char v10 = v29;
  swift_unknownObjectRelease();
  os_log_type_t v11 = v5;
  uint64_t v12 = v6;
  if (!v29) {
    goto LABEL_40;
  }
  while (1)
  {
    if (*v10 == _TtC10seserviced8LyonPeer) {
      *((unsigned char *)v10 + OBJC_IVAR____TtC10seserviced8LyonPeer_hasError) = 1;
    }
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000CAD08();
    if (qword_100453910 != -1) {
      uint64_t v16 = swift_once();
    }
    Swift::String v29 = v10;
    uint64_t v18 = __chkstk_darwin(v16, v17);
    __chkstk_darwin(v18, v19);
    uint64_t v5 = v20 + 4;
    os_unfair_lock_lock(v20 + 4);
    sub_1001E77A0();
    if (v2) {
      goto LABEL_42;
    }
    uint64_t v2 = 0;
    os_unfair_lock_unlock(v5);
    swift_release();
    uint64_t v5 = v11;
    unint64_t v6 = v12;
    if (v3 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v6) {
      break;
    }
    uint64_t v12 = (v6 - 1) & v6;
    unint64_t v13 = __clz(__rbit64(v6)) | ((void)v5 << 6);
    os_log_type_t v11 = v5;
LABEL_24:
    char v10 = *(__objc2_class ***)(*(void *)(v3 + 48) + 8 * v13);
    swift_retain();
    if (!v10) {
      goto LABEL_40;
    }
  }
  os_log_type_t v11 = (os_unfair_lock_s *)((char *)&v5->_os_unfair_lock_opaque + 1);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_42:
    os_unfair_lock_unlock(v5);
    __break(1u);
    return;
  }
  if ((uint64_t)v11 >= v22) {
    goto LABEL_40;
  }
  unint64_t v14 = *(void *)(v23 + 8 * (void)v11);
  if (v14)
  {
LABEL_23:
    uint64_t v12 = (v14 - 1) & v14;
    unint64_t v13 = __clz(__rbit64(v14)) + ((void)v11 << 6);
    goto LABEL_24;
  }
  uint64_t v15 = (os_unfair_lock_s *)((char *)&v5->_os_unfair_lock_opaque + 2);
  if ((uint64_t)&v5->_os_unfair_lock_opaque + 2 >= v22) {
    goto LABEL_40;
  }
  unint64_t v14 = *(void *)(v23 + 8 * (void)v15);
  if (v14) {
    goto LABEL_22;
  }
  uint64_t v15 = (os_unfair_lock_s *)((char *)&v5->_os_unfair_lock_opaque + 3);
  if ((uint64_t)&v5->_os_unfair_lock_opaque + 3 >= v22) {
    goto LABEL_40;
  }
  unint64_t v14 = *(void *)(v23 + 8 * (void)v15);
  if (v14) {
    goto LABEL_22;
  }
  uint64_t v15 = v5 + 1;
  if ((uint64_t)&v5[1] >= v22) {
    goto LABEL_40;
  }
  unint64_t v14 = *(void *)(v23 + 8 * (void)v15);
  if (v14)
  {
LABEL_22:
    os_log_type_t v11 = v15;
    goto LABEL_23;
  }
  os_log_type_t v11 = (os_unfair_lock_s *)((char *)v5 + 5);
  if ((uint64_t)&v5[1]._os_unfair_lock_opaque + 1 >= v22) {
    goto LABEL_40;
  }
  unint64_t v14 = *(void *)(v23 + 8 * (void)v11);
  if (v14) {
    goto LABEL_23;
  }
  os_log_type_t v21 = (char *)&v5[1]._os_unfair_lock_opaque + 2;
  while ((char *)v22 != v21)
  {
    unint64_t v14 = *(void *)(v23 + 8 * (void)v21++);
    if (v14)
    {
      os_log_type_t v11 = (os_unfair_lock_s *)(v21 - 1);
      goto LABEL_23;
    }
  }
LABEL_40:
  sub_10008C4F0();
}

uint64_t sub_1001DCADC(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10006C51C(&qword_100455720);
    sub_10008C0B0(&qword_100458108, &qword_100455720);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v8 = v26;
    int64_t v9 = v27;
    unint64_t v10 = v28;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    int64_t v9 = 0;
  }
  int64_t v22 = (unint64_t)(v8 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    swift_unknownObjectRetain();
    sub_10006C51C(&qword_100455720);
    swift_dynamicCast();
    uint64_t v15 = v29;
    swift_unknownObjectRelease();
    int64_t v16 = v9;
    uint64_t v17 = v10;
    while (v15)
    {
      uint64_t v29 = v15;
      a1(&v29);
      uint64_t result = swift_release();
      if (v4) {
        break;
      }
      int64_t v9 = v16;
      unint64_t v10 = v17;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v10)
      {
        uint64_t v17 = (v10 - 1) & v10;
        unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
        int64_t v16 = v9;
      }
      else
      {
        int64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return result;
        }
        if (v16 >= v22) {
          return sub_10008C4F0();
        }
        unint64_t v19 = *(void *)(v23 + 8 * v16);
        if (!v19)
        {
          int64_t v20 = v9 + 2;
          if (v9 + 2 >= v22) {
            return sub_10008C4F0();
          }
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 3;
          if (v9 + 3 >= v22) {
            return sub_10008C4F0();
          }
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 4;
          if (v9 + 4 >= v22) {
            return sub_10008C4F0();
          }
          unint64_t v19 = *(void *)(v23 + 8 * v20);
          if (v19)
          {
LABEL_22:
            int64_t v16 = v20;
          }
          else
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v22) {
              return sub_10008C4F0();
            }
            unint64_t v19 = *(void *)(v23 + 8 * v16);
            if (!v19)
            {
              int64_t v21 = v9 + 6;
              while (v22 != v21)
              {
                unint64_t v19 = *(void *)(v23 + 8 * v21++);
                if (v19)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_23;
                }
              }
              return sub_10008C4F0();
            }
          }
        }
LABEL_23:
        uint64_t v17 = (v19 - 1) & v19;
        unint64_t v18 = __clz(__rbit64(v19)) + (v16 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      swift_retain();
    }
  }
  return sub_10008C4F0();
}

uint64_t sub_1001DCDE8(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = a2;
  if (*(unsigned char *)(a1 + 24))
  {
    swift_beginAccess();
    swift_retain();
    char v4 = sub_1000E851C(v15, a2);
    swift_endAccess();
    uint64_t result = swift_release();
    if ((v4 & 1) == 0) {
      return result;
    }
    uint64_t v6 = swift_beginAccess();
    uint64_t v7 = *(void *)(a1 + 16);
    __chkstk_darwin(v6, v8);
    uint64_t v14 = &v17;
    swift_bridgeObjectRetain();
    int64_t v9 = (void (*)(uint64_t *))sub_1001E7430;
  }
  else
  {
    v15[5] = a2;
    type metadata accessor for Peer();
    swift_retain();
    sub_10006C51C(&qword_100454588);
    swift_dynamicCast();
    [(id)v15[4] copyWithZone:0];
    swift_unknownObjectRelease();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    swift_beginAccess();
    char v10 = sub_1000E851C(&v16, v15[3]);
    swift_endAccess();
    uint64_t result = swift_release();
    if ((v10 & 1) == 0) {
      return result;
    }
    uint64_t v11 = swift_beginAccess();
    uint64_t v7 = *(void *)(a1 + 16);
    __chkstk_darwin(v11, v12);
    uint64_t v14 = &v17;
    swift_bridgeObjectRetain();
    int64_t v9 = (void (*)(uint64_t *))sub_1001E7478;
  }
  sub_1001DCADC(v9, (uint64_t)&v13, v7);
  return swift_bridgeObjectRelease();
}

void sub_1001DD030(uint64_t a1, id a2)
{
  id v16 = a2;
  if (*(unsigned char *)(a1 + 24))
  {
    swift_beginAccess();
    char v4 = sub_1000E7C08(v14, a2);
    swift_endAccess();

    if ((v4 & 1) == 0) {
      return;
    }
    uint64_t v5 = swift_beginAccess();
    uint64_t v6 = *(void *)(a1 + 16);
    __chkstk_darwin(v5, v7);
    uint64_t v13 = &v16;
    swift_bridgeObjectRetain();
    uint64_t v8 = (void (*)(uint64_t *))sub_1001E7698;
  }
  else
  {
    [a2 copyWithZone:0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10012AE84();
    swift_dynamicCast();
    swift_beginAccess();
    char v9 = sub_1000E7C08(&v15, v14[3]);
    swift_endAccess();

    if ((v9 & 1) == 0) {
      return;
    }
    uint64_t v10 = swift_beginAccess();
    uint64_t v6 = *(void *)(a1 + 16);
    __chkstk_darwin(v10, v11);
    uint64_t v13 = &v16;
    swift_bridgeObjectRetain();
    uint64_t v8 = (void (*)(uint64_t *))sub_1001E76E0;
  }
  sub_1001DCADC(v8, (uint64_t)&v12, v6);
  swift_bridgeObjectRelease();
}

uint64_t sub_1001DD228(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v5 = result;
    _OWORD v7[2] = a2;
    uint64_t v6 = type metadata accessor for Peer();
    swift_retain();
    sub_10006C51C(&qword_100454588);
    swift_dynamicCast();
    [v7[1] copyWithZone:0];
    swift_unknownObjectRelease();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(v5 + 8))(v7, v6, ObjectType, v5);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DD354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v14);
  id v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = a5;
  unint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001E757C((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v21);
  return swift_release();
}

uint64_t sub_1001DD61C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v14);
  id v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a1;
  *(void *)(v17 + 24) = a2;
  aBlock[4] = a4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = a5;
  unint64_t v18 = _Block_copy(aBlock);
  id v19 = a2;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001E757C((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v22);
  return swift_release();
}

uint64_t sub_1001DD8E0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = sub_1000F5D98();
  uint64_t result = swift_endAccess();
  if (v2)
  {
    uint64_t v13 = v2;
    char v4 = (uint64_t *)(a1 + 16);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v5 = swift_beginAccess();
      uint64_t v6 = *v4;
      __chkstk_darwin(v5, v7);
      uint64_t v12 = &v13;
      swift_bridgeObjectRetain();
      uint64_t v8 = (void (*)(uint64_t *))sub_1001E7360;
    }
    else
    {
      uint64_t v9 = swift_beginAccess();
      uint64_t v6 = *v4;
      __chkstk_darwin(v9, v10);
      uint64_t v12 = &v13;
      swift_bridgeObjectRetain();
      uint64_t v8 = (void (*)(uint64_t *))sub_1001E73A8;
    }
    sub_1001DCADC(v8, (uint64_t)&v11, v6);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void sub_1001DDA38(uint64_t a1, void *a2)
{
  swift_beginAccess();
  char v4 = (void *)sub_1000F6748(a2);
  swift_endAccess();
  if (v4)
  {
    id v14 = v4;
    uint64_t v5 = (uint64_t *)(a1 + 16);
    if (*(unsigned char *)(a1 + 24))
    {
      uint64_t v6 = swift_beginAccess();
      uint64_t v7 = *v5;
      __chkstk_darwin(v6, v8);
      uint64_t v13 = &v14;
      swift_bridgeObjectRetain();
      uint64_t v9 = (void (*)(uint64_t *))sub_1001E75C4;
    }
    else
    {
      uint64_t v10 = swift_beginAccess();
      uint64_t v7 = *v5;
      __chkstk_darwin(v10, v11);
      uint64_t v13 = &v14;
      swift_bridgeObjectRetain();
      uint64_t v9 = (void (*)(uint64_t *))sub_1001E760C;
    }
    sub_1001DCADC(v9, (uint64_t)&v12, v7);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001DDB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v10);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a1 + 24);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a1;
  *(void *)(v13 + 24) = a2;
  aBlock[4] = sub_1001E73D0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_100415368;
  id v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_1001E757C((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v17);
  return swift_release();
}

uint64_t sub_1001DDE64(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v5 = result;
    _OWORD v7[2] = a2;
    uint64_t v6 = type metadata accessor for Peer();
    swift_retain();
    sub_10006C51C(&qword_100454588);
    swift_dynamicCast();
    [v7[1] copyWithZone:0];
    swift_unknownObjectRelease();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_dynamicCast();
    (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(v5 + 24))(v7, v6, ObjectType, v5);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001DDF90(uint64_t a1, void *a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4)
  {
    uint64_t v5 = v4;
    [a2 copyWithZone:0];
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    unint64_t v6 = sub_10012AE84();
    swift_dynamicCast();
    (*(void (**)(id *, unint64_t, uint64_t, uint64_t))(v5 + 24))(&v7, v6, ObjectType, v5);
  }
  else
  {
    __break(1u);
  }
}

void sub_1001DE074(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  id v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *id v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    if (qword_1004536B0 == -1)
    {
LABEL_6:
      sub_1000D5BEC(-80, -85, 0, *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced8LyonPeer_peripheralTXPower));
      return;
    }
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "LyonBLE is not running", v12, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1001DE29C(id *a1)
{
  id v1 = *a1;
  if ([*a1 endPointType] != (id)4) {
    return 0;
  }
  id v2 = [v1 revocationAttestation];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;

    sub_10006D144(v4, v6);
    return 0;
  }
  return 1;
}

uint64_t sub_1001DE324()
{
  type metadata accessor for LyonBLE();
  swift_allocObject();
  uint64_t result = sub_1001DE364();
  qword_100468868 = result;
  return result;
}

uint64_t sub_1001DE364()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10006C51C(&qword_100455EB0);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  unint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  id v9 = (char *)&aBlock[-1] - v8;
  *(_WORD *)(v0 + 16) = 0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  uint64_t v10 = OBJC_IVAR____TtC10seserviced7LyonBLE_disableAOPZoneDetection;
  unint64_t v40 = 0xD000000000000014;
  unint64_t v41 = 0x80000001003B1620;
  unint64_t v42 = 0xD000000000000025;
  unint64_t v43 = 0x80000001003B7270;
  __int16 v44 = 256;
  sub_1001AF4B4();
  *(unsigned char *)(v0 + v10) = v11 & 1;
  uint64_t v12 = OBJC_IVAR____TtC10seserviced7LyonBLE_disablePeripheralTags;
  unint64_t v35 = 0xD000000000000014;
  unint64_t v36 = 0x80000001003B1620;
  unint64_t v37 = 0xD000000000000022;
  unint64_t v38 = 0x80000001003B72A0;
  __int16 v39 = 256;
  sub_1001AF4B4();
  *(unsigned char *)(v0 + v12) = v13 & 1;
  uint64_t v14 = OBJC_IVAR____TtC10seserviced7LyonBLE_disableScanFiltering;
  void aBlock[6] = 0xD000000000000014;
  uint64_t aBlock[7] = 0x80000001003B1620;
  void aBlock[8] = 0xD00000000000001CLL;
  aBlock[9] = 0x80000001003B72D0;
  __int16 v34 = 256;
  sub_1001AF4B4();
  *(unsigned char *)(v0 + v14) = v15 & 1;
  id v16 = (void *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID);
  *id v16 = 843466310;
  v16[1] = 0xE400000000000000;
  UUID.init(uuidString:)();
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  id v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t result = v19(v9, 1, v17);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v18 + 32);
  v21(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol, v9, v17);
  UUID.init(uuidString:)();
  uint64_t result = v19(v6, 1, v17);
  if (result == 1)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v21(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion, v6, v17);
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierOffset) = 2;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_serviceDataLength) = 24;
  uint64_t v22 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress);
  *uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v22[1] = v23;
  uint64_t v24 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable);
  *uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24[1] = v25;
  uint64_t v26 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData);
  *uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v26[1] = v27;
  unint64_t v28 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceDataUUIDIdentifier);
  uint64_t *v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v28[1] = v29;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_rssiThresholdCloserPlaceholder) = -80;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_rssiThresholdFurtherPlaceholder) = -85;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle) = 6;
  uint64_t v30 = OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI;
  if (qword_100453838 != -1) {
    swift_once();
  }
  *(void *)(v1 + v30) = qword_100468958;
  *(_OWORD *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask) = xmmword_100378280;
  *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers) = 0;
  if (qword_100453928 != -1) {
    swift_once();
  }
  aBlock[4] = sub_1001E7578;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1002B9D80;
  uint64_t aBlock[3] = &unk_100415480;
  id v31 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v31);
  return v1;
}

_DWORD *sub_1001DE834()
{
  char v1 = *(unsigned char *)(v0 + 16);
  id v16 = &type metadata for Bool;
  LOBYTE(v15) = v1;
  sub_1000761D0(&v15, v14);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v14, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v3 = *(unsigned char *)(v0 + 17);
  id v16 = &type metadata for Bool;
  LOBYTE(v15) = v3;
  sub_1000761D0(&v15, v14);
  char v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v14, 0x696E6E6163537369, 0xEA0000000000676ELL, v4);
  swift_bridgeObjectRelease();
  char v5 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_disableAOPZoneDetection);
  id v16 = &type metadata for Bool;
  LOBYTE(v15) = v5;
  sub_1000761D0(&v15, v14);
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v14, 0xD000000000000017, 0x80000001003B6FF0, v6);
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_disablePeripheralTags);
  id v16 = &type metadata for Bool;
  LOBYTE(v15) = v7;
  sub_1000761D0(&v15, v14);
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v14, 0xD000000000000015, 0x80000001003B7010, v8);
  swift_bridgeObjectRelease();
  char v9 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_disableScanFiltering);
  id v16 = &type metadata for Bool;
  LOBYTE(v15) = v9;
  sub_1000761D0(&v15, v14);
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v14, 0xD000000000000014, 0x80000001003B7030, v10);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_1000190DC((uint64_t)"lyonble.state", (uint64_t)isa);

  return v12;
}

void sub_1001DEAA4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  if (*(unsigned char *)(v3 + 16) == 1)
  {
    if (a1 && *(void *)(a1 + 16))
    {
      if (a3) {
        uint64_t v7 = 0;
      }
      else {
        uint64_t v7 = 6;
      }
      uint64_t v8 = OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI;
      p_vtable = _TtC10seserviced10DSKExpress.vtable;
      if (*(void *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI) == a2
        && v7 == *(void *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle)
        && (uint64_t v10 = *(void *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers)) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v11 = sub_1001E54B4(a1, v10);
        swift_bridgeObjectRelease();
        if (v11)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      swift_retain();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_t osloga = (os_log_t)v8;
        uint64_t v16 = swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v16 + 12) = 2048;
        uint64_t v17 = v7;
        p_vtable = (void **)(_TtC10seserviced10DSKExpress + 24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "LyonBLE scan duty cycle changing from %ld to %ld", (uint8_t *)v16, 0x16u);
        uint64_t v8 = (uint64_t)osloga;
        swift_slowDealloc();
      }
      else
      {
        swift_release();

        uint64_t v17 = v7;
      }
      swift_retain();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 134218240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v20 + 12) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "LyonBLE minRSSI changing from %ld to %ld", (uint8_t *)v20, 0x16u);
        swift_slowDealloc();
      }
      else
      {
        swift_release();
      }

      *(void *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle) = v17;
      *(void *)(v4 + v8) = a2;
      *(void *)((char *)p_vtable[502] + v4) = a1;
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v4 + 17) == 1)
      {
        if (qword_1004536B0 != -1) {
          swift_once();
        }
        sub_1000CCF24(*(void *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(void *)(v4 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
        *(unsigned char *)(v4 + 17) = 0;
      }
      sub_1001DEF54();
    }
    else
    {
      *(void *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers) = 0;
      swift_bridgeObjectRelease();
      if (*(unsigned char *)(v3 + 17) == 1)
      {
        if (qword_1004536B0 != -1) {
          swift_once();
        }
        sub_1000CCF24(*(void *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(void *)(v3 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
        *(unsigned char *)(v3 + 17) = 0;
      }
    }
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      char v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "LyonBLE is not running, updateBLEConfigStatus called", v13, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1001DEF54()
{
  uint64_t v1 = v0;
  if (*(unsigned char *)(v0 + 17))
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      uint64_t v4 = "Scanning already active";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, v4, v3, 2u);
      swift_slowDealloc();
      goto LABEL_13;
    }
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanningExpressReaderGroupIdentifiers);
  if (!v5 || !*(void *)(v5 + 16))
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      uint64_t v4 = "Request to start scanning with no reader group identifiers";
      goto LABEL_12;
    }
LABEL_13:

    return;
  }
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378470;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(unsigned char *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v8;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_scanDutyCycle);
  *(void *)(inited + 120) = &type metadata for Int;
  *(void *)(inited + 96) = v9;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v10;
  *(void *)(inited + 168) = &type metadata for UInt32;
  *(_DWORD *)(inited + 144) = 655360;
  swift_bridgeObjectRetain();
  unint64_t v40 = sub_1001DB970(inited, (uint64_t *)&unk_100455760, &qword_10045B740, (uint64_t (*)(uint64_t *, unint64_t))sub_1000761D0);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_disableScanFiltering)) {
    goto LABEL_9;
  }
  unint64_t v11 = *(void *)(v5 + 16);
  if (qword_1004536B0 != -1)
  {
    swift_once();
    if (v11 > 8) {
      goto LABEL_9;
    }
LABEL_17:
    swift_retain();
    __int16 v39 = (void *)sub_1001E7014(v5);
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_18;
  }
  if (v11 <= 8) {
    goto LABEL_17;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  __int16 v39 = _swiftEmptyArrayStorage;
LABEL_18:
  sub_10006C51C(&qword_10045B590);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_100378470;
  uint64_t v13 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress + 8);
  *(void *)(v12 + 32) = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress);
  *(void *)(v12 + 40) = v13;
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable + 8);
  *(void *)(v12 + 48) = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable);
  *(void *)(v12 + 56) = v14;
  uint64_t v15 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData + 8);
  *(void *)(v12 + 64) = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData);
  *(void *)(v12 + 72) = v15;
  swift_retain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 134218240;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v18 + 12) = 2048;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "LyonBLE starting scanning with %ld, minRSSI %ld", (uint8_t *)v18, 0x16u);
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  if (qword_1004536B0 != -1) {
    swift_once();
  }
  uint64_t v19 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8);
  uint64_t v38 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID);
  uint64_t v20 = *(void *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_minRSSI);
  sub_10006C51C(&qword_1004548C0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void *)(v22 + 72);
  unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1003782A0;
  unint64_t v26 = v25 + v24;
  uint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 16);
  v27(v26, v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol, v21);
  v27(v26 + v23, v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion, v21);
  char v28 = *(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_disableAOPZoneDetection);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC10seserviced7LyonBLE_disablePeripheralTags)) {
    uint64_t v29 = 0;
  }
  else {
    uint64_t v29 = &off_10040E2B8;
  }
  type metadata accessor for DSKBLE.BLEScanRequest();
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  *((void *)&v37 + 1) = sub_1001E72F0;
  *((void *)&v36 + 1) = sub_1001E72E8;
  *(void *)&long long v37 = v1;
  *((void *)&v35 + 1) = sub_1001E72E4;
  *(void *)&long long v36 = v1;
  *((void *)&v34 + 1) = sub_1001E72DC;
  *(void *)&long long v35 = v1;
  *((void *)&v33 + 1) = sub_1001E72D8;
  *(void *)&long long v34 = v1;
  *((void *)&v32 + 1) = sub_1001E72C0;
  *(void *)&long long v33 = v1;
  *((void *)&v31 + 1) = sub_1001E72A8;
  *(void *)&long long v32 = v1;
  *(void *)&long long v31 = v29;
  uint64_t v30 = sub_1000DA5FC(v38, v19, v20, v12, v25, 0, (uint64_t)v39, v40, 0, 0, 1, (v28 & 1) == 0, v31, v32, v33, v34, v35, v36, v37,
          v1);
  sub_1000CC140(v30);
  swift_release();
  *(unsigned char *)(v1 + 17) = 1;
}

unint64_t sub_1001DF638(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t v5 = (int)v5;
LABEL_6:
      if (v5 == 8)
      {
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v25 = 0x1000000000;
        uint64_t v26 = __DataStorage.init(length:)();
        sub_1001E600C((int *)&v25, 0);
        uint64_t v27 = v25;
        uint64_t v28 = v26 | 0x4000000000000000;
        sub_10006D0EC(a1, v3);
        sub_1001E6174(2, 2, a1, v3);
        sub_10006D144(a1, v3);
        uint64_t v9 = (uint64_t *)(v2 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask);
        swift_beginAccess();
        unint64_t v10 = v9[1];
        if (v10 >> 60 == 15)
        {
          swift_allocObject();
          uint64_t v23 = 0x1000000000;
          uint64_t v24 = __DataStorage.init(length:)();
          sub_1001E600C((int *)&v23, 0);
          uint64_t v11 = v24 | 0x4000000000000000;
          uint64_t v12 = *v9;
          unint64_t v13 = v9[1];
          *uint64_t v9 = v23;
          v9[1] = v11;
          sub_100075868(v12, v13);
          swift_beginAccess();
          if ((unint64_t)v9[1] >> 60 == 15)
          {
            __break(1u);
          }
          else
          {
            sub_1001E6174(2, 2, -1, 0x8000000000000uLL);
            swift_endAccess();
            unint64_t v10 = v9[1];
            if (v10 >> 60 != 15) {
              goto LABEL_10;
            }
          }
          __break(1u);
          JUMPOUT(0x1001DFAA4);
        }
LABEL_10:
        unint64_t v3 = *v9;
        sub_10006D0EC(v3, v10);
        return v3;
      }
LABEL_11:
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(a1, v3);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        uint64_t v25 = v22;
        *(_DWORD *)uint64_t v16 = 136315138;
        sub_10023CDF4(a1, v3);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v17 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v19 = v18;
        swift_bridgeObjectRelease();
        uint64_t v23 = sub_100290514(v17, v19, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, v3);
        sub_10006D144(a1, v3);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Invalid reader group identifier %s", v16, 0xCu);
        unint64_t v3 = v22;
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144(a1, v3);
        sub_10006D144(a1, v3);
      }
      sub_1000C7D10();
      swift_allocError();
      *uint64_t v20 = 2;
      swift_willThrow();
      return v3;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_6;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_1001DFAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v5;
  uint64_t v7 = v4;
  uint64_t v263 = a4;
  uint64_t v267 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v261 = *(void *)(v9 - 8);
  uint64_t v262 = v9;
  __chkstk_darwin(v9, v10);
  v264 = (char *)&v243 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  v265 = *(uint8_t **)(v12 - 8);
  v266 = (uint8_t *)v12;
  __chkstk_darwin(v12, v13);
  os_log_type_t v15 = ((char *)&v243 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (uint8_t **)((char *)&v243 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v21 = qword_100468A38;
  *uint64_t v20 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v16);
  id v22 = (id)v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  uint64_t v24 = *(void (**)(void *, uint64_t))(v17 + 8);
  unint64_t v23 = v17 + 8;
  v24(v20, v16);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_66;
  }
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Lyon received onDiscovery", v27, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v7 + 16) == 1)
  {
    if (*(void *)(a3 + 16))
    {
      uint64_t v28 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable);
      uint64_t v29 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvIsConnectable + 8);
      swift_bridgeObjectRetain();
      uint64_t v30 = sub_1002C0AD0(v28, v29);
      if (v31)
      {
        sub_1000AA580(*(void *)(a3 + 56) + 32 * v30, (uint64_t)&v271);
      }
      else
      {
        long long v271 = 0u;
        long long v272 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((void *)&v272 + 1))
      {
        uint64_t v35 = swift_dynamicCast();
        if ((v35 & 1) != 0 && v269 == 1)
        {
          if (qword_1004536D8 != -1) {
            uint64_t v35 = swift_once();
          }
          uint64_t v37 = __chkstk_darwin(v35, v36);
          *(&v243 - 4) = (uint8_t *)sub_1001DE29C;
          *(&v243 - 3) = 0;
          *(&v243 - 2) = v38;
          __chkstk_darwin(v37, v39);
          *(&v243 - 2) = (uint8_t *)sub_1001E7544;
          *(&v243 - 1) = v40;
          unint64_t v42 = v41 + 4;
          os_unfair_lock_lock(v41 + 4);
          sub_10008C4AC(&v271);
          if (v6)
          {
            os_unfair_lock_unlock(v42);
            __break(1u);
            JUMPOUT(0x1001E21DCLL);
          }
          unint64_t v259 = 0;
          os_unfair_lock_unlock(v42);
          uint64_t v260 = v271;
          if (qword_100453738 != -1) {
            swift_once();
          }
          unint64_t v258 = (unint64_t)"fastTxAttemptedCount";
          uint64_t v43 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
          if (v44 >> 60 == 15)
          {
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            swift_once();
LABEL_93:
            sub_100254AB0();
            sub_1000C7D10();
            swift_allocError();
            unsigned char *v120 = 2;
            swift_willThrow();
LABEL_103:
            sub_10006D144(v267, (unint64_t)v256);
            sub_10006D144(v257, v255);
            return;
          }
          uint64_t v45 = v43;
          unint64_t v46 = v44;
          uint64_t v47 = sub_10019AF40(v43, v44);
          sub_100075868(v45, v46);
          uint64_t v48 = *(void *)(v47 + 24);
          swift_bridgeObjectRetain();
          swift_release();
          if ((v260 & 0xC000000000000001) != 0)
          {
            if (__CocoaSet.count.getter()) {
              goto LABEL_26;
            }
          }
          else if (*(void *)(v260 + 16))
          {
LABEL_26:
            uint64_t v49 = *(void *)(v48 + 16);
            swift_bridgeObjectRelease();
            if (v49)
            {
              if (*(void *)(a3 + 16))
              {
                uint64_t v50 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress);
                uint64_t v51 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvDeviceAddress + 8);
                swift_bridgeObjectRetain();
                uint64_t v52 = sub_1002C0AD0(v50, v51);
                if (v53)
                {
                  sub_1000AA580(*(void *)(a3 + 56) + 32 * v52, (uint64_t)&v271);
                }
                else
                {
                  long long v271 = 0u;
                  long long v272 = 0u;
                }
                swift_bridgeObjectRelease();
                if (*((void *)&v272 + 1))
                {
                  if (swift_dynamicCast())
                  {
                    uint64_t v63 = v269;
                    unint64_t v23 = v270;
                    switch(v270 >> 62)
                    {
                      case 1uLL:
                        LODWORD(v64) = HIDWORD(v269) - v269;
                        if (__OFSUB__(HIDWORD(v269), v269))
                        {
                          __break(1u);
LABEL_131:
                          __break(1u);
LABEL_132:

                          uint64_t v190 = v254;
                          unint64_t v191 = v259;
                          sub_10006D144((uint64_t)v254, v259);
                          sub_10006D144((uint64_t)v190, v191);
                          goto LABEL_119;
                        }
                        uint64_t v64 = (int)v64;
LABEL_50:
                        if (v64 == 6)
                        {
                          sub_10006D0EC(v269, v270);
                          sub_10006D0EC(v63, v23);
                          uint64_t v68 = Logger.logObject.getter();
                          os_log_type_t v69 = static os_log_type_t.debug.getter();
                          int v70 = v69;
                          BOOL v71 = os_log_type_enabled(v68, v69);
                          uint64_t v257 = v63;
                          if (v71)
                          {
                            v256 = v68;
                            uint64_t v72 = swift_slowAlloc();
                            LODWORD(v255) = v70;
                            uint64_t v73 = (uint8_t *)v72;
                            v254 = swift_slowAlloc();
                            *(void *)&long long v271 = v254;
                            v253 = v73;
                            *(_DWORD *)uint64_t v73 = 136380675;
                            v252 = v73 + 12;
                            v251 = v73 + 4;
                            unint64_t v74 = v259;
                            os_log_type_t v75 = sub_10023CDF4(v63, v23);
                            unint64_t v259 = v74;
                            uint64_t v269 = (uint64_t)v75;
                            sub_10006C51C((uint64_t *)&unk_100455EA0);
                            unint64_t v76 = v23;
                            sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                            uint64_t v77 = BidirectionalCollection<>.joined(separator:)();
                            unint64_t v79 = v78;
                            swift_bridgeObjectRelease();
                            uint64_t v269 = sub_100290514(v77, v79, (uint64_t *)&v271);
                            UnsafeMutableRawBufferPointer.copyMemory(from:)();
                            unint64_t v23 = v76;
                            uint64_t v63 = v257;
                            swift_bridgeObjectRelease();
                            sub_10006D144(v63, v23);
                            sub_10006D144(v63, v23);
                            _os_log_impl((void *)&_mh_execute_header, v256, (os_log_type_t)v255, "Received AdvA: %{private}s", v253, 0xCu);
                            swift_arrayDestroy();
                            swift_slowDealloc();
                            swift_slowDealloc();
                          }
                          else
                          {

                            sub_10006D144(v63, v23);
                            sub_10006D144(v63, v23);
                          }
                          if (!*(void *)(a3 + 16))
                          {
                            long long v271 = 0u;
                            long long v272 = 0u;
                            goto LABEL_73;
                          }
                          uint64_t v80 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData);
                          uint64_t v81 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonAdvServiceData + 8);
                          swift_bridgeObjectRetain();
                          uint64_t v82 = sub_1002C0AD0(v80, v81);
                          if (v83)
                          {
                            sub_1000AA580(*(void *)(a3 + 56) + 32 * v82, (uint64_t)&v271);
                            goto LABEL_67;
                          }
LABEL_66:
                          long long v271 = 0u;
                          long long v272 = 0u;
LABEL_67:
                          swift_bridgeObjectRelease();
                          uint64_t v63 = v257;
                          if (*((void *)&v272 + 1))
                          {
                            sub_10006C51C(&qword_1004557C8);
                            if (swift_dynamicCast())
                            {
                              uint64_t v84 = v269;
                              swift_bridgeObjectRetain();
                              NSString v85 = String._bridgeToObjectiveC()();
                              swift_bridgeObjectRelease();
                              id v86 = [self UUIDWithString:v85];

                              if (*(void *)(v84 + 16))
                              {
                                unint64_t v87 = sub_1002C0F5C((uint64_t)v86);
                                if (v88)
                                {
                                  unint64_t v255 = v23;
                                  NSString v89 = (uint64_t *)(*(void *)(v84 + 56) + 16 * v87);
                                  unint64_t v90 = v89[1];
                                  unint64_t v91 = v90 >> 62;
                                  uint64_t v267 = *v89;
                                  v256 = v90;
                                  sub_10006D0EC(v267, v90);

                                  swift_bridgeObjectRelease();
                                  switch(v91)
                                  {
                                    case 1uLL:
                                      LODWORD(v92) = HIDWORD(v267) - v267;
                                      if (__OFSUB__(HIDWORD(v267), v267)) {
                                        goto LABEL_166;
                                      }
                                      uint64_t v92 = (int)v92;
                                      goto LABEL_84;
                                    case 2uLL:
                                      uint64_t v98 = *(void *)(v267 + 16);
                                      uint64_t v97 = *(void *)(v267 + 24);
                                      BOOL v67 = __OFSUB__(v97, v98);
                                      uint64_t v92 = v97 - v98;
                                      if (v67) {
                                        goto LABEL_167;
                                      }
                                      goto LABEL_84;
                                    case 3uLL:
                                      goto LABEL_87;
                                    default:
                                      uint64_t v92 = BYTE6(v256);
LABEL_84:
                                      if (v92 != 24)
                                      {
LABEL_87:
                                        swift_bridgeObjectRelease();
                                        sub_10006D144(v267, (unint64_t)v256);
                                        unint64_t v23 = v255;
                                        uint64_t v63 = v257;
                                        goto LABEL_76;
                                      }
                                      uint64_t v99 = v267;
                                      uint64_t v100 = v256;
                                      sub_10006D0EC(v267, (unint64_t)v256);
                                      sub_10006D0EC(v99, (unint64_t)v100);
                                      unint64_t v101 = Logger.logObject.getter();
                                      os_log_type_t v102 = static os_log_type_t.debug.getter();
                                      v254 = v101;
                                      LODWORD(v253) = v102;
                                      if (os_log_type_enabled(v101, v102))
                                      {
                                        os_log_type_t v103 = (uint8_t *)swift_slowAlloc();
                                        v252 = (uint8_t *)swift_slowAlloc();
                                        *(void *)&long long v271 = v252;
                                        v251 = v103;
                                        *(_DWORD *)os_log_type_t v103 = 136380675;
                                        v250 = v103 + 4;
                                        uint64_t v104 = v267;
                                        uint64_t v105 = v256;
                                        unint64_t v106 = v259;
                                        unint64_t v107 = sub_10023CDF4(v267, (unint64_t)v256);
                                        unint64_t v259 = v106;
                                        uint64_t v269 = (uint64_t)v107;
                                        sub_10006C51C((uint64_t *)&unk_100455EA0);
                                        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                                        uint64_t v108 = BidirectionalCollection<>.joined(separator:)();
                                        unint64_t v110 = v109;
                                        swift_bridgeObjectRelease();
                                        uint64_t v269 = sub_100290514(v108, v110, (uint64_t *)&v271);
                                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                        swift_bridgeObjectRelease();
                                        sub_10006D144(v104, (unint64_t)v105);
                                        sub_10006D144(v104, (unint64_t)v105);
                                        uint64_t v111 = v254;
                                        _os_log_impl((void *)&_mh_execute_header, v254, (os_log_type_t)v253, "Received service data: %{private}s", v251, 0xCu);
                                        swift_arrayDestroy();
                                        swift_slowDealloc();
                                        swift_slowDealloc();
                                      }
                                      else
                                      {

                                        uint64_t v112 = v267;
                                        uint64_t v113 = v256;
                                        sub_10006D144(v267, (unint64_t)v256);
                                        sub_10006D144(v112, (unint64_t)v113);
                                      }
                                      uint64_t v114 = v267;
                                      unint64_t v115 = v256;
                                      sub_10006D0EC(v267, (unint64_t)v256);
                                      unint64_t v116 = v259;
                                      LODWORD(v251) = sub_10007DCC0(v114, (unint64_t)v115, 1, 0, 0);
                                      if (v116)
                                      {
                                        swift_bridgeObjectRelease();
                                        swift_errorRelease();
                                        uint64_t v117 = Logger.logObject.getter();
                                        os_log_type_t v118 = static os_log_type_t.error.getter();
                                        if (os_log_type_enabled(v117, v118))
                                        {
                                          unint64_t v119 = (uint8_t *)swift_slowAlloc();
                                          *(_WORD *)unint64_t v119 = 0;
                                          _os_log_impl((void *)&_mh_execute_header, v117, v118, "Failed to retrieve peripheral TX power from service data", v119, 2u);
                                          swift_slowDealloc();
                                        }

                                        if (qword_100453830 == -1) {
                                          goto LABEL_93;
                                        }
                                        goto LABEL_168;
                                      }
                                      v252 = (uint8_t *)Data.subdata(in:)();
                                      v253 = v121;
                                      uint64_t v249 = Data.subdata(in:)();
                                      v250 = (uint8_t *)v122;
                                      v254 = Data.subdata(in:)();
                                      unint64_t v259 = v123;
                                      if (qword_100453668 != -1) {
                                        swift_once();
                                      }
                                      if (sub_1000869B4((uint64_t)v254, v259))
                                      {
                                        swift_bridgeObjectRelease();
                                        int v124 = v254;
                                        unint64_t v125 = v259;
                                        sub_10006D0EC((uint64_t)v254, v259);
                                        sub_10006D0EC((uint64_t)v124, v125);
                                        id v126 = Logger.logObject.getter();
                                        os_log_type_t v127 = static os_log_type_t.info.getter();
                                        if (os_log_type_enabled(v126, v127))
                                        {
                                          uint64_t v128 = (uint8_t *)swift_slowAlloc();
                                          v266 = (uint8_t *)swift_slowAlloc();
                                          *(void *)&long long v271 = v266;
                                          *(_DWORD *)uint64_t v128 = 136315138;
                                          v265 = v128 + 4;
                                          unint64_t v129 = v254;
                                          unint64_t v130 = v259;
                                          uint64_t v269 = (uint64_t)sub_10023CDF4((uint64_t)v254, v259);
                                          sub_10006C51C((uint64_t *)&unk_100455EA0);
                                          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                                          uint64_t v131 = BidirectionalCollection<>.joined(separator:)();
                                          unint64_t v133 = v132;
                                          swift_bridgeObjectRelease();
                                          uint64_t v269 = sub_100290514(v131, v133, (uint64_t *)&v271);
                                          UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                          swift_bridgeObjectRelease();
                                          sub_10006D144((uint64_t)v129, v130);
                                          sub_10006D144((uint64_t)v129, v130);
                                          _os_log_impl((void *)&_mh_execute_header, v126, v127, "Not connecting to peripheral since %s is pre-armed", v128, 0xCu);
                                          swift_arrayDestroy();
                                          swift_slowDealloc();
                                          swift_slowDealloc();
                                        }
                                        else
                                        {

                                          __int16 v144 = v254;
                                          unint64_t v145 = v259;
                                          sub_10006D144((uint64_t)v254, v259);
                                          sub_10006D144((uint64_t)v144, v145);
                                        }
                                        sub_1000C7D10();
                                        swift_allocError();
                                        unsigned char *v146 = 2;
                                        swift_willThrow();
                                        sub_10006D144((uint64_t)v254, v259);
                                        sub_10006D144(v249, (unint64_t)v250);
                                        sub_10006D144((uint64_t)v252, (unint64_t)v253);
                                        goto LABEL_103;
                                      }
                                      type metadata accessor for __DataStorage();
                                      swift_allocObject();
                                      uint64_t v134 = __DataStorage.init(capacity:)();
                                      uint64_t v269 = 0;
                                      unint64_t v270 = v134 | 0x4000000000000000;
                                      Data._Representation.append(contentsOf:)();
                                      Data.append(_:)();
                                      Data.append(_:)();
                                      uint64_t v135 = v269;
                                      unint64_t v136 = v270;
                                      sub_10006D0EC(v269, v270);
                                      sub_10006D0EC(v135, v136);
                                      uint64_t v137 = Logger.logObject.getter();
                                      os_log_type_t v138 = static os_log_type_t.debug.getter();
                                      v248 = v137;
                                      LODWORD(v247) = v138;
                                      if (os_log_type_enabled(v137, v138))
                                      {
                                        long long v139 = (uint8_t *)swift_slowAlloc();
                                        uint64_t v246 = swift_slowAlloc();
                                        *(void *)&long long v271 = v246;
                                        v245 = v139;
                                        *(_DWORD *)long long v139 = 136380675;
                                        uint64_t v244 = v139 + 12;
                                        uint64_t v243 = v139 + 4;
                                        uint64_t v268 = (uint64_t)sub_10023CDF4(v135, v136);
                                        sub_10006C51C((uint64_t *)&unk_100455EA0);
                                        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                                        uint64_t v140 = BidirectionalCollection<>.joined(separator:)();
                                        unint64_t v142 = v141;
                                        swift_bridgeObjectRelease();
                                        uint64_t v268 = sub_100290514(v140, v142, (uint64_t *)&v271);
                                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                        swift_bridgeObjectRelease();
                                        sub_10006D144(v135, v136);
                                        sub_10006D144(v135, v136);
                                        long long v143 = v248;
                                        _os_log_impl((void *)&_mh_execute_header, v248, (os_log_type_t)v247, "plaintext  Pad_Bytes || AdvA || Dynamic Tag Expiry Timestamp %{private}s", v245, 0xCu);
                                        swift_arrayDestroy();
                                        swift_slowDealloc();
                                        swift_slowDealloc();
                                      }
                                      else
                                      {

                                        sub_10006D144(v135, v136);
                                        sub_10006D144(v135, v136);
                                      }
                                      long long v147 = v254;
                                      unint64_t v148 = v259;
                                      sub_10006D0EC((uint64_t)v254, v259);
                                      sub_10006D0EC((uint64_t)v147, v148);
                                      uint64_t v149 = Logger.logObject.getter();
                                      os_log_type_t v150 = static os_log_type_t.debug.getter();
                                      v248 = v149;
                                      LODWORD(v247) = v150;
                                      if (os_log_type_enabled(v149, v150))
                                      {
                                        uint64_t v151 = (uint8_t *)swift_slowAlloc();
                                        uint64_t v246 = swift_slowAlloc();
                                        *(void *)&long long v271 = v246;
                                        v245 = v151;
                                        *(_DWORD *)uint64_t v151 = 136380675;
                                        uint64_t v244 = v151 + 4;
                                        uint64_t v152 = v254;
                                        uint64_t v268 = (uint64_t)sub_10023CDF4((uint64_t)v254, v259);
                                        sub_10006C51C((uint64_t *)&unk_100455EA0);
                                        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                                        uint64_t v153 = BidirectionalCollection<>.joined(separator:)();
                                        unint64_t v155 = v154;
                                        swift_bridgeObjectRelease();
                                        uint64_t v268 = sub_100290514(v153, v155, (uint64_t *)&v271);
                                        UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                        swift_bridgeObjectRelease();
                                        unint64_t v156 = v259;
                                        sub_10006D144((uint64_t)v152, v259);
                                        sub_10006D144((uint64_t)v152, v156);
                                        uint64_t v157 = v248;
                                        _os_log_impl((void *)&_mh_execute_header, v248, (os_log_type_t)v247, "truncatedReaderGroupIdentifier: %{private}s", v245, 0xCu);
                                        swift_arrayDestroy();
                                        swift_slowDealloc();
                                        swift_slowDealloc();
                                      }
                                      else
                                      {

                                        uint64_t v158 = v254;
                                        unint64_t v159 = v259;
                                        sub_10006D144((uint64_t)v254, v259);
                                        sub_10006D144((uint64_t)v158, v159);
                                      }
                                      uint64_t v160 = (uint64_t)v252;
                                      uint64_t v161 = v253;
                                      sub_10006D0EC((uint64_t)v252, (unint64_t)v253);
                                      unsigned int v162 = sub_10007D8AC(v160, (unint64_t)v161, 0, 0, 1);
                                      Date.init()();
                                      Date.timeIntervalSince1970.getter();
                                      double v164 = v163;
                                      (*((void (**)(NSObject *, uint8_t *))v265 + 1))(v15, v266);
                                      if ((~*(void *)&v164 & 0x7FF0000000000000) != 0)
                                      {
                                        if (v164 > -1.0)
                                        {
                                          if (v164 < 4294967300.0)
                                          {
                                            if (v162 <= v164)
                                            {
                                              swift_bridgeObjectRelease();
                                              uint64_t v175 = Logger.logObject.getter();
                                              os_log_type_t v176 = static os_log_type_t.error.getter();
                                              if (os_log_type_enabled(v175, v176))
                                              {
                                                uint64_t v177 = (uint8_t *)swift_slowAlloc();
                                                *(_WORD *)uint64_t v177 = 0;
                                                _os_log_impl((void *)&_mh_execute_header, v175, v176, "Failed to parse dynamic expiry tag", v177, 2u);
                                                swift_slowDealloc();
                                              }

                                              goto LABEL_119;
                                            }
                                            if (qword_100453818 == -1)
                                            {
LABEL_113:
                                              v248 = sub_100230B58((uint64_t)v254, v259);
                                              v265 = (uint8_t *)v165;
                                              if (v165 >> 60 == 15)
                                              {
                                                swift_bridgeObjectRelease();
                                                uint64_t v166 = v254;
                                                unint64_t v167 = v259;
                                                sub_10006D0EC((uint64_t)v254, v259);
                                                sub_10006D0EC((uint64_t)v166, v167);
                                                os_log_type_t v15 = Logger.logObject.getter();
                                                os_log_type_t v168 = static os_log_type_t.error.getter();
                                                if (!os_log_type_enabled(v15, v168)) {
                                                  goto LABEL_132;
                                                }
                                                uint64_t v169 = (uint8_t *)swift_slowAlloc();
                                                v266 = (uint8_t *)swift_slowAlloc();
                                                *(void *)&long long v271 = v266;
                                                *(_DWORD *)uint64_t v169 = 136315138;
                                                v265 = v169 + 4;
                                                uint64_t v170 = v254;
                                                unint64_t v171 = v259;
                                                uint64_t v268 = (uint64_t)sub_10023CDF4((uint64_t)v254, v259);
                                                sub_10006C51C((uint64_t *)&unk_100455EA0);
                                                sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
                                                uint64_t v172 = BidirectionalCollection<>.joined(separator:)();
                                                unint64_t v174 = v173;
                                                swift_bridgeObjectRelease();
                                                uint64_t v268 = sub_100290514(v172, v174, (uint64_t *)&v271);
                                                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                                swift_bridgeObjectRelease();
                                                sub_10006D144((uint64_t)v170, v171);
                                                sub_10006D144((uint64_t)v170, v171);
                                                _os_log_impl((void *)&_mh_execute_header, v15, v168, "Reader ID %s, not in an express endpoint, ignoring peripheral", v169, 0xCu);
                                                swift_arrayDestroy();
                                                swift_slowDealloc();
                                                swift_slowDealloc();

LABEL_119:
                                                if (qword_100453830 != -1) {
                                                  swift_once();
                                                }
                                                sub_100254AB0();
                                                sub_1000C7D10();
                                                swift_allocError();
                                                *uint64_t v178 = 2;
                                                swift_willThrow();
                                                sub_10006D144(v249, (unint64_t)v250);
LABEL_122:
                                                sub_10006D144((uint64_t)v252, (unint64_t)v253);
                                                sub_10006D144((uint64_t)v254, v259);
                                                sub_10006D144(v267, (unint64_t)v256);
                                                sub_10006D144(v257, v255);
                                                sub_10006D144(v269, v270);
                                                return;
                                              }
                                              uint64_t v179 = v248;
                                              unint64_t v180 = (unint64_t)v265;
                                              sub_10006D0EC((uint64_t)v248, (unint64_t)v265);
                                              id v181 = sub_1001E6540(v260, (uint64_t)v179, v180);
                                              sub_100075868((uint64_t)v179, v180);
                                              swift_bridgeObjectRelease();
                                              uint64_t v260 = (uint64_t)v181;
                                              if (!v181)
                                              {
                                                unint64_t v192 = v248;
                                                unint64_t v193 = (unint64_t)v265;
                                                sub_1000758F4((uint64_t)v248, (unint64_t)v265);
                                                sub_10006D0EC((uint64_t)v192, v193);
                                                unint64_t v194 = Logger.logObject.getter();
                                                os_log_type_t v195 = static os_log_type_t.error.getter();
                                                if (os_log_type_enabled(v194, v195))
                                                {
                                                  uint64_t v196 = (uint8_t *)swift_slowAlloc();
                                                  *(void *)&long long v271 = swift_slowAlloc();
                                                  *(_DWORD *)uint64_t v196 = 136315138;
                                                  v266 = v196 + 4;
                                                  uint64_t v197 = v248;
                                                  unint64_t v198 = (unint64_t)v265;
                                                  sub_10006D0EC((uint64_t)v248, (unint64_t)v265);
                                                  uint64_t v199 = Data.description.getter();
                                                  unint64_t v201 = v200;
                                                  sub_100075868((uint64_t)v197, v198);
                                                  uint64_t v268 = sub_100290514(v199, v201, (uint64_t *)&v271);
                                                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                                  swift_bridgeObjectRelease();
                                                  sub_100075868((uint64_t)v197, v198);
                                                  sub_100075868((uint64_t)v197, v198);
                                                  _os_log_impl((void *)&_mh_execute_header, v194, v195, "Could not get endpoint for %s, express list may be invalid", v196, 0xCu);
                                                  swift_arrayDestroy();
                                                  swift_slowDealloc();
                                                  swift_slowDealloc();
                                                }
                                                else
                                                {

                                                  uint64_t v211 = v248;
                                                  unint64_t v212 = (unint64_t)v265;
                                                  sub_100075868((uint64_t)v248, (unint64_t)v265);
                                                  sub_100075868((uint64_t)v211, v212);
                                                }
                                                if (qword_100453830 != -1) {
                                                  swift_once();
                                                }
                                                sub_100254AB0();
                                                sub_1000C7D10();
                                                swift_allocError();
                                                *int64_t v213 = 2;
                                                swift_willThrow();
                                                goto LABEL_158;
                                              }
                                              id v182 = [(id)v260 homeUUIDString];
                                              if (v182)
                                              {
                                                unint64_t v183 = v182;
                                                uint64_t v184 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                                                unint64_t v186 = v185;

                                                if (qword_100453758 != -1) {
                                                  swift_once();
                                                }
                                                if (sub_1001B1300(v184, v186) == 2)
                                                {
                                                  swift_bridgeObjectRetain();
                                                  unint64_t v187 = Logger.logObject.getter();
                                                  os_log_type_t v188 = static os_log_type_t.error.getter();
                                                  if (!os_log_type_enabled(v187, v188))
                                                  {
                                                    swift_bridgeObjectRelease_n();
                                                    goto LABEL_155;
                                                  }
                                                  uint64_t v189 = (uint8_t *)swift_slowAlloc();
                                                  *(void *)&long long v271 = swift_slowAlloc();
                                                  *(_DWORD *)uint64_t v189 = 136315138;
                                                  swift_bridgeObjectRetain();
                                                  uint64_t v268 = sub_100290514(v184, v186, (uint64_t *)&v271);
                                                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                                                  swift_bridgeObjectRelease_n();
                                                  _os_log_impl((void *)&_mh_execute_header, v187, v188, "%s has current status as out of home, not connecting to endpoint", v189, 0xCu);
                                                  swift_arrayDestroy();
                                                  swift_slowDealloc();
LABEL_153:
                                                  swift_slowDealloc();
LABEL_155:

                                                  if (qword_100453830 != -1) {
                                                    swift_once();
                                                  }
                                                  sub_100254AB0();
                                                  sub_1000C7D10();
                                                  swift_allocError();
                                                  *unint64_t v224 = 2;
                                                  swift_willThrow();

LABEL_158:
                                                  sub_10006D144(v249, (unint64_t)v250);
                                                  goto LABEL_159;
                                                }
                                                swift_bridgeObjectRelease();
                                              }
                                              id v202 = [(id)v260 readerIdentifier];
                                              if (v202)
                                              {
                                                unint64_t v203 = v202;
                                                uint64_t v204 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                                                unint64_t v206 = v205;

                                                sub_10023CC58(8, v204, v206, (uint64_t *)&v271);
                                                long long v207 = v271;
                                                v208 = v254;
                                                unint64_t v209 = v259;
                                                sub_10006D0EC((uint64_t)v254, v259);
                                                sub_10006D0EC((uint64_t)v208, v209);
                                                LOBYTE(v206) = sub_100088AE4((uint64_t)v208, v209, v207, *((unint64_t *)&v207 + 1));
                                                sub_10006D144(v207, *((unint64_t *)&v207 + 1));
                                                sub_10006D144((uint64_t)v208, v209);
                                                sub_10006D144((uint64_t)v208, v209);
                                                if (v206)
                                                {
                                                  int v210 = 1;
LABEL_145:
                                                  LODWORD(v246) = v210;
                                                  uint64_t v247 = sub_100230F84((uint64_t)v248, (unint64_t)v265);
                                                  if (v247)
                                                  {
                                                    uint64_t v216 = *(void *)(v247 + 16);
                                                    if (v216)
                                                    {
                                                      swift_beginAccess();
                                                      v217 = (unint64_t *)(v247 + 40);
                                                      while (1)
                                                      {
                                                        uint64_t v218 = *(v217 - 1);
                                                        unint64_t v219 = *v217;
                                                        uint64_t v221 = v269;
                                                        unint64_t v220 = v270;
                                                        sub_10006D0EC(v218, *v217);
                                                        sub_10006D0EC(v221, v220);
                                                        v266 = (uint8_t *)v218;
                                                        LOBYTE(v218) = sub_1001E465C(v221, v220, v218, v219, v249, (unint64_t)v250);
                                                        sub_10006D144(v221, v220);
                                                        if (v218) {
                                                          break;
                                                        }
                                                        v217 += 2;
                                                        sub_10006D144((uint64_t)v266, v219);
                                                        if (!--v216) {
                                                          goto LABEL_150;
                                                        }
                                                      }
                                                      swift_bridgeObjectRelease();
                                                      unint64_t v225 = Logger.logObject.getter();
                                                      os_log_type_t v226 = static os_log_type_t.info.getter();
                                                      if (os_log_type_enabled(v225, v226))
                                                      {
                                                        unint64_t v227 = (uint8_t *)swift_slowAlloc();
                                                        *(_WORD *)unint64_t v227 = 0;
                                                        _os_log_impl((void *)&_mh_execute_header, v225, v226, "Validated GRK from express config", v227, 2u);
                                                        swift_slowDealloc();
                                                      }

                                                      uint64_t v228 = (uint64_t)v264;
                                                      (*(void (**)(char *, uint64_t, uint64_t))(v261 + 16))(v264, v263 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v262);
                                                      id v229 = [(id)v260 endPointType];
                                                      type metadata accessor for LyonPeer(0);
                                                      swift_allocObject();
                                                      unint64_t v230 = v254;
                                                      unint64_t v231 = v259;
                                                      sub_10006D0EC((uint64_t)v254, v259);
                                                      uint64_t v232 = sub_1000893D4(v228, v246, (uint64_t)v229, (uint64_t)v230, v231, (int)v251);
                                                      sub_10006D144((uint64_t)v230, v231);
                                                      swift_retain();
                                                      uint64_t v233 = sub_10011FE64(0xD000000000000012, v258 | 0x8000000000000000);
                                                      uint64_t v234 = (uint64_t *)(v232
                                                                       + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
                                                      uint64_t v235 = *(void *)(v232
                                                                       + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
                                                      unint64_t v236 = *(void *)(v232
                                                                       + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier
                                                                       + 8);
                                                      *uint64_t v234 = v233;
                                                      v234[1] = v237;
                                                      sub_100075868(v235, v236);
                                                      swift_release();
                                                      unint64_t v238 = (NSObject **)(v232
                                                                         + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
                                                      uint64_t v239 = *(void *)(v232
                                                                       + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
                                                      unint64_t v240 = *(void *)(v232
                                                                       + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier
                                                                       + 8);
                                                      unint64_t v241 = v248;
                                                      unint64_t v242 = (unint64_t)v265;
                                                      *unint64_t v238 = v248;
                                                      v238[1] = v242;
                                                      sub_1000758F4((uint64_t)v241, v242);
                                                      sub_100075868(v239, v240);
                                                      *(unsigned char *)(v232 + OBJC_IVAR____TtC10seserviced4Peer_type) = 3;
                                                      if (qword_1004536B0 != -1) {
                                                        swift_once();
                                                      }
                                                      sub_1000D3EDC(v232);

                                                      sub_10006D144(v249, (unint64_t)v250);
                                                      sub_10006D144((uint64_t)v266, v219);
                                                      swift_release();
LABEL_159:
                                                      sub_100075868((uint64_t)v248, (unint64_t)v265);
                                                      goto LABEL_122;
                                                    }
LABEL_150:
                                                    swift_bridgeObjectRelease();
                                                  }
                                                  unint64_t v187 = Logger.logObject.getter();
                                                  os_log_type_t v222 = static os_log_type_t.error.getter();
                                                  if (!os_log_type_enabled(v187, v222)) {
                                                    goto LABEL_155;
                                                  }
                                                  unint64_t v223 = (uint8_t *)swift_slowAlloc();
                                                  *(_WORD *)unint64_t v223 = 0;
                                                  _os_log_impl((void *)&_mh_execute_header, v187, v222, "Could not validate GRK, not connecting to peripheral", v223, 2u);
                                                  goto LABEL_153;
                                                }
                                              }
                                              else
                                              {
                                                v214 = v254;
                                                unint64_t v215 = v259;
                                                sub_10006D0EC((uint64_t)v254, v259);
                                                sub_100075868((uint64_t)v214, v215);
                                                sub_100075868(0, 0xF000000000000000);
                                              }
                                              int v210 = 2;
                                              goto LABEL_145;
                                            }
LABEL_172:
                                            swift_once();
                                            goto LABEL_113;
                                          }
LABEL_171:
                                          __break(1u);
                                          goto LABEL_172;
                                        }
                                      }
                                      else
                                      {
                                        __break(1u);
                                      }
                                      __break(1u);
                                      goto LABEL_171;
                                  }
                                }
                              }

                              swift_bridgeObjectRelease();
                            }
                            swift_bridgeObjectRelease();
LABEL_76:
                            uint64_t v93 = Logger.logObject.getter();
                            os_log_type_t v94 = static os_log_type_t.error.getter();
                            if (os_log_type_enabled(v93, v94))
                            {
                              uint64_t v95 = (uint8_t *)swift_slowAlloc();
                              *(_WORD *)uint64_t v95 = 0;
                              _os_log_impl((void *)&_mh_execute_header, v93, v94, "Failed to retrieve valid service data", v95, 2u);
                              swift_slowDealloc();
                            }

                            if (qword_100453830 != -1) {
                              swift_once();
                            }
                            sub_100254AB0();
                            sub_1000C7D10();
                            swift_allocError();
                            *os_log_type_t v96 = 2;
                            swift_willThrow();
                            sub_10006D144(v63, v23);
                            return;
                          }
LABEL_73:
                          swift_bridgeObjectRelease();
                          sub_1000AE778((uint64_t)&v271);
                          goto LABEL_76;
                        }
LABEL_53:
                        swift_bridgeObjectRelease();
                        sub_10006D144(v63, v23);
                        break;
                      case 2uLL:
                        uint64_t v66 = *(void *)(v269 + 16);
                        uint64_t v65 = *(void *)(v269 + 24);
                        BOOL v67 = __OFSUB__(v65, v66);
                        uint64_t v64 = v65 - v66;
                        if (!v67) {
                          goto LABEL_50;
                        }
                        goto LABEL_131;
                      case 3uLL:
                        goto LABEL_53;
                      default:
                        uint64_t v64 = BYTE6(v270);
                        goto LABEL_50;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                  }
LABEL_54:
                  uint64_t v59 = Logger.logObject.getter();
                  os_log_type_t v60 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v59, v60))
                  {
                    uint64_t v61 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)uint64_t v61 = 0;
                    uint64_t v62 = "Failed to retrieve valid AdvA";
                    goto LABEL_56;
                  }
                  goto LABEL_57;
                }
              }
              else
              {
                long long v271 = 0u;
                long long v272 = 0u;
              }
              swift_bridgeObjectRelease();
              sub_1000AE778((uint64_t)&v271);
              goto LABEL_54;
            }
LABEL_37:
            swift_bridgeObjectRelease();
            uint64_t v59 = Logger.logObject.getter();
            os_log_type_t v60 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v59, v60))
            {
              uint64_t v61 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v61 = 0;
              uint64_t v62 = "No valid endpoints found";
LABEL_56:
              _os_log_impl((void *)&_mh_execute_header, v59, v60, v62, v61, 2u);
              swift_slowDealloc();
            }
LABEL_57:

            if (qword_100453830 != -1) {
              swift_once();
            }
            sub_100254AB0();
            sub_1000C7D10();
            swift_allocError();
            char v58 = 2;
LABEL_34:
            *uint64_t v57 = v58;
            swift_willThrow();
            return;
          }
          swift_bridgeObjectRelease();
          goto LABEL_37;
        }
LABEL_31:
        uint64_t v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Lyon received connection not connectable", v56, 2u);
          swift_slowDealloc();
        }

        sub_1000C7D10();
        swift_allocError();
        char v58 = 3;
        goto LABEL_34;
      }
    }
    else
    {
      long long v271 = 0u;
      long long v272 = 0u;
    }
    sub_1000AE778((uint64_t)&v271);
    goto LABEL_31;
  }
  long long v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    long long v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "LyonBLE is not running", v34, 2u);
    swift_slowDealloc();
  }
}

uint8_t *sub_1001E21FC(uint64_t a1, __objc2_class **a2)
{
  uint64_t v5 = v3;
  uint64_t v6 = v2;
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (unint64_t *)((char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  *uint64_t v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t v17 = *(void (**)(void *, uint64_t))(v10 + 8);
  uint64_t v16 = (uint8_t *)(v10 + 8);
  v17(v13, v9);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_93:
    swift_once();
LABEL_26:
    sub_100254AB0();
    sub_1000C7D10();
    swift_allocError();
    *unint64_t v44 = 2;
    swift_willThrow();
    goto LABEL_49;
  }
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Lyon onCharacteristics", v16, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v6 + 16) != 1)
  {
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "LyonBLE is not running", v29, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    *uint64_t v30 = 0;
    goto LABEL_20;
  }
  if (*a2 != _TtC10seserviced8LyonPeer || !a2)
  {
    swift_retain_n();
    char v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v33 = 136315138;
      uint64_t v107 = v34;
      uint64_t v16 = v33 + 4;
      swift_retain();
      uint64_t v35 = UUID.uuidString.getter();
      unint64_t v37 = v36;
      swift_release();
      uint64_t v106 = sub_100290514(v35, v37, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Missing Lyon peer %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    sub_1000C7D10();
    swift_allocError();
    *uint64_t v38 = 2;
LABEL_20:
    swift_willThrow();
    return v16;
  }
  if (!*(void *)(a1 + 16))
  {
    swift_retain();
LABEL_22:
    swift_bridgeObjectRetain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      unint64_t v41 = (uint8_t *)swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      *(_DWORD *)unint64_t v41 = 136315138;
      uint64_t v105 = v41 + 4;
      type metadata accessor for UUID();
      sub_1001E757C((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v42 = Dictionary.description.getter();
      uint64_t v16 = v43;
      swift_bridgeObjectRelease();
      uint64_t v106 = sub_100290514(v42, (unint64_t)v16, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "PSMCharacteristicSupportedUwbProtocol not found %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if (qword_100453830 == -1) {
      goto LABEL_26;
    }
    goto LABEL_93;
  }
  uint64_t v20 = v6 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol;
  swift_retain();
  uint64_t v21 = a1;
  unint64_t v22 = sub_1002C09FC(v20);
  if ((v23 & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v24 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v22);
  uint64_t v26 = *v24;
  unint64_t v25 = v24[1];
  uint64_t v16 = (uint8_t *)(v25 >> 62);
  switch(v25 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v26), v26))
      {
        __break(1u);
LABEL_99:
        __break(1u);
        goto LABEL_100;
      }
      uint64_t v21 = HIDWORD(v26) - (int)v26;
LABEL_30:
      sub_10006D0EC(v26, v25);
LABEL_31:
      if (v21 <= 4)
      {
LABEL_32:
        sub_10006D0EC(v26, v25);
        uint64_t v47 = Logger.logObject.getter();
        uint64_t v6 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v47, (os_log_type_t)v6))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 134217984;
          uint64_t v49 = v48;
          uint64_t v50 = 0;
          switch((int)v16)
          {
            case 0:
              uint64_t v50 = BYTE6(v25);
              goto LABEL_44;
            case 1:
              LODWORD(v50) = HIDWORD(v26) - v26;
              if (!__OFSUB__(HIDWORD(v26), v26))
              {
                uint64_t v50 = (int)v50;
LABEL_44:
                uint64_t v107 = v50;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                sub_10006D144(v26, v25);
                _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v6, "PSMCharacteristicSupportedUwbProtocol has invalid length %ld", v49, 0xCu);
                swift_slowDealloc();

                goto LABEL_45;
              }
              __break(1u);
LABEL_103:
              __break(1u);
              break;
            case 2:
              uint64_t v54 = *(void *)(v26 + 16);
              uint64_t v53 = *(void *)(v26 + 24);
              BOOL v55 = __OFSUB__(v53, v54);
              uint64_t v50 = v53 - v54;
              if (!v55) {
                goto LABEL_44;
              }
              goto LABEL_103;
            case 3:
              goto LABEL_44;
            default:
              JUMPOUT(0);
          }
          goto LABEL_104;
        }

        sub_10006D144(v26, v25);
LABEL_45:
        if (qword_100453830 == -1) {
          goto LABEL_46;
        }
        goto LABEL_97;
      }
      unint64_t v98 = v25 >> 62;
      sub_10006D0EC(v26, v25);
      uint64_t v51 = sub_10007D08C(v26, v25, 0, 0, 0);
      if (v5)
      {
LABEL_47:
        uint64_t v57 = v26;
        unint64_t v58 = v25;
LABEL_48:
        sub_10006D144(v57, v58);
        goto LABEL_49;
      }
      uint64_t v16 = (uint8_t *)v51;
      if (v98)
      {
        if (v98 == 1)
        {
          LODWORD(v52) = HIDWORD(v26) - v26;
          if (!__OFSUB__(HIDWORD(v26), v26))
          {
            uint64_t v52 = (int)v52;
            goto LABEL_53;
          }
          __break(1u);
LABEL_106:
          __break(1u);
        }
        uint64_t v61 = *(void *)(v26 + 16);
        uint64_t v60 = *(void *)(v26 + 24);
        BOOL v55 = __OFSUB__(v60, v61);
        uint64_t v52 = v60 - v61;
        if (v55) {
          goto LABEL_106;
        }
      }
      else
      {
        uint64_t v52 = BYTE6(v25);
      }
LABEL_53:
      uint64_t v21 = v52 - 3;
      if (__OFSUB__(v52, 3))
      {
LABEL_100:
        __break(1u);
LABEL_101:
        swift_once();
        goto LABEL_58;
      }
      if (v21 >= 0) {
        uint64_t v4 = v52 - 3;
      }
      else {
        uint64_t v4 = v52 - 2;
      }
      if (qword_1004537C8 != -1) {
        goto LABEL_101;
      }
LABEL_58:
      uint64_t v103 = qword_1004688B0;
      uint64_t v62 = *(void *)(qword_1004688B0 + 16);
      uint64_t v105 = (uint8_t *)v26;
      uint64_t v102 = v62;
      unint64_t v104 = v25;
      if (!v62 || v21 < 2)
      {
LABEL_75:
        if ((*((unsigned char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion + 2) & 1) == 0)
        {
          LODWORD(v103) = *(unsigned __int16 *)((char *)a2
                                              + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion);
          unint64_t v25 = v104;
          uint64_t v26 = (uint64_t)v105;
          switch((int)v98)
          {
            case 1:
              if (__OFSUB__(HIDWORD(v105), v105))
              {
                __break(1u);
LABEL_110:
                __break(1u);
              }
              else
              {
                uint64_t v77 = HIDWORD(v105) - (int)v105;
LABEL_89:
                if (v77 >= 3)
                {
                  swift_retain();
                  uint64_t v91 = Data.subdata(in:)();
                  unint64_t v93 = v92;
                  sub_100267968(v91, v92);
                  sub_10006D144(v91, v93);
                  swift_release();
                  if (qword_1004536B0 == -1)
                  {
LABEL_91:
                    uint64_t v94 = v6 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion;
                    LOWORD(v107) = __rev16(v103);
                    uint64_t v95 = sub_1000806B4((uint64_t)&v107, (uint64_t)&v107 + 2);
                    unint64_t v97 = v96;
                    sub_1000D6C3C(v94, v95, v96, (uint64_t)a2 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
                    sub_10006D144(v26, v25);
                    sub_10006D144((uint64_t)v95, v97);
                    swift_release();
                    return v16;
                  }
LABEL_104:
                  swift_once();
                  goto LABEL_91;
                }
              }
LABEL_111:
              __break(1u);
              JUMPOUT(0x1001E3120);
            case 2:
              uint64_t v90 = *((void *)v105 + 2);
              uint64_t v89 = *((void *)v105 + 3);
              uint64_t v77 = v89 - v90;
              if (!__OFSUB__(v89, v90)) {
                goto LABEL_89;
              }
              goto LABEL_110;
            case 3:
              goto LABEL_111;
            default:
              uint64_t v77 = BYTE6(v104);
              goto LABEL_89;
          }
        }
        int v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        BOOL v72 = os_log_type_enabled(v70, v71);
        unint64_t v73 = v104;
        if (v72)
        {
          unint64_t v74 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v74 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "No matching protocol version found", v74, 2u);
          swift_slowDealloc();
        }

        uint64_t v75 = (uint64_t)v105;
        sub_10006D0EC((uint64_t)v105, v73);
        __int16 v76 = sub_10007D08C(v75, v73, 3, 0, 0);
        if (v5)
        {
          uint64_t v57 = v75;
LABEL_85:
          unint64_t v58 = v73;
          goto LABEL_48;
        }
        __int16 v78 = v76;
        uint64_t v103 = sub_10011FE64(0xD000000000000012, 0x80000001003B1A40);
        unint64_t v80 = v79;
        uint64_t v81 = *(uint64_t *)((char *)a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        uint64_t v16 = *(uint8_t **)((char *)a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        sub_10006C51C(&qword_1004555D0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1003782A0;
        *(void *)(inited + 32) = 0xD000000000000020;
        *(void *)(inited + 40) = 0x80000001003B1A60;
        LOWORD(v107) = v78;
        sub_1000758F4(v81, (unint64_t)v16);
        *(void *)(inited + 48) = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(inited + 56) = v83;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 80) = 0xD000000000000020;
        *(void *)(inited + 88) = 0x80000001003B1AE0;
        if (*(void *)(qword_1004688B0 + 16))
        {
          LOWORD(v107) = *(_WORD *)(qword_1004688B0 + 32);
          uint64_t v84 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(inited + 120) = &type metadata for String;
          *(void *)(inited + 96) = v84;
          *(void *)(inited + 104) = v85;
          unint64_t v86 = sub_1001DB970(inited, (uint64_t *)&unk_100455760, &qword_10045B740, (uint64_t (*)(uint64_t *, unint64_t))sub_1000761D0);
          uint64_t v87 = v103;
          sub_1002B9140(0xD000000000000042, 0x80000001003B7220, v103, v80, v81, (unint64_t)v16, v86);
          swift_bridgeObjectRelease();
          sub_100075868(v81, (unint64_t)v16);
          sub_100075868(v87, v80);
          if (qword_100453830 == -1)
          {
LABEL_84:
            sub_100254AB0();
            sub_1000C7D10();
            swift_allocError();
            *char v88 = 2;
            swift_willThrow();
            uint64_t v57 = (uint64_t)v105;
            goto LABEL_85;
          }
        }
        else
        {
          __break(1u);
        }
        swift_once();
        goto LABEL_84;
      }
      uint64_t v63 = 0;
      uint64_t v26 = 0;
      uint64_t v99 = v4 >> 1;
      uint64_t v100 = v103 + 32;
      unint64_t v101 = a2;
      unint64_t v64 = v104;
      unint64_t v25 = (unint64_t)v105;
      while (1)
      {
        if (v63 + 0x4000000000000000 < 0)
        {
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          swift_once();
LABEL_46:
          sub_100254AB0();
          sub_1000C7D10();
          swift_allocError();
          *uint64_t v56 = 2;
          swift_willThrow();
          goto LABEL_47;
        }
        uint64_t v65 = 2 * v63 + 3;
        if (__OFADD__(2 * v63, 3)) {
          goto LABEL_95;
        }
        uint64_t v66 = v63;
        sub_10006D0EC(v25, v64);
        unsigned __int16 v67 = sub_10007D08C(v25, v64, v65, 0, 0);
        if (v5) {
          break;
        }
        if ((unint64_t)v26 >= *(void *)(v103 + 16)) {
          goto LABEL_96;
        }
        unsigned int v68 = *(unsigned __int16 *)(v100 + 2 * v26);
        if (v68 <= v67)
        {
          if (v68 >= v67)
          {
            a2 = v101;
            os_log_type_t v69 = (char *)v101 + OBJC_IVAR____TtC10seserviced8LyonPeer_selectedProtocolVersion;
            *(_WORD *)os_log_type_t v69 = v67;
            v69[2] = 0;
            goto LABEL_75;
          }
          uint64_t v63 = v66 + 1;
        }
        else
        {
          ++v26;
          uint64_t v63 = v66;
        }
        if (v26 >= v102)
        {
          a2 = v101;
          goto LABEL_75;
        }
        a2 = v101;
        if (v63 >= v99) {
          goto LABEL_75;
        }
      }
      sub_10006D144((uint64_t)v105, v104);
LABEL_49:
      swift_release();
      return v16;
    case 2uLL:
      uint64_t v46 = *(void *)(v26 + 16);
      uint64_t v45 = *(void *)(v26 + 24);
      uint64_t v21 = v45 - v46;
      if (!__OFSUB__(v45, v46)) {
        goto LABEL_30;
      }
      goto LABEL_99;
    case 3uLL:
      goto LABEL_32;
    default:
      uint64_t v21 = BYTE6(v25);
      goto LABEL_31;
  }
}

void sub_1001E3150(uint64_t a1, __objc2_class **a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (void *)((char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    uint64_t v26 = swift_once();
LABEL_15:
    uint64_t v35 = (uint64_t)a2;
    uint64_t v28 = __chkstk_darwin(v26, v27);
    v34[-2] = v29;
    v34[-1] = &v35;
    __chkstk_darwin(v28, v30);
    v34[-2] = sub_1001E7410;
    v34[-1] = v31;
    os_log_type_t v33 = v32 + 4;
    os_unfair_lock_lock(v32 + 4);
    sub_1001E77A0();
    os_unfair_lock_unlock(v33);
    if (qword_100453668 != -1) {
      swift_once();
    }
    sub_100086BC0((uint64_t)a2);
    swift_release();
    return;
  }
  int v12 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v13 = Logger.logObject.getter();
  if (v12 == 1)
  {
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Lyon onChannelOpen", v15, 2u);
      swift_slowDealloc();
    }

    if (a1)
    {
      swift_retain_n();
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        uint64_t v35 = v19;
        swift_retain();
        uint64_t v20 = UUID.uuidString.getter();
        unint64_t v22 = v21;
        swift_release();
        v34[1] = sub_100290514(v20, v22, &v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error during channel open attempt to  %s", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_release_n();
      }

      return;
    }
    if (*a2 != _TtC10seserviced8LyonPeer) {
      return;
    }
    uint64_t v25 = qword_100453910;
    uint64_t v26 = swift_retain();
    if (v25 == -1) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v23, "LyonBLE is not running", v24, 2u);
    swift_slowDealloc();
  }
}

void sub_1001E3624(uint64_t a1, unint64_t a2, __objc2_class **a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  int v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *int v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (*(unsigned char *)(a4 + 16) == 1)
  {
    if (*a3 == _TtC10seserviced8LyonPeer)
    {
      uint64_t v15 = qword_100453668;
      swift_retain();
      if (v15 == -1)
      {
LABEL_7:
        sub_10007F8AC(a1, a2, a3);
        swift_release();
        return;
      }
LABEL_13:
      swift_once();
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "LyonBLE is not running", v18, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1001E388C(__objc2_class **a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v8 - 8);
  uint64_t v43 = v8;
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for DispatchTime();
  uint64_t v41 = *(void *)(v46 - 8);
  uint64_t v13 = __chkstk_darwin(v46, v12);
  uint64_t v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v40 - v17;
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  os_log_type_t v23 = (void *)((char *)v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_100468A38;
  void *v23 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v19);
  id v25 = (id)v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v23, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once();
LABEL_7:
    sub_100087208((uint64_t)a1);
    if (qword_100453910 != -1) {
      uint64_t v27 = swift_once();
    }
    aBlock[0] = a1;
    uint64_t v29 = __chkstk_darwin(v27, v28);
    v40[-2] = v30;
    v40[-1] = aBlock;
    __chkstk_darwin(v29, v31);
    v40[-2] = sub_1001E72F8;
    v40[-1] = v32;
    uint64_t v34 = v33 + 4;
    os_unfair_lock_lock(v33 + 4);
    sub_1001E7318();
    os_unfair_lock_unlock(v34);
    v40[1] = qword_100468A38;
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v41 = *(void *)(v41 + 8);
    ((void (*)(char *, uint64_t))v41)(v15, v46);
    aBlock[4] = sub_1001E7340;
    aBlock[5] = v2;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_10007C0C4;
    uint64_t aBlock[3] = &unk_100415318;
    uint64_t v35 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v47 = _swiftEmptyArrayStorage;
    sub_1001E757C((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10006C51C((uint64_t *)&unk_100455710);
    sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
    uint64_t v36 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v35);
    swift_release();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v7, v36);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
    ((void (*)(char *, uint64_t))v41)(v18, v46);
    swift_release();
    return;
  }
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    if (*a1 != _TtC10seserviced8LyonPeer) {
      return;
    }
    uint64_t v26 = qword_100453668;
    swift_retain();
    if (v26 == -1) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "LyonBLE is not running", v39, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1001E3EFC(uint64_t a1, uint64_t a2, uint64_t a3, __objc2_class **a4)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *uint64_t v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_6;
  }
  if (*a4 != _TtC10seserviced8LyonPeer) {
    return result;
  }
  uint64_t v16 = qword_1004536A0;
  swift_retain();
  if (v16 != -1) {
    goto LABEL_9;
  }
LABEL_6:
  sub_1000BD114(a1, a2, a3, (uint64_t)a4);
  return swift_release();
}

void sub_1001E40E0(char a1, __objc2_class **a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_100468A38;
  *uint64_t v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = (id)v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  if (*(unsigned char *)(v2 + 16) == 1)
  {
    if (*a2 != _TtC10seserviced8LyonPeer) {
      return;
    }
    int v12 = a1 & 1;
    swift_retain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      LOBYTE(v22) = v12;
      uint64_t v16 = String.init<A>(describing:)();
      uint64_t v22 = sub_100290514(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Lyon received RSSI update: %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (v12)
    {
      *((unsigned char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 0;
      if (qword_1004536A0 != -1) {
        swift_once();
      }
      sub_1000C07BC((uint64_t)a2);
      goto LABEL_17;
    }
    *((unsigned char *)a2 + OBJC_IVAR____TtC10seserviced8LyonPeer_rangingIntentRequested) = 1;
    if (qword_1004536A0 == -1)
    {
LABEL_10:
      sub_1000B9948((uint64_t)a2);
LABEL_17:
      swift_release();
      return;
    }
LABEL_20:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "LyonBLE is not running", v20, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1001E465C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  v12.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v14 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x1001E4E68);
      }
      uint64_t v14 = HIDWORD(a1) - (int)a1;
LABEL_6:
      Class isa = v13.super.isa;
      id v17 = [objc_allocWithZone((Class)NSMutableData) initWithLength:v14];
      if (!v17) {
        goto LABEL_21;
      }
      id v61 = v17;
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a5, a6);
      sub_10006D0EC(a1, a2);
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(a5, a6);
      sub_10006D0EC(a1, a2);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t type = static os_log_type_t.debug.getter();
      unint64_t v57 = a6;
      uint64_t v59 = a5;
      if (os_log_type_enabled(v18, type))
      {
        uint64_t v56 = v12.super.isa;
        uint64_t v19 = swift_slowAlloc();
        v64[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v19 = 136643331;
        sub_10023CDF4(a3, a4);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
        log = v18;
        unint64_t v22 = v21;
        swift_bridgeObjectRelease();
        sub_100290514(v20, v22, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a3, a4);
        sub_10006D144(a3, a4);
        *(_WORD *)(v19 + 12) = 2081;
        sub_10023CDF4(a5, a6);
        uint64_t v23 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v25 = v24;
        swift_bridgeObjectRelease();
        sub_100290514(v23, v25, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a5, a6);
        sub_10006D144(a5, a6);
        *(_WORD *)(v19 + 22) = 2081;
        sub_10023CDF4(a1, a2);
        uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v28 = v27;
        swift_bridgeObjectRelease();
        sub_100290514(v26, v28, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Validating GRK with grk:%{sensitive}s, given Dynamic Tag:%{private}s, plaintextData:%{private}s", (uint8_t *)v19, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        v12.super.Class isa = v56;
        swift_slowDealloc();
      }
      else
      {

        sub_10006D144(a3, a4);
        sub_10006D144(a3, a4);
        sub_10006D144(a5, a6);
        sub_10006D144(a5, a6);
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
      }
      uint64_t v29 = isa;
      id v30 = [(objc_class *)v29 bytes];
      uint64_t v63 = v29;
      id v31 = [(objc_class *)v29 length];
      uint64_t v32 = v12.super.isa;
      id v33 = [(objc_class *)v32 bytes];
      id v34 = [(objc_class *)v32 length];
      uint64_t v35 = (objc_class *)v61;
      if (CCCrypt(0, 0, 0, v30, (size_t)v31, 0, v33, (size_t)v34, [(objc_class *)v35 mutableBytes], (size_t)[(objc_class *)v35 length], 0))
      {
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          os_log_type_t v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v38 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "GRK encryption failed", v38, 2u);
          swift_slowDealloc();
        }

        char v39 = 0;
        os_log_type_t v40 = v63;
      }
      else
      {
        uint64_t v41 = v35;
        uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v44 = v43;

        uint64_t v45 = Data.subdata(in:)();
        unint64_t v47 = v46;
        sub_10006D144(v42, v44);
        sub_10006D0EC(v45, v47);
        sub_10006D0EC(v45, v47);
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = (uint8_t *)swift_slowAlloc();
          v64[0] = swift_slowAlloc();
          buf = v50;
          *(_DWORD *)uint64_t v50 = 136315138;
          sub_10023CDF4(v45, v47);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v51 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v53 = v52;
          swift_bridgeObjectRelease();
          sub_100290514(v51, v53, v64);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10006D144(v45, v47);
          sub_10006D144(v45, v47);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Derived dynamic tag: %s", buf, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_10006D144(v45, v47);
          sub_10006D144(v45, v47);
        }
        char v39 = sub_100088AE4(v59, v57, v45, v47);
        sub_10006D144(v45, v47);
        uint64_t v35 = v32;
        uint64_t v32 = v63;
        os_log_type_t v40 = v41;
      }

      return v39 & 1;
    case 2uLL:
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v14 = v15 - v16;
      if (!__OFSUB__(v15, v16)) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v14 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_1001E4E78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17) == 1)
  {
    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000CCF24(*(void *)(a1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID), *(void *)(a1 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonServiceUUID + 8));
    *(unsigned char *)(a1 + 17) = 0;
    sub_1001DEF54();
  }
}

uint64_t sub_1001E4F1C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonPSMCharacteristicSupportedUwbProtocol;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_lyonSelectedProtocolVersion, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100075868(*(void *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask), *(void *)(v0 + OBJC_IVAR____TtC10seserviced7LyonBLE_readerGroupIdentifierMask + 8));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001E507C()
{
  sub_1001E4F1C();

  return swift_deallocClassInstance();
}

uint64_t sub_1001E50D4()
{
  return type metadata accessor for LyonBLE();
}

uint64_t type metadata accessor for LyonBLE()
{
  uint64_t result = qword_100457FE0;
  if (!qword_100457FE0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001E5128()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1001E5240@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_10006D0EC(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x1001E54A4);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10006D144(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      id v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_1001E54B4(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v2 = a2;
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v84 = a1;
  uint64_t v85 = a1 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v86 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  uint64_t v92 = a2 + 56;
  if (!v6) {
    goto LABEL_8;
  }
LABEL_7:
  uint64_t v87 = (v6 - 1) & v6;
  int64_t v88 = v3;
  unint64_t v8 = __clz(__rbit64(v6)) | (v3 << 6);
LABEL_24:
  size_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
  uint64_t v15 = *v13;
  unint64_t v14 = v13[1];
  Hasher.init(_seed:)();
  sub_10006D0EC(v15, v14);
  unint64_t v95 = v14;
  Data.hash(into:)();
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v18 = v16 & ~v17;
  if (((*(void *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
  {
LABEL_140:
    sub_10006D144(v15, v95);
    return 0;
  }
  unint64_t v19 = v14 >> 62;
  uint64_t v20 = ~v17;
  BOOL v21 = __OFSUB__(HIDWORD(v15), v15);
  BOOL v94 = v21;
  uint64_t v93 = ~v17;
  uint64_t v90 = (v15 >> 32) - (int)v15;
  uint64_t v91 = v15 >> 32;
  while (2)
  {
    size_t v22 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v18);
    uint64_t v24 = *v22;
    unint64_t v23 = v22[1];
    uint64_t v25 = 0;
    switch(v23 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v24), v24))
        {
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
          goto LABEL_166;
        }
        uint64_t v25 = HIDWORD(v24) - (int)v24;
LABEL_37:
        sub_10006D0EC(v24, v23);
        break;
      case 2uLL:
        uint64_t v27 = *(void *)(v24 + 16);
        uint64_t v26 = *(void *)(v24 + 24);
        uint64_t v25 = v26 - v27;
        if (!__OFSUB__(v26, v27)) {
          goto LABEL_37;
        }
        goto LABEL_143;
      case 3uLL:
        break;
      default:
        uint64_t v25 = BYTE6(v23);
        break;
    }
    uint64_t v28 = BYTE6(v95);
    switch((int)v19)
    {
      case 1:
        uint64_t v28 = HIDWORD(v15) - (int)v15;
        if (v94) {
          goto LABEL_144;
        }
        goto LABEL_42;
      case 2:
        uint64_t v30 = *(void *)(v15 + 16);
        uint64_t v29 = *(void *)(v15 + 24);
        BOOL v31 = __OFSUB__(v29, v30);
        uint64_t v28 = v29 - v30;
        if (!v31) {
          goto LABEL_42;
        }
        goto LABEL_145;
      case 3:
        if (v25) {
          goto LABEL_30;
        }
        goto LABEL_136;
      default:
LABEL_42:
        if (v25 != v28)
        {
LABEL_30:
          sub_10006D144(v24, v23);
          goto LABEL_31;
        }
        if (v25 >= 1)
        {
          switch(v23 >> 62)
          {
            case 1uLL:
              if ((int)v24 > v24 >> 32) {
                goto LABEL_146;
              }
              uint64_t v36 = __DataStorage._bytes.getter();
              if (v36)
              {
                uint64_t v37 = v36;
                uint64_t v38 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v24, v38)) {
                  goto LABEL_148;
                }
                char v39 = (const void *)(v37 + (int)v24 - v38);
                __DataStorage._length.getter();
                if (!v19)
                {
LABEL_93:
                  *(void *)__s1 = v15;
                  *(_DWORD *)&__s1[8] = v95;
                  *(_WORD *)&__s1[12] = WORD2(v95);
                  if (!v39) {
                    goto LABEL_173;
                  }
                  int v44 = memcmp(v39, __s1, BYTE6(v95));
                  goto LABEL_134;
                }
              }
              else
              {
                char v39 = 0;
                __DataStorage._length.getter();
                if (!v19) {
                  goto LABEL_93;
                }
              }
              if (v19 == 1)
              {
                if (v91 < (int)v15) {
                  goto LABEL_157;
                }
                swift_retain();
                os_log_type_t v40 = (char *)__DataStorage._bytes.getter();
                if (v40)
                {
                  uint64_t v41 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v15, v41)) {
                    goto LABEL_165;
                  }
                  v40 += (int)v15 - v41;
                }
                uint64_t v42 = __DataStorage._length.getter();
                size_t v43 = (v15 >> 32) - (int)v15;
                if (v42 < v90) {
                  size_t v43 = v42;
                }
                if (!v39) {
                  goto LABEL_168;
                }
                if (!v40) {
                  goto LABEL_169;
                }
                int v44 = memcmp(v39, v40, v43);
                sub_10006D144(v15, v95);
              }
              else
              {
                uint64_t v76 = *(void *)(v15 + 16);
                uint64_t v75 = *(void *)(v15 + 24);
                swift_retain();
                swift_retain();
                uint64_t v77 = (char *)__DataStorage._bytes.getter();
                if (v77)
                {
                  uint64_t v78 = __DataStorage._offset.getter();
                  if (__OFSUB__(v76, v78)) {
                    goto LABEL_164;
                  }
                  v77 += v76 - v78;
                }
                BOOL v31 = __OFSUB__(v75, v76);
                int64_t v79 = v75 - v76;
                if (v31) {
                  goto LABEL_158;
                }
                uint64_t v80 = __DataStorage._length.getter();
                if (v80 >= v79) {
                  size_t v81 = v79;
                }
                else {
                  size_t v81 = v80;
                }
                if (!v39) {
                  goto LABEL_179;
                }
                uint64_t v2 = a2;
                if (!v77) {
                  goto LABEL_180;
                }
                int v44 = memcmp(v39, v77, v81);
LABEL_133:
                swift_release();
                swift_release();
              }
LABEL_134:
              sub_10006D144(v24, v23);
              uint64_t v7 = v92;
              uint64_t v20 = v93;
              if (!v44) {
                goto LABEL_137;
              }
              break;
            case 2uLL:
              uint64_t v45 = *(void *)(v24 + 16);
              swift_retain();
              swift_retain();
              unint64_t v46 = (char *)__DataStorage._bytes.getter();
              if (!v46) {
                goto LABEL_69;
              }
              uint64_t v47 = __DataStorage._offset.getter();
              if (__OFSUB__(v45, v47)) {
                goto LABEL_147;
              }
              v46 += v45 - v47;
LABEL_69:
              __DataStorage._length.getter();
              if (v19)
              {
                if (v19 == 1)
                {
                  if (v91 < (int)v15) {
                    goto LABEL_151;
                  }
                  swift_retain();
                  uint64_t v48 = (char *)__DataStorage._bytes.getter();
                  if (v48)
                  {
                    uint64_t v49 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v15, v49)) {
                      goto LABEL_163;
                    }
                    v48 += (int)v15 - v49;
                  }
                  uint64_t v50 = __DataStorage._length.getter();
                  size_t v51 = (v15 >> 32) - (int)v15;
                  if (v50 < v90) {
                    size_t v51 = v50;
                  }
                  if (!v46) {
                    goto LABEL_170;
                  }
                  if (!v48) {
                    goto LABEL_171;
                  }
                  int v44 = memcmp(v46, v48, v51);
                  sub_10006D144(v15, v95);
                }
                else
                {
                  uint64_t v69 = *(void *)(v15 + 16);
                  uint64_t v83 = *(void *)(v15 + 24);
                  swift_retain();
                  swift_retain();
                  int v70 = (char *)__DataStorage._bytes.getter();
                  if (v70)
                  {
                    uint64_t v71 = __DataStorage._offset.getter();
                    if (__OFSUB__(v69, v71)) {
                      goto LABEL_162;
                    }
                    v70 += v69 - v71;
                  }
                  BOOL v31 = __OFSUB__(v83, v69);
                  int64_t v72 = v83 - v69;
                  if (v31) {
                    goto LABEL_156;
                  }
                  uint64_t v73 = __DataStorage._length.getter();
                  if (v73 >= v72) {
                    size_t v74 = v72;
                  }
                  else {
                    size_t v74 = v73;
                  }
                  if (!v46) {
                    goto LABEL_177;
                  }
                  uint64_t v2 = a2;
                  if (!v70) {
                    goto LABEL_178;
                  }
                  int v44 = memcmp(v46, v70, v74);
                  swift_release();
                  swift_release();
                }
              }
              else
              {
                *(void *)__s1 = v15;
                *(_DWORD *)&__s1[8] = v95;
                *(_WORD *)&__s1[12] = WORD2(v95);
                if (!v46) {
                  goto LABEL_176;
                }
                int v44 = memcmp(v46, __s1, BYTE6(v95));
              }
              goto LABEL_133;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v19) {
                goto LABEL_90;
              }
              if (v19 == 1)
              {
                if (v91 < (int)v15) {
                  goto LABEL_150;
                }
                sub_10006D0EC(v15, v95);
                uint64_t v52 = __DataStorage._bytes.getter();
                if (!v52) {
                  goto LABEL_172;
                }
                uint64_t v33 = v52;
                uint64_t v53 = __DataStorage._offset.getter();
                uint64_t v35 = (int)v15 - v53;
                if (__OFSUB__((int)v15, v53)) {
                  goto LABEL_155;
                }
LABEL_85:
                uint64_t v54 = __DataStorage._length.getter();
                if (v54 >= v90) {
                  size_t v55 = (v15 >> 32) - (int)v15;
                }
                else {
                  size_t v55 = v54;
                }
                int v56 = memcmp(__s1, (const void *)(v33 + v35), v55);
                sub_10006D144(v15, v95);
                sub_10006D144(v24, v23);
                uint64_t v2 = a2;
                if (!v56) {
                  goto LABEL_137;
                }
              }
              else
              {
                uint64_t v64 = *(void *)(v15 + 16);
                uint64_t v65 = *(void *)(v15 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v66 = __DataStorage._offset.getter();
                  if (__OFSUB__(v64, v66)) {
                    goto LABEL_161;
                  }
                  v60 += v64 - v66;
                }
                BOOL v31 = __OFSUB__(v65, v64);
                int64_t v62 = v65 - v64;
                if (v31) {
                  goto LABEL_153;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (!v60) {
                  goto LABEL_175;
                }
LABEL_106:
                if (v63 >= v62) {
                  size_t v67 = v62;
                }
                else {
                  size_t v67 = v63;
                }
                int v68 = memcmp(__s1, v60, v67);
                swift_release();
                swift_release();
                sub_10006D144(v24, v23);
                uint64_t v7 = v92;
                uint64_t v20 = v93;
                if (!v68) {
                  goto LABEL_137;
                }
              }
              break;
            default:
              *(void *)__s1 = v24;
              *(_WORD *)&__s1[8] = v23;
              __s1[10] = BYTE2(v23);
              __s1[11] = BYTE3(v23);
              __s1[12] = BYTE4(v23);
              __s1[13] = BYTE5(v23);
              if (!v19)
              {
LABEL_90:
                uint64_t __s2 = v15;
                int v97 = v95;
                __int16 v98 = WORD2(v95);
                int v57 = memcmp(__s1, &__s2, BYTE6(v95));
                sub_10006D144(v24, v23);
                if (!v57) {
                  goto LABEL_137;
                }
                break;
              }
              if (v19 == 1)
              {
                if (v91 < (int)v15) {
                  goto LABEL_149;
                }
                sub_10006D0EC(v15, v95);
                uint64_t v32 = __DataStorage._bytes.getter();
                if (!v32)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_168:
                  __break(1u);
LABEL_169:
                  __break(1u);
LABEL_170:
                  __break(1u);
LABEL_171:
                  __break(1u);
LABEL_172:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_173:
                  __break(1u);
LABEL_174:
                  __break(1u);
LABEL_175:
                  __break(1u);
LABEL_176:
                  __break(1u);
LABEL_177:
                  __break(1u);
LABEL_178:
                  __break(1u);
LABEL_179:
                  __break(1u);
LABEL_180:
                  __break(1u);
                  JUMPOUT(0x1001E5FB4);
                }
                uint64_t v33 = v32;
                uint64_t v34 = __DataStorage._offset.getter();
                uint64_t v35 = (int)v15 - v34;
                if (__OFSUB__((int)v15, v34)) {
                  goto LABEL_154;
                }
                goto LABEL_85;
              }
              uint64_t v58 = *(void *)(v15 + 16);
              uint64_t v59 = *(void *)(v15 + 24);
              swift_retain();
              swift_retain();
              uint64_t v60 = (char *)__DataStorage._bytes.getter();
              if (v60)
              {
                uint64_t v61 = __DataStorage._offset.getter();
                if (__OFSUB__(v58, v61)) {
                  goto LABEL_160;
                }
                v60 += v58 - v61;
              }
              BOOL v31 = __OFSUB__(v59, v58);
              int64_t v62 = v59 - v58;
              if (v31) {
                goto LABEL_152;
              }
              uint64_t v63 = __DataStorage._length.getter();
              if (!v60) {
                goto LABEL_174;
              }
              goto LABEL_106;
          }
LABEL_31:
          unint64_t v18 = (v18 + 1) & v20;
          if (((*(void *)(v7 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
            goto LABEL_140;
          }
          continue;
        }
LABEL_136:
        sub_10006D144(v24, v23);
LABEL_137:
        sub_10006D144(v15, v95);
        a1 = v84;
        unint64_t v6 = v87;
        int64_t v3 = v88;
        if (v87) {
          goto LABEL_7;
        }
LABEL_8:
        int64_t v9 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_159;
        }
        if (v9 < v86)
        {
          unint64_t v10 = *(void *)(v85 + 8 * v9);
          int64_t v11 = v3 + 1;
          if (v10) {
            goto LABEL_23;
          }
          int64_t v11 = v9 + 1;
          if (v9 + 1 < v86)
          {
            unint64_t v10 = *(void *)(v85 + 8 * v11);
            if (v10) {
              goto LABEL_23;
            }
            int64_t v11 = v9 + 2;
            if (v9 + 2 < v86)
            {
              unint64_t v10 = *(void *)(v85 + 8 * v11);
              if (v10) {
                goto LABEL_23;
              }
              int64_t v11 = v9 + 3;
              if (v9 + 3 < v86)
              {
                unint64_t v10 = *(void *)(v85 + 8 * v11);
                if (v10) {
                  goto LABEL_23;
                }
                int64_t v12 = v9 + 4;
                if (v12 < v86)
                {
                  unint64_t v10 = *(void *)(v85 + 8 * v12);
                  if (v10)
                  {
                    int64_t v11 = v12;
LABEL_23:
                    uint64_t v87 = (v10 - 1) & v10;
                    int64_t v88 = v11;
                    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
                    goto LABEL_24;
                  }
                  while (1)
                  {
                    int64_t v11 = v12 + 1;
                    if (__OFADD__(v12, 1)) {
                      break;
                    }
                    if (v11 >= v86) {
                      return 1;
                    }
                    unint64_t v10 = *(void *)(v85 + 8 * v11);
                    ++v12;
                    if (v10) {
                      goto LABEL_23;
                    }
                  }
LABEL_166:
                  __break(1u);
                }
              }
            }
          }
        }
        return 1;
    }
  }
}

uint64_t sub_1001E5FE4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1001E600C(int *a1, int a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }

  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_1001E60A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      return Data._Representation.replaceSubrange(_:with:count:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E6148@<X0>(uint64_t (*a1)(uint64_t *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100087F94(a1, a2, a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_1001E6174(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v12[3] = &type metadata for Data;
  v12[4] = &protocol witness table for Data;
  v12[0] = a3;
  v12[1] = a4;
  uint64_t v6 = sub_100075908(v12, (uint64_t)&type metadata for Data);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if (v7 >> 32 < (int)v7) {
        __break(1u);
      }
      sub_10006D0EC(a3, a4);
      sub_10006D0EC(v7, v8);
      sub_1001E60A0((int)v7, v7 >> 32);
      sub_10006D144(v7, v8);
      break;
    case 2uLL:
      uint64_t v9 = *(void *)(v7 + 16);
      uint64_t v10 = *(void *)(v7 + 24);
      sub_10006D0EC(a3, a4);
      swift_retain();
      swift_retain();
      sub_1001E60A0(v9, v10);
      swift_release();
      swift_release();
      break;
    default:
      sub_10006D0EC(a3, a4);
      Data._Representation.replaceSubrange(_:with:count:)();
      break;
  }
  return sub_10007594C((uint64_t)v12);
}

uint64_t sub_1001E63C0(uint64_t a1, uint64_t *a2)
{
  return sub_1001DCDE8(a1, *a2);
}

uint64_t sub_1001E63DC(uint64_t a1)
{
  return sub_1001DD8E0(a1);
}

uint64_t sub_1001E63F8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v9 = *a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(result + 8);
    uint64_t v8 = a3(0);
    return v7(&v9, v8, ObjectType, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001E649C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v9 = *a2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(result + 24);
    uint64_t v8 = a3(0);
    return v7(&v9, v8, ObjectType, v6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1001E6540(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10012AE84();
    sub_1001E757C((unint64_t *)&qword_1004556F0, (void (*)(uint64_t))sub_10012AE84);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = __s1[2];
    uint64_t v52 = __s1[3];
    uint64_t v6 = __s1[4];
    int64_t v7 = __s1[5];
    unint64_t v8 = __s1[6];
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v52 = a1 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v7 = 0;
  }
  uint64_t v45 = v6;
  int64_t v51 = (unint64_t)(v6 + 64) >> 6;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v47 = v12;
  uint64_t v48 = v5;
  while (2)
  {
    int64_t v13 = v7;
    if (v5 < 0)
    {
      uint64_t v16 = __CocoaSet.Iterator.next()();
      if (!v16)
      {
        id v17 = 0;
        goto LABEL_73;
      }
      uint64_t v56 = v16;
      sub_10012AE84();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v17 = (id)__s1[0];
      swift_unknownObjectRelease();
      uint64_t v14 = v8;
      if (!v17) {
        goto LABEL_73;
      }
    }
    else
    {
      if (v8)
      {
        uint64_t v14 = (v8 - 1) & v8;
        unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
      }
      else
      {
        ++v7;
        if (__OFADD__(v13, 1)) {
          goto LABEL_78;
        }
        if (v7 >= v51)
        {
LABEL_71:
          id v17 = 0;
          goto LABEL_73;
        }
        unint64_t v18 = *(void *)(v52 + 8 * v7);
        if (!v18)
        {
          int64_t v19 = v13 + 2;
          if (v13 + 2 >= v51) {
            goto LABEL_71;
          }
          unint64_t v18 = *(void *)(v52 + 8 * v19);
          if (v18) {
            goto LABEL_29;
          }
          int64_t v19 = v13 + 3;
          if (v13 + 3 >= v51) {
            goto LABEL_71;
          }
          unint64_t v18 = *(void *)(v52 + 8 * v19);
          if (v18) {
            goto LABEL_29;
          }
          int64_t v19 = v13 + 4;
          if (v13 + 4 >= v51) {
            goto LABEL_71;
          }
          unint64_t v18 = *(void *)(v52 + 8 * v19);
          if (v18)
          {
LABEL_29:
            int64_t v7 = v19;
          }
          else
          {
            int64_t v7 = v13 + 5;
            if (v13 + 5 >= v51) {
              goto LABEL_71;
            }
            unint64_t v18 = *(void *)(v52 + 8 * v7);
            if (!v18)
            {
              int64_t v43 = v13 + 6;
              do
              {
                if (v51 == v43) {
                  goto LABEL_71;
                }
                unint64_t v18 = *(void *)(v52 + 8 * v43++);
              }
              while (!v18);
              int64_t v7 = v43 - 1;
            }
          }
        }
        uint64_t v14 = (v18 - 1) & v18;
        unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      id v17 = *(id *)(*(void *)(v5 + 48) + 8 * v15);
      if (!v17) {
        goto LABEL_73;
      }
    }
    unint64_t v55 = v14;
    id v20 = [v17 publicKeyIdentifier:v45];
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    uint64_t v24 = 0;
    switch(v23 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(v21) - v21;
        if (__OFSUB__(HIDWORD(v21), v21))
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
        }
        uint64_t v24 = (int)v24;
        break;
      case 2uLL:
        uint64_t v26 = *(void *)(v21 + 16);
        uint64_t v25 = *(void *)(v21 + 24);
        BOOL v27 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (!v27) {
          break;
        }
        goto LABEL_75;
      case 3uLL:
        break;
      default:
        uint64_t v24 = BYTE6(v23);
        break;
    }
    uint64_t v28 = BYTE6(a3);
    switch(a3 >> 62)
    {
      case 1uLL:
        uint64_t v28 = HIDWORD(a2) - (int)a2;
        if (v47) {
          goto LABEL_76;
        }
        goto LABEL_41;
      case 2uLL:
        uint64_t v30 = *(void *)(a2 + 16);
        uint64_t v29 = *(void *)(a2 + 24);
        BOOL v27 = __OFSUB__(v29, v30);
        uint64_t v28 = v29 - v30;
        if (!v27) {
          goto LABEL_41;
        }
        goto LABEL_77;
      case 3uLL:
        if (v24) {
          goto LABEL_12;
        }
        goto LABEL_70;
      default:
LABEL_41:
        if (v24 != v28)
        {
LABEL_12:
          sub_10006D144(v21, v23);
          goto LABEL_13;
        }
        if (v24 >= 1)
        {
          switch(v23 >> 62)
          {
            case 1uLL:
              uint64_t v50 = v4;
              uint64_t v4 = (int)v21;
              if (v21 >> 32 < (int)v21) {
                goto LABEL_79;
              }
              sub_10006D0EC(a2, a3);
              sub_10006D0EC(v21, v23);
              uint64_t v40 = __DataStorage._bytes.getter();
              if (!v40) {
                goto LABEL_60;
              }
              uint64_t v41 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v21, v41)) {
                goto LABEL_82;
              }
              v40 += (int)v21 - v41;
LABEL_60:
              __DataStorage._length.getter();
              uint64_t v42 = v40;
              unint64_t v37 = a3;
              uint64_t v32 = a2;
              sub_1001E5240(v42, a2, a3, (char *)__s1);
              if (v50) {
                goto LABEL_85;
              }
              uint64_t v4 = 0;
              sub_10006D144(a2, a3);
              sub_10006D144(v21, v23);
              sub_10006D144(v21, v23);
              char v38 = __s1[0];
              uint64_t v5 = v48;
              break;
            case 2uLL:
              uint64_t v32 = v23 & 0x3FFFFFFFFFFFFFFFLL;
              uint64_t v33 = *(void *)(v21 + 16);
              uint64_t v46 = *(void *)(v21 + 24);
              sub_10006D0EC(a2, a3);
              swift_retain();
              swift_retain();
              uint64_t v34 = __DataStorage._bytes.getter();
              uint64_t v49 = v4;
              if (!v34) {
                goto LABEL_50;
              }
              uint64_t v35 = __DataStorage._offset.getter();
              if (__OFSUB__(v33, v35)) {
                goto LABEL_81;
              }
              v34 += v33 - v35;
LABEL_50:
              if (__OFSUB__(v46, v33)) {
                goto LABEL_80;
              }
              __DataStorage._length.getter();
              uint64_t v36 = v34;
              unint64_t v37 = a3;
              uint64_t v4 = a2;
              sub_1001E5240(v36, a2, a3, (char *)__s1);
              if (v49)
              {
                sub_10006D144(a2, a3);
                swift_release();
                swift_release();
                __break(1u);
LABEL_84:
                sub_10006D144(v32, v37);
                __break(1u);
LABEL_85:
                sub_10006D144(v32, v37);
                sub_10006D144(v21, v23);
                __break(1u);
LABEL_86:
                sub_10006D144(v4, v32);
                __break(1u);
                JUMPOUT(0x1001E6D04);
              }
              sub_10006D144(a2, a3);
              swift_release();
              swift_release();
              sub_10006D144(v21, v23);
              char v38 = __s1[0];
              uint64_t v5 = v48;
              uint64_t v4 = 0;
              break;
            case 3uLL:
              uint64_t v39 = v5;
              memset(__s1, 0, 14);
              unint64_t v37 = a3;
              uint64_t v32 = a2;
              sub_10006D0EC(a2, a3);
              sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v56);
              if (v4) {
                goto LABEL_84;
              }
              uint64_t v4 = 0;
              sub_10006D144(a2, a3);
              sub_10006D144(v21, v23);
              uint64_t v5 = v39;
              if (v56 == 1) {
                goto LABEL_73;
              }
              goto LABEL_13;
            default:
              __s1[0] = v21;
              LOWORD(__s1[1]) = v23;
              BYTE2(__s1[1]) = BYTE2(v23);
              BYTE3(__s1[1]) = BYTE3(v23);
              BYTE4(__s1[1]) = BYTE4(v23);
              BYTE5(__s1[1]) = BYTE5(v23);
              uint64_t v31 = v4;
              uint64_t v32 = a3;
              uint64_t v4 = a2;
              sub_10006D0EC(a2, a3);
              sub_1001E5240((uint64_t)__s1, a2, a3, (char *)&v56);
              if (v31) {
                goto LABEL_86;
              }
              sub_10006D144(a2, a3);
              sub_10006D144(v21, v23);
              uint64_t v4 = 0;
              uint64_t v5 = v48;
              if (v56) {
                goto LABEL_73;
              }
              goto LABEL_13;
          }
          if (v38) {
            goto LABEL_73;
          }
LABEL_13:

          unint64_t v8 = v55;
          continue;
        }
LABEL_70:
        sub_10006D144(v21, v23);
LABEL_73:
        sub_10008C4F0();
        return v17;
    }
  }
}

unint64_t sub_1001E6D34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10006C51C(&qword_100458198);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  int v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_1002C0D48(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  unint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    BOOL v12 = v8 + 2;
    int v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = *v8;
    swift_retain();
    unint64_t result = sub_1002C0D48(v4);
    unint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1001E6E38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_10006C51C(&qword_10045B6C0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 34); ; i += 4)
    {
      unsigned __int16 v5 = *((_WORD *)i - 1);
      char v6 = *i;
      unint64_t result = sub_1002C0C6C(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_WORD *)(v3[6] + 2 * result) = v5;
      *(unsigned char *)(v3[7] + result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1001E6F10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_10006C51C(&qword_100458138);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int16 v4 = *(_WORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  unint64_t result = sub_1002C0C6C(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v9 = (unint64_t *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_WORD *)(v3[6] + 2 * result) = v4;
    BOOL v10 = (uint64_t *)(v3[7] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    sub_10006D0EC(v5, v6);
    if (!--v1) {
      return (unint64_t)v3;
    }
    unsigned __int16 v4 = *((_WORD *)v9 - 8);
    uint64_t v5 = *(v9 - 1);
    unint64_t v6 = *v9;
    unint64_t result = sub_1002C0C6C(v4);
    v9 += 3;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E7014(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v29 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v30 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  uint64_t v28 = _swiftEmptyArrayStorage;
  if (!v5) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  int64_t v32 = v7;
  for (unint64_t i = v8 | (v7 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v18 << 6))
  {
    BOOL v10 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v12 = *v10;
    unint64_t v11 = v10[1];
    sub_10006D0EC(*v10, v11);
    unint64_t v13 = sub_1001DF638(v12, v11);
    if (v2)
    {
      swift_errorRelease();
      uint64_t result = sub_10006D144(v12, v11);
      uint64_t v2 = 0;
      int64_t v7 = v32;
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      unint64_t v21 = v13;
      uint64_t v22 = v14;
      uint64_t v23 = v15;
      uint64_t v24 = v16;
      sub_10006D144(v12, v11);
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100259308(0, v28[2] + 1, 1, v28);
        uint64_t v28 = (void *)result;
      }
      unint64_t v26 = v28[2];
      unint64_t v25 = v28[3];
      if (v26 >= v25 >> 1)
      {
        uint64_t result = (uint64_t)sub_100259308((void *)(v25 > 1), v26 + 1, 1, v28);
        uint64_t v28 = (void *)result;
      }
      void v28[2] = v26 + 1;
      BOOL v27 = &v28[4 * v26];
      v27[4] = v21;
      v27[5] = v22;
      v27[6] = v23;
      v27[7] = v24;
      int64_t v7 = v32;
      if (v5) {
        goto LABEL_4;
      }
    }
LABEL_7:
    BOOL v17 = __OFADD__(v7, 1);
    int64_t v18 = v7 + 1;
    if (v17)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v18 >= v30) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v29 + 8 * v18);
    if (!v19) {
      break;
    }
LABEL_19:
    unint64_t v5 = (v19 - 1) & v19;
    int64_t v32 = v18;
  }
  int64_t v20 = v18 + 1;
  if (v18 + 1 >= v30) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v18 + 2;
  if (v18 + 2 >= v30) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v18 + 3;
  if (v18 + 3 >= v30) {
    goto LABEL_30;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_18;
  }
  int64_t v20 = v18 + 4;
  if (v18 + 4 >= v30)
  {
LABEL_30:
    swift_release();
    return (uint64_t)v28;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_18:
    int64_t v18 = v20;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v18 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v18 >= v30) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v29 + 8 * v18);
    ++v20;
    if (v19) {
      goto LABEL_19;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_1001E72A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint8_t *sub_1001E72C0(uint64_t a1, __objc2_class **a2)
{
  return sub_1001E21FC(a1, a2);
}

void sub_1001E72DC(uint64_t a1, unint64_t a2, __objc2_class **a3)
{
  sub_1001E3624(a1, a2, a3, v3);
}

uint64_t sub_1001E72E8(uint64_t a1, uint64_t a2, uint64_t a3, __objc2_class **a4)
{
  return sub_1001E3EFC(a1, a2, a3, a4);
}

void sub_1001E72F0(char a1, __objc2_class **a2)
{
}

uint64_t sub_1001E72F8()
{
  return sub_1001DD8E0(*(void *)(v0 + 16));
}

uint64_t sub_1001E7318()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_1001E7340()
{
  sub_1001E4E78(v0);
}

uint64_t sub_1001E7348(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1001E7358()
{
  return swift_release();
}

uint64_t sub_1001E7360(uint64_t *a1)
{
  return sub_1001DD354(*a1, **(void **)(v1 + 16), (uint64_t)&unk_1004153A0, (uint64_t)sub_1001E73DC, (uint64_t)&unk_1004153B8);
}

uint64_t sub_1001E73A8(uint64_t *a1)
{
  return sub_1001DDB90(*a1, **(void **)(v1 + 16));
}

uint64_t sub_1001E73D0()
{
  return sub_1001DDE64(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001E73DC()
{
  return sub_1001E649C(*(void *)(v0 + 16), (uint64_t *)(v0 + 24), (uint64_t (*)(void))type metadata accessor for Peer);
}

uint64_t sub_1001E7410()
{
  return sub_1001DCDE8(*(void *)(v0 + 16), **(void **)(v0 + 24));
}

uint64_t sub_1001E7430(uint64_t *a1)
{
  return sub_1001DD354(*a1, **(void **)(v1 + 16), (uint64_t)&unk_100415440, (uint64_t)sub_1001E7510, (uint64_t)&unk_100415458);
}

uint64_t sub_1001E7478(uint64_t *a1)
{
  return sub_1001DD354(*a1, **(void **)(v1 + 16), (uint64_t)&unk_1004153F0, (uint64_t)sub_1001E74C4, (uint64_t)&unk_100415408);
}

uint64_t sub_1001E74C4()
{
  return sub_1001DD228(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001E74D0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E7510()
{
  return sub_1001E63F8(*(void *)(v0 + 16), (uint64_t *)(v0 + 24), (uint64_t (*)(void))type metadata accessor for Peer);
}

uint64_t sub_1001E7544@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100087F94(*(uint64_t (**)(uint64_t *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1001E757C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001E75C4(uint64_t *a1)
{
  return sub_1001DD61C(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100415508, (uint64_t)sub_1001E7664, (uint64_t)&unk_100415520);
}

uint64_t sub_1001E760C(uint64_t *a1)
{
  return sub_1001DD61C(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_1004154B8, (uint64_t)sub_1001E7658, (uint64_t)&unk_1004154D0);
}

void sub_1001E7658()
{
  sub_1001DDF90(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1001E7664()
{
  return sub_1001E649C(*(void *)(v0 + 16), (uint64_t *)(v0 + 24), (uint64_t (*)(void))sub_10012AE84);
}

uint64_t sub_1001E7698(uint64_t *a1)
{
  return sub_1001DD61C(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_1004155A8, (uint64_t)sub_1001E7730, (uint64_t)&unk_1004155C0);
}

uint64_t sub_1001E76E0(uint64_t *a1)
{
  return sub_1001DD61C(*a1, **(void ***)(v1 + 16), (uint64_t)&unk_100415558, (uint64_t)sub_10012B38C, (uint64_t)&unk_100415570);
}

uint64_t sub_1001E7730()
{
  return sub_1001E63F8(*(void *)(v0 + 16), (uint64_t *)(v0 + 24), (uint64_t (*)(void))sub_10012AE84);
}

uint64_t sub_1001E7764()
{
  return sub_1001E72F8();
}

uint64_t sub_1001E77A0()
{
  return sub_1001E7318();
}

void sub_1001E77DC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for Peer();
    sub_1001F7BBC((unint64_t *)&qword_100454590, (void (*)(uint64_t))type metadata accessor for Peer);
    Set.Iterator.init(_cocoa:)();
    uint64_t v3 = v25;
    uint64_t v24 = v26;
    uint64_t v4 = v27;
    unint64_t v5 = v28;
    unint64_t v6 = v29;
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v4 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    unint64_t v5 = 0;
  }
  int64_t v23 = (unint64_t)(v4 + 64) >> 6;
  if ((v3 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for Peer();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  uint64_t v10 = v30;
  uint64_t v11 = swift_unknownObjectRelease();
  unint64_t v13 = v5;
  uint64_t v14 = v6;
  if (!v30) {
    goto LABEL_36;
  }
  while (1)
  {
    if (qword_100453910 != -1) {
      uint64_t v11 = swift_once();
    }
    uint64_t v30 = v10;
    uint64_t v18 = __chkstk_darwin(v11, v12);
    __chkstk_darwin(v18, v19);
    unint64_t v5 = v20 + 4;
    os_unfair_lock_lock(v20 + 4);
    sub_1000AA81C(v21);
    if (v2) {
      goto LABEL_38;
    }
    uint64_t v2 = 0;
    os_unfair_lock_unlock(v5);
    swift_release();
    unint64_t v5 = v13;
    unint64_t v6 = v14;
    if (v3 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v6) {
      break;
    }
    uint64_t v14 = (v6 - 1) & v6;
    unint64_t v15 = __clz(__rbit64(v6)) | ((void)v5 << 6);
    unint64_t v13 = v5;
LABEL_24:
    uint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v15);
    uint64_t v11 = swift_retain();
    if (!v10) {
      goto LABEL_36;
    }
  }
  unint64_t v13 = (os_unfair_lock_s *)((char *)&v5->_os_unfair_lock_opaque + 1);
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_38:
    os_unfair_lock_unlock(v5);
    __break(1u);
    return;
  }
  if ((uint64_t)v13 >= v23) {
    goto LABEL_36;
  }
  unint64_t v16 = *(void *)(v24 + 8 * (void)v13);
  if (v16)
  {
LABEL_23:
    uint64_t v14 = (v16 - 1) & v16;
    unint64_t v15 = __clz(__rbit64(v16)) + ((void)v13 << 6);
    goto LABEL_24;
  }
  BOOL v17 = (os_unfair_lock_s *)((char *)&v5->_os_unfair_lock_opaque + 2);
  if ((uint64_t)&v5->_os_unfair_lock_opaque + 2 >= v23) {
    goto LABEL_36;
  }
  unint64_t v16 = *(void *)(v24 + 8 * (void)v17);
  if (v16) {
    goto LABEL_22;
  }
  BOOL v17 = (os_unfair_lock_s *)((char *)&v5->_os_unfair_lock_opaque + 3);
  if ((uint64_t)&v5->_os_unfair_lock_opaque + 3 >= v23) {
    goto LABEL_36;
  }
  unint64_t v16 = *(void *)(v24 + 8 * (void)v17);
  if (v16) {
    goto LABEL_22;
  }
  BOOL v17 = v5 + 1;
  if ((uint64_t)&v5[1] >= v23) {
    goto LABEL_36;
  }
  unint64_t v16 = *(void *)(v24 + 8 * (void)v17);
  if (v16)
  {
LABEL_22:
    unint64_t v13 = v17;
    goto LABEL_23;
  }
  unint64_t v13 = (os_unfair_lock_s *)((char *)v5 + 5);
  if ((uint64_t)&v5[1]._os_unfair_lock_opaque + 1 >= v23) {
    goto LABEL_36;
  }
  unint64_t v16 = *(void *)(v24 + 8 * (void)v13);
  if (v16) {
    goto LABEL_23;
  }
  uint64_t v22 = (char *)&v5[1]._os_unfair_lock_opaque + 2;
  while ((char *)v23 != v22)
  {
    unint64_t v16 = *(void *)(v24 + 8 * (void)v22++);
    if (v16)
    {
      unint64_t v13 = (os_unfair_lock_s *)(v22 - 1);
      goto LABEL_23;
    }
  }
LABEL_36:
  sub_10008C4F0();
}

void sub_1001E7B8C(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned char *a4)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10007582C(0, (unint64_t *)&qword_100458810);
    sub_1001F7C04();
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v33;
    uint64_t v32 = v34;
    uint64_t v6 = v35;
    uint64_t v7 = v36;
    unint64_t v8 = v37;
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v32 = a1 + 56;
    uint64_t v10 = ~v9;
    uint64_t v11 = -v9;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v8 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  int64_t v31 = (unint64_t)(v6 + 64) >> 6;
  while (1)
  {
    if (v5 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_46;
      }
      sub_10007582C(0, (unint64_t *)&qword_100458810);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v16 = v38;
      swift_unknownObjectRelease();
      uint64_t v15 = v7;
      uint64_t v13 = v8;
      if (!v38) {
        goto LABEL_46;
      }
    }
    else
    {
      if (v8)
      {
        uint64_t v13 = (v8 - 1) & v8;
        unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
        uint64_t v15 = v7;
      }
      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1)) {
          goto LABEL_48;
        }
        if (v17 >= v31) {
          goto LABEL_46;
        }
        unint64_t v18 = *(void *)(v32 + 8 * v17);
        uint64_t v15 = v7 + 1;
        if (!v18)
        {
          uint64_t v15 = v7 + 2;
          if (v7 + 2 >= v31) {
            goto LABEL_46;
          }
          unint64_t v18 = *(void *)(v32 + 8 * v15);
          if (!v18)
          {
            uint64_t v15 = v7 + 3;
            if (v7 + 3 >= v31) {
              goto LABEL_46;
            }
            unint64_t v18 = *(void *)(v32 + 8 * v15);
            if (!v18)
            {
              uint64_t v15 = v7 + 4;
              if (v7 + 4 >= v31) {
                goto LABEL_46;
              }
              unint64_t v18 = *(void *)(v32 + 8 * v15);
              if (!v18)
              {
                uint64_t v15 = v7 + 5;
                if (v7 + 5 >= v31) {
                  goto LABEL_46;
                }
                unint64_t v18 = *(void *)(v32 + 8 * v15);
                if (!v18)
                {
                  uint64_t v19 = v7 + 6;
                  while (v31 != v19)
                  {
                    unint64_t v18 = *(void *)(v32 + 8 * v19++);
                    if (v18)
                    {
                      uint64_t v15 = v19 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_46:
                  sub_10008C4F0();
                  return;
                }
              }
            }
          }
        }
LABEL_32:
        uint64_t v13 = (v18 - 1) & v18;
        unint64_t v14 = __clz(__rbit64(v18)) + (v15 << 6);
      }
      id v16 = *(id *)(*(void *)(v5 + 48) + 8 * v14);
      if (!v16) {
        goto LABEL_46;
      }
    }
    id v20 = [v16 getEndpointUser];
    if (v20 == (id)1)
    {
      uint64_t v21 = a3;
      uint64_t v22 = *a3 + 1;
      if (*a3 == -1) {
        goto LABEL_47;
      }
      goto LABEL_39;
    }
    if (v20) {
      goto LABEL_9;
    }
    uint64_t v21 = a2;
    uint64_t v22 = *a2 + 1;
    if (*a2 == -1) {
      break;
    }
LABEL_39:
    *uint64_t v21 = v22;
    if (*a4 != 1) {
      goto LABEL_9;
    }
    id v23 = [v16 environment];
    if (!v23) {
      goto LABEL_8;
    }
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    if (v25 != 80 || v27 != 0xE100000000000000)
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0) {
LABEL_8:
      }
        *a4 = 0;
LABEL_9:

      goto LABEL_10;
    }

    swift_bridgeObjectRelease();
LABEL_10:
    uint64_t v7 = v15;
    unint64_t v8 = v13;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
}