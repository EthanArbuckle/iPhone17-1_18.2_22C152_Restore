uint64_t sub_10028966C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t v7;

  v4 = (void *)*v3;
  v4[36] = a1;
  v4[37] = a2;
  v4[38] = v2;
  swift_task_dealloc();
  if (v2) {
    v5 = sub_100289F08;
  }
  else {
    v5 = sub_100289784;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100289784()
{
  uint64_t v54 = v0;
  v1 = (uint64_t *)(v0 + 96);
  unint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v4 = *(void *)(v0 + 288);
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10006D0EC(v4, v2);
  JSONDecoder.init()();
  sub_10006C51C(&qword_100455790);
  sub_10028AC88();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10006D144(*(void *)(v0 + 288), *(void *)(v0 + 296));
  swift_release();
  if (v3)
  {
LABEL_19:
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_10008E55C(v24, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)v27 = 136315138;
      swift_getErrorValue();
      uint64_t v28 = Error.localizedDescription.getter();
      *(void *)(v0 + 120) = sub_100290514(v28, v29, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "getInstallationStatus: JSON Decoding error %s encountered", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v31 = *(void *)(v0 + 288);
    unint64_t v30 = *(void *)(v0 + 296);
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v34 = *(void *)(v0 + 200);
    uint64_t v33 = *(void *)(v0 + 208);
    uint64_t v35 = *(void *)(v0 + 192);
    sub_10008E594();
    swift_allocError();
    void *v36 = 13;
    swift_willThrow();
    swift_errorRelease();
    sub_10006D144(v31, v30);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    sub_10028CE74(v32, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v37 = *(uint64_t (**)(void))(v0 + 8);
    return v37();
  }
  uint64_t v5 = *v1;
  if (!*(void *)(*v1 + 16)) {
    goto LABEL_13;
  }
  sub_1002C0AD0(0xD000000000000014, 0x80000001003B9E70);
  if ((v6 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v9 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 144);
    swift_bridgeObjectRelease();
    sub_10008E734(v10, &qword_100455EB0);
LABEL_14:
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E55C(v19, (uint64_t)qword_1004686A8);
    v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "getInstallationStatus: Unexpected JSON Response from Server", v22, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    void *v23 = 13;
    swift_willThrow();
    goto LABEL_19;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 32))(*(void *)(v0 + 168), *(void *)(v0 + 144), *(void *)(v0 + 152));
  if ((static UUID.== infix(_:_:)() & 1) == 0)
  {
    (*(void (**)(void, void))(v0 + 264))(*(void *)(v0 + 168), *(void *)(v0 + 152));
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (!*(void *)(v5 + 16) || (uint64_t v11 = sub_1002C0AD0(0xD000000000000013, 0x80000001003B9E90), (v12 & 1) == 0))
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v41 = *(void *)(v0 + 152);
    swift_bridgeObjectRelease();
    v39(v40, v41);
    goto LABEL_14;
  }
  v13 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v15 == 0x6574736575716572 && v14 == 0xE900000000000064)
  {
    uint64_t v16 = *(void *)(v0 + 288);
    unint64_t v17 = *(void *)(v0 + 296);
    swift_bridgeObjectRelease();
    uint64_t v18 = v16;
  }
  else
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v44 = *(void *)(v0 + 288);
      unint64_t v43 = *(void *)(v0 + 296);
      if (v15 == 0x64657461657263 && v14 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        sub_10006D144(v44, v43);
        int v45 = 1;
      }
      else
      {
        char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v44, v43);
        if (v46) {
          int v45 = 1;
        }
        else {
          int v45 = 2;
        }
      }
      unsigned int v52 = v45;
      goto LABEL_38;
    }
    uint64_t v42 = *(void *)(v0 + 288);
    unint64_t v17 = *(void *)(v0 + 296);
    swift_bridgeObjectRelease();
    uint64_t v18 = v42;
  }
  sub_10006D144(v18, v17);
  unsigned int v52 = 0;
LABEL_38:
  uint64_t v47 = *(void *)(v0 + 240);
  uint64_t v48 = *(void *)(v0 + 208);
  uint64_t v50 = *(void *)(v0 + 192);
  uint64_t v49 = *(void *)(v0 + 200);
  (*(void (**)(void, void))(v0 + 264))(*(void *)(v0 + 168), *(void *)(v0 + 152));
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  sub_10028CE74(v47, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v51 = *(uint64_t (**)(void))(v0 + 8);
  return v51(v52);
}

uint64_t sub_100289F08()
{
  uint64_t v19 = v0;
  *(void *)(v0 + 112) = *(void *)(v0 + 304);
  swift_errorRetain();
  sub_10006C51C((uint64_t *)&unk_10045AFD0);
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    uint64_t v1 = *(void *)(v0 + 64);
    uint64_t v2 = *(void *)(v0 + 72);
    char v3 = *(unsigned char *)(v0 + 80);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10008E55C(v4, (uint64_t)qword_1004686A8);
    sub_1001391C4(v1, v2, v3);
    sub_1001391C4(v1, v2, v3);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      unint64_t v8 = sub_100132F7C(v1, v2, v3);
      *(void *)(v0 + 88) = sub_100290514(v8, v9, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001334F8(v1, v2, v3);
      sub_1001334F8(v1, v2, v3);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "getInstallationStatus: Data task wrapper error %s encountered while performing URL request", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001334F8(v1, v2, v3);
      sub_1001334F8(v1, v2, v3);
    }

    uint64_t v11 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v14 = *(void *)(v0 + 192);
    sub_10008E594();
    swift_allocError();
    *uint64_t v15 = 11;
    swift_willThrow();
    sub_1001334F8(v1, v2, v3);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_10028CE74(v11, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_errorRelease();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 240);
    (*(void (**)(void, void))(*(void *)(v0 + 200) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 192));
    sub_10028CE74(v10, (uint64_t (*)(void))type metadata accessor for SECNetworkConfiguration);
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_10028A294()
{
  sub_10008E734(v0 + OBJC_IVAR____TtC10seserviced20SECNetworkController_networkConfiguration, &qword_10045A778);

  return swift_deallocClassInstance();
}

uint64_t sub_10028A300()
{
  return type metadata accessor for SECNetworkController();
}

uint64_t type metadata accessor for SECNetworkController()
{
  uint64_t result = qword_10045A608;
  if (!qword_10045A608) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10028A354()
{
  sub_10028A408();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10028A408()
{
  if (!qword_10045A648)
  {
    type metadata accessor for SECNetworkConfiguration();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10045A648);
    }
  }
}

uint64_t sub_10028A460()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_10011FE60;
  return sub_100280E60();
}

uint64_t sub_10028A4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10011F7E8;
  return sub_100281314(a1, a2, a3);
}

uint64_t sub_10028A5A4(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10028A63C;
  return sub_100288DB4(a1);
}

uint64_t sub_10028A63C(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_10028A73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10011FE60;
  return sub_100286CB0(a1, a2, a3);
}

uint64_t sub_10028A7F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045A778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_10028A858()
{
  id v0 = [self sharedHardwareManager];
  NSString v1 = String._bridgeToObjectiveC()();
  id v11 = 0;
  id v2 = [v0 secureElementWithIdentifier:v1 error:&v11];

  if (v2)
  {
    id v3 = v11;
  }
  else
  {
    id v4 = v11;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Could not get ese info", v8, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v9 = 9;
    swift_willThrow();
    swift_errorRelease();
  }
  return v2;
}

uint64_t sub_10028AA50()
{
  uint64_t v0 = sub_1001A5E74(0x54746375646F7250, 0xEB00000000657079, 0xD000000000000016);
  id v2 = v1;
  uint64_t v3 = sub_1001A5E74(0x4E746375646F7250, 0xEB00000000656D61, 0xD000000000000016);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1001A5E74(0x56746375646F7250, 0xEE006E6F69737265, 0xD000000000000019);
  uint64_t v8 = v7;
  uint64_t v9 = sub_1001A5E74(0x726556646C697542, 0xEC0000006E6F6973, 0xD000000000000017);
  id v11 = v10;
  v12._countAndFlagsBits = 59;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v6;
  v13._object = v8;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 59;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v9;
  v15._object = v11;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(63);
  v16._countAndFlagsBits = 60;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v0;
  v17._object = v2;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 3940414;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v3;
  v19._object = v5;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000037;
  v20._object = (void *)0x80000001003B9F30;
  String.append(_:)(v20);
  return 0;
}

unint64_t sub_10028AC88()
{
  unint64_t result = qword_10045A780;
  if (!qword_10045A780)
  {
    sub_10006D220(&qword_100455790);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10045A780);
  }
  return result;
}

uint64_t sub_10028ACF4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SECCredentialConfig() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_10028ADF8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10028AE60()
{
  uint64_t v1 = *(void *)(type metadata accessor for SECCredentialConfig() - 8);
  sub_10008D6A4(*(void **)(v0 + 16), v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10028AED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[20] = a2;
  v3[21] = a3;
  v3[19] = a1;
  return _swift_task_switch(sub_10028AEF4, 0, 0);
}

uint64_t sub_10028AEF4()
{
  uint64_t v2 = v0[20];
  unint64_t v1 = v0[21];
  uint64_t v3 = swift_allocObject();
  v0[22] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  sub_10006D0EC(v2, v1);
  uint64_t v6 = (char *)&dword_10045B000 + dword_10045B000;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[23] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10028B00C;
  return ((uint64_t (*)(void *, unint64_t, unint64_t, void *, uint64_t))v6)(v0 + 2, 0xD000000000000010, 0x80000001003B9FF0, &unk_10045A7A0, v3);
}

uint64_t sub_10028B00C()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10028C6A8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_10028B128;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10028B128()
{
  uint64_t v152 = v1;
  unint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(v2) - v2;
      if (__OFSUB__(HIDWORD(v2), v2))
      {
        __break(1u);
LABEL_120:
        __break(1u);
      }
      else
      {
        uint64_t v4 = (int)v4;
LABEL_6:
        if (v4 != 115) {
          goto LABEL_11;
        }
        v135 = (_DWORD *)(v1 + 204);
        v133 = (uint64_t *)(v1 + 88);
        v134 = (uint64_t *)(v1 + 104);
        v132 = (uint64_t *)(v1 + 128);
        uint64_t v8 = self;
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v10 = [v8 TLVsWithData:isa];

        if (!v10)
        {
LABEL_11:
          if (qword_1004536D0 == -1)
          {
LABEL_12:
            uint64_t v14 = type metadata accessor for Logger();
            sub_10008E55C(v14, (uint64_t)qword_1004686A8);
            sub_10006D0EC(v2, v3);
            sub_10006D0EC(v2, v3);
            Swift::String v15 = Logger.logObject.getter();
            os_log_type_t v16 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v15, v16))
            {
              uint64_t v17 = v2;
              Swift::String v18 = (uint8_t *)swift_slowAlloc();
              v151[0] = swift_slowAlloc();
              *(_DWORD *)Swift::String v18 = 136315138;
              *(void *)(v1 + 40) = sub_10023CDF4(v17, v3);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_1000756D0();
              uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v21 = v20;
              swift_bridgeObjectRelease();
              *(void *)(v1 + 48) = sub_100290514(v19, v21, v151);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006D144(v17, v3);
              sub_10006D144(v17, v3);
              _os_log_impl((void *)&_mh_execute_header, v15, v16, "performSEAuthenticatedGetData: Bad signature %s", v18, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              unint64_t v2 = v17;
              swift_slowDealloc();
            }
            else
            {
              sub_10006D144(v2, v3);
              sub_10006D144(v2, v3);
            }

            sub_10008E594();
            swift_allocError();
            void *v22 = 31;
            swift_willThrow();
            uint64_t v23 = v2;
            goto LABEL_16;
          }
LABEL_118:
          swift_once();
          goto LABEL_12;
        }
        uint64_t v136 = v2;
        sub_100120404();
        unint64_t v0 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v0 >> 62))
        {
          uint64_t v11 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v11) {
            goto LABEL_10;
          }
LABEL_122:
          swift_bridgeObjectRelease();
          unint64_t v35 = 0;
          uint64_t v13 = 0;
          unint64_t v32 = 0xF000000000000000;
          unint64_t v12 = 0xF000000000000000;
          unint64_t v33 = v136;
          goto LABEL_123;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_122;
      }
LABEL_10:
      unint64_t v131 = v3;
      unint64_t v3 = 0;
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v144 = v0;
      unint64_t v146 = v0 & 0xC000000000000001;
      unint64_t v2 = 0xF000000000000000;
      unint64_t v137 = 0xF000000000000000;
      uint64_t v138 = v11;
      while (2)
      {
        if (v146) {
          id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v27 = *(id *)(v0 + 8 * v3 + 32);
        }
        uint64_t v28 = v27;
        unint64_t v29 = v3 + 1;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
          goto LABEL_118;
        }
        int v30 = [v27 tag];
        if (v30 > 57119)
        {
          if (v30 == 57137)
          {
            id v43 = [v28 value];
            if (v43)
            {
              uint64_t v44 = v43;
              unint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v35 = v45;

              switch(v35 >> 62)
              {
                case 1uLL:
                  unint64_t v32 = v13;
                  uint64_t v13 = HIDWORD(v33);
                  sub_10006D144(v33, v35);
                  LODWORD(v46) = HIDWORD(v33) - v33;
                  if (__OFSUB__(HIDWORD(v33), v33)) {
                    goto LABEL_134;
                  }
                  uint64_t v46 = (int)v46;
                  uint64_t v13 = v32;
LABEL_62:
                  unint64_t v0 = v144;
                  if (v46 != 16) {
                    break;
                  }
                  goto LABEL_23;
                case 2uLL:
                  unint64_t v32 = *(void *)(v33 + 16);
                  uint64_t v130 = *(void *)(v33 + 24);
                  sub_10006D144(v33, v35);
                  uint64_t v46 = v130 - v32;
                  if (!__OFSUB__(v130, v32)) {
                    goto LABEL_62;
                  }
                  goto LABEL_135;
                case 3uLL:
                  sub_10006D144(v33, v35);
                  break;
                default:
                  sub_10006D144(v33, v35);
                  uint64_t v46 = BYTE6(v35);
                  goto LABEL_62;
              }
            }
            unint64_t v128 = v2;
            swift_bridgeObjectRelease();
            if (qword_1004536D0 != -1) {
              swift_once();
            }
            uint64_t v103 = type metadata accessor for Logger();
            sub_10008E55C(v103, (uint64_t)qword_1004686A8);
            id v59 = v28;
            v104 = Logger.logObject.getter();
            os_log_type_t v105 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v104, v105))
            {
              unint64_t v150 = v12;
              v106 = (uint8_t *)swift_slowAlloc();
              v151[0] = swift_slowAlloc();
              *(_DWORD *)v106 = 136315138;
              id v107 = [v59 value];
              if (v107)
              {
                v108 = v107;
                uint64_t v109 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v140 = v110;
                uint64_t v143 = v109;
                unint64_t v111 = v110;

                *(void *)(v1 + 144) = sub_10023CDF4(v109, v111);
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_1000756D0();
                uint64_t v112 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v114 = v113;
                swift_bridgeObjectRelease();
                sub_10006D144(v143, v140);
              }
              else
              {
                uint64_t v112 = 7104878;
                unint64_t v114 = 0xE300000000000000;
              }
              uint64_t *v132 = sub_100290514(v112, v114, v151);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              _os_log_impl((void *)&_mh_execute_header, v104, v105, "performSEAuthenticatedGetData: Bad jsbl sequence counter %s in signature response", v106, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              unint64_t v101 = v137;
              unint64_t v12 = v150;
            }
            else
            {

              unint64_t v101 = v137;
            }
            sub_10008E594();
            swift_allocError();
            void *v115 = 31;
            swift_willThrow();
            sub_100075868(v12, v128);
            uint64_t v85 = v13;
LABEL_115:
            unint64_t v86 = v101;
            goto LABEL_116;
          }
          if (v30 != 57120)
          {
LABEL_69:
            unint64_t v125 = v2;
            swift_bridgeObjectRelease();
            if (qword_1004536D0 != -1) {
              swift_once();
            }
            uint64_t v58 = type metadata accessor for Logger();
            sub_10008E55C(v58, (uint64_t)qword_1004686A8);
            id v59 = v28;
            v60 = Logger.logObject.getter();
            os_log_type_t v61 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v60, v61))
            {
              v62 = (uint8_t *)swift_slowAlloc();
              *(_DWORD *)v62 = 67109120;
              _DWORD *v135 = [v59 tag];
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl((void *)&_mh_execute_header, v60, v61, "performSEAuthenticatedGetData: Unexpected tag %u in signature response", v62, 8u);
              swift_slowDealloc();
            }
            else
            {
            }
            sub_10008E594();
            swift_allocError();
            void *v84 = 31;
            swift_willThrow();
            sub_100075868(v12, v125);
            uint64_t v85 = v13;
            unint64_t v86 = v137;
            goto LABEL_116;
          }
          id v37 = [v28 value];
          if (!v37) {
            goto LABEL_96;
          }
          v38 = v37;
          unint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v35 = v39;

          switch(v35 >> 62)
          {
            case 1uLL:
              unint64_t v32 = HIDWORD(v33);
              sub_10006D144(v33, v35);
              LODWORD(v26) = HIDWORD(v33) - v33;
              if (__OFSUB__(HIDWORD(v33), v33))
              {
                __break(1u);
LABEL_129:
                __break(1u);
LABEL_130:
                __break(1u);
LABEL_131:
                __break(1u);
LABEL_132:
                __break(1u);
LABEL_133:
                __break(1u);
LABEL_134:
                __break(1u);
LABEL_135:
                __break(1u);
                goto LABEL_136;
              }
              uint64_t v26 = (int)v26;
LABEL_22:
              unint64_t v0 = v144;
              if (v26 != 16)
              {
LABEL_96:
                unint64_t v127 = v2;
                uint64_t v124 = v13;
                swift_bridgeObjectRelease();
                if (qword_1004536D0 != -1) {
                  swift_once();
                }
                uint64_t v90 = type metadata accessor for Logger();
                sub_10008E55C(v90, (uint64_t)qword_1004686A8);
                id v59 = v28;
                v91 = Logger.logObject.getter();
                os_log_type_t v92 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v91, v92))
                {
                  unint64_t v149 = v12;
                  v93 = (uint8_t *)swift_slowAlloc();
                  v151[0] = swift_slowAlloc();
                  *(_DWORD *)v93 = 136315138;
                  id v94 = [v59 value];
                  if (v94)
                  {
                    v95 = v94;
                    uint64_t v139 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                    unint64_t v97 = v96;

                    *(void *)(v1 + 96) = sub_10023CDF4(v139, v97);
                    sub_10006C51C((uint64_t *)&unk_100455EA0);
                    sub_1000756D0();
                    uint64_t v98 = BidirectionalCollection<>.joined(separator:)();
                    unint64_t v100 = v99;
                    swift_bridgeObjectRelease();
                    sub_10006D144(v139, v97);
                  }
                  else
                  {
                    uint64_t v98 = 7104878;
                    unint64_t v100 = 0xE300000000000000;
                  }
                  uint64_t *v133 = sub_100290514(v98, v100, v151);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();

                  _os_log_impl((void *)&_mh_execute_header, v91, v92, "performSEAuthenticatedGetData: Bad platform Id %s in singature response", v93, 0xCu);
                  swift_arrayDestroy();
                  swift_slowDealloc();
                  swift_slowDealloc();

                  unint64_t v101 = v137;
                  unint64_t v12 = v149;
                }
                else
                {

                  unint64_t v101 = v137;
                }
                sub_10008E594();
                swift_allocError();
                void *v102 = 31;
                swift_willThrow();
                sub_100075868(v12, v127);
                uint64_t v85 = v124;
                goto LABEL_115;
              }
              break;
            case 2uLL:
              unint64_t v32 = *(void *)(v33 + 16);
              uint64_t v129 = *(void *)(v33 + 24);
              sub_10006D144(v33, v35);
              uint64_t v26 = v129 - v32;
              if (!__OFSUB__(v129, v32)) {
                goto LABEL_22;
              }
              goto LABEL_131;
            case 3uLL:
              sub_10006D144(v33, v35);
              goto LABEL_96;
            default:
              sub_10006D144(v33, v35);
              uint64_t v26 = BYTE6(v35);
              goto LABEL_22;
          }
          goto LABEL_23;
        }
        if (v30 != 133)
        {
          if (v30 != 24375) {
            goto LABEL_69;
          }
          id v31 = [v28 value];
          if (!v31)
          {
            swift_bridgeObjectRelease();
LABEL_74:
            unint64_t v126 = v2;
            uint64_t v123 = v13;
            unint64_t v63 = v137;
            if (qword_1004536D0 != -1) {
              swift_once();
            }
            uint64_t v64 = type metadata accessor for Logger();
            sub_10008E55C(v64, (uint64_t)qword_1004686A8);
            id v59 = v28;
            v65 = Logger.logObject.getter();
            os_log_type_t v66 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v65, v66))
            {
              unint64_t v148 = v12;
              v67 = (uint8_t *)swift_slowAlloc();
              v151[0] = swift_slowAlloc();
              *(_DWORD *)v67 = 136315138;
              id v68 = [v59 value];
              if (v68)
              {
                v69 = v68;
                uint64_t v141 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v71 = v70;

                *(void *)(v1 + 120) = sub_10023CDF4(v141, v71);
                sub_10006C51C((uint64_t *)&unk_100455EA0);
                sub_1000756D0();
                uint64_t v72 = BidirectionalCollection<>.joined(separator:)();
                unint64_t v74 = v73;
                swift_bridgeObjectRelease();
                sub_10006D144(v141, v71);
              }
              else
              {
                uint64_t v72 = 7104878;
                unint64_t v74 = 0xE300000000000000;
              }
              uint64_t *v134 = sub_100290514(v72, v74, v151);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              os_log_type_t v87 = v66;
              v88 = "performSEAuthenticatedGetData: Bad signature %s in signature response";
              goto LABEL_93;
            }
LABEL_85:

            goto LABEL_94;
          }
          unint64_t v32 = (unint64_t)v31;
          unint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v35 = v34;

          switch(v35 >> 62)
          {
            case 1uLL:
              LODWORD(v36) = HIDWORD(v33) - v33;
              if (__OFSUB__(HIDWORD(v33), v33)) {
                goto LABEL_129;
              }
              uint64_t v36 = (int)v36;
              goto LABEL_49;
            case 2uLL:
              uint64_t v48 = *(void *)(v33 + 16);
              uint64_t v47 = *(void *)(v33 + 24);
              BOOL v7 = __OFSUB__(v47, v48);
              uint64_t v36 = v47 - v48;
              if (v7) {
                goto LABEL_130;
              }
              goto LABEL_49;
            case 3uLL:
              goto LABEL_67;
            default:
              uint64_t v36 = BYTE6(v35);
LABEL_49:
              if (v36 != 64)
              {
LABEL_67:
                swift_bridgeObjectRelease();
                sub_10006D144(v33, v35);
                goto LABEL_74;
              }
              sub_100075868(v13, v137);
              uint64_t v13 = v33;
              unint64_t v137 = v35;
              unint64_t v0 = v144;
              break;
          }
          goto LABEL_23;
        }
        id v40 = [v28 value];
        if (!v40)
        {
          swift_bridgeObjectRelease();
          goto LABEL_80;
        }
        unint64_t v32 = (unint64_t)v40;
        unint64_t v33 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v35 = v41;

        switch(v35 >> 62)
        {
          case 1uLL:
            LODWORD(v42) = HIDWORD(v33) - v33;
            if (__OFSUB__(HIDWORD(v33), v33)) {
              goto LABEL_132;
            }
            uint64_t v42 = (int)v42;
LABEL_57:
            if (v42 == 8)
            {
              sub_100075868(v12, v2);
              unint64_t v12 = v33;
              unint64_t v2 = v35;
              unint64_t v0 = v144;
LABEL_23:

              ++v3;
              if (v29 == v138)
              {
                unint64_t v35 = v12;
                unint64_t v32 = v2;
                swift_bridgeObjectRelease();
                unint64_t v12 = v137;
                unint64_t v33 = v136;
                if (v137 >> 60 == 15)
                {
                  unint64_t v3 = v131;
                }
                else
                {
                  unint64_t v3 = v131;
                  if (v2 >> 60 != 15)
                  {
                    unint64_t v51 = v2;
                    unsigned int v52 = *(uint64_t **)(v1 + 152);
                    sub_1000758F4(v13, v137);
                    sub_1000758F4(v35, v51);
                    uint64_t v53 = Data.subdata(in:)();
                    uint64_t v145 = v54;
                    uint64_t v147 = v53;
                    uint64_t v55 = Data.subdata(in:)();
                    uint64_t v57 = v56;
                    sub_100075868(v35, v51);
                    sub_100075868(v13, v137);
                    sub_10006D144(v136, v131);
                    *unsigned int v52 = v13;
                    v52[1] = v137;
                    v52[2] = v147;
                    v52[3] = v145;
                    v52[4] = v55;
                    v52[5] = v57;
                    v52[6] = v35;
                    v52[7] = v51;
                    uint64_t v24 = *(uint64_t (**)(void))(v1 + 8);
                    goto LABEL_18;
                  }
                }
LABEL_123:
                if (qword_1004536D0 == -1)
                {
LABEL_124:
                  uint64_t v116 = type metadata accessor for Logger();
                  sub_10008E55C(v116, (uint64_t)qword_1004686A8);
                  sub_1000758F4(v13, v12);
                  uint64_t v117 = v35;
                  sub_1000758F4(v35, v32);
                  v118 = Logger.logObject.getter();
                  os_log_type_t v119 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v118, v119))
                  {
                    unint64_t v120 = v33;
                    uint64_t v121 = swift_slowAlloc();
                    *(_DWORD *)uint64_t v121 = 67109376;
                    *(_DWORD *)(v1 + 200) = v12 >> 60 != 15;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    sub_100075868(v13, v12);
                    *(_WORD *)(v121 + 8) = 1024;
                    *(_DWORD *)(v1 + 208) = v32 >> 60 != 15;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)();
                    sub_100075868(v117, v32);
                    _os_log_impl((void *)&_mh_execute_header, v118, v119, "performSEAuthenticatedGetData: missing signature %{BOOL}d or challenge %{BOOL}d", (uint8_t *)v121, 0xEu);
                    unint64_t v33 = v120;
                    swift_slowDealloc();
                  }
                  else
                  {
                    sub_100075868(v13, v12);
                    sub_100075868(v117, v32);
                  }

                  sub_10008E594();
                  swift_allocError();
                  void *v122 = 31;
                  swift_willThrow();
                  sub_100075868(v117, v32);
                  sub_100075868(v13, v12);
                  uint64_t v23 = v33;
LABEL_16:
                  sub_10006D144(v23, v3);
                  goto LABEL_17;
                }
LABEL_136:
                swift_once();
                goto LABEL_124;
              }
              continue;
            }
LABEL_68:
            swift_bridgeObjectRelease();
            sub_10006D144(v33, v35);
LABEL_80:
            unint64_t v126 = v2;
            uint64_t v123 = v13;
            unint64_t v63 = v137;
            if (qword_1004536D0 != -1) {
              swift_once();
            }
            uint64_t v75 = type metadata accessor for Logger();
            sub_10008E55C(v75, (uint64_t)qword_1004686A8);
            id v59 = v28;
            v65 = Logger.logObject.getter();
            os_log_type_t v76 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v65, v76)) {
              goto LABEL_85;
            }
            unint64_t v148 = v12;
            v67 = (uint8_t *)swift_slowAlloc();
            v151[0] = swift_slowAlloc();
            *(_DWORD *)v67 = 136315138;
            id v77 = [v59 value];
            if (v77)
            {
              v78 = v77;
              uint64_t v142 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v80 = v79;

              *(void *)(v1 + 80) = sub_10023CDF4(v142, v80);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_1000756D0();
              uint64_t v81 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v83 = v82;
              swift_bridgeObjectRelease();
              sub_10006D144(v142, v80);
            }
            else
            {
              uint64_t v81 = 7104878;
              unint64_t v83 = 0xE300000000000000;
            }
            *(void *)(v1 + 64) = sub_100290514(v81, v83, v151);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            os_log_type_t v87 = v76;
            v88 = "performSEAuthenticatedGetData: Bad challenge %s in signature response";
LABEL_93:
            _os_log_impl((void *)&_mh_execute_header, v65, v87, v88, v67, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            unint64_t v63 = v137;
            unint64_t v12 = v148;
LABEL_94:
            sub_10008E594();
            swift_allocError();
            void *v89 = 31;
            swift_willThrow();
            sub_100075868(v12, v126);
            uint64_t v85 = v123;
            unint64_t v86 = v63;
LABEL_116:
            sub_100075868(v85, v86);
            sub_10006D144(v136, v131);

LABEL_17:
            uint64_t v24 = *(uint64_t (**)(void))(v1 + 8);
LABEL_18:
            return v24();
          case 2uLL:
            uint64_t v50 = *(void *)(v33 + 16);
            uint64_t v49 = *(void *)(v33 + 24);
            BOOL v7 = __OFSUB__(v49, v50);
            uint64_t v42 = v49 - v50;
            if (!v7) {
              goto LABEL_57;
            }
            goto LABEL_133;
          case 3uLL:
            goto LABEL_68;
          default:
            uint64_t v42 = BYTE6(v35);
            goto LABEL_57;
        }
      }
    case 2uLL:
      uint64_t v6 = *(void *)(v2 + 16);
      uint64_t v5 = *(void *)(v2 + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_120;
    case 3uLL:
      goto LABEL_11;
    default:
      uint64_t v4 = BYTE6(v3);
      goto LABEL_6;
  }
}

uint64_t sub_10028C6A8()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10028C70C(uint64_t a1)
{
  *(void *)(v1 + 232) = a1;
  uint64_t v2 = dword_100456F38;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 240) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_10028C7E4;
  return ((uint64_t (*)(uint64_t))((char *)&dword_100456F38 + v2))(v1 + 144);
}

uint64_t sub_10028C7E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 248) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_10028C95C, 0, 0);
  }
}

uint64_t sub_10028C95C()
{
  uint64_t v30 = v0;
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1003782A0;
  *(void *)(inited + 32) = 1635017060;
  *(void *)(inited + 40) = 0xE400000000000000;
  uint64_t v2 = sub_10021E168();
  uint64_t v3 = sub_10006C51C(&qword_100457240);
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 72) = v3;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001003B9FB0;
  sub_10006C51C(&qword_10045B590);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1003782A0;
  *(Swift::String *)(v4 + 32) = Data.base64EncodedString(options:)(0);
  *(Swift::String *)(v4 + 48) = Data.base64EncodedString(options:)(0);
  *(void *)(inited + 120) = sub_10006C51C((uint64_t *)&unk_100455EA0);
  *(void *)(inited + 96) = v4;
  sub_1001DB224(inited);
  uint64_t v5 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 208) = 0;
  uint64_t v7 = v0 + 144;
  id v8 = [v5 dataWithJSONObject:isa options:0 error:v0 + 208];

  id v9 = *(id *)(v0 + 208);
  if (!v8)
  {
    os_log_type_t v16 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  uint64_t v14 = sub_100196448();
  if (v10)
  {
    sub_10006D144(v11, v13);
LABEL_5:
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10008E55C(v17, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    Swift::String v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)unint64_t v20 = 136315138;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      *(void *)(v0 + 224) = sub_100290514(v21, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error %s when signing report", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v7 = v0 + 144;
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v23 = 14;
    swift_willThrow();
    swift_errorRelease();
    sub_10028CF30(v7);
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  uint64_t v26 = v14;
  uint64_t v27 = v15;
  sub_10028CF30(v0 + 144);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v0 + 8);
  return v28(v26, v27, v11, v13);
}

uint64_t sub_10028CE0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10028CE74(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10028CED4()
{
  return _swift_deallocObject(v0, 32, 7);
}

id sub_10028CF14()
{
  return sub_10029563C(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10028CF30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(void *)(a1 + 32);

  sub_10006D144(v2, v3);
  sub_10006D144(v4, v5);
  return a1;
}

uint64_t sub_10028CF8C()
{
  sub_10006D144(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10028CFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  id v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *id v8 = v3;
  v8[1] = sub_10011F7E8;
  v8[9] = v7;
  v8[10] = v6;
  v8[7] = a1;
  v8[8] = a2;
  return _swift_task_switch(sub_100288AA4, 0, 0);
}

uint64_t sub_10028D084(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045A778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028D0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045A778);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10028D154(uint64_t a1)
{
  return sub_10028D244(a1, 0xD00000000000043CLL, 0x80000001003BB990, &qword_1004689A0, (unint64_t *)algn_1004689A8);
}

uint64_t sub_10028D17C(uint64_t a1)
{
  return sub_10028D244(a1, 0xD000000000000558, 0x80000001003BAED0, &qword_1004689B0, (unint64_t *)algn_1004689B8);
}

uint64_t sub_10028D1A4(uint64_t a1)
{
  return sub_10028D244(a1, 0xD000000000000554, 0x80000001003BB430, &qword_1004689C0, (unint64_t *)algn_1004689C8);
}

uint64_t sub_10028D1CC(uint64_t a1)
{
  return sub_10028D244(a1, 0xD00000000000041CLL, 0x80000001003BAAB0, &qword_1004689D0, (unint64_t *)algn_1004689D8);
}

uint64_t sub_10028D1F4(uint64_t a1)
{
  return sub_10028D244(a1, 0xD000000000000548, 0x80000001003BA560, &qword_1004689E0, (unint64_t *)algn_1004689E8);
}

uint64_t sub_10028D21C(uint64_t a1)
{
  return sub_10028D244(a1, 0xD000000000000548, 0x80000001003BA010, &qword_1004689F0, (unint64_t *)algn_1004689F8);
}

uint64_t sub_10028D244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t result = Data.init(base64Encoded:options:)();
  if (v8 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = result;
    *a5 = v8;
  }
  return result;
}

void sub_10028D290()
{
  uint64_t v1 = v0;
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting Context Timer for client %d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  sub_100052A0C(*(void *)(v1 + 24), 14.5, 0.5);
}

void sub_10028D398()
{
  uint64_t v1 = v0;
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Invalidating context for client %d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  sub_100052B14(*(void *)(v1 + 24));
}

uint64_t sub_10028D498()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced35SECPresentmentIntentCooldownContext_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_10028D540()
{
  return type metadata accessor for SECPresentmentIntentCooldownContext();
}

uint64_t type metadata accessor for SECPresentmentIntentCooldownContext()
{
  uint64_t result = qword_10045A7E0;
  if (!qword_10045A7E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10028D594()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10028D64C()
{
  unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK + 8);
  if (v1 >> 60 == 15
    || (unint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId + 8), v2 >> 60 == 15))
  {
    if (qword_100453920 != -1) {
      swift_once();
    }
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "StepUpSK not initialized, cannot setup event", v5, 2u);
      swift_slowDealloc();
    }

    sub_10007567C();
    swift_allocError();
    *uint64_t v6 = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK);
    uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId);
    uint64_t v10 = *(void **)(v0 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stsHelper);
    sub_1000758F4(v8, *(void *)(v0 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK + 8));
    sub_1000758F4(v9, v2);
    id v11 = [v10 startISO18013WithConnectionHandoverConfiguration:32 type:2 delegate:v0];
    if (v11)
    {
      unint64_t v12 = v11;
      if (qword_100453920 != -1) {
        swift_once();
      }
      id v13 = v12;
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
        v50[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v16 = 136315138;
        swift_getErrorValue();
        uint64_t v17 = Error.localizedDescription.getter();
        sub_100290514(v17, v18, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Could not startISO18013: %s", v16, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      sub_10007567C();
      swift_allocError();
      *uint64_t v28 = 0;
      swift_willThrow();

      uint64_t v29 = v9;
    }
    else
    {
      uint64_t v46 = v10;
      sub_10006C51C(&qword_100455670);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_100378470;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 72) = 0xD000000000000012;
      *(void *)(inited + 80) = 0x80000001003B1A40;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 168) = &type metadata for Data;
      *(void *)(inited + 144) = v9;
      *(void *)(inited + 152) = v2;
      v50[0] = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v50[1] = v20;
      uint64_t v48 = v9;
      sub_10006D0EC(v9, v2);
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 240) = &type metadata for Data;
      *(void *)(inited + 216) = v8;
      *(void *)(inited + 224) = v1;
      sub_10006D0EC(v8, v1);
      sub_1001DB24C(inited);
      if (qword_100453920 != -1) {
        swift_once();
      }
      swift_bridgeObjectRetain_n();
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.info.getter();
      unint64_t v49 = v2;
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v47 = v8;
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        v50[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136642819;
        swift_bridgeObjectRetain();
        uint64_t v24 = Dictionary.description.getter();
        unint64_t v26 = v25;
        swift_bridgeObjectRelease();
        uint64_t v27 = v24;
        uint64_t v8 = v47;
        sub_100290514(v27, v26, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Sending event dictionary %{sensitive}s to stepup", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10006D0EC(v8, v1);
      sub_10006D0EC(v8, v1);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        unint64_t v32 = (uint8_t *)swift_slowAlloc();
        v50[0] = swift_slowAlloc();
        *(_DWORD *)unint64_t v32 = 136642819;
        buf = v32;
        sub_10023CDF4(v8, v1);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_1000756D0();
        uint64_t v33 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v35 = v34;
        swift_bridgeObjectRelease();
        sub_100290514(v33, v35, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100075868(v8, v1);
        sub_100075868(v8, v1);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Has stepupSK %{sensitive}s", buf, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100075868(v8, v1);
        sub_100075868(v8, v1);
      }

      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v37 = [v46 signalUnifiedAccessStepUpWithEventDictionary:isa];

      unint64_t v2 = v49;
      if (v37)
      {
        id v38 = v37;
        unint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v39, v40))
        {
          unint64_t v41 = (uint8_t *)swift_slowAlloc();
          v50[0] = swift_slowAlloc();
          *(_DWORD *)unint64_t v41 = 136315138;
          swift_getErrorValue();
          uint64_t v42 = Error.localizedDescription.getter();
          sub_100290514(v42, v43, v50);
          unint64_t v2 = v49;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Could not create lyonStepUp object with error: %s", v41, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        sub_10007567C();
        swift_allocError();
        *uint64_t v44 = 0;
        swift_willThrow();
      }
      uint64_t v29 = v48;
    }
    sub_100075868(v29, v2);
    return sub_100075868(v8, v1);
  }
}

uint64_t sub_10028E058(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (qword_100453920 != -1) {
    swift_once();
  }
  sub_10006D0EC(a1, a2);
  sub_10006D0EC(a3, a4);
  sub_10006D0EC(a1, a2);
  sub_10006D0EC(a3, a4);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136643075;
    sub_10023CDF4(a1, a2);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_1000756D0();
    log = v10;
    uint64_t v13 = BidirectionalCollection<>.joined(separator:)();
    os_log_type_t type = v11;
    unint64_t v15 = v14;
    swift_bridgeObjectRelease();
    sub_100290514(v13, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a1, a2);
    sub_10006D144(a1, a2);
    *(_WORD *)(v12 + 12) = 2080;
    sub_10023CDF4(a3, a4);
    uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    sub_100290514(v16, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10006D144(a3, a4);
    sub_10006D144(a3, a4);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Received stepupSK %{sensitive}s for endpoint %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10006D144(a1, a2);
    sub_10006D144(a1, a2);
    sub_10006D144(a3, a4);
    sub_10006D144(a3, a4);
  }
  os_log_type_t v19 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK);
  uint64_t v20 = *(void *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK);
  unint64_t v21 = *(void *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_stepUpSK + 8);
  *os_log_type_t v19 = a1;
  v19[1] = a2;
  sub_100075868(v20, v21);
  os_log_type_t v22 = (uint64_t *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId);
  uint64_t v23 = *(void *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId);
  unint64_t v24 = *(void *)(v5 + OBJC_IVAR____TtC10seserviced16LyonStepUpHelper_endpointId + 8);
  uint64_t *v22 = a3;
  v22[1] = a4;
  sub_10006D0EC(a1, a2);
  sub_100075868(v23, v24);
  return sub_10006D0EC(a3, a4);
}

uint64_t sub_10028E464(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, uint64_t))
{
  if (a3)
  {
    swift_errorRetain();
    a5(a3, 0, 1);
LABEL_5:
    return swift_errorRelease();
  }
  if (a2 >> 60 == 15)
  {
    sub_100204F6C();
    uint64_t v8 = swift_allocError();
    *uint64_t v9 = 0;
    a5(v8, 0, 1);
    goto LABEL_5;
  }
  sub_10006D0EC(a1, a2);
  a5(a1, a2, 0);

  return sub_100075868(a1, a2);
}

uint64_t type metadata accessor for LyonStepUpHelper()
{
  return self;
}

uint64_t sub_10028E5F0()
{
  uint64_t v0 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v0 - 8, v1);
  os_log_type_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UUID();
  sub_1000AD8C8(v4, qword_100468A00);
  uint64_t v5 = sub_10008E55C(v4, (uint64_t)qword_100468A00);
  UUID.init(uuidString:)();
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v3, 1, v4);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v5, v3, v4);
  }
  __break(1u);
  return result;
}

uint64_t sub_10028E720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_10008E734(a1, &qword_100455C60);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

void CredentialInternalServer.listCredentialsInternal(reply:)(void (*a1)(void, uint64_t), uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v19[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v8 = [self currentConnection];
  if (v8)
  {
    uint64_t v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 valueForEntitlement:v10];

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v20, 0, sizeof(v20));
    }
    sub_100115118((uint64_t)v20, (uint64_t)v21);
    if (v21[3])
    {
      if ((swift_dynamicCast() & 1) != 0 && v19[15] == 1)
      {
        uint64_t v12 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
        uint64_t v13 = (void *)swift_allocObject();
        v13[2] = 0;
        v13[3] = 0;
        v13[4] = a1;
        v13[5] = a2;
        swift_retain();
        sub_10028E720((uint64_t)v7, (uint64_t)&unk_10045A970, (uint64_t)v13);
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v21, (uint64_t *)&unk_1004556C0);
    }
  }
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)&v20[0] = sub_100290514(0xD00000000000001FLL, 0x80000001003BBE90, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: Client not entitled", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10008E594();
  uint64_t v17 = swift_allocError();
  *unint64_t v18 = 15;
  a1(0, v17);
  swift_errorRelease();
}

uint64_t sub_10028EC30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[3] = a4;
  v5[4] = a5;
  sub_10006C51C(&qword_100455EB0);
  v5[5] = swift_task_alloc();
  return _swift_task_switch(sub_10028ECC4, 0, 0);
}

uint64_t sub_10028ECC4()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 48) = qword_100468A98;
  return _swift_task_switch(sub_10028ED5C, v1, 0);
}

uint64_t sub_10028ED5C()
{
  *(void *)(v0 + 56) = sub_1002EEA60(0, 0);
  *(void *)(v0 + 64) = 0;
  return _swift_task_switch(sub_10028EDF0, 0, 0);
}

uint64_t sub_10028EDF0()
{
  uint64_t v1 = v0[5];
  v0[2] = v0[7];
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10028EEFC;
  uint64_t v4 = v0[5];
  return sub_1002AB530((uint64_t)(v0 + 2), 0xD000000000000019, 0x80000001003BBF40, v4);
}

uint64_t sub_10028EEFC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10008E734(*(void *)(v2 + 40), &qword_100455EB0);
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10028F168;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 40);
    swift_bridgeObjectRelease();
    sub_10008E734(v4, &qword_100455EB0);
    uint64_t v3 = sub_10028F050;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10028F050()
{
  (*(void (**)(void, void))(v0 + 24))(*(void *)(v0 + 16), 0);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10028F0D0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = (void (*)(void, uint64_t))v0[3];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10028F168()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = (void (*)(void, uint64_t))v0[3];
  swift_errorRetain();
  v2(0, v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void CredentialInternalServer.deleteCredential(uuid:reply:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v35 + 64);
  __chkstk_darwin(v6, v8);
  uint64_t v9 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self currentConnection];
  if (v14)
  {
    os_log_type_t v15 = v14;
    uint64_t v34 = a1;
    uint64_t v16 = a2;
    uint64_t v17 = a3;
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v15 valueForEntitlement:v18];

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v37, 0, sizeof(v37));
    }
    uint64_t v20 = v17;
    a2 = v16;
    sub_100115118((uint64_t)v37, (uint64_t)v38);
    if (v38[3])
    {
      if ((swift_dynamicCast() & 1) != 0 && v36 == 1)
      {
        uint64_t v21 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
        uint64_t v22 = v35;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))((char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v6);
        unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
        uint64_t v24 = v7 + v23 + 7;
        unint64_t v25 = a2;
        unint64_t v26 = v24 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v27 + v23, v9, v6);
        uint64_t v28 = (void (**)(void))(v27 + v26);
        *uint64_t v28 = v25;
        v28[1] = v20;
        swift_retain();
        sub_10028E720((uint64_t)v13, (uint64_t)&unk_10045A980, v27);
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v38, (uint64_t *)&unk_1004556C0);
    }
  }
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v29, v30))
  {
    os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
    v38[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v31 = 136315138;
    *(void *)&v37[0] = sub_100290514(0xD00000000000001DLL, 0x80000001003BBEE0, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: Client not entitled", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  *unint64_t v32 = 15;
  a2();
  swift_errorRelease();
}

uint64_t sub_10028F6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return _swift_task_switch(sub_10028F6E0, 0, 0);
}

uint64_t sub_10028F6E0()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  void *v1 = v0;
  v1[1] = sub_10028F7AC;
  uint64_t v2 = *(void *)(v0 + 16);
  return sub_1002EBB90(v2);
}

uint64_t sub_10028F7AC()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10028F928;
  }
  else {
    uint64_t v2 = sub_10028F8C0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10028F8C0()
{
  (*(void (**)(void))(v0 + 24))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10028F928()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

void CredentialInternalServer.deleteApplication(identifier:reply:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = [self currentConnection];
  if (v12)
  {
    uint64_t v13 = v12;
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 valueForEntitlement:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_100115118((uint64_t)v23, (uint64_t)v24);
    if (v24[3])
    {
      if ((swift_dynamicCast() & 1) != 0 && v22[15] == 1)
      {
        uint64_t v16 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
        uint64_t v17 = (void *)swift_allocObject();
        v17[2] = 0;
        v17[3] = 0;
        v17[4] = a1;
        v17[5] = a2;
        v17[6] = a3;
        v17[7] = a4;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10028E720((uint64_t)v11, (uint64_t)&unk_10045A990, (uint64_t)v17);
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v24, (uint64_t *)&unk_1004556C0);
    }
  }
  NSString v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136315138;
    *(void *)&v23[0] = sub_100290514(0xD000000000000024, 0x80000001003BBF00, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: Client not entitled", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v21 = 15;
  a3();
  swift_errorRelease();
}

uint64_t sub_10028FE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  return _swift_task_switch(sub_10028FF08, 0, 0);
}

uint64_t sub_10028FF08()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 72) = qword_100468A98;
  return _swift_task_switch(sub_10028FFA0, v1, 0);
}

uint64_t sub_10028FFA0()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  id v7 = [*(id *)(v2 + 112) viewContext];
  v0[10] = v7;
  uint64_t v8 = (void *)swift_allocObject();
  v0[11] = v8;
  v8[2] = v2;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  swift_retain();
  swift_bridgeObjectRetain();
  v7;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100290100;
  uint64_t v10 = v0[8];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v10, sub_100291C80, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_100290100()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  uint64_t v6 = *(void *)(v2 + 72);
  if (v0) {
    id v7 = sub_100290384;
  }
  else {
    id v7 = sub_1002902AC;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1002902AC()
{
  return _swift_task_switch(sub_100290314, 0, 0);
}

uint64_t sub_100290314()
{
  (*(void (**)(void))(v0 + 32))(0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100290384()
{
  return _swift_task_switch(sub_1002903EC, 0, 0);
}

uint64_t sub_1002903EC()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = (void (*)(uint64_t))v0[4];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100290514(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1002905E8(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1000AA580((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1000AA580((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10007594C((uint64_t)v12);
  return v7;
}

uint64_t sub_1002905E8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1002907A4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1002907A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_10029083C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1002909B4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1002909B4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_10029083C(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_10018C198(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1002909B4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_1004568A8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100290B08(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  int64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *int64_t v8 = v2;
  v8[1] = sub_10011FE60;
  return sub_10028EC30(a1, v4, v5, v7, v6);
}

uint64_t sub_100290BCC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10011FE60;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = v5;
  return _swift_task_switch(sub_10028F6E0, 0, 0);
}

uint64_t sub_100290CEC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10011FE60;
  return sub_10028FE44(a1, v4, v5, v6, v7, v9, v8);
}

void sub_100290DC0(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v3 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  uint64_t v8 = self;
  _Block_copy(a2);
  id v9 = [v8 currentConnection];
  if (v9)
  {
    uint64_t v10 = v9;
    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v10 valueForEntitlement:v11];

    if (v12)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v21, 0, sizeof(v21));
    }
    sub_100115118((uint64_t)v21, (uint64_t)v22);
    if (v22[3])
    {
      if (swift_dynamicCast() & 1) != 0 && (v20[15])
      {
        uint64_t v13 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
        NSString v14 = (void *)swift_allocObject();
        v14[2] = 0;
        v14[3] = 0;
        v14[4] = sub_1001D49C0;
        v14[5] = v7;
        swift_retain();
        sub_10028E720((uint64_t)v6, (uint64_t)&unk_10045A9A8, (uint64_t)v14);
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v22, (uint64_t *)&unk_1004556C0);
    }
  }
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    v22[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    *(void *)&v21[0] = sub_100290514(0xD00000000000001FLL, 0x80000001003BBE90, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s: Client not entitled", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  *NSString v18 = 15;
  os_log_type_t v19 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void, void *))a2)[2](a2, 0, v19);

  swift_errorRelease();
  swift_release();
}

void sub_100291184(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v30 + 64);
  __chkstk_darwin(v5, v7);
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v8 - 8, v9);
  NSString v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a3;
  uint64_t v13 = self;
  _Block_copy(a3);
  id v14 = [v13 currentConnection];
  if (v14)
  {
    id v15 = v14;
    uint64_t v29 = a1;
    NSString v16 = String._bridgeToObjectiveC()();
    id v17 = [v15 valueForEntitlement:v16];

    if (v17)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v32, 0, sizeof(v32));
    }
    sub_100115118((uint64_t)v32, (uint64_t)v33);
    if (v33[3])
    {
      if (swift_dynamicCast() & 1) != 0 && (v31)
      {
        uint64_t v18 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
        uint64_t v19 = v30;
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v5);
        unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(v21 + v20, (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
        uint64_t v22 = (void *)(v21 + ((v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8));
        void *v22 = sub_10011FE58;
        v22[1] = v12;
        swift_retain();
        sub_10028E720((uint64_t)v11, (uint64_t)&unk_10045A9A0, v21);
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v33, (uint64_t *)&unk_1004556C0);
    }
  }
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v25 = 136315138;
    *(void *)&v32[0] = sub_100290514(0xD00000000000001DLL, 0x80000001003BBEE0, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s: Client not entitled", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  *unint64_t v26 = 15;
  uint64_t v27 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a3)[2](a3, v27);

  swift_errorRelease();
  swift_release();
}

void sub_100291624(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v7 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  uint64_t v12 = self;
  _Block_copy(a4);
  id v13 = [v12 currentConnection];
  if (v13)
  {
    id v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 valueForEntitlement:v15];

    if (v16)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v25, 0, sizeof(v25));
    }
    sub_100115118((uint64_t)v25, (uint64_t)v26);
    if (v26[3])
    {
      if (swift_dynamicCast() & 1) != 0 && (v24[15])
      {
        uint64_t v17 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
        uint64_t v18 = (void *)swift_allocObject();
        v18[2] = 0;
        v18[3] = 0;
        v18[4] = a1;
        v18[5] = a2;
        v18[6] = sub_10011F6D0;
        v18[7] = v11;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10028E720((uint64_t)v10, (uint64_t)&unk_10045A998, (uint64_t)v18);
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v26, (uint64_t *)&unk_1004556C0);
    }
  }
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315138;
    *(void *)&v25[0] = sub_100290514(0xD000000000000024, 0x80000001003BBF00, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s: Client not entitled", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  void *v22 = 15;
  unint64_t v23 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a4)[2](a4, v23);

  swift_errorRelease();
  swift_release();
}

uint64_t sub_100291A00()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100291A3C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100291A88()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100291B78(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10011F7E8;
  return sub_10028EC30(a1, v4, v5, v7, v6);
}

uint64_t sub_100291C38()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100291C80()
{
  sub_1001229FC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_100291CA0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100291CE0()
{
  v1[28] = v0;
  uint64_t v2 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v1[29] = v2;
  v1[30] = *(void *)(v2 - 8);
  v1[31] = swift_task_alloc();
  v1[32] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v1[33] = v3;
  v1[34] = *(void *)(v3 - 8);
  v1[35] = swift_task_alloc();
  v1[36] = swift_task_alloc();
  v1[37] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SECPresentmentReport(0);
  v1[38] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[39] = v5;
  v1[40] = *(void *)(v5 + 64);
  v1[41] = swift_task_alloc();
  v1[42] = swift_task_alloc();
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  return _swift_task_switch(sub_100291EB4, v0, 0);
}

uint64_t sub_100291EB4()
{
  uint64_t v116 = v0;
  uint64_t v1 = v0 + 224;
  uint64_t v2 = (uint64_t *)(v0 + 208);
  *(void *)(v0 + 208) = sub_10029591C();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v0 + 360) = sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v114 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_beginAccess();
    uint64_t v7 = *v2;
    int64_t v8 = *(void *)(*v2 + 16);
    if (v8)
    {
      os_log_type_t v101 = v5;
      uint64_t v103 = v6;
      os_log_type_t v105 = v4;
      uint64_t v9 = *(void *)(v0 + 312);
      v115 = _swiftEmptyArrayStorage;
      uint64_t v10 = v7;
      swift_bridgeObjectRetain();
      sub_1002CF974(0, v8, 0);
      uint64_t v11 = v10 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v12 = *(void *)(v9 + 72);
      id v13 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v14 = *(void *)(v0 + 352);
        sub_100296A3C(v11, v14, type metadata accessor for SECPresentmentReport);
        uint64_t v15 = UUID.uuidString.getter();
        uint64_t v17 = v16;
        sub_100296AA4(v14, type metadata accessor for SECPresentmentReport);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CF974(0, v13[2] + 1, 1);
          id v13 = v115;
        }
        unint64_t v19 = v13[2];
        unint64_t v18 = v13[3];
        if (v19 >= v18 >> 1)
        {
          sub_1002CF974(v18 > 1, v19 + 1, 1);
          id v13 = v115;
        }
        v13[2] = v19 + 1;
        os_log_type_t v20 = &v13[2 * v19];
        v20[4] = v15;
        v20[5] = v17;
        v11 += v12;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      uint64_t v1 = v0 + 224;
      uint64_t v6 = v103;
      uint64_t v4 = v105;
      os_log_type_t v5 = v101;
    }
    uint64_t v21 = Array.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 216) = sub_100290514(v21, v23, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "stored reports %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v24 = sub_10029610C();
  *(void *)(v0 + 368) = v24;
  uint64_t v25 = *(void *)(v0 + 272);
  char v26 = *(unsigned char *)(v24 + 32);
  *(unsigned char *)(v0 + 476) = v26;
  uint64_t v27 = -1;
  uint64_t v28 = -1 << v26;
  uint64_t v29 = *(void *)(v24 + 64);
  if (-v28 < 64) {
    uint64_t v27 = ~(-1 << -(char)v28);
  }
  *(_DWORD *)(v0 + 472) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  unint64_t v30 = v27 & v29;
  if (!v30)
  {
    unint64_t v88 = 63 - v28;
    if (v88 > 0x7F)
    {
      unint64_t v89 = *(void *)(v24 + 72);
      if (v89)
      {
        uint64_t v31 = 1;
LABEL_39:
        uint64_t v33 = (v89 - 1) & v89;
        unint64_t v32 = __clz(__rbit64(v89)) + (v31 << 6);
        goto LABEL_17;
      }
      if (v88 >= 0xC0)
      {
        unint64_t v89 = *(void *)(v24 + 80);
        if (v89)
        {
          uint64_t v31 = 2;
          goto LABEL_39;
        }
        if (v88 >= 0x100)
        {
          unint64_t v89 = *(void *)(v24 + 88);
          if (v89)
          {
            uint64_t v31 = 3;
            goto LABEL_39;
          }
          if (v88 >= 0x140)
          {
            unint64_t v89 = *(void *)(v24 + 96);
            if (v89)
            {
              uint64_t v31 = 4;
              goto LABEL_39;
            }
            uint64_t v90 = 0;
            uint64_t v91 = v88 >> 6;
            if (v91 <= 5) {
              uint64_t v91 = 5;
            }
            uint64_t v92 = v91 - 5;
            while (v92 != v90)
            {
              unint64_t v89 = *(void *)(v24 + 104 + 8 * v90++);
              if (v89)
              {
                uint64_t v31 = v90 + 4;
                goto LABEL_39;
              }
            }
          }
        }
      }
    }
    swift_release();
    uint64_t v93 = *(unsigned int *)(v0 + 472);
    uint64_t v95 = *(void *)(v0 + 240);
    uint64_t v94 = *(void *)(v0 + 248);
    uint64_t v97 = *(void *)(v0 + 224);
    uint64_t v96 = *(void *)(v0 + 232);
    id v98 = [*(id *)(v97 + 112) viewContext];
    *(void *)(v0 + 440) = v98;
    uint64_t v99 = swift_allocObject();
    *(void *)(v0 + 448) = v99;
    *(void *)(v99 + 16) = v98;
    *(void *)(v99 + 24) = v97;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 104))(v94, v93, v96);
    v98;
    swift_retain();
    unint64_t v83 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v83;
    *unint64_t v83 = v0;
    v83[1] = sub_100293618;
    uint64_t v84 = *(void *)(v0 + 248);
    uint64_t v85 = (char *)&type metadata for () + 8;
    unint64_t v86 = sub_10029697C;
    uint64_t v87 = v99;
    goto LABEL_56;
  }
  uint64_t v31 = 0;
  unint64_t v32 = __clz(__rbit64(v30));
  uint64_t v33 = (v30 - 1) & v30;
LABEL_17:
  uint64_t v34 = (void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
  *(void *)(v0 + 376) = v31;
  *(void *)(v0 + 384) = v33;
  uint64_t v36 = *(void *)(v0 + 288);
  uint64_t v35 = *(void *)(v0 + 296);
  uint64_t v37 = *(void *)(v0 + 264);
  uint64_t v38 = *(void *)(*(void *)(v24 + 48) + 8 * v32);
  uint64_t v102 = *(void *)(*(void *)(v24 + 56) + 8 * v32);
  swift_bridgeObjectRetain();
  UUID.init()();
  unint64_t v111 = *v34;
  (*v34)(v36, v35, v37);
  unint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v42 = *(void *)(v0 + 288);
  uint64_t v43 = *(void *)(v0 + 264);
  uint64_t v44 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 272) + 8);
  uint64_t v106 = v1;
  if (v41)
  {
    uint64_t v45 = swift_slowAlloc();
    v115 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 136315394;
    uint64_t v46 = UUID.uuidString.getter();
    *(void *)(v45 + 4) = sub_100290514(v46, v47, (uint64_t *)&v115);
    swift_bridgeObjectRelease();
    uint64_t v48 = *v44;
    (*v44)(v42, v43);
    *(_WORD *)(v45 + 12) = 2048;
    *(void *)(v45 + 14) = v38;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Generating report with uuid %s for timestamp %f", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v48 = *v44;
    (*v44)(v42, v43);
  }

  v104 = v48;
  *(void *)(v0 + 392) = v48;
  uint64_t v49 = *(void *)(v0 + 344);
  uint64_t v50 = *(void *)(v0 + 304);
  uint64_t v51 = *(void *)(v0 + 280);
  uint64_t v52 = *(void *)(v0 + 264);
  v111(v51, *(void *)(v0 + 296), v52);
  v111(v49, v51, v52);
  *(void *)(v49 + *(int *)(v50 + 20)) = v38;
  uint64_t v109 = *(int *)(v50 + 24);
  uint64_t v112 = v49;
  *(void *)(v49 + v109) = _swiftEmptyArrayStorage;
  uint64_t v53 = sub_1002208C8(v102);
  swift_bridgeObjectRelease();
  uint64_t v54 = v53[2];
  if (v54)
  {
    uint64_t v55 = (long long *)(v106 - 208);
    uint64_t v56 = v106 - 168;
    uint64_t v57 = (void *)(v106 - 128);
    swift_bridgeObjectRetain();
    uint64_t v58 = 0;
    id v59 = _swiftEmptyArrayStorage;
    id v107 = v53;
    do
    {
      uint64_t v60 = v53[v58 + 4];
      swift_bridgeObjectRetain_n();
      sub_10021FC64(v60, v57);
      sub_10029676C((uint64_t)v57, v56);
      if (*(void *)(v0 + 72))
      {
        long long v61 = *(_OWORD *)(v56 + 16);
        *uint64_t v55 = *(_OWORD *)v56;
        v55[1] = v61;
        *((void *)v55 + 4) = *(void *)(v56 + 32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v59 = sub_10025A578(0, v59[2] + 1, 1, v59);
        }
        unint64_t v63 = v59[2];
        unint64_t v62 = v59[3];
        if (v63 >= v62 >> 1) {
          id v59 = sub_10025A578((void *)(v62 > 1), v63 + 1, 1, v59);
        }
        v59[2] = v63 + 1;
        uint64_t v64 = &v59[5 * v63];
        long long v65 = *v55;
        long long v66 = v55[1];
        v64[8] = *((void *)v55 + 4);
        *((_OWORD *)v64 + 2) = v65;
        *((_OWORD *)v64 + 3) = v66;
        swift_bridgeObjectRelease();
        *(void *)(v112 + v109) = v59;
        uint64_t v53 = v107;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v58;
    }
    while (v54 != v58);
    swift_bridgeObjectRelease();
  }
  uint64_t v67 = *(void *)(v0 + 336);
  uint64_t v68 = *(void *)(v0 + 344);
  uint64_t v69 = *(void *)(v0 + 280);
  uint64_t v70 = *(void *)(v0 + 264);
  *(void *)(v0 + 400) = (*(void *)(v0 + 272) + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v104(v69, v70);
  swift_bridgeObjectRelease();
  sub_100296A3C(v68, v67, type metadata accessor for SECPresentmentReport);
  swift_beginAccess();
  unint64_t v71 = *(void *)(v0 + 208);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v71 = sub_10025A7CC(0, *(void *)(v71 + 16) + 1, 1, v71);
  }
  unint64_t v73 = *(void *)(v71 + 16);
  unint64_t v72 = *(void *)(v71 + 24);
  if (v73 >= v72 >> 1) {
    unint64_t v71 = sub_10025A7CC(v72 > 1, v73 + 1, 1, v71);
  }
  unsigned int v113 = *(_DWORD *)(v0 + 472);
  uint64_t v74 = *(void *)(v0 + 344);
  uint64_t v75 = *(void *)(v0 + 352);
  uint64_t v76 = *(void *)(v0 + 336);
  uint64_t v77 = *(void *)(v0 + 312);
  uint64_t v78 = *(void *)(v0 + 240);
  uint64_t v108 = *(void *)(v0 + 232);
  uint64_t v110 = *(void *)(v0 + 256);
  uint64_t v79 = *(void *)(v0 + 224);
  *(void *)(v71 + 16) = v73 + 1;
  uint64_t v80 = *(unsigned __int8 *)(v77 + 80);
  sub_100296B04(v76, v71 + ((v80 + 32) & ~v80) + *(void *)(v77 + 72) * v73, type metadata accessor for SECPresentmentReport);
  *(void *)(v0 + 208) = v71;
  swift_endAccess();
  id v81 = [*(id *)(v79 + 112) viewContext];
  *(void *)(v0 + 408) = v81;
  sub_100296A3C(v74, v75, type metadata accessor for SECPresentmentReport);
  uint64_t v82 = swift_allocObject();
  *(void *)(v0 + 416) = v82;
  *(void *)(v82 + 16) = v81;
  sub_100296B04(v75, v82 + ((v80 + 24) & ~v80), type metadata accessor for SECPresentmentReport);
  (*(void (**)(uint64_t, void, uint64_t))(v78 + 104))(v110, v113, v108);
  v81;
  unint64_t v83 = (void *)swift_task_alloc();
  *(void *)(v0 + 424) = v83;
  *unint64_t v83 = v0;
  v83[1] = sub_1002929F0;
  uint64_t v84 = *(void *)(v0 + 256);
  uint64_t v85 = (char *)&type metadata for () + 8;
  unint64_t v86 = sub_1002968CC;
  uint64_t v87 = v82;
LABEL_56:
  return NSManagedObjectContext.perform<A>(schedule:_:)(v83, v84, v86, v87, v85);
}

uint64_t sub_1002929F0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 432) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[32];
  uint64_t v4 = v2[30];
  uint64_t v5 = v2[29];
  uint64_t v6 = v2[28];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0) {
    uint64_t v7 = sub_1002934F0;
  }
  else {
    uint64_t v7 = sub_100292B88;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100292B88()
{
  uint64_t v101 = v0;
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 328);

  sub_100296A3C(v1, v2, type metadata accessor for SECPresentmentReport);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 392);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v9 = *(void *)(v0 + 296);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v98 = v0;
  if (v5)
  {
    uint64_t v94 = *(void *)(v0 + 296);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v100 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    sub_10021E168();
    uint64_t v90 = v6;
    uint64_t v12 = Dictionary.description.getter();
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    *(void *)(v11 + 4) = sub_100290514(v12, v14, &v100);
    swift_bridgeObjectRelease();
    sub_100296AA4(v8, type metadata accessor for SECPresentmentReport);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "stored this report %s", (uint8_t *)v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100296AA4(v7, type metadata accessor for SECPresentmentReport);
    uint64_t v15 = (void *)v90(v94, v10);
    int64_t v20 = *(void *)(v0 + 376);
    unint64_t v21 = *(void *)(v0 + 384);
    if (v21)
    {
LABEL_3:
      uint64_t v22 = (v21 - 1) & v21;
      unint64_t v23 = __clz(__rbit64(v21)) | (v20 << 6);
      uint64_t v15 = *(void **)(v0 + 368);
LABEL_4:
      *(void *)(v0 + 376) = v20;
      *(void *)(v0 + 384) = v22;
      uint64_t v25 = *(void *)(v0 + 288);
      uint64_t v24 = *(void *)(v0 + 296);
      uint64_t v27 = *(void *)(v0 + 264);
      uint64_t v26 = *(void *)(v0 + 272);
      uint64_t v28 = *(void *)(v15[6] + 8 * v23);
      uint64_t v29 = *(void *)(v15[7] + 8 * v23);
      swift_bridgeObjectRetain();
      UUID.init()();
      uint64_t v30 = v27;
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      v31(v25, v24, v30);
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = *(void *)(v0 + 288);
      uint64_t v36 = *(void *)(v0 + 264);
      uint64_t v37 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 272) + 8);
      if (v34)
      {
        uint64_t v95 = v31;
        uint64_t v38 = swift_slowAlloc();
        uint64_t v100 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315394;
        uint64_t v39 = UUID.uuidString.getter();
        *(void *)(v38 + 4) = sub_100290514(v39, v40, &v100);
        swift_bridgeObjectRelease();
        BOOL v41 = *v37;
        (*v37)(v35, v36);
        *(_WORD *)(v38 + 12) = 2048;
        *(void *)(v38 + 14) = v28;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Generating report with uuid %s for timestamp %f", (uint8_t *)v38, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v31 = v95;
        swift_slowDealloc();
      }
      else
      {
        BOOL v41 = *v37;
        (*v37)(v35, v36);
      }

      unint64_t v89 = v41;
      *(void *)(v0 + 392) = v41;
      uint64_t v46 = *(void *)(v0 + 344);
      uint64_t v47 = *(void *)(v0 + 304);
      uint64_t v48 = *(void *)(v0 + 280);
      uint64_t v49 = *(void *)(v0 + 264);
      v31(v48, *(void *)(v0 + 296), v49);
      v31(v46, v48, v49);
      *(void *)(v46 + *(int *)(v47 + 20)) = v28;
      uint64_t v92 = *(int *)(v47 + 24);
      uint64_t v96 = v46;
      *(void *)(v46 + v92) = _swiftEmptyArrayStorage;
      uint64_t v50 = sub_1002208C8(v29);
      swift_bridgeObjectRelease();
      uint64_t v51 = v50[2];
      if (v51)
      {
        uint64_t v52 = (void *)(v0 + 96);
        uint64_t v53 = (long long *)(v0 + 16);
        uint64_t v54 = v0 + 56;
        swift_bridgeObjectRetain();
        uint64_t v55 = 0;
        uint64_t v56 = _swiftEmptyArrayStorage;
        uint64_t v91 = v50;
        do
        {
          uint64_t v57 = v50[v55 + 4];
          swift_bridgeObjectRetain_n();
          sub_10021FC64(v57, v52);
          sub_10029676C((uint64_t)v52, v54);
          if (*(void *)(v0 + 72))
          {
            long long v58 = *(_OWORD *)(v54 + 16);
            *uint64_t v53 = *(_OWORD *)v54;
            v53[1] = v58;
            *((void *)v53 + 4) = *(void *)(v54 + 32);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v56 = sub_10025A578(0, v56[2] + 1, 1, v56);
            }
            unint64_t v60 = v56[2];
            unint64_t v59 = v56[3];
            if (v60 >= v59 >> 1) {
              uint64_t v56 = sub_10025A578((void *)(v59 > 1), v60 + 1, 1, v56);
            }
            v56[2] = v60 + 1;
            long long v61 = &v56[5 * v60];
            long long v62 = *v53;
            long long v63 = v53[1];
            v61[8] = *((void *)v53 + 4);
            *((_OWORD *)v61 + 2) = v62;
            *((_OWORD *)v61 + 3) = v63;
            swift_bridgeObjectRelease();
            *(void *)(v96 + v92) = v56;
            uint64_t v0 = v98;
            uint64_t v50 = v91;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          ++v55;
        }
        while (v51 != v55);
        swift_bridgeObjectRelease();
      }
      uint64_t v65 = *(void *)(v0 + 336);
      uint64_t v64 = *(void *)(v0 + 344);
      uint64_t v66 = *(void *)(v0 + 280);
      uint64_t v67 = *(void *)(v0 + 264);
      *(void *)(v0 + 400) = (*(void *)(v0 + 272) + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v89(v66, v67);
      swift_bridgeObjectRelease();
      sub_100296A3C(v64, v65, type metadata accessor for SECPresentmentReport);
      swift_beginAccess();
      unint64_t v68 = *(void *)(v0 + 208);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v68 = sub_10025A7CC(0, *(void *)(v68 + 16) + 1, 1, v68);
      }
      unint64_t v70 = *(void *)(v68 + 16);
      unint64_t v69 = *(void *)(v68 + 24);
      if (v70 >= v69 >> 1) {
        unint64_t v68 = sub_10025A7CC(v69 > 1, v70 + 1, 1, v68);
      }
      unsigned int v99 = *(_DWORD *)(v0 + 472);
      uint64_t v72 = *(void *)(v0 + 344);
      uint64_t v71 = *(void *)(v0 + 352);
      uint64_t v73 = *(void *)(v0 + 336);
      uint64_t v74 = *(void *)(v0 + 312);
      uint64_t v75 = *(void *)(v0 + 240);
      uint64_t v93 = *(void *)(v0 + 232);
      uint64_t v97 = *(void *)(v0 + 256);
      uint64_t v76 = *(void *)(v0 + 224);
      *(void *)(v68 + 16) = v70 + 1;
      uint64_t v77 = *(unsigned __int8 *)(v74 + 80);
      sub_100296B04(v73, v68 + ((v77 + 32) & ~v77) + *(void *)(v74 + 72) * v70, type metadata accessor for SECPresentmentReport);
      *(void *)(v0 + 208) = v68;
      swift_endAccess();
      id v78 = [*(id *)(v76 + 112) viewContext];
      *(void *)(v0 + 408) = v78;
      sub_100296A3C(v72, v71, type metadata accessor for SECPresentmentReport);
      uint64_t v79 = swift_allocObject();
      *(void *)(v0 + 416) = v79;
      *(void *)(v79 + 16) = v78;
      sub_100296B04(v71, v79 + ((v77 + 24) & ~v77), type metadata accessor for SECPresentmentReport);
      (*(void (**)(uint64_t, void, uint64_t))(v75 + 104))(v97, v99, v93);
      v78;
      uint64_t v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 424) = v15;
      *uint64_t v15 = v0;
      v15[1] = sub_1002929F0;
      uint64_t v16 = *(void *)(v0 + 256);
      unint64_t v19 = (char *)&type metadata for () + 8;
      uint64_t v17 = sub_1002968CC;
      uint64_t v18 = v79;
      goto LABEL_39;
    }
  }
  else
  {

    sub_100296AA4(v8, type metadata accessor for SECPresentmentReport);
    sub_100296AA4(v7, type metadata accessor for SECPresentmentReport);
    uint64_t v15 = (void *)v6(v9, v10);
    int64_t v20 = *(void *)(v0 + 376);
    unint64_t v21 = *(void *)(v0 + 384);
    if (v21) {
      goto LABEL_3;
    }
  }
  int64_t v42 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  int64_t v43 = (unint64_t)((1 << *(unsigned char *)(v0 + 476)) + 63) >> 6;
  uint64_t v15 = *(void **)(v0 + 368);
  if (v42 < v43)
  {
    uint64_t v44 = v15 + 8;
    unint64_t v45 = v15[v42 + 8];
    ++v20;
    if (v45)
    {
LABEL_10:
      uint64_t v22 = (v45 - 1) & v45;
      unint64_t v23 = __clz(__rbit64(v45)) + (v20 << 6);
      goto LABEL_4;
    }
    int64_t v20 = v42 + 1;
    if (v42 + 1 < v43)
    {
      unint64_t v45 = v44[v20];
      if (v45) {
        goto LABEL_10;
      }
      int64_t v20 = v42 + 2;
      if (v42 + 2 < v43)
      {
        unint64_t v45 = v44[v20];
        if (v45) {
          goto LABEL_10;
        }
        int64_t v80 = v42 + 3;
        if (v80 < v43)
        {
          unint64_t v45 = v44[v80];
          if (v45)
          {
            int64_t v20 = v80;
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v20 = v80 + 1;
            if (__OFADD__(v80, 1)) {
              break;
            }
            if (v20 >= v43) {
              goto LABEL_38;
            }
            unint64_t v45 = v44[v20];
            ++v80;
            if (v45) {
              goto LABEL_10;
            }
          }
LABEL_43:
          __break(1u);
          return NSManagedObjectContext.perform<A>(schedule:_:)(v15, v16, v17, v18, v19);
        }
      }
    }
  }
LABEL_38:
  swift_release();
  uint64_t v81 = *(unsigned int *)(v0 + 472);
  uint64_t v83 = *(void *)(v0 + 240);
  uint64_t v82 = *(void *)(v0 + 248);
  uint64_t v85 = *(void *)(v0 + 224);
  uint64_t v84 = *(void *)(v0 + 232);
  id v86 = [*(id *)(v85 + 112) viewContext];
  *(void *)(v0 + 440) = v86;
  uint64_t v87 = swift_allocObject();
  *(void *)(v0 + 448) = v87;
  *(void *)(v87 + 16) = v86;
  *(void *)(v87 + 24) = v85;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 104))(v82, v81, v84);
  v86;
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100293618;
  uint64_t v16 = *(void *)(v0 + 248);
  unint64_t v19 = (char *)&type metadata for () + 8;
  uint64_t v17 = sub_10029697C;
  uint64_t v18 = v87;
LABEL_39:
  return NSManagedObjectContext.perform<A>(schedule:_:)(v15, v16, v17, v18, v19);
}

uint64_t sub_1002934F0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 264);

  sub_100296AA4(v2, type metadata accessor for SECPresentmentReport);
  v1(v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100293618()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[31];
  uint64_t v4 = v2[30];
  uint64_t v5 = v2[29];
  uint64_t v6 = v2[28];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  if (v0) {
    uint64_t v7 = sub_1002938BC;
  }
  else {
    uint64_t v7 = sub_1002937B0;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1002937B0()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 208);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1002938BC()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002939A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v3 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v3 - 8, v4);
  uint64_t v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v44 - v14;
  uint64_t v44 = type metadata accessor for PresentmentInfo();
  uint64_t v16 = *(void *)(v44 - 8);
  __chkstk_darwin(v44, v17);
  unint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v20 = a1;
  id v21 = [a1 productConfigUUID];
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    goto LABEL_14;
  }
  uint64_t v22 = v21;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v23 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  v23(v6, v12, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
LABEL_14:
    sub_10008E734((uint64_t)v6, &qword_100455EB0);
    uint64_t v24 = v20;
LABEL_15:
    uint64_t v31 = (int *)v44;
    uint64_t v37 = v45;
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_10008E55C(v39, (uint64_t)qword_1004686A8);
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      int64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Store Presentment Event is corrupted", v42, 2u);
      swift_slowDealloc();
    }

    uint64_t v38 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(v37, v38, 1, v31);
  }
  v23(v15, v6, v7);
  uint64_t v24 = v20;
  id v25 = [v20 appName];
  if (!v25)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    goto LABEL_15;
  }
  uint64_t v26 = v25;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;

  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v19, v15, v7);
  unint64_t v30 = (unint64_t)[v20 countryCode];
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v31 = (int *)v44;
    *(void *)&v19[*(int *)(v44 + 24)] = v30;
    unint64_t v32 = (uint64_t *)&v19[v31[8]];
    *unint64_t v32 = v27;
    v32[1] = v29;
    unint64_t v33 = (unint64_t)[v24 adamId];
    if ((v33 & 0x8000000000000000) == 0)
    {
      *(void *)&v19[v31[7]] = v33;
      [v24 presentingTimestamp];
      *(void *)&v19[v31[9]] = v34;
      unsigned int v35 = [v24 presentmentType];

      if ((v35 & 0x80000000) == 0)
      {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
        if (v35 == 1) {
          char v36 = 1;
        }
        else {
          char v36 = 2;
        }
        if (!v35) {
          char v36 = 0;
        }
        v19[v31[5]] = v36;
        uint64_t v37 = v45;
        sub_100296B04((uint64_t)v19, v45, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        uint64_t v38 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(v37, v38, 1, v31);
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100293EA4(void *a1, uint64_t a2)
{
  type metadata accessor for PresentmentEventEntity();
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a1];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v4 setProductConfigUUID:isa];

  uint64_t v6 = type metadata accessor for PresentmentInfo();
  if ((*(void *)(a2 + *(int *)(v6 + 28)) & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = (int *)v6;
  [v4 setAdamId:];
  if ((*(void *)(a2 + v7[6]) & 0x8000000000000000) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_6;
  }
  [v4 setCountryCode:];
  NSString v8 = String._bridgeToObjectiveC()();
  [v4 setAppName:v8];

  [v4 setPresentmentType:*(unsigned __int8 *)(a2 + v7[5])];
  [v4 setPresentingTimestamp:*(double *)(a2 + v7[9])];
  id v18 = 0;
  if ([a1 save:&v18])
  {
    id v9 = v18;
    goto LABEL_10;
  }
  id v10 = v18;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_1004536D0 != -1) {
    goto LABEL_13;
  }
LABEL_6:
  uint64_t v11 = type metadata accessor for Logger();
  sub_10008E55C(v11, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    id v18 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315394;
    sub_100290514(0xD000000000000018, 0x80000001003BC200, (uint64_t *)&v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    sub_100290514(v15, v16, (uint64_t *)&v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v17 = 0;
  swift_willThrow();
  swift_errorRelease();
LABEL_10:
}

uint64_t sub_100294254(void *a1)
{
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithEntityName:v4];

  type metadata accessor for PresentmentEventEntity();
  unint64_t v6 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    goto LABEL_15;
  }

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_5:
      if (v7 < 1) {
        __break(1u);
      }
      for (uint64_t i = 0; i != v7; ++i)
      {
        if ((v6 & 0xC000000000000001) != 0) {
          id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v9 = *(id *)(v6 + 8 * i + 32);
        }
        id v10 = v9;
        [a1 deleteObject:v9];
      }
    }
  }
  swift_bridgeObjectRelease();
  id v21 = 0;
  if ([a1 save:&v21])
  {
    id v11 = v21;
    return swift_bridgeObjectRelease();
  }
  id v12 = v21;
  _convertNSErrorToError(_:)();

  swift_willThrow();
LABEL_15:
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10008E55C(v13, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    id v21 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_100290514(0xD00000000000001ALL, 0x80000001003BC180, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v17 = Error.localizedDescription.getter();
    sub_100290514(v17, v18, (uint64_t *)&v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: CoreData error %s encountered while deleting entity", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *unint64_t v19 = 0;
  swift_willThrow();
  uint64_t result = swift_errorRelease();
  if (!v1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100294658()
{
  uint64_t v2 = sub_10006C51C(&qword_10045A9C8);
  __chkstk_darwin(v2 - 8, v3);
  id v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PresentmentInfo();
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  id v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v35 - v12;
  id v14 = [*(id *)(v0 + 112) viewContext];
  id v15 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v17 = [v15 initWithEntityName:v16];

  type metadata accessor for PresentmentEventEntity();
  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E55C(v19, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    int64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v40 = sub_100290514(0xD00000000000001ALL, 0x80000001003BC1C0, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      uint64_t v40 = sub_100290514(v23, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v34 = 0;
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v17;
  }
  unint64_t v25 = v18;
  uint64_t v26 = v38;
  uint64_t v37 = v13;
  uint64_t v39 = v10;

  if (!(v25 >> 62))
  {
    uint64_t v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    if (v27) {
      goto LABEL_8;
    }
LABEL_24:
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v17;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v27 = result;
  uint64_t v35 = 0;
  if (!result) {
    goto LABEL_24;
  }
LABEL_8:
  if (v27 >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v36 = v6;
    do
    {
      if ((v25 & 0xC000000000000001) != 0) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(v25 + 8 * v29 + 32);
      }
      sub_1002939A0(v30, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v5, 1, v6) == 1)
      {
        sub_10008E734((uint64_t)v5, &qword_10045A9C8);
      }
      else
      {
        uint64_t v31 = (uint64_t)v37;
        sub_100296B04((uint64_t)v5, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        sub_100296B04(v31, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = (void *)sub_10025A800(0, v17[2] + 1, 1, (unint64_t)v17);
        }
        unint64_t v33 = v17[2];
        unint64_t v32 = v17[3];
        if (v33 >= v32 >> 1) {
          uint64_t v17 = (void *)sub_10025A800(v32 > 1, v33 + 1, 1, (unint64_t)v17);
        }
        v17[2] = v33 + 1;
        sub_100296B04((uint64_t)v39, (uint64_t)v17+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v33, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        uint64_t v6 = v36;
      }
      ++v29;
    }
    while (v27 != v29);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

id sub_100294C04(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for SECPresentmentReport(0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PresentmentReportEntity();
  id v9 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithContext:a1];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v9 setReportUUID:isa];

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_100296998();
  uint64_t v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v2)
  {

    swift_release();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_1004686A8);
    sub_100296A3C(a2, (uint64_t)v8, type metadata accessor for SECPresentmentReport);
    swift_errorRetain();
    swift_errorRetain();
    id v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      id v36 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136315650;
      uint64_t v35 = sub_100290514(0xD00000000000001ALL, 0x80000001003BC1A0, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      uint64_t v35 = sub_100290514(v17, v18, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v16 + 22) = 2080;
      uint64_t v19 = UUID.uuidString.getter();
      uint64_t v35 = sub_100290514(v19, v20, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100296AA4((uint64_t)v8, type metadata accessor for SECPresentmentReport);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: JSON Encoding error %s while encoding presentment report %s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      sub_100296AA4((uint64_t)v8, type metadata accessor for SECPresentmentReport);
    }

    sub_10008E594();
    swift_allocError();
    void *v25 = 14;
    swift_willThrow();
    return (id)swift_errorRelease();
  }
  else
  {
    uint64_t v21 = v11;
    unint64_t v22 = v12;
    swift_release();
    Class v23 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v21, v22);
    [v9 setRawPayload:v23];

    id v36 = 0;
    if ([a1 save:&v36])
    {
      return v36;
    }
    else
    {
      id v26 = v36;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      sub_10008E55C(v27, (uint64_t)qword_1004686A8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        id v36 = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315394;
        uint64_t v35 = sub_100290514(0xD00000000000001ALL, 0x80000001003BC1A0, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v30 + 12) = 2080;
        swift_getErrorValue();
        uint64_t v31 = Error.localizedDescription.getter();
        uint64_t v35 = sub_100290514(v31, v32, (uint64_t *)&v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
      }

      sub_10008E594();
      swift_allocError();
      *unint64_t v33 = 0;
      swift_willThrow();
      return (id)swift_errorRelease();
    }
  }
}

uint64_t sub_100295288(uint64_t a1)
{
  id v4 = [*(id *)(v1 + 112) viewContext];
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithEntityName:v6];

  type metadata accessor for PresentmentReportEntity();
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      sub_100290514(0xD00000000000001CLL, 0x80000001003BC160, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      v23[8] = sub_100290514(v13, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v22 = 0;
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v10;
  }
  unint64_t v15 = v8;

  __chkstk_darwin(v16, v17);
  _OWORD v23[2] = a1;
  unint64_t v18 = (unint64_t)sub_1002B9DD0(sub_1002965C8, v23, v15);
  unint64_t v19 = v18;
  if (!(v18 >> 62))
  {
    uint64_t result = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_8;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v21 = *(id *)(v19 + 32);
LABEL_11:
    id v10 = v21;
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

id sub_10029563C(void *a1, uint64_t a2)
{
  [a1 deleteObject:a2];
  id v12 = 0;
  if ([a1 save:&v12]) {
    return v12;
  }
  id v4 = v12;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10008E55C(v5, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  NSString v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    id v12 = (id)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315394;
    sub_100290514(0xD00000000000001BLL, 0x80000001003BC140, (uint64_t *)&v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v9 = Error.localizedDescription.getter();
    sub_100290514(v9, v10, (uint64_t *)&v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *os_log_type_t v11 = 0;
  swift_willThrow();
  return (id)swift_errorRelease();
}

uint64_t sub_10029591C()
{
  uint64_t v2 = sub_10006C51C(&qword_100459088);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SECPresentmentReport(0);
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  unint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v35 - v12;
  id v14 = [*(id *)(v0 + 112) viewContext];
  id v15 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v17 = [v15 initWithEntityName:v16];

  type metadata accessor for PresentmentReportEntity();
  uint64_t v18 = NSManagedObjectContext.fetch<A>(_:)();
  if (v1)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E55C(v19, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v40 = sub_100290514(0xD000000000000012, 0x80000001003BC1E0, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      uint64_t v40 = sub_100290514(v23, v24, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v34 = 0;
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v17;
  }
  unint64_t v25 = v18;
  uint64_t v26 = v38;
  uint64_t v37 = v13;
  uint64_t v39 = v10;

  if (!(v25 >> 62))
  {
    uint64_t v27 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v35 = 0;
    if (v27) {
      goto LABEL_8;
    }
LABEL_24:
    uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_25:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v17;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v27 = result;
  uint64_t v35 = 0;
  if (!result) {
    goto LABEL_24;
  }
LABEL_8:
  if (v27 >= 1)
  {
    uint64_t v29 = 0;
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v36 = v6;
    do
    {
      if ((v25 & 0xC000000000000001) != 0) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(v25 + 8 * v29 + 32);
      }
      sub_10021D610(v30, (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v5, 1, v6) == 1)
      {
        sub_10008E734((uint64_t)v5, &qword_100459088);
      }
      else
      {
        uint64_t v31 = (uint64_t)v37;
        sub_100296B04((uint64_t)v5, (uint64_t)v37, type metadata accessor for SECPresentmentReport);
        sub_100296B04(v31, (uint64_t)v39, type metadata accessor for SECPresentmentReport);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v17 = (void *)sub_10025A7CC(0, v17[2] + 1, 1, (unint64_t)v17);
        }
        unint64_t v33 = v17[2];
        unint64_t v32 = v17[3];
        if (v33 >= v32 >> 1) {
          uint64_t v17 = (void *)sub_10025A7CC(v32 > 1, v33 + 1, 1, (unint64_t)v17);
        }
        v17[2] = v33 + 1;
        sub_100296B04((uint64_t)v39, (uint64_t)v17+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v33, type metadata accessor for SECPresentmentReport);
        uint64_t v6 = v36;
      }
      ++v29;
    }
    while (v27 != v29);
    goto LABEL_25;
  }
  __break(1u);
  return result;
}

uint64_t sub_100295EC8(id *a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  id v14 = (char *)v20 - v13;
  id v15 = [*a1 reportUUID];
  if (!v15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_5;
  }
  NSString v16 = v15;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v17(v5, v11, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_5:
    sub_10008E734((uint64_t)v5, &qword_100455EB0);
    char v18 = 0;
    return v18 & 1;
  }
  v17(v14, v5, v6);
  char v18 = static UUID.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  return v18 & 1;
}

uint64_t sub_10029610C()
{
  uint64_t v1 = type metadata accessor for PresentmentInfo();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_100294658();
  if (!v0)
  {
    uint64_t v7 = result;
    int64_t v8 = *(void *)(result + 16);
    uint64_t v9 = _swiftEmptyArrayStorage;
    if (v8)
    {
      char v18 = _swiftEmptyArrayStorage;
      sub_1002CFD04(0, v8, 0);
      uint64_t v10 = *(unsigned __int8 *)(v2 + 80);
      uint64_t v17 = v7;
      uint64_t v11 = v7 + ((v10 + 32) & ~v10);
      uint64_t v12 = *(void *)(v2 + 72);
      uint64_t v9 = v18;
      do
      {
        sub_100296A3C(v11, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        uint64_t v13 = *(void *)&v5[*(int *)(v1 + 36)];
        sub_100296AA4((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFD04(0, v9[2] + 1, 1);
          uint64_t v9 = v18;
        }
        unint64_t v15 = v9[2];
        unint64_t v14 = v9[3];
        if (v15 >= v14 >> 1)
        {
          sub_1002CFD04(v14 > 1, v15 + 1, 1);
          uint64_t v9 = v18;
        }
        v9[2] = v15 + 1;
        v9[v15 + 4] = v13;
        v11 += v12;
        --v8;
      }
      while (v8);
      uint64_t v7 = v17;
    }
    uint64_t v16 = sub_10008C404((uint64_t)v9);
    swift_bridgeObjectRelease();
    char v18 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain();
    sub_1002965E8(v16, &v18, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    return (uint64_t)v18;
  }
  return result;
}

uint64_t sub_10029633C(double *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a2;
  uint64_t v7 = type metadata accessor for PresentmentInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  unint64_t v15 = (char *)v28 - v14;
  double v16 = *a1;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = swift_bridgeObjectRetain();
  if (v18)
  {
    v28[1] = v19;
    v28[2] = v4;
    uint64_t v20 = *(void *)(v8 + 72);
    unint64_t v30 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v21 = v19 + v30;
    uint64_t v22 = _swiftEmptyArrayStorage;
    do
    {
      sub_100296A3C(v21, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      if (*(double *)&v15[*(int *)(v7 + 36)] == v16)
      {
        sub_100296B04((uint64_t)v15, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002CFC80(0, v22[2] + 1, 1);
        }
        uint64_t v22 = v31;
        unint64_t v24 = v31[2];
        unint64_t v23 = v31[3];
        if (v24 >= v23 >> 1)
        {
          sub_1002CFC80(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v31;
        }
        v22[2] = v24 + 1;
        sub_100296B04((uint64_t)v12, (uint64_t)v22 + v30 + v24 * v20, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      }
      else
      {
        sub_100296AA4((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
      }
      v21 += v20;
      --v18;
    }
    while (v18);
    uint64_t v17 = v31;
  }
  swift_bridgeObjectRelease();
  unint64_t v25 = v29;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = (void *)*v25;
  void *v25 = 0x8000000000000000;
  sub_1002CB62C((uint64_t)v17, isUniquelyReferenced_nonNull_native, v16);
  void *v25 = v31;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002965C8(id *a1)
{
  return sub_100295EC8(a1) & 1;
}

uint64_t sub_1002965E8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a1 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v10)
  {
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_5:
    uint64_t v20 = *(void *)(*(void *)(a1 + 48) + 8 * v15);
    uint64_t result = sub_10029633C((double *)&v20, a2, a3);
    if (v3) {
      return swift_release();
    }
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v13 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v13);
  if (v17)
  {
LABEL_17:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_5;
  }
  int64_t v18 = v13 + 1;
  if (v13 + 1 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 2;
  if (v13 + 2 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 3;
  if (v13 + 3 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v13 = v18;
    goto LABEL_17;
  }
  int64_t v19 = v13 + 4;
  if (v13 + 4 >= v11) {
    return swift_release();
  }
  unint64_t v17 = *(void *)(v7 + 8 * v19);
  v13 += 4;
  if (v17) {
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v13 >= v11) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v19;
    if (v17) {
      goto LABEL_17;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_10029676C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045A9B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002967D4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SECPresentmentReport(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

id sub_1002968CC()
{
  uint64_t v1 = *(void *)(type metadata accessor for SECPresentmentReport(0) - 8);
  return sub_100294C04(*(void **)(v0 + 16), v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10029693C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10029697C()
{
  return sub_100294254(*(void **)(v0 + 16));
}

unint64_t sub_100296998()
{
  unint64_t result = qword_10045A9C0;
  if (!qword_10045A9C0)
  {
    type metadata accessor for SECPresentmentReport(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045A9C0);
  }
  return result;
}

uint64_t type metadata accessor for PresentmentInfo()
{
  uint64_t result = qword_10045AA28;
  if (!qword_10045AA28) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100296A3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100296AA4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100296B04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_100296B6C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    unint64_t v10 = (void *)((char *)a1 + v9);
    int64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100296C6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100296CE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100296D94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100296E60(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100296F04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v9 = (void *)(a1 + v8);
  unint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100296FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100296FCC);
}

uint64_t sub_100296FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100297090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002970A4);
}

uint64_t sub_1002970A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100297164()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PresentmentInfo.PresentmentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002972E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentmentInfo.PresentmentType()
{
  return &type metadata for PresentmentInfo.PresentmentType;
}

unint64_t sub_10029731C()
{
  unint64_t result = qword_10045AA70;
  if (!qword_10045AA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AA70);
  }
  return result;
}

uint64_t sub_100297370()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_10045AAC8);
  sub_10008E55C(v0, (uint64_t)qword_10045AAC8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1002973F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v71 = a4;
  uint64_t v70 = a3;
  uint64_t v72 = a2;
  uint64_t v73 = a1;
  uint64_t v69 = type metadata accessor for OSEligibilityAnswer();
  uint64_t v68 = *(void *)(v69 - 8);
  uint64_t v5 = __chkstk_darwin(v69, v4);
  uint64_t v67 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v66 = (char *)v62 - v8;
  uint64_t v9 = type metadata accessor for OSEligibilityDomain();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  unint64_t v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  int64_t v18 = (char *)v62 - v17;
  uint64_t v20 = __chkstk_darwin(v16, v19);
  uint64_t v22 = (char *)v62 - v21;
  uint64_t v24 = __chkstk_darwin(v20, v23);
  uint64_t v26 = (char *)v62 - v25;
  uint64_t v28 = __chkstk_darwin(v24, v27);
  unint64_t v30 = (char *)v62 - v29;
  __chkstk_darwin(v28, v31);
  unint64_t v33 = (char *)v62 - v32;
  uint64_t v65 = type metadata accessor for OSEligibilityResult();
  uint64_t v64 = *(void *)(v65 - 8);
  uint64_t v35 = __chkstk_darwin(v65, v34);
  uint64_t v37 = (char *)v62 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v38);
  long long v63 = (char *)v62 - v39;
  long long v78 = unk_10045AA78;
  long long v79 = unk_10045AA88;
  __int16 v80 = word_10045AA98;
  long long v81 = unk_10045AA78;
  long long v82 = unk_10045AA88;
  sub_100079AE8((uint64_t)&v81);
  sub_100079AE8((uint64_t)&v82);
  sub_1001AF4B4();
  char v41 = v40;
  sub_100079B14((uint64_t)&v81);
  sub_100079B14((uint64_t)&v82);
  if (v41)
  {
    if (qword_1004538F0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    sub_10008E55C(v42, (uint64_t)qword_10045AAC8);
    int64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(void *)&v76[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v45 = 136315138;
      unint64_t v46 = 0xEE0068636E75614CLL;
      uint64_t v47 = 0x7070417473726966;
      switch((char)v73)
      {
        case 1:
          uint64_t v47 = 0xD000000000000013;
          uint64_t v48 = "subsequentAppLaunch";
          goto LABEL_16;
        case 2:
          uint64_t v47 = 0xD000000000000016;
          uint64_t v48 = "credentialProvisioning";
LABEL_16:
          unint64_t v46 = (unint64_t)(v48 - 32) | 0x8000000000000000;
          break;
        case 3:
          unint64_t v60 = "useDefaultSECApp";
          goto LABEL_21;
        case 4:
          unint64_t v60 = "setDefaultSECApp";
          goto LABEL_21;
        case 5:
          unint64_t v60 = "useDefaultHCEApp";
          goto LABEL_21;
        case 6:
          unint64_t v60 = "setDefaultHCEApp";
LABEL_21:
          unint64_t v46 = (unint64_t)(v60 - 32) | 0x8000000000000000;
          uint64_t v47 = 0xD000000000000010;
          break;
        case 7:
          unint64_t v46 = 0xEF656D6954747372;
          uint64_t v47 = 0x6946454348657375;
          break;
        default:
          break;
      }
      v74[0] = sub_100290514(v47, v46, (uint64_t *)v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Bypassing eligibility check for domain %s due to UD", v45, 0xCu);
      char v51 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      char v51 = 1;
    }
  }
  else
  {
    sub_100297E3C(v72, (uint64_t)v74);
    if (v75) {
      goto LABEL_9;
    }
    uint64_t v72 = v74[0];
    v62[3] = v74[1];
    v62[2] = v74[2];
    v62[1] = v74[3];
    v76[0] = unk_10045AAA0;
    v76[1] = unk_10045AAB0;
    __int16 v77 = word_10045AAC0;
    long long v83 = unk_10045AAA0;
    long long v84 = unk_10045AAB0;
    sub_100079AE8((uint64_t)&v83);
    sub_100079AE8((uint64_t)&v84);
    sub_1001AF4B4();
    char v50 = v49;
    sub_100079B14((uint64_t)&v83);
    sub_100079B14((uint64_t)&v84);
    if (v50)
    {
LABEL_9:
      if (v71)
      {
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v22, *(unsigned int *)*(&off_1004183D8 + (char)v73), v9);
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v26, v22, v9);
        static OSEligibilityResult.result(for:bundleID:persona:)();
        unint64_t v33 = v26;
      }
      else
      {
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v14, *(unsigned int *)*(&off_1004183D8 + (char)v73), v9);
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v18, v14, v9);
        static OSEligibilityResult.result(for:)();
        unint64_t v33 = v18;
      }
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v30, *(unsigned int *)*(&off_1004183D8 + (char)v73), v9);
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v33, v30, v9);
      static OSEligibilityResult.result(for:auditToken:)();
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v33, v9);
    uint64_t v52 = v64;
    uint64_t v53 = v63;
    uint64_t v54 = v65;
    (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v37, v65);
    uint64_t v55 = v66;
    OSEligibilityResult.answer.getter();
    uint64_t v56 = v68;
    uint64_t v57 = v67;
    uint64_t v58 = v69;
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v67, enum case for OSEligibilityAnswer.eligible(_:), v69);
    char v51 = static OSEligibilityAnswer.== infix(_:_:)();
    unint64_t v59 = *(void (**)(char *, uint64_t))(v56 + 8);
    v59(v57, v58);
    v59(v55, v58);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v54);
  }
  return v51 & 1;
}

uint64_t sub_100297E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045AAE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100297EA4()
{
  type metadata accessor for SECPresentmentIntentManager();
  uint64_t v0 = swift_allocObject();
  sub_10029927C();
  sub_10006C51C(&qword_10045AC90);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = v0;
  qword_10045AAE8 = result;
  return result;
}

void sub_100297F00(unint64_t a1)
{
  uint64_t v3 = (uint64_t)v1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  unint64_t v14 = (char *)&v54 - v13;
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v54 - v16;
  if (v1[2])
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10008E55C(v18, (uint64_t)qword_1004686A8);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      if ((a1 & 0x100000000) != 0)
      {
        unint64_t v22 = 0xEA00000000006465;
        uint64_t v23 = 0x6369767265736573;
      }
      else
      {
        LODWORD(v63) = a1;
        sub_100299E7C();
        uint64_t v23 = BinaryInteger.description.getter();
        unint64_t v22 = v50;
      }
      uint64_t v63 = sub_100290514(v23, v22, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Presentment Assertion is being held by another process, adding acquirer %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

LABEL_25:
    sub_10008E594();
    swift_allocError();
    *char v51 = 25;
    swift_willThrow();
    return;
  }
  if ((a1 & 0x100000000) == 0)
  {
    swift_beginAccess();
    if (*(void *)(v1[9] + 16))
    {
      sub_1002C0D48(a1);
      if (v24)
      {
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        sub_10008E55C(v25, (uint64_t)qword_1004686A8);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v28 = 67109120;
          LODWORD(aBlock[0]) = a1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Presentment assertion unavailable during cooldown for %d", v28, 8u);
          swift_slowDealloc();
        }

        goto LABEL_25;
      }
    }
  }
  unint64_t v60 = v10;
  uint64_t v61 = v2;
  UUID.init()();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_10008E55C(v29, (uint64_t)qword_1004686A8);
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v59 = v6 + 16;
  v58(v14, v17, v5);
  unint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.info.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v62 = v6;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    unint64_t v56 = a1;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v54 = swift_slowAlloc();
    aBlock[0] = v54;
    uint64_t v55 = v5;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v57 = (void (*)(char *, uint64_t))(v34 + 4);
    uint64_t v35 = UUID.uuidString.getter();
    uint64_t v68 = sub_100290514(v35, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v5 = v55;
    uint64_t v57 = *(void (**)(char *, uint64_t))(v6 + 8);
    v57(v14, v55);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Starting assertion with identifier %s", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v56;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v57 = *(void (**)(char *, uint64_t))(v6 + 8);
    v57(v14, v5);
  }

  unsigned int v37 = a1;
  uint64_t v38 = HIDWORD(a1) & 1;
  uint64_t v39 = (void *)v1[3];
  uint64_t v40 = swift_allocObject();
  swift_weakInit();
  uint64_t v41 = swift_allocObject();
  *(_DWORD *)(v41 + 16) = v37;
  *(unsigned char *)(v41 + 20) = v38;
  *(void *)(v41 + 24) = v40;
  uint64_t v42 = (NSObject **)objc_allocWithZone((Class)SESTimer);
  uint64_t v66 = sub_100299E58;
  uint64_t v67 = v41;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10007C0C4;
  uint64_t v65 = &unk_1004184D0;
  int64_t v43 = _Block_copy(aBlock);
  swift_retain();
  os_log_type_t v44 = sub_100052804(v42, v39, v43);
  _Block_release(v43);
  swift_release();
  swift_release();
  uint64_t v45 = v60;
  v58(v60, v17, v5);
  uint64_t v65 = (void *)type metadata accessor for SECPresentmentIntentManager();
  uint64_t v66 = (uint64_t (*)())&off_100418418;
  aBlock[0] = v3;
  id v46 = objc_allocWithZone((Class)type metadata accessor for SECPresentmentIntentAssertion());
  uint64_t v47 = v44;
  swift_retain();
  LOBYTE(v68) = v38;
  uint64_t v48 = v61;
  char v49 = (char *)sub_100299498(v45, v37 | ((unint64_t)v38 << 32), v47, (uint64_t)aBlock);
  if (v48)
  {
    v57(v17, v5);
  }
  else
  {
    uint64_t v52 = v49;
    sub_100052A0C(*(void *)&v49[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_timer], 14.5, 0.5);

    v57(v17, v5);
    uint64_t v53 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = v52;
    v52;
  }
}

uint64_t sub_100298690(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x100000000) == 0)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E55C(v8, (uint64_t)qword_1004686A8);
    swift_retain_n();
    uint64_t v9 = Logger.logObject.getter();
    int v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, (os_log_type_t)v10))
    {
      uint64_t v21 = a1;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v25[0] = v23;
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      int v22 = v10;
      if (Strong && (v13 = *(void **)(Strong + 16), id v14 = v13, swift_release(), v13))
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, (uint64_t)v14 + OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_identifier, v2);

        uint64_t v15 = UUID.uuidString.getter();
        unint64_t v17 = v16;
        (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
        LODWORD(a1) = v21;
      }
      else
      {
        unint64_t v17 = 0xE300000000000000;
        LODWORD(a1) = v21;
        uint64_t v15 = 7104846;
      }
      v24[0] = sub_100290514(v15, v17, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, (os_log_type_t)v22, "Presentment intent %s has expired", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    uint64_t v18 = swift_weakLoadStrong();
    if (v18)
    {
      uint64_t v19 = v18 + 32;
      swift_beginAccess();
      sub_100299F38(v19, (uint64_t)v25);
      swift_release();
      if (v25[3])
      {
        sub_10010DDC4((uint64_t)v25, (uint64_t)v24);
        sub_10008E734((uint64_t)v25, &qword_100455BC8);
        sub_100075908(v24, v24[3]);
        sub_100127160(a1);
        sub_10007594C((uint64_t)v24);
      }
      else
      {
        sub_10008E734((uint64_t)v25, &qword_100455BC8);
      }
    }
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      sub_100298CAC(a1);
      return swift_release();
    }
  }
  return result;
}

void sub_100298A58()
{
  uint64_t v1 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    if (*(void *)(v0 + 16))
    {
      uint64_t v6 = UUID.uuidString.getter();
      unint64_t v8 = v7;
    }
    else
    {
      unint64_t v8 = 0xE400000000000000;
      uint64_t v6 = 1701736270;
    }
    sub_100290514(v6, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating assertion with identifier %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v9 = *(void **)(v1 + 16);
    if (!v9) {
      goto LABEL_10;
    }
  }
  else
  {

    swift_release_n();
    uint64_t v9 = *(void **)(v0 + 16);
    if (!v9)
    {
LABEL_10:
      uint64_t v13 = 0;
      goto LABEL_11;
    }
  }
  int v10 = self;
  uint64_t v11 = v9;
  id v12 = [v10 sharedHardwareManager];

  sub_100052B14(*(void *)&v11[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_timer]);
  uint64_t v13 = *(void **)(v1 + 16);
LABEL_11:
  *(void *)(v1 + 16) = 0;
}

void sub_100298CAC(int a1)
{
  uint64_t v2 = v1;
  swift_beginAccess();
  if (*(void *)(*(void *)(v1 + 72) + 16) && (sub_1002C0D48(a1), (v4 & 1) != 0))
  {
    sub_100298A58();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109120;
      LODWORD(aBlock[0]) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Client %d relinquish without context, starting context for the next 15.0s", v9, 8u);
      swift_slowDealloc();
    }

    int v10 = *(void **)(v2 + 24);
    uint64_t v11 = swift_allocObject();
    swift_weakInit();
    uint64_t v12 = swift_allocObject();
    *(_DWORD *)(v12 + 16) = a1;
    *(void *)(v12 + 24) = v11;
    uint64_t v13 = (NSObject **)objc_allocWithZone((Class)SESTimer);
    aBlock[4] = sub_100299E34;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10007C0C4;
    uint64_t aBlock[3] = &unk_100418480;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v15 = sub_100052804(v13, v10, v14);
    _Block_release(v14);
    swift_release();
    swift_release();
    type metadata accessor for SECPresentmentIntentCooldownContext();
    uint64_t v16 = swift_allocObject();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v16 + OBJC_IVAR____TtC10seserviced35SECPresentmentIntentCooldownContext_logger, v6, v5);
    *(void *)(v16 + OBJC_IVAR____TtC10seserviced35SECPresentmentIntentCooldownContext_contextTimeout) = 0x402E000000000000;
    *(_DWORD *)(v16 + 16) = a1;
    *(void *)(v16 + 24) = v15;
    sub_10028D290();
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *(void *)(v2 + 72);
    *(void *)(v2 + 72) = 0x8000000000000000;
    sub_1002CA220(v16, a1, isUniquelyReferenced_nonNull_native);
    *(void *)(v2 + 72) = v18;
    swift_bridgeObjectRelease();
    swift_endAccess();
    sub_100298A58();
    swift_release();
  }
}

uint64_t sub_100298FEC(int a1)
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Context timer for client %d timed out", v5, 8u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    swift_beginAccess();
    uint64_t v8 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    swift_release();
    if (*(void *)(v8 + 16) && (sub_1002C0D48(a1), (v9 & 1) != 0))
    {
      swift_retain();
      swift_bridgeObjectRelease();
      sub_10028D398();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        swift_beginAccess();
        sub_100180118(a1);
        swift_endAccess();
        swift_release();
        swift_release();
      }
      return swift_release();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100299200()
{
  sub_10008E734(v0 + 32, &qword_100455BC8);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SECPresentmentIntentManager()
{
  return self;
}

uint64_t sub_10029927C()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6, v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8, v9);
  *(void *)(v0 + 16) = 0;
  sub_10007BEB4();
  static DispatchQoS.unspecified.getter();
  v11[1] = _swiftEmptyArrayStorage;
  sub_1001A94BC();
  sub_10006C51C(&qword_1004566F0);
  sub_1001828FC();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v1);
  *(void *)(v0 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = &_swiftEmptyDictionarySingleton;
  return v0;
}

id sub_100299498(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = (uint64_t)&v4[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_delegate];
  *(_OWORD *)uint64_t v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(void *)(v8 + 32) = 0;
  uint64_t v9 = &v4[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_identifier];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v9, a1, v10);
  uint64_t v12 = &v4[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_clientPid];
  *(_DWORD *)uint64_t v12 = a2;
  v12[4] = BYTE4(a2) & 1;
  uint64_t v13 = self;
  uint64_t v14 = v4;
  id v15 = [v13 sharedHardwareManager];
  v34[0] = 0;
  id v16 = [v15 requestAssertion:4 error:v34];

  id v17 = v34[0];
  if (v16)
  {
    *(void *)&v14[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_nfAssertion] = v16;
    *(void *)&v14[OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_timer] = a3;
    swift_beginAccess();
    id v18 = v17;
    id v19 = a3;
    sub_100299ED0(a4, v8);
    swift_endAccess();

    v33.receiver = v14;
    v33.super_class = ObjectType;
    id v20 = [super init];

    sub_10008E734(a4, &qword_10045AC80);
    (*(void (**)(void *, uint64_t))(v11 + 8))(a1, v10);
  }
  else
  {
    uint64_t v29 = v10;
    unint64_t v30 = a3;
    id v21 = v34[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E55C(v22, (uint64_t)qword_1004686A8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    id v20 = a1;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to Acquire NF Assertion", v25, 2u);
      swift_slowDealloc();
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v26 = 9;
    swift_willThrow();
    swift_errorRelease();

    sub_10008E734(a4, &qword_10045AC80);
    os_log_type_t v27 = *(void (**)(void *, uint64_t))(v11 + 8);
    v27(a1, v29);
    sub_10008E734(v8, &qword_10045AC80);
    v27(v9, v29);

    swift_deallocPartialClassInstance();
  }
  return v20;
}

uint64_t sub_100299A80()
{
  return type metadata accessor for SECPresentmentIntentAssertion();
}

uint64_t type metadata accessor for SECPresentmentIntentAssertion()
{
  uint64_t result = qword_10045AC70;
  if (!qword_10045AC70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100299AD4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_100299B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x100000000) != 0)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Internal assertion being relinquished by client !?!?!?!", v8, 2u);
      swift_slowDealloc();
    }

    sub_100298A58();
  }
  else
  {
    sub_100298CAC(a1);
    uint64_t v4 = *(void (**)(uint64_t, void))(a3 + 16);
    v4(a3, 0);
  }
}

void sub_100299CAC(uint64_t a1, const void *a2)
{
  uint64_t v4 = self;
  _Block_copy(a2);
  id v5 = [v4 sharedHardwareManager];

  sub_100052B14(*(void *)(a1 + OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_timer));
  uint64_t v6 = (void *)(a1 + OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_delegate);
  swift_beginAccess();
  uint64_t v7 = v6[3];
  if (v7)
  {
    uint64_t v8 = sub_100075908(v6, v7);
    uint64_t v9 = *(unsigned int *)(a1 + OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_clientPid);
    unsigned __int8 v10 = *(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced29SECPresentmentIntentAssertion_clientPid + 4);
    uint64_t v11 = *v8;
    _Block_copy(a2);
    sub_100299B88(v9 | ((unint64_t)v10 << 32), v11, (uint64_t)a2);
    _Block_release(a2);
  }
  _Block_release(a2);
}

uint64_t sub_100299DC4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100299DFC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100299E34()
{
  return sub_100298FEC(*(_DWORD *)(v0 + 16));
}

uint64_t sub_100299E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100299E50()
{
  return swift_release();
}

uint64_t sub_100299E58()
{
  return sub_100298690(*(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32));
}

unint64_t sub_100299E7C()
{
  unint64_t result = qword_10045AC88;
  if (!qword_10045AC88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AC88);
  }
  return result;
}

uint64_t sub_100299ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045AC80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100299F38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100299FAC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
    uint64_t v26 = &type metadata for String;
    *(void *)&long long v25 = a3;
    *((void *)&v25 + 1) = a4;
    sub_1000761D0(&v25, v24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v24, v10, v12, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a5)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    swift_errorRetain();
    uint64_t v17 = _convertErrorToNSError(_:)();
    uint64_t v26 = (void *)sub_1000AE7D8();
    *(void *)&long long v25 = v17;
    sub_1000761D0(&v25, v24);
    char v18 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v24, v14, v16, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
  if (a2) {
    a1 = 0;
  }
  id v19 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v20 = String._bridgeToObjectiveC()();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v22 = [v19 initWithDomain:v20 code:a1 userInfo:isa];
  swift_errorRelease();

  return v22;
}

void sub_10029A1A8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10029A20C(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    type metadata accessor for CredentialInternal();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

void SECServer.listCredentialsInternal(reply:)(void (*a1)(void, uint64_t), uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v4 - 8, v5);
  id v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v8 = [self currentConnection];
  if (v8)
  {
    uint64_t v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 valueForEntitlement:v10];

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v21, 0, sizeof(v21));
    }
    sub_100115118((uint64_t)v21, (uint64_t)v22);
    if (v23)
    {
      if ((swift_dynamicCast() & 1) != 0 && v20[15] == 1)
      {
        uint64_t v12 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v7, 1, 1, v12);
        uint64_t v13 = (void *)swift_allocObject();
        v13[2] = 0;
        v13[3] = 0;
        v13[4] = a1;
        v13[5] = a2;
        swift_retain();
        sub_10028E720((uint64_t)v7, (uint64_t)&unk_10045ACA0, (uint64_t)v13);
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v22, (uint64_t *)&unk_1004556C0);
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E55C(v14, (uint64_t)qword_1004686A8);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "listCredentialsInternal: Client not entitled", v17, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  uint64_t v18 = swift_allocError();
  *id v19 = 15;
  a1(0, v18);
  swift_errorRelease();
}

void SECServer.deleteCredential(uuid:reply:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  uint64_t v10 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self currentConnection];
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v28 = a1;
    os_log_type_t v16 = a2;
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [v15 valueForEntitlement:v17];

    if (v18)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v30, 0, sizeof(v30));
    }
    sub_100115118((uint64_t)v30, (uint64_t)v31);
    a2 = v16;
    if (v32)
    {
      if ((swift_dynamicCast() & 1) != 0 && v29 == 1)
      {
        uint64_t v19 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
        unint64_t v20 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
        uint64_t v21 = swift_allocObject();
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
        id v22 = (void (**)(void))(v21 + ((v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8));
        char *v22 = a2;
        v22[1] = a3;
        swift_retain();
        sub_10028E720((uint64_t)v13, (uint64_t)&unk_10045ACB0, v21);
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v31, (uint64_t *)&unk_1004556C0);
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  sub_10008E55C(v23, (uint64_t)qword_1004686A8);
  os_log_type_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "deleteCredential: Client not entitled", v26, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  void *v27 = 15;
  a2();
  swift_errorRelease();
}

void SECServer.deleteApplication(identifier:reply:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v12 = [self currentConnection];
  if (v12)
  {
    uint64_t v13 = v12;
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 valueForEntitlement:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v24, 0, sizeof(v24));
    }
    sub_100115118((uint64_t)v24, (uint64_t)v25);
    if (v26)
    {
      if ((swift_dynamicCast() & 1) != 0 && v23[15] == 1)
      {
        uint64_t v16 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
        NSString v17 = (void *)swift_allocObject();
        v17[2] = 0;
        v17[3] = 0;
        v17[4] = a1;
        v17[5] = a2;
        v17[6] = a3;
        v17[7] = a4;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10028E720((uint64_t)v11, (uint64_t)&unk_10045ACC0, (uint64_t)v17);
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v25, (uint64_t *)&unk_1004556C0);
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E55C(v18, (uint64_t)qword_1004686A8);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "deleteCredential: Client not entitled", v21, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  void *v22 = 15;
  a3();
  swift_errorRelease();
}

uint64_t sub_10029AE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  return _swift_task_switch(sub_10029AEF4, 0, 0);
}

uint64_t sub_10029AEF4()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 72) = qword_100468A98;
  return _swift_task_switch(sub_10029AF8C, v1, 0);
}

uint64_t sub_10029AF8C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];
  id v7 = [*(id *)(v2 + 112) viewContext];
  v0[10] = v7;
  uint64_t v8 = (void *)swift_allocObject();
  v0[11] = v8;
  v8[2] = v2;
  v8[3] = v6;
  v8[4] = v5;
  v8[5] = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v1, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v3);
  swift_retain();
  swift_bridgeObjectRetain();
  v7;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[12] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100290100;
  uint64_t v10 = v0[8];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v9, v10, sub_100291C80, v8, (char *)&type metadata for () + 8);
}

uint64_t sub_10029B180(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10011FE60;
  return sub_10028EC30(a1, v4, v5, v7, v6);
}

uint64_t sub_10029B244()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10011FE60;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = v5;
  return _swift_task_switch(sub_10028F6E0, 0, 0);
}

uint64_t sub_10029B364(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10011FE60;
  return sub_10029AE30(a1, v4, v5, v6, v7, v9, v8);
}

void sub_10029B438(void (**a1)(void, void, void))
{
  uint64_t v2 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = self;
  _Block_copy(a1);
  id v8 = [v7 currentConnection];
  if (v8)
  {
    uint64_t v9 = v8;
    NSString v10 = String._bridgeToObjectiveC()();
    id v11 = [v9 valueForEntitlement:v10];

    if (v11)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v21, 0, sizeof(v21));
    }
    sub_100115118((uint64_t)v21, (uint64_t)v22);
    if (v23)
    {
      if (swift_dynamicCast() & 1) != 0 && (v20[15])
      {
        uint64_t v12 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
        uint64_t v13 = (void *)swift_allocObject();
        v13[2] = 0;
        v13[3] = 0;
        v13[4] = sub_1001D49C0;
        v13[5] = v6;
        swift_retain();
        sub_10028E720((uint64_t)v5, (uint64_t)&unk_10045ACD8, (uint64_t)v13);
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v22, (uint64_t *)&unk_1004556C0);
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_10008E55C(v14, (uint64_t)qword_1004686A8);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v15, v16))
  {
    NSString v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)NSString v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "listCredentialsInternal: Client not entitled", v17, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v18 = 15;
  uint64_t v19 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void, void *))a1)[2](a1, 0, v19);

  swift_errorRelease();
  swift_release();
}

void sub_10029B798(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v27 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  uint64_t v7 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v7 - 8, v8);
  NSString v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  uint64_t v12 = self;
  _Block_copy(a2);
  id v13 = [v12 currentConnection];
  if (v13)
  {
    uint64_t v14 = v13;
    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v14 valueForEntitlement:v15];

    if (v16)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v29, 0, sizeof(v29));
    }
    sub_100115118((uint64_t)v29, (uint64_t)v30);
    if (v31)
    {
      if (swift_dynamicCast() & 1) != 0 && (v28)
      {
        uint64_t v17 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
        (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v3);
        unint64_t v18 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = 0;
        *(void *)(v19 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v19 + v18, (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
        os_log_type_t v20 = (void *)(v19 + ((v5 + v18 + 7) & 0xFFFFFFFFFFFFFFF8));
        void *v20 = sub_10011FE58;
        v20[1] = v11;
        swift_retain();
        sub_10028E720((uint64_t)v10, (uint64_t)&unk_10045ACD0, v19);
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v30, (uint64_t *)&unk_1004556C0);
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_10008E55C(v21, (uint64_t)qword_1004686A8);
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "deleteCredential: Client not entitled", v24, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  void *v25 = 15;
  uint64_t v26 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a2)[2](a2, v26);

  swift_errorRelease();
  swift_release();
}

void sub_10029BBD8(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = sub_10006C51C(&qword_100455C60);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  uint64_t v11 = self;
  _Block_copy(a3);
  id v12 = [v11 currentConnection];
  if (v12)
  {
    id v13 = v12;
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 = [v13 valueForEntitlement:v14];

    if (v15)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v25, 0, sizeof(v25));
    }
    sub_100115118((uint64_t)v25, (uint64_t)v26);
    if (v27)
    {
      if (swift_dynamicCast() & 1) != 0 && (v24[15])
      {
        uint64_t v16 = type metadata accessor for TaskPriority();
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
        uint64_t v17 = (void *)swift_allocObject();
        v17[2] = 0;
        v17[3] = 0;
        v17[4] = a1;
        v17[5] = a2;
        v17[6] = sub_10011F6D0;
        v17[7] = v10;
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10028E720((uint64_t)v9, (uint64_t)&unk_10045ACC8, (uint64_t)v17);
        swift_release();
        swift_release();

        return;
      }
    }
    else
    {

      sub_10008E734((uint64_t)v26, (uint64_t *)&unk_1004556C0);
    }
  }
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E55C(v18, (uint64_t)qword_1004686A8);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "deleteCredential: Client not entitled", v21, 2u);
    swift_slowDealloc();
  }

  sub_10008E594();
  swift_allocError();
  void *v22 = 15;
  os_log_type_t v23 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a3)[2](a3, v23);

  swift_errorRelease();
  swift_release();
}

uint64_t sub_10029BF50()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10029BF90()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + v4);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_10011F7E8;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = v5;
  return _swift_task_switch(sub_10028F6E0, 0, 0);
}

uint64_t sub_10029C0B0()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

id sub_10029C100(uint64_t a1, char a2)
{
  sub_1002BB714(a1);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = 0;
  id v12 = 0;
  unsigned int v5 = [v2 copyItemData:isa outData:&v12 updateToApplePayView:a2 & 1 error:&v11];

  id v6 = v12;
  id v7 = v11;
  if (v5)
  {
    if (v6)
    {
      id v8 = v6;
      id v6 = (id)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  else
  {
    uint64_t v9 = v7;
    id v6 = v6;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

id sub_10029C23C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for SEFidoKeyManager()) init];
  qword_100468A20 = (uint64_t)result;
  return result;
}

uint64_t sub_10029C2CC(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Creating FiDO Attestation", v9, 2u);
    swift_slowDealloc();
  }

  Data.base64EncodedString(options:)(0);
  unint64_t v10 = sub_1001150C4();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v11 = JSONEncoder.init()();
  sub_1002A0E64();
  uint64_t v12 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v53)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v14 = v12;
    unint64_t v15 = v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v16 = sub_1002B3BD0(v14, v15);
    unint64_t v45 = v17;
    uint64_t v46 = v16;
    id v18 = [a4 key:v10, v10, v10];
    id v19 = [v18 publicKey];

    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    uint64_t v23 = sub_1002A157C(a5, (uint64_t)a6, v20, v22, 1);
    unint64_t v26 = v25;
    uint64_t v42 = v14;
    unint64_t v43 = v15;
    uint64_t v27 = v23;
    sub_10006D144(v20, v22);
    uint64_t v41 = v27;
    sub_10006D0EC(v27, v26);
    sub_10006D0EC(v46, v45);
    sub_100141068(v46, v45);
    sub_10006D144(v46, v45);
    uint64_t v28 = v27;
    uint64_t v29 = sub_1002B3BD0(v27, v26);
    unint64_t v44 = v30;
    sub_10006D144(v28, v26);
    swift_bridgeObjectRetain();
    v31._countAndFlagsBits = 47;
    v31._object = (void *)0xE100000000000000;
    String.append(_:)(v31);
    swift_bridgeObjectRetain();
    v32._countAndFlagsBits = a5;
    v32._object = a6;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    sub_1002406B4(32);
    unint64_t v33 = v26;
    swift_bridgeObjectRelease();
    static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    sub_1002A1944(a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    id v34 = [a4 key];
    id v35 = [v34 publicKey];

    uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    type metadata accessor for CBOREncoder();
    swift_allocObject();
    sub_10006D0EC(v41, v33);
    swift_bridgeObjectRetain();
    CBOREncoder.init()();
    sub_1002A1CE8();
    uint64_t v39 = dispatch thunk of CBOREncoder.encode<A>(_:)();
    id v51 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(v41, v33);
    swift_bridgeObjectRelease();
    sub_10006D144(v36, v38);
    Data.base64EncodedString(options:)(0);
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    Data.base64EncodedString(options:)(0);
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    swift_allocObject();
    JSONEncoder.init()();
    sub_1002A1D3C();
    uint64_t v11 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    swift_release();
    sub_10006D144(v39, (unint64_t)v51);
    sub_10006D144(v41, v33);
    sub_10006D144(v46, v45);
    sub_10006D144(v42, v43);
    sub_10006D144(v29, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v11;
}

uint64_t sub_10029D0A0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v73 = a2;
  uint64_t v60 = a1;
  uint64_t v7 = type metadata accessor for P256.Signing.ECDSASignature();
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for P256.Signing.PublicKey();
  uint64_t v59 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Performing FIDO verification", v17, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_10006D0EC(a3, a4);
  uint64_t isa = JSONDecoder.init()();
  sub_1002A0E10();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v4)
  {
    uint64_t v51 = v11;
    sub_10006D144(a3, a4);
    swift_release();
    uint64_t v19 = v69;
    unint64_t v53 = v68;
    uint64_t v54 = v71;
    unint64_t v55 = v72;
    unint64_t v56 = v70;
    uint64_t v65 = v67;
    unint64_t v66 = v68;
    uint64_t v63 = 95;
    unint64_t v64 = 0xE100000000000000;
    uint64_t v61 = 47;
    unint64_t v62 = 0xE100000000000000;
    sub_1001150C4();
    uint64_t v65 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v66 = v20;
    uint64_t v63 = 45;
    unint64_t v64 = 0xE100000000000000;
    uint64_t v61 = 43;
    unint64_t v62 = 0xE100000000000000;
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v67 = v21;
    unint64_t v68 = v23;
    swift_bridgeObjectRetain();
    if ((String.count.getter() & 3) != 0)
    {
      uint64_t v24 = String.count.getter();
      swift_bridgeObjectRelease();
      uint64_t v25 = v24 & 3;
      if (v24 <= 0) {
        uint64_t v25 = -(-v24 & 3);
      }
      v26._countAndFlagsBits = 61;
      v26._object = (void *)0xE100000000000000;
      Swift::String v27 = String.init(repeating:count:)(v26, 4 - v25);
      String.append(_:)(v27);
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = Data.init(base64Encoded:options:)();
    unint64_t v30 = v29;
    sub_1000758F4(v28, v29);
    swift_bridgeObjectRelease();
    if (v30 >> 60 == 15)
    {
      uint64_t isa = sub_10007582C(0, (unint64_t *)&qword_100454598);
      sub_100299FAC(0, 1, 0xD00000000000001CLL, 0x80000001003BC590, 0);
      swift_willThrow();
    }
    else
    {
      uint64_t v52 = v28;
      sub_100075868(v28, v30);
      uint64_t v65 = v19;
      unint64_t v66 = v56;
      uint64_t v63 = 95;
      unint64_t v64 = 0xE100000000000000;
      uint64_t v61 = 47;
      unint64_t v62 = 0xE100000000000000;
      uint64_t v65 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v66 = v31;
      uint64_t v63 = 45;
      unint64_t v64 = 0xE100000000000000;
      uint64_t v61 = 43;
      unint64_t v62 = 0xE100000000000000;
      uint64_t v32 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v34 = v33;
      swift_bridgeObjectRelease();
      uint64_t v67 = v32;
      unint64_t v68 = v34;
      swift_bridgeObjectRetain();
      if ((String.count.getter() & 3) != 0)
      {
        uint64_t v35 = String.count.getter();
        swift_bridgeObjectRelease();
        uint64_t v36 = v35 & 3;
        if (v35 <= 0) {
          uint64_t v36 = -(-v35 & 3);
        }
        v37._countAndFlagsBits = 61;
        v37._object = (void *)0xE100000000000000;
        Swift::String v38 = String.init(repeating:count:)(v37, 4 - v36);
        String.append(_:)(v38);
      }
      swift_bridgeObjectRelease();
      uint64_t v39 = Data.init(base64Encoded:options:)();
      unint64_t v41 = v40;
      sub_1000758F4(v39, v40);
      swift_bridgeObjectRelease();
      uint64_t v42 = v52;
      if (v41 >> 60 != 15)
      {
        sub_100075868(v39, v41);
        uint64_t v43 = sub_1002B3BD0(v42, v30);
        unint64_t v45 = v44;
        uint64_t v67 = v39;
        unint64_t v68 = v41;
        sub_10006D0EC(v39, v41);
        sub_100141068(v43, v45);
        sub_10006D144(v43, v45);
        uint64_t v47 = v67;
        unint64_t v46 = v68;
        uint64_t v67 = v60;
        unint64_t v68 = v73;
        sub_10006D0EC(v60, v73);
        P256.Signing.PublicKey.init<A>(x963Representation:)();
        uint64_t v67 = v54;
        unint64_t v68 = v55;
        sub_10006D0EC(v54, v55);
        sub_10008BFB8();
        P256.Signing.ECDSASignature.init<A>(derRepresentation:)();
        uint64_t v67 = v47;
        unint64_t v68 = v46;
        char v49 = P256.Signing.PublicKey.isValidSignature<A>(_:for:)();
        sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
        uint64_t isa = (uint64_t)NSNumber.init(BOOLeanLiteral:)(v49 & 1).super.super.isa;
        sub_10006D144(v47, v46);
        sub_100075868(v39, v41);
        sub_100075868(v52, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v54, v55);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v10, v58);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v51);
        return isa;
      }
      uint64_t isa = sub_10007582C(0, (unint64_t *)&qword_100454598);
      sub_100299FAC(0, 1, 0xD000000000000023, 0x80000001003BC5B0, 0);
      swift_willThrow();
      sub_100075868(v42, v30);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10006D144(v54, v55);
    return isa;
  }
  sub_10006D144(a3, a4);
  swift_release();
  return isa;
}

uint64_t sub_10029D9B8(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, void *a7)
{
  uint64_t v8 = v7;
  v61._countAndFlagsBits = a1;
  v61._object = (void *)a2;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  uint64_t v50 = a3;
  v12._countAndFlagsBits = a3;
  unint64_t v52 = (unint64_t)a4;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  Swift::String v13 = v61;
  sub_10006C51C(&qword_100457A60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378460;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(void *)(inited + 40) = kSecClassGenericPassword;
  *(void *)(inited + 64) = v15;
  *(void *)(inited + 72) = kSecAttrAccount;
  *(Swift::String *)(inited + 80) = v13;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 112) = kSecAttrAccessGroup;
  uint64_t v16 = *(void *)(v8 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(void *)(inited + 120) = *(void *)(v8 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  *(void *)(inited + 128) = v16;
  *(void *)(inited + 144) = &type metadata for String;
  *(void *)(inited + 152) = kSecAttrSynchronizable;
  *(void *)(inited + 184) = &type metadata for Bool;
  *(unsigned char *)(inited + 160) = 1;
  CFStringRef v17 = (id)kSecClass;
  CFStringRef v18 = (id)kSecClassGenericPassword;
  CFStringRef v19 = (id)kSecAttrAccount;
  CFStringRef v20 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain();
  CFStringRef v21 = (id)kSecAttrSynchronizable;
  unint64_t v22 = sub_1001DB818(inited);
  if (a6 >> 60 != 15)
  {
    sub_1000758F4(a5, a6);
    unint64_t v23 = (id)kSecAttrService;
    unint64_t v62 = &type metadata for String;
    Swift::String v61 = Data.base64EncodedString(options:)(0);
    sub_1000761D0(&v61, v60);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002CB764(v60, v23, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease();
    sub_100075868(a5, a6);
  }
  unint64_t v26 = a2;
  unint64_t v25 = (unint64_t)a4;
  swift_getObjectType();
  sub_1002BB714(v22);
  swift_bridgeObjectRelease();
  Swift::String v27 = sub_100217958();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v56)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      uint64_t v31 = swift_slowAlloc();
      v61._countAndFlagsBits = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 134218498;
      uint64_t v32 = v27[2];
      swift_bridgeObjectRelease();
      *(void *)&v60[0] = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v31 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v60[0] = sub_100290514(a1, a2, &v61._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&v60[0] = sub_100290514(v50, v52, &v61._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "Found %ld candidate keys for %s : %s", (uint8_t *)v31, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
    }
    unint64_t v33 = v27;
    uint64_t v34 = v27[2];
    if (v34)
    {
      type metadata accessor for PropertyListDecoder();
      swift_bridgeObjectRetain();
      uint64_t v48 = v33;
      uint64_t v35 = v33 + 5;
      while (1)
      {
        uint64_t v37 = *(v35 - 1);
        unint64_t v36 = *v35;
        swift_allocObject();
        sub_10006D0EC(v37, v36);
        PropertyListDecoder.init()();
        sub_1002A0DBC();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        swift_release();
        uint64_t v38 = v65;
        uint64_t v55 = v63;
        unint64_t v57 = v64;
        uint64_t v39 = v66;
        if (qword_1004536F8 != -1)
        {
          uint64_t v42 = v65;
          swift_once();
          uint64_t v38 = v42;
        }
        uint64_t v58 = v38;
        Class v40 = sub_100146738(v38, v39, a7);
        unsigned int v41 = [(objc_class *)v40 BOOLValue];
        sub_10006D144(v37, v36);

        if (v41) {
          break;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10006D144(v55, v57);
        sub_10006D144(v58, (unint64_t)v39);
        v35 += 2;
        if (!--v34)
        {
          uint64_t v43 = v48;
          swift_bridgeObjectRelease();
          unint64_t v26 = a2;
          unint64_t v25 = v52;
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease_n();
      sub_10006D0EC(v58, (unint64_t)v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10006D144(v55, v57);
      sub_10006D144(v58, (unint64_t)v39);
      return v58;
    }
    else
    {
      uint64_t v43 = v33;
LABEL_16:
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        v61._countAndFlagsBits = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 134218498;
        uint64_t v47 = v43[2];
        swift_bridgeObjectRelease();
        *(void *)&v60[0] = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v60[0] = sub_100290514(a1, v26, &v61._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v46 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(void *)&v60[0] = sub_100290514(v50, v25, &v61._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "No matches found out of %ld candidate keys for %s : %s", (uint8_t *)v46, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10029E40C()
{
  sub_10006C51C(&qword_100457A60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378470;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(void *)(inited + 40) = kSecClassGenericPassword;
  *(void *)(inited + 64) = v3;
  *(void *)(inited + 72) = kSecAttrAccessGroup;
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(void *)(inited + 80) = *(void *)(v0 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  *(void *)(inited + 88) = v4;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 112) = kSecAttrSynchronizable;
  *(void *)(inited + 144) = &type metadata for Bool;
  *(unsigned char *)(inited + 120) = 1;
  CFStringRef v5 = (id)kSecClass;
  CFStringRef v6 = (id)kSecClassGenericPassword;
  CFStringRef v7 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain();
  CFStringRef v8 = (id)kSecAttrSynchronizable;
  unint64_t v9 = sub_1001DB818(inited);
  swift_getObjectType();
  sub_1002BB714(v9);
  swift_bridgeObjectRelease();
  unint64_t v10 = sub_100217958();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    uint64_t v12 = v10[2];
    swift_bridgeObjectRelease();
    return v12 != 0;
  }
  return v11;
}

uint64_t sub_10029E780(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = 58;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(a5, a6);
  sub_10006D0EC(a7, a8);
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = a3;
  v15._object = a4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  sub_10006C51C(&qword_100459A90);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10037B540;
  type metadata accessor for CFString(0);
  uint64_t v18 = v17;
  *(void *)(v16 + 32) = kSecClass;
  *(void *)(v16 + 88) = v17;
  *(void *)(v16 + 96) = kSecAttrAccessible;
  *(void *)(v16 + 56) = v17;
  *(void *)(v16 + 64) = kSecClassGenericPassword;
  *(void *)(v16 + 152) = v17;
  *(void *)(v16 + 160) = kSecAttrAccount;
  *(void *)(v16 + 120) = v17;
  *(void *)(v16 + 128) = kSecAttrAccessibleAfterFirstUnlock;
  *(void *)(v16 + 216) = &type metadata for String;
  *(void *)(v16 + 184) = v17;
  *(void *)(v16 + 192) = a1;
  *(void *)(v16 + 200) = a2;
  *(void *)(v16 + 224) = kSecAttrService;
  *(void *)(v16 + 248) = v17;
  CFStringRef v19 = (id)kSecClass;
  CFStringRef v20 = (id)kSecClassGenericPassword;
  CFStringRef v21 = (id)kSecAttrAccessible;
  CFStringRef v22 = (id)kSecAttrAccessibleAfterFirstUnlock;
  CFStringRef v23 = (id)kSecAttrAccount;
  CFStringRef v24 = (id)kSecAttrService;
  *(Swift::String *)(v16 + 256) = Data.base64EncodedString(options:)(0);
  *(void *)(v16 + 280) = &type metadata for String;
  *(void *)(v16 + 288) = kSecAttrAccessGroup;
  uint64_t v25 = *(void *)(v41 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  uint64_t v26 = *(void *)(v41 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(void *)(v16 + 312) = v18;
  *(void *)(v16 + 320) = v25;
  *(void *)(v16 + 328) = v26;
  *(void *)(v16 + 376) = v18;
  *(void *)(v16 + 344) = &type metadata for String;
  *(void *)(v16 + 352) = kSecAttrSynchronizable;
  *(unsigned char *)(v16 + 384) = 1;
  *(void *)(v16 + 440) = v18;
  *(void *)(v16 + 408) = &type metadata for Bool;
  *(void *)(v16 + 416) = kSecValueData;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  CFStringRef v27 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain();
  CFStringRef v28 = (id)kSecAttrSynchronizable;
  CFStringRef v29 = (id)kSecValueData;
  PropertyListEncoder.init()();
  sub_1002A0D68();
  uint64_t v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v39)
  {
    swift_release();
    sub_10007594C(v16 + 416);
    sub_10008E734(v16 + 352, &qword_10045AD30);
    sub_10008E734(v16 + 288, &qword_10045AD30);
    sub_10008E734(v16 + 224, &qword_10045AD30);
    sub_10008E734(v16 + 160, &qword_10045AD30);
    sub_10008E734(v16 + 96, &qword_10045AD30);
    sub_10008E734(v16 + 32, &qword_10045AD30);
    *(void *)(v16 + 16) = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10006D144(a5, a6);
    return sub_10006D144(a7, a8);
  }
  uint64_t v32 = v30;
  unint64_t v33 = v31;
  swift_release();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v32, v33);
  uint64_t result = sub_10007582C(0, (unint64_t *)&qword_100457A58);
  *(void *)(v16 + 472) = result;
  *(void *)(v16 + 448) = isa;
  if (!kSecAttrSyncViewHint)
  {
    __break(1u);
    goto LABEL_7;
  }
  *(void *)(v16 + 504) = v18;
  *(void *)(v16 + 480) = kSecAttrSyncViewHint;
  uint64_t v35 = (void *)kSecAttrViewHintApplePay;
  if (!kSecAttrViewHintApplePay)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  *(void *)(v16 + 536) = v18;
  *(void *)(v16 + 512) = v35;
  sub_10007582C(0, &qword_100456648);
  CFStringRef v36 = (id)kSecAttrSyncViewHint;
  id v37 = v35;
  NSDictionary.init(dictionaryLiteral:)();
  uint64_t result = static Dictionary._forceBridgeFromObjectiveC(_:result:)();
LABEL_8:
  __break(1u);
  return result;
}

void sub_10029EF30(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v50 = a1;
  uint64_t v51 = (uint64_t)a2;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 58;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = v50;
  uint64_t v14 = v51;
  sub_10006C51C(&qword_100457A60);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100379160;
  *(void *)(inited + 32) = kSecClass;
  type metadata accessor for CFString(0);
  *(void *)(inited + 40) = kSecClassGenericPassword;
  *(void *)(inited + 64) = v16;
  *(void *)(inited + 72) = kSecAttrAccount;
  *(void *)(inited + 80) = v13;
  *(void *)(inited + 88) = v14;
  *(void *)(inited + 104) = &type metadata for String;
  *(void *)(inited + 112) = kSecAttrService;
  CFStringRef v17 = (id)kSecClass;
  CFStringRef v18 = (id)kSecClassGenericPassword;
  CFStringRef v19 = (id)kSecAttrAccount;
  CFStringRef v20 = (id)kSecAttrService;
  *(Swift::String *)(inited + 120) = Data.base64EncodedString(options:)(0);
  *(void *)(inited + 144) = &type metadata for String;
  *(void *)(inited + 152) = kSecAttrAccessGroup;
  uint64_t v21 = *(void *)(v7 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup + 8);
  *(void *)(inited + 160) = *(void *)(v7 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainGroup);
  *(void *)(inited + 168) = v21;
  *(void *)(inited + 184) = &type metadata for String;
  *(void *)(inited + 192) = kSecAttrSynchronizable;
  *(void *)(inited + 224) = &type metadata for Bool;
  *(unsigned char *)(inited + 200) = 1;
  CFStringRef v22 = (id)kSecAttrAccessGroup;
  swift_bridgeObjectRetain();
  CFStringRef v23 = (id)kSecAttrSynchronizable;
  unint64_t v24 = sub_1001DB818(inited);
  uint64_t v25 = *(void **)(v7 + OBJC_IVAR____TtC10seserviced16SEFidoKeyManager_keychainWrapper);
  sub_1002BB714(v24);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unsigned int v27 = [v25 deleteItem:isa];

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(a5, a6);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(a5, a6);
  CFStringRef v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v28, v29))
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    sub_10006D144(a5, a6);
    sub_10006D144(a5, a6);
    if (!v27) {
      return;
    }
    goto LABEL_5;
  }
  uint64_t v30 = swift_slowAlloc();
  uint64_t v50 = swift_slowAlloc();
  *(_DWORD *)uint64_t v30 = 136315906;
  swift_bridgeObjectRetain();
  sub_100290514(a1, (unint64_t)a2, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  os_log_type_t type = v29;
  *(_WORD *)(v30 + 12) = 2080;
  swift_bridgeObjectRetain();
  sub_100290514(a3, (unint64_t)a4, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v30 + 22) = 2080;
  sub_10023CDF4(a5, a6);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v33 = v32;
  swift_bridgeObjectRelease();
  sub_100290514(v31, v33, &v50);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_10006D144(a5, a6);
  sub_10006D144(a5, a6);
  *(_WORD *)(v30 + 32) = 1024;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v28, type, "Key for RP %s RPAH %s KH %s deleted with status %d", (uint8_t *)v30, 0x26u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  if (v27)
  {
LABEL_5:
    sub_10007582C(0, (unint64_t *)&qword_100454598);
    uint64_t v50 = 0;
    uint64_t v51 = 0xE000000000000000;
    _StringGuts.grow(_:)(54);
    v34._object = (void *)0x80000001003BC570;
    v34._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v34);
    v35._countAndFlagsBits = a1;
    v35._object = a2;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 0x204841505220;
    v36._object = (void *)0xE600000000000000;
    String.append(_:)(v36);
    v37._countAndFlagsBits = a3;
    v37._object = a4;
    String.append(_:)(v37);
    v38._countAndFlagsBits = 541608736;
    v38._object = (void *)0xE400000000000000;
    String.append(_:)(v38);
    sub_10023CDF4(a5, a6);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v41 = v40;
    swift_bridgeObjectRelease();
    v42._countAndFlagsBits = v39;
    v42._object = v41;
    String.append(_:)(v42);
    swift_bridgeObjectRelease();
    v43._countAndFlagsBits = 0x2073757461747320;
    v43._object = (void *)0xE800000000000000;
    String.append(_:)(v43);
    v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    sub_100299FAC(0, 1, v50, v51, 0);
    swift_willThrow();
  }
}

uint64_t sub_10029F6D8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_10045AD78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A309C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 32);
    char v12 = 2;
    sub_1001A6A8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 48);
    char v12 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

unint64_t sub_10029F8B8()
{
  unint64_t result = 0x50676E69796C6572;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0x4879654B6F646966;
      break;
    case 3:
      unint64_t result = 0x74614479654B7470;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10029F960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A30F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10029F988(uint64_t a1)
{
  unint64_t v2 = sub_1002A309C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10029F9C4(uint64_t a1)
{
  unint64_t v2 = sub_1002A309C();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10029FA00@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002A32E0(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_10029FA44(void *a1)
{
  return sub_10029F6D8(a1);
}

id sub_10029FB64()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SEFidoKeyManager();
  return [super dealloc];
}

uint64_t sub_10029FC30()
{
  return type metadata accessor for SEFidoKeyManager();
}

uint64_t type metadata accessor for SEFidoKeyManager()
{
  uint64_t result = qword_10045AD18;
  if (!qword_10045AD18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10029FC84()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10029FD28(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_10045ADA0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v9[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_1002A3F94();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v9[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v9[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_10029FEB0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[0] = a4;
  v13[1] = a5;
  uint64_t v7 = sub_10006C51C(&qword_10045ADC8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A4090();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v5)
  {
    char v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1002A0024(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_10045ADD8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = &v11[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100075908(a1, a1[3]);
  sub_1002A3F40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 32);
    v11[15] = 2;
    sub_1001A6A8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1002A01C4()
{
  uint64_t v1 = 0x676E656C6C616863;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E696769726FLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1002A0218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A3680(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A0240(uint64_t a1)
{
  unint64_t v2 = sub_1002A3F94();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A027C(uint64_t a1)
{
  unint64_t v2 = sub_1002A3F94();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A02B8(void *a1)
{
  return sub_10029FD28(a1);
}

uint64_t sub_1002A02D0(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1002A0EB8(v7, v8) & 1;
}

uint64_t sub_1002A0318()
{
  if (*v0) {
    return 0xD000000000000011;
  }
  else {
    return 0x6144746E65696C63;
  }
}

uint64_t sub_1002A0364@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A37CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A038C(uint64_t a1)
{
  unint64_t v2 = sub_1002A4090();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A03C8(uint64_t a1)
{
  unint64_t v2 = sub_1002A4090();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A0404@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002A38E0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1002A0434(void *a1)
{
  return sub_10029FEB0(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1002A0454(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_1002A04F8()
{
  unint64_t v1 = 0xD000000000000011;
  if (*v0 != 1) {
    unint64_t v1 = 0x727574616E676973;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6144746E65696C63;
  }
}

uint64_t sub_1002A0568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A3AE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A0590(uint64_t a1)
{
  unint64_t v2 = sub_1002A3F40();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A05CC(uint64_t a1)
{
  unint64_t v2 = sub_1002A3F40();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A0608@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002A3C68(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1002A064C(void *a1)
{
  return sub_1002A0024(a1);
}

uint64_t sub_1002A0664(_OWORD *a1, long long *a2)
{
  long long v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  long long v3 = *a2;
  long long v4 = a2[1];
  _OWORD v7[2] = a1[2];
  v8[0] = v3;
  long long v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return sub_1002A0F6C(v7, v8) & 1;
}

uint64_t sub_1002A06AC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10006C51C(&qword_10045AE70);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A50F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v3)
  {
    v12[1] = a3;
    char v13 = 1;
    sub_10006C51C(&qword_100459528);
    sub_1002A5144(&qword_10045AE80, (void (*)(void))sub_1001A6A8C);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1002A0868()
{
  if (*v0) {
    return 6501752;
  }
  else {
    return 6777953;
  }
}

uint64_t sub_1002A088C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A40E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A08B4(uint64_t a1)
{
  unint64_t v2 = sub_1002A50F0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A08F0(uint64_t a1)
{
  unint64_t v2 = sub_1002A50F0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002A092C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002A41B8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1002A0958(void *a1)
{
  return sub_1002A06AC(a1, *v1, v1[1]);
}

uint64_t sub_1002A0974(void *a1, void *a2)
{
  if (*a1 == *a2) {
    return sub_1002E387C(a1[1], a2[1]);
  }
  else {
    return 0;
  }
}

uint64_t sub_1002A0998(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10006C51C(&qword_10045ADB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A3FE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v13) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v13 = *(_OWORD *)(v3 + 16);
    char v12 = 1;
    sub_1002A403C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v13 = *(_OWORD *)(v3 + 32);
    char v12 = 2;
    sub_1001A6A8C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1002A0B50()
{
  uint64_t v1 = 0x746D7453747461;
  if (*v0 != 1) {
    uint64_t v1 = 0x6174614468747561;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7630182;
  }
}

uint64_t sub_1002A0BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1002A43B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002A0BCC(uint64_t a1)
{
  unint64_t v2 = sub_1002A3FE8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002A0C08(uint64_t a1)
{
  unint64_t v2 = sub_1002A3FE8();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002A0C44@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1002A44F8(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1002A0C88(void *a1)
{
  return sub_1002A0998(a1);
}

uint64_t sub_1002A0CA0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v7 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  if ((*a1 != *a2 || a1[1] != a2[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || v2 != v7
    || (sub_1002E387C(v4, v6) & 1) == 0)
  {
    return 0;
  }

  return sub_100088AE4(v3, v5, v8, v9);
}

unint64_t sub_1002A0D68()
{
  unint64_t result = qword_10045AD28;
  if (!qword_10045AD28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD28);
  }
  return result;
}

unint64_t sub_1002A0DBC()
{
  unint64_t result = qword_10045AD38;
  if (!qword_10045AD38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD38);
  }
  return result;
}

unint64_t sub_1002A0E10()
{
  unint64_t result = qword_10045AD40;
  if (!qword_10045AD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD40);
  }
  return result;
}

unint64_t sub_1002A0E64()
{
  unint64_t result = qword_10045AD48;
  if (!qword_10045AD48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD48);
  }
  return result;
}

uint64_t sub_1002A0EB8(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[2] == a2[2] && a1[3] == a2[3];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (a1[4] == a2[4] && a1[5] == a2[5])
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t sub_1002A0F6C(void *a1, void *a2)
{
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];

  return sub_100088AE4(v6, v7, v8, v9);
}

uint64_t sub_1002A0FFC(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10006C51C(&qword_10045AD60);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for COSEKey();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  long long v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      uint64_t v14 = (int)v14;
LABEL_6:
      if (v14 == 65)
      {
        uint64_t v36 = v2;
        type metadata accessor for __DataStorage();
        swift_allocObject();
        uint64_t v18 = __DataStorage.init(capacity:)();
        uint64_t v44 = 0;
        unint64_t v45 = v18 | 0x4000000000000000;
        uint64_t v19 = sub_100088F40((uint64_t)&off_10040F910);
        unint64_t v37 = v20;
        uint64_t v38 = v19;
        Data.append(_:)();
        __int16 v39 = 4096;
        Swift::String v42 = &type metadata for UnsafeRawBufferPointer;
        Swift::String v43 = &protocol witness table for UnsafeRawBufferPointer;
        Class v40 = &v39;
        uint64_t v41 = (uint64_t *)&v40;
        sub_100075908(&v40, (uint64_t)&type metadata for UnsafeRawBufferPointer);
        Data._Representation.append(contentsOf:)();
        sub_10007594C((uint64_t)&v40);
        uint64_t v21 = sub_1002B3BD0(a1, a2);
        sub_10023CC58(16, v21, v22, (uint64_t *)&v40);
        uint64_t v23 = (uint64_t)v40;
        unint64_t v24 = (unint64_t)v41;
        Data.append(_:)();
        sub_10006D144(v23, v24);
        Data._Representation.subscript.getter();
        Data._Representation.subscript.getter();
        COSEKey.init(ec2CurveIdentifier:x:y:d:algorithm:keyOperations:keyIdentifier:)();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        {
          sub_10008E734((uint64_t)v8, &qword_10045AD60);
          sub_10007582C(0, (unint64_t *)&qword_100454598);
          sub_100299FAC(0, 1, 0xD000000000000028, 0x80000001003BC650, 0);
          swift_willThrow();
          sub_10006D144(v38, v37);
          return sub_10006D144(v44, v45);
        }
        uint64_t v26 = v38;
        (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
        type metadata accessor for CBOREncoder();
        swift_allocObject();
        CBOREncoder.init()();
        sub_1002A1D90();
        uint64_t v27 = v36;
        uint64_t v28 = dispatch thunk of CBOREncoder.encode<A>(_:)();
        if (v27)
        {
          swift_release();
          sub_10006D144(v26, v37);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
          return sub_10006D144(v44, v45);
        }
        uint64_t v34 = v28;
        unint64_t v35 = v29;
        swift_release();
        Data.append(_:)();
        sub_10006D144(v34, v35);
        sub_10006D144(v26, v37);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        return v44;
      }
      else
      {
LABEL_9:
        Class v40 = 0;
        uint64_t v41 = (uint64_t *)0xE000000000000000;
        _StringGuts.grow(_:)(29);
        swift_bridgeObjectRelease();
        Class v40 = (__int16 *)0xD00000000000001BLL;
        uint64_t v41 = (uint64_t *)0x80000001003BC630;
        uint64_t v25 = 0;
        switch(a2 >> 62)
        {
          case 0uLL:
            uint64_t v25 = BYTE6(a2);
            goto LABEL_17;
          case 1uLL:
            if (__OFSUB__(HIDWORD(a1), a1)) {
              goto LABEL_21;
            }
            uint64_t v25 = HIDWORD(a1) - (int)a1;
LABEL_17:
            sub_10007582C(0, (unint64_t *)&qword_100454598);
            uint64_t v44 = v25;
            v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v33);
            swift_bridgeObjectRelease();
            sub_100299FAC(0, 1, (uint64_t)v40, (uint64_t)v41, 0);
            uint64_t result = swift_willThrow();
            break;
          case 2uLL:
            uint64_t v32 = *(void *)(a1 + 16);
            uint64_t v31 = *(void *)(a1 + 24);
            uint64_t v25 = v31 - v32;
            if (!__OFSUB__(v31, v32)) {
              goto LABEL_17;
            }
            goto LABEL_22;
          case 3uLL:
            goto LABEL_17;
          default:
            JUMPOUT(0);
        }
      }
      return result;
    case 2uLL:
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v14 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1002A157C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for String.Encoding();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  long long v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    uint64_t result = sub_1002A0FFC(a3, a4);
    if (!v5)
    {
      unint64_t v16 = v15;
      uint64_t v17 = result;
      uint64_t v18 = 0;
      switch(v15 >> 62)
      {
        case 1uLL:
          LODWORD(v18) = HIDWORD(result) - result;
          if (__OFSUB__(HIDWORD(result), result)) {
            goto LABEL_20;
          }
          uint64_t v18 = (int)v18;
          goto LABEL_6;
        case 2uLL:
          uint64_t v29 = *(void *)(result + 16);
          uint64_t v28 = *(void *)(result + 24);
          BOOL v30 = __OFSUB__(v28, v29);
          uint64_t v18 = v28 - v29;
          if (!v30) {
            goto LABEL_6;
          }
          __break(1u);
          goto LABEL_19;
        case 3uLL:
          goto LABEL_6;
        default:
          uint64_t v18 = BYTE6(v15);
          goto LABEL_6;
      }
    }
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unint64_t v16 = 0xC000000000000000;
LABEL_6:
    if (__OFADD__(v18, 37))
    {
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    uint64_t v36 = sub_100089000(v18 + 37);
    unint64_t v37 = v19;
    static String.Encoding.utf8.getter();
    uint64_t v20 = String.data(using:allowLossyConversion:)();
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    if (v22 >> 60 == 15)
    {
      sub_10007582C(0, (unint64_t *)&qword_100454598);
      sub_100299FAC(0, 1, 0xD000000000000027, 0x80000001003BC600, 0);
      swift_willThrow();
      sub_10006D144(v17, v16);
      return sub_10006D144(v36, v37);
    }
    else
    {
      uint64_t v23 = sub_1002B3BD0(v20, v22);
      unint64_t v25 = v24;
      Data.append(_:)();
      sub_10006D144(v23, v25);
      if (a5) {
        char v26 = 93;
      }
      else {
        char v26 = 29;
      }
      uint64_t v27 = sub_10006C51C(&qword_100454158);
      uint64_t v34 = (void *)v27;
      unint64_t v35 = (void *)sub_10008C0B0((unint64_t *)&qword_100454160, &qword_100454158);
      LOBYTE(v33[0]) = v26;
      LOBYTE(v32) = *(unsigned char *)sub_100075908(v33, v27);
      Data._Representation.replaceSubrange(_:with:count:)();
      sub_10007594C((uint64_t)v33);
      int v32 = 0;
      uint64_t v34 = &type metadata for UnsafeRawBufferPointer;
      unint64_t v35 = &protocol witness table for UnsafeRawBufferPointer;
      v33[0] = &v32;
      v33[1] = v33;
      sub_100075908(v33, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      Data._Representation.append(contentsOf:)();
      sub_10007594C((uint64_t)v33);
      Data.append(_:)();
      sub_100075868(v20, v22);
      sub_10006D144(v17, v16);
      return v36;
    }
  }
  return result;
}

uint64_t sub_1002A1944(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v7 = String._bridgeToObjectiveC()();
  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  id v45 = 0;
  id v9 = sub_100036B38(a1, isa, a4, v7, 0, v8, &v45);

  id v10 = v45;
  if (!v9)
  {
    uint64_t v29 = sub_10007582C(0, (unint64_t *)&qword_100454598);
    id v39 = v10;
    sub_100299FAC(0, 1, 0xD000000000000015, 0x80000001003BC5E0, (uint64_t)v10);
    swift_willThrow();
LABEL_6:

    return v29;
  }
  id v42 = v45;
  uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v13 = v12;

  id v14 = [self sharedManager];
  uint64_t v43 = v11;
  unint64_t v44 = v13;
  Class v15 = Data._bridgeToObjectiveC()().super.isa;
  id v17 = sub_100056FD0(a1, v16);
  id v18 = [v17 casdCertificate];

  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  Class v22 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v19, v21);
  Class v23 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006C51C(&qword_10045B590);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_100378290;
  *(void *)(v24 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v24 + 40) = v25;
  Class v26 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v45 = 0;
  id v27 = [v14 PerformSEABAAWithAttestation:v15 casdCertificate:v22 nonce:v23 OIDs:v26 validityInterval:0 error:&v45];
  swift_unknownObjectRelease();

  id v28 = v45;
  if (!v27)
  {
    id v40 = v45;
    uint64_t v29 = _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10006D144(v43, v44);
    goto LABEL_6;
  }
  sub_10006C51C(&qword_100459B10);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1003782A0;
  id v30 = v28;
  id v31 = (id)sub_100014F20((uint64_t)v27);
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;

  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  id v35 = (id)sub_100014F14((uint64_t)v27);
  uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  *(void *)(v29 + 48) = v36;
  *(void *)(v29 + 56) = v38;

  sub_10006D144(v43, v44);
  return v29;
}

unint64_t sub_1002A1CE8()
{
  unint64_t result = qword_10045AD50;
  if (!qword_10045AD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD50);
  }
  return result;
}

unint64_t sub_1002A1D3C()
{
  unint64_t result = qword_10045AD58;
  if (!qword_10045AD58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD58);
  }
  return result;
}

unint64_t sub_1002A1D90()
{
  unint64_t result = qword_10045AD68;
  if (!qword_10045AD68)
  {
    type metadata accessor for COSEKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD68);
  }
  return result;
}

void *sub_1002A1DE8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  Class v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Performing FiDO signature", v10, 2u);
    swift_slowDealloc();
  }

  Data.base64EncodedString(options:)(0);
  countAndFlagsBits = (void *)0xE100000000000000;
  unint64_t v12 = sub_1001150C4();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  uint64_t v92 = 61;
  unint64_t v93 = 0xE100000000000000;
  uint64_t v13 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  strcpy((char *)&v87, "webauthn.get");
  BYTE5(v87._object) = 0;
  HIWORD(v87._object) = -5120;
  uint64_t v88 = v13;
  uint64_t v89 = v15;
  uint64_t v90 = a5;
  unint64_t v91 = a6;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  sub_1002A0E64();
  uint64_t v16 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v84)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v18 = v16;
    unint64_t v19 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v85 = sub_1002B3BD0(v18, v19);
    unint64_t v75 = v20;
    id v21 = [a4 key:v12, v12, v12];
    uint64_t v22 = v18;
    id v23 = [v21 publicKey];

    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v27 = sub_1002A157C(a5, a6, v24, v26, 0);
    uint64_t v29 = v28;
    sub_10006D144(v24, v26);
    uint64_t v73 = v22;
    unint64_t v74 = v19;
    v87._object = v29;
    sub_10006D0EC(v27, (unint64_t)v29);
    sub_10006D0EC(v85, v75);
    sub_100141068(v85, v75);
    sub_10006D144(v85, v75);
    unint64_t v31 = (unint64_t)v29;
    uint64_t v77 = v27;
    unint64_t v78 = (unint64_t)v29;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v33 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v34 = sub_1002B3BD0(v27, v31);
    unint64_t v36 = v35;
    Class v37 = Data._bridgeToObjectiveC()().super.isa;
    sub_10006D144(v34, v36);
    v87._countAndFlagsBits = 0;
    id v38 = sub_100034984(a1, isa, v33, a4, v37, (void *)kSecKeyAlgorithmECDSASignatureMessageX962SHA256, &v87);

    countAndFlagsBits = (void *)v87._countAndFlagsBits;
    id v86 = (id)v87._countAndFlagsBits;
    if (v38)
    {
      id v82 = (id)v31;
      id v76 = (id)v87._countAndFlagsBits;
      uint64_t v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v72 = v39;

      Swift::String v87 = Data.base64EncodedString(options:)(0);
      uint64_t v92 = 47;
      unint64_t v93 = 0xE100000000000000;
      uint64_t v40 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      id v42 = v41;
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = v40;
      v87._object = v42;
      uint64_t v92 = 43;
      unint64_t v93 = 0xE100000000000000;
      uint64_t v43 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      id v45 = v44;
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = v43;
      v87._object = v45;
      uint64_t v92 = 61;
      unint64_t v93 = 0xE100000000000000;
      uint64_t v46 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      Swift::String v87 = Data.base64EncodedString(options:)(0);
      uint64_t v92 = 47;
      unint64_t v93 = 0xE100000000000000;
      uint64_t v49 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v51 = v50;
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = v49;
      v87._object = v51;
      uint64_t v92 = 43;
      unint64_t v93 = 0xE100000000000000;
      uint64_t v52 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v54 = v53;
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = v52;
      v87._object = v54;
      uint64_t v92 = 61;
      unint64_t v93 = 0xE100000000000000;
      uint64_t v55 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v57 = v56;
      swift_bridgeObjectRelease();
      v87._countAndFlagsBits = v46;
      v87._object = v48;
      uint64_t v88 = v55;
      uint64_t v89 = v57;
      uint64_t v90 = v71;
      unint64_t v91 = v72;
      swift_allocObject();
      sub_10006D0EC(v71, v72);
      JSONEncoder.init()();
      sub_1002A2804();
      countAndFlagsBits = (void *)dispatch thunk of JSONEncoder.encode<A>(_:)();
      swift_release();
      sub_10006D144(v71, v72);
      sub_10006D144(v27, (unint64_t)v82);
      sub_10006D144(v27, v78);
      sub_10006D144(v85, v75);
      sub_10006D144(v73, v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10006D144(v71, v72);
    }
    else
    {
      unint64_t v58 = v75;
      unint64_t v59 = v31;
      id v60 = (id)v87._countAndFlagsBits;
      Swift::String v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v80 = v27;
        id v83 = (id)v31;
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        uint64_t v92 = swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 136315138;
        swift_beginAccess();
        countAndFlagsBits = v86;
        if (v86)
        {
          id v64 = [v86 localizedDescription];
          uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v67 = v66;
        }
        else
        {
          unint64_t v67 = 0xE300000000000000;
          uint64_t v65 = 7104878;
        }
        sub_100290514(v65, v67, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Failed to sign challenge %s", v63, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        unint64_t v58 = v75;
        unint64_t v59 = (unint64_t)v83;
        uint64_t v68 = v85;
        uint64_t v69 = v80;
      }
      else
      {

        uint64_t v68 = v85;
        uint64_t v69 = v27;
      }
      sub_10007582C(0, (unint64_t *)&qword_100454598);
      id v70 = countAndFlagsBits;
      sub_100299FAC(0, 1, 0xD000000000000010, 0x80000001003BC6B0, (uint64_t)countAndFlagsBits);
      swift_willThrow();

      sub_10006D144(v69, v59);
      sub_10006D144(v77, v78);
      sub_10006D144(v68, v58);
      sub_10006D144(v73, v74);
    }
  }
  return countAndFlagsBits;
}

unint64_t sub_1002A2804()
{
  unint64_t result = qword_10045AD70;
  if (!qword_10045AD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD70);
  }
  return result;
}

uint64_t destroy for WebauthN.AuthenticatorAttestationResponse()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WebauthN.AuthenticatorAttestationResponse(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WebauthN.AuthenticatorAttestationResponse(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WebauthN.AuthenticatorAttestationResponse(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WebauthN.AuthenticatorAttestationResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebauthN.AuthenticatorAttestationResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAttestationResponse()
{
  return &type metadata for WebauthN.AuthenticatorAttestationResponse;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement()
{
  return &type metadata for WebauthN.AttestationStatement;
}

uint64_t destroy for WebauthN.ClientData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for WebauthN.ClientData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WebauthN.ClientData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WebauthN.ClientData(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for WebauthN.ClientData()
{
  return &type metadata for WebauthN.ClientData;
}

uint64_t _s10seserviced8WebauthNV20AttestationStatementVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(a1 + 40);

  return sub_10006D144(v2, v3);
}

void *_s10seserviced8WebauthNV20AttestationStatementVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[4];
  unint64_t v6 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(v5, v6);
  a1[4] = v5;
  a1[5] = v6;
  return a1;
}

void *_s10seserviced8WebauthNV20AttestationStatementVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  unint64_t v4 = a2[5];
  sub_10006D0EC(v5, v4);
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  a1[4] = v5;
  a1[5] = v4;
  sub_10006D144(v6, v7);
  return a1;
}

void *_s10seserviced8WebauthNV20AttestationStatementVwta_0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10006D144(v6, v7);
  return a1;
}

uint64_t _s10seserviced8WebauthNV20AttestationStatementVwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1002A2DAC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAssertionResponse()
{
  return &type metadata for WebauthN.AuthenticatorAssertionResponse;
}

uint64_t destroy for SEFidoKeyManager.FiDOKeyInKeychain(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10006D144(a1[4], a1[5]);
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];

  return sub_10006D144(v2, v3);
}

void *initializeWithCopy for SEFidoKeyManager.FiDOKeyInKeychain(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10006D0EC(v6, v7);
  a1[4] = v6;
  a1[5] = v7;
  uint64_t v9 = a2[6];
  unint64_t v8 = a2[7];
  sub_10006D0EC(v9, v8);
  a1[6] = v9;
  a1[7] = v8;
  return a1;
}

void *assignWithCopy for SEFidoKeyManager.FiDOKeyInKeychain(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[4];
  unint64_t v5 = a2[5];
  sub_10006D0EC(v4, v5);
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  a1[4] = v4;
  a1[5] = v5;
  sub_10006D144(v6, v7);
  uint64_t v9 = a2[6];
  unint64_t v8 = a2[7];
  sub_10006D0EC(v9, v8);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  a1[6] = v9;
  a1[7] = v8;
  sub_10006D144(v10, v11);
  return a1;
}

__n128 initializeWithTake for SEFidoKeyManager.FiDOKeyInKeychain(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for SEFidoKeyManager.FiDOKeyInKeychain(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[4];
  unint64_t v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10006D144(v6, v7);
  uint64_t v8 = a1[6];
  unint64_t v9 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10006D144(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SEFidoKeyManager.FiDOKeyInKeychain(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SEFidoKeyManager.FiDOKeyInKeychain(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEFidoKeyManager.FiDOKeyInKeychain()
{
  return &type metadata for SEFidoKeyManager.FiDOKeyInKeychain;
}

unint64_t sub_1002A309C()
{
  unint64_t result = qword_10045AD80;
  if (!qword_10045AD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD80);
  }
  return result;
}

uint64_t sub_1002A30F0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x50676E69796C6572 && a2 == 0xEC00000079747261;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001003BC6D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4879654B6F646966 && a2 == 0xEB00000000687361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x74614479654B7470 && a2 == 0xE900000000000061)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1002A32E0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10006C51C(&qword_10045AD88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A309C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)a1);
  }
  LOBYTE(v28) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v26 = v10;
  LOBYTE(v28) = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v27 = v14;
  uint64_t v24 = v13;
  char v30 = 2;
  unint64_t v15 = sub_1001A6880();
  swift_bridgeObjectRetain();
  unint64_t v25 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v30 = 3;
  unint64_t v22 = v29;
  uint64_t v23 = v28;
  sub_10006D0EC(v28, v29);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v16 = v28;
  unint64_t v17 = v29;
  swift_bridgeObjectRetain();
  uint64_t v18 = v27;
  swift_bridgeObjectRetain();
  unint64_t v20 = v22;
  uint64_t v19 = v23;
  sub_10006D0EC(v23, v22);
  sub_10006D0EC(v16, v17);
  sub_10006D144(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10007594C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10006D144(v19, v20);
  uint64_t result = sub_10006D144(v16, v17);
  *a2 = v26;
  a2[1] = v12;
  a2[2] = v24;
  a2[3] = v18;
  a2[4] = v19;
  a2[5] = v20;
  a2[6] = v16;
  a2[7] = v17;
  return result;
}

uint64_t sub_1002A3680(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E656C6C616863 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E696769726FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002A37CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6144746E65696C63 && a2 == 0xEE004E4F534A6174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003BC710)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002A38E0(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_10045ADE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[4];
  sub_100075908(a1, a1[3]);
  sub_1002A4090();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10007594C((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    char v11 = 1;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain();
    sub_10007594C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1002A3AE8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6144746E65696C63 && a2 == 0xEE004E4F534A6174;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001003BC6F0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002A3C68@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10006C51C(&qword_10045AD90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A3F40();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10007594C((uint64_t)a1);
  }
  LOBYTE(v24) = 0;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v23 = v10;
  LOBYTE(v24) = 1;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v21 = v13;
  char v26 = 2;
  sub_1001A6880();
  swift_bridgeObjectRetain();
  uint64_t v22 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v16 = v24;
  unint64_t v17 = v25;
  swift_bridgeObjectRetain();
  uint64_t v18 = v22;
  swift_bridgeObjectRetain();
  sub_10006D0EC(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10007594C((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_10006D144(v16, v17);
  *a2 = v23;
  a2[1] = v12;
  a2[2] = v21;
  a2[3] = v18;
  a2[4] = v16;
  a2[5] = v17;
  return result;
}

unint64_t sub_1002A3F40()
{
  unint64_t result = qword_10045AD98;
  if (!qword_10045AD98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AD98);
  }
  return result;
}

unint64_t sub_1002A3F94()
{
  unint64_t result = qword_10045ADA8;
  if (!qword_10045ADA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045ADA8);
  }
  return result;
}

unint64_t sub_1002A3FE8()
{
  unint64_t result = qword_10045ADB8;
  if (!qword_10045ADB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045ADB8);
  }
  return result;
}

unint64_t sub_1002A403C()
{
  unint64_t result = qword_10045ADC0;
  if (!qword_10045ADC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045ADC0);
  }
  return result;
}

unint64_t sub_1002A4090()
{
  unint64_t result = qword_10045ADD0;
  if (!qword_10045ADD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045ADD0);
  }
  return result;
}

uint64_t sub_1002A40E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 6777953 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6501752 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1002A41B8(void *a1)
{
  uint64_t v3 = sub_10006C51C(&qword_10045AE88);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = a1[3];
  sub_100075908(a1, v8);
  sub_1002A50F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    v10[31] = 0;
    uint64_t v8 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_10006C51C(&qword_100459528);
    v10[15] = 1;
    sub_1002A5144(&qword_10045AE90, (void (*)(void))sub_1001A6880);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  }
  sub_10007594C((uint64_t)a1);
  return v8;
}

uint64_t sub_1002A43B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7630182 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746D7453747461 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6174614468747561 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1002A44F8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10006C51C(&qword_10045ADE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100075908(a1, a1[3]);
  sub_1002A3FE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_10007594C((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v19) = 0;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    char v21 = 1;
    sub_1002A47E8();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v17 = v19;
    uint64_t v18 = v10;
    unint64_t v13 = v20;
    char v21 = 2;
    sub_1001A6880();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v14 = v19;
    unint64_t v15 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10006D0EC(v14, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10007594C((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = sub_10006D144(v14, v15);
    *a2 = v18;
    a2[1] = v12;
    a2[2] = v17;
    a2[3] = v13;
    a2[4] = v14;
    a2[5] = v15;
  }
  return result;
}

unint64_t sub_1002A47E8()
{
  unint64_t result = qword_10045ADF0;
  if (!qword_10045ADF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045ADF0);
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAttestationResponse.CodingKeys()
{
  return &type metadata for WebauthN.AuthenticatorAttestationResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement.CodingKeys()
{
  return &type metadata for WebauthN.AttestationStatement.CodingKeys;
}

ValueMetadata *type metadata accessor for WebauthN.ClientData.CodingKeys()
{
  return &type metadata for WebauthN.ClientData.CodingKeys;
}

unsigned char *_s10seserviced8WebauthNV20AttestationStatementV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A4940);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AuthenticatorAssertionResponse.CodingKeys()
{
  return &type metadata for WebauthN.AuthenticatorAssertionResponse.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A4A44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys()
{
  return &type metadata for SEFidoKeyManager.FiDOKeyInKeychain.CodingKeys;
}

ValueMetadata *type metadata accessor for WebauthN()
{
  return &type metadata for WebauthN;
}

void *initializeBufferWithCopyOfBuffer for WebauthN.AttestationStatement.AppleAttestationFormat(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for WebauthN.AttestationStatement.AppleAttestationFormat(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for WebauthN.AttestationStatement.AppleAttestationFormat(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WebauthN.AttestationStatement.AppleAttestationFormat(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebauthN.AttestationStatement.AppleAttestationFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement.AppleAttestationFormat()
{
  return &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat;
}

unint64_t sub_1002A4BCC()
{
  unint64_t result = qword_10045ADF8;
  if (!qword_10045ADF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045ADF8);
  }
  return result;
}

unint64_t sub_1002A4C24()
{
  unint64_t result = qword_10045AE00;
  if (!qword_10045AE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE00);
  }
  return result;
}

unint64_t sub_1002A4C7C()
{
  unint64_t result = qword_10045AE08;
  if (!qword_10045AE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE08);
  }
  return result;
}

unint64_t sub_1002A4CD4()
{
  unint64_t result = qword_10045AE10;
  if (!qword_10045AE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE10);
  }
  return result;
}

unint64_t sub_1002A4D2C()
{
  unint64_t result = qword_10045AE18;
  if (!qword_10045AE18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE18);
  }
  return result;
}

unint64_t sub_1002A4D84()
{
  unint64_t result = qword_10045AE20;
  if (!qword_10045AE20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE20);
  }
  return result;
}

unint64_t sub_1002A4DDC()
{
  unint64_t result = qword_10045AE28;
  if (!qword_10045AE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE28);
  }
  return result;
}

unint64_t sub_1002A4E34()
{
  unint64_t result = qword_10045AE30;
  if (!qword_10045AE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE30);
  }
  return result;
}

unint64_t sub_1002A4E8C()
{
  unint64_t result = qword_10045AE38;
  if (!qword_10045AE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE38);
  }
  return result;
}

unint64_t sub_1002A4EE4()
{
  unint64_t result = qword_10045AE40;
  if (!qword_10045AE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE40);
  }
  return result;
}

unint64_t sub_1002A4F3C()
{
  unint64_t result = qword_10045AE48;
  if (!qword_10045AE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE48);
  }
  return result;
}

unint64_t sub_1002A4F94()
{
  unint64_t result = qword_10045AE50;
  if (!qword_10045AE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE50);
  }
  return result;
}

unint64_t sub_1002A4FEC()
{
  unint64_t result = qword_10045AE58;
  if (!qword_10045AE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE58);
  }
  return result;
}

unint64_t sub_1002A5044()
{
  unint64_t result = qword_10045AE60;
  if (!qword_10045AE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE60);
  }
  return result;
}

unint64_t sub_1002A509C()
{
  unint64_t result = qword_10045AE68;
  if (!qword_10045AE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE68);
  }
  return result;
}

unint64_t sub_1002A50F0()
{
  unint64_t result = qword_10045AE78;
  if (!qword_10045AE78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE78);
  }
  return result;
}

uint64_t sub_1002A5144(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(&qword_100459528);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s10seserviced8WebauthNV32AuthenticatorAttestationResponseV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002A5280);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys()
{
  return &type metadata for WebauthN.AttestationStatement.AppleAttestationFormat.CodingKeys;
}

unint64_t sub_1002A52BC()
{
  unint64_t result = qword_10045AE98;
  if (!qword_10045AE98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AE98);
  }
  return result;
}

unint64_t sub_1002A5314()
{
  unint64_t result = qword_10045AEA0;
  if (!qword_10045AEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AEA0);
  }
  return result;
}

unint64_t sub_1002A536C()
{
  unint64_t result = qword_10045AEA8;
  if (!qword_10045AEA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045AEA8);
  }
  return result;
}

uint64_t sub_1002A53C4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_10045AEB0);
  sub_10008E55C(v0, (uint64_t)qword_10045AEB0);
  return Logger.init(subsystem:category:)();
}

void sub_1002A5444()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  unint64_t v31 = [v0 initWithSuiteName:v1];

  if (v31)
  {
    id v2 = objc_allocWithZone((Class)LSApplicationRecord);
    id v6 = sub_10019636C(0xD000000000000012, 0x80000001003B5960, 0);
    id v7 = [v6 localizedName];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSString v8 = String._bridgeToObjectiveC()();
    id v9 = [v31 stringForKey:v8];

    if (v9)
    {
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v11;

      if (v10 == 0xD000000000000012 && v12 == 0x80000001003B5960)
      {
        swift_bridgeObjectRelease();
LABEL_13:
        swift_bridgeObjectRelease();
        if (qword_100453908 != -1) {
          swift_once();
        }
        uint64_t v15 = type metadata accessor for Logger();
        sub_10008E55C(v15, (uint64_t)qword_10045AEB0);
        uint64_t v16 = Logger.logObject.getter();
        os_log_type_t v17 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Passbook is already default -- no op", v18, 2u);
          swift_slowDealloc();
        }

        unint64_t v13 = v31;
        goto LABEL_23;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_13;
      }
    }
    NSString v19 = String._bridgeToObjectiveC()();
    NSString v20 = String._bridgeToObjectiveC()();
    [v31 setValue:v19 forKey:v20];

    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    NSString v22 = String._bridgeToObjectiveC()();
    [v31 setValue:isa forKey:v22];

    NSString v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    NSString v24 = String._bridgeToObjectiveC()();
    [v31 setValue:v23 forKey:v24];

    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10008E55C(v25, (uint64_t)qword_10045AEB0);
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Configured passbook as default", v28, 2u);
      swift_slowDealloc();
    }

    Class v29 = Bool._bridgeToObjectiveC()().super.super.isa;
    char v30 = String._bridgeToObjectiveC()();
    [v31 setValue:v29 forKey:v30];

    unint64_t v13 = v30;
    goto LABEL_23;
  }
  if (qword_100453908 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_10045AEB0);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v32, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100290514(0xD00000000000001CLL, 0x80000001003BC7B0, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v32, v4, "%s -- unable to initialize Settings Suite!?", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return;
  }
  unint64_t v13 = v32;
LABEL_23:
}

void sub_1002A5B3C()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  NSString v24 = [v0 initWithSuiteName:v1];

  if (v24)
  {
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v24 stringForKey:v2];

    if (v3)
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v6 = v5;

      if (qword_100453908 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10008E55C(v7, (uint64_t)qword_10045AEB0);
      NSString v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Migrating from v1 schema to v3", v10, 2u);
        swift_slowDealloc();
      }

      id v11 = objc_allocWithZone((Class)LSApplicationRecord);
      id v19 = sub_10019636C(v4, v6, 1);
      id v20 = [v19 localizedName];
      NSString v21 = v20;
      if (!v20)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v21 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      NSString v22 = String._bridgeToObjectiveC()();
      [v24 setValue:v21 forKey:v22];
    }
    else
    {
      if (qword_100453908 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_10008E55C(v15, (uint64_t)qword_10045AEB0);
      oslog = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(oslog, v16))
      {
        os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v16, "No default app, nothing to migrate", v17, 2u);
        swift_slowDealloc();

        uint64_t v18 = oslog;
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10008E55C(v12, (uint64_t)qword_10045AEB0);
    NSString v24 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v13))
    {
      char v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v13, "Unable to initialize Settings Suite!?", v14, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v18 = v24;
LABEL_21:
}

void sub_1002A6088(uint64_t *a1@<X8>)
{
  if (qword_100453908 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_10045AEB0);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Current Default app?", v5, 2u);
    swift_slowDealloc();
  }

  id v6 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithSuiteName:v7];

  if (!v8)
  {
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v16, "We are super doomed -- unable to initialize Settings Suite!?", v17, 2u);
      swift_slowDealloc();
    }

    goto LABEL_38;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 stringForKey:v9];

  if (!v10)
  {

    uint64_t v18 = 0;
    unint64_t v12 = 0;
    uint64_t v19 = 0;
LABEL_39:
    unint64_t v23 = 0;
    goto LABEL_40;
  }
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v12 = v11;

  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v8 objectForKey:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  sub_100076148((uint64_t)&v45, (uint64_t)v47, (uint64_t *)&unk_1004556C0);
  if (!v48)
  {
    swift_bridgeObjectRelease();

    sub_1000AE778((uint64_t)v47);
LABEL_38:
    uint64_t v18 = 0;
    unint64_t v12 = 0;
    uint64_t v19 = 0;
    id v10 = 0;
    goto LABEL_39;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_37:

    goto LABEL_38;
  }
  uint64_t v19 = v44;
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v8 stringForKey:v20];

  if (!v21)
  {
    swift_bridgeObjectRelease();
    sub_1002A5B3C();
    NSString v27 = String._bridgeToObjectiveC()();
    id v28 = [v8 stringForKey:v27];

    if (v28)
    {
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v30;

      NSString v31 = String._bridgeToObjectiveC()();
      id v32 = [v8 objectForKey:v31];

      if (v32)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        long long v45 = 0u;
        long long v46 = 0u;
      }
      sub_100076148((uint64_t)&v45, (uint64_t)v47, (uint64_t *)&unk_1004556C0);
      if (v48)
      {
        uint64_t v18 = v29;
        if (swift_dynamicCast())
        {
          uint64_t v19 = v44;
          NSString v33 = String._bridgeToObjectiveC()();
          id v34 = [v8 stringForKey:v33];

          if (v34)
          {
            id v10 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v23 = v35;

            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            NSString v24 = Logger.logObject.getter();
            os_log_type_t v36 = static os_log_type_t.debug.getter();
            if (!os_log_type_enabled(v24, v36))
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();

              goto LABEL_40;
            }
            os_log_type_t v43 = v36;
            uint64_t v37 = swift_slowAlloc();
            v47[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v37 = 136315394;
            swift_bridgeObjectRetain();
            *(void *)&long long v45 = sub_100290514(v18, v12, v47);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v37 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)&long long v45 = sub_100290514((uint64_t)v10, v23, v47);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v24, v43, "Default App %s with display name %s", (uint8_t *)v37, 0x16u);
            goto LABEL_19;
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1000AE778((uint64_t)v47);
      }
    }
    id v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Default app localized name missing even after migration", v40, 2u);
      swift_slowDealloc();
    }

    goto LABEL_37;
  }
  id v10 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  NSString v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v24, v25))
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    uint64_t v18 = v42;
    goto LABEL_40;
  }
  os_log_type_t type = v25;
  uint64_t v26 = swift_slowAlloc();
  v47[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v26 = 136315394;
  swift_bridgeObjectRetain();
  uint64_t v18 = v42;
  *(void *)&long long v45 = sub_100290514(v42, v12, v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v26 + 12) = 2080;
  swift_bridgeObjectRetain();
  *(void *)&long long v45 = sub_100290514((uint64_t)v10, v23, v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v24, type, "Default App %s with display name %s", (uint8_t *)v26, 0x16u);
LABEL_19:
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

LABEL_40:
  *a1 = v18;
  a1[1] = v12;
  a1[2] = v19;
  a1[3] = (uint64_t)v10;
  a1[4] = v23;
}

void sub_1002A68E0(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithSuiteName:v3];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    NSString v6 = String._bridgeToObjectiveC()();
    [v4 setValue:v5 forKey:v6];

    uint64_t v15 = *(void *)(a1 + 16);
    type metadata accessor for NFWalletDomain(0);
    uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    NSString v8 = String._bridgeToObjectiveC()();
    [v4 setValue:v7 forKey:v8];
    swift_unknownObjectRelease();

    NSString v9 = String._bridgeToObjectiveC()();
    NSString v10 = String._bridgeToObjectiveC()();
    [v4 setValue:v9 forKey:v10];
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_10045AEB0);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      NSString v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)NSString v13 = 136315138;
      sub_100290514(0xD000000000000011, 0x80000001003BCA30, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "%s -- unable to initialize Settings Suite!?", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

void sub_1002A6BCC()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    [v2 setValue:0 forKey:v3];

    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    NSString v5 = String._bridgeToObjectiveC()();
    [v2 setValue:isa forKey:v5];

    NSString v6 = String._bridgeToObjectiveC()();
    [v2 setValue:0 forKey:v6];

    Class v7 = Bool._bridgeToObjectiveC()().super.super.isa;
    oslog = String._bridgeToObjectiveC()();
    [v2 setValue:v7 forKey:oslog];
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E55C(v8, (uint64_t)qword_10045AEB0);
    oslog = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      NSString v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)NSString v10 = 136315138;
      sub_100290514(0xD000000000000016, 0x80000001003BCA50, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "%s -- unable to initialize Settings Suite!?", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

id sub_1002A6EB8()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v2 BOOLForKey:v3];
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_10045AEB0);
    NSString v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      sub_100290514(0xD000000000000013, 0x80000001003BC7D0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s -- unable to initialize Settings Suite!?", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return 0;
  }
  return v4;
}

void sub_1002A70CC()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2)
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E55C(v3, (uint64_t)qword_10045AEB0);
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      NSString v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Performing migration from v2 to v4", v6, 2u);
      swift_slowDealloc();
    }

    NSString v7 = String._bridgeToObjectiveC()();
    id v8 = [v2 BOOLForKey:v7];

    NSString v9 = String._bridgeToObjectiveC()();
    [v2 setBool:v8 forKey:v9];

    NSString v10 = String._bridgeToObjectiveC()();
    [v2 removeObjectForKey:v10];

    NSString v11 = String._bridgeToObjectiveC()();
    id v12 = [v2 BOOLForKey:v11];

    NSString v13 = String._bridgeToObjectiveC()();
    [v2 setBool:v12 forKey:v13];

    NSString v14 = String._bridgeToObjectiveC()();
    [v2 removeObjectForKey:v14];

    NSString v15 = String._bridgeToObjectiveC()();
    id v16 = [v2 BOOLForKey:v15];

    NSString v17 = String._bridgeToObjectiveC()();
    [v2 setBool:v16 forKey:v17];

    NSString v18 = String._bridgeToObjectiveC()();
    [v2 setBool:v16 forKey:v18];

    NSString v19 = String._bridgeToObjectiveC()();
    [v2 removeObjectForKey:v19];

    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = [v2 objectForKey:v20];

    if (v21)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v38, 0, sizeof(v38));
    }
    sub_100076148((uint64_t)v38, (uint64_t)&v39, (uint64_t *)&unk_1004556C0);
    if (*((void *)&v40 + 1))
    {
      sub_10006C51C(&qword_1004555E0);
      swift_dynamicCast();
    }
    else
    {
      sub_1000AE778((uint64_t)&v39);
    }
    sub_10006C51C(&qword_100457240);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v26 = String._bridgeToObjectiveC()();
    [v2 setObject:isa forKey:v26];

    NSString v27 = String._bridgeToObjectiveC()();
    [v2 removeObjectForKey:v27];

    NSString v28 = String._bridgeToObjectiveC()();
    id v29 = [v2 stringForKey:v28];

    NSString v30 = String._bridgeToObjectiveC()();
    [v2 setObject:v29 forKey:v30];

    NSString v31 = String._bridgeToObjectiveC()();
    [v2 removeObjectForKey:v31];

    uint64_t v32 = PKDoubleClickAllowed();
    NSString v33 = String._bridgeToObjectiveC()();
    [v2 setBool:v32 forKey:v33];

    long long v39 = 0u;
    long long v40 = 0u;
    char v41 = 1;
    LOBYTE(v32) = sub_1002973F0(6, (uint64_t)&v39, 0, 0);
    NSString v34 = String._bridgeToObjectiveC()();
    [v2 setBool:v32 & 1 forKey:v34];

    LOBYTE(v32) = sub_1002973F0(4, (uint64_t)&v39, 0, 0);
    NSString v35 = String._bridgeToObjectiveC()();
    [v2 setBool:v32 & 1 forKey:v35];

    NSString v36 = String._bridgeToObjectiveC()();
    [v2 setInteger:4 forKey:v36];
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_10008E55C(v22, (uint64_t)qword_10045AEB0);
    oslog = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v23))
    {
      NSString v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v23, "Unable to initialize Settings Suite!?", v24, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_1002A780C()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2)
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10008E55C(v3, (uint64_t)qword_10045AEB0);
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      NSString v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Performing migration from v3 to v4", v6, 2u);
      swift_slowDealloc();
    }

    memset(v13, 0, sizeof(v13));
    char v14 = 1;
    char v7 = sub_1002973F0(4, (uint64_t)v13, 0, 0);
    NSString v8 = String._bridgeToObjectiveC()();
    [v2 setBool:v7 & 1 forKey:v8];

    oslog = String._bridgeToObjectiveC()();
    [v2 setInteger:4 forKey:@"key"];
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_10045AEB0);
    oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      NSString v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Unable to initialize Settings Suite!?", v11, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1002A7A98()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithSuiteName:v1];

  if (!v2)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 valueForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_1000AE778((uint64_t)&v47);
  }
  else
  {
    long long v47 = 0u;
    long long v48 = 0u;
    sub_1000AE778((uint64_t)&v47);
    sub_1002A70CC();
  }
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v2 integerForKey:v5];

  if (v6 == (id)3) {
    sub_1002A780C();
  }
  NSString v7 = String._bridgeToObjectiveC()();
  unsigned __int8 v8 = [v2 BOOLForKey:v7];

  NSString v9 = String._bridgeToObjectiveC()();
  unsigned __int8 v10 = [v2 BOOLForKey:v9];

  NSString v11 = String._bridgeToObjectiveC()();
  unsigned __int8 v41 = [v2 BOOLForKey:v11];

  NSString v12 = String._bridgeToObjectiveC()();
  unsigned __int8 v13 = [v2 BOOLForKey:v12];

  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v2 objectForKey:v14];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v44 = 0u;
    long long v45 = 0u;
  }
  sub_100076148((uint64_t)&v44, (uint64_t)&v47, (uint64_t *)&unk_1004556C0);
  unsigned __int8 v42 = v10;
  if (!*((void *)&v48 + 1))
  {
    sub_1000AE778((uint64_t)&v47);
    goto LABEL_14;
  }
  sub_10006C51C(&qword_1004555E0);
  if (!swift_dynamicCast())
  {
LABEL_14:
    id v16 = _swiftEmptyArrayStorage;
    goto LABEL_15;
  }
  id v16 = v43;
LABEL_15:
  NSString v17 = String._bridgeToObjectiveC()();
  unsigned __int8 v18 = [v2 BOOLForKey:v17];

  NSString v19 = String._bridgeToObjectiveC()();
  unsigned __int8 v20 = [v2 BOOLForKey:v19];

  uint64_t v21 = v16[2];
  if (v21)
  {
    unsigned __int8 v39 = v8;
    id v40 = v2;
    swift_bridgeObjectRetain();
    uint64_t v22 = 0;
    os_log_type_t v23 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v25 = swift_bridgeObjectRetain();
      sub_1000AD588(v25, &v44);
      long long v26 = v44;
      long long v27 = v45;
      uint64_t v28 = v46;
      sub_100076148((uint64_t)&v44, (uint64_t)&v47, &qword_100455AC8);
      if (*((void *)&v47 + 1))
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          os_log_type_t v23 = sub_10025990C(0, v23[2] + 1, 1, v23);
        }
        unint64_t v30 = v23[2];
        unint64_t v29 = v23[3];
        if (v30 >= v29 >> 1) {
          os_log_type_t v23 = sub_10025990C((void *)(v29 > 1), v30 + 1, 1, v23);
        }
        _OWORD v23[2] = v30 + 1;
        NSString v24 = &v23[5 * v30];
        *((_OWORD *)v24 + 2) = v26;
        *((_OWORD *)v24 + 3) = v27;
        v24[8] = v28;
      }
      ++v22;
    }
    while (v21 != v22);
    swift_bridgeObjectRelease();
    id v2 = v40;
    unsigned __int8 v8 = v39;
  }
  else
  {
    os_log_type_t v23 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SECSettingsPaneReconciler.PaneConfig();
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = v8;
  *(unsigned char *)(v31 + 17) = v42;
  *(unsigned char *)(v31 + 18) = v41;
  *(unsigned char *)(v31 + 19) = v13;
  *(unsigned char *)(v31 + 20) = v18;
  *(unsigned char *)(v31 + 21) = v20;
  *(void *)(v31 + 24) = v23;
  if (qword_100453908 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10008E55C(v32, (uint64_t)qword_10045AEB0);
  swift_retain();
  NSString v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    NSString v35 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v43 = (void *)swift_slowAlloc();
    *(_DWORD *)NSString v35 = 136315138;
    uint64_t v36 = sub_1001936E4();
    sub_100290514(v36, v37, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Read current Pane Config %s", v35, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  return v31;
}

void sub_1002A80FC(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithSuiteName:v3];

  if (v4)
  {
    if (qword_100453908 != -1) {
      goto LABEL_30;
    }
    while (1)
    {
      uint64_t v5 = type metadata accessor for Logger();
      sub_10008E55C(v5, (uint64_t)qword_10045AEB0);
      swift_retain_n();
      id v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v6, v7))
      {
        unsigned __int8 v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)unsigned __int8 v8 = 136315138;
        uint64_t v9 = sub_1001936E4();
        uint64_t v69 = (void *)sub_100290514(v9, v10, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Writing Pane Config %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v15 = String._bridgeToObjectiveC()();
      [v4 setValue:isa forKey:v15];

      Class v16 = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v17 = String._bridgeToObjectiveC()();
      [v4 setValue:v16 forKey:v17];

      Class v18 = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v19 = String._bridgeToObjectiveC()();
      [v4 setValue:v18 forKey:v19];

      Class v20 = Bool._bridgeToObjectiveC()().super.super.isa;
      NSString v21 = String._bridgeToObjectiveC()();
      [v4 setValue:v20 forKey:v21];

      uint64_t v22 = *(void *)(a1 + 24);
      int64_t v23 = *(void *)(v22 + 16);
      if (!v23) {
        break;
      }
      id v64 = v4;
      uint64_t v69 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      sub_1002CFA50(0, v23, 0);
      sub_10006C51C((uint64_t *)&unk_100455760);
      NSString v24 = (uint64_t *)(v22 + 64);
      while (1)
      {
        uint64_t v25 = *(v24 - 4);
        uint64_t v26 = *(v24 - 3);
        uint64_t v27 = *(v24 - 2);
        uint64_t v28 = *(v24 - 1);
        uint64_t v29 = *v24;
        sub_10006C51C(&qword_1004555D0);
        uint64_t inited = swift_initStackObject();
        *(void *)(inited + 32) = 0x6449656C646E7562;
        uint64_t v31 = inited + 32;
        *(_OWORD *)(inited + 16) = xmmword_100378470;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 40) = 0xE800000000000000;
        *(void *)(inited + 48) = v25;
        *(void *)(inited + 56) = v26;
        *(void *)(inited + 80) = 0x6E69616D6F64;
        uint64_t v32 = inited + 80;
        *(void *)(inited + 120) = &type metadata for UInt;
        *(void *)(inited + 88) = 0xE600000000000000;
        *(void *)(inited + 96) = v27;
        *(void *)(inited + 128) = 0x4E79616C70736964;
        uint64_t v33 = inited + 128;
        *(void *)(inited + 168) = &type metadata for String;
        *(void *)(inited + 136) = 0xEB00000000656D61;
        *(void *)(inited + 144) = v28;
        *(void *)(inited + 152) = v29;
        id v4 = (void *)static _DictionaryStorage.allocate(capacity:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10010DAB8(v31, (uint64_t)&v66);
        uint64_t v34 = v66;
        a1 = v67;
        unint64_t v35 = sub_1002C0AD0(v66, v67);
        if (v36) {
          break;
        }
        unint64_t v37 = v4 + 8;
        *(void *)((char *)v4 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v35;
        id v38 = (uint64_t *)(v4[6] + 16 * v35);
        uint64_t *v38 = v34;
        v38[1] = a1;
        sub_1000761D0(v68, (_OWORD *)(v4[7] + 32 * v35));
        uint64_t v39 = v4[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_29;
        }
        v4[2] = v41;
        sub_10010DAB8(v32, (uint64_t)&v66);
        uint64_t v42 = v66;
        a1 = v67;
        unint64_t v43 = sub_1002C0AD0(v66, v67);
        if (v44) {
          break;
        }
        *(void *)((char *)v37 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
        long long v45 = (uint64_t *)(v4[6] + 16 * v43);
        *long long v45 = v42;
        v45[1] = a1;
        sub_1000761D0(v68, (_OWORD *)(v4[7] + 32 * v43));
        uint64_t v46 = v4[2];
        BOOL v40 = __OFADD__(v46, 1);
        uint64_t v47 = v46 + 1;
        if (v40) {
          goto LABEL_29;
        }
        v4[2] = v47;
        sub_10010DAB8(v33, (uint64_t)&v66);
        uint64_t v48 = v66;
        uint64_t v49 = v67;
        unint64_t v50 = sub_1002C0AD0(v66, v67);
        if (v51) {
          break;
        }
        *(void *)((char *)v37 + ((v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v50;
        uint64_t v52 = (uint64_t *)(v4[6] + 16 * v50);
        *uint64_t v52 = v48;
        v52[1] = v49;
        sub_1000761D0(v68, (_OWORD *)(v4[7] + 32 * v50));
        uint64_t v53 = v4[2];
        BOOL v40 = __OFADD__(v53, 1);
        uint64_t v54 = v53 + 1;
        if (v40) {
          goto LABEL_29;
        }
        v4[2] = v54;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v55 = v69;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFA50(0, v55[2] + 1, 1);
          uint64_t v55 = v69;
        }
        unint64_t v57 = v55[2];
        unint64_t v56 = v55[3];
        if (v57 >= v56 >> 1)
        {
          sub_1002CFA50(v56 > 1, v57 + 1, 1);
          uint64_t v55 = v69;
        }
        v24 += 5;
        v55[2] = v57 + 1;
        v55[v57 + 4] = v4;
        if (!--v23)
        {
          swift_bridgeObjectRelease();
          id v4 = v64;
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      swift_once();
    }
LABEL_27:
    sub_10006C51C(&qword_100457240);
    Class v58 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v59 = String._bridgeToObjectiveC()();
    [v4 setValue:v58 forKey:v59];

    Class v60 = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v61 = String._bridgeToObjectiveC()();
    [v4 setValue:v60 forKey:v61];

    Class v62 = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v63 = String._bridgeToObjectiveC()();
    [v4 setValue:v62 forKey:v63];
  }
  else
  {
    if (qword_100453908 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_10045AEB0);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      unsigned __int8 v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Unable to initialize Settings Suite!?", v13, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_1002A8914()
{
  sub_10006C51C(&qword_10045AF68);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = &_swiftEmptySetSingleton;
  *(void *)(v0 + 32) = &_swiftEmptySetSingleton;
  sub_10006C51C(&qword_100455CE8);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *(void *)(v0 + 40) = result;
  *(unsigned char *)(v0 + 24) = 1;
  off_10045AEC8 = (_UNKNOWN *)v0;
  return result;
}

uint64_t type metadata accessor for PeerStore()
{
  return self;
}

uint64_t sub_1002A89B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[42] = a4;
  v5[43] = a5;
  v5[40] = a2;
  v5[41] = a3;
  v5[39] = a1;
  return _swift_task_switch(sub_1002A89D8, 0, 0);
}

uint64_t sub_1002A89D8()
{
  os_log_type_t v12 = v0;
  v0[37] = 0;
  if (qword_1004536C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[44] = v1;
  v0[45] = sub_10008E55C(v1, (uint64_t)qword_1004559B0);
  swift_bridgeObjectRetain_n();
  id v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[41];
  if (v4)
  {
    uint64_t v6 = v0[40];
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[38] = sub_100290514(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting NFCredentialSession for reason: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unsigned __int8 v8 = (void *)swift_task_alloc();
  v0[46] = v8;
  uint64_t v9 = sub_10006C51C(&qword_100457D30);
  *unsigned __int8 v8 = v0;
  v8[1] = sub_1002A8C58;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 31, 0, 0, 0xD000000000000031, 0x80000001003B3B50, sub_10011848C, 0, v9);
}

uint64_t sub_1002A8C58()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    id v2 = sub_1002B3BBC;
  }
  else {
    id v2 = sub_1002A8D6C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A8D6C()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v0[32];
  v0[48] = v1;
  v0[49] = v2;
  [v1 setEventDelegate:0];
  v0[36] = v1;
  v0[37] = v2;
  v0[10] = v0;
  v0[15] = v0 + 33;
  v0[11] = sub_1002A8E90;
  uint64_t v3 = swift_continuation_init();
  v0[23] = _NSConcreteStackBlock;
  v0[24] = 0x40000000;
  v0[25] = sub_10024085C;
  v0[26] = &unk_100418D78;
  v0[27] = v3;
  [v1 requestSETransceiverWithCompletion:v0 + 23];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_1002A8E90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 400) = v1;
  if (v1) {
    uint64_t v2 = sub_1002B3BC8;
  }
  else {
    uint64_t v2 = sub_1002A8FA0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A8FA0()
{
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 408) = v1;
  if (v1)
  {
    uint64_t v2 = *(int **)(v0 + 336);

    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002A9218;
    uint64_t v4 = *(void *)(v0 + 312);
    return v11(v4, v1);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    sub_10008E55C(*(void *)(v0 + 352), (uint64_t)qword_1004686A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unsigned __int8 v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to get transceiver", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void **)(v0 + 384);

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1002A932C;
    uint64_t v10 = swift_continuation_init();
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_1001BE804;
    *(void *)(v0 + 168) = &unk_100418D90;
    *(void *)(v0 + 176) = v10;
    [v9 endSessionWithCompletion:v0 + 144];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_1002A9218()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002B3BCC;
  }
  else {
    uint64_t v2 = sub_1002B3BC0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A932C()
{
  return _swift_task_switch(sub_1002B3BC4, 0, 0);
}

uint64_t sub_1002A940C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[42] = a4;
  v5[43] = a5;
  v5[40] = a2;
  v5[41] = a3;
  v5[39] = a1;
  return _swift_task_switch(sub_1002A9434, 0, 0);
}

uint64_t sub_1002A9434()
{
  uint64_t v12 = v0;
  v0[37] = 0;
  if (qword_1004536C0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[44] = v1;
  v0[45] = sub_10008E55C(v1, (uint64_t)qword_1004559B0);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[41];
  if (v4)
  {
    uint64_t v6 = v0[40];
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[38] = sub_100290514(v6, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting NFCredentialSession for reason: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  unsigned __int8 v8 = (void *)swift_task_alloc();
  v0[46] = v8;
  uint64_t v9 = sub_10006C51C(&qword_100457D30);
  *unsigned __int8 v8 = v0;
  v8[1] = sub_1002A96B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 31, 0, 0, 0xD000000000000031, 0x80000001003B3B50, sub_10011848C, 0, v9);
}

uint64_t sub_1002A96B4()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_1002A99FC;
  }
  else {
    uint64_t v2 = sub_1002A97C8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A97C8()
{
  uint64_t v1 = (void *)v0[31];
  uint64_t v2 = v0[32];
  v0[48] = v1;
  v0[49] = v2;
  [v1 setEventDelegate:0];
  v0[36] = v1;
  v0[37] = v2;
  v0[10] = v0;
  v0[15] = v0 + 33;
  v0[11] = sub_1002A98EC;
  uint64_t v3 = swift_continuation_init();
  v0[23] = _NSConcreteStackBlock;
  v0[24] = 0x40000000;
  v0[25] = sub_10024085C;
  v0[26] = &unk_100418DA8;
  v0[27] = v3;
  [v1 requestSETransceiverWithCompletion:v0 + 23];
  return _swift_continuation_await(v0 + 10);
}

uint64_t sub_1002A98EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 400) = v1;
  if (v1) {
    uint64_t v2 = sub_1002A9FA0;
  }
  else {
    uint64_t v2 = sub_1002A9C14;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A99FC()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 272) = sub_100290514(v4, v5, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Nearfield error %s while getting NFCredentialSession", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_10008E594();
  swift_allocError();
  *uint64_t v6 = 8;
  swift_willThrow();
  swift_errorRelease();

  os_log_type_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_1002A9C14()
{
  uint64_t v1 = *(void *)(v0 + 264);
  *(void *)(v0 + 408) = v1;
  if (v1)
  {
    os_log_type_t v2 = *(int **)(v0 + 336);

    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v2 + *v2);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002A9E8C;
    uint64_t v4 = *(void *)(v0 + 312);
    return v11(v4, v1);
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    sub_10008E55C(*(void *)(v0 + 352), (uint64_t)qword_1004686A8);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unsigned __int8 v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to get transceiver", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = *(void **)(v0 + 384);

    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1002AA134;
    uint64_t v10 = swift_continuation_init();
    *(void *)(v0 + 144) = _NSConcreteStackBlock;
    *(void *)(v0 + 152) = 0x40000000;
    *(void *)(v0 + 160) = sub_1001BE804;
    *(void *)(v0 + 168) = &unk_100418DC0;
    *(void *)(v0 + 176) = v10;
    [v9 endSessionWithCompletion:v0 + 144];
    return _swift_continuation_await(v0 + 16);
  }
}

uint64_t sub_1002A9E8C()
{
  *(void *)(*(void *)v1 + 424) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_1002AA0A8;
  }
  else {
    os_log_type_t v2 = sub_1002AA01C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002A9FA0()
{
  uint64_t v1 = (void *)v0[49];
  os_log_type_t v2 = (void *)v0[48];
  swift_willThrow();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1002AA01C()
{
  sub_1001182C4(*(void **)(v0 + 408), (id *)(v0 + 288), v0 + 296, *(void *)(v0 + 320), *(void *)(v0 + 328));
  swift_unknownObjectRelease();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002AA0A8()
{
  sub_1001182C4(*(void **)(v0 + 408), (id *)(v0 + 288), v0 + 296, *(void *)(v0 + 320), *(void *)(v0 + 328));
  swift_unknownObjectRelease();

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002AA134()
{
  return _swift_task_switch(sub_1002AA214, 0, 0);
}

uint64_t sub_1002AA214()
{
  sub_10008E594();
  swift_allocError();
  void *v1 = 9;
  swift_willThrow();

  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_1002AA2BC()
{
  v1[2] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  return _swift_task_switch(sub_1002AA38C, v0, 0);
}

uint64_t sub_1002AA38C()
{
  unint64_t v73 = v0;
  uint64_t v1 = [self enumeratorWithOptions:0];
  id v2 = [v1 nextObject];
  if (v2)
  {
    id v3 = v2;
    do
    {
      id v4 = [v3 bundleIdentifier];
      if (v4)
      {
        uint64_t v5 = v4;
        Swift::Int v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        Swift::Int v8 = v7;

        sub_1000EAD74((Swift::Int *)&v72, v6, v8);
        swift_bridgeObjectRelease();
      }
      else
      {
      }
      id v3 = [v1 nextObject];
    }
    while (v3);
  }
  unint64_t v9 = (unint64_t)sub_1002B1064();
  unint64_t v63 = v9;
  if (v9 >> 62) {
    goto LABEL_73;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v10)
  {
    unint64_t v11 = 0;
    Class v62 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 32) + 8);
    id v64 = v1;
    uint64_t v65 = (void *)v0;
    uint64_t v66 = v10;
    while (1)
    {
      if ((v63 & 0xC000000000000001) != 0)
      {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v11 >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_72;
        }
        id v12 = *(id *)(v63 + 32 + 8 * v11);
      }
      unint64_t v0 = (unint64_t)v12;
      BOOL v13 = __OFADD__(v11, 1);
      unint64_t v14 = v11 + 1;
      if (v13) {
        goto LABEL_70;
      }
      unint64_t v15 = CredentialInternal.ownerApplications.getter();
      unint64_t v16 = v15;
      if (v15 >> 62)
      {
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        unint64_t v67 = v14;
        uint64_t v68 = (void *)v0;
        if (!v17)
        {
LABEL_30:
          swift_bridgeObjectRelease();
          uint64_t v1 = _swiftEmptyArrayStorage;
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v17 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
        unint64_t v67 = v14;
        uint64_t v68 = (void *)v0;
        if (!v17) {
          goto LABEL_30;
        }
      }
      unint64_t v72 = _swiftEmptyArrayStorage;
      sub_1002CF974(0, v17 & ~(v17 >> 63), 0);
      if (v17 < 0) {
        goto LABEL_71;
      }
      uint64_t v18 = 0;
      uint64_t v1 = v72;
      do
      {
        if ((v16 & 0xC000000000000001) != 0) {
          id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v19 = *(id *)(v16 + 8 * v18 + 32);
        }
        Class v20 = v19;
        uint64_t v21 = ApplicationInfoInternal.bundleId.getter();
        uint64_t v23 = v22;

        unint64_t v72 = v1;
        unint64_t v25 = v1[2];
        unint64_t v24 = v1[3];
        unint64_t v0 = v25 + 1;
        if (v25 >= v24 >> 1)
        {
          sub_1002CF974(v24 > 1, v25 + 1, 1);
          uint64_t v1 = v72;
        }
        ++v18;
        v1[2] = v0;
        uint64_t v26 = &v1[2 * v25];
        uint64_t v26[4] = v21;
        v26[5] = v23;
      }
      while (v17 != v18);
      swift_bridgeObjectRelease();
LABEL_31:
      uint64_t v70 = v1[2];
      if (!v70)
      {
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
      unint64_t v27 = 0;
      uint64_t v28 = (char *)&_swiftEmptySetSingleton + 56;
      char v29 = 1;
LABEL_34:
      char v69 = v29;
      unint64_t v30 = v27;
LABEL_37:
      if (v30 >= v1[2]) {
        break;
      }
      unint64_t v27 = v30 + 1;
      if (*((void *)&_swiftEmptySetSingleton + 2))
      {
        uint64_t v31 = &v1[2 * v30 + 4];
        uint64_t v32 = *v31;
        uint64_t v33 = v31[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v34 = Hasher._finalize()();
        uint64_t v35 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
        unint64_t v0 = v34 & ~v35;
        if ((*(void *)&v28[(v0 >> 3) & 0xFFFFFFFFFFFFFF8] >> v0))
        {
          uint64_t v36 = *((void *)&_swiftEmptySetSingleton + 6);
          unint64_t v37 = (void *)(v36 + 16 * v0);
          BOOL v38 = *v37 == v32 && v37[1] == v33;
          if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
LABEL_33:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v29 = 0;
            if (v27 == v70)
            {
              swift_bridgeObjectRelease();
LABEL_11:

              uint64_t v1 = v64;
              unint64_t v0 = (unint64_t)v65;
              unint64_t v11 = v67;
              goto LABEL_12;
            }
            goto LABEL_34;
          }
          uint64_t v39 = ~v35;
          unint64_t v0 = (v0 + 1) & ~v35;
          if ((*(void *)&v28[(v0 >> 3) & 0xFFFFFFFFFFFFFF8] >> v0))
          {
            BOOL v40 = (void *)(v36 + 16 * v0);
            BOOL v41 = *v40 == v32 && v40[1] == v33;
            if (v41 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_33;
            }
            for (unint64_t i = v0 + 1; ; unint64_t i = v43 + 1)
            {
              unint64_t v43 = i & v39;
              if (((*(void *)&v28[((i & v39) >> 3) & 0xFFFFFFFFFFFFFF8] >> (i & v39)) & 1) == 0) {
                break;
              }
              char v44 = (void *)(v36 + 16 * v43);
              BOOL v45 = *v44 == v32 && v44[1] == v33;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_33;
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      unint64_t v30 = v27;
      if (v27 != v70) {
        goto LABEL_37;
      }
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0) {
        goto LABEL_11;
      }
LABEL_62:
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_10008E55C(v46, (uint64_t)qword_1004686A8);
      id v47 = v68;
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        unint64_t v50 = v65;
        uint64_t v51 = v65[6];
        uint64_t v71 = v65[3];
        uint64_t v52 = swift_slowAlloc();
        unint64_t v72 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v52 = 136315138;
        CredentialInternal.identifier.getter();
        uint64_t v53 = UUID.uuidString.getter();
        unint64_t v55 = v54;
        unint64_t v56 = v62;
        (*v62)(v51, v71);
        *(void *)(v52 + 4) = sub_100290514(v53, v55, (uint64_t *)&v72);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Credential %s last owner app has been deleted", (uint8_t *)v52, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v1 = v64;
        unint64_t v11 = v67;
      }
      else
      {

        uint64_t v1 = v64;
        unint64_t v50 = v65;
        unint64_t v11 = v67;
        unint64_t v56 = v62;
      }
      unint64_t v57 = (char *)v50[5];
      uint64_t v58 = v50[6];
      uint64_t v59 = v50[3];
      CredentialInternal.identifier.getter();
      sub_1000EA1A0(v58, v57);

      (*v56)(v58, v59);
      unint64_t v0 = (unint64_t)v50;
LABEL_12:
      if (v11 == v66) {
        goto LABEL_74;
      }
    }
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_74:

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  Class v60 = *(uint64_t (**)(void *))(v0 + 8);
  return v60(&_swiftEmptySetSingleton);
}

uint64_t sub_1002AAB4C()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_1002AAC0C, v0, 0);
}

uint64_t sub_1002AAC0C()
{
  long long v81 = v0;
  uint64_t v2 = v0 + 6;
  id v3 = [objc_allocWithZone((Class)type metadata accessor for TCCContext()) init];
  uint64_t v4 = 0;
  unint64_t v5 = sub_100123E28(0);
  unint64_t v6 = v5;
  unint64_t v80 = (unint64_t)_swiftEmptyArrayStorage;
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  unint64_t v75 = v0 + 6;
  id v76 = v0;
  id v73 = v3;
  if (v7)
  {
    id v71 = 0;
    os_log_type_t v77 = type metadata accessor for ApplicationInfoInternal();
    if (v7 < 1)
    {
      __break(1u);
LABEL_56:
      swift_bridgeObjectRetain();
      uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
    for (uint64_t i = 0; i != v7; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v6 + 8 * i + 32);
      }
      uint64_t v10 = v9;
      id v11 = [v9 identifier];
      if (v11)
      {
        id v12 = v11;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        id v13 = [v10 bundleIdentifier];
        if (v13)
        {
          unint64_t v14 = v13;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        [v10 gdprVersionShown];
        dispatch thunk of ApplicationInfoInternal.__allocating_init(applicationId:bundleId:gdprShownVersion:)();

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v80 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v15 = (void *)v80;
    uint64_t v2 = v75;
    uint64_t v0 = v76;
    uint64_t v4 = 0;
    id v3 = v73;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v15 = _swiftEmptyArrayStorage;
  }
  unint64_t v16 = v2 - 2;
  swift_bridgeObjectRelease();
  id v17 = v3;
  unint64_t v1 = (unint64_t)sub_1002B2B90((unint64_t)v15);

  swift_bridgeObjectRelease();
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10008E55C(v18, (uint64_t)qword_1004686A8);
  swift_bridgeObjectRetain_n();
  id v19 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v19, v77))
  {
    swift_bridgeObjectRelease_n();

    goto LABEL_36;
  }
  log = v19;
  uint64_t v69 = 0;
  --v2;
  uint64_t v20 = swift_slowAlloc();
  uint64_t v79 = swift_slowAlloc();
  *(_DWORD *)uint64_t v20 = 136315394;
  *unint64_t v16 = sub_100290514(0xD00000000000001FLL, 0x80000001003BCBA0, &v79);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t v65 = (uint8_t *)v20;
  *(_WORD *)(v20 + 12) = 2080;
  id v71 = v17;
  if (v1 >> 62) {
    goto LABEL_56;
  }
  uint64_t v21 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_24:
  if (v21)
  {
    id v64 = v2;
    unint64_t v80 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t result = sub_1002CF974(0, v21 & ~(v21 >> 63), 0);
    if (v21 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v23 = 0;
    unint64_t v24 = (void *)v80;
    do
    {
      if ((v1 & 0xC000000000000001) != 0) {
        id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v25 = *(id *)(v1 + 8 * v23 + 32);
      }
      uint64_t v26 = v25;
      uint64_t v27 = ApplicationInfoInternal.bundleId.getter();
      uint64_t v29 = v28;

      unint64_t v80 = (unint64_t)v24;
      unint64_t v31 = v24[2];
      unint64_t v30 = v24[3];
      if (v31 >= v30 >> 1)
      {
        sub_1002CF974(v30 > 1, v31 + 1, 1);
        unint64_t v24 = (void *)v80;
      }
      ++v23;
      _OWORD v24[2] = v31 + 1;
      uint64_t v32 = &v24[2 * v31];
      v32[4] = v27;
      v32[5] = v29;
    }
    while (v21 != v23);
    uint64_t v2 = v64;
  }
  uint64_t v33 = Array.description.getter();
  unint64_t v35 = v34;
  swift_bridgeObjectRelease();
  *uint64_t v2 = sub_100290514(v33, v35, &v79);
  uint64_t v2 = v75;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, log, v77, "%s: TCC Revoked apps %s", v65, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v0 = v76;
  id v17 = v71;
  id v3 = v73;
  uint64_t v4 = v69;
LABEL_36:
  uint64_t v36 = sub_1002B1064();
  if (v4)
  {
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    unint64_t v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  else
  {
    unint64_t v38 = (unint64_t)v36;
    swift_bridgeObjectRetain();
    sub_1002B2D44(v38, v1);
    uint64_t v40 = v39;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    BOOL v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      id v72 = v17;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 136315394;
      *(v2 - 4) = sub_100290514(0xD00000000000001FLL, 0x80000001003BCBA0, &v79);
      uint64_t v74 = v2 - 3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 12) = 2080;
      int64_t v44 = *(void *)(v40 + 16);
      if (v44)
      {
        os_log_type_t v66 = v42;
        os_log_t loga = (os_log_t)v43;
        uint64_t v45 = v76[8];
        unint64_t v80 = (unint64_t)_swiftEmptyArrayStorage;
        sub_1002CF974(0, v44, 0);
        id v47 = *(void (**)(uint64_t, unint64_t, uint64_t))(v45 + 16);
        uint64_t v46 = v45 + 16;
        unint64_t v78 = v47;
        uint64_t v70 = v40;
        unint64_t v48 = v40 + ((*(unsigned __int8 *)(v46 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 64));
        uint64_t v49 = *(void *)(v46 + 56);
        do
        {
          uint64_t v50 = v76[9];
          uint64_t v51 = v76[7];
          v78(v50, v48, v51);
          uint64_t v52 = UUID.uuidString.getter();
          uint64_t v54 = v53;
          (*(void (**)(uint64_t, uint64_t))(v46 - 8))(v50, v51);
          unint64_t v55 = v80;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1002CF974(0, *(void *)(v55 + 16) + 1, 1);
            unint64_t v55 = v80;
          }
          unint64_t v57 = *(void *)(v55 + 16);
          unint64_t v56 = *(void *)(v55 + 24);
          if (v57 >= v56 >> 1)
          {
            sub_1002CF974(v56 > 1, v57 + 1, 1);
            unint64_t v55 = v80;
          }
          *(void *)(v55 + 16) = v57 + 1;
          unint64_t v58 = v55 + 16 * v57;
          *(void *)(v58 + 32) = v52;
          *(void *)(v58 + 40) = v54;
          v48 += v49;
          --v44;
        }
        while (v44);
        uint64_t v40 = v70;
        uint64_t v43 = (uint64_t)loga;
        os_log_type_t v42 = v66;
      }
      uint64_t v59 = Array.description.getter();
      unint64_t v61 = v60;
      swift_bridgeObjectRelease();
      *uint64_t v74 = sub_100290514(v59, v61, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s: %s should be MFD since all owner apps have been revoked TCC access", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v0 = v76;
      id v17 = v72;
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    uint64_t v62 = sub_100089E64(v40);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    unint64_t v63 = (uint64_t (*)(uint64_t))v0[1];
    return v63(v62);
  }
}

uint64_t sub_1002AB530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  sub_10006C51C(&qword_100455EB0);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  return _swift_task_switch(sub_1002AB5E8, v4, 0);
}

uint64_t sub_1002AB5E8()
{
  unint64_t v24 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[7];
  uint64_t v3 = type metadata accessor for Logger();
  sub_10008E55C(v3, (uint64_t)qword_1004686A8);
  sub_10019366C(v2, v1);
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[11];
  if (v6)
  {
    uint64_t v8 = v0[10];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    sub_10019366C(v7, v8);
    uint64_t v10 = type metadata accessor for UUID();
    uint64_t v11 = *(void *)(v10 - 8);
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
    uint64_t v13 = v0[10];
    if (v12 == 1)
    {
      sub_100132C18(v0[10]);
      unint64_t v14 = 0xE500000000000000;
      uint64_t v15 = 0x6E696D6441;
    }
    else
    {
      uint64_t v15 = UUID.uuidString.getter();
      unint64_t v14 = v16;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    uint64_t v17 = v0[11];
    uint64_t v18 = v0[5];
    unint64_t v19 = v0[6];
    v0[2] = sub_100290514(v15, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100132C18(v17);
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[3] = sub_100290514(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Session %s: Reconciling Database and SE Content: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100132C18(v0[11]);
    swift_bridgeObjectRelease_n();
  }

  uint64_t v20 = (void *)swift_task_alloc();
  v0[12] = v20;
  void *v20 = v0;
  v20[1] = sub_1002AB924;
  uint64_t v21 = v0[7];
  return sub_1002ABD90(v21);
}

uint64_t sub_1002AB924(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[13] = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[8];
    return _swift_task_switch(sub_1002ABA80, v6, 0);
  }
}

uint64_t sub_1002ABA80()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002ABB60;
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[4];
  return sub_1002AC1A0(v6, v4, v5);
}

uint64_t sub_1002ABB60(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 120) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 64);
    sub_100132C18(*(void *)(v4 + 72));
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_1002ABD10, v6, 0);
  }
  else
  {
    sub_100132C18(*(void *)(v4 + 72));
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v5 + 8);
    return v7(a1);
  }
}

uint64_t sub_1002ABD10()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002ABD90(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  sub_10006C51C(&qword_100455EB0);
  v2[4] = swift_task_alloc();
  return _swift_task_switch(sub_1002ABE24, v1, 0);
}

uint64_t sub_1002ABE24()
{
  uint64_t v1 = v0[4];
  sub_10019366C(v0[2], v1);
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[4];
  if (v4 == 1)
  {
    sub_100132C18(v0[4]);
    uint64_t v6 = (void *)0xE500000000000000;
    uint64_t v7 = 0x6E696D6461;
  }
  else
  {
    uint64_t v7 = UUID.uuidString.getter();
    uint64_t v6 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  v9._countAndFlagsBits = v7;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x69636E6F63657220;
  v10._object = (void *)0xEA0000000000656CLL;
  String.append(_:)(v10);
  v0[5] = 0xE000000000000000;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1004559D0 + dword_1004559D0);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[6] = (uint64_t)v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1002ABFD8;
  return v13(0, 0xE000000000000000);
}

uint64_t sub_1002ABFD8(uint64_t a1)
{
  int v4 = (void *)*v2;
  v4[7] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = v4[3];
    return _swift_task_switch(sub_1002AC134, v5, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(uint64_t))v4[1];
    return v6(a1);
  }
}

uint64_t sub_1002AC134()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002AC1A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for StateInternal();
  v4[20] = v6;
  v4[21] = *(void *)(v6 - 8);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[28] = v8;
  v4[29] = *(void *)(v8 + 64);
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_1002AC3C0, v3, 0);
}

uint64_t sub_1002AC3C0()
{
  uint64_t v194 = v0;
  uint64_t v2 = v0;
  unint64_t v3 = *(void *)(v0 + 112);
  if (v3 >> 62)
  {
LABEL_106:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v5 = _swiftEmptyArrayStorage;
  v188 = (void *)v2;
  if (v4)
  {
    if (v4 < 1)
    {
      __break(1u);
LABEL_108:
      swift_bridgeObjectRetain();
      uint64_t v147 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      *((void *)v1 + 52) = v147;
      if (v147) {
        goto LABEL_71;
      }
      goto LABEL_109;
    }
    uint64_t v6 = 0;
    uint64_t v180 = *(void *)(v2 + 224);
    unint64_t v184 = v3 & 0xC000000000000001;
    uint64_t v176 = *(void *)(v2 + 112) + 32;
    uint64_t v7 = (void (**)(uint64_t, uint64_t, uint64_t))(v180 + 32);
    do
    {
      if (v184) {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v9 = *(id *)(v176 + 8 * v6);
      }
      uint64_t v10 = v9;
      uint64_t v12 = *(void *)(v2 + 208);
      uint64_t v11 = *(void *)(v2 + 216);
      id v13 = [v9 applet];
      sub_10012018C(v12);

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v12, 1, v11) == 1)
      {
        sub_100132C18(*(void *)(v2 + 208));
        uint64_t v8 = v4;
      }
      else
      {
        uint64_t v15 = *(void *)(v2 + 272);
        uint64_t v14 = *(void *)(v2 + 280);
        uint64_t v16 = *(void *)(v2 + 208);
        uint64_t v17 = *(void *)(v2 + 216);
        uint64_t v18 = *v7;
        (*v7)(v14, v16, v17);
        v18(v15, v14, v17);
        uint64_t v8 = v4;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v5 = (void *)sub_10025A3B0(0, v5[2] + 1, 1, (unint64_t)v5);
        }
        unint64_t v20 = v5[2];
        unint64_t v19 = v5[3];
        if (v20 >= v19 >> 1) {
          uint64_t v5 = (void *)sub_10025A3B0(v19 > 1, v20 + 1, 1, (unint64_t)v5);
        }
        uint64_t v21 = v188[34];
        uint64_t v22 = v188[27];
        v5[2] = v20 + 1;
        v18((uint64_t)v5+ ((*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80))+ *(void *)(v180 + 72) * v20, v21, v22);
        uint64_t v2 = (uint64_t)v188;
      }
      ++v6;
    }
    while (v8 != v6);
  }
  unint64_t v23 = *(void *)(v2 + 112);
  swift_bridgeObjectRelease();
  unint64_t v24 = swift_bridgeObjectRetain();
  *(void *)(v2 + 288) = sub_1002B23B0(v24, (uint64_t)v5);
  swift_bridgeObjectRelease();
  id v1 = (id)v2;
  swift_bridgeObjectRelease();
  uint64_t v25 = sub_1002B08EC(v23);
  *(void *)(v2 + 296) = v26;
  uint64_t v27 = (uint64_t)v25;
  uint64_t v166 = v2 + 48;
  uint64_t v28 = *(void *)(v2 + 104);
  uint64_t v29 = swift_task_alloc();
  *(void *)(v29 + 16) = v28;
  unint64_t v3 = sub_1002B363C(v27, (uint64_t (*)(id, id))sub_1002B2900, v29);
  swift_task_dealloc();
  *(void *)(v2 + 32) = _swiftEmptyArrayStorage;
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v30 = __CocoaDictionary.makeIterator()();
    unint64_t v31 = 0;
    uint64_t v32 = 0;
    unint64_t v33 = 0;
    unint64_t v3 = v30 | 0x8000000000000000;
  }
  else
  {
    uint64_t v34 = -1;
    uint64_t v35 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v31 = v3 + 64;
    uint64_t v32 = ~v35;
    uint64_t v36 = -v35;
    if (v36 < 64) {
      uint64_t v34 = ~(-1 << v36);
    }
    unint64_t v33 = v34 & *(void *)(v3 + 64);
  }
  int64_t v37 = 0;
  v170 = (uint64_t *)(v2 + 80);
  v171 = (id *)(v2 + 72);
  v168 = (void *)(v2 + 96);
  v169 = (id *)(v2 + 88);
  *(void *)(v2 + 312) = v31;
  *(void *)(v2 + 320) = v32;
  *(void *)(v2 + 304) = v3;
  int v167 = 136315138;
  while (1)
  {
    *((void *)v1 + 41) = v37;
    *((void *)v1 + 42) = v33;
    if ((v3 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v41 = __CocoaDictionary.Iterator.next()();
    if (!v41) {
      goto LABEL_69;
    }
    uint64_t v43 = v42;
    uint64_t v2 = (uint64_t)v1;
    uint64_t *v170 = v41;
    type metadata accessor for CredentialInternal();
    unint64_t v44 = v33;
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v45 = *v171;
    swift_unknownObjectRelease();
    void *v168 = v43;
    sub_10007582C(0, (unint64_t *)&unk_10045AFB0);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v46 = *v169;
    swift_unknownObjectRelease();
    int64_t v40 = v37;
    uint64_t v38 = v44;
LABEL_39:
    *((void *)v1 + 45) = v40;
    *((void *)v1 + 46) = v38;
    *((void *)v1 + 43) = v45;
    *((void *)v1 + 44) = v46;
    if (!v45) {
      goto LABEL_69;
    }
    v185 = v45;
    unint64_t v54 = **((void **)v1 + 13);
    if (v54 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    }
    else
    {
      uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
    }
    int64_t v174 = v40;
    v175 = v46;
    unint64_t v173 = v38;
    if (v55)
    {
      uint64_t v56 = 0;
      unint64_t v177 = v54;
      unint64_t v181 = v54 & 0xC000000000000001;
      while (1)
      {
        if (v181) {
          id v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v57 = *(id *)(v54 + 8 * v56 + 32);
        }
        *((void *)v1 + 47) = v57;
        uint64_t v58 = v56 + 1;
        if (__OFADD__(v56, 1))
        {
          __break(1u);
          goto LABEL_99;
        }
        uint64_t v59 = v55;
        uint64_t v61 = *((void *)v1 + 32);
        uint64_t v60 = *((void *)v1 + 33);
        uint64_t v63 = *((void *)v1 + 27);
        uint64_t v62 = *((void *)v1 + 28);
        id v64 = v57;
        CredentialInternal.identifier.getter();
        CredentialInternal.identifier.getter();
        char v65 = static UUID.== infix(_:_:)();
        os_log_type_t v66 = v1;
        uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        uint64_t v2 = v62 + 8;
        unint64_t v67 = v68;
        v66[48] = v68;
        v66[49] = v2 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v68(v61, v63);
        v68(v60, v63);
        if (v65) {
          break;
        }

        ++v56;
        uint64_t v55 = v59;
        BOOL v104 = v58 == v59;
        id v1 = v188;
        unint64_t v54 = v177;
        if (v104) {
          goto LABEL_51;
        }
      }
      swift_bridgeObjectRelease_n();
      if ((sub_1000B02A4(v175) & 1) == 0)
      {
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v82 = type metadata accessor for Logger();
        sub_10008E55C(v82, (uint64_t)qword_1004686A8);
        id v83 = v64;
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v84, v85))
        {
          uint64_t v86 = v188[33];
          uint64_t v172 = v188[27];
          uint64_t v87 = swift_slowAlloc();
          uint64_t v192 = swift_slowAlloc();
          *(_DWORD *)uint64_t v87 = 136315394;
          v178 = v84;
          v188[5] = sub_100290514(0xD000000000000035, 0x80000001003BCAF0, &v192);
          uint64_t v2 = v166;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v87 + 12) = 2080;
          CredentialInternal.identifier.getter();
          uint64_t v88 = UUID.uuidString.getter();
          unint64_t v90 = v89;
          v67(v86, v172);
          id v1 = v188;
          v188[6] = sub_100290514(v88, v90, &v192);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v178, v85, "%s: No state update to credential %s", (uint8_t *)v87, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          id v1 = v188;
        }
        goto LABEL_61;
      }
      v186 = v67;
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v116 = type metadata accessor for Logger();
      sub_10008E55C(v116, (uint64_t)qword_1004686A8);
      id v1 = v64;
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled((os_log_t)v54, v117))
      {
        v118 = v188;
        uint64_t v119 = v188[33];
        uint64_t v179 = v188[27];
        uint64_t v120 = swift_slowAlloc();
        uint64_t v192 = swift_slowAlloc();
        *(_DWORD *)uint64_t v120 = 136315394;
        os_log_type_t v182 = v117;
        v188[7] = sub_100290514(0xD000000000000035, 0x80000001003BCAF0, &v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v120 + 12) = 2080;
        CredentialInternal.identifier.getter();
        uint64_t v121 = UUID.uuidString.getter();
        unint64_t v123 = v122;
        v186(v119, v179);
        v188[8] = sub_100290514(v121, v123, &v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v54, v182, "%s: Credential %s state updated", (uint8_t *)v120, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        goto LABEL_100;
      }
LABEL_99:

      v118 = v188;
LABEL_100:
      CredentialInternal.identifier.getter();
      CredentialInternal.state.getter();
      unint64_t v144 = (void *)swift_task_alloc();
      v118[50] = v144;
      *unint64_t v144 = v118;
      v144[1] = sub_1002ADAF4;
      uint64_t v145 = v118[31];
      uint64_t v146 = v118[24];
      return sub_1002EDD54(v145, v146);
    }
LABEL_51:
    uint64_t v69 = v1;
    swift_bridgeObjectRelease_n();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    sub_10008E55C(v70, (uint64_t)qword_1004686A8);
    id v71 = v185;
    id v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = v69;
      uint64_t v75 = v69[33];
      uint64_t v76 = v69[28];
      uint64_t v77 = v74[27];
      uint64_t v78 = swift_slowAlloc();
      uint64_t v2 = swift_slowAlloc();
      uint64_t v192 = v2;
      *(_DWORD *)uint64_t v78 = 136315138;
      CredentialInternal.identifier.getter();
      sub_1002B3B78((unint64_t *)&qword_100454038);
      uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v81 = v80;
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
      *(void *)(v78 + 4) = sub_100290514(v79, v81, &v192);
      swift_bridgeObjectRelease();

      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Credential %s does not exist during reconciliation", (uint8_t *)v78, 0xCu);
      swift_arrayDestroy();
      id v1 = v188;
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_61:
      unint64_t v33 = v173;
      int64_t v37 = v174;
      unint64_t v3 = *((void *)v1 + 38);
    }
    else
    {

      unint64_t v33 = v173;
      int64_t v37 = v174;
      id v1 = v69;
      unint64_t v3 = v69[38];
    }
  }
  if (v33)
  {
    uint64_t v38 = (v33 - 1) & v33;
    unint64_t v39 = __clz(__rbit64(v33)) | (v37 << 6);
    int64_t v40 = v37;
LABEL_38:
    uint64_t v51 = 8 * v39;
    uint64_t v52 = *(void **)(*(void *)(v3 + 48) + v51);
    uint64_t v53 = *(void **)(*(void *)(v3 + 56) + v51);
    id v45 = v52;
    id v46 = v53;
    goto LABEL_39;
  }
  int64_t v40 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
LABEL_105:
    __break(1u);
    goto LABEL_106;
  }
  int64_t v47 = (unint64_t)(*((void *)v1 + 40) + 64) >> 6;
  if (v40 >= v47) {
    goto LABEL_69;
  }
  uint64_t v48 = *((void *)v1 + 39);
  unint64_t v49 = *(void *)(v48 + 8 * v40);
  if (v49)
  {
LABEL_37:
    uint64_t v38 = (v49 - 1) & v49;
    unint64_t v39 = __clz(__rbit64(v49)) + (v40 << 6);
    goto LABEL_38;
  }
  int64_t v50 = v37 + 2;
  if (v37 + 2 >= v47) {
    goto LABEL_69;
  }
  unint64_t v49 = *(void *)(v48 + 8 * v50);
  if (v49) {
    goto LABEL_36;
  }
  int64_t v50 = v37 + 3;
  if (v37 + 3 >= v47) {
    goto LABEL_69;
  }
  unint64_t v49 = *(void *)(v48 + 8 * v50);
  if (v49)
  {
LABEL_36:
    int64_t v40 = v50;
    goto LABEL_37;
  }
  int64_t v40 = v37 + 4;
  if (v37 + 4 >= v47) {
    goto LABEL_69;
  }
  unint64_t v49 = *(void *)(v48 + 8 * v40);
  if (v49) {
    goto LABEL_37;
  }
  int64_t v91 = v37 + 5;
  while (v47 != v91)
  {
    unint64_t v49 = *(void *)(v48 + 8 * v91++);
    if (v49)
    {
      int64_t v40 = v91 - 1;
      goto LABEL_37;
    }
  }
LABEL_69:
  unint64_t v92 = *((void *)v1 + 36);
  sub_10008C4F0();
  if (v92 >> 62) {
    goto LABEL_108;
  }
  uint64_t v93 = *(void *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
  *((void *)v1 + 52) = v93;
  if (!v93)
  {
LABEL_109:
    unint64_t v148 = *((void *)v1 + 37);
    swift_bridgeObjectRelease();
    if (v148 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v164 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v164) {
        goto LABEL_111;
      }
    }
    else if (*(void *)((v148 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_111:
      uint64_t v149 = *((void *)v1 + 27);
      uint64_t v150 = *((void *)v1 + 28);
      uint64_t v151 = *((void *)v1 + 25);
      uint64_t v152 = *((void *)v1 + 15);
      uint64_t v192 = 0;
      unint64_t v193 = 0xE000000000000000;
      _StringGuts.grow(_:)(17);
      sub_10019366C(v152, v151);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48))(v151, 1, v149) == 1)
      {
        sub_100132C18(*((void *)v1 + 25));
        uint64_t v153 = (void *)0xE500000000000000;
        uint64_t v154 = 0x6E696D6461;
      }
      else
      {
        uint64_t v156 = *((void *)v1 + 27);
        uint64_t v155 = *((void *)v1 + 28);
        uint64_t v157 = *((void *)v1 + 25);
        uint64_t v154 = UUID.uuidString.getter();
        uint64_t v153 = v158;
        (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v157, v156);
      }
      uint64_t v159 = *((void *)v1 + 37);
      v160._countAndFlagsBits = v154;
      v160._object = v153;
      String.append(_:)(v160);
      swift_bridgeObjectRelease();
      v161._countAndFlagsBits = 0x206574656C656420;
      v161._object = (void *)0xEF736E616870726FLL;
      String.append(_:)(v161);
      *((void *)v1 + 60) = v193;
      uint64_t v162 = swift_allocObject();
      *((void *)v1 + 61) = v162;
      *(void *)(v162 + 16) = v159;
      v190 = (uint64_t (*)(void))((char *)&dword_10045AFA0 + dword_10045AFA0);
      v163 = (void *)swift_task_alloc();
      *((void *)v1 + 62) = v163;
      void *v163 = v1;
      v163[1] = sub_1002AFC34;
      return v190();
    }
    swift_bridgeObjectRelease();
    uint64_t v191 = *((void *)v1 + 4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v165 = (uint64_t (*)(uint64_t))*((void *)v1 + 1);
    return v165(v191);
  }
LABEL_71:
  unint64_t v3 = 0;
  *((_DWORD *)v1 + 128) = enum case for StateInternal.installed(_:);
  *((_DWORD *)v1 + 129) = enum case for StateInternal.installationPending(_:);
  *((_DWORD *)v1 + 130) = enum case for StateInternal.installationFailed(_:);
  *((_DWORD *)v1 + 131) = enum case for StateInternal.terminated(_:);
  *((_DWORD *)v1 + 132) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
  while (1)
  {
    uint64_t v94 = *((void *)v1 + 36);
    if ((v94 & 0xC000000000000001) != 0) {
      id v95 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v95 = *(id *)(v94 + 8 * v3 + 32);
    }
    uint64_t v96 = v95;
    *((void *)v1 + 53) = v95;
    *((void *)v1 + 54) = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_105;
    }
    int v97 = *((_DWORD *)v1 + 128);
    uint64_t v98 = *((void *)v1 + 23);
    uint64_t v99 = *((void *)v1 + 20);
    uint64_t v100 = *((void *)v1 + 21);
    CredentialInternal.state.getter();
    int v101 = (*(uint64_t (**)(uint64_t, uint64_t))(v100 + 88))(v98, v99);
    if (v101 == v97)
    {
      (*(void (**)(void, void))(*((void *)v1 + 21) + 96))(*((void *)v1 + 23), *((void *)v1 + 20));
      swift_bridgeObjectRelease();
      goto LABEL_86;
    }
    if (v101 != *((_DWORD *)v1 + 129)) {
      break;
    }
    uint64_t v102 = *((void *)v1 + 54);
    uint64_t v103 = *((void *)v1 + 52);

    if (v102 == v103) {
      goto LABEL_109;
    }
    unint64_t v3 = *((void *)v1 + 54);
  }
  BOOL v104 = v101 == *((_DWORD *)v1 + 130) || v101 == *((_DWORD *)v1 + 131);
  if (!v104)
  {
    uint64_t v139 = *((void *)v1 + 21);
    uint64_t v138 = *((void *)v1 + 22);
    uint64_t v140 = *((void *)v1 + 20);
    uint64_t v192 = 0;
    unint64_t v193 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    unint64_t v141 = v193;
    *((void *)v1 + 2) = v192;
    *((void *)v1 + 3) = v141;
    v142._countAndFlagsBits = 0xD00000000000001FLL;
    v142._object = (void *)0x80000001003BCAD0;
    String.append(_:)(v142);
    CredentialInternal.state.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
    return _assertionFailure(_:_:file:line:flags:)();
  }
LABEL_86:
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v105 = type metadata accessor for Logger();
  sub_10008E55C(v105, (uint64_t)qword_1004686A8);
  id v106 = v96;
  id v107 = Logger.logObject.getter();
  os_log_type_t v108 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = v188[33];
    uint64_t v110 = v188[28];
    uint64_t v111 = v188[27];
    uint64_t v112 = swift_slowAlloc();
    uint64_t v192 = swift_slowAlloc();
    *(_DWORD *)uint64_t v112 = v167;
    CredentialInternal.identifier.getter();
    sub_1002B3B78((unint64_t *)&qword_100454038);
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v115 = v114;
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v111);
    *(void *)(v112 + 4) = sub_100290514(v113, v115, &v192);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Bad Credential %s will be deleted", (uint8_t *)v112, 0xCu);
    swift_arrayDestroy();
    id v1 = v188;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unsigned int v189 = *((_DWORD *)v1 + 132);
  uint64_t v124 = v1;
  uint64_t v125 = *((void *)v1 + 33);
  uint64_t v126 = v124[29];
  uint64_t v127 = v124[30];
  uint64_t v129 = v124[27];
  uint64_t v128 = v124[28];
  uint64_t v130 = v124[18];
  uint64_t v131 = v124[16];
  uint64_t v183 = v124[17];
  uint64_t v187 = v124[19];
  CredentialInternal.identifier.getter();
  id v132 = [*(id *)(v131 + 112) viewContext];
  v124[55] = v132;
  v124[56] = [*(id *)(v131 + 112) viewContext];
  uint64_t v133 = v125;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v128 + 16))(v125, v127, v129);
  unint64_t v134 = (*(unsigned __int8 *)(v128 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
  uint64_t v135 = swift_allocObject();
  v124[57] = v135;
  *(void *)(v135 + 16) = v131;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v128 + 32))(v135 + v134, v133, v129);
  *(void *)(v135 + ((v126 + v134 + 7) & 0xFFFFFFFFFFFFFFF8)) = v132;
  (*(void (**)(uint64_t, void, uint64_t))(v130 + 104))(v187, v189, v183);
  swift_retain();
  id v136 = v132;
  unint64_t v137 = (void *)swift_task_alloc();
  v124[58] = v137;
  *unint64_t v137 = v124;
  v137[1] = sub_1002AF108;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002ADAF4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = (void (*)(uint64_t, uint64_t))v2[48];
    uint64_t v4 = v2[31];
    uint64_t v5 = v2[27];
    uint64_t v6 = v2[24];
    uint64_t v7 = v2[20];
    uint64_t v8 = v2[21];
    uint64_t v19 = v2[16];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v3(v4, v5);
    swift_bridgeObjectRelease();
    id v9 = sub_1002AFE90;
    uint64_t v10 = v19;
  }
  else
  {
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v2[48];
    uint64_t v12 = v2[31];
    uint64_t v13 = v2[27];
    uint64_t v14 = v2[24];
    uint64_t v15 = v2[20];
    uint64_t v16 = v2[21];
    uint64_t v17 = v2[16];
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    v11(v12, v13);
    id v9 = sub_1002ADCBC;
    uint64_t v10 = v17;
  }
  return _swift_task_switch(v9, v10, 0);
}

uint64_t sub_1002ADCBC()
{
  uint64_t v158 = v0;
  uint64_t v1 = (void *)v0;
  id v2 = *(id *)(v0 + 376);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
    goto LABEL_90;
  while (2)
  {
    unint64_t v137 = v1 + 10;
    uint64_t v138 = (id *)(v1 + 9);
    uint64_t v135 = v1 + 12;
    id v136 = (id *)(v1 + 11);
    unint64_t v3 = (void *)v1[47];
    uint64_t v5 = (void *)v1[43];
    uint64_t v4 = (void *)v1[44];
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v139 = v1[51];
    int64_t v6 = v1[45];
    unint64_t v7 = v1[46];
    unint64_t v144 = v1;
    while (1)
    {
      v1[41] = v6;
      v1[42] = v7;
      uint64_t v8 = v1[38];
      if (v8 < 0)
      {
        uint64_t v12 = __CocoaDictionary.Iterator.next()();
        if (!v12) {
          goto LABEL_50;
        }
        uint64_t v14 = v13;
        *unint64_t v137 = v12;
        type metadata accessor for CredentialInternal();
        unint64_t v15 = v7;
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v16 = *v138;
        swift_unknownObjectRelease();
        void *v135 = v14;
        sub_10007582C(0, (unint64_t *)&unk_10045AFB0);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        id v17 = *v136;
        swift_unknownObjectRelease();
        int64_t v11 = v6;
        uint64_t v9 = v15;
        goto LABEL_20;
      }
      if (!v7) {
        break;
      }
      uint64_t v9 = (v7 - 1) & v7;
      unint64_t v10 = __clz(__rbit64(v7)) | (v6 << 6);
      int64_t v11 = v6;
LABEL_19:
      uint64_t v22 = 8 * v10;
      unint64_t v23 = *(void **)(*(void *)(v8 + 56) + v22);
      id v16 = *(id *)(*(void *)(v8 + 48) + v22);
      id v17 = v23;
LABEL_20:
      v1[45] = v11;
      v1[46] = v9;
      v1[43] = v16;
      v1[44] = v17;
      if (!v16) {
        goto LABEL_50;
      }
      uint64_t v151 = v16;
      unint64_t v24 = *(void *)v1[13];
      if (v24 >> 62)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      }
      else
      {
        uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
      }
      int64_t v142 = v11;
      uint64_t v143 = v17;
      unint64_t v141 = v9;
      if (v25)
      {
        uint64_t v26 = 0;
        unint64_t v146 = v24;
        unint64_t v150 = v24 & 0xC000000000000001;
        while (1)
        {
          if (v150) {
            id v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v27 = *(id *)(v24 + 8 * v26 + 32);
          }
          v1[47] = v27;
          uint64_t v28 = v26 + 1;
          if (__OFADD__(v26, 1))
          {
            __break(1u);
            goto LABEL_83;
          }
          uint64_t v29 = v25;
          uint64_t v31 = v1[32];
          uint64_t v30 = v1[33];
          uint64_t v33 = v1[27];
          uint64_t v32 = v1[28];
          uint64_t v34 = v27;
          CredentialInternal.identifier.getter();
          CredentialInternal.identifier.getter();
          char v35 = static UUID.== infix(_:_:)();
          uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
          uint64_t v9 = v32 + 8;
          v1[48] = v36;
          v1[49] = v9 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          int64_t v37 = v36;
          v36(v31, v33);
          v36(v30, v33);
          if (v35) {
            break;
          }

          ++v26;
          uint64_t v25 = v29;
          BOOL v73 = v28 == v29;
          uint64_t v1 = v144;
          unint64_t v24 = v146;
          if (v73) {
            goto LABEL_32;
          }
        }
        swift_bridgeObjectRelease_n();
        char v49 = sub_1000B02A4(v143);
        if (v139)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10008C4F0();
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          os_log_type_t v85 = (uint64_t (*)(void))v144[1];
          return v85();
        }
        if (v49)
        {
          if (qword_1004536D0 != -1) {
            swift_once();
          }
          uint64_t v86 = type metadata accessor for Logger();
          sub_10008E55C(v86, (uint64_t)qword_1004686A8);
          uint64_t v9 = v34;
          unint64_t v24 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled((os_log_t)v24, v87))
          {
            uint64_t v88 = v144;
            uint64_t v89 = v144[33];
            uint64_t v148 = v144[27];
            uint64_t v90 = swift_slowAlloc();
            uint64_t v156 = swift_slowAlloc();
            *(_DWORD *)uint64_t v90 = 136315394;
            os_log_type_t v152 = v87;
            v144[7] = sub_100290514(0xD000000000000035, 0x80000001003BCAF0, &v156);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v90 + 12) = 2080;
            CredentialInternal.identifier.getter();
            uint64_t v91 = UUID.uuidString.getter();
            unint64_t v93 = v92;
            v37(v89, v148);
            v144[8] = sub_100290514(v91, v93, &v156);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v24, v152, "%s: Credential %s state updated", (uint8_t *)v90, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

LABEL_84:
            CredentialInternal.identifier.getter();
            CredentialInternal.state.getter();
            uint64_t v113 = (void *)swift_task_alloc();
            v88[50] = v113;
            *uint64_t v113 = v88;
            v113[1] = sub_1002ADAF4;
            uint64_t v114 = v88[31];
            uint64_t v115 = v88[24];
            return sub_1002EDD54(v114, v115);
          }
LABEL_83:

          uint64_t v88 = v144;
          goto LABEL_84;
        }
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v50 = type metadata accessor for Logger();
        sub_10008E55C(v50, (uint64_t)qword_1004686A8);
        id v51 = v34;
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v147 = v37;
          uint64_t v1 = v144;
          uint64_t v54 = v144[33];
          uint64_t v140 = v144[27];
          uint64_t v55 = swift_slowAlloc();
          uint64_t v156 = swift_slowAlloc();
          *(_DWORD *)uint64_t v55 = 136315394;
          v144[5] = sub_100290514(0xD000000000000035, 0x80000001003BCAF0, &v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v55 + 12) = 2080;
          CredentialInternal.identifier.getter();
          uint64_t v56 = UUID.uuidString.getter();
          unint64_t v58 = v57;
          v147(v54, v140);
          v144[6] = sub_100290514(v56, v58, &v156);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s: No state update to credential %s", (uint8_t *)v55, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v139 = 0;
          goto LABEL_4;
        }

        uint64_t v139 = 0;
        unint64_t v7 = v141;
        int64_t v6 = v142;
        uint64_t v1 = v144;
      }
      else
      {
LABEL_32:
        swift_bridgeObjectRelease_n();
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        sub_10008E55C(v38, (uint64_t)qword_1004686A8);
        id v39 = v151;
        int64_t v40 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v40, v41))
        {
          uint64_t v42 = v1[33];
          uint64_t v44 = v1[27];
          uint64_t v43 = v1[28];
          uint64_t v45 = swift_slowAlloc();
          uint64_t v156 = swift_slowAlloc();
          *(_DWORD *)uint64_t v45 = 136315138;
          CredentialInternal.identifier.getter();
          sub_1002B3B78((unint64_t *)&qword_100454038);
          uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v48 = v47;
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
          *(void *)(v45 + 4) = sub_100290514(v46, v48, &v156);
          swift_bridgeObjectRelease();

          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Credential %s does not exist during reconciliation", (uint8_t *)v45, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v1 = v144;
          swift_slowDealloc();
        }
        else
        {
        }
LABEL_4:
        unint64_t v7 = v141;
        int64_t v6 = v142;
      }
    }
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_89;
    }
    int64_t v18 = (unint64_t)(v1[40] + 64) >> 6;
    if (v11 < v18)
    {
      uint64_t v19 = v1[39];
      unint64_t v20 = *(void *)(v19 + 8 * v11);
      if (!v20)
      {
        int64_t v21 = v6 + 2;
        if (v6 + 2 >= v18) {
          goto LABEL_50;
        }
        unint64_t v20 = *(void *)(v19 + 8 * v21);
        if (v20) {
          goto LABEL_17;
        }
        int64_t v21 = v6 + 3;
        if (v6 + 3 >= v18) {
          goto LABEL_50;
        }
        unint64_t v20 = *(void *)(v19 + 8 * v21);
        if (v20)
        {
LABEL_17:
          int64_t v11 = v21;
        }
        else
        {
          int64_t v11 = v6 + 4;
          if (v6 + 4 >= v18) {
            goto LABEL_50;
          }
          unint64_t v20 = *(void *)(v19 + 8 * v11);
          if (!v20)
          {
            int64_t v59 = v6 + 5;
            do
            {
              if (v18 == v59) {
                goto LABEL_50;
              }
              unint64_t v20 = *(void *)(v19 + 8 * v59++);
            }
            while (!v20);
            int64_t v11 = v59 - 1;
          }
        }
      }
      uint64_t v9 = (v20 - 1) & v20;
      unint64_t v10 = __clz(__rbit64(v20)) + (v11 << 6);
      goto LABEL_19;
    }
LABEL_50:
    unint64_t v60 = v1[36];
    sub_10008C4F0();
    if (!(v60 >> 62))
    {
      uint64_t v61 = *(void *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v1[52] = v61;
      if (v61) {
        goto LABEL_52;
      }
LABEL_92:
      unint64_t v117 = v1[37];
      swift_bridgeObjectRelease();
      if (v117 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v133 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v133) {
          goto LABEL_94;
        }
      }
      else if (*(void *)((v117 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_94:
        uint64_t v118 = v1[27];
        uint64_t v119 = v1[28];
        uint64_t v120 = v1[25];
        uint64_t v121 = v1[15];
        uint64_t v156 = 0;
        unint64_t v157 = 0xE000000000000000;
        _StringGuts.grow(_:)(17);
        sub_10019366C(v121, v120);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v120, 1, v118) == 1)
        {
          sub_100132C18(v1[25]);
          unint64_t v122 = (void *)0xE500000000000000;
          uint64_t v123 = 0x6E696D6461;
        }
        else
        {
          uint64_t v125 = v1[27];
          uint64_t v124 = v1[28];
          uint64_t v126 = v1[25];
          uint64_t v123 = UUID.uuidString.getter();
          unint64_t v122 = v127;
          (*(void (**)(uint64_t, uint64_t))(v124 + 8))(v126, v125);
        }
        uint64_t v128 = v1[37];
        v129._countAndFlagsBits = v123;
        v129._object = v122;
        String.append(_:)(v129);
        swift_bridgeObjectRelease();
        v130._countAndFlagsBits = 0x206574656C656420;
        v130._object = (void *)0xEF736E616870726FLL;
        String.append(_:)(v130);
        v1[60] = v157;
        uint64_t v131 = swift_allocObject();
        v1[61] = v131;
        *(void *)(v131 + 16) = v128;
        uint64_t v154 = (uint64_t (*)(void))((char *)&dword_10045AFA0 + dword_10045AFA0);
        id v132 = (void *)swift_task_alloc();
        v1[62] = v132;
        void *v132 = v1;
        v132[1] = sub_1002AFC34;
        return v154();
      }
      swift_bridgeObjectRelease();
      uint64_t v155 = v1[4];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v134 = (uint64_t (*)(uint64_t))v1[1];
      return v134(v155);
    }
    swift_bridgeObjectRetain();
    uint64_t v116 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v1[52] = v116;
    if (!v116) {
      goto LABEL_92;
    }
LABEL_52:
    uint64_t v62 = 0;
    *((_DWORD *)v1 + 128) = enum case for StateInternal.installed(_:);
    *((_DWORD *)v1 + 129) = enum case for StateInternal.installationPending(_:);
    *((_DWORD *)v1 + 130) = enum case for StateInternal.installationFailed(_:);
    *((_DWORD *)v1 + 131) = enum case for StateInternal.terminated(_:);
    *((_DWORD *)v1 + 132) = enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:);
LABEL_53:
    uint64_t v63 = v1[36];
    if ((v63 & 0xC000000000000001) != 0) {
      id v64 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v64 = *(id *)(v63 + 8 * v62 + 32);
    }
    char v65 = v64;
    v1[53] = v64;
    v1[54] = v62 + 1;
    if (__OFADD__(v62, 1))
    {
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      continue;
    }
    break;
  }
  int v66 = *((_DWORD *)v1 + 128);
  uint64_t v67 = v1[23];
  uint64_t v68 = v1[20];
  uint64_t v69 = v1[21];
  CredentialInternal.state.getter();
  int v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 88))(v67, v68);
  if (v70 == v66)
  {
    (*(void (**)(void, void))(v1[21] + 96))(v1[23], v1[20]);
    swift_bridgeObjectRelease();
    goto LABEL_67;
  }
  if (v70 == *((_DWORD *)v1 + 129))
  {
    uint64_t v71 = v1[54];
    uint64_t v72 = v1[52];

    if (v71 == v72) {
      goto LABEL_92;
    }
    uint64_t v62 = v1[54];
    goto LABEL_53;
  }
  BOOL v73 = v70 == *((_DWORD *)v1 + 130) || v70 == *((_DWORD *)v1 + 131);
  if (!v73)
  {
    uint64_t v108 = v1[21];
    uint64_t v107 = v1[22];
    uint64_t v109 = v1[20];
    uint64_t v156 = 0;
    unint64_t v157 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    unint64_t v110 = v157;
    v1[2] = v156;
    v1[3] = v110;
    v111._countAndFlagsBits = 0xD00000000000001FLL;
    v111._object = (void *)0x80000001003BCAD0;
    String.append(_:)(v111);
    CredentialInternal.state.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v107, v109);
    return _assertionFailure(_:_:file:line:flags:)();
  }
LABEL_67:
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v74 = type metadata accessor for Logger();
  sub_10008E55C(v74, (uint64_t)qword_1004686A8);
  id v75 = v65;
  uint64_t v76 = Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v78 = v1[33];
    uint64_t v80 = v1[27];
    uint64_t v79 = v1[28];
    uint64_t v81 = swift_slowAlloc();
    uint64_t v156 = swift_slowAlloc();
    *(_DWORD *)uint64_t v81 = 136315138;
    CredentialInternal.identifier.getter();
    sub_1002B3B78((unint64_t *)&qword_100454038);
    uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v84 = v83;
    (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v78, v80);
    *(void *)(v81 + 4) = sub_100290514(v82, v84, &v156);
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v76, v77, "Bad Credential %s will be deleted", (uint8_t *)v81, 0xCu);
    swift_arrayDestroy();
    uint64_t v1 = v144;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  unsigned int v153 = *((_DWORD *)v1 + 132);
  uint64_t v94 = v1[33];
  uint64_t v95 = v1[29];
  uint64_t v96 = v1[30];
  uint64_t v98 = v1[27];
  uint64_t v97 = v1[28];
  uint64_t v99 = v1[18];
  uint64_t v100 = v1[16];
  uint64_t v145 = v1[17];
  uint64_t v149 = v1[19];
  CredentialInternal.identifier.getter();
  id v101 = [*(id *)(v100 + 112) viewContext];
  v1[55] = v101;
  v1[56] = [*(id *)(v100 + 112) viewContext];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 16))(v94, v96, v98);
  uint64_t v102 = v1;
  unint64_t v103 = (*(unsigned __int8 *)(v97 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
  uint64_t v104 = swift_allocObject();
  v102[57] = v104;
  *(void *)(v104 + 16) = v100;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v97 + 32))(v104 + v103, v94, v98);
  *(void *)(v104 + ((v95 + v103 + 7) & 0xFFFFFFFFFFFFFFF8)) = v101;
  (*(void (**)(uint64_t, void, uint64_t))(v99 + 104))(v149, v153, v145);
  swift_retain();
  id v105 = v101;
  id v106 = (void *)swift_task_alloc();
  v102[58] = v106;
  void *v106 = v102;
  v106[1] = sub_1002AF108;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002AF108()
{
  id v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 472) = v0;
  swift_task_dealloc();
  unint64_t v3 = (void *)v2[56];
  uint64_t v4 = v2[19];
  uint64_t v5 = v2[18];
  uint64_t v6 = v2[17];
  uint64_t v7 = v2[16];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release();

  if (v0) {
    uint64_t v8 = sub_1002AFAE8;
  }
  else {
    uint64_t v8 = sub_1002AF2C0;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1002AF2C0()
{
  uint64_t v71 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  while (1)
  {
    uint64_t v4 = *(void *)(v0 + 432);
    uint64_t v5 = *(void *)(v0 + 416);

    if (v4 == v5) {
      break;
    }
    uint64_t v6 = *(void *)(v0 + 432);
    uint64_t v7 = *(void *)(v0 + 288);
    if ((v7 & 0xC000000000000001) != 0) {
      id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v8 = *(id *)(v7 + 8 * v6 + 32);
    }
    uint64_t v9 = v8;
    *(void *)(v0 + 424) = v8;
    *(void *)(v0 + 432) = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_31:
      swift_once();
LABEL_20:
      uint64_t v28 = type metadata accessor for Logger();
      sub_10008E55C(v28, (uint64_t)qword_1004686A8);
      id v29 = v9;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = *(void *)(v0 + 264);
        uint64_t v34 = *(void *)(v0 + 216);
        uint64_t v33 = *(void *)(v0 + 224);
        uint64_t v35 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 136315138;
        CredentialInternal.identifier.getter();
        sub_1002B3B78((unint64_t *)&qword_100454038);
        uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v38 = v37;
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
        *(void *)(v35 + 4) = sub_100290514(v36, v38, &v69);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Bad Credential %s will be deleted", (uint8_t *)v35, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      unsigned int v66 = *(_DWORD *)(v0 + 528);
      uint64_t v39 = *(void *)(v0 + 264);
      uint64_t v40 = *(void *)(v0 + 240);
      uint64_t v42 = *(void *)(v0 + 216);
      uint64_t v41 = *(void *)(v0 + 224);
      uint64_t v43 = *(void *)(v0 + 144);
      uint64_t v65 = *(void *)(v0 + 152);
      uint64_t v44 = *(void *)(v0 + 128);
      uint64_t v63 = *(void *)(v0 + 232);
      uint64_t v64 = *(void *)(v0 + 136);
      CredentialInternal.identifier.getter();
      id v45 = [*(id *)(v44 + 112) viewContext];
      *(void *)(v0 + 440) = v45;
      *(void *)(v0 + 448) = [*(id *)(v44 + 112) viewContext];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v39, v40, v42);
      unint64_t v46 = (*(unsigned __int8 *)(v41 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v47 = swift_allocObject();
      *(void *)(v0 + 456) = v47;
      *(void *)(v47 + 16) = v44;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v41 + 32))(v47 + v46, v39, v42);
      *(void *)(v47 + ((v63 + v46 + 7) & 0xFFFFFFFFFFFFFFF8)) = v45;
      (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))(v65, v66, v64);
      swift_retain();
      id v48 = v45;
      char v49 = (void *)swift_task_alloc();
      *(void *)(v0 + 464) = v49;
      *char v49 = v0;
      v49[1] = sub_1002AF108;
      return NSManagedObjectContext.perform<A>(schedule:_:)();
    }
    int v10 = *(_DWORD *)(v0 + 512);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v12 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 168);
    CredentialInternal.state.getter();
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 88))(v11, v12);
    if (v14 == v10)
    {
      (*(void (**)(void, void))(*(void *)(v0 + 168) + 96))(*(void *)(v0 + 184), *(void *)(v0 + 160));
      swift_bridgeObjectRelease();
      goto LABEL_19;
    }
    if (v14 != *(_DWORD *)(v0 + 516))
    {
      if (v14 != *(_DWORD *)(v0 + 520) && v14 != *(_DWORD *)(v0 + 524))
      {
        uint64_t v17 = *(void *)(v0 + 168);
        uint64_t v16 = *(void *)(v0 + 176);
        uint64_t v18 = *(void *)(v0 + 160);
        uint64_t v69 = 0;
        unint64_t v70 = 0xE000000000000000;
        _StringGuts.grow(_:)(33);
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0xE000000000000000;
        v19._object = (void *)0x80000001003BCAD0;
        v19._countAndFlagsBits = 0xD00000000000001FLL;
        String.append(_:)(v19);
        CredentialInternal.state.getter();
        _print_unlocked<A, B>(_:_:)();
        (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
        return _assertionFailure(_:_:file:line:flags:)();
      }
LABEL_19:
      if (qword_1004536D0 != -1) {
        goto LABEL_31;
      }
      goto LABEL_20;
    }
  }
  unint64_t v21 = *(void *)(v0 + 296);
  swift_bridgeObjectRelease();
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v61) {
      goto LABEL_16;
    }
  }
  else if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_16:
    uint64_t v22 = *(void *)(v0 + 216);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 120);
    uint64_t v69 = 0;
    unint64_t v70 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    sub_10019366C(v25, v24);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
    {
      sub_100132C18(*(void *)(v0 + 200));
      uint64_t v26 = (void *)0xE500000000000000;
      uint64_t v27 = 0x6E696D6461;
    }
    else
    {
      uint64_t v50 = *(void *)(v0 + 216);
      uint64_t v51 = *(void *)(v0 + 224);
      uint64_t v52 = *(void *)(v0 + 200);
      uint64_t v27 = UUID.uuidString.getter();
      uint64_t v26 = v53;
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v50);
    }
    uint64_t v54 = *(void *)(v0 + 296);
    v55._countAndFlagsBits = v27;
    v55._object = v26;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 0x206574656C656420;
    v56._object = (void *)0xEF736E616870726FLL;
    String.append(_:)(v56);
    uint64_t v58 = v69;
    uint64_t v57 = v70;
    *(void *)(v0 + 480) = v70;
    uint64_t v59 = swift_allocObject();
    *(void *)(v0 + 488) = v59;
    *(void *)(v59 + 16) = v54;
    uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10045AFA0
                                                                              + dword_10045AFA0);
    unint64_t v60 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v60;
    void *v60 = v0;
    v60[1] = sub_1002AFC34;
    return v67((uint64_t)v67, v58, v57, (uint64_t)&unk_10045AF98, v59);
  }
  swift_bridgeObjectRelease();
  uint64_t v68 = *(void *)(v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v62 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v62(v68);
}

uint64_t sub_1002AFAE8()
{
  uint64_t v1 = *(void **)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 224);

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002AFC34()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 128);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002AFFC8;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 128);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002AFD8C;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_1002AFD8C()
{
  uint64_t v3 = *(void *)(v0 + 32);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(v3);
}

uint64_t sub_1002AFE90()
{
  uint64_t v1 = *(void **)(v0 + 376);
  uint64_t v2 = *(void **)(v0 + 344);

  sub_10008C4F0();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1002AFFC8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002B00C8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = a2;
  return _swift_task_switch(sub_1002B0158, 0, 0);
}

uint64_t sub_1002B0158()
{
  uint64_t v39 = v0;
  *(void *)(v0 + 72) = 0;
  uint64_t v1 = v0 + 72;
  id v2 = [*(id *)(v0 + 96) listAppletsAndRefreshCache:1 outError:v0 + 72];
  uint64_t v3 = *(void **)(v0 + 72);
  if (!v2)
  {
    id v13 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 == -1) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
  uint64_t v4 = v2;
  sub_10007582C(0, &qword_100457D90);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = v3;

  uint64_t v38 = (uint64_t)_swiftEmptyArrayStorage;
  if (!(v5 >> 62))
  {
    uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v7) {
      goto LABEL_4;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v12 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0) {
      goto LABEL_32;
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v7) {
    goto LABEL_20;
  }
LABEL_4:
  if (v7 < 1)
  {
    __break(1u);
LABEL_43:
    swift_once();
LABEL_17:
    uint64_t v14 = type metadata accessor for Logger();
    sub_10008E55C(v14, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      *(void *)(v0 + 72) = sub_100290514(0xD000000000000025, 0x80000001003BCB70, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      *(void *)(v0 + 72) = sub_100290514(v18, v19, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      unint64_t v20 = "%s: Nearfield error %s encountered when listing applets";
LABEL_29:
      _os_log_impl((void *)&_mh_execute_header, v15, v16, v20, (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_31:

      sub_10008E594();
      swift_allocError();
      *os_log_type_t v31 = 8;
      swift_willThrow();
      swift_errorRelease();
      uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_39;
    }
LABEL_30:
    swift_errorRelease();
    swift_errorRelease();
    goto LABEL_31;
  }
  for (uint64_t i = 0; i != v7; ++i)
  {
    if ((v5 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v5 + 8 * i + 32);
    }
    int v10 = v9;
    if (![v9 managedBySP]
      || (id v11 = [v10 rawGPState],
          type metadata accessor for InstanceInfoInternal(),
          v11 == (id)static InstanceInfoInternal.instanceLifeCycleStateTerminated.getter()))
    {
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v38;
  uint64_t v1 = v0 + 72;
  if (v38 < 0)
  {
LABEL_32:
    swift_retain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (!v33) {
      goto LABEL_33;
    }
    goto LABEL_23;
  }
LABEL_21:
  if ((v12 & 0x4000000000000000) != 0) {
    goto LABEL_32;
  }
  if (!*(void *)(v12 + 16))
  {
LABEL_33:
    swift_release();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10008E55C(v34, (uint64_t)qword_1004686A8);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v35, "There are no SP instances on the SE", v36, 2u);
      swift_slowDealloc();
    }
    uint64_t v25 = _swiftEmptyArrayStorage;
    goto LABEL_38;
  }
LABEL_23:
  unint64_t v21 = *(void **)(v0 + 96);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  *(void *)(v0 + 72) = 0;
  uint64_t v23 = [v21 queryExtraInfoForApplets:isa outError:v1];

  uint64_t v24 = *(void **)(v0 + 72);
  if (!v23)
  {
    id v27 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10008E55C(v28, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136315394;
      *(void *)(v0 + 72) = sub_100290514(0xD000000000000025, 0x80000001003BCB70, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      *(void *)(v0 + 72) = sub_100290514(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      unint64_t v20 = "%s: Nearfield error %s encountered when querying for extra information";
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  sub_10007582C(0, (unint64_t *)&unk_10045AFB0);
  uint64_t v25 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v26 = v24;
LABEL_38:

  **(void **)(v0 + 88) = v25;
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
LABEL_39:
  return v32();
}

void *sub_1002B08EC(unint64_t a1)
{
  uint64_t v3 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v3 - 8, v4);
  id v6 = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(char **)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  unint64_t v15 = (char *)v48 - v14;
  uint64_t result = sub_1002B1064();
  if (!v1)
  {
    uint64_t v67 = (uint64_t)result;
    v48[1] = 0;
    unint64_t v70 = (unint64_t)_swiftEmptyArrayStorage;
    if (a1 >> 62) {
      goto LABEL_53;
    }
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v17)
    {
      while (1)
      {
        unint64_t v19 = 0;
        unint64_t v51 = a1 + 32;
        uint64_t v52 = a1 & 0xFFFFFFFFFFFFFF8;
        uint64_t v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
        unint64_t v62 = a1 & 0xC000000000000001;
        uint64_t v20 = v67 & 0xFFFFFFFFFFFFFF8;
        uint64_t v56 = v67 & 0xFFFFFFFFFFFFFF8;
        uint64_t v57 = (void (**)(char *, char *, uint64_t))(v8 + 32);
        if (v67 < 0) {
          uint64_t v20 = v67;
        }
        v48[0] = v20;
        unint64_t v49 = v67 & 0xC000000000000001;
        unint64_t v65 = (unint64_t)(v8 + 8);
        uint64_t v50 = (uint64_t)&_swiftEmptyDictionarySingleton;
        *(void *)&long long v18 = 136315394;
        long long v55 = v18;
        unint64_t v54 = 0x80000001003BCB30;
        os_log_type_t v53 = (char *)&type metadata for Any + 8;
        unint64_t v58 = a1;
        uint64_t v59 = v6;
        uint64_t v66 = v7;
        uint64_t v68 = v15;
        uint64_t v60 = v17;
        while (1)
        {
          if (v62)
          {
            id v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v26 = __OFADD__(v19, 1);
            unint64_t v27 = v19 + 1;
            if (v26) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v19 >= *(void *)(v52 + 16)) {
              goto LABEL_51;
            }
            id v25 = *(id *)(v51 + 8 * v19);
            BOOL v26 = __OFADD__(v19, 1);
            unint64_t v27 = v19 + 1;
            if (v26) {
              goto LABEL_50;
            }
          }
          unint64_t v63 = v27;
          id v64 = v25;
          uint64_t v8 = (char *)[v25 applet:v48[0]];
          sub_10012018C((uint64_t)v6);
          if ((*v61)(v6, 1, v7) != 1) {
            break;
          }
          sub_100132C18((uint64_t)v6);
LABEL_39:
          if (qword_1004536D0 != -1) {
            swift_once();
          }
          uint64_t v38 = type metadata accessor for Logger();
          sub_10008E55C(v38, (uint64_t)qword_1004686A8);
          uint64_t v39 = v8;
          uint64_t v40 = Logger.logObject.getter();
          os_log_type_t v41 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v40, v41))
          {
            uint64_t v42 = swift_slowAlloc();
            v69[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v42 = v55;
            *(void *)(v42 + 4) = sub_100290514(0xD00000000000001ELL, v54, v69);
            *(_WORD *)(v42 + 12) = 2080;
            id v43 = [v39 identifier];
            uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v46 = v45;

            id v6 = v59;
            uint64_t v47 = v44;
            uint64_t v7 = v66;
            *(void *)(v42 + 14) = sub_100290514(v47, v46, v69);

            uint64_t v17 = v60;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s: Found orphaned applet with instanceAID %s", (uint8_t *)v42, 0x16u);
            swift_arrayDestroy();
            a1 = v58;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
          }
          uint64_t v8 = v39;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          unint64_t v15 = v68;
          if (*(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v70 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

LABEL_9:
          unint64_t v19 = v63;
          if (v63 == v17)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (void *)v50;
          }
        }
        (*v57)(v15, v6, v7);
        if (!((unint64_t)v67 >> 62)) {
          break;
        }
        swift_bridgeObjectRetain();
        unint64_t v15 = (char *)_CocoaArrayWrapper.endIndex.getter();
        if (!v15) {
          goto LABEL_37;
        }
LABEL_20:
        uint64_t v7 = v65 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        if (!v49)
        {
          a1 = 0;
          while (1)
          {
            id v6 = (char *)(a1 + 1);
            if (__OFADD__(a1, 1)) {
              goto LABEL_49;
            }
            id v29 = *(id *)(v67 + 8 * a1 + 32);
            CredentialInternal.identifier.getter();
            char v32 = static UUID.== infix(_:_:)();
            os_log_type_t v31 = *(void (**)(char *, uint64_t))v65;
            (*(void (**)(char *, uint64_t))v65)(v12, v66);
            if (v32) {
              break;
            }

            ++a1;
            if (v6 == v15)
            {
LABEL_30:
              swift_bridgeObjectRelease();
              a1 = v58;
              id v6 = v59;
              goto LABEL_38;
            }
          }
LABEL_31:
          swift_bridgeObjectRelease();
          uint64_t v33 = v50;
          id v6 = v59;
          uint64_t v7 = v66;
          unint64_t v15 = v68;
          if ((v50 & 0xC000000000000001) != 0)
          {
            if (v50 >= 0) {
              uint64_t v33 = v50 & 0xFFFFFFFFFFFFFF8;
            }
            id v34 = v29;
            id v35 = v64;
            uint64_t v36 = __CocoaDictionary.count.getter();
            if (__OFADD__(v36, 1)) {
              goto LABEL_52;
            }
            uint64_t v33 = sub_1002B1C10(v33, v36 + 1);
            id v22 = v64;
          }
          else
          {
            id v21 = v29;
            id v22 = v64;
            id v23 = v64;
          }
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v69[0] = v33;
          sub_1002CA708((uint64_t)v22, v29, isUniquelyReferenced_nonNull_native);
          uint64_t v50 = v69[0];

          swift_bridgeObjectRelease();
          v31(v15, v7);
          uint64_t v17 = v60;
          a1 = v58;
          goto LABEL_9;
        }
        a1 = 0;
        while (1)
        {
          uint64_t v28 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          id v6 = (char *)(a1 + 1);
          if (__OFADD__(a1, 1)) {
            break;
          }
          id v29 = (id)v28;
          CredentialInternal.identifier.getter();
          char v30 = static UUID.== infix(_:_:)();
          os_log_type_t v31 = *(void (**)(char *, uint64_t))v65;
          (*(void (**)(char *, uint64_t))v65)(v12, v66);
          if (v30) {
            goto LABEL_31;
          }
          swift_unknownObjectRelease();
          ++a1;
          if (v6 == v15) {
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        swift_bridgeObjectRetain();
        uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
        if (!v17) {
          goto LABEL_54;
        }
      }
      unint64_t v15 = *(char **)(v56 + 16);
      swift_bridgeObjectRetain();
      if (v15) {
        goto LABEL_20;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      os_log_type_t v31 = *(void (**)(char *, uint64_t))v65;
LABEL_38:
      uint64_t v37 = v66;
      v31(v68, v66);
      uint64_t v7 = v37;
      uint64_t v17 = v60;
      goto LABEL_39;
    }
LABEL_54:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return &_swiftEmptyDictionarySingleton;
  }
  return result;
}

void *sub_1002B1064()
{
  id v2 = [*(id *)(v0 + 112) viewContext];
  id v3 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 initWithEntityName:v4];

  uint64_t v6 = NSManagedObjectContext.fetch(_:)();
  if (v1)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    uint64_t v8 = (void *)sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc();
      v26[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315394;
      sub_100290514(0xD000000000000013, 0x80000001003BCB50, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v12 = Error.localizedDescription.getter();
      uint64_t v8 = (void *)v13;
      v25[0] = sub_100290514(v12, v13, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v22 = 0;
    swift_willThrow();
    swift_errorRelease();
  }
  else
  {
    uint64_t v14 = v6;

    uint64_t v8 = _swiftEmptyArrayStorage;
    unint64_t v27 = (unint64_t)_swiftEmptyArrayStorage;
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      uint64_t v16 = v14 + 32;
      swift_bridgeObjectRetain();
      do
      {
        sub_1000AA580(v16, (uint64_t)v26);
        sub_1000AA580((uint64_t)v26, (uint64_t)v25);
        type metadata accessor for SecureElementCredentialEntity();
        if (swift_dynamicCast())
        {
          type metadata accessor for CredentialInternal();
          uint64_t v17 = sub_1000B1F08(v24);
          sub_10007594C((uint64_t)v26);
          if (v17)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
        }
        else
        {
          if (qword_1004536D0 != -1) {
            swift_once();
          }
          uint64_t v18 = type metadata accessor for Logger();
          sub_10008E55C(v18, (uint64_t)qword_1004686A8);
          unint64_t v19 = Logger.logObject.getter();
          os_log_type_t v20 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v19, v20))
          {
            uint64_t v21 = swift_slowAlloc();
            v25[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v21 = 136315138;
            *(void *)(v21 + 4) = sub_100290514(0xD000000000000013, 0x80000001003BCB50, v25);
            _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s: Unable to cast entity from database as credential entity", (uint8_t *)v21, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }

          sub_10007594C((uint64_t)v26);
        }
        v16 += 32;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      uint64_t v8 = (void *)v27;
    }
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1002B159C(void *a1)
{
  id v1 = a1;
  unint64_t v2 = swift_bridgeObjectRetain();
  char v3 = sub_1002B30AC(v2, (uint64_t)v1);
  swift_bridgeObjectRelease();

  return v3 & 1;
}

uint64_t sub_1002B15FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  return _swift_task_switch(sub_1002B168C, 0, 0);
}

uint64_t sub_1002B168C()
{
  uint64_t v17 = v0;
  id v1 = (void *)v0[7];
  sub_10007582C(0, &qword_100457D90);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v0[5] = 0;
  LODWORD(v1) = [v1 deleteApplets:isa queueServerConnection:1 outError:v0 + 5];

  uint64_t v3 = (void *)v0[5];
  if (v1)
  {
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    id v4 = v3;
    uint64_t v5 = v15;
  }
  else
  {
    id v6 = v3;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10008E55C(v7, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v10 = 136315138;
      swift_getErrorValue();
      uint64_t v11 = Error.localizedDescription.getter();
      v0[5] = sub_100290514(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "reconcileCredentialsWithSEInfo: Nearfield error %s encountered when deleting bad SP applets", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v13 = 8;
    swift_willThrow();
    swift_errorRelease();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_1002B19A8@<X0>(unint64_t a1@<X1>, unint64_t a2@<X8>)
{
  unint64_t v4 = CredentialInternal.ownerApplications.getter();
  swift_bridgeObjectRetain();
  unint64_t v5 = (unint64_t)sub_1002B2908(v4, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 >> 62) {
    goto LABEL_13;
  }
  for (uint64_t i = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v18 = a2;
    id v19 = self;
    a2 = v5 & 0xC000000000000001;
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = a2 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v5 + 8 * v7);
      os_log_type_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      ApplicationInfoInternal.bundleId.getter();
      NSString v11 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v20 = 0;
      id v12 = [v19 bundleRecordWithBundleIdentifier:v11 allowPlaceholder:0 error:&v20];

      if (v12)
      {
        id v14 = v20;
        swift_bridgeObjectRelease();

        uint64_t v15 = type metadata accessor for UUID();
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v18, 1, 1, v15);
      }
      id v13 = v20;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();

      ++v7;
      if (v10 == i)
      {
        swift_bridgeObjectRelease();
        a2 = v18;
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_13:
    ;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  CredentialInternal.identifier.getter();
  uint64_t v17 = type metadata accessor for UUID();
  return (*(uint64_t (**)(unint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 0, 1, v17);
}

Swift::Int sub_1002B1C10(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_10006C51C((uint64_t *)&unk_10045AFE0);
    uint64_t v2 = static _DictionaryStorage.convert(_:capacity:)();
    uint64_t v18 = v2;
    __CocoaDictionary.makeIterator()();
    uint64_t v3 = __CocoaDictionary.Iterator.next()();
    if (v3)
    {
      uint64_t v4 = v3;
      type metadata accessor for CredentialInternal();
      do
      {
        swift_dynamicCast();
        sub_10007582C(0, (unint64_t *)&unk_10045AFB0);
        swift_dynamicCast();
        uint64_t v2 = v18;
        unint64_t v12 = *(void *)(v18 + 16);
        if (*(void *)(v18 + 24) <= v12)
        {
          sub_1002C5F20(v12 + 1, 1);
          uint64_t v2 = v18;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v6 = v2 + 64;
        uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v8 = result & ~v7;
        unint64_t v9 = v8 >> 6;
        if (((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*(void *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v13 = 0;
          unint64_t v14 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (++v9 == v14 && (v13 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v15 = v9 == v14;
            if (v9 == v14) {
              unint64_t v9 = 0;
            }
            v13 |= v15;
            uint64_t v16 = *(void *)(v6 + 8 * v9);
          }
          while (v16 == -1);
          unint64_t v10 = __clz(__rbit64(~v16)) + (v9 << 6);
        }
        *(void *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        uint64_t v11 = 8 * v10;
        *(void *)(*(void *)(v2 + 48) + v11) = v17;
        *(void *)(*(void *)(v2 + 56) + v11) = v4;
        ++*(void *)(v2 + 16);
        uint64_t v4 = __CocoaDictionary.Iterator.next()();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v2;
}

uint64_t sub_1002B1E54(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10006C51C((uint64_t *)&unk_10045AFE0);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v32 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v32) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v32) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v32) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v32) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v32) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = 8 * v13;
    uint64_t v18 = *(void **)(*(void *)(v4 + 56) + v17);
    Swift::Int v19 = *(void *)(v8 + 40);
    id v20 = *(id *)(*(void *)(v4 + 48) + v17);
    id v21 = v18;
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v22 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v23) & ~*(void *)(v11 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v28 = v24 == v27;
        if (v24 == v27) {
          unint64_t v24 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v24);
      }
      while (v29 == -1);
      unint64_t v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(void *)(v11 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t v30 = 8 * v25;
    *(void *)(*(void *)(v8 + 48) + v30) = v20;
    *(void *)(*(void *)(v8 + 56) + v30) = v21;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1002B20EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10006C51C((uint64_t *)&unk_100455760);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }
    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_40;
      }
      if (v14 >= v30) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v30) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v30) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v30) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_41;
                }
                if (v10 >= v30) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v10 = v16;
          }
        }
      }
LABEL_24:
      unint64_t v9 = (v15 - 1) & v15;
      unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    uint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000AA580(*(void *)(v4 + 56) + 32 * v13, (uint64_t)v33);
    sub_1000761D0(v33, v32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    BOOL v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *BOOL v28 = v19;
    v28[1] = v18;
    uint64_t result = (uint64_t)sub_1000761D0(v32, (_OWORD *)(*(void *)(v8 + 56) + 32 * v23));
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      break;
    }
    if (!v5) {
      return v8;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1002B23B0(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  unint64_t v49 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  long long v55 = (char *)v32 - v13;
  uint64_t v14 = type metadata accessor for StateInternal();
  unint64_t v15 = *(char **)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_26:
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
LABEL_3:
      unint64_t v20 = 0;
      uint64_t v45 = a1 & 0xFFFFFFFFFFFFFF8;
      unint64_t v46 = a1 & 0xC000000000000001;
      id v43 = (uint64_t (**)(char *, uint64_t))(v15 + 88);
      unint64_t v44 = a1 + 32;
      int v42 = enum case for StateInternal.installed(_:);
      id v35 = (void (**)(char *, uint64_t))(v15 + 8);
      id v34 = (void (**)(char *, uint64_t))(v15 + 96);
      uint64_t v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      uint64_t v51 = v33 + 16;
      id v48 = (void (**)(char *, char *, uint64_t))(v33 + 32);
      os_log_type_t v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56);
      unint64_t v54 = (void (**)(char *, uint64_t))(v33 + 8);
      v32[1] = (v33 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      unint64_t v39 = a1;
      uint64_t v40 = a2;
      uint64_t v37 = v18;
      uint64_t v38 = v14;
      uint64_t v36 = v19;
      while (1)
      {
        if (v46)
        {
          unint64_t v21 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v22 = __OFADD__(v20, 1);
          unint64_t v23 = v20 + 1;
          if (v22)
          {
LABEL_23:
            __break(1u);
            return v56;
          }
        }
        else
        {
          if (v20 >= *(void *)(v45 + 16))
          {
            __break(1u);
            goto LABEL_26;
          }
          unint64_t v21 = (char *)*(id *)(v44 + 8 * v20);
          BOOL v22 = __OFADD__(v20, 1);
          unint64_t v23 = v20 + 1;
          if (v22) {
            goto LABEL_23;
          }
        }
        unint64_t v47 = v23;
        unint64_t v15 = v21;
        CredentialInternal.state.getter();
        int v24 = (*v43)(v18, v14);
        if (v24 == v42)
        {
          (*v34)(v18, v14);
          swift_bridgeObjectRelease();
          id v41 = v15;
          CredentialInternal.identifier.getter();
          uint64_t v25 = *(void *)(a2 + 16);
          if (v25)
          {
            uint64_t v26 = a2 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
            uint64_t v52 = *(void *)(v33 + 72);
            uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
            swift_bridgeObjectRetain();
            while (1)
            {
              v27(v7, v26, v8);
              BOOL v28 = *v53;
              (*v53)(v7, 0, 1, v8);
              if ((*v50)(v7, 1, v8) == 1) {
                break;
              }
              unint64_t v15 = v49;
              (*v48)(v49, v7, v8);
              sub_1002B3B78((unint64_t *)&qword_1004556E0);
              char v29 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v30 = *v54;
              (*v54)(v15, v8);
              if (v29)
              {
                a2 = v40;
                swift_bridgeObjectRelease();
                v30(v55, v8);

                goto LABEL_20;
              }
              v26 += v52;
              if (!--v25) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            BOOL v28 = *v53;
            swift_bridgeObjectRetain();
LABEL_17:
            v28(v7, 1, 1, v8);
          }
          a2 = v40;
          swift_bridgeObjectRelease();
          (*v54)(v55, v8);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
LABEL_20:
          uint64_t v14 = v38;
          a1 = v39;
          uint64_t v19 = v36;
          uint64_t v18 = v37;
        }
        else
        {
          (*v35)(v18, v14);
        }
        unint64_t v20 = v47;
        if (v47 == v19) {
          return v56;
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002B2900(void *a1)
{
  return sub_1002B159C(a1);
}

void *sub_1002B2908(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v27 = _swiftEmptyArrayStorage;
  if (a1 >> 62) {
    goto LABEL_32;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v4 = 0;
    uint64_t v24 = v2 & 0xFFFFFFFFFFFFFF8;
    unint64_t v25 = v2 & 0xC000000000000001;
    uint64_t v22 = i;
    uint64_t v23 = v2 + 32;
    while (1)
    {
      if (v25)
      {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v4 >= *(void *)(v24 + 16)) {
          goto LABEL_30;
        }
        id v5 = *(id *)(v23 + 8 * v4);
      }
      uint64_t v6 = v5;
      if (__OFADD__(v4++, 1)) {
        goto LABEL_31;
      }
      if (a2 >> 62) {
        break;
      }
      uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v9 = v5;
      swift_bridgeObjectRetain();
      if (v8) {
        goto LABEL_12;
      }
LABEL_4:

      swift_bridgeObjectRelease();
      uint64_t v2 = (uint64_t)&v27;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
LABEL_5:
      if (v4 == v22) {
        return v27;
      }
    }
    id v20 = v5;
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v10 = 4;
    while (1)
    {
      uint64_t v2 = v10 - 4;
      id v11 = (a2 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
          : *(id *)(a2 + 8 * v10);
      uint64_t v12 = v11;
      uint64_t v13 = v10 - 3;
      if (__OFADD__(v2, 1)) {
        break;
      }
      uint64_t v14 = ApplicationInfoInternal.bundleId.getter();
      uint64_t v16 = v15;
      uint64_t v17 = ApplicationInfoInternal.bundleId.getter();
      uint64_t v2 = v18;
      if (v14 == v17 && v16 == v18)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_24:
        swift_bridgeObjectRelease();

        goto LABEL_5;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19)
      {

        goto LABEL_24;
      }
      ++v10;
      if (v13 == v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    ;
  }
  return _swiftEmptyArrayStorage;
}

void *sub_1002B2B90(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; uint64_t v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v3 = 4;
    while (1)
    {
      id v4 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v3);
      id v5 = v4;
      uint64_t v6 = v3 - 3;
      if (__OFADD__(v3 - 4, 1)) {
        break;
      }
      ApplicationInfoInternal.bundleId.getter();
      TCCContext.checkTCCAccess(to:for:)();
      swift_bridgeObjectRelease();
      uint64_t v7 = TCCContext.TCCAccess.rawValue.getter();
      if (v7 == TCCContext.TCCAccess.rawValue.getter())
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
      ++v3;
      if (v6 == v2) {
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_17:
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_1002B2D44(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v6 - 8, v7);
  id v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)type metadata accessor for UUID();
  uint64_t v31 = *(v10 - 1);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v36 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  uint64_t v30 = (char *)&v28 - v15;
  if (a1 >> 62) {
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v16; uint64_t v16 = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v35 = a1 & 0xC000000000000001;
    uint64_t v32 = v31 + 32;
    uint64_t v33 = (unsigned int (**)(char *, uint64_t, void *))(v31 + 48);
    uint64_t v37 = _swiftEmptyArrayStorage;
    uint64_t v17 = 4;
    unint64_t v28 = a2;
    unint64_t v29 = a1;
    uint64_t v34 = v16;
    uint64_t v18 = (void (**)(char *, char *, void *))(v31 + 32);
    while (1)
    {
      char v19 = v10;
      id v20 = v35 ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v17);
      uint64_t v10 = v20;
      uint64_t v21 = v17 - 3;
      if (__OFADD__(v17 - 4, 1)) {
        break;
      }
      id v38 = v20;
      sub_1002B19A8(a2, (unint64_t)v9);
      if (v3)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      uint64_t v10 = v19;
      if ((*v33)(v9, 1, v19) == 1)
      {
        sub_100132C18((uint64_t)v9);
      }
      else
      {
        uint64_t v22 = *v18;
        uint64_t v23 = v30;
        (*v18)(v30, v9, v19);
        v22(v36, v23, v19);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v24 = (unint64_t)v37;
        }
        else {
          unint64_t v24 = sub_10025A3B0(0, v37[2] + 1, 1, (unint64_t)v37);
        }
        unint64_t v26 = *(void *)(v24 + 16);
        unint64_t v25 = *(void *)(v24 + 24);
        if (v26 >= v25 >> 1) {
          unint64_t v24 = sub_10025A3B0(v25 > 1, v26 + 1, 1, v24);
        }
        *(void *)(v24 + 16) = v26 + 1;
        unint64_t v27 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
        uint64_t v37 = (void *)v24;
        uint64_t v10 = v19;
        v22((char *)(v24 + v27 + *(void *)(v31 + 72) * v26), v36, v19);
        a2 = v28;
        a1 = v29;
      }
      ++v17;
      if (v21 == v34) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
  }
LABEL_22:
  swift_bridgeObjectRelease();
}

uint64_t sub_1002B30AC(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v28 = a2;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v27 - 8);
  uint64_t v7 = __chkstk_darwin(v27, v6);
  unint64_t v26 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)v23 - v10;
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v12; uint64_t v12 = _CocoaArrayWrapper.endIndex.getter())
  {
    v23[1] = v3;
    unint64_t v24 = a1;
    unint64_t v25 = a1 & 0xC000000000000001;
    uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v14 = 4;
    while (1)
    {
      uint64_t v5 = v14 - 4;
      id v15 = v25 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(a1 + 8 * v14);
      uint64_t v16 = v15;
      a1 = v14 - 3;
      if (__OFADD__(v5, 1)) {
        break;
      }
      CredentialInternal.identifier.getter();
      uint64_t v17 = v26;
      CredentialInternal.identifier.getter();
      char v18 = static UUID.== infix(_:_:)();
      uint64_t v3 = *v13;
      char v19 = v17;
      uint64_t v20 = v27;
      (*v13)(v19, v27);
      v3(v11, v20);

      if (v18)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
      ++v14;
      BOOL v21 = a1 == v12;
      a1 = v24;
      if (v21) {
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
  }
LABEL_15:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_1002B32CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(id, id))
{
  uint64_t v21 = 0;
  int64_t v6 = 0;
  uint64_t v7 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v23) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v23) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v22 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v23) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v22 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    uint64_t v12 = *(void **)(*(void *)(a3 + 56) + 8 * v11);
    id v13 = *(id *)(*(void *)(a3 + 48) + 8 * v11);
    id v14 = v12;
    LOBYTE(v12) = a4(v13, v14);

    if (v12)
    {
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
LABEL_24:
        sub_1002B1E54(a1, a2, v21, a3);
        return;
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v23) {
    goto LABEL_24;
  }
  unint64_t v16 = *(void *)(v22 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v23) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v22 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_1002B34C4(uint64_t isStackAllocationSafe, uint64_t (*a2)(id, id), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    sub_1002B32CC((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    unint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    sub_1002B32CC((unint64_t *)v11, v8, v6, a2);
    a3 = v12;
    swift_slowDealloc();
  }
  return a3;
}

Swift::Int sub_1002B363C(uint64_t a1, uint64_t (*a2)(id, id), uint64_t a3)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v4 = &_swiftEmptyDictionarySingleton;
    __CocoaDictionary.makeIterator()();
    if (__CocoaDictionary.Iterator.next()())
    {
      type metadata accessor for CredentialInternal();
      do
      {
        swift_dynamicCast();
        sub_10007582C(0, (unint64_t *)&unk_10045AFB0);
        swift_dynamicCast();
        id v7 = v25;
        id v8 = v26;
        char v9 = a2(v7, v8);

        if (v9)
        {
          unint64_t v10 = *((void *)&_swiftEmptyDictionarySingleton + 2);
          if (*((void *)&_swiftEmptyDictionarySingleton + 3) <= v10)
          {
            uint64_t v13 = v10 + 1;
            id v14 = v7;
            id v15 = v8;
            sub_1002C5F20(v13, 1);
          }
          else
          {
            id v11 = v7;
            id v12 = v8;
          }
          Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptyDictionarySingleton + 5));
          int64_t v17 = (char *)&_swiftEmptyDictionarySingleton + 64;
          uint64_t v18 = -1 << *((unsigned char *)&_swiftEmptyDictionarySingleton + 32);
          unint64_t v19 = result & ~v18;
          unint64_t v20 = v19 >> 6;
          if (((-1 << v19) & ~*((void *)&_swiftEmptyDictionarySingleton + (v19 >> 6) + 8)) != 0)
          {
            unint64_t v5 = __clz(__rbit64((-1 << v19) & ~*((void *)&_swiftEmptyDictionarySingleton + (v19 >> 6) + 8))) | v19 & 0x7FFFFFFFFFFFFFC0;
          }
          else
          {
            char v21 = 0;
            unint64_t v22 = (unint64_t)(63 - v18) >> 6;
            do
            {
              if (++v20 == v22 && (v21 & 1) != 0)
              {
                __break(1u);
                return result;
              }
              BOOL v23 = v20 == v22;
              if (v20 == v22) {
                unint64_t v20 = 0;
              }
              v21 |= v23;
              uint64_t v24 = *(void *)&v17[8 * v20];
            }
            while (v24 == -1);
            unint64_t v5 = __clz(__rbit64(~v24)) + (v20 << 6);
          }
          *(void *)&v17[(v5 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v5;
          uint64_t v6 = 8 * v5;
          *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 6) + v6) = v7;
          *(void *)(*((void *)&_swiftEmptyDictionarySingleton + 7) + v6) = v8;
          ++*((void *)&_swiftEmptyDictionarySingleton + 2);
        }
      }
      while (__CocoaDictionary.Iterator.next()());
      id v4 = &_swiftEmptyDictionarySingleton;
    }
    sub_10008C4F0();
  }
  else
  {
    id v4 = (void *)sub_1002B34C4(a1, a2, a3);
    swift_bridgeObjectRelease();
  }
  return (Swift::Int)v4;
}

uint64_t sub_1002B390C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002B39F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1002EC148(*(void *)(v0 + 16), v0 + v2, *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002B3A90()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B3AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  v6[1] = sub_10011F7E8;
  v6[7] = a2;
  v6[8] = v5;
  return _swift_task_switch(sub_1002B168C, 0, 0);
}

uint64_t sub_1002B3B78(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002B3BD0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA256();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SHA256Digest();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B4618((unint64_t *)&qword_1004568C0, (void (*)(uint64_t))&type metadata accessor for SHA256);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v18 = 0;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      unint64_t v17 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10006D0EC(a1, a2);
      sub_1002B4538((int)a1, a1 >> 32, v17, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA256, (unint64_t *)&qword_1004568C0, (void (*)(uint64_t))&type metadata accessor for SHA256);
      break;
    case 2uLL:
      unint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = 0;
      uint64_t v13 = *(void *)(a1 + 24);
      sub_10006D0EC(a1, a2);
      swift_retain();
      swift_retain();
      sub_1002B4538(v17, v13, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA256, (unint64_t *)&qword_1004568C0, (void (*)(uint64_t))&type metadata accessor for SHA256);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v21, 0, 14);
      goto LABEL_7;
    default:
      v21[0] = a1;
      LOWORD(v21[1]) = a2;
      BYTE2(v21[1]) = BYTE2(a2);
      BYTE3(v21[1]) = BYTE3(a2);
      BYTE4(v21[1]) = BYTE4(a2);
      BYTE5(v21[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10006D144(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  uint64_t v22 = v8;
  uint64_t v23 = sub_1002B4618(&qword_1004568C8, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
  id v14 = sub_1001883A8(v21);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v14, v12, v8);
  sub_100075908(v21, v22);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v15 = v20;
  sub_10007594C((uint64_t)v21);
  return v15;
}

uint64_t sub_1002B4084(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for SHA384();
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  id v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SHA384Digest();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002B4618(&qword_10045B020, (void (*)(uint64_t))&type metadata accessor for SHA384);
  dispatch thunk of HashFunction.init()();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v18 = 0;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      unint64_t v17 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10006D0EC(a1, a2);
      sub_1002B4538((int)a1, a1 >> 32, v17, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA384, &qword_10045B020, (void (*)(uint64_t))&type metadata accessor for SHA384);
      break;
    case 2uLL:
      unint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = 0;
      uint64_t v13 = *(void *)(a1 + 24);
      sub_10006D0EC(a1, a2);
      swift_retain();
      swift_retain();
      sub_1002B4538(v17, v13, a2 & 0x3FFFFFFFFFFFFFFFLL, (uint64_t)v7, (void (*)(void))&type metadata accessor for SHA384, &qword_10045B020, (void (*)(uint64_t))&type metadata accessor for SHA384);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v21, 0, 14);
      goto LABEL_7;
    default:
      v21[0] = a1;
      LOWORD(v21[1]) = a2;
      BYTE2(v21[1]) = BYTE2(a2);
      BYTE3(v21[1]) = BYTE3(a2);
      BYTE4(v21[1]) = BYTE4(a2);
      BYTE5(v21[1]) = BYTE5(a2);
LABEL_7:
      dispatch thunk of HashFunction.update(bufferPointer:)();
      break;
  }
  sub_10006D144(a1, a2);
  dispatch thunk of HashFunction.finalize()();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v4);
  uint64_t v22 = v8;
  uint64_t v23 = sub_1002B4618(&qword_10045B028, (void (*)(uint64_t))&type metadata accessor for SHA384Digest);
  id v14 = sub_1001883A8(v21);
  (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v14, v12, v8);
  sub_100075908(v21, v22);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v15 = v20;
  sub_10007594C((uint64_t)v21);
  return v15;
}

uint64_t sub_1002B4538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), unint64_t *a6, void (*a7)(uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      a5(0);
      sub_1002B4618(a6, a7);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1002B4618(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1002B4660()
{
  uint64_t v1 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stopping timer for pid %d", v5, 8u);
    swift_slowDealloc();

    uint64_t v6 = *(void **)(v1 + 24);
    if (v6)
    {
LABEL_5:
      [v6 invalidate];
      id v7 = *(void **)(v1 + 24);
      goto LABEL_8;
    }
  }
  else
  {

    swift_release();
    uint64_t v6 = *(void **)(v1 + 24);
    if (v6) {
      goto LABEL_5;
    }
  }
  id v7 = 0;
LABEL_8:
  *(void *)(v1 + 24) = 0;

  uint64_t v8 = *(void *)(v1 + 32);
  if (v8)
  {
    sub_100052B14(v8);
    uint64_t v9 = *(void **)(v1 + 32);
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)(v1 + 32) = 0;
}

void sub_1002B47E4()
{
  if (*(void *)(v0 + 32))
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10008E55C(v1, (uint64_t)qword_1004686A8);
    swift_retain();
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v4 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Client pid %d entering foreground outside, idempotently invalidate RBS assertion, stopping timer", v4, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    sub_1002B4660();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    swift_retain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Client pid %d entering foreground outside of Wired Mode transceive, no op", v8, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
  }
}

void sub_1002B4A44()
{
  if (!*(void *)(v0 + 32))
  {
    uint64_t v1 = v0;
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E55C(v2, (uint64_t)qword_1004686A8);
    swift_retain();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Client pid %d backgrounded outside of WM transceive, invalidating session", v5, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10012696C(*(_DWORD *)(v1 + 20));
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1002B4BA4()
{
  uint64_t v1 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_retain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Client pid %d entering suspended state, stopping all timers and assertions to end session", v5, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  sub_1002B4660();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_10012696C(*(_DWORD *)(v1 + 20));
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1002B4D04(void *a1)
{
  if (!*(unsigned char *)(v1 + 16))
  {
    uint64_t v2 = v1;
    if (*(void *)(v1 + 32) || *(void *)(v1 + 24))
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10008E55C(v3, (uint64_t)qword_1004686A8);
      swift_retain();
      os_log_type_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v6 = 67109120;
        LODWORD(aBlock) = *(_DWORD *)(v2 + 20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Existing background timer / assertion for pid %d found, do not start a new one", v6, 8u);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10008E55C(v8, (uint64_t)qword_1004686A8);
      swift_retain();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 67109120;
        LODWORD(aBlock) = *(_DWORD *)(v2 + 20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Client pid %d WM transceive, starting timer for 15s and acquiring RBSAssertion", v11, 8u);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      id v12 = [self targetWithPid:*(unsigned int *)(v2 + 20)];
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      uint64_t aBlock = 0x20746E65696C43;
      unint64_t v38 = 0xE700000000000000;
      int v43 = *(_DWORD *)(v2 + 20);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0xD000000000000015;
      v14._object = (void *)0x80000001003BCC20;
      String.append(_:)(v14);
      sub_10006C51C(&qword_1004557C0);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_100378B90;
      id v16 = v12;
      NSString v17 = String._bridgeToObjectiveC()();
      NSString v18 = String._bridgeToObjectiveC()();
      id v19 = [self attributeWithDomain:v17 name:v18];

      *(void *)(v15 + 32) = v19;
      specialized Array._endMutation()();
      id v20 = objc_allocWithZone((Class)RBSAssertion);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10007582C(0, qword_10045B100);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v20 initWithExplanation:v21 target:v16 attributes:isa];

      id v41 = sub_1002B5E70;
      uint64_t v42 = v2;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v38 = 1107296256;
      unint64_t v39 = sub_1002B57C0;
      uint64_t v40 = &unk_100418E68;
      uint64_t v24 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      [v23 acquireWithInvalidationHandler:v24];
      _Block_release(v24);
      unint64_t v25 = *(void **)(v2 + 24);
      *(void *)(v2 + 24) = v23;
      id v26 = v23;

      swift_retain();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        unint64_t v29 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v29 = 67109120;
        LODWORD(aBlock) = *(_DWORD *)(v2 + 20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Setting new background timer for client pid %d", v29, 8u);
        swift_slowDealloc();
      }
      else
      {

        swift_release();
      }
      uint64_t v30 = swift_allocObject();
      swift_weakInit();
      uint64_t v31 = (NSObject **)objc_allocWithZone((Class)SESTimer);
      id v41 = sub_1002B5EC8;
      uint64_t v42 = v30;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v38 = 1107296256;
      unint64_t v39 = sub_10007C0C4;
      uint64_t v40 = &unk_100418EB8;
      uint64_t v32 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v33 = sub_100052804(v31, a1, v32);
      _Block_release(v32);
      swift_release();
      uint64_t v34 = *(void **)(v2 + 32);
      *(void *)(v2 + 32) = v33;

      unint64_t v35 = *(void **)(v2 + 32);
      if (v35)
      {
        id v36 = v35;
        sub_100052A0C((uint64_t)v36, 14.5, 0.5);
        swift_release();
      }
      else
      {
        swift_release();
      }
    }
  }
}

void sub_1002B5404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1002B4660();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10012696C(*(_DWORD *)(a3 + 20));
    swift_unknownObjectRelease();
  }
  if (!a2
    || (uint64_t v26 = a2,
        swift_errorRetain(),
        sub_10006C51C((uint64_t *)&unk_10045AFD0),
        sub_10007582C(0, (unint64_t *)&qword_100454598),
        (swift_dynamicCast() & 1) == 0))
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10008E55C(v13, (uint64_t)qword_1004686A8);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v14, "Skipping invalidation handler due to missing error", v15, 2u);
      swift_slowDealloc();
    }
    goto LABEL_21;
  }
  os_log_type_t v5 = v25;
  id v6 = [v25 domain];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      goto LABEL_17;
    }
  }
  if ([v25 code] == (id)1)
  {
LABEL_21:

    return;
  }
LABEL_17:
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_10008E55C(v16, (uint64_t)qword_1004686A8);
  NSString v17 = v25;
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)id v19 = 136315138;
    id v20 = v17;
    id v21 = [v20 description];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;

    sub_100290514(v22, v24, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v18, "Assertion invalidated, %s", v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_21;
  }
}

void sub_1002B57C0(uint64_t a1, void *a2, void *a3)
{
  os_log_type_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t sub_1002B584C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1002B58A4();
    return swift_release();
  }
  return result;
}

void sub_1002B58A4()
{
  uint64_t v1 = v0;
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_retain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Background timer for pid %d expired", v5, 8u);
    swift_slowDealloc();

    id v6 = *(void **)(v0 + 24);
    if (v6)
    {
LABEL_5:
      [v6 invalidate];
      id v7 = *(void **)(v0 + 24);
      goto LABEL_8;
    }
  }
  else
  {

    swift_release();
    id v6 = *(void **)(v0 + 24);
    if (v6) {
      goto LABEL_5;
    }
  }
  id v7 = 0;
LABEL_8:
  *(void *)(v0 + 24) = 0;

  unsigned int v8 = *(unsigned __int8 *)(v0 + 16) - 1;
  swift_retain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  if (v8 > 1)
  {
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalidating expired background timer for pid %d", v13, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    os_log_type_t v14 = *(void **)(v1 + 32);
    *(void *)(v1 + 32) = 0;
  }
  else
  {
    if (v11)
    {
      char v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v12 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Ending session for suspended client %d after background timer expiration", v12, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    sub_1002B4660();
    if (swift_unknownObjectWeakLoadStrong())
    {
      sub_10012696C(*(_DWORD *)(v1 + 20));
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1002B5B9C()
{
  _StringGuts.grow(_:)(22);
  v1._countAndFlagsBits = 0x3D6574617473;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._countAndFlagsBits = 0x747265737361202CLL;
  v2._object = (void *)0xEC0000003D6E6F69;
  String.append(_:)(v2);
  id v3 = *(id *)(v0 + 24);
  sub_10006C51C(&qword_10045B0F8);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1002B5C84()
{
  sub_10006D414(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BackgroundAssertionHandle()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for BackgroundAssertionHandle.AppState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B5DBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundAssertionHandle.AppState()
{
  return &type metadata for BackgroundAssertionHandle.AppState;
}

unint64_t sub_1002B5DF8()
{
  unint64_t result = qword_10045B0F0;
  if (!qword_10045B0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B0F0);
  }
  return result;
}

uint64_t sub_1002B5E4C()
{
  return sub_1002B5B9C();
}

void sub_1002B5E70(uint64_t a1, uint64_t a2)
{
  sub_1002B5404(a1, a2, v2);
}

uint64_t sub_1002B5E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002B5E88()
{
  return swift_release();
}

uint64_t sub_1002B5E90()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B5EC8()
{
  return sub_1002B584C();
}

uint64_t sub_1002B5ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t type metadata accessor for UserDefaultBackedCodable()
{
  return sub_1000B3E5C();
}

uint64_t sub_1002B5EF8()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1002B5F9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 32) & (unint64_t)~v6) + 1 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v11 = a2[1];
    *a1 = *a2;
    a1[1] = v11;
    char v12 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *char v12 = *v13;
    v12[1] = v13[1];
    uint64_t v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 16) & ~v6;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 + v7);
  }
  return a1;
}

uint64_t sub_1002B60E4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_1002B6168(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(a3 + 16);
  unsigned int v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v11, v12, v7);
  *(unsigned char *)(*(void *)(v9 + 48) + v11) = *(unsigned char *)(*(void *)(v9 + 48) + v12);
  return a1;
}

void *sub_1002B6234(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  *(unsigned char *)(*(void *)(v9 + 40) + v11) = *(unsigned char *)(*(void *)(v9 + 40) + v12);
  return a1;
}

_OWORD *sub_1002B6318(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  *(unsigned char *)(*(void *)(v7 + 32) + v9) = *(unsigned char *)(*(void *)(v7 + 32) + v10);
  return a1;
}

void *sub_1002B63BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 16) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  *(unsigned char *)(*(void *)(v10 + 24) + v12) = *(unsigned char *)(*(void *)(v10 + 24) + v13);
  return a1;
}

uint64_t sub_1002B6488(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 32) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 16) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_1002B6634(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1002B68A0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
          id v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for UserDefaultBacked()
{
  return sub_1000B3E5C();
}

uint64_t sub_1002B69D4()
{
  sub_10006C51C(&qword_10045B210);
  swift_allocObject();
  uint64_t result = DispatchSpecificKey.init()();
  qword_10045B208 = result;
  return result;
}

void sub_1002B6A18(uint64_t a1, uint64_t a2)
{
  sub_10007BEB4();
  if (qword_100453918 != -1) {
    swift_once();
  }
  static OS_dispatch_queue.getSpecific<A>(key:)();
  if ((v6 & 1) != 0 || v5 != 0x534F534543555245)
  {
    id v4 = (id)sub_100056FE4(a1);
    OS_dispatch_queue.sync<A>(execute:)();
  }
  else
  {
    (*(void (**)(uint64_t))(a2 + 16))(a2);
  }
}

uint64_t sub_1002B6B30()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

id sub_1002B6B58()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for DSK()) init];
  qword_100468A30 = (uint64_t)result;
  return result;
}

uint64_t sub_1002B6BB0(uint64_t a1)
{
  return sub_1002B6C6C(a1, 0xD000000000000018, 0x80000001003BCD00, &qword_100468A38);
}

id sub_1002B6BF8(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;

  return v5;
}

uint64_t sub_1002B6C48(uint64_t a1)
{
  return sub_1002B6C6C(a1, 0xD000000000000028, 0x80000001003BCD20, &qword_100468A40);
}

uint64_t sub_1002B6C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v19[1] = a3;
  id v20 = a4;
  v19[0] = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4, v5);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  size_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  int v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8, v17);
  sub_10007BEB4();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchQoS.QoSClass.userInitiated(_:), v11);
  DispatchQoS.init(qosClass:relativePriority:)();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  id v21 = &_swiftEmptyArrayStorage;
  sub_1001A94BC();
  sub_10006C51C(&qword_1004566F0);
  sub_10008C0B0((unint64_t *)&qword_1004566F8, &qword_1004566F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t *v20 = result;
  return result;
}

id sub_1002B6F28()
{
  ObjectType = (objc_class *)swift_getObjectType();
  v0[OBJC_IVAR____TtC10seserviced3DSK_isRunning] = 0;
  v0[OBJC_IVAR____TtC10seserviced3DSK_isLowPowerModeEnabled] = 0;
  uint64_t v2 = v0;
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  int v3 = &v2[OBJC_IVAR____TtC10seserviced3DSK_lowPowerHandlerName];
  *(void *)int v3 = 0xD000000000000016;
  *((void *)v3 + 1) = 0x80000001003BCD50;
  *(void *)&v2[OBJC_IVAR____TtC10seserviced3DSK_runningModules] = &_swiftEmptySetSingleton;

  v12.receiver = v2;
  v12.super_class = ObjectType;
  id v4 = [super init];
  uint64_t v5 = qword_100453928;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  v11[4] = sub_1002B99F8;
  v11[5] = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  void v11[2] = sub_1002B9D80;
  v11[3] = &unk_100419000;
  uint64_t v8 = _Block_copy(v11);
  id v9 = v6;
  swift_release();
  os_state_add_handler();

  _Block_release(v8);
  return v9;
}

uint64_t sub_1002B70F4()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced3DSK_isRunning);
  unint64_t v29 = &type metadata for Bool;
  LOBYTE(v28) = v1;
  sub_1000761D0(&v28, v27);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v27, 0x6E696E6E75527369, 0xE900000000000067, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  char v3 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced3DSK_isLowPowerModeEnabled);
  unint64_t v29 = &type metadata for Bool;
  LOBYTE(v28) = v3;
  sub_1000761D0(&v28, v27);
  char v4 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v27, 0xD000000000000015, 0x80000001003B7380, v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced3DSK_runningModules);
  swift_beginAccess();
  uint64_t v6 = *v5;
  int64_t v7 = *(void *)(*v5 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    *(void *)&long long v28 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CF974(0, v7, 0);
    uint64_t v8 = (void *)v28;
    uint64_t v9 = sub_100203450(v6);
    uint64_t v11 = v10;
    char v13 = v12 & 1;
    uint64_t v14 = v6 + 56;
    while ((v9 & 0x8000000000000000) == 0)
    {
      uint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
      if (v9 >= v14) {
        break;
      }
      uint64_t v14 = *(void *)(v6 + 56 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9;
      if ((v14 & 1) == 0) {
        goto LABEL_17;
      }
      uint64_t v14 = *(unsigned int *)(v6 + 36);
      if (v14 != v11) {
        goto LABEL_18;
      }
      uint64_t v14 = *(void *)(*(void *)(v6 + 48) + 8 * v9);
      if (v14)
      {
        if (v14 != 1) {
          goto LABEL_19;
        }
        unint64_t v15 = 0xE400000000000000;
        uint64_t v16 = 1852799308;
      }
      else
      {
        unint64_t v15 = 0xE600000000000000;
        uint64_t v16 = 0x616873696C41;
      }
      *(void *)&long long v28 = v8;
      unint64_t v18 = v8[2];
      unint64_t v17 = v8[3];
      if (v18 >= v17 >> 1)
      {
        sub_1002CF974(v17 > 1, v18 + 1, 1);
        uint64_t v8 = (void *)v28;
      }
      v8[2] = v18 + 1;
      id v19 = &v8[2 * v18];
      v19[4] = v16;
      v19[5] = v15;
      uint64_t v20 = sub_1000FAE78(v9, v11, v13 & 1, v6);
      uint64_t v9 = v20;
      uint64_t v11 = v21;
      char v13 = v22 & 1;
      if (!--v7)
      {
        sub_10008B004(v20, v21, v22 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    *(void *)&v27[0] = v14;
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
LABEL_15:
    unint64_t v29 = (void *)sub_10006C51C((uint64_t *)&unk_100455EA0);
    *(void *)&long long v28 = v8;
    sub_1000761D0(&v28, v27);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v27, 0x4D676E696E6E7572, 0xEE0073656C75646FLL, v23);
    swift_bridgeObjectRelease();
    sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v25 = sub_1000190DC((uint64_t)"dsk.state", (uint64_t)isa);

    return (uint64_t)v25;
  }
  return result;
}

void sub_1002B749C(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t *)((char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_47:
    swift_once();
    goto LABEL_11;
  }
  if (!a1)
  {
    if (sub_1001F791C()) {
      goto LABEL_6;
    }
LABEL_23:
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)char v23 = 136315138;
      if (a1)
      {
        unint64_t v25 = 0xE400000000000000;
        uint64_t v24 = 1852799308;
      }
      else
      {
        uint64_t v24 = 0x616873696C41;
        unint64_t v25 = 0xE600000000000000;
      }
      uint64_t v32 = sub_100290514(v24, v25, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v29 = v22;
      uint64_t v30 = "Rejecting DSK %s start";
      goto LABEL_44;
    }
LABEL_45:

    return;
  }
  if (a1 != 1) {
    goto LABEL_48;
  }
  if ((sub_100089C3C() & 1) == 0) {
    goto LABEL_23;
  }
LABEL_6:
  swift_beginAccess();
  char v11 = sub_1000E81A0((Swift::UInt *)&v32, a1);
  swift_endAccess();
  if ((v11 & 1) == 0)
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v26))
    {
      char v23 = (uint8_t *)swift_slowAlloc();
      v31[0] = swift_slowAlloc();
      *(_DWORD *)char v23 = 136315138;
      if (a1)
      {
        unint64_t v28 = 0xE400000000000000;
        uint64_t v27 = 1852799308;
      }
      else
      {
        uint64_t v27 = 0x616873696C41;
        unint64_t v28 = 0xE600000000000000;
      }
      uint64_t v32 = sub_100290514(v27, v28, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v29 = v26;
      uint64_t v30 = "DSK %s is already running";
LABEL_44:
      _os_log_impl((void *)&_mh_execute_header, v21, v29, v30, v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_45;
    }
    goto LABEL_45;
  }
  uint64_t v12 = OBJC_IVAR____TtC10seserviced3DSK_isRunning;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced3DSK_isRunning)) {
    goto LABEL_18;
  }
  char v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Starting DSK", v15, 2u);
    swift_slowDealloc();
  }

  *(unsigned char *)(v2 + v12) = 1;
  if (qword_1004536B0 != -1) {
    goto LABEL_47;
  }
LABEL_11:
  sub_1000D14E8();
  if (qword_100453710 != -1) {
    swift_once();
  }
  sub_100179500();
  if (qword_1004537A8 != -1) {
    swift_once();
  }
  sub_1001FD6F4();
  if (qword_100453738 != -1) {
    swift_once();
  }
  sub_1001990EC();
LABEL_18:
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    v31[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 136315138;
    if (a1)
    {
      if (a1 != 1)
      {
        uint64_t v32 = a1;
        goto LABEL_50;
      }
      unint64_t v20 = 0xE400000000000000;
      uint64_t v19 = 1852799308;
    }
    else
    {
      uint64_t v19 = 0x616873696C41;
      unint64_t v20 = 0xE600000000000000;
    }
    uint64_t v32 = sub_100290514(v19, v20, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Starting DSK %s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (a1 == 1)
  {
    if (qword_100453668 != -1) {
      swift_once();
    }
    sub_10007F180();
    return;
  }
  if (a1)
  {
LABEL_48:
    v31[0] = a1;
LABEL_50:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  if (qword_100453798 != -1) {
    swift_once();
  }
  sub_1001E9920();
}

void sub_1002B7BF0(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = (void *)qword_100468A38;
  *(void *)uint64_t v8 = qword_100468A38;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = v9;
  uint64_t v11 = _dispatchPreconditionTest(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v11 = OBJC_IVAR____TtC10seserviced3DSK_isRunning;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced3DSK_isRunning) != 1
    || (uint64_t v8 = (char *)(v2 + OBJC_IVAR____TtC10seserviced3DSK_runningModules),
        swift_beginAccess(),
        sub_1000F5C70(a1),
        char v13 = v12,
        swift_endAccess(),
        (v13 & 1) != 0))
  {
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      v35[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v22 = 136315138;
      if (a1)
      {
        if (a1 != 1) {
          goto LABEL_43;
        }
        unint64_t v24 = 0xE400000000000000;
        uint64_t v23 = 1852799308;
      }
      else
      {
        uint64_t v23 = 0x616873696C41;
        unint64_t v24 = 0xE600000000000000;
      }
      uint64_t v36 = sub_100290514(v23, v24, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "DSK %s is not running", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v14 = v2 + OBJC_IVAR____TtC10seserviced3DSK_logger;
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc();
    v35[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v17 = 136315138;
    v34[0] = v14;
    if (!a1)
    {
      uint64_t v18 = 0x616873696C41;
      unint64_t v19 = 0xE600000000000000;
      goto LABEL_22;
    }
    if (a1 == 1)
    {
      unint64_t v19 = 0xE400000000000000;
      uint64_t v18 = 1852799308;
LABEL_22:
      uint64_t v36 = sub_100290514(v18, v19, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Stopping DSK %s", v17, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (a1 != 1) {
        goto LABEL_23;
      }
      goto LABEL_18;
    }
LABEL_43:
    uint64_t v36 = a1;
    goto LABEL_45;
  }

  if (a1 != 1)
  {
LABEL_23:
    if (!a1)
    {
      if (qword_100453798 != -1) {
        swift_once();
      }
      sub_1001EAB28();
      goto LABEL_27;
    }
    v35[0] = a1;
LABEL_45:
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
LABEL_18:
  if (qword_100453668 != -1) {
LABEL_42:
  }
    swift_once();
  sub_10007F568();
LABEL_27:
  if (!*(void *)(*(void *)v8 + 16))
  {
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Stopping DSK", v27, 2u);
      swift_slowDealloc();
    }

    if (qword_1004536B0 != -1) {
      swift_once();
    }
    sub_1000D1850();
    if (qword_100453710 != -1) {
      swift_once();
    }
    sub_100179CD8();
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    sub_1001FDAFC();
    if (qword_100453738 != -1) {
      swift_once();
    }
    sub_100199B6C();
    if (qword_100453910 != -1) {
      uint64_t v28 = swift_once();
    }
    __chkstk_darwin(v28, v29);
    v34[-2] = sub_1002B996C;
    v34[-1] = v30;
    uint64_t v32 = v31 + 4;
    os_unfair_lock_lock(v31 + 4);
    sub_10008C114(v33);
    os_unfair_lock_unlock(v32);
    *(unsigned char *)(v2 + v11) = 0;
  }
}

void sub_1002B830C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_100468A38;
  *uint64_t v7 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  id v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
LABEL_8:
    sub_1000D1850();
    if (qword_100453710 != -1) {
      swift_once();
    }
    sub_100179CD8();
    if (qword_1004537A8 != -1) {
      swift_once();
    }
    sub_1001FDAFC();
    if (qword_100453738 != -1) {
      swift_once();
    }
    sub_100199B6C();
    v2[v1] = 0;
    return;
  }
  uint64_t v1 = OBJC_IVAR____TtC10seserviced3DSK_isRunning;
  if (v2[OBJC_IVAR____TtC10seserviced3DSK_isRunning] == 1)
  {
    id v10 = &v2[OBJC_IVAR____TtC10seserviced3DSK_runningModules];
    swift_beginAccess();
    uint64_t v11 = v2;
    uint64_t v12 = swift_bridgeObjectRetain();
    sub_1002B95D8(v12);
    swift_bridgeObjectRelease();

    *id v10 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease();
    char v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Stopping DSK", v15, 2u);
      swift_slowDealloc();
    }

    if (qword_1004536B0 == -1) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
  os_log_type_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "DSK is not running", v18, 2u);
    swift_slowDealloc();
  }
}

Swift::Int sub_1002B86F4()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1002B873C()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1002B8768()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void *sub_1002B87AC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1002B87DC()
{
  if (!*v0) {
    return 0x616873696C41;
  }
  if (*v0 == 1) {
    return 1852799308;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1002B88D8()
{
  return type metadata accessor for DSK();
}

uint64_t type metadata accessor for DSK()
{
  uint64_t result = qword_10045B260;
  if (!qword_10045B260) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002B892C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionChecks()
{
  return &type metadata for SessionChecks;
}

ValueMetadata *type metadata accessor for DSK.Module()
{
  return &type metadata for DSK.Module;
}

unint64_t sub_1002B8A04()
{
  unint64_t result = qword_10045B270;
  if (!qword_10045B270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B270);
  }
  return result;
}

unint64_t sub_1002B8A5C()
{
  unint64_t result = qword_10045B278;
  if (!qword_10045B278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B278);
  }
  return result;
}

unint64_t sub_1002B8AB4()
{
  unint64_t result = qword_10045B280;
  if (!qword_10045B280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B280);
  }
  return result;
}

unint64_t sub_1002B8B0C()
{
  unint64_t result = qword_10045B288;
  if (!qword_10045B288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B288);
  }
  return result;
}

unint64_t sub_1002B8B64()
{
  unint64_t result = qword_10045B290;
  if (!qword_10045B290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B290);
  }
  return result;
}

uint64_t sub_1002B8BB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_1000AA580((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002B8C0C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v50 = a1;
  uint64_t v51 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v52 = v8;
  uint64_t v53 = 0;
  uint64_t v54 = v11 & v9;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1002B8F64(&v48);
  uint64_t v12 = *((void *)&v48 + 1);
  if (!*((void *)&v48 + 1)) {
    goto LABEL_27;
  }
  uint64_t v13 = v48;
  sub_1000761D0(v49, v47);
  os_log_type_t v14 = *(void **)a5;
  unint64_t v16 = sub_1002C0AD0(v13, v12);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v20 = v15;
  if (v14[3] >= v19)
  {
    if (a4)
    {
      if (v15) {
        goto LABEL_12;
      }
    }
    else
    {
      sub_1002CC478();
      if (v20) {
        goto LABEL_12;
      }
    }
LABEL_14:
    unint64_t v24 = *(void **)a5;
    *(void *)(*(void *)a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    unint64_t v25 = (uint64_t *)(v24[6] + 16 * v16);
    uint64_t *v25 = v13;
    v25[1] = v12;
    sub_1000761D0(v47, (_OWORD *)(v24[7] + 32 * v16));
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    _OWORD v24[2] = v28;
LABEL_16:
    sub_1002B8F64(&v48);
    for (uint64_t i = *((void *)&v48 + 1); *((void *)&v48 + 1); uint64_t i = *((void *)&v48 + 1))
    {
      uint64_t v31 = v48;
      sub_1000761D0(v49, v47);
      uint64_t v32 = *(void **)a5;
      unint64_t v34 = sub_1002C0AD0(v31, i);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_28;
      }
      char v38 = v33;
      if (v32[3] < v37)
      {
        sub_1002C3718(v37, 1);
        uint64_t v39 = sub_1002C0AD0(v31, i);
        if ((v38 & 1) != (v40 & 1)) {
          goto LABEL_30;
        }
        unint64_t v34 = v39;
      }
      if (v38)
      {
        sub_1000AA580((uint64_t)v47, (uint64_t)v46);
        sub_10007594C((uint64_t)v47);
        swift_bridgeObjectRelease();
        uint64_t v30 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v34);
        sub_10007594C((uint64_t)v30);
        sub_1000761D0(v46, v30);
      }
      else
      {
        id v41 = *(void **)a5;
        *(void *)(*(void *)a5 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        uint64_t v42 = (uint64_t *)(v41[6] + 16 * v34);
        *uint64_t v42 = v31;
        v42[1] = i;
        sub_1000761D0(v47, (_OWORD *)(v41[7] + 32 * v34));
        uint64_t v43 = v41[2];
        BOOL v27 = __OFADD__(v43, 1);
        uint64_t v44 = v43 + 1;
        if (v27) {
          goto LABEL_29;
        }
        v41[2] = v44;
      }
      sub_1002B8F64(&v48);
    }
LABEL_27:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10008C4F0();
    return swift_release();
  }
  sub_1002C3718(v19, a4 & 1);
  uint64_t v21 = sub_1002C0AD0(v13, v12);
  if ((v20 & 1) == (v22 & 1))
  {
    unint64_t v16 = v21;
    if ((v20 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    sub_1000AA580((uint64_t)v47, (uint64_t)v46);
    sub_10007594C((uint64_t)v47);
    swift_bridgeObjectRelease();
    uint64_t v23 = (_OWORD *)(*(void *)(*(void *)a5 + 56) + 32 * v16);
    sub_10007594C((uint64_t)v23);
    sub_1000761D0(v46, v23);
    goto LABEL_16;
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002B8F64@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_1000AA580(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&long long v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_1002B9510((uint64_t)&v23, (uint64_t)v22);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    _OWORD v21[2] = v22[2];
    v19(v21);
    return sub_1002B9578((uint64_t)v21);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

void sub_1002B9140(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378290;
  strcpy((char *)(inited + 32), "xpcEventName");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1001DB224(inited);
  if (a4 >> 60 != 15)
  {
    sub_10006D0EC(a3, a4);
    sub_10023CDF4(a3, a4);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    unint64_t v15 = a6;
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v16 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v31 = &type metadata for String;
    *(void *)&long long v30 = v16;
    *((void *)&v30 + 1) = v18;
    a6 = v15;
    sub_1000761D0(&v30, v29);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v29, 0xD000000000000010, 0x80000001003B5B90, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    sub_100075868(a3, a4);
  }
  if (a6 >> 60 != 15)
  {
    sub_10006D0EC(a5, a6);
    *(void *)&long long v30 = sub_10023CDF4(a5, a6);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v31 = &type metadata for String;
    *(void *)&long long v30 = v20;
    *((void *)&v30 + 1) = v22;
    sub_1000761D0(&v30, v29);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v29, 0x746E65644979656BLL, 0xED00007265696669, v23);
    swift_bridgeObjectRelease();
    sub_100075868(a5, a6);
  }
  if (a7)
  {
    swift_bridgeObjectRetain();
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v30 = v14;
    sub_1002B8C0C(a7, (uint64_t)sub_1002B8BB8, 0, v24, (uint64_t)&v30);
    unint64_t v14 = v30;
    swift_bridgeObjectRelease();
  }
  id v25 = [self sharedInstance];
  sub_1002BA7F8(v14);
  swift_bridgeObjectRelease();
  v26.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  if (a6 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  [v25 sendEvent:v26.super.isa keyIdentifier:isa a5];
}

uint64_t sub_1002B9510(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10006C51C(&qword_10045A178);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002B9578(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100457258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002B95D8(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v19 = a1 + 56;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v20 = (unint64_t)(v3 + 63) >> 6;
  int64_t v6 = 0;
  uint64_t v18 = swift_bridgeObjectRetain();
  while (v5)
  {
    unint64_t v7 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v8 = v7 | (v6 << 6);
LABEL_22:
    uint64_t v1 = *(void *)(*(void *)(v2 + 48) + 8 * v8);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      if (v1)
      {
        if (v1 != 1) {
          goto LABEL_40;
        }
        unint64_t v15 = 0xE400000000000000;
        uint64_t v16 = 1852799308;
      }
      else
      {
        unint64_t v15 = 0xE600000000000000;
        uint64_t v16 = 0x616873696C41;
      }
      *(void *)(v14 + 4) = sub_100290514(v16, v15, &v21);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Stopping DSK %s", (uint8_t *)v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v2 = v18;
      if (v1 == 1) {
        goto LABEL_26;
      }
LABEL_32:
      if (v1) {
        goto LABEL_39;
      }
      if (qword_100453798 != -1) {
        swift_once();
      }
      sub_1001EAB28();
    }
    else
    {

      if (v1 != 1) {
        goto LABEL_32;
      }
LABEL_26:
      if (qword_100453668 != -1) {
        swift_once();
      }
      sub_10007F568();
    }
  }
  int64_t v9 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v9 >= v20) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v19 + 8 * v9);
  ++v6;
  if (v10) {
    goto LABEL_21;
  }
  int64_t v6 = v9 + 1;
  if (v9 + 1 >= v20) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v19 + 8 * v6);
  if (v10) {
    goto LABEL_21;
  }
  int64_t v6 = v9 + 2;
  if (v9 + 2 >= v20) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v19 + 8 * v6);
  if (v10) {
    goto LABEL_21;
  }
  int64_t v6 = v9 + 3;
  if (v9 + 3 >= v20) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v19 + 8 * v6);
  if (v10)
  {
LABEL_21:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
    goto LABEL_22;
  }
  int64_t v11 = v9 + 4;
  if (v11 >= v20) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v19 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v20) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v19 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_21;
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t v21 = v1;
LABEL_40:
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_1002B996C()
{
  swift_beginAccess();
  *(void *)(v0 + 32) = &_swiftEmptySetSingleton;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002B99C0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002B99F8()
{
  return sub_1002B70F4();
}

uint64_t sub_1002B9A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002B9A2C()
{
  return swift_release();
}

unsigned char *storeEnumTagSinglePayload for DSKError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002B9CF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DSKError()
{
  return &type metadata for DSKError;
}

unint64_t sub_1002B9D2C()
{
  unint64_t result = qword_10045B298;
  if (!qword_10045B298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045B298);
  }
  return result;
}

uint64_t sub_1002B9D80(uint64_t a1, uint64_t a2)
{
  int v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

void *sub_1002B9DD0(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  return sub_1002BA1D8(a1, a2, a3);
}

void *sub_1002B9DE8(uint64_t (*a1)(uint64_t *), void *a2, unint64_t a3)
{
  unint64_t v5 = a3;
  uint64_t v18 = _swiftEmptyArrayStorage;
  if (a3 >> 62)
  {
LABEL_18:
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = 0;
      uint64_t v15 = v5 & 0xFFFFFFFFFFFFFF8;
      unint64_t v16 = v5 & 0xC000000000000001;
      unint64_t v14 = v5;
      while (1)
      {
        if (v16)
        {
          uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
LABEL_14:
            __break(1u);
LABEL_15:
            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            return v3;
          }
        }
        else
        {
          if (v9 >= *(void *)(v15 + 16))
          {
            __break(1u);
            goto LABEL_18;
          }
          uint64_t v10 = *(void *)(v5 + 8 * v9 + 32);
          swift_retain();
          unint64_t v11 = v9 + 1;
          if (__OFADD__(v9, 1)) {
            goto LABEL_14;
          }
        }
        uint64_t v17 = v10;
        int v3 = a2;
        char v12 = a1(&v17);
        if (v4) {
          goto LABEL_15;
        }
        if (v12)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v5 = v14;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          int v3 = &v18;
          specialized ContiguousArray._endMutation()();
        }
        else
        {
          swift_release();
        }
        ++v9;
        if (v11 == v8)
        {
          int v3 = v18;
          goto LABEL_20;
        }
      }
    }
  }
  int v3 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1002B9FA4(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for PresentmentInfo();
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7 - 8, v8);
  uint64_t v25 = (uint64_t)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9, v11);
  unint64_t v14 = (char *)v22 - v13;
  uint64_t v15 = _swiftEmptyArrayStorage;
  BOOL v27 = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a3 + 16);
  if (v24)
  {
    unint64_t v16 = 0;
    uint64_t v17 = _swiftEmptyArrayStorage;
    v22[1] = a2;
    uint64_t v23 = a3;
    v22[0] = a1;
    while (v16 < *(void *)(a3 + 16))
    {
      unint64_t v18 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v15 = *(void **)(v26 + 72);
      sub_10011FBA8(a3 + v18 + (void)v15 * v16, (uint64_t)v14);
      char v19 = a1(v14);
      if (v3)
      {
        sub_10011FDDC((uint64_t)v14);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v15;
      }
      if (v19)
      {
        sub_10011FD08((uint64_t)v14, v25);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1002CFC80(0, v17[2] + 1, 1);
        }
        uint64_t v17 = v27;
        unint64_t v21 = v27[2];
        unint64_t v20 = v27[3];
        if (v21 >= v20 >> 1)
        {
          sub_1002CFC80(v20 > 1, v21 + 1, 1);
          uint64_t v17 = v27;
        }
        v17[2] = v21 + 1;
        uint64_t result = sub_10011FD08(v25, (uint64_t)v17 + v18 + v21 * (void)v15);
        a3 = v23;
        a1 = (uint64_t (*)(char *))v22[0];
      }
      else
      {
        uint64_t result = sub_10011FDDC((uint64_t)v14);
      }
      if (v24 == ++v16)
      {
        uint64_t v15 = v27;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  return result;
}

void *sub_1002BA1D8(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  unint64_t v4 = a3;
  char v19 = _swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        char v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          char v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  char v12 = _swiftEmptyArrayStorage;
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1002BA384(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for DSKBLE.BLEPeripheral();
    sub_1002D2CFC(&qword_100455648, (void (*)(uint64_t))type metadata accessor for DSKBLE.BLEPeripheral);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v25;
    uint64_t v24 = v26;
    uint64_t v8 = v27;
    int64_t v9 = v28;
    unint64_t v10 = v29;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v24 = a3 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a3 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    int64_t v9 = 0;
  }
  int64_t v23 = (unint64_t)(v8 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    type metadata accessor for DSKBLE.BLEPeripheral();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = v30;
    swift_unknownObjectRelease();
    int64_t v16 = v9;
    uint64_t v17 = v10;
    while (v15)
    {
      uint64_t v30 = v15;
      char v21 = a1(&v30);
      if (v4)
      {
        swift_release();
LABEL_36:
        sub_10008C4F0();
        return v15;
      }
      if (v21) {
        goto LABEL_36;
      }
      uint64_t result = swift_release();
      int64_t v9 = v16;
      unint64_t v10 = v17;
      if (v5 < 0) {
        goto LABEL_8;
      }
LABEL_11:
      if (v10)
      {
        uint64_t v17 = (v10 - 1) & v10;
        unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
        int64_t v16 = v9;
      }
      else
      {
        int64_t v16 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          return result;
        }
        if (v16 >= v23) {
          break;
        }
        unint64_t v19 = *(void *)(v24 + 8 * v16);
        if (!v19)
        {
          int64_t v20 = v9 + 2;
          if (v9 + 2 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 3;
          if (v9 + 3 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19) {
            goto LABEL_22;
          }
          int64_t v20 = v9 + 4;
          if (v9 + 4 >= v23) {
            break;
          }
          unint64_t v19 = *(void *)(v24 + 8 * v20);
          if (v19)
          {
LABEL_22:
            int64_t v16 = v20;
          }
          else
          {
            int64_t v16 = v9 + 5;
            if (v9 + 5 >= v23) {
              break;
            }
            unint64_t v19 = *(void *)(v24 + 8 * v16);
            if (!v19)
            {
              int64_t v22 = v9 + 6;
              while (v23 != v22)
              {
                unint64_t v19 = *(void *)(v24 + 8 * v22++);
                if (v19)
                {
                  int64_t v16 = v22 - 1;
                  goto LABEL_23;
                }
              }
              break;
            }
          }
        }
LABEL_23:
        uint64_t v17 = (v19 - 1) & v19;
        unint64_t v18 = __clz(__rbit64(v19)) + (v16 << 6);
      }
      uint64_t v15 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      swift_retain();
    }
  }
  sub_10008C4F0();
  return 0;
}

uint64_t sub_1002BA6BC(uint64_t (*a1)(uint64_t *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      uint64_t v7 = 4;
      do
      {
        uint64_t v8 = v7 - 4;
        if ((a3 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10) {
            goto LABEL_16;
          }
        }
        else
        {
          uint64_t v9 = *(void *)(a3 + 8 * v7);
          swift_retain();
          BOOL v10 = __OFADD__(v8, 1);
          uint64_t v11 = v7 - 3;
          if (v10)
          {
LABEL_16:
            __break(1u);
            goto LABEL_17;
          }
        }
        uint64_t v14 = v9;
        char v12 = a1(&v14);
        if (v3)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return v9;
        }
        if (v12)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
        swift_release();
        ++v7;
      }
      while (v11 != v6);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1002BA7F8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C((uint64_t *)&unk_10045B570);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000761D0(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000761D0(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000761D0(v36, v37);
    sub_1000761D0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000761D0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002BABC0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C((uint64_t *)&unk_10045B570);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000761D0(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000761D0(v35, v36);
    sub_1000761D0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000761D0(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002BAF80(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C((uint64_t *)&unk_10045B570);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (void *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v18 = v17[1];
    *(void *)&v36[0] = *v17;
    *((void *)&v36[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000761D0(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000761D0(v35, v36);
    sub_1000761D0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000761D0(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002BB32C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C((uint64_t *)&unk_10045B570);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_10023CB9C(*(void *)(a1 + 56) + 40 * v12, (uint64_t)v46);
    uint64_t v44 = v19;
    uint64_t v45 = v18;
    long long v41 = v46[0];
    long long v42 = v46[1];
    uint64_t v43 = v47;
    uint64_t v31 = v19;
    uint64_t v32 = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    v29[0] = v41;
    v29[1] = v42;
    uint64_t v30 = v43;
    swift_dynamicCast();
    long long v37 = v33;
    long long v38 = v34;
    uint64_t v39 = v35;
    sub_1000761D0(&v36, v40);
    long long v33 = v37;
    long long v34 = v38;
    uint64_t v35 = v39;
    sub_1000761D0(v40, v29);
    sub_1000761D0(v29, &v37);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v33;
    *(_OWORD *)(v10 + 16) = v34;
    *(void *)(v10 + 32) = v35;
    uint64_t result = (uint64_t)sub_1000761D0(&v37, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002BB714(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C((uint64_t *)&unk_10045B570);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = *(void **)(*(void *)(a1 + 48) + 8 * v12);
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(void *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    uint64_t v38 = v40;
    *(void *)&v36[0] = v17;
    type metadata accessor for CFString(0);
    id v18 = v17;
    swift_dynamicCast();
    sub_1000761D0((_OWORD *)((char *)v37 + 8), v31);
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_1000761D0(v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_1000761D0(v35, v36);
    sub_1000761D0(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(void *)(v10 + 32) = v30;
    uint64_t result = (uint64_t)sub_1000761D0(&v32, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v26) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002BBADC(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10006C51C((uint64_t *)&unk_10045B570);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    _OWORD v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000761D0(v38, v37);
    sub_10006C51C(&qword_10045B748);
    swift_dynamicCast();
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000761D0(&v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000761D0(v36, v37);
    sub_1000761D0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000761D0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_10008C4F0();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_1002BBED4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1002BBFA4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1002BC084()
{
  return Hasher._finalize()();
}

uint64_t sub_1002BC11C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  int64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  int64_t v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (v14)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v29 = v2;
      v31[0] = v20;
      uint64_t v28 = a1;
      *(_DWORD *)uint64_t v19 = 136315138;
      sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v30 = sub_100290514(v21, v22, v31);
      a1 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Removing connection %s", v19, 0xCu);
      swift_arrayDestroy();
      uint64_t v2 = v29;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    char v23 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
    uint64_t v24 = swift_beginAccess();
    unint64_t v25 = *v23;
    __chkstk_darwin(v24, v26);
    *(&v27 - 2) = a1;
    swift_bridgeObjectRetain();
    unint64_t *v23 = (unint64_t)sub_1002B9DE8((uint64_t (*)(uint64_t *))sub_1002C04E4, &v27 - 4, v25);
    swift_bridgeObjectRelease();
    return sub_1002BED08();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002BC524(uint8_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  unint64_t v49 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  int64_t v16 = (uint8_t **)((char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_100468A38;
  *int64_t v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = v17;
  char v19 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v20 = v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
  uint64_t v21 = *(void (**)(char *, uint8_t *, uint64_t))(v5 + 16);
  uint64_t v50 = a1;
  long long v48 = v21;
  v21(v11, a1, v4);
  uint64_t v47 = v20;
  uint64_t v22 = v5;
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    v52[0] = swift_slowAlloc();
    uint64_t v46 = v2;
    *(_DWORD *)unint64_t v25 = 136315138;
    uint64_t v45 = v25 + 4;
    sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v51[1] = sub_100290514(v26, v27, v52);
    uint64_t v2 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v4);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Adding connection %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v4);
  }
  uint64_t v28 = v22;
  uint64_t v29 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  uint64_t v30 = swift_beginAccess();
  unint64_t v31 = *v29;
  __chkstk_darwin(v30, v32);
  long long v33 = v50;
  *(&v45 - 2) = v50;
  swift_bridgeObjectRetain();
  char v34 = sub_100140DE4((uint64_t (*)(uint64_t *))sub_1002D2DB4, (uint64_t)(&v45 - 4), v31);
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    uint64_t v38 = v49;
    v48(v49, v33, v4);
    type metadata accessor for DSKBLEConnectionPriority.Connection(0);
    uint64_t v39 = swift_allocObject();
    *(unsigned char *)(v39
             + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) = 1;
    *(unsigned char *)(v39
             + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v39+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier, v38, v4);
    uint64_t v40 = swift_beginAccess();
    v51[0] = v39;
    unint64_t v41 = *v29;
    __chkstk_darwin(v40, v42);
    *(&v45 - 2) = (uint8_t *)v51;
    swift_bridgeObjectRetain();
    unint64_t v43 = (unint64_t)sub_1002B9DE8((uint64_t (*)(uint64_t *))sub_1002D1DDC, &v45 - 4, v41);
    swift_bridgeObjectRelease();
    *uint64_t v29 = v43;
    uint64_t v12 = v51[0];
    if (!(v43 >> 62))
    {
      swift_retain();
      goto LABEL_13;
    }
LABEL_15:
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v44 < 0)
    {
      __break(1u);
      return;
    }
LABEL_13:
    sub_1002C0584(0, 0, v12);
    swift_endAccess();
    swift_release();
    sub_1002BED08();
    return;
  }
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    long long v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Connection already exists", v37, 2u);
    swift_slowDealloc();
  }
}

void sub_1002BCB40(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v60 = a2;
  uint64_t v61 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  char v19 = (uint64_t *)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_100468A38;
  *char v19 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v15);
  id v21 = (id)v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v19, v15);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    goto LABEL_13;
  }
  uint64_t v22 = v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
  char v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v55 = v7 + 16;
  uint64_t v56 = v11;
  uint64_t v54 = v23;
  v23(v14, v61, v6);
  swift_bridgeObjectRetain_n();
  uint64_t v59 = v22;
  os_log_type_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v57 = v7;
  uint64_t v58 = v6;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v53 = v4;
    v63[0] = v52;
    *(_DWORD *)uint64_t v27 = 136315394;
    sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = sub_100290514(v28, v29, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v30 = v60;
    uint64_t v62 = sub_100290514(v60, a3, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Adding high priority request for connection %s client %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    uint64_t v4 = v53;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    swift_bridgeObjectRelease_n();
    uint64_t v30 = v60;
  }
  unint64_t v31 = (unint64_t *)(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
  uint64_t v32 = swift_beginAccess();
  unint64_t v33 = *v31;
  __chkstk_darwin(v32, v34);
  *(&v51 - 4) = v61;
  *(&v51 - 3) = v30;
  *(&v51 - 2) = a3;
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_1002BA6BC(sub_1002D2CB4, (uint64_t)(&v51 - 6), v33);
  swift_bridgeObjectRelease();
  if (v35)
  {
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Request already exists", v38, 2u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    sub_1002BFBAC(v35);
    swift_endAccess();
    goto LABEL_11;
  }
  uint64_t v39 = v56;
  uint64_t v40 = v58;
  v54(v56, v61, v58);
  type metadata accessor for DSKBLEConnectionPriority.HighPriorityRequest(0);
  uint64_t v41 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v41+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier, v39, v40);
  uint64_t v42 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
  *uint64_t v42 = v30;
  v42[1] = a3;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_21;
  }
LABEL_13:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  unint64_t v43 = (unint64_t *)(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  uint64_t v44 = swift_beginAccess();
  unint64_t v45 = *v43;
  __chkstk_darwin(v44, v46);
  *(&v51 - 2) = v61;
  swift_bridgeObjectRetain();
  uint64_t v47 = sub_1002BA6BC((uint64_t (*)(uint64_t *))sub_1002D2DB4, (uint64_t)(&v51 - 4), v45);
  swift_bridgeObjectRelease();
  if (v47)
  {
    if ((*(unsigned char *)(v47
                   + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) & 1) == 0)
    {
      sub_1002BED08();
LABEL_11:
      swift_release();
      return;
    }
    swift_release();
  }
  long long v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Connection does not exist or priority is already HIGH", v50, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1002BD288(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if (v18)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v37, v6);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    unint64_t v21 = a3;
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v35 = v4;
      uint64_t v24 = v23;
      uint64_t v34 = swift_slowAlloc();
      v39[0] = v34;
      *(_DWORD *)uint64_t v24 = 136315394;
      sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_100290514(v25, v26, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      *(_WORD *)(v24 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v27 = v36;
      uint64_t v38 = sub_100290514(v36, v21, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "Removing high priority request for connection %s client %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v4 = v35;
      swift_slowDealloc();

      unint64_t v28 = v21;
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      swift_bridgeObjectRelease_n();
      unint64_t v28 = v21;
      uint64_t v27 = v36;
    }
    unint64_t v29 = (unint64_t *)(v4 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    uint64_t v30 = swift_beginAccess();
    unint64_t v31 = *v29;
    __chkstk_darwin(v30, v32);
    *(&v33 - 4) = v37;
    *(&v33 - 3) = v27;
    *(&v33 - 2) = v28;
    swift_bridgeObjectRetain();
    *unint64_t v29 = (unint64_t)sub_1002B9DE8(sub_1002D2C90, &v33 - 6, v31);
    swift_bridgeObjectRelease();
    return sub_1002BED08();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1002BD708(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (v14)
  {
    uint64_t v16 = v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    id v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      char v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v43 = a1;
      v47[0] = v20;
      uint64_t v44 = v2;
      *(_DWORD *)char v19 = 136315138;
      v42[0] = v19 + 4;
      v42[1] = v16;
      sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      v46[0] = sub_100290514(v21, v22, v47);
      uint64_t v2 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Setting low priority for connection %s", v19, 0xCu);
      swift_arrayDestroy();
      a1 = v43;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    uint64_t v23 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    uint64_t v24 = swift_beginAccess();
    unint64_t v25 = *v23;
    __chkstk_darwin(v24, v26);
    v42[-2] = a1;
    swift_bridgeObjectRetain();
    uint64_t v27 = sub_1002BA6BC((uint64_t (*)(uint64_t *))sub_1002D2C10, (uint64_t)&v42[-4], v25);
    swift_bridgeObjectRelease();
    if (v27)
    {
      swift_retain();
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        v46[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v31 = *(void *)(v27
                        + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
        unint64_t v32 = *(void *)(v27
                        + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                        + 8);
        swift_bridgeObjectRetain();
        uint64_t v45 = sub_100290514(v31, v32, v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Can't set priority to LOW because HIGH priority is requested by client %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
        return;
      }
      swift_release_n();
    }
    else
    {
      uint64_t v33 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
      uint64_t v34 = swift_beginAccess();
      unint64_t v35 = *v33;
      __chkstk_darwin(v34, v36);
      v42[-2] = a1;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_1002BA6BC((uint64_t (*)(uint64_t *))sub_1002D2C50, (uint64_t)&v42[-4], v35);
      swift_bridgeObjectRelease();
      if (v37)
      {
        *(unsigned char *)(v37
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 0;
        if (*(unsigned char *)(v37
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) == 1)
        {
          sub_1002BED08();
          swift_release();
          return;
        }
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v28, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v40, "Connection priority already LOW", v41, 2u);
          swift_slowDealloc();
        }
        swift_release();
      }
      else
      {
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v28, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v38, "Connection does not exist", v39, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1002BDDDC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (void *)((char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v14 = qword_100468A38;
  void *v13 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  id v15 = (id)v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
  if (v14)
  {
    uint64_t v16 = v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
    id v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v40 = a1;
    v17(v8, a1, v4);
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v38[1] = v16;
      v42[0] = v21;
      uint64_t v39 = v2;
      *(_DWORD *)uint64_t v20 = 136315138;
      sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      v41[1] = sub_100290514(v22, v23, v42);
      uint64_t v2 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Setting high priority for connection %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    uint64_t v24 = (unint64_t *)(v2 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
    uint64_t v25 = swift_beginAccess();
    unint64_t v26 = *v24;
    __chkstk_darwin(v25, v27);
    v38[-2] = v40;
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1002BA6BC((uint64_t (*)(uint64_t *))sub_1002D2DB4, (uint64_t)&v38[-4], v26);
    swift_bridgeObjectRelease();
    if (!v4)
    {
      unint64_t v32 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v32, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v35, "Connection does not exist", v36, 2u);
        swift_slowDealloc();
      }
      goto LABEL_16;
    }
    *(unsigned char *)(v4
             + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 1;
    uint64_t v28 = swift_beginAccess();
    v41[0] = v4;
    unint64_t v29 = *v24;
    __chkstk_darwin(v28, v30);
    v38[-2] = v41;
    swift_bridgeObjectRetain();
    unint64_t v31 = (unint64_t)sub_1002B9DE8((uint64_t (*)(uint64_t *))sub_1002D1DDC, &v38[-4], v29);
    swift_bridgeObjectRelease();
    *uint64_t v24 = v31;
    uint64_t v5 = v41[0];
    if (!(v31 >> 62))
    {
      swift_retain();
      goto LABEL_10;
    }
  }
  else
  {
    __break(1u);
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v37 < 0)
  {
    __break(1u);
    return;
  }
LABEL_10:
  sub_1002C0584(0, 0, v5);
  swift_endAccess();
  if ((*(unsigned char *)(v4
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent) & 1) != 0)
  {
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Connection priority already HIGH", v34, 2u);
      swift_slowDealloc();
    }
    swift_release();
LABEL_16:

    return;
  }
  sub_1002BED08();
  swift_release();
}

uint64_t sub_1002BE3EC()
{
  type metadata accessor for DSKBLEConnectionPriority(0);
  swift_allocObject();
  uint64_t result = sub_1002BE42C();
  qword_100468A50 = result;
  return result;
}

uint64_t sub_1002BE42C()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections) = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 32) = 0;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_numHighPrioritySlots) = 2;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests) = _swiftEmptyArrayStorage;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v4[4] = sub_1002D1E00;
  v4[5] = v0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 1107296256;
  v4[2] = sub_1002B9D80;
  v4[3] = &unk_100419158;
  uint64_t v2 = _Block_copy(v4);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v2);
  return v0;
}

uint64_t sub_1002BE5A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)((char *)v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if ((unint64_t)*v2 >> 62) {
    goto LABEL_47;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    if (v4)
    {
      *(void *)&long long v62 = _swiftEmptyArrayStorage;
      uint64_t result = sub_1002CFA20(0, v4 & ~(v4 >> 63), 0);
      if (v4 < 0)
      {
        __break(1u);
LABEL_52:
        __break(1u);
        return result;
      }
      uint64_t v58 = v1;
      uint64_t v6 = 0;
      unint64_t v59 = v3 & 0xC000000000000001;
      uint64_t v7 = v3;
      do
      {
        if (v59)
        {
          uint64_t v8 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v8 = *(void *)(v3 + 8 * v6 + 32);
          swift_retain();
        }
        sub_10006C51C(&qword_1004587F0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_100378470;
        *(void *)(inited + 32) = 0x696669746E656469;
        *(void *)(inited + 40) = 0xEA00000000007265;
        *(void *)(inited + 48) = UUID.uuidString.getter();
        *(void *)(inited + 56) = v10;
        *(void *)(inited + 64) = 0xD000000000000010;
        *(void *)(inited + 72) = 0x80000001003BCEF0;
        if (*(unsigned char *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent))
          uint64_t v11 = 1751607656;
        else {
          uint64_t v11 = 7827308;
        }
        if (*(unsigned char *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityCurrent))
          unint64_t v12 = 0xE400000000000000;
        else {
          unint64_t v12 = 0xE300000000000000;
        }
        *(void *)(inited + 80) = v11;
        *(void *)(inited + 88) = v12;
        *(void *)(inited + 96) = 0x70206465746E6177;
        *(void *)(inited + 104) = 0xEF797469726F6972;
        if (*(unsigned char *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted))
          uint64_t v13 = 1751607656;
        else {
          uint64_t v13 = 7827308;
        }
        if (*(unsigned char *)(v8
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted))
          unint64_t v14 = 0xE400000000000000;
        else {
          unint64_t v14 = 0xE300000000000000;
        }
        *(void *)(inited + 112) = v13;
        *(void *)(inited + 120) = v14;
        unint64_t v15 = sub_1001DB39C(inited);
        swift_release();
        uint64_t v16 = (void *)v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFA20(0, v16[2] + 1, 1);
          uint64_t v16 = (void *)v62;
        }
        unint64_t v18 = v16[2];
        unint64_t v17 = v16[3];
        if (v18 >= v17 >> 1)
        {
          sub_1002CFA20(v17 > 1, v18 + 1, 1);
          uint64_t v16 = (void *)v62;
        }
        ++v6;
        v16[2] = v18 + 1;
        v16[v18 + 4] = v15;
        uint64_t v3 = v7;
      }
      while (v4 != v6);
      swift_bridgeObjectRelease();
      uint64_t v1 = v58;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = _swiftEmptyArrayStorage;
    }
    uint64_t v19 = sub_10006C51C((uint64_t *)&unk_100455780);
    uint64_t v63 = v19;
    *(void *)&long long v62 = v16;
    sub_1000761D0(&v62, v61);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v61, 0x697463656E6E6F63, 0xEB00000000736E6FLL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v21 = (void *)((char *)v1 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    swift_beginAccess();
    uint64_t v22 = *v21;
    if ((unint64_t)*v21 >> 62) {
      break;
    }
    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v23) {
      goto LABEL_49;
    }
LABEL_30:
    *(void *)&long long v62 = _swiftEmptyArrayStorage;
    uint64_t result = sub_1002CFA20(0, v23 & ~(v23 >> 63), 0);
    if (v23 < 0) {
      goto LABEL_52;
    }
    uint64_t v55 = v19;
    unint64_t v60 = v22 & 0xC000000000000001;
    sub_10006C51C(&qword_100455770);
    uint64_t v3 = 0;
    uint64_t v56 = v23;
    uint64_t v57 = v22;
    while (1)
    {
      if (v60)
      {
        uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v24 = *(void *)(v22 + 8 * v3 + 32);
        swift_retain();
      }
      sub_10006C51C(&qword_1004587F0);
      uint64_t v25 = swift_initStackObject();
      *(_OWORD *)(v25 + 16) = xmmword_1003782A0;
      *(void *)(v25 + 32) = 0x696669746E656469;
      *(void *)(v25 + 40) = 0xEA00000000007265;
      *(void *)(v25 + 48) = UUID.uuidString.getter();
      *(void *)(v25 + 56) = v26;
      *(void *)(v25 + 64) = 0x746E65696C63;
      *(void *)(v25 + 72) = 0xE600000000000000;
      uint64_t v1 = *(void **)(v24
                      + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                      + 8);
      *(void *)(v25 + 80) = *(void *)(v24
                                        + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client);
      *(void *)(v25 + 88) = v1;
      uint64_t v27 = (void *)static _DictionaryStorage.allocate(capacity:)();
      uint64_t v29 = *(void *)(v25 + 32);
      uint64_t v28 = *(void *)(v25 + 40);
      uint64_t v31 = *(void *)(v25 + 48);
      uint64_t v30 = *(void *)(v25 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v32 = sub_1002C0BD8(v29, v28, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
      if (v33) {
        break;
      }
      uint64_t v1 = v27 + 8;
      *(void *)((char *)v27 + ((v32 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v32;
      uint64_t v34 = (uint64_t *)(v27[6] + 16 * v32);
      *uint64_t v34 = v29;
      v34[1] = v28;
      os_log_type_t v35 = (void *)(v27[7] + 16 * v32);
      *os_log_type_t v35 = v31;
      v35[1] = v30;
      uint64_t v36 = v27[2];
      BOOL v37 = __OFADD__(v36, 1);
      uint64_t v38 = v36 + 1;
      if (v37) {
        goto LABEL_46;
      }
      _OWORD v27[2] = v38;
      uint64_t v39 = *(void *)(v25 + 64);
      uint64_t v40 = *(void *)(v25 + 72);
      uint64_t v42 = *(void *)(v25 + 80);
      uint64_t v41 = *(void *)(v25 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v43 = sub_1002C0BD8(v39, v40, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
      if (v44) {
        break;
      }
      *(void *)((char *)v1 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
      uint64_t v45 = (uint64_t *)(v27[6] + 16 * v43);
      *uint64_t v45 = v39;
      v45[1] = v40;
      uint64_t v46 = (void *)(v27[7] + 16 * v43);
      *uint64_t v46 = v42;
      v46[1] = v41;
      uint64_t v47 = v27[2];
      BOOL v37 = __OFADD__(v47, 1);
      uint64_t v48 = v47 + 1;
      if (v37) {
        goto LABEL_46;
      }
      _OWORD v27[2] = v48;
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      os_log_type_t v49 = (void *)v62;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CFA20(0, v49[2] + 1, 1);
        os_log_type_t v49 = (void *)v62;
      }
      uint64_t v22 = v57;
      unint64_t v51 = v49[2];
      unint64_t v50 = v49[3];
      if (v51 >= v50 >> 1)
      {
        sub_1002CFA20(v50 > 1, v51 + 1, 1);
        os_log_type_t v49 = (void *)v62;
      }
      ++v3;
      _OWORD v49[2] = v51 + 1;
      v49[v51 + 4] = v27;
      if (v56 == v3)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = v55;
        goto LABEL_50;
      }
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  if (v23) {
    goto LABEL_30;
  }
LABEL_49:
  swift_bridgeObjectRelease();
  os_log_type_t v49 = _swiftEmptyArrayStorage;
LABEL_50:
  uint64_t v63 = v19;
  *(void *)&long long v62 = v49;
  sub_1000761D0(&v62, v61);
  char v52 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v61, 0xD000000000000016, 0x80000001003BCF10, v52);
  swift_bridgeObjectRelease();
  sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v54 = sub_1000190DC((uint64_t)"dskbleconnectionpriority.state", (uint64_t)isa);

  return (uint64_t)v54;
}

uint64_t sub_1002BED08()
{
  uint64_t v72 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v64 = *(void *)(v72 - 8);
  __chkstk_darwin(v72, v1);
  uint64_t v71 = (char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchQoS();
  uint64_t v63 = *(void *)(v70 - 8);
  __chkstk_darwin(v70, v3);
  uint64_t v69 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  unint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453928 != -1) {
LABEL_68:
  }
    swift_once();
  uint64_t v10 = (void *)qword_100468A38;
  *(void *)uint64_t v9 = qword_100468A38;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  uint64_t v12 = _dispatchPreconditionTest(_:)();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v6 += 8;
  v13(v9, v5);
  if (v12)
  {
    unint64_t v14 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_requests);
    swift_beginAccess();
    uint64_t v12 = *v14;
    if (!((unint64_t)*v14 >> 62))
    {
      uint64_t v5 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain_n();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
LABEL_5:
  id v75 = v0;
  uint64_t v67 = (uint64_t (**)(uint64_t))v12;
  if (v5)
  {
    uint64_t v0 = (uint64_t *)((char *)v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
    unint64_t v74 = v12 & 0xC000000000000001;
    swift_beginAccess();
    uint64_t v15 = 0;
    uint64_t v68 = 0;
    uint64_t v66 = (void (**)(char *, uint64_t))(v12 + 32);
    unint64_t v73 = v5;
    while (1)
    {
      if (v74)
      {
        uint64_t v16 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v17 = __OFADD__(v15++, 1);
        if (v17)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
      }
      else
      {
        uint64_t v16 = (uint64_t)v66[v15];
        swift_retain();
        BOOL v17 = __OFADD__(v15++, 1);
        if (v17) {
          goto LABEL_67;
        }
      }
      uint64_t v5 = *v0;
      if ((unint64_t)*v0 >> 62)
      {
        swift_bridgeObjectRetain_n();
        unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6) {
          goto LABEL_7;
        }
      }
      else
      {
        unint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n();
        if (!v6) {
          goto LABEL_7;
        }
      }
      if ((v5 & 0xC000000000000001) != 0)
      {
        uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v18 = *(void *)(v5 + 32);
        swift_retain();
      }
      uint64_t v9 = v16
         + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier;
      if ((static UUID.== infix(_:_:)() & 1) == 0)
      {
        swift_release();
        if (v6 != 1)
        {
          uint64_t v24 = 5;
          do
          {
            uint64_t v25 = v24 - 4;
            if ((v5 & 0xC000000000000001) != 0)
            {
              uint64_t v18 = specialized _ArrayBuffer._getElementSlowPath(_:)();
              BOOL v17 = __OFADD__(v25, 1);
              uint64_t v26 = v24 - 3;
              if (v17) {
                goto LABEL_66;
              }
            }
            else
            {
              uint64_t v18 = *(void *)(v5 + 8 * v24);
              swift_retain();
              BOOL v17 = __OFADD__(v25, 1);
              uint64_t v26 = v24 - 3;
              if (v17)
              {
LABEL_66:
                __break(1u);
                goto LABEL_67;
              }
            }
            if (static UUID.== infix(_:_:)()) {
              goto LABEL_19;
            }
            swift_release();
            ++v24;
          }
          while (v26 != v6);
        }
LABEL_7:
        swift_bridgeObjectRelease_n();
        goto LABEL_8;
      }
LABEL_19:
      swift_bridgeObjectRelease_n();
      *(unsigned char *)(v18
               + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) = 1;
      uint64_t v19 = swift_beginAccess();
      uint64_t v9 = (uint64_t)&v61;
      uint64_t v83 = v18;
      unint64_t v20 = *v0;
      __chkstk_darwin(v19, v21);
      *(&v61 - 2) = (uint64_t)&v83;
      swift_bridgeObjectRetain();
      uint64_t v22 = v68;
      unint64_t v6 = (unint64_t)sub_1002B9DE8((uint64_t (*)(uint64_t *))sub_1002D1DDC, &v61 - 4, v20);
      uint64_t v68 = v22;
      swift_bridgeObjectRelease();
      *uint64_t v0 = v6;
      uint64_t v23 = v83;
      if (v6 >> 62)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 < 0)
        {
          __break(1u);
          break;
        }
      }
      else
      {
        swift_retain();
      }
      sub_1002C0584(0, 0, v23);
      swift_endAccess();
      swift_release();
LABEL_8:
      swift_release();
      uint64_t v5 = v73;
      if (v15 == v73) {
        goto LABEL_38;
      }
    }
  }
  uint64_t v68 = 0;
LABEL_38:
  swift_bridgeObjectRelease_n();
  unint64_t v84 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v27 = (uint64_t *)((char *)v75 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_connections);
  swift_beginAccess();
  long long v62 = v27;
  uint64_t v28 = *v27;
  uint64_t v29 = &dword_10045B000;
  if ((unint64_t)*v27 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v30 = result;
    if (result) {
      goto LABEL_40;
    }
LABEL_72:
    swift_bridgeObjectRelease_n();
    unint64_t v44 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
      goto LABEL_73;
    }
LABEL_57:
    uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain_n();
    if (v45) {
      goto LABEL_58;
    }
LABEL_74:
    swift_bridgeObjectRelease_n();
    uint64_t v57 = *v62;
    if ((unint64_t)*v62 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v58 = result;
      if (result) {
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v58 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain_n();
      if (v58)
      {
LABEL_76:
        if (v58 < 1) {
          goto LABEL_86;
        }
        uint64_t v59 = 0;
        do
        {
          if ((v57 & 0xC000000000000001) != 0)
          {
            uint64_t v60 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v60 = *(void *)(v57 + 8 * v59 + 32);
            swift_retain();
          }
          ++v59;
          uint64_t aBlock = (void **)v60;
          sub_1002BFDE8();
          swift_release();
        }
        while (v58 != v59);
      }
    }
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  uint64_t v30 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain_n();
  if (!v30) {
    goto LABEL_72;
  }
LABEL_40:
  if (v30 < 1)
  {
    __break(1u);
    goto LABEL_85;
  }
  uint64_t v32 = 0;
  unint64_t v33 = v28 & 0xC000000000000001;
  uint64_t v67 = &v79;
  uint64_t v66 = (void (**)(char *, uint64_t))(v64 + 8);
  unint64_t v65 = (void (**)(char *, uint64_t))(v63 + 8);
  unint64_t v73 = v28 & 0xC000000000000001;
  uint64_t v34 = v69;
  uint64_t v35 = v72;
  do
  {
    if (v33)
    {
      uint64_t v36 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v36 = *(void *)(v28 + 8 * v32 + 32);
      swift_retain();
    }
    if (v84 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v43 > 1)
      {
LABEL_52:
        uint64_t v37 = *((void *)v29 + 116);
        if (*(unsigned char *)(v36 + v37))
        {
          *(unsigned char *)(v36 + v37) = 0;
          unint64_t v74 = qword_100468A38;
          uint64_t v38 = swift_allocObject();
          *(void *)(v38 + 16) = v75;
          *(void *)(v38 + 24) = v36;
          uint64_t v81 = sub_1002C0554;
          uint64_t v82 = v38;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v78 = 1107296256;
          uint64_t v79 = sub_10007C0C4;
          uint64_t v80 = &unk_100419130;
          uint64_t v39 = _Block_copy(&aBlock);
          swift_retain();
          swift_retain();
          static DispatchQoS.unspecified.getter();
          uint64_t v76 = _swiftEmptyArrayStorage;
          sub_1002D2CFC((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10006C51C((uint64_t *)&unk_100455710);
          sub_10006D1C4();
          uint64_t v40 = v71;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          uint64_t v41 = v39;
          uint64_t v29 = &dword_10045B000;
          _Block_release(v41);
          uint64_t v42 = v40;
          unint64_t v33 = v73;
          (*v66)(v42, v35);
          (*v65)(v34, v70);
          swift_release();
        }
        goto LABEL_45;
      }
    }
    else if (*(uint64_t *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) > 1)
    {
      goto LABEL_52;
    }
    if ((*(unsigned char *)(v36
                   + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_isHighPriorityWanted) & 1) == 0)
      goto LABEL_52;
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
LABEL_45:
    swift_release();
    ++v32;
  }
  while (v30 != v32);
  swift_bridgeObjectRelease_n();
  unint64_t v44 = v84;
  if (!(v84 >> 62)) {
    goto LABEL_57;
  }
LABEL_73:
  swift_bridgeObjectRetain_n();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v45 = result;
  if (!result) {
    goto LABEL_74;
  }
LABEL_58:
  if (v45 >= 1)
  {
    uint64_t v46 = 0;
    unint64_t v47 = v44 & 0xC000000000000001;
    uint64_t v67 = &v79;
    uint64_t v66 = (void (**)(char *, uint64_t))(v64 + 8);
    unint64_t v65 = (void (**)(char *, uint64_t))(v63 + 8);
    unint64_t v74 = v45;
    unint64_t v73 = v44;
    uint64_t v48 = v69;
    os_log_type_t v49 = v71;
    uint64_t v50 = v72;
    do
    {
      if (v47)
      {
        uint64_t v51 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v51 = *(void *)(v44 + 8 * v46 + 32);
        swift_retain();
      }
      uint64_t v52 = *((void *)v29 + 116);
      if ((*(unsigned char *)(v51 + v52) & 1) == 0)
      {
        *(unsigned char *)(v51 + v52) = 1;
        uint64_t v53 = swift_allocObject();
        *(void *)(v53 + 16) = v75;
        *(void *)(v53 + 24) = v51;
        uint64_t v81 = sub_1002C0508;
        uint64_t v82 = v53;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v78 = 1107296256;
        uint64_t v79 = sub_10007C0C4;
        uint64_t v80 = &unk_1004190E0;
        unint64_t v54 = v47;
        uint64_t v55 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v76 = _swiftEmptyArrayStorage;
        sub_1002D2CFC((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10006C51C((uint64_t *)&unk_100455710);
        sub_10006D1C4();
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v29 = &dword_10045B000;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v56 = v55;
        unint64_t v47 = v54;
        _Block_release(v56);
        (*v66)(v49, v50);
        (*v65)(v48, v70);
        swift_release();
        unint64_t v44 = v73;
        uint64_t v45 = v74;
      }
      swift_release();
      ++v46;
    }
    while (v45 != v46);
    goto LABEL_74;
  }
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
  return result;
}

BOOL sub_1002BFA80()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_1002BFB20(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  if ((static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  if (*(void *)(v6
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client) == a3
    && *(void *)(v6
                 + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                 + 8) == a4)
  {
    return 1;
  }
  else
  {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

uint64_t sub_1002BFBAC(uint64_t a1)
{
  uint64_t v6 = a1;
  unint64_t v2 = *v1;
  v5[2] = &v6;
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1002B9DE8((uint64_t (*)(uint64_t *))sub_1002D2CD8, v5, v2);
  swift_bridgeObjectRelease();
  unint64_t *v1 = (unint64_t)v3;
  swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t sub_1002BFC70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  type metadata accessor for UUID();
  sub_1002D2CFC((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    if (*(void *)(v6
                   + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client) == a3
      && *(void *)(v6
                   + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_client
                   + 8) == a4)
    {
      char v8 = 0;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
    }
  }
  else
  {
    char v8 = 1;
  }
  return v8 & 1;
}

uint64_t sub_1002BFD68(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = (void *)(a1 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate);
  uint64_t result = swift_beginAccess();
  uint64_t v7 = v5[3];
  if (v7)
  {
    sub_100075908(v5, v7);
    return a3(a2+ OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier);
  }
  return result;
}

void sub_1002BFDE8()
{
  swift_retain_n();
  uint64_t v0 = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315650;
    type metadata accessor for UUID();
    sub_1002D2CFC((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100290514(v3, v4, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v2 + 12) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v2 + 18) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "Priority for %s current high %{BOOL}d wanted high %{BOOL}d", (uint8_t *)v2, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_1002C0024()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD110Connection_identifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1002C00C4()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_1002C00E0()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCC10seserviced24DSKBLEConnectionPriorityP33_4368DB7FA3E5E29B3E4F0A34BA069AD119HighPriorityRequest_connectionIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002C0194()
{
  return static UUID.== infix(_:_:)();
}

uint64_t sub_1002C01B0()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  sub_1002D2BB0(v0 + OBJC_IVAR____TtC10seserviced24DSKBLEConnectionPriority_delegate);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002C0280()
{
  return type metadata accessor for DSKBLEConnectionPriority(0);
}

uint64_t type metadata accessor for DSKBLEConnectionPriority(uint64_t a1)
{
  return sub_100087C90(a1, qword_10045B2F0);
}

uint64_t sub_1002C02A8()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002C0360()
{
  return type metadata accessor for DSKBLEConnectionPriority.Connection(0);
}

uint64_t type metadata accessor for DSKBLEConnectionPriority.Connection(uint64_t a1)
{
  return sub_100087C90(a1, qword_10045B3D8);
}

uint64_t sub_1002C0388()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002C0424()
{
  return type metadata accessor for DSKBLEConnectionPriority.HighPriorityRequest(0);
}

uint64_t type metadata accessor for DSKBLEConnectionPriority.HighPriorityRequest(uint64_t a1)
{
  return sub_100087C90(a1, qword_10045B4D8);
}

uint64_t sub_1002C044C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

BOOL sub_1002C04E4()
{
  return sub_1002BFA80();
}

uint64_t sub_1002C0508()
{
  return sub_1002BFD68(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t (*)(uint64_t))sub_1000E34C8);
}

uint64_t sub_1002C0538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002C0548()
{
  return swift_release();
}

uint64_t sub_1002C0554()
{
  return sub_1002BFD68(*(void *)(v0 + 16), *(void *)(v0 + 24), (uint64_t (*)(uint64_t))sub_1000E34E4);
}

uint64_t sub_1002C0584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v5) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 + v7;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *unint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  unint64_t v14 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for DSKBLEConnectionPriority.Connection(0);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v16 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_17:
        if (v16 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        BOOL v17 = (char *)(v14 + 1);
        uint64_t v18 = (char *)(v13 + 32 + 8 * v5);
        if (v14 + 1 != (void *)v18 || v17 >= &v18[8 * v16]) {
          memmove(v17, v18, 8 * v16);
        }
        if (!(v11 >> 62))
        {
          uint64_t v19 = *(void *)(v13 + 16);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v15 = *(void *)(v13 + 16);
      uint64_t v16 = v15 - v5;
      if (!__OFSUB__(v15, v5)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:
  *unint64_t v14 = v3;

  return specialized Array._endMutation()();
}

char *sub_1002C0870(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *v4;
  int64_t v7 = *((void *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > *((void *)v6 + 3) >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = sub_100259A30(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  uint64_t v16 = &v6[16 * a1 + 32];
  sub_10006C51C(&qword_100459CE8);
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = *((void *)v6 + 2);
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = v16 + 16;
    uint64_t v21 = &v6[16 * a2 + 32];
    if (v16 + 16 != v21 || result >= &v21[16 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = *((void *)v6 + 2);
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      *((void *)v6 + 2) = v23;
LABEL_20:
      *(void *)uint64_t v16 = a3;
      *((void *)v16 + 1) = a4;
      *unint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_1002C09FC(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1002C234C(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1002C0AD0(uint64_t a1, uint64_t a2)
{
  return sub_1002C0BD8(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
}

unint64_t sub_1002C0AFC(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002C143C(a1, v2);
}

unint64_t sub_1002C0B68(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1002C14D8(a1, v4);
}

uint64_t sub_1002C0BAC(uint64_t a1, uint64_t a2)
{
  return sub_1002C0BD8(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
}

uint64_t sub_1002C0BD8(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

unint64_t sub_1002C0C6C(unsigned __int16 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_1002C1F3C(a1, v2);
}

unint64_t sub_1002C0CB4(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1002C1FDC(a1, v2);
}

unint64_t sub_1002C0D48(int a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();

  return sub_1002C2154(a1, v2);
}

unint64_t sub_1002C0D90(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for CFString(0);
  sub_1002D2CFC((unint64_t *)&unk_10045B620, type metadata accessor for CFString);
  _CFObject.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002C21F0(a1, v2);
}

unint64_t sub_1002C0E44(uint64_t a1)
{
  type metadata accessor for CredentialType();
  sub_1002D2CFC(&qword_10045B7C8, (void (*)(uint64_t))&type metadata accessor for CredentialType);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1002C234C(a1, v2, (uint64_t (*)(void))&type metadata accessor for CredentialType, &qword_10045B7D0, (void (*)(uint64_t))&type metadata accessor for CredentialType, (uint64_t)&protocol conformance descriptor for CredentialType);
}

unint64_t sub_1002C0F18(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1002C24EC(a1, v4);
}

unint64_t sub_1002C0F5C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_1002C25F8(a1, v4);
}

unint64_t sub_1002C0FA0(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002C2714(a1, v2);
}

unint64_t sub_1002C1060(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002C28B0(a1, v2);
}

unint64_t sub_1002C1168(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1002C2AB8(a1, v2);
}

unint64_t sub_1002C123C(uint64_t a1)
{
  type metadata accessor for URL();
  sub_1002D2CFC(&qword_10045B790, (void (*)(uint64_t))&type metadata accessor for URL);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_1002C234C(a1, v2, (uint64_t (*)(void))&type metadata accessor for URL, &qword_10045B798, (void (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_1002C1310(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_1002C2C74(v2, a1);
}

unint64_t sub_1002C1358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1002C143C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1002C14D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10023CB9C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1000AE724((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1002C15A0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_10006D0EC(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_10006D144(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_10006D144(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  uint64_t v40 = v29;
                  uint64_t v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  sub_10006D144(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  unint64_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  unint64_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                sub_10006D144(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  uint64_t v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  sub_10006D144(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_10006D0EC(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  uint64_t v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  uint64_t v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_10006D144(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  sub_10006D144(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  sub_10006D0EC(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x1002C1F0CLL);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_10006D144(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_1002C1F3C(unsigned __int16 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int16 *)(v7 + 2 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int16 *)(v7 + 2 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1002C1FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1002C2154(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1002C21F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_1002D2CFC((unint64_t *)&unk_10045B620, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = static _CFObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static _CFObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1002C234C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v24 = a4;
  v22[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v23 = v6;
  uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = a2 & ~v13;
  v22[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    char v18 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v17 = v9 + 16;
    uint64_t v16 = v18;
    uint64_t v19 = *(void *)(v17 + 56);
    do
    {
      v16(v12, *(void *)(v23 + 48) + v19 * v14, v8);
      sub_1002D2CFC(v24, v25);
      char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v17 - 8))(v12, v8);
      if (v20) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v22[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_1002C24EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CredentialInternal();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1002C25F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10007582C(0, &qword_1004555D8);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1002C2714(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0x80000001003B11E0;
          unint64_t v8 = 0xD000000000000016;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v8 = 0xD000000000000019;
          unint64_t v7 = 0x80000001003B1200;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE200000000000000;
            if (v8 != 25705) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v7 = 0xE200000000000000;
        unint64_t v8 = 25705;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        unint64_t v10 = 0xD000000000000016;
      }
      else {
        unint64_t v10 = 0xD000000000000019;
      }
      if (v9 == 1) {
        unint64_t v11 = 0x80000001003B11E0;
      }
      else {
        unint64_t v11 = 0x80000001003B1200;
      }
      if (v8 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_1002C28B0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE600000000000000;
      unint64_t v8 = 0x64496D616461;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x656D614E707061;
          break;
        case 2:
          unint64_t v7 = 0x80000001003B1230;
          unint64_t v8 = 0xD000000000000013;
          break;
        case 3:
          unint64_t v8 = 0xD000000000000015;
          unint64_t v7 = 0x80000001003B1250;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE600000000000000;
      unint64_t v10 = 0x64496D616461;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE700000000000000;
          if (v8 == 0x656D614E707061) {
            goto LABEL_14;
          }
          goto LABEL_15;
        case 2:
          unint64_t v9 = 0x80000001003B1230;
          unint64_t v10 = 0xD000000000000013;
          goto LABEL_11;
        case 3:
          unint64_t v9 = 0x80000001003B1250;
          if (v8 == 0xD000000000000015) {
            goto LABEL_14;
          }
          goto LABEL_15;
        default:
LABEL_11:
          if (v8 != v10) {
            goto LABEL_15;
          }
LABEL_14:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_15:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1002C2AB8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          uint64_t v7 = 0x6D617473656D6974;
          unint64_t v8 = 0xEC00000079614470;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v7 = 0x7461676572676761;
          unint64_t v8 = 0xEA00000000007365;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE800000000000000;
            if (v7 != 0x644974726F706572) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v8 = 0xE800000000000000;
        uint64_t v7 = 0x644974726F706572;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        uint64_t v10 = 0x6D617473656D6974;
      }
      else {
        uint64_t v10 = 0x7461676572676761;
      }
      if (v9 == 1) {
        unint64_t v11 = 0xEC00000079614470;
      }
      else {
        unint64_t v11 = 0xEA00000000007365;
      }
      if (v7 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_1002C2C74(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1002C2D0C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v49 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_10006C51C(&qword_10045B598);
  int v48 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  uint64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v44 = (void *)(v9 + 64);
  if (v12 < 64) {
    uint64_t v14 = ~(-1 << v12);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v13;
  uint64_t v42 = v2;
  int64_t v43 = (unint64_t)(v12 + 63) >> 6;
  size_t v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  size_t v50 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v52 = v5;
  uint64_t v46 = v6;
  uint64_t v47 = v9;
  uint64_t v19 = v49;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v23 = v22 | (v18 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    uint64_t v25 = v44;
    unint64_t v26 = v44[v24];
    ++v18;
    if (!v26)
    {
      int64_t v18 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v18];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v18 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v18];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v27;
      }
    }
LABEL_21:
    unint64_t v15 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v9 + 48) + v28 * v23;
    if (v48) {
      (*v50)(v19, v29, v52);
    }
    else {
      (*v45)(v19, v29, v52);
    }
    uint64_t v30 = (uint64_t *)(*(void *)(v9 + 56) + 24 * v23);
    uint64_t v31 = v30[1];
    uint64_t v51 = v30[2];
    uint64_t v32 = *v30;
    sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v19 = v49;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v19 = v49;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v20 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v50)(*(void *)(v11 + 48) + v28 * v20, v19, v52);
    BOOL v21 = (void *)(*(void *)(v11 + 56) + 24 * v20);
    *BOOL v21 = v32;
    v21[1] = v31;
    _OWORD v21[2] = v51;
    ++*(void *)(v11 + 16);
    uint64_t v6 = v46;
    uint64_t v9 = v47;
  }
  swift_release();
  uint64_t v3 = v42;
  uint64_t v25 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v25, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

uint64_t sub_1002C3168(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_10045B5F0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        int64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        unint64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          unint64_t v17 = v30[v8];
          if (!v17)
          {
            int64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                unint64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      Swift::UInt v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      unint64_t v20 = (long long *)(*(void *)(v5 + 56) + 40 * v15);
      if (a2) {
        sub_10010197C(v20, (uint64_t)v31);
      }
      else {
        sub_10010DDC4((uint64_t)v20, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      uint64_t result = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v19;
      uint64_t result = sub_10010197C(v31, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C3448(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B5E8);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_31;
        }
        unint64_t v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v19 = v33[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = 8 * v17;
      Swift::UInt v22 = *(void *)(*(void *)(v5 + 48) + v21);
      uint64_t v23 = *(void *)(*(void *)(v5 + 56) + v21);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v27 = 0;
        unint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      *(void *)(*(void *)(v7 + 56) + v15) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C3718(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_100455760);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    unint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        sub_1000761D0(v24, v35);
      }
      else
      {
        sub_1000AA580((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)sub_1000761D0(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C3A18(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B678);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v19 >= v11) {
      break;
    }
    int64_t v20 = (void *)(v5 + 64);
    unint64_t v21 = *(void *)(v34 + 8 * v19);
    ++v14;
    if (!v21)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v21 = *(void *)(v34 + 8 * v14);
      if (!v21)
      {
        int64_t v22 = v19 + 2;
        if (v22 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            int64_t v14 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v21 = *(void *)(v34 + 8 * v14);
            ++v22;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v22;
      }
    }
LABEL_21:
    unint64_t v10 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v14 << 6);
LABEL_22:
    uint64_t v23 = *(void *)(v5 + 48);
    uint64_t v24 = (long long *)(*(void *)(v5 + 56) + 40 * v18);
    unint64_t v25 = *(void *)(v23 + 16 * v18 + 8);
    long long v35 = *(_OWORD *)(v23 + 16 * v18);
    if (a2)
    {
      sub_10010197C(v24, (uint64_t)v36);
    }
    else
    {
      sub_10010DDC4((uint64_t)v24, (uint64_t)v36);
      sub_10006D0EC(v35, v25);
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      long long v16 = v35;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      long long v16 = v35;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v15) = v16;
    uint64_t result = sub_10010197C(v36, *(void *)(v7 + 56) + 40 * v15);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v20 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v20, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v20 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C3D34(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_100458118);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v13);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    long long v30 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v31 = *(void *)(v5 + 56) + 24 * v21;
    uint64_t v32 = *(void *)v31;
    long long v37 = *(_OWORD *)(v31 + 8);
    long long v38 = v30;
    if ((a2 & 1) == 0)
    {
      sub_10006D0EC(v30, *((unint64_t *)&v30 + 1));
      sub_10006D0EC(v32, v37);
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      long long v18 = v38;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v14) >> 6;
      long long v18 = v38;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      unint64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
    uint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
    *(void *)uint64_t v19 = v32;
    *(_OWORD *)(v19 + 8) = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C406C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_10045B630);
  char v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        unint64_t v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v21 = v33[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      Swift::UInt v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 16 * v19;
      uint64_t v29 = *(void *)v28;
      char v30 = *(unsigned char *)(v28 + 8);
      if ((v34 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 16 * v16;
      *(void *)uint64_t v17 = v29;
      *(unsigned char *)(v17 + 8) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C435C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B778);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    char v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v34 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    char v30 = *(void **)(*(void *)(v5 + 56) + 8 * v21);
    long long v35 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v21);
    if ((a2 & 1) == 0)
    {
      sub_10006D0EC(v35, *(void *)(*(void *)(v5 + 48) + 16 * v21 + 8));
      id v31 = v30;
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      long long v19 = v35;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      long long v19 = v35;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_OWORD *)(*(void *)(v7 + 48) + 16 * v18) = v19;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  char v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v23, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C4664(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B828);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C497C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_10045B5E0);
  int v48 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v42 = v2;
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v44 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  int64_t v43 = (unint64_t)(v13 + 63) >> 6;
  size_t v45 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  size_t v50 = v9;
  uint64_t v17 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v19 = 0;
  uint64_t v46 = v10;
  uint64_t v47 = v6;
  uint64_t v51 = v5;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v19 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v43) {
      break;
    }
    char v25 = v44;
    unint64_t v26 = v44[v24];
    ++v19;
    if (!v26)
    {
      int64_t v19 = v24 + 1;
      if (v24 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v26 = v44[v19];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v44[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v19 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v19 >= v43) {
              goto LABEL_34;
            }
            unint64_t v26 = v44[v19];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v19 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v19 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v6 + 72);
    unint64_t v29 = *(void *)(v10 + 48) + v28 * v23;
    if (v48)
    {
      (*v49)(v50, v29, v51);
      uint64_t v30 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v31 = *v30;
      unint64_t v32 = v30[1];
    }
    else
    {
      (*v45)(v50, v29, v51);
      uint64_t v33 = (uint64_t *)(*(void *)(v10 + 56) + 16 * v23);
      uint64_t v31 = *v33;
      unint64_t v32 = v33[1];
      sub_10006D0EC(*v33, v32);
    }
    sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v34 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v35 = result & ~v34;
    unint64_t v36 = v35 >> 6;
    if (((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6))) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v35) & ~*(void *)(v17 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v47;
    }
    else
    {
      char v37 = 0;
      unint64_t v38 = (unint64_t)(63 - v34) >> 6;
      uint64_t v6 = v47;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v39 = v36 == v38;
        if (v36 == v38) {
          unint64_t v36 = 0;
        }
        v37 |= v39;
        uint64_t v40 = *(void *)(v17 + 8 * v36);
      }
      while (v40 == -1);
      unint64_t v20 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v49)(*(void *)(v12 + 48) + v28 * v20, v50, v51);
    int64_t v21 = (uint64_t *)(*(void *)(v12 + 56) + 16 * v20);
    *int64_t v21 = v31;
    v21[1] = v32;
    ++*(void *)(v12 + 16);
    uint64_t v10 = v46;
  }
  swift_release();
  uint64_t v3 = v42;
  char v25 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v41 = 1 << *(unsigned char *)(v10 + 32);
  if (v41 >= 64) {
    bzero(v25, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v25 = -1 << v41;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1002C4DC4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_10045B610);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = v3;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        unint64_t v21 = v31[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v21 = v31[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v31[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v21 = v31[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      int v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        unint64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C5080(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_100459698);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  int64_t v43 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v46 = v6;
  unint64_t v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    uint64_t v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v9, v30, v5);
      id v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v9, v30, v5);
      id v31 = *(id *)(*(void *)(v12 + 56) + 8 * v24);
    }
    sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v9, v5);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v12 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v26 = -1 << v39;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_1002C54A4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for CredentialType();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_10045B7C0);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v43)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v37;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v10 + 48) + v26 * v22;
      if (v43) {
        (*v44)(v9, v27, v45);
      }
      else {
        (*v41)(v9, v27, v45);
      }
      uint64_t v28 = v10;
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      sub_1002D2CFC(&qword_10045B7C8, (void (*)(uint64_t))&type metadata accessor for CredentialType);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v44)(*(void *)(v12 + 48) + v26 * v20, v9, v45);
      *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
      ++*(void *)(v12 + 16);
      uint64_t v10 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1002C58C8(uint64_t a1, char a2)
{
  return sub_1002C8000(a1, a2, (uint64_t *)&unk_1004561C0);
}

uint64_t sub_1002C58D4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_10045B800);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v40) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v41 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v41 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v41 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v40) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v41 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_22:
    int64_t v25 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    uint64_t v28 = *(void *)(v5 + 56) + 40 * v20;
    if (v42)
    {
      long long v29 = *(_OWORD *)v28;
      long long v30 = *(_OWORD *)(v28 + 16);
      uint64_t v45 = *(void *)(v28 + 32);
      long long v43 = v29;
      long long v44 = v30;
    }
    else
    {
      sub_10023CB9C(v28, (uint64_t)&v43);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *uint64_t v15 = v27;
    v15[1] = v26;
    uint64_t v16 = *(void *)(v7 + 56) + 40 * v14;
    long long v17 = v43;
    long long v18 = v44;
    *(void *)(v16 + 32) = v45;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v22, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C5C0C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B718);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    long long v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    long long v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *long long v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C5F20(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_10045AFE0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      id v34 = v32;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C61F4(uint64_t a1, char a2)
{
  return sub_1002C776C(a1, a2, &qword_100457218);
}

uint64_t sub_1002C6200(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10006C51C(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 0;
    unint64_t v10 = (uint64_t *)(v6 + 64);
    uint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v30 = -1 << v11;
    uint64_t v31 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v6 + 64);
    int64_t v32 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v9 << 6);
      }
      else
      {
        int64_t v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v32) {
          goto LABEL_33;
        }
        unint64_t v22 = v10[v21];
        ++v9;
        if (!v22)
        {
          int64_t v9 = v21 + 1;
          if (v21 + 1 >= v32) {
            goto LABEL_33;
          }
          unint64_t v22 = v10[v9];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v32)
            {
LABEL_33:
              if (a2)
              {
                if (v31 >= 64) {
                  bzero((void *)(v6 + 64), 8 * v32);
                }
                else {
                  *unint64_t v10 = v30;
                }
                *(void *)(v6 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v10[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v9 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v9 >= v32) {
                  goto LABEL_33;
                }
                unint64_t v22 = v10[v9];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v9 = v23;
          }
        }
LABEL_30:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      int v28 = *(_DWORD *)(*(void *)(v6 + 48) + 4 * v20);
      uint64_t v29 = *(void *)(*(void *)(v6 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_DWORD *)(*(void *)(v8 + 48) + 4 * v18) = v28;
      *(void *)(*(void *)(v8 + 56) + 8 * v18) = v29;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1002C64B0(uint64_t a1, char a2)
{
  return sub_1002C64C8(a1, a2, &qword_100458128);
}

uint64_t sub_1002C64BC(uint64_t a1, char a2)
{
  return sub_1002C64C8(a1, a2, (uint64_t *)&unk_10045B640);
}

uint64_t sub_1002C64C8(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10006C51C(a3);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  id v33 = v3;
  uint64_t v34 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    char v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v34 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v34 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v34 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v34 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = *(void *)(*(void *)(v6 + 56) + 8 * v22);
    long long v35 = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v22);
    if ((a2 & 1) == 0)
    {
      sub_10006D0EC(v35, *(void *)(*(void *)(v6 + 48) + 16 * v22 + 8));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      long long v20 = v35;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      long long v20 = v35;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    *(_OWORD *)(*(void *)(v8 + 48) + 16 * v19) = v20;
    *(void *)(*(void *)(v8 + 56) + 8 * v19) = v31;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v33;
  char v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v32 = 1 << *(unsigned char *)(v6 + 32);
  if (v32 >= 64) {
    bzero(v24, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v24 = -1 << v32;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1002C67D0(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_10045B680);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    int64_t v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    long long v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v43)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v37;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v10 + 48) + v26 * v22;
      if (v43) {
        (*v44)(v9, v27, v45);
      }
      else {
        (*v41)(v9, v27, v45);
      }
      uint64_t v28 = v10;
      char v29 = *(unsigned char *)(*(void *)(v10 + 56) + v22);
      sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v44)(*(void *)(v12 + 48) + v26 * v20, v9, v45);
      *(unsigned char *)(*(void *)(v12 + 56) + v20) = v29;
      ++*(void *)(v12 + 16);
      uint64_t v10 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1002C6BF4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_10045B688);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    int64_t v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    long long v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v43)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v40 = -1 << v37;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v10 + 48) + v26 * v22;
      if (v43) {
        (*v44)(v9, v27, v45);
      }
      else {
        (*v41)(v9, v27, v45);
      }
      uint64_t v28 = v10;
      __int16 v29 = *(_WORD *)(*(void *)(v10 + 56) + 2 * v22);
      sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v44)(*(void *)(v12 + 48) + v26 * v20, v9, v45);
      *(_WORD *)(*(void *)(v12 + 56) + 2 * v20) = v29;
      ++*(void *)(v12 + 16);
      uint64_t v10 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1002C7018(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C((uint64_t *)&unk_10045B570);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_1000761D0((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_10023CB9C(v25, (uint64_t)&v38);
      sub_1000AA580(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_1000761D0(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C7330(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_10045B758);
  int v47 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v10;
  uint64_t v13 = v11;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_41;
  }
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = *(void *)(v12 + 64);
  int v43 = (void *)(v12 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1 << v14);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  uint64_t v41 = v3;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  long long v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v46 = v6;
  long long v18 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v19 = v11 + 64;
  uint64_t result = swift_retain();
  int64_t v21 = 0;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_22;
    }
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v42) {
      break;
    }
    long long v26 = v43;
    unint64_t v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v42) {
        goto LABEL_34;
      }
      unint64_t v27 = v43[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v21 >= v42) {
              goto LABEL_34;
            }
            unint64_t v27 = v43[v21];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        int64_t v21 = v28;
      }
    }
LABEL_21:
    unint64_t v17 = (v27 - 1) & v27;
    unint64_t v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v46 + 72);
    unint64_t v30 = *(void *)(v12 + 48) + v29 * v24;
    if (v47)
    {
      (*v18)(v9, v30, v5);
      uint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
    }
    else
    {
      (*v44)(v9, v30, v5);
      uint64_t v31 = *(void *)(*(void *)(v12 + 56) + 8 * v24);
      swift_bridgeObjectRetain();
    }
    sub_1002D2CFC((unint64_t *)&unk_10045B5A0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v32 = -1 << *(unsigned char *)(v13 + 32);
    unint64_t v33 = result & ~v32;
    unint64_t v34 = v33 >> 6;
    if (((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v22 = __clz(__rbit64((-1 << v33) & ~*(void *)(v19 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v35 = 0;
      unint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v37 = v34 == v36;
        if (v34 == v36) {
          unint64_t v34 = 0;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v19 + 8 * v34);
      }
      while (v38 == -1);
      unint64_t v22 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(void *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v18)(*(void *)(v13 + 48) + v29 * v22, v9, v5);
    *(void *)(*(void *)(v13 + 56) + 8 * v22) = v31;
    ++*(void *)(v13 + 16);
  }
  swift_release();
  uint64_t v3 = v41;
  long long v26 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v39 = 1 << *(unsigned char *)(v12 + 32);
  if (v39 >= 64) {
    bzero(v26, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v26 = -1 << v39;
  }
  *(void *)(v12 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v13;
  return result;
}

uint64_t sub_1002C7754(uint64_t a1, char a2)
{
  return sub_1002C776C(a1, a2, &qword_100459E68);
}

uint64_t sub_1002C7760(uint64_t a1, char a2)
{
  return sub_1002C776C(a1, a2, &qword_10045B660);
}

uint64_t sub_1002C776C(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10006C51C(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1002C7A80(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B6C0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v32 = a2;
    uint64_t v31 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v31;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      __int16 v21 = *(_WORD *)(*(void *)(v5 + 48) + 2 * v17);
      char v22 = *(unsigned char *)(*(void *)(v5 + 56) + v17);
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_WORD *)(*(void *)(v7 + 48) + 2 * v15) = v21;
      *(unsigned char *)(*(void *)(v7 + 56) + v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C7D34(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_100458138);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v13) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v30;
                goto LABEL_40;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v29;
              }
              uint64_t v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      __int16 v28 = *(_WORD *)(*(void *)(v5 + 48) + 2 * v20);
      long long v31 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        sub_10006D0EC(v31, *((unint64_t *)&v31 + 1));
      }
      uint64_t result = static Hasher._hash(seed:bytes:count:)();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v17 == v25;
          if (v17 == v25) {
            unint64_t v17 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v14 + 8 * v17);
        }
        while (v27 == -1);
        unint64_t v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_WORD *)(*(void *)(v7 + 48) + 2 * v18) = v28;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v18) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C8000(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  sub_10006C51C(a3);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v36;
  int64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1002C830C(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_10006C51C(&qword_10045B788);
  int v43 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (*(void *)(v10 + 16))
  {
    uint64_t v38 = v2;
    uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
    uint64_t v14 = *(void *)(v10 + 64);
    uint64_t v40 = (void *)(v10 + 64);
    if (v13 < 64) {
      uint64_t v15 = ~(-1 << v13);
    }
    else {
      uint64_t v15 = -1;
    }
    unint64_t v16 = v15 & v14;
    int64_t v39 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    long long v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    uint64_t v17 = v11 + 64;
    uint64_t result = swift_retain();
    int64_t v19 = 0;
    uint64_t v45 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v16)
      {
        unint64_t v21 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        unint64_t v22 = v21 | (v19 << 6);
      }
      else
      {
        int64_t v23 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v23 >= v39) {
          goto LABEL_34;
        }
        unint64_t v24 = v40[v23];
        ++v19;
        if (!v24)
        {
          int64_t v19 = v23 + 1;
          if (v23 + 1 >= v39) {
            goto LABEL_34;
          }
          unint64_t v24 = v40[v19];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v43)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v10 + 32);
                if (v37 >= 64) {
                  bzero(v40, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v37;
                }
                *(void *)(v10 + 16) = 0;
              }
              break;
            }
            unint64_t v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v19 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_41;
                }
                if (v19 >= v39) {
                  goto LABEL_34;
                }
                unint64_t v24 = v40[v19];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v19 = v25;
          }
        }
LABEL_21:
        unint64_t v16 = (v24 - 1) & v24;
        unint64_t v22 = __clz(__rbit64(v24)) + (v19 << 6);
      }
      uint64_t v26 = *(void *)(v6 + 72);
      unint64_t v27 = *(void *)(v10 + 48) + v26 * v22;
      if (v43) {
        (*v44)(v9, v27, v45);
      }
      else {
        (*v41)(v9, v27, v45);
      }
      uint64_t v28 = v10;
      uint64_t v29 = *(void *)(*(void *)(v10 + 56) + 8 * v22);
      sub_1002D2CFC(&qword_10045B790, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v30 = -1 << *(unsigned char *)(v12 + 32);
      unint64_t v31 = result & ~v30;
      unint64_t v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v20 = __clz(__rbit64((-1 << v31) & ~*(void *)(v17 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v33 = 0;
        unint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v35 = v32 == v34;
          if (v32 == v34) {
            unint64_t v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v17 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v20 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v44)(*(void *)(v12 + 48) + v26 * v20, v9, v45);
      *(void *)(*(void *)(v12 + 56) + 8 * v20) = v29;
      ++*(void *)(v12 + 16);
      uint64_t v10 = v28;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_1002C8730(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B768);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
    char v33 = v3;
    int64_t v34 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        int64_t v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v34) {
          goto LABEL_33;
        }
        unint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v34) {
            goto LABEL_33;
          }
          unint64_t v22 = v9[v8];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v33;
                goto LABEL_40;
              }
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), 8 * v34);
              }
              else {
                *uint64_t v9 = v31;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v34) {
                  goto LABEL_33;
                }
                unint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v12 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C89EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B6D0);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v33 = v2;
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v11) {
      break;
    }
    unint64_t v19 = (void *)(v5 + 64);
    unint64_t v20 = *(void *)(v34 + 8 * v18);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v20 = *(void *)(v34 + 8 * v14);
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v11)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v33;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = *(void *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v20 = *(void *)(v34 + 8 * v14);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v10 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    unint64_t v22 = *(void **)(*(void *)(v5 + 48) + 8 * v17);
    int64_t v23 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
    if (a2)
    {
      sub_1000761D0(v23, v35);
    }
    else
    {
      sub_1000AA580((uint64_t)v23, (uint64_t)v35);
      id v24 = v22;
    }
    Hasher.init(_seed:)();
    type metadata accessor for CFString(0);
    sub_1002D2CFC((unint64_t *)&unk_10045B620, type metadata accessor for CFString);
    _CFObject.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v12 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
    uint64_t result = (uint64_t)sub_1000761D0(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v33;
  unint64_t v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v19 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C8D28(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_10045B690);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int64_t v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    __int16 v32 = *(_WORD *)(*(void *)(v5 + 56) + 2 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(_WORD *)(*(void *)(v7 + 56) + 2 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C9034(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10006C51C(&qword_100455770);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    __int16 v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    void *v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1002C935C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (void *)*v5;
  unint64_t v17 = sub_1002C09FC(a4);
  uint64_t v18 = v15[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t result = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v21 = v16;
  uint64_t v22 = v15[3];
  if (v22 >= result && (a5 & 1) != 0)
  {
LABEL_7:
    int64_t v23 = *v6;
    if (v21)
    {
LABEL_8:
      int64_t v24 = (uint64_t *)(v23[7] + 24 * v17);
      uint64_t v25 = v27;
      *int64_t v24 = a1;
      v24[1] = v25;
      _OWORD v24[2] = v28;
      return result;
    }
    goto LABEL_11;
  }
  if (v22 >= result && (a5 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CBE70();
    goto LABEL_7;
  }
  sub_1002C2D0C(result, a5 & 1);
  uint64_t result = sub_1002C09FC(a4);
  if ((v21 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = result;
  int64_t v23 = *v6;
  if (v21) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a4, v10);
  return sub_1002CB8A8(v17, (uint64_t)v14, a1, v27, v28, v23);
}

uint64_t sub_1002C9518(uint64_t a1, Swift::UInt a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1002C0AFC(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CC2E8();
LABEL_7:
    char v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v18 = 8 * v10;
    *(void *)(v16[6] + v18) = a2;
    *(void *)(v16[7] + v18) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C3448(result, a3 & 1);
  uint64_t result = sub_1002C0AFC(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    char v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *sub_1002C9648(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002CC478();
      goto LABEL_7;
    }
    sub_1002C3718(v15, a4 & 1);
    uint64_t v21 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    sub_10007594C((uint64_t)v19);
    return sub_1000761D0(a1, v19);
  }
LABEL_13:
  sub_1002CB97C(v12, a2, a3, a1, v18);

  return (_OWORD *)swift_bridgeObjectRetain();
}

void sub_1002C97EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

uint64_t sub_1002C97F8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_1002CA9C8(a1, a2, a3, a4, &qword_10045B6C8);
}

uint64_t sub_1002C9804(long long *a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1002CC66C();
      goto LABEL_7;
    }
    sub_1002C3A18(v15, a4 & 1);
    uint64_t v21 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 40 * v12;
    sub_10007594C(v19);
    return sub_10010197C(a1, v19);
  }
LABEL_13:
  sub_1002CB9E8(v12, a2, a3, a1, v18);

  return sub_10006D0EC(a2, a3);
}

uint64_t sub_1002C99B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v7 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_1002C0BD8(a4, a5, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a6 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a6 & 1) == 0)
  {
    sub_1002CC85C();
LABEL_7:
    char v22 = (void *)*v7;
    if (v20)
    {
LABEL_8:
      int64_t v23 = (uint64_t *)(v22[7] + 24 * v16);
      uint64_t result = sub_10006D144(*v23, v23[1]);
      uint64_t *v23 = a1;
      v23[1] = a2;
      void v23[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002C3D34(v19, a6 & 1);
  uint64_t v25 = sub_1002C0BD8(a4, a5, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  char v22 = (void *)*v7;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  uint64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  uint64_t *v27 = a4;
  v27[1] = a5;
  uint64_t v28 = (uint64_t *)(v22[7] + 24 * v16);
  *uint64_t v28 = a1;
  v28[1] = a2;
  v28[2] = a3;
  uint64_t v29 = v22[2];
  BOOL v30 = __OFADD__(v29, 1);
  uint64_t v31 = v29 + 1;
  if (v30)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v31;

  return sub_10006D0EC(a4, a5);
}

uint64_t sub_1002C9B9C(uint64_t a1, char a2, Swift::UInt a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0AFC(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CCA3C();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)uint64_t v19 = a1;
      *(unsigned char *)(v19 + 8) = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = v18[7] + 16 * v12;
    *(void *)uint64_t v21 = a1;
    *(unsigned char *)(v21 + 8) = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C406C(result, a4 & 1);
  uint64_t result = sub_1002C0AFC(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    BOOL v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1002C9CE4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002CCBF4();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v12) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1002C435C(v15, a4 & 1);
  uint64_t v20 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v20;
  BOOL v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v22 = a2;
  v22[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v23 = v18[2];
  BOOL v24 = __OFADD__(v23, 1);
  uint64_t v25 = v23 + 1;
  if (v24)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v25;

  sub_10006D0EC(a2, a3);
}

uint64_t sub_1002C9EA8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002CCDA8();
LABEL_7:
    BOOL v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002C4664(v15, a4 & 1);
  uint64_t v21 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  BOOL v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002CA068(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v29 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v14 = (void *)*v4;
  unint64_t v16 = sub_1002C09FC(a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    char v22 = *v5;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7] + 16 * v16;
      uint64_t result = sub_10006D144(*(void *)v23, *(void *)(v23 + 8));
      uint64_t v25 = v29;
      *(void *)uint64_t v23 = a1;
      *(void *)(v23 + 8) = v25;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_1002CCF60();
    goto LABEL_7;
  }
  sub_1002C497C(v19, a4 & 1);
  unint64_t v26 = sub_1002C09FC(a3);
  if ((v20 & 1) != (v27 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v26;
  char v22 = *v5;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  return sub_1002CBA58(v16, (uint64_t)v13, a1, v29, v22);
}

uint64_t sub_1002CA220(uint64_t a1, int a2, char a3)
{
  return sub_1002CA878(a1, a2, a3, (uint64_t *)&unk_10045B730);
}

uint64_t sub_1002CA22C(uint64_t a1, int a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1002C0D48(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CD248();
LABEL_7:
    unint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_DWORD *)(v16[6] + 4 * v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C4DC4(result, a3 & 1);
  uint64_t result = sub_1002C0D48(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    unint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002CA364(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_18;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002CD6B4();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 40 * v12;
      return sub_1001716E8(a1, v19);
    }
    goto LABEL_13;
  }
  sub_1002C58D4(v15, a4 & 1);
  uint64_t v21 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_19:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_13:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  uint64_t v24 = v18[7] + 40 * v12;
  long long v25 = *(_OWORD *)a1;
  long long v26 = *(_OWORD *)(a1 + 16);
  *(void *)(v24 + 32) = *(void *)(a1 + 32);
  *(_OWORD *)uint64_t v24 = v25;
  *(_OWORD *)(v24 + 16) = v26;
  uint64_t v27 = v18[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18[2] = v29;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1002CA544(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1002CD8AC();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002C5C0C(v15, a4 & 1);
  uint64_t v21 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  char v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v12);
  uint64_t *v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

void sub_1002CA708(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_1002C0F18((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_1002CDA68();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if (v13)
    {
LABEL_8:
      uint64_t v16 = v15[7];

      *(void *)(v16 + 8 * v9) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1002C5F20(v12, a3 & 1);
  unint64_t v17 = sub_1002C0F18((uint64_t)a2);
  if ((v13 & 1) != (v18 & 1))
  {
LABEL_17:
    type metadata accessor for CredentialInternal();
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v9 = v17;
  uint64_t v15 = (void *)*v4;
  if (v13) {
    goto LABEL_8;
  }
LABEL_11:
  v15[(v9 >> 6) + 8] |= 1 << v9;
  uint64_t v19 = 8 * v9;
  *(void *)(v15[6] + v19) = a2;
  *(void *)(v15[7] + v19) = a1;
  uint64_t v20 = v15[2];
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (v21)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v15[2] = v22;

  id v23 = a2;
}

uint64_t sub_1002CA86C(uint64_t a1, int a2, char a3)
{
  return sub_1002CA878(a1, a2, a3, &qword_100458198);
}

uint64_t sub_1002CA878(uint64_t a1, int a2, char a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0D48(a2);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CDC28(a4);
LABEL_7:
    char v18 = (void *)*v6;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_DWORD *)(v18[6] + 4 * v12) = a2;
    *(void *)(v18[7] + 8 * v12) = a1;
    uint64_t v21 = v18[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C6200(result, a3 & 1, a4);
  uint64_t result = sub_1002C0D48(a2);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v6;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002CA9BC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_1002CA9C8(a1, a2, a3, a4, &qword_100458128);
}

uint64_t sub_1002CA9C8(uint64_t a1, uint64_t a2, unint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1002CDDE0(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_1002C64C8(v17, a4 & 1, a5);
  uint64_t v23 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C15A0);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  BOOL v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a2;
  v25[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v26 = v20[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v28;

  return sub_10006D0EC(a2, a3);
}

uint64_t sub_1002CABA4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_1002CA9C8(a1, a2, a3, a4, (uint64_t *)&unk_10045B640);
}

uint64_t sub_1002CABB0(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v3;
  unint64_t v15 = sub_1002C09FC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      *(unsigned char *)(v21[7] + v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CDF90();
    goto LABEL_7;
  }
  sub_1002C67D0(result, a3 & 1);
  uint64_t result = sub_1002C09FC(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = result;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_1002CBB64(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_1002CAD4C(__int16 a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = (void *)*v3;
  unint64_t v15 = sub_1002C09FC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t result = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      *(_WORD *)(v21[7] + 2 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CE220();
    goto LABEL_7;
  }
  sub_1002C6BF4(result, a3 & 1);
  uint64_t result = sub_1002C09FC(a2);
  if ((v19 & 1) != (v22 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = result;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_1002CBC1C(v15, (uint64_t)v12, a1, v21);
}

_OWORD *sub_1002CAEE8(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_1002C0B68(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1002CE4B4();
      goto LABEL_7;
    }
    sub_1002C7018(v13, a3 & 1);
    unint64_t v19 = sub_1002C0B68(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_10023CB9C(a2, (uint64_t)v21);
      return sub_1002CBCD4(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  BOOL v17 = (_OWORD *)(v16[7] + 32 * v10);
  sub_10007594C((uint64_t)v17);

  return sub_1000761D0(a1, v17);
}

uint64_t sub_1002CB034(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  BOOL v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v3;
  unint64_t v15 = sub_1002C09FC(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v21 = *v4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v22 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1002CE69C();
    goto LABEL_7;
  }
  sub_1002C7330(v18, a3 & 1);
  unint64_t v24 = sub_1002C09FC(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  uint64_t v21 = *v4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  return sub_1002CBD50(v15, (uint64_t)v12, a1, v21);
}

uint64_t sub_1002CB1DC(char a1, unsigned __int16 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1002C0C6C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CEAFC();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      *(unsigned char *)(v16[7] + v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_WORD *)(v16[6] + 2 * v10) = a2;
    *(unsigned char *)(v16[7] + v10) = a1;
    uint64_t v18 = v16[2];
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (!v19)
    {
      v16[2] = v20;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C7A80(result, a3 & 1);
  uint64_t result = sub_1002C0C6C(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    unint64_t v10 = result;
    uint64_t v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1002CB308(uint64_t a1, uint64_t a2, unsigned __int16 a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1002C0C6C(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CEC8C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = sub_10006D144(*(void *)v19, *(void *)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + 8) = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_WORD *)(v18[6] + 2 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    *uint64_t v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C7D34(result, a4 & 1);
  uint64_t result = sub_1002C0C6C(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    uint64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void sub_1002CB448(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_1002CB454(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_1002CEE3C(a5);
LABEL_7:
    char v20 = (void *)*v7;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1002C8000(v17, a4 & 1, a5);
  uint64_t v22 = sub_1002C0BD8(a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1002C1358);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  char v20 = (void *)*v7;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v24 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v24 = a2;
  v24[1] = a3;
  *(void *)(v20[7] + 8 * v14) = a1;
  uint64_t v25 = v20[2];
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v20[2] = v27;

  swift_bridgeObjectRetain();
}

uint64_t sub_1002CB62C(uint64_t a1, char a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_1002C1310(a3);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a2 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a2 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1002CF29C();
LABEL_7:
    BOOL v16 = (void *)*v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    uint64_t v19 = 8 * v10;
    *(double *)(v16[6] + v19) = a3;
    *(void *)(v16[7] + v19) = a1;
    uint64_t v20 = v16[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_1002C8730(result, a2 & 1);
  uint64_t result = sub_1002C1310(a3);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*v4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

_OWORD *sub_1002CB764(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1002C0D90((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1002CF440();
      goto LABEL_7;
    }
    sub_1002C89EC(v12, a3 & 1);
    unint64_t v18 = sub_1002C0D90((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for CFString(0);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    BOOL v16 = (_OWORD *)(v15[7] + 32 * v9);
    sub_10007594C((uint64_t)v16);
    return sub_1000761D0(a1, v16);
  }
LABEL_13:
  sub_1002CBE08(v9, (uint64_t)a2, a1, v15);

  return a2;
}

uint64_t sub_1002CB8A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v12 = a6[6];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a2, v13);
  uint64_t v15 = (void *)(a6[7] + 24 * a1);
  *uint64_t v15 = a3;
  v15[1] = a4;
  v15[2] = a5;
  uint64_t v16 = a6[2];
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    a6[2] = v18;
  }
  return result;
}

_OWORD *sub_1002CB97C(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_1000761D0(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1002CB9E8(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10010197C(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_1002CBA58(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a5[6];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v13 = (void *)(a5[7] + 16 * a1);
  void *v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a5[2] = v16;
  }
  return result;
}

unint64_t sub_1002CBB18(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_1002CBB64(unint64_t a1, uint64_t a2, char a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(unsigned char *)(a4[7] + a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_1002CBC1C(unint64_t a1, uint64_t a2, __int16 a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(_WORD *)(a4[7] + 2 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_1002CBCD4(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_1000761D0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

uint64_t sub_1002CBD50(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_1002CBE08(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = sub_1000761D0(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_1002CBE70()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_10045B598);
  uint64_t v28 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *uint64_t v28 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v29 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v32 = v2 + 16;
  int64_t v30 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v31 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v24 >= v30) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_23;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v16 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 24 * v16;
    uint64_t v19 = *(void *)(v6 + 56) + v18;
    uint64_t v20 = *(void *)(v19 + 16);
    unint64_t v21 = *(void *)(v8 + 48) + v17;
    uint64_t v22 = *(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32);
    long long v33 = *(_OWORD *)v19;
    uint64_t result = (void *)v22(v21, v5, v1);
    uint64_t v23 = *(void *)(v8 + 56) + v18;
    *(_OWORD *)uint64_t v23 = v33;
    *(void *)(v23 + 16) = v20;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v30) {
    goto LABEL_23;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v30) {
      goto LABEL_23;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1002CC120()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_10045B5F0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    sub_10010DDC4(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_10010197C(v22, *(void *)(v4 + 56) + v18);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CC2E8()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B5E8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CC478()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_100455760);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_1000AA580(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    sub_1000761D0(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002CC660()
{
  return sub_1002CDDE0(&qword_10045B6C8);
}

void *sub_1002CC66C()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B678);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_10010DDC4(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    sub_10010197C(v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)sub_10006D0EC(v18, v19);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002CC85C()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_100458118);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = 24 * v15;
    uint64_t v18 = *(void *)(v2 + 56) + v17;
    uint64_t v19 = *(void *)v18;
    long long v20 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    long long v25 = *(_OWORD *)(v18 + 8);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v20;
    uint64_t v21 = *(void *)(v4 + 56) + v17;
    *(void *)uint64_t v21 = v19;
    *(_OWORD *)(v21 + 8) = v25;
    sub_10006D0EC(v20, *((unint64_t *)&v20 + 1));
    uint64_t result = (void *)sub_10006D0EC(v19, v25);
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CCA3C()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_10045B630);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)v19;
    LOBYTE(v19) = *(unsigned char *)(v19 + 8);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v21 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v21 = v20;
    *(unsigned char *)(v21 + 8) = v19;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002CCBF4()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B778);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 48) + v18);
    *(_OWORD *)(*(void *)(v4 + 48) + v18) = v19;
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    sub_10006D0EC(v19, *((unint64_t *)&v19 + 1));
    id result = v17;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CCDA8()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B828);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_1002CCF60()
{
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v2);
  int64_t v39 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_10045B5E0);
  uint64_t v34 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = static _DictionaryStorage.copy(original:)();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v42 = v5;
  if (!v6)
  {
    id result = (char *)swift_release();
    uint64_t v32 = v42;
    uint64_t v31 = v34;
LABEL_25:
    *uint64_t v31 = v32;
    return result;
  }
  uint64_t v7 = v5;
  id result = (char *)(v5 + 64);
  int64_t v9 = (char *)(v4 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  uint64_t v35 = v4 + 64;
  if (v7 != v4 || result >= &v9[8 * v10])
  {
    id result = (char *)memmove(result, v9, 8 * v10);
    uint64_t v7 = v42;
  }
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v41 = v4;
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  uint64_t v38 = v1 + 16;
  int64_t v36 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v37 = v1 + 32;
  uint64_t v16 = v39;
  uint64_t v15 = v40;
  uint64_t v17 = v42;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v11 << 6);
      uint64_t v20 = v41;
      goto LABEL_9;
    }
    int64_t v28 = v11 + 1;
    uint64_t v20 = v41;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v28 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v28);
    ++v11;
    if (!v29)
    {
      int64_t v11 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v29 = *(void *)(v35 + 8 * v11);
      if (!v29) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v29 - 1) & v29;
    unint64_t v19 = __clz(__rbit64(v29)) + (v11 << 6);
LABEL_9:
    unint64_t v21 = *(void *)(v1 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v16, *(void *)(v20 + 48) + v21, v15);
    uint64_t v22 = *(void *)(v20 + 56);
    uint64_t v23 = 16 * v19;
    int64_t v24 = (uint64_t *)(v22 + 16 * v19);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v17 + 48) + v21, v16, v15);
    uint64_t v27 = (uint64_t *)(*(void *)(v17 + 56) + v23);
    uint64_t *v27 = v25;
    v27[1] = v26;
    id result = (char *)sub_10006D0EC(v25, v26);
  }
  int64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_23:
    id result = (char *)swift_release();
    uint64_t v31 = v34;
    uint64_t v32 = v42;
    goto LABEL_25;
  }
  unint64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    int64_t v11 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v11 >= v36) {
      goto LABEL_23;
    }
    unint64_t v29 = *(void *)(v35 + 8 * v11);
    ++v30;
    if (v29) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_1002CD23C()
{
  return sub_1002CDC28((uint64_t *)&unk_10045B730);
}

void *sub_1002CD248()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_10045B610);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    uint64_t v18 = 8 * v15;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)swift_unknownObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002CD3F0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_100459698);
  int64_t v24 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    *int64_t v24 = v8;
    return result;
  }
  id result = (id)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v28 = v2 + 16;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void **)(*(void *)(v6 + 56) + v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
    id result = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1002CD688()
{
  return sub_1002CF008((uint64_t (*)(void))&type metadata accessor for CredentialType, &qword_10045B7C0);
}

id sub_1002CD6A8()
{
  return sub_1002CEE3C((uint64_t *)&unk_1004561C0);
}

void *sub_1002CD6B4()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_10045B800);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v28 = v1;
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_10023CB9C(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    uint64_t v22 = *(void *)(v4 + 56) + v20;
    uint64_t v23 = v30;
    long long v24 = v29[1];
    *(_OWORD *)uint64_t v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(void *)(v22 + 32) = v23;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1002CD8AC()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B718);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 8 * v15;
    uint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    void *v22 = v18;
    v22[1] = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    swift_retain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002CDA68()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_10045AFE0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    id result = v18;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CDC10()
{
  return sub_1002CE94C(&qword_100457218);
}

void *sub_1002CDC1C()
{
  return sub_1002CDC28(&qword_100458198);
}

void *sub_1002CDC28(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10006C51C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 4 * v16;
    int v18 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v16);
    uint64_t v19 = 8 * v16;
    uint64_t v20 = *(void *)(*(void *)(v3 + 56) + v19);
    *(_DWORD *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v19) = v20;
    id result = (void *)swift_retain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CDDC8()
{
  return sub_1002CDDE0(&qword_100458128);
}

void *sub_1002CDDD4()
{
  return sub_1002CDDE0((uint64_t *)&unk_10045B640);
}

void *sub_1002CDDE0(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10006C51C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v16);
    uint64_t v19 = 16 * v16;
    long long v20 = *(_OWORD *)(*(void *)(v3 + 48) + v19);
    *(_OWORD *)(*(void *)(v5 + 48) + v19) = v20;
    *(void *)(*(void *)(v5 + 56) + v17) = v18;
    sub_10006D0EC(v20, *((unint64_t *)&v20 + 1));
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CDF90()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_10045B680);
  int64_t v23 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t *v23 = v8;
    return result;
  }
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      int64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    char v18 = *(unsigned char *)(*(void *)(v6 + 56) + v16);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(unsigned char *)(*(void *)(v8 + 56) + v16) = v18;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1002CE220()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_10045B688);
  uint64_t v24 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v24 = v8;
    return result;
  }
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v28 = v2 + 16;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 2 * v16;
    __int16 v19 = *(_WORD *)(*(void *)(v6 + 56) + v18);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(_WORD *)(*(void *)(v8 + 56) + v18) = v19;
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1002CE4B4()
{
  uint64_t v1 = v0;
  sub_10006C51C((uint64_t *)&unk_10045B570);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_10023CB9C(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_1000AA580(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    id result = sub_1000761D0(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CE69C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10006C51C(&qword_10045B758);
  uint64_t v24 = v0;
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_23:
    id result = (void *)swift_release();
    *uint64_t v24 = v8;
    return result;
  }
  id result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  uint64_t v25 = v6 + 64;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  uint64_t v28 = v2 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      int64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_23;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v5, *(void *)(v6 + 48) + v17, v1);
    uint64_t v18 = 8 * v16;
    uint64_t v19 = *(void *)(*(void *)(v6 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v8 + 48) + v17, v5, v1);
    *(void *)(*(void *)(v8 + 56) + v18) = v19;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_23;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1002CE934()
{
  return sub_1002CE94C(&qword_100459E68);
}

void *sub_1002CE940()
{
  return sub_1002CE94C(&qword_10045B660);
}

void *sub_1002CE94C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10006C51C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CEAFC()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B6C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(_WORD *)(*(void *)(v4 + 48) + 2 * v15) = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CEC8C()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_100458138);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    __int16 v17 = *(_WORD *)(*(void *)(v2 + 48) + 2 * v15);
    uint64_t v18 = 16 * v15;
    long long v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(_WORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    id result = (void *)sub_10006D0EC(v19, *((unint64_t *)&v19 + 1));
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002CEE3C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_10006C51C(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    unint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CEFE8()
{
  return sub_1002CF008((uint64_t (*)(void))&type metadata accessor for URL, &qword_10045B788);
}

void *sub_1002CF008(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = a1(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v27 - v7;
  sub_10006C51C(a2);
  uint64_t v28 = v2;
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    *uint64_t v28 = v11;
    return result;
  }
  id result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  uint64_t v29 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v32 = v5 + 16;
  int64_t v30 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v31 = v5 + 32;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v15);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v8, *(void *)(v9 + 48) + v21, v4);
    uint64_t v22 = 8 * v20;
    uint64_t v23 = *(void *)(*(void *)(v9 + 56) + v22);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(void *)(v11 + 48) + v21, v8, v4);
    *(void *)(*(void *)(v11 + 56) + v22) = v23;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v30) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v15 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CF29C()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B768);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1002CF440()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B6D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1000AA580(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_1000761D0(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CF608()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_10045B690);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 2 * v15;
    LOWORD(v17) = *(_WORD *)(*(void *)(v2 + 56) + v20);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v19;
    v21[1] = v18;
    *(_WORD *)(*(void *)(v4 + 56) + v20) = (_WORD)v17;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1002CF7B8()
{
  uint64_t v1 = v0;
  sub_10006C51C(&qword_100455770);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    void *v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1002CF974(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002CFDE4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CF994(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0AC0(a1, a2, a3, (void *)*v3, &qword_10045B7F0, &qword_10045B7F8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CF9C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D1100(a1, a2, a3, (void *)*v3, &qword_1004548C0, (uint64_t (*)(void))&type metadata accessor for UUID);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFA00(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D00FC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFA20(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D05F8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10045B580, &qword_100455790);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFA50(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D05F8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10045B5B0, &qword_100457240);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFA80(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D024C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFAA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D14F0(a1, a2, a3, *v3, (uint64_t *)&unk_10045B7A0);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFAC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D03B8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10045B7B0, &qword_100459690);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFAF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D03B8(a1, a2, a3, (void *)*v3, &qword_10045B7D8, (uint64_t *)&unk_10045B7E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFB28(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D05F8(a1, a2, a3, (void *)*v3, (uint64_t *)&unk_10045B810, &qword_1004546B0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFB58(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0788(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFB78(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0934(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFB98(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0AC0(a1, a2, a3, (void *)*v3, &qword_10045B6D8, (uint64_t *)&unk_10045B6E0);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFBC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D14F0(a1, a2, a3, *v3, &qword_100459CD8);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFBF0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0C68(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFC10(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0DE8(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFC30(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D17AC(a1, a2, a3, (void *)*v3, &qword_10045B5D0, &qword_10045B5D8);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFC60(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D0F90(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFC80(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D1100(a1, a2, a3, (void *)*v3, &qword_10045B750, (uint64_t (*)(void))type metadata accessor for PresentmentInfo);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFCBC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D1348(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFCDC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D14F0(a1, a2, a3, *v3, &qword_10045B760);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFD04(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D164C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFD24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D17AC(a1, a2, a3, (void *)*v3, &qword_10045B650, &qword_10045B658);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFD54(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D17AC(a1, a2, a3, (void *)*v3, &qword_10045B668, &qword_10045B670);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFD84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D1958(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFDA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D1AF4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1002CFDC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1002D1C80(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1002CFDE4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B590);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  int64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002CFF50(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C((uint64_t *)&unk_10045B600);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    sub_10006C51C(&qword_100454148);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D00FC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B830);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  unint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D024C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_100459B10);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D03B8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10006C51C(a5);
  uint64_t v13 = *(void *)(sub_10006C51C(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(sub_10006C51C(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  int64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D05F8(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10006C51C(a5);
    uint64_t v13 = (void *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    _OWORD v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = &_swiftEmptyArrayStorage;
  }
  unint64_t v16 = (unint64_t)(v13 + 4);
  unint64_t v17 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11) {
      memmove(v13 + 4, a4 + 4, 8 * v11);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    sub_10006C51C(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D0788(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B720);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 72 * v8) {
      memmove(v10 + 4, a4 + 4, 72 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 72 * v8 || v12 >= v13 + 72 * v8)
  {
    sub_10006C51C(&qword_10045B728);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D0934(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B6F0);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 6);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 4;
  int64_t v14 = a4 + 4;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v10 + 4, a4 + 4, v8 << 6);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    sub_10006C51C(&qword_10045B6F8);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D0AC0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10006C51C(a5);
    unint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    _OWORD v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    unint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    sub_10006C51C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D0C68(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B710);
    int64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 72 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D0DE8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C((uint64_t *)&unk_10045B700);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_10006C51C(&qword_100459D28);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D0F90(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_100455FA8);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D1100(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10006C51C(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  int64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D1348(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_1004555D0);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_10006C51C(&qword_10045B740);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D14F0(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    sub_10006C51C(a5);
    size_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    size_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v9] || v14 >= &v15[8 * v9])
  {
    memcpy(v14, v15, 8 * v9);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D164C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B770);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D17AC(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10006C51C(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    _OWORD v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 24);
  }
  else
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 24 * v11) {
      memmove(v13 + 4, a4 + 4, 24 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 24 * v11 || v15 >= v16 + 24 * v11)
  {
    sub_10006C51C(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D1958(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_10045B698);
    int64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 4;
  uint64_t v13 = a4 + 4;
  size_t v14 = 3 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    sub_10006C51C((uint64_t *)&unk_10045B6A0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D1AF4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C(&qword_1004587F0);
    int64_t v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    sub_10006C51C(&qword_100455778);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D1C80(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10006C51C((uint64_t *)&unk_10045B6B0);
    int64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    int64_t v12 = v11 - 32;
    if (v11 < 32) {
      int64_t v12 = v11 - 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = v12 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    int64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  unint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[2 * v8]) {
      memmove(v13, v14, 2 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[2 * v8] || v13 >= &v14[2 * v8])
  {
    memcpy(v13, v14, 2 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL sub_1002D1DDC()
{
  return sub_1002D2D5C();
}

uint64_t sub_1002D1E04(uint64_t a1, uint64_t a2)
{
  return sub_1002D1E34(a1, a2, (void (*)(void))type metadata accessor for DSKBLEPairing.BLEUnpairingRequest);
}

uint64_t sub_1002D1E1C(uint64_t a1, uint64_t a2)
{
  return sub_1002D1E34(a1, a2, (void (*)(void))type metadata accessor for DSKBLEPairing.BLEPairingRequest);
}

uint64_t sub_1002D1E34(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    if (!((unint64_t)*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v22 < v3) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v23 + v7;
    if (!__OFADD__(v23, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if ((unint64_t)*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 - v8;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      *uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *v4 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v14 = v13 + 32;
  unint64_t v15 = (char *)(v13 + 32 + 8 * v5);
  v6(0);
  swift_arrayDestroy();
  if (v7)
  {
    if ((unint64_t)*v4 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v3;
      if (!__OFSUB__(v24, v3))
      {
LABEL_17:
        if (v17 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v18 = (char *)(v14 + 8 * v3);
        if (v5 != v3 || v15 >= &v18[8 * v17]) {
          memmove(v15, v18, 8 * v17);
        }
        if (!((unint64_t)*v4 >> 62))
        {
          uint64_t v19 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
          uint64_t v20 = v19 + v7;
          if (!__OFADD__(v19, v7))
          {
LABEL_23:
            *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) = v20;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v20 = v25 + v7;
        if (!__OFADD__(v25, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v16 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v17 = v16 - v3;
      if (!__OFSUB__(v16, v3)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1002D2148(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100258EB0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D22B4(uint64_t a1, uint64_t a2)
{
  return sub_1002D2464(a1, a2, (void (*)(void))type metadata accessor for SERequest);
}

uint64_t sub_1002D22CC(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100258FC0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_10006C51C(&qword_100459CC8);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[3 * a2 + 4];
    if (a1 != a2 || &v4[3 * a1 + 4] >= (void *)&v16[24 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[3 * a1 + 4], v16, 24 * v15);
    }
    uint64_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D244C(uint64_t a1, uint64_t a2)
{
  return sub_1002D2464(a1, a2, (void (*)(void))&type metadata accessor for InstanceInfoInternal);
}

uint64_t sub_1002D2464(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = a3;
    uint64_t v3 = a2;
    uint64_t v5 = a1;
    if (!(*v4 >> 62))
    {
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v20 < v3) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v8 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = v5 - v3;
  if (__OFSUB__(0, v8))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v10 = v21 + v7;
    if (!__OFADD__(v21, v7)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v4 >> 62) {
    goto LABEL_32;
  }
  uint64_t v9 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v10 = v9 - v8;
  if (__OFADD__(v9, v7)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v11 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v11;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v11 & 0x8000000000000000) != 0
    || (v11 & 0x4000000000000000) != 0
    || (uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8, v10 > *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v11 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v11;
      uint64_t v13 = v11 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  v6(0);
  swift_arrayDestroy();
  if (v7)
  {
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v15 = v22 - v3;
      if (!__OFSUB__(v22, v3))
      {
LABEL_17:
        if (v15 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v16 = (const void *)(v13 + 32 + 8 * v3);
        if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v16 + 8 * v15) {
          memmove((void *)(v13 + 32 + 8 * v5), v16, 8 * v15);
        }
        if (!(v11 >> 62))
        {
          uint64_t v17 = *(void *)(v13 + 16);
          uint64_t v18 = v17 + v7;
          if (!__OFADD__(v17, v7))
          {
LABEL_23:
            *(void *)(v13 + 16) = v18;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v18 = v23 + v7;
        if (!__OFADD__(v23, v7)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v14 = *(void *)(v13 + 16);
      uint64_t v15 = v14 - v3;
      if (!__OFSUB__(v14, v3)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1002D274C(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    if (!(*v3 >> 62))
    {
      if (*(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18 < v2) {
    goto LABEL_29;
  }
LABEL_4:
  uint64_t v6 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v5 = v4 - v2;
  if (__OFSUB__(0, v6))
  {
LABEL_31:
    __break(1u);
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v8 = v19 + v5;
    if (!__OFADD__(v19, v5)) {
      goto LABEL_8;
    }
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (*v3 >> 62) {
    goto LABEL_32;
  }
  uint64_t v7 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v8 = v7 - v6;
  if (__OFADD__(v7, v5)) {
    goto LABEL_34;
  }
LABEL_8:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v9;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v9 & 0x8000000000000000) != 0
    || (v9 & 0x4000000000000000) != 0
    || (uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8, v8 > *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v9 >> 62))
    {
LABEL_13:
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v3 = v9;
      uint64_t v11 = v9 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_14;
    }
LABEL_35:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_14:
  sub_10007582C(0, (unint64_t *)&qword_10045B820);
  swift_arrayDestroy();
  if (v5)
  {
    if (v9 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v13 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_17:
        if (v13 < 0)
        {
LABEL_42:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v14 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v14 + 8 * v13) {
          memmove((void *)(v11 + 32 + 8 * v4), v14, 8 * v13);
        }
        if (!(v9 >> 62))
        {
          uint64_t v15 = *(void *)(v11 + 16);
          uint64_t v16 = v15 + v5;
          if (!__OFADD__(v15, v5))
          {
LABEL_23:
            *(void *)(v11 + 16) = v16;
            goto LABEL_24;
          }
          goto LABEL_41;
        }
LABEL_39:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = v21 + v5;
        if (!__OFADD__(v21, v5)) {
          goto LABEL_23;
        }
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 16);
      uint64_t v13 = v12 - v2;
      if (!__OFSUB__(v12, v2)) {
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_39;
  }
LABEL_24:

  return specialized Array._endMutation()();
}

uint64_t sub_1002D2A3C(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100259A30(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  sub_10006C51C(&qword_100459CE8);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[16 * a2 + 32];
    if (a1 != a2 || &v4[16 * a1 + 32] >= &v16[16 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[16 * a1 + 32], v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002D2BB0(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100455800);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002D2C10()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1002D2C50()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_1002D2C90(uint64_t *a1)
{
  return sub_1002BFC70(a1, v1[2], v1[3], v1[4]) & 1;
}

uint64_t sub_1002D2CB4(uint64_t *a1)
{
  return sub_1002BFB20(a1, v1[2], v1[3], v1[4]) & 1;
}

BOOL sub_1002D2CD8()
{
  return sub_1002D2D5C();
}

uint64_t sub_1002D2CFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002D2D44(uint64_t a1, uint64_t a2)
{
  return sub_1002D2464(a1, a2, (void (*)(void))&type metadata accessor for CredentialInternal);
}

BOOL sub_1002D2D5C()
{
  return (static UUID.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_1002D2DB4()
{
  return sub_1002D2C50() & 1;
}

uint64_t sub_1002D2DD0(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v57 = a2;
  uint64_t v3 = type metadata accessor for SymmetricKey();
  uint64_t v56 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SharedSecret();
  uint64_t v55 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v58 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v48 - v17;
  unint64_t v59 = 0xD000000000000012;
  unint64_t v60 = 0x80000001003B29F0;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v19 = sub_1002C0B68((uint64_t)v61), (v20 & 1) != 0))
  {
    sub_1000AA580(*(void *)(a1 + 56) + 32 * v19, (uint64_t)&v62);
  }
  else
  {
    long long v62 = 0u;
    long long v63 = 0u;
  }
  sub_1000AE724((uint64_t)v61);
  if (!*((void *)&v63 + 1))
  {
    sub_10008E734((uint64_t)&v62, (uint64_t *)&unk_1004556C0);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    sub_1000AE7D8();
    unint64_t v26 = "Missing ephemeralPublicKey";
    goto LABEL_11;
  }
  uint64_t v53 = v3;
  uint64_t v54 = v10;
  uint64_t v21 = v6;
  uint64_t v22 = v11;
  uint64_t v52 = v7;
  uint64_t v23 = Data.init(base64Encoded:options:)();
  unint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if (v25 >> 60 == 15)
  {
    sub_1000AE7D8();
    unint64_t v26 = "Invalid ephemeralPublicKey";
LABEL_11:
    sub_100299FAC(0, 1, 0xD00000000000001ALL, (unint64_t)(v26 - 32) | 0x8000000000000000, 0);
    return swift_willThrow();
  }
  uint64_t v51 = v23;
  unint64_t v59 = 1635017060;
  unint64_t v60 = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16))
  {
    unint64_t v28 = sub_1002C0B68((uint64_t)v61);
    uint64_t v29 = v22;
    if (v30)
    {
      sub_1000AA580(*(void *)(a1 + 56) + 32 * v28, (uint64_t)&v62);
    }
    else
    {
      long long v62 = 0u;
      long long v63 = 0u;
    }
  }
  else
  {
    long long v62 = 0u;
    long long v63 = 0u;
    uint64_t v29 = v22;
  }
  uint64_t v31 = v21;
  sub_1000AE724((uint64_t)v61);
  uint64_t v32 = v54;
  if (!*((void *)&v63 + 1))
  {
    sub_10008E734((uint64_t)&v62, (uint64_t *)&unk_1004556C0);
    goto LABEL_22;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_22:
    sub_1000AE7D8();
    sub_100299FAC(0, 1, 0x20676E697373694DLL, 0xEC00000061746164, 0);
    swift_willThrow();
    uint64_t v37 = v51;
    unint64_t v38 = v25;
    return sub_100075868(v37, v38);
  }
  uint64_t v50 = v29;
  uint64_t v33 = Data.init(base64Encoded:options:)();
  unint64_t v35 = v34;
  swift_bridgeObjectRelease();
  unint64_t v36 = v25;
  if (v35 >> 60 == 15)
  {
    sub_1000AE7D8();
    sub_100299FAC(0, 1, 0x2064696C61766E49, 0xEC00000061746164, 0);
    swift_willThrow();
    uint64_t v37 = v51;
    unint64_t v38 = v25;
    return sub_100075868(v37, v38);
  }
  uint64_t v48 = v33;
  uint64_t v49 = v35;
  uint64_t v39 = v51;
  *(void *)&v61[0] = v51;
  *((void *)&v61[0] + 1) = v36;
  sub_10006D0EC(v51, v36);
  uint64_t v40 = v64;
  P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  if (v40)
  {
    sub_100075868(v39, v36);
    uint64_t v37 = v48;
    unint64_t v38 = v49;
    return sub_100075868(v37, v38);
  }
  P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
  uint64_t v64 = type metadata accessor for SHA256();
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v41 = P256.KeyAgreement.PublicKey.x963Representation.getter();
  unint64_t v43 = v42;
  uint64_t v57 = *(void (**)(char *, uint64_t))(v58 + 8);
  v58 += 8;
  v57(v15, v50);
  *(void *)&v61[0] = v39;
  *((void *)&v61[0] + 1) = v36;
  sub_1000758F4(v39, v36);
  sub_10006D0EC(v41, v43);
  sub_100141068(v41, v43);
  sub_10006D144(v41, v43);
  sub_10006D144(v41, v43);
  long long v44 = v61[0];
  long long v62 = v61[0];
  sub_1002D3AA0();
  sub_10008BFB8();
  SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
  uint64_t v45 = sub_10006D144(v44, *((unint64_t *)&v44 + 1));
  __chkstk_darwin(v45, v46);
  uint64_t v47 = v48;
  *(&v48 - 2) = v48;
  *(&v48 - 1) = v49;
  SymmetricKey.withUnsafeBytes<A>(_:)();
  sub_100075868(v39, v36);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v53);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v32, v52);
  v57(v18, v50);
  sub_100075868(v47, v49);
  return *(void *)&v61[0];
}

uint64_t sub_1002D3554(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SharedSecret();
  uint64_t v50 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v54 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for P256.KeyAgreement.PrivateKey();
  uint64_t v55 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v53 = (char *)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  unint64_t v24 = (char *)v41 - v23;
  uint64_t v58 = a3;
  unint64_t v59 = a4;
  sub_10006D0EC(a3, a4);
  uint64_t v25 = v60;
  uint64_t result = P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
  if (!v25)
  {
    uint64_t v60 = v17;
    uint64_t v46 = v13;
    uint64_t v47 = v16;
    long long v44 = v9;
    uint64_t v45 = v10;
    int64_t v27 = v53;
    P256.KeyAgreement.PrivateKey.init()();
    unint64_t v28 = v54;
    P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:)();
    unint64_t v43 = v24;
    v41[1] = type metadata accessor for SHA256();
    P256.KeyAgreement.PrivateKey.publicKey.getter();
    uint64_t v29 = P256.KeyAgreement.PublicKey.x963Representation.getter();
    unint64_t v31 = v30;
    uint64_t v32 = *(void (**)(char *, uint64_t))(v60 + 8);
    v60 += 8;
    unint64_t v42 = v32;
    v32(v21, v47);
    uint64_t v58 = v29;
    unint64_t v59 = v31;
    uint64_t v33 = a3;
    sub_10006D0EC(a3, a4);
    sub_10006D0EC(v29, v31);
    sub_100141068(a3, a4);
    sub_10006D144(a3, a4);
    sub_10006D144(v29, v31);
    uint64_t v34 = v58;
    unint64_t v35 = v59;
    uint64_t v56 = v58;
    unint64_t v57 = v59;
    sub_1002D3AA0();
    sub_10008BFB8();
    unint64_t v36 = v44;
    SharedSecret.x963DerivedSymmetricKey<A, B>(using:sharedInfo:outputByteCount:)();
    uint64_t v37 = sub_10006D144(v34, v35);
    __chkstk_darwin(v37, v38);
    uint64_t v39 = v49;
    v41[-6] = v48;
    v41[-5] = v39;
    v41[-4] = v33;
    v41[-3] = a4;
    v41[-2] = v27;
    sub_10006C51C((uint64_t *)&unk_100455730);
    SymmetricKey.withUnsafeBytes<A>(_:)();
    uint64_t v40 = v55;
    (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v52);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v28, v45);
    v42(v43, v47);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v46);
    return v58;
  }
  return result;
}

unint64_t sub_1002D3AA0()
{
  unint64_t result = qword_1004568C0;
  if (!qword_1004568C0)
  {
    type metadata accessor for SHA256();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1004568C0);
  }
  return result;
}

uint64_t sub_1002D3AF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, char *a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t *a7@<X8>)
{
  uint64_t v59 = a6;
  uint64_t v55 = a4;
  unint64_t v56 = a5;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  long long v62 = a7;
  uint64_t v60 = type metadata accessor for P256.KeyAgreement.PublicKey();
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60, v8);
  unint64_t v57 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10006C51C(&qword_1004568B0);
  __chkstk_darwin(v10 - 8, v11);
  int64_t v66 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v13);
  uint64_t v67 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v68 = *(void *)(v15 - 8);
  uint64_t v69 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for SymmetricKey();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70[0] = a1;
  v70[1] = 16;
  sub_10006C51C(&qword_10045B838);
  sub_1002D41F4(&qword_10045B840);
  SymmetricKey.init<A>(data:)();
  uint64_t v24 = a1 + 16;
  if (!a1) {
    uint64_t v24 = 0;
  }
  v70[0] = v24;
  v70[1] = 16;
  sub_1002D41F4(&qword_10045B848);
  uint64_t v25 = v71;
  AES.GCM.Nonce.init<A>(data:)();
  if (v25) {
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }
  uint64_t v54 = v20;
  uint64_t v71 = v19;
  uint64_t v27 = (uint64_t)v66;
  v70[0] = v64;
  v70[1] = v65;
  uint64_t v29 = v68;
  uint64_t v28 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v66, v18, v69);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v28);
  sub_10008BFB8();
  unint64_t v30 = v67;
  static AES.GCM.seal<A>(_:using:nonce:)();
  sub_10008E734(v27, &qword_1004568B0);
  sub_10006C51C(&qword_100455670);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_100378460;
  strcpy((char *)v70, "version");
  v70[1] = 0xE700000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 72) = v32;
  *(void *)(inited + 80) = v33;
  strcpy((char *)v70, "publicKeyHash");
  HIWORD(v70[1]) = -4864;
  AnyHashable.init<A>(_:)();
  uint64_t v34 = sub_1002B3BD0(v55, v56);
  unint64_t v36 = v35;
  Swift::String v37 = Data.base64EncodedString(options:)(0);
  uint64_t v65 = v18;
  int64_t v66 = v23;
  sub_10006D144(v34, v36);
  *(void *)(inited + 168) = &type metadata for String;
  *(Swift::String *)(inited + 144) = v37;
  v70[0] = 0xD000000000000012;
  v70[1] = 0x80000001003B29F0;
  AnyHashable.init<A>(_:)();
  uint64_t v38 = v57;
  P256.KeyAgreement.PrivateKey.publicKey.getter();
  uint64_t v39 = P256.KeyAgreement.PublicKey.x963Representation.getter();
  unint64_t v41 = v40;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v38, v60);
  Swift::String v42 = Data.base64EncodedString(options:)(0);
  sub_10006D144(v39, v41);
  *(void *)(inited + 240) = &type metadata for String;
  *(Swift::String *)(inited + 216) = v42;
  v70[0] = 1635017060;
  v70[1] = 0xE400000000000000;
  AnyHashable.init<A>(_:)();
  uint64_t v43 = AES.GCM.SealedBox.ciphertext.getter();
  unint64_t v45 = v44;
  uint64_t v46 = AES.GCM.SealedBox.tag.getter();
  unint64_t v48 = v47;
  v70[0] = v43;
  v70[1] = v45;
  sub_10006D0EC(v43, v45);
  sub_100141068(v46, v48);
  sub_10006D144(v46, v48);
  sub_10006D144(v43, v45);
  uint64_t v49 = v70[0];
  unint64_t v50 = v70[1];
  Swift::String v51 = Data.base64EncodedString(options:)(0);
  sub_10006D144(v49, v50);
  *(void *)(inited + 312) = &type metadata for String;
  *(Swift::String *)(inited + 288) = v51;
  unint64_t v52 = sub_1001DB24C(inited);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v30, v63);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v65, v69);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v66, v71);
  unint64_t *v62 = v52;
  return result;
}

uint64_t sub_1002D41D0@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return sub_1002D3AF8(a1, *(void *)(v2 + 16), *(char **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), a2);
}

uint64_t sub_1002D41F4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10006D220(&qword_10045B838);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002D423C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  unint64_t v52 = a4;
  unint64_t v53 = a3;
  uint64_t v55 = a2;
  uint64_t v5 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v49 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  __chkstk_darwin(v5, v6);
  Swift::String v51 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v46 - v14;
  uint64_t v16 = type metadata accessor for SymmetricKey();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = a1;
  uint64_t v59 = 16;
  sub_10006C51C(&qword_10045B838);
  sub_1002D41F4(&qword_10045B840);
  SymmetricKey.init<A>(data:)();
  uint64_t v21 = a1 + 16;
  if (!a1) {
    uint64_t v21 = 0;
  }
  uint64_t v58 = v21;
  uint64_t v59 = 16;
  sub_1002D41F4(&qword_10045B848);
  uint64_t v22 = v60;
  AES.GCM.Nonce.init<A>(data:)();
  if (v22) {
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  }
  uint64_t v60 = v12;
  uint64_t v47 = v16;
  unint64_t v48 = v15;
  uint64_t v46 = v17;
  uint64_t v25 = v52;
  unsigned __int8 v24 = BYTE6(v53);
  unint64_t v26 = v53 >> 62;
  uint64_t v27 = v20;
  uint64_t v28 = 0;
  uint64_t v29 = v8;
  switch(v53 >> 62)
  {
    case 1uLL:
      LODWORD(v28) = HIDWORD(v55) - v55;
      if (__OFSUB__(HIDWORD(v55), v55)) {
        goto LABEL_22;
      }
      uint64_t v28 = (int)v28;
LABEL_10:
      uint64_t v33 = v28 - 16;
      if (__OFSUB__(v28, 16))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
        JUMPOUT(0x1002D4744);
      }
      (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v60, v48, v8);
      if (v33 < 0) {
        goto LABEL_20;
      }
      uint64_t v58 = Data.subdata(in:)();
      uint64_t v59 = v34;
      uint64_t v35 = 0;
      switch((int)v26)
      {
        case 1:
          if (__OFSUB__(HIDWORD(v55), v55)) {
            goto LABEL_24;
          }
          uint64_t v35 = HIDWORD(v55) - (int)v55;
LABEL_17:
          if (v35 < v33) {
            goto LABEL_21;
          }
          uint64_t v56 = Data.subdata(in:)();
          uint64_t v57 = v38;
          sub_10008BFB8();
          uint64_t v39 = v51;
          AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
          uint64_t v40 = static AES.GCM.open(_:using:)();
          uint64_t v42 = v46;
          uint64_t v41 = v47;
          uint64_t v43 = v40;
          uint64_t v45 = v44;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v39, v50);
          (*(void (**)(char *, uint64_t))(v54 + 8))(v48, v29);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v27, v41);
          uint64_t *v25 = v43;
          v25[1] = v45;
          break;
        case 2:
          uint64_t v37 = *(void *)(v55 + 16);
          uint64_t v36 = *(void *)(v55 + 24);
          uint64_t v35 = v36 - v37;
          if (!__OFSUB__(v36, v37)) {
            goto LABEL_17;
          }
          goto LABEL_25;
        case 3:
          goto LABEL_17;
        default:
          uint64_t v35 = v24;
          goto LABEL_17;
      }
      return result;
    case 2uLL:
      uint64_t v31 = *(void *)(v55 + 16);
      uint64_t v30 = *(void *)(v55 + 24);
      BOOL v32 = __OFSUB__(v30, v31);
      uint64_t v28 = v30 - v31;
      if (!v32) {
        goto LABEL_10;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v28 = BYTE6(v53);
      goto LABEL_10;
  }
}

uint64_t sub_1002D4764@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1002D423C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1002D4780(uint64_t a1, uint64_t a2)
{
  v3[34] = a2;
  v3[35] = v2;
  v3[33] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[36] = v4;
  v3[37] = *(void *)(v4 - 8);
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  return _swift_task_switch(sub_1002D4860, 0, 0);
}

uint64_t sub_1002D4860()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void *)(*(void *)(v0 + 280) + 16);
  uint64_t v2 = UUID.uuidString.getter();
  if (!*(void *)(v1 + 16) || (uint64_t v4 = sub_1002C0AD0(v2, v3), (v5 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v27 = *(void *)(v0 + 296);
    uint64_t v26 = *(void *)(v0 + 304);
    uint64_t v28 = *(void *)(v0 + 288);
    uint64_t v29 = *(void *)(v0 + 272);
    uint64_t v30 = type metadata accessor for Logger();
    sub_10008E55C(v30, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v26, v29, v28);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    BOOL v33 = os_log_type_enabled(v31, v32);
    uint64_t v35 = *(void *)(v0 + 296);
    uint64_t v34 = *(void *)(v0 + 304);
    if (v33)
    {
      uint64_t v46 = *(void *)(v0 + 288);
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v37 = UUID.uuidString.getter();
      *(void *)(v0 + 232) = sub_100290514(v37, v38, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v46);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "SLAMInstall createCredential: %s is not a valid configuration", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v35 + 8))(*(void *)(v0 + 304), *(void *)(v0 + 288));
    }

    sub_10008E594();
    swift_allocError();
    *uint64_t v39 = 2;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)(v0 + 280);
  uint64_t v7 = (void *)(*(void *)(v1 + 56) + 16 * v4);
  *(void *)(v0 + 328) = *v7;
  *(void *)(v0 + 336) = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v8 = *(_OWORD *)(v6 + 24);
  long long v9 = *(_OWORD *)(v6 + 40);
  *(_WORD *)(v0 + 152) = *(_WORD *)(v6 + 56);
  *(_OWORD *)(v0 + 120) = v8;
  *(_OWORD *)(v0 + 136) = v9;
  *(_OWORD *)(v0 + 200) = *(_OWORD *)(v6 + 24);
  *(_OWORD *)(v0 + 184) = *(_OWORD *)(v0 + 136);
  sub_100079AE8(v0 + 200);
  sub_100079AE8(v0 + 184);
  sub_1001AF4B4();
  char v11 = v10;
  sub_100079B14(v0 + 200);
  sub_100079B14(v0 + 184);
  if (v11)
  {
    swift_bridgeObjectRelease();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v13 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v16 = type metadata accessor for Logger();
    sub_10008E55C(v16, (uint64_t)qword_1004686A8);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
    v17(v12, v15, v13);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 296);
    if (v20)
    {
      uint64_t v45 = *(void *)(v0 + 288);
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      v47[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v24 = UUID.uuidString.getter();
      *(void *)(v0 + 256) = sub_100290514(v24, v25, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v45);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Created credential that failed install %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v22 + 8))(*(void *)(v0 + 312), *(void *)(v0 + 288));
    }

    v17(*(void *)(v0 + 264), *(void *)(v0 + 272), *(void *)(v0 + 288));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
LABEL_14:
    return v40();
  }
  uint64_t v42 = self;
  NSString v43 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 344) = v43;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 56) = v0 + 216;
  *(void *)(v0 + 24) = sub_1002D4E78;
  uint64_t v44 = swift_continuation_init();
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  *(void *)(v0 + 88) = 0x40000000;
  *(void *)(v0 + 96) = sub_10016999C;
  *(void *)(v0 + 104) = &unk_1004191D0;
  *(void *)(v0 + 112) = v44;
  sub_100058540(v42, v43, (void *)(v0 + 80));
  return _swift_continuation_await(v0 + 16);
}

uint64_t sub_1002D4E78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 352) = v1;
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_1002D543C;
  }
  else
  {
    uint64_t v2 = sub_1002D4F90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1002D4F90()
{
  uint64_t v29 = v0;
  uint64_t v1 = *(void **)(v0 + 216);

  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  id v4 = sub_1000155C0(v1, v3 + 32, v2);
  swift_release();

  if (v4)
  {
    swift_willThrow();

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      long long v8 = (uint8_t *)swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)long long v8 = 136315138;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      *(void *)(v0 + 240) = sub_100290514(v9, v10, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error encountered %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v14 = *(void *)(v0 + 272);
    uint64_t v15 = type metadata accessor for Logger();
    sub_10008E55C(v15, (uint64_t)qword_1004686A8);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
    v16(v11, v14, v12);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 320);
    uint64_t v21 = *(void *)(v0 + 296);
    if (v19)
    {
      uint64_t v27 = *(void *)(v0 + 288);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v28[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = UUID.uuidString.getter();
      *(void *)(v0 + 248) = sub_100290514(v23, v24, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v27);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully created credential %s with SLAM", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v21 + 8))(*(void *)(v0 + 320), *(void *)(v0 + 288));
    }

    v16(*(void *)(v0 + 264), *(void *)(v0 + 272), *(void *)(v0 + 288));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v25();
}

uint64_t sub_1002D543C()
{
  uint64_t v11 = v0;
  uint64_t v1 = (void *)v0[43];
  swift_willThrow();

  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10008E55C(v2, (uint64_t)qword_1004686A8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[30] = sub_100290514(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error encountered %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_1002D5680(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  sub_10006C51C(&qword_100455EB0);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  sub_10006C51C(&qword_100454608);
  v2[14] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for SECCredentialConfig();
  v2[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[16] = v6;
  v2[17] = *(void *)(v6 + 64);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_1002D588C, 0, 0);
}

uint64_t sub_1002D588C()
{
  if (qword_100453958 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_100468A98;
  *(void *)(v0 + 168) = qword_100468A98;
  return _swift_task_switch(sub_1002D5924, v1, 0);
}

uint64_t sub_1002D5924()
{
  sub_10008DB54(*(void *)(v0 + 112));
  *(void *)(v0 + 176) = 0;
  return _swift_task_switch(sub_1002D59B8, 0, 0);
}

uint64_t sub_1002D59B8()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[14];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[16] + 48))(v1, 1, v0[15]) == 1)
  {
    sub_1002D6974(v1);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[11];
    uint64_t v2 = v0[12];
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[5];
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[12];
    if (v9)
    {
      uint64_t v43 = v0[10];
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v13 = UUID.uuidString.getter();
      v0[2] = sub_100290514(v13, v14, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v43);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Metadata for %s absent, fetching from SHIM", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v10 + 8))(v0[12], v0[10]);
    }

    uint64_t v28 = v0[10];
    uint64_t v29 = v0[11];
    uint64_t v30 = v0[9];
    UUID.uuidString.getter();
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t (*)())(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v30, 1, v28);
    if (v31 == 1)
    {
      __break(1u);
    }
    else
    {
      uint64_t v34 = v0[19];
      uint64_t v35 = v0[15];
      uint64_t v36 = v0[10];
      uint64_t v37 = v0[11];
      uint64_t v38 = v0[9];
      sub_10006C51C(&qword_100459D78);
      uint64_t v39 = swift_allocObject();
      *(_OWORD *)(v39 + 16) = xmmword_100378290;
      *(void *)(v39 + 32) = &off_10040F130;
      *(void *)(v39 + 40) = 0xD00000000000001CLL;
      *(void *)(v39 + 48) = 0x80000001003BCFC0;
      *(_OWORD *)(v39 + 56) = xmmword_10037EB50;
      *(_OWORD *)(v39 + 72) = xmmword_10037EB60;
      *(_OWORD *)(v39 + 88) = xmmword_10037EB70;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v34, v38, v36);
      uint64_t v40 = (void *)(v34 + *(int *)(v35 + 20));
      *uint64_t v40 = 0x5F544E454D594150;
      v40[1] = 0xEF5449534E415254;
      _OWORD v40[2] = v39;
      uint64_t v32 = qword_100468A98;
      v0[23] = qword_100468A98;
      uint64_t v31 = sub_1002D5F7C;
      uint64_t v33 = 0;
    }
    return _swift_task_switch(v31, v32, v33);
  }
  else
  {
    sub_10008E6D0(v1, v0[20]);
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v15 = v0[13];
    uint64_t v17 = v0[10];
    uint64_t v16 = v0[11];
    uint64_t v18 = v0[5];
    uint64_t v19 = type metadata accessor for Logger();
    sub_10008E55C(v19, (uint64_t)qword_1004686A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v18, v17);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    uint64_t v23 = v0[13];
    uint64_t v24 = v0[11];
    if (v22)
    {
      uint64_t v44 = v0[10];
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      *(_DWORD *)unint64_t v25 = 136315138;
      uint64_t v26 = UUID.uuidString.getter();
      v0[3] = sub_100290514(v26, v27, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v44);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Getting locally stored metadata for %s", v25, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v24 + 8))(v0[13], v0[10]);
    }

    sub_10008E6D0(v0[20], v0[4]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = (uint64_t (*)(void))v0[1];
    return v41();
  }
}

uint64_t sub_1002D5F7C()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v5 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[6];
  id v7 = [*(id *)(v0[23] + 112) viewContext];
  v0[24] = v7;
  sub_100140050(v2, v1);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  v0[25] = v9;
  *(void *)(v9 + 16) = v7;
  sub_10008E6D0(v1, v9 + v8);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))(v4, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v6);
  v7;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[26] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1002D60F8;
  uint64_t v11 = v0[8];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v10, v11, sub_10028AE60, v9, (char *)&type metadata for () + 8);
}

uint64_t sub_1002D60F8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[23];
  (*(void (**)(void, void))(v2[7] + 8))(v2[8], v2[6]);
  swift_release();
  if (v0) {
    uint64_t v4 = sub_1002D63D0;
  }
  else {
    uint64_t v4 = sub_1002D6298;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1002D6298()
{
  return _swift_task_switch(sub_1002D6300, 0, 0);
}

uint64_t sub_1002D6300()
{
  sub_10008E6D0(v0[19], v0[4]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1002D63D0()
{
  return _swift_task_switch(sub_1002D6438, 0, 0);
}

uint64_t sub_1002D6438()
{
  sub_1001400B4(*(void *)(v0 + 152));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002D6504()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002D65C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SECNetworkShim()
{
  return self;
}

uint64_t sub_1002D6640()
{
  *(void *)(v0 + 16) = sub_1001DB39C((uint64_t)&off_10040E688);
  *(void *)(v0 + 24) = 0xD000000000000014;
  *(void *)(v0 + 32) = 0x80000001003B1620;
  *(void *)(v0 + 40) = 0xD00000000000001CLL;
  *(void *)(v0 + 48) = 0x80000001003BD010;
  *(_WORD *)(v0 + 56) = 256;
  return v0;
}

uint64_t sub_1002D66A4()
{
  return _swift_task_switch(sub_1002D66C0, 0, 0);
}

uint64_t sub_1002D66C0()
{
  if (qword_1004536D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10008E55C(v1, (uint64_t)qword_1004686A8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Kicked off NetworkShim", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1002D67D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10011F7E8;
  return sub_1002D4780(a1, a2);
}

uint64_t sub_1002D6884()
{
  return sub_1002D6960(*(uint64_t (**)(uint64_t))(v0 + 8), v0, 1);
}

uint64_t sub_1002D68C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10011FE60;
  return sub_1002D5680(a1, a2);
}

uint64_t sub_1002D6960(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_1002D6974(uint64_t a1)
{
  uint64_t v2 = sub_10006C51C(&qword_100454608);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1002D69D4()
{
  uint64_t v1 = *(void *)(type metadata accessor for SECCredentialConfig() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;

  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

void sub_1002D6AD8(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (uint64_t *)((char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    if (a1)
    {
      if (a1 != 1) {
        goto LABEL_24;
      }
      unint64_t v15 = 0xE400000000000000;
      uint64_t v14 = 1852799308;
    }
    else
    {
      uint64_t v14 = 0x616873696C41;
      unint64_t v15 = 0xE600000000000000;
    }
    uint64_t v27 = sub_100290514(v14, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Enabling LPEM for %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  char v16 = sub_1000E81A0((Swift::UInt *)&v27, a1);
  swift_endAccess();
  if ((v16 & 1) == 0)
  {
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v21, v22))
    {
LABEL_21:

      return;
    }
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    v26[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 136315138;
    if (!a1)
    {
      uint64_t v24 = 0x616873696C41;
      unint64_t v25 = 0xE600000000000000;
LABEL_20:
      uint64_t v27 = sub_100290514(v24, v25, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "LPEM already enabled for %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_21;
    }
    if (a1 == 1)
    {
      unint64_t v25 = 0xE400000000000000;
      uint64_t v24 = 1852799308;
      goto LABEL_20;
    }
LABEL_24:
    uint64_t v27 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  uint64_t v17 = OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled;
  if ((*(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled) & 1) == 0)
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Enabling LPEM", v20, 2u);
      swift_slowDealloc();
    }

    sub_1002D78F4(1);
    *(unsigned char *)(v2 + v17) = 1;
  }
}

void sub_1002D6F5C(Swift::UInt a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (uint64_t *)((char *)&v28[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *unint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    if (a1)
    {
      if (a1 != 1) {
        goto LABEL_24;
      }
      unint64_t v15 = 0xE400000000000000;
      uint64_t v14 = 1852799308;
    }
    else
    {
      uint64_t v14 = 0x616873696C41;
      unint64_t v15 = 0xE600000000000000;
    }
    uint64_t v27 = sub_100290514(v14, v15, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Disabling LPEM for %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v16 = v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules;
  swift_beginAccess();
  sub_1000F5C70(a1);
  char v18 = v17;
  swift_endAccess();
  if (v18)
  {
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v22, v23))
    {
LABEL_21:

      return;
    }
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    v28[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    if (!a1)
    {
      uint64_t v25 = 0x616873696C41;
      unint64_t v26 = 0xE600000000000000;
LABEL_20:
      uint64_t v27 = sub_100290514(v25, v26, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "LPEM is not enabled for %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_21;
    }
    if (a1 == 1)
    {
      unint64_t v26 = 0xE400000000000000;
      uint64_t v25 = 1852799308;
      goto LABEL_20;
    }
LABEL_24:
    uint64_t v27 = a1;
    _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return;
  }
  if (!*(void *)(*(void *)v16 + 16))
  {
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Disabling LPEM", v21, 2u);
      swift_slowDealloc();
    }

    sub_1002D78F4(0);
    *(unsigned char *)(v2 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled) = 0;
  }
}

uint64_t sub_1002D73DC()
{
  type metadata accessor for DSKLPEM();
  swift_allocObject();
  uint64_t result = sub_1002D741C();
  qword_100468A58 = result;
  return result;
}

uint64_t sub_1002D741C()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isSupported) = 1;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules) = &_swiftEmptySetSingleton;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_1002D8460;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_100419238;
  uint64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

uint64_t sub_1002D7578()
{
  char v1 = *(unsigned char *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_isEnabled);
  uint64_t v28 = &type metadata for Bool;
  LOBYTE(v27) = v1;
  sub_1000761D0(&v27, v26);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v26, 0x656C62616E457369, 0xE900000000000064, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  uint64_t v28 = &type metadata for Bool;
  LOBYTE(v27) = 1;
  sub_1000761D0(&v27, v26);
  char v3 = swift_isUniquelyReferenced_nonNull_native();
  sub_1002C9648(v26, 0x726F707075537369, 0xEB00000000646574, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_runningModules);
  swift_beginAccess();
  uint64_t v5 = *v4;
  int64_t v6 = *(void *)(*v4 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    *(void *)&long long v27 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CF974(0, v6, 0);
    uint64_t v7 = (void *)v27;
    uint64_t v8 = sub_100203450(v5);
    uint64_t v10 = v9;
    char v12 = v11 & 1;
    uint64_t v13 = v5 + 56;
    while ((v8 & 0x8000000000000000) == 0)
    {
      uint64_t v13 = 1 << *(unsigned char *)(v5 + 32);
      if (v8 >= v13) {
        break;
      }
      uint64_t v13 = *(void *)(v5 + 56 + (((unint64_t)v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8;
      if ((v13 & 1) == 0) {
        goto LABEL_17;
      }
      uint64_t v13 = *(unsigned int *)(v5 + 36);
      if (v13 != v10) {
        goto LABEL_18;
      }
      uint64_t v13 = *(void *)(*(void *)(v5 + 48) + 8 * v8);
      if (v13)
      {
        if (v13 != 1) {
          goto LABEL_19;
        }
        unint64_t v14 = 0xE400000000000000;
        uint64_t v15 = 1852799308;
      }
      else
      {
        unint64_t v14 = 0xE600000000000000;
        uint64_t v15 = 0x616873696C41;
      }
      *(void *)&long long v27 = v7;
      unint64_t v17 = v7[2];
      unint64_t v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_1002CF974(v16 > 1, v17 + 1, 1);
        uint64_t v7 = (void *)v27;
      }
      _OWORD v7[2] = v17 + 1;
      char v18 = &v7[2 * v17];
      v18[4] = v15;
      v18[5] = v14;
      uint64_t v19 = sub_1000FAE78(v8, v10, v12 & 1, v5);
      uint64_t v8 = v19;
      uint64_t v10 = v20;
      char v12 = v21 & 1;
      if (!--v6)
      {
        sub_10008B004(v19, v20, v21 & 1);
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    *(void *)&v26[0] = v13;
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
  }
  else
  {
LABEL_15:
    uint64_t v28 = (void *)sub_10006C51C((uint64_t *)&unk_100455EA0);
    *(void *)&long long v27 = v7;
    sub_1000761D0(&v27, v26);
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    sub_1002C9648(v26, 0x4D676E696E6E7572, 0xEE0073656C75646FLL, v22);
    swift_bridgeObjectRelease();
    sub_1002BA7F8((uint64_t)&_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_1000190DC((uint64_t)"dsklpem.state", (uint64_t)isa);

    return (uint64_t)v24;
  }
  return result;
}

void sub_1002D78F4(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (void *)((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100468A38;
  *uint64_t v8 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  id v10 = (id)v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  if (v9)
  {
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109120;
      LODWORD(aBlock[0]) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Setting LPEM %{BOOL}d", v13, 8u);
      swift_slowDealloc();
    }

    id v14 = [self sharedHardwareManager];
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v2;
    *(unsigned char *)(v15 + 24) = a1 & 1;
    aBlock[4] = sub_1002D843C;
    aBlock[5] = v15;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100118B5C;
    uint64_t aBlock[3] = &unk_100419210;
    unint64_t v16 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v17 = [v14 startLPEMConfigSession:v16];
    _Block_release(v16);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_1002D7BD0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a2)
  {
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      id v31 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315138;
      swift_getErrorValue();
      uint64_t v7 = Error.localizedDescription.getter();
      sub_100290514(v7, v8, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error starting LPEM config session %s", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
    return;
  }
  if (a1)
  {
    if (a4)
    {
      id v31 = 0;
      unsigned int v11 = [a1 enableLPEMFeature:2 error:&v31];
      id v12 = v31;
      if (!v11)
      {
        id v13 = v31;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        id v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          unint64_t v16 = (uint8_t *)swift_slowAlloc();
          id v31 = (id)swift_slowAlloc();
          *(_DWORD *)unint64_t v16 = 136315138;
          swift_getErrorValue();
          uint64_t v17 = Error.localizedDescription.getter();
          sub_100290514(v17, v18, (uint64_t *)&v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v19 = "Failed to enable LPEM %s";
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v14, v15, v19, v16, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_errorRelease();

          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
    else
    {
      id v31 = 0;
      unsigned int v22 = [a1 disableLPEMFeature:2 error:&v31];
      id v12 = v31;
      if (!v22)
      {
        id v24 = v31;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_errorRetain();
        swift_errorRetain();
        id v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          unint64_t v16 = (uint8_t *)swift_slowAlloc();
          id v31 = (id)swift_slowAlloc();
          *(_DWORD *)unint64_t v16 = 136315138;
          swift_getErrorValue();
          uint64_t v25 = Error.localizedDescription.getter();
          sub_100290514(v25, v26, (uint64_t *)&v31);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          uint64_t v19 = "Failed to disable LPEM %s";
          goto LABEL_21;
        }
LABEL_22:
        swift_errorRelease();

        swift_errorRelease();
        swift_errorRelease();
        goto LABEL_23;
      }
    }
    id v23 = v12;
LABEL_23:
    [a1 endSession];
    long long v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 67109120;
      LODWORD(v31) = a4 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "LPEM set to %{BOOL}d", v29, 8u);
      swift_slowDealloc();
    }

    return;
  }
  oslog = Logger.logObject.getter();
  uint64_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, (os_log_type_t)v20))
  {
    char v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, (os_log_type_t)v20, "Got no LPEM config session", v21, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1002D8258()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced7DSKLPEM_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002D8308()
{
  return type metadata accessor for DSKLPEM();
}

uint64_t type metadata accessor for DSKLPEM()
{
  uint64_t result = qword_10045B9A0;
  if (!qword_10045B9A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1002D835C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002D8404()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

void sub_1002D843C(void *a1, uint64_t a2)
{
  sub_1002D7BD0(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
}

uint64_t sub_1002D8448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002D8458()
{
  return swift_release();
}

uint64_t sub_1002D846C(uint64_t a1)
{
  uint64_t v56 = sub_10006C51C(&qword_10045BCC8);
  uint64_t v4 = __chkstk_darwin(v56, v3);
  uint64_t v55 = (uint64_t)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v54 = (char *)v47 - v8;
  __chkstk_darwin(v7, v9);
  unint64_t v53 = (char *)v47 - v10;
  int64_t v11 = *(void *)(a1 + 16);
  id v12 = _swiftEmptyArrayStorage;
  if (!v11) {
    return (uint64_t)v12;
  }
  v47[1] = v1;
  uint64_t v60 = _swiftEmptyArrayStorage;
  sub_1002CFDA4(0, v11, 0);
  uint64_t result = sub_10019CFB8(a1);
  uint64_t v15 = result;
  uint64_t v16 = 0;
  uint64_t v17 = a1 + 64;
  uint64_t v48 = a1 + 80;
  int64_t v49 = v11;
  uint64_t v51 = a1 + 64;
  uint64_t v52 = a1;
  uint64_t v50 = v14;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v20 = (unint64_t)v15 >> 6;
    if ((*(void *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_26;
    }
    uint64_t v57 = v16;
    uint64_t v58 = 1 << v15;
    uint64_t v21 = v56;
    uint64_t v22 = *(int *)(v56 + 48);
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    uint64_t v27 = v23 + *(void *)(v25 + 72) * v15;
    uint64_t v28 = (uint64_t)v53;
    v26(v53, v27, v24);
    char v29 = *(unsigned char *)(*(void *)(a1 + 56) + v15);
    *(unsigned char *)(v28 + v22) = v29;
    uint64_t v30 = v54;
    v26(v54, v28, v24);
    v30[*(int *)(v21 + 48)] = v29;
    uint64_t v31 = (uint64_t)v30;
    uint64_t v32 = v55;
    sub_100076148(v31, v55, &qword_10045BCC8);
    sub_10008E734(v28, &qword_10045BCC8);
    LOBYTE(v24) = *(unsigned char *)(v32 + *(int *)(v21 + 48));
    uint64_t v33 = UUID.uuidString.getter();
    uint64_t v35 = v34;
    char v59 = v24;
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v38 = v37;
    sub_10008E734(v32, &qword_10045BCC8);
    id v12 = v60;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1002CFDA4(0, v12[2] + 1, 1);
      id v12 = v60;
    }
    unint64_t v40 = v12[2];
    unint64_t v39 = v12[3];
    if (v40 >= v39 >> 1)
    {
      uint64_t result = sub_1002CFDA4(v39 > 1, v40 + 1, 1);
      id v12 = v60;
    }
    void v12[2] = v40 + 1;
    uint64_t v41 = &v12[4 * v40];
    v41[4] = v33;
    void v41[5] = v35;
    v41[6] = v36;
    v41[7] = v38;
    a1 = v52;
    int64_t v18 = 1 << *(unsigned char *)(v52 + 32);
    if (v15 >= v18) {
      goto LABEL_27;
    }
    uint64_t v17 = v51;
    uint64_t v42 = *(void *)(v51 + 8 * v20);
    if ((v42 & v58) == 0) {
      goto LABEL_28;
    }
    LODWORD(v14) = v50;
    if (*(_DWORD *)(v52 + 36) != v50) {
      goto LABEL_29;
    }
    unint64_t v43 = v42 & (-2 << (v15 & 0x3F));
    if (v43)
    {
      int64_t v18 = __clz(__rbit64(v43)) | v15 & 0xFFFFFFFFFFFFFFC0;
      int64_t v19 = v49;
    }
    else
    {
      unint64_t v44 = v20 + 1;
      unint64_t v45 = (unint64_t)(v18 + 63) >> 6;
      int64_t v19 = v49;
      if (v20 + 1 < v45)
      {
        unint64_t v46 = *(void *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          int64_t v18 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v20)
          {
            unint64_t v46 = *(void *)(v48 + 8 * v20++);
            if (v46)
            {
              unint64_t v44 = v20 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v16 = v57 + 1;
    uint64_t v15 = v18;
    if (v57 + 1 == v19) {
      return (uint64_t)v12;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1002D8824(uint64_t a1)
{
  uint64_t v54 = sub_10006C51C(&qword_10045BCC0);
  uint64_t v4 = __chkstk_darwin(v54, v3);
  uint64_t v53 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v52 = (char *)&v45 - v8;
  __chkstk_darwin(v7, v9);
  uint64_t v51 = (char *)&v45 - v10;
  int64_t v11 = *(void *)(a1 + 16);
  id v12 = _swiftEmptyArrayStorage;
  if (!v11) {
    return (uint64_t)v12;
  }
  uint64_t v45 = v1;
  uint64_t v57 = _swiftEmptyArrayStorage;
  sub_1002CFD84(0, v11, 0);
  uint64_t result = sub_10019CFB8(a1);
  uint64_t v15 = result;
  uint64_t v16 = 0;
  uint64_t v17 = a1 + 64;
  uint64_t v46 = a1 + 80;
  int64_t v47 = v11;
  uint64_t v49 = a1 + 64;
  uint64_t v50 = a1;
  uint64_t v48 = v14;
  uint64_t v18 = v54;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v21 = (unint64_t)v15 >> 6;
    if ((*(void *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v14) {
      goto LABEL_26;
    }
    uint64_t v55 = v16;
    uint64_t v56 = 1 << v15;
    uint64_t v22 = *(int *)(v18 + 48);
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    uint64_t v27 = v23 + *(void *)(v25 + 72) * v15;
    uint64_t v28 = (uint64_t)v51;
    v26(v51, v27, v24);
    __int16 v29 = *(_WORD *)(*(void *)(a1 + 56) + 2 * v15);
    *(_WORD *)(v28 + v22) = v29;
    uint64_t v30 = v52;
    v26(v52, v28, v24);
    *(_WORD *)&v30[*(int *)(v18 + 48)] = v29;
    uint64_t v31 = (uint64_t)v30;
    uint64_t v32 = v53;
    sub_100076148(v31, v53, &qword_10045BCC0);
    sub_10008E734(v28, &qword_10045BCC0);
    __int16 v33 = *(_WORD *)(v32 + *(int *)(v18 + 48));
    uint64_t v34 = UUID.uuidString.getter();
    uint64_t v36 = v35;
    sub_10008E734(v32, &qword_10045BCC0);
    id v12 = v57;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1002CFD84(0, v12[2] + 1, 1);
      id v12 = v57;
    }
    unint64_t v38 = v12[2];
    unint64_t v37 = v12[3];
    if (v38 >= v37 >> 1)
    {
      uint64_t result = sub_1002CFD84(v37 > 1, v38 + 1, 1);
      id v12 = v57;
    }
    void v12[2] = v38 + 1;
    unint64_t v39 = &v12[3 * v38];
    v39[4] = v34;
    v39[5] = v36;
    *((_WORD *)v39 + 24) = v33;
    a1 = v50;
    int64_t v19 = 1 << *(unsigned char *)(v50 + 32);
    if (v15 >= v19) {
      goto LABEL_27;
    }
    uint64_t v17 = v49;
    uint64_t v40 = *(void *)(v49 + 8 * v21);
    if ((v40 & v56) == 0) {
      goto LABEL_28;
    }
    LODWORD(v14) = v48;
    if (*(_DWORD *)(v50 + 36) != v48) {
      goto LABEL_29;
    }
    unint64_t v41 = v40 & (-2 << (v15 & 0x3F));
    if (v41)
    {
      int64_t v19 = __clz(__rbit64(v41)) | v15 & 0xFFFFFFFFFFFFFFC0;
      int64_t v20 = v47;
    }
    else
    {
      unint64_t v42 = v21 + 1;
      unint64_t v43 = (unint64_t)(v19 + 63) >> 6;
      int64_t v20 = v47;
      if (v21 + 1 < v43)
      {
        unint64_t v44 = *(void *)(v49 + 8 * v42);
        if (v44)
        {
LABEL_22:
          int64_t v19 = __clz(__rbit64(v44)) + (v42 << 6);
        }
        else
        {
          while (v43 - 2 != v21)
          {
            unint64_t v44 = *(void *)(v46 + 8 * v21++);
            if (v44)
            {
              unint64_t v42 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v16 = v55 + 1;
    uint64_t v15 = v19;
    if (v55 + 1 == v20) {
      return (uint64_t)v12;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_1002D8BC4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v75 = a1;
  uint64_t v7 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v7 - 8, v8);
  unint64_t v73 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v67 - v16;
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (void (*)(char *))((char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100468A38;
  *(void *)uint64_t v22 = qword_100468A38;
  (*(void (**)(void (*)(char *), void, uint64_t))(v19 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v18);
  id v24 = (id)v23;
  LOBYTE(v23) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void (*)(char *), uint64_t))(v19 + 8))(v22, v18);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_once();
    goto LABEL_21;
  }
  swift_beginAccess();
  swift_retain();
  unint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v22 = 0;
  uint64_t v26 = sub_1002E61A8(v25, a3);
  swift_bridgeObjectRelease();
  swift_release();
  if (v26)
  {
    uint64_t v27 = *(void *)(v26 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    if (v27) {
      sub_100052B14(v27);
    }
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v28) = HIDWORD(v75) - v75;
        if (__OFSUB__(HIDWORD(v75), v75)) {
          goto LABEL_27;
        }
        uint64_t v28 = (int)v28;
        goto LABEL_16;
      case 2uLL:
        uint64_t v37 = *(void *)(v75 + 16);
        uint64_t v36 = *(void *)(v75 + 24);
        BOOL v38 = __OFSUB__(v36, v37);
        uint64_t v28 = v36 - v37;
        if (v38) {
          goto LABEL_28;
        }
        goto LABEL_16;
      case 3uLL:
        goto LABEL_17;
      default:
        uint64_t v28 = BYTE6(a2);
LABEL_16:
        if (v28 < 16)
        {
LABEL_17:
          uint64_t v79 = 0;
          unint64_t v80 = 0xE000000000000000;
          _StringGuts.grow(_:)(36);
          swift_bridgeObjectRelease();
          uint64_t v79 = 0xD000000000000022;
          unint64_t v80 = 0x80000001003BD4C0;
          unint64_t v77 = (unint64_t)sub_10023CDF4(v75, a2);
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
          unint64_t v41 = v40;
          swift_bridgeObjectRelease();
          v42._countAndFlagsBits = v39;
          v42._object = v41;
          String.append(_:)(v42);
          swift_bridgeObjectRelease();
          uint64_t v43 = v79;
          uint64_t v44 = v26;
          unsigned __int8 v45 = 3;
          unint64_t v46 = v80;
          uint64_t v47 = 0x80000000;
LABEL_25:
          sub_1002DC65C(v44, v45, v43, v46, v47);
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v67 = 0;
        unint64_t v68 = a2;
        uint64_t v48 = v74;
        uint64_t v22 = *(void (**)(char *))(v74 + 16);
        unint64_t v71 = v26 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
        uint64_t v72 = v4;
        v22(v17);
        uint64_t v49 = a3 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
        swift_beginAccess();
        uint64_t v69 = v49;
        ((void (*)(char *, uint64_t, uint64_t))v22)(v14, v49, v10);
        char v50 = static UUID.== infix(_:_:)();
        uint64_t v51 = *(void (**)(char *, uint64_t))(v48 + 8);
        v51(v14, v10);
        uint64_t v70 = v51;
        v51(v17, v10);
        if (v50)
        {
          a2 = v71;
          uint64_t v52 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state;
          if (*(unsigned char *)(v26 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) == 1)
          {
            *(unsigned char *)(v26 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 2;
            if (qword_100453898 != -1) {
              goto LABEL_29;
            }
LABEL_21:
            uint64_t v53 = (uint64_t)v73;
            ((void (*)(char *, unint64_t, uint64_t))v22)(v73, a2, v10);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v53, 0, 1, v10);
            uint64_t v54 = (void *)swift_allocObject();
            v54[2] = v72;
            v54[3] = a3;
            uint64_t v55 = v75;
            unint64_t v56 = v68;
            v54[4] = v75;
            v54[5] = v56;
            swift_retain();
            swift_retain();
            sub_10006D0EC(v55, v56);
            sub_100272804(0xD000000000000012, 0x80000001003BD4A0, a3, 1, 0, v53, (uint64_t)sub_1002E7608, (uint64_t)v54);
            swift_release();
            swift_release();
            sub_10008E734(v53, &qword_100455EB0);
            return;
          }
          unint64_t v77 = 0;
          unint64_t v78 = 0xE000000000000000;
          _StringGuts.grow(_:)(44);
          v61._countAndFlagsBits = 0xD00000000000001ELL;
          v61._object = (void *)0x80000001003BD480;
          String.append(_:)(v61);
          uint64_t v76 = sub_10023CDF4(*(void *)(v26 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(v26 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
          sub_10006C51C((uint64_t *)&unk_100455EA0);
          sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
          uint64_t v62 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v64 = v63;
          swift_bridgeObjectRelease();
          v65._countAndFlagsBits = v62;
          v65._object = v64;
          String.append(_:)(v65);
          swift_bridgeObjectRelease();
          v66._countAndFlagsBits = 0x74617473206E6920;
          v66._object = (void *)0xEA00000000002065;
          String.append(_:)(v66);
          LOBYTE(v76) = *(unsigned char *)(v26 + v52);
          _print_unlocked<A, B>(_:_:)();
          uint64_t v43 = v77;
          unint64_t v60 = v78;
          uint64_t v44 = v26;
          unsigned __int8 v45 = 2;
        }
        else
        {
          unint64_t v77 = 0;
          unint64_t v78 = 0xE000000000000000;
          _StringGuts.grow(_:)(39);
          swift_bridgeObjectRelease();
          unint64_t v77 = 0xD000000000000022;
          unint64_t v78 = 0x80000001003BD450;
          sub_1002E75B8((unint64_t *)&qword_100454038, (void (*)(uint64_t))&type metadata accessor for UUID);
          v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v57);
          swift_bridgeObjectRelease();
          v58._countAndFlagsBits = 32;
          v58._object = (void *)0xE100000000000000;
          String.append(_:)(v58);
          ((void (*)(char *, uint64_t, uint64_t))v22)(v17, v69, v10);
          v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v59);
          swift_bridgeObjectRelease();
          v70(v17, v10);
          uint64_t v43 = v77;
          unint64_t v60 = v78;
          uint64_t v44 = v26;
          unsigned __int8 v45 = 6;
        }
        unint64_t v46 = v60;
        uint64_t v47 = 2147483649;
        goto LABEL_25;
    }
  }
  swift_retain_n();
  __int16 v29 = Logger.logObject.getter();
  uint64_t v30 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v29, (os_log_type_t)v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    uint64_t v79 = v32;
    swift_retain();
    uint64_t v33 = UUID.uuidString.getter();
    unint64_t v35 = v34;
    swift_release();
    unint64_t v77 = sub_100290514(v33, v35, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "Failed to retrieve RKE request in progress for %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }
}

void sub_1002D9574(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  id v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v13 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v15 = [v13 TLVsWithData:isa];

  if (!v15) {
    goto LABEL_17;
  }
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16) {
      goto LABEL_7;
    }
LABEL_15:
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v16 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v16) {
    goto LABEL_15;
  }
LABEL_7:
  if (v16 >= 1)
  {
    uint64_t v17 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v18 = *(id *)(a1 + 8 * v17 + 32);
      }
      uint64_t v19 = v18;
      ++v17;
      id v21 = v18;
      sub_1002DD494(&v21, v3, a3);
    }
    while (v16 != v17);
    goto LABEL_15;
  }
  __break(1u);
LABEL_17:
  __break(1u);
}

uint64_t sub_1002D97F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_100468A38;
  *id v12 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v14 = (id)v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v12, v8);
  if (v13)
  {
    uint64_t v16 = (void *)(v2 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess();
    swift_retain();
    unint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = sub_1002E61A8(v17, a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    if (v18)
    {
      uint64_t v19 = *(void *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
      if (v19) {
        sub_100052B14(v19);
      }
      uint64_t v20 = (uint64_t *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
      id v21 = *(void (**)(uint64_t))(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
      if (v21)
      {
        swift_retain();
        v21(262);
        sub_10008BECC((uint64_t)v21);
        uint64_t v22 = *v20;
        uint64_t *v20 = 0;
        v20[1] = 0;
        sub_10008BECC(v22);
      }
      swift_retain();
      unint64_t v23 = swift_bridgeObjectRetain();
      id v24 = sub_1002E5634(v23, v18);
      swift_bridgeObjectRelease();
      swift_release();
      *uint64_t v16 = v24;
      swift_bridgeObjectRelease();
      uint64_t v25 = a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_beginAccess();
      sub_100180450(v25);
      swift_endAccess();
      swift_beginAccess();
      sub_100180358(v25);
      swift_endAccess();
      swift_beginAccess();
      sub_1000F68F4(v25, (uint64_t)v7);
      swift_endAccess();
      swift_release();
      return sub_10008E734((uint64_t)v7, &qword_100455EB0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *sub_1002D9B38(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v13 = _swiftEmptyArrayStorage;
    sub_1002CFB98(0, v1, 0);
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_10006D0EC(v5, *v4);
      uint64_t v13 = v2;
      unint64_t v8 = v2[2];
      unint64_t v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_1002CFB98(v7 > 1, v8 + 1, 1);
        uint64_t v2 = v13;
      }
      v4 += 2;
      uint64_t v11 = &type metadata for Data;
      id v12 = &off_100413A28;
      *(void *)&long long v10 = v5;
      *((void *)&v10 + 1) = v6;
      v2[2] = v8 + 1;
      sub_10010197C(&v10, (uint64_t)&v2[5 * v8 + 4]);
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1002D9C38(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1002CFC60(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)();
        sub_10007582C(0, &qword_10045BCD8);
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFC60(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v7 = v3[2];
        unint64_t v6 = v3[3];
        if (v7 >= v6 >> 1)
        {
          sub_1002CFC60(v6 > 1, v7 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v7 + 1;
        sub_1000761D0(v12, &v3[4 * v7 + 4]);
      }
    }
    else
    {
      unint64_t v8 = (id *)(a1 + 32);
      sub_10007582C(0, &qword_10045BCD8);
      do
      {
        id v9 = *v8;
        swift_dynamicCast();
        uint64_t v3 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1002CFC60(0, v3[2] + 1, 1);
          uint64_t v3 = v13;
        }
        unint64_t v11 = v3[2];
        unint64_t v10 = v3[3];
        if (v11 >= v10 >> 1)
        {
          sub_1002CFC60(v10 > 1, v11 + 1, 1);
          uint64_t v3 = v13;
        }
        v3[2] = v11 + 1;
        sub_1000761D0(v12, &v3[4 * v11 + 4]);
        ++v8;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void *sub_1002D9E9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 2;
      UInt16._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_1002D9F44(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v61 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (uint64_t *)((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100468A38;
  *uint64_t v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v19 = (unint64_t *)(v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess();
  unint64_t v20 = *v19;
  swift_bridgeObjectRetain();
  sub_10006D0EC(a2, a3);
  uint64_t v5 = sub_1002E5C44(v20, a2, a3);
  sub_10006D144(a2, a3);
  swift_bridgeObjectRelease();
  if (!v5)
  {
    sub_10006D0EC(a2, a3);
    sub_10006D0EC(a2, a3);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unsigned __int8 v45 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v62 = v61;
      *(_DWORD *)unsigned __int8 v45 = 136315138;
      unint64_t v60 = v45 + 4;
      uint64_t v64 = (uint64_t)sub_10023CDF4(a2, a3);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v46 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v48 = v47;
      swift_bridgeObjectRelease();
      uint64_t v64 = sub_100290514(v46, v48, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a2, a3);
      sub_10006D144(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "No RKE request in progress for %s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a2, a3);
      sub_10006D144(a2, a3);
    }
    sub_1002E8BFC();
    swift_allocError();
    *uint64_t v55 = 7;
    swift_willThrow();
    return;
  }
  unint64_t v60 = (uint8_t *)v4;
  uint64_t v21 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
  if (*(unsigned __int16 *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) != (unsigned __int16)a1)
  {
    sub_10006D0EC(a2, a3);
    sub_10006D0EC(a2, a3);
    swift_retain();
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v62 = v61;
      *(_DWORD *)uint64_t v51 = 33555202;
      LOWORD(v64) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v51 + 6) = 512;
      LOWORD(v64) = *(_WORD *)(v5 + v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v51 + 10) = 2080;
      uint64_t v59 = v51 + 12;
      uint64_t v64 = (uint64_t)sub_10023CDF4(a2, a3);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v52 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v54 = v53;
      swift_bridgeObjectRelease();
      uint64_t v64 = sub_100290514(v52, v54, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a2, a3);
      sub_10006D144(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "RKE function %hu does not match current function in progress %hu for key %s", (uint8_t *)v51, 0x14u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release();

      sub_10006D144(a2, a3);
      sub_10006D144(a2, a3);
    }
    sub_1002E8BFC();
    swift_allocError();
    *unint64_t v56 = 7;
    swift_willThrow();
    swift_release();
    return;
  }
  uint64_t v22 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
  uint64_t v23 = *(void *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
  if (v23) {
    sub_100052B14(v23);
  }
  uint64_t v62 = sub_100088F40((uint64_t)&off_10040F8C0);
  unint64_t v63 = v24;
  sub_10006C51C(&qword_1004557C0);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_10037AA50;
  uint64_t v26 = self;
  id v27 = [v26 TLVWithTag:128 unsignedShort:bswap32(a1) >> 16];
  if (!v27)
  {
    __break(1u);
    goto LABEL_29;
  }
  *(void *)(v25 + 32) = v27;
  id v28 = [v26 TLVWithTag:129 unsignedChar:*(unsigned __int8 *)(v5 + 16)];
  if (!v28)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  *(void *)(v25 + 40) = v28;
  uint64_t v64 = v25;
  specialized Array._endMutation()();
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v30 = [v26 TLVWithTag:32631 children:isa];

  if (!v30)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  id v31 = [v30 asData];

  if (!v31)
  {
LABEL_31:
    __break(1u);
    return;
  }
  uint64_t v59 = v22;
  uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v34 = v33;

  Data.append(_:)();
  sub_10006D144(v32, v34);
  if (qword_100453798 != -1) {
LABEL_27:
  }
    swift_once();
  uint64_t v35 = v62;
  unint64_t v36 = v63;
  uint64_t v37 = *(void *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer);
  uint64_t v38 = v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = v61;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v61, v38, v39);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v41, 0, 1, v39);
  sub_10006D0EC(v35, v36);
  Swift::String v42 = v60;
  sub_1001E8D48(3, 17, v35, v36, v37, 1, v41, 0, 1);
  sub_10006D144(v35, v36);
  if (v42) {
    swift_errorRelease();
  }
  uint64_t v57 = v59;
  sub_10008E734(v61, &qword_100455EB0);
  *(unsigned char *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 4;
  uint64_t v58 = *(void *)(v5 + v57);
  if (v58) {
    sub_1000529D8(v58, *(double *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
  }
  swift_release();
  sub_10006D144(v62, v63);
}

void sub_1002DA8E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v58 = a2;
  uint64_t v7 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchPredicate();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (uint64_t *)((char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_100468A38;
  *uint64_t v15 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  id v17 = (id)v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once();
LABEL_29:
    uint64_t v45 = v61;
    unint64_t v46 = v62;
    uint64_t v47 = *(void *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer);
    uint64_t v48 = a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
    uint64_t v49 = type metadata accessor for UUID();
    uint64_t v50 = *(void *)(v49 - 8);
    (*(void (**)(void *, uint64_t, uint64_t))(v50 + 16))(v15, v48, v49);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v50 + 56))(v15, 0, 1, v49);
    sub_10006D0EC(v45, v46);
    uint64_t v51 = v55;
    sub_1001E8D48(3, 17, v45, v46, v47, 1, (uint64_t)v15, 0, 1);
    if (v51)
    {
      sub_10006D144(v45, v46);
      sub_10008E734((uint64_t)v15, &qword_100455EB0);
    }
    else
    {
      sub_10008E734((uint64_t)v15, &qword_100455EB0);
      sub_10006D144(v45, v46);
      uint64_t v52 = *(void *)(a1 + v53);
      if (v52) {
        sub_1000529D8(v52, *(double *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
      }
    }
    sub_10006D144(v61, v62);
    return;
  }
  if ((*(unsigned __int8 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) | 2) == 2)
  {
    unint64_t v56 = v10;
    uint64_t v57 = v3;
    uint64_t v18 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
    uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    if (v19) {
      sub_100052B14(v19);
    }
    sub_10006C51C(&qword_1004557C0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_10037AA50;
    unsigned int v54 = *(unsigned __int16 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    uint64_t v21 = __rev16(v54);
    uint64_t v22 = self;
    id v23 = [v22 TLVWithTag:128 unsignedShort:v21];
    if (v23)
    {
      uint64_t v53 = v18;
      *(void *)(v20 + 32) = v23;
      unsigned __int8 v24 = *(unsigned char *)(a1 + 16);
      id v25 = [v22 TLVWithTag:129 unsignedChar:v24];
      if (v25)
      {
        *(void *)(v20 + 40) = v25;
        uint64_t v61 = v20;
        specialized Array._endMutation()();
        uint64_t v63 = v61;
        if (a3 >> 60 != 15)
        {
          sub_10006D0EC(v58, a3);
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          id v27 = [v22 TLVWithTag:136 value:isa];

          if (!v27)
          {
LABEL_40:
            __break(1u);
            return;
          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          sub_100075868(v58, a3);
        }
        uint64_t v61 = sub_100088F40((uint64_t)&off_10040E4E0);
        unint64_t v62 = v28;
        sub_10007582C(0, (unint64_t *)&qword_100454048);
        swift_bridgeObjectRetain();
        Class v29 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v30 = [v22 TLVWithTag:32630 children:v29];

        if (v30)
        {
          id v31 = [v30 asData];

          if (v31)
          {
            uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v34 = v33;

            swift_bridgeObjectRelease();
            Data.append(_:)();
            sub_10006D144(v32, v34);
            uint64_t v35 = v58;
            sub_1000758F4(v58, a3);
            swift_retain();
            sub_1000758F4(v35, a3);
            swift_retain();
            unint64_t v36 = Logger.logObject.getter();
            os_log_type_t v37 = static os_log_type_t.info.getter();
            BOOL v38 = os_log_type_enabled(v36, v37);
            uint64_t v55 = v4;
            if (v38)
            {
              uint64_t v39 = swift_slowAlloc();
              uint64_t v60 = swift_slowAlloc();
              *(_DWORD *)uint64_t v39 = 33555202;
              LOWORD(v59) = v54;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v39 + 6) = 256;
              swift_release();
              LOBYTE(v59) = v24;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              *(_WORD *)(v39 + 9) = 2080;
              if (a3 >> 60 == 15) {
                uint64_t v40 = 0;
              }
              else {
                uint64_t v40 = 0x7461642068746977;
              }
              if (a3 >> 60 == 15) {
                unint64_t v41 = 0xE000000000000000;
              }
              else {
                unint64_t v41 = 0xE900000000000061;
              }
              uint64_t v59 = sub_100290514(v40, v41, &v60);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_100075868(v35, a3);
              sub_100075868(v35, a3);
              _os_log_impl((void *)&_mh_execute_header, v36, v37, "Sending continuation request function %hu action %hhu %s", (uint8_t *)v39, 0x13u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_release_n();

              sub_100075868(v35, a3);
              sub_100075868(v35, a3);
            }
            uint64_t v15 = v56;
            if (qword_100453798 == -1) {
              goto LABEL_29;
            }
            goto LABEL_35;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_38;
  }
  Swift::String v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Ignoring confirmation for non-enduring request", v44, 2u);
    swift_slowDealloc();
  }
}

void sub_1002DB0E8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (uint8_t **)((char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v11 = qword_100468A38;
  *uint64_t v10 = qword_100468A38;
  uint64_t v12 = *(void (**)(void))(v7 + 104);
  unsigned int v52 = enum case for DispatchPredicate.onQueue(_:);
  uint64_t v51 = (void (*)(void *, void, unint64_t))v12;
  v12(v10);
  id v13 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  uint64_t v14 = *(void (**)(void *, uint64_t))(v7 + 8);
  v14(v10, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
LABEL_17:
    uint64_t v37 = v56;
    unint64_t v38 = v57;
    uint64_t v39 = qword_100468A38;
    *uint64_t v10 = qword_100468A38;
    unint64_t v40 = v47;
    v51(v10, v52, v47);
    sub_10006D0EC(v37, v38);
    id v41 = (id)v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)();
    v14(v10, v40);
    if (v39)
    {
      uint64_t v10 = (void *)sub_1001F28F8(3, 17, v37, v38);
      unint64_t v40 = v42;
      if (qword_1004536B0 == -1)
      {
LABEL_19:
        sub_1000CB6FC((uint64_t)v10, v40);
        sub_10006D144((uint64_t)v10, v40);
        sub_10006D144(v37, v38);
        sub_10006D144(v56, v57);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once();
    goto LABEL_19;
  }
  uint64_t v50 = v7 + 104;
  uint64_t v15 = Logger.logObject.getter();
  if ((a1 & 0x8000000000000000) == 0 && a2 >= (uint64_t)a1 && a2 < 0x10000)
  {
    uint64_t v49 = v14;
    os_log_type_t v16 = static os_log_type_t.info.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    unint64_t v47 = v6;
    if (v17)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v56 = 0;
      *(void *)&long long v48 = a3;
      *(_DWORD *)uint64_t v18 = 136315138;
      unint64_t v46 = v18 + 4;
      uint64_t v53 = a2;
      unint64_t v54 = a1;
      unint64_t v57 = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)();
      v19._countAndFlagsBits = 3026478;
      v19._object = (void *)0xE300000000000000;
      String.append(_:)(v19);
      _print_unlocked<A, B>(_:_:)();
      uint64_t v56 = sub_100290514(v56, v57, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Subscribing to function identifier range %s", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v56 = sub_100088F40((uint64_t)&off_10040E530);
    unint64_t v57 = v20;
    sub_10006C51C(&qword_1004557C0);
    uint64_t v21 = swift_allocObject();
    long long v48 = xmmword_10037AA50;
    *(_OWORD *)(v21 + 16) = xmmword_10037AA50;
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v48;
    uint64_t v14 = v49;
    if (a1 >= 0x10000) {
      goto LABEL_33;
    }
    uint64_t v23 = v22;
    uint64_t v24 = bswap32(a1) >> 16;
    id v25 = self;
    id v26 = [v25 TLVWithTag:132 unsignedShort:v24];
    if (v26)
    {
      *(void *)(v23 + 32) = v26;
      id v27 = [v25 TLVWithTag:133 unsignedShort:bswap32(a2) >> 16];
      if (v27)
      {
        *(void *)(v23 + 40) = v27;
        uint64_t v55 = v23;
        specialized Array._endMutation()();
        sub_10007582C(0, (unint64_t *)&qword_100454048);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v29 = [v25 TLVWithTag:48 children:isa];

        if (v29)
        {
          *(void *)(v21 + 32) = v29;
          id v30 = [v25 TLVWithTag:134 value:0];
          if (v30)
          {
            *(void *)(v21 + 40) = v30;
            uint64_t v55 = v21;
            specialized Array._endMutation()();
            Class v31 = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v32 = [v25 TLVWithTag:32627 children:v31];

            if (v32)
            {
              id v33 = [v32 asData];

              if (v33)
              {
                uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v36 = v35;

                Data.append(_:)();
                sub_10006D144(v34, v36);
                if (qword_100453798 == -1) {
                  goto LABEL_17;
                }
                goto LABEL_24;
              }
              goto LABEL_32;
            }
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
LABEL_30:
          __break(1u);
          goto LABEL_31;
        }
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_29;
  }
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v43))
  {
    os_log_type_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v56 = 0;
    *(_DWORD *)os_log_type_t v44 = 136315138;
    uint64_t v53 = a2;
    unint64_t v54 = a1;
    unint64_t v57 = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v45._countAndFlagsBits = 3026478;
    v45._object = (void *)0xE300000000000000;
    String.append(_:)(v45);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v56 = sub_100290514(v56, v57, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v43, "Invalid subscription range %s", v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
}

uint64_t sub_1002DB8D4()
{
  type metadata accessor for AlishaRKE(0);
  swift_allocObject();
  uint64_t result = sub_1002DB914();
  qword_100468A68 = result;
  return result;
}

uint64_t sub_1002DB914()
{
  String.init(cString:)();
  Logger.init(subsystem:category:)();
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState) = &_swiftEmptyDictionarySingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe) = &_swiftEmptySetSingleton;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress) = _swiftEmptyArrayStorage;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_rkeOEMProprietaryDataMaxLength) = 64;
  *(void *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_rkeTimeoutDefaultMilliseconds) = 5000;
  if (qword_100453928 != -1) {
    swift_once();
  }
  v3[4] = sub_1002E5C28;
  v3[5] = v0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1002B9D80;
  v3[3] = &unk_1004194A0;
  int64_t v1 = _Block_copy(v3);
  swift_retain();
  swift_release();
  os_state_add_handler();
  _Block_release(v1);
  return v0;
}

uint64_t sub_1002DBAAC()
{
  uint64_t v1 = v0;
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v63 - 8);
  uint64_t v3 = __chkstk_darwin(v63, v2);
  unint64_t v62 = (char *)v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3, v5);
  uint64_t v61 = (char *)v59 - v6;
  uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess();
  uint64_t v8 = *v7;
  if ((unint64_t)*v7 >> 62) {
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v9)
  {
    while (1)
    {
      *(void *)&long long v70 = _swiftEmptyArrayStorage;
      sub_1002CFA50(0, v9 & ~(v9 >> 63), 0);
      if (v9 < 0) {
        break;
      }
      uint64_t v10 = 0;
      uint64_t v11 = (void *)v70;
      while (v9 != v10)
      {
        if ((v8 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v12 = *(void **)(v8 + 8 * v10 + 32);
          swift_retain();
        }
        unint64_t v68 = v12;
        sub_1002E2908((uint64_t *)&v68, (unint64_t *)v69);
        swift_release();
        uint64_t v13 = *(void *)&v69[0];
        *(void *)&long long v70 = v11;
        unint64_t v15 = v11[2];
        unint64_t v14 = v11[3];
        if (v15 >= v14 >> 1)
        {
          sub_1002CFA50(v14 > 1, v15 + 1, 1);
          uint64_t v11 = (void *)v70;
        }
        ++v10;
        void v11[2] = v15 + 1;
        v11[v15 + 4] = v13;
        if (v9 == v10)
        {
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
      }
      __break(1u);
LABEL_14:
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9) {
        goto LABEL_15;
      }
    }
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_16:
    uint64_t v71 = sub_10006C51C(&qword_1004555E0);
    *(void *)&long long v70 = v11;
    sub_1000761D0(&v70, v69);
    os_log_type_t v16 = &_swiftEmptyDictionarySingleton;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v68 = &_swiftEmptyDictionarySingleton;
    sub_1002C9648(v69, 0xD000000000000012, 0x80000001003BD140, isUniquelyReferenced_nonNull_native);
    uint64_t v18 = (uint64_t)v68;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = sub_1002D846C(v19);
    swift_bridgeObjectRelease();
    if (*(void *)(v20 + 16))
    {
      sub_10006C51C(&qword_100455770);
      os_log_type_t v16 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    *(void *)&long long v70 = v16;
    uint64_t v21 = (void *)swift_bridgeObjectRetain();
    sub_1002E48E4(v21, 1, &v70);
    swift_bridgeObjectRelease();
    uint64_t v22 = v70;
    uint64_t v71 = sub_10006C51C(&qword_100455790);
    *(void *)&long long v70 = v22;
    sub_1000761D0(&v70, v69);
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v67 = v18;
    sub_1002C9648(v69, 0xD000000000000011, 0x80000001003BD100, v23);
    uint64_t v24 = v67;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_1002D8824(v25);
    swift_bridgeObjectRelease();
    if (*(void *)(v26 + 16))
    {
      sub_10006C51C(&qword_10045B690);
      id v27 = (void *)static _DictionaryStorage.allocate(capacity:)();
    }
    else
    {
      id v27 = &_swiftEmptyDictionarySingleton;
    }
    *(void *)&long long v70 = v27;
    uint64_t v28 = swift_bridgeObjectRetain();
    sub_1002E4560(v28, 1, &v70);
    swift_bridgeObjectRelease();
    uint64_t v29 = v70;
    uint64_t v71 = sub_10006C51C(&qword_10045BCB8);
    *(void *)&long long v70 = v29;
    sub_1000761D0(&v70, v69);
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v66 = v24;
    sub_1002C9648(v69, 0xD00000000000001BLL, 0x80000001003BD0E0, v30);
    uint64_t v31 = v66;
    swift_bridgeObjectRelease();
    id v32 = (uint64_t *)(v1 + OBJC_IVAR____TtC10seserviced9AlishaRKE_peersAvailableToSubscribe);
    swift_beginAccess();
    uint64_t v33 = *v32;
    int64_t v34 = *(void *)(*v32 + 16);
    unint64_t v35 = _swiftEmptyArrayStorage;
    if (!v34)
    {
LABEL_33:
      uint64_t v71 = sub_10006C51C((uint64_t *)&unk_100455EA0);
      *(void *)&long long v70 = v35;
      sub_1000761D0(&v70, v69);
      char v54 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v65 = v31;
      sub_1002C9648(v69, 0xD000000000000019, 0x80000001003BD120, v54);
      uint64_t v55 = v65;
      swift_bridgeObjectRelease();
      sub_1002BA7F8(v55);
      swift_bridgeObjectRelease();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      unint64_t v57 = sub_1000190DC((uint64_t)"alisharke.state", (uint64_t)isa);

      return (uint64_t)v57;
    }
    v59[0] = v31;
    *(void *)&long long v70 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1002CF974(0, v34, 0);
    uint64_t v36 = sub_100203450(v33);
    uint64_t v38 = v37;
    char v40 = v39 & 1;
    uint64_t v60 = v33 + 56;
    v59[3] = v64 + 16;
    v59[2] = v64 + 32;
    v59[1] = v64 + 8;
    while ((v36 & 0x8000000000000000) == 0 && v36 < 1 << *(unsigned char *)(v33 + 32))
    {
      if (((*(void *)(v60 + (((unint64_t)v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
        goto LABEL_35;
      }
      if (*(_DWORD *)(v33 + 36) != v38) {
        goto LABEL_36;
      }
      uint64_t v41 = v64;
      unint64_t v42 = v61;
      uint64_t v43 = v63;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v61, *(void *)(v33 + 48) + *(void *)(v64 + 72) * v36, v63);
      os_log_type_t v44 = v62;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v62, v42, v43);
      uint64_t v45 = UUID.uuidString.getter();
      uint64_t v47 = v46;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v44, v43);
      unint64_t v35 = (void *)v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1002CF974(0, v35[2] + 1, 1);
        unint64_t v35 = (void *)v70;
      }
      unint64_t v49 = v35[2];
      unint64_t v48 = v35[3];
      if (v49 >= v48 >> 1)
      {
        sub_1002CF974(v48 > 1, v49 + 1, 1);
        unint64_t v35 = (void *)v70;
      }
      _OWORD v35[2] = v49 + 1;
      uint64_t v50 = &v35[2 * v49];
      v50[4] = v45;
      v50[5] = v47;
      uint64_t v51 = sub_1000FAE78(v36, v38, v40 & 1, v33);
      uint64_t v36 = v51;
      uint64_t v38 = v52;
      char v40 = v53 & 1;
      if (!--v34)
      {
        sub_10008B004(v51, v52, v53 & 1);
        swift_bridgeObjectRelease();
        uint64_t v31 = v59[0];
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t sub_1002DC288(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (!*(unsigned char *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_type))
  {
    uint64_t v6 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
    if (v7 >> 60 == 15)
    {
      sub_10006D0EC(a2, a3);
      sub_100075868(v6, v7);
      sub_100075868(a2, a3);
    }
    else
    {
      sub_1000758F4(*(void *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier), v7);
      sub_10006D0EC(a2, a3);
      char v8 = sub_100088AE4(v6, v7, a2, a3);
      sub_10006D144(a2, a3);
      sub_100075868(v6, v7);
      if (v8) {
        return *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC10seserviced4Peer_isConnected);
      }
    }
  }
  return 0;
}

uint64_t sub_1002DC380(void *a1, uint64_t a2, unint64_t a3)
{
  if ([a1 endPointType] != (id)1) {
    return 0;
  }
  id v6 = [a1 publicKeyIdentifier];
  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v9 = v8;

  char v10 = sub_100088AE4(v7, v9, a2, a3);
  sub_10006D144(v7, v9);
  if ((v10 & 1) == 0) {
    return 0;
  }
  uint64_t result = (uint64_t)[a1 bleUUID];
  if (result)
  {

    return 1;
  }
  return result;
}

uint64_t sub_1002DC44C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v7 = result;
    _StringGuts.grow(_:)(54);
    v8._object = (void *)0x80000001003BD5F0;
    v8._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v8);
    sub_10023CDF4(a3, a4);
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v9 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = v9;
    v12._object = v11;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x6F6974636E756620;
    v13._object = (void *)0xEA0000000000206ELL;
    String.append(_:)(v13);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x206E6F6974636120;
    v15._object = (void *)0xE800000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    sub_1002DC65C(v7, 5u, 0, 0xE000000000000000, 2147483655);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002DC65C(uint64_t a1, unsigned __int8 a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v31[0] = a3;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  Swift::String v14 = (uint64_t *)((char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *Swift::String v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if (v15)
  {
    BOOL v17 = (void *)(v5 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
    swift_beginAccess();
    swift_retain();
    unint64_t v18 = swift_bridgeObjectRetain();
    uint64_t v19 = sub_1002E5634(v18, a1);
    swift_bridgeObjectRelease();
    swift_release();
    *BOOL v17 = v19;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v32[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      v31[1] = sub_100290514(v31[0], a4, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    char v23 = (uint64_t *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
    uint64_t v24 = *(void (**)(void))(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
    if (v24)
    {
      swift_retain();
      v24(a2 | 0x100u);
      sub_10008BECC((uint64_t)v24);
      uint64_t v25 = *v23;
      uint64_t *v23 = 0;
      v23[1] = 0;
      sub_10008BECC(v25);
    }
    sub_1002E68A0(a1, v31[0], a4);
    uint64_t v26 = self;
    uint64_t v27 = *(unsigned __int16 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    uint64_t v28 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type);
    uint64_t v29 = *(unsigned __int8 *)(a1 + 16);
    NSString v30 = String._bridgeToObjectiveC()();
    sub_10005040C(v26, 1, v27, v29, a5, v28, v30);
  }
  else
  {
    __break(1u);
  }
}

void sub_1002DCA14(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  swift_retain();
  unint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_1002E61A8(v11, a4);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v12)
  {
    swift_retain_n();
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v72, v73))
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      *(_DWORD *)uint64_t v74 = 136315138;
      char v96 = (__int16 *)v75;
      swift_retain();
      uint64_t v76 = UUID.uuidString.getter();
      unint64_t v78 = v77;
      swift_release();
      uint64_t v100 = sub_100290514(v76, v78, (uint64_t *)&v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to retrieve RKE request in progress for %s", v74, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
    }

    return;
  }
  if (a2)
  {
    char v96 = 0;
    char v97 = (char *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    char v96 = (__int16 *)0xD000000000000011;
    char v97 = (char *)0x80000001003BD4F0;
    LOBYTE(v100) = (_BYTE)a1;
    sub_100075894();
    v79._countAndFlagsBits = Error.localizedDescription.getter();
    String.append(_:)(v79);
    swift_bridgeObjectRelease();
    sub_1002DC65C(v12, 2u, (uint64_t)v96, (unint64_t)v97, 2147483650);
    swift_bridgeObjectRelease();
LABEL_26:
    swift_release();
    return;
  }
  uint64_t v13 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state;
  if (*(unsigned char *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) != 2)
  {
    char v96 = 0;
    char v97 = (char *)0xE000000000000000;
    id v80 = a1;
    _StringGuts.grow(_:)(44);
    v81._countAndFlagsBits = 0xD00000000000001ELL;
    v81._object = (void *)0x80000001003BD480;
    String.append(_:)(v81);
    uint64_t v100 = (uint64_t)sub_10023CDF4(*(void *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
    sub_10006C51C((uint64_t *)&unk_100455EA0);
    sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
    uint64_t v82 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v84 = v83;
    swift_bridgeObjectRelease();
    v85._countAndFlagsBits = v82;
    v85._object = v84;
    String.append(_:)(v85);
    swift_bridgeObjectRelease();
    v86._countAndFlagsBits = 0x74617473206E6920;
    v86._object = (void *)0xEA00000000002065;
    String.append(_:)(v86);
    LOBYTE(v100) = *(unsigned char *)(v12 + v13);
    _print_unlocked<A, B>(_:_:)();
    sub_1002DC65C(v12, 2u, (uint64_t)v96, (unint64_t)v97, 2147483649);
    swift_bridgeObjectRelease();
    sub_1000758E8(a1, 0);
    goto LABEL_26;
  }
  uint64_t v90 = 0;
  uint64_t v91 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state;
  id v93 = a1;
  uint64_t v100 = Data.subdata(in:)();
  unint64_t v101 = v14;
  __int16 v94 = bswap32(*(unsigned __int16 *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier)) >> 16;
  __int16 v98 = &type metadata for UnsafeRawBufferPointer;
  char v99 = &protocol witness table for UnsafeRawBufferPointer;
  char v96 = &v94;
  char v97 = &v95;
  sub_100075908(&v96, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v96);
  LOBYTE(v94) = *(unsigned char *)(v12 + 16);
  __int16 v98 = &type metadata for UnsafeRawBufferPointer;
  char v99 = &protocol witness table for UnsafeRawBufferPointer;
  char v96 = &v94;
  char v97 = (char *)&v94 + 1;
  sub_100075908(&v96, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)();
  sub_10007594C((uint64_t)&v96);
  uint64_t v15 = *(void *)(v12 + 24);
  unint64_t v16 = *(void *)(v12 + 32);
  sub_10006D0EC(v15, v16);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v15, v16);
  uint64_t v17 = *(void *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
  unint64_t v18 = *(void *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
  sub_10006D0EC(v17, v18);
  v19.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v17, v18);
  uint64_t v20 = v100;
  unint64_t v21 = v101;
  sub_10006D0EC(v100, v101);
  uint64_t v22 = sub_1002B3BD0(v20, v21);
  unint64_t v24 = v23;
  unint64_t v88 = v21;
  uint64_t v89 = v20;
  sub_10006D144(v20, v21);
  v25.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v22, v24);
  Class v26 = 0;
  unint64_t v27 = *(void *)(v12 + 48);
  if (v27 >> 60 != 15)
  {
    uint64_t v28 = a1;
    uint64_t v29 = *(void *)(v12 + 40);
    sub_10006D0EC(v29, *(void *)(v12 + 48));
    Class v26 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v30 = v29;
    a1 = v28;
    sub_100075868(v30, v27);
  }
  Class v31 = isa;
  id v32 = sub_10004B7A0(v93, isa, v19.super.isa, v25.super.isa, v26, 0);

  if (*(void *)(v12 + 48) >> 60 != 15)
  {
    uint64_t v33 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
    unint64_t v34 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
    uint64_t v35 = a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
    uint64_t v36 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
    unint64_t v37 = *(void *)(v35 + 8);
    sub_1000758F4(v33, v34);
    sub_1000758F4(v36, v37);
    sub_1002B9140(0xD000000000000042, 0x80000001003BD540, v33, v34, v36, v37, 0);
    sub_100075868(v36, v37);
    sub_100075868(v33, v34);
  }
  if (!v32)
  {
    sub_1002DC65C(v12, 2u, 0xD000000000000027, 0x80000001003BD510, 2147483651);
    sub_1000758E8(a1, 0);
    swift_release();
    sub_10006D144(v89, v88);
    return;
  }
  id v93 = a1;
  id v38 = v32;
  id v39 = [v38 signedData];
  uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v42 = v41;

  char v96 = (__int16 *)v40;
  char v97 = (char *)v42;
  id v43 = [v38 signature];
  uint64_t v44 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v46 = v45;

  Class v47 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v44, v46);
  unint64_t v48 = self;
  id v49 = [v48 TLVWithTag:158 value:v47];

  if (!v49)
  {
    __break(1u);
    goto LABEL_29;
  }
  id v50 = [v49 asData];

  if (!v50)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v53 = v52;

  Data.append(_:)();
  sub_10006D144(v51, v53);
  uint64_t v54 = (uint64_t)v96;
  unint64_t v55 = (unint64_t)v97;
  sub_10006D0EC((uint64_t)v96, (unint64_t)v97);
  Class v56 = Data._bridgeToObjectiveC()().super.isa;
  sub_10006D144(v54, v55);
  id v57 = [v48 TLVWithTag:32557 value:v56];

  if (!v57)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return;
  }
  if (qword_100453798 != -1) {
    swift_once();
  }
  Class isa = (Class)v38;
  id v58 = [v57 asData];
  if (!v58) {
    goto LABEL_31;
  }
  uint64_t v59 = v58;
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v62 = v61;

  uint64_t v63 = *(void *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer);
  uint64_t v64 = v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  uint64_t v65 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v65 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v10, v64, v65);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(v10, 0, 1, v65);
  uint64_t v67 = v63;
  uint64_t v68 = v90;
  sub_1001E8D48(5, 21, v60, v62, v67, 1, (uint64_t)v10, 0, 1);
  sub_10006D144(v60, v62);
  if (v68) {
    swift_errorRelease();
  }
  sub_10008E734((uint64_t)v10, &qword_100455EB0);
  Class v69 = isa;
  *(unsigned char *)(v12 + v91) = 3;
  uint64_t v70 = *(void *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
  uint64_t v71 = v93;
  if (v70) {
    sub_1000529D8(v70, *(double *)(v12 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
  }
  sub_1000758E8(v71, 0);
  swift_release();

  sub_10006D144((uint64_t)v96, (unint64_t)v97);
  sub_10006D144(v100, v101);
}

void sub_1002DD494(id *a1, uint64_t a2, unint64_t a3)
{
  id v4 = *a1;
  int v5 = [*a1 tag];
  if (v5 > 32625)
  {
    if (v5 == 32626)
    {
      id v21 = [v4 children];
      if (v21)
      {
        uint64_t v22 = v21;
        sub_10007582C(0, (unint64_t *)&qword_100454048);
        unint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1002E0584(v23, a3);
        swift_bridgeObjectRelease();
        uint64_t v24 = a3 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
        swift_beginAccess();
        sub_100180450(v24);
        swift_endAccess();
        swift_beginAccess();
        sub_100180358(v24);
        swift_endAccess();
        return;
      }
      goto LABEL_23;
    }
    if (v5 == 32629)
    {
      id v9 = [v4 children];
      if (v9)
      {
        uint64_t v10 = v9;
        sub_10007582C(0, (unint64_t *)&qword_100454048);
        unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1002DE600(v11, a3);
        goto LABEL_10;
      }
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 == 24440)
    {
      id v16 = [v4 value];
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v20 = v19;

        sub_1002DF358(v18, v20, a3);
        sub_10006D144(v18, v20);
        return;
      }
      goto LABEL_22;
    }
    if (v5 == 32625)
    {
      id v6 = [v4 children];
      if (v6)
      {
        uint64_t v7 = v6;
        sub_10007582C(0, (unint64_t *)&qword_100454048);
        unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        sub_1002DD7FC(v8, a3);
LABEL_10:
        swift_bridgeObjectRelease();
        return;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
      return;
    }
  }
  id v12 = v4;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 67109120;
    [v12 tag];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ignoring unknown event %u", v15, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1002DD7FC(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v103 = a1;
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  id v9 = (uint64_t *)((char *)&v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v10 = (void *)qword_100468A38;
  *id v9 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  char v12 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v9, v5);
  if (v12)
  {
    if (!(v103 >> 62))
    {
      uint64_t v13 = *(void *)((v103 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v13) {
        goto LABEL_6;
      }
LABEL_62:
      swift_bridgeObjectRelease();
      goto LABEL_63;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  if (!v13) {
    goto LABEL_62;
  }
LABEL_6:
  if (v13 >= 1)
  {
    uint64_t v99 = a2;
    uint64_t v100 = v3;
    uint64_t v14 = 0;
    uint64_t v101 = 0;
    int v102 = 0;
    unint64_t v15 = v103 & 0xC000000000000001;
    int v16 = 1;
    int v17 = 1;
    int v18 = 1;
    do
    {
      if (v15) {
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v19 = *(id *)(v103 + 8 * v14 + 32);
      }
      unint64_t v20 = v19;
      unsigned int v21 = [v19 tag];
      switch(v21)
      {
        case 0x82u:
          id v27 = [v20 value];
          if (!v27) {
            goto LABEL_68;
          }
          uint64_t v28 = v27;
          uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v31 = v30;

          LODWORD(v101) = sub_10007D4A4(v29, v31, 0, 0, 0);
          int v16 = 0;
          break;
        case 0x81u:
          id v32 = [v20 value];
          if (!v32) {
            goto LABEL_69;
          }
          uint64_t v33 = v32;
          uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v36 = v35;

          HIDWORD(v101) = sub_10007D4A4(v34, v36, 0, 0, 0);
          int v17 = 0;
          break;
        case 0x80u:
          id v22 = [v20 value];
          if (!v22) {
            goto LABEL_67;
          }
          unint64_t v23 = v22;
          uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v26 = v25;

          int v102 = sub_10007D08C(v24, v26, 0, 0, 0);
          int v18 = 0;
          break;
      }

      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
    uint64_t v37 = v100;
    if (((v18 | v17 | v16) & 1) == 0)
    {
      unsigned __int8 v38 = BYTE4(v101);
      unsigned __int16 v39 = v102 - 1;
      uint64_t v40 = v99;
      if ((unsigned __int16)(v102 - 1) <= 1u)
      {
        if (BYTE4(v101) == 81)
        {
          swift_retain_n();
          uint64_t v64 = Logger.logObject.getter();
          os_log_type_t v65 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v64, v65))
          {
            uint64_t v66 = (uint8_t *)swift_slowAlloc();
            uint64_t v67 = swift_slowAlloc();
            *(_DWORD *)uint64_t v66 = 136315138;
            v106[0] = v67;
            swift_retain();
            uint64_t v68 = UUID.uuidString.getter();
            unint64_t v70 = v69;
            swift_release();
            v104[0] = sub_100290514(v68, v70, v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            uint64_t v40 = v99;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "Vehicle unlocked using passive entry for %s", v66, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }

          uint64_t v71 = v40 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          uint64_t v72 = (uint64_t *)(v37 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v104[0] = *v72;
          *uint64_t v72 = 0x8000000000000000;
          char v74 = 2;
          goto LABEL_48;
        }
        if (BYTE4(v101) == 80)
        {
          swift_retain_n();
          unint64_t v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v41, v42))
          {
            id v43 = (uint8_t *)swift_slowAlloc();
            uint64_t v44 = swift_slowAlloc();
            *(_DWORD *)id v43 = 136315138;
            v106[0] = v44;
            swift_retain();
            uint64_t v45 = UUID.uuidString.getter();
            unint64_t v47 = v46;
            swift_release();
            v104[0] = sub_100290514(v45, v47, v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            uint64_t v40 = v99;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Vehicle locked using passive entry for %s", v43, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            swift_release_n();
          }

          uint64_t v71 = v40 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
          uint64_t v72 = (uint64_t *)(v37 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
          swift_beginAccess();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v104[0] = *v72;
          *uint64_t v72 = 0x8000000000000000;
          char v74 = 1;
LABEL_48:
          sub_1002CABB0(v74, v71, isUniquelyReferenced_nonNull_native);
          *uint64_t v72 = v104[0];
          swift_bridgeObjectRelease();
          swift_endAccess();
          return;
        }
      }
      unint64_t v48 = (void *)(v100 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
      swift_beginAccess();
      swift_retain();
      unint64_t v49 = swift_bridgeObjectRetain();
      uint64_t v50 = sub_1002E61A8(v49, v40);
      swift_bridgeObjectRelease();
      swift_release();
      if (!v50)
      {
        swift_retain_n();
        id v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          *(_DWORD *)uint64_t v59 = 136315138;
          v104[0] = v60;
          swift_retain();
          uint64_t v61 = UUID.uuidString.getter();
          unint64_t v63 = v62;
          swift_release();
          uint64_t v105 = sub_100290514(v61, v63, v104);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "Received execution status but there's no ongoing request for %s", v59, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_release_n();
        }

        return;
      }
      uint64_t v51 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
      uint64_t v52 = *(void *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
      if (v52) {
        sub_100052B14(v52);
      }
      uint64_t v53 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
      if (*(unsigned __int16 *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == (unsigned __int16)v102
        && *(unsigned __int8 *)(v50 + 16) == v38)
      {
        if (v101 == 1)
        {
          if (*(unsigned char *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) == 1)
          {
            sub_1002DC65C(v50, 1u, 0xD000000000000030, 0x80000001003BD260, 2147483656);
          }
          else
          {
            swift_retain_n();
            uint64_t v89 = Logger.logObject.getter();
            os_log_type_t v90 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v89, v90))
            {
              uint64_t v91 = swift_slowAlloc();
              v104[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v91 = 136315650;
              unint64_t v103 = v91 + 4;
              uint64_t v105 = (uint64_t)sub_10023CDF4(*(void *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
              uint64_t v92 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v94 = v93;
              swift_bridgeObjectRelease();
              uint64_t v105 = sub_100290514(v92, v94, v104);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              *(_WORD *)(v91 + 12) = 512;
              LOWORD(v105) = v102;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *(_WORD *)(v91 + 16) = 256;
              LOBYTE(v105) = v38;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              _os_log_impl((void *)&_mh_execute_header, v89, v90, "Vehicle for key %s started execution of function %hu action %hhu", (uint8_t *)v91, 0x13u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              swift_release_n();
            }

            uint64_t v95 = *(void *)(v50 + v51);
            if (v95) {
              sub_1000529D8(v95, *(double *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
            }
          }
        }
        else
        {
          uint64_t v75 = (uint64_t *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
          uint64_t v76 = *(void (**)(void))(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
          unsigned __int8 v77 = v101;
          if (v76)
          {
            swift_retain();
            v76(v77);
            sub_10008BECC((uint64_t)v76);
            uint64_t v78 = *v75;
            *uint64_t v75 = 0;
            v75[1] = 0;
            sub_10008BECC(v78);
          }
          sub_1002E6A1C(v50, v77);
          swift_retain();
          unint64_t v79 = swift_bridgeObjectRetain();
          id v80 = sub_1002E5634(v79, v50);
          swift_bridgeObjectRelease();
          swift_release();
          *unint64_t v48 = v80;
          swift_bridgeObjectRelease();
          uint64_t v81 = self;
          uint64_t v82 = *(unsigned __int16 *)(v50 + v53);
          uint64_t v83 = *(unsigned __int8 *)(v50 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type);
          uint64_t v84 = *(unsigned __int8 *)(v50 + 16);
          NSString v85 = String._bridgeToObjectiveC()();
          sub_10005040C(v81, 1, v82, v84, v77, v83, v85);

          if (!v77 && v39 <= 1u)
          {
            uint64_t v86 = v99 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
            uint64_t v87 = (uint64_t *)(v100 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed);
            swift_beginAccess();
            char v88 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v105 = *v87;
            *uint64_t v87 = 0x8000000000000000;
            sub_1002CAD4C(v102, v86, v88);
            *uint64_t v87 = v105;
            swift_bridgeObjectRelease();
            swift_endAccess();
          }
        }
        swift_release();
        return;
      }
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v54, v55))
      {
        Class v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Class v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Ignoring execution status for a request which we didn't start", v56, 2u);
        swift_slowDealloc();
      }
      swift_release();
LABEL_65:

      return;
    }
LABEL_63:
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v96))
    {
      char v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v97 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v96, "Ignoring invalid execution status", v97, 2u);
      swift_slowDealloc();
    }
    goto LABEL_65;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
}

void sub_1002DE600(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v6 - 8, v7);
  id v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (uint64_t *)((char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_100468A38;
  *uint64_t v14 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  id v16 = (id)v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
  if (v15)
  {
    swift_beginAccess();
    swift_retain();
    unint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    uint64_t v10 = sub_1002E61A8(v17, a2);
    swift_bridgeObjectRelease();
    swift_release();
    if (v10)
    {
      uint64_t v18 = *(void *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
      if (v18) {
        sub_100052B14(v18);
      }
    }
    unsigned __int16 v87 = 0;
    char v88 = 1;
    __int16 v86 = 256;
    long long v85 = xmmword_100378280;
    if (!(a1 >> 62))
    {
      uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v19) {
        goto LABEL_9;
      }
LABEL_60:
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  if (!v19) {
    goto LABEL_60;
  }
LABEL_9:
  if (v19 < 1)
  {
    __break(1u);
LABEL_69:
    swift_once();
LABEL_43:
    uint64_t v64 = v83;
    unint64_t v65 = v84;
    if (v10)
    {
      uint64_t v66 = v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
      uint64_t v67 = type metadata accessor for UUID();
      uint64_t v68 = *(void *)(v67 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v9, v66, v67);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v9, 0, 1, v67);
    }
    else
    {
      uint64_t v69 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v9, 1, 1, v69);
    }
    sub_10006D0EC(v64, v65);
    sub_1001E8D48(3, 17, v64, v65, a2, 1, (uint64_t)v9, 0, 1);
    if (v14)
    {
      sub_10006D144(v64, v65);
      swift_errorRelease();
      sub_10008E734((uint64_t)v9, &qword_100455EB0);
      if (!v10) {
        goto LABEL_53;
      }
    }
    else
    {
      sub_10008E734((uint64_t)v9, &qword_100455EB0);
      sub_10006D144(v64, v65);
      if (!v10)
      {
LABEL_53:
        sub_10006D144(v83, v84);
LABEL_66:
        unint64_t v42 = *((void *)&v85 + 1);
        uint64_t v41 = v85;
LABEL_67:
        sub_100075868(v41, v42);
        return;
      }
    }
    uint64_t v70 = *(void *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    if (v70) {
      sub_1000529D8(v70, *(double *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
    }
    swift_release();
    goto LABEL_53;
  }
  uint64_t v20 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v21 = *(id *)(a1 + 8 * v20 + 32);
    }
    id v22 = v21;
    ++v20;
    uint64_t v83 = (uint64_t)v21;
    sub_1002E1308((id *)&v83, (uint64_t)&v87, &v86, v3, (uint64_t *)&v85);
  }
  while (v19 != v20);
  swift_bridgeObjectRelease();
  if ((v88 & 1) != 0 || (v86 & 0x100) != 0)
  {
LABEL_61:
    char v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      *(_DWORD *)uint64_t v76 = 136315138;
      uint64_t v82 = sub_100290514(0xD000000000000025, 0x80000001003BD310, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "%s", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (!v10) {
      goto LABEL_66;
    }
    uint64_t v77 = swift_retain();
    sub_1002DC65C(v77, 2u, 0xD000000000000025, 0x80000001003BD310, 2147483653);
    goto LABEL_65;
  }
  uint64_t v23 = v87;
  uint64_t v24 = v86;
  if (v10 && *(unsigned char *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) != 4)
  {
    uint64_t v25 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
    if (*(unsigned __int16 *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == v87
      && *(unsigned __int8 *)(v10 + 16) == v86)
    {
      uint64_t v26 = v3 + OBJC_IVAR____TtC10seserviced9AlishaRKE_logger;
      swift_retain();
      id v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v80 = v26;
        uint64_t v30 = v29;
        uint64_t v79 = swift_slowAlloc();
        uint64_t v83 = v79;
        *(_DWORD *)uint64_t v30 = 33555202;
        LOWORD(v82) = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v30 + 6) = 256;
        LOBYTE(v82) = v24;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v30 + 9) = 2080;
        swift_beginAccess();
        if (*((void *)&v85 + 1) >> 60 == 15) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = 0x7461642068746977;
        }
        if (*((void *)&v85 + 1) >> 60 == 15) {
          unint64_t v32 = 0xE000000000000000;
        }
        else {
          unint64_t v32 = 0xE900000000000061;
        }
        uint64_t v81 = sub_100290514(v31, v32, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Received confirmation request for function %hu action %hhu %s", (uint8_t *)v30, 0x13u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v33 = *(void (**)(uint64_t, uint64_t, void, void, uint64_t, unint64_t))(v10 + 56);
      if (v33)
      {
        swift_retain();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          unint64_t v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Sending continuation request to client", v36, 2u);
          swift_slowDealloc();
        }

        swift_beginAccess();
        long long v37 = v85;
        uint64_t v38 = *(void *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
        unint64_t v39 = *(void *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
        sub_1000758F4(v85, *((unint64_t *)&v85 + 1));
        sub_10006D0EC(v38, v39);
        v33(v23, v24, v37, *((void *)&v37 + 1), v38, v39);
        sub_10006D144(v38, v39);
        sub_100075868(v37, *((unint64_t *)&v37 + 1));
        uint64_t v40 = *(void *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
        if (v40) {
          sub_1000529D8(v40, *(double *)(v10 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
        }
        swift_release();
        sub_10008BECC((uint64_t)v33);
        swift_release();
        unint64_t v42 = *((void *)&v37 + 1);
        uint64_t v41 = v37;
        goto LABEL_67;
      }
      uint64_t v71 = Logger.logObject.getter();
      uint64_t v72 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v71, (os_log_type_t)v72))
      {
        os_log_type_t v73 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v73 = 0;
        _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v72, "Automatically sending an event to continue the enduring request", v73, 2u);
        swift_slowDealloc();
      }

      sub_1002DA8E4(v10, 0, 0xF000000000000000);
      if (v14) {
        swift_errorRelease();
      }
LABEL_65:
      swift_release_n();
      goto LABEL_66;
    }
    uint64_t v83 = 0;
    unint64_t v84 = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    uint64_t v83 = 0xD000000000000016;
    unint64_t v84 = 0x80000001003BD340;
    LOWORD(v82) = *(_WORD *)(v10 + v25);
    v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 2122016;
    v44._object = (void *)0xE300000000000000;
    String.append(_:)(v44);
    LOBYTE(v82) = *(unsigned char *)(v10 + 16);
    v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 0x20746E657665202CLL;
    v46._object = (void *)0xEA00000000002066;
    String.append(_:)(v46);
    LOWORD(v82) = v23;
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 2122016;
    v48._object = (void *)0xE300000000000000;
    String.append(_:)(v48);
    LOBYTE(v82) = v24;
    v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    sub_1002DC65C(v10, 2u, v83, v84, 2147483654);
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 33554944;
    LOWORD(v83) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 6) = 256;
    LOBYTE(v83) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Sending an event to stop the enduring RKE function %hu action %hhu", (uint8_t *)v52, 9u);
    swift_slowDealloc();
  }

  uint64_t v83 = sub_100088F40((uint64_t)&off_10040E508);
  unint64_t v84 = v53;
  sub_10006C51C(&qword_1004557C0);
  uint64_t v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_10037AA50;
  os_log_type_t v55 = self;
  id v56 = [v55 TLVWithTag:128 unsignedShort:__rev16(v23)];
  if (!v56)
  {
    __break(1u);
    goto LABEL_71;
  }
  *(void *)(v54 + 32) = v56;
  id v57 = [v55 TLVWithTag:129 unsignedChar:v24];
  if (!v57)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  *(void *)(v54 + 40) = v57;
  uint64_t v82 = v54;
  specialized Array._endMutation()();
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v59 = [v55 TLVWithTag:32631 children:isa];

  if (!v59)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  id v60 = [v59 asData];

  if (v60)
  {
    uint64_t v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v63 = v62;

    Data.append(_:)();
    sub_10006D144(v61, v63);
    if (qword_100453798 == -1) {
      goto LABEL_43;
    }
    goto LABEL_69;
  }
LABEL_73:
  __break(1u);
}

void sub_1002DF358(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v117 = a3;
  uint64_t v5 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  unint64_t v116 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  uint64_t v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  id v16 = (char *)&v110 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  id v21 = (char ***)((char *)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100468A38;
  *id v21 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  id v23 = (id)v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v18 + 8))(v21, v17);
  if (v22)
  {
    switch(a2 >> 62)
    {
      case 1uLL:
        LODWORD(v24) = HIDWORD(a1) - a1;
        if (__OFSUB__(HIDWORD(a1), a1)) {
          goto LABEL_67;
        }
        uint64_t v24 = (int)v24;
        goto LABEL_9;
      case 2uLL:
        uint64_t v26 = *(void *)(a1 + 16);
        uint64_t v25 = *(void *)(a1 + 24);
        BOOL v27 = __OFSUB__(v25, v26);
        uint64_t v24 = v25 - v26;
        if (v27) {
          goto LABEL_68;
        }
        goto LABEL_9;
      case 3uLL:
        goto LABEL_13;
      default:
        uint64_t v24 = BYTE6(a2);
LABEL_9:
        if (v24 >= 1)
        {
          sub_10006D0EC(a1, a2);
          switch(sub_10007D4A4(a1, a2, 0, 0, 0))
          {
            case 0u:
              uint64_t v28 = v117;
              swift_retain_n();
              uint64_t v29 = Logger.logObject.getter();
              os_log_type_t v30 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v29, v30))
              {
                uint64_t v31 = (uint8_t *)swift_slowAlloc();
                uint64_t v32 = swift_slowAlloc();
                *(_DWORD *)uint64_t v31 = 136315138;
                uint64_t v121 = v32;
                swift_retain();
                uint64_t v33 = UUID.uuidString.getter();
                unint64_t v35 = v34;
                swift_release();
                uint64_t v123 = sub_100290514(v33, v35, &v121);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v29, v30, "Received unsubscribed all, no subscription possible %s", v31, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_release_n();
              }

              uint64_t v67 = v28 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
              swift_beginAccess();
              sub_1000F68F4(v67, (uint64_t)v8);
              swift_endAccess();
              sub_10008E734((uint64_t)v8, &qword_100455EB0);
              return;
            case 1u:
              swift_retain_n();
              Swift::String v43 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.info.getter();
              if (!os_log_type_enabled(v43, v44)) {
                goto LABEL_25;
              }
              Swift::String v45 = (uint8_t *)swift_slowAlloc();
              uint64_t v58 = swift_slowAlloc();
              *(_DWORD *)Swift::String v45 = 136315138;
              uint64_t v121 = v58;
              swift_retain();
              uint64_t v59 = UUID.uuidString.getter();
              unint64_t v61 = v60;
              swift_release();
              uint64_t v123 = sub_100290514(v59, v61, &v121);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              uint64_t v50 = "Received subscription request successful %s";
              goto LABEL_24;
            case 2u:
              swift_retain_n();
              Swift::String v43 = Logger.logObject.getter();
              os_log_type_t v44 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v43, v44))
              {
                Swift::String v45 = (uint8_t *)swift_slowAlloc();
                uint64_t v46 = swift_slowAlloc();
                *(_DWORD *)Swift::String v45 = 136315138;
                uint64_t v121 = v46;
                swift_retain();
                uint64_t v47 = UUID.uuidString.getter();
                unint64_t v49 = v48;
                swift_release();
                uint64_t v123 = sub_100290514(v47, v49, &v121);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                swift_bridgeObjectRelease();
                uint64_t v50 = "Received unsubscribe request successful %s";
LABEL_24:
                _os_log_impl((void *)&_mh_execute_header, v43, v44, v50, v45, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
LABEL_25:
                swift_release_n();
              }
              break;
            case 3u:
              a1 = v117;
              os_log_type_t v51 = &v118[OBJC_IVAR____TtC10seserviced9AlishaRKE_logger];
              swift_retain_n();
              uint64_t v113 = v51;
              uint64_t v52 = Logger.logObject.getter();
              os_log_type_t v53 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v52, v53))
              {
                uint64_t v54 = (uint8_t *)swift_slowAlloc();
                uint64_t v115 = swift_slowAlloc();
                uint64_t v121 = v115;
                uint64_t v114 = v54;
                *(_DWORD *)uint64_t v54 = 136315138;
                uint64_t v112 = v54 + 4;
                swift_retain();
                uint64_t v55 = UUID.uuidString.getter();
                unint64_t v57 = v56;
                swift_release();
                uint64_t v123 = sub_100290514(v55, v57, &v121);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release_n();
                a1 = v117;
                swift_bridgeObjectRelease();
                _os_log_impl((void *)&_mh_execute_header, v52, v53, "Received subscription possible %s", v114, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                swift_release_n();
              }

              unint64_t v68 = v116;
              (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v13, a1 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier, v9);
              swift_beginAccess();
              sub_1000EA1A0((uint64_t)v16, v13);
              swift_endAccess();
              (*(void (**)(char *, uint64_t))(v68 + 8))(v16, v9);
              uint64_t v69 = qword_1004536D8;
              swift_retain();
              if (v69 == -1) {
                goto LABEL_34;
              }
              goto LABEL_69;
            default:
              sub_10006D0EC(a1, a2);
              sub_10006D0EC(a1, a2);
              unint64_t v36 = Logger.logObject.getter();
              os_log_type_t v37 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v36, v37)) {
                goto LABEL_28;
              }
              uint64_t v38 = (uint8_t *)swift_slowAlloc();
              uint64_t v121 = swift_slowAlloc();
              *(_DWORD *)uint64_t v38 = 136315138;
              uint64_t v118 = v38 + 4;
              uint64_t v123 = (uint64_t)sub_10023CDF4(a1, a2);
              sub_10006C51C((uint64_t *)&unk_100455EA0);
              sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
              uint64_t v62 = BidirectionalCollection<>.joined(separator:)();
              unint64_t v64 = v63;
              swift_bridgeObjectRelease();
              uint64_t v123 = sub_100290514(v62, v64, &v121);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              sub_10006D144(a1, a2);
              sub_10006D144(a1, a2);
              unint64_t v42 = "Received unknown subscription status %s";
              goto LABEL_15;
          }
          return;
        }
LABEL_13:
        sub_10006D0EC(a1, a2);
        sub_10006D0EC(a1, a2);
        unint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v36, v37))
        {
LABEL_28:

          sub_10006D144(a1, a2);
          uint64_t v65 = a1;
          unint64_t v66 = a2;
          goto LABEL_29;
        }
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v121 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v118 = v38 + 4;
        uint64_t v123 = (uint64_t)sub_10023CDF4(a1, a2);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v39 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();
        uint64_t v123 = sub_100290514(v39, v41, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(a1, a2);
        sub_10006D144(a1, a2);
        unint64_t v42 = "Ignoring invalid subscription status changed payload %s";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v36, v37, v42, v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        break;
    }
    goto LABEL_16;
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  swift_once();
LABEL_34:
  uint64_t v70 = (char **)off_100455CB0;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = sub_1001F7CB0;
  *(void *)(v71 + 24) = a1;
  uint64_t v73 = __chkstk_darwin(v71, v72);
  *(&v110 - 4) = (char **)sub_1000A97C0;
  *(&v110 - 3) = (char **)v73;
  *(&v110 - 2) = v70;
  __chkstk_darwin(v73, v74);
  *(&v110 - 2) = (char **)sub_1000A2ABC;
  *(&v110 - 1) = v75;
  uint64_t v77 = v76 + 4;
  swift_retain();
  os_unfair_lock_lock(v77);
  sub_100079ACC(&v121);
  os_unfair_lock_unlock(v77);
  uint64_t v78 = v121;
  swift_release();
  swift_release();
  uint64_t v79 = (char **)sub_1000BB0E4(v78);
  swift_bridgeObjectRelease();
  if (!v79)
  {
LABEL_62:
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v106)) {
      goto LABEL_17;
    }
    uint64_t v107 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v107 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v106, "Failed to retrieve endpoint", v107, 2u);
LABEL_16:
    swift_slowDealloc();
LABEL_17:

    return;
  }
  id v80 = [v79 readerIdentifier];
  if (!v80)
  {

    goto LABEL_62;
  }
  uint64_t v81 = v80;
  uint64_t v115 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v116 = v82;

  id v83 = [self sessionManager];
  id v84 = [v83 getActiveRKESessions];

  sub_10007582C(0, &qword_1004582B8);
  unint64_t v85 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v85 >> 62))
  {
    uint64_t v86 = *(void *)((v85 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v86) {
      goto LABEL_38;
    }
LABEL_74:
    swift_bridgeObjectRelease_n();
LABEL_75:
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v108 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v108))
    {
      uint64_t v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v108, "No range to subscribe", v109, 2u);
      swift_slowDealloc();
    }

    sub_10006D144(v115, v116);
    goto LABEL_17;
  }
LABEL_73:
  swift_bridgeObjectRetain();
  uint64_t v86 = _CocoaArrayWrapper.endIndex.getter();
  if (!v86) {
    goto LABEL_74;
  }
LABEL_38:
  unint64_t v110 = v79;
  if (v86 < 1)
  {
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    JUMPOUT(0x1002E0564);
  }
  uint64_t v87 = 0;
  Swift::String v111 = 0;
  uint64_t v112 = 0;
  LODWORD(v114) = 1;
  uint64_t v79 = &selRef_updateConfiguration_forKeyWithIdentifier_completionHandler_;
  do
  {
    if ((v85 & 0xC000000000000001) != 0) {
      id v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v88 = *(id *)(v85 + 8 * v87 + 32);
    }
    uint64_t v89 = v88;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    unsigned int v91 = [v89 isReaderAllowed:isa];

    if (!v91
      || [v89 subscriptionRange] == (id)0xFFFF
      || ([v89 subscriptionRange], v92 == 0xFFFF))
    {
    }
    else
    {
      unint64_t v93 = (uint8_t *)[v89 subscriptionRange];
      [v89 subscriptionRange];
      uint64_t v95 = v94;

      os_log_type_t v96 = (char *)&v93[v95];
      if (__OFADD__(v93, v95))
      {
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
      if (v114)
      {
        if ((uint64_t)v96 < (uint64_t)v93) {
          goto LABEL_71;
        }
        LODWORD(v114) = 0;
        Swift::String v111 = (char *)&v93[v95];
        uint64_t v112 = v93;
      }
      else
      {
        uint64_t v98 = v111;
        char v97 = v112;
        if ((uint64_t)v93 < (uint64_t)v112) {
          char v97 = v93;
        }
        if ((uint64_t)v96 > (uint64_t)v111) {
          uint64_t v98 = (char *)&v93[v95];
        }
        Swift::String v111 = v98;
        uint64_t v112 = v97;
        if ((uint64_t)v98 < (uint64_t)v97) {
          goto LABEL_72;
        }
        LODWORD(v114) = 0;
      }
    }
    ++v87;
  }
  while (v86 != v87);
  swift_bridgeObjectRelease_n();
  uint64_t v79 = v110;
  if (v114) {
    goto LABEL_75;
  }
  uint64_t v99 = Logger.logObject.getter();
  os_log_type_t v100 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v99, v100))
  {
    uint64_t v101 = (uint8_t *)swift_slowAlloc();
    uint64_t v123 = swift_slowAlloc();
    *(_DWORD *)uint64_t v101 = 136315138;
    uint64_t v113 = v101 + 4;
    uint64_t v114 = v101;
    uint64_t v103 = (uint64_t)v111;
    unint64_t v102 = (unint64_t)v112;
    uint64_t v119 = v111;
    uint64_t v120 = v112;
    uint64_t v121 = 0;
    unint64_t v122 = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v104._countAndFlagsBits = 3026478;
    v104._object = (void *)0xE300000000000000;
    String.append(_:)(v104);
    _print_unlocked<A, B>(_:_:)();
    uint64_t v121 = sub_100290514(v121, v122, &v123);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v99, v100, "Subscription range to use %s", v114, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v105 = v117;
  }
  else
  {

    uint64_t v105 = v117;
    uint64_t v103 = (uint64_t)v111;
    unint64_t v102 = (unint64_t)v112;
  }
  sub_1002DB0E8(v102, v103, v105);

  uint64_t v65 = v115;
  unint64_t v66 = v116;
LABEL_29:
  sub_10006D144(v65, v66);
}

void sub_1002E0584(unint64_t a1, unint64_t a2)
{
  id v4 = (char **)type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = (uint64_t)*(v4 - 1);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)type metadata accessor for DispatchQoS();
  uint64_t v84 = *(v9 - 1);
  __chkstk_darwin(v9, v10);
  id v83 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  unint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  id v16 = (uint64_t *)((char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v17 = qword_100468A38;
  *id v16 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  id v18 = (id)v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
  if (v17)
  {
    uint64_t v82 = v8;
    uint64_t v19 = qword_1004536D8;
    swift_retain();
    if (v19 == -1) {
      goto LABEL_4;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_4:
  uint64_t v20 = off_100455CB0;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_1001F7CB0;
  *(void *)(v21 + 24) = a2;
  uint64_t v23 = __chkstk_darwin(v21, v22);
  *(&v76 - 4) = (uint64_t)sub_1000AA894;
  *(&v76 - 3) = v23;
  *(&v76 - 2) = (uint64_t)v20;
  __chkstk_darwin(v23, v24);
  *(&v76 - 2) = (uint64_t)sub_1000AA878;
  *(&v76 - 1) = v25;
  BOOL v27 = v26 + 4;
  swift_retain();
  os_unfair_lock_lock(v27);
  uint64_t v28 = 0;
  sub_1000AA804(aBlock);
  os_unfair_lock_unlock(v27);
  id v29 = aBlock[0];
  swift_release();
  swift_release();
  os_log_type_t v30 = (void *)sub_1000BB0E4((uint64_t)v29);
  swift_bridgeObjectRelease();
  uint64_t v86 = v30;
  if (!v30)
  {
    unint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to retrieve endpoint", v37, 2u);
      swift_slowDealloc();
    }

    return;
  }
  uint64_t v80 = v5;
  uint64_t v81 = v4;
  uint64_t v79 = v9;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = v85;
    if (v12) {
      goto LABEL_7;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No function sequence tag", v34, 2u);
      swift_slowDealloc();
    }

    goto LABEL_17;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v5 = v85;
  if (!v12) {
    goto LABEL_14;
  }
LABEL_7:
  unint64_t v13 = a1 & 0xC000000000000001;
  uint64_t v8 = 4;
  id v4 = &selRef_setDesignation_designation_handoffToken_completion_;
  while (1)
  {
    if (v13) {
      uint64_t v31 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v31 = *(id *)(a1 + 8 * v8);
    }
    uint64_t v9 = v31;
    id v16 = (void *)(v8 - 3);
    if (__OFADD__(v8 - 4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if ([v31 tag] == 48) {
      break;
    }

    ++v8;
    if (v16 == (void *)v12) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    unint64_t v41 = (void *)swift_slowAlloc();
    uint64_t v78 = (uint64_t)v41;
    *(_DWORD *)unint64_t v40 = 136315138;
    aBlock[0] = v41;
    uint64_t v77 = v40 + 4;
    swift_retain();
    uint64_t v42 = UUID.uuidString.getter();
    unint64_t v44 = v43;
    swift_release();
    v90[0] = sub_100290514(v42, v44, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Received vehicle status update %s", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  if (qword_100453878 != -1) {
    swift_once();
  }
  uint64_t v45 = sub_10025DCAC(a2);
  v90[0] = v45;
  uint64_t v46 = (void *)sub_10025DCCC(a2);
  __int16 v89 = 0;
  id v47 = [v9 children];
  if (!v47) {
    goto LABEL_72;
  }
  unint64_t v48 = (unint64_t)v47;
  uint64_t v78 = v45;
  sub_10007582C(0, (unint64_t *)&qword_100454048);
  uint64_t v49 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if ((unint64_t)v49 >> 62)
  {
    if (v49 < 0) {
      unint64_t v48 = v49;
    }
    else {
      unint64_t v48 = v49 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v50 = _CocoaArrayWrapper.endIndex.getter();
    if (!v50) {
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v50 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v50) {
      goto LABEL_45;
    }
  }
  if (v50 < 1)
  {
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v51 = 0;
  do
  {
    if ((v49 & 0xC000000000000001) != 0) {
      id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v52 = *(id *)(v49 + 8 * v51 + 32);
    }
    os_log_type_t v53 = v52;
    ++v51;
    aBlock[0] = v52;
    sub_1002E1740(aBlock, v5, v86, a2, (uint64_t)v90, (uint64_t)v46, &v89, (BOOL *)&v89 + 1);
  }
  while (v50 != v51);
LABEL_45:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  if ((v89 & 0x100) != 0)
  {
    if (v89 == 1)
    {
LABEL_47:
      uint64_t v54 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
      unint64_t v55 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
      uint64_t v56 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
      unint64_t v57 = *(void *)(a2 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
      sub_1000758F4(v54, v55);
      sub_1000758F4(v56, v57);
      sub_1002B9140(0xD000000000000042, 0x80000001003BD380, v54, v55, v56, v57, 0);

      sub_100075868(v56, v57);
      sub_100075868(v54, v55);
      swift_bridgeObjectRelease();
      return;
    }
    goto LABEL_70;
  }
  uint64_t v50 = sub_10025DCAC(a2);
  swift_bridgeObjectRelease();
  v90[0] = v50;
  swift_bridgeObjectRetain_n();
  uint64_t v58 = sub_1000B28DC(v50);
  swift_bridgeObjectRelease();
  aBlock[0] = v58;
  sub_1002E4C84((uint64_t *)aBlock);
  swift_bridgeObjectRelease();
  uint64_t v28 = (uint8_t *)aBlock[0];
  id v59 = [v86 supportedRKEFunctions];
  uint64_t v46 = _swiftEmptyArrayStorage;
  if (!v59) {
    goto LABEL_64;
  }
  unint64_t v60 = v59;
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v48 >> 62)
  {
LABEL_62:
    swift_bridgeObjectRetain();
    uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v61) {
      goto LABEL_51;
    }
    goto LABEL_63;
  }
  uint64_t v61 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v61)
  {
LABEL_51:
    uint64_t v77 = v28;
    uint64_t v78 = v50;
    aBlock[0] = v46;
    sub_1002CFDC4(0, v61 & ~(v61 >> 63), 0);
    if ((v61 & 0x8000000000000000) == 0)
    {
      uint64_t v62 = 0;
      uint64_t v46 = aBlock[0];
      do
      {
        if ((v48 & 0xC000000000000001) != 0) {
          id v63 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v63 = *(id *)(v48 + 8 * v62 + 32);
        }
        unint64_t v64 = v63;
        unsigned __int16 v65 = (unsigned __int16)[v63 unsignedShortValue];

        aBlock[0] = v46;
        unint64_t v67 = v46[2];
        unint64_t v66 = v46[3];
        if (v67 >= v66 >> 1)
        {
          sub_1002CFDC4(v66 > 1, v67 + 1, 1);
          uint64_t v46 = aBlock[0];
        }
        ++v62;
        _OWORD v46[2] = v67 + 1;
        *((_WORD *)v46 + v67 + 16) = v65;
        uint64_t v5 = v85;
      }
      while (v61 != v62);
      swift_bridgeObjectRelease();
      uint64_t v28 = v77;
      goto LABEL_64;
    }
    __break(1u);
LABEL_72:
    __break(1u);
    swift_release();
    __break(1u);
    return;
  }
LABEL_63:
  swift_bridgeObjectRelease();
LABEL_64:
  BOOL v68 = sub_1002E44EC((uint64_t)v28, (uint64_t)v46);
  swift_bridgeObjectRelease();
  if (v68)
  {
    swift_release();
    if (v89 == 1) {
      goto LABEL_47;
    }
LABEL_70:
    swift_bridgeObjectRelease();

LABEL_17:
    return;
  }
  if (qword_100453930 != -1) {
    swift_once();
  }
  uint64_t v69 = (void *)swift_allocObject();
  uint64_t v70 = v86;
  _OWORD v69[2] = v86;
  v69[3] = v28;
  v69[4] = v5;
  v69[5] = a2;
  aBlock[4] = sub_1002E6BF8;
  aBlock[5] = v69;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10007C0C4;
  uint64_t aBlock[3] = &unk_100419540;
  uint64_t v71 = _Block_copy(aBlock);
  swift_retain();
  id v72 = v70;
  swift_retain();
  uint64_t v73 = v83;
  static DispatchQoS.unspecified.getter();
  uint64_t v87 = _swiftEmptyArrayStorage;
  sub_1002E75B8((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  uint64_t v74 = v82;
  os_log_type_t v75 = v81;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v71);

  (*(void (**)(uint64_t, char **))(v80 + 8))(v74, v75);
  (*(void (**)(char *, void *))(v84 + 8))(v73, v79);
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1002E1308(id *a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t *a5)
{
  id v9 = *a1;
  unsigned int v10 = [*a1 tag];
  switch(v10)
  {
    case 0x87u:
      id v17 = [v9 value];
      if (!v17)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      id v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      switch(v21 >> 62)
      {
        case 1uLL:
          sub_10006D144(v19, v21);
          LODWORD(v22) = HIDWORD(v19) - v19;
          if (__OFSUB__(HIDWORD(v19), v19))
          {
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v22 = (int)v22;
LABEL_18:
          if (v22 <= 64)
          {
LABEL_23:
            id v39 = [v9 value];
            if (v39)
            {
              unint64_t v40 = v39;
              uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v43 = v42;
            }
            else
            {
              uint64_t v41 = 0;
              unint64_t v43 = 0xF000000000000000;
            }
            uint64_t v44 = *a5;
            unint64_t v45 = a5[1];
            *a5 = v41;
            a5[1] = v43;
            sub_100075868(v44, v45);
          }
          else
          {
            id v9 = v9;
            uint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v31, v32))
            {

              return;
            }
            os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)os_log_type_t v33 = 134217984;
            id v34 = [v9 value];
            if (!v34)
            {
LABEL_42:

              __break(1u);
              JUMPOUT(0x1002E1720);
            }
            unint64_t v35 = v34;
            uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;

            switch(v38 >> 62)
            {
              case 1uLL:
                goto LABEL_31;
              case 2uLL:
                uint64_t v47 = *(void *)(v36 + 16);
                uint64_t v46 = *(void *)(v36 + 24);
                sub_10006D144(v36, v38);

                if (!__OFSUB__(v46, v47)) {
                  goto LABEL_34;
                }
                __break(1u);
LABEL_31:
                sub_10006D144(v36, v38);

                if (__OFSUB__(HIDWORD(v36), v36)) {
                  goto LABEL_38;
                }
LABEL_34:
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                _os_log_impl((void *)&_mh_execute_header, v31, v32, "Ignoring arbitrary data too large %ld bytes", v33, 0xCu);
                swift_slowDealloc();

                break;
              default:
                sub_10006D144(v36, v38);

                goto LABEL_34;
            }
          }
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v19 + 16);
          uint64_t v29 = *(void *)(v19 + 24);
          sub_10006D144(v19, v21);
          uint64_t v22 = v29 - v30;
          if (!__OFSUB__(v29, v30)) {
            goto LABEL_18;
          }
          goto LABEL_37;
        case 3uLL:
          sub_10006D144(v19, v21);
          goto LABEL_23;
        default:
          sub_10006D144(v19, v21);
          uint64_t v22 = BYTE6(v21);
          goto LABEL_18;
      }
      break;
    case 0x81u:
      id v23 = [v9 value];
      if (!v23)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v24 = v23;
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      char v28 = sub_10007D4A4(v25, v27, 0, 0, 0);
      if (v5)
      {
        swift_errorRelease();
        char v28 = 0;
      }
      *a3 = v28;
      a3[1] = v5 != 0;
      break;
    case 0x80u:
      id v11 = [v9 value];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        __int16 v16 = sub_10007D08C(v13, v15, 0, 0, 0);
        if (v5)
        {
          swift_errorRelease();
          __int16 v16 = 0;
        }
        *(_WORD *)a2 = v16;
        *(unsigned char *)(a2 + 2) = v5 != 0;
        return;
      }
      goto LABEL_39;
    default:
      return;
  }
}

void sub_1002E1740(id *a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, unsigned char *a7, BOOL *a8)
{
  id v15 = *a1;
  if ([*a1 tag] == 160)
  {
    uint64_t v47 = (uint64_t *)a5;
    unint64_t v48 = a4;
    unsigned __int16 v53 = 0;
    char v54 = 1;
    __int16 v52 = 256;
    long long v51 = xmmword_100378280;
    id v16 = [v15 children];
    if (!v16) {
      goto LABEL_26;
    }
    id v17 = v16;
    sub_10007582C(0, (unint64_t *)&qword_100454048);
    unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v18 >> 62)
    {
      swift_bridgeObjectRetain();
      a5 = _CocoaArrayWrapper.endIndex.getter();
      if (a5) {
        goto LABEL_5;
      }
    }
    else
    {
      a5 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (a5)
      {
LABEL_5:
        if (a5 >= 1)
        {
          uint64_t v45 = a6;
          uint64_t v46 = a7;
          uint64_t v44 = a8;
          uint64_t v19 = 0;
          do
          {
            if ((v18 & 0xC000000000000001) != 0) {
              id v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v20 = *(id *)(v18 + 8 * v19 + 32);
            }
            unint64_t v21 = v20;
            ++v19;
            uint64_t v50 = (uint64_t)v20;
            sub_1002E1BD8((id *)&v50, (uint64_t)&v53, &v52, a2, (uint64_t *)&v51);
          }
          while (a5 != v19);
          swift_bridgeObjectRelease_n();
          if ((v54 & 1) == 0 && (v52 & 0x100) == 0)
          {
            int v22 = v53;
            int v23 = v52;
            long long v24 = v51;
            sub_1000758F4(v51, *((unint64_t *)&v51 + 1));
            id v25 = [a3 publicKeyIdentifier];
            uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v28 = v27;

            uint64_t v29 = *v47;
            swift_bridgeObjectRetain();
            char v30 = sub_1002E6CA0(v22, v23, v24, *((unint64_t *)&v24 + 1), v48, v29, v45);
            swift_bridgeObjectRelease();
            sub_10006D144(v26, v28);
            sub_100075868(v24, *((unint64_t *)&v24 + 1));
            *uint64_t v46 = (*v46 | v30) & 1;
            if (v22 == 17) {
              *uint64_t v44 = v23 == 1;
            }
            unint64_t v32 = *((void *)&v24 + 1);
            uint64_t v31 = v24;
            goto LABEL_23;
          }
          goto LABEL_18;
        }
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_18:
    a5 = (uint64_t)v15;
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v34))
    {

      goto LABEL_22;
    }
    os_log_type_t v49 = v34;
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    *(_DWORD *)unint64_t v35 = 136315138;
    id v36 = [(id)a5 asData];
    if (v36)
    {
      unint64_t v37 = v36;
      uint64_t v38 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      sub_10023CDF4(v38, v40);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v41 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      sub_10006D144(v38, v40);
      sub_100290514(v41, v43, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v49, "Failed to retrieve function identifier and status %s", v35, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_22:

      unint64_t v32 = *((void *)&v51 + 1);
      uint64_t v31 = v51;
LABEL_23:
      sub_100075868(v31, v32);
      return;
    }
LABEL_27:

    __break(1u);
  }
}

void sub_1002E1BD8(id *a1, uint64_t a2, unsigned char *a3, uint64_t a4, uint64_t *a5)
{
  id v9 = *a1;
  unsigned int v10 = [*a1 tag];
  switch(v10)
  {
    case 0xC0u:
      id v17 = [v9 value];
      if (!v17)
      {
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      unint64_t v18 = v17;
      uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v21 = v20;

      switch(v21 >> 62)
      {
        case 1uLL:
          sub_10006D144(v19, v21);
          LODWORD(v22) = HIDWORD(v19) - v19;
          if (__OFSUB__(HIDWORD(v19), v19))
          {
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v22 = (int)v22;
LABEL_18:
          if (v22 <= 64)
          {
LABEL_23:
            id v39 = [v9 value];
            if (v39)
            {
              unint64_t v40 = v39;
              uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v43 = v42;
            }
            else
            {
              uint64_t v41 = 0;
              unint64_t v43 = 0xF000000000000000;
            }
            uint64_t v44 = *a5;
            unint64_t v45 = a5[1];
            *a5 = v41;
            a5[1] = v43;
            sub_100075868(v44, v45);
          }
          else
          {
            id v9 = v9;
            uint64_t v31 = Logger.logObject.getter();
            os_log_type_t v32 = static os_log_type_t.error.getter();
            if (!os_log_type_enabled(v31, v32))
            {

              return;
            }
            os_log_type_t v33 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)os_log_type_t v33 = 134217984;
            id v34 = [v9 value];
            if (!v34)
            {
LABEL_42:

              __break(1u);
              JUMPOUT(0x1002E1FF0);
            }
            unint64_t v35 = v34;
            uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v38 = v37;

            switch(v38 >> 62)
            {
              case 1uLL:
                goto LABEL_31;
              case 2uLL:
                uint64_t v47 = *(void *)(v36 + 16);
                uint64_t v46 = *(void *)(v36 + 24);
                sub_10006D144(v36, v38);

                if (!__OFSUB__(v46, v47)) {
                  goto LABEL_34;
                }
                __break(1u);
LABEL_31:
                sub_10006D144(v36, v38);

                if (__OFSUB__(HIDWORD(v36), v36)) {
                  goto LABEL_38;
                }
LABEL_34:
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                _os_log_impl((void *)&_mh_execute_header, v31, v32, "Ignoring proprietary data too large %ld bytes", v33, 0xCu);
                swift_slowDealloc();

                break;
              default:
                sub_10006D144(v36, v38);

                goto LABEL_34;
            }
          }
          break;
        case 2uLL:
          uint64_t v30 = *(void *)(v19 + 16);
          uint64_t v29 = *(void *)(v19 + 24);
          sub_10006D144(v19, v21);
          uint64_t v22 = v29 - v30;
          if (!__OFSUB__(v29, v30)) {
            goto LABEL_18;
          }
          goto LABEL_37;
        case 3uLL:
          sub_10006D144(v19, v21);
          goto LABEL_23;
        default:
          sub_10006D144(v19, v21);
          uint64_t v22 = BYTE6(v21);
          goto LABEL_18;
      }
      break;
    case 0x83u:
      id v23 = [v9 value];
      if (!v23)
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      long long v24 = v23;
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v26;

      char v28 = sub_10007D4A4(v25, v27, 0, 0, 0);
      if (v5)
      {
        swift_errorRelease();
        char v28 = 0;
      }
      *a3 = v28;
      a3[1] = v5 != 0;
      break;
    case 0x80u:
      id v11 = [v9 value];
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        __int16 v16 = sub_10007D08C(v13, v15, 0, 0, 0);
        if (v5)
        {
          swift_errorRelease();
          __int16 v16 = 0;
        }
        *(_WORD *)a2 = v16;
        *(unsigned char *)(a2 + 2) = v5 != 0;
        return;
      }
      goto LABEL_39;
    default:
      return;
  }
}

uint64_t sub_1002E2010(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v36 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v10 - 8);
  uint64_t v35 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a1;
  id v14 = [a1 publicKeyIdentifier];
  uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  uint64_t aBlock = sub_10023CDF4(v15, v17);
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  sub_10006D144(v15, v17);
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  unint64_t v42 = sub_1002E6C3C;
  unint64_t v43 = (void *)v19;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  unint64_t v40 = sub_10009A314;
  uint64_t v41 = &unk_100419590;
  unint64_t v20 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_release();
  id v21 = (id)SESEndPointUpdateWithBlock();
  _Block_release(v20);

  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)swift_allocObject();
  id v23 = v31;
  uint64_t v24 = v32;
  _OWORD v22[2] = v21;
  _OWORD v22[3] = v24;
  uint64_t v25 = v33;
  uint64_t v22[4] = v23;
  v22[5] = v25;
  unint64_t v42 = sub_1002E6C94;
  unint64_t v43 = v22;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  unint64_t v40 = sub_10007C0C4;
  uint64_t v41 = &unk_1004195E0;
  unint64_t v26 = _Block_copy(&aBlock);
  id v27 = v21;
  swift_retain();
  id v28 = v23;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v37 = _swiftEmptyArrayStorage;
  sub_1002E75B8((unint64_t *)&qword_100453D90, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10006C51C((uint64_t *)&unk_100455710);
  sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
  return swift_release();
}

void sub_1002E24AC(void *a1, uint64_t a2)
{
  sub_1002D9E9C(a2);
  sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a1 setSupportedRKEFunctions:isa];
}

uint64_t sub_1002E2538(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    swift_errorRetain();
    swift_errorRetain();
    id v6 = a3;
    swift_errorRetain();
    id v7 = v6;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      os_log_type_t type = v9;
      id v11 = [v7 publicKeyIdentifier];
      uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v14 = v13;

      sub_10023CDF4(v12, v14);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v15 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v17 = v16;
      swift_bridgeObjectRelease();
      sub_10006D144(v12, v14);
      sub_100290514(v15, v17, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      sub_100290514(v18, v19, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, type, "Failed to update supported RKE functions for %s %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Endpoint updated with supported RKE functions", v22, 2u);
      swift_slowDealloc();
    }
  }
  uint64_t v23 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
  unint64_t v24 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
  uint64_t v25 = a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier;
  uint64_t v26 = *(void *)(a4 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
  unint64_t v27 = *(void *)(v25 + 8);
  sub_1000758F4(v23, v24);
  sub_1000758F4(v26, v27);
  sub_1002B9140(0xD000000000000042, 0x80000001003BD380, v23, v24, v26, v27, 0);
  sub_100075868(v26, v27);
  return sub_100075868(v23, v24);
}

unint64_t sub_1002E2908@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2 = *a1;
  sub_10006C51C(&qword_1004555D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10037B540;
  *(void *)(inited + 32) = 0xD000000000000012;
  *(void *)(inited + 40) = 0x80000001003B9B00;
  *(_WORD *)(inited + 48) = *(_WORD *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
  *(void *)(inited + 72) = &type metadata for UInt16;
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001003BD1D0;
  *(unsigned char *)(inited + 96) = *(unsigned char *)(v2 + 16);
  *(void *)(inited + 120) = &type metadata for UInt8;
  strcpy((char *)(inited + 128), "keyIdentifier");
  *(_WORD *)(inited + 142) = -4864;
  sub_10023CDF4(*(void *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
  sub_10006C51C((uint64_t *)&unk_100455EA0);
  sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
  uint64_t v4 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v6 = v5;
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v4;
  *(void *)(inited + 152) = v6;
  *(void *)(inited + 168) = &type metadata for String;
  *(void *)(inited + 176) = 0xD000000000000010;
  *(void *)(inited + 184) = 0x80000001003B5B90;
  sub_10023CDF4(*(void *)(v2 + 24), *(void *)(v2 + 32));
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  *(void *)(inited + 192) = v7;
  *(void *)(inited + 200) = v9;
  *(void *)(inited + 216) = &type metadata for String;
  *(void *)(inited + 224) = 1919247728;
  *(void *)(inited + 232) = 0xE400000000000000;
  *(void *)(inited + 240) = UUID.uuidString.getter();
  *(void *)(inited + 248) = v10;
  *(void *)(inited + 264) = &type metadata for String;
  *(void *)(inited + 272) = 1701869940;
  *(void *)(inited + 280) = 0xE400000000000000;
  *(void *)(inited + 288) = String.init<A>(describing:)();
  *(void *)(inited + 296) = v11;
  *(void *)(inited + 312) = &type metadata for String;
  *(void *)(inited + 320) = 0x6574617473;
  *(void *)(inited + 328) = 0xE500000000000000;
  *(void *)(inited + 336) = String.init<A>(describing:)();
  *(void *)(inited + 344) = v12;
  *(void *)(inited + 360) = &type metadata for String;
  *(void *)(inited + 368) = 0x5374756F656D6974;
  *(void *)(inited + 376) = 0xEA00000000006365;
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec);
  *(void *)(inited + 408) = &type metadata for Double;
  *(void *)(inited + 384) = v13;
  unint64_t result = sub_1001DB224(inited);
  *a2 = result;
  return result;
}

uint64_t sub_1002E2C04(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, __int16 a5, char a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = v18;
  unint64_t v24 = (void *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
  *unint64_t v24 = 0;
  v24[1] = 0;
  *(unsigned char *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 0;
  *(void *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer) = 0;
  uint64_t v25 = (uint64_t *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
  uint64_t *v25 = a1;
  v25[1] = a2;
  *(void *)(v18 + 24) = a3;
  *(void *)(v18 + 32) = a4;
  *(_WORD *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) = a5;
  *(unsigned char *)(v18 + 16) = a6;
  *(unsigned char *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type) = a7;
  *(void *)(v18 + 56) = a8;
  *(void *)(v18 + 64) = a9;
  *(void *)(v18 + 40) = a10;
  *(void *)(v18 + 48) = a11;
  uint64_t v26 = (void *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_readerInformation);
  *uint64_t v26 = a12;
  v26[1] = a13;
  *(void *)(v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_peer) = a14;
  uint64_t v27 = v18 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  uint64_t v28 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v28 - 8);
  uint64_t v37 = v28;
  (*(void (**)(uint64_t, uint64_t))(v36 + 16))(v27, a15);
  *(double *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec) = (double)a16 / 1000.0;
  uint64_t v29 = (void *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
  uint64_t v30 = *(void *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion);
  *uint64_t v29 = a17;
  v29[1] = a18;
  sub_10006D0EC(a1, a2);
  unint64_t v35 = a4;
  sub_10006D0EC(a3, a4);
  sub_10008BEBC(a8);
  sub_1000758F4(a10, a11);
  swift_retain();
  swift_retain();
  sub_10008BECC(v30);
  *(unsigned char *)(v19 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 0;
  if (qword_100453948 != -1) {
    swift_once();
  }
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "RKE request timer set to %f sec", v33, 0xCu);
    swift_slowDealloc();
    swift_release();
    swift_release();
    sub_100075868(a10, a11);
    sub_10008BECC(a8);
    sub_10006D144(a3, v35);
    sub_10006D144(a1, a2);
  }
  else
  {
    swift_release();
    swift_release();
    sub_100075868(a10, a11);
    sub_10008BECC(a8);
    sub_10006D144(a3, v35);
    sub_10006D144(a1, a2);
    swift_release_n();
  }

  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(a15, v37);
  return v19;
}

uint64_t sub_1002E2FB0()
{
  sub_10006D144(*(void *)(v0 + 24), *(void *)(v0 + 32));
  sub_100075868(*(void *)(v0 + 40), *(void *)(v0 + 48));
  sub_10008BECC(*(void *)(v0 + 56));
  uint64_t v1 = v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_10008BECC(*(void *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_completion));
  sub_10006D144(*(void *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(v0 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_1002E3088()
{
  sub_1002E2FB0();

  return swift_deallocClassInstance();
}

uint64_t sub_1002E30E0(uint64_t *a1, uint64_t *a2)
{
  return sub_1002E55E4(*a1, *a2);
}

uint64_t *sub_1002E30EC@<X0>(uint64_t *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result >= 3) {
    LOBYTE(v2) = 3;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_1002E3104()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC10seserviced9AlishaRKE_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1002E31E4()
{
  return type metadata accessor for AlishaRKE(0);
}

uint64_t type metadata accessor for AlishaRKE(uint64_t a1)
{
  return sub_100087C90(a1, qword_10045BA98);
}

uint64_t sub_1002E320C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1002E32C0()
{
  return type metadata accessor for AlishaRKE.RKERequest(0);
}

uint64_t type metadata accessor for AlishaRKE.RKERequest(uint64_t a1)
{
  return sub_100087C90(a1, qword_10045BBA8);
}

uint64_t sub_1002E32E8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.RequestType()
{
  return &type metadata for AlishaRKE.RequestType;
}

unsigned char *storeEnumTagSinglePayload for AlishaRKE.RKERequest.RequestState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002E34DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.RKERequest.RequestState()
{
  return &type metadata for AlishaRKE.RKERequest.RequestState;
}

unsigned char *storeEnumTagSinglePayload for AlishaRKE.RKEError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002E35E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.RKEError()
{
  return &type metadata for AlishaRKE.RKEError;
}

unsigned char *_s10seserviced9AlishaRKEC17PassiveEntryStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1002E36E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlishaRKE.PassiveEntryState()
{
  return &type metadata for AlishaRKE.PassiveEntryState;
}

unint64_t sub_1002E3720()
{
  unint64_t result = qword_10045BC98;
  if (!qword_10045BC98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045BC98);
  }
  return result;
}

unint64_t sub_1002E3778()
{
  unint64_t result = qword_10045BCA0;
  if (!qword_10045BCA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045BCA0);
  }
  return result;
}

unint64_t sub_1002E37D0()
{
  unint64_t result = qword_10045BCA8;
  if (!qword_10045BCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045BCA8);
  }
  return result;
}

unint64_t sub_1002E3828()
{
  unint64_t result = qword_10045BCB0;
  if (!qword_10045BCB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045BCB0);
  }
  return result;
}

uint64_t sub_1002E387C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    int v3 = (unint64_t *)(a1 + 40);
    unsigned int v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_10006D0EC(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_10006D144(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                uint64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_10006D0EC(v8, v7);
                uint64_t v23 = (char *)__DataStorage._bytes.getter();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                __DataStorage._length.getter();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  unint64_t v40 = __s1;
                  uint64_t v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)__DataStorage._bytes.getter();
                  if (v25)
                  {
                    uint64_t v26 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = __DataStorage._length.getter();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_10006D144(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                uint64_t v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = __DataStorage._bytes.getter();
                if (v68)
                {
                  uint64_t v69 = __DataStorage._offset.getter();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = __DataStorage._length.getter();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                uint64_t v56 = v23;
                int v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                unint64_t v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                uint64_t v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_10006D0EC(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  uint64_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                __DataStorage._length.getter();
                int v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    unint64_t v42 = (char *)__DataStorage._bytes.getter();
                    if (v42)
                    {
                      uint64_t v43 = __DataStorage._offset.getter();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = __DataStorage._length.getter();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    int v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_10006D144(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_10006D144(v8, v7);
LABEL_104:
                    sub_10006D144(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v61 = (char *)__DataStorage._bytes.getter();
                    if (v61)
                    {
                      uint64_t v62 = __DataStorage._offset.getter();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = __DataStorage._length.getter();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    int v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_10006D144(v8, v7);
                    sub_10006D144(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_10006D144(v8, v7);
                  sub_10006D144(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                os_log_type_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_10006D0EC(v8, v7);
                  uint64_t v34 = __DataStorage._bytes.getter();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = __DataStorage._length.getter();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_10006D144(v8, v7);
                  sub_10006D144(v6, v5);
                  int v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_10006D0EC(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = __DataStorage._length.getter();
                int v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                uint64_t v56 = __s1;
                unint64_t v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_10006D0EC(v8, v7);
                  uint64_t v39 = __s1;
                  unint64_t v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                os_log_type_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_10006D0EC(v8, v7);
                  uint64_t v19 = __DataStorage._bytes.getter();
                  if (!v19)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x1002E41B4);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = __DataStorage._offset.getter();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_10006D0EC(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = __DataStorage._bytes.getter();
                if (v48)
                {
                  uint64_t v49 = __DataStorage._offset.getter();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = __DataStorage._length.getter();
                int v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_10006D0EC(v8, v7);
LABEL_121:
          sub_10006D144(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

uint64_t sub_1002E41E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v25 = a2 + 32;
    uint64_t v26 = a1 + 32;
    uint64_t v24 = *(void *)(a1 + 16);
    while (1)
    {
      uint64_t v4 = v26 + 72 * v3;
      unint64_t v5 = *(void **)v4;
      uint64_t v6 = v25 + 72 * v3;
      unint64_t v7 = *(void **)v6;
      uint64_t v8 = *(void *)(*(void *)v4 + 16);
      if (v8 != *(void *)(*(void *)v6 + 16)) {
        return 0;
      }
      uint64_t v9 = *(void *)(v4 + 8);
      uint64_t v10 = *(void *)(v4 + 16);
      uint64_t v11 = *(void *)(v4 + 56);
      uint64_t v12 = *(void *)(v6 + 8);
      uint64_t v13 = *(void *)(v6 + 16);
      int64x2_t v31 = *(int64x2_t *)(v6 + 40);
      int64x2_t v32 = *(int64x2_t *)(v4 + 40);
      int64x2_t v29 = *(int64x2_t *)(v6 + 24);
      int64x2_t v30 = *(int64x2_t *)(v4 + 24);
      if (v8) {
        BOOL v14 = v5 == v7;
      }
      else {
        BOOL v14 = 1;
      }
      uint64_t v15 = *(void *)(v6 + 56);
      uint64_t v27 = *(void *)(v6 + 64);
      uint64_t v28 = *(void *)(v4 + 64);
      if (!v14)
      {
        BOOL v16 = v5[4] == v7[4] && v5[5] == v7[5];
        if (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
        if (v8 != 1)
        {
          BOOL v17 = v5[6] == v7[6] && v5[7] == v7[7];
          if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          uint64_t v18 = v8 - 2;
          if (v18)
          {
            uint64_t v21 = v7 + 9;
            uint64_t v22 = v5 + 9;
            do
            {
              BOOL v23 = *(v22 - 1) == *(v21 - 1) && *v22 == *v21;
              if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                return 0;
              }
              v21 += 2;
              v22 += 2;
            }
            while (--v18);
          }
        }
      }
      if (v9 == v12 && v10 == v13)
      {
        uint64_t result = 0;
        char v20 = v11 == v15;
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v30, v29), (int32x4_t)vceqq_s64(v32, v31))), 0xFuLL))) & 1) == 0)return result; {
      }
        }
      else
      {
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = 0;
        if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v30, v29), (int32x4_t)vceqq_s64(v32, v31))), 0xFuLL))) & 1) == 0|| v11 != v15)
        {
          return result;
        }
      }
      if ((v20 & 1) == 0 || v28 != v27) {
        return result;
      }
      if (++v3 == v24) {
        return 1;
      }
    }
  }
  return 1;
}

uint64_t sub_1002E4424(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1002E44EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  BOOL v5 = (unsigned __int16 *)(a1 + 34);
  char v6 = (unsigned __int16 *)(a2 + 34);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_1002E4560(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  __int16 v43 = *(_WORD *)(a1 + 48);
  swift_bridgeObjectRetain();
  int v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1002C0AD0(v8, v7);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1002CF608();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    char v20 = (uint64_t *)(v19[6] + 16 * v11);
    uint64_t *v20 = v8;
    v20[1] = v7;
    *(_WORD *)(v19[7] + 2 * v11) = v43;
    uint64_t v21 = v19[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v19[2] = v23;
    uint64_t v24 = v4 - 1;
    if (v4 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = (_WORD *)(a1 + 72); ; i += 12)
    {
      uint64_t v27 = *((void *)i - 2);
      uint64_t v26 = *((void *)i - 1);
      __int16 v28 = *i;
      int64x2_t v29 = (void *)*a3;
      swift_bridgeObjectRetain();
      unint64_t v30 = sub_1002C0AD0(v27, v26);
      uint64_t v32 = v29[2];
      BOOL v33 = (v31 & 1) == 0;
      BOOL v22 = __OFADD__(v32, v33);
      uint64_t v34 = v32 + v33;
      if (v22) {
        break;
      }
      char v35 = v31;
      if (v29[3] < v34)
      {
        sub_1002C8D28(v34, 1);
        unint64_t v30 = sub_1002C0AD0(v27, v26);
        if ((v35 & 1) != (v36 & 1)) {
          goto LABEL_25;
        }
      }
      if (v35) {
        goto LABEL_10;
      }
      size_t v37 = (void *)*a3;
      *(void *)(*a3 + 8 * (v30 >> 6) + 64) |= 1 << v30;
      int v38 = (uint64_t *)(v37[6] + 16 * v30);
      uint64_t *v38 = v27;
      v38[1] = v26;
      *(_WORD *)(v37[7] + 2 * v30) = v28;
      uint64_t v39 = v37[2];
      BOOL v22 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v22) {
        goto LABEL_24;
      }
      _OWORD v37[2] = v40;
      if (!--v24) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002C8D28(v14, a2 & 1);
  uint64_t v16 = sub_1002C0AD0(v8, v7);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v41._object = (void *)0x80000001003B4890;
  v41._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  v42._countAndFlagsBits = 39;
  v42._object = (void *)0xE100000000000000;
  String.append(_:)(v42);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002E48E4(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[7];
  uint64_t v46 = a1[6];
  swift_bridgeObjectRetain();
  int v9 = (void *)*a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = sub_1002C0AD0(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if (a2)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      sub_1002CF7B8();
      if (v15) {
        goto LABEL_10;
      }
    }
LABEL_13:
    uint64_t v19 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    char v20 = (uint64_t *)(v19[6] + 16 * v11);
    uint64_t *v20 = v7;
    v20[1] = v6;
    uint64_t v21 = (void *)(v19[7] + 16 * v11);
    *uint64_t v21 = v46;
    v21[1] = v8;
    uint64_t v22 = v19[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    void v19[2] = v24;
    uint64_t v25 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n();
    }
    for (uint64_t i = a1 + 11; ; i += 4)
    {
      uint64_t v28 = *(i - 3);
      uint64_t v27 = *(i - 2);
      uint64_t v29 = *(i - 1);
      uint64_t v30 = *i;
      char v31 = (void *)*a3;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v32 = sub_1002C0AD0(v28, v27);
      uint64_t v34 = v31[2];
      BOOL v35 = (v33 & 1) == 0;
      BOOL v23 = __OFADD__(v34, v35);
      uint64_t v36 = v34 + v35;
      if (v23) {
        break;
      }
      char v37 = v33;
      if (v31[3] < v36)
      {
        sub_1002C9034(v36, 1);
        unint64_t v32 = sub_1002C0AD0(v28, v27);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }
      if (v37) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      uint64_t v40 = (uint64_t *)(v39[6] + 16 * v32);
      *uint64_t v40 = v28;
      v40[1] = v27;
      Swift::String v41 = (void *)(v39[7] + 16 * v32);
      *Swift::String v41 = v29;
      v41[1] = v30;
      uint64_t v42 = v39[2];
      BOOL v23 = __OFADD__(v42, 1);
      uint64_t v43 = v42 + 1;
      if (v23) {
        goto LABEL_24;
      }
      _OWORD v39[2] = v43;
      if (!--v25) {
        return swift_bridgeObjectRelease_n();
      }
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1002C9034(v14, a2 & 1);
  uint64_t v16 = sub_1002C0AD0(v7, v6);
  if ((v15 & 1) == (v17 & 1))
  {
    unint64_t v11 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_13;
    }
LABEL_10:
    swift_allocError();
    swift_willThrow();
    swift_errorRetain();
    sub_10006C51C((uint64_t *)&unk_10045AFD0);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return swift_errorRelease();
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v44._object = (void *)0x80000001003B4890;
  v44._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  _print_unlocked<A, B>(_:_:)();
  v45._countAndFlagsBits = 39;
  v45._object = (void *)0xE100000000000000;
  String.append(_:)(v45);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_1002E4C84(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100079BEC(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1002E4CF0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1002E4CF0(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(unsigned __int16 *)(v79 + 2 * i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(unsigned __int16 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(_WORD *)(v79 + v82 + 2) = v83;
          *(_WORD *)(v79 + v82) = v81;
          v82 -= 2;
        }
        while (v82 != -2);
        v78 += 2;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_1002E5380((unsigned __int16 *)(v84 + 2 * v88), (unsigned __int16 *)(v84 + 2 * *(void *)&v87[16 * v12 - 16]), v84 + 2 * v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v86 = sub_100079A98((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          os_log_type_t v90 = &v86[16 * v85 + 32];
          *(void *)os_log_type_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          unint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v94 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 2;
  unint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(unsigned __int16 *)(v10 + 2 * v9);
      unsigned int v15 = *(unsigned __int16 *)(v10 + 2 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(unsigned __int16 *)(v10 + 2 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              __int16 v20 = *(_WORD *)(v10 + 2 * v19);
              *(_WORD *)(v10 + 2 * v19) = *(_WORD *)(v10 + 2 * v18);
              *(_WORD *)(v10 + 2 * v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (unsigned __int16 *)(v93 + 2 * v9);
      do
      {
        unsigned int v23 = *(unsigned __int16 *)(v10 + 2 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          unsigned int v26 = *v25;
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          v25[1] = v26;
          *v25-- = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v11 = sub_100079810(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v97;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_100079810((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v97;
      unint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          Swift::String v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            int v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        size_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        uint64_t v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_1002E5380((unsigned __int16 *)(v10 + 2 * *(void *)v71), (unsigned __int16 *)(v10 + 2 * *(void *)v74), v10 + 2 * v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v97;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v96;
    if (v9 >= v96)
    {
      uint64_t v8 = v94;
      uint64_t v2 = v92;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002E5380(unsigned __int16 *__src, unsigned __int16 *a2, unint64_t a3, char *__dst)
{
  unsigned int v26 = __src;
  uint64_t v4 = (unsigned __int16 *)__dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  else {
    int64_t v9 = v8 + 1;
  }
  uint64_t v10 = v9 >> 1;
  uint64_t v11 = a3 - (void)a2;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  else {
    uint64_t v12 = v11 + 1;
  }
  uint64_t v13 = v12 >> 1;
  uint64_t v25 = (unsigned __int16 *)__dst;
  if (v10 >= v12 >> 1)
  {
    if (v11 >= -1)
    {
      if (__dst != (char *)a2 || &a2[v13] <= (unsigned __int16 *)__dst) {
        memmove(__dst, a2, 2 * v13);
      }
      Swift::Int v18 = &v4[v13];
      Swift::Int v24 = v18;
      unsigned int v26 = v6;
      if (v7 < v6 && v11 >= 2)
      {
        Swift::Int v19 = (unsigned __int16 *)(a3 - 2);
        while (1)
        {
          __int16 v20 = v19 + 1;
          Swift::Int v21 = v6 - 1;
          unsigned int v22 = *(v6 - 1);
          if (*(v18 - 1) >= v22)
          {
            Swift::Int v24 = v18 - 1;
            if (v20 < v18 || v19 >= v18 || v20 != v18) {
              *Swift::Int v19 = *(v18 - 1);
            }
            --v18;
            if (v6 <= v7) {
              goto LABEL_44;
            }
          }
          else
          {
            if (v20 != v6 || v19 >= v6) {
              *Swift::Int v19 = v22;
            }
            unsigned int v26 = --v6;
            if (v21 <= v7) {
              goto LABEL_44;
            }
          }
          --v19;
          if (v18 <= v4) {
            goto LABEL_44;
          }
        }
      }
      goto LABEL_44;
    }
  }
  else if (v8 >= -1)
  {
    if (__dst != (char *)__src || &__src[v10] <= (unsigned __int16 *)__dst) {
      memmove(__dst, __src, 2 * v10);
    }
    unsigned int v14 = &v4[v10];
    Swift::Int v24 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 2)
    {
      do
      {
        unsigned int v15 = *v6;
        unsigned int v16 = *v4;
        if (v15 >= v16)
        {
          if (v7 != v4) {
            *uint64_t v7 = v16;
          }
          uint64_t v25 = ++v4;
          unsigned int v17 = v6;
        }
        else
        {
          unsigned int v17 = v6 + 1;
          if (v7 < v6 || v7 >= v17 || v7 != v6) {
            *uint64_t v7 = v15;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v17;
      }
      while ((unint64_t)v17 < a3);
      unsigned int v26 = v7;
    }
LABEL_44:
    sub_1000799E0((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1002E55E4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier) == *(unsigned __int16 *)(a2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    return sub_100088AE4(*(void *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(a1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8), *(void *)(a2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier), *(void *)(a2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8));
  }
  else
  {
    return 0;
  }
}

void *sub_1002E5634(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v46 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_62:
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  unint64_t v7 = 0;
  unint64_t v8 = (unint64_t)&unk_100468000;
  uint64_t v41 = v3;
  BOOL v42 = (uint64_t *)(a2 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
  uint64_t v43 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier;
  while ((a1 & 0xC000000000000001) == 0)
  {
    if (v7 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v9 = *(void *)(a1 + 8 * v7 + 32);
    swift_retain();
    unint64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      goto LABEL_55;
    }
LABEL_7:
    if (*(unsigned __int16 *)(v9 + *(void *)(v8 + 2680)) == *(unsigned __int16 *)(a2 + v43)
      && *(unsigned __int8 *)(v9 + 16) == *(unsigned __int8 *)(a2 + 16))
    {
      uint64_t v3 = *(void *)(v9 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
      unint64_t v8 = *(void *)(v9 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
      uint64_t v11 = *v42;
      unint64_t v12 = v42[1];
      uint64_t v13 = 0;
      switch(v8 >> 62)
      {
        case 1uLL:
          LODWORD(v13) = HIDWORD(v3) - v3;
          if (__OFSUB__(HIDWORD(v3), v3)) {
            goto LABEL_58;
          }
          uint64_t v13 = (int)v13;
          break;
        case 2uLL:
          uint64_t v15 = *(void *)(v3 + 16);
          uint64_t v14 = *(void *)(v3 + 24);
          BOOL v16 = __OFSUB__(v14, v15);
          uint64_t v13 = v14 - v15;
          if (!v16) {
            break;
          }
          goto LABEL_59;
        case 3uLL:
          break;
        default:
          uint64_t v13 = BYTE6(v8);
          break;
      }
      switch(v12 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v11), v11)) {
            goto LABEL_60;
          }
          if (v13 == HIDWORD(v11) - v11) {
            goto LABEL_24;
          }
          goto LABEL_28;
        case 2uLL:
          uint64_t v18 = *(void *)(v11 + 16);
          uint64_t v17 = *(void *)(v11 + 24);
          BOOL v16 = __OFSUB__(v17, v18);
          uint64_t v19 = v17 - v18;
          if (v16) {
            goto LABEL_61;
          }
          if (v13 != v19)
          {
LABEL_28:
            unint64_t v8 = 0x100468000;
            goto LABEL_29;
          }
LABEL_24:
          if (v13 < 1)
          {
LABEL_32:
            swift_release();
            unint64_t v8 = 0x100468000;
            break;
          }
          switch(v8 >> 62)
          {
            case 1uLL:
              if (v3 >> 32 < (int)v3)
              {
                __break(1u);
LABEL_65:
                __break(1u);
LABEL_66:
                __break(1u);
LABEL_67:
                __break(1u);
              }
              uint64_t v39 = *v42;
              unint64_t v40 = v42[1];
              sub_10006D0EC(v11, v12);
              sub_10006D0EC(v3, v8);
              uint64_t v27 = __DataStorage._bytes.getter();
              if (v27)
              {
                uint64_t v34 = v27;
                uint64_t v28 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v3, v28)) {
                  goto LABEL_67;
                }
                uint64_t v36 = (void *)(v34 + (int)v3 - v28);
              }
              else
              {
                uint64_t v36 = 0;
              }
              __DataStorage._length.getter();
              sub_1001E5240((uint64_t)v36, v39, v40, (char *)__s1);
              uint64_t v31 = v39;
              if (v41) {
                goto LABEL_70;
              }
              sub_10006D144(v39, v40);
              sub_10006D144(v3, v8);
LABEL_50:
              char v21 = __s1[0];
              break;
            case 2uLL:
              uint64_t v33 = *(void *)(v3 + 24);
              char v35 = *(char **)(v3 + 16);
              uint64_t v38 = *v42;
              unint64_t v40 = v42[1];
              sub_10006D0EC(v11, v40);
              swift_retain();
              swift_retain();
              uint64_t v22 = __DataStorage._bytes.getter();
              if (v22)
              {
                uint64_t v23 = v22;
                uint64_t v24 = __DataStorage._offset.getter();
                uint64_t v25 = v35;
                if (__OFSUB__(v35, v24)) {
                  goto LABEL_66;
                }
                unsigned int v26 = &v35[v23 - v24];
              }
              else
              {
                unsigned int v26 = 0;
                uint64_t v25 = v35;
              }
              if (__OFSUB__(v33, v25)) {
                goto LABEL_65;
              }
              uint64_t v37 = v26;
              __DataStorage._length.getter();
              unint64_t v8 = v38;
              sub_1001E5240((uint64_t)v37, v38, v40, (char *)__s1);
              uint64_t v29 = v38;
              unint64_t v30 = v40;
              if (v41) {
                goto LABEL_69;
              }
              sub_10006D144(v38, v40);
              swift_release();
              swift_release();
              goto LABEL_50;
            case 3uLL:
              memset(__s1, 0, 14);
              uint64_t v3 = v11;
              sub_10006D0EC(v11, v12);
              sub_1001E5240((uint64_t)__s1, v3, v12, &v44);
              unint64_t v8 = 0x100468000;
              uint64_t v20 = v3;
              if (v41) {
                goto LABEL_68;
              }
              sub_10006D144(v3, v12);
              if (v44 == 1) {
                goto LABEL_52;
              }
              goto LABEL_29;
            default:
              __s1[0] = *(void *)(v9 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
              LOWORD(__s1[1]) = v8;
              BYTE2(__s1[1]) = BYTE2(v8);
              BYTE3(__s1[1]) = BYTE3(v8);
              BYTE4(__s1[1]) = BYTE4(v8);
              BYTE5(__s1[1]) = BYTE5(v8);
              uint64_t v3 = (uint64_t)__s1 + BYTE6(v8);
              unint64_t v8 = v11;
              sub_10006D0EC(v11, v12);
              sub_1001E5240((uint64_t)__s1, v8, v12, &v44);
              uint64_t v20 = v8;
              if (v41)
              {
LABEL_68:
                uint64_t v29 = sub_10006D144(v20, v12);
                __break(1u);
LABEL_69:
                sub_10006D144(v29, v30);
                swift_release();
                uint64_t v31 = swift_release();
                __break(1u);
LABEL_70:
                sub_10006D144(v31, v40);
                sub_10006D144(v3, v8);
                __break(1u);
                JUMPOUT(0x1002E5BF8);
              }
              sub_10006D144(v8, v12);
              char v21 = v44;
              break;
          }
          unint64_t v8 = 0x100468000;
          if ((v21 & 1) == 0) {
            goto LABEL_29;
          }
LABEL_52:
          swift_release();
          break;
        case 3uLL:
          if (!v13) {
            goto LABEL_32;
          }
          goto LABEL_28;
        default:
          if (v13 != BYTE6(v12)) {
            goto LABEL_28;
          }
          goto LABEL_24;
      }
    }
    else
    {
LABEL_29:
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v3 = v46[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    ++v7;
    if (v10 == v6) {
      return v46;
    }
  }
  uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  unint64_t v10 = v7 + 1;
  if (!__OFADD__(v7, 1)) {
    goto LABEL_7;
  }
LABEL_55:
  __break(1u);
  return v46;
}

uint64_t sub_1002E5C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002E5C3C()
{
  return swift_release();
}

uint64_t sub_1002E5C44(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_52;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    BOOL v8 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v38 = v8;
    unint64_t v37 = a3;
    uint64_t v41 = BYTE6(a3);
    unint64_t v42 = v6 & 0xC000000000000001;
    uint64_t v9 = 4;
    unint64_t v40 = a3 >> 62;
    uint64_t v36 = v6;
    while (1)
    {
      uint64_t v10 = v9 - 4;
      if (v42)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v12 = v9 - 3;
        if (__OFADD__(v10, 1)) {
          break;
        }
        goto LABEL_14;
      }
      uint64_t v11 = *(void *)(v6 + 8 * v9);
      swift_retain();
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v10, 1)) {
        break;
      }
LABEL_14:
      uint64_t v14 = *(void *)(v11 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
      unint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          LODWORD(v15) = HIDWORD(v14) - v14;
          if (__OFSUB__(HIDWORD(v14), v14)) {
            goto LABEL_49;
          }
          uint64_t v15 = (int)v15;
LABEL_19:
          uint64_t v19 = v41;
          switch(v40)
          {
            case 1uLL:
              uint64_t v19 = HIDWORD(a2) - (int)a2;
              if (v38) {
                goto LABEL_51;
              }
              goto LABEL_23;
            case 2uLL:
              uint64_t v21 = *(void *)(a2 + 16);
              uint64_t v20 = *(void *)(a2 + 24);
              BOOL v18 = __OFSUB__(v20, v21);
              uint64_t v19 = v20 - v21;
              if (!v18) {
                goto LABEL_23;
              }
              goto LABEL_50;
            case 3uLL:
              if (v15) {
                goto LABEL_8;
              }
              goto LABEL_46;
            default:
LABEL_23:
              if (v15 != v19) {
                goto LABEL_8;
              }
              if (v15 < 1) {
                goto LABEL_46;
              }
              break;
          }
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          BOOL v18 = __OFSUB__(v16, v17);
          uint64_t v15 = v16 - v17;
          if (!v18) {
            goto LABEL_19;
          }
          goto LABEL_48;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v15 = BYTE6(v13);
          goto LABEL_19;
      }
      switch(v13 >> 62)
      {
        case 1uLL:
          uint64_t v6 = (v14 >> 32) - (int)v14;
          if (v14 >> 32 < (int)v14)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
          }
          sub_10006D0EC(a2, a3);
          sub_10006D0EC(v14, v13);
          uint64_t v31 = __DataStorage._bytes.getter();
          if (v31)
          {
            uint64_t v32 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v14, v32)) {
              goto LABEL_58;
            }
            v31 += (int)v14 - v32;
          }
          __DataStorage._length.getter();
          uint64_t v33 = v31;
          uint64_t v22 = (char *)a2;
          a3 = v37;
          sub_1001E5240(v33, a2, v37, (char *)__s1);
          if (v4) {
            goto LABEL_62;
          }
          uint64_t v4 = 0;
          sub_10006D144(a2, v37);
          sub_10006D144(v14, v13);
LABEL_45:
          uint64_t v6 = v36;
          if ((__s1[0] & 1) == 0) {
            goto LABEL_8;
          }
LABEL_46:
          swift_bridgeObjectRelease();
          return v11;
        case 2uLL:
          uint64_t v24 = *(void *)(v14 + 16);
          uint64_t v25 = *(void *)(v14 + 24);
          sub_10006D0EC(a2, a3);
          swift_retain();
          swift_retain();
          uint64_t v26 = __DataStorage._bytes.getter();
          if (v26)
          {
            uint64_t v27 = v26;
            uint64_t v28 = __DataStorage._offset.getter();
            if (__OFSUB__(v24, v28)) {
              goto LABEL_57;
            }
            uint64_t v29 = v25;
            uint64_t v30 = v27 + v24 - v28;
          }
          else
          {
            uint64_t v29 = v25;
            uint64_t v30 = 0;
          }
          a3 = v37;
          if (__OFSUB__(v29, v24)) {
            goto LABEL_56;
          }
          __DataStorage._length.getter();
          uint64_t v6 = a2;
          sub_1001E5240(v30, a2, v37, (char *)__s1);
          if (v4) {
            goto LABEL_63;
          }
          uint64_t v4 = 0;
          sub_10006D144(a2, v37);
          swift_release();
          swift_release();
          goto LABEL_45;
        case 3uLL:
          memset(__s1, 0, 14);
          uint64_t v22 = (char *)a2;
          sub_10006D0EC(a2, a3);
          sub_1001E5240((uint64_t)__s1, a2, a3, &v43);
          if (v4)
          {
            uint64_t v35 = a2;
            goto LABEL_61;
          }
          uint64_t v4 = 0;
          uint64_t v23 = a2;
          break;
        default:
          __s1[0] = *(void *)(v11 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
          LOWORD(__s1[1]) = v13;
          BYTE2(__s1[1]) = BYTE2(v13);
          BYTE3(__s1[1]) = BYTE3(v13);
          BYTE4(__s1[1]) = BYTE4(v13);
          BYTE5(__s1[1]) = BYTE5(v13);
          uint64_t v22 = (char *)__s1 + BYTE6(v13);
          unint64_t v13 = a2;
          sub_10006D0EC(a2, a3);
          sub_1001E5240((uint64_t)__s1, a2, a3, &v43);
          if (v4)
          {
            uint64_t v35 = a2;
LABEL_61:
            sub_10006D144(v35, a3);
            __break(1u);
LABEL_62:
            sub_10006D144((uint64_t)v22, a3);
            sub_10006D144(v14, v13);
            __break(1u);
LABEL_63:
            sub_10006D144(v6, a3);
            swift_release();
            swift_release();
            __break(1u);
            JUMPOUT(0x1002E6178);
          }
          uint64_t v4 = 0;
          uint64_t v23 = a2;
          break;
      }
      sub_10006D144(v23, a3);
      if (v43) {
        goto LABEL_46;
      }
LABEL_8:
      swift_release();
      ++v9;
      if (v12 == v7) {
        goto LABEL_53;
      }
    }
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_53:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1002E61A8(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      uint64_t v5 = 4;
      do
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(a1 + 8 * v5);
          swift_retain();
          BOOL v8 = __OFADD__(v6, 1);
          uint64_t v9 = v5 - 3;
          if (v8)
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        if (static UUID.== infix(_:_:)())
        {
          swift_bridgeObjectRelease();
          return v7;
        }
        swift_release();
        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1002E62F4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = a1;
  if (a1 >> 62) {
    goto LABEL_54;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (v7)
  {
    BOOL v8 = __OFSUB__(HIDWORD(a2), a2);
    BOOL v37 = v8;
    unint64_t v36 = a3;
    uint64_t v40 = BYTE6(a3);
    unint64_t v41 = v6 & 0xC000000000000001;
    uint64_t v9 = 4;
    unint64_t v39 = a3 >> 62;
    uint64_t v35 = v6;
    while (1)
    {
      uint64_t v10 = v9 - 4;
      if (v41)
      {
        uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v12 = v9 - 3;
        if (__OFADD__(v10, 1)) {
          break;
        }
        goto LABEL_15;
      }
      uint64_t v11 = *(void *)(v6 + 8 * v9);
      swift_retain();
      uint64_t v12 = v9 - 3;
      if (__OFADD__(v10, 1)) {
        break;
      }
LABEL_15:
      uint64_t v14 = *(void *)(v11 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
      unint64_t v13 = *(void *)(v11 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          LODWORD(v15) = HIDWORD(v14) - v14;
          if (__OFSUB__(HIDWORD(v14), v14)) {
            goto LABEL_51;
          }
          uint64_t v15 = (int)v15;
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          BOOL v18 = __OFSUB__(v16, v17);
          uint64_t v15 = v16 - v17;
          if (!v18) {
            break;
          }
          goto LABEL_50;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      uint64_t v19 = v40;
      switch(v39)
      {
        case 1uLL:
          uint64_t v19 = HIDWORD(a2) - (int)a2;
          if (v37) {
            goto LABEL_53;
          }
          goto LABEL_24;
        case 2uLL:
          uint64_t v21 = *(void *)(a2 + 16);
          uint64_t v20 = *(void *)(a2 + 24);
          BOOL v18 = __OFSUB__(v20, v21);
          uint64_t v19 = v20 - v21;
          if (!v18) {
            goto LABEL_24;
          }
          goto LABEL_52;
        case 3uLL:
          if (v15) {
            goto LABEL_8;
          }
          goto LABEL_48;
        default:
LABEL_24:
          if (v15 == v19)
          {
            if (v15 < 1)
            {
LABEL_48:
              swift_bridgeObjectRelease();
              swift_release();
              return 1;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                uint64_t v6 = (v14 >> 32) - (int)v14;
                if (v14 >> 32 < (int)v14)
                {
                  __break(1u);
LABEL_57:
                  __break(1u);
LABEL_58:
                  __break(1u);
LABEL_59:
                  __break(1u);
                }
                sub_10006D0EC(a2, a3);
                sub_10006D0EC(v14, v13);
                uint64_t v30 = __DataStorage._bytes.getter();
                if (v30)
                {
                  uint64_t v31 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v31)) {
                    goto LABEL_59;
                  }
                  v30 += (int)v14 - v31;
                }
                __DataStorage._length.getter();
                uint64_t v32 = v30;
                uint64_t v22 = (char *)a2;
                a3 = v36;
                sub_1001E5240(v32, a2, v36, (char *)__s1);
                if (v4) {
                  goto LABEL_63;
                }
                uint64_t v4 = 0;
                sub_10006D144(a2, v36);
                sub_10006D144(v14, v13);
LABEL_46:
                swift_release();
                uint64_t v6 = v35;
                if ((__s1[0] & 1) == 0) {
                  break;
                }
LABEL_47:
                swift_bridgeObjectRelease();
                return 1;
              case 2uLL:
                uint64_t v23 = *(void *)(v14 + 16);
                uint64_t v24 = *(void *)(v14 + 24);
                sub_10006D0EC(a2, a3);
                swift_retain();
                swift_retain();
                uint64_t v25 = __DataStorage._bytes.getter();
                if (v25)
                {
                  uint64_t v26 = v25;
                  uint64_t v27 = __DataStorage._offset.getter();
                  if (__OFSUB__(v23, v27)) {
                    goto LABEL_58;
                  }
                  uint64_t v28 = v24;
                  uint64_t v29 = v26 + v23 - v27;
                }
                else
                {
                  uint64_t v28 = v24;
                  uint64_t v29 = 0;
                }
                a3 = v36;
                if (__OFSUB__(v28, v23)) {
                  goto LABEL_57;
                }
                __DataStorage._length.getter();
                uint64_t v6 = a2;
                sub_1001E5240(v29, a2, v36, (char *)__s1);
                if (v4) {
                  goto LABEL_64;
                }
                uint64_t v4 = 0;
                sub_10006D144(a2, v36);
                swift_release();
                swift_release();
                goto LABEL_46;
              case 3uLL:
                memset(__s1, 0, 14);
                uint64_t v22 = (char *)a2;
                sub_10006D0EC(a2, a3);
                sub_1001E5240((uint64_t)__s1, a2, a3, &v42);
                if (v4)
                {
                  uint64_t v34 = a2;
                  goto LABEL_62;
                }
                uint64_t v4 = 0;
                sub_10006D144(a2, a3);
                swift_release();
                if (v42 == 1) {
                  goto LABEL_47;
                }
                break;
              default:
                __s1[0] = *(void *)(v11 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                uint64_t v22 = (char *)__s1 + BYTE6(v13);
                unint64_t v13 = a2;
                sub_10006D0EC(a2, a3);
                sub_1001E5240((uint64_t)__s1, a2, a3, &v42);
                if (v4)
                {
                  uint64_t v34 = a2;
LABEL_62:
                  sub_10006D144(v34, a3);
                  __break(1u);
LABEL_63:
                  sub_10006D144((uint64_t)v22, a3);
                  sub_10006D144(v14, v13);
                  __break(1u);
LABEL_64:
                  sub_10006D144(v6, a3);
                  swift_release();
                  swift_release();
                  __break(1u);
                  JUMPOUT(0x1002E6870);
                }
                uint64_t v4 = 0;
                sub_10006D144(a2, a3);
                swift_release();
                if (v42) {
                  goto LABEL_47;
                }
                break;
            }
          }
          else
          {
LABEL_8:
            swift_release();
          }
          ++v9;
          if (v12 == v7) {
            goto LABEL_55;
          }
          break;
      }
    }
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  }
LABEL_55:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1002E68A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type))
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(result + 24);
    unint64_t v7 = *(void *)(result + 32);
    uint64_t v8 = *(void *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    unint64_t v9 = *(void *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    sub_10006C51C(&qword_1004555D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378470;
    strcpy((char *)(inited + 32), "rkeFunctionID");
    *(_WORD *)(inited + 46) = -4864;
    *(_WORD *)(inited + 48) = *(_WORD *)(v5 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    *(void *)(inited + 72) = &type metadata for UInt16;
    *(void *)(inited + 80) = 0x6F69746341656B72;
    *(void *)(inited + 88) = 0xEB0000000044496ELL;
    *(unsigned char *)(inited + 96) = *(unsigned char *)(v5 + 16);
    *(void *)(inited + 120) = &type metadata for UInt8;
    *(void *)(inited + 128) = 0x726F727265;
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 136) = 0xE500000000000000;
    *(void *)(inited + 144) = a2;
    *(void *)(inited + 152) = a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = sub_1001DB224(inited);
    sub_1002B9140(0xD000000000000048, 0x80000001003BD2A0, v6, v7, v8, v9, v11);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002E6A1C(uint64_t result, char a2)
{
  if (!*(unsigned char *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type))
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(result + 24);
    unint64_t v5 = *(void *)(result + 32);
    uint64_t v6 = *(void *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    unint64_t v7 = *(void *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    sub_10006C51C(&qword_1004555D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_100378470;
    strcpy((char *)(inited + 32), "rkeFunctionID");
    *(_WORD *)(inited + 46) = -4864;
    *(_WORD *)(inited + 48) = *(_WORD *)(v3 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    *(void *)(inited + 72) = &type metadata for UInt16;
    *(void *)(inited + 80) = 0x6F69746341656B72;
    *(void *)(inited + 88) = 0xEB0000000044496ELL;
    *(unsigned char *)(inited + 96) = *(unsigned char *)(v3 + 16);
    *(void *)(inited + 120) = &type metadata for UInt8;
    *(void *)(inited + 128) = 0xD000000000000012;
    *(void *)(inited + 136) = 0x80000001003BD2F0;
    *(void *)(inited + 168) = &type metadata for UInt8;
    *(unsigned char *)(inited + 144) = a2;
    unint64_t v9 = sub_1001DB224(inited);
    sub_1002B9140(0xD000000000000048, 0x80000001003BD2A0, v4, v5, v6, v7, v9);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1002E6B70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1002E6BA8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E6BF8()
{
  return sub_1002E2010(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1002E6C04()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1002E6C3C(void *a1)
{
  sub_1002E24AC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002E6C44()
{
  swift_errorRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002E6C94()
{
  return sub_1002E2538(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1002E6CA0(int a1, unsigned __int8 a2, uint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v79 = a5;
  uint64_t v80 = a3;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  BOOL v18 = (unint64_t *)((char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100453928 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_100468A38;
  *BOOL v18 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  id v20 = (id)v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_79:
    swift_once();
LABEL_11:
    uint64_t v29 = v79;
    sub_10025CE58(a2, a1, v79);
    sub_10025D3D0(v80, a4, a1, v29);
    if ((unsigned __int16)a1 == 16)
    {
      if (qword_100453798 != -1) {
        swift_once();
      }
      sub_1001EEE84(a2 == 1, v29);
    }
    return 1;
  }
  if (!*(void *)(a6 + 16) || (unint64_t v21 = sub_1002C0C6C(a1), (v22 & 1) == 0))
  {
    if (qword_100453878 == -1) {
      goto LABEL_11;
    }
    goto LABEL_79;
  }
  unsigned int v23 = *(unsigned __int8 *)(*(void *)(a6 + 56) + v21);
  unsigned __int8 v24 = a2;
  if (*(void *)(a7 + 16) && (unint64_t v25 = sub_1002C0C6C(a1), (v26 & 1) != 0))
  {
    uint64_t v27 = (uint64_t *)(*(void *)(a7 + 56) + 16 * v25);
    unint64_t v28 = v27[1];
    uint64_t v78 = *v27;
    sub_10006D0EC(v78, v28);
    if (v23 != a2) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v78 = 0;
    unint64_t v28 = 0xF000000000000000;
    if (v23 != a2) {
      goto LABEL_23;
    }
  }
  if (v28 >> 60 == 15)
  {
    if (a4 >> 60 == 15) {
      return 0;
    }
    goto LABEL_20;
  }
  if (a4 >> 60 == 15)
  {
LABEL_20:
    uint64_t v31 = v80;
    sub_1000758F4(v80, a4);
    uint64_t v32 = v78;
    sub_1000758F4(v78, v28);
    sub_100075868(v32, v28);
    sub_100075868(v31, a4);
    goto LABEL_23;
  }
  LODWORD(v77) = v23;
  uint64_t v33 = v80;
  sub_1000758F4(v80, a4);
  uint64_t v34 = v78;
  sub_1000758F4(v78, v28);
  char v35 = sub_100088AE4(v34, v28, v33, a4);
  uint64_t v36 = v33;
  unsigned int v23 = v77;
  sub_100075868(v36, a4);
  sub_100075868(v34, v28);
  if (v35)
  {
    sub_100075868(v78, v28);
    return 0;
  }
LABEL_23:
  unint64_t v77 = v28;
  uint64_t v37 = v8;
  if (qword_100453878 != -1) {
    swift_once();
  }
  uint64_t v38 = v79;
  sub_10025CE58(a2, a1, v79);
  sub_10025D3D0(v80, a4, a1, v38);
  type metadata accessor for AlishaPeer();
  uint64_t v39 = swift_dynamicCastClass();
  if (v39)
  {
    if ((unsigned __int16)(a1 - 1) > 1u)
    {
      swift_retain();
      unint64_t v51 = v77;
      if ((unsigned __int16)a1 == 16)
      {
        if (qword_100453798 != -1) {
          swift_once();
        }
        sub_1001EEE84(v24 == 1, v38);
      }
      goto LABEL_76;
    }
    int v40 = *(unsigned __int8 *)(*(void *)(v39 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 65);
    if (*(void *)(a6 + 16) && (unint64_t v41 = sub_1002C0C6C(0x10u), (v42 & 1) != 0))
    {
      BOOL v43 = *(unsigned __int8 *)(*(void *)(a6 + 56) + v41) == 1;
      if (v40)
      {
        swift_retain();
        goto LABEL_48;
      }
    }
    else
    {
      if (v40)
      {
        swift_retain();
        BOOL v43 = 0;
        goto LABEL_48;
      }
      BOOL v43 = 0;
    }
    BOOL v52 = (uint64_t *)(v37 + OBJC_IVAR____TtC10seserviced9AlishaRKE_notificationsToBeSuppressed);
    swift_beginAccess();
    uint64_t v53 = *v52;
    if (*(void *)(v53 + 16))
    {
      unsigned int v54 = v23;
      uint64_t v55 = v38 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier;
      swift_retain();
      uint64_t v56 = v55;
      unsigned int v23 = v54;
      unsigned __int8 v24 = a2;
      unint64_t v57 = sub_1002C09FC(v56);
      if (v58)
      {
        int v59 = *(unsigned __int16 *)(*(void *)(v53 + 56) + 2 * v57);
        swift_endAccess();
        if (v59 == (unsigned __int16)a1) {
          BOOL v43 = 1;
        }
        goto LABEL_48;
      }
    }
    else
    {
      swift_retain();
    }
    swift_endAccess();
LABEL_48:
    uint64_t v60 = (uint64_t *)(v37 + OBJC_IVAR____TtC10seserviced9AlishaRKE_passiveEntryState);
    swift_beginAccess();
    uint64_t v61 = *v60;
    if (*(void *)(v61 + 16))
    {
      unint64_t v62 = sub_1002C09FC(v38 + OBJC_IVAR____TtC10seserviced4Peer_clientIdentifier);
      unint64_t v51 = v77;
      if (v63) {
        uint64_t v64 = *(unsigned __int8 *)(*(void *)(v61 + 56) + v62);
      }
      else {
        uint64_t v64 = 0;
      }
    }
    else
    {
      uint64_t v64 = 0;
      unint64_t v51 = v77;
    }
    swift_endAccess();
    if (v24 > 3u || v24 == 1) {
      goto LABEL_60;
    }
    if (v23 > 3 || v23 == 1)
    {
      if (v64 == 1) {
        int v72 = 0;
      }
      else {
        int v72 = v40;
      }
      if (((v43 | v72) & 1) == 0)
      {
        uint64_t v73 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
        unint64_t v74 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
        uint64_t v75 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
        unint64_t v76 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
        sub_1000758F4(v73, v74);
        sub_1000758F4(v75, v76);
        sub_1002B9140(0xD000000000000039, 0x80000001003BD410, v73, v74, v75, v76, 0);
        sub_100075868(v75, v76);
        sub_100075868(v73, v74);
      }
      uint64_t v71 = qword_100453798;
      char v70 = 1;
      goto LABEL_73;
    }
    if (v24 > 3u || v24 == 1)
    {
LABEL_60:
      if (v23 <= 3 && v23 != 1)
      {
        if (v64 == 2) {
          int v65 = 0;
        }
        else {
          int v65 = v40;
        }
        if (((v43 | v65) & 1) == 0)
        {
          uint64_t v66 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier);
          unint64_t v67 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_appletIdentifier + 8);
          uint64_t v68 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier);
          unint64_t v69 = *(void *)(v38 + OBJC_IVAR____TtC10seserviced4Peer_keyIdentifier + 8);
          sub_1000758F4(v66, v67);
          sub_1000758F4(v68, v69);
          sub_1002B9140(0xD00000000000003BLL, 0x80000001003BD3D0, v66, v67, v68, v69, 0);
          sub_100075868(v68, v69);
          sub_100075868(v66, v67);
        }
        char v70 = 0;
        uint64_t v71 = qword_100453798;
LABEL_73:
        if (v71 != -1) {
          swift_once();
        }
        sub_1001EF220(v70, v38);
      }
    }
LABEL_76:
    sub_100075868(v78, v51);
    swift_release();
    return 1;
  }
  swift_retain_n();
  char v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 136315138;
    v81[0] = v47;
    swift_retain();
    uint64_t v48 = UUID.uuidString.getter();
    unint64_t v50 = v49;
    swift_release();
    v81[3] = sub_100290514(v48, v50, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to cast Peer to AlishaPeer %s", v46, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100075868(v78, v77);
  }
  else
  {
    sub_100075868(v78, v77);
    swift_release_n();
  }

  return 0;
}

uint64_t sub_1002E75B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002E7600()
{
  return sub_1002E8B94(48);
}

void sub_1002E7608(void *a1, char a2)
{
  sub_1002DCA14(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002E7618(uint64_t result)
{
  if (!*(unsigned char *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_type))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 24);
    unint64_t v3 = *(void *)(result + 32);
    uint64_t v4 = *(void *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier);
    unint64_t v5 = *(void *)(result + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_keyIdentifier + 8);
    sub_10006C51C(&qword_1004555D0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1003782A0;
    strcpy((char *)(inited + 32), "rkeFunctionID");
    *(_WORD *)(inited + 46) = -4864;
    *(_WORD *)(inited + 48) = *(_WORD *)(v1 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_functionIdentifier);
    *(void *)(inited + 72) = &type metadata for UInt16;
    *(void *)(inited + 80) = 0x6F69746341656B72;
    *(void *)(inited + 88) = 0xEB0000000044496ELL;
    char v7 = *(unsigned char *)(v1 + 16);
    *(void *)(inited + 120) = &type metadata for UInt8;
    *(unsigned char *)(inited + 96) = v7;
    unint64_t v8 = sub_1001DB224(inited);
    sub_1002B9140(0xD000000000000045, 0x80000001003BD5A0, v2, v3, v4, v5, v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1002E7748(int a1, int a2, uint64_t a3, unint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(Class, void *), uint64_t a10, void (*a11)(Class, void *), uint64_t a12)
{
  uint64_t v139 = a8;
  uint64_t v140 = a7;
  uint64_t v141 = a6;
  int v143 = a5;
  LODWORD(v148) = a2;
  int v142 = a1;
  uint64_t v14 = (uint64_t)a11;
  uint64_t v15 = sub_10006C51C(&qword_100455EB0);
  __chkstk_darwin(v15 - 8, v16);
  BOOL v18 = (char *)v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = type metadata accessor for UUID();
  uint64_t v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146, v19);
  uint64_t v147 = (uint64_t)v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchPredicate();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  unint64_t v25 = (void *)((char *)v129 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a11;
  *(void *)(v26 + 24) = a12;
  uint64_t v27 = qword_100453928;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v28 = qword_100468A38;
  void *v25 = qword_100468A38;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v25, enum case for DispatchPredicate.onQueue(_:), v21);
  id v29 = (id)v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v22 + 8))(v25, v21);
  if (v28)
  {
    unint64_t v150 = a11;
    uint64_t v138 = v18;
    uint64_t v151 = a12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a3;
    *(void *)(v14 + 24) = a4;
    sub_10006D0EC(a3, a4);
    if (qword_100453910 == -1) {
      goto LABEL_5;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_5:
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = sub_1002E8B40;
  *(void *)(v30 + 24) = v14;
  uint64_t v127 = __chkstk_darwin(v30, v31);
  __chkstk_darwin(v127, v32);
  uint64_t v34 = v33 + 4;
  swift_retain();
  os_unfair_lock_lock(v34);
  sub_100079ACC(&aBlock);
  os_unfair_lock_unlock(v34);
  uint64_t v35 = aBlock;
  swift_release();
  swift_release();
  uint64_t v36 = sub_1000BB13C(v35);
  swift_bridgeObjectRelease();
  if (!v36)
  {
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      unint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Vehicle is not connected", v49, 2u);
      swift_slowDealloc();
    }

    sub_1002792F8(264, v150);
    goto LABEL_28;
  }
  uint64_t v37 = (void *)(a10 + OBJC_IVAR____TtC10seserviced9AlishaRKE_requestsInProgress);
  swift_beginAccess();
  sub_10006D0EC(a3, a4);
  unint64_t v38 = swift_bridgeObjectRetain();
  char v39 = sub_1002E62F4(v38, a3, a4);
  sub_10006D144(a3, a4);
  swift_bridgeObjectRelease();
  uint64_t v149 = v36;
  if (v39)
  {
    sub_10006D0EC(a3, a4);
    sub_10006D0EC(a3, a4);
    int v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v144 = v26;
      BOOL v43 = (uint8_t *)v42;
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)BOOL v43 = 136315138;
      uint64_t v148 = v43 + 4;
      uint64_t v159 = (uint64_t)sub_10023CDF4(a3, a4);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v44 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v46 = v45;
      swift_bridgeObjectRelease();
      uint64_t v159 = sub_100290514(v44, v46, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "An action is already in progress for key %s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
    }
    __int16 v69 = 260;
LABEL_27:
    sub_1002792F8(v69, v150);
    swift_release();
LABEL_28:
    swift_release();
    return;
  }
  uint64_t v144 = v26;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = a3;
  *(void *)(v50 + 24) = a4;
  sub_10006D0EC(a3, a4);
  if (qword_1004536D8 != -1) {
    swift_once();
  }
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = sub_1002E8B4C;
  *(void *)(v51 + 24) = v50;
  uint64_t v128 = __chkstk_darwin(v51, v52);
  __chkstk_darwin(v128, v53);
  uint64_t v55 = v54 + 4;
  swift_retain();
  os_unfair_lock_lock(v55);
  sub_1000AA804(&aBlock);
  os_unfair_lock_unlock(v55);
  uint64_t v56 = aBlock;
  swift_release();
  swift_release();
  unint64_t v57 = (void *)sub_1000BB0E4(v56);
  swift_bridgeObjectRelease();
  uint64_t v58 = v144;
  if (!v57)
  {
LABEL_23:
    sub_10006D0EC(a3, a4);
    sub_10006D0EC(a3, a4);
    char v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      int v72 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)int v72 = 136315138;
      uint64_t v148 = v72 + 4;
      uint64_t v159 = (uint64_t)sub_10023CDF4(a3, a4);
      sub_10006C51C((uint64_t *)&unk_100455EA0);
      sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
      uint64_t v73 = BidirectionalCollection<>.joined(separator:)();
      unint64_t v75 = v74;
      swift_bridgeObjectRelease();
      uint64_t v159 = sub_100290514(v73, v75, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Failed to retrieve valid endpoint for key %s", v72, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_10006D144(a3, a4);
      sub_10006D144(a3, a4);
    }
    __int16 v69 = 256;
    goto LABEL_27;
  }
  id v59 = [v57 readerInfo];
  if (!v59)
  {

    goto LABEL_23;
  }
  uint64_t v60 = v59;
  uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = v61;

  type metadata accessor for AlishaPeer();
  uint64_t v63 = swift_dynamicCastClass();
  if (v63)
  {
    uint64_t v136 = v62;
    uint64_t v64 = *(void *)(*(void *)(v63 + OBJC_IVAR____TtC10seserviced10AlishaPeer_configuration) + 88);
    uint64_t v65 = *(void *)(v64 + 16);
    uint64_t v130 = 0;
    if (v65 && (unint64_t v66 = sub_1002C0C6C(v142), (v67 & 1) != 0)) {
      unint64_t v68 = *(void *)(*(void *)(v64 + 56) + 8 * v66);
    }
    else {
      unint64_t v68 = 5000;
    }
    unint64_t v135 = v68;
    unint64_t v150 = a9;
    swift_retain();
    id v76 = [v57 getEndpointUser];
    if (v76 == (id)1)
    {
      unint64_t v77 = v57;
    }
    else
    {
      if (v76) {
        goto LABEL_37;
      }
      unint64_t v77 = v57;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v86 = self;
    NSString v87 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_100050018(v86, v87);

    unint64_t v57 = v77;
LABEL_37:
    sub_10006D0EC(a3, a4);
    uint64_t v131 = v57;
    id v88 = [v57 appletIdentifier];
    uint64_t v134 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v133 = v89;

    uint64_t v90 = v149;
    uint64_t v91 = v149 + OBJC_IVAR____TtC10seserviced4Peer_connectionIdentifier;
    swift_beginAccess();
    uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 16);
    v129[1] = v145 + 16;
    v129[0] = v92;
    v92(v147, v91, v146);
    type metadata accessor for AlishaRKE.RKERequest(0);
    uint64_t v132 = swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v93 = v141;
    uint64_t v94 = v140;
    sub_10008BEBC(v141);
    uint64_t v95 = v58;
    uint64_t v96 = v139;
    uint64_t v97 = v150;
    sub_1000758F4(v139, (unint64_t)v150);
    unint64_t v126 = (unint64_t)v97;
    uint64_t v125 = v96;
    unsigned int v98 = v142;
    LOBYTE(v97) = (_BYTE)v148;
    uint64_t v99 = (os_unfair_lock_s *)sub_1002E2C04(a3, a4, v134, v133, v142, (char)v148, v143, v93, v94, v125, v126, v137, v136, v90, v147, v135, (uint64_t)sub_1002E8B28, v95);
    uint64_t v100 = swift_allocObject();
    swift_weakInit();
    uint64_t v101 = (void *)qword_100468A38;
    uint64_t v102 = swift_allocObject();
    *(void *)(v102 + 16) = v100;
    *(void *)(v102 + 24) = a10;
    *(void *)(v102 + 32) = a3;
    *(void *)(v102 + 40) = a4;
    *(_WORD *)(v102 + 48) = v98;
    *(unsigned char *)(v102 + 50) = (_BYTE)v97;
    uint64_t v103 = (NSObject **)objc_allocWithZone((Class)SESTimer);
    unint64_t v157 = sub_1002E8BE8;
    uint64_t v158 = v102;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v154 = 1107296256;
    uint64_t v155 = sub_10007C0C4;
    uint64_t v156 = &unk_100419748;
    Swift::String v104 = _Block_copy(&aBlock);
    sub_10006D0EC(a3, a4);
    swift_retain();
    swift_retain();
    uint64_t v105 = sub_100052804(v103, v101, v104);
    _Block_release(v104);
    swift_release();
    uint64_t v106 = OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer;
    uint64_t v107 = *(void **)((char *)&v99->_os_unfair_lock_opaque + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer);
    *(void *)((char *)&v99->_os_unfair_lock_opaque + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timer) = v105;

    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    uint64_t aBlock = sub_100088F40((uint64_t)&off_10040F8E8);
    unint64_t v154 = v108;
    sub_10006C51C(&qword_1004557C0);
    uint64_t v109 = (_OWORD *)swift_allocObject();
    v109[1] = xmmword_10037AA50;
    unint64_t v110 = self;
    id v111 = [v110 TLVWithTag:128 unsignedShort:bswap32(v98) >> 16];
    if (v111)
    {
      *((void *)v109 + 4) = v111;
      id v112 = [v110 TLVWithTag:129 unsignedChar:v148];
      uint64_t v113 = (uint64_t)v138;
      if (v112)
      {
        *((void *)v109 + 5) = v112;
        os_log_type_t v152 = v109;
        specialized Array._endMutation()();
        sub_10007582C(0, (unint64_t *)&qword_100454048);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v109 = [v110 TLVWithTag:32624 children:isa];

        if (v109)
        {
          id v115 = [v109 asData];

          if (v115)
          {
            uint64_t v116 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v118 = v117;

            Data.append(_:)();
            sub_10006D144(v116, v118);
            if (qword_100453798 != -1) {
              swift_once();
            }
            uint64_t v119 = aBlock;
            unint64_t v120 = v154;
            uint64_t v121 = v146;
            ((void (*)(uint64_t, char *, uint64_t))v129[0])(v113, (char *)v99 + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_connectionIdentifier, v146);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v145 + 56))(v113, 0, 1, v121);
            sub_10006D0EC(v119, v120);
            uint64_t v122 = v130;
            sub_1001E8D48(3, 17, v119, v120, v149, 1, v113, 0, 1);
            sub_10006D144(v119, v120);
            if (v122) {
              swift_errorRelease();
            }
            sub_10008E734(v113, &qword_100455EB0);
            *((unsigned char *)&v99->_os_unfair_lock_opaque + OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_state) = 1;
            uint64_t v123 = *(void *)((char *)&v99->_os_unfair_lock_opaque + v106);
            uint64_t v124 = v131;
            if (v123) {
              sub_1000529D8(v123, *(double *)((char *)&v99->_os_unfair_lock_opaque+ OBJC_IVAR____TtCC10seserviced9AlishaRKE10RKERequest_timeoutSec));
            }
            sub_1002E7618((uint64_t)v99);
            swift_release();
            swift_release_n();

            sub_10006D144(aBlock, v154);
            swift_release();
            goto LABEL_28;
          }
          goto LABEL_57;
        }
LABEL_56:
        swift_release();
        __break(1u);
LABEL_57:
        swift_release();
        __break(1u);
        swift_release();
        os_unfair_lock_unlock((os_unfair_lock_t)v109);
        __break(1u);
        swift_release();
        os_unfair_lock_unlock(v99);
        __break(1u);
        return;
      }
    }
    else
    {
      swift_release();
      __break(1u);
    }
    swift_release();
    __break(1u);
    goto LABEL_56;
  }
  swift_bridgeObjectRelease();
  swift_retain_n();
  uint64_t v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v78, v79))
  {
    uint64_t v80 = v57;
    unsigned int v81 = (uint8_t *)swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(_DWORD *)unsigned int v81 = 136315138;
    uint64_t aBlock = v82;
    swift_retain();
    uint64_t v83 = UUID.uuidString.getter();
    unint64_t v85 = v84;
    swift_release();
    uint64_t v159 = sub_100290514(v83, v85, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Failed to cast Peer to AlishaPeer %s", v81, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v57 = v80;
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
  }

  sub_1002792F8(258, v150);
  swift_release();
  swift_release();
}

void sub_1002E8B28(__int16 a1)
{
  sub_1002792F8(a1 & 0x1FF, *(void (**)(Class, void *))(v1 + 16));
}

uint64_t sub_1002E8B40(uint64_t a1)
{
  return sub_1002DC288(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002E8B4C(void *a1)
{
  return sub_1002DC380(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002E8B54()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002E8B8C()
{
  return sub_1002E8B94(51);
}

uint64_t sub_1002E8B94(uint64_t a1)
{
  swift_release();
  swift_release();
  sub_10006D144(*(void *)(v1 + 32), *(void *)(v1 + 40));

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1002E8BE8()
{
  return sub_1002DC44C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

unint64_t sub_1002E8BFC()
{
  unint64_t result = qword_10045BCD0;
  if (!qword_10045BCD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10045BCD0);
  }
  return result;
}

void sub_1002E8C80()
{
  if (SESInternalVariant())
  {
    uint64_t v0 = self;
    NSString v1 = String._bridgeToObjectiveC()();
    LODWORD(v0) = [v0 isFirstLaunchAfterBootForKey:v1];

    if (v0)
    {
      sub_1002E8D1C();
    }
  }
}

void sub_1002E8D1C()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v56 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v1);
  unint64_t v3 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  os_log_t v58 = *(os_log_t *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  unint64_t v57 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = (id)MobileGestalt_get_current_device();
  if (v12)
  {
    unint64_t v13 = v12;
    id v14 = (id)MobileGestalt_copy_buildVersion_obj();

    if (v14)
    {
      uint64_t v50 = v9;
      uint64_t v52 = v3;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v17 = v16;

      swift_beginAccess();
      v61[0] = *(_OWORD *)&qword_10045BCE0;
      v61[1] = *(_OWORD *)&qword_10045BCF0;
      _OWORD v61[2] = xmmword_10045BD00;
      char v62 = byte_10045BD10;
      sub_1001172B8((uint64_t)v61);
      sub_1001AF88C();
      uint64_t v19 = v18;
      unint64_t v21 = v20;
      sub_100117304((uint64_t)v61);
      int v22 = sub_1002E9BAC();
      if (qword_100453950 != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      sub_10008E55C(v23, (uint64_t)qword_10045BD18);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.info.getter();
      int v53 = v25;
      BOOL v26 = os_log_type_enabled(v24, v25);
      uint64_t v51 = v5;
      uint64_t v54 = v19;
      if (v26)
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        aBlock[0] = v48;
        *(_DWORD *)uint64_t v27 = 136315650;
        uint64_t v49 = v4;
        if (v21) {
          uint64_t v28 = v19;
        }
        else {
          uint64_t v28 = 0x3E6C696E3CLL;
        }
        if (v21) {
          unint64_t v29 = v21;
        }
        else {
          unint64_t v29 = 0xE500000000000000;
        }
        os_log_t v47 = v24;
        swift_bridgeObjectRetain();
        id v59 = (void *)sub_100290514(v28, v29, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        swift_bridgeObjectRetain();
        id v59 = (void *)sub_100290514(v15, v17, aBlock);
        uint64_t v4 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v27 + 22) = 1024;
        LODWORD(v59) = v22 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        os_log_t v30 = v47;
        _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v53, "lastCheckedVersion %s current %s tethered %{BOOL}d", (uint8_t *)v27, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        if (v21) {
          goto LABEL_13;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        if (v21)
        {
LABEL_13:
          if (v54 == v15 && v21 == v17)
          {
            swift_bridgeObjectRelease();
LABEL_25:
            sub_1002E9E48();
            swift_bridgeObjectRelease();
            uint64_t v35 = self;
            NSString v36 = String._bridgeToObjectiveC()();
            [v35 setFirstLaunchAfterBootDoneForKey:v36];

            return;
          }
          int v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v37 | v22)) {
            goto LABEL_25;
          }
          goto LABEL_27;
        }
      }
      if (v22) {
        goto LABEL_25;
      }
LABEL_27:
      sub_10007582C(0, (unint64_t *)&qword_1004566E0);
      char v39 = v57;
      os_log_t v38 = v58;
      unint64_t v40 = v17;
      uint64_t v41 = v50;
      ((void (*)(char *, void, uint64_t))v58[13].isa)(v57, enum case for DispatchQoS.QoSClass.default(_:), v50);
      uint64_t v42 = (void *)static OS_dispatch_queue.global(qos:)();
      ((void (*)(char *, uint64_t))v38[1].isa)(v39, v41);
      BOOL v43 = (void *)swift_allocObject();
      uint64_t v44 = v55;
      v43[2] = v55;
      v43[3] = v15;
      v43[4] = v40;
      v43[5] = v44;
      aBlock[4] = (uint64_t)sub_1002E9E24;
      aBlock[5] = (uint64_t)v43;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_10007C0C4;
      uint64_t aBlock[3] = (uint64_t)&unk_100419798;
      unint64_t v45 = _Block_copy(aBlock);
      static DispatchQoS.unspecified.getter();
      id v59 = _swiftEmptyArrayStorage;
      sub_1000AF580();
      sub_10006C51C((uint64_t *)&unk_100455710);
      sub_10008C0B0((unint64_t *)&qword_100453DA0, (uint64_t *)&unk_100455710);
      unint64_t v46 = v52;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v45);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v46, v0);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v4);
      swift_release();
      return;
    }
    if (qword_100453950 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10008E55C(v31, (uint64_t)qword_10045BD18);
    os_log_t v58 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v58, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v32, "MG buildVersion not available?", v33, 2u);
      swift_slowDealloc();
    }
    os_log_t v34 = v58;
  }
  else
  {
    __break(1u);
  }
}

void sub_1002E959C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  id v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10007582C(0, (unint64_t *)&qword_1004566E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
  unint64_t v13 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  id v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  uint64_t v15 = self;
  swift_bridgeObjectRetain();
  NSString v16 = String._bridgeToObjectiveC()();
  unint64_t v17 = (void *)swift_allocObject();
  v17[2] = v13;
  v17[3] = sub_1002E9F78;
  v17[4] = v14;
  aBlock[4] = sub_1001827EC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100118B5C;
  uint64_t aBlock[3] = &unk_100419810;
  uint64_t v18 = _Block_copy(aBlock);
  id v19 = v13;
  swift_retain();
  swift_release();
  sub_100058540(v15, v16, v18);
  _Block_release(v18);

  swift_release();
}

void sub_1002E97F4(void *a1, char a2)
{
  if (a2)
  {
    swift_errorRetain();
    if (qword_100453950 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10008E55C(v6, (uint64_t)qword_10045BD18);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      sub_100290514(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10018283C(a1, 1);
      sub_10018283C(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Failed to get SE %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10018283C(a1, 1);
    }
    else
    {
      sub_10018283C(a1, 1);
      sub_10018283C(a1, 1);
      swift_errorRelease();
    }
  }
  else
  {
    sub_100182830(a1, 0);
    sub_1002EA3E8(a1, v3);
    swift_bridgeObjectRetain();
    sub_1002E9E48();
    swift_bridgeObjectRelease();
    uint64_t v4 = self;
    NSString v5 = String._bridgeToObjectiveC()();
    [v4 setFirstLaunchAfterBootDoneForKey:v5];

    sub_10018283C(a1, 0);
  }
}

uint64_t type metadata accessor for SecureElementVersionTTR()
{
  return self;
}

uint64_t sub_1002E9B34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_1000AD8C8(v0, qword_10045BD18);
  sub_10008E55C(v0, (uint64_t)qword_10045BD18);
  String.init(cString:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1002E9BAC()
{
  if (MSURetrievePreviousUpdateState())
  {
    if (qword_100453950 != -1) {
      swift_once();
    }
    uint64_t v0 = type metadata accessor for Logger();
    sub_10008E55C(v0, (uint64_t)qword_10045BD18);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      unint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v3 = 67109120;
      swift_beginAccess();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "MSURetrievePreviousUpdateState %u", v3, 8u);
      swift_slowDealloc();
    }

    swift_beginAccess();
    return 0;
  }
  else
  {
    if (qword_100453950 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10008E55C(v5, (uint64_t)qword_10045BD18);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to MSURetrievePreviousUpdateState", v8, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
}

uint64_t sub_1002E9DEC()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1002E9E24()
{
  sub_1002E959C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1002E9E30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002E9E40()
{
  return swift_release();
}

void sub_1002E9E48()
{
  swift_beginAccess();
  if (byte_10045BD10 == 1 && !SESInternalVariant()) {
    goto LABEL_5;
  }
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  swift_bridgeObjectRetain();
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithSuiteName:v1];

  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_10006C51C((uint64_t *)&unk_100457940);
    uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    NSString v4 = String._bridgeToObjectiveC()();
    [v2 setValue:v3 forKey:v4];

    swift_unknownObjectRelease();
LABEL_5:
    swift_endAccess();
    return;
  }
  __break(1u);
}

void sub_1002E9F78(void *a1, char a2)
{
}

uint64_t sub_1002E9F88()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1002E9FC8(void *a1)
{
  uint64_t v2 = sub_100088F40((uint64_t)&off_10040F940);
  unint64_t v4 = v3;
  uint64_t v5 = sub_100088F40((uint64_t)&off_10040F968);
  unint64_t v7 = v6;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v28 = 0;
  id v9 = sub_100056AF0(a1, isa, 1, &v28);

  if (v9)
  {
    id v10 = v28;

    Class v11 = Data._bridgeToObjectiveC()().super.isa;
    id v28 = 0;
    id v12 = [a1 transceive:v11 error:&v28];

    id v13 = v28;
    if (v12)
    {
      uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      if (qword_100453950 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10008E55C(v17, (uint64_t)qword_10045BD18);
      sub_10006D0EC(v14, v16);
      sub_10006D0EC(v14, v16);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        log = v18;
        unint64_t v20 = (uint8_t *)swift_slowAlloc();
        id v28 = (id)swift_slowAlloc();
        *(_DWORD *)unint64_t v20 = 136315138;
        sub_10023CDF4(v14, v16);
        sub_10006C51C((uint64_t *)&unk_100455EA0);
        unint64_t v27 = v7;
        sub_10008C0B0((unint64_t *)&qword_100455600, (uint64_t *)&unk_100455EA0);
        uint64_t v21 = BidirectionalCollection<>.joined(separator:)();
        unint64_t v23 = v22;
        swift_bridgeObjectRelease();
        sub_100290514(v21, v23, (uint64_t *)&v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10006D144(v14, v16);
        sub_10006D144(v14, v16);
        _os_log_impl((void *)&_mh_execute_header, log, v19, "Dumped Slot Info : %s", v20, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_10006D144(v2, v4);
        sub_10006D144(v5, v27);

        sub_10006D144(v14, v16);
      }
      else
      {
        sub_10006D144(v14, v16);
        sub_10006D144(v14, v16);
        sub_10006D144(v14, v16);
        sub_10006D144(v2, v4);
        sub_10006D144(v5, v7);
      }
    }
    else
    {
      os_log_type_t v25 = v13;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10006D144(v2, v4);
      sub_10006D144(v5, v7);
      swift_errorRelease();
    }
  }
  else
  {
    id v24 = v28;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    sub_10006D144(v2, v4);
    sub_10006D144(v5, v7);
    swift_errorRelease();
  }
}

void sub_1002EA3E8(void *a1, const char *a2)
{
  uint64_t v2 = a1;
  id v3 = sub_100056FD0(a1, a2);
  unsigned int v4 = [v3 isProd];

  if (!v4) {
    return;
  }
  id v6 = sub_100056FD0(v2, v5);
  id v7 = [v6 chipId];

  uint64_t v8 = sub_1002EAAA0((uint64_t)v7);
  if (!v8) {
    return;
  }
  id v9 = v8;
  char v52 = 0;
  id v10 = [self getLoggedEvents];
  if (v10)
  {
    Class v11 = v10;
    uint64_t v51 = sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v12 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13)
      {
LABEL_6:
        os_log_t v47 = v2;
        uint64_t v48 = v9;
        id v50 = self;
        if (v13 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v14 = 0;
        unint64_t v15 = v12 & 0xC000000000000001;
        unint64_t v16 = v12;
        uint64_t v17 = v13;
        do
        {
          if (v15) {
            id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v18 = *(id *)(v12 + 8 * v14 + 32);
          }
          os_log_type_t v19 = v18;
          ++v14;
          NSString v20 = String._bridgeToObjectiveC()();
          sub_10006C51C(&qword_100455670);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_100378290;
          AnyHashable.init<A>(_:)();
          *(void *)(inited + 96) = v51;
          *(void *)(inited + 72) = v19;
          id v22 = v19;
          sub_1001DB24C(inited);
          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          [v50 postCAEventFor:v20 eventInput:isa];

          char v52 = 1;
          unint64_t v12 = v16;
        }
        while (v17 != v14);
        swift_bridgeObjectRelease();
        uint64_t v2 = v47;
        id v9 = v48;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
  }
  id v24 = self;
  NSString v25 = String._bridgeToObjectiveC()();
  sub_10006C51C(&qword_100455670);
  uint64_t v26 = swift_initStackObject();
  *(_OWORD *)(v26 + 16) = xmmword_100378290;
  AnyHashable.init<A>(_:)();
  *(void *)(v26 + 96) = &type metadata for Int;
  *(void *)(v26 + 72) = 0;
  sub_1001DB24C(v26);
  Class v27 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v24 postCAEventFor:v25 eventInput:v27];

LABEL_16:
  if (qword_100453950 != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  sub_10008E55C(v28, (uint64_t)qword_10045BD18);
  id v29 = v2;
  id v30 = v9;
  uint64_t v31 = v29;
  id v32 = v30;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  p_types = &stru_100447FF8.types;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = swift_slowAlloc();
    uint64_t v49 = v9;
    int v37 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 134218498;
    id v39 = sub_100056FD0(v31, v38);
    [v39 csn];

    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2112;
    id v40 = v32;
    p_types = (char **)(&stru_100447FF8 + 8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v37 = v49;

    *(_WORD *)(v36 + 22) = 1024;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Got SE CSN %lu expected CSN %@, eventLogged: %{BOOL}d", (uint8_t *)v36, 0x1Cu);
    sub_10006C51C(&qword_100455620);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v33 = v31;
  }

  id v42 = sub_100056FD0(v31, v41);
  id v43 = [v42 p_types[369]];

  if (v43 < [v32 unsignedIntegerValue] || (swift_beginAccess(), v52 == 1))
  {
    sub_1002E9FC8(v31);
    uint64_t v44 = self;
    NSString v45 = String._bridgeToObjectiveC()();
    NSString v46 = String._bridgeToObjectiveC()();
    [v44 requestTapToRadar:v45 client:v46 fullArchive:1];
  }
}

_UNKNOWN **sub_1002EAAA0(uint64_t a1)
{
  NSString v1 = 0;
  if (a1 <= 99)
  {
    if (a1 > 54)
    {
      if (a1 != 55)
      {
        if (a1 != 56) {
          goto LABEL_19;
        }
        NSString v1 = &off_10042DED0;
        goto LABEL_18;
      }
    }
    else
    {
      if (a1 == 44)
      {
        NSString v1 = &off_10042DEA0;
        goto LABEL_18;
      }
      if (a1 != 54) {
        goto LABEL_19;
      }
    }
    NSString v1 = &off_10042DEB8;
LABEL_18:
    uint64_t v2 = v1;
    goto LABEL_19;
  }
  if (a1 <= 199)
  {
    if (a1 != 100)
    {
      if (a1 != 115) {
        goto LABEL_19;
      }
      NSString v1 = &off_10042DF00;
      goto LABEL_18;
    }
    goto LABEL_15;
  }
  if (a1 == 200 || a1 == 210)
  {
LABEL_15:
    NSString v1 = &off_10042DEE8;
    goto LABEL_18;
  }
LABEL_19:

  return v1;
}

uint64_t sub_1002EAB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[8] = a6;
  v7[9] = v6;
  v7[6] = a4;
  v7[7] = a5;
  v7[4] = a2;
  v7[5] = a3;
  _OWORD v7[3] = a1;
  uint64_t v8 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v7[10] = v8;
  v7[11] = *(void *)(v8 - 8);
  v7[12] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v7[13] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[14] = v10;
  v7[15] = *(void *)(v10 + 64);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  return _swift_task_switch(sub_1002EACB8, v6, 0);
}

uint64_t sub_1002EACB8()
{
  uint64_t v2 = v0[16];
  uint64_t v1 = v0[17];
  uint64_t v24 = v1;
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[13];
  uint64_t v32 = v0[10];
  uint64_t v33 = v0[12];
  uint64_t v30 = v0[8];
  uint64_t v31 = v0[11];
  uint64_t v28 = v0[6];
  uint64_t v29 = v0[7];
  uint64_t v26 = v0[9];
  uint64_t v27 = v0[5];
  uint64_t v6 = v0[3];
  uint64_t v25 = v0[4];
  id v7 = [*(id *)(v26 + 112) viewContext];
  v0[18] = v7;
  v0[19] = [*(id *)(v26 + 112) viewContext];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v1, v6, v5);
  v8(v2, v25, v5);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = (v4 + v9 + v10) & ~v9;
  unint64_t v12 = (v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  v0[20] = v14;
  *(void *)(v14 + 16) = v7;
  uint64_t v15 = v14 + v10;
  unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v16(v15, v24, v5);
  v16(v14 + v11, v2, v5);
  uint64_t v17 = (void *)(v14 + v12);
  *uint64_t v17 = v27;
  v17[1] = v28;
  *(void *)(v14 + v13) = v26;
  id v18 = (void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8));
  *id v18 = v29;
  v18[1] = v30;
  (*(void (**)(uint64_t, void, uint64_t))(v31 + 104))(v33, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v32);
  id v19 = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  NSString v20 = (void *)swift_task_alloc();
  v0[21] = v20;
  uint64_t v21 = type metadata accessor for CredentialInternal();
  void *v20 = v0;
  v20[1] = sub_1002EAF48;
  uint64_t v22 = v0[12];
  return NSManagedObjectContext.perform<A>(schedule:_:)(v0 + 2, v22, sub_1002F0BBC, v14, v21);
}

uint64_t sub_1002EAF48()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 152);
  uint64_t v4 = *(void *)(*v1 + 96);
  uint64_t v5 = *(void *)(*v1 + 88);
  uint64_t v6 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release();

  uint64_t v7 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v8 = sub_1002EB1A0;
  }
  else {
    uint64_t v8 = sub_1002EB10C;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1002EB10C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_1002EB1A0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002EB22C(void *a1@<X0>, void *a2@<X3>, void *a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, void *a7@<X8>)
{
  uint64_t v57 = a5;
  unint64_t v58 = a6;
  id v59 = a2;
  uint64_t v55 = a4;
  id v60 = a3;
  int v53 = a7;
  uint64_t v8 = type metadata accessor for StateInternal.Discriminant();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  unint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for StateInternal();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SecureElementCredentialEntity();
  id v18 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  id v54 = a1;
  id v19 = [v18 initWithContext:a1];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v19 setUuid:isa];

  Class v21 = UUID._bridgeToObjectiveC()().super.isa;
  [v19 setProductConfigUUID:v21];

  NSString v22 = String._bridgeToObjectiveC()();
  [v19 setFriendlyName:v22];

  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for StateInternal.installationPending(_:), v13);
  StateInternal.discriminant.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v23 = StateInternal.Discriminant.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  if (v23 < -32768)
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v23 >= 0x8000)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  [v19 setState:(__int16)v23];
  char v62 = &_swiftEmptySetSingleton;
  uint64_t v25 = v57;
  uint64_t v24 = v58;
  uint64_t v26 = v56;
  uint64_t v27 = (void *)sub_100122784(v57, v58);
  if (v26) {
    goto LABEL_24;
  }
  if (!v27)
  {
    if (qword_1004536D0 == -1)
    {
LABEL_9:
      uint64_t v35 = type metadata accessor for Logger();
      sub_10008E55C(v35, (uint64_t)qword_1004686A8);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        os_log_t v38 = (uint8_t *)swift_slowAlloc();
        id v63 = (id)swift_slowAlloc();
        *(_DWORD *)os_log_t v38 = 136315138;
        uint64_t v61 = sub_100290514(0xD00000000000003FLL, 0x80000001003BDA40, (uint64_t *)&v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s: App entity should have been created when passing TCC check", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      sub_10008E594();
      swift_allocError();
      *id v39 = 6;
      swift_willThrow();
      goto LABEL_24;
    }
LABEL_27:
    swift_once();
    goto LABEL_9;
  }
  id v28 = v27;
  sub_1000EB130(&v63, v28);

  type metadata accessor for SecureElementApplicationEntity();
  sub_1002F0954((unint64_t *)&unk_10045BEF0, (void (*)(uint64_t))type metadata accessor for SecureElementApplicationEntity);
  Class v29 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v19 setOwnerApplications:v29];

  id v30 = [objc_allocWithZone((Class)NSSet) init];
  [v19 setUserApplications:v30];

  type metadata accessor for CredentialInternal();
  id v31 = v19;
  swift_bridgeObjectRetain();
  id v60 = v31;
  uint64_t v32 = sub_1000AF9D0(v31, v25, v24);
  if (v32)
  {
    id v19 = (id)v32;
    id v63 = 0;
    id v33 = v54;
    if ([v54 save:&v63])
    {
      id v34 = v63;
      [v33 refreshAllObjects];

      *int v53 = v19;
      return;
    }
    id v45 = v63;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_10008E55C(v46, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc();
      id v59 = (void *)swift_slowAlloc();
      id v63 = v59;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v61 = sub_100290514(0xD00000000000003FLL, 0x80000001003BDA40, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v49 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v50 = Error.localizedDescription.getter();
      uint64_t v61 = sub_100290514(v50, v51, (uint64_t *)&v63);
      id v33 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    [v33 reset];
    sub_10008E594();
    swift_allocError();
    *char v52 = 0;
    swift_willThrow();

    swift_errorRelease();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10008E55C(v40, (uint64_t)qword_1004686A8);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      id v43 = (uint8_t *)swift_slowAlloc();
      id v63 = (id)swift_slowAlloc();
      *(_DWORD *)id v43 = 136315138;
      uint64_t v61 = sub_100290514(0xD00000000000003FLL, 0x80000001003BDA40, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s: Unable to create internal representation of credential", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    id v19 = v60;
    sub_10008E594();
    swift_allocError();
    *uint64_t v44 = 6;
    swift_willThrow();
  }

LABEL_24:
}

uint64_t sub_1002EBB90(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[8] = v5;
  v2[9] = *(void *)(v5 + 64);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_1002EBCB4, v1, 0);
}

uint64_t sub_1002EBCB4()
{
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v15 = v0[6];
  uint64_t v5 = v0[3];
  uint64_t v13 = v0[9];
  uint64_t v14 = v0[4];
  uint64_t v6 = v0[2];
  id v7 = [*(id *)(v5 + 112) viewContext];
  v0[11] = v7;
  v0[12] = [*(id *)(v5 + 112) viewContext];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v6, v3);
  unint64_t v8 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v9 = swift_allocObject();
  v0[13] = v9;
  *(void *)(v9 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v9 + v8, v1, v3);
  *(void *)(v9 + ((v13 + v8 + 7) & 0xFFFFFFFFFFFFFFF8)) = v7;
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v15, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v14);
  swift_retain();
  id v10 = v7;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[14] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1002EBE94;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002EBE94()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void *)(*v1 + 32);
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release();

  uint64_t v7 = *(void *)(v2 + 24);
  if (v0) {
    unint64_t v8 = sub_1002EC0D0;
  }
  else {
    unint64_t v8 = sub_1002EC058;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1002EC058()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EC0D0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002EC148(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v40 - v13;
  uint64_t v15 = sub_1002EED88(a2);
  if (!v3)
  {
    uint64_t v16 = (void *)v15;
    if (v15)
    {
      [a3 deleteObject:v15];
      id v44 = 0;
      if ([a3 save:&v44])
      {
        id v17 = v44;
        [a3 refreshAllObjects];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v18 = type metadata accessor for Logger();
        sub_10008E55C(v18, (uint64_t)qword_1004686A8);
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a2, v6);
        id v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v19, v20))
        {
          os_log_t v42 = v19;
          Class v21 = (uint8_t *)swift_slowAlloc();
          uint64_t v41 = (void *)swift_slowAlloc();
          id v44 = v41;
          *(_DWORD *)Class v21 = 136315138;
          uint64_t v40 = v21 + 4;
          uint64_t v22 = UUID.uuidString.getter();
          uint64_t v43 = sub_100290514(v22, v23, (uint64_t *)&v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
          os_log_t v24 = v42;
          _os_log_impl((void *)&_mh_execute_header, v42, v20, "Successfully deleted credential %s from persistent container", v21, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return;
        }
        (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      }
      else
      {
        id v31 = v44;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v32 = type metadata accessor for Logger();
        sub_10008E55C(v32, (uint64_t)qword_1004686A8);
        swift_errorRetain();
        swift_errorRetain();
        id v33 = Logger.logObject.getter();
        os_log_type_t v34 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          os_log_t v42 = (os_log_t)swift_slowAlloc();
          id v44 = v42;
          *(_DWORD *)uint64_t v35 = 136315394;
          uint64_t v43 = sub_100290514(0xD00000000000001DLL, 0x80000001003BD7C0, (uint64_t *)&v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v36 = Error.localizedDescription.getter();
          uint64_t v43 = sub_100290514(v36, v37, (uint64_t *)&v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        [a3 reset];
        sub_10008E594();
        swift_allocError();
        *id v39 = 0;
        swift_willThrow();
        swift_errorRelease();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10008E55C(v25, (uint64_t)qword_1004686A8);
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, a2, v6);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        os_log_t v42 = (os_log_t)swift_slowAlloc();
        id v44 = v42;
        *(_DWORD *)uint64_t v28 = 136315394;
        uint64_t v43 = sub_100290514(0xD00000000000001DLL, 0x80000001003BD7C0, (uint64_t *)&v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 2080;
        uint64_t v29 = UUID.uuidString.getter();
        uint64_t v43 = sub_100290514(v29, v30, (uint64_t *)&v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: Credential Info with %s does not exist or no access", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
      }

      sub_10008E594();
      swift_allocError();
      void *v38 = 1;
      swift_willThrow();
    }
  }
}

uint64_t sub_1002EC8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  void v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[10] = v7;
  v4[11] = *(void *)(v7 + 64);
  v4[12] = swift_task_alloc();
  return _swift_task_switch(sub_1002EC9D4, v3, 0);
}

uint64_t sub_1002EC9D4()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[5];
  uint64_t v19 = v0[6];
  uint64_t v20 = v0[8];
  uint64_t v17 = v0[4];
  uint64_t v18 = v0[7];
  uint64_t v6 = v0[2];
  uint64_t v15 = v1;
  uint64_t v16 = v0[3];
  id v7 = [*(id *)(v5 + 112) viewContext];
  v0[13] = v7;
  v0[14] = [*(id *)(v5 + 112) viewContext];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = swift_allocObject();
  v0[15] = v11;
  *(void *)(v11 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v8, v15, v4);
  *(void *)(v11 + v9) = v16;
  *(void *)(v11 + v10) = v7;
  *(void *)(v11 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8)) = v17;
  (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v20, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v19);
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = v7;
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[16] = v13;
  void *v13 = v0;
  v13[1] = sub_1002ECBEC;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002ECBEC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void **)(*v1 + 112);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *(void *)(*v1 + 56);
  uint64_t v6 = *(void *)(*v1 + 48);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_release();

  uint64_t v7 = *(void *)(v2 + 40);
  if (v0) {
    unint64_t v8 = sub_1002ECE28;
  }
  else {
    unint64_t v8 = sub_1002ECDB0;
  }
  return _swift_task_switch(v8, v7, 0);
}

uint64_t sub_1002ECDB0()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002ECE28()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002ECEA0(void *a1, uint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v90 = a5;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)sub_1002EED88(a2);
  uint64_t v16 = v5;
  if (!v5)
  {
    id v17 = v15;
    unint64_t v87 = a3;
    *(void *)&long long v88 = a2;
    *(void *)&long long v89 = v14;
    uint64_t v92 = v11;
    uint64_t v93 = a1;
    id v91 = a4;
    uint64_t v18 = &OBJC_PROTOCOL___SEServerProtocol;
    if (v15)
    {
      uint64_t v97 = &_swiftEmptySetSingleton;
      uint64_t v19 = *(void *)(v87 + 16);
      id v84 = v15;
      if (v19)
      {
        uint64_t v20 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
        *(void *)&long long v21 = 136315138;
        long long v86 = v21;
        unint64_t v85 = (char *)&type metadata for Any + 8;
        *(void *)&long long v21 = 136315394;
        long long v89 = v21;
        *(void *)&long long v88 = 0x80000001003BDA10;
        while (1)
        {
          uint64_t v23 = *(v20 - 1);
          unint64_t v22 = *v20;
          swift_bridgeObjectRetain();
          unint64_t v24 = sub_100122784(v23, v22);
          if (v16) {
            goto LABEL_46;
          }
          uint64_t v25 = (void *)v24;
          if (v24)
          {
            if (v18[24].prots != (__objc2_prot_list *)-1) {
              swift_once();
            }
            uint64_t v26 = type metadata accessor for Logger();
            sub_10008E55C(v26, (uint64_t)qword_1004686A8);
            swift_bridgeObjectRetain();
            os_log_type_t v27 = Logger.logObject.getter();
            os_log_type_t v28 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v27, v28))
            {
              uint64_t v29 = swift_slowAlloc();
              unint64_t v30 = (void *)swift_slowAlloc();
              uint64_t v92 = 0;
              id v96 = v30;
              *(_DWORD *)uint64_t v29 = v89;
              *(void *)(v29 + 4) = sub_100290514(0xD00000000000002CLL, v88, (uint64_t *)&v96);
              *(_WORD *)(v29 + 12) = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v29 + 14) = sub_100290514(v23, v22, (uint64_t *)&v96);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s :Using existing app entity for appId %s", (uint8_t *)v29, 0x16u);
              swift_arrayDestroy();
              uint64_t v16 = v92;
              swift_slowDealloc();
              uint64_t v18 = &OBJC_PROTOCOL___SEServerProtocol;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            sub_1000EB130(&v96, v25);
          }
          else
          {
            if (v18[24].prots != (__objc2_prot_list *)-1) {
              swift_once();
            }
            uint64_t v31 = type metadata accessor for Logger();
            sub_10008E55C(v31, (uint64_t)qword_1004686A8);
            swift_bridgeObjectRetain_n();
            uint64_t v32 = Logger.logObject.getter();
            os_log_type_t v33 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = swift_slowAlloc();
              id v96 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v34 = v86;
              swift_bridgeObjectRetain();
              *(void *)(v34 + 4) = sub_100290514(v23, v22, (uint64_t *)&v96);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Adding new app entity for appId %s -- This entity does not have bundleIdentifier field populated until the app's first launch", (uint8_t *)v34, 0xCu);
              swift_arrayDestroy();
              uint64_t v16 = 0;
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            type metadata accessor for SecureElementApplicationEntity();
            id v35 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
            id v36 = [v35 initWithContext:v91];
            NSString v37 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v36 setIdentifier:v37];

            [v36 setBundleIdentifier:0];
            sub_1000EB130(&v96, v36);

            uint64_t v18 = &OBJC_PROTOCOL___SEServerProtocol;
          }
          v20 += 2;
          if (!--v19)
          {
            swift_bridgeObjectRelease();
            id v17 = v84;
            break;
          }
        }
      }
      uint64_t v48 = type metadata accessor for SecureElementApplicationEntity();
      uint64_t v49 = sub_1002F0954((unint64_t *)&unk_10045BEF0, (void (*)(uint64_t))type metadata accessor for SecureElementApplicationEntity);
      *(void *)&long long v89 = v48;
      v83[1] = v49;
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v17 setOwnerApplications:isa];

      id v96 = &_swiftEmptySetSingleton;
      uint64_t v51 = *(void *)(v90 + 16);
      if (v51)
      {
        char v52 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
        *(void *)&long long v53 = 136315138;
        long long v86 = v53;
        unint64_t v85 = (char *)&type metadata for Any + 8;
        *(void *)&long long v53 = 136315394;
        long long v88 = v53;
        unint64_t v87 = 0x80000001003BDA10;
        while (1)
        {
          uint64_t v54 = *(v52 - 1);
          unint64_t v55 = *v52;
          swift_bridgeObjectRetain();
          unint64_t v56 = sub_100122784(v54, v55);
          if (v16) {
            break;
          }
          uint64_t v57 = (void *)v56;
          if (v56)
          {
            if (v18[24].prots != (__objc2_prot_list *)-1) {
              swift_once();
            }
            uint64_t v58 = type metadata accessor for Logger();
            sub_10008E55C(v58, (uint64_t)qword_1004686A8);
            swift_bridgeObjectRetain();
            id v59 = Logger.logObject.getter();
            os_log_type_t v60 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v59, v60))
            {
              uint64_t v61 = swift_slowAlloc();
              char v62 = (void *)swift_slowAlloc();
              uint64_t v92 = 0;
              id v95 = v62;
              *(_DWORD *)uint64_t v61 = v88;
              *(void *)(v61 + 4) = sub_100290514(0xD00000000000002CLL, v87, (uint64_t *)&v95);
              *(_WORD *)(v61 + 12) = 2080;
              swift_bridgeObjectRetain();
              *(void *)(v61 + 14) = sub_100290514(v54, v55, (uint64_t *)&v95);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s: Using existing app entity for appId %s", (uint8_t *)v61, 0x16u);
              swift_arrayDestroy();
              uint64_t v16 = v92;
              swift_slowDealloc();
              uint64_t v18 = &OBJC_PROTOCOL___SEServerProtocol;
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            sub_1000EB130(&v95, v57);
          }
          else
          {
            if (v18[24].prots != (__objc2_prot_list *)-1) {
              swift_once();
            }
            uint64_t v63 = type metadata accessor for Logger();
            sub_10008E55C(v63, (uint64_t)qword_1004686A8);
            swift_bridgeObjectRetain_n();
            uint64_t v64 = Logger.logObject.getter();
            os_log_type_t v65 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v64, v65))
            {
              uint64_t v66 = swift_slowAlloc();
              id v95 = (id)swift_slowAlloc();
              *(_DWORD *)uint64_t v66 = v86;
              swift_bridgeObjectRetain();
              *(void *)(v66 + 4) = sub_100290514(v54, v55, (uint64_t *)&v95);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "Adding new app entity for appId %s -- This entity does not have bundleIdentifier field populated until the app's first launch", (uint8_t *)v66, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_bridgeObjectRelease_n();
            }
            id v67 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
            id v68 = [v67 initWithContext:v91];
            NSString v69 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v68 setIdentifier:v69];

            [v68 setBundleIdentifier:0];
            sub_1000EB130(&v95, v68);

            uint64_t v18 = &OBJC_PROTOCOL___SEServerProtocol;
          }
          v52 += 2;
          if (!--v51)
          {
            swift_bridgeObjectRelease();
            id v17 = v84;
            goto LABEL_48;
          }
        }
LABEL_46:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        return;
      }
LABEL_48:
      Class v71 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v17 setUserApplications:v71];

      id v95 = 0;
      id v72 = v91;
      if ([v91 save:&v95])
      {
        id v73 = v95;
        [v72 refreshAllObjects];
      }
      else
      {
        unint64_t v74 = v17;
        id v75 = v95;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        [v72 reset];
        if (qword_1004536D0 != -1) {
          swift_once();
        }
        uint64_t v76 = type metadata accessor for Logger();
        sub_10008E55C(v76, (uint64_t)qword_1004686A8);
        swift_errorRetain();
        swift_errorRetain();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc();
          id v95 = (id)swift_slowAlloc();
          *(_DWORD *)uint64_t v79 = 136315394;
          uint64_t v94 = sub_100290514(0xD00000000000002CLL, 0x80000001003BDA10, (uint64_t *)&v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v79 + 12) = 2080;
          swift_getErrorValue();
          uint64_t v80 = Error.localizedDescription.getter();
          uint64_t v94 = sub_100290514(v80, v81, (uint64_t *)&v95);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v79, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        sub_10008E594();
        swift_allocError();
        *uint64_t v82 = 0;
        swift_willThrow();

        swift_errorRelease();
      }
    }
    else
    {
      if (qword_1004536D0 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_10008E55C(v38, (uint64_t)qword_1004686A8);
      uint64_t v39 = v92;
      uint64_t v40 = v89;
      uint64_t v41 = v10;
      (*(void (**)(void, void, uint64_t))(v92 + 16))(v89, v88, v10);
      os_log_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = v40;
        uint64_t v45 = swift_slowAlloc();
        uint64_t v93 = (void *)swift_slowAlloc();
        uint64_t v97 = v93;
        *(_DWORD *)uint64_t v45 = 136315394;
        id v96 = (id)sub_100290514(0xD00000000000002CLL, 0x80000001003BDA10, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 12) = 2080;
        uint64_t v46 = UUID.uuidString.getter();
        id v96 = (id)sub_100290514(v46, v47, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v44, v41);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s: Credential Info with %s does not exist or no access", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v10);
      }

      sub_10008E594();
      swift_allocError();
      *char v70 = 1;
      swift_willThrow();
    }
  }
}

uint64_t sub_1002EDD54(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for NSManagedObjectContext.ScheduledTaskType();
  v3[5] = v4;
  void v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for StateInternal();
  v3[8] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[9] = v6;
  v3[10] = *(void *)(v6 + 64);
  v3[11] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v3[12] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[13] = v8;
  v3[14] = *(void *)(v8 + 64);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_1002EDEE0, v2, 0);
}

uint64_t sub_1002EDEE0()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[11];
  uint64_t v15 = v4;
  uint64_t v16 = v0[14];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[8];
  uint64_t v19 = v0[6];
  uint64_t v20 = v0[5];
  uint64_t v21 = v0[7];
  uint64_t v7 = v0[3];
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[4];
  uint64_t v8 = v0[2];
  id v9 = [*(id *)(v18 + 112) viewContext];
  v0[16] = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v8, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v11 = (v16 + *(unsigned __int8 *)(v5 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  v0[17] = v12;
  *(void *)(v12 + 16) = v18;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v1, v2);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v12 + v11, v15, v6);
  *(void *)(v12 + ((v17 + v11 + 7) & 0xFFFFFFFFFFFFFFF8)) = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v21, enum case for NSManagedObjectContext.ScheduledTaskType.immediate(_:), v20);
  swift_retain();
  v9;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[18] = v13;
  void *v13 = v0;
  v13[1] = sub_1002EE118;
  return NSManagedObjectContext.perform<A>(schedule:_:)();
}

uint64_t sub_1002EE118()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 40);
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  swift_release();
  uint64_t v6 = *(void *)(v2 + 32);
  if (v0) {
    uint64_t v7 = sub_1002EE350;
  }
  else {
    uint64_t v7 = sub_1002EE2C4;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_1002EE2C4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1002EE350()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1002EE3DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v42 = a3;
  os_log_type_t v43 = a4;
  uint64_t v6 = type metadata accessor for StateInternal.Discriminant();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void **)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1002EED88(a2);
  if (v4) {
    return;
  }
  uint64_t v41 = v15;
  uint64_t v17 = v43;
  if (!v16)
  {
    if (qword_1004536D0 == -1)
    {
LABEL_8:
      uint64_t v21 = type metadata accessor for Logger();
      sub_10008E55C(v21, (uint64_t)qword_1004686A8);
      uint64_t v22 = v12;
      uint64_t v23 = (void (*)(char *, uint64_t, uint64_t))v12[2];
      unint64_t v24 = v41;
      v23(v41, a2, v11);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        os_log_type_t v27 = v24;
        uint64_t v28 = swift_slowAlloc();
        os_log_type_t v43 = (void *)swift_slowAlloc();
        id v45 = v43;
        *(_DWORD *)uint64_t v28 = 136315394;
        uint64_t v44 = sub_100290514(0xD00000000000001BLL, 0x80000001003BD9F0, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v28 + 12) = 2080;
        uint64_t v29 = UUID.uuidString.getter();
        uint64_t v44 = sub_100290514(v29, v30, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v22[1])(v27, v11);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "%s: Credential Info with %s does not exist", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, uint64_t))v22[1])(v24, v11);
      }

      sub_10008E594();
      swift_allocError();
      *uint64_t v39 = 1;
      swift_willThrow();
      return;
    }
LABEL_20:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v12 = (void *)v16;
  StateInternal.discriminant.getter();
  uint64_t v18 = StateInternal.Discriminant.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v18 < -32768)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v18 >= 0x8000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v19 = v17;
  [v12 setState:(__int16)v18];
  id v45 = 0;
  if ([v17 save:&v45])
  {
    id v20 = v45;
    [v17 refreshAllObjects];
  }
  else
  {
    id v31 = v45;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    sub_10008E55C(v32, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc();
      id v45 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      LODWORD(v42) = v35;
      uint64_t v44 = sub_100290514(0xD00000000000001BLL, 0x80000001003BD9F0, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      uint64_t v44 = sub_100290514(v37, v38, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v42, "%s: CoreData error %s encountered while saving view context", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      uint64_t v19 = v17;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    [v19 reset];
    sub_10008E594();
    swift_allocError();
    *uint64_t v40 = 0;
    swift_willThrow();
    swift_errorRelease();
  }
}

uint64_t sub_1002EEA60(uint64_t a1, uint64_t a2)
{
  id v6 = [*(id *)(v2 + 112) viewContext];
  id v7 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v9 = [v7 initWithEntityName:v8];

  sub_10006C51C(&qword_10045BEE8);
  uint64_t v10 = NSManagedObjectContext.fetch<A>(_:)();
  if (v3)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10008E55C(v11, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315394;
      sub_100290514(0xD000000000000014, 0x80000001003BD9D0, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v15 = Error.localizedDescription.getter();
      sub_100290514(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: CoreData error %s encountered while fetching entity", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v20 = 0;
    swift_willThrow();
    return swift_errorRelease();
  }
  else
  {
    unint64_t v17 = v10;

    swift_bridgeObjectRetain();
    uint64_t v18 = sub_1002F029C(v17, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v18;
  }
}

uint64_t sub_1002EED88(uint64_t a1)
{
  id v4 = [*(id *)(v1 + 112) viewContext];
  id v5 = objc_allocWithZone((Class)NSFetchRequest);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithEntityName:v6];

  type metadata accessor for SecureElementCredentialEntity();
  uint64_t v8 = NSManagedObjectContext.fetch<A>(_:)();
  if (v2)
  {

    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10008E55C(v9, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      v23[4] = sub_100290514(v13, v14, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "getCredentialEntity: CoreData error %s encountered while fetching entity", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    sub_10008E594();
    swift_allocError();
    void *v22 = 0;
    swift_willThrow();
    swift_errorRelease();
    return (uint64_t)v10;
  }
  unint64_t v15 = v8;

  __chkstk_darwin(v16, v17);
  void v23[2] = a1;
  unint64_t v18 = (unint64_t)sub_1002B9DD0(sub_1002F027C, v23, v15);
  unint64_t v19 = v18;
  if (!(v18 >> 62))
  {
    uint64_t result = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_8;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v19 & 0xC000000000000001) != 0)
  {
    uint64_t v21 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v21 = *(id *)(v19 + 32);
LABEL_11:
    uint64_t v10 = v21;
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1002EF0FC(void **a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v40 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10006C51C(&qword_10045BEE0);
  __chkstk_darwin(v8, v9);
  os_log_type_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10006C51C(&qword_100455EB0);
  uint64_t v14 = __chkstk_darwin(v12 - 8, v13);
  uint64_t v41 = (uint64_t)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  unint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17, v20);
  uint64_t v22 = (char *)&v39 - v21;
  uint64_t v23 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v39 - v21, a2, v4);
  uint64_t v42 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v25 = 1;
  v24(v22, 0, 1, v4);
  id v26 = [v23 uuid];
  if (v26)
  {
    os_log_type_t v27 = v26;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v25 = 0;
  }
  v24(v19, v25, 1, v4);
  uint64_t v28 = (uint64_t)&v11[*(int *)(v8 + 48)];
  sub_10019366C((uint64_t)v22, (uint64_t)v11);
  sub_10019366C((uint64_t)v19, v28);
  uint64_t v29 = v42;
  unint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
  int v31 = v30(v11, 1, v4);
  uint64_t v32 = v41;
  if (v31 == 1)
  {
    sub_10008E734((uint64_t)v19, &qword_100455EB0);
    sub_10008E734((uint64_t)v22, &qword_100455EB0);
    int v33 = v30((char *)v28, 1, v4);
    if (v33 == 1) {
      os_log_type_t v34 = &qword_100455EB0;
    }
    else {
      os_log_type_t v34 = &qword_10045BEE0;
    }
    if (v33 == 1) {
      char v35 = -1;
    }
    else {
      char v35 = 0;
    }
  }
  else
  {
    sub_10019366C((uint64_t)v11, v41);
    if (v30((char *)v28, 1, v4) == 1)
    {
      sub_10008E734((uint64_t)v19, &qword_100455EB0);
      sub_10008E734((uint64_t)v22, &qword_100455EB0);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v32, v4);
      char v35 = 0;
      os_log_type_t v34 = &qword_10045BEE0;
    }
    else
    {
      uint64_t v36 = v40;
      (*(void (**)(char *, uint64_t, uint64_t))(v29 + 32))(v40, v28, v4);
      sub_1002F0954((unint64_t *)&qword_1004556E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v37 = *(void (**)(char *, uint64_t))(v29 + 8);
      v37(v36, v4);
      os_log_type_t v34 = &qword_100455EB0;
      sub_10008E734((uint64_t)v19, &qword_100455EB0);
      sub_10008E734((uint64_t)v22, &qword_100455EB0);
      v37((char *)v32, v4);
    }
  }
  sub_10008E734((uint64_t)v11, v34);
  return v35 & 1;
}

id sub_1002EF520()
{
  type metadata accessor for SECPersistenceController();
  uint64_t v0 = (void *)swift_allocObject();
  swift_defaultActor_initialize();
  if (qword_100453960 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_100468AA0;
  v0[14] = qword_100468AA0;
  v0[15] = 0xD00000000000001DLL;
  v0[16] = 0x80000001003BD7E0;
  v0[17] = 0xD00000000000001ELL;
  v0[18] = 0x80000001003BD800;
  v0[19] = 0xD000000000000018;
  v0[20] = 0x80000001003BD820;
  v0[21] = 0xD000000000000016;
  v0[22] = 0x80000001003BD840;
  v0[23] = 0xD000000000000017;
  v0[24] = 0x80000001003BD860;
  qword_100468A98 = (uint64_t)v0;

  return v1;
}

uint64_t sub_1002EF624()
{
  uint64_t result = sub_1002EF644();
  qword_100468AA0 = result;
  return result;
}

uint64_t sub_1002EF644()
{
  uint64_t v41 = type metadata accessor for URL.DirectoryHint();
  uint64_t v0 = *(void *)(v41 - 8);
  __chkstk_darwin(v41, v1);
  uint64_t v3 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v44 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  os_log_type_t v43 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100453968 != -1) {
    swift_once();
  }
  sub_10008E55C(v8, (uint64_t)qword_10045BD70);
  id v11 = objc_allocWithZone((Class)NSManagedObjectModel);
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  id v15 = [v11 initWithContentsOfURL:v13];

  if (v15)
  {
    id v16 = objc_allocWithZone((Class)NSPersistentContainer);
    id v17 = v15;
    NSString v18 = String._bridgeToObjectiveC()();
    id v19 = [v16 initWithName:v18 managedObjectModel:v17];

    uint64_t aBlock = (void **)0xD00000000000001BLL;
    unint64_t v46 = 0x80000001003BD920;
    uint64_t v51 = qword_10045BD60;
    char v52 = off_10045BD68;
    swift_bridgeObjectRetain_n();
    uint64_t v51 = String.init<A>(_:)();
    char v52 = v20;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v44;
    uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v44 + 56);
    uint64_t v42 = v8;
    v22(v7, 1, 1, v8);
    (*(void (**)(char *, void, uint64_t))(v0 + 104))(v3, enum case for URL.DirectoryHint.inferFromPath(_:), v41);
    uint64_t v23 = v43;
    URL.init(filePath:directoryHint:relativeTo:)();
    id v24 = objc_allocWithZone((Class)NSPersistentStoreDescription);
    URL._bridgeToObjectiveC()(v25);
    os_log_type_t v27 = v26;
    id v28 = [v24 initWithURL:v26];

    [v28 setType:NSSQLiteStoreType];
    sub_10007582C(0, (unint64_t *)&qword_10045BEC0);
    Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    [v28 setOption:isa forKey:NSMigratePersistentStoresAutomaticallyOption];

    Class v30 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    [v28 setOption:v30 forKey:NSInferMappingModelAutomaticallyOption];

    unint64_t v31 = sub_1001DB39C((uint64_t)&off_10040E620);
    sub_1002BABC0(v31);
    swift_bridgeObjectRelease();
    id v32 = objc_allocWithZone((Class)NSDictionary);
    Class v33 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v34 = [v32 initWithDictionary:v33];

    [v28 setOption:v34 forKey:NSSQLitePragmasOption];
    sub_10006C51C(&qword_1004557C0);
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_100378B90;
    *(void *)(v35 + 32) = v28;
    uint64_t aBlock = (void **)v35;
    specialized Array._endMutation()();
    sub_10007582C(0, (unint64_t *)&unk_10045BED0);
    id v36 = v28;
    Class v37 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v19 setPersistentStoreDescriptions:v37];

    uint64_t v49 = sub_1002EFCA0;
    uint64_t v50 = 0;
    uint64_t aBlock = _NSConcreteStackBlock;
    unint64_t v46 = 1107296256;
    unint64_t v47 = sub_1002B57C0;
    uint64_t v48 = &unk_100419838;
    unint64_t v38 = _Block_copy(&aBlock);
    [v19 loadPersistentStoresWithCompletionHandler:v38];
    _Block_release(v38);
    id v39 = [v19 viewContext];
    [v39 setAutomaticallyMergesChangesFromParent:1];

    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v42);
    return (uint64_t)v19;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void sub_1002EFCA0(void *a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10008E55C(v2, (uint64_t)qword_1004686A8);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136315138;
      swift_errorRetain();
      sub_10006C51C(&qword_100453DA8);
      uint64_t v5 = String.init<A>(describing:)();
      sub_100290514(v5, v6, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Error loading persistent store: %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_1004536D0 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10008E55C(v8, (uint64_t)qword_1004686A8);
    oslog = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)id v11 = 136315138;
      uint64_t v12 = oslog;
      id v13 = [v12 description];
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v16 = v15;

      sub_100290514(v14, v16, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully loaded persistent store: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }
  }
}

uint64_t sub_1002F0040()
{
  uint64_t v0 = type metadata accessor for URL.DirectoryHint();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10006C51C(&qword_100455978);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  sub_1000AD8C8(v9, qword_10045BD70);
  sub_10008E55C(v9, (uint64_t)qword_10045BD70);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for URL.DirectoryHint.inferFromPath(_:), v0);
  return URL.init(filePath:directoryHint:relativeTo:)();
}

uint64_t sub_1002F01E0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for SECPersistenceController()
{
  return self;
}

uint64_t sub_1002F0264(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1002F0274()
{
  return swift_release();
}

uint64_t sub_1002F027C(void **a1)
{
  return sub_1002EF0FC(a1, *(void *)(v1 + 16)) & 1;
}

void *sub_1002F029C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = a1;
  unint64_t v30 = (unint64_t)_swiftEmptyArrayStorage;
  if (a1 >> 62)
  {
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
    {
LABEL_3:
      unint64_t v28 = v5 & 0xC000000000000001;
      uint64_t v7 = 4;
      uint64_t v27 = v6;
      unint64_t v24 = v5;
      while (1)
      {
        uint64_t v8 = v7 - 4;
        if (v28)
        {
          uint64_t v9 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1)) {
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v9 = *(void **)(v5 + 8 * v7);
          swift_unknownObjectRetain();
          uint64_t v10 = v7 - 3;
          if (__OFADD__(v8, 1))
          {
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
        }
        type metadata accessor for SecureElementCredentialEntity();
        uint64_t v11 = swift_dynamicCastClass();
        if (v11)
        {
          uint64_t v12 = (void *)v11;
          type metadata accessor for CredentialInternal();
          if (a3)
          {
            swift_bridgeObjectRetain();
            if (!sub_1000AF9D0(v12, a2, a3)) {
              goto LABEL_6;
            }
          }
          else if (!sub_1000B1F08(v12))
          {
            goto LABEL_6;
          }
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          if (qword_1004536D0 != -1) {
            swift_once();
          }
          uint64_t v13 = type metadata accessor for Logger();
          sub_10008E55C(v13, (uint64_t)qword_1004686A8);
          swift_unknownObjectRetain_n();
          uint64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v14, v15))
          {
            uint64_t v25 = swift_slowAlloc();
            uint64_t v29 = swift_slowAlloc();
            *(_DWORD *)uint64_t v25 = 136315138;
            log = v14;
            uint64_t v16 = a3;
            id v17 = [v9 description];
            uint64_t v18 = a2;
            uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v21 = v20;

            a3 = v16;
            uint64_t v22 = v19;
            a2 = v18;
            *(void *)(v25 + 4) = sub_100290514(v22, v21, &v29);
            swift_unknownObjectRelease_n();
            unint64_t v5 = v24;
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, log, v15, "Credential %s failed downcast as Entity", (uint8_t *)v25, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease_n();
          }
        }
        uint64_t v6 = v27;
LABEL_6:
        ++v7;
        if (v10 == v6)
        {
          swift_bridgeObjectRelease();
          return (void *)v30;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002F0624()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for StateInternal();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return _swift_deallocObject(v0, v11 + 8, v10);
}

uint64_t sub_1002F0790()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_1002F08A0()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002ECEA0(*(void **)(v0 + 16), v0 + v2, *(void *)(v0 + v3), *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1002F0954(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1002F099C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1002F0A84()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (((((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v8 + 16, v6);
}

void sub_1002F0BBC(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(void *)(v3 + 64)
      + ((*(void *)(v3 + 64)
        + *(unsigned __int8 *)(v3 + 80)
        + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1002EB22C(*(void **)(v1 + 16), *(void **)(v1 + v4), *(void **)(v1 + v4 + 8), *(void *)(v1 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), a1);
}

id Item.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  id v5 = [objc_allocWithZone(v2) initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

id Item.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for Item();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for Item()
{
  return self;
}

id Item.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Item();
  return [super dealloc];
}

id static Item.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

void *sub_1002F0E54()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_1002F0E60@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for Item();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

id CredentialMetadataEntity.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CredentialMetadataEntity();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for CredentialMetadataEntity()
{
  return self;
}

id CredentialMetadataEntity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CredentialMetadataEntity();
  return [super dealloc];
}

id static CredentialMetadataEntity.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

uint64_t sub_1002F1024@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CredentialMetadataEntity();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

id PresentmentEventEntity.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for PresentmentEventEntity();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for PresentmentEventEntity()
{
  return self;
}

id PresentmentEventEntity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresentmentEventEntity();
  return [super dealloc];
}

id static PresentmentEventEntity.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

uint64_t sub_1002F11E8@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PresentmentEventEntity();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

id PresentmentReportEntity.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for PresentmentReportEntity();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for PresentmentReportEntity()
{
  return self;
}

id PresentmentReportEntity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PresentmentReportEntity();
  return [super dealloc];
}

id static PresentmentReportEntity.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

uint64_t sub_1002F13AC@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PresentmentReportEntity();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

id SecureElementApplicationEntity.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for SecureElementApplicationEntity();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for SecureElementApplicationEntity()
{
  return self;
}

id SecureElementApplicationEntity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureElementApplicationEntity();
  return [super dealloc];
}

id static SecureElementApplicationEntity.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

uint64_t sub_1002F1570@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SecureElementApplicationEntity();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

id SecureElementCredentialEntity.init(entity:insertInto:)(void *a1, void *a2)
{
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for SecureElementCredentialEntity();
  id v5 = [super initWithEntity:a1 insertIntoManagedObjectContext:a2];

  return v5;
}

uint64_t type metadata accessor for SecureElementCredentialEntity()
{
  return self;
}

id SecureElementCredentialEntity.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SecureElementCredentialEntity();
  return [super dealloc];
}

id static SecureElementCredentialEntity.fetchRequest()()
{
  id v0 = objc_allocWithZone((Class)NSFetchRequest);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithEntityName:v1];

  return v2;
}

uint64_t sub_1002F1734@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SecureElementCredentialEntity();
  uint64_t result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

void *acm_mem_alloc_data(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result) {
    qword_1004682E8 += size;
  }
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1004682E8 - __n;
    if (qword_1004682E8 < __n) {
      uint64_t v4 = 0;
    }
    qword_1004682E8 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  uint64_t result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result) {
    qword_1004682F0 += size;
  }
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    uint64_t v4 = qword_1004682F0 - __n;
    if (qword_1004682F0 < __n) {
      uint64_t v4 = 0;
    }
    qword_1004682F0 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2) {
    qword_1004682E0 += a3;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    uint64_t v6 = "NULL";
    if (result) {
      objc_super v7 = result;
    }
    else {
      objc_super v7 = "NULL";
    }
    if (a4) {
      unint64_t v8 = a4;
    }
    else {
      unint64_t v8 = "NULL";
    }
    if (a6) {
      uint64_t v6 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1004682E0, 0, qword_1004682E8, qword_1004682F0, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  if (a2)
  {
    uint64_t v6 = qword_1004682E0 - a3;
    if (qword_1004682E0 < a3) {
      uint64_t v6 = 0;
    }
    qword_1004682E0 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    objc_super v7 = "NULL";
    if (result) {
      unint64_t v8 = result;
    }
    else {
      unint64_t v8 = "NULL";
    }
    if (a4) {
      uint64_t v9 = a4;
    }
    else {
      uint64_t v9 = "NULL";
    }
    if (a6) {
      objc_super v7 = a6;
    }
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1004682E0, 0, qword_1004682E8, qword_1004682F0, v9, a5, v7);
  }
  return result;
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    unint64_t v8 = "ACMLib";
    __int16 v9 = 2080;
    uint64_t v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t v6 = 0;
  uint64_t v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *))sub_1002F1C40, (uint64_t)&v6, a1, &byte_10045BFF1, 1);
  if (v2)
  {
    sub_1002F2778();
    unsigned int v3 = 70;
  }
  else
  {
    unsigned int v3 = 10;
    if (a1 && byte_10045BFF1 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *a1;
        if (*a1) {
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        }
        *(_DWORD *)buf = 136315650;
        unint64_t v8 = "ACMLib";
        __int16 v9 = 2080;
        uint64_t v10 = "ACMContextCreate";
        __int16 v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      unsigned int v3 = 10;
    }
  }
  if (v3 >= byte_10045BFF1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    unint64_t v8 = "ACMLib";
    __int16 v9 = 2080;
    uint64_t v10 = "ACMContextCreate";
    __int16 v11 = 2048;
    uint64_t v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_1002F1C40(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315394;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    unint64_t v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    uint64_t v14 = sub_1002F2210();
    unsigned int v15 = 70;
    if (v14)
    {
      uint64_t v16 = v14;
    }
    else
    {
      uint64_t v16 = sub_1002F23F4(*a1, a2, a3, a4, a5, a6, a7);
      if (v16) {
        unsigned int v15 = 70;
      }
      else {
        unsigned int v15 = 10;
      }
    }
  }
  else
  {
    unsigned int v15 = 70;
    uint64_t v16 = 4294967293;
  }
  if (v15 >= byte_10045BFF1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v18 = 136315650;
    uint64_t v19 = "ACMLib";
    __int16 v20 = 2080;
    unint64_t v21 = "ioKitTransport";
    __int16 v22 = 2048;
    uint64_t v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4 = byte_10045BFF1;
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    unsigned int v4 = byte_10045BFF1;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v5 = a1[4];
    uint64_t v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    uint64_t v12 = "ACMLib";
    uint64_t v14 = "ACMContextDelete";
    __int16 v13 = 2080;
    if (a2) {
      uint64_t v6 = "destroyed";
    }
    __int16 v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(void *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  uint64_t v10 = a1;
  uint64_t v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, void, void *, uint64_t, void, void))sub_1002F1C40, (uint64_t)&v10, a1, a2);
  if (v7) {
    unsigned int v8 = 70;
  }
  else {
    unsigned int v8 = 10;
  }
  if (v8 >= byte_10045BFF1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v12 = "ACMLib";
    __int16 v13 = 2080;
    uint64_t v14 = "ACMContextDelete";
    __int16 v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1
    || !a2
    || sub_1002F2210()
    || sub_1002F23F4((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
  {
    (*(void (**)(uint64_t, void, void))(a2 + 16))(a2, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  }
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v4 = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_1002F2210()
{
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315394;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if (byte_1004682FC)
  {
    uint64_t v0 = 0;
  }
  else
  {
    CFDictionaryRef v1 = IOServiceMatching("AppleCredentialManager");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      unsigned int v4 = 70;
      uint64_t v0 = 4294967291;
      goto LABEL_10;
    }
    io_object_t v3 = MatchingService;
    uint64_t v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1004682F8);
    if (v0)
    {
      unsigned int v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1004682FC = 1;
  }
  unsigned int v4 = 10;
LABEL_10:
  if (v4 >= byte_10045BFF1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    int v6 = 136315650;
    uint64_t v7 = "ACMLib";
    __int16 v8 = 2080;
    __int16 v9 = "init";
    __int16 v10 = 2048;
    uint64_t v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_1002F23F4(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v25 = "ACMLib";
    __int16 v26 = 2080;
    uint64_t v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size_t inputStructCnt = 0;
  uint64_t v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    __int16 v15 = v14;
    if (!a6 && a7)
    {
      uint64_t v18 = 4294967293;
    }
    else
    {
      if (a7) {
        size_t v16 = *a7;
      }
      else {
        size_t v16 = 0;
      }
      size_t v22 = v16;
      uint64_t v17 = IOConnectCallStructMethod(dword_1004682F8, 0, v14, inputStructCnt, a6, &v22);
      uint64_t v18 = v17;
      if (a1) {
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      }
      if (v17)
      {
        if (byte_10045BFF1 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          uint64_t v25 = "ACMLib";
          __int16 v26 = 2080;
          uint64_t v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          __int16 v30 = 1024;
          int v31 = v18;
          __int16 v32 = 1024;
          int v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_10045BFF1 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          uint64_t v25 = "ACMLib";
          __int16 v26 = 2080;
          uint64_t v27 = "performCommand";
          __int16 v28 = 1024;
          *(_DWORD *)uint64_t v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        uint64_t v18 = 0;
        if (a7) {
          *a7 = v22;
        }
      }
    }
    size_t v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if (v18) {
      unsigned int v20 = 70;
    }
    else {
      unsigned int v20 = 10;
    }
  }
  else
  {
    unsigned int v20 = 70;
    uint64_t v18 = 4294967291;
  }
  if (v20 >= byte_10045BFF1 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v25 = "ACMLib";
    __int16 v26 = 2080;
    uint64_t v27 = "performCommand";
    __int16 v28 = 2048;
    *(void *)uint64_t v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

void sub_1002F2778()
{
  if (byte_10045BFF1 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  uint64_t output = 0;
  uint32_t outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_1004682F8, 2u, 0, 0, &output, &outputCnt)) {
    goto LABEL_8;
  }
  unsigned __int8 v0 = output;
  unsigned int v1 = output;
  byte_10045BFF1 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    __int16 v8 = 1024;
    int v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    unsigned int v1 = byte_10045BFF1;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    int v5 = "ACMLib";
    __int16 v6 = 2080;
    uint64_t v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

unsigned char *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, void *a6)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  }
  uint64_t v12 = 0;
  if (a5) {
    BOOL v13 = a4 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)uint64_t v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5) {
          memcpy(v12 + 8, a4, a5);
        }
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  }
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, void, void, void, unsigned char *, uint64_t *), uint64_t a2, void *a3, unsigned char *a4, int a5)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  }
  unsigned int v10 = 70;
  uint64_t v11 = 4294967293;
  if (!a1 || !a3) {
    goto LABEL_25;
  }
  uint64_t v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    unsigned int v10 = 70;
    uint64_t v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    uint64_t v18 = 21;
    uint64_t v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!v13)
    {
      if (v18 != 21)
      {
        uint64_t v11 = 4294967291;
        goto LABEL_23;
      }
      uint64_t v11 = 0;
      goto LABEL_20;
    }
    uint64_t v11 = v13;
    if (v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      unsigned int v10 = 70;
      goto LABEL_25;
    }
  }
  uint64_t v18 = 17;
  unsigned int v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17) {
    unsigned int v15 = 0;
  }
  else {
    unsigned int v15 = -5;
  }
  if (v14) {
    uint64_t v11 = v14;
  }
  else {
    uint64_t v11 = v15;
  }
  if (!v14 && v18 == 17)
  {
LABEL_20:
    int v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4) {
      *a4 = v19[16];
    }
  }
  if (v11) {
    goto LABEL_23;
  }
  unsigned int v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  }
  return v11;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, void, void *, uint64_t, void, void), uint64_t a2, void *a3, int a4)
{
  if (gACMLoggingLevel <= 0xAu) {
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  }
  if (a1 && a3)
  {
    if (a4) {
      a1(a2, 2, 0, a3, 16, 0, 0);
    }
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    uint64_t v8 = 0;
    unsigned int v9 = 10;
    goto LABEL_8;
  }
  unsigned int v9 = 70;
  uint64_t v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel) {
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  }
  return v8;
}

uint64_t DERDecodeItem(uint64_t a1, unint64_t *a2)
{
  return DERDecodeItemPartialBufferGetLength(a1, a2, 0);
}

uint64_t DERDecodeItemPartialBufferGetLength(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *(void *)(result + 8);
  if (v3 < 2) {
    return 3;
  }
  unsigned int v4 = *(unsigned char **)result;
  if (*(void *)result == -1) {
    goto LABEL_68;
  }
  int v5 = &v4[v3];
  __int16 v6 = v4 + 1;
  unint64_t v7 = v3 - 1;
  unint64_t v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    uint64_t v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4) {
        goto LABEL_69;
      }
      unsigned int v14 = v12 + 1;
      unint64_t v15 = *v12;
      unint64_t v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15) {
            unint64_t v17 = *v12;
          }
          else {
            unint64_t v17 = v7 - 1;
          }
          BOOL v10 = v5 >= v14;
          unint64_t v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3) {
              return 0;
            }
LABEL_34:
            uint64_t result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      unint64_t v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8) {
        return 3;
      }
      if ((v15 & 0x7F) == 0 || v16 < v19) {
        return 3;
      }
      if (v14 >= v5 || v14 < v4) {
        goto LABEL_69;
      }
      if (!*v14) {
        return 3;
      }
      unint64_t v15 = 0;
      uint64_t v21 = (v19 - 1);
      unint64_t v22 = v7 - v21 - 2;
      unint64_t v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (unsigned char *)-1)
      {
        if (v14 >= v5) {
          goto LABEL_69;
        }
        BOOL v10 = v16-- != 0;
        if (!v10) {
          goto LABEL_70;
        }
        unsigned int v24 = *v14++;
        unint64_t v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!v19)
        {
          if (a3) {
            BOOL v25 = 0;
          }
          else {
            BOOL v25 = v15 > v22;
          }
          char v26 = v25;
          uint64_t result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0) {
            return result;
          }
          if (v15 >= v22) {
            unint64_t v27 = v22;
          }
          else {
            unint64_t v27 = v15;
          }
          BOOL v10 = (unint64_t)v5 >= v23;
          __int16 v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28) {
            goto LABEL_69;
          }
          a2[1] = v23;
          a2[2] = v27;
          if (a3) {
            goto LABEL_34;
          }
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  unsigned int v9 = *v6;
  BOOL v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10) {
    return 3;
  }
  unint64_t v8 = 0;
  uint64_t result = 3;
  while (v7 >= 2)
  {
    unint64_t v11 = v8;
    if (v8 >> 57) {
      break;
    }
    if (v6 == (unsigned __int8 *)-1) {
      goto LABEL_68;
    }
    if (v6 >= v5 || v6 < v4) {
      goto LABEL_69;
    }
    uint64_t v12 = (char *)(v6 + 1);
    --v7;
    unsigned __int8 v13 = *v6;
    unint64_t v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54) {
        return 3;
      }
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t DERParseBitString(uint64_t result, unint64_t *a2, unsigned char *a3)
{
  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(void *)(result + 8)) {
    return 3;
  }
  unsigned int v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  uint64_t v4 = *(void *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      unint64_t v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      unint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)result + v4;
      unint64_t v8 = (unsigned __int8 *)(*(void *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        unint64_t v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          uint64_t result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3) {
    return 3;
  }
  else {
    return 0;
  }
}

uint64_t DERDecodeSeqNext(unint64_t *a1, unint64_t *a2)
{
  v10[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (*a1 >= v3) {
    return 1;
  }
  v10[0] = *a1;
  v10[1] = v3 - v2;
  uint64_t result = DERDecodeItemPartialBufferGetLength((uint64_t)v10, a2, 0);
  if (!result)
  {
    unint64_t v8 = a2[1];
    unint64_t v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      unint64_t v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        uint64_t result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t DERParseSequenceToObject(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  memset(v12, 170, sizeof(v12));
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v12, 0);
  if (!result)
  {
    if (v12[0] == 0x2000000000000010) {
      return DERParseSequenceContentToObject(&v12[1], a2, a3, a4, a5, a6);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t DERParseSequenceContentToObject(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v32 = 0;
  if (a6)
  {
    if (a6 > a5) {
      goto LABEL_59;
    }
    bzero((void *)a4, a6);
  }
  unint64_t v10 = *a1;
  unint64_t v11 = a1[1];
  if (__CFADD__(*a1, v11)) {
    goto LABEL_58;
  }
  unint64_t v12 = v10 + v11;
  if (v10 > v12) {
LABEL_59:
  }
    __break(0x5519u);
  unint64_t v32 = *a1;
  unint64_t v33 = v12;
  if (a2)
  {
    unsigned __int16 v13 = 0;
    uint64_t v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      unint64_t v15 = v32;
      unint64_t v14 = v33;
      uint64_t result = DERDecodeSeqNext(&v32, v31);
      if (result) {
        break;
      }
      if (a2 <= v13) {
        return 2;
      }
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3) {
          goto LABEL_58;
        }
        unsigned __int16 v17 = v13;
        __int16 v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(void *)(a3 + 24 * v13 + 8)) {
          break;
        }
        uint64_t result = 2;
        if (v18)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1)) {
            continue;
          }
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        unint64_t v19 = *(void *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5) {
          return 7;
        }
        if (v19 > ~a4) {
          goto LABEL_58;
        }
        uint64_t v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4) {
          goto LABEL_59;
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((void *)v21 + 1) <= v14 - v15)
            {
              *(void *)uint64_t v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29) {
            goto LABEL_59;
          }
          uint64_t v23 = *((void *)v21 + 1);
          unint64_t v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15) {
            goto LABEL_59;
          }
          *(void *)uint64_t v21 = v15;
          *((void *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          unint64_t v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            unint64_t v10 = v31[1] + v31[2];
            unint64_t v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        unint64_t v10 = v32;
        unint64_t v12 = v33;
        goto LABEL_47;
      }
    }
    if (result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        BOOL v25 = (__int16 *)(a3 + 24 * v13 + 16);
        unint64_t v26 = a2 - (unint64_t)v13;
        uint64_t result = 0;
        while (1)
        {
          __int16 v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0) {
            break;
          }
          if (!--v26) {
            return result;
          }
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12) {
      return 0;
    }
    else {
      return 3;
    }
  }
  return result;
}

uint64_t DERParseSequence(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4) {
    return DERParseSequenceToObject(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  }
  __break(0x5519u);
  return result;
}

uint64_t DERDecodeSequenceWithBlock(uint64_t a1, uint64_t a2)
{
  memset(v4, 170, sizeof(v4));
  uint64_t result = DERDecodeItemPartialBufferGetLength(a1, v4, 0);
  if (!result)
  {
    if (v4[0] - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL) {
      return DERDecodeSequenceContentWithBlock(&v4[1], a2);
    }
    else {
      return 2;
    }
  }
  return result;
}

uint64_t DERDecodeSequenceContentWithBlock(unint64_t *a1, uint64_t a2)
{
  v9[0] = 0;
  unint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  if (__CFADD__(*a1, v3))
  {
    __break(0x5513u);
LABEL_13:
    __break(0x5519u);
  }
  unint64_t v4 = v2 + v3;
  if (v2 > v4) {
    goto LABEL_13;
  }
  v9[0] = *a1;
  v9[1] = v4;
  memset(v8, 170, sizeof(v8));
  char v7 = 0;
  while (1)
  {
    LODWORD(result) = DERDecodeSeqNext(v9, v8);
    if (result) {
      break;
    }
    LODWORD(result) = (*(uint64_t (**)(uint64_t, unint64_t *, char *))(a2 + 16))(a2, v8, &v7);
    if (result) {
      break;
    }
    if (v7) {
      return 0;
    }
  }
  if (result <= 1) {
    return 0;
  }
  else {
    return result;
  }
}

unint64_t sub_1002F36CC(unint64_t result, unint64_t a2, int a3, uint64_t a4, void *a5)
{
  uint64_t v5 = 0;
  if (!a3)
  {
LABEL_38:
    uint64_t result = 0;
LABEL_40:
    *a5 = v5;
    return result;
  }
  unsigned int v6 = 0;
  unint64_t v7 = result + a2;
  while (24 * (unint64_t)v6 <= ~a4)
  {
    unint64_t v8 = *(void *)(a4 + 24 * v6);
    BOOL v9 = v8 > 0xFFFFFFFFFFFFFFEFLL || v8 + 16 > a2;
    if (v9)
    {
      uint64_t v5 = 0;
      uint64_t result = 7;
      goto LABEL_40;
    }
    if (v8 > ~result) {
      break;
    }
    unint64_t v10 = (unsigned __int8 **)(result + v8);
    __int16 v11 = *(_WORD *)(a4 + 24 * v6 + 16);
    if ((v11 & 0x200) == 0)
    {
      if (v11)
      {
        if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
          goto LABEL_43;
        }
        if (!v10[1]) {
          goto LABEL_37;
        }
      }
      unint64_t v13 = *(void *)(a4 + 24 * v6 + 8) & 0x1FFFFFFFFFFFFFFFLL;
      uint64_t v14 = 1;
      if (v13 >= 0x1F)
      {
        do
        {
          ++v14;
          BOOL v9 = v13 > 0x7F;
          v13 >>= 7;
        }
        while (v9);
      }
      BOOL v15 = __CFADD__(v5, v14);
      uint64_t v16 = v5 + v14;
      if (v15) {
        goto LABEL_42;
      }
      if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
        goto LABEL_43;
      }
      unint64_t v17 = (unint64_t)v10[1];
      if ((*(_WORD *)(a4 + 24 * v6 + 16) & 0x100) != 0)
      {
        if (v17)
        {
          v17 += (unint64_t)**v10 >> 7;
          goto LABEL_24;
        }
LABEL_25:
        uint64_t v18 = 1;
      }
      else
      {
LABEL_24:
        if (v17 < 0x80) {
          goto LABEL_25;
        }
        uint64_t v18 = 1;
        unint64_t v21 = v17;
        do
        {
          ++v18;
          BOOL v9 = v21 > 0xFF;
          v21 >>= 8;
        }
        while (v9);
      }
      BOOL v15 = __CFADD__(v16, v18);
      uint64_t v22 = v16 + v18;
      if (v15) {
        goto LABEL_42;
      }
      BOOL v15 = __CFADD__(v22, v17);
      uint64_t v5 = v22 + v17;
      if (v15) {
        goto LABEL_42;
      }
      goto LABEL_37;
    }
    if ((unint64_t)v10 < result || (unint64_t)(v10 + 2) > v7) {
      goto LABEL_43;
    }
    unsigned int v20 = v10[1];
    BOOL v15 = __CFADD__(v5, v20);
    v5 += (uint64_t)v20;
    if (v15) {
      goto LABEL_42;
    }
LABEL_37:
    if (++v6 == a3) {
      goto LABEL_38;
    }
  }
  __break(0x5513u);
LABEL_42:
  __break(0x5500u);
LABEL_43:
  __break(0x5519u);
  return result;
}

unint64_t DERLengthOfEncodedSequenceFromObject(uint64_t a1, unint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t *a6)
{
  unint64_t v17 = 0;
  unint64_t result = sub_1002F36CC(a2, a3, a4, a5, &v17);
  if (!result)
  {
    unint64_t v9 = a1 & 0x1FFFFFFFFFFFFFFFLL;
    uint64_t v10 = 1;
    if ((a1 & 0x1FFFFFFFFFFFFFFFuLL) >= 0x1F)
    {
      do
      {
        ++v10;
        BOOL v11 = v9 > 0x7F;
        v9 >>= 7;
      }
      while (v11);
    }
    uint64_t v12 = 1;
    if (v17 >= 0x80)
    {
      unint64_t v13 = v17;
      do
      {
        ++v12;
        BOOL v11 = v13 > 0xFF;
        v13 >>= 8;
      }
      while (v11);
    }
    BOOL v14 = __CFADD__(v10, v12);
    uint64_t v15 = v10 + v12;
    if (v14 || (BOOL v14 = __CFADD__(v15, v17), v16 = v15 + v17, v14))
    {
      __break(0x5500u);
    }
    else
    {
      unint64_t result = 0;
      *a6 = v16;
    }
  }
  return result;
}

unint64_t DERLengthOfEncodedSequence(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = 0;
  if ((a2 | 0x7FFFFFFFFFFFFFFFLL) < a2) {
    __break(0x5519u);
  }
  if (DERLengthOfEncodedSequenceFromObject(a1, a2, ~a2 & 0x7FFFFFFFFFFFFFFFLL, a3, a4, &v5)) {
    return 0;
  }
  else {
    return v5;
  }
}

id sub_1002F399C()
{
  self;
  if (qword_100468308 != -1) {
    dispatch_once(&qword_100468308, &stru_100419900);
  }
  unsigned __int8 v0 = (void *)qword_100468300;

  return v0;
}

void sub_1002F39F4(id a1)
{
  unint64_t v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.sesd.kml.ownerSharingSession", v3);
  unint64_t v2 = (void *)qword_100468300;
  qword_100468300 = (uint64_t)v1;
}

uint64_t sub_1002F3A58(uint64_t a1, void *a2, void *a3, void *a4, unsigned int a5, void *a6, void *a7)
{
  id v14 = a2;
  id v68 = a3;
  id v15 = a4;
  id v16 = a6;
  id v17 = a7;
  if (a1)
  {
    v69.receiver = (id)a1;
    v69.super_class = (Class)KmlOwnerSharingSession;
    uint64_t v18 = (id *)[super init];
    a1 = (uint64_t)v18;
    if (v18)
    {
      id v19 = [v18[25] UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 94, (uint64_t)v19, @"let's init", v20, v21, v22, v65);
      objc_storeWeak((id *)(a1 + 216), v15);
      objc_storeStrong((id *)(a1 + 24), a2);
      objc_storeStrong((id *)(a1 + 104), a3);
      objc_storeStrong((id *)(a1 + 176), a6);
      objc_storeStrong((id *)(a1 + 88), a7);
      *(unsigned char *)(a1 + 96) = 0;
      uint64_t v23 = sub_10033F89C([KmlBindingAttestation alloc], *(void **)(a1 + 88));
      unint64_t v24 = [*(id *)(a1 + 104) anonymizedDsid];
      if ([v24 length])
      {
        BOOL v25 = sub_10030ACC4((uint64_t)v23);
        id v26 = [v25 length];

        if (v26)
        {
          __int16 v27 = sub_10030ACC4((uint64_t)v23);
          unsigned int v28 = [v24 isEqualToData:v27];

          if (v28)
          {
            id v29 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 106, (uint64_t)v29, @"Saved Anonymized DSID matches Anonymized DSID in ourBindingAttestation. Authless share possible", v30, v31, v32, v66);
            *(unsigned char *)(a1 + 96) = 1;
          }
        }
      }
      *(int64x2_t *)(a1 + 8) = vdupq_n_s64(1uLL);
      uint64_t v33 = sub_1002FEDB0((uint64_t)v14);
      id v34 = *(void **)(a1 + 200);
      *(void *)(a1 + 200) = v33;

      uint64_t v35 = sub_100313DD4((uint64_t)v14);
      id v36 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v35;

      uint64_t v37 = sub_1002FED98((uint64_t)v14);
      unint64_t v38 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v37;

      *(unsigned char *)(a1 + 97) = 0;
      id v39 = [KmlDeviceConfigurationData alloc];
      uint64_t v40 = [*(id *)(a1 + 104) deviceConfiguration];
      uint64_t v41 = sub_1003163A8((uint64_t)v39, v40);
      uint64_t v42 = *(void **)(a1 + 152);
      *(void *)(a1 + 152) = v41;

      if (*(void *)(a1 + 200))
      {
        os_log_type_t v43 = KmlSignpostLogger();
        *(void *)(a1 + 160) = os_signpost_id_make_with_pointer(v43, *(const void **)(a1 + 200));
      }
      else
      {
        *(void *)(a1 + 160) = 0xEEEEB0B5B2B2EEEELL;
      }
      uint64_t v44 = sub_1002F399C();
      id v45 = *(void **)(a1 + 168);
      *(void *)(a1 + 168) = v44;

      uint64_t v46 = sub_10031DB48();
      unint64_t v47 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = v46;

      if (a5)
      {
        uint64_t v48 = *(void **)(a1 + 200);
        if (v48)
        {
          sub_10031DDEC(*(void *)(a1 + 120), (void *)a1, v48);
          uint64_t v49 = sub_100313DE0((uint64_t)v14);
          id v50 = [*(id *)(a1 + 200) UTF8String];
          if (v49 == 3)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 135, (uint64_t)v50, @"session is worth restoring", v51, v52, v53, v66);
            *(void *)(a1 + 8) = 11;
          }
          else
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 138, (uint64_t)v50, @"session can't continue after re-generation. Moving to cancel state to clean out.", v51, v52, v53, v66);
            +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
            uint64_t v54 = v67 = v16;
            NSErrorUserInfoKey v70 = NSLocalizedDescriptionKey;
            unint64_t v55 = +[NSString stringWithUTF8String:KmlErrorString(122)];
            Class v71 = v55;
            unint64_t v56 = +[NSDictionary dictionaryWithObjects:&v71 forKeys:&v70 count:1];
            uint64_t v57 = +[NSError errorWithDomain:v54 code:122 userInfo:v56];
            uint64_t v58 = *(void **)(a1 + 128);
            *(void *)(a1 + 128) = v57;

            id v16 = v67;
            sub_1002F3F00(a1, 22);
          }
        }
      }
      id v59 = *(id *)(a1 + 200);
      id v60 = [v59 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 145, (uint64_t)v60, @"ready to roll regenerated %d _sharingInvitationId %@", v61, v62, v63, a5);
    }
  }

  return a1;
}

uint64_t sub_1002F3EF4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 200);
  }
  return result;
}

void sub_1002F3F00(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v2 = *(NSObject **)(a1 + 168);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1002F59B0;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

dispatch_queue_t *sub_1002F3FF0(dispatch_queue_t *a1)
{
  dispatch_queue_t v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(a1[21]);
    uint64_t v5 = 0;
    unsigned int v6 = &v5;
    uint64_t v7 = 0x3032000000;
    unint64_t v8 = sub_1002F40EC;
    unint64_t v9 = sub_1002F40FC;
    id v10 = 0;
    unint64_t v2 = v1[21];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002F4104;
    unint64_t v4[3] = &unk_10040D310;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    dispatch_queue_t v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);
  }

  return v1;
}

uint64_t sub_1002F40EC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1002F40FC(uint64_t a1)
{
}

void sub_1002F4104(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8) != 1)
  {
    unint64_t v2 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    unint64_t v3 = +[NSString stringWithUTF8String:KmlErrorString(214)];
    uint64_t v12 = v3;
    unint64_t v4 = +[NSDictionary dictionaryWithObjects:&v12 forKeys:&v11 count:1];
    uint64_t v5 = +[NSError errorWithDomain:v2 code:214 userInfo:v4];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }
  if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    uint64_t v8 = sub_1002F4258(*(void *)(a1 + 32));
    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

uint64_t sub_1002F4258(uint64_t a1)
{
  if (a1)
  {
    unint64_t v2 = sub_1002F7278(a1);
    id v3 = [*(id *)(a1 + 200) UTF8String];
    unint64_t v4 = kmlUtilHexStringFromData(v2);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 608, (uint64_t)v3, @"SupportedRadiosData:%@", v5, v6, v7, (uint64_t)v4);

    uint64_t v8 = objc_alloc_init(KeySharingInvitation);
    uint64_t v9 = sub_100308D0C((uint64_t)v8, *(void **)(a1 + 104), v2, *(void **)(a1 + 24), *(void **)(a1 + 176));
    id v10 = *(void **)(a1 + 208);
    *(void *)(a1 + 208) = v9;

    NSErrorUserInfoKey v11 = +[NSString stringWithFormat:@"Sharing Invitation : %@", *(void *)(a1 + 200)];
    kmlUtilLogLargeData(v11, *(void **)(a1 + 208));

    uint64_t v12 = sub_100014F20((uint64_t)v8);
    sub_100014F20((uint64_t)v12);
    unint64_t v13 = (id *)objc_claimAutoreleasedReturnValue();
    uint64_t v14 = sub_100315FB4(v13);
    id v15 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v14;

    id v16 = sub_100014F20((uint64_t)v8);
    id v17 = sub_100030AD8((uint64_t)v16);
    uint64_t v18 = sub_100316294((uint64_t)v17);
    id v19 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v18;

    sub_1002F73C8(a1);
    uint64_t v20 = kmlUtilSHA1(*(void **)(a1 + 208));
    uint64_t v21 = kmlUtilHexStringFromData(v20);
    uint64_t v22 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = v21;

    uint64_t v23 = KmlSignpostLogger();
    *(void *)(a1 + 160) = os_signpost_id_make_with_pointer(v23, *(const void **)(a1 + 200));
  }
  return 0;
}

void sub_1002F4418(uint64_t a1)
{
  if (a1) {
    sub_1002F3F00(a1, 2);
  }
}

void sub_1002F4428(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 168);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _OWORD v6[2] = sub_1002F44D0;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002F44D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(uint64_t *)(v2 + 8) > 11)
  {
    uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    id v10 = +[NSString stringWithUTF8String:KmlErrorString(101)];
    id v15 = v10;
    NSErrorUserInfoKey v11 = +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1];
    uint64_t v8 = +[NSError errorWithDomain:v9 code:101 userInfo:v11];
  }
  else
  {
    id v3 = [*(id *)(v2 + 200) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 189, (uint64_t)v3, @"Key sharing cancel requested", v4, v5, v6, v13);
    uint64_t v7 = *(void *)(a1 + 32);
    if (!*(void *)(v7 + 128))
    {
      objc_storeStrong((id *)(v7 + 128), *(id *)(a1 + 40));
      uint64_t v7 = *(void *)(a1 + 32);
    }
    sub_1002F3F00(v7, 22);
    uint64_t v8 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 216));
  [WeakRetained handleOwnerKeySharingCancelledWithStatus:v8];
}

void sub_1002F4660(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 168));
    uint64_t v4 = *(NSObject **)(a1 + 168);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1002F4710;
    v5[3] = &unk_10040D1A0;
    v5[4] = a1;
    id v6 = v3;
    dispatch_sync(v4, v5);
  }
}

void sub_1002F4710(uint64_t a1)
{
}

void sub_1002F471C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 168));
    uint64_t v4 = *(NSObject **)(a1 + 168);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_1002F47CC;
    v5[3] = &unk_10040D1A0;
    v5[4] = a1;
    id v6 = v3;
    dispatch_sync(v4, v5);
  }
}

void sub_1002F47CC(uint64_t a1)
{
  sub_1002F480C(*(void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24);

  sub_10033A048(v2, v3);
}

uint64_t sub_1002F480C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_1002FEDB0(*(void *)(result + 24));

    if (!v2) {
      sub_1003399F8(*(void *)(v1 + 24), *(void **)(v1 + 200));
    }
    id v3 = sub_100313DD4(*(void *)(v1 + 24));

    if (!v3) {
      sub_1003399C8(*(void *)(v1 + 24), *(void **)(v1 + 48));
    }
    uint64_t v4 = sub_1002FED98(*(void *)(v1 + 24));

    if (!v4) {
      sub_1003399D8(*(void *)(v1 + 24), *(void **)(v1 + 64));
    }
    unint64_t v5 = *(void *)(v1 + 8);
    if (v5 == 13)
    {
      id v6 = sub_1002FEDA4(*(void *)(v1 + 24));

      if (!v6) {
        sub_1003399E8(*(void *)(v1 + 24), *(void **)(v1 + 144));
      }
      unint64_t v5 = *(void *)(v1 + 8);
    }
    uint64_t v7 = 4;
    if (v5 != 13) {
      uint64_t v7 = 2;
    }
    if (((1 << v5) & 0x1800) != 0) {
      uint64_t v8 = 3;
    }
    else {
      uint64_t v8 = v7;
    }
    if (((1 << v5) & 0x80E00000) != 0) {
      uint64_t v9 = 5;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v5 <= 0x1F) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 2;
    }
    uint64_t v11 = *(void *)(v1 + 24);
    return sub_100339980(v11, v10);
  }
  return result;
}

uint64_t sub_1002F492C(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = sub_10030ACEC(v1[3]);
  objc_sync_exit(v1);

  return v2;
}

void sub_1002F497C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F4990(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = sub_100339174(v1[3]);
  objc_sync_exit(v1);

  return v2;
}

void sub_1002F49E0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F49F4(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 200) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 237, (uint64_t)v2, @"Key sharing cleanup requested", v3, v4, v5, v6);
    sub_1002F3F00(a1, 31);
  }
}

void sub_1002F4BA4(uint64_t a1)
{
}

void sub_1002F4BBC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (a1)
  {
    if (!v15)
    {
      id v30 = [*(id *)(a1 + 200) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 640, (uint64_t)v30, @"Sender unknown", v31, v32, v33, v108);
      goto LABEL_34;
    }
    id v114 = v16;
    BOOL v18 = sub_100339938(*(void *)(a1 + 24));
    uint64_t v19 = *(void *)(a1 + 24);
    if (v18)
    {
      uint64_t v20 = sub_100030AD8(v19);
      unsigned __int8 v21 = [v20 isEqualToString:v15];

      if ((v21 & 1) == 0)
      {
        id v41 = [*(id *)(a1 + 200) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 647, (uint64_t)v41, @"Message from unexpected IDS sender: %@", v42, v43, v44, (uint64_t)v15);
        goto LABEL_17;
      }
      uint64_t v22 = sub_100014F20(*(void *)(a1 + 24));
      unsigned __int8 v23 = [v22 isEqual:v14];

      if ((v23 & 1) == 0)
      {
        id v24 = *(id *)(a1 + 200);
        id v25 = [v24 UTF8String];
        id v26 = sub_100014F20(*(void *)(a1 + 24));

        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 653, (uint64_t)v25, @"Message not for sharing manager uuid: %@", v27, v28, v29, (uint64_t)v26);
LABEL_17:
        sub_10031E02C(*(void *)(a1 + 120), v15);
LABEL_33:
        id v16 = v114;
        goto LABEL_34;
      }
    }
    else
    {
      id v34 = sub_100313DBC(v19);
      unsigned __int8 v35 = [v34 isEqualToString:v15];

      if ((v35 & 1) == 0)
      {
        id v45 = [*(id *)(a1 + 200) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 660, (uint64_t)v45, @"Message from unexpected XP sender: %@", v46, v47, v48, (uint64_t)v15);
        goto LABEL_33;
      }
    }
    id v36 = +[NSString stringWithFormat:@"Message for - %@", *(void *)(a1 + 200)];
    kmlUtilLogLargeData(v36, v13);

    id v16 = v114;
    switch(a4)
    {
      case 7:
        goto LABEL_44;
      case 5:
        id v73 = [*(id *)(a1 + 200) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 720, (uint64_t)v73, @"Friend requested cancelling this invite.", v74, v75, v76, v109);
        id v77 = sub_100321FE8([KmlCancelMessage alloc], v13);
        os_log_type_t v78 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        if (v77)
        {
          uint64_t v79 = sub_100322414((uint64_t)v77);
          NSErrorUserInfoKey v117 = NSLocalizedDescriptionKey;
          int v80 = sub_100322414((uint64_t)v77);
          unint64_t v81 = +[NSString stringWithUTF8String:KmlErrorString(v80)];
          unint64_t v118 = v81;
          uint64_t v82 = +[NSDictionary dictionaryWithObjects:&v118 forKeys:&v117 count:1];
          uint64_t v83 = v78;
          uint64_t v84 = v79;
        }
        else
        {
          NSErrorUserInfoKey v115 = NSLocalizedDescriptionKey;
          unint64_t v81 = +[NSString stringWithUTF8String:KmlErrorString(102)];
          uint64_t v116 = v81;
          uint64_t v82 = +[NSDictionary dictionaryWithObjects:&v116 forKeys:&v115 count:1];
          uint64_t v83 = v78;
          uint64_t v84 = 102;
        }
        uint64_t v89 = +[NSError errorWithDomain:v83 code:v84 userInfo:v82];
        uint64_t v90 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = v89;

        sub_1002F3F00(a1, 23);
        goto LABEL_33;
      case 2:
LABEL_44:
        if (*(void *)(a1 + 32) && *(void *)(a1 + 136))
        {
          id v37 = [*(id *)(a1 + 200) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 670, (uint64_t)v37, @"We are processing a signingRequest. Ignoring another one.", v38, v39, v40, v109);
          if (sub_100339938(*(void *)(a1 + 24))) {
            sub_10031E02C(*(void *)(a1 + 120), v15);
          }
          break;
        }
        uint64_t v49 = objc_alloc_init(KeySigningRequest);
        sub_100309D6C((uint64_t)v49, *(void **)(a1 + 176));
        if (sub_1003098BC((uint64_t)v49, v13))
        {
          uint64_t v113 = v49;
          uint64_t v50 = sub_1003128D4(*(void *)(a1 + 24));
          if (!v50) {
            goto LABEL_26;
          }
          uint64_t v51 = (void *)v50;
          uint64_t v52 = sub_1003128E0(*(void *)(a1 + 24));

          if (!v52) {
            goto LABEL_26;
          }
          uint64_t v53 = *(void *)(a1 + 24);
          uint64_t v54 = sub_1003128E0(v53);
          sub_100339A44(v53, v54 - 1);
          unint64_t v55 = sub_100056FE4((uint64_t)v113);

          if (!v55) {
            goto LABEL_35;
          }
          id v110 = objc_alloc((Class)NSString);
          sub_100056FE4((uint64_t)v113);
          id v111 = (id *)objc_claimAutoreleasedReturnValue();
          unint64_t v56 = sub_100315FB4(v111);
          id v57 = [v110 initWithData:v56 encoding:4];

          id v112 = v57;
          if (v57)
          {
            uint64_t v58 = sub_1003128D4(*(void *)(a1 + 24));
            unsigned __int8 v59 = [v58 isEqualToString:v57];

            if (v59)
            {
              id v60 = [*(id *)(a1 + 200) UTF8String];
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 696, (uint64_t)v60, @"Passcode verified. Ok to continue", v61, v62, v63, v109);

LABEL_26:
              uint64_t v64 = *(void **)(a1 + 32);
              *(void *)(a1 + 32) = v113;
              uint64_t v65 = v113;

              objc_storeStrong((id *)(a1 + 144), a6);
              uint64_t v66 = kmlUtilDataForHexString(*(void **)(a1 + 144));
              id v67 = *(void **)(a1 + 136);
              *(void *)(a1 + 136) = v66;

              objc_storeStrong((id *)(a1 + 80), a7);
              id v68 = *(id *)(a1 + 200);
              id v69 = [v68 UTF8String];
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 715, (uint64_t)v69, @"Received signing request, keyId: %@, bindingAttestation - %@", v70, v71, v72, *(void *)(a1 + 144));

              sub_1002F7914(a1);
              id v16 = v114;
              break;
            }
            id v91 = v112;
          }
          else
          {
LABEL_35:
            id v91 = 0;
          }
          id v92 = [*(id *)(a1 + 200) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 698, (uint64_t)v92, @"Passcode verification failed", v93, v94, v95, v109);
          if (sub_1003128E0(*(void *)(a1 + 24)))
          {
            id v96 = *(id *)(a1 + 200);
            id v97 = [v96 UTF8String];
            uint64_t v98 = sub_1003128E0(*(void *)(a1 + 24));

            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 700, (uint64_t)v97, @"Number of attempts left : %d", v99, v100, v101, v98);
            sub_1002F6F84(a1);
            id WeakRetained = objc_loadWeakRetained((id *)(a1 + 216));
            [WeakRetained handlePasscodeRetryRequestedForInvitation:*(void *)(a1 + 200)];
          }
          else
          {
            uint64_t v103 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
            NSErrorUserInfoKey v119 = NSLocalizedDescriptionKey;
            Swift::String v104 = +[NSString stringWithUTF8String:KmlErrorString(118)];
            unint64_t v120 = v104;
            uint64_t v105 = +[NSDictionary dictionaryWithObjects:&v120 forKeys:&v119 count:1];
            uint64_t v106 = +[NSError errorWithDomain:v103 code:118 userInfo:v105];
            uint64_t v107 = *(void **)(a1 + 128);
            *(void *)(a1 + 128) = v106;

            sub_1002F3F00(a1, 22);
          }

          uint64_t v49 = v113;
          id v16 = v114;
        }
        else
        {
          id v85 = [*(id *)(a1 + 200) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 680, (uint64_t)v85, @"Still waiting for signing request", v86, v87, v88, v109);
          if (sub_100339938(*(void *)(a1 + 24))) {
            sub_10031E02C(*(void *)(a1 + 120), v15);
          }
        }

        break;
    }
  }
LABEL_34:
}

void sub_1002F545C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) == 2)
  {
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(id *)(v9 + 200);
    if (v11)
    {
      id v13 = v12;
      id v14 = [v13 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 265, (uint64_t)v14, @"Error setting up transport %@", v15, v16, v17, *(void *)(a1 + 40));

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 128), *(id *)(a1 + 40));
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = 21;
    }
    else
    {
      id v24 = [v12 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 269, (uint64_t)v24, @"Transport set up", v25, v26, v27, v28);
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v19 = 3;
    }
    sub_1002F3F00(v18, v19);
  }
  else
  {
    id v20 = [*(id *)(v9 + 200) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 260, (uint64_t)v20, @"We are not waiting on Transport setup result", v21, v22, v23, a9);
  }
}

void sub_1002F5610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 8);
  if (v11 == 12)
  {
    uint64_t v21 = *(void *)(a1 + 40);
    id v22 = *(id *)(v10 + 200);
    if (v21)
    {
      id v23 = v22;
      id v24 = [v23 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 289, (uint64_t)v24, @"Error sending message %@", v25, v26, v27, *(void *)(a1 + 40));

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 128), *(id *)(a1 + 40));
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = 23;
    }
    else
    {
      id v36 = [v22 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 293, (uint64_t)v36, @"Signed request sent successfully", v37, v38, v39, v40);
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = 13;
    }
LABEL_12:
    sub_1002F3F00(v19, v20);
    return;
  }
  if (v11 == 3)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = *(id *)(v10 + 200);
    if (v12)
    {
      id v14 = v13;
      id v15 = [v14 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 280, (uint64_t)v15, @"Error sending sharing invitation %@", v16, v17, v18, *(void *)(a1 + 40));

      objc_storeStrong((id *)(*(void *)(a1 + 32) + 128), *(id *)(a1 + 40));
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = 21;
    }
    else
    {
      id v32 = [v13 UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 284, (uint64_t)v32, @"Sent invitation successfully", v33, v34, v35, v40);
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = 11;
    }
    goto LABEL_12;
  }
  id v28 = [*(id *)(v10 + 200) UTF8String];

  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 297, (uint64_t)v28, @"We didn't send anything, ignore", v29, v30, v31, a9);
}

void sub_1002F5888(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = [*(id *)(a1 + 40) genericData];
  id v2 = [v13 message];
  uint64_t v3 = [*(id *)(a1 + 40) additionalData];
  uint64_t v4 = [v3 sharingSessionUUID];
  uint64_t v5 = [*(id *)(a1 + 40) genericData];
  id v6 = [v5 messageType];
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v8 = [*(id *)(a1 + 40) genericData];
  uint64_t v9 = [v8 friendKeyIdentifier];
  uint64_t v10 = [*(id *)(a1 + 40) additionalData];
  uint64_t v11 = [v10 bindingAttestation];
  sub_1002F4BBC(v12, v2, v4, (uint64_t)v6, v7, v9, v11);
}

void sub_1002F59B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002F59BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    uint64_t v11 = *(void *)(a1 + 8);
    id v12 = *(id *)(a1 + 200);
    if (v11 >= a2)
    {
      id v24 = [v12 UTF8String];
      id v28 = @"Current state higher than new state. Do nothing";
      uint64_t v29 = 329;
LABEL_7:
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", v29, (uint64_t)v24, v28, v25, v26, v27, a9);
    }
    else
    {
      id v13 = v12;
      id v14 = [v13 UTF8String];
      uint64_t v15 = *(void *)(a1 + 8);

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 333, (uint64_t)v14, @"Current state %ld, new state %ld", v16, v17, v18, v15);
      uint64_t v19 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = a2;
      *(void *)(a1 + 16) = v19;
      if (a2 > 10)
      {
        switch(a2)
        {
          case 11:
            id v20 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 379, (uint64_t)v20, @"Wait for signing request", v21, v22, v23, v134);
            sub_100339980(*(void *)(a1 + 24), 3);
            id WeakRetained = objc_loadWeakRetained((id *)(a1 + 216));
            [WeakRetained handleSentInvitationWithIdentifier:*(void *)(a1 + 200)];
            goto LABEL_24;
          case 12:
            id v44 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 385, (uint64_t)v44, @"Friend request signed. Sending now", v45, v46, v47, v134);
            uint64_t v48 = KmlSignpostLogger();
            uint64_t v49 = v48;
            os_signpost_id_t v50 = *(void *)(a1 + 160);
            if (v50 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v49, OS_SIGNPOST_EVENT, v50, "OwnerSendSignedRequest", "", buf, 2u);
            }

            uint64_t v135 = *(void *)(a1 + 200);
            uint64_t v51 = +[NSString stringWithFormat:@"SignedResponse - %@"];
            kmlUtilLogLargeData(v51, *(void **)(a1 + 40));

            if (sub_100339938(*(void *)(a1 + 24)))
            {
              uint64_t v52 = *(void *)(a1 + 120);
              uint64_t v53 = *(void **)(a1 + 40);
              uint64_t v54 = *(void **)(a1 + 200);
              unint64_t v55 = *(void **)(a1 + 144);
              unint64_t v56 = sub_100014F20(*(void *)(a1 + 24));
              id v57 = sub_100030AD8(*(void *)(a1 + 24));
              uint64_t v58 = sub_10030ACEC(*(void *)(a1 + 24));
              sub_10031E4A0(v52, v53, 0, 0, v54, v55, v56, v57, v58, 3);
            }
            else
            {
              id v93 = [objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData) initWithSharingIdentifier:*(void *)(a1 + 200) friendKeyIdentifier:0 sharingMessageType:3 message:*(void *)(a1 + 40)];
              id v106 = objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData);
              uint64_t v107 = sub_100014F20(*(void *)(a1 + 24));
              uint64_t v108 = sub_10030ACEC(*(void *)(a1 + 24));
              if (*(void *)(a1 + 80))
              {
                uint64_t v109 = sub_10031E324(*(dispatch_queue_t **)(a1 + 120));
                id v110 = [v106 initWithSharingSessionUUID:v107 bindingAttestation:0 targetDeviceType:v108 initiatorIdsPseudonym:v109];
              }
              else
              {
                id v110 = [v106 initWithSharingSessionUUID:v107 bindingAttestation:0 targetDeviceType:v108 initiatorIdsPseudonym:0];
              }

              id v124 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:v93 additionalData:v110 privateData:0];
              uint64_t v125 = +[KmlClientReporterFactory getReporter];
              unint64_t v126 = sub_100313DBC(*(void *)(a1 + 24));
              [v125 sendCrossPlatformSharingMessage:v124 toMailboxIdentifier:v126];

              id v127 = objc_loadWeakRetained((id *)(a1 + 184));
              if (v127)
              {
                id v128 = [objc_alloc((Class)DAShareInitiatorResult) initInviteAcceptedResultWithResponse:v124];
                id v129 = objc_loadWeakRetained((id *)(a1 + 184));
                [v129 handleInitiatorMessageResult:v128];
              }
              id v130 = [*(id *)(a1 + 200) UTF8String];
              KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 428, (uint64_t)v130, @"We don't get send results for cross-platform. Sharing is successful from our perspective.", v131, v132, v133, v135);
              sub_1002F3F00(a1, 13);

LABEL_55:
            }
            return;
          case 13:
            id v59 = *(id *)(a1 + 200);
            id v60 = [v59 UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 435, (uint64_t)v60, @"Successfully shared key with friend. FriendKeyID:%@", v61, v62, v63, *(void *)(a1 + 144));

            id WeakRetained = +[KmlClientReporterFactory getReporter];
            [WeakRetained sharingCompleteForInvitationIdentifier:*(void *)(a1 + 200) friendKeyIdentifier:*(void *)(a1 + 144) status:0];
            uint64_t v64 = *(void *)(a1 + 120);
            uint64_t v65 = sub_100030AD8(*(void *)(a1 + 24));
            BOOL v66 = sub_10031E1CC(v64, v65);

            sub_10031DF6C(*(void *)(a1 + 120), *(void **)(a1 + 200));
            id v67 = objc_loadWeakRetained((id *)(a1 + 216));
            [v67 handleSharingCompleteForInvitationIdentifier:*(void *)(a1 + 200) localShare:v66 bindingAttestationUsed:*(void *)(a1 + 80) != 0 status:*(void *)(a1 + 128)];

            sub_1002F6568(a1);
LABEL_24:

            return;
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
            return;
          case 21:
            id v68 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 455, (uint64_t)v68, @"Failed to send invitation.", v69, v70, v71, v134);
            uint64_t v72 = KmlSignpostLogger();
            id v73 = v72;
            os_signpost_id_t v74 = *(void *)(a1 + 160);
            if (v74 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v72))
            {
              uint64_t v75 = *(void *)(a1 + 128);
              *(_DWORD *)buf = 138412290;
              uint64_t v139 = v75;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v73, OS_SIGNPOST_EVENT, v74, "OwnerFailedToSendInvitation", "error - %@", buf, 0xCu);
            }

            uint64_t v76 = a1;
            uint64_t v77 = 23;
            goto LABEL_47;
          case 22:
            id v78 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 461, (uint64_t)v78, @"Preparing to cancel sharing.", v79, v80, v81, v134);
            uint64_t v82 = KmlSignpostLogger();
            uint64_t v83 = v82;
            os_signpost_id_t v84 = *(void *)(a1 + 160);
            if (v84 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v82))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v83, OS_SIGNPOST_EVENT, v84, "OwnerSessionCancelled", "", buf, 2u);
            }

            sub_1002F6B6C(a1);
            return;
          case 23:
            id v85 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 467, (uint64_t)v85, @"Error while sharing key.", v86, v87, v88, v134);
            uint64_t v89 = KmlSignpostLogger();
            uint64_t v90 = v89;
            os_signpost_id_t v91 = *(void *)(a1 + 160);
            if (v91 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v89))
            {
              uint64_t v92 = *(void *)(a1 + 128);
              *(_DWORD *)buf = 138412290;
              uint64_t v139 = v92;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v90, OS_SIGNPOST_EVENT, v91, "OwnerSharingError", "error - %@", buf, 0xCu);
            }

            id v93 = +[KmlClientReporterFactory getReporter];
            [v93 sharingCompleteForInvitationIdentifier:*(void *)(a1 + 200) friendKeyIdentifier:0 status:*(void *)(a1 + 128)];
            uint64_t v94 = *(void *)(a1 + 120);
            uint64_t v95 = sub_100030AD8(*(void *)(a1 + 24));
            BOOL v96 = sub_10031E1CC(v94, v95);

            sub_10031DF6C(*(void *)(a1 + 120), *(void **)(a1 + 200));
            id v97 = objc_loadWeakRetained((id *)(a1 + 216));
            [v97 handleSharingCompleteForInvitationIdentifier:*(void *)(a1 + 200) localShare:v96 bindingAttestationUsed:*(void *)(a1 + 80) != 0 status:*(void *)(a1 + 128)];

            goto LABEL_55;
          default:
            if (a2 != 31) {
              return;
            }
            id v24 = [*(id *)(a1 + 200) UTF8String];
            id v28 = @"Object can be safely removed.";
            uint64_t v29 = 488;
            goto LABEL_7;
        }
      }
      if (a2 == 2)
      {
        uint64_t v98 = *(void **)(a1 + 200);
        if (v98)
        {
          sub_10031DDEC(*(void *)(a1 + 120), (void *)a1, v98);
          BOOL v99 = sub_100339938(*(void *)(a1 + 24));
          id v100 = [*(id *)(a1 + 200) UTF8String];
          if (v99)
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 354, (uint64_t)v100, @"Checking transport for IDS", v101, v102, v103, v134);
            uint64_t v104 = *(void *)(a1 + 120);
            uint64_t v105 = *(void **)(a1 + 200);
            sub_10031E0E0(v104, v105);
          }
          else
          {
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 357, (uint64_t)v100, @"No need to check transport for Cross-platform sharing", v101, v102, v103, v134);
            id v120 = [*(id *)(a1 + 200) UTF8String];
            KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 358, (uint64_t)v120, @"Also we don't get notified when invitations are sent", v121, v122, v123, v136);
            sub_1002F3F00(a1, 11);
          }
        }
        else
        {
          id v111 = [0 UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 348, (uint64_t)v111, @"Never built an invitation. Error out", v112, v113, v114, v134);
          NSErrorUserInfoKey v115 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          NSErrorUserInfoKey v140 = NSLocalizedDescriptionKey;
          uint64_t v116 = +[NSString stringWithUTF8String:KmlErrorString(109)];
          uint64_t v141 = v116;
          NSErrorUserInfoKey v117 = +[NSDictionary dictionaryWithObjects:&v141 forKeys:&v140 count:1];
          uint64_t v118 = +[NSError errorWithDomain:v115 code:109 userInfo:v117];
          NSErrorUserInfoKey v119 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = v118;

          uint64_t v76 = a1;
          uint64_t v77 = 21;
LABEL_47:
          sub_1002F3F00(v76, v77);
        }
      }
      else if (a2 == 3)
      {
        id v30 = [*(id *)(a1 + 200) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 365, (uint64_t)v30, @"Send sharing invitation", v31, v32, v33, v134);
        uint64_t v34 = KmlSignpostLogger();
        uint64_t v35 = v34;
        os_signpost_id_t v36 = *(void *)(a1 + 160);
        if (v36 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v34))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, v36, "OwnerSendInvitation", "", buf, 2u);
        }

        uint64_t v37 = *(void *)(a1 + 120);
        uint64_t v38 = *(void **)(a1 + 208);
        uint64_t v39 = sub_10030ACD0(*(void *)(a1 + 24));
        uint64_t v40 = *(void **)(a1 + 200);
        id v41 = sub_100014F20(*(void *)(a1 + 24));
        uint64_t v42 = sub_100030AD8(*(void *)(a1 + 24));
        uint64_t v43 = sub_10030ACEC(*(void *)(a1 + 24));
        sub_10031E4A0(v37, v38, v39, 0, v40, 0, v41, v42, v43, 1);
      }
    }
  }
}

void sub_1002F6568(uint64_t a1)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 216));
    id v54 = [WeakRetained getTotalNumberOfSharedKeys];

    uint64_t v58 = [*(id *)(a1 + 104) readerInfo];
    id v3 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v58];
    BOOL v4 = sub_1003184DC(*(void *)(a1 + 152));
    BOOL v5 = sub_1003184F0(*(void *)(a1 + 152));
    uint64_t v6 = 2;
    if (!v5) {
      uint64_t v6 = 0;
    }
    uint64_t v46 = v6 | v4;
    uint64_t v7 = sub_1003128D4(*(void *)(a1 + 24));
    BOOL v8 = v7 != 0;

    unsigned int v49 = sub_100339180(*(void *)(a1 + 24)) | (2 * v8);
    uint64_t v9 = *(void *)(a1 + 120);
    uint64_t v10 = sub_100030AD8(*(void *)(a1 + 24));
    LODWORD(v9) = sub_10031E1CC(v9, v10);

    if (v9) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = 2;
    }
    if (v3)
    {
      uint64_t v16 = [v3 manufacturer];
      CFStringRef v17 = (const __CFString *)[v16 copy];

      uint64_t v18 = [v3 brand];
      CFStringRef v19 = (const __CFString *)[v18 copy];

      id v20 = [v3 regionString];
      CFStringRef v21 = (const __CFString *)[v20 copy];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerSharingSession reportSharingEventToCA]", 1065, @"No routing info available", v11, v12, v13, v14, v41);
      CFStringRef v17 = @"Unknown";
      CFStringRef v19 = @"Unknown";
      CFStringRef v21 = @"Unknown";
    }
    id v57 = v3;
    uint64_t v22 = *(void **)(a1 + 128);
    if (v22)
    {
      uint64_t v23 = *(void *)(a1 + 16);
      id v24 = [v22 code];
    }
    else
    {
      id v24 = 0;
      uint64_t v23 = *(void *)(a1 + 8);
    }
    int v25 = [*(id *)(a1 + 176) agreedKmlVehicleVersion] == 768;
    uint64_t v26 = [*(id *)(a1 + 104) configuration];
    unsigned int v48 = kmlUtilKeyClassOriginBitmap([v26 opt2]);

    uint64_t v27 = sub_100301934(*(void *)(a1 + 176));
    v59[0] = @"destination";
    unint64_t v56 = +[NSNumber numberWithUnsignedInt:v15];
    v60[0] = v56;
    v60[1] = &off_10042DF18;
    v59[1] = @"type";
    v59[2] = @"targetDeviceType";
    uint64_t v52 = +[NSNumber numberWithInteger:sub_10030ACEC(*(void *)(a1 + 24))];
    _OWORD v60[2] = v52;
    v59[3] = @"step";
    uint64_t v51 = +[NSNumber numberWithInteger:v23];
    v60[3] = v51;
    v60[4] = v21;
    uint64_t v53 = (__CFString *)v21;
    void v59[4] = @"dataCenterCode";
    v59[5] = @"manufacturer";
    v60[5] = v17;
    v60[6] = v19;
    v59[6] = @"brand";
    v59[7] = @"transportSupported";
    uint64_t v47 = +[NSNumber numberWithUnsignedInteger:v46];
    v60[7] = v47;
    v59[8] = @"totalSharedKeysForOwnerKey";
    unint64_t v55 = +[NSNumber numberWithInteger:v54];
    v60[8] = v55;
    v59[9] = @"status";
    uint64_t v45 = +[NSNumber numberWithUnsignedInt:v24];
    v60[9] = v45;
    v59[10] = @"activationOption";
    id v44 = +[NSNumber numberWithUnsignedInt:v49];
    v60[10] = v44;
    v59[11] = @"sharingTransport";
    if (sub_100339938(*(void *)(a1 + 24))) {
      uint64_t v28 = 1;
    }
    else {
      uint64_t v28 = 2;
    }
    uint64_t v29 = +[NSNumber numberWithUnsignedInt:v28];
    v60[11] = v29;
    v59[12] = @"pinAttempts";
    uint64_t v30 = sub_1003128EC(*(void *)(a1 + 24));
    +[NSNumber numberWithUnsignedInteger:v30 - sub_1003128E0(*(void *)(a1 + 24))];
    uint64_t v31 = v50 = (__CFString *)v17;
    v60[12] = v31;
    v59[13] = @"appleToApple";
    uint64_t v32 = +[NSNumber numberWithInt:*(void *)(a1 + 80) != 0];
    uint64_t v42 = (void *)v27;
    uint64_t v43 = (__CFString *)v19;
    uint64_t v33 = (void *)v32;
    CFStringRef v34 = &stru_100421848;
    if (v27) {
      CFStringRef v34 = (const __CFString *)v27;
    }
    v60[13] = v32;
    v60[14] = v34;
    v59[14] = @"senderSupportedFrameworkVersions";
    v59[15] = @"receiverSupportedFrameworkVersions";
    uint64_t v35 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%04X", [*(id *)(a1 + 176) agreedKmlSharingVersion]);
    v60[15] = v35;
    v59[16] = @"attestationChainLength";
    os_signpost_id_t v36 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 97)];
    v60[16] = v36;
    v60[17] = &off_10042DF30;
    v59[17] = @"certificateChainLength";
    v59[18] = @"accountRole";
    v60[18] = &off_10042DF30;
    v60[19] = &off_10042DF30;
    v59[19] = @"isIntraAccountShare";
    v59[20] = @"wasUserAuthRequired";
    v60[20] = &off_10042DF30;
    v59[21] = @"mailboxVersion";
    uint64_t v37 = +[NSNumber numberWithUnsignedChar:(v25 << 7)];
    v60[21] = v37;
    v59[22] = @"frameworkVersion";
    uint64_t v38 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 176) agreedKmlSharingVersion]);
    v60[22] = v38;
    v60[23] = &off_10042DF30;
    v59[23] = @"accessProfile";
    v59[24] = @"keyClassOriginBitmap";
    uint64_t v39 = +[NSNumber numberWithUnsignedChar:v48];
    v60[24] = v39;
    uint64_t v40 = +[NSDictionary dictionaryWithObjects:v60 forKeys:v59 count:25];

    sub_1002F928C((uint64_t)KmlAnalyticsLogger, v40);
  }
}

void sub_1002F6B6C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002F6BE8;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002F6BE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 200);
  }
  else {
    id v3 = 0;
  }
  id v4 = [v3 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 499, (uint64_t)v4, @"Cancelling sharing as per user request.", v5, v6, v7, v33);
  if (!*(void *)(*(void *)(a1 + 32) + 128))
  {
    BOOL v8 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    uint64_t v9 = +[NSString stringWithUTF8String:KmlErrorString(105)];
    uint64_t v35 = v9;
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v35 forKeys:&v34 count:1];
    uint64_t v11 = +[NSError errorWithDomain:v8 code:105 userInfo:v10];
    uint64_t v12 = *(void *)(a1 + 32);
    uint64_t v13 = *(void **)(v12 + 128);
    *(void *)(v12 + 128) = v11;
  }
  id v14 = sub_1003222E0([KmlCancelMessage alloc], (int)[*(id *)(*(void *)(a1 + 32) + 128) code]);
  uint64_t v15 = sub_10032236C((uint64_t)v14);

  if (sub_100339938(*(void *)(*(void *)(a1 + 32) + 24)))
  {
    uint64_t v16 = *(uint64_t **)(a1 + 32);
    uint64_t v17 = v16[15];
    uint64_t v18 = (void *)v16[25];
    CFStringRef v19 = (void *)v16[18];
    sub_100014F20(v16[3]);
    id v20 = (id)objc_claimAutoreleasedReturnValue();
    sub_100030AD8(*(void *)(*(void *)(a1 + 32) + 24));
    id v21 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v22 = sub_10030ACEC(*(void *)(*(void *)(a1 + 32) + 24));
    sub_10031E4A0(v17, v15, 0, 0, v18, v19, v20, v21, v22, 4);
  }
  else
  {
    id v20 = [objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData) initWithSharingIdentifier:*(void *)(*(void *)(a1 + 32) + 200) friendKeyIdentifier:0 sharingMessageType:4 message:v15];
    id v23 = objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData);
    id v24 = sub_100014F20(*(void *)(*(void *)(a1 + 32) + 24));
    id v21 = [v23 initWithSharingSessionUUID:v24 bindingAttestation:0 targetDeviceType:sub_10030ACEC(*(void *)(*(void *)(a1 + 32) + 24)) initiatorIdsPseudonym:0];

    id v25 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:v20 additionalData:v21 privateData:0];
    uint64_t v26 = +[KmlClientReporterFactory getReporter];
    uint64_t v27 = sub_100313DBC(*(void *)(*(void *)(a1 + 32) + 24));
    [v26 sendCrossPlatformSharingMessage:v25 toMailboxIdentifier:v27];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 184));
    if (WeakRetained)
    {
      id v29 = [objc_alloc((Class)DAShareInitiatorResult) initFailureResultWithResponse:v25 error:*(void *)(*(void *)(a1 + 32) + 128)];
      id v30 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 184));
      [v30 handleInitiatorMessageResult:v29];
    }
    id v31 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));

    if (v31)
    {
      id v32 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
      [v32 handleSharingCancelledMessage:v25];
    }
  }

  sub_1002F3F00(*(void *)(a1 + 32), 23);
}

void sub_1002F6F84(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 168);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002F7000;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002F7000(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 200);
  }
  else {
    id v3 = 0;
  }
  id v4 = [v3 UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 558, (uint64_t)v4, @"Passcode needs to be retried", v5, v6, v7, v25);
  char v8 = sub_1003128E0(*(void *)(*(void *)(a1 + 32) + 24));
  uint64_t v9 = sub_100315D88((uint64_t)KmlTlv, 40727, v8);
  sub_100316294((uint64_t)v9);
  id v26 = (id)objc_claimAutoreleasedReturnValue();

  if (sub_100339938(*(void *)(*(void *)(a1 + 32) + 24)))
  {
    uint64_t v10 = *(uint64_t **)(a1 + 32);
    uint64_t v11 = v10[15];
    uint64_t v12 = (void *)v10[25];
    uint64_t v13 = (void *)v10[18];
    sub_100014F20(v10[3]);
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    sub_100030AD8(*(void *)(*(void *)(a1 + 32) + 24));
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v16 = sub_10030ACEC(*(void *)(*(void *)(a1 + 32) + 24));
    sub_10031E4A0(v11, v26, 0, 0, v12, v13, v14, v15, v16, 6);
  }
  else
  {
    id v14 = [objc_alloc((Class)DACarKeyGenericCrossPlatformSharingData) initWithSharingIdentifier:*(void *)(*(void *)(a1 + 32) + 200) friendKeyIdentifier:0 sharingMessageType:6 message:v26];
    id v17 = objc_alloc((Class)DACarKeyAdditionalCrossPlatformSharingData);
    uint64_t v18 = sub_100014F20(*(void *)(*(void *)(a1 + 32) + 24));
    id v15 = [v17 initWithSharingSessionUUID:v18 bindingAttestation:0 targetDeviceType:sub_10030ACEC(*(void *)(*(void *)(a1 + 32) + 24)) initiatorIdsPseudonym:0];

    id v19 = [objc_alloc((Class)DACarKeySharingMessage) initWithGenericCrossPlatformSharingData:v14 additionalData:v15 privateData:0];
    id v20 = +[KmlClientReporterFactory getReporter];
    id v21 = sub_100313DBC(*(void *)(*(void *)(a1 + 32) + 24));
    [v20 sendCrossPlatformSharingMessage:v19 toMailboxIdentifier:v21];

    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 184));
    if (WeakRetained)
    {
      id v23 = [objc_alloc((Class)DAShareInitiatorResult) initDataRequiredResultWithResponse:v19];
      id v24 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 184));
      [v24 handleInitiatorMessageResult:v23];
    }
  }
}

id sub_1002F7278(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = [KmlDeviceConfigurationData alloc];
    id v3 = [*(id *)(v1 + 104) deviceConfiguration];
    id v4 = (unsigned char *)sub_1003163A8((uint64_t)v2, v3);

    uint64_t v5 = [*(id *)(v1 + 104) bleIntroKey];
    sub_100309D6C((uint64_t)v4, v5);

    uint64_t v6 = sub_100313DBC((uint64_t)v4);

    if (!v6)
    {
      uint64_t v7 = [*(id *)(v1 + 104) bleAddress];
      sub_10004ED08((uint64_t)v4, v7);
    }
    char v8 = sub_100313DEC(*(void *)(v1 + 24));
    uint64_t v9 = kmlUtilGetDckIdFromSlotId(v8);

    uint64_t v10 = [*(id *)(v1 + 104) bleOOBMasterKey];
    uint64_t v11 = kmlUtilGetOOBKey(v10, v9);
    sub_100307F94((uint64_t)v4, v11);

    if (*(void *)(v1 + 8) == 1) {
      int v12 = 3;
    }
    else {
      int v12 = 2;
    }
    uint64_t v1 = sub_100316B80(v4, v12);
  }

  return (id)v1;
}

void sub_1002F73C8(uint64_t a1)
{
  if (!a1) {
    return;
  }
  uint64_t v2 = +[NSMutableArray array];
  id v3 = +[NSMutableArray array];
  if ((sub_100316F24(*(void *)(a1 + 152)) & 1) == 0)
  {
    id v4 = sub_100313DEC(*(void *)(a1 + 24));
    uint64_t v5 = sub_100315D20((uint64_t)KmlTlv, 4, v4);
    [v2 addObject:v5];
  }
  char v55 = 0;
  if (sub_100339180(*(void *)(a1 + 24)) && sub_100318504(*(void *)(a1 + 152)))
  {
    id v6 = [*(id *)(a1 + 200) UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 949, (uint64_t)v6, @"activation option is required", v7, v8, v9, v47);
    char v55 = 1;
    uint64_t v10 = sub_1003128C8(*(void *)(a1 + 24));
    if (![v10 length])
    {
LABEL_11:

      goto LABEL_12;
    }
    uint64_t v11 = sub_1002FEDBC(*(void *)(a1 + 24));
    if (![v11 length])
    {
LABEL_10:

      goto LABEL_11;
    }
    int v12 = sub_100318518(*(void *)(a1 + 152));

    if (v12)
    {
      id v13 = [*(id *)(a1 + 200) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 952, (uint64_t)v13, @"VEP can be an activation option", v14, v15, v16, v47);
      id v17 = sub_1003128C8(*(void *)(a1 + 24));
      uint64_t v18 = sub_100315D20((uint64_t)KmlTlv, 4, v17);
      [v2 addObject:v18];

      uint64_t v10 = sub_1003128C8(*(void *)(a1 + 24));
      uint64_t v11 = sub_100315D20((uint64_t)KmlTlv, 68, v10);
      [v3 addObject:v11];
      goto LABEL_10;
    }
  }
LABEL_12:
  id v19 = +[NSData dataWithBytes:&v55 length:1];
  id v20 = sub_100315D20((uint64_t)KmlTlv, 1, v19);
  [v2 addObject:v20];

  id v21 = +[NSData dataWithBytes:&v55 length:1];
  uint64_t v22 = sub_100315D20((uint64_t)KmlTlv, 215, v21);
  [v3 addObject:v22];

  if (sub_100316F24(*(void *)(a1 + 152)))
  {
    id v23 = [*(id *)(a1 + 104) readerIdentifier];
    id v24 = sub_100315D20((uint64_t)KmlTlv, 4, v23);
    [v2 addObject:v24];

    uint64_t v25 = [*(id *)(a1 + 104) readerIdentifier];
    id v26 = sub_100315D20((uint64_t)KmlTlv, 77, v25);
    [v3 addObject:v26];
  }
  uint64_t v27 = [*(id *)(a1 + 104) slotIdentifier];
  uint64_t v28 = sub_100315D20((uint64_t)KmlTlv, 130, v27);
  [v3 addObject:v28];

  id v29 = +[NSMutableData data];
  [v29 appendData:*(void *)(a1 + 56)];
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  id v30 = v2;
  id v31 = [v30 countByEnumeratingWithState:&v51 objects:v57 count:16];
  if (v31)
  {
    id v32 = v31;
    uint64_t v33 = *(void *)v52;
    do
    {
      NSErrorUserInfoKey v34 = 0;
      do
      {
        if (*(void *)v52 != v33) {
          objc_enumerationMutation(v30);
        }
        uint64_t v35 = sub_100316294(*(void *)(*((void *)&v51 + 1) + 8 * (void)v34));
        [v29 appendData:v35];

        NSErrorUserInfoKey v34 = (char *)v34 + 1;
      }
      while (v32 != v34);
      id v32 = [v30 countByEnumeratingWithState:&v51 objects:v57 count:16];
    }
    while (v32);
  }

  os_signpost_id_t v36 = sub_100315D20((uint64_t)KmlTlv, 48, v29);
  uint64_t v37 = sub_100316294((uint64_t)v36);
  uint64_t v38 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v37;

  uint64_t v39 = +[NSMutableData data];
  [v39 appendData:*(void *)(a1 + 72)];
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v40 = v3;
  id v41 = [v40 countByEnumeratingWithState:&v47 objects:v56 count:16];
  if (v41)
  {
    id v42 = v41;
    uint64_t v43 = *(void *)v48;
    do
    {
      id v44 = 0;
      do
      {
        if (*(void *)v48 != v43) {
          objc_enumerationMutation(v40);
        }
        uint64_t v45 = sub_100316294(*(void *)(*((void *)&v47 + 1) + 8 * (void)v44));
        [v39 appendData:v45];

        id v44 = (char *)v44 + 1;
      }
      while (v42 != v44);
      id v42 = [v40 countByEnumeratingWithState:&v47 objects:v56 count:16];
    }
    while (v42);
  }

  uint64_t v46 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v39;
}

void sub_1002F7914(uint64_t a1)
{
  if (a1)
  {
    id v2 = *(id *)(a1 + 200);
    id v3 = [v2 UTF8String];
    id v4 = sub_10001A584(*(void *)(a1 + 32));

    uint64_t v5 = kmlUtilHexStringFromData(v4);
    KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 736, (uint64_t)v3, @"encryption attestation - %@", v6, v7, v8, (uint64_t)v5);

    LODWORD(v5) = [*(id *)(a1 + 176) agreedKmlSharingVersion];
    id v9 = *(id *)(a1 + 200);
    id v10 = [v9 UTF8String];
    if (v5 == 768)
    {
      uint64_t v11 = (id *)(a1 + 64);
      int v12 = kmlUtilHexStringFromData(*(void **)(a1 + 64));

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 741, (uint64_t)v10, @"Extracted entitlements data (TLV) : %@ ", v13, v14, v15, (uint64_t)v12);
    }
    else
    {
      uint64_t v11 = (id *)(a1 + 48);
      int v12 = kmlUtilHexStringFromData(*(void **)(a1 + 48));

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 745, (uint64_t)v10, @"Extracted entitlements data (ASN1) : %@ ", v16, v17, v18, (uint64_t)v12);
    }

    id v94 = *v11;
    if (*(unsigned char *)(a1 + 96)
      || (sub_100313DC8(*(void *)(a1 + 24)), id v19 = objc_claimAutoreleasedReturnValue(), v19, v19))
    {
      id v20 = [*(id *)(a1 + 104) publicKeyIdentifier];
      uint64_t v21 = kmlUtilHexStringFromData(v20);

      uint64_t v22 = sub_100014F20(*(void *)(a1 + 24));
      id v93 = kmlUtilUUIDToData(v22);

      uint64_t v92 = (void *)v21;
      if (*(unsigned char *)(a1 + 96))
      {
        id v23 = [*(id *)(a1 + 200) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 761, (uint64_t)v23, @"Prepare for authless share by providing out bindingAttestation to applet", v24, v25, v26, v85);
        uint64_t v27 = SESEndpointPreAuthorizeWithSession();
      }
      else
      {
        uint64_t v27 = 0;
      }
      sub_100014F14(*(void *)(a1 + 32));
      os_signpost_id_t v91 = (id *)objc_claimAutoreleasedReturnValue();
      uint64_t v89 = sub_100315FB4(v91);
      sub_100014F20(*(void *)(a1 + 32));
      uint64_t v90 = (id *)objc_claimAutoreleasedReturnValue();
      uint64_t v28 = sub_100315FB4(v90);
      sub_100030AD8(*(void *)(a1 + 32));
      id v29 = (id *)objc_claimAutoreleasedReturnValue();
      id v30 = sub_100315FB4(v29);
      id v31 = sub_10001A584(*(void *)(a1 + 32));
      uint64_t v32 = *(void *)(a1 + 80);
      __int16 v33 = sub_100339168(*(void *)(a1 + 24));
      __int16 v34 = sub_100306A3C(*(void *)(a1 + 24));
      sub_100313DC8(*(void *)(a1 + 24));
      uint64_t v88 = v95 = v27;
      WORD1(v87) = v34;
      LOWORD(v87) = v33;
      uint64_t v86 = v32;
      uint64_t v35 = v92;
      uint64_t v36 = SESEndPointAuthorizeWithSession();
      id v37 = v27;
      uint64_t v38 = v27;
      id v39 = v37;

      id v40 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = v36;

      id v41 = v39;
      if (v39)
      {
        id v42 = *(id *)(a1 + 200);
        id v43 = [v42 UTF8String:v86 v93 v87 v94 v88 &v95];
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 785, (uint64_t)v43, @"Error while signing the request %@", v44, v45, v46, (uint64_t)v39);

        long long v47 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        long long v48 = [v39 userInfo];
        uint64_t v49 = +[NSError errorWithDomain:v47 code:204 userInfo:v48];
        long long v50 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = v49;

        sub_1002F3F00(a1, 22);
      }
      else
      {
        id v51 = objc_alloc((Class)NSData);
        long long v52 = [*(id *)(a1 + 104) mailboxMapping:v86, v93, v87, v94, v88, &v95];
        id v53 = [v51 initWithData:v52];

        id v54 = [*(id *)(a1 + 200) UTF8String];
        char v55 = kmlUtilHexStringFromData(v53);
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 792, (uint64_t)v54, @"mappingData:%@", v56, v57, v58, (uint64_t)v55);

        id v59 = sub_1002F7278(a1);
        id v60 = [*(id *)(a1 + 200) UTF8String];
        uint64_t v61 = kmlUtilHexStringFromData(v59);
        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 795, (uint64_t)v60, @"SupportedRadiosData:%@", v62, v63, v64, (uint64_t)v61);

        uint64_t v65 = sub_1002F805C(a1);
        kmlUtilLogLargeData(@"AdditionalAttestations", v65);
        BOOL v66 = objc_alloc_init(SharingSignedResponse);
        sub_10030ACDC((uint64_t)v66, *(void **)(a1 + 176));
        uint64_t v67 = *(void *)(a1 + 112);
        BOOL v68 = sub_100339194(*(void *)(a1 + 24));
        uint64_t v69 = sub_100309E1C((uint64_t)v66, v67, v53, v59, v68, v65);
        uint64_t v70 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v69;

        id v41 = sub_1002F859C((void *)a1);
        if (v41)
        {
          id v71 = [*(id *)(a1 + 200) UTF8String];
          KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 813, (uint64_t)v71, @"Error while setting signaling bitmap %@", v72, v73, v74, (uint64_t)v41);
          uint64_t v75 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
          uint64_t v76 = [v41 userInfo];
          uint64_t v77 = +[NSError errorWithDomain:v75 code:204 userInfo:v76];
          id v78 = *(void **)(a1 + 128);
          *(void *)(a1 + 128) = v77;

          uint64_t v79 = 22;
        }
        else
        {
          uint64_t v79 = 12;
        }
        sub_1002F3F00(a1, v79);

        uint64_t v35 = v92;
      }
    }
    else
    {
      uint64_t v80 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
      v96[0] = NSLocalizedDescriptionKey;
      uint64_t v81 = +[NSString stringWithUTF8String:KmlErrorString(105)];
      v96[1] = NSLocalizedFailureReasonErrorKey;
      v97[0] = v81;
      v97[1] = @"Missing user auth";
      uint64_t v82 = +[NSDictionary dictionaryWithObjects:v97 forKeys:v96 count:2];
      uint64_t v83 = +[NSError errorWithDomain:v80 code:105 userInfo:v82];
      os_signpost_id_t v84 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = v83;

      sub_1002F3F00(a1, 22);
    }
  }
}

id sub_1002F805C(uint64_t a1)
{
  if (!a1 || [*(id *)(a1 + 176) agreedKmlSharingVersion] != 768)
  {
    uint64_t v18 = 0;
    goto LABEL_11;
  }
  id v2 = [*(id *)(a1 + 200) UTF8String];
  KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 851, (uint64_t)v2, @"Let's check for additional attestation packages to send", v3, v4, v5, v56);
  uint64_t v6 = [KmlMailboxMappingData alloc];
  uint64_t v7 = [*(id *)(a1 + 104) mailboxMapping];
  uint64_t v8 = sub_100313018((char *)v6, v7, (__int16)[*(id *)(a1 + 176) agreedKmlSharingVersion]);

  sub_100313AD4((uint64_t)v8);
  sub_100313AC8((uint64_t)v8);
  id v9 = [*(id *)(a1 + 104) publicKeyIdentifier];
  id v10 = kmlUtilHexStringFromData(v9);

  sub_100313AC8((uint64_t)v8);
  uint64_t v69 = 0;
  uint64_t v11 = SESEndPointGetPrivateData();
  id v12 = 0;
  if (v12)
  {
    id v13 = *(id *)(a1 + 200);
    id v14 = [v13 UTF8String];
    KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 864, (uint64_t)v14, @"Error while getting signaling bitmap %@", v15, v16, v17, (uint64_t)v12);
  }
  else
  {
    kmlUtilLogLargeData(@"Private Mailbox Data", v11);
    id v19 = v11;
    uint64_t v20 = *(unsigned __int8 *)[v19 bytes];
    if (sub_100313A20((uint64_t)v8, v20) && sub_100313ABC(*(void *)(a1 + 152)) > 1)
    {
      __int16 v27 = sub_100313ABC(*(void *)(a1 + 152));
      unsigned __int16 v28 = sub_100313AF8((uint64_t)v8) * v27;
      int v29 = sub_100313AD4((uint64_t)v8);
      if ((int)(v29 - sub_100313B28((uint64_t)v8)) >= v28)
      {
        uint64_t v57 = v11;
        uint64_t v58 = v10;
        *(unsigned char *)(a1 + 97) = 0;
        uint64_t v18 = +[NSMutableData data];
        __int16 v34 = sub_100313B28((uint64_t)v8);
        __int16 v35 = sub_100313AC8((uint64_t)v8);
        id v59 = v8;
        unsigned int v62 = sub_100313AF8((uint64_t)v8);
        if (sub_100313ABC(*(void *)(a1 + 152)) >= 2)
        {
          int v36 = 0;
          __int16 v61 = v34 - v35;
          id v60 = v19;
          while (1)
          {
            id v37 = [v19 subdataWithRange:(unsigned __int16)(v61 + v36 * v62), v62];
            uint64_t v38 = sub_100315960((uint64_t)KmlTlv, v37);
            long long v65 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            id v39 = v38;
            id v40 = [v39 countByEnumeratingWithState:&v65 objects:v70 count:16];
            if (!v40) {
              break;
            }
            id v41 = v40;
            uint64_t v63 = v37;
            char v42 = 0;
            uint64_t v43 = *(void *)v66;
            int v64 = v36;
            __int16 v44 = v36 + 48;
            do
            {
              for (uint64_t i = 0; i != v41; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v66 != v43) {
                  objc_enumerationMutation(v39);
                }
                uint64_t v46 = *(void *)(*((void *)&v65 + 1) + 8 * i);
                if (sub_10005D5A8(v46) == 32565)
                {
                  long long v47 = sub_100316294(v46);
                  long long v48 = sub_100315D20((uint64_t)KmlTlv, v44, v47);

                  uint64_t v49 = sub_100316294((uint64_t)v48);
                  [v18 appendData:v49];

                  ++*(unsigned char *)(a1 + 97);
                  char v42 = 1;
                }
              }
              id v41 = [v39 countByEnumeratingWithState:&v65 objects:v70 count:16];
            }
            while (v41);

            id v19 = v60;
            if (v42)
            {
              int v36 = v64 + 1;
              if ((int)(sub_100313ABC(*(void *)(a1 + 152)) - 1) > (unsigned __int16)(v64 + 1)) {
                continue;
              }
            }
            goto LABEL_31;
          }
        }
LABEL_31:
        id v50 = *(id *)(a1 + 200);
        id v51 = [v50 UTF8String];
        uint64_t v52 = *(unsigned __int8 *)(a1 + 97);

        KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 910, (uint64_t)v51, @"Number of additional attestations found : %u", v53, v54, v55, v52);
        id v10 = v58;
        uint64_t v8 = v59;
        uint64_t v11 = v57;
        id v12 = 0;
        goto LABEL_10;
      }
      id v30 = [*(id *)(a1 + 200) UTF8String];
      sub_100313AD4((uint64_t)v8);
      sub_100313B28((uint64_t)v8);
      KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 878, (uint64_t)v30, @"Max size of attestations (%02X) exceeds actual length (%02X)", v31, v32, v33, v28);
    }
    else
    {
      id v21 = *(id *)(a1 + 200);
      id v22 = [v21 UTF8String];
      sub_100313ABC(*(void *)(a1 + 152));

      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 872, (uint64_t)v22, @"No additional attestations to add. Signaling Bitmpap (%02X); MaxOfflineAttestations (%02X)",
        v23,
        v24,
        v25,
        v20);
    }
  }
  uint64_t v18 = 0;
LABEL_10:

LABEL_11:

  return v18;
}

id sub_1002F859C(void *a1)
{
  uint64_t v1 = (uint64_t)a1;
  if (a1)
  {
    if (sub_100316F24(a1[19]))
    {
      id v2 = [*(id *)(v1 + 200) UTF8String];
      KmlSharingLogFunc(OS_LOG_TYPE_INFO, (uint64_t)"KmlOwnerSharingSession.m", 920, (uint64_t)v2, @"ImmoTokens/slotIds will be obtained from server. No need to set signaling bitmap", v3, v4, v5, v17);
    }
    else
    {
      uint64_t v6 = sub_10032872C();
      uint64_t v7 = *(void **)(v1 + 104);
      char v8 = sub_100339174(*(void *)(v1 + 24));
      id v9 = sub_100328D6C((uint64_t)v6, v7, v8);

      if (v9)
      {
        id v10 = [*(id *)(v1 + 200) UTF8String];
        KmlSharingLogFunc(OS_LOG_TYPE_ERROR, (uint64_t)"KmlOwnerSharingSession.m", 927, (uint64_t)v10, @"Error while setting signaling bitmap %@", v11, v12, v13, (uint64_t)v9);
        id v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.sharing"];
        uint64_t v15 = [v9 userInfo];
        uint64_t v1 = +[NSError errorWithDomain:v14 code:204 userInfo:v15];

        goto LABEL_7;
      }
    }
    uint64_t v1 = 0;
  }
LABEL_7:

  return (id)v1;
}

id *sub_1002F86F4(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 23, a2);
  }
  return result;
}

id *sub_1002F8704(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 24, a2);
  }
  return result;
}

uint64_t sub_1002F8714(uint64_t result)
{
  if (result) {
    return *(void *)(result + 208);
  }
  return result;
}

BOOL isEndOfKeyConfigTag(int a1)
{
  return a1 == 0x7FFF || a1 == 24415;
}

BOOL isDeviceKeyAttestationTag(int a1)
{
  return (a1 & 0xFFFFDFFF) == 24410;
}

void sub_1002F928C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v2 = self;
  objc_sync_enter(v2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlSharingEvent:]", 27, @"Sharing Event = %@", v3, v4, v5, v6, (uint64_t)v7);
  if (v7) {
    +[CALogger postCAEventFor:@"com.apple.kml.keySharingEvent" eventInput:v7];
  }
  objc_sync_exit(v2);
}

void sub_1002F9334(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F9348(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v2 = self;
  objc_sync_enter(v2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlOwnerPairingEvent:]", 38, @" Pairing Event = %@", v3, v4, v5, v6, (uint64_t)v7);
  if (v7) {
    +[CALogger postCAEventFor:@"com.apple.kml.keyPairingEvent" eventInput:v7];
  }
  objc_sync_exit(v2);
}

void sub_1002F93F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F9404(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v2 = self;
  objc_sync_enter(v2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlKeyTrackingEvent:]", 48, @" Tracking Event = %@", v3, v4, v5, v6, (uint64_t)v7);
  if (v7) {
    +[CALogger postCAEventFor:@"com.apple.kml.keyTrackingEvent" eventInput:v7];
  }
  objc_sync_exit(v2);
}

void sub_1002F94AC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F94C0(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v2 = self;
  objc_sync_enter(v2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlKeyUpgradeEvent:]", 58, @" Upgrade Event = %@", v3, v4, v5, v6, (uint64_t)v7);
  if (v7) {
    +[CALogger postCAEventFor:@"com.apple.kml.keyUpgradeEvent" eventInput:v7];
  }
  objc_sync_exit(v2);
}

void sub_1002F9568(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F957C(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v2 = self;
  objc_sync_enter(v2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlOwnerRevokesFriendKeysEvent:]", 69, @" Initiator revokes recipient Event = %@", v3, v4, v5, v6, (uint64_t)v7);
  if (v7) {
    +[CALogger postCAEventFor:@"com.apple.kml.ownerRevokesFriendKeysEvent" eventInput:v7];
  }
  objc_sync_exit(v2);
}

void sub_1002F9624(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1002F9638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = self;
  objc_sync_enter(v11);
  id v12 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  uint64_t v13 = [v12 dictionaryForKey:@"kml.ca.generalStatistics"];
  if (!v13) {
    uint64_t v13 = sub_1002F9954();
  }
  uint64_t v33 = [v13 objectForKeyedSubscript:@"probingSessionCount"];
  if (a3 | a2 | a4 | a5 || [v33 unsignedIntegerValue])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlGeneralStatisticsWithOwnerCarKeyCount:friendCarKeyCount:unifiedAccessHomeKeyCount:unifiedAccessHydraKeyCount:isProductionEnvironment:]", 94, @"We have stats to report", v14, v15, v16, v17, v31);
    v34[0] = @"ownerCarKeyCount";
    uint64_t v18 = +[NSNumber numberWithInteger:a2];
    v35[0] = v18;
    v34[1] = @"friendCarKeyCount";
    id v19 = +[NSNumber numberWithInteger:a3];
    v35[1] = v19;
    void v34[2] = @"unifiedAccessHomeKeyCount";
    uint64_t v20 = +[NSNumber numberWithInteger:a4];
    _OWORD v35[2] = v20;
    id v34[3] = @"unifiedAccessHydraKeyCount";
    id v21 = +[NSNumber numberWithInteger:a5];
    uint64_t v35[3] = v21;
    v34[4] = @"production";
    id v22 = +[NSNumber numberWithBool:a6];
    v35[4] = v22;
    uint64_t v23 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:5];
    id v24 = [v23 mutableCopy];

    uint64_t v25 = SESEndPointGetCAGeneralStatisticsInfo();
    id v30 = 0;
    if (v30 || !v25) {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlAnalyticsLogger postKmlGeneralStatisticsWithOwnerCarKeyCount:friendCarKeyCount:unifiedAccessHomeKeyCount:unifiedAccessHydraKeyCount:isProductionEnvironment:]", 112, @"Failed to retrieve SES general statistics", v26, v27, v28, v29, v32);
    }
    else {
      [v24 addEntriesFromDictionary:v25];
    }
    [v24 addEntriesFromDictionary:v13];
    +[CALogger postCAEventFor:@"com.apple.kml.generalStatisticsEvent" eventInput:v24];
    [v12 removeObjectForKey:@"kml.ca.generalStatistics"];
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger postKmlGeneralStatisticsWithOwnerCarKeyCount:friendCarKeyCount:unifiedAccessHomeKeyCount:unifiedAccessHydraKeyCount:isProductionEnvironment:]", 96, @"No stats to report", v14, v15, v16, v17, v31);
  }

  objc_sync_exit(v11);
}

void sub_1002F9928(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_1002F9954()
{
  self;
  unsigned __int8 v0 = +[NSMutableDictionary dictionary];
  [v0 setObject:&off_10042DF48 forKeyedSubscript:@"probingSessionCount"];
  return v0;
}

void sub_1002F99A0()
{
  id obj = self;
  objc_sync_enter(obj);
  id v0 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  uint64_t v1 = [v0 dictionaryForKey:@"kml.ca.generalStatistics"];
  id v2 = [v1 mutableCopy];

  if (!v2) {
    id v2 = sub_1002F9954();
  }
  uint64_t v3 = [v2 objectForKeyedSubscript:@"probingSessionCount"];
  uint64_t v4 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)[v3 unsignedIntegerValue] + 1);
  [v2 setObject:v4 forKeyedSubscript:@"probingSessionCount"];

  [v0 setObject:v2 forKey:@"kml.ca.generalStatistics"];
  objc_sync_exit(obj);
}

void sub_1002F9AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id sub_1002F9AD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  char v8 = a4;
  self;
  id v9 = sub_10033F660((uint64_t)v6);
  id v10 = v9;
  if (v9)
  {
    id v11 = 0;
    uint64_t v12 = 1;
LABEL_3:
    v8[2](v8, v12, [v9 u16BE:7]);

    uint64_t v13 = 0;
    goto LABEL_6;
  }
  uint64_t v42 = 0;
  uint64_t v14 = SESEndPointList();
  id v15 = 0;
  if (v15)
  {
    uint64_t v13 = v15;
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"+[KmlAnalyticsLogger getHUPDataSourceAndVehicleCapabilitiesWithConfig:keyIdentifier:callback:]", 163, @"Error in getting endpoint list: %@", v16, v17, v18, v19, (uint64_t)v15);
  }
  else
  {
    int v36 = v8;
    id v37 = v6;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v21 = v14;
    id v22 = [v21 countByEnumeratingWithState:&v38 objects:v43 count:16];
    if (v22)
    {
      id v23 = v22;
      id v24 = 0;
      uint64_t v25 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v23; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v25) {
            objc_enumerationMutation(v21);
          }
          uint64_t v27 = *(void **)(*((void *)&v38 + 1) + 8 * i);
          uint64_t v28 = [v27 publicKeyIdentifier];
          unsigned int v29 = [v28 isEqualToData:v7];

          if (v29)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlAnalyticsLogger getHUPDataSourceAndVehicleCapabilitiesWithConfig:keyIdentifier:callback:]", 169, @"Found our endpoint", v30, v31, v32, v33, v35);
            id v34 = v27;

            id v24 = v34;
          }
        }
        id v23 = [v21 countByEnumeratingWithState:&v38 objects:v43 count:16];
      }
      while (v23);
    }
    else
    {
      id v24 = 0;
    }

    id v11 = [v24 hupData];

    if (v11)
    {
      uint64_t v12 = 2;
      id v9 = v11;
      char v8 = v36;
      id v6 = v37;
      id v10 = 0;
      goto LABEL_3;
    }
    char v8 = v36;
    v36[2](v36, 0, 0);
    uint64_t v13 = 0;
    id v6 = v37;
    id v10 = 0;
  }
LABEL_6:

  return v13;
}

void sub_1002FA3C4(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerOwnerSideSharingTestInvitations:*(void *)(a1 + 32) callback:*(void *)(a1 + 40)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerOwnerSideSharingTestInvitations:callback:]_block_invoke", 131, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FA4F0(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerOwnerSideInvitationRequestHandler:*(void *)(a1 + 32)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerOwnerSideInvitationRequestHandler:]_block_invoke", 141, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FA61C(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerFriendSideSharingTestInvitationUUIDHandler:*(void *)(a1 + 32)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSideSharingTestInvitationUUIDHandler:]_block_invoke", 151, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FA748(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerFriendSideSharingTestCompletion:*(void *)(a1 + 32)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSideSharingTestCompletion:]_block_invoke", 161, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FA874(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerFriendSideInvitationUnusableHandler:*(void *)(a1 + 32)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSideInvitationUnusableHandler:]_block_invoke", 171, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FA9A0(uint64_t a1)
{
  sub_10031DB48();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  sub_10031E9BC((uint64_t)v7, *(void **)(a1 + 32));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerCrossPlatformTestMessageOverIDSHandler:]_block_invoke", 181, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FAACC(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerCrossPlatformMessageSendHandler:*(void *)(a1 + 32)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerCrossPlatformTestMessageSendHandler:]_block_invoke", 191, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FAC20(uint64_t a1)
{
  sub_10031DB48();
  id v7 = (id)objc_claimAutoreleasedReturnValue();
  sub_10031EAEC((uint64_t)v7, *(void **)(a1 + 32), *(void **)(a1 + 40));
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService sendCrossPlatformTestData:toIdsIdentifier:]_block_invoke", 201, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FAD4C(uint64_t a1)
{
  id v7 = +[KmlClientReporterFactory getTestReporter];
  [v7 registerFriendSidePasscodeRetryRequestHandler:*(void *)(a1 + 32)];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService registerFriendSidePasscodeRetryRequestHandler:]_block_invoke", 211, &stru_100421848, v2, v3, v4, v5, v6);
}

void sub_1002FAE18(id a1)
{
  +[KmlClientReporterFactory removeTestReporter];
  uint64_t v1 = sub_10031DB48();
  sub_10031EC34((uint64_t)v1);

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlXpcService unregisterSharingTestHandlers]_block_invoke", 221, &stru_100421848, v2, v3, v4, v5, v7);
}

void sub_1002FAE84(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 8);
  }
}

id KmlLogger()
{
  if (qword_100468318 != -1) {
    dispatch_once(&qword_100468318, &stru_100419968);
  }
  id v0 = (void *)qword_100468310;

  return v0;
}

void sub_1002FAEF8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.sesd.kml", "GeneralLogging");
  uint64_t v2 = (void *)qword_100468310;
  qword_100468310 = (uint64_t)v1;
}

void KmlLogFunc2(os_log_type_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a4;
  id v13 = [objc_alloc((Class)NSString) initWithFormat:v12 arguments:&a9];

  id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%s : %d : %@", a2, a3, v13];
  id v15 = KmlLogger();
  if (os_log_type_enabled(v15, a1))
  {
    *(_DWORD *)buf = 138543362;
    id v17 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, a1, "%{public}@", buf, 0xCu);
  }
}

void KmlSharingLogFunc(os_log_type_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v13 = a5;
  id v14 = [objc_alloc((Class)NSString) initWithFormat:v13 arguments:&a9];

  id v15 = [objc_alloc((Class)NSString) initWithFormat:@"%s : %d : %s : %@", a2, a3, a4, v14];
  uint64_t v16 = KmlLogger();
  if (os_log_type_enabled(v16, a1))
  {
    *(_DWORD *)buf = 138543362;
    id v18 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, a1, "%{public}@", buf, 0xCu);
  }
}

void KmlLogFunc_InternalOnly(os_log_type_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12 = a4;
  if (qword_100468338 != -1) {
    dispatch_once(&qword_100468338, &stru_1004199A8);
  }
  if (byte_100468330)
  {
    id v13 = [objc_alloc((Class)NSString) initWithFormat:v12 arguments:&a9];
    id v14 = [objc_alloc((Class)NSString) initWithFormat:@"%s : %d : %@", a2, a3, v13];
    id v15 = KmlLogger();
    if (os_log_type_enabled(v15, a1))
    {
      *(_DWORD *)buf = 138543362;
      id v17 = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, a1, "%{public}@", buf, 0xCu);
    }
  }
}

id KmlSignpostLogger()
{
  if (qword_100468328 != -1) {
    dispatch_once(&qword_100468328, &stru_100419988);
  }
  id v0 = (void *)qword_100468320;

  return v0;
}

void sub_1002FB314(id a1)
{
  os_log_t v1 = os_log_create("com.apple.sesd.kml", "SignpostLogging");
  uint64_t v2 = (void *)qword_100468320;
  qword_100468320 = (uint64_t)v1;
}

void sub_1002FB358(id a1)
{
  byte_100468330 = os_variant_has_internal_diagnostics();
}

id *sub_1002FB380(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)KmlKeyDataTransmitter;
    id v14 = (id *)[super init];
    a1 = v14;
    if (v14)
    {
      objc_storeStrong(v14 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
      objc_storeStrong(a1 + 3, a4);
      objc_storeStrong(a1 + 4, a5);
      uint64_t v15 = +[NSMutableData data];
      id v16 = a1[5];
      a1[5] = (id)v15;

      *((_DWORD *)a1 + 12) = 0;
    }
  }

  return a1;
}

id sub_1002FB484(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  if (!a1) {
    goto LABEL_18;
  }
  if (![*(id *)(a1 + 40) length])
  {
    int v14 = sub_100315784(v5);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 65, @"KeyDataTransmitter: Requested tag (%02x)", v15, v16, v17, v18, v14);
    if (v14 > 32545)
    {
      if (v14 == 32546)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 72, @"Sending Instance attestation", v19, v20, v21, v22, v31);
        id v23 = *(void **)(a1 + 40);
        uint64_t v24 = *(void *)(a1 + 16);
        goto LABEL_15;
      }
      if (v14 == 32548)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 76, @"Sending Key attestation", v19, v20, v21, v22, v31);
        id v23 = *(void **)(a1 + 40);
        uint64_t v24 = *(void *)(a1 + 24);
        goto LABEL_15;
      }
    }
    else
    {
      if (v14 == 211)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 80, @"Sending FriendlyName", v19, v20, v21, v22, v31);
        uint64_t v26 = *(void **)(a1 + 40);
        uint64_t v27 = [*(id *)(a1 + 32) dataUsingEncoding:4];
        uint64_t v28 = sub_100315D20((uint64_t)KmlTlv, 211, v27);
        unsigned int v29 = sub_100316294((uint64_t)v28);
        [v26 appendData:v29];

LABEL_16:
        uint64_t v25 = sub_1002FB7C0((id *)a1);
        goto LABEL_17;
      }
      if (v14 == 32544)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 68, @"Sending device certificate", v19, v20, v21, v22, v31);
        id v23 = *(void **)(a1 + 40);
        uint64_t v24 = *(void *)(a1 + 8);
LABEL_15:
        [v23 appendData:v24];
        goto LABEL_16;
      }
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 84, @"KeyDataTransmitter: Received invalid tag", v19, v20, v21, v22, v31);
    uint64_t v25 = sub_100312A1C(0x100452000, 34922, 0);
LABEL_17:
    a1 = v25;
    goto LABEL_18;
  }
  uint64_t v6 = sub_100315628(v5);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetDataCommand:error:]", 55, @"KeyDataTransmitter: Received GET_DATA (%@) while we are expecting GET_RESPONSE", v7, v8, v9, v10, (uint64_t)v6);

  a1 = sub_100312A1C(0x100452000, 34153, 0);
  if (a3)
  {
    id v11 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
    id v12 = +[NSString stringWithUTF8String:KmlErrorString(206)];
    uint64_t v33 = v12;
    id v13 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
    *a3 = +[NSError errorWithDomain:v11 code:206 userInfo:v13];
  }
LABEL_18:

  return (id)a1;
}

int *sub_1002FB7C0(id *a1)
{
  os_log_t v1 = a1;
  if (a1)
  {
    unint64_t v2 = 239 * *((int *)a1 + 12);
    if ((unint64_t)[a1[5] length] <= v2)
    {
      sub_100312A1C(0x100452000, 144, 0);
      os_log_t v1 = (id *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      int v3 = 239 * *((_DWORD *)v1 + 12) + 239;
      id v4 = [v1[5] length];
      id v5 = v1[5];
      if ((unint64_t)v4 <= v3)
      {
        [v5 length];
        id v11 = [v1[5] subdataWithRange:];
        id v7 = [v11 copy];

        [v1[5] setLength:0];
        *((_DWORD *)v1 + 12) = 0;
        __int16 v10 = 144;
      }
      else
      {
        uint64_t v6 = [v5 subdataWithRange:239 * *((int *)v1 + 12) 239];
        id v7 = [v6 copy];

        int v8 = *((_DWORD *)v1 + 12);
        *((_DWORD *)v1 + 12) = v8 + 1;
        unsigned int v9 = 24832;
        if ((unint64_t)[v1[5] length] < 239 * v8 + 478) {
          unsigned int v9 = (17 * *((unsigned char *)v1 + 48) + [v1[5] length]) | 0x6100;
        }
        __int16 v10 = __rev16(v9);
      }
      sub_100312C68(0x100452000, v10, v7);
      os_log_t v1 = (id *)objc_claimAutoreleasedReturnValue();
    }
  }

  return (int *)v1;
}

id *sub_1002FB934(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    if ([a1[5] length])
    {
      sub_1002FB7C0(a1);
      a1 = (id *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlKeyDataTransmitter handleGetResponseCommand:error:]", 96, @"KeyDataTransmitter: Received GET_RESPONSE while we have not data left", v6, v7, v8, v9, v14);
      sub_100312A1C(0x100452000, 34153, 0);
      a1 = (id *)objc_claimAutoreleasedReturnValue();
      if (a3)
      {
        __int16 v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
        id v11 = +[NSString stringWithUTF8String:KmlErrorString(206)];
        uint64_t v16 = v11;
        id v12 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
        *a3 = +[NSError errorWithDomain:v10 code:206 userInfo:v12];
      }
    }
  }

  return a1;
}

void **sub_1002FBB44(void **a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    v30.receiver = a1;
    v30.super_class = (Class)KmlDataExchangeManager;
    a1 = (void **)[super init];
    if (a1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager initWithDelegate:pairingPassword:transport:versionInformation:]", 95, @"let's init", v12, v13, v14, v15, (uint64_t)v30.receiver);
      a1[1] = 0;
      a1[2] = 0;
      if (v10)
      {
        id v16 = [v10 copy];
        uint64_t v17 = a1[4];
        a1[4] = v16;
      }
      else
      {
        uint64_t v17 = a1[4];
        a1[4] = 0;
      }

      a1[5] = 0;
      objc_storeWeak(a1 + 14, v9);
      uint64_t v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v19 = dispatch_queue_create("com.apple.sesd.kml.dxmanager", v18);
      uint64_t v20 = a1[8];
      a1[8] = v19;

      uint64_t v21 = sub_100337710([KmlSecureChannel alloc], 0);
      uint64_t v22 = a1[3];
      a1[3] = v21;

      objc_storeStrong(a1 + 10, a5);
      id v23 = sub_100319378((id *)[KmlCommandHandler alloc], a1[3], a1[4], a4, a1[10]);
      uint64_t v24 = a1[9];
      a1[9] = v23;

      a1[18] = a4;
      *((unsigned char *)a1 + 96) = -1;
      a1[13] = (void *)0xFFFF;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager initWithDelegate:pairingPassword:transport:versionInformation:]", 115, @"ready to roll", v25, v26, v27, v28, (uint64_t)v30.receiver);
    }
  }

  return a1;
}

void sub_1002FBCEC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v2 = *(NSObject **)(a1 + 64);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1002FBD68;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_1002FBD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  if (v10 <= *(void *)(v9 + 8)) {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState:]_block_invoke", 127, @"Current state higher than new state. Do nothing", a5, a6, a7, a8, a9);
  }
  else {
    sub_1002FBD98(v9, v10, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1002FBD98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 136, @"Current state %ld, new state %ld", a5, a6, a7, a8, *(void *)(a1 + 8));
    uint64_t v14 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v14;
    switch(a2)
    {
      case 1:
        unint64_t v15 = *(void *)(a1 + 144);
        if (v15 >= 2)
        {
          if (v15 != 2) {
            goto LABEL_42;
          }
          uint64_t v16 = sub_100314F28((uint64_t)KmlPairingTransportFactory, (void *)a1);
        }
        else
        {
          uint64_t v16 = sub_100314EC8((uint64_t)KmlPairingTransportFactory, (void *)a1);
        }
        long long v48 = *(void **)(a1 + 88);
        *(void *)(a1 + 88) = v16;

LABEL_42:
        uint64_t v49 = *(void **)(a1 + 88);
        _[v49 startSession];
        break;
      case 2:
        uint64_t v17 = @"waiting for remote reader to select our AID";
        uint64_t v18 = 159;
        goto LABEL_30;
      case 3:
        uint64_t v17 = @"waiting for secure channel init from remote reader";
        uint64_t v18 = 164;
        goto LABEL_30;
      case 4:
        uint64_t v17 = @"waiting for secure channel config from remote reader";
        uint64_t v18 = 169;
        goto LABEL_30;
      case 5:
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 112));
        [WeakRetained handlePairingDidStart];

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 177, @"Secure Channel requested. Configuring it.", v20, v21, v22, v23, v50);
        sub_1003377AC(*(void *)(a1 + 24));
        uint64_t v24 = sub_10030ACD0(*(void *)(a1 + 24));
        uint64_t v25 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = v24;

        uint64_t v26 = sub_100313DC8(*(void *)(a1 + 24));
        uint64_t v27 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = v26;

        uint64_t v28 = sub_100313DBC(*(void *)(a1 + 24));
        unsigned int v29 = *(void **)(a1 + 136);
        *(void *)(a1 + 136) = v28;

        uint64_t v17 = @"waiting for key configuration from remote reader";
        uint64_t v18 = 183;
        goto LABEL_30;
      case 6:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 188, @"Received key configuration, pause session", v10, v11, v12, v13, v50);
        [*(id *)(a1 + 88) readApdu];
        objc_super v30 = *(void **)(a1 + 88);
        _[v30 pauseSession];
        return;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 194, @"Wait for SE interaction", v10, v11, v12, v13, v50);
        id v51 = objc_loadWeakRetained((id *)(a1 + 112));
        [v51 handleRemoteConfigurationReceived];
        goto LABEL_34;
      case 8:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 199, @"Received key from SE, resume session to send it to remote reader", v10, v11, v12, v13, v50);
        uint64_t v31 = *(void **)(a1 + 88);
        _[v31 resumeSessionWithTimeout];
        return;
      case 9:
        uint64_t v17 = @"Wait for remote reader to retrieve data";
        uint64_t v18 = 204;
        goto LABEL_30;
      case 10:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 209, @"Sent all key data to remote reader", v10, v11, v12, v13, v50);
        [*(id *)(a1 + 88) readApdu];
        NSErrorUserInfoKey v32 = *(void **)(a1 + 88);
        [v32 endSession];
        return;
      case 11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 215, @"Wait for mailbox configuration to complete.", v10, v11, v12, v13, v50);
        id v51 = objc_loadWeakRetained((id *)(a1 + 112));
        [v51 handleKeysExchangeDoneWaitForMailboxes];
        goto LABEL_34;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 221, @"Mailboxes configured successfully", v10, v11, v12, v13, v50);
        id v51 = objc_loadWeakRetained((id *)(a1 + 112));
        [v51 handleMailboxConfigurationDone];
        goto LABEL_34;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 226, @"First transaction cancelled", v10, v11, v12, v13, v50);
        [*(id *)(a1 + 88) reset];
        uint64_t v33 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
        id v34 = +[NSString stringWithUTF8String:KmlErrorString(8)];
        uint64_t v55 = v34;
        uint64_t v35 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
        uint64_t v36 = +[NSError errorWithDomain:v33 code:8 userInfo:v35];
        id v37 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = v36;

        sub_1002FBCEC(a1, 14);
        return;
      case 14:
        CFStringRef v38 = *(const __CFString **)(a1 + 48);
        if (!v38) {
          CFStringRef v38 = @"success";
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 233, @"First transaction done with %@", v10, v11, v12, v13, (uint64_t)v38);
        id v39 = objc_loadWeakRetained((id *)(a1 + 112));
        [v39 handleFirstPostPairingTransactionEndResult:*(void *)(a1 + 48)];

        long long v40 = *(void **)(a1 + 88);
        [v40 reset];
        return;
      case 15:
        [*(id *)(a1 + 88) reset];
        id v51 = objc_loadWeakRetained((id *)(a1 + 112));
        [v51 handleProbingCompletionWithBrandCode:*(void *)(a1 + 104) error:*(void *)(a1 + 48)];
        goto LABEL_34;
      case 16:
        uint64_t v17 = @"Error occured. Waiting for Op Control Flow from remote reader to finish this pairing attempt.";
        uint64_t v18 = 244;
LABEL_30:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", v18, v17, v10, v11, v12, v13, v50);
        long long v41 = *(void **)(a1 + 88);
        [v41 readApdu];
        return;
      case 17:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 249, @"Encountered error in Data Exchange interaction, error: %@", v10, v11, v12, v13, *(void *)(a1 + 48));
        [*(id *)(a1 + 88) pairingEndedWithResult:*(void *)(a1 + 48)];
        [*(id *)(a1 + 88) reset];
        id v51 = objc_loadWeakRetained((id *)(a1 + 112));
        [v51 handlePairingTransportSessionFailedWithError:*(void *)(a1 + 48)];
LABEL_34:

        return;
      case 18:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager setCurrentState_sync:]", 256, @"Pairing cancelled", v10, v11, v12, v13, v50);
        uint64_t v42 = *(void **)(a1 + 88);
        uint64_t v43 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v52 = NSLocalizedDescriptionKey;
        __int16 v44 = +[NSString stringWithUTF8String:KmlErrorString(1)];
        uint64_t v53 = v44;
        uint64_t v45 = +[NSDictionary dictionaryWithObjects:&v53 forKeys:&v52 count:1];
        uint64_t v46 = +[NSError errorWithDomain:v43 code:1 userInfo:v45];
        [v42 pairingEndedWithResult:v46];

        [*(id *)(a1 + 88) reset];
        id v47 = objc_loadWeakRetained((id *)(a1 + 112));
        [v47 handleOwnerPairingCancellationWithResult:1];

        return;
      default:
        return;
    }
  }
}

uint64_t sub_1002FC56C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 64));
    uint64_t v7 = 0;
    uint64_t v8 = &v7;
    uint64_t v9 = 0x2020000000;
    char v10 = 1;
    unint64_t v2 = *(NSObject **)(v1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FC698;
    block[3] = &unk_10040D310;
    block[4] = v1;
    void block[5] = &v7;
    dispatch_sync(v2, block);
    if (*((unsigned char *)v8 + 24))
    {
      int v3 = *(NSObject **)(v1 + 64);
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      void v5[2] = sub_1002FC6B4;
      v5[3] = &unk_10040B880;
      v5[4] = v1;
      dispatch_async(v3, v5);
      uint64_t v1 = *((unsigned char *)v8 + 24) != 0;
    }
    else
    {
      uint64_t v1 = 0;
    }
    _Block_object_dispose(&v7, 8);
  }
  return v1;
}

uint64_t sub_1002FC698(uint64_t result)
{
  if (*(void *)(*(void *)(result + 32) + 8)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 40) + 8) + 24) = 0;
  }
  return result;
}

void sub_1002FC6B4(uint64_t a1)
{
  sub_100319490(*(void *)(*(void *)(a1 + 32) + 72));
  uint64_t v2 = *(void *)(a1 + 32);

  sub_1002FBCEC(v2, 1);
}

void sub_1002FC6F8(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    uint64_t v13 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FC808;
    block[3] = &unk_10040D5C0;
    block[4] = a1;
    id v15 = v9;
    id v16 = v10;
    id v17 = v11;
    id v18 = v12;
    dispatch_async(v13, block);
  }
}

void sub_1002FC808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 8) == 7)
  {
    id v10 = sub_1002FB380((id *)[KmlKeyDataTransmitter alloc], *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56), *(void **)(a1 + 64));
    sub_10031455C(*(void *)(*(void *)(a1 + 32) + 72), v10);
    sub_1002FBCEC(*(void *)(a1 + 32), 8);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager continueKeyExchangeWithDeviceCertificate:instanceAttestation:keyAttestation:keyName:]_block_invoke", 293, @"We are not waiting for SE interaction. ignore request to exchange owner key", a5, a6, a7, a8, a9);
  }
}

void sub_1002FC8C4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FC940;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002FC940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(uint64_t *)(v9 + 8) > 11)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlDataExchangeManager *)"pairing already done cancelOwnerPairing], a5, a6, a7, a8, v10);
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 112));
    [WeakRetained handleOwnerPairingCancellationWithResult:0];
  }
  else
  {
    sub_1002FBCEC(v9, 18);
  }
}

void sub_1002FC9E4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FCA60;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002FCA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 8) == 7)
  {
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
    id v11 = +[NSString stringWithUTF8String:KmlErrorString(15)];
    uint64_t v23 = v11;
    id v12 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v10 code:15 userInfo:v12];
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = *(void **)(v14 + 48);
    *(void *)(v14 + 48) = v13;

    sub_1002FCBE4(*(void *)(a1 + 32), 7, v16, v17, v18, v19, v20, v21);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager reportKeyCreationFailed]_block_invoke", 320, @"We are not waiting for SE interaction. ignore request to report key creation failure", a5, a6, a7, a8, a9);
  }
}

void sub_1002FCBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    *(void *)(a1 + 40) = a2;
    if (a2 == 7)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager reportErrorOnMessage:]", 457, @"Reporting key creation error in get data, needs transport session established.", a5, a6, a7, a8, v10);
      uint64_t v9 = 8;
    }
    else
    {
      uint64_t v9 = 16;
    }
    sub_1002FBCEC(a1, v9);
  }
}

id sub_1002FCC54(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    uint64_t v2 = sub_10031C120(v1[9]);
    objc_sync_exit(v1);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_1002FCCB8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id *sub_1002FCCCC(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[7];
    uint64_t v1 = vars8;
  }
  return a1;
}

id *sub_1002FCCFC(id *a1)
{
  if (a1)
  {
    a1 = [a1[11] getSecureElementSession];
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_1002FCD30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(NSObject **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _OWORD v6[2] = sub_1002FCDD8;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002FCDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) == 11) {
    _[*(id *)(v9 + 88) startTransactionForKeyWithIdentifier:*(void *)(a1 + 40)];
  }
  else {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager startMailboxConfigurationForKeyIdentifier:]_block_invoke", 350, @"Key exchange is not done to configure mailboxes", a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1002FCE14(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 64));
    uint64_t v10 = 0;
    id v11 = &v10;
    uint64_t v12 = 0x2020000000;
    char v13 = 1;
    id v4 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FCF68;
    block[3] = &unk_10040D310;
    block[4] = a1;
    void block[5] = &v10;
    dispatch_sync(v4, block);
    if (*((unsigned char *)v11 + 24))
    {
      id v5 = *(NSObject **)(a1 + 64);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _OWORD v7[2] = sub_1002FCFC0;
      _OWORD v7[3] = &unk_10040D1A0;
      v7[4] = a1;
      id v8 = v3;
      dispatch_async(v5, v7);

      a1 = *((unsigned char *)v11 + 24) != 0;
    }
    else
    {
      a1 = 0;
    }
    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_1002FCF68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(*(void *)(a1 + 32) + 8) != 12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager startFirstPostPairingTransactionForKeyIdentifier:]_block_invoke", 365, @"pairing not done yet, can't start first transaction.", a5, a6, a7, a8, v9);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
}

id sub_1002FCFC0(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 88) startTransactionForKeyWithIdentifier:*(void *)(a1 + 40)];
}

void sub_1002FCFCC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FD048;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002FD048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) == 12) {
    sub_1002FBCEC(v9, 13);
  }
  else {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager cancelFirstPostPairingTransaction]_block_invoke", 383, @"First transaction hasn't started. Nothing to cancel", a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1002FD07C(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 64));
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x2020000000;
    char v8 = 1;
    uint64_t v2 = *(NSObject **)(v1 + 64);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_1002FD160;
    unint64_t v4[3] = &unk_10040D310;
    v4[4] = v1;
    v4[5] = &v5;
    dispatch_sync(v2, v4);
    if (*((unsigned char *)v6 + 24))
    {
      sub_1002FBCEC(v1, 1);
      uint64_t v1 = *((unsigned char *)v6 + 24) != 0;
    }
    else
    {
      uint64_t v1 = 0;
    }
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_1002FD160(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 8)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
  }
  else {
    sub_100319490(*(void *)(v1 + 72));
  }
}

void sub_1002FD184(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FD200;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_1002FD200(uint64_t a1)
{
  uint64_t v2 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  id v3 = +[NSString stringWithUTF8String:KmlErrorString(31)];
  uint64_t v9 = v3;
  id v4 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];
  uint64_t v5 = +[NSError errorWithDomain:v2 code:31 userInfo:v4];
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 48);
  *(void *)(v6 + 48) = v5;

  sub_1002FBCEC(*(void *)(a1 + 32), 15);
}

void sub_1002FD31C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1002FD398;
    block[3] = &unk_10040B880;
    block[4] = a1;
    dispatch_async(v1, block);
  }
}

id sub_1002FD398(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 88) reset];
}

void sub_1002FD3A4(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(NSObject **)(a1 + 64);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1002FD478;
    v10[3] = &unk_1004199D0;
    char v14 = a3;
    id v11 = v7;
    uint64_t v12 = a1;
    id v13 = v8;
    dispatch_async(v9, v10);
  }
}

id sub_1002FD478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9)
  {
    if (*(unsigned char *)(a1 + 56) && *(void *)(*(void *)(a1 + 40) + 144) == 1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager pairingEndedWithResult:uwbSupport:keyIdentifier:]_block_invoke", 431, @"Paired UWB capable key over NFC. Kick first approach.", a5, a6, a7, a8, v12);
      sub_100314F88((uint64_t)KmlPairingTransportFactory, *(void **)(a1 + 48));
      uint64_t v9 = *(void *)(a1 + 32);
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  uint64_t v10 = *(void **)(*(void *)(a1 + 40) + 88);

  return [v10 pairingEndedWithResult:v9];
}

uint64_t sub_1002FD508(uint64_t result)
{
  if (result) {
    return (*(_DWORD *)(result + 16) << 16) | (*(unsigned __int8 *)(result + 96) << 8) | [*(id *)(result + 88) stepForAnalytics];
  }
  return result;
}

void sub_1002FD550(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (a1)
  {
    char v36 = 1;
    if (v3)
    {
      uint64_t v9 = [KmlApduRequest alloc];
      id v10 = v8;
      id v11 = [v10 bytes];
      id v12 = [v10 length];
      id v13 = *(void **)(a1 + 24);
      id v35 = 0;
      char v14 = sub_100315060((uint64_t *)v9, v11, (unint64_t)v12, v13, &v35);
      id v15 = v35;
      if (sub_1003158E4((BOOL)v14))
      {
        uint64_t v16 = sub_100056FE4((uint64_t)v14);
        uint64_t v17 = sub_10030ACB8((uint64_t)v14);
        +[CertificationLogging logEncryptedAPDU:v16 decrypted:v17];
      }
      uint64_t v18 = sub_100315628(v14);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleReceivedAPDU:]", 479, @"APDU Payload is : %@", v19, v20, v21, v22, (uint64_t)v18);

      if (v15)
      {
        id v23 = [v15 code];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleReceivedAPDU:]", 482, @"KmlApduRequest got error: code = 0x%02lx", v24, v25, v26, v27, (uint64_t)v23);
        uint64_t v28 = sub_100312A1C(0x100452000, bswap32([v15 code]) >> 16, 0);
      }
      else
      {
        if (*(void *)(a1 + 40))
        {
          id v34 = 0;
          uint64_t v28 = sub_1002FD7AC(a1, v14, &v36, &v34);
          id v29 = v34;
        }
        else
        {
          id v33 = 0;
          uint64_t v28 = sub_1002FD9AC(a1, v14, &v36, &v33);
          id v29 = v33;
        }
        id v15 = v29;
      }
      if (sub_1003155F4((BOOL)v14)) {
        objc_super v30 = *(void **)(a1 + 24);
      }
      else {
        objc_super v30 = 0;
      }
      uint64_t v31 = sub_100312D68((uint64_t)v28, v30);
      [*(id *)(a1 + 88) sendApdu:v31];
      if (v36) {
        [*(id *)(a1 + 88) readApdu];
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleReceivedAPDU:]", 470, @"received nil apdu. Nothing to be done", v4, v5, v6, v7, v32);
    }
  }
}

id sub_1002FD7AC(uint64_t a1, void *a2, unsigned char *a3, id *a4)
{
  id v11 = a2;
  if (a1)
  {
    switch(*(void *)(a1 + 40))
    {
      case 0:
        id v12 = @"Strangely not expecting a command to communicate error";
        uint64_t v13 = 577;
        goto LABEL_4;
      case 1:
      case 2:
      case 3:
      case 4:
      case 6:
      case 8:
        id v12 = @"We should never expect one of these commands when waiting for reporting error.";
        uint64_t v13 = 605;
LABEL_4:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", v13, v12, v7, v8, v9, v10, v16);
        goto LABEL_5;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", 592, @"Expecting OpControlFlow", v7, v8, v9, v10, v16);
        if (!sub_100315570((BOOL)v11)) {
          goto LABEL_5;
        }
        char v14 = sub_1002FD9AC(a1, v11, a3, a4);
        *a3 = 0;
        goto LABEL_16;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", 580, @"Expecting Select followed by Get Data", v7, v8, v9, v10, v16);
        if (sub_1003154AC((BOOL)v11))
        {
          sub_100319490(*(void *)(a1 + 72));
          char v14 = sub_1002FD9AC(a1, v11, a3, a4);
        }
        else
        {
          if (!sub_1003154F8((BOOL)v11))
          {
LABEL_5:
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleBail:continueReading:error:]", 610, @"Did not receive expected command", v7, v8, v9, v10, v16);
            char v14 = sub_100312A1C(0x100452000, 34153, 0);
            sub_1002FBCEC(a1, 17);
            break;
          }
          char v14 = sub_100312A1C(0x100452000, 100, 0);
LABEL_16:
          sub_1002FBCEC(a1, 17);
        }
        if (!v14) {
          goto LABEL_5;
        }
        break;
      default:
        goto LABEL_5;
    }
  }
  else
  {
    char v14 = 0;
  }

  return v14;
}

id sub_1002FD9AC(uint64_t a1, void *a2, unsigned char *a3, id *a4)
{
  if (a1)
  {
    id v11 = sub_1003199EC(*(void **)(a1 + 72), a2, a4);
    if (*a4)
    {
      if (*(void *)(a1 + 8) == 4)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 507, @"Did not receive successful PakeVerify - %@", v7, v8, v9, v10, (uint64_t)*a4);
        objc_storeStrong((id *)(a1 + 48), *a4);
        if (sub_10030ACD0(*(void *)(a1 + 72)) != 5 || sub_100313DC8(*(void *)(a1 + 72)) != 3)
        {
          *a3 = 1;
          *(void *)(a1 + 40) = 5;
          uint64_t v21 = a1;
          uint64_t v22 = 16;
          goto LABEL_12;
        }
        *(unsigned char *)(a1 + 96) = sub_10031C150(*(void *)(a1 + 72));
      }
      else
      {
        objc_storeStrong((id *)(a1 + 48), *a4);
        uint64_t v16 = sub_10030ACD0(*(void *)(a1 + 72));
        [*a4 code];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 520, @"commandType = %ld, got error code = 0x%02lx, stop reading.", v17, v18, v19, v20, v16);
      }
      *a3 = 0;
      uint64_t v21 = a1;
      uint64_t v22 = 17;
LABEL_12:
      sub_1002FBCEC(v21, v22);
      goto LABEL_13;
    }
    switch(sub_10030ACD0(*(void *)(a1 + 72)))
    {
      case 0:
      case 4:
      case 7:
      case 8:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 564, @"No state change needed.", v12, v13, v14, v15, v36);
        break;
      case 1:
        uint64_t v21 = a1;
        uint64_t v22 = 3;
        goto LABEL_12;
      case 2:
        if (*(void *)(a1 + 32))
        {
          uint64_t v21 = a1;
          uint64_t v22 = 4;
        }
        else
        {
          *(void *)(a1 + 104) = sub_100313DE0(*(void *)(a1 + 72));
          *a3 = 0;
          uint64_t v21 = a1;
          uint64_t v22 = 15;
        }
        goto LABEL_12;
      case 3:
        uint64_t v21 = a1;
        uint64_t v22 = 5;
        goto LABEL_12;
      case 5:
      case 6:
        if (sub_100313DC8(*(void *)(a1 + 72)) == 2)
        {
          if (*(void *)(a1 + 8) == 9)
          {
            uint64_t v24 = sub_10031C0EC(*(uint64_t **)(a1 + 72));
            uint64_t v25 = *(void **)(a1 + 56);
            *(void *)(a1 + 56) = v24;

            uint64_t v21 = a1;
            uint64_t v22 = 10;
            goto LABEL_12;
          }
          uint64_t v26 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
          uint64_t v27 = +[NSString stringWithUTF8String:KmlErrorString(14)];
          CFStringRef v38 = v27;
          uint64_t v28 = +[NSDictionary dictionaryWithObjects:&v38 forKeys:&v37 count:1];
          uint64_t v29 = +[NSError errorWithDomain:v26 code:14 userInfo:v28];
          objc_super v30 = *(void **)(a1 + 48);
          *(void *)(a1 + 48) = v29;

          sub_1002FBCEC(a1, 17);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleIncomingCommand:continueReading:error:]", 538, @"Remote Reader sent end message in wrong state. Treating it as abort, stop reading.", v31, v32, v33, v34, v36);
          *a3 = 0;
          uint64_t v35 = sub_100312A1C(0x100452000, 32874, 0);

          id v11 = (void *)v35;
        }
        else if (sub_100313DC8(*(void *)(a1 + 72)) == 4 && *(void *)(a1 + 8) == 5)
        {
          sub_1002FBCEC(a1, 6);
          sub_100319490(*(void *)(a1 + 72));
        }
        break;
      default:
        break;
    }
  }
  else
  {
    id v11 = 0;
  }
LABEL_13:

  return v11;
}

void sub_1002FDE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) == 1)
  {
    if (*(void *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionStartResult:]_block_invoke", 633, @"Error in starting session - %@", a5, a6, a7, a8, *(void *)(a1 + 40));
      uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
      id v11 = +[NSString stringWithUTF8String:KmlErrorString(9)];
      uint64_t v19 = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      uint64_t v13 = +[NSError errorWithDomain:v10 code:9 userInfo:v12];
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void **)(v14 + 48);
      *(void *)(v14 + 48) = v13;

      sub_1002FBCEC(*(void *)(a1 + 32), 17);
    }
    else
    {
      sub_1002FBCEC(v9, 2);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleSessionStartResult:]_block_invoke", 627, @"Not expecting session start. Ignore it.", a5, a6, a7, a8, v17);
    uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 88);
    [v16 readApdu];
  }
}

void sub_1002FE0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) == 8)
  {
    if (*(void *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionResumeResult:]_block_invoke", 655, @"Error in resuming session - %@", a5, a6, a7, a8, *(void *)(a1 + 40));
      uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
      id v11 = +[NSString stringWithUTF8String:KmlErrorString(9)];
      uint64_t v20 = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      uint64_t v13 = +[NSError errorWithDomain:v10 code:9 userInfo:v12];
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void **)(v14 + 48);
      *(void *)(v14 + 48) = v13;

      sub_1002FBCEC(*(void *)(a1 + 32), 17);
    }
    else
    {
      if (*(void *)(v9 + 40) == 7) {
        uint64_t v17 = 16;
      }
      else {
        uint64_t v17 = 9;
      }
      sub_1002FBCEC(v9, v17);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleSessionResumeResult:]_block_invoke", 649, @"Not expecting session start. Ignore it.", a5, a6, a7, a8, v18);
    uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 88);
    [v16 readApdu];
  }
}

void sub_1002FE3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionPauseResult:]_block_invoke", 674, @"Error in session disconnect - %@", a5, a6, a7, a8, *(void *)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 40);
    if (!*(void *)(v9 + 48))
    {
      objc_storeStrong((id *)(v9 + 48), *(id *)(a1 + 32));
      uint64_t v9 = *(void *)(a1 + 40);
    }
    uint64_t v10 = 17;
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (*(void *)(v9 + 8) != 6)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionPauseResult:]_block_invoke", 685, @"received pause in wrong state.", a5, a6, a7, a8, v17);
      id v11 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
      uint64_t v12 = +[NSString stringWithUTF8String:KmlErrorString(24)];
      NSErrorUserInfoKey v19 = v12;
      uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
      uint64_t v14 = +[NSError errorWithDomain:v11 code:24 userInfo:v13];
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void **)(v15 + 48);
      *(void *)(v15 + 48) = v14;

      sub_1002FBCEC(*(void *)(a1 + 40), 17);
      return;
    }
    uint64_t v10 = 7;
  }

  sub_1002FBCEC(v9, v10);
}

void sub_1002FE678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v10)
  {
    if (!*(void *)(v9 + 48))
    {
      objc_storeStrong((id *)(v9 + 48), v10);
      uint64_t v9 = *(void *)(a1 + 40);
    }
    uint64_t v11 = 17;
  }
  else
  {
    if (*(void *)(v9 + 8) != 10)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDataExchangeManager handleSessionEndResult:]_block_invoke", 707, @"received end in wrong state.", a5, a6, a7, a8, v18);
      uint64_t v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
      uint64_t v13 = +[NSString stringWithUTF8String:KmlErrorString(24)];
      uint64_t v20 = v13;
      uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      uint64_t v15 = +[NSError errorWithDomain:v12 code:24 userInfo:v14];
      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(void **)(v16 + 48);
      *(void *)(v16 + 48) = v15;

      sub_1002FBCEC(*(void *)(a1 + 40), 17);
      return;
    }
    uint64_t v11 = 11;
  }

  sub_1002FBCEC(v9, v11);
}

void sub_1002FE904(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    if (*(void *)(v3 + 8) == 11)
    {
      objc_storeStrong((id *)(v3 + 48), v1);
      uint64_t v3 = *(void *)(a1 + 40);
      uint64_t v4 = 17;
    }
    else
    {
      uint64_t v4 = 14;
    }
    sub_1002FBCEC(v3, v4);
  }
}

void sub_1002FEA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  if (v10 == 12)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 743, @"Received didEndTransaction during first transaction. Error: %@", a5, a6, a7, a8, *(void *)(a1 + 40));
    if (*(void *)(a1 + 40))
    {
      uint64_t v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      if ([*(id *)(a1 + 40) code] == (id)23) {
        uint64_t v19 = 10;
      }
      else {
        uint64_t v19 = 7;
      }
      NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
      if ([*(id *)(a1 + 40) code] == (id)23) {
        int v20 = 10;
      }
      else {
        int v20 = 7;
      }
      uint64_t v21 = +[NSString stringWithUTF8String:KmlErrorString(v20)];
      uint64_t v28 = v21;
      uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
      uint64_t v23 = +[NSError errorWithDomain:v18 code:v19 userInfo:v22];
      uint64_t v24 = *(void *)(a1 + 32);
      uint64_t v25 = *(void **)(v24 + 48);
      *(void *)(v24 + 48) = v23;
    }
    sub_1002FBCEC(*(void *)(a1 + 32), 14);
  }
  else if (v10 == 11)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 734, @"While waiting for mailboxes, transaction session ended with - %@.", a5, a6, a7, a8, *(void *)(a1 + 40));
    uint64_t v15 = *(void **)(a1 + 40);
    if (v15)
    {
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 48), v15);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = 17;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDataExchangeManager handleTransactionEndResult:]_block_invoke", 739, @"Transaction was successful", v11, v12, v13, v14, v26);
      uint64_t v16 = *(void *)(a1 + 32);
      uint64_t v17 = 12;
    }
    sub_1002FBCEC(v16, v17);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlDataExchangeManager *)"Received didEndTransaction callback handleTransactionEndResult:but we don't care about it in this state. Ignore""], a5, a6, a7, a8, a9);
  }
}

void sub_1002FED7C(uint64_t a1)
{
}

id *sub_1002FED88(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 14, a2);
  }
  return result;
}

uint64_t sub_1002FED98(uint64_t result)
{
  if (result) {
    return *(void *)(result + 120);
  }
  return result;
}

uint64_t sub_1002FEDA4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 128);
  }
  return result;
}

uint64_t sub_1002FEDB0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 136);
  }
  return result;
}

uint64_t sub_1002FEDBC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 144);
  }
  return result;
}

id sub_1002FF07C(void *a1)
{
  return _[*(id *)(a1[4] + 16) didReceiveSharingInvitationWithIdentifier:a1[5] fromOriginatorIDSHandle:a1[6] sharingSessionIdentifier:a1[7] metadata:a1[8] completion:&stru_100419A10];
}

void sub_1002FF09C(id a1, BOOL a2)
{
  CFStringRef v6 = @"un-";
  if (a2) {
    CFStringRef v6 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter didReceiveSharingInvitationWithIdentifier:uuid:metadata:ownerIdsId:]_block_invoke_2", 53, @"Reported to wallet %@%@", v2, v3, v4, v5, (uint64_t)v6);
}

id sub_1002FF1BC(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) finishedKeyExchangeForCredential:*(void *)(a1 + 40) withCompletion:&stru_100419A30];
}

void sub_1002FF1D0(id a1, BOOL a2)
{
  CFStringRef v6 = @"un-";
  if (a2) {
    CFStringRef v6 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter finishedSharingForKey:result:]_block_invoke_2", 68, @"Reported to wallet %@%@", v2, v3, v4, v5, (uint64_t)v6);
}

id sub_1002FF2E8(void *a1)
{
  return _[*(id *)(a1[4] + 16) didUpdateSharingInvitationWithIdentifier:a1[5] reason:a1[6] completion:&stru_100419A50];
}

void sub_1002FF304(id a1, BOOL a2)
{
  CFStringRef v6 = @"un-";
  if (a2) {
    CFStringRef v6 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter reportUnusableInvitation:reason:]_block_invoke_2", 81, @"Reported to wallet %@%@", v2, v3, v4, v5, (uint64_t)v6);
}

id sub_1002FF460(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter sharingCompleteForInvitationIdentifier:friendKeyIdentifier:status:]_block_invoke", 95, @"Invitation ID: %@, friendKeyID : %@", a5, a6, a7, a8, a1[4]);
  uint64_t v9 = a1[7];
  uint64_t v10 = *(void **)(a1[6] + 16);
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];

  return _[v10 sharingInvitationWasInvalidated:v11 withCredentialIdentifier:v12 error:v9 completion:&stru_100419A70];
}

void sub_1002FF4D0(id a1, BOOL a2)
{
  CFStringRef v6 = @"un-";
  if (a2) {
    CFStringRef v6 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter sharingCompleteForInvitationIdentifier:friendKeyIdentifier:status:]_block_invoke_2", 97, @"Reported to wallet %@%@", v2, v3, v4, v5, (uint64_t)v6);
}

void sub_1002FF688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1002FF6A0(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = *(void **)(a1[4] + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1002FF71C;
  unint64_t v4[3] = &unk_100419AC0;
  v4[4] = a1[6];
  return [v2 didReceiveSharingInvitationRequest:v1 withCompletion:v4];
}

void sub_1002FF71C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a2;
  CFStringRef v10 = @"un-";
  if (a2) {
    CFStringRef v10 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter didReceiveInvitationRequestWithUuid:ownerKeyIdentifier:friendKeyIdentifier:targetType:]_block_invoke_2", 115, @"Reported to wallet %@%@", a5, a6, a7, a8, (uint64_t)v10);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
}

id sub_1002FF938(void *a1)
{
  return _[*(id *)(a1[4] + 16) sendSharingMessageTo:a1[5] message:a1[6] completion:&stru_100419B28];
}

void sub_1002FF954(id a1, BOOL a2, NSError *a3)
{
  CFStringRef v7 = @"un-";
  if (a2) {
    CFStringRef v7 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter sendCrossPlatformSharingMessage:toMailboxIdentifier:]_block_invoke_2", 150, @"Handed the message to wallet %@%@; error - %@",
    v3,
    v4,
    v5,
    v6,
    (uint64_t)v7);
}

id sub_1002FFA5C(void *a1)
{
  return _[*(id *)(a1[4] + 16) didReceiveActivationCodeFailureForCredentialIdentifier:a1[5] attemptsRemaining:a1[6] completion:&stru_100419B48];
}

void sub_1002FFA78(id a1, BOOL a2)
{
  CFStringRef v6 = @"un-";
  if (a2) {
    CFStringRef v6 = &stru_100421848;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlWalletReporter passcodeRetryRequestedFor:retriesLeft:]_block_invoke_2", 159, @"Reported passcode verification failure to wallet %@%@", v2, v3, v4, v5, (uint64_t)v6);
}

void sub_1002FFB6C(id a1)
{
  uint64_t v1 = objc_alloc_init(KmlVersionOverride);
  uint64_t v2 = (void *)qword_100468340;
  qword_100468340 = (uint64_t)v1;
}

uint64_t sub_1002FFCE4(uint64_t result, void *a2)
{
  if (result) {
    return sub_1002FFCF4(result, a2, 0);
  }
  return result;
}

uint64_t sub_1002FFCF4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v35.receiver = (id)a1;
    v35.super_class = (Class)KmlVersions;
    char v8 = (char *)[super init];
    a1 = (uint64_t)v8;
    if (v8)
    {
      *((_WORD *)v8 + 8) = 0;
      uint64_t v9 = (id *)(v8 + 8);
      objc_storeStrong((id *)v8 + 1, a2);
      CFStringRef v10 = *(void **)(a1 + 8);
      if (v10)
      {
        *(unsigned char *)(a1 + 17) = 1;
        uint64_t v11 = [v10 readerInfo];
        id v12 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v11];
        uint64_t v13 = objc_opt_new();
        if (v7) {
          goto LABEL_6;
        }
        uint64_t v14 = [v12 manufacturer];
        uint64_t v15 = [v12 brand];
        uint64_t v16 = [*v9 readerConfigID];
        id v7 = [v13 BOOLValueForSetting:1 manufacturer:v14 brand:v15 uuid:v16 error:0];

        if (v7) {
LABEL_6:
        }
          *(unsigned char *)(a1 + 17) = [v7 BOOLValue];
        uint64_t v17 = [v12 manufacturer];
        uint64_t v18 = [v12 brand];
        uint64_t v19 = [*v9 readerConfigID];
        int v20 = [v13 BOOLValueForSetting:3 manufacturer:v17 brand:v18 uuid:v19 error:0];

        if (v20) {
          *(unsigned char *)(a1 + 16) = [v20 BOOLValue];
        }
      }
      uint64_t v21 = +[KmlVersionOverride sharedVersionsOverrides];
      *(_WORD *)(a1 + 32) = (unsigned __int16)[v21 keyRoleToShare];
      uint64_t v22 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = &off_10042DA30;

      *(_WORD *)(a1 + 22) = 256;
      if ([v21 kmlOverrideVersion] == 768 && !*(unsigned char *)(a1 + 17))
      {
        objc_super v30 = *(void **)(a1 + 96);
        *(void *)(a1 + 96) = &off_10042DA48;

        uint64_t v31 = *(void **)(a1 + 104);
        *(void *)(a1 + 104) = &off_10042DA60;

        *(_WORD *)(a1 + 18) = 768;
        uint64_t v32 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = &off_10042DA78;

        uint64_t v33 = *(void **)(a1 + 128);
        *(void *)(a1 + 128) = &off_10042DA90;

        *(_WORD *)(a1 + 26) = 768;
      }
      else
      {
        sub_1002FFF98(a1);
      }
      sub_10030001C(a1, v23, v24, v25, v26, v27, v28, v29, (uint64_t)v35.receiver);
    }
  }

  return a1;
}

void sub_1002FFF98(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = &off_10042DAA8;

    uint64_t v3 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = &off_10042DAC0;

    *(_WORD *)(a1 + 18) = 256;
    uint64_t v4 = *(void **)(a1 + 120);
    *(void *)(a1 + 120) = &off_10042DAD8;

    uint64_t v5 = *(void **)(a1 + 128);
    *(void *)(a1 + 128) = &off_10042DAF0;

    *(_WORD *)(a1 + 26) = 256;
  }
}

void sub_10030001C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    sub_1003021AC(a1);
    sub_100301074(a1);
    sub_100302304(a1);
    sub_10030205C(a1, v10, v11, v12, v13, v14, v15, v16, a9);
  }
}

void sub_100300278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(_WORD *)(a1 + 18) == 256)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlVersions *)"We are already at v1 downgradePreferredVersion], a5, a6, a7, a8, a9);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions downgradePreferredVersion]", 210, @"Let's downgrade to v1", a5, a6, a7, a8, v17);
      *(unsigned char *)(a1 + 17) = 1;
      sub_1002FFF98(a1);
      sub_10030001C(a1, v10, v11, v12, v13, v14, v15, v16, a9);
    }
  }
}

id sub_100300320(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 length])
    {
      sub_100315960((uint64_t)KmlTlv, v4);
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v16;
        while (2)
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v7) {
              objc_enumerationMutation(v5);
            }
            uint64_t v9 = *(id **)(*((void *)&v15 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v9) == 93)
            {
              sub_100315FB4(v9);
              id v6 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_13;
            }
          }
          id v6 = [v5 countByEnumeratingWithState:&v15 objects:v21 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_13:

      if ((unint64_t)objc_msgSend(v6, "length", (void)v15) > 1)
      {
        id v6 = v6;
        uint64_t v13 = 0;
        *(_WORD *)(a1 + 28) = sub_100300608(a1, bswap32(*(unsigned __int16 *)[v6 bytes]) >> 16);
        goto LABEL_18;
      }
      uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
      uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      int v20 = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v20 forKeys:&v19 count:1];
      uint64_t v13 = +[NSError errorWithDomain:v10 code:22 userInfo:v12];
    }
    else
    {
      id v5 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      id v6 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      id v23 = v6;
      uint64_t v10 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      uint64_t v13 = +[NSError errorWithDomain:v5 code:22 userInfo:v10];
    }

LABEL_18:
    goto LABEL_19;
  }
  uint64_t v13 = 0;
LABEL_19:

  return v13;
}

uint64_t sub_100300608(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 120);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
LABEL_4:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v10 != v6) {
        objc_enumerationMutation(v3);
      }
      if (objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7), "unsignedShortValue", (void)v9) == a2) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v5) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    a2 = 768;
  }

  return a2;
}

id sub_100300714(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ([v3 length])
    {
      sub_100315960((uint64_t)KmlTlv, v4);
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      id v6 = [v5 countByEnumeratingWithState:&v25 objects:v31 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v26;
        while (2)
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v26 != v7) {
              objc_enumerationMutation(v5);
            }
            long long v9 = *(id **)(*((void *)&v25 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v9) == 92)
            {
              sub_100315FB4(v9);
              id v6 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v10 = sub_100316294((uint64_t)v9);
              long long v11 = *(void **)(a1 + 80);
              *(void *)(a1 + 80) = v10;

              goto LABEL_13;
            }
          }
          id v6 = [v5 countByEnumeratingWithState:&v25 objects:v31 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_13:

      if ((unint64_t)[v6 length] > 1)
      {
        id v17 = v6;
        int v18 = sub_100300A7C(a1, bswap32(*(unsigned __int16 *)[v17 bytes]) >> 16);
        *(_WORD *)(a1 + 24) = v18;
        if (v18)
        {
          long long v16 = 0;
          id v6 = v17;
LABEL_21:

          goto LABEL_22;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateVehicleSupportedAppletVersions:]", 270, @"Treating unknown vehicle applet version as v1", v19, v20, v21, v22, v25);
        *(_WORD *)(a1 + 24) = 256;
        uint64_t v13 = sub_100315DFC((uint64_t)KmlTlv, 92, 0x100u);
        uint64_t v23 = sub_100316294((uint64_t)v13);
        long long v16 = 0;
        uint64_t v14 = *(void **)(a1 + 80);
        *(void *)(a1 + 80) = v23;
      }
      else
      {
        long long v12 = *(void **)(a1 + 80);
        *(void *)(a1 + 80) = 0;

        uint64_t v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.sesd.kml.pairing", (void)v25);
        NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
        uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(22)];
        objc_super v30 = v14;
        long long v15 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
        long long v16 = +[NSError errorWithDomain:v13 code:22 userInfo:v15];
      }
    }
    else
    {
      id v5 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v32 = NSLocalizedDescriptionKey;
      id v6 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      id v33 = v6;
      uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
      long long v16 = +[NSError errorWithDomain:v5 code:22 userInfo:v13];
    }

    goto LABEL_21;
  }
  long long v16 = 0;
LABEL_22:

  return v16;
}

uint64_t sub_100300A7C(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 112);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
LABEL_4:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v10 != v6) {
        objc_enumerationMutation(v3);
      }
      if (objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7), "unsignedShortValue", (void)v9) == a2) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v5) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    a2 = 0;
  }

  return a2;
}

id sub_100300B88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ([v3 length])
    {
      sub_100315960((uint64_t)KmlTlv, v4);
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      id v6 = [v5 countByEnumeratingWithState:&v29 objects:v35 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v30;
        while (2)
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v30 != v7) {
              objc_enumerationMutation(v5);
            }
            long long v9 = *(id **)(*((void *)&v29 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v9) == 91)
            {
              sub_100315FB4(v9);
              id v6 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v10 = sub_100316294((uint64_t)v9);
              long long v11 = *(void **)(a1 + 64);
              *(void *)(a1 + 64) = v10;

              goto LABEL_13;
            }
          }
          id v6 = [v5 countByEnumeratingWithState:&v29 objects:v35 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_13:

      if ((unint64_t)[v6 length] > 1)
      {
        long long v16 = +[NSMutableString string];
        id v6 = v6;
        id v17 = (unsigned __int16 *)[v6 bytes];
        unsigned int v18 = sub_100300F68(a1, bswap32(*v17) >> 16);
        *(_WORD *)(a1 + 20) = v18;
        if (!v18)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateVehicleSupportedFrameworkVersions:]", 308, @"Treating unknown vehicle version as v1", v19, v20, v21, v22, v28);
          *(_WORD *)(a1 + 20) = 256;
          uint64_t v23 = sub_100315DFC((uint64_t)KmlTlv, 91, 0x100u);
          uint64_t v24 = sub_100316294((uint64_t)v23);
          long long v25 = *(void **)(a1 + 64);
          *(void *)(a1 + 64) = v24;

          unsigned int v18 = *(unsigned __int16 *)(a1 + 20);
        }
        [v16 appendFormat:@"%04X", v18];
        if ((unint64_t)[v6 length] >= 4) {
          [v16 appendFormat:@",%04X", __rev16(v17[1])];
        }
        long long v26 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = v16;

        if (*(_WORD *)(a1 + 20) == 768) {
          *(_WORD *)(a1 + 28) = 768;
        }
        sub_100301074(a1);
        a1 = 0;
        goto LABEL_24;
      }
      long long v12 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = 0;

      uint64_t v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v33 = NSLocalizedDescriptionKey;
      uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      uint64_t v34 = v14;
      long long v15 = +[NSDictionary dictionaryWithObjects:&v34 forKeys:&v33 count:1];
      a1 = +[NSError errorWithDomain:v13 code:22 userInfo:v15];
    }
    else
    {
      id v5 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      id v6 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      id v37 = v6;
      uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      a1 = +[NSError errorWithDomain:v5 code:22 userInfo:v13];
    }

LABEL_24:
  }

  return (id)a1;
}

uint64_t sub_100300F68(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 96);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v10;
LABEL_4:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v10 != v6) {
        objc_enumerationMutation(v3);
      }
      if (objc_msgSend(*(id *)(*((void *)&v9 + 1) + 8 * v7), "unsignedShortValue", (void)v9) == a2) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        if (v5) {
          goto LABEL_4;
        }
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    a2 = 0;
  }

  return a2;
}

void sub_100301074(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100315DFC((uint64_t)KmlTlv, 84, *(unsigned __int16 *)(a1 + 20));
    id v3 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = v2;
  }
}

id sub_1003010CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ([v3 length])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateSupportedFrameworkVersionsForSharing:]", 339, @"versionData: %@", v5, v6, v7, v8, (uint64_t)v4);
      sub_100315960((uint64_t)KmlTlv, v4);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      id v10 = [v9 countByEnumeratingWithState:&v32 objects:v38 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v33;
        while (2)
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v14 = *(id **)(*((void *)&v32 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v14) == 84 || sub_10005D5A8((uint64_t)v14) == 85)
            {
              sub_100315FB4(v14);
              id v15 = (id)objc_claimAutoreleasedReturnValue();
              goto LABEL_16;
            }
          }
          id v11 = [v9 countByEnumeratingWithState:&v32 objects:v38 count:16];
          id v15 = 0;
          if (v11) {
            continue;
          }
          break;
        }
      }
      else
      {
        id v15 = 0;
      }
LABEL_16:

      if ((unint64_t)[v15 length] > 1)
      {
        id v15 = v15;
        int v20 = sub_100300F68(a1, bswap32(*(unsigned __int16 *)[v15 bytes]) >> 16);
        *(_WORD *)(a1 + 22) = v20;
        if (v20
          || (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateSupportedFrameworkVersionsForSharing:]", 360, @"Treating unknown sharing version as v1 for sharing", v21, v22, v23, v24, v30), *(_WORD *)(a1 + 22) = 256, *(_WORD *)(a1 + 20)))
        {
          id v17 = 0;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions updateSupportedFrameworkVersionsForSharing:]", 363, @"Sync agreed vehicle version to v1", v25, v26, v27, v28, v31);
          id v17 = 0;
          *(_WORD *)(a1 + 20) = 256;
        }
        goto LABEL_22;
      }
      long long v16 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      unsigned int v18 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      id v37 = v18;
      uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      id v17 = +[NSError errorWithDomain:v16 code:22 userInfo:v19];
    }
    else
    {
      id v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
      id v15 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      id v40 = v15;
      long long v16 = +[NSDictionary dictionaryWithObjects:&v40 forKeys:&v39 count:1];
      id v17 = +[NSError errorWithDomain:v9 code:22 userInfo:v16];
    }

LABEL_22:
    goto LABEL_23;
  }
  id v17 = 0;
LABEL_23:

  return v17;
}

id sub_100301448(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ([v3 length])
    {
      sub_100315960((uint64_t)KmlTlv, v4);
      long long v18 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      id v6 = [v5 countByEnumeratingWithState:&v18 objects:v24 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v19;
        while (2)
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v19 != v7) {
              objc_enumerationMutation(v5);
            }
            id v9 = *(id **)(*((void *)&v18 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v9) == 94)
            {
              sub_100315FB4(v9);
              id v6 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v10 = sub_100316294((uint64_t)v9);
              id v11 = *(void **)(a1 + 136);
              *(void *)(a1 + 136) = v10;

              goto LABEL_13;
            }
          }
          id v6 = [v5 countByEnumeratingWithState:&v18 objects:v24 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_13:

      if ((unint64_t)objc_msgSend(v6, "length", (void)v18) > 1)
      {
        long long v16 = 0;
        *(_WORD *)(a1 + 30) = 256;
        goto LABEL_18;
      }
      uint64_t v12 = *(void **)(a1 + 136);
      *(void *)(a1 + 136) = 0;

      uint64_t v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      uint64_t v23 = v14;
      id v15 = +[NSDictionary dictionaryWithObjects:&v23 forKeys:&v22 count:1];
      long long v16 = +[NSError errorWithDomain:v13 code:22 userInfo:v15];
    }
    else
    {
      id v5 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
      id v6 = +[NSString stringWithUTF8String:KmlErrorString(22)];
      id v26 = v6;
      uint64_t v13 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
      long long v16 = +[NSError errorWithDomain:v5 code:22 userInfo:v13];
    }

LABEL_18:
    goto LABEL_19;
  }
  long long v16 = 0;
LABEL_19:

  return v16;
}

id sub_100301734(id a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = +[NSMutableData data];
    id v3 = v2;
    if (*((void *)v1 + 8)) {
      [v2 appendData:];
    }
    if (*((void *)v1 + 10)) {
      [v3 appendData:];
    }
    id v4 = sub_100301800((uint64_t)v1);
    [v3 appendData:v4];

    if ([*((id *)v1 + 17) length]) {
      [v3 appendData:*((void *)v1 + 17)];
    }
    if ([v3 length]) {
      id v1 = v3;
    }
    else {
      id v1 = 0;
    }
  }

  return v1;
}

id sub_100301800(uint64_t a1)
{
  if (a1)
  {
    id v1 = sub_100315DFC((uint64_t)KmlTlv, 93, *(unsigned __int16 *)(a1 + 28));
    uint64_t v2 = sub_100316294((uint64_t)v1);
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

unsigned __int16 *sub_10030186C(unsigned __int16 *a1)
{
  if (a1)
  {
    sub_100315DFC((uint64_t)KmlTlv, 85, a1[11]);
    a1 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

unsigned __int16 *sub_1003018B0(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a1[15])
    {
      sub_100315DFC((uint64_t)KmlTlv, 95, a1[15]);
      a1 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions getAgreedBluetoothVersionsTlv]", 435, @"Vehicle never provided a supported versiosn list", a5, a6, a7, a8, vars0);
      a1 = 0;
    }
    uint64_t v8 = vars8;
  }
  return a1;
}

BOOL sub_100301918(BOOL result)
{
  if (result)
  {
    int v1 = *(unsigned __int16 *)(result + 20);
    return v1 == 257 || v1 == 768;
  }
  return result;
}

id sub_100301934(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = +[NSMutableString string];
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = *(id *)(a1 + 96);
    id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v10;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v10 != v6) {
            objc_enumerationMutation(v3);
          }
          [v2 appendFormat:@"%04X,", [*(id *)(*((void *)&v9 + 1) + 8 * i) unsignedShortValue]];
        }
        id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v5);
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_100301A7C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7 = a3;
  if (!a1)
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    goto LABEL_38;
  }
  uint64_t v8 = +[NSMutableString string];
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  id v9 = v7;
  id v10 = [v9 countByEnumeratingWithState:&v59 objects:v65 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v60;
    do
    {
      for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v60 != v12) {
          objc_enumerationMutation(v9);
        }
        [v8 appendFormat:@"0x%04lx, ", [*(id *)(*((void *)&v59 + 1) + 8 * i) longValue]];
      }
      id v11 = [v9 countByEnumeratingWithState:&v59 objects:v65 count:16];
    }
    while (v11);
  }

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 470, @"Requested Versions = { %@ }", v14, v15, v16, v17, (uint64_t)v8);
  *(void *)(a4 + 16) = 0;
  NSErrorUserInfoKey v22 = (void *)(a4 + 16);
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 24) = 0;
  if (*(unsigned char *)(a1 + 16))
  {
    if (a2 != 2)
    {
      if (a2) {
        goto LABEL_37;
      }
      void *v22 = *(unsigned __int16 *)(a1 + 20);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 482, @"Looking for available upgrade of Framework version", v18, v19, v20, v21, v47);
      if (*(unsigned __int16 *)(a1 + 18) == *(unsigned __int16 *)(a1 + 20)) {
        goto LABEL_37;
      }
      id v49 = v7;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      id obj = *(id *)(a1 + 104);
      id v23 = [obj countByEnumeratingWithState:&v55 objects:v64 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = *(void *)v56;
        while (2)
        {
          for (j = 0; j != v24; j = (char *)j + 1)
          {
            if (*(void *)v56 != v25) {
              objc_enumerationMutation(obj);
            }
            uint64_t v27 = *(void **)(*((void *)&v55 + 1) + 8 * (void)j);
            uint64_t v28 = *(unsigned __int16 *)(a1 + 20);
            [v27 longValue];
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 485, @"Checking availability: Framework upgrade from : 0x%04hx, to : 0x%04lx", v29, v30, v31, v32, v28);
            if ([v9 containsObject:v27])
            {
              uint64_t v46 = 487;
              goto LABEL_35;
            }
          }
          id v24 = [obj countByEnumeratingWithState:&v55 objects:v64 count:16];
          if (v24) {
            continue;
          }
          break;
        }
      }
      goto LABEL_36;
    }
    void *v22 = *(unsigned __int16 *)(a1 + 28);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 497, @"Looking for available upgrade of VehicleServer version", v18, v19, v20, v21, v47);
    if (*(unsigned __int16 *)(a1 + 26) != *(unsigned __int16 *)(a1 + 28))
    {
      id v49 = v7;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      id obj = *(id *)(a1 + 128);
      id v37 = [obj countByEnumeratingWithState:&v51 objects:v63 count:16];
      if (v37)
      {
        id v38 = v37;
        uint64_t v39 = *(void *)v52;
        while (2)
        {
          for (k = 0; k != v38; k = (char *)k + 1)
          {
            if (*(void *)v52 != v39) {
              objc_enumerationMutation(obj);
            }
            uint64_t v27 = *(void **)(*((void *)&v51 + 1) + 8 * (void)k);
            uint64_t v41 = *(unsigned __int16 *)(a1 + 28);
            [v27 longValue];
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 500, @"Checking availability: VehicleServer upgrade from : 0x%04hx, to : 0x%04lx", v42, v43, v44, v45, v41);
            if ([v9 containsObject:v27])
            {
              uint64_t v46 = 502;
LABEL_35:
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", v46, @"Upgrade eligible", v33, v34, v35, v36, v48);
              *(void *)(a4 + 24) = [v27 longValue];
              *(unsigned char *)(a4 + 8) = 1;
              goto LABEL_36;
            }
          }
          id v38 = [obj countByEnumeratingWithState:&v51 objects:v63 count:16];
          if (v38) {
            continue;
          }
          break;
        }
      }
LABEL_36:

      id v7 = v49;
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions hasUpgradeForVersionType:versions:]", 475, @"Upgrade disabled by settings", v18, v19, v20, v21, v47);
  }
LABEL_37:

LABEL_38:
}

void sub_100301E8C(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  if (a1)
  {
    if (a2 == 2)
    {
      *(_WORD *)(a1 + 28) = sub_100300608(a1, a3);
    }
    else if (!a2)
    {
      *(_WORD *)(a1 + 20) = sub_100300F68(a1, a3);
      id v4 = +[NSMutableData data];
      [v4 appendU16BE:*(unsigned __int16 *)(a1 + 20)];
      sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 80));
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v5 = (id)objc_claimAutoreleasedReturnValue();
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v16;
        while (2)
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v16 != v8) {
              objc_enumerationMutation(v5);
            }
            id v10 = *(id **)(*((void *)&v15 + 1) + 8 * i);
            if (sub_10005D5A8((uint64_t)v10) == 91)
            {
              id v11 = sub_100315FB4(v10);
              [v4 appendData:v11];

              goto LABEL_15;
            }
          }
          id v7 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
          if (v7) {
            continue;
          }
          break;
        }
      }
LABEL_15:

      uint64_t v12 = sub_100315D20((uint64_t)KmlTlv, 91, v4);
      uint64_t v13 = sub_100316294((uint64_t)v12);
      uint64_t v14 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v13;

      sub_100301074(a1);
    }
  }
}

void sub_10030205C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    *(_WORD *)(a1 + 20) = 256;
    *(_WORD *)(a1 + 24) = 256;
    *(_DWORD *)(a1 + 28) = 256;
    id v10 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;

    id v11 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;

    uint64_t v12 = *(void **)(a1 + 136);
    *(void *)(a1 + 136) = 0;

    long long v17 = *(void **)(a1 + 8);
    if (v17
      && ([v17 revocationAttestation],
          long long v18 = objc_claimAutoreleasedReturnValue(),
          v18,
          !v18))
    {
      uint64_t v19 = [*(id *)(a1 + 8) vehicleSupportedVersionsData];
      id v28 = v19;
      if (v19 && [v19 length])
      {
        id v24 = sub_100300B88(a1, v28);
        id v25 = sub_100300714(a1, v28);
        id v26 = sub_100300320(a1, v28);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions parseVehicleSupportedVersions]", 566, @"No vehicle supported versions data", v20, v21, v22, v23, v27);
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlVersions parseVehicleSupportedVersions]", 559, @"Valid endpoint not set", v13, v14, v15, v16, a9);
    }
  }
}

void sub_1003021AC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = +[NSMutableData data];
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v3 = *(id *)(a1 + 96);
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8 * i);
          if (objc_msgSend(v8, "unsignedShortValue", (void)v11) != 257) {
            [v2 appendU16BE:[v8 unsignedShortValue]];
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }

    uint64_t v9 = sub_100315D20((uint64_t)KmlTlv, 90, v2);
    id v10 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v9;
  }
}

void sub_100302304(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = +[NSMutableData data];
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v3 = *(id *)(a1 + 112);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          [v2 appendU16BE:[v10 unsignedShortValue]];
          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }

    uint64_t v8 = sub_100315D20((uint64_t)KmlTlv, 92, v2);
    uint64_t v9 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v8;
  }
}

id sub_1003025CC(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v29.receiver = a1;
    v29.super_class = (Class)KmlNfcPairingTransport;
    id v4 = [super init];
    a1 = v4;
    if (v4)
    {
      [v4 setDelegate:v3];
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport initWithDelegate:]", 85, @"let's init", v5, v6, v7, v8, (uint64_t)v29.receiver);
      uint64_t v9 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = 0;

      long long v10 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = 0;

      long long v11 = (void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = 0;

      *((unsigned char *)a1 + 56) = 0;
      long long v12 = (void *)*((void *)a1 + 8);
      *((void *)a1 + 8) = 0;

      *((void *)a1 + 1) = 0;
      *((_DWORD *)a1 + 4) = 0;
      uint64_t v13 = +[NFHardwareManager sharedHardwareManager];
      long long v14 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v13;

      uint64_t v15 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v16 = dispatch_queue_create("com.apple.sesd.kml.readApdu", v15);
      long long v17 = (void *)*((void *)a1 + 9);
      *((void *)a1 + 9) = v16;

      long long v18 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v19 = dispatch_queue_create("com.apple.sesd.kml.nfcTransport", v18);
      uint64_t v20 = (void *)*((void *)a1 + 10);
      *((void *)a1 + 10) = v19;

      uint64_t v21 = (void *)*((void *)a1 + 11);
      *((void *)a1 + 11) = 0;

      uint64_t v22 = (void *)*((void *)a1 + 12);
      *((void *)a1 + 12) = 0;

      *((unsigned char *)a1 + 104) = 0;
      uint64_t v23 = (void *)*((void *)a1 + 14);
      *((void *)a1 + 14) = 0;

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport initWithDelegate:]", 102, @"ready to roll", v24, v25, v26, v27, (uint64_t)v29.receiver);
    }
  }

  return a1;
}

void sub_1003027D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1003027DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a1[1])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startSession_sync]", 536, @"Transport not ready to create session", a5, a6, a7, a8, v14);
      uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      long long v10 = +[NSString stringWithUTF8String:KmlErrorString(25)];
      dispatch_queue_t v16 = v10;
      long long v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      long long v12 = +[NSError errorWithDomain:v9 code:25 userInfo:v11];

      uint64_t v13 = [a1 delegate];
      [v13 handleSessionStartResult:v12];
    }
    else
    {
      sub_100303374((uint64_t)a1, 1);
    }
  }
}

void sub_1003029E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = 1;
  sub_1003027DC(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_100302A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100302A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    switch(*(void *)(a1 + 8))
    {
      case 2:
      case 6:
        long long v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        BOOL v11 = *(unsigned char *)(a1 + 104) == 0;
        if (*(unsigned char *)(a1 + 104)) {
          uint64_t v12 = 23;
        }
        else {
          uint64_t v12 = 24;
        }
        NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
        if (v11) {
          int v13 = 24;
        }
        else {
          int v13 = 23;
        }
        uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(v13)];
        dispatch_queue_t v19 = v14;
        NSErrorUserInfoKey v15 = +[NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
        uint64_t v16 = +[NSError errorWithDomain:v10 code:v12 userInfo:v15];
        long long v17 = *(void **)(a1 + 64);
        *(void *)(a1 + 64) = v16;

        sub_100303374(a1, 9);
        break;
      case 3:
      case 7:
        sub_100303374(a1, 8);
        break;
      default:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport endSession_sync]", 551, @"session is not running. Ignore request to end it", a5, a6, a7, a8, a9);
        break;
    }
  }
}

void sub_100302CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100302D04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = a1[1];
    if (v9 == 5)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport pauseSession_sync]", 571, @"Session already paused.", a5, a6, a7, a8, (uint64_t)v15);
      id v16 = [a1 delegate];
      [v16 handleSessionPauseResult:0];
    }
    else if (v9 == 3)
    {
      sub_100303374((uint64_t)a1, 4);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport pauseSession_sync]", 575, @"Transport not running to pause", a5, a6, a7, a8, (uint64_t)v15);
      long long v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
      BOOL v11 = +[NSString stringWithUTF8String:KmlErrorString(25)];
      NSErrorUserInfoKey v18 = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
      int v13 = +[NSError errorWithDomain:v10 code:25 userInfo:v12];

      uint64_t v14 = [a1 delegate];
      [v14 handleSessionPauseResult:v13];
    }
  }
}

void sub_100302F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 104) = 1;
  sub_100302FA4(*(void **)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

void sub_100302FA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a1[1] == 5)
    {
      sub_100303374((uint64_t)a1, 6);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport resumeSession_sync]", 560, @"Transport not ready to resume session", a5, a6, a7, a8, v14);
      uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v15 = NSLocalizedDescriptionKey;
      long long v10 = +[NSString stringWithUTF8String:KmlErrorString(25)];
      id v16 = v10;
      BOOL v11 = +[NSDictionary dictionaryWithObjects:&v16 forKeys:&v15 count:1];
      uint64_t v12 = +[NSError errorWithDomain:v9 code:25 userInfo:v11];

      int v13 = [a1 delegate];
      [v13 handleSessionResumeResult:v12];
    }
  }
}

void sub_1003031D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startTransactionForKeyWithIdentifier:]_block_invoke", 152, @"Transport not ready to start transaction", a5, a6, a7, a8, v16);
    long long v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    BOOL v11 = +[NSString stringWithUTF8String:KmlErrorString(25)];
    NSErrorUserInfoKey v18 = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    int v13 = +[NSError errorWithDomain:v10 code:25 userInfo:v12];

    uint64_t v14 = [*(id *)(a1 + 32) delegate];
    [v14 handleTransactionStartResult:v13];
  }
  else
  {
    objc_storeStrong((id *)(v9 + 112), *(id *)(a1 + 40));
    uint64_t v15 = *(void *)(a1 + 32);
    sub_100303374(v15, 10);
  }
}

void sub_100303374(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 80);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1003039B8;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_100303464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10030346C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 8) == 11) {
      sub_100303374(a1, 12);
    }
    else {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport endTransaction_sync]", 527, @"Transaction session is not running. Ignore request to end it", a5, a6, a7, a8, a9);
    }
  }
}

void sub_100303518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v9 + 56))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readApdu]_block_invoke", 170, @"Read already in progress. Ignore another attempt", a5, a6, a7, a8, a9);
  }
  else
  {
    *(unsigned char *)(v9 + 56) = 1;
    uint64_t v10 = *(void *)(a1 + 32);
    BOOL v11 = *(NSObject **)(v10 + 72);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003035D4;
    block[3] = &unk_10040B880;
    block[4] = v10;
    dispatch_async(v11, block);
  }
}

void sub_1003035D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1003035DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    uint64_t v9 = *(void **)(a1 + 40);
    if (v9)
    {
      id v23 = 0;
      uint64_t v10 = [v9 readAPDU:&v23];
      id v15 = v23;
      if (v10) {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readAPDU_sync]", 465, @"error reading APDU from active session: %@", v11, v12, v13, v14, (uint64_t)v10);
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport readAPDU_sync]", 467, @"Received APDU %@", v11, v12, v13, v14, (uint64_t)v15);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlNfcPairingTransport *)"No active hce session readAPDU_sync], a5, a6, a7, a8, v19);
      uint64_t v10 = 0;
      id v15 = 0;
    }
    uint64_t v16 = *(NSObject **)(a1 + 80);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100304D1C;
    block[3] = &unk_10040D2C0;
    block[4] = a1;
    id v21 = v15;
    id v22 = v10;
    id v17 = v10;
    id v18 = v15;
    dispatch_async(v16, block);
  }
}

id sub_1003037C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport sendApdu:]_block_invoke", 185, &stru_100421848, a5, a6, a7, a8, v10);
  return [*(id *)(*(void *)(a1 + 32) + 40) sendAPDU:*(void *)(a1 + 40)];
}

void sub_100303888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport reset]_block_invoke", 193, @"Reset requested", a5, a6, a7, a8, v10);
  uint64_t v9 = *(void *)(a1 + 32);

  sub_1003038D8(v9);
}

void sub_1003038D8(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 40) stopEmulation];
    [*(id *)(a1 + 40) endSession];
    [*(id *)(a1 + 40) setDelegate:0];
    id v3 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = 0;

    [*(id *)(a1 + 48) stopCardEmulation];
    [*(id *)(a1 + 48) endSession];
    [*(id *)(a1 + 48) setDelegate:0];
    id v4 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = 0;

    uint64_t v5 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;

    sub_1003047AC(a1, v6, v7, v8, v9, v10, v11, v12, v24);
    sub_100304BFC(a1, v13, v14, v15, v16, v17, v18, v19, v25);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cleanup]", 427, @"Resetting state to ready", v20, v21, v22, v23, v26);
    *(void *)(a1 + 8) = 0;
  }
}

void sub_1003039B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  if (v10 <= *(void *)(v9 + 8)) {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState:]_block_invoke", 214, @"Current state higher than new state. Do nothing", a5, a6, a7, a8, a9);
  }
  else {
    sub_1003039E8(v9, v10, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_1003039E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 223, @"Current state %ld, new state %ld", a5, a6, a7, a8, *(void *)(a1 + 8));
    *(_DWORD *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = a2;
    switch(a2)
    {
      case 0:
        uint64_t v15 = @"NFC Pairing transport is ready";
        uint64_t v16 = 229;
        goto LABEL_17;
      case 1:
        uint64_t v17 = KmlSignpostLogger();
        if (os_signpost_enabled(v17))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NfcHceSessionCreate", "", buf, 2u);
        }

        uint64_t v18 = *(void **)(a1 + 24);
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472;
        v52[2] = sub_10030407C;
        uint64_t v52[3] = &unk_100419B90;
        v52[4] = a1;
        uint64_t v19 = [v18 startSecureElementAndHCESession:v52];
        uint64_t v20 = *(void **)(a1 + 32);
        *(void *)(a1 + 32) = v19;

        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 255, @"Waiting for session start", v21, v22, v23, v24, v50);
        return;
      case 2:
        uint64_t v25 = @"Starting Host Card Emulation";
        uint64_t v26 = 260;
        goto LABEL_12;
      case 3:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 265, @"Host Card Emulation session started", v11, v12, v13, v14, v50);
        uint64_t v27 = [(id)a1 delegate];
        id v51 = v27;
        uint64_t v28 = 0;
        goto LABEL_33;
      case 4:
        uint64_t v15 = @"We will pause Host Card Emulation session as soon as current session disconnects";
        uint64_t v16 = 270;
        goto LABEL_17;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 274, @"Host Card Emulation session paused", v11, v12, v13, v14, v50);
        id v29 = [*(id *)(a1 + 40) stopEmulation];
        id v51 = [(id)a1 delegate];
        [v51 handleSessionPauseResult:*(void *)(a1 + 64)];
        goto LABEL_35;
      case 6:
        uint64_t v25 = @"Resuming Host Card Emulation";
        uint64_t v26 = 280;
LABEL_12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", v26, v25, v11, v12, v13, v14, v50);
        sub_1003042B0(a1, v30, v31, v32, v33, v34, v35, v36, a9);
        return;
      case 7:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 284, @"Host Card Emulation session resumed", v11, v12, v13, v14, v50);
        id v51 = [(id)a1 delegate];
        [v51 handleSessionResumeResult:0];
        goto LABEL_35;
      case 8:
        uint64_t v15 = @"We will stop Host Card Emulation session as soon as current session disconnects";
        uint64_t v16 = 288;
LABEL_17:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", v16, v15, v11, v12, v13, v14, a9);
        return;
      case 9:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 292, @"Host Card Emulation session stopped", v11, v12, v13, v14, v50);
        sub_1003038D8(a1);
        id v51 = [(id)a1 delegate];
        [v51 handleSessionEndResult:*(void *)(a1 + 64)];
        goto LABEL_35;
      case 10:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 298, @"Starting Loyalty and payment session", v11, v12, v13, v14, v50);
        sub_1003042FC(a1);
        return;
      case 11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 303, @"Loyalty and payment session started", v11, v12, v13, v14, v50);
        id v37 = [(id)a1 delegate];
        [v37 handleTransactionStartResult:*(void *)(a1 + 64)];

        sub_100304400(a1, v38, v39, v40, v41, v42, v43, v44, a9);
        return;
      case 12:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 309, @"Stopping Host Card Emulation session", v11, v12, v13, v14, v50);
        [*(id *)(a1 + 48) stopCardEmulation];
        if (!*(void *)(a1 + 64))
        {
          uint64_t v45 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v54 = NSLocalizedDescriptionKey;
          uint64_t v46 = +[NSString stringWithUTF8String:KmlErrorString(24)];
          long long v55 = v46;
          uint64_t v47 = +[NSDictionary dictionaryWithObjects:&v55 forKeys:&v54 count:1];
          uint64_t v48 = +[NSError errorWithDomain:v45 code:24 userInfo:v47];
          id v49 = *(void **)(a1 + 64);
          *(void *)(a1 + 64) = v48;
        }
        sub_100303374(a1, 13);
        return;
      case 13:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]", 318, @"Transaction session stopped", v11, v12, v13, v14, v50);
        sub_1003038D8(a1);
        id v51 = [(id)a1 delegate];
        [v51 handleTransactionEndResult:*(void *)(a1 + 64)];
        goto LABEL_35;
      case 14:
        sub_1003038D8(a1);
        uint64_t v27 = [(id)a1 delegate];
        uint64_t v28 = *(void *)(a1 + 64);
        id v51 = v27;
LABEL_33:
        [v27 handleSessionStartResult:v28];
        goto LABEL_35;
      case 15:
        sub_1003038D8(a1);
        id v51 = [(id)a1 delegate];
        [v51 handleTransactionStartResult:*(void *)(a1 + 64)];
LABEL_35:

        break;
      default:
        return;
    }
  }
}

void sub_10030407C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100304148;
  block[3] = &unk_10040D2C0;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100304148(uint64_t a1)
{
  id v2 = KmlSignpostLogger();
  if (os_signpost_enabled(v2))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v17 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NfcHceSessionCreate", "error=%@", buf, 0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]_block_invoke", 238, @"startHCESession Error: %@", v4, v5, v6, v7, *(void *)(a1 + 32));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 64), *(id *)(a1 + 32));
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = 14;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]_block_invoke", 243, @"HCESession started", v4, v5, v6, v7, v14);
    [*(id *)(a1 + 48) setDelegate:*(void *)(a1 + 40)];
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 40), *(id *)(a1 + 48));
    uint64_t v8 = *(void *)(a1 + 40);
    if (*(void *)(v8 + 8) != 1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport setCurrentState_sync:]_block_invoke", 247, @"state changed while we were trying to get HCE session. cleanup to make sure we are not leaking session", v10, v11, v12, v13, v15);
      sub_1003038D8(*(void *)(a1 + 40));
      return;
    }
    uint64_t v9 = 2;
  }
  sub_100303374(v8, v9);
}

void sub_1003042B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    id v10 = [*(id *)(a1 + 40) startEmulation];
    sub_1003048C4(a1, v11, v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_1003042FC(uint64_t a1)
{
  if (a1)
  {
    id v2 = KmlSignpostLogger();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "NfcLnPtxnSessionCreate", "", buf, 2u);
    }

    uint64_t v3 = *(void **)(a1 + 24);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    void v11[2] = sub_100304D78;
    v11[3] = &unk_100419BE0;
    v11[4] = a1;
    uint64_t v4 = [v3 startLoyaltyAndContactlessPaymentSession:v11];
    uint64_t v5 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v4;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]", 518, @"Waiting for contactless session start", v6, v7, v8, v9, v10);
  }
}

void sub_100304400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 88))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startEndTransactionTimer]", 340, @"endTransactionTimer already running. Ignore another start", a5, a6, a7, a8, a9);
    }
    else
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1003044D0;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startEndTransactionTimer]", 353, @"endTransactionTimer started", v9, v10, v11, v12, v13);
    }
  }
}

void sub_1003044D0(uint64_t a1)
{
  double v2 = sub_100304578(*(void *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1003045F4;
  v6[3] = &unk_100419BB8;
  v6[4] = *(void *)(a1 + 32);
  uint64_t v3 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v6 block:v2];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 88);
  *(void *)(v4 + 88) = v3;
}

double sub_100304578(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  id v1 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  [v1 doubleForKey:@"OPTransactionTimeout"];
  if (v2 < 1.0) {
    double v2 = 1.0;
  }
  if (v2 >= 10.0 || v2 <= 1.0) {
    double v4 = 10.0;
  }
  else {
    double v4 = v2;
  }

  return v4;
}

void sub_1003045F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(NSObject **)(v1 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100304668;
  block[3] = &unk_10040B880;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_100304668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startEndTransactionTimer]_block_invoke_3", 346, @"Transaction will be ended due to time out.", a5, a6, a7, a8, v24);
  uint64_t v9 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
  NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
  uint64_t v10 = +[NSString stringWithUTF8String:KmlErrorString(23)];
  uint64_t v27 = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
  uint64_t v12 = +[NSError errorWithDomain:v9 code:23 userInfo:v11];
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 64);
  *(void *)(v13 + 64) = v12;

  sub_10030346C(*(void *)(a1 + 32), v15, v16, v17, v18, v19, v20, v21, v25);
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = *(void **)(v22 + 88);
  *(void *)(v22 + 88) = 0;
}

void sub_1003047AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 88))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100304860;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelEndTransactionTimer]", 359, @"endTransactionTimer is not running.", a5, a6, a7, a8, a9);
    }
  }
}

void sub_100304860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  [*(id *)(*(void *)(a1 + 32) + 88) invalidate];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 88);
  *(void *)(v10 + 88) = 0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelEndTransactionTimer]_block_invoke", 365, @"endTransactionTimer cancelled", v12, v13, v14, v15, a9);
}

void sub_1003048C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 104))
    {
      if (!*(void *)(a1 + 96))
      {
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1003049B8;
        block[3] = &unk_10040B880;
        void block[4] = a1;
        dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]", 396, @"hceSessionTimer started", v11, v12, v13, v14, v15);
        return;
      }
      uint64_t v9 = @"A hceSessionTimer already running. Ignore another start";
      uint64_t v10 = 378;
    }
    else
    {
      uint64_t v9 = @"A timeout was not requested for this hce session";
      uint64_t v10 = 373;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]", v10, v9, a5, a6, a7, a8, a9);
  }
}

void sub_1003049B8(uint64_t a1)
{
  double v2 = sub_100304A60(*(void *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_100304AE0;
  v6[3] = &unk_100419BB8;
  v6[4] = *(void *)(a1 + 32);
  uint64_t v3 = +[NSTimer scheduledTimerWithTimeInterval:0 repeats:v6 block:v2];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 96);
  *(void *)(v4 + 96) = v3;
}

double sub_100304A60(uint64_t a1)
{
  if (!a1) {
    return 0.0;
  }
  id v1 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
  [v1 doubleForKey:@"HceSessionTimeout"];
  if (v2 < 1.0) {
    double v2 = 1.0;
  }
  double v3 = fmin(v2, 10.0);
  if (v2 <= 1.0) {
    double v4 = 5.0;
  }
  else {
    double v4 = v3;
  }

  return v4;
}

void sub_100304AE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double v2 = *(NSObject **)(v1 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100304B54;
  block[3] = &unk_10040B880;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_100304B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((*(void *)(*(void *)(a1 + 32) + 8) | 4) == 6)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startHceTimer]_block_invoke_3", 386, @"Ending hce session due to time out.", a5, a6, a7, a8, v19);
    sub_100302A74(*(void *)(a1 + 32), v10, v11, v12, v13, v14, v15, v16, v20);
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 96);
    *(void *)(v17 + 96) = 0;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlNfcPairingTransport *)"hce session timer fired startHceTimer], a5, a6, a7, a8, a9);
  }
}

void sub_100304BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(void *)(a1 + 96))
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100304CB0;
      block[3] = &unk_10040B880;
      void block[4] = a1;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelHceTimer]", 402, @"hceSessionTimer is not running.", a5, a6, a7, a8, a9);
    }
  }
}

void sub_100304CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  [*(id *)(*(void *)(a1 + 32) + 96) invalidate];
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void **)(v10 + 96);
  *(void *)(v10 + 96) = 0;

  *(unsigned char *)(*(void *)(a1 + 32) + 104) = 0;

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport cancelHceTimer]_block_invoke", 409, @"hceSessionTimer cancelled", v12, v13, v14, v15, a9);
}

void sub_100304D1C(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 56) = 0;
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 handleIncomingApdu:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
}

void sub_100304D78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(NSObject **)(v7 + 80);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100304E44;
  block[3] = &unk_10040D2C0;
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_100304E44(uint64_t a1)
{
  id v2 = KmlSignpostLogger();
  if (os_signpost_enabled(v2))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v28 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "NfcLnPtxnSessionCreate", "error=%@", buf, 0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 487, @"Error in starting loyalty and payment session - %@", v4, v5, v6, v7, *(void *)(a1 + 32));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 64), *(id *)(a1 + 32));
    sub_100303374(*(void *)(a1 + 40), 15);
  }
  else
  {
    [*(id *)(a1 + 48) setDelegate:*(void *)(a1 + 40)];
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 48), *(id *)(a1 + 48));
    if (*(void *)(*(void *)(a1 + 40) + 8) == 10)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlNfcPairingTransport *)"LoyaltyAndPayment session started startLoyaltyAndPaymentSession], v8, v9, v10, v11, v24);
      id v12 = [*(id *)(*(void *)(a1 + 40) + 48) appletWithIdentifier:@"A000000809434343444B417631"];
      if (*(void *)(*(void *)(a1 + 40) + 112))
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 112);
        uint64_t v13 = +[NSArray arrayWithObjects:&v26 count:1];
        id v14 = +[NSSet setWithArray:v13];
      }
      else
      {
        id v14 = 0;
      }
      uint64_t v15 = *(void **)(*(void *)(a1 + 40) + 48);
      id v25 = 0;
      [v15 setActivePaymentApplet:v12 keys:v14 error:&v25];
      id v16 = v25;
      id v17 = v25;
      uint64_t v22 = v17;
      if (v17)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 508, @"setActivePaymentApplet Error: %@", v18, v19, v20, v21, (uint64_t)v17);
        objc_storeStrong((id *)(*(void *)(a1 + 40) + 64), v16);
        uint64_t v23 = 15;
      }
      else
      {
        uint64_t v23 = 11;
      }
      sub_100303374(*(void *)(a1 + 40), v23);
      [*(id *)(*(void *)(a1 + 40) + 48) startCardEmulation:1 authorization:0];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport startLoyaltyAndPaymentSession]_block_invoke", 497, @"state changed while we were trying to get LoyaltyAndPayment session. cleanup to make sure we are not leaking session", v8, v9, v10, v11, v24);
      sub_1003038D8(*(void *)(a1 + 40));
    }
  }
}

void sub_100305148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidConnect:]_block_invoke", 596, @"Received SessionDidConnect callback for active session.", a5, a6, a7, a8, v26);
    uint64_t v17 = *(void *)(a1 + 40);
    if ((*(void *)(v17 + 8) | 4) == 6)
    {
      sub_100304BFC(v17, v10, v11, v12, v13, v14, v15, v16, v27);
      uint64_t v18 = *(void *)(a1 + 40);
      if (*(void *)(v18 + 8) == 2) {
        uint64_t v19 = 3;
      }
      else {
        uint64_t v19 = 7;
      }
      sub_100303374(v18, v19);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidConnect:]_block_invoke", 606, @"received connect in wrong state.", v13, v14, v15, v16, v27);
      uint64_t v20 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
      uint64_t v21 = +[NSString stringWithUTF8String:KmlErrorString(24)];
      id v29 = v21;
      uint64_t v22 = +[NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      uint64_t v23 = +[NSError errorWithDomain:v20 code:24 userInfo:v22];
      uint64_t v24 = *(void *)(a1 + 40);
      id v25 = *(void **)(v24 + 64);
      *(void *)(v24 + 64) = v23;

      sub_100303374(*(void *)(a1 + 40), 9);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidConnect:]_block_invoke", 593, @"Received SessionDidConnect callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_100305428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidDisconnect:]_block_invoke", 621, @"Received SessionDidDisconnect callback, for active session.", a5, a6, a7, a8, v12);
    uint64_t v10 = *(void *)(a1 + 40);
    if ((unint64_t)(*(void *)(v10 + 8) - 3) > 1) {
      uint64_t v11 = 9;
    }
    else {
      uint64_t v11 = 5;
    }
    sub_100303374(v10, v11);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidDisconnect:]_block_invoke", 617, @"Received SessionDidDisconnect callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_100305570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidEndUnexpectedly:]_block_invoke", 639, @"Received SessionDidEndUnexpectedly callback for active session. Bailing out.", a5, a6, a7, a8, v19);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    BOOL v11 = *(unsigned char *)(*(void *)(a1 + 40) + 104) == 0;
    if (*(unsigned char *)(*(void *)(a1 + 40) + 104)) {
      uint64_t v12 = 23;
    }
    else {
      uint64_t v12 = 24;
    }
    NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
    if (v11) {
      int v13 = 24;
    }
    else {
      int v13 = 23;
    }
    uint64_t v14 = +[NSString stringWithUTF8String:KmlErrorString(v13)];
    uint64_t v21 = v14;
    uint64_t v15 = +[NSDictionary dictionaryWithObjects:&v21 forKeys:&v20 count:1];
    uint64_t v16 = +[NSError errorWithDomain:v10 code:v12 userInfo:v15];
    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void **)(v17 + 64);
    *(void *)(v17 + 64) = v16;

    sub_100303374(*(void *)(a1 + 40), 9);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSessionDidEndUnexpectedly:]_block_invoke", 635, @"Received SessionDidEndUnexpectedly callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_1003057E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1[4];
  uint64_t v10 = (void *)a1[5];
  if (v11 == v10[5])
  {
    id v12 = [v10 delegate];
    [v12 handleIncomingApdu:a1[6] error:0];
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport hceSession:didReceiveAPDU:]_block_invoke", 649, @"Received didReceiveAPDU callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_10030591C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  if (v10 == *(void *)(v9 + 48))
  {
    sub_1003047AC(v9, a2, a3, a4, a5, a6, a7, a8, vars0);
    uint64_t v11 = @"Transaction started and endTransactionTimer canceled";
    uint64_t v12 = 668;
  }
  else
  {
    uint64_t v11 = @"Received didStartTransaction callback, but not for active session. Ignoring";
    uint64_t v12 = 664;
  }

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSession:didStartTransaction:]_block_invoke", v12, v11, a5, a6, a7, a8, a9);
}

void sub_100305A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 48))
  {
    if ([*(id *)(a1 + 48) didError])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSession:didEndTransaction:]_block_invoke", 681, @"Received didEndTransaction callback reports error.", v10, v11, v12, v13, v20);
      uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
      uint64_t v15 = +[NSString stringWithUTF8String:KmlErrorString(24)];
      uint64_t v22 = v15;
      uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
      uint64_t v17 = +[NSError errorWithDomain:v14 code:24 userInfo:v16];
      uint64_t v18 = *(void *)(a1 + 40);
      uint64_t v19 = *(void **)(v18 + 64);
      *(void *)(v18 + 64) = v17;
    }
    sub_100303374(*(void *)(a1 + 40), 13);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSession:didEndTransaction:]_block_invoke", 676, @"Received didEndTransaction callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_100305C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 48))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSessionDidEndUnexpectedly:]_block_invoke", 695, @"Transaction session ended un-expectedly.", a5, a6, a7, a8, v16);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(24)];
    uint64_t v18 = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v10 code:24 userInfo:v12];
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void **)(v14 + 64);
    *(void *)(v14 + 64) = v13;

    sub_100303374(*(void *)(a1 + 40), 13);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlNfcPairingTransport loyaltyAndPaymentSessionDidEndUnexpectedly:]_block_invoke", 692, @"Received SessionDidEndUnexpectedly callback, but not for active session. Ignoring", a5, a6, a7, a8, a9);
  }
}

void sub_100305F1C(uint64_t a1, void *a2, char a3, unsigned int a4)
{
  id v7 = a2;
  if (a1)
  {
    uint64_t v8 = +[NSMutableArray array];
    uint64_t v9 = +[NSMutableArray array];
    *(unsigned char *)(a1 + 9) = 1;
    uint64_t v10 = +[NSData dataWithBytes:a1 + 9 length:1];
    uint64_t v11 = sub_100315D20((uint64_t)KmlTlv, 2, v10);
    [v8 addObject:v11];

    *(unsigned char *)(a1 + 10) = 0;
    uint64_t v12 = +[NSData dataWithBytes:a1 + 10 length:1];
    uint64_t v13 = sub_100315D20((uint64_t)KmlTlv, 2, v12);
    [v8 addObject:v13];

    *(unsigned char *)(a1 + 8) = a3;
    uint64_t v14 = +[NSData dataWithBytes:a1 + 8 length:1];
    uint64_t v15 = sub_100315D20((uint64_t)KmlTlv, 10, v14);
    [v8 addObject:v15];

    uint64_t v16 = +[NSData dataWithBytes:a1 + 8 length:1];
    NSErrorUserInfoKey v17 = sub_100315D20((uint64_t)KmlTlv, 208, v16);
    [v9 addObject:v17];

    if ([*(id *)(a1 + 40) keyRoleToShare] != 0xFFFF)
    {
      unsigned int v18 = [*(id *)(a1 + 40) keyRoleToShare];
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig createKeyConfigWithFriendlyName:profile:keyRole:]", 54, @"Over riding key role based on profile to :%02x", v19, v20, v21, v22, v18);
      a4 = [*(id *)(a1 + 40) keyRoleToShare];
    }
    *(_WORD *)(a1 + 12) = a4;
    uint64_t v23 = sub_100315DFC((uint64_t)KmlTlv, 213, a4);
    [v9 addObject:v23];

    uint64_t v24 = kmlUtilTimeNow();
    id v25 = sub_100315D20((uint64_t)KmlTlv, 24, v24);
    [v8 addObject:v25];

    uint64_t v75 = v24;
    uint64_t v26 = sub_100315D20((uint64_t)KmlTlv, 81, v24);
    [v9 addObject:v26];

    uint64_t v35 = kmlUtilInfiniteTime(v27, v28, v29, v30, v31, v32, v33, v34);
    uint64_t v36 = sub_100315D20((uint64_t)KmlTlv, 24, v35);
    [v8 addObject:v36];

    uint64_t v74 = v35;
    id v37 = sub_100315D20((uint64_t)KmlTlv, 82, v35);
    [v9 addObject:v37];

    objc_storeStrong((id *)(a1 + 32), a2);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig createKeyConfigWithFriendlyName:profile:keyRole:]", 73, @"Friendly name: %@", v38, v39, v40, v41, *(void *)(a1 + 32));
    uint64_t v42 = [*(id *)(a1 + 32) dataUsingEncoding:4];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig createKeyConfigWithFriendlyName:profile:keyRole:]", 74, @"Friendly name as UTF8 encoded data: %@", v43, v44, v45, v46, (uint64_t)v42);

    uint64_t v47 = *(void **)(a1 + 32);
    if (v47)
    {
      uint64_t v48 = [v47 dataUsingEncoding:4];
      id v49 = sub_100315D20((uint64_t)KmlTlv, 12, v48);
      [v8 addObject:v49];

      uint64_t v50 = [*(id *)(a1 + 32) dataUsingEncoding:4];
      id v51 = sub_100315D20((uint64_t)KmlTlv, 211, v50);
      [v9 addObject:v51];
    }
    id obja = v7;
    long long v52 = +[NSMutableData data];
    long long v82 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    id v53 = v8;
    id v54 = [v53 countByEnumeratingWithState:&v82 objects:v87 count:16];
    if (v54)
    {
      id v55 = v54;
      uint64_t v56 = *(void *)v83;
      do
      {
        for (uint64_t i = 0; i != v55; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v83 != v56) {
            objc_enumerationMutation(v53);
          }
          long long v58 = sub_100316294(*(void *)(*((void *)&v82 + 1) + 8 * i));
          [v52 appendData:v58];
        }
        id v55 = [v53 countByEnumeratingWithState:&v82 objects:v87 count:16];
      }
      while (v55);
    }

    long long v59 = sub_100315D20((uint64_t)KmlTlv, 48, v52);
    long long v60 = sub_100316294((uint64_t)v59);
    uint64_t v61 = sub_100315D20((uint64_t)KmlTlv, 32560, v60);
    long long v62 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v61;

    uint64_t v63 = +[NSMutableData data];
    long long v78 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    id v64 = v9;
    id v65 = [v64 countByEnumeratingWithState:&v78 objects:v86 count:16];
    if (v65)
    {
      id v66 = v65;
      uint64_t v67 = *(void *)v79;
      do
      {
        for (j = 0; j != v66; j = (char *)j + 1)
        {
          if (*(void *)v79 != v67) {
            objc_enumerationMutation(v64);
          }
          uint64_t v69 = sub_100316294(*(void *)(*((void *)&v78 + 1) + 8 * (void)j));
          [v63 appendData:v69];
        }
        id v66 = [v64 countByEnumeratingWithState:&v78 objects:v86 count:16];
      }
      while (v66);
    }

    id v70 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
    if ([v70 BOOLForKey:@"UseOldKeyConfigTag"]) {
      __int16 v71 = 32526;
    }
    else {
      __int16 v71 = 32572;
    }
    uint64_t v72 = sub_100315D20((uint64_t)KmlTlv, v71, v63);
    uint64_t v73 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v72;

    id v7 = obja;
  }
}

BOOL sub_100306580(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  sub_100315960((uint64_t)KmlTlv, a2);
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 countByEnumeratingWithState:&v62 objects:v69 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v63;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v63 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v62 + 1) + 8 * i);
        if (sub_10005D5A8((uint64_t)v8) == 32560)
        {
          objc_storeStrong((id *)(a1 + 16), v8);
          goto LABEL_15;
        }
        if (sub_10005D5A8((uint64_t)v8) == 32526 || sub_10005D5A8((uint64_t)v8) == 32572) {
          objc_storeStrong((id *)(a1 + 24), v8);
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v62 objects:v69 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  uint64_t v13 = *(void *)(a1 + 16);
  BOOL v14 = v13 != 0;
  if (v13)
  {
    uint64_t v15 = sub_100315FB4(*(id **)(a1 + 16));
    uint64_t v16 = sub_100315960((uint64_t)KmlTlv, v15);

    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    id v17 = v16;
    id v18 = [v17 countByEnumeratingWithState:&v58 objects:v68 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v59;
      id v49 = v17;
      do
      {
        for (j = 0; j != v19; j = (char *)j + 1)
        {
          if (*(void *)v59 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(id **)(*((void *)&v58 + 1) + 8 * (void)j);
          if (sub_10005D5A8((uint64_t)v22) == 48)
          {
            uint64_t v23 = sub_100315FB4(v22);
            uint64_t v24 = sub_100315960((uint64_t)KmlTlv, v23);

            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            id v25 = v24;
            id v26 = [v25 countByEnumeratingWithState:&v54 objects:v67 count:16];
            if (v26)
            {
              id v27 = v26;
              uint64_t v28 = *(void *)v55;
              while (2)
              {
                for (k = 0; k != v27; k = (char *)k + 1)
                {
                  if (*(void *)v55 != v28) {
                    objc_enumerationMutation(v25);
                  }
                  uint64_t v30 = *(id **)(*((void *)&v54 + 1) + 8 * (void)k);
                  if (sub_10005D5A8((uint64_t)v30) == 12)
                  {
                    id v31 = objc_alloc((Class)NSString);
                    uint64_t v32 = sub_100315FB4(v30);
                    id v33 = [v31 initWithData:v32 encoding:4];
                    uint64_t v34 = *(void **)(a1 + 32);
                    *(void *)(a1 + 32) = v33;

                    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig parseKeyConfigFromData:]", 142, @"Friendly name sent by owner: %@", v35, v36, v37, v38, *(void *)(a1 + 32));
                    id v17 = v49;
                    goto LABEL_35;
                  }
                }
                id v27 = [v25 countByEnumeratingWithState:&v54 objects:v67 count:16];
                if (v27) {
                  continue;
                }
                break;
              }
            }

            id v17 = v49;
          }
        }
        id v19 = [v17 countByEnumeratingWithState:&v58 objects:v68 count:16];
      }
      while (v19);
    }
LABEL_35:

    uint64_t v39 = sub_100315FB4(*(id **)(a1 + 24));
    uint64_t v40 = sub_100315960((uint64_t)KmlTlv, v39);

    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    id v41 = v40;
    id v42 = [v41 countByEnumeratingWithState:&v50 objects:v66 count:16];
    if (v42)
    {
      id v43 = v42;
      uint64_t v44 = *(void *)v51;
      do
      {
        for (m = 0; m != v43; m = (char *)m + 1)
        {
          if (*(void *)v51 != v44) {
            objc_enumerationMutation(v41);
          }
          uint64_t v46 = *(void **)(*((void *)&v50 + 1) + 8 * (void)m);
          if (sub_10005D5A8((uint64_t)v46) == 213)
          {
            *(_WORD *)(a1 + 12) = sub_100316118((uint64_t)v46);
          }
          else if (sub_10005D5A8((uint64_t)v46) == 208)
          {
            *(unsigned char *)(a1 + 8) = sub_10031609C(v46);
          }
        }
        id v43 = [v41 countByEnumeratingWithState:&v50 objects:v66 count:16];
      }
      while (v43);
    }

    BOOL v14 = 1;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingKeyConfig parseKeyConfigFromData:]", 124, @"KSInvitationData: No invitation TLV found", v9, v10, v11, v12, v48);
  }

  return v14;
}

uint64_t sub_100306A30(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 12);
  }
  return result;
}

uint64_t sub_100306A3C(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8);
  }
  return result;
}

void sub_100306AB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_49;
  }
  id v4 = +[NSMutableData data];
  id v5 = +[NSMutableData data];
  uint64_t v6 = [*(id *)(a1 + 40) readerIdentifier];

  if (v6)
  {
    id v7 = [*(id *)(a1 + 40) readerIdentifier];
    uint64_t v8 = sub_100315D20((uint64_t)KmlTlv, 77, v7);
    uint64_t v9 = sub_100316294((uint64_t)v8);

    [v4 appendData:v9];
    [v5 appendData:v9];
  }
  uint64_t v10 = [*(id *)(a1 + 40) configuration];
  unsigned int v11 = [(id)v10 opt1];

  uint64_t v12 = [*(id *)(a1 + 40) configuration];
  LOBYTE(v10) = [v12 opt2];

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 184, @"SiaC : options_1: %02x; options_2: %02x",
    v13,
    v14,
    v15,
    v16,
    v11);
  id v17 = sub_100315D88((uint64_t)KmlTlv, 70, v11);
  sub_100316294((uint64_t)v17);
  id v18 = v144 = a1;
  [v5 appendData:v18];

  id v19 = sub_100315D88((uint64_t)KmlTlv, 71, v10);
  uint64_t v20 = sub_100316294((uint64_t)v19);
  [v5 appendData:v20];

  LOBYTE(v20) = v10 & 0xBF;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 197, @"V1 : options_1: %02x; options_2: %02x",
    v21,
    v22,
    v23,
    v24,
    v11 & 0xCF);
  id v25 = sub_100315D88((uint64_t)KmlTlv, 70, v11 & 0xCF);
  id v26 = sub_100316294((uint64_t)v25);
  [v4 appendData:v26];

  char v27 = (char)v20;
  uint64_t v28 = v144;
  uint64_t v29 = sub_100315D88((uint64_t)KmlTlv, 71, v27);
  uint64_t v30 = sub_100316294((uint64_t)v29);
  [v4 appendData:v30];

  id v31 = sub_100315DFC((uint64_t)KmlTlv, 92, 0x100u);
  uint64_t v32 = sub_100316294((uint64_t)v31);

  [v4 appendData:v32];
  int v143 = (void *)v32;
  [v5 appendData:v32];
  id v33 = [*(id *)(v144 + 40) readerPublicKey];

  if (v33)
  {
    uint64_t v34 = [*(id *)(v144 + 40) readerPublicKey];
    uint64_t v35 = sub_100315D20((uint64_t)KmlTlv, 91, v34);
    uint64_t v36 = sub_100316294((uint64_t)v35);

    [v4 appendData:v36];
    [v5 appendData:v36];
  }
  uint64_t v37 = kmlUtilTimeNow();
  uint64_t v38 = sub_100315D20((uint64_t)KmlTlv, 81, v37);
  uint64_t v39 = sub_100316294((uint64_t)v38);

  [v4 appendData:v39];
  int v142 = (void *)v39;
  id v40 = [v5 appendData:v39];
  uint64_t v48 = kmlUtilInfiniteTime((uint64_t)v40, v41, v42, v43, v44, v45, v46, v47);
  id v49 = sub_100315D20((uint64_t)KmlTlv, 82, v48);
  uint64_t v50 = sub_100316294((uint64_t)v49);

  [v4 appendData:v50];
  uint64_t v145 = v5;
  uint64_t v141 = (void *)v50;
  [v5 appendData:v50];
  long long v51 = [*(id *)(v144 + 40) authorizedKeys];
  long long v52 = +[NSMutableData data];
  long long v161 = 0u;
  long long v162 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  id v53 = v51;
  id v54 = [v53 countByEnumeratingWithState:&v161 objects:v167 count:16];
  if (v54)
  {
    id v55 = v54;
    uint64_t v56 = *(void *)v162;
    do
    {
      for (uint64_t i = 0; i != v55; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v162 != v56) {
          objc_enumerationMutation(v53);
        }
        [v52 appendData:*(void *)(*((void *)&v161 + 1) + 8 * i)];
      }
      id v55 = [v53 countByEnumeratingWithState:&v161 objects:v167 count:16];
    }
    while (v55);
  }

  if (v52)
  {
    long long v58 = sub_100315D20((uint64_t)KmlTlv, 73, v52);
    long long v59 = sub_100316294((uint64_t)v58);

    [v4 appendData:v59];
    [v145 appendData:v59];
  }
  long long v60 = [*(id *)(v144 + 40) confidentialMailBoxSize];
  unsigned int v61 = bswap32([v60 unsignedIntValue]) >> 16;

  unsigned __int16 v160 = v61;
  long long v62 = [*(id *)(v144 + 40) privateMailBoxSize];
  unsigned int v63 = bswap32([v62 unsignedIntValue]) >> 16;

  __int16 v159 = v63;
  long long v64 = [*(id *)(v144 + 40) confidentialMailBoxSize];
  [v64 unsignedIntValue];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 238, @"ConfMailBoxSize from endpoint: network: 0x%04x, host: 0x%04x", v65, v66, v67, v68, v160);

  uint64_t v69 = [*(id *)(v144 + 40) privateMailBoxSize];
  [v69 unsignedIntValue];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 239, @"PrivMailBoxSize from endpoint: network: 0x%04x, host: 0x%04x", v70, v71, v72, v73, (unsigned __int16)v63);

  uint64_t v74 = +[NSData dataWithBytes:&v160 length:2];
  uint64_t v75 = sub_100315D20((uint64_t)KmlTlv, 74, v74);

  uint64_t v76 = +[NSData dataWithBytes:&v159 length:2];
  uint64_t v77 = sub_100315D20((uint64_t)KmlTlv, 75, v76);

  id v78 = v75;
  id v79 = v77;
  uint64_t v139 = [*(id *)(v144 + 40) mailboxSizesPlusAdditionalData];
  long long v80 = sub_100315960((uint64_t)KmlTlv, v139);
  id v146 = v3;
  uint64_t v147 = v79;
  NSErrorUserInfoKey v140 = v53;
  uint64_t v148 = v78;
  uint64_t v138 = v80;
  if (![v80 count])
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 282, @"We don't have mailbox sizes provided by car for V1. So use sizes from endpoint", v81, v82, v83, v84, v136);
    id v104 = v78;
    id v105 = v79;
    uint64_t v106 = (uint64_t)v105;
    id v88 = v104;
    goto LABEL_48;
  }
  uint64_t v137 = v4;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  id v85 = v80;
  id v86 = [v85 countByEnumeratingWithState:&v155 objects:v166 count:16];
  if (!v86)
  {
    uint64_t v149 = 0;
    id v150 = 0;
    id v88 = 0;
    goto LABEL_33;
  }
  id v87 = v86;
  uint64_t v149 = 0;
  id v150 = 0;
  id v88 = 0;
  uint64_t v89 = *(void *)v156;
  do
  {
    for (j = 0; j != v87; j = (char *)j + 1)
    {
      if (*(void *)v156 != v89) {
        objc_enumerationMutation(v85);
      }
      os_signpost_id_t v91 = *(void **)(*((void *)&v155 + 1) + 8 * (void)j);
      if (sub_10005D5A8((uint64_t)v91) == 74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 259, @"Using conf mailbox size for V1 from data saved from Car", v92, v93, v94, v95, v136);
        id v96 = v91;
        id v97 = v88;
        id v88 = v96;
      }
      else if (sub_10005D5A8((uint64_t)v91) == 75)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 262, @"Using priv mailbox size for V1 from data saved from Car", v98, v99, v100, v101, v136);
        id v102 = v91;
        id v97 = v150;
        id v150 = v102;
      }
      else
      {
        if (sub_10005D5A8((uint64_t)v91) != 96) {
          continue;
        }
        uint64_t v103 = sub_100315FB4((id *)v91);
        id v97 = v149;
        uint64_t v149 = (void *)v103;
      }
    }
    id v87 = [v85 countByEnumeratingWithState:&v155 objects:v166 count:16];
  }
  while (v87);
LABEL_33:

  uint64_t v107 = v149;
  id v105 = v147;
  id v104 = v148;
  if (![v149 length]) {
    goto LABEL_47;
  }
  uint64_t v108 = sub_100315960((uint64_t)KmlTlv, v149);
  long long v151 = 0u;
  long long v152 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  id v109 = [v108 countByEnumeratingWithState:&v151 objects:v165 count:16];
  id v105 = v147;
  id v104 = v148;
  if (!v109) {
    goto LABEL_46;
  }
  id v110 = v109;
  uint64_t v111 = *(void *)v152;
  id v105 = v147;
  id v104 = v148;
  while (2)
  {
    uint64_t v112 = 0;
    while (2)
    {
      if (*(void *)v152 != v111) {
        objc_enumerationMutation(v108);
      }
      uint64_t v113 = *(void **)(*((void *)&v151 + 1) + 8 * v112);
      if (sub_10005D5A8((uint64_t)v113) == 74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 273, @"Using conf mailbox size for V3 from data saved from Car", v114, v115, v116, v117, v136);
        uint64_t v118 = v104;
        id v104 = v113;
        goto LABEL_43;
      }
      if (sub_10005D5A8((uint64_t)v113) == 75)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createEndpointConfigWithSlotIdentifier:]", 276, @"Using priv mailbox size for V3 from data saved from Car", v119, v120, v121, v122, v136);
        uint64_t v118 = v105;
        id v105 = v113;
LABEL_43:
        id v123 = v113;
      }
      if (v110 != (id)++v112) {
        continue;
      }
      break;
    }
    id v110 = [v108 countByEnumeratingWithState:&v151 objects:v165 count:16];
    if (v110) {
      continue;
    }
    break;
  }
LABEL_46:

  uint64_t v107 = v149;
LABEL_47:

  id v3 = v146;
  id v4 = v137;
  uint64_t v28 = v144;
  uint64_t v106 = (uint64_t)v150;
LABEL_48:
  id v124 = sub_100316294((uint64_t)v88);
  [v4 appendData:v124];

  uint64_t v125 = sub_100316294(v106);
  [v4 appendData:v125];

  unint64_t v126 = sub_100316294((uint64_t)v104);
  [v145 appendData:v126];

  id v127 = sub_100316294((uint64_t)v105);
  [v145 appendData:v127];

  id v128 = sub_100315D20((uint64_t)KmlTlv, 78, v3);
  sub_100316294((uint64_t)v128);
  v130 = id v129 = (void *)v106;
  [v4 appendData:v130];

  uint64_t v131 = sub_100316294((uint64_t)v128);
  [v145 appendData:v131];

  uint64_t v132 = sub_100315D20((uint64_t)KmlTlv, 32551, v4);
  uint64_t v133 = *(void **)(v28 + 8);
  *(void *)(v28 + 8) = v132;

  uint64_t v134 = sub_100315D20((uint64_t)KmlTlv, 32556, v145);
  uint64_t v135 = *(void **)(v28 + 16);
  *(void *)(v28 + 16) = v134;

  id v3 = v146;
LABEL_49:
}

id sub_100307580(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = +[NSMutableData data];
    if (sub_100339938((BOOL)v6))
    {
      id v8 = [*(id *)(a1 + 40) readerInfo];
      uint64_t v9 = [v8 dataUsingEncoding:4];
      uint64_t v10 = sub_100315D20((uint64_t)KmlTlv, 89, v9);
      unsigned int v11 = sub_100316294((uint64_t)v10);
      [v7 appendData:v11];
    }
    else
    {
      id v12 = objc_alloc((Class)KmlRoutingInformation);
      uint64_t v13 = [*(id *)(a1 + 40) readerInfo];
      id v8 = [v12 initWithReaderInformation:v13];

      uint64_t v9 = [v8 getRoutingInformation];
      uint64_t v10 = [v9 dataUsingEncoding:4];
      unsigned int v11 = sub_100315D20((uint64_t)KmlTlv, 89, v10);
      uint64_t v14 = sub_100316294((uint64_t)v11);
      [v7 appendData:v14];
    }
    uint64_t v15 = [KmlDeviceConfigurationData alloc];
    uint64_t v16 = [*(id *)(a1 + 40) deviceConfiguration];
    id v17 = (unsigned char *)sub_1003163A8((uint64_t)v15, v16);

    if ([*(id *)(a1 + 48) agreedKmlVehicleVersion] == 768)
    {
      id v18 = [*(id *)(a1 + 48) vehicleSupportedFrameworkVersionsTlvAsData];

      if (v18)
      {
        id v19 = [*(id *)(a1 + 48) vehicleSupportedFrameworkVersionsTlvAsData];
        [v7 appendData:v19];
      }
      uint64_t v20 = [*(id *)(a1 + 48) vehicleSupportedAppletVersionsTlvAsData];

      if (v20)
      {
        uint64_t v21 = [*(id *)(a1 + 48) vehicleSupportedAppletVersionsTlvAsData];
        [v7 appendData:v21];
      }
      uint64_t v22 = [*(id *)(a1 + 40) subjectIdentifier];
      uint64_t v23 = sub_100340298((uint64_t)KmlEndpointManager, v22);

      if ([v23 isEqualToString:@"FRND"])
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing createDeviceConfigWithSupportedRadiosData:sharingConfig:]", 334, @"Set a tag to indicate sharing from friend in SiaC", v24, v25, v26, v27, v65);
        sub_100318524((uint64_t)v17, 1);
      }
    }
    else
    {
      uint64_t v23 = sub_100315DFC((uint64_t)KmlTlv, 92, 0x100u);
      uint64_t v28 = sub_100316294((uint64_t)v23);
      [v7 appendData:v28];
    }
    uint64_t v29 = sub_100316F7C(v17);
    [v7 appendData:v29];

    if (v5) {
      [v7 appendData:v5];
    }
    uint64_t v30 = sub_100313DC8((uint64_t)v17);
    id v31 = [v30 length];

    if (v31)
    {
      uint64_t v32 = sub_100313DC8((uint64_t)v17);
      id v33 = sub_100315D20((uint64_t)KmlTlv, 74, v32);
      uint64_t v34 = sub_100316294((uint64_t)v33);
      [v7 appendData:v34];
    }
    uint64_t v35 = sub_10030ACEC((uint64_t)v17);
    id v36 = [v35 length];

    if (v36)
    {
      uint64_t v37 = sub_10030ACEC((uint64_t)v17);
      uint64_t v38 = sub_100315D20((uint64_t)KmlTlv, 75, v37);
      uint64_t v39 = sub_100316294((uint64_t)v38);
      [v7 appendData:v39];
    }
    id v40 = sub_100313DD4((uint64_t)v17);
    id v41 = [v40 length];

    if (v41)
    {
      uint64_t v42 = sub_100313DD4((uint64_t)v17);
      [v7 appendData:v42];
    }
    if (sub_100318504((BOOL)v17))
    {
      uint64_t v43 = sub_100315D88((uint64_t)KmlTlv, 215, 1);
      uint64_t v44 = sub_100316294((uint64_t)v43);
      [v7 appendData:v44];

      if (sub_100339180((BOOL)v6))
      {
        if (sub_100318518((uint64_t)v17))
        {
          unsigned int v45 = sub_100318518((uint64_t)v17);
          uint64_t v46 = sub_1002FEDBC((uint64_t)v6);
          id v47 = [v46 length];

          if (v47 == (id)v45)
          {
            uint64_t v48 = sub_1002FED98((uint64_t)v17);
            [v7 appendData:v48];
          }
        }
      }
    }
    if ([*(id *)(a1 + 48) agreedKmlVehicleVersion] == 768)
    {
      id v49 = [*(id *)(a1 + 48) kmlSupportedVersionsTlvForShareInitiator];
      uint64_t v50 = sub_100316294((uint64_t)v49);
      [v7 appendData:v50];
    }
    long long v51 = sub_1003128D4((uint64_t)v6);
    char v52 = [v51 length];

    char v53 = sub_1003128E0((uint64_t)v6);
    if (v52 && v53)
    {
      id v54 = sub_100315D88((uint64_t)KmlTlv, 40727, v53);
      id v55 = sub_100316294((uint64_t)v54);
      [v7 appendData:v55];

      uint64_t v56 = sub_100315D88((uint64_t)KmlTlv, 40728, v52);
      long long v57 = sub_100316294((uint64_t)v56);
      [v7 appendData:v57];
    }
    long long v58 = sub_1002FEDA4((uint64_t)v17);

    if (v58)
    {
      long long v59 = sub_1002FEDA4((uint64_t)v17);
      [v7 appendData:v59];
    }
    long long v60 = [*(id *)(a1 + 40) hupData];

    if (v60)
    {
      unsigned int v61 = [*(id *)(a1 + 40) hupData];
      long long v62 = sub_100315D20((uint64_t)KmlTlv, 40736, v61);
      unsigned int v63 = sub_100316294((uint64_t)v62);
      [v7 appendData:v63];
    }
    kmlUtilLogLargeData(@"DeviceConfig and other tags", v7);
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_100307C08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v59 = a1;
  if (!a1) {
    goto LABEL_26;
  }
  long long v60 = +[NSMutableArray array];
  id v58 = v3;
  id v4 = sub_100315960((uint64_t)KmlTlv, v3);
  long long v62 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v62 objects:v66 count:16];
  unsigned int v61 = v4;
  if (!v5) {
    goto LABEL_17;
  }
  id v6 = v5;
  uint64_t v7 = *(void *)v63;
  do
  {
    id v8 = 0;
    do
    {
      if (*(void *)v63 != v7) {
        objc_enumerationMutation(v4);
      }
      uint64_t v9 = *(void **)(*((void *)&v62 + 1) + 8 * (void)v8);
      if (sub_10005D5A8((uint64_t)v9) == 32551)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 418, @"Found endpoint config", v10, v11, v12, v13, v57);
        uint64_t v14 = (id *)(a1 + 8);
LABEL_11:
        objc_storeStrong(v14, v9);
        goto LABEL_12;
      }
      if (sub_10005D5A8((uint64_t)v9) == 32556)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 421, @"Found endpoint config for SiaC", v15, v16, v17, v18, v57);
        uint64_t v14 = (id *)(a1 + 16);
        goto LABEL_11;
      }
      id v19 = +[NSNumber numberWithUnsignedInteger:sub_10005D5A8((uint64_t)v9)];
      unsigned int v20 = [&off_10042DB08 containsObject:v19];

      id v4 = v61;
      if (v20)
      {
        unsigned int v21 = sub_10005D5A8((uint64_t)v9);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 424, @"Found device config tag : 0x%x", v22, v23, v24, v25, v21);
        [v60 addObject:v9];
      }
LABEL_12:
      id v8 = (char *)v8 + 1;
    }
    while (v6 != v8);
    id v26 = [v4 countByEnumeratingWithState:&v62 objects:v66 count:16];
    id v6 = v26;
  }
  while (v26);
LABEL_17:
  if ([v60 count]) {
    objc_storeStrong((id *)(a1 + 24), v60);
  }
  id v27 = *(id *)(a1 + 8);
  if (v27 && (uint64_t v32 = *(void *)(a1 + 24), v27, v32))
  {
    id v33 = objc_alloc_init(KmlEndpointCreationConfig);
    uint64_t v34 = *(void **)(v59 + 32);
    *(void *)(v59 + 32) = v33;

    uint64_t v35 = *(void **)(v59 + 32);
    id v36 = (id *)*(id *)(v59 + 8);
    id v37 = v35;
    uint64_t v38 = sub_100315FB4(v36);
    sub_10033C430((uint64_t)v37, v38);

    if (*(void *)(v59 + 16))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 441, @"Apply SiaC overrides", v39, v40, v41, v42, v57);
      uint64_t v43 = *(void **)(v59 + 32);
      uint64_t v44 = (id *)*(id *)(v59 + 16);
      id v45 = v43;
      uint64_t v46 = sub_100315FB4(v44);
      sub_10033C4D0((uint64_t)v45, v46);
    }
    id v47 = *(void **)(v59 + 24);
    id v48 = *(id *)(v59 + 32);
    sub_10033C8B0((uint64_t)v48, v47);

    a1 = sub_10033D080(*(void *)(v59 + 32), v49, v50, v51, v52, v53, v54, v55);
    id v3 = v58;
    id v4 = v61;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[EndpointConfigForSharing parseEndpointCreationAndDeviceConfigsFromData:]", 434, @"Missing endpoint config / device config", v28, v29, v30, v31, v57);
    a1 = 0;
    id v3 = v58;
  }

LABEL_26:
  return a1;
}

void sub_100307F94(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

uint64_t sub_1003080A0(void **a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  sub_100315960((uint64_t)KmlTlv, a2);
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  id v4 = [v3 countByEnumeratingWithState:&v54 objects:v61 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v55;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v55 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v54 + 1) + 8 * i);
        if (sub_10005D5A8((uint64_t)v8) == 32555)
        {
          objc_storeStrong(a1 + 6, v8);
          goto LABEL_12;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v54 objects:v61 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  uint64_t v13 = (id *)a1[6];
  if (v13)
  {
    uint64_t v14 = sub_100315FB4(v13);
    uint64_t v15 = sub_100315960((uint64_t)KmlTlv, v14);

    if ([v15 count])
    {
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      id v20 = v15;
      id v21 = [v20 countByEnumeratingWithState:&v50 objects:v60 count:16];
      if (v21)
      {
        uint64_t v22 = *(void *)v51;
        while (2)
        {
          for (j = 0; j != v21; j = (char *)j + 1)
          {
            if (*(void *)v51 != v22) {
              objc_enumerationMutation(v20);
            }
            uint64_t v24 = *(id **)(*((void *)&v50 + 1) + 8 * (void)j);
            if (sub_10005D5A8((uint64_t)v24) == 48)
            {
              id v26 = sub_100315FB4(v24);
              sub_100315960((uint64_t)KmlTlv, v26);
              id v21 = (id)objc_claimAutoreleasedReturnValue();

              goto LABEL_25;
            }
          }
          id v21 = [v20 countByEnumeratingWithState:&v50 objects:v60 count:16];
          if (v21) {
            continue;
          }
          break;
        }
      }
LABEL_25:

      if ([v21 count])
      {
        id v44 = v3;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        id v31 = v21;
        id v32 = [v31 countByEnumeratingWithState:&v46 objects:v59 count:16];
        if (v32)
        {
          id v33 = v32;
          id v45 = a1 + 5;
          uint64_t v34 = a1 + 4;
          uint64_t v35 = a1 + 3;
          uint64_t v36 = *(void *)v47;
          do
          {
            for (k = 0; k != v33; k = (char *)k + 1)
            {
              if (*(void *)v47 != v36) {
                objc_enumerationMutation(v31);
              }
              uint64_t v38 = *(id **)(*((void *)&v46 + 1) + 8 * (void)k);
              uint64_t v39 = v35;
              if (sub_10005D5A8((uint64_t)v38) != 32544)
              {
                uint64_t v39 = v34;
                if (sub_10005D5A8((uint64_t)v38) != 32546)
                {
                  uint64_t v39 = v34;
                  if (sub_10005D5A8((uint64_t)v38) != 32578)
                  {
                    uint64_t v39 = v45;
                    if (sub_10005D5A8((uint64_t)v38) != 32548)
                    {
                      uint64_t v39 = v45;
                      if (sub_10005D5A8((uint64_t)v38) != 32580) {
                        continue;
                      }
                    }
                  }
                }
              }
              uint64_t v40 = sub_100315FB4(v38);
              uint64_t v41 = *v39;
              *uint64_t v39 = (void *)v40;
            }
            id v33 = [v31 countByEnumeratingWithState:&v46 objects:v59 count:16];
          }
          while (v33);
        }

        unsigned __int8 v58 = 1;
        id v3 = v44;
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain parseSharingInitiatorCertChainFromData:]", 506, @"Missing first cert set", v27, v28, v29, v30, v43);
        unsigned __int8 v58 = 0;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain parseSharingInitiatorCertChainFromData:]", 494, @"Missing cert sets", v16, v17, v18, v19, v43);
      unsigned __int8 v58 = 0;
    }

    uint64_t v25 = v58;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain parseSharingInitiatorCertChainFromData:]", 487, @"Share initiator cert chain not found", v9, v10, v11, v12, v43);
    uint64_t v25 = 0;
  }

  return v25;
}

void **sub_10030849C(void **a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = +[NSMutableData data];
    if ([v1[3] length])
    {
      id v3 = sub_100315D20((uint64_t)KmlTlv, 32544, v1[3]);
      id v4 = sub_100316294((uint64_t)v3);
      [v2 appendData:v4];
    }
    if ([v1[4] length])
    {
      id v5 = sub_100315D20((uint64_t)KmlTlv, 32578, v1[4]);
      uint64_t v6 = sub_100316294((uint64_t)v5);
      [v2 appendData:v6];
    }
    if ([v1[5] length])
    {
      uint64_t v11 = sub_100315D20((uint64_t)KmlTlv, 32580, v1[5]);
      uint64_t v12 = sub_100316294((uint64_t)v11);
      [v2 appendData:v12];

      uint64_t v13 = sub_100315D20((uint64_t)KmlTlv, 48, v2);
      uint64_t v14 = sub_100316294((uint64_t)v13);
      uint64_t v15 = sub_100315D20((uint64_t)KmlTlv, 32555, v14);

      sub_100316294((uint64_t)v15);
      uint64_t v1 = (void **)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[SharingInitiatorCertChain certChainAsData]", 540, @"Endpoint cert is required to create cert chain", v7, v8, v9, v10, v17);
      uint64_t v1 = 0;
    }
  }

  return v1;
}

BOOL sub_10030864C(const __CFData **a1, void *a2)
{
  id v3 = a2;
  if (!a1)
  {
    BOOL v26 = 0;
    goto LABEL_32;
  }
  id v4 = SecCertificateCreateWithData(0, a1[5]);
  id v5 = v4;
  if (v4)
  {
    CFStringRef commonName = 0;
    SecCertificateCopyCommonName(v4, &commonName);
    uint64_t v6 = (__CFString *)commonName;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 565, @"Received endpointCommonName: %@"), v7, v8, v9, v10, (uint64_t)commonName);
    uint64_t v11 = SecCertificateGetAuthorityKeyID();
    uint64_t v12 = kmlUtilHexStringFromData(v11);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 568, @"Endpoint certificateAuthorityKeyID=%@", v13, v14, v15, v16, (uint64_t)v12);

    if (!v11)
    {
      BOOL v95 = 0;
LABEL_30:

      BOOL v26 = v95;
      goto LABEL_31;
    }
    os_signpost_id_t v91 = v6;
    uint64_t v93 = objc_opt_new();
    [v93 addObject:v5];
    uint64_t v17 = (void *)SecCertificateCopyExtensionValue();
    uint64_t v18 = kmlUtilHexStringFromData(v17);
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 582, @"Extension: %@", v19, v20, v21, v22, (uint64_t)v18);

    uint64_t v23 = sub_100315960((uint64_t)KmlTlv, v17);
    uint64_t v92 = v23;
    if ([v23 count])
    {
      uint64_t v24 = [v23 objectAtIndexedSubscript:0];
      uint64_t v25 = sub_100315FB4(v24);
    }
    else
    {
      uint64_t v25 = 0;
    }
    uint64_t v27 = sub_100315960((uint64_t)KmlTlv, v25);
    [v27 count];
    [v27 count];
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 592, @"Endpoint certificate extension invalid: Marked Critical (%@), sequenceCount(%lu)", v28, v29, v30, v31, @"No");
    id v32 = v25;
    id v33 = kmlUtilHexStringFromData(v25);
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 593, @"Extension: %@", v34, v35, v36, v37, (uint64_t)v33);
    uint64_t v38 = v93;

    CFDataRef v39 = a1[4];
    if (v39)
    {
      uint64_t v40 = SecCertificateCreateWithData(0, v39);
      if (!v40) {
        goto LABEL_24;
      }
      uint64_t v41 = v40;
      CFStringRef commonName = 0;
      SecCertificateCopyCommonName(v40, &commonName);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 608, @"Intermediate certificate CommonName: %@", v42, v43, v44, v45, (uint64_t)commonName);
      if (commonName) {
        CFRelease(commonName);
      }
      [v93 addObject:v41];
      long long v46 = SecCertificateGetAuthorityKeyID();

      long long v47 = kmlUtilHexStringFromData(v46);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 615, @"Intermediate certificateAuthorityKeyID=%@", v48, v49, v50, v51, (uint64_t)v47);

      uint64_t v11 = v46;
    }
    CFDataRef v52 = a1[3];
    if (!v52)
    {
LABEL_19:
      long long v65 = objc_opt_new();
      CFDataRef v66 = [v65 getRootCertificateFor:v3 keyID:v11 error:0];

      if (v66)
      {
        uint64_t v67 = SecCertificateCreateWithData(0, v66);
        uint64_t v72 = v67;
        if (v67)
        {
          uint64_t v90 = v17;
          CFStringRef commonName = 0;
          SecCertificateCopyCommonName(v67, &commonName);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 659, @"Root certificate CommonName: %@", v73, v74, v75, v76, (uint64_t)commonName);
          if (commonName) {
            CFRelease(commonName);
          }
          uint64_t v77 = (void *)SecCertificateCopyIssuerSummary();
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 664, @"rootCert certificateIssuer=%@", v78, v79, v80, v81, (uint64_t)v77);
          uint64_t v38 = v93;
          BOOL v82 = sub_10033D9A8((uint64_t)KmlEndpointCreationConfig, v72, v93);

          uint64_t v17 = v90;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 668, @"Root certificate is nil", v68, v69, v70, v71, v89);
          BOOL v82 = 0;
        }
        BOOL v95 = v82;
      }
      else
      {
        uint64_t v83 = kmlUtilHexStringFromData(v11);
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 648, @"Got nil certificate for issuer %@", v84, v85, v86, v87, (uint64_t)v83);

        BOOL v95 = 0;
      }

      goto LABEL_29;
    }
    long long v53 = SecCertificateCreateWithData(0, v52);
    if (v53)
    {
      long long v54 = v53;
      CFStringRef commonName = 0;
      SecCertificateCopyCommonName(v53, &commonName);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 628, @"Ext CA certificate CommonName: %@", v55, v56, v57, v58, (uint64_t)commonName);
      if (commonName) {
        CFRelease(commonName);
      }
      [v93 addObject:v54];
      uint64_t v59 = SecCertificateGetAuthorityKeyID();

      long long v60 = kmlUtilHexStringFromData(v59);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingInitiatorCertChain isCertChainTrustedForManufacturer:]", 637, @"Ext CA certificateAuthorityKeyID=%@", v61, v62, v63, v64, (uint64_t)v60);

      uint64_t v11 = v59;
      goto LABEL_19;
    }
LABEL_24:
    BOOL v95 = 0;
LABEL_29:

    uint64_t v6 = v91;
    goto LABEL_30;
  }
  BOOL v26 = 0;
LABEL_31:

LABEL_32:
  return v26;
}

id sub_100308D0C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    uint64_t v12 = (id *)(a1 + 40);
    objc_storeStrong((id *)(a1 + 40), a5);
    id v13 = a2;
    sub_10004ED08(*(void *)(a1 + 8), v13);

    sub_100307F94(*(void *)(a1 + 8), *(void **)(a1 + 40));
    sub_10004ED08(*(void *)(a1 + 16), *(void **)(a1 + 40));
    sub_10004EE24(*(void *)(a1 + 24), *(void **)(a1 + 40));
    uint64_t v14 = +[NSMutableData data];
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = sub_100313DEC((uint64_t)v10);
    sub_100306AB0(v15, v16);

    uint64_t v17 = *(void *)(a1 + 8);
    if (v17) {
      uint64_t v18 = *(void *)(v17 + 8);
    }
    else {
      uint64_t v18 = 0;
    }
    uint64_t v19 = sub_100316294(v18);
    [v14 appendData:v19];

    if ([*v12 agreedKmlVehicleVersion] == 768)
    {
      uint64_t v20 = *(void *)(a1 + 8);
      if (v20) {
        uint64_t v21 = *(void *)(v20 + 16);
      }
      else {
        uint64_t v21 = 0;
      }
      uint64_t v22 = sub_100316294(v21);
      [v14 appendData:v22];
    }
    uint64_t v23 = *(void *)(a1 + 16);
    uint64_t v24 = sub_10030ACC4((uint64_t)v10);
    char v25 = sub_100056FE4((uint64_t)v10);
    unsigned __int16 v26 = sub_10030ACB8((uint64_t)v10);
    sub_100305F1C(v23, v24, v25, v26);

    uint64_t v27 = *(void *)(a1 + 16);
    if (v27) {
      uint64_t v28 = *(void *)(v27 + 16);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = sub_100316294(v28);
    [v14 appendData:v29];

    if ([*v12 agreedKmlVehicleVersion] == 768)
    {
      uint64_t v30 = *(void *)(a1 + 16);
      if (v30) {
        uint64_t v31 = *(void *)(v30 + 24);
      }
      else {
        uint64_t v31 = 0;
      }
      id v32 = sub_100316294(v31);
      [v14 appendData:v32];
    }
    id v33 = sub_100307580(*(void *)(a1 + 8), v9, v10);
    [v14 appendData:v33];

    uint64_t v34 = sub_100308FC0((void *)a1);
    if ([v34 length]) {
      [v14 appendData:v34];
    }
    uint64_t v35 = sub_100315D20((uint64_t)KmlTlv, 32561, v14);
    uint64_t v36 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v35;

    a1 = sub_100316294(*(void *)(a1 + 32));
  }

  return (id)a1;
}

void *sub_100308FC0(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    if (isInternalBuild())
    {
      id v2 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
      id v3 = [v2 objectForKey:@"MockFleetEndpointCert"];
      id v4 = kmlUtilDataForHexString(v3);

      id v5 = [v2 objectForKey:@"MockFleetIntermediateCert"];
      uint64_t v6 = kmlUtilDataForHexString(v5);

      uint64_t v7 = [v2 objectForKey:@"MockFleetExtCaCert"];
      uint64_t v8 = kmlUtilDataForHexString(v7);
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v6 = 0;
      id v4 = 0;
    }
    if ([v4 length] && (objc_msgSend(v6, "length") || objc_msgSend(v8, "length")))
    {
      sub_10004ED08(v1[3], v4);
      sub_100017370(v1[3], v6);
      sub_100017360(v1[3], v8);
      uint64_t v13 = v1[1];
      if (v13) {
        uint64_t v14 = *(void **)(v13 + 40);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = [v14 readerInfo];
      id v16 = [objc_alloc((Class)KmlRoutingInformation) initWithReaderInformation:v15];
      uint64_t v17 = (const __CFData **)v1[3];
      uint64_t v18 = [v16 manufacturer];
      LODWORD(v17) = sub_10030864C(v17, v18);

      CFStringRef v23 = @"No";
      if (v17) {
        CFStringRef v23 = @"Yes";
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation getSharerCertChain]", 807, @"Is the test cert chain trusted: %@", v19, v20, v21, v22, (uint64_t)v23);
      uint64_t v1 = sub_10030849C((void **)v1[3]);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation getSharerCertChain]", 796, &stru_100421848, v9, v10, v11, v12, v25);
      uint64_t v1 = 0;
    }
  }

  return v1;
}

uint64_t sub_1003091E8(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = sub_100315960((uint64_t)KmlTlv, a2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 745, @"KSInvitationData: Looking for invitation TLV", v4, v5, v6, v7, v41);
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id v8 = v3;
  id v9 = [v8 countByEnumeratingWithState:&v41 objects:v45 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v42;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v42 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v41 + 1) + 8 * i);
        if (sub_10005D5A8((uint64_t)v13) == 32561) {
          objc_storeStrong((id *)(a1 + 32), v13);
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v41 objects:v45 count:16];
    }
    while (v10);
  }

  if (*(void *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 757, @"KSInvitationData: Looking for Endpoint Config and Device Config TLVs", v14, v15, v16, v17, v41);
    uint64_t v18 = *(void **)(a1 + 8);
    uint64_t v19 = (id *)*(id *)(a1 + 32);
    id v20 = v18;
    uint64_t v21 = sub_100315FB4(v19);
    char v22 = sub_100307C08((uint64_t)v20, v21);

    if (v22)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 763, @"KSInvitationData: Looking for KeyConfig TLV", v14, v15, v16, v17, v41);
      CFStringRef v23 = *(void **)(a1 + 16);
      uint64_t v24 = (id *)*(id *)(a1 + 32);
      id v25 = v23;
      unsigned __int16 v26 = sub_100315FB4(v24);
      BOOL v27 = sub_100306580((uint64_t)v25, v26);

      if (v27)
      {
        uint64_t v28 = 1;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 769, @"KSInvitationData: Looking for Server cert chain TLV", v14, v15, v16, v17, v41);
        uint64_t v29 = *(void **)(a1 + 24);
        uint64_t v30 = (id *)*(id *)(a1 + 32);
        uint64_t v31 = v29;
        id v32 = sub_100315FB4(v30);
        char v33 = sub_1003080A0(v31, v32);

        if ((v33 & 1) == 0) {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", 771, @"KSInvitationData: No Cert chain TLV found", v34, v35, v36, v37, v41);
        }
        goto LABEL_20;
      }
      uint64_t v38 = @"KSInvitationData: No KeyConfig TLV found";
      uint64_t v39 = 765;
    }
    else
    {
      uint64_t v38 = @"KSInvitationData: No Endpoint Config TLV found";
      uint64_t v39 = 759;
    }
  }
  else
  {
    uint64_t v38 = @"KSInvitationData: No invitation TLV found";
    uint64_t v39 = 753;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySharingInvitation parseInvitationFromData:]", v39, v38, v14, v15, v16, v17, v41);
  uint64_t v28 = 0;
LABEL_20:

  return v28;
}

id sub_10030954C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    [(id)a1 setEndpoint:a2];
    id v10 = [(id)a1 endpoint];
    uint64_t v11 = [v10 certificates];

    uint64_t v12 = [v11 objectAtIndexedSubscript:0];
    uint64_t v13 = sub_100315D20((uint64_t)KmlTlv, 32544, v12);
    uint64_t v14 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v13;

    uint64_t v15 = [v11 objectAtIndexedSubscript:1];
    uint64_t v16 = sub_100315D20((uint64_t)KmlTlv, 32546, v15);
    uint64_t v17 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v16;

    uint64_t v18 = [v11 objectAtIndexedSubscript:2];
    uint64_t v19 = sub_100315D20((uint64_t)KmlTlv, 32548, v18);
    id v20 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v19;

    objc_storeStrong((id *)(a1 + 32), a3);
    if (v9)
    {
      uint64_t v21 = [v9 dataUsingEncoding:4];
      uint64_t v22 = sub_100315D20((uint64_t)KmlTlv, 24383, v21);
      CFStringRef v23 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v22;
    }
    a1 = sub_100309704(a1);
  }

  return (id)a1;
}

id sub_100309704(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = +[NSMutableData data];
    id v3 = sub_100316294(*(void *)(v1 + 8));
    [v2 appendData:v3];

    uint64_t v4 = sub_100316294(*(void *)(v1 + 16));
    [v2 appendData:v4];

    uint64_t v5 = sub_100316294(*(void *)(v1 + 24));
    [v2 appendData:v5];

    [v2 appendData:*(void *)(v1 + 32)];
    uint64_t v6 = sub_100315D20((uint64_t)KmlTlv, 32592, *(void **)(v1 + 32));
    uint64_t v7 = sub_100316294((uint64_t)v6);
    [v2 appendData:v7];

    if ([*(id *)(v1 + 56) agreedKmlSharingVersion] == 768)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest getSigningRequestTLVAsData]", 918, @"Add SharingInAChain version TLV", v8, v9, v10, v11, v19);
      uint64_t v12 = sub_10030186C(*(unsigned __int16 **)(v1 + 56));
      uint64_t v13 = sub_100316294((uint64_t)v12);
      [v2 appendData:v13];
    }
    uint64_t v14 = *(void *)(v1 + 48);
    if (v14)
    {
      uint64_t v15 = sub_100316294(v14);
      [v2 appendData:v15];
    }
    uint64_t v16 = sub_100315D20((uint64_t)KmlTlv, 32566, v2);
    uint64_t v17 = *(void **)(v1 + 40);
    *(void *)(v1 + 40) = v16;

    uint64_t v1 = sub_100316294(*(void *)(v1 + 40));
  }

  return (id)v1;
}

uint64_t sub_1003098BC(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = sub_100315960((uint64_t)KmlTlv, a2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 853, @"KeySigningData: Looking for signing request TLV", v4, v5, v6, v7, v65);
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v8 = v3;
  id v9 = [v8 countByEnumeratingWithState:&v72 objects:v77 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v73;
    do
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v73 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(void **)(*((void *)&v72 + 1) + 8 * i);
        if (sub_10005D5A8((uint64_t)v13) == 32566) {
          objc_storeStrong((id *)(a1 + 40), v13);
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v72 objects:v77 count:16];
    }
    while (v10);
  }

  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = v18 != 0;
  if (v18)
  {
    HIDWORD(v66) = 1;
    id v20 = sub_100315FB4(*(id **)(a1 + 40));
    uint64_t v21 = sub_100315960((uint64_t)KmlTlv, v20);

    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    id v22 = v21;
    id v23 = [v22 countByEnumeratingWithState:&v68 objects:v76 count:16];
    if (!v23) {
      goto LABEL_37;
    }
    id v24 = v23;
    uint64_t v25 = *(void *)v69;
    while (1)
    {
      unsigned __int16 v26 = 0;
      do
      {
        if (*(void *)v69 != v25) {
          objc_enumerationMutation(v22);
        }
        BOOL v27 = *(void **)(*((void *)&v68 + 1) + 8 * (void)v26);
        if (sub_10005D5A8((uint64_t)v27) == 32544)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 868, @"KeySigningData: Found Ext. CA Cert TLV", v28, v29, v30, v31, v66);
          id v32 = v27;
          char v33 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v32;
        }
        else if (sub_10005D5A8((uint64_t)v27) == 32546)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 871, @"KeySigningData: Found Instance CA Cert TLV", v34, v35, v36, v37, v66);
          id v38 = v27;
          char v33 = *(void **)(a1 + 16);
          *(void *)(a1 + 16) = v38;
        }
        else if (sub_10005D5A8((uint64_t)v27) == 32548)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 874, @"KeySigningData: Found Endpoint Cert TLV", v39, v40, v41, v42, v66);
          id v43 = v27;
          char v33 = *(void **)(a1 + 24);
          *(void *)(a1 + 24) = v43;
        }
        else
        {
          if (sub_10005D5A8((uint64_t)v27) == 32550)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 877, @"KeySigningData: Found Endpoint Encryption Key Attestation Data", v44, v45, v46, v47, v66);
            uint64_t v48 = sub_100316294((uint64_t)v27);
LABEL_25:
            char v33 = *(void **)(a1 + 32);
            *(void *)(a1 + 32) = v48;
            goto LABEL_32;
          }
          if (sub_10005D5A8((uint64_t)v27) == 32592 && !*(void *)(a1 + 32))
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 880, @"KeySigningData: Getting Encryption Key Attestation data from Custom TLV", v49, v50, v51, v52, v66);
            uint64_t v48 = sub_100315FB4((id *)v27);
            goto LABEL_25;
          }
          if (sub_10005D5A8((uint64_t)v27) == 24383)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 883, @"KeySigningData: Found Passcode TLV", v53, v54, v55, v56, v66);
            id v57 = v27;
            char v33 = *(void **)(a1 + 48);
            *(void *)(a1 + 48) = v57;
          }
          else
          {
            if (sub_10005D5A8((uint64_t)v27) != 85) {
              goto LABEL_33;
            }
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 886, @"Found Recipient Framework version TLV", v58, v59, v60, v61, v66);
            uint64_t v67 = *(void *)(a1 + 56);
            char v33 = sub_100316294((uint64_t)v27);
            id v62 = sub_1003010CC(v67, v33);
          }
        }
LABEL_32:

LABEL_33:
        unsigned __int16 v26 = (char *)v26 + 1;
      }
      while (v24 != v26);
      id v63 = [v22 countByEnumeratingWithState:&v68 objects:v76 count:16];
      id v24 = v63;
      if (!v63)
      {
LABEL_37:

        uint64_t v19 = HIDWORD(v66);
        goto LABEL_39;
      }
    }
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KeySigningRequest parseRequestFromData:]", 861, @"KeySigningData: No signing request TLV found", v14, v15, v16, v17, v66);
LABEL_39:

  return v19;
}

id sub_100309CE4(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = (uint64_t)a1;
    uint64_t v4 = [a2 dataUsingEncoding:4];
    uint64_t v5 = sub_100315D20((uint64_t)KmlTlv, 24383, v4);
    uint64_t v6 = *(void **)(v3 + 48);
    *(void *)(v3 + 48) = v5;

    a1 = sub_100309704(v3);
    uint64_t v2 = vars8;
  }
  return a1;
}

void sub_100309D6C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

id sub_100309E1C(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  if (a1)
  {
    [(id)a1 setEpAuthResponse:a2];
    uint64_t v14 = [(id)a1 epAuthResponse];
    uint64_t v15 = [v14 endPointAttestationData];
    uint64_t v16 = kmlUtilHexStringFromData(v15);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 946, @"SignedData: Auth Response Object - Attestation = %@", v17, v18, v19, v20, (uint64_t)v16);

    uint64_t v21 = [(id)a1 epAuthResponse];
    id v22 = [v21 encryptedData];
    id v23 = kmlUtilHexStringFromData(v22);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 947, @"SignedData: Auth Response Object - encryptedData = %@", v24, v25, v26, v27, (uint64_t)v23);

    uint64_t v28 = [(id)a1 epAuthResponse];
    uint64_t v29 = [v28 encryptionPublicKeyData];
    uint64_t v30 = kmlUtilHexStringFromData(v29);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 948, @"SignedData: Auth Response Object - encryptionPublicKey = %@", v31, v32, v33, v34, (uint64_t)v30);

    uint64_t v35 = +[NSMutableData data];
    uint64_t v36 = [(id)a1 epAuthResponse];
    uint64_t v37 = [v36 endPointAttestationData];
    id v38 = sub_10030A200(a1, v37);

    [v35 appendData:v38];
    if ([v13 length] && objc_msgSend(*(id *)(a1 + 80), "agreedKmlSharingVersion") == 768)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 960, @"Add additional attestation packages", v39, v40, v41, v42, v67);
      [v35 appendData:v13];
    }
    [v35 appendData:v11];
    id v43 = [(id)a1 epAuthResponse];
    uint64_t v44 = [v43 encryptedData];

    if (v44)
    {
      uint64_t v45 = [(id)a1 epAuthResponse];
      [v45 encryptedData];
      id v46 = v13;
      id v47 = v12;
      int v48 = a5;
      v50 = id v49 = v11;
      uint64_t v51 = sub_100315D20((uint64_t)KmlTlv, 74, v50);
      uint64_t v52 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v51;

      uint64_t v53 = sub_100316294(*(void *)(a1 + 16));
      [v35 appendData:v53];

      uint64_t v54 = [(id)a1 epAuthResponse];
      uint64_t v55 = [v54 encryptionPublicKeyData];
      uint64_t v56 = sub_100315D20((uint64_t)KmlTlv, 151, v55);
      id v57 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v56;

      id v11 = v49;
      a5 = v48;
      id v12 = v47;
      id v13 = v46;

      uint64_t v58 = sub_100316294(*(void *)(a1 + 24));
      [v35 appendData:v58];
    }
    [v35 appendData:v12];
    if (a5)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse createdSignedResponseWithEndpointAuthResponse:mailboxMappingData:supportedRadiosData:mockRefreshInstanceCA:additionalAttestationPackages:]", 979, @"Adding mock refrehs instance CA", v59, v60, v61, v62, v67);
      id v63 = kmlUtilGetMockInstanceCAData();
      [v35 appendData:v63];
    }
    uint64_t v64 = sub_100315D20((uint64_t)KmlTlv, 32562, v35);
    uint64_t v65 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v64;

    a1 = sub_100316294(*(void *)(a1 + 40));
  }

  return (id)a1;
}

id sub_10030A200(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = sub_100315960((uint64_t)KmlTlv, v3);
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v37 objects:v42 count:16];
    if (v5)
    {
      id v10 = v5;
      uint64_t v11 = *(void *)v38;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v38 != v11) {
            objc_enumerationMutation(v4);
          }
          id v13 = *(void **)(*((void *)&v37 + 1) + 8 * i);
          int v14 = sub_10005D5A8((uint64_t)v13);
          uint64_t v15 = (id *)(a1 + 8);
          if (v14 != 32549)
          {
            int v16 = sub_10005D5A8((uint64_t)v13);
            uint64_t v15 = (id *)(a1 + 48);
            if (v16 != 158) {
              continue;
            }
          }
          objc_storeStrong(v15, v13);
        }
        id v10 = [v4 countByEnumeratingWithState:&v37 objects:v42 count:16];
      }
      while (v10);
    }
    uint64_t v17 = *(id **)(a1 + 8);
    if (v17 && *(void *)(a1 + 48))
    {
      uint64_t v18 = sub_100315FB4(v17);
      uint64_t v19 = sub_100315960((uint64_t)KmlTlv, v18);
      uint64_t v20 = +[NSMutableArray arrayWithArray:v19];

      [v20 addObject:*(void *)(a1 + 48)];
      uint64_t v21 = +[NSMutableData data];
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      id v22 = v20;
      id v23 = [v22 countByEnumeratingWithState:&v33 objects:v41 count:16];
      if (v23)
      {
        id v24 = v23;
        uint64_t v25 = *(void *)v34;
        do
        {
          for (j = 0; j != v24; j = (char *)j + 1)
          {
            if (*(void *)v34 != v25) {
              objc_enumerationMutation(v22);
            }
            uint64_t v27 = sub_100316294(*(void *)(*((void *)&v33 + 1) + 8 * (void)j));
            [v21 appendData:v27];
          }
          id v24 = [v22 countByEnumeratingWithState:&v33 objects:v41 count:16];
        }
        while (v24);
      }

      uint64_t v28 = sub_100315D20((uint64_t)KmlTlv, 32549, v21);
      id v29 = +[NSMutableData data];
      uint64_t v30 = sub_100316294((uint64_t)v28);
      [v29 appendData:v30];

      uint64_t v31 = sub_100316294(*(void *)(a1 + 48));
      [v29 appendData:v31];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse getBackwardsCompatibleAttestationDataFrom:]", 1094, @"Attestation Data incomplete", v6, v7, v8, v9, v33);
      id v29 = v3;
    }
  }
  else
  {
    id v29 = 0;
  }

  return v29;
}

uint64_t sub_10030A534(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0;
  }
  id v3 = sub_100315960((uint64_t)KmlTlv, a2);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 991, @"Looking for signed response TLV", v4, v5, v6, v7, v79);
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id v8 = v3;
  id v9 = [v8 countByEnumeratingWithState:&v89 objects:v94 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v90;
    while (2)
    {
      for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v90 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v89 + 1) + 8 * i);
        if (sub_10005D5A8((uint64_t)v13) == 32562)
        {
          objc_storeStrong((id *)(a1 + 40), v13);
          goto LABEL_12;
        }
      }
      id v10 = [v8 countByEnumeratingWithState:&v89 objects:v94 count:16];
      if (v10) {
        continue;
      }
      break;
    }
  }
LABEL_12:

  if (!*(void *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1000, @"No signed response TLV found", v14, v15, v16, v17, v80);
    uint64_t v77 = 0;
    goto LABEL_53;
  }
  id v81 = v8;
  uint64_t v18 = sub_100315FB4(*(id **)(a1 + 40));
  uint64_t v19 = sub_100315960((uint64_t)KmlTlv, v18);

  BOOL v82 = +[NSMutableDictionary dictionary];
  long long v85 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  id v20 = v19;
  id v21 = [v20 countByEnumeratingWithState:&v85 objects:v93 count:16];
  if (!v21) {
    goto LABEL_44;
  }
  id v22 = v21;
  uint64_t v23 = *(void *)v86;
  do
  {
    id v24 = 0;
    do
    {
      if (*(void *)v86 != v23) {
        objc_enumerationMutation(v20);
      }
      uint64_t v25 = *(id **)(*((void *)&v85 + 1) + 8 * (void)v24);
      if (sub_10005D5A8((uint64_t)v25) == 32549)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1008, @"Found Key Attestation TLV", v26, v27, v28, v29, v80);
        sub_10030AAEC(a1, v25);
        goto LABEL_29;
      }
      if (sub_10005D5A8((uint64_t)v25) == 74)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1011, @"Found encrypted confidential mailbox TLV", v30, v31, v32, v33, v80);
        long long v34 = (id *)(a1 + 16);
LABEL_28:
        objc_storeStrong(v34, v25);
        goto LABEL_29;
      }
      if (sub_10005D5A8((uint64_t)v25) == 151)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1014, @"Found Owner Encryption Key TLV", v35, v36, v37, v38, v80);
        long long v34 = (id *)(a1 + 24);
        goto LABEL_28;
      }
      if (sub_10005D5A8((uint64_t)v25) == 69)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1017, @"Found KTS receipt TLV", v39, v40, v41, v42, v80);
        long long v34 = (id *)(a1 + 32);
        goto LABEL_28;
      }
      if (sub_10005D5A8((uint64_t)v25) == 158)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1020, @"Found owner Signature TLV", v43, v44, v45, v46, v80);
        long long v34 = (id *)(a1 + 48);
        goto LABEL_28;
      }
      if (sub_10005D5A8((uint64_t)v25) == 32589)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1023, @"Found mailbox mapping TLV", v47, v48, v49, v50, v80);
        uint64_t v51 = sub_100316294((uint64_t)v25);
        uint64_t v52 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v51;
LABEL_42:

        goto LABEL_29;
      }
      if (sub_10005D5A8((uint64_t)v25) == 32585)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1026, @"Found SupportedRadios TLV", v53, v54, v55, v56, v80);
        uint64_t v57 = sub_100315FB4(v25);
        uint64_t v52 = *(void **)(a1 + 64);
        *(void *)(a1 + 64) = v57;
        goto LABEL_42;
      }
      if (sub_10005D5A8((uint64_t)v25) == 32546)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1030, @"Found refreshed instance CA", v58, v59, v60, v61, v80);
        uint64_t v83 = sub_100315FB4(v25);
        uint64_t v62 = sub_100315D20((uint64_t)KmlTlv, 32547, v83);

        uint64_t v63 = sub_100316294((uint64_t)v62);
        uint64_t v64 = *(void **)(a1 + 72);
        *(void *)(a1 + 72) = v63;

        goto LABEL_29;
      }
      if (sub_10005D5A8((uint64_t)v25) == 48
        || sub_10005D5A8((uint64_t)v25) == 49
        || sub_10005D5A8((uint64_t)v25) == 50
        || sub_10005D5A8((uint64_t)v25) == 51)
      {
        unsigned int v65 = sub_10005D5A8((uint64_t)v25);
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1038, @"Found additional attestation TLV with Tag (%02X)", v66, v67, v68, v69, v65);
        uint64_t v84 = sub_100315FB4(v25);
        long long v70 = +[NSNumber numberWithUnsignedShort:sub_10005D5A8((uint64_t)v25)];
        [v82 setObject:v84 forKeyedSubscript:v70];

        uint64_t v52 = (void *)v84;
        goto LABEL_42;
      }
LABEL_29:
      id v24 = (char *)v24 + 1;
    }
    while (v22 != v24);
    id v71 = [v20 countByEnumeratingWithState:&v85 objects:v93 count:16];
    id v22 = v71;
  }
  while (v71);
LABEL_44:

  if (*(void *)(a1 + 8) && *(void *)(a1 + 48) && *(void *)(a1 + 56))
  {
    uint64_t v76 = v82;
    id v8 = v81;
    if ([v82 count]) {
      objc_storeStrong((id *)(a1 + 88), v82);
    }
    uint64_t v77 = 1;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseSignedResponseFromData:]", 1047, @"SignedResponse missing mandatory data", v72, v73, v74, v75, v80);
    uint64_t v77 = 0;
    id v8 = v81;
    uint64_t v76 = v82;
  }

LABEL_53:
  return v77;
}

void sub_10030AAEC(uint64_t a1, id *a2)
{
  if (a1)
  {
    id v3 = sub_100315FB4(a2);
    uint64_t v4 = sub_100315960((uint64_t)KmlTlv, v3);

    uint64_t v5 = +[NSMutableData data];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    id v6 = v4;
    id v7 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v20 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v11) == 158)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[SharingSignedResponse parseKeyAttestationTLV:]", 1133, @"Found owner Signature TLV in KeyAttestationTlv", v12, v13, v14, v15, v20);
            id v16 = v11;
            uint64_t v17 = *(void **)(a1 + 48);
            *(void *)(a1 + 48) = v16;
          }
          else
          {
            uint64_t v17 = sub_100316294((uint64_t)v11);
            [v5 appendData:v17];
          }
        }
        id v8 = [v6 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v8);
    }

    uint64_t v18 = sub_100315D20((uint64_t)KmlTlv, 32549, v5);
    uint64_t v19 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = v18;
  }
}

uint64_t sub_10030ACB8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 56);
  }
  return result;
}

uint64_t sub_10030ACC4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 64);
  }
  return result;
}

uint64_t sub_10030ACD0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 72);
  }
  return result;
}

void sub_10030ACDC(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

uint64_t sub_10030ACEC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

void sub_10030ADC8()
{
  self;
  if (qword_100468358 != -1)
  {
    dispatch_once(&qword_100468358, &stru_100419C00);
  }
}

void sub_10030AE18(id a1)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlOwnerPairingManager initOpManagerArray]_block_invoke", 87, @"OPManager: initializing opManagerArray", v1, v2, v3, v4, vars0);
  uint64_t v5 = +[NSMutableArray array];
  id v6 = (void *)qword_100468350;
  qword_100468350 = v5;
}

void sub_10030AE74()
{
  self;
  id v0 = +[NSMutableIndexSet indexSet];
  id v1 = (id)qword_100468350;
  objc_sync_enter(v1);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = (id)qword_100468350;
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v8 + 1) + 8 * (void)v6);
        if (v7 && *(void *)(v7 + 208) == 52) {
          [v0 addIndex:(char *)v6 + v4, (void)v8];
        }
        id v6 = (char *)v6 + 1;
      }
      while (v3 != v6);
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      v4 += (uint64_t)v6;
    }
    while (v3);
  }

  [(id)qword_100468350 removeObjectsAtIndexes:v0];
  objc_sync_exit(v1);
}

void sub_10030AFD8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

KmlOwnerPairingManager *sub_10030B000(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  sub_10030ADC8();
  sub_10030AE74();
  id v3 = (id)qword_100468350;
  objc_sync_enter(v3);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v4 = (id)qword_100468350;
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v16;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v4);
        }
        if (v2)
        {
          long long v8 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v7);
          long long v9 = v8 ? (void *)v8[25] : 0;
          id v10 = v9;
          unsigned int v11 = [v10 isEqualToString:v2];

          if (v11)
          {
            uint64_t v13 = v8;

            goto LABEL_17;
          }
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v12 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
      id v5 = v12;
    }
    while (v12);
  }

  if (v2)
  {
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = objc_alloc_init(KmlOwnerPairingManager);
    if (v13) {
      [(id)qword_100468350 addObject:v13];
    }
  }
LABEL_17:
  objc_sync_exit(v3);

  return v13;
}

void sub_10030B1C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10030B33C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    id v4 = *(NSObject **)(a1 + 128);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10030B3EC;
    v5[3] = &unk_10040D1A0;
    v5[4] = a1;
    id v6 = v3;
    dispatch_sync(v4, v5);
  }
}

void sub_10030B3EC(uint64_t a1)
{
  objc_storeWeak((id *)(*(void *)(a1 + 32) + 192), *(id *)(a1 + 40));
  id v2 = sub_10030F600((id *)[KmlSeManager alloc], *(void **)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = v2;
}

uint64_t sub_10030B448(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    uint64_t v9 = 0;
    id v10 = &v9;
    uint64_t v11 = 0x2020000000;
    char v12 = 0;
    id v4 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030B530;
    block[3] = &unk_100419AE8;
    void block[4] = a1;
    id v7 = v3;
    long long v8 = &v9;
    dispatch_sync(v4, block);
    a1 = *((unsigned char *)v10 + 24) != 0;

    _Block_object_dispose(&v9, 8);
  }

  return a1;
}

void sub_10030B530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 208))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager preWarmForManufacturer:]_block_invoke", 201, @"Pre-warm called in wrong state", a5, a6, a7, a8, a9);
  }
  else
  {
    objc_storeStrong((id *)(v9 + 80), *(id *)(a1 + 40));
    sub_10030B5C0(*(void *)(a1 + 32), 1);
    *(unsigned char *)(*(void *)(a1 + 32) + 185) = 1;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
}

void sub_10030B5C0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = *(NSObject **)(a1 + 128);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10030C534;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

BOOL sub_10030B63C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    uint64_t v21 = 0;
    long long v22 = &v21;
    uint64_t v23 = 0x2020000000;
    char v24 = 0;
    char v12 = *(NSObject **)(a1 + 128);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10030B784;
    v15[3] = &unk_100419C28;
    v15[4] = a1;
    id v16 = v10;
    id v17 = v9;
    uint64_t v20 = a4;
    id v18 = v11;
    uint64_t v19 = &v21;
    dispatch_sync(v12, v15);
    BOOL v13 = *((unsigned char *)v22 + 24) != 0;

    _Block_object_dispose(&v21, 8);
  }
  else
  {
    BOOL v13 = 0;
  }

  return v13;
}

void sub_10030B784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if ((*(void *)(v9 + 208) | 2) == 2)
  {
    *(unsigned char *)(v9 + 185) = 0;
    uint64_t v11 = kmlUtilSanitizeFriendlyName(*(void **)(a1 + 40));
    uint64_t v12 = *(void *)(a1 + 32);
    BOOL v13 = *(void **)(v12 + 56);
    *(void *)(v12 + 56) = v11;

    uint64_t v14 = objc_opt_new();
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 176);
    *(void *)(v15 + 176) = v14;

    uint64_t v17 = [*(id *)(*(void *)(a1 + 32) + 176) BOOLValueForSetting:1 manufacturer:*(void *)(*(void *)(a1 + 32) + 80) brand:0 uuid:0 error:0];
    id v45 = (id)v17;
    if (!v17
      || (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 232, @"Found override for downgrade pairing version", v20, v21, v22, v23, v42), [v45 BOOLValue]))
    {
      sub_100300278(*(void *)(*(void *)(a1 + 32) + 152), v17, v18, v19, v20, v21, v22, v23, v42);
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 240, @"KeyName : %@; Downgrade framework version : %@,\n versionInfo : %@",
      v20,
      v21,
      v22,
      v23,
      *(void *)(*(void *)(a1 + 32) + 56));
    char v24 = sub_1002FBB44((void **)[KmlDataExchangeManager alloc], *(void **)(a1 + 32), *(void **)(a1 + 48), *(void **)(a1 + 72), *(void **)(*(void *)(a1 + 32) + 152));
    uint64_t v25 = *(void *)(a1 + 32);
    uint64_t v26 = *(void **)(v25 + 8);
    *(void *)(v25 + 8) = v24;

    uint64_t v27 = sub_10033F89C([KmlBindingAttestation alloc], *(void **)(a1 + 56));
    uint64_t v28 = sub_10030ACC4((uint64_t)v27);

    if (v28)
    {
      uint64_t v33 = sub_10030ACC4((uint64_t)v27);
      uint64_t v34 = *(void *)(a1 + 32);
      uint64_t v35 = *(void **)(v34 + 88);
      *(void *)(v34 + 88) = v33;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 253, @"We didn't get well formatted Binding Attestation.", v29, v30, v31, v32, v43);
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 256, @"Workaround: Using data passed in as BA as anonymizedDsid", v36, v37, v38, v39, v44);
      uint64_t v40 = *(void *)(a1 + 32);
      id v41 = *(id *)(a1 + 56);
      uint64_t v35 = *(void **)(v40 + 88);
      *(void *)(v40 + 88) = v41;
    }

    sub_10030B5C0(*(void *)(a1 + 32), 3);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startOwnerPairingWithPassword:keyName:transport:bindingAttestation:]_block_invoke", 262, @"Pairing is already under progress", a5, a6, a7, a8, a9);
  }
}

void sub_10030B9E4(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030BA60;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10030BA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v9 + 208);
  if (v10 <= 21)
  {
    if (*(unsigned char *)(v9 + 184))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 274, @"probing cancel requested", a5, a6, a7, a8, v15);
      uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8);
      sub_1002FD184(v11);
      return;
    }
    if (v10 == 2)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlOwnerPairingManager *)"PreWarm is done. We are not going to do pairing endOwnerPairingSession], a5, a6, a7, a8, v15);
      uint64_t v9 = *(void *)(a1 + 32);
    }
    uint64_t v13 = 32;
    goto LABEL_17;
  }
  switch(v10)
  {
    case 42:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 291, @"probing session ends", a5, a6, a7, a8, v15);
      uint64_t v9 = *(void *)(a1 + 32);
      if (!*(unsigned char *)(v9 + 137))
      {
        *(unsigned char *)(v9 + 138) = 1;
        return;
      }
      uint64_t v13 = 52;
LABEL_17:
      sub_10030B5C0(v9, v13);
      return;
    case 31:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 288, @"First post OP transaction cancel requested", a5, a6, a7, a8, v15);
      uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 8);
      sub_1002FCFCC(v14);
      break;
    case 23:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endOwnerPairingSession]_block_invoke", 283, @"OPManager: First transaction skip requested", a5, a6, a7, a8, v15);
      *(unsigned char *)(*(void *)(a1 + 32) + 136) = 0;
      objc_storeWeak((id *)(*(void *)(a1 + 32) + 192), 0);
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8);
      sub_1002FD31C(v12);
      break;
  }
}

void sub_10030BC08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    long long v8 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030BCCC;
    block[3] = &unk_10040D2C0;
    id v10 = v6;
    uint64_t v11 = a1;
    id v12 = v5;
    dispatch_async(v8, block);
  }
}

void sub_10030BCCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingManager saveTrackingReceipt:otherJSONData:]_block_invoke", 306, @"otherJsonData : %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  if (*(void *)(*(void *)(a1 + 40) + 208) == 23)
  {
    uint64_t v13 = sub_10034171C((id *)[KmlEndpointManager alloc], *(void **)(*(void *)(a1 + 40) + 200), *(void **)(*(void *)(a1 + 40) + 152));
    uint64_t v14 = sub_100341F54(v13, *(void **)(a1 + 48), *(void **)(a1 + 32));
    uint64_t v15 = *(void *)(a1 + 40);
    id v16 = sub_1002FEDBC((uint64_t)v13);
    sub_10030BEA0(v15, v14, v16);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager saveTrackingReceipt:otherJSONData:]_block_invoke", 313, @"OPManager: Received tracking receipt when we don't expect. Ignore it.", v9, v10, v11, v12, v20);
    uint64_t v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v21 = NSLocalizedDescriptionKey;
    uint64_t v17 = +[NSString stringWithUTF8String:KmlErrorString(214)];
    uint64_t v22 = v17;
    uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v22 forKeys:&v21 count:1];
    uint64_t v14 = +[NSError errorWithDomain:v13 code:214 userInfo:v18];
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 192));
  [WeakRetained handleKmlOwnerPairingTrackingReceiptSaveResult:v14];
}

void sub_10030BEA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030C32C;
    block[3] = &unk_10040D2C0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10030BF68(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    uint64_t v5 = 0;
    id v6 = &v5;
    uint64_t v7 = 0x2020000000;
    char v8 = 0;
    id v2 = *(NSObject **)(v1 + 128);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_10030C028;
    unint64_t v4[3] = &unk_10040D310;
    v4[4] = v1;
    void v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = *((unsigned char *)v6 + 24) != 0;
    _Block_object_dispose(&v5, 8);
  }
  return v1;
}

void sub_10030C028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startProbing]_block_invoke", 326, @"OPManager: start Probing.", a5, a6, a7, a8, v26);
  uint64_t v14 = *(void *)(a1 + 32);
  if (*(void *)(v14 + 208))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager startProbing]_block_invoke", 342, @"Probing called in wrong state", v10, v11, v12, v13, a9);
  }
  else
  {
    uint64_t v15 = *(void **)(v14 + 56);
    *(void *)(v14 + 56) = 0;

    sub_100300278(*(void *)(*(void *)(a1 + 32) + 152), v16, v17, v18, v19, v20, v21, v22, v27);
    uint64_t v23 = sub_1002FBB44((void **)[KmlDataExchangeManager alloc], *(void **)(a1 + 32), 0, (void *)1, *(void **)(*(void *)(a1 + 32) + 152));
    uint64_t v24 = *(void *)(a1 + 32);
    uint64_t v25 = *(void **)(v24 + 8);
    *(void *)(v24 + 8) = v23;

    *(unsigned char *)(*(void *)(a1 + 32) + 184) = 1;
    sub_10030B5C0(*(void *)(a1 + 32), 11);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
}

void sub_10030C110(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030C18C;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10030C18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 208) == 23)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endpointRevoked]_block_invoke", 353, @"Endpoint revoked while we were waiting for tracking receipt.", a5, a6, a7, a8, v16);
    uint64_t v10 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(27)];
    uint64_t v18 = v11;
    uint64_t v12 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
    uint64_t v13 = +[NSError errorWithDomain:v10 code:27 userInfo:v12];
    uint64_t v14 = *(void *)(a1 + 32);
    uint64_t v15 = *(void **)(v14 + 120);
    *(void *)(v14 + 120) = v13;

    sub_10030B5C0(*(void *)(a1 + 32), 51);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager endpointRevoked]_block_invoke", 357, @"Endpoint revoked but we are not in a state to take an action.", a5, a6, a7, a8, a9);
  }
}

void sub_10030C32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 208) == 23)
  {
    uint64_t v10 = KmlSignpostLogger();
    if (os_signpost_enabled(v10))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t v24 = 138412290;
      *(void *)&uint64_t v24[4] = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "OpTrackingReceiptSaved", "unint64_t result = %@", v24, 0xCu);
    }

    if (*(void *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager trackingReceiptSaveResult:ppidData:]_block_invoke", 370, @"Failed to save key tracking receipt / immoToken / slotId", v12, v13, v14, v15, *(uint64_t *)v24);
      uint64_t v16 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      id v17 = [*(id *)(a1 + 40) code];
      uint64_t v18 = [*(id *)(a1 + 40) userInfo];
      uint64_t v19 = +[NSError errorWithDomain:v16 code:v17 userInfo:v18];
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void **)(v20 + 120);
      *(void *)(v20 + 120) = v19;

      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = 52;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager trackingReceiptSaveResult:ppidData:]_block_invoke", 374, @"Saved key tracking receipt", v12, v13, v14, v15, *(uint64_t *)v24);
      sub_100317554(*(void *)(*(void *)(a1 + 32) + 144), *(void **)(a1 + 48));
      uint64_t v22 = *(void *)(a1 + 32);
      uint64_t v23 = 31;
    }
    sub_10030B5C0(v22, v23);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager trackingReceiptSaveResult:ppidData:]_block_invoke", 381, @"We are not in a state to handle tracking receipt saved notification", a5, a6, a7, a8, a9);
  }
}

void sub_10030C534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  if (v10 <= *(void *)(v9 + 208)) {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState:]_block_invoke", 391, @"OPManager: Current state higher than new state. Do nothing", a5, a6, a7, a8, a9);
  }
  else {
    sub_10030C564(v9, v10, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_10030C564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    return;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 401, @"OPManager: Current state %ld, new state %ld", a5, a6, a7, a8, *(void *)(a1 + 208));
  *(void *)(a1 + 168) = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = a2;
  if (a2 > 30)
  {
    switch(a2)
    {
      case ')':
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 657, @"OPManager: Inform remote reader about key creation failure.", v11, v12, v13, v14, v156);
        uint64_t v17 = *(void *)(a1 + 8);
        sub_1002FC9E4(v17);
        return;
      case '*':
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 662, @"Done with probing", v11, v12, v13, v14, v156);
        uint64_t v19 = KmlSignpostLogger();
        if (os_signpost_enabled(v19))
        {
          uint64_t v20 = *(void *)(a1 + 120);
          *(_DWORD *)buf = 138412290;
          uint64_t v163 = v20;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpProbing", "result=%@", buf, 0xCu);
        }

        uint64_t v21 = sub_1002FD508(*(void *)(a1 + 8));
        sub_100310A84(*(void *)(a1 + 16));
        KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 666, @"Debug states: DXManagerStep - %08x ; SEManagerStep - %08x",
          v22,
          v23,
          v24,
          v25,
          v21);
        sub_1002F99A0();
        uint64_t v26 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = 0;

        return;
      case '+':
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 674, @"OPManager: Encountered error in pairing phone with remote reader, error: %@", v11, v12, v13, v14, *(void *)(a1 + 120));
        sub_10030FD28(*(void *)(a1 + 16));
        if (*(unsigned char *)(a1 + 184))
        {
          id WeakRetained = objc_loadWeakRetained((id *)(a1 + 192));
          [WeakRetained handleKmlOwnerPairingProbingCompletionWithBrandCode:0xFFFFLL error:*(void *)(a1 + 120)];
        }
        if (!*(unsigned char *)(a1 + 185))
        {
          id v28 = objc_loadWeakRetained((id *)(a1 + 192));
          [v28 handleKmlOwnerPairingCompletionWithResult:*(void *)(a1 + 120) keyInformation:0 keyTrackingRequest:0];

          if (*(unsigned char *)(a1 + 184))
          {
            sub_1002F99A0();
          }
          else
          {
            uint64_t v120 = *(void *)(a1 + 8);
            uint64_t v121 = *(void **)(a1 + 120);
            if (sub_1003184F0(*(void *)(a1 + 144)))
            {
              uint64_t v122 = +[NISession deviceCapabilities];
              sub_1002FD3A4(v120, v121, (char)[v122 supportsPreciseDistanceMeasurement], *(void **)(a1 + 200));
            }
            else
            {
              sub_1002FD3A4(v120, v121, 0, *(void **)(a1 + 200));
            }
            sub_10030DAB4(a1);
          }
        }
        uint64_t v145 = *(void *)(a1 + 168);
        switch(v145)
        {
          case 21:
            id v146 = KmlSignpostLogger();
            if (os_signpost_enabled(v146))
            {
              *(_WORD *)buf = 0;
              uint64_t v147 = "OpMailboxWriteTxn";
              goto LABEL_108;
            }
            break;
          case 13:
            id v146 = KmlSignpostLogger();
            if (os_signpost_enabled(v146))
            {
              *(_WORD *)buf = 0;
              uint64_t v147 = "OpKeyExchange";
              goto LABEL_108;
            }
            break;
          case 11:
            id v146 = KmlSignpostLogger();
            if (os_signpost_enabled(v146))
            {
              *(_WORD *)buf = 0;
              uint64_t v147 = "OpCarConfigRx";
LABEL_108:
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v146, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, v147, "end with error", buf, 2u);
            }
            break;
          default:
LABEL_110:
            sub_10030B5C0(a1, 52);
            return;
        }

        goto LABEL_110;
      case ',':
      case '-':
      case '.':
      case '/':
      case '0':
      case '1':
      case '2':
        return;
      case '3':
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 714, @"Endpoint revoked.", v11, v12, v13, v14, v156);
        sub_10030E138(a1);
        sub_10030B5C0(a1, 52);
        return;
      case '4':
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 721, @"OPManager: Done with pairing, ready to clean up the object.", v11, v12, v13, v14, v156);
        sub_1003128B8(*(id **)(a1 + 16), 0);
        uint64_t v29 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = 0;

        sub_1002FED88(*(id **)(a1 + 8), 0);
        uint64_t v30 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = 0;
LABEL_71:

        return;
      default:
        if (a2 == 31)
        {
          id v101 = objc_loadWeakRetained((id *)(a1 + 192));
          [v101 handleKmlOwnerPairingTrackingReceiptSaveResult:0];

          if (!*(unsigned char *)(a1 + 136)) {
            goto LABEL_68;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 628, @"OPManager:Trying the first transaction to get friend immo tokens.", v102, v103, v104, v105, v156);
          uint64_t v106 = KmlSignpostLogger();
          if (os_signpost_enabled(v106))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "PostOpFirstTxn", "start", buf, 2u);
          }

          if ((sub_1002FCE14(*(void *)(a1 + 8), *(void **)(a1 + 200)) & 1) == 0)
          {
LABEL_68:
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 636, @"We couldn't run the first post pairing transaction", v102, v103, v104, v105, v156);
            uint64_t v107 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            NSErrorUserInfoKey v164 = NSLocalizedDescriptionKey;
            uint64_t v108 = +[NSString stringWithUTF8String:KmlErrorString(8)];
            v165 = v108;
            id v109 = +[NSDictionary dictionaryWithObjects:&v165 forKeys:&v164 count:1];
            uint64_t v53 = +[NSError errorWithDomain:v107 code:8 userInfo:v109];

            [(id)a1 handleFirstPostPairingTransactionEndResult:v53];
LABEL_96:
          }
        }
        else if (a2 == 32)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 644, @"OPManager: Cancel requested.", v11, v12, v13, v14, v156);
          uint64_t v18 = *(void *)(a1 + 8);
          if (v18) {
            sub_1002FC8C4(v18);
          }
          else {
            [(id)a1 handleOwnerPairingCancellationWithResult:1];
          }
          uint64_t v116 = *(void *)(a1 + 16);
          sub_10030FC38(v116);
        }
        return;
    }
  }
  switch(a2)
  {
    case 0:
      uint64_t v15 = @"OPManager: Nothing to do here.";
      uint64_t v16 = 407;
      goto LABEL_29;
    case 1:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 411, @"Ask SE to Pre-Warm.", v11, v12, v13, v14, v156);
      uint64_t v31 = KmlSignpostLogger();
      if (os_signpost_enabled(v31))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v31, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpPreWarm", "start", buf, 2u);
      }

      sub_10030F6EC(*(void *)(a1 + 16), *(void **)(a1 + 80));
      return;
    case 2:
      uint64_t v15 = @"Done with Pre-Warm. Waiting for request to start pairing";
      uint64_t v16 = 417;
LABEL_29:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", v16, v15, v11, v12, v13, v14, a9);
      return;
    case 3:
      *(void *)(a1 + 160) = sub_100340370((uint64_t)KmlEndpointManager, @"OWNR");
      uint64_t v32 = *(void **)(a1 + 176);
      uint64_t v33 = *(void *)(a1 + 80);
      id v161 = 0;
      unsigned __int8 v34 = [v32 isDCKConfigurationAvailableFor:v33 error:&v161];
      id v39 = v161;
      uint64_t v40 = *(void *)(a1 + 80);
      if ((v34 & 1) != 0 || !v40)
      {
        uint64_t v111 = [*(id *)(a1 + 176) BOOLValueForSetting:0 manufacturer:v40 brand:0 uuid:0 error:0];
        unsigned int v112 = [v111 BOOLValue];

        id v41 = 0;
        if (!v112) {
          goto LABEL_114;
        }
        uint64_t v113 = +[NISession deviceCapabilities];
        unsigned __int8 v114 = [v113 supportsPreciseDistanceMeasurement];

        if (v114)
        {
          id v41 = 0;
          goto LABEL_114;
        }
        id v123 = +[NRPairedDeviceRegistry sharedInstance];
        id v124 = [v123 getActivePairedDevice];

        if (v124)
        {
          id v129 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C4F6386A-780D-40E5-9900-0A26C16273A1"];
          if ([v124 supportsCapability:v129])
          {
            id v130 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81D292E4-16D8-4630-82ED-BDF62B05E334"];
            unsigned int v131 = [v124 supportsCapability:v130];

            if (v131)
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 460, @"Allowing NFC only phone to have owner key since there is a paired UWB-capable watch", v125, v126, v127, v128, v156);
              id v41 = 0;
LABEL_113:

              goto LABEL_114;
            }
          }
          else
          {
          }
        }
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 463, @"NFC-only devices are blocked for (%@)", v125, v126, v127, v128, *(void *)(a1 + 80));
        uint64_t v148 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v168 = NSLocalizedDescriptionKey;
        uint64_t v149 = +[NSString stringWithUTF8String:KmlErrorString(218)];
        v169 = v149;
        id v150 = +[NSDictionary dictionaryWithObjects:&v169 forKeys:&v168 count:1];
        id v41 = +[NSError errorWithDomain:v148 code:218 userInfo:v150];

        goto LABEL_113;
      }
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 435, @"Paired is not supported for %@, error : %@", v35, v36, v37, v38, *(void *)(a1 + 80));
      if (v39)
      {
        id v41 = sesErrorToKmlError(v39, 0x21u);
      }
      else
      {
        uint64_t v117 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v170 = NSLocalizedDescriptionKey;
        uint64_t v118 = +[NSString stringWithUTF8String:KmlErrorString(33)];
        v171 = v118;
        uint64_t v119 = +[NSDictionary dictionaryWithObjects:&v171 forKeys:&v170 count:1];
        id v41 = +[NSError errorWithDomain:v117 code:33 userInfo:v119];
      }
LABEL_114:
      id v151 = objc_loadWeakRetained((id *)(a1 + 192));
      [v151 handleKmlOwnerPairingStartResult:v41];

      if (v41)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 472, @"client should call endPairingSession to cancel and clean out", v152, v153, v154, v155, v156);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 474, @"pre-conditions satisfied.", v152, v153, v154, v155, v156);
        sub_10030B5C0(a1, 11);
      }

      return;
    case 11:
      if (*(unsigned char *)(a1 + 184))
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 482, @"OPManager: Ask DX Manager to start probing process.", v11, v12, v13, v14, v156);
        uint64_t v42 = KmlSignpostLogger();
        if (os_signpost_enabled(v42))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpProbing", "start", buf, 2u);
        }

        sub_1002FD07C(*(void *)(a1 + 8));
        dispatch_time_t v43 = dispatch_time(0, 5000000000);
        uint64_t v44 = *(NSObject **)(a1 + 128);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10030DA0C;
        block[3] = &unk_10040B880;
        void block[4] = a1;
        dispatch_after(v43, v44, block);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 499, @"OPManager: Ask DX Manager to start pairing process.", v11, v12, v13, v14, v156);
        uint64_t v115 = KmlSignpostLogger();
        if (os_signpost_enabled(v115))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v115, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpCarConfigRx", "start", buf, 2u);
        }

        sub_1002FC56C(*(void *)(a1 + 8));
      }
      return;
    case 12:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 506, @"OPManager: Ask SE to create keys.", v11, v12, v13, v14, v156);
      id v45 = KmlSignpostLogger();
      if (os_signpost_enabled(v45))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v45, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpKeyCreate", "start", buf, 2u);
      }

      uint64_t v46 = sub_1002FCC54(*(void **)(a1 + 8));
      uint64_t v47 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v46;

      uint64_t v48 = [KmlDeviceConfigurationData alloc];
      uint64_t v49 = sub_10033F07C(*(id **)(a1 + 24));
      uint64_t v50 = sub_1003163A8((uint64_t)v48, v49);
      uint64_t v51 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v50;

      uint64_t v52 = sub_1002FEDB0(*(void *)(a1 + 24));
      uint64_t v53 = [v52 manufacturer];

      uint64_t v54 = sub_1002FEDB0(*(void *)(a1 + 24));
      uint64_t v55 = [v54 brand];

      uint64_t v56 = *(void **)(a1 + 176);
      uint64_t v57 = sub_1002FEDB0(*(void *)(a1 + 144));
      uint64_t v58 = [v56 BOOLValueForSetting:7 manufacturer:v53 brand:v55 uuid:v57 error:0];
      unsigned __int8 v59 = [v58 BOOLValue];

      uint64_t v60 = *(void **)(a1 + 176);
      uint64_t v61 = sub_1002FEDB0(*(void *)(a1 + 144));
      uint64_t v62 = [v60 BOOLValueForSetting:0 manufacturer:v53 brand:v55 uuid:v61 error:0];
      unsigned int v63 = [v62 BOOLValue];

      if ((v59 & 1) == 0)
      {
        sub_100317D44(*(void *)(a1 + 144), v64, v65, v66, v67, v68, v69, v70, v157);
        if (sub_1002FEDBC(*(void *)(a1 + 8)) == 2) {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 535, @"UWB is blocked for (%@,%@). We'll allow pairing over UWB, then make it NFC only key", v71, v72, v73, v74, (uint64_t)v53);
        }
      }
      if (!v63) {
        goto LABEL_94;
      }
      uint64_t v75 = +[NISession deviceCapabilities];
      unsigned __int8 v76 = [v75 supportsPreciseDistanceMeasurement];

      if (v76) {
        goto LABEL_94;
      }
      uint64_t v77 = +[NRPairedDeviceRegistry sharedInstance];
      uint64_t v78 = [v77 getActivePairedDevice];

      if (!v78) {
        goto LABEL_92;
      }
      id v83 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"C4F6386A-780D-40E5-9900-0A26C16273A1"];
      if ([v78 supportsCapability:v83])
      {
        id v84 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"81D292E4-16D8-4630-82ED-BDF62B05E334"];
        unsigned int v85 = [v78 supportsCapability:v84];

        if (v85)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 551, @"Allowing NFC only phone to have owner key since there is a paired UWB-capable watch", v79, v80, v81, v82, v157);

          goto LABEL_94;
        }
      }
      else
      {
      }
LABEL_92:
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 554, @"NFC-only devices are blocked for (%@,%@)", v79, v80, v81, v82, (uint64_t)v53);
      uint64_t v132 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v166 = NSLocalizedDescriptionKey;
      uint64_t v133 = +[NSString stringWithUTF8String:KmlErrorString(218)];
      int v167 = v133;
      uint64_t v134 = +[NSDictionary dictionaryWithObjects:&v167 forKeys:&v166 count:1];
      uint64_t v135 = +[NSError errorWithDomain:v132 code:218 userInfo:v134];

      if (v135)
      {
        uint64_t v136 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = v135;
        id v137 = v135;

        sub_10030B5C0(a1, 41);
        goto LABEL_95;
      }
LABEL_94:
      uint64_t v139 = *(void *)(a1 + 16);
      uint64_t v138 = *(void **)(a1 + 24);
      NSErrorUserInfoKey v140 = *(void **)(a1 + 56);
      sub_1002FCCFC(*(id **)(a1 + 8));
      id v137 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v141 = sub_1002FED98(*(void *)(a1 + 8));
      int v142 = sub_1002FEDA4(*(void *)(a1 + 8));
      int v143 = sub_1002FEDB0(*(void *)(a1 + 8));
      char v144 = sub_1003184F0(*(void *)(a1 + 144));
      sub_10030F89C(v139, v138, v53, v140, v137, v141, v142, v143, v144, *(void **)(a1 + 152));

LABEL_95:
      goto LABEL_96;
    case 13:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 578, @"OPManager: Ask DX Manager to share keys generation result with remote reader.", v11, v12, v13, v14, v156);
      long long v86 = KmlSignpostLogger();
      if (os_signpost_enabled(v86))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v86, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpKeyExchange", "start", buf, 2u);
      }

      sub_1002FC6F8(*(void *)(a1 + 8), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), *(void **)(a1 + 56));
      return;
    case 21:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 584, @"OPManager: Waiting for mailboxes to be written into.", v11, v12, v13, v14, v156);
      long long v87 = KmlSignpostLogger();
      if (os_signpost_enabled(v87))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpMailboxWriteTxn", "start", buf, 2u);
      }

      sub_1002FCD30(*(void *)(a1 + 8), *(void **)(a1 + 200));
      return;
    case 22:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 590, @"OPManager: Successfully exchanged key with remote reader", v11, v12, v13, v14, v156);
      if (sub_1003184F0(*(void *)(a1 + 144))
        && (+[NISession deviceCapabilities],
            long long v92 = objc_claimAutoreleasedReturnValue(),
            unsigned int v93 = [v92 supportsPreciseDistanceMeasurement],
            v92,
            v93)
        && (KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 599, @"disable full power express over nfc for uwb capable key", v88, v89, v90, v91, v158), sub_100310A94(*(dispatch_queue_t **)(a1 + 16)), (uint64_t v94 = objc_claimAutoreleasedReturnValue()) != 0))
      {
        id v159 = (id)v94;
        BOOL v95 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        id v96 = [v159 userInfo];
        uint64_t v97 = +[NSError errorWithDomain:v95 code:32 userInfo:v96];
        uint64_t v98 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = v97;

        sub_10030B5C0(a1, 43);
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 607, @"Create key tracking request", v88, v89, v90, v91, v158);
        uint64_t v110 = *(void *)(a1 + 16);
        sub_1002FCCCC(*(id **)(a1 + 8));
        id v159 = (id)objc_claimAutoreleasedReturnValue();
        sub_10030FE90(v110, v159, *(void **)(a1 + 88));
      }
      uint64_t v30 = v159;
      goto LABEL_71;
    case 23:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]", 615, @"OPManager: Send key tracking request and wait for tracking receipt", v11, v12, v13, v14, v156);
      uint64_t v99 = KmlSignpostLogger();
      if (os_signpost_enabled(v99))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v99, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "OpTrackingRequestSent", "", buf, 2u);
      }

      id v100 = objc_loadWeakRetained((id *)(a1 + 192));
      [v100 handleKmlOwnerPairingCompletionWithResult:*(void *)(a1 + 120) keyInformation:*(void *)(a1 + 96) keyTrackingRequest:*(void *)(a1 + 104)];

      sub_10030DAB4(a1);
      return;
    default:
      return;
  }
}

uint64_t sub_10030DA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(*(void *)(a1 + 32) + 208) == 42)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]_block_invoke", 491, @"Probing was already done when timer fired.", a5, a6, a7, a8, v10);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager setOwnerPairingState_sync:]_block_invoke", 488, @"Timer fired. End probing", a5, a6, a7, a8, v10);
    sub_1002FD184(*(void *)(*(void *)(a1 + 32) + 8));
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 137) = 1;
  uint64_t result = *(void *)(a1 + 32);
  if (*(unsigned char *)(result + 138))
  {
    return sub_10030B5C0();
  }
  return result;
}

void sub_10030DAB4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = sub_1002FD508(*(void *)(a1 + 8));
    sub_100310A84(*(void *)(a1 + 16));
    KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlOwnerPairingManager reportPairingEventToCA]", 930, @"Debug states: DXManagerStep - %08x ; SEManagerStep - %08x",
      v3,
      v4,
      v5,
      v6,
      v2);
    unsigned int v7 = sub_1002FD508(*(void *)(a1 + 8));
    unsigned int v8 = sub_100310A84(*(void *)(a1 + 16));
    BOOL v9 = sub_1003184DC(*(void *)(a1 + 144));
    if (sub_1003184F0(*(void *)(a1 + 144))) {
      uint64_t v10 = 2;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v64 = 0;
    uint64_t v65 = &v64;
    uint64_t v66 = 0x2020000000;
    uint64_t v67 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = &v60;
    uint64_t v62 = 0x2020000000;
    uint64_t v63 = 0;
    uint64_t v11 = *(void **)(a1 + 24);
    uint64_t v12 = *(void **)(a1 + 64);
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472;
    v59[2] = sub_10030F498;
    v59[3] = &unk_100419C50;
    void v59[4] = &v64;
    v59[5] = &v60;
    uint64_t v58 = sub_1002F9AD4((uint64_t)KmlAnalyticsLogger, v11, v12, v59);
    if (v58)
    {
      uint64_t v13 = [v58 localizedFailureReason];
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager reportPairingEventToCA]", 949, @"Could not get HUP data due to error %@", v14, v15, v16, v17, (uint64_t)v13);
    }
    uint64_t v18 = 168;
    if (!*(void *)(a1 + 120)) {
      uint64_t v18 = 208;
    }
    uint64_t v19 = *(void *)(a1 + v18);
    if (sub_1002FEDBC(*(void *)(a1 + 8)) == 2) {
      uint64_t v20 = 2;
    }
    else {
      uint64_t v20 = 1;
    }
    uint64_t v21 = *(void **)(a1 + 120);
    if (v21) {
      id v22 = [v21 code];
    }
    else {
      id v22 = 0;
    }
    uint64_t v23 = sub_1002FEDB0(*(void *)(a1 + 24));

    if (v23)
    {
      id v28 = sub_1002FEDB0(*(void *)(a1 + 24));
      uint64_t v29 = [v28 manufacturer];
      uint64_t v57 = (__CFString *)[v29 copy];

      uint64_t v30 = sub_1002FEDB0(*(void *)(a1 + 24));
      uint64_t v31 = [v30 brand];
      uint64_t v55 = (__CFString *)[v31 copy];

      uint64_t v32 = sub_1002FEDB0(*(void *)(a1 + 24));
      uint64_t v33 = [v32 regionString];
      uint64_t v56 = (__CFString *)[v33 copy];
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager reportPairingEventToCA]", 967, @"No routing info available", v24, v25, v26, v27, v48);
      uint64_t v55 = @"Unknown";
      uint64_t v56 = @"Unknown";
      uint64_t v57 = @"Unknown";
    }
    unsigned __int8 v34 = [*(id *)(a1 + 152) vehicleSupportedFrameworkVersionsForCA];
    id v35 = [v34 length];

    if (v35)
    {
      uint64_t v50 = [*(id *)(a1 + 152) vehicleSupportedFrameworkVersionsForCA];
    }
    else
    {
      uint64_t v50 = @"0000";
    }
    if ([*(id *)(a1 + 152) agreedKmlVehicleVersion] == 768) {
      char v36 = 0x80;
    }
    else {
      char v36 = 0;
    }
    unsigned __int8 v49 = v36;
    v69[0] = &off_10042E110;
    v68[0] = @"type";
    v68[1] = @"step";
    uint64_t v54 = +[NSNumber numberWithInteger:v19];
    v69[1] = v54;
    _OWORD v69[2] = v56;
    _OWORD v68[2] = @"dataCenterCode";
    v68[3] = @"HUPDataSource";
    uint64_t v53 = +[NSNumber numberWithUnsignedInteger:v65[3]];
    v69[3] = v53;
    v68[4] = @"vehicleCapabilities";
    uint64_t v52 = +[NSNumber numberWithUnsignedInteger:v61[3]];
    v69[4] = v52;
    v69[5] = v57;
    v68[5] = @"manufacturer";
    v68[6] = @"brand";
    v69[6] = v55;
    v68[7] = @"pairingTransport";
    uint64_t v51 = +[NSNumber numberWithUnsignedInt:v20];
    v69[7] = v51;
    v68[8] = @"totalOwnerKeysPaired";
    uint64_t v37 = +[NSNumber numberWithInteger:*(void *)(a1 + 160)];
    v69[8] = v37;
    v68[9] = @"status";
    uint64_t v38 = +[NSNumber numberWithUnsignedInt:v22];
    v69[9] = v38;
    v68[10] = @"dataExchangeStep";
    id v39 = +[NSNumber numberWithUnsignedInteger:v7];
    v69[10] = v39;
    v68[11] = @"seManagerState";
    uint64_t v40 = +[NSNumber numberWithUnsignedInteger:v8];
    v69[11] = v40;
    v68[12] = @"readerSupportedTransportTypes";
    id v41 = +[NSNumber numberWithUnsignedInteger:v10 | v9];
    v69[12] = v41;
    v68[13] = @"pairedKeyVersion";
    uint64_t v42 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:", [*(id *)(a1 + 152) agreedKmlVehicleVersion]);
    v69[13] = v42;
    v69[14] = v50;
    v68[14] = @"carSupportedFrameworkVersions";
    v68[15] = @"maxOfflineAttestationCount";
    dispatch_time_t v43 = +[NSNumber numberWithUnsignedChar:sub_100313ABC(*(void *)(a1 + 144))];
    v69[15] = v43;
    v68[16] = @"mailboxVersion";
    uint64_t v44 = +[NSNumber numberWithUnsignedChar:v49];
    v69[16] = v44;
    v68[17] = @"keyClassOriginBitmap";
    unsigned int v45 = sub_10033E910(*(void *)(a1 + 24));
    uint64_t v46 = +[NSNumber numberWithUnsignedChar:kmlUtilKeyClassOriginBitmap(v45)];
    v69[17] = v46;
    uint64_t v47 = +[NSDictionary dictionaryWithObjects:v69 forKeys:v68 count:18];

    sub_1002F9348((uint64_t)KmlAnalyticsLogger, v47);
    _Block_object_dispose(&v60, 8);
    _Block_object_dispose(&v64, 8);
  }
}

void sub_10030E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_10030E138(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 120);
    if (v2) {
      id v3 = [v2 code];
    }
    else {
      id v3 = 0;
    }
    unsigned int v4 = sub_10033E910(*(void *)(a1 + 24));
    uint64_t v5 = kmlUtilKeyClassOriginBitmap(v4);
    v9[0] = @"errorCode";
    uint64_t v6 = +[NSNumber numberWithUnsignedInt:v3];
    v10[0] = v6;
    v10[1] = &off_10042E128;
    v9[1] = @"accountRole";
    unint64_t v9[2] = @"didReceiveProductPlanIdentifier";
    void v10[2] = &off_10042E140;
    v10[3] = &off_10042E140;
    v9[3] = @"didReceiveSlotIdentifier";
    v9[4] = @"didReceiveImmoToken";
    void v10[4] = &off_10042E140;
    v10[5] = &off_10042E140;
    v9[5] = @"didReceiveOnlineBLEKeys";
    v9[6] = @"isOwner";
    v10[6] = &off_10042E158;
    v9[7] = @"keyClassOriginBitmap";
    unsigned int v7 = +[NSNumber numberWithUnsignedChar:v5];
    v10[7] = v7;
    unsigned int v8 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:8];

    sub_1002F9404((uint64_t)KmlAnalyticsLogger, v8);
  }
}

void sub_10030E488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(*(void *)(a1 + 32) + 120))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePairingTransportSessionFailedWithError:]_block_invoke", 756, @"Ignoring DXM error for OPManager error: %@", a5, a6, a7, a8, *(void *)(*(void *)(a1 + 32) + 120));
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePairingTransportSessionFailedWithError:]_block_invoke", 753, @"Propagating error from DXM session: %@", a5, a6, a7, a8, *(void *)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 120), *(id *)(a1 + 40));
  }
  uint64_t v9 = *(void *)(a1 + 32);

  sub_10030B5C0(v9, 43);
}

void sub_10030E644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
  [WeakRetained handleKmlOwnerPairingCancellationResult:*(unsigned __int8 *)(a1 + 40)];

  if (*(unsigned char *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 774, @"OPManager: Owner Pairing cancelled in DXM session", v11, v12, v13, v14, v27);
    if (*(unsigned char *)(*(void *)(a1 + 32) + 185))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 776, @"We don't report cancel success during preWarm", v15, v16, v17, v18, v28);
      uint64_t v19 = *(void *)(a1 + 32);
      uint64_t v20 = *(void **)(v19 + 120);
      *(void *)(v19 + 120) = 0;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 779, @"Owner pairing cancel successful.", v15, v16, v17, v18, v28);
      uint64_t v21 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      id v22 = +[NSString stringWithUTF8String:KmlErrorString(1)];
      uint64_t v30 = v22;
      uint64_t v23 = +[NSDictionary dictionaryWithObjects:&v30 forKeys:&v29 count:1];
      uint64_t v24 = +[NSError errorWithDomain:v21 code:1 userInfo:v23];
      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v26 = *(void **)(v25 + 120);
      *(void *)(v25 + 120) = v24;
    }
    sub_10030B5C0(*(void *)(a1 + 32), 43);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleOwnerPairingCancellationWithResult:]_block_invoke", 784, @"OPManager: Failed to cancel Owner Pairing", v11, v12, v13, v14, a9);
  }
}

void sub_10030E8E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
  [WeakRetained handleKmlOwnerPairingFirstTransactionCompletionResult:*(void *)(a1 + 40)];

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleFirstPostPairingTransactionEndResult:]_block_invoke", 794, @"OPManager: Done with first transaction after owner pairing with result:%@", v3, v4, v5, v6, *(void *)(a1 + 40));
  unsigned int v7 = KmlSignpostLogger();
  if (os_signpost_enabled(v7))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v22 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "PostOpFirstTxn", "end with result - %@", buf, 0xCu);
  }

  uint64_t v9 = sub_1002FEDB0(*(void *)(*(void *)(a1 + 32) + 24));
  uint64_t v10 = [v9 manufacturer];

  uint64_t v11 = sub_1002FEDB0(*(void *)(*(void *)(a1 + 32) + 24));
  uint64_t v12 = [v11 brand];

  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void **)(v13 + 176);
  uint64_t v15 = sub_1002FEDB0(*(void *)(v13 + 144));
  uint64_t v16 = [v14 BOOLValueForSetting:7 manufacturer:v10 brand:v12 uuid:v15 error:0];
  unsigned __int8 v17 = [v16 BOOLValue];

  if ((v17 & 1) == 0) {
    sub_100310C48(*(void *)(*(void *)(a1 + 32) + 16));
  }
  uint64_t v18 = *(void *)(a1 + 32);
  uint64_t v19 = *(void *)(v18 + 8);
  if (sub_1003184F0(*(void *)(v18 + 144)))
  {
    uint64_t v20 = +[NISession deviceCapabilities];
    sub_1002FD3A4(v19, 0, (char)[v20 supportsPreciseDistanceMeasurement], *(void **)(*(void *)(a1 + 32) + 200));
  }
  else
  {
    sub_1002FD3A4(v19, 0, 0, *(void **)(*(void *)(a1 + 32) + 200));
  }
  sub_10030B5C0(*(void *)(a1 + 32), 52);
}

void sub_10030EBB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleProbingCompletionWithBrandCode:error:]_block_invoke", 826, @"BrandCode : %ld, error: %@", a5, a6, a7, a8, *(void *)(a1 + 48));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 192));
  [WeakRetained handleKmlOwnerPairingProbingCompletionWithBrandCode:*(void *)(a1 + 48) error:*(void *)(a1 + 32)];

  objc_storeStrong((id *)(*(void *)(a1 + 40) + 120), *(id *)(a1 + 32));
  uint64_t v10 = *(void *)(a1 + 40);

  sub_10030B5C0(v10, 42);
}

void sub_10030ECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePairingDidStart]_block_invoke", 837, &stru_100421848, a5, a6, a7, a8, v9);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
  [WeakRetained handleKmlOwnerPairingDidStart];
}

void sub_10030EDC0(uint64_t a1)
{
  uint64_t v2 = KmlSignpostLogger();
  if (os_signpost_enabled(v2))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v67 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpKeyCreate", "end with result %@", buf, 0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 870, @"OPManager: Key creation failed", v4, v5, v6, v7, v59);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v8 = (uint64_t *)(a1 + 40);
    id v10 = (id)*(v8 - 1);
    uint64_t v11 = *(void **)(v9 + 120);
    *(void *)(v9 + 120) = v10;
    uint64_t v12 = 41;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 851, @"OPManager: Key creation succesful", v4, v5, v6, v7, v59);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v8 = (uint64_t *)(a1 + 40);
    uint64_t v14 = sub_1003128C8(*(void *)(v13 + 16));
    uint64_t v15 = *(void **)(*v8 + 32);
    *(void *)(*v8 + 32) = v14;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 853, @"--- Device Certificate Start ---", v16, v17, v18, v19, v60);
    uint64_t v20 = kmlUtilHexStringFromData(*(void **)(*v8 + 32));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 854, @"%@", v21, v22, v23, v24, (uint64_t)v20);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 855, @"--- Device Certificate End ---", v25, v26, v27, v28, v61);
    uint64_t v29 = sub_1003128D4(*(void *)(*v8 + 16));
    uint64_t v30 = *(void **)(*v8 + 40);
    *(void *)(*v8 + 40) = v29;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 857, @"--- Instance Attestation Start ---", v31, v32, v33, v34, v62);
    id v35 = kmlUtilHexStringFromData(*(void **)(*v8 + 40));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 858, @"%@", v36, v37, v38, v39, (uint64_t)v35);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 859, @"--- Instance Attestation End ---", v40, v41, v42, v43, v63);
    uint64_t v44 = sub_1003128E0(*(void *)(*v8 + 16));
    unsigned int v45 = *(void **)(*v8 + 48);
    *(void *)(*v8 + 48) = v44;

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 861, @"--- Key Attestation Start ---", v46, v47, v48, v49, v64);
    kmlUtilLogLargeData(@"Key Attestation", *(void **)(*v8 + 48));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleKeyCreationCompletionResult:]_block_invoke", 863, @"--- Key Attestation End ---", v50, v51, v52, v53, v65);
    uint64_t v54 = sub_1003128EC(*(void *)(*v8 + 16));
    uint64_t v55 = *(void **)(*v8 + 64);
    *(void *)(*v8 + 64) = v54;

    uint64_t v56 = sub_1003128F8(*(void *)(*v8 + 16));
    uint64_t v57 = *(void **)(*v8 + 200);
    *(void *)(*v8 + 200) = v56;

    uint64_t v58 = sub_1002FEDBC(*(void *)(*v8 + 16));
    uint64_t v11 = *(void **)(*v8 + 72);
    *(void *)(*v8 + 72) = v58;
    uint64_t v12 = 13;
  }

  sub_10030B5C0(*v8, v12);
}

void sub_10030F1D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 208) == 22)
  {
    if (*(void *)(a1 + 40))
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager handleEncryptionResult:trackingRequest:keyInformation:]_block_invoke", 898, @"OPManager: Failed to encrypt key tracking request", a5, a6, a7, a8, v12);
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 120), *(id *)(a1 + 40));
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 43;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleEncryptionResult:trackingRequest:keyInformation:]_block_invoke", 902, @"OPManager: Encrypted the key tracking request", a5, a6, a7, a8, v12);
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 104), *(id *)(a1 + 48));
      objc_storeStrong((id *)(*(void *)(a1 + 32) + 96), *(id *)(a1 + 56));
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = 23;
    }
    sub_10030B5C0(v10, v11);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handleEncryptionResult:trackingRequest:keyInformation:]_block_invoke", 893, @"We are not trying to create the key tracking request. Ignore", a5, a6, a7, a8, a9);
  }
}

void sub_10030F360(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 192));
  [WeakRetained handleKmlOwnerPairingPreWarmCompletionResult:*(void *)(a1 + 40)];

  uint64_t v3 = KmlSignpostLogger();
  if (os_signpost_enabled(v3))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v4;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpPreWarm", "result=%@", buf, 0xCu);
  }

  if (*(void *)(a1 + 40))
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlOwnerPairingManager handlePreWarmResult:]_block_invoke", 917, @"Pre-Warm failed - %@", v5, v6, v7, v8, *(void *)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 120), *(id *)(a1 + 40));
    uint64_t v9 = 43;
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlOwnerPairingManager handlePreWarmResult:]_block_invoke", 921, @"OPManager: Pre-warm successful", v5, v6, v7, v8, v10);
    uint64_t v9 = 2;
  }
  sub_10030B5C0(*(void *)(a1 + 32), v9);
}

uint64_t sub_10030F498(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a3;
  return result;
}

BOOL sub_10030F4B4(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 184) != 0;
  }
  return result;
}

BOOL sub_10030F4C8(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 185) != 0;
  }
  return result;
}

id *sub_10030F600(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)KmlSeManager;
    a1 = (id *)[super init];
    if (a1)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager initWithDelegate:]", 74, @"SEManager: let's init", v4, v5, v6, v7, (uint64_t)v16.receiver);
      objc_storeWeak(a1 + 17, v3);
      a1[1] = 0;
      a1[2] = 0;
      *((unsigned char *)a1 + 96) = 1;
      uint64_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      dispatch_queue_t v9 = dispatch_queue_create("com.apple.sesd.kml.seManager", v8);
      id v10 = a1[16];
      a1[16] = v9;

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager initWithDelegate:]", 81, @"SEManager: ready to roll", v11, v12, v13, v14, (uint64_t)v16.receiver);
    }
  }

  return a1;
}

void sub_10030F6EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(NSObject **)(a1 + 128);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _OWORD v6[2] = sub_10030F794;
    v6[3] = &unk_10040D1A0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10030F794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(void *)(*(void *)(a1 + 32) + 8))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager preWarmWithManufacturer:]_block_invoke", 91, @"SEManager: PreWarm SE for pairing with %@", a5, a6, a7, a8, *(void *)(a1 + 40));
    objc_storeStrong((id *)(*(void *)(a1 + 32) + 32), *(id *)(a1 + 40));
    uint64_t v9 = *(void *)(a1 + 32);
    sub_10030F820(v9, 1);
  }
}

void sub_10030F820(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(NSObject **)(a1 + 128);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100310EF4;
    v3[3] = &unk_10040D920;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }
}

void sub_10030F89C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, void *a10)
{
  id v25 = a2;
  id v17 = a3;
  id v18 = a4;
  id v19 = a5;
  id v20 = a6;
  id v21 = a7;
  id v22 = a8;
  id v23 = a10;
  if (a1)
  {
    uint64_t v24 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030FA48;
    block[3] = &unk_100419C78;
    id v27 = v17;
    uint64_t v28 = a1;
    id v29 = v25;
    id v30 = v18;
    id v31 = v19;
    id v32 = v20;
    id v33 = v21;
    id v34 = v22;
    char v36 = a9;
    id v35 = v23;
    dispatch_async(v24, block);
  }
}

void sub_10030FA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createOwnerPairingKeysWithConfig:manufacturer:keyName:secureElementSession:bleIntroKey:bleOOBMasterKey:longTermSharedSecret:uwbSupported:versionInformation:]_block_invoke", 109, @"SEManager: Create keys for manufacturer: %@", a5, a6, a7, a8, *(void *)(a1 + 32));
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 24), *(id *)(a1 + 48));
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 40), *(id *)(a1 + 56));
  uint64_t v9 = *(void *)(a1 + 40);
  if (!*(void *)(v9 + 32))
  {
    objc_storeStrong((id *)(v9 + 32), *(id *)(a1 + 32));
    uint64_t v9 = *(void *)(a1 + 40);
  }
  if (*(void *)(a1 + 32))
  {
    unsigned __int8 v10 = [*(id *)(v9 + 32) isEqualToString:];
    uint64_t v9 = *(void *)(a1 + 40);
    if ((v10 & 1) == 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createOwnerPairingKeysWithConfig:manufacturer:keyName:secureElementSession:bleIntroKey:bleOOBMasterKey:longTermSharedSecret:uwbSupported:versionInformation:]_block_invoke", 117, @"We pre-warmed for %@, but request to create endpoint is for %@", v11, v12, v13, v14, *(void *)(v9 + 32));
      objc_storeStrong((id *)(*(void *)(a1 + 40) + 32), *(id *)(a1 + 32));
      uint64_t v9 = *(void *)(a1 + 40);
    }
  }
  objc_storeStrong((id *)(v9 + 56), *(id *)(a1 + 64));
  id v32 = 0;
  uint64_t v15 = +[NFSecureElement embeddedSecureElementWithError:&v32];
  id v16 = v32;
  id v17 = [v15 info];
  uint64_t v18 = [v17 serialNumber];
  uint64_t v19 = *(void *)(a1 + 40);
  id v20 = *(void **)(v19 + 64);
  *(void *)(v19 + 64) = v18;

  uint64_t v25 = *(void *)(a1 + 40);
  if (!*(void *)(v25 + 64) || v16)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createOwnerPairingKeysWithConfig:manufacturer:keyName:secureElementSession:bleIntroKey:bleOOBMasterKey:longTermSharedSecret:uwbSupported:versionInformation:]_block_invoke", 128, @"Failed to retrieve SEID %@", v21, v22, v23, v24, (uint64_t)v16);
    uint64_t v27 = 7;
    uint64_t v28 = 120;
    uint64_t v26 = v16;
  }
  else
  {
    objc_storeStrong((id *)(v25 + 72), *(id *)(a1 + 72));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 80), *(id *)(a1 + 80));
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 88), *(id *)(a1 + 88));
    *(unsigned char *)(*(void *)(a1 + 40) + 96) = *(unsigned char *)(a1 + 104);
    uint64_t v26 = *(void **)(a1 + 96);
    uint64_t v27 = 4;
    uint64_t v28 = 104;
  }
  uint64_t v29 = *(void *)(a1 + 40);
  id v30 = v26;
  id v31 = *(void **)(v29 + v28);
  *(void *)(v29 + v28) = v30;

  sub_10030F820(*(void *)(a1 + 40), v27);
}

void sub_10030FC38(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030FCB4;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_10030FCB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(uint64_t *)(v1 + 8) > 4)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 136));
    [WeakRetained handleKeyCreationCancellationResult:0];
  }
  else
  {
    sub_10030F820(v1, 8);
  }
}

void sub_10030FD28(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 128));
    uint64_t v2 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030FDB4;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_sync(v2, block);
  }
}

void sub_10030FDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(void *)(*(void *)(a1 + 32) + 184))
  {
    SESEndPointDelete();
    id v14 = 0;
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 40);
    if (v14) {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"[(KmlSeManager *)"SEManager: Failed to delete key with name:%@ and id:%@ deleteKey_sync], v10, v11, v12, v13, v15);
    }
    else {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager deleteKey_sync]_block_invoke", 171, @"SEManager: Deleted key with name: %@ and id: %@", v10, v11, v12, v13, v15);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager deleteKey_sync]_block_invoke", 163, @"There is no key to delete", a5, a6, a7, a8, a9);
  }
}

void sub_10030FE90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10030FF58;
    block[3] = &unk_10040D2C0;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_10030FF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a1 + 32);
  if (*(void *)(v9 + 8) != 5)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEncryptedTrackingRequestWithOpaqueAttestation:anonymizedDsid:]_block_invoke", 205, @"SEManager: Requested to create key tracking request in wrong state.", a5, a6, a7, a8, (uint64_t)v24);
    id v13 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
    uint64_t v11 = +[NSString stringWithUTF8String:KmlErrorString(28)];
    uint64_t v26 = v11;
    uint64_t v18 = +[NSDictionary dictionaryWithObjects:&v26 forKeys:&v25 count:1];
    uint64_t v20 = +[NSError errorWithDomain:v13 code:28 userInfo:v18];
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void **)(v21 + 120);
    *(void *)(v21 + 120) = v20;

    id v16 = 0;
    uint64_t v15 = 0;
    goto LABEL_7;
  }
  id v10 = *(void **)(v9 + 176);
  id v24 = 0;
  uint64_t v11 = sub_100341424((uint64_t)KmlEndpointManager, v10, &v24);
  id v12 = v24;
  id v13 = v12;
  uint64_t v14 = *(void *)(a1 + 32);
  if (!v11)
  {
    id v13 = v12;
    id v16 = 0;
    uint64_t v15 = 0;
    uint64_t v18 = *(void **)(v14 + 120);
    *(void *)(v14 + 120) = v13;
    goto LABEL_7;
  }
  sub_1003101AC(*(void *)(a1 + 32), *(void **)(a1 + 40), v11, *(void **)(a1 + 48));
  uint64_t v15 = sub_100310740(*(void **)(a1 + 32), v11);
  id v16 = [objc_alloc((Class)DAKeyInformation) initWithEndpoint:v11];
  id v17 = sub_10033F660(*(void *)(*(void *)(a1 + 32) + 24));

  if (v17)
  {
    uint64_t v18 = sub_10033F660(*(void *)(*(void *)(a1 + 32) + 24));
    id v19 = (id)SESEndPointTriggerHeadUnitPairing();
LABEL_7:
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136));
  [WeakRetained handleEncryptionResult:*(void *)(*(void *)(a1 + 32) + 120) trackingRequest:v15 keyInformation:v16];
}

void sub_1003101AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    if ([*(id *)(a1 + 104) agreedKmlVehicleVersion] != 768 && v7 != 0)
    {
      id v15 = v7;
LABEL_9:
      id v16 = +[NSMutableArray array];
      id v17 = sub_100315D20((uint64_t)KmlTlv, 32546, *(void **)(a1 + 160));
      [v16 addObject:v17];

      uint64_t v18 = sub_100315D20((uint64_t)KmlTlv, 32548, *(void **)(a1 + 168));
      [v16 addObject:v18];

      id v19 = [KmlDeviceConfigurationData alloc];
      uint64_t v20 = [v8 deviceConfiguration];
      uint64_t v21 = (void *)sub_1003163A8((uint64_t)v19, v20);

      if (sub_100316F44((BOOL)v21) && sub_100316F5C((uint64_t)v21))
      {
        uint64_t v70 = 0;
        uint64_t v22 = SESEndPointCreateEncryptionKey();
        id v23 = 0;
        if (v23)
        {
          uint64_t v28 = v23;
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 485, @"Error getting endpoint encryption key - %@", v24, v25, v26, v27, (uint64_t)v23);
LABEL_35:

          goto LABEL_36;
        }
        uint64_t v65 = v21;
        uint64_t v28 = v22;
      }
      else
      {
        uint64_t v65 = v21;
        uint64_t v28 = 0;
      }
      uint64_t v29 = sub_100315D20((uint64_t)KmlTlv, 213, v15);
      [v16 addObject:v29];

      id v30 = [*(id *)(a1 + 40) dataUsingEncoding:4];
      id v31 = sub_100315D20((uint64_t)KmlTlv, 211, v30);
      [v16 addObject:v31];

      if ([*(id *)(a1 + 104) agreedKmlVehicleVersion] == 768)
      {
        id v32 = sub_10033CB34(*(void *)(a1 + 24));
        uint64_t v22 = kmlUtilGenerateAccountInfoHash(v9, v32);

        if ([v22 length])
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 498, @"Add account info hash", v33, v34, v35, v36, v61);
          uint64_t v37 = sub_100315D20((uint64_t)KmlTlv, 94, v22);
          [v16 addObject:v37];

          id v38 = v9;
          id v39 = *(id *)(a1 + 112);
          *(void *)(a1 + 112) = v38;
        }
        else
        {
          id v40 = v15;
          id v39 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
          uint64_t v41 = [v39 objectForKey:@"BypassAccountInfoHash"];
          if (!isInternalBuild() || !v41)
          {
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 508, @"Error generating account info hash", v42, v43, v44, v45, v61);

            id v15 = v40;
LABEL_34:
            uint64_t v21 = v65;
            goto LABEL_35;
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 506, @"Ignoring error in generating account info hash", v42, v43, v44, v45, v61);

          id v15 = v40;
        }
      }
      id v62 = v15;
      id v63 = v9;
      id v64 = v7;
      uint64_t v46 = [v8 privacyPublicKey];
      uint64_t v47 = sub_100315D20((uint64_t)KmlTlv, 24393, v46);
      [v16 addObject:v47];

      uint64_t v48 = [@"ECIES_v1" dataUsingEncoding:4];
      uint64_t v49 = sub_100315D20((uint64_t)KmlTlv, 218, v48);
      [v16 addObject:v49];

      uint64_t v22 = +[NSMutableData data];
      long long v66 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      id v50 = v16;
      id v51 = [v50 countByEnumeratingWithState:&v66 objects:v71 count:16];
      if (v51)
      {
        id v52 = v51;
        uint64_t v53 = *(void *)v67;
        do
        {
          for (uint64_t i = 0; i != v52; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v67 != v53) {
              objc_enumerationMutation(v50);
            }
            uint64_t v55 = *(void *)(*((void *)&v66 + 1) + 8 * i);
            if (sub_10005D5A8(v55) == 213 && v28 != 0) {
              [v22 appendData:v28];
            }
            uint64_t v57 = sub_100316294(v55);
            [v22 appendData:v57];
          }
          id v52 = [v50 countByEnumeratingWithState:&v66 objects:v71 count:16];
        }
        while (v52);
      }

      uint64_t v58 = sub_100315D20((uint64_t)KmlTlv, 32574, v22);
      uint64_t v59 = sub_100316294((uint64_t)v58);
      uint64_t v60 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = v59;

      kmlUtilLogLargeData(@"plaintext tracking request", *(void **)(a1 + 48));
      id v9 = v63;
      id v7 = v64;
      id v15 = v62;
      goto LABEL_34;
    }
    sub_1003120EC(a1, v8);
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    if (v15) {
      goto LABEL_9;
    }
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager buildTrackingRequestWithOpaqueAttestation:endpoint:anonymizedDsid:]", 468, @"Opaue attestation missing.", v11, v12, v13, v14, v61);
  }
LABEL_36:
}

void *sub_100310740(void *a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    if (a1[6])
    {
      id v8 = SESEndPointPrivacyEncryption();
      id v9 = 0;
      if (v9)
      {
        uint64_t v14 = v9;
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager encryptTrackingRequestWithEndpoint:]", 559, @"SEManager: Failed to encrypt tracking reques with - %@", v10, v11, v12, v13, (uint64_t)v9);
        id v15 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        id v16 = [v14 userInfo];
        uint64_t v17 = +[NSError errorWithDomain:v15 code:28 userInfo:v16];
        uint64_t v18 = (void *)a1[15];
        a1[15] = v17;
      }
      else
      {
        id v21 = objc_alloc((Class)DAAlishaKeyEncryptedRequest);
        uint64_t v22 = [v8 version];
        id v23 = [v8 ephemeralPublicKeydata];
        uint64_t v24 = [v8 receiverPublicKeyHash];
        uint64_t v25 = [v8 cipherText];
        id v15 = [v21 initWithVersion:v22 ephemeralPublicKey:v23 publicKeyHash:v24 encryptedRequest:v25];

        uint64_t v26 = sub_1003124F8(a1, v15, v7);
        uint64_t v14 = (void *)v26;
        if (!v26)
        {
          sub_10030F820((uint64_t)a1, 6);
          id v15 = v15;
          a1 = v15;
          goto LABEL_10;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager encryptTrackingRequestWithEndpoint:]", 568, @"SEManager: Failed to save tracking reques with - %@", v27, v28, v29, v30, v26);
        id v16 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        id v31 = [v14 userInfo];
        uint64_t v32 = +[NSError errorWithDomain:v16 code:28 userInfo:v31];
        uint64_t v33 = (void *)a1[15];
        a1[15] = v32;
      }
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager encryptTrackingRequestWithEndpoint:]", 551, @"SEManager: Failed to create tracking request", v3, v4, v5, v6, v35);
      uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
      id v8 = +[NSString stringWithUTF8String:KmlErrorString(28)];
      uint64_t v37 = v8;
      id v15 = +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1];
      uint64_t v19 = +[NSError errorWithDomain:v14 code:28 userInfo:v15];
      uint64_t v20 = (void *)a1[15];
      a1[15] = v19;
    }
    a1 = 0;
LABEL_10:
  }

  return a1;
}

uint64_t sub_100310A84(uint64_t result)
{
  if (result) {
    return (*(_DWORD *)(result + 16) << 16);
  }
  return result;
}

dispatch_queue_t *sub_100310A94(dispatch_queue_t *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = &v5;
    uint64_t v7 = 0x3032000000;
    id v8 = sub_100310BA8;
    id v9 = sub_100310BB8;
    id v10 = 0;
    dispatch_assert_queue_not_V2(a1[16]);
    uint64_t v2 = v1[16];
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100310BC0;
    unint64_t v4[3] = &unk_10040D310;
    v4[4] = v1;
    void v4[5] = &v5;
    dispatch_sync(v2, v4);
    uint64_t v1 = (dispatch_queue_t *)(id)v6[5];
    _Block_object_dispose(&v5, 8);
  }

  return v1;
}

void sub_100310B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100310BA8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100310BB8(uint64_t a1)
{
}

void sub_100310BC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v2 + 40);
  SESEndPointConfigureNFCExpressInLPM();
  objc_storeStrong((id *)(v2 + 40), obj);
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlSeManager *)"disable nfc express mode in full power mode disableNfcExpress_sync], v3, v4, v5, v6, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
}

void sub_100310C48(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 128);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100310CC4;
    block[3] = &unk_10040B880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }
}

void sub_100310CC4(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 176);
  id v34 = 0;
  uint64_t v2 = sub_100341424((uint64_t)KmlEndpointManager, v1, &v34);
  id v3 = v34;
  id v8 = v3;
  if (v2)
  {
    id v9 = [KmlDeviceConfigurationData alloc];
    id v10 = [v2 deviceConfiguration];
    uint64_t v11 = (id *)sub_1003163A8((uint64_t)v9, v10);

    sub_100317D44((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18, v31);
    uint64_t v19 = sub_100316988(v11);
    uint64_t v20 = kmlUtilHexStringFromData(v19);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager disableUwbTransport]_block_invoke", 244, @"DeviceConfigData: %@", v21, v22, v23, v24, (uint64_t)v20);

    uint64_t v33 = v19;
    id v25 = v19;
    uint64_t v30 = SESEndPointUpdateWithBlock();
    if (v30) {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager disableUwbTransport]_block_invoke", 258, @"SEManager: Could not update endpoint", v26, v27, v28, v29, v32);
    }
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager disableUwbTransport]_block_invoke", 237, @"No endpoint found: %@", v4, v5, v6, v7, (uint64_t)v3);
  }
}

void sub_100310E78(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  [v3 setDeviceConfiguration:v2];
  [v3 setBleDCKIdentifier:0];
  [v3 setBleOOBKey:0];
  [v3 setSupportedRKEFunctions:0];
  [v3 setBleUUID:0];
}

void sub_100310EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a1 + 32;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(v11 + 8);
  if (v10 <= *(void *)(v9 + 8)) {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState:]_block_invoke", 268, @"SEManager: Current state higher than new state. Do nothing", a5, a6, a7, a8, a9);
  }
  else {
    sub_100310F24(v9, v10, a3, a4, a5, a6, a7, a8, a9);
  }
}

void sub_100310F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 278, @"SEManager: Current state %ld, new state %ld", a5, a6, a7, a8, *(void *)(a1 + 8));
    uint64_t v15 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v15;
    switch(a2)
    {
      case 1:
        SESEndPointPreWarm();
        return;
      case 2:
        uint64_t v16 = @"Done with pre-warm. Waiting for next steps.";
        uint64_t v17 = 303;
        goto LABEL_11;
      case 3:
        uint64_t v16 = @"SEManager: No pre-conditions currently";
        uint64_t v17 = 307;
        goto LABEL_11;
      case 4:
        uint64_t v18 = sub_1003112F4((id **)a1);
        id obj = (id)v18;
        if (v18)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 313, @"SEManager: error while creating endpoint - %@", v19, v20, v21, v22, v18);
          objc_storeStrong((id *)(a1 + 120), obj);
          uint64_t v23 = 7;
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 318, @"SEManager: Endpoint created successfully. Time to track the key.", v19, v20, v21, v22, v26);
          uint64_t v23 = 5;
        }
        sub_10030F820(a1, v23);
        goto LABEL_19;
      case 5:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", 325, @"SEManager: Ready to create key tracking request.", v11, v12, v13, v14, v26);
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 136));
        id obj = WeakRetained;
        uint64_t v25 = 0;
        goto LABEL_15;
      case 6:
        uint64_t v16 = @"SEManager: Tracking request created. All Done";
        uint64_t v17 = 330;
LABEL_11:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager setCurrentState_sync:]", v17, v16, v11, v12, v13, v14, a9);
        return;
      case 7:
        id WeakRetained = objc_loadWeakRetained((id *)(a1 + 136));
        id obj = WeakRetained;
        uint64_t v25 = *(void *)(a1 + 120);
LABEL_15:
        [WeakRetained handleKeyCreationCompletionResult:v25];
        goto LABEL_19;
      case 8:
        id obj = objc_loadWeakRetained((id *)(a1 + 136));
        [obj handleKeyCreationCancellationResult:1];
LABEL_19:

        break;
      default:
        return;
    }
  }
}

void sub_100311184(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(v4 + 128);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_100311220;
  _OWORD v7[3] = &unk_10040D1A0;
  v7[4] = v4;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_100311220(uint64_t a1)
{
  sub_10030F820(*(void *)(a1 + 32), 2);
  if (*(void *)(a1 + 40))
  {
    uint64_t v2 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    id v3 = [*(id *)(a1 + 40) userInfo];
    id v5 = +[NSError errorWithDomain:v2 code:19 userInfo:v3];
  }
  else
  {
    id v5 = 0;
  }
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 136));
  [WeakRetained handlePreWarmResult:v5];
}

id **sub_1003112F4(id **a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_10033E7F4((uint64_t)a1[3]);
    id v3 = +[SEEndPointConfiguration configurationWithOpt1:v2 opt2:sub_10033E910((uint64_t)v1[3])];
    if (v3)
    {
      unsigned int v4 = sub_10033E910((uint64_t)v1[3]);
      if (!kmlUtilIsFleetKey(v4)) {
        goto LABEL_7;
      }
      if (isInternalBuild())
      {
        id v9 = [objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
        uint64_t v10 = [v9 objectForKey:@"AllowFleetOP"];

        if (v10)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 358, @"Allow Owner Pairing attempt with a fleet car", v5, v6, v7, v8, v84);

LABEL_7:
          uint64_t v11 = sub_10033CA08((uint64_t)v1[3]);
          id v90 = [v11 copy];

          uint64_t v12 = sub_10033DE88((uint64_t)v1[3]);
          id v13 = [v12 copy];

          uint64_t v14 = sub_10033DFB4((uint64_t)v1[3]);
          id v15 = [v14 copy];

          uint64_t v16 = sub_10033CB34((uint64_t)v1[3]);
          id v17 = [v16 copy];

          uint64_t v18 = sub_10033DD5C((uint64_t)v1[3]);
          unsigned int v93 = +[NSArray arrayWithObjects:v18];

          uint64_t v19 = sub_1003400EC((uint64_t)KmlEndpointManager, @"OWNR");
          uint64_t v20 = v1[18];
          v1[18] = (id *)v19;

          id v92 = v15;
          id v89 = v17;
          if ([v1[13] agreedKmlVehicleVersion] == 768)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 380, @"getting v3 mailbox data sizes", v21, v22, v23, v24, 0);
            if (sub_10033E66C((uint64_t)v1[3]))
            {
              uint64_t v91 = +[NSNumber numberWithUnsignedInteger:sub_10033E66C((uint64_t)v1[3])];
            }
            else
            {
              uint64_t v91 = 0;
            }
            if (sub_10033E43C((uint64_t)v1[3]))
            {
              unsigned int v30 = sub_10033E43C((uint64_t)v1[3]);
LABEL_21:
              id v31 = v13;
              uint64_t v32 = +[NSNumber numberWithUnsignedInteger:v30];
              goto LABEL_23;
            }
          }
          else
          {
            if (sub_10033E324((uint64_t)v1[3]))
            {
              uint64_t v91 = +[NSNumber numberWithUnsignedInteger:sub_10033E324((uint64_t)v1[3])];
            }
            else
            {
              uint64_t v91 = 0;
            }
            if (sub_10033E20C((uint64_t)v1[3]))
            {
              unsigned int v30 = sub_10033E20C((uint64_t)v1[3]);
              goto LABEL_21;
            }
          }
          id v31 = v13;
          uint64_t v32 = 0;
LABEL_23:
          id v33 = [v32 unsignedIntValue];
          [v91 unsignedIntValue];
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlSeManager *)"getting mailbox data sizes: private: 0x%04x createEndPoint], v34, v35, v36, v37, (uint64_t)v33);
          id v38 = sub_10033F2A8(v1[3]);
          sub_10033E0E0((uint64_t)v1[3]);
          long long v87 = v88 = v32;
          uint64_t v26 = v31;
          uint64_t v25 = v90;
          id v39 = SESEndPointCreateForAlishaWithSession();
          id v40 = 0;

          if (v40)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 408, @"Error in creating endpoint : %@", v41, v42, v43, v44, (uint64_t)v40);
            sesErrorToKmlError(v40, 0xFu);
            uint64_t v1 = (id **)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            uint64_t v45 = [v39 certificates];
            uint64_t v46 = [v45 objectAtIndexedSubscript:0];
            uint64_t v47 = v1[19];
            v1[19] = (id *)v46;

            uint64_t v48 = [v39 certificates];
            uint64_t v49 = [v48 objectAtIndexedSubscript:1];
            id v50 = v1[20];
            v1[20] = (id *)v49;

            id v51 = [v39 certificates];
            uint64_t v52 = [v51 objectAtIndexedSubscript:2];
            uint64_t v53 = v1[21];
            v1[21] = (id *)v52;

            uint64_t v58 = v1[19];
            if (v58)
            {
              if ([v58 length])
              {
                uint64_t v59 = v1[20];
                if (v59)
                {
                  if ([v59 length])
                  {
                    uint64_t v60 = v1[21];
                    if (v60)
                    {
                      if ([v60 length])
                      {
                        uint64_t v27 = v92;
                        uint64_t v65 = v88;
                        if ([v1[13] agreedKmlVehicleVersion] == 768)
                        {
                          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 427, @"getting v3 mailbox data sizes", v61, v62, v63, v64, (uint64_t)v38);
                          long long v66 = sub_10033EEEC(v1[3]);
                          sub_10033EC84(v1[3]);
                        }
                        else
                        {
                          long long v66 = sub_10033EB58((uint64_t)v1[3]);
                          sub_10033EA2C((uint64_t)v1[3]);
                        long long v86 = };
                        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlSeManager *)"SEManager: EndPoint created createEndPoint], v70, v71, v72, v73, (uint64_t)v66);
                        uint64_t v74 = [v39 publicKeyIdentifier];
                        uint64_t v75 = v1[22];
                        v1[22] = (id *)v74;

                        uint64_t v76 = kmlUtilHexStringFromData(v1[22]);
                        uint64_t v77 = v1[23];
                        v1[23] = (id *)v76;

                        SESEndPointConfigureMailBoxesWithSession();
                        id v78 = 0;
                        if (v78)
                        {
                          id v83 = v78;
                          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager createEndPoint]", 447, @"SEManager: Could not configure Mailboxes", v79, v80, v81, v82, v85);
                        }
                        else
                        {
                          id v83 = sub_100311B68(v1);
                        }
                        id v40 = v83;

                        uint64_t v1 = (id **)v40;
                        goto LABEL_35;
                      }
                    }
                  }
                }
              }
            }
            KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager createEndPoint]", 420, @"Missing attestations", v54, v55, v56, v57, (uint64_t)v38);
            id v40 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
            v94[0] = NSLocalizedDescriptionKey;
            long long v67 = +[NSString stringWithUTF8String:KmlErrorString(6)];
            v94[1] = NSLocalizedFailureReasonErrorKey;
            v95[0] = v67;
            v95[1] = @"Missing attestations";
            long long v68 = +[NSDictionary dictionaryWithObjects:v95 forKeys:v94 count:2];
            uint64_t v1 = +[NSError errorWithDomain:v40 code:6 userInfo:v68];

            id v17 = v89;
          }
          uint64_t v27 = v92;
          uint64_t v65 = v88;
LABEL_35:

          goto LABEL_36;
        }
      }
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager createEndPoint]", 360, @"Owner Pairing attempt with a fleet car blocked", v5, v6, v7, v8, v84);
      uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      v96[0] = NSLocalizedDescriptionKey;
      uint64_t v26 = +[NSString stringWithUTF8String:KmlErrorString(33)];
      v96[1] = NSLocalizedFailureReasonErrorKey;
      v97[0] = v26;
      v97[1] = @"OwnerPairing with fleet cars blocked";
      uint64_t v27 = +[NSDictionary dictionaryWithObjects:v97 forKeys:v96 count:2];
      uint64_t v28 = v25;
      uint64_t v29 = 33;
    }
    else
    {
      uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      v98[0] = NSLocalizedDescriptionKey;
      uint64_t v26 = +[NSString stringWithUTF8String:KmlErrorString(6)];
      v98[1] = NSLocalizedFailureReasonErrorKey;
      v99[0] = v26;
      v99[1] = @"Invalid endpoint configuration option group values (RFU bits set)";
      uint64_t v27 = +[NSDictionary dictionaryWithObjects:v99 forKeys:v98 count:2];
      uint64_t v28 = v25;
      uint64_t v29 = 6;
    }
    uint64_t v1 = +[NSError errorWithDomain:v28 code:v29 userInfo:v27];
LABEL_36:
  }

  return v1;
}

id **sub_100311B68(id **a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = sub_10033F04C(a1[3]);
    id v3 = kmlUtilHexStringFromData(v2);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 666, @"MailboxMappingData: %@", v4, v5, v6, v7, (uint64_t)v3);

    uint64_t v8 = sub_100313018((char *)[KmlMailboxMappingData alloc], v2, (__int16)[v1[13] agreedKmlVehicleVersion]);
    if ([v1[13] agreedKmlVehicleVersion] == 768)
    {
      sub_100313B1C((uint64_t)v8);
      uint64_t v86 = 0;
      SESEndPointGetPrivateDataWithSession();
      id v9 = (id *)objc_claimAutoreleasedReturnValue();
      id v10 = 0;
      if (v10)
      {
        id v15 = v10;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 684, @"Error while getting private mailbox %@", v11, v12, v13, v14, (uint64_t)v10);
        uint64_t v1 = v15;
LABEL_22:

        goto LABEL_23;
      }
      id v23 = [objc_alloc((Class)NSMutableData) initWithData:v9];
      kmlUtilLogLargeData(@"Private Mailbox Data", v23);
      char v85 = 0x80;
      [v23 replaceBytesInRange:0 withBytes:&v85];
      uint64_t v24 = sub_100313B1C((uint64_t)v8);
      size_t v25 = v24 - sub_100313B10((uint64_t)v8);
      id v26 = +[NSMutableData dataWithLength:v25];
      id v27 = [v26 mutableBytes];
      memset(v27, 255, v25);
      [v23 replaceBytesInRange:sub_100313B10((uint64_t)v8) withBytes:v25];
      kmlUtilLogLargeData(@"Private data to set", v23);
      SESEndPointSetPrivateDataWithSession();
      id v28 = 0;
      if (v28)
      {
        id v33 = v28;
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 710, @"Failed to initialize version and slotIDList in mailbox: %@", v29, v30, v31, v32, (uint64_t)v28);
        uint64_t v1 = v33;

        goto LABEL_22;
      }

      id v18 = 0;
    }
    else
    {
      unsigned int v16 = sub_100313AEC((uint64_t)v8);
      if (!v16)
      {
        id v18 = 0;
        goto LABEL_11;
      }
      size_t v17 = 7 * v16;
      id v9 = +[NSMutableData dataWithLength:v17];
      memset([v9 mutableBytes], 255, v17);
      sub_100313B04((uint64_t)v8);
      SESEndPointSetPrivateDataWithSession();
      id v18 = 0;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 737, @"Friend SlotId initialization result: %@", v19, v20, v21, v22, (uint64_t)v18);
    }

LABEL_11:
    uint64_t v34 = [KmlDeviceConfigurationData alloc];
    uint64_t v35 = sub_10033F07C(v1[3]);
    uint64_t v36 = (id *)sub_1003163A8((uint64_t)v34, v35);

    if (!*((unsigned char *)v1 + 96)) {
      sub_100317D44((uint64_t)v36, v37, v38, v39, v40, v41, v42, v43, v81);
    }
    uint64_t v44 = sub_100316988(v36);
    uint64_t v45 = kmlUtilHexStringFromData(v44);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 748, @"DeviceConfigData: %@", v46, v47, v48, v49, (uint64_t)v45);

    if (sub_100301918((BOOL)v1[13]))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 751, @"Car supports online ble keys", v50, v51, v52, v53, v82);
      uint64_t v54 = sub_10030ACB8((uint64_t)v36);
      id v55 = [v54 length];

      if (v55)
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 753, @"Override spake derived ble_intro_key with car provided one", v56, v57, v58, v59, v83);
        uint64_t v60 = sub_10030ACB8((uint64_t)v36);
        uint64_t v61 = v1[9];
        v1[9] = (id *)v60;
      }
      uint64_t v62 = sub_10030ACC4((uint64_t)v36);
      if (v62)
      {
        uint64_t v63 = (void *)v62;
        uint64_t v64 = sub_10030ACC4((uint64_t)v36);
        id v65 = [v64 length];

        if (v65)
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 758, @"Override spake derived ble_oob_master_key with car provided one", v66, v67, v68, v69, v83);
          uint64_t v70 = sub_10030ACC4((uint64_t)v36);
          uint64_t v71 = v1[10];
          v1[10] = (id *)v70;
        }
      }
    }
    uint64_t v72 = sub_100301734(v1[13]);
    id v9 = v36;
    id v84 = v2;
    id v73 = v44;
    id v74 = v72;
    uint64_t v75 = SESEndPointUpdateWithBlock();

    if (v75) {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveMetaDataOnEndpoint]", 800, @"SEManager: Could not update endpoint %@", v76, v77, v78, v79, (uint64_t)v75);
    }
    uint64_t v1 = v75;

    goto LABEL_22;
  }
LABEL_23:

  return v1;
}

id sub_1003120EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc((Class)NSData);
    uint64_t v5 = [v3 mailboxMapping];
    id v6 = [v4 initWithData:v5];

    uint64_t v7 = sub_100313018((char *)[KmlMailboxMappingData alloc], v6, (__int16)[*(id *)(a1 + 104) agreedKmlVehicleVersion]);
    sub_100313AD4((uint64_t)v7);
    sub_100313AC8((uint64_t)v7);
    sub_100313AC8((uint64_t)v7);
    uint64_t v56 = 0;
    uint64_t v8 = SESEndPointGetPrivateData();
    id v9 = 0;
    if (v9)
    {
      uint64_t v14 = v9;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 612, @"Error while getting signaling bitmap %@", v10, v11, v12, v13, (uint64_t)v9);
      id v15 = 0;
    }
    else
    {
      kmlUtilLogLargeData(@"Private data", v8);
      id v16 = [objc_alloc((Class)NSMutableData) initWithData:v8];
      id v17 = v8;
      uint64_t v18 = *(unsigned __int8 *)[v17 bytes];
      if (sub_1003139F0((uint64_t)v7, v18))
      {
        char v55 = v18 & sub_100313A50((uint64_t)v7);
        [v16 replaceBytesInRange:0, 1, &v55];
        __int16 v23 = sub_100313B28((uint64_t)v7);
        id v49 = v16;
        uint64_t v24 = (unsigned __int16)(v23 - sub_100313AC8((uint64_t)v7));
        uint64_t v47 = sub_100313AF8((uint64_t)v7);
        KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 633, @"KeyAttestation offsets: start (%02X), length(%02X)", v25, v26, v27, v28, v24);
        uint64_t v29 = [v17 subdataWithRange:v24, v47];
        [v16 resetBytesInRange:v24, v47];
        sub_100313AC8((uint64_t)v7);
        uint64_t v54 = 0;
        SESEndPointSetPrivateData();
        id v30 = 0;
        uint64_t v14 = v30;
        if (v30)
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 645, @"Failed to read and reset keyAttestation in private mailbox %@", v31, v32, v33, v34, (uint64_t)v30);
          id v15 = 0;
        }
        else
        {
          sub_100315960((uint64_t)KmlTlv, v29);
          long long v50 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          id v35 = (id)objc_claimAutoreleasedReturnValue();
          id v15 = [v35 countByEnumeratingWithState:&v50 objects:v57 count:16];
          if (v15)
          {
            uint64_t v48 = v29;
            uint64_t v36 = *(void *)v51;
            while (2)
            {
              for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v51 != v36) {
                  objc_enumerationMutation(v35);
                }
                uint64_t v38 = *(id **)(*((void *)&v50 + 1) + 8 * i);
                int v39 = sub_10005D5A8((uint64_t)v38);
                if (isDeviceKeyAttestationTag(v39))
                {
                  uint64_t v40 = sub_100315FB4(v38);
                  uint64_t v41 = kmlUtilHexStringFromData(v40);
                  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 653, @"Opaque found in key attestation Data : %@", v42, v43, v44, v45, (uint64_t)v41);

                  sub_100315FB4(v38);
                  id v15 = (id)objc_claimAutoreleasedReturnValue();
                  goto LABEL_18;
                }
              }
              id v15 = [v35 countByEnumeratingWithState:&v50 objects:v57 count:16];
              if (v15) {
                continue;
              }
              break;
            }
LABEL_18:
            uint64_t v29 = v48;
            id v16 = v49;
          }
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager getOpaqueFromEndpoint:]", 621, @"As per signaling bitmap (%02X), opaque attestation is not set", v19, v20, v21, v22, v18);
        uint64_t v14 = 0;
        id v15 = 0;
      }
    }
  }
  else
  {
    id v15 = 0;
  }

  return v15;
}

id sub_1003124F8(id a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v24 = 0;
    id v6 = [a2 encodeWithError:&v24];
    id v7 = v24;
    if (v7) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v6 == 0;
    }
    if (v12)
    {
      uint64_t v13 = v7;
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSeManager saveTrackingRequest:endpoint:]", 582, @"Encode key tracking request error %@, trackingRequestData=%@", v8, v9, v10, v11, (uint64_t)v7);
      a1 = v13;
    }
    else
    {
      uint64_t v14 = [v5 publicKeyIdentifier];
      id v15 = kmlUtilHexStringFromData(v14);
      id v23 = v6;
      id v16 = SESEndPointUpdateWithBlock();

      if (v16) {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSeManager saveTrackingRequest:endpoint:]", 592, @"SEManager: Could not update endpoint", v17, v18, v19, v20, v22);
      }
      a1 = v16;
    }
  }

  return a1;
}

void sub_100312670(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 setTrackingRequest:v3];
  [v4 setAnonymizedDsid:*(void *)(*(void *)(a1 + 40) + 112)];
}

void sub_1003126D0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v5 = sub_1002FEDB0(v3);
  [v4 setReaderConfigID:v5];

  [v4 setMailboxMapping:a1[5]];
  [v4 setDeviceConfiguration:a1[6]];
  id v6 = sub_10033F2A8(*(void **)(a1[7] + 24));
  [v4 setReaderInfo:v6];

  [v4 setFriendlyName:*(void *)(a1[7] + 40)];
  id v7 = sub_1002FEDBC(*(void *)(a1[7] + 24));
  [v4 setReaderLongTermPublicKeyCertificate:v7];

  [v4 setBleIntroKey:*(void *)(a1[7] + 72)];
  [v4 setBleOOBMasterKey:*(void *)(a1[7] + 80)];
  [v4 setLongTermSharedSecret:*(void *)(a1[7] + 88)];
  uint64_t v8 = sub_10033E0E0(*(void *)(a1[7] + 24));
  [v4 setSlotIdentifier:v8];

  uint64_t v9 = sub_10033E0E0(*(void *)(a1[7] + 24));
  kmlUtilGetDckIdFromSlotId(v9);
  id v16 = (id)objc_claimAutoreleasedReturnValue();

  id v15 = kmlUtilGetOOBKey(*(void **)(a1[7] + 80), v16);
  KmlLogFunc2(OS_LOG_TYPE_DEBUG, (uint64_t)"[(KmlSeManager *)"DCK_Id : %@ saveMetaDataOnEndpoint], v10, v11, v12, v13, (uint64_t)v16);
  [v4 setBleDCKIdentifier:v16];
  [v4 setBleOOBKey:v15];
  [v4 setVehicleSupportedVersionsData:a1[8]];
  uint64_t v14 = sub_10033E67C(*(void *)(a1[7] + 24));
  [v4 setMailboxSizesPlusAdditionalData:v14];
}

id *sub_1003128B8(id *result, void *a2)
{
  if (result) {
    return (id *)objc_storeWeak(result + 17, a2);
  }
  return result;
}

uint64_t sub_1003128C8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 152);
  }
  return result;
}

uint64_t sub_1003128D4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 160);
  }
  return result;
}

uint64_t sub_1003128E0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 168);
  }
  return result;
}

uint64_t sub_1003128EC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 176);
  }
  return result;
}

uint64_t sub_1003128F8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 184);
  }
  return result;
}

id sub_100312A1C(uint64_t a1, __int16 a2, void *a3)
{
  id v4 = a3;
  self;
  id v5 = sub_100312A8C([KmlApduResponse alloc], a2, v4);

  return v5;
}

id sub_100312A8C(id a1, __int16 a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v29.receiver = a1;
    v29.super_class = (Class)KmlApduResponse;
    a1 = [super init];
    if (a1)
    {
      __int16 v23 = a2;
      id v6 = +[NSMutableData data];
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v24 = v5;
      id v7 = v5;
      id v8 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v26;
        do
        {
          for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v26 != v10) {
              objc_enumerationMutation(v7);
            }
            uint64_t v12 = *(void *)(*((void *)&v25 + 1) + 8 * i);
            uint64_t v13 = sub_100316294(v12);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse initWithStatus:tlvArray:]", 49, @"TLV: add tlv %@ to response", v14, v15, v16, v17, (uint64_t)v13);

            uint64_t v18 = sub_100316294(v12);
            [v6 appendData:v18];
          }
          id v9 = [v7 countByEnumeratingWithState:&v25 objects:v30 count:16];
        }
        while (v9);
      }

      id v19 = [v6 copy];
      uint64_t v20 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v19;

      *((_WORD *)a1 + 4) = v23;
      uint64_t v21 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = 0;

      id v5 = v24;
    }
  }

  return a1;
}

id sub_100312C68(uint64_t a1, __int16 a2, void *a3)
{
  id v4 = a3;
  self;
  id v5 = sub_100312CD8([KmlApduResponse alloc], a2, v4);

  return v5;
}

id sub_100312CD8(id a1, __int16 a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)KmlApduResponse;
    a1 = [super init];
    if (a1)
    {
      id v6 = [v5 copy];
      id v7 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v6;

      *((_WORD *)a1 + 4) = a2;
      id v8 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = 0;
    }
  }

  return a1;
}

id sub_100312D68(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v8 = +[NSMutableData data];
    id v9 = (id *)(a1 + 32);
    if (*(void *)(a1 + 32))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 100, @"Response was encrypted already. Just send the same one", v4, v5, v6, v7, v43);
      id v10 = *v9;
LABEL_16:

      goto LABEL_17;
    }
    uint64_t v11 = a1 + 8;
    unsigned int v12 = *(unsigned __int16 *)(a1 + 8);
    uint64_t v13 = __rev16(v12);
    if (v3)
    {
      if ([*(id *)(a1 + 16) length] || v12 == 144 || (unsigned __int16)(v13 - 25088) > 0xFF00u)
      {
        uint64_t v18 = sub_100338994(v3, *(void **)(a1 + 16), *(_WORD *)(a1 + 8));
        id v19 = 0;
        goto LABEL_11;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 108, @"Response has 0 length payload and error status. No encryption needed.", v14, v15, v16, v17, v43);
    }
    uint64_t v18 = 0;
    id v19 = 0;
LABEL_11:
    uint64_t v20 = kmlUtilHexStringFromData(*(void **)(a1 + 16));
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 114, @"ResponseAPDU: PlainText Payload: %@", v21, v22, v23, v24, (uint64_t)v20);

    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 115, @"ResponseAPDU: PlainText Payload End ---", v25, v26, v27, v28, v44);
    if (!v18 || v19)
    {
      [v8 appendData:*(void *)(a1 + 16)];
    }
    else
    {
      [v8 appendData:v18];
      objc_super v29 = kmlUtilHexStringFromData(v18);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 118, @"ResponseAPDU: Encrypted Payload: %@", v30, v31, v32, v33, (uint64_t)v29);

      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 119, @"ResponseAPDU: Encrypted Payload End ---", v34, v35, v36, v37, v45);
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduResponse responseWithSecureChannel:]", 124, @"ResponseAPDU: Status: 0x%02x", v38, v39, v40, v41, v13);
    [v8 appendBytes:v11 length:2];
    objc_storeStrong(v9, v8);
    id v10 = v8;

    goto LABEL_16;
  }
  id v10 = 0;
LABEL_17:

  return v10;
}

char *sub_100313018(char *a1, void *a2, __int16 a3)
{
  id v5 = a2;
  if (a1)
  {
    v78.receiver = a1;
    v78.super_class = (Class)KmlMailboxMappingData;
    uint64_t v6 = (char *)[super init];
    a1 = v6;
    if (v6)
    {
      uint64_t v7 = (void *)*((void *)v6 + 2);
      *((void *)v6 + 2) = 0;

      *(void *)(a1 + 30) = 0;
      *((_WORD *)a1 + 13) = 0;
      a1[28] = 0;
      *(void *)(a1 + 38) = 0;
      *(_DWORD *)(a1 + 46) = 0;
      id v8 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = 0;

      *((_WORD *)a1 + 12) = a3;
      id v9 = (char *)[objc_alloc((Class)NSUserDefaults) initWithSuiteName:@"com.apple.seserviced"];
      a1[29] = [v9 BOOLForKey:@"UseOldSignalingBitmap"];
      if (v5)
      {
        sub_100315960((uint64_t)KmlTlv, v5);
        long long v74 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        uint64_t v14 = (char *)(id)objc_claimAutoreleasedReturnValue();
        id v15 = [v14 countByEnumeratingWithState:&v74 objects:v81 count:16];
        if (v15)
        {
          id v16 = v15;
          uint64_t v17 = *(void *)v75;
LABEL_6:
          uint64_t v18 = 0;
          while (1)
          {
            if (*(void *)v75 != v17) {
              objc_enumerationMutation(v14);
            }
            id v19 = *(id **)(*((void *)&v74 + 1) + 8 * v18);
            if (sub_10005D5A8((uint64_t)v19) == 32589) {
              break;
            }
            if (v16 == (id)++v18)
            {
              id v16 = [v14 countByEnumeratingWithState:&v74 objects:v81 count:16];
              if (v16) {
                goto LABEL_6;
              }
              goto LABEL_28;
            }
          }
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 69, @"Found Mailbox mapping data to parse", v20, v21, v22, v23, v66);
          uint64_t v24 = sub_100315FB4(v19);
          uint64_t v25 = sub_100315960((uint64_t)KmlTlv, v24);
          uint64_t v26 = (void *)*((void *)a1 + 1);
          *((void *)a1 + 1) = v25;

          int v31 = *((unsigned __int16 *)a1 + 12);
          if (v31 == 256)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 82, @"We will use spec_v1 mailboxMapping data", v27, v28, v29, v30, v66);
            id v42 = *((id *)a1 + 1);
            id v32 = (id)*((void *)a1 + 2);
            *((void *)a1 + 2) = v42;
          }
          else
          {
            if (v31 != 768) {
              goto LABEL_28;
            }
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 73, @"We prefer SharingInAChain version", v27, v28, v29, v30, v66);
            long long v72 = 0u;
            long long v73 = 0u;
            long long v70 = 0u;
            long long v71 = 0u;
            id v32 = *((id *)a1 + 1);
            id v33 = [v32 countByEnumeratingWithState:&v70 objects:v80 count:16];
            if (v33)
            {
              id v34 = v33;
              uint64_t v35 = *(void *)v71;
              while (2)
              {
                for (uint64_t i = 0; i != v34; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v71 != v35) {
                    objc_enumerationMutation(v32);
                  }
                  uint64_t v37 = *(id **)(*((void *)&v70 + 1) + 8 * i);
                  if (sub_10005D5A8((uint64_t)v37) == 96)
                  {
                    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 76, @"Car sent SharingInAChain version mailboxMapping Data", v38, v39, v40, v41, v66);
                    uint64_t v43 = sub_100315FB4(v37);
                    uint64_t v44 = sub_100315960((uint64_t)KmlTlv, v43);
                    uint64_t v45 = (void *)*((void *)a1 + 2);
                    *((void *)a1 + 2) = v44;

                    goto LABEL_27;
                  }
                }
                id v34 = [v32 countByEnumeratingWithState:&v70 objects:v80 count:16];
                if (v34) {
                  continue;
                }
                break;
              }
            }
          }
LABEL_27:
        }
LABEL_28:

        if ([*((id *)a1 + 2) count])
        {
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          id v50 = *((id *)a1 + 2);
          id v51 = [v50 countByEnumeratingWithState:&v66 objects:v79 count:16];
          if (v51)
          {
            id v52 = v51;
            uint64_t v53 = *(void *)v67;
            do
            {
              for (j = 0; j != v52; j = (char *)j + 1)
              {
                if (*(void *)v67 != v53) {
                  objc_enumerationMutation(v50);
                }
                char v55 = *(void **)(*((void *)&v66 + 1) + 8 * (void)j);
                switch(sub_10005D5A8((uint64_t)v55))
                {
                  case 0xC0u:
                    *((_WORD *)a1 + 18) = sub_100316118((uint64_t)v55);
                    *((_WORD *)a1 + 20) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xC1u:
                    *((_WORD *)a1 + 19) = sub_100316118((uint64_t)v55);
                    *((_WORD *)a1 + 24) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xC2u:
                    *((_WORD *)a1 + 21) = sub_100316118((uint64_t)v55);
                    *((_WORD *)a1 + 23) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xC3u:
                    *((_WORD *)a1 + 22) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xD0u:
                    *((_WORD *)a1 + 15) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xD1u:
                    *((_WORD *)a1 + 16) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xD2u:
                    a1[27] = sub_10031609C(v55);
                    break;
                  case 0xD3u:
                    a1[28] = sub_10031609C(v55);
                    break;
                  case 0xD4u:
                    *((_WORD *)a1 + 17) = sub_100316118((uint64_t)v55);
                    break;
                  case 0xD5u:
                    a1[26] = sub_10031609C(v55);
                    break;
                  default:
                    continue;
                }
              }
              id v52 = [v50 countByEnumeratingWithState:&v66 objects:v79 count:16];
            }
            while (v52);
          }

          if (a1[26] == 128)
          {
            *((_DWORD *)a1 + 9) = 0;
            HIDWORD(v56) = *(_DWORD *)(a1 + 46);
            LODWORD(v56) = HIDWORD(v56);
            *(_DWORD *)(a1 + 42) = v56 >> 16;
          }
          else
          {
            *((_WORD *)a1 + 20) = 0;
            *(_DWORD *)(a1 + 46) = 0;
            int v58 = *((unsigned __int16 *)a1 + 22);
            int v59 = *((unsigned __int16 *)a1 + 16);
            if (!*((_WORD *)a1 + 22))
            {
              *((_WORD *)a1 + 22) = v59;
              int v58 = v59;
            }
            *((_WORD *)a1 + 17) = v59 - v58;
            int v60 = *((unsigned __int16 *)a1 + 21);
            if (!*((_WORD *)a1 + 21))
            {
              *((_WORD *)a1 + 21) = v58;
              int v60 = v58;
            }
            int v61 = *((unsigned __int16 *)a1 + 19);
            BOOL v62 = __OFSUB__(v60, v61);
            int v63 = v60 - v61;
            if (v63 < 0 != v62) {
              v63 += 7;
            }
            unsigned int v64 = (v63 >> 3);
            if (v64 <= 2) {
              LOBYTE(v64) = 2;
            }
            a1[28] = v64;
          }
        }
        else
        {
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 90, @"Did not find version appropriate data to initialize Mailbox mapping, using defaults", v46, v47, v48, v49, v66);
          uint64_t v57 = a1;

          uint64_t v14 = v9;
          id v9 = v57;
        }
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData initWithData:preferredVersion:]", 62, @"No Data to initalize Mailbox mapping, using defaults", v10, v11, v12, v13, v66);
        uint64_t v14 = v9;
        id v9 = a1;
      }
    }
  }

  return a1;
}

id *sub_100313640(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8 = a1;
  if (a1)
  {
    if (a1[1])
    {
      id v9 = +[NSMutableData data];
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v10 = v8[1];
      id v11 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v25;
        do
        {
          for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v25 != v13) {
              objc_enumerationMutation(v10);
            }
            id v15 = sub_100316294(*(void *)(*((void *)&v24 + 1) + 8 * i));
            [v9 appendData:v15];
          }
          id v12 = [v10 countByEnumeratingWithState:&v24 objects:v28 count:16];
        }
        while (v12);
      }

      id v16 = sub_100315D20((uint64_t)KmlTlv, 32589, v9);
      sub_100316294((uint64_t)v16);
      id v8 = (id *)objc_claimAutoreleasedReturnValue();

      uint64_t v17 = kmlUtilHexStringFromData(v8);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData asData]", 185, @"MailboxMapping Data : %@", v18, v19, v20, v21, (uint64_t)v17);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlMailboxMappingData asData]", 173, @"Invalid MailboxMapping Data", a5, a6, a7, a8, v23);
      id v8 = 0;
    }
  }

  return v8;
}

id *sub_10031380C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8 = (id *)a1;
  if (a1)
  {
    if (*(_WORD *)(a1 + 24) == 768)
    {
      if (*(unsigned __int8 *)(a1 + 26) != 128)
      {
        uint64_t v20 = 128;
        id v9 = @"Mismatch in expected mailbox version (0x%02X) and received version (0x%02X)";
        uint64_t v10 = 200;
        goto LABEL_20;
      }
    }
    else if (!*(_WORD *)(a1 + 24))
    {
      id v9 = @"Agreed KML framework version is unknown";
      uint64_t v10 = 193;
LABEL_20:
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlMailboxMappingData isValid]", v10, v9, a5, a6, a7, a8, v20);
      return 0;
    }
    id v11 = objc_alloc_init((Class)NSMutableSet);
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    id v12 = v8[2];
    id v13 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v22;
      while (2)
      {
        for (uint64_t i = 0; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v15) {
            objc_enumerationMutation(v12);
          }
          unsigned int v17 = sub_10005D5A8(*(void *)(*((void *)&v21 + 1) + 8 * i));
          if (!kmlUtilAddUniqueTagToSet(v11, v17))
          {
            id v8 = 0;
            goto LABEL_18;
          }
        }
        id v14 = [v12 countByEnumeratingWithState:&v21 objects:v25 count:16];
        if (v14) {
          continue;
        }
        break;
      }
    }

    uint64_t v18 = +[NSMutableSet setWithArray:&off_10042DB20];
    id v12 = v18;
    if (*((_WORD *)v8 + 12) == 768) {
      [v18 addObjectsFromArray:&off_10042DB38];
    }
    id v8 = (id *)[v12 isSubsetOfSet:v11];
LABEL_18:
  }
  return v8;
}

BOOL sub_1003139E4(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_1003139F0(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 26) == 128)
    {
      if (*(unsigned char *)(result + 29)) {
        return (a2 >> 2) & 1;
      }
      else {
        return (a2 >> 5) & 1;
      }
    }
    else
    {
      return (a2 >> 3) & 1;
    }
  }
  return result;
}

uint64_t sub_100313A20(uint64_t result, unsigned int a2)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 26) == 128)
    {
      if (*(unsigned char *)(result + 29)) {
        return (a2 >> 2) & 1;
      }
      else {
        return (a2 >> 4) & 1;
      }
    }
    else
    {
      return (a2 >> 3) & 1;
    }
  }
  return result;
}

uint64_t sub_100313A50(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned __int8 *)(a1 + 26) == 128)
    {
      if (*(unsigned char *)(a1 + 29)) {
        return -5;
      }
      else {
        return -49;
      }
    }
    else
    {
      return -9;
    }
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100313A8C(uint64_t result)
{
  if (result)
  {
    if (*(unsigned __int8 *)(result + 26) == 128)
    {
      if (*(unsigned char *)(result + 29)) {
        return 4;
      }
      else {
        return 16;
      }
    }
    else
    {
      return 8;
    }
  }
  return result;
}

uint64_t sub_100313ABC(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 26);
  }
  return result;
}

uint64_t sub_100313AC8(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 30);
  }
  return result;
}

uint64_t sub_100313AD4(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 32);
  }
  return result;
}

uint64_t sub_100313AE0(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 27);
  }
  return result;
}

uint64_t sub_100313AEC(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 28);
  }
  return result;
}

uint64_t sub_100313AF8(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 34);
  }
  return result;
}

uint64_t sub_100313B04(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 38);
  }
  return result;
}

uint64_t sub_100313B10(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 40);
  }
  return result;
}

uint64_t sub_100313B1C(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 42);
  }
  return result;
}

uint64_t sub_100313B28(uint64_t result)
{
  if (result) {
    return *(unsigned __int16 *)(result + 44);
  }
  return result;
}

uint64_t sub_100313DBC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_100313DC8(uint64_t result)
{
  if (result) {
    return *(void *)(result + 80);
  }
  return result;
}

uint64_t sub_100313DD4(uint64_t result)
{
  if (result) {
    return *(void *)(result + 112);
  }
  return result;
}

uint64_t sub_100313DE0(uint64_t result)
{
  if (result) {
    return *(void *)(result + 96);
  }
  return result;
}

uint64_t sub_100313DEC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 104);
  }
  return result;
}

id sub_1003143F0(void *a1, uint64_t a2)
{
  if (a1)
  {
    a1 = +[NSKeyedArchiver archivedDataWithRootObject:a1 requiringSecureCoding:1 error:a2];
    uint64_t v2 = vars8;
  }
  return a1;
}

id sub_100314434(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  self;
  if (qword_100468360 != -1) {
    dispatch_once(&qword_100468360, &stru_100419D38);
  }
  id v5 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:qword_100468368 fromData:v4 error:a3];

  return v5;
}

void sub_1003144D4(id a1)
{
  uint64_t v1 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  uint64_t v2 = (void *)qword_100468368;
  qword_100468368 = v1;
}

void sub_10031453C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

void sub_10031454C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_10031455C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 88), a2);
  }
}

void sub_10031456C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

void sub_10031457C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 104), a2);
  }
}

uint64_t sub_10031458C(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 112) = a2;
  }
  return result;
}

uint64_t sub_100314598(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 120) = a2;
  }
  return result;
}

id sub_100314660()
{
  self;
  if (qword_100468378 != -1) {
    dispatch_once(&qword_100468378, &stru_100419D58);
  }
  id v0 = (void *)qword_100468370;

  return v0;
}

void sub_1003146B8(id a1)
{
  uint64_t v1 = objc_alloc_init(KmlSharingInvitationRecordsUpdater);
  uint64_t v2 = (void *)qword_100468370;
  qword_100468370 = (uint64_t)v1;
}

id sub_1003146F4()
{
  self;
  if (qword_100468388 != -1) {
    dispatch_once(&qword_100468388, &stru_100419D78);
  }
  id v0 = (void *)qword_100468380;

  return v0;
}

void sub_10031474C(id a1)
{
  id v3 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.sesd.kml.friendRecordsUpdater", v3);
  uint64_t v2 = (void *)qword_100468380;
  qword_100468380 = (uint64_t)v1;
}

void sub_10031483C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v31 = 0;
    dispatch_queue_t v1 = SESEndPointGetInvitations();
    id v2 = 0;
    if (v2) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v1 == 0;
    }
    if (v7)
    {
      id v8 = v2;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater unpackAllSharingInvitationRecords_sync]", 236, @"We don't have any sharing invitation records - %@", v3, v4, v5, v6, (uint64_t)v2);
    }
    else
    {
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      id v9 = v1;
      id v10 = [v9 countByEnumeratingWithState:&v27 objects:v32 count:16];
      if (v10)
      {
        id v11 = v10;
        id v8 = 0;
        uint64_t v12 = *(void *)v28;
        do
        {
          id v13 = 0;
          id v14 = v8;
          do
          {
            if (*(void *)v28 != v12) {
              objc_enumerationMutation(v9);
            }
            uint64_t v15 = *(void **)(*((void *)&v27 + 1) + 8 * (void)v13);
            id v26 = v14;
            id v16 = sub_100314434((uint64_t)KmlSharingInvitationRecord, v15, (uint64_t)&v26);
            id v8 = v26;

            if (v8)
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater unpackAllSharingInvitationRecords_sync]", 243, @"Found a courrupted sharing record. Discarding it", v17, v18, v19, v20, v24);
            }
            else
            {
              if (v16) {
                uint64_t v21 = v16[13];
              }
              else {
                uint64_t v21 = 0;
              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater unpackAllSharingInvitationRecords_sync]", 247, @"Found sharing invitation record for invitation Id : %@", v17, v18, v19, v20, v21);
              if (v16) {
                uint64_t v22 = v16[13];
              }
              else {
                uint64_t v22 = 0;
              }
              [*(id *)(a1 + 8) setObject:v16 forKeyedSubscript:v22];
            }

            id v13 = (char *)v13 + 1;
            id v14 = v8;
          }
          while (v11 != v13);
          id v23 = [v9 countByEnumeratingWithState:&v27 objects:v32 count:16];
          id v11 = v23;
        }
        while (v23);
      }
      else
      {
        id v8 = 0;
      }
    }
  }
}

void sub_100314A58(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v8 = v3;
  if (a1)
  {
    if (v3 && v3[13])
    {
      id v9 = *(NSObject **)(a1 + 16);
      v10[0] = (uint64_t)_NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = (uint64_t)sub_100314B30;
      v10[3] = (uint64_t)&unk_10040D1A0;
      id v11 = v3;
      uint64_t v12 = a1;
      dispatch_async(v9, v10);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater updateRecord:]", 174, @"Invalid sharing record. Ignore it", v4, v5, v6, v7, v10[0]);
    }
  }
}

id sub_100314B30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    *(unsigned char *)(v1 + 8) = 1;
    id v2 = (uint64_t *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 8);
    if (v3) {
      uint64_t v5 = *(void *)(v3 + 104);
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v5 = 0;
    id v2 = (uint64_t *)(a1 + 40);
    uint64_t v4 = *(void **)(*(void *)(a1 + 40) + 8);
  }
  [v4 setObject:v3 forKeyedSubscript:v5];
  return sub_100314BA4(*v2);
}

id sub_100314BA4(uint64_t a1)
{
  if (a1)
  {
    uint64_t v31 = +[NSMutableArray array];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    id obj = *(id *)(a1 + 8);
    id v2 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v2)
    {
      id v3 = v2;
      uint64_t v4 = 0;
      uint64_t v5 = *(void *)v35;
      do
      {
        for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v35 != v5) {
            objc_enumerationMutation(obj);
          }
          uint64_t v7 = *(void *)(*((void *)&v34 + 1) + 8 * i);
          uint64_t v8 = [*(id *)(a1 + 8) objectForKeyedSubscript:v7];
          id v13 = (unsigned char *)v8;
          if (v8 && *(unsigned char *)(v8 + 8))
          {
            if (*(void *)(v8 + 112) == 6)
            {
              uint64_t v14 = SESEndPointDeleteInvitationWithId();

              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 206, @"Record for invitation Id %@ is ready for clean up. Removal result - %@", v15, v16, v17, v18, v7);
              uint64_t v4 = (void *)v14;
              if (!v14) {
                [v31 addObject:v7];
              }
            }
            else
            {
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlSharingInvitationRecordsUpdater *)"For invitation Id %@ saveSharingInvitationRecords_sync], v9, v10, v11, v12, v7);
              id v33 = v4;
              uint64_t v19 = sub_1003143F0(v13, (uint64_t)&v33);
              id v20 = v33;

              if (v20)
              {
                KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"[(KmlSharingInvitationRecordsUpdater *)"Sharing Invitation Record with Invitation Id (%@) saveSharingInvitationRecords_sync], v21, v22, v23, v24, v7);
                [v31 addObject:v7];
                uint64_t v4 = v20;
              }
              else
              {
                uint64_t v25 = SESEndPointAddInvitationWithId();
                uint64_t v4 = (void *)v25;
                if (v25) {
                  KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlSharingInvitationRecordsUpdater saveSharingInvitationRecords_sync]", 220, @"Failed to save sharing records on endPoint : %@", v26, v27, v28, v29, v25);
                }
                else {
                  v13[8] = 0;
                }
              }
            }
          }
          else
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlSharingInvitationRecordsUpdater *)"Record for invitation Id %@ saveSharingInvitationRecords_sync], v9, v10, v11, v12, v7);
          }
        }
        id v3 = [obj countByEnumeratingWithState:&v34 objects:v38 count:16];
      }
      while (v3);
    }
    else
    {
      uint64_t v4 = 0;
    }

    [*(id *)(a1 + 8) removeObjectsForKeys:v31];
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

id *sub_100314E50(id *a1)
{
  if (a1)
  {
    a1 = [a1[1] allValues];
    uint64_t v1 = vars8;
  }
  return a1;
}

id sub_100314EC8(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = sub_1003025CC([KmlNfcPairingTransport alloc], v2);

  return v3;
}

KmlBluetoothPairingTransport *sub_100314F28(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  id v3 = [[KmlBluetoothPairingTransport alloc] initWithDelegate:v2];

  return v3;
}

void sub_100314F88(uint64_t a1, void *a2)
{
  id v2 = a2;
  self;
  +[BluetoothHCEAndTransactionSession startFirstApproachForKeyWithIdentifier:v2];
}

void *sub_100314FE4(void *result)
{
  if (result)
  {
    sub_100315028(result);
    id v1 = objc_claimAutoreleasedReturnValue();
    id v2 = [v1 bytes];

    return v2;
  }
  return result;
}

void *sub_100315028(void *a1)
{
  if (a1)
  {
    id v2 = (void *)a1[7];
    if (!v2) {
      id v2 = (void *)a1[6];
    }
    a1 = v2;
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t *sub_100315060(uint64_t *a1, unsigned char *a2, unint64_t a3, void *a4, void *a5)
{
  id v10 = a4;
  if (!a1) {
    goto LABEL_45;
  }
  v50.receiver = a1;
  v50.super_class = (Class)KmlApduRequest;
  uint64_t v11 = (uint64_t *)[super init];
  a1 = v11;
  if (!v11) {
    goto LABEL_45;
  }
  uint64_t v12 = v11 + 4;
  objc_storeStrong((id *)v11 + 4, a4);
  if (a3 <= 3)
  {
    if (a5)
    {
      uint64_t v17 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      *a5 = +[NSError errorWithDomain:v17 code:26368 userInfo:0];
    }
    uint64_t v18 = @"APDU: command length incorrect, return code: 0x6700.";
    os_log_type_t v19 = OS_LOG_TYPE_INFO;
    uint64_t v20 = 82;
LABEL_7:
    KmlLogFunc2(v19, (uint64_t)"-[KmlApduRequest initWithBytes:length:secureChannel:error:]", v20, v18, v13, v14, v15, v16, v48);

    a1 = 0;
    goto LABEL_45;
  }
  *((unsigned char *)a1 + 8) = *a2;
  *((unsigned char *)a1 + 9) = a2[1];
  *((unsigned char *)a1 + 41) = a2[2];
  *((unsigned char *)a1 + 42) = a2[3];
  *((unsigned char *)a1 + 40) = 0;
  uint64_t v21 = (void *)a1[7];
  a1[7] = 0;

  if (a3 == 4) {
    goto LABEL_45;
  }
  unsigned int v22 = a2[4];
  *((_DWORD *)a1 + 3) = v22;
  if (v22)
  {
    uint64_t v23 = a2 + 5;
    unsigned int v24 = 5;
  }
  else
  {
    if (a3 == 5)
    {
      *((_DWORD *)a1 + 5) = 256;
      goto LABEL_45;
    }
    if ((uint64_t)(a3 - 5) <= 2)
    {
      if (a5)
      {
        uint64_t v27 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        *a5 = +[NSError errorWithDomain:v27 code:27136 userInfo:0];
      }
      uint64_t v18 = @"APDU: Invalid APDU format, return code: 0x6A00";
      os_log_type_t v19 = OS_LOG_TYPE_INFO;
      uint64_t v20 = 114;
      goto LABEL_7;
    }
    int v34 = a2[5];
    *((_DWORD *)a1 + 3) = v34 << 8;
    uint64_t v23 = a2 + 7;
    unsigned int v22 = a2[6] | (v34 << 8);
    *((_DWORD *)a1 + 3) = v22;
    unsigned int v24 = 7;
  }
  uint64_t v25 = a3 - v24;
  if (v25 < (unint64_t)v22)
  {
    if (a5)
    {
      uint64_t v26 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      *a5 = +[NSError errorWithDomain:v26 code:26368 userInfo:0];
    }
    uint64_t v18 = @"APDU: Incorrect length or address range error, return code: 0x6700";
    os_log_type_t v19 = OS_LOG_TYPE_INFO;
    uint64_t v20 = 127;
    goto LABEL_7;
  }
  uint64_t v28 = +[NSData dataWithBytes:a2 length:v23 - a2];
  uint64_t v29 = (void *)a1[3];
  a1[3] = v28;

  if (*((_DWORD *)a1 + 3))
  {
    uint64_t v30 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v23);
    uint64_t v31 = (void *)a1[6];
    a1[6] = v30;

    uint64_t v32 = *((int *)a1 + 3);
    v23 += v32;
    uint64_t v25 = a3 - (v32 + v24);
  }
  if (v25 >= 1)
  {
    if ((unint64_t)v25 >= 4)
    {
      if (a5)
      {
        id v33 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        *a5 = +[NSError errorWithDomain:v33 code:26368 userInfo:0];
      }
      uint64_t v18 = @"APDU: Incorrect length, return code: 0x6700";
      os_log_type_t v19 = OS_LOG_TYPE_DEBUG;
      uint64_t v20 = 147;
      goto LABEL_7;
    }
    long long v35 = v23 + 1;
    int v36 = *v23;
    *((_DWORD *)a1 + 5) = v36;
    if (v36 || v25 != 3)
    {
      if (v25 != 2)
      {
        if (v36) {
          goto LABEL_35;
        }
        int v37 = 256;
        goto LABEL_34;
      }
    }
    else
    {
      long long v35 = v23 + 2;
      int v36 = v23[1];
      *((_DWORD *)a1 + 5) = v36;
    }
    int v37 = *v35 | (v36 << 8);
LABEL_34:
    *((_DWORD *)a1 + 5) = v37;
  }
LABEL_35:
  uint64_t v38 = (void *)a1[6];
  if (v38)
  {
    uint64_t v39 = *v12;
    if (*v12)
    {
      uint64_t v40 = (void *)a1[3];
      id v49 = 0;
      uint64_t v41 = sub_1003387F4(v39, v38, v40, &v49);
      id v42 = v49;
      uint64_t v43 = (void *)a1[7];
      a1[7] = v41;

      if (v42) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v44 = (void *)a1[7];
  if (!v44)
  {
    id v42 = 0;
LABEL_41:
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduRequest initWithBytes:length:secureChannel:error:]", 173, @"APDU: couldn't decrypt payload %@", v13, v14, v15, v16, (uint64_t)v42);
    uint64_t v46 = (void *)a1[7];
    a1[7] = 0;

    unsigned int v45 = 0;
    goto LABEL_42;
  }
  *((unsigned char *)a1 + 40) = 1;
  unsigned int v45 = [v44 length];
  id v42 = 0;
LABEL_42:
  *((_DWORD *)a1 + 4) = v45;
  if (!sub_100337798((BOOL)v10)) {
    *((unsigned char *)a1 + 40) = 1;
  }

LABEL_45:
  return a1;
}

BOOL sub_1003154AC(BOOL result)
{
  if (result) {
    return !*(unsigned char *)(result + 8) && *(unsigned __int8 *)(result + 9) == 164;
  }
  return result;
}

BOOL sub_1003154D0(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 212;
  }
  return result;
}

BOOL sub_1003154F8(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 202;
  }
  return result;
}

BOOL sub_100315520(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 192;
  }
  return result;
}

BOOL sub_100315548(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 60;
  }
  return result;
}

BOOL sub_100315570(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 128 && *(unsigned __int8 *)(result + 9) == 60;
  }
  return result;
}

uint64_t sub_100315598(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 41);
  }
  return result;
}

BOOL sub_1003155A4(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 128 && *(unsigned __int8 *)(result + 9) == 48;
  }
  return result;
}

BOOL sub_1003155CC(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 128 && *(unsigned __int8 *)(result + 9) == 50;
  }
  return result;
}

BOOL sub_1003155F4(BOOL result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 8) == 132 && *(unsigned __int8 *)(result + 9) == 192
  }
        || *(void *)(result + 56) != 0;
  return result;
}

void *sub_100315628(void *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = 16;
    if (!a1[7]) {
      uint64_t v2 = 12;
    }
    if (*(_DWORD *)((char *)a1 + v2)
      && (sub_100315028(a1), id v3 = objc_claimAutoreleasedReturnValue(), v3, v3))
    {
      if (v1[7]) {
        uint64_t v4 = 16;
      }
      else {
        uint64_t v4 = 12;
      }
      uint64_t v5 = 2 * *(int *)((char *)v1 + v4);
      uint64_t v6 = (char *)malloc_type_malloc(v5 | 1, 0x118D526AuLL);
      v6[v5] = 0;
      uint64_t v7 = sub_100314FE4(v1);
      if (v1[7]) {
        uint64_t v8 = 16;
      }
      else {
        uint64_t v8 = 12;
      }
      if (*(int *)((char *)v1 + v8) >= 1)
      {
        uint64_t v9 = v7;
        uint64_t v10 = 0;
        uint64_t v11 = v6;
        do
        {
          sprintf(v11, "%02X", *((unsigned __int8 *)v9 + v10++));
          if (v1[7]) {
            uint64_t v12 = 16;
          }
          else {
            uint64_t v12 = 12;
          }
          v11 += 2;
        }
        while (v10 < *(int *)((char *)v1 + v12));
      }
      uint64_t v1 = [objc_alloc((Class)NSString) initWithUTF8String:v6];
      free(v6);
    }
    else
    {
      uint64_t v1 = 0;
    }
  }

  return v1;
}

uint64_t sub_100315784(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = sub_100315028(a1);

  if (!v2) {
    return 0;
  }
  uint64_t v7 = 16;
  if (!a1[7]) {
    uint64_t v7 = 12;
  }
  if (*(_DWORD *)((char *)a1 + v7) >= 3u)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlApduRequest payloadAsUnsignedShort]", 274, @"APDU: Value too large: %@", v3, v4, v5, v6, a1[6]);
    return 0;
  }
  uint64_t v8 = sub_100314FE4(a1);
  uint64_t v9 = 16;
  if (!a1[7]) {
    uint64_t v9 = 12;
  }
  uint64_t v10 = *(unsigned int *)((char *)a1 + v9);
  if ((int)v10 < 1) {
    return 0;
  }
  unsigned __int16 v11 = 0;
  do
  {
    __int16 v12 = *(unsigned __int8 *)v8;
    uint64_t v8 = (void *)((char *)v8 + 1);
    unsigned __int16 v11 = v12 | (v11 << 8);
    --v10;
  }
  while (v10);
  return v11;
}

BOOL sub_100315860(BOOL result)
{
  if (result)
  {
    int v1 = *(unsigned __int8 *)(result + 8);
    return !*(unsigned char *)(result + 8) || v1 == 132 || v1 == 128;
  }
  return result;
}

uint64_t sub_10031588C(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 9);
    if (v1 - 164 <= 0x30 && ((1 << (v1 + 92)) & 0x1004010000001) != 0) {
      return 1;
    }
    uint64_t result = 0;
    if (v1 <= 0x3C && ((1 << v1) & 0x1005000000000000) != 0) {
      return 1;
    }
  }
  return result;
}

BOOL sub_1003158E4(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 40) != 0;
  }
  return result;
}

uint64_t sub_1003158F8(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 42);
  }
  return result;
}

id sub_100315960(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = self;
  if ([v2 length])
  {
    id v8 = v2;
    id v13 = [v8 bytes];
    uint64_t v9 = sub_100315A30(v3, (unint64_t *)&v13, (unint64_t)[v8 length] + (void)v13);
  }
  else
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv TLVsWithData:]", 29, @"nothing to parse", v4, v5, v6, v7, v12);
    uint64_t v9 = +[NSArray array];
  }
  uint64_t v10 = (void *)v9;

  return v10;
}

id sub_100315A30(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  self;
  uint64_t v5 = +[NSMutableArray array];
  unint64_t v6 = *a2;
  if (*a2 >= a3)
  {
LABEL_20:
    id v28 = [v5 count];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 304, @"TLV: found %lu tlvs", v29, v30, v31, v32, (uint64_t)v28);
    goto LABEL_28;
  }
  while (1)
  {
    uint64_t v7 = +[NSData dataWithBytes:v6 length:a3 - v6];
    id v8 = sub_100315D20((uint64_t)KmlTlv, 0xFFFF, v7);

    id v13 = (unsigned __int8 *)*a2;
    uint64_t v14 = (char *)(*a2 + 1);
    *a2 = (unint64_t)v14;
    int v15 = *v13;
    if ((~v15 & 0x1F) == 0)
    {
      while ((unint64_t)v14 < a3)
      {
        uint64_t v16 = v14 + 1;
        *a2 = (unint64_t)(v14 + 1);
        int v17 = *v14++;
        BOOL v18 = v17 < -1;
        int v19 = v17 | (v15 << 8);
        int v15 = v19;
        if (!v18) {
          goto LABEL_7;
        }
      }
      id v33 = @"TLV: Underflow";
      uint64_t v34 = 252;
      goto LABEL_26;
    }
    uint64_t v16 = v14;
    LOWORD(v19) = v15;
LABEL_7:
    if ((unint64_t)v16 >= a3)
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 266, @"TLV: Underflow: tag=0x%x", v9, v10, v11, v12, (unsigned __int16)v19);
      goto LABEL_27;
    }
    uint64_t v20 = (unsigned __int8 *)(v16 + 1);
    *a2 = (unint64_t)(v16 + 1);
    int v21 = *v16;
    unsigned int v22 = v21;
    if (v21 < 0) {
      break;
    }
LABEL_9:
    if (!(_WORD)v19 && !v22)
    {
      id v33 = @"TLV: tag and length is 0";
      uint64_t v34 = 287;
LABEL_26:
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", v34, v33, v9, v10, v11, v12, v36);
      goto LABEL_27;
    }
    if ((uint64_t)(a3 - (void)v20) < v22)
    {
      uint64_t v36 = (unsigned __int16)v19;
      id v33 = @"TLV: Underflow: tag=0x%x len=%u";
      uint64_t v34 = 295;
      goto LABEL_26;
    }
    uint64_t v23 = v22;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 299, @"TLV: adding tag:0x%x, len:%u", v9, v10, v11, v12, (unsigned __int16)v19);
    unsigned int v24 = +[NSData dataWithBytes:*a2 length:v23];
    uint64_t v25 = sub_100315D20((uint64_t)KmlTlv, v19, v24);
    [v5 addObject:v25];

    *a2 += v23;
    unint64_t v6 = *a2;
    if (*a2 >= a3) {
      goto LABEL_20;
    }
  }
  int v26 = v21 & 0x7F;
  if ((v22 & 0x7F) == 0)
  {
    unsigned int v22 = 0;
    goto LABEL_9;
  }
  unsigned int v22 = 0;
  uint64_t v27 = v20;
  while ((unint64_t)v27 < a3)
  {
    uint64_t v20 = v27 + 1;
    *a2 = (unint64_t)(v27 + 1);
    unsigned int v22 = *v27++ | (v22 << 8);
    if (!--v26) {
      goto LABEL_9;
    }
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"+[KmlTlv _parseTLVs:end:]", 276, @"TLV: Underflow: tag=0x%x", v9, v10, v11, v12, (unsigned __int16)v19);
LABEL_27:
  [v5 addObject:v8];

LABEL_28:

  return v5;
}

_WORD *sub_100315D20(uint64_t a1, __int16 a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = objc_alloc_init((Class)self);
  v5[4] = a2;
  unint64_t v6 = (void *)*((void *)v5 + 2);
  *((void *)v5 + 2) = v4;

  return v5;
}

_WORD *sub_100315D88(uint64_t a1, __int16 a2, char a3)
{
  char v8 = a3;
  id v4 = objc_alloc_init((Class)self);
  v4[4] = a2;
  uint64_t v5 = +[NSData dataWithBytes:&v8 length:1];
  unint64_t v6 = (void *)*((void *)v4 + 2);
  *((void *)v4 + 2) = v5;

  return v4;
}

_WORD *sub_100315DFC(uint64_t a1, __int16 a2, unsigned int a3)
{
  uint64_t v5 = objc_alloc_init((Class)self);
  v5[4] = a2;
  __int16 v9 = __rev16(a3);
  uint64_t v6 = +[NSData dataWithBytes:&v9 length:2];
  uint64_t v7 = (void *)*((void *)v5 + 2);
  *((void *)v5 + 2) = v6;

  return v5;
}

_WORD *sub_100315E80(uint64_t a1, __int16 a2)
{
  uint64_t v3 = objc_alloc_init((Class)self);
  v3[4] = a2;

  return v3;
}

id *sub_100315FB4(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[2];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_100315FE4(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = *(void **)(a1 + 16);
  if (!v2) {
    return 0;
  }
  if ((unint64_t)[v2 length] >= 5)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlTlv valueAsUnsignedLong]", 113, @"TLV: Value too large: %@", v3, v4, v5, v6, *(void *)(a1 + 16));
    return 0;
  }
  uint64_t v7 = (unsigned __int8 *)[*(id *)(a1 + 16) bytes];
  if (![*(id *)(a1 + 16) length]) {
    return 0;
  }
  unint64_t v8 = 0;
  LODWORD(v9) = 0;
  do
    uint64_t v9 = v7[v8++] | (v9 << 8);
  while ((unint64_t)[*(id *)(a1 + 16) length] > v8);
  return v9;
}

void *sub_10031609C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[2];
    if (result)
    {
      if ((unint64_t)[result length] < 2)
      {
        return (void *)*(unsigned __int8 *)[(id)v1[2] bytes];
      }
      else
      {
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlTlv valueAsUnsignedChar]", 132, @"TLV: Value too large: %@", v2, v3, v4, v5, v1[2]);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_100316118(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (!v2) {
    return 0;
  }
  if ((unint64_t)[v2 length] >= 3)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlTlv valueAsUnsignedShort]", 147, @"TLV: Value too large: %@", v3, v4, v5, v6, *(void *)(a1 + 16));
    return 0;
  }
  uint64_t v7 = (unsigned __int8 *)[*(id *)(a1 + 16) bytes];
  if (![*(id *)(a1 + 16) length]) {
    return 0;
  }
  unint64_t v8 = 0;
  unsigned __int16 v9 = 0;
  do
    unsigned __int16 v9 = v7[v8++] | (unsigned __int16)(v9 << 8);
  while ((unint64_t)[*(id *)(a1 + 16) length] > v8);
  return v9;
}

id sub_1003161D0(uint64_t a1, unsigned int a2)
{
  self;
  uint64_t v3 = +[NSMutableData dataWithCapacity:4];
  uint64_t v4 = v3;
  char v8 = 0;
  if (a2)
  {
    int v5 = 4;
    if (HIBYTE(a2)) {
      goto LABEL_14;
    }
    do
    {
      unsigned int v6 = HIWORD(a2);
      a2 <<= 8;
      --v5;
    }
    while (!v6 && v5);
    if (v5)
    {
LABEL_14:
      do
      {
        char v8 = HIBYTE(a2);
        [v4 appendBytes:&v8 length:1];
        a2 <<= 8;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    [v3 appendBytes:&v8 length:1];
  }

  return v4;
}

id sub_100316294(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = +[NSMutableData data];
    uint64_t v3 = sub_1003161D0((uint64_t)KmlTlv, *(unsigned __int16 *)(a1 + 8));
    [v2 appendData:v3];

    id v4 = *(id *)(a1 + 16);
    unsigned int v5 = [v4 length];
    unsigned int v6 = sub_1003161D0((uint64_t)KmlTlv, v5);
    uint64_t v7 = v6;
    if (v5 >= 0x80)
    {
      char v9 = [v6 length] | 0x80;
      [v2 appendBytes:&v9 length:1];
    }
    [v2 appendData:v7];
    if (v4) {
      [v2 appendData:v4];
    }
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

uint64_t sub_1003163A8(uint64_t result, void *a2)
{
  if (result) {
    return sub_1003163B8(result, a2, 0);
  }
  return result;
}

uint64_t sub_1003163B8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    v23.receiver = (id)a1;
    v23.super_class = (Class)KmlDeviceConfigurationData;
    unsigned int v6 = [super init];
    a1 = (uint64_t)v6;
    if (v6)
    {
      v6[9] = 1;
      *((unsigned char *)v6 + 29) = 0;
      *((unsigned char *)v6 + 20) = 0;
      uint64_t v7 = (void *)*((void *)v6 + 4);
      *((void *)v6 + 4) = 0;

      char v8 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;

      char v9 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = 0;

      uint64_t v10 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;

      *(_WORD *)(a1 + 21) = 0;
      uint64_t v11 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = 0;

      uint64_t v12 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = 0;

      id v13 = *(void **)(a1 + 88);
      *(void *)(a1 + 88) = 0;

      uint64_t v14 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = 0;

      int v15 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = 0;

      uint64_t v16 = *(void **)(a1 + 112);
      *(void *)(a1 + 112) = 0;

      int v17 = *(void **)(a1 + 120);
      *(void *)(a1 + 120) = 0;

      *(_WORD *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 23) = 0;
      BOOL v18 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = 0;

      int v19 = *(void **)(a1 + 152);
      *(void *)(a1 + 152) = 0;

      *(_WORD *)(a1 + 27) = 0;
      uint64_t v20 = +[NSMutableArray array];
      int v21 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = v20;

      sub_10031650C(a1, v5, a3);
    }
  }

  return a1;
}

void sub_10031650C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    id v46 = v5;
    id v6 = v5;
    if (a3)
    {
      sub_100315960((uint64_t)KmlTlv, v6);
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      id v8 = [v7 countByEnumeratingWithState:&v51 objects:v56 count:16];
      if (!v8) {
        goto LABEL_13;
      }
      id v9 = v8;
      uint64_t v10 = *(void *)v52;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v52 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(id **)(*((void *)&v51 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v12) == 32590)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseDeviceConfigData:outerTag:]", 240, @"Found device config data to parse in outer tag", v13, v14, v15, v16, v44);
            uint64_t v17 = sub_100315FB4(v12);

            id v6 = (id)v17;
            goto LABEL_13;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v51 objects:v56 count:16];
      }
      while (v9);
LABEL_13:
    }
    unsigned int v45 = v6;
    BOOL v18 = sub_100315960((uint64_t)KmlTlv, v6);
    [*(id *)(a1 + 8) removeAllObjects];
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    id v19 = v18;
    id v20 = [v19 countByEnumeratingWithState:&v47 objects:v55 count:16];
    if (!v20) {
      goto LABEL_52;
    }
    id v21 = v20;
    uint64_t v22 = *(void *)v48;
LABEL_16:
    uint64_t v23 = 0;
    while (1)
    {
      if (*(void *)v48 != v22) {
        objc_enumerationMutation(v19);
      }
      unsigned int v24 = *(id **)(*((void *)&v47 + 1) + 8 * v23);
      int v25 = sub_10005D5A8((uint64_t)v24);
      if (v25 > 215)
      {
        if (v25 > 32584)
        {
          switch(v25)
          {
            case 32610:
              uint64_t v38 = sub_100315FB4(v24);
              sub_10031830C(a1, v38);

              *(unsigned char *)(a1 + 29) = 1;
              [*(id *)(a1 + 8) addObject:v24];
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseDeviceConfigData:outerTag:]", 303, @"UWB is disabled for local use, but available for sharing.", v39, v40, v41, v42, (uint64_t)v45);
              break;
            case 32608:
              uint64_t v30 = sub_100315FB4(v24);
              sub_1003173AC((unsigned char *)a1, v30);
              goto LABEL_50;
            case 32585:
              uint64_t v30 = sub_100315FB4(v24);
              sub_10031701C(a1, v30);
LABEL_50:

              break;
          }
        }
        else
        {
          switch(v25)
          {
            case 216:
              *(unsigned char *)(a1 + 22) = sub_100316118((uint64_t)v24);
              uint64_t v33 = sub_100316294((uint64_t)v24);
              uint64_t v27 = *(void **)(a1 + 120);
              *(void *)(a1 + 120) = v33;
              goto LABEL_43;
            case 217:
              uint64_t v34 = sub_100315FB4(v24);
              uint64_t v27 = *(void **)(a1 + 72);
              *(void *)(a1 + 72) = v34;
              goto LABEL_43;
            case 32554:
              id v28 = sub_100315FB4(v24);
              sub_10031773C(a1, v28);

              uint64_t v29 = sub_100316294((uint64_t)v24);
              uint64_t v27 = *(void **)(a1 + 128);
              *(void *)(a1 + 128) = v29;
              goto LABEL_43;
          }
        }
      }
      else if (v25 > 90)
      {
        switch(v25)
        {
          case 91:
            uint64_t v35 = sub_100316294((uint64_t)v24);
            uint64_t v27 = *(void **)(a1 + 144);
            *(void *)(a1 + 144) = v35;
            goto LABEL_43;
          case 96:
            uint64_t v36 = sub_100316294((uint64_t)v24);
            int v37 = *(void **)(a1 + 112);
            *(void *)(a1 + 112) = v36;

            sub_1003180A8(a1);
            goto LABEL_44;
          case 215:
            *(unsigned char *)(a1 + 21) = sub_100316118((uint64_t)v24) == 1;
LABEL_44:
            [*(id *)(a1 + 8) addObject:v24, v45];
            break;
        }
      }
      else
      {
        switch(v25)
        {
          case 'J':
            uint64_t v31 = sub_100315FB4(v24);
            uint64_t v27 = *(void **)(a1 + 80);
            *(void *)(a1 + 80) = v31;
            goto LABEL_43;
          case 'K':
            uint64_t v32 = sub_100315FB4(v24);
            uint64_t v27 = *(void **)(a1 + 88);
            *(void *)(a1 + 88) = v32;
            goto LABEL_43;
          case 'T':
            uint64_t v26 = sub_100316294((uint64_t)v24);
            uint64_t v27 = *(void **)(a1 + 152);
            *(void *)(a1 + 152) = v26;
LABEL_43:

            goto LABEL_44;
        }
      }
      if (v21 == (id)++v23)
      {
        id v43 = [v19 countByEnumeratingWithState:&v47 objects:v55 count:16];
        id v21 = v43;
        if (!v43)
        {
LABEL_52:

          id v5 = v46;
          break;
        }
        goto LABEL_16;
      }
    }
  }
}

id *sub_100316988(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    uint64_t v2 = +[NSMutableData data];
    if (*((unsigned char *)v1 + 16))
    {
      uint64_t v3 = sub_100316B80(v1, 1);
      [v2 appendData:v3];
    }
    if (*((unsigned char *)v1 + 17))
    {
      id v4 = sub_100316CD8(v1, 0);
      [v2 appendData:v4];
    }
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = v1[1];
    id v6 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = sub_100316294(*(void *)(*((void *)&v18 + 1) + 8 * i));
          [v2 appendData:v10];
        }
        id v7 = [v5 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v7);
    }

    sub_100315D20((uint64_t)KmlTlv, 32590, v2);
    uint64_t v11 = (id *)objc_claimAutoreleasedReturnValue();
    sub_100315FB4(v11);
    uint64_t v1 = (id *)objc_claimAutoreleasedReturnValue();

    uint64_t v12 = kmlUtilHexStringFromData(v1);
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData asData]", 96, @"DeviceConfig Data : %@", v13, v14, v15, v16, (uint64_t)v12);
  }

  return v1;
}

unsigned char *sub_100316B80(unsigned char *a1, int a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    id v4 = +[NSMutableData data];
    if (v2[18])
    {
      id v5 = sub_100315E80((uint64_t)KmlTlv, 24400);
      id v6 = sub_100316294((uint64_t)v5);
      [v4 appendData:v6];
    }
    id v7 = sub_100317E24((uint64_t)v2, 32594, a2);
    if (v2[19] || a2 != 1 && v2[29])
    {
      uint64_t v8 = sub_100315E80((uint64_t)KmlTlv, 24401);
      id v9 = sub_100316294((uint64_t)v8);
      [v4 appendData:v9];

      if (v7)
      {
        uint64_t v10 = sub_100316294((uint64_t)v7);
        [v4 appendData:v10];
      }
    }
    uint64_t v11 = sub_100315D20((uint64_t)KmlTlv, 32585, v4);
    sub_100316294((uint64_t)v11);
    uint64_t v2 = (unsigned char *)objc_claimAutoreleasedReturnValue();
  }

  return v2;
}

unsigned char *sub_100316CD8(unsigned char *a1, int a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    goto LABEL_19;
  }
  id v4 = +[NSMutableData data];
  int v5 = v2[23];
  char v22 = v2[23];
  if (a2)
  {
    if (v5 == 5)
    {
      char v6 = 3;
      goto LABEL_7;
    }
    if (v5 == 4)
    {
      char v6 = 1;
LABEL_7:
      char v22 = v6;
    }
  }
  id v7 = +[NSData dataWithBytes:&v22 length:1];
  uint64_t v8 = sub_100315D20((uint64_t)KmlTlv, 218, v7);
  id v9 = sub_100316294((uint64_t)v8);
  [v4 appendData:v9];

  if (v2[24])
  {
    uint64_t v10 = sub_100315E80((uint64_t)KmlTlv, 219);
    uint64_t v11 = sub_100316294((uint64_t)v10);
    [v4 appendData:v11];
  }
  if (v2[25])
  {
    uint64_t v12 = sub_100315E80((uint64_t)KmlTlv, 220);
    uint64_t v13 = sub_100316294((uint64_t)v12);
    [v4 appendData:v13];
  }
  if (v2[26])
  {
    uint64_t v14 = sub_100315D88((uint64_t)KmlTlv, 221, v2[26]);
    uint64_t v15 = sub_100316294((uint64_t)v14);
    [v4 appendData:v15];
  }
  if (v2[27])
  {
    uint64_t v16 = sub_100315E80((uint64_t)KmlTlv, 222);
    uint64_t v17 = sub_100316294((uint64_t)v16);
    [v4 appendData:v17];
  }
  if (v2[28])
  {
    long long v18 = sub_100315E80((uint64_t)KmlTlv, 192);
    long long v19 = sub_100316294((uint64_t)v18);
    [v4 appendData:v19];
  }
  long long v20 = sub_100315D20((uint64_t)KmlTlv, 32608, v4);
  sub_100316294((uint64_t)v20);
  uint64_t v2 = (unsigned char *)objc_claimAutoreleasedReturnValue();

LABEL_19:

  return v2;
}

uint64_t sub_100316F24(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 23);
    BOOL v2 = v1 > 5;
    unsigned int v3 = (0x3Au >> v1) & 1;
    if (v2) {
      return 0;
    }
    else {
      return v3;
    }
  }
  return result;
}

BOOL sub_100316F44(BOOL result)
{
  if (result) {
    return (*(unsigned char *)(result + 23) & 0xFD) == 1;
  }
  return result;
}

uint64_t sub_100316F5C(uint64_t result)
{
  if (result)
  {
    unsigned int v1 = *(unsigned __int8 *)(result + 23);
    BOOL v2 = v1 > 4;
    unsigned int v3 = (0x13u >> v1) & 1;
    if (v2) {
      return 0;
    }
    else {
      return v3;
    }
  }
  return result;
}

unsigned char *sub_100316F7C(unsigned char *a1)
{
  if (a1)
  {
    sub_100316CD8(a1, 1);
    a1 = (unsigned char *)objc_claimAutoreleasedReturnValue();
    uint64_t v1 = vars8;
  }
  return a1;
}

void sub_100316FB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      char v6 = v3;
      id v5 = [v3 length];
      id v4 = v6;
      if (v5)
      {
        sub_10031701C(a1, v6);
        id v4 = v6;
      }
    }
  }
}

void sub_10031701C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_23;
  }
  *(_WORD *)(a1 + 18) = 0;
  *(unsigned char *)(a1 + 29) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  id v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;

  char v6 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

  id v7 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = 0;

  uint64_t v8 = sub_100315960((uint64_t)KmlTlv, v3);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (!v9) {
    goto LABEL_21;
  }
  id v10 = v9;
  char v11 = 0;
  uint64_t v12 = *(void *)v19;
  do
  {
    for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v19 != v12) {
        objc_enumerationMutation(v8);
      }
      uint64_t v14 = *(id **)(*((void *)&v18 + 1) + 8 * i);
      int v15 = sub_10005D5A8((uint64_t)v14);
      if (v15 <= 32591)
      {
        if (v15 != 24400)
        {
          if (v15 != 24401) {
            continue;
          }
LABEL_14:
          char v11 = 1;
          *(unsigned char *)(a1 + 19) = 1;
          *(unsigned char *)(a1 + 29) = 0;
          continue;
        }
LABEL_15:
        char v11 = 1;
        *(unsigned char *)(a1 + 18) = 1;
        continue;
      }
      switch(v15)
      {
        case 32594:
          uint64_t v16 = sub_100315FB4(v14);
          sub_10031830C(a1, v16);

          char v11 = 1;
          break;
        case 32593:
          goto LABEL_14;
        case 32592:
          goto LABEL_15;
      }
    }
    id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  }
  while (v10);
  if (v11)
  {
    char v17 = 1;
    goto LABEL_22;
  }
LABEL_21:
  char v17 = 0;
  *(unsigned char *)(a1 + 18) = 1;
LABEL_22:
  *(unsigned char *)(a1 + 16) = v17;

LABEL_23:
}

void sub_10031722C(unsigned char *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && [v3 length])
  {
    sub_100315960((uint64_t)KmlTlv, v4);
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v6 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(id **)(*((void *)&v16 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v10) == 32608)
          {
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData updateSharingConfigWithData:]", 159, @"Found sharing config data", v11, v12, v13, v14, v16);
            int v15 = sub_100315FB4(v10);
            sub_1003173AC(a1, v15);

            goto LABEL_13;
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
LABEL_13:
  }
}

void sub_1003173AC(unsigned char *a1, void *a2)
{
  if (a1)
  {
    a1[17] = 1;
    id v3 = sub_100315960((uint64_t)KmlTlv, a2);
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
          int v9 = sub_10005D5A8((uint64_t)v8);
          switch(v9)
          {
            case 218:
              a1[23] = sub_100316118((uint64_t)v8);
              break;
            case 219:
              a1[24] = 1;
              break;
            case 220:
              a1[25] = 1;
              break;
            case 221:
              unsigned int v10 = sub_10031609C(v8);
              if (v10 >= 0x10) {
                char v11 = 16;
              }
              else {
                char v11 = v10;
              }
              a1[26] = v11;
              break;
            case 222:
              a1[27] = 1;
              break;
            default:
              if (v9 == 192) {
                a1[28] = 1;
              }
              break;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v5);
    }
  }
}

void sub_100317554(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v8 = v3;
  if (a1)
  {
    if (*(void *)(a1 + 136))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData updatePPIDWithServerProvidedData:]", 170, @"We already have car provided ppid. Ignore the server provided value", v4, v5, v6, v7, v23);
    }
    else
    {
      if (v3 && [v3 length])
      {
        sub_100315960((uint64_t)KmlTlv, v8);
        long long v24 = 0u;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        id v9 = (id)objc_claimAutoreleasedReturnValue();
        id v10 = [v9 countByEnumeratingWithState:&v24 objects:v28 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v25;
          while (2)
          {
            for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v25 != v12) {
                objc_enumerationMutation(v9);
              }
              long long v14 = *(id **)(*((void *)&v24 + 1) + 8 * i);
              if (sub_10005D5A8((uint64_t)v14) == 32554)
              {
                long long v15 = sub_100315FB4(v14);
                sub_10031773C(a1, v15);

                uint64_t v16 = sub_100316294((uint64_t)v14);
                long long v17 = *(void **)(a1 + 128);
                *(void *)(a1 + 128) = v16;

                [*(id *)(a1 + 8) addObject:v14];
                goto LABEL_16;
              }
            }
            id v11 = [v9 countByEnumeratingWithState:&v24 objects:v28 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }
LABEL_16:
      }
      long long v18 = kmlUtilHexStringFromData(*(void **)(a1 + 128));
      KmlLogFunc_InternalOnly(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData updatePPIDWithServerProvidedData:]", 185, @"Server provided PPID data: %@", v19, v20, v21, v22, (uint64_t)v18);
    }
  }
}

void sub_10031773C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v78 = a1;
  if (!a1) {
    goto LABEL_50;
  }
  uint64_t v4 = sub_100315960((uint64_t)KmlTlv, v3);
  uint64_t v5 = [@"AAPL" dataUsingEncoding:4];
  char v85 = [@"DFLT" dataUsingEncoding:4];
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseOemSpecificContent:]", 493, @"Looking for %@, or back up %@", v6, v7, v8, v9, (uint64_t)v5);
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  id v10 = v4;
  id v11 = [v10 countByEnumeratingWithState:&v97 objects:v103 count:16];
  if (!v11)
  {
    id v82 = 0;
    id v65 = v10;
LABEL_48:

    goto LABEL_49;
  }
  id v12 = v11;
  id v77 = v3;
  id v82 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)v98;
  long long v15 = "-[KmlDeviceConfigurationData parseOemSpecificContent:]";
  uint64_t v79 = *(void *)v98;
  id v80 = v10;
  while (2)
  {
    id v16 = 0;
    id v81 = v12;
    do
    {
      uint64_t v17 = v13;
      if (*(void *)v98 != v14) {
        objc_enumerationMutation(v10);
      }
      uint64_t v83 = (char *)v16;
      long long v18 = *(id **)(*((void *)&v97 + 1) + 8 * (void)v16);
      unsigned int v19 = sub_10005D5A8((uint64_t)v18);
      long long v73 = sub_100315FB4(v18);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)v15, 495, @"TLV: %02x : %@", v20, v21, v22, v23, v19);

      if (sub_10005D5A8((uint64_t)v18) != 97)
      {
        uint64_t v13 = v17;
        char v55 = v83;
        goto LABEL_41;
      }
      long long v24 = sub_100315FB4(v18);
      long long v25 = sub_100315960((uint64_t)KmlTlv, v24);

      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      id v26 = v25;
      id v27 = [v26 countByEnumeratingWithState:&v93 objects:v102 count:16];
      id v84 = v26;
      if (v27)
      {
        id v28 = v27;
        char v86 = 0;
        long long v87 = 0;
        uint64_t v88 = *(void *)v94;
        uint64_t v29 = v17;
        uint64_t v30 = v26;
        do
        {
          for (uint64_t i = 0; i != v28; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v94 != v88) {
              objc_enumerationMutation(v30);
            }
            uint64_t v32 = *(id **)(*((void *)&v93 + 1) + 8 * i);
            unsigned int v33 = sub_10005D5A8((uint64_t)v32);
            long long v74 = sub_100315FB4(v32);
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)v15, 500, @"TLV: %02x : %@", v34, v35, v36, v37, v33);

            if (sub_10005D5A8((uint64_t)v32) == 64)
            {
              uint64_t v38 = sub_100315FB4(v32);
              unsigned __int8 v39 = [v5 isEqualToData:v38];

              if (v39)
              {
                char v86 = 1;
              }
              else
              {
                long long v51 = sub_100315FB4(v32);
                unsigned int v52 = [v85 isEqualToData:v51];

                uint64_t v29 = v52 | v29;
              }
            }
            else if (sub_10005D5A8((uint64_t)v32) == 49)
            {
              uint64_t v40 = sub_100315FB4(v32);
              uint64_t v41 = sub_100315960((uint64_t)KmlTlv, v40);

              long long v91 = 0u;
              long long v92 = 0u;
              long long v89 = 0u;
              long long v90 = 0u;
              id v42 = v41;
              id v43 = [v42 countByEnumeratingWithState:&v89 objects:v101 count:16];
              if (v43)
              {
                id v44 = v43;
                uint64_t v45 = v29;
                id v46 = v15;
                long long v47 = v5;
                uint64_t v48 = *(void *)v90;
                while (2)
                {
                  for (j = 0; j != v44; j = (char *)j + 1)
                  {
                    if (*(void *)v90 != v48) {
                      objc_enumerationMutation(v42);
                    }
                    long long v50 = *(id **)(*((void *)&v89 + 1) + 8 * (void)j);
                    if (sub_10005D5A8((uint64_t)v50) == 80)
                    {
                      uint64_t v53 = sub_100315FB4(v50);

                      long long v87 = (void *)v53;
                      goto LABEL_28;
                    }
                  }
                  id v44 = [v42 countByEnumeratingWithState:&v89 objects:v101 count:16];
                  if (v44) {
                    continue;
                  }
                  break;
                }
LABEL_28:
                uint64_t v5 = v47;
                long long v15 = v46;
                uint64_t v29 = v45;
                uint64_t v30 = v84;
              }
            }
          }
          id v28 = [v30 countByEnumeratingWithState:&v93 objects:v102 count:16];
        }
        while (v28);

        if (v86)
        {
          long long v76 = kmlUtilHexStringFromData(v87);
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseOemSpecificContent:]", 519, @"Found oem specific data for %@ : (%@)", v66, v67, v68, v69, @"AAPL");

          long long v70 = *(void **)(v78 + 136);
          *(void *)(v78 + 136) = v87;
          id v71 = v87;

          id v10 = v80;
          id v65 = v80;
          goto LABEL_46;
        }
        id v10 = v80;
        id v54 = v87;
        if ((v29 & 1) == 0)
        {
          uint64_t v13 = 0;
          uint64_t v14 = v79;
          id v12 = v81;
          goto LABEL_40;
        }
        uint64_t v14 = v79;
        id v12 = v81;
      }
      else
      {

        id v54 = 0;
        if ((v17 & 1) == 0)
        {
          uint64_t v13 = 0;
          goto LABEL_40;
        }
      }
      long long v75 = kmlUtilHexStringFromData(v54);
      uint64_t v13 = 1;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)v15, 523, @"Found default product plan data for %@ : (%@)", v56, v57, v58, v59, @"DFLT");

      id v54 = v54;
      id v82 = v54;
LABEL_40:
      char v55 = v83;

LABEL_41:
      id v16 = v55 + 1;
    }
    while (v16 != v12);
    id v12 = [v10 countByEnumeratingWithState:&v97 objects:v103 count:16];
    if (v12) {
      continue;
    }
    break;
  }

  if (v13)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseOemSpecificContent:]", 530, @"Only found default product plan data, so using it", v60, v61, v62, v63, v72);
    id v64 = v82;
    id v65 = *(void **)(v78 + 136);
    id v82 = v64;
    *(void *)(v78 + 136) = v64;
LABEL_46:
    id v3 = v77;
    goto LABEL_48;
  }
  id v3 = v77;
LABEL_49:

LABEL_50:
}

void sub_100317D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 19))
    {
      sub_100317E24(a1, 32610, 1);
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      if (v15) {
        [*(id *)(a1 + 8) addObject:v15];
      }
      *(unsigned char *)(a1 + 19) = 0;
      *(unsigned char *)(a1 + 29) = 1;
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"[(KmlDeviceConfigurationData *)"UWB disabled locally removeUwbSupportLocally], v10, v11, v12, v13, v14);
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData removeUwbSupportLocally]", 192, @"This reader doesn't support UWB. Nothing to disable locally.", a5, a6, a7, a8, a9);
    }
  }
}

id sub_100317E24(uint64_t a1, __int16 a2, int a3)
{
  if (a1)
  {
    uint64_t v6 = +[NSMutableData data];
    if (a3 != 3)
    {
      uint64_t v7 = *(void **)(a1 + 32);
      if (v7)
      {
        uint64_t v8 = sub_100315D20((uint64_t)KmlTlv, 208, v7);
        uint64_t v9 = sub_100316294((uint64_t)v8);
        [v6 appendData:v9];
      }
      uint64_t v10 = *(void **)(a1 + 40);
      if (v10)
      {
        uint64_t v11 = sub_100315D20((uint64_t)KmlTlv, 209, v10);
        uint64_t v12 = sub_100316294((uint64_t)v11);
        [v6 appendData:v12];
      }
    }
    if (*(unsigned char *)(a1 + 20))
    {
      uint64_t v13 = sub_100315E80((uint64_t)KmlTlv, 210);
      uint64_t v14 = sub_100316294((uint64_t)v13);
      [v6 appendData:v14];
    }
    if (a3 != 3)
    {
      id v15 = *(void **)(a1 + 48);
      if (v15)
      {
        id v16 = sub_100315D20((uint64_t)KmlTlv, 211, v15);
        uint64_t v17 = sub_100316294((uint64_t)v16);
        [v6 appendData:v17];
      }
      long long v18 = *(void **)(a1 + 56);
      if (v18)
      {
        unsigned int v19 = sub_100315D20((uint64_t)KmlTlv, 212, v18);
        uint64_t v20 = sub_100316294((uint64_t)v19);
        [v6 appendData:v20];
      }
    }
    if ([v6 length]) {
      sub_100315D20((uint64_t)KmlTlv, a2, v6);
    }
    else {
    uint64_t v21 = sub_100315E80((uint64_t)KmlTlv, a2);
    }
  }
  else
  {
    uint64_t v21 = 0;
  }

  return v21;
}

uint64_t sub_100318010(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (result)
  {
    if (a2 == 768 && (*(unsigned __int8 *)(result + 23) | 2) == 2)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlDeviceConfigurationData isValidForKmlVersion:transport:]", 214, @"Sharing In a chain does not support offline immo tokens", a5, a6, a7, a8, vars0);
      return 0;
    }
    if (a3)
    {
      if (a3 == 2)
      {
        if (!*(unsigned char *)(result + 19)) {
          return 0;
        }
LABEL_10:
        if (*(void *)(result + 32)) {
          return *(void *)(result + 40) != 0;
        }
        return 0;
      }
    }
    else if (*(unsigned char *)(result + 19))
    {
      goto LABEL_10;
    }
    return 1;
  }
  return result;
}

void sub_1003180A8(uint64_t a1)
{
  if (a1)
  {
    sub_100315960((uint64_t)KmlTlv, *(void **)(a1 + 112));
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    id v3 = [v2 countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v27;
      while (2)
      {
        for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v27 != v4) {
            objc_enumerationMutation(v2);
          }
          uint64_t v6 = *(id **)(*((void *)&v26 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v6) == 96)
          {
            sub_100315FB4(v6);
            id v3 = (id)objc_claimAutoreleasedReturnValue();
            goto LABEL_12;
          }
        }
        id v3 = [v2 countByEnumeratingWithState:&v26 objects:v31 count:16];
        if (v3) {
          continue;
        }
        break;
      }
    }
LABEL_12:

    if (![v3 length]) {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseSharingInAChainDeviceConfigMailboxSettingData]", 585, @"No override found", v7, v8, v9, v10, v21);
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlDeviceConfigurationData parseSharingInAChainDeviceConfigMailboxSettingData]", 588, @"SharingInAChain override %@", v7, v8, v9, v10, (uint64_t)v3);
    uint64_t v11 = sub_100315960((uint64_t)KmlTlv, v3);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id v12 = [v11 countByEnumeratingWithState:&v22 objects:v30 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v23;
      do
      {
        for (j = 0; j != v13; j = (char *)j + 1)
        {
          if (*(void *)v23 != v14) {
            objc_enumerationMutation(v11);
          }
          id v16 = *(id **)(*((void *)&v22 + 1) + 8 * (void)j);
          if (sub_10005D5A8((uint64_t)v16) == 74)
          {
            uint64_t v17 = sub_100315FB4(v16);
            long long v18 = *(void **)(a1 + 96);
            *(void *)(a1 + 96) = v17;
          }
          if (sub_10005D5A8((uint64_t)v16) == 75)
          {
            uint64_t v19 = sub_100315FB4(v16);
            uint64_t v20 = *(void **)(a1 + 104);
            *(void *)(a1 + 104) = v19;
          }
        }
        id v13 = [v11 countByEnumeratingWithState:&v22 objects:v30 count:16];
      }
      while (v13);
    }
  }
}

void sub_10031830C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_100315960((uint64_t)KmlTlv, a2);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(id **)(*((void *)&v15 + 1) + 8 * i);
          switch(sub_10005D5A8((uint64_t)v8))
          {
            case 0xD0u:
              uint64_t v9 = sub_100315FB4(v8);
              uint64_t v10 = *(void **)(a1 + 32);
              *(void *)(a1 + 32) = v9;
              goto LABEL_14;
            case 0xD1u:
              uint64_t v12 = sub_100315FB4(v8);
              uint64_t v10 = *(void **)(a1 + 40);
              *(void *)(a1 + 40) = v12;
              goto LABEL_14;
            case 0xD2u:
              *(unsigned char *)(a1 + 20) = 1;
              continue;
            case 0xD3u:
              uint64_t v13 = sub_100315FB4(v8);
              uint64_t v10 = *(void **)(a1 + 48);
              *(void *)(a1 + 48) = v13;
              goto LABEL_14;
            case 0xD4u:
              uint64_t v11 = sub_100315FB4(v8);
              uint64_t v10 = *(void **)(a1 + 56);
              *(void *)(a1 + 56) = v11;
              goto LABEL_14;
            case 0xD5u:
              uint64_t v14 = sub_100315FB4(v8);
              uint64_t v10 = *(void **)(a1 + 64);
              *(void *)(a1 + 64) = v14;
LABEL_14:

              break;
            default:
              continue;
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v5);
    }
  }
}

BOOL sub_1003184DC(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 18) != 0;
  }
  return result;
}

BOOL sub_1003184F0(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 19) != 0;
  }
  return result;
}

BOOL sub_100318504(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 21) != 0;
  }
  return result;
}

uint64_t sub_100318518(uint64_t result)
{
  if (result) {
    return *(unsigned __int8 *)(result + 22);
  }
  return result;
}

uint64_t sub_100318524(uint64_t result, char a2)
{
  if (result) {
    *(unsigned char *)(result + 28) = a2;
  }
  return result;
}

BOOL sub_100318530(BOOL result)
{
  if (result) {
    return *(unsigned char *)(result + 29) != 0;
  }
  return result;
}

id *sub_100319378(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a5;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)KmlCommandHandler;
    uint64_t v13 = (id *)[super init];
    a1 = v13;
    if (v13)
    {
      objc_storeStrong(v13 + 2, a2);
      objc_storeStrong(a1 + 3, a3);
      a1[6] = a4;
      uint64_t v14 = objc_alloc_init(KmlEndpointCreationConfig);
      id v15 = a1[4];
      a1[4] = v14;

      id v16 = a1[11];
      a1[11] = 0;

      objc_storeStrong(a1 + 7, a5);
      *((unsigned char *)a1 + 40) = 0;
      a1[9] = 0;
      a1[10] = 0;
      *((unsigned char *)a1 + 64) = -1;
      a1[12] = (id)0xFFFF;
      id v17 = a1[1];
      a1[1] = &off_10042DB50;
    }
  }

  return a1;
}

void sub_100319490(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 80) = 0;
    *(unsigned char *)(a1 + 64) = -1;
    id v2 = *(void **)(a1 + 8);
    *(void *)(a1 + 8) = &off_10042DBE0;

    *(void *)(a1 + 72) = 0;
  }
}

void sub_1003194DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    switch(a2)
    {
      case 0:
        id v10 = *(void **)(a1 + 8);
        id v11 = &off_10042DBE0;
        goto LABEL_10;
      case 1:
        id v10 = *(void **)(a1 + 8);
        id v11 = &off_10042DB68;
        goto LABEL_10;
      case 2:
        id v10 = *(void **)(a1 + 8);
        id v11 = &off_10042DB80;
        goto LABEL_10;
      case 3:
        id v10 = *(void **)(a1 + 8);
        id v11 = &off_10042DB98;
        goto LABEL_10;
      case 4:
        id v10 = *(void **)(a1 + 8);
        id v11 = &off_10042DBB0;
        goto LABEL_10;
      case 5:
      case 6:
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler adjustExpectedAndCurrentCommands:]", 114, @"KmlCommandHandler: Not changing expected commands on OpControlFlow.", a5, a6, a7, a8, v12);
        break;
      case 7:
      case 8:
        id v10 = *(void **)(a1 + 8);
        id v11 = &off_10042DBC8;
LABEL_10:
        *(void *)(a1 + 8) = v11;

        break;
      default:
        break;
    }
    *(void *)(a1 + 72) = a2;
  }
}

void *sub_1003195E0(void *result, uint64_t a2)
{
  if (result)
  {
    id v2 = (void *)result[1];
    id v3 = +[NSNumber numberWithInteger:a2];
    id v4 = [v2 containsObject:v3];

    return v4;
  }
  return result;
}

uint64_t sub_100319638(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (sub_1003154AC((BOOL)v3))
    {
      a1 = 1;
    }
    else if (sub_1003154D0((BOOL)v4))
    {
      a1 = 4;
    }
    else if (sub_1003155A4((BOOL)v4))
    {
      a1 = 2;
    }
    else if (sub_1003155CC((BOOL)v4))
    {
      a1 = 3;
    }
    else if (sub_100315570((BOOL)v4))
    {
      a1 = 5;
    }
    else if (sub_100315548((BOOL)v4))
    {
      a1 = 6;
    }
    else if (sub_1003154F8((BOOL)v4))
    {
      a1 = 7;
    }
    else if (sub_100315520((BOOL)v4))
    {
      a1 = 8;
    }
    else
    {
      a1 = 0;
    }
  }

  return a1;
}

uint64_t sub_10031970C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (!a1) {
    goto LABEL_8;
  }
  if ((a3 & 0xFFFFFFFFFFFFFFFBLL) != 1 && !sub_1003158E4((BOOL)v7))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isDataValid:commandType:error:]", 171, @"KmlCommandHandler: decrypt failed for command data.", v9, v10, v11, v12, v15);
    if (!a4) {
      goto LABEL_5;
    }
    uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    *(void *)a4 = +[NSError errorWithDomain:v14 code:27013 userInfo:0];

LABEL_8:
    a4 = 0;
    goto LABEL_5;
  }
  a4 = 1;
LABEL_5:

  return a4;
}

uint64_t sub_1003197DC(void *a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (!a1) {
    goto LABEL_14;
  }
  if (!sub_100315860((BOOL)v5))
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 183, @"KmlCommandHandler: class is not valid", v7, v8, v9, v10, v39);
    if (!a3) {
      goto LABEL_15;
    }
    uint64_t v30 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    uint64_t v31 = v30;
    uint64_t v32 = 28160;
    goto LABEL_13;
  }
  if ((sub_10031588C((uint64_t)v6) & 1) == 0)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 191, @"KmlCommandHandler: instruction is not valid", v11, v12, v13, v14, v39);
    if (!a3) {
      goto LABEL_15;
    }
    uint64_t v30 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    uint64_t v31 = v30;
    uint64_t v32 = 27904;
    goto LABEL_13;
  }
  uint64_t v15 = sub_100319638((uint64_t)a1, v6);
  if ((sub_1003195E0(a1, v15) & 1) == 0)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 200, @"KmlCommandHandler: command is not valid - currCommand = %ld, previous command = %ld, return code: 0x6985.", v16, v17, v18, v19, v15);
    if (!a3) {
      goto LABEL_15;
    }
    uint64_t v30 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    uint64_t v31 = v30;
    uint64_t v32 = 27013;
LABEL_13:
    *(void *)a3 = +[NSError errorWithDomain:v31 code:v32 userInfo:0];

LABEL_14:
    a3 = 0;
    goto LABEL_15;
  }
  if ((sub_10031970C((uint64_t)a1, v6, v15, a3) & 1) == 0)
  {
    id v34 = [*(id *)a3 code];
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 208, @"KmlCommandHandler: data is not valid - error.code = 0x%02lx", v35, v36, v37, v38, (uint64_t)v34);
    goto LABEL_14;
  }
  sub_1003194DC((uint64_t)a1, v15, v20, v21, v22, v23, v24, v25);
  a3 = 1;
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler isIncomingCommandAndDataValid:error:]", 215, @"KmlCommandHandler: Command is valid", v26, v27, v28, v29, v39);
LABEL_15:

  return a3;
}

void *sub_1003199EC(void *a1, void *a2, id *a3)
{
  uint64_t v9 = a2;
  if (a1)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleIncomingCommand:error:]", 221, @"KmlCommandHandler:", v5, v6, v7, v8, v16);
    if (sub_1003197DC(a1, v9, (uint64_t)a3))
    {
      switch(a1[9])
      {
        case 1:
          uint64_t v10 = sub_100319C88((uint64_t)a1, v9);
          goto LABEL_16;
        case 2:
          uint64_t v10 = sub_100319E38((uint64_t)a1, v9, a3);
          goto LABEL_16;
        case 3:
          uint64_t v10 = sub_10031AA78((uint64_t)a1, v9, a3);
          goto LABEL_16;
        case 4:
          uint64_t v10 = sub_10031AE94((uint64_t)a1, v9, a3);
          goto LABEL_16;
        case 5:
        case 6:
          uint64_t v10 = sub_10031B33C((uint64_t)a1, v9, a3);
          goto LABEL_16;
        case 7:
          uint64_t v10 = sub_10031B224((uint64_t)a1, v9, a3);
          goto LABEL_16;
        case 8:
          uint64_t v10 = sub_10031B2B0((uint64_t)a1, v9, a3);
LABEL_16:
          a1 = (void *)v10;
          break;
        default:
          a1 = 0;
          break;
      }
    }
    else
    {
      if (*a3) {
        unsigned int v11 = bswap32([*a3 code]) >> 16;
      }
      else {
        LOWORD(v11) = -32150;
      }
      a1 = sub_100312A1C(0x100452000, v11, 0);
      uint64_t v12 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
      uint64_t v13 = +[NSString stringWithUTF8String:KmlErrorString(206)];
      uint64_t v18 = v13;
      uint64_t v14 = +[NSDictionary dictionaryWithObjects:&v18 forKeys:&v17 count:1];
      *a3 = +[NSError errorWithDomain:v12 code:206 userInfo:v14];
    }
  }

  return a1;
}

id sub_100319C88(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_100315628(a2);
    if ([v3 isEqualToString:@"A000000809434343444B467631"])
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleSelectCommand:error:]", 273, @"KmlCommandHandler: our AID was selected", v4, v5, v6, v7, v20);
      uint64_t v8 = [*(id *)(a1 + 56) appletSupportedVersionsTlvForPairing];
      uint64_t v9 = [*(id *)(a1 + 56) kmlSupportedVersionsTlvForPairing];
      char v21 = 2 * (*(void *)(a1 + 24) != 0);
      uint64_t v10 = +[NSData dataWithBytes:&v21 length:1];
      unsigned int v11 = sub_100315D20((uint64_t)KmlTlv, 212, v10);

      unsigned int v16 = 144;
    }
    else
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleSelectCommand:error:]", 287, @"KmlCommandHandler: select not for us.", v4, v5, v6, v7, v20);
      uint64_t v9 = 0;
      uint64_t v8 = 0;
      unsigned int v11 = 0;
      unsigned int v16 = 33386;
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleSelectCommand:error:]", 290, @"KmlCommandHandler: response status = 0x%02x", v12, v13, v14, v15, __rev16(v16));
    NSErrorUserInfoKey v17 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v9, v8, v11, 0);
    uint64_t v18 = sub_100312A1C(0x100452000, v16, v17);
  }
  else
  {
    uint64_t v18 = 0;
  }

  return v18;
}

id sub_100319E38(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  uint64_t v105 = a1;
  if (a1)
  {
    uint64_t v6 = +[NSMutableData data];
    uint64_t v7 = sub_100315028(v5);
    uint64_t v8 = sub_100315960((uint64_t)KmlTlv, v7);

    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    id v9 = v8;
    id v10 = [v9 countByEnumeratingWithState:&v117 objects:v133 count:16];
    if (v10)
    {
      id v11 = v10;
      uint64_t v104 = 0;
      uint64_t v107 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      id v3 = *(id *)v118;
      do
      {
        for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
        {
          if (*(id *)v118 != v3) {
            objc_enumerationMutation(v9);
          }
          uint64_t v15 = *(id **)(*((void *)&v117 + 1) + 8 * i);
          if (sub_10005D5A8((uint64_t)v15) == 32592)
          {
            uint64_t v16 = sub_100315FB4(v15);

            uint64_t v13 = (void *)v16;
          }
          else if (sub_10005D5A8((uint64_t)v15) == 91)
          {
            uint64_t v17 = sub_100316294((uint64_t)v15);

            uint64_t v12 = (void *)v17;
          }
          else if (sub_10005D5A8((uint64_t)v15) == 92)
          {
            uint64_t v18 = sub_100316294((uint64_t)v15);

            uint64_t v107 = (void *)v18;
          }
          else if (sub_10005D5A8((uint64_t)v15) == 214)
          {
            *(void *)(v105 + 96) = sub_100315FE4((uint64_t)v15);
          }
          else if (sub_10005D5A8((uint64_t)v15) == 94)
          {
            uint64_t v19 = sub_100316294((uint64_t)v15);

            uint64_t v104 = (void *)v19;
          }
        }
        id v11 = [v9 countByEnumeratingWithState:&v117 objects:v133 count:16];
      }
      while (v11);
    }
    else
    {
      uint64_t v104 = 0;
      uint64_t v107 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }

    if (!*(void *)(v105 + 24))
    {
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 325, @"probing mode", v20, v21, v22, v23, v94);
      sub_100312A1C(0x100452000, 33940, 0);
      id v3 = (id)objc_claimAutoreleasedReturnValue();
      id v43 = 0;
      uint64_t v24 = v107;
LABEL_81:

      goto LABEL_82;
    }
    uint64_t v24 = v107;
    if (v12 && v107)
    {
      id v25 = sub_100300B88(*(void *)(v105 + 56), v12);
      id v26 = sub_100300714(*(void *)(v105 + 56), v107);
      id v27 = sub_100301448(*(void *)(v105 + 56), v104);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 342, @"VersionInformation: %@", v28, v29, v30, v31, *(void *)(v105 + 56));
      if ([*(id *)(v105 + 56) agreedKmlVehicleVersion])
      {
        [v6 appendData:v12];
        [v6 appendData:v107];
        if (v13)
        {
          long long v98 = v6;
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 360, @"KmlCommandHandler: checking if pake config is in scrypt params.", v32, v33, v34, v35, v95);
          uint64_t v36 = +[NSMutableArray array];
          sub_100315960((uint64_t)KmlTlv, v13);
          long long v113 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          id obj = (id)objc_claimAutoreleasedReturnValue();
          id v37 = [obj countByEnumeratingWithState:&v113 objects:v128 count:16];
          if (v37)
          {
            id v3 = v37;
            uint64_t v106 = 0;
            uint64_t v38 = *(void *)v114;
            unsigned __int16 v101 = 8;
            unsigned int v102 = 0x8000;
            unsigned __int16 v100 = 1;
            do
            {
              for (j = 0; j != v3; j = (char *)j + 1)
              {
                if (*(void *)v114 != v38) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v40 = *(id **)(*((void *)&v113 + 1) + 8 * (void)j);
                uint64_t v41 = +[NSNumber numberWithUnsignedInteger:sub_10005D5A8((uint64_t)v40)];
                [v36 addObject:v41];

                if (sub_10005D5A8((uint64_t)v40) == 192)
                {
                  uint64_t v42 = sub_100315FB4(v40);

                  uint64_t v106 = (void *)v42;
                }
                else if (sub_10005D5A8((uint64_t)v40) == 193)
                {
                  unsigned int v102 = sub_100315FE4((uint64_t)v40);
                }
                else if (sub_10005D5A8((uint64_t)v40) == 194)
                {
                  unsigned __int16 v101 = sub_100316118((uint64_t)v40);
                }
                else if (sub_10005D5A8((uint64_t)v40) == 195)
                {
                  unsigned __int16 v100 = sub_100316118((uint64_t)v40);
                }
              }
              id v3 = [obj countByEnumeratingWithState:&v113 objects:v128 count:16];
            }
            while (v3);
          }
          else
          {
            uint64_t v106 = 0;
            unsigned int v102 = 0x8000;
            unsigned __int16 v100 = 1;
            unsigned __int16 v101 = 8;
          }
          long long v111 = 0u;
          long long v112 = 0u;
          long long v109 = 0u;
          long long v110 = 0u;
          id v54 = [&off_10042DBF8 countByEnumeratingWithState:&v109 objects:v127 count:16];
          if (v54)
          {
            id v55 = v54;
            uint64_t v56 = *(void *)v110;
            while (2)
            {
              for (k = 0; k != v55; k = (char *)k + 1)
              {
                if (*(void *)v110 != v56) {
                  objc_enumerationMutation(&off_10042DBF8);
                }
                id v3 = *(id *)(*((void *)&v109 + 1) + 8 * (void)k);
                if (([v36 containsObject:v3] & 1) == 0)
                {
                  if (a3)
                  {
                    long long v97 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
                    NSErrorUserInfoKey v125 = NSLocalizedDescriptionKey;
                    uint64_t v59 = +[NSString stringWithUTF8String:KmlErrorString(21)];
                    uint64_t v126 = v59;
                    uint64_t v60 = +[NSDictionary dictionaryWithObjects:&v126 forKeys:&v125 count:1];
                    *a3 = +[NSError errorWithDomain:v97 code:21 userInfo:v60];
                  }
                  id v61 = [v3 unsignedIntegerValue];
                  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 386, @"KmlCommandHandler: did not receive tag: 0x%02lx", v62, v63, v64, v65, (uint64_t)v61);
                  sub_100312A1C(0x100452000, 34922, 0);
                  id v3 = (id)objc_claimAutoreleasedReturnValue();
                  int v58 = 0;
                  goto LABEL_63;
                }
              }
              id v55 = [&off_10042DBF8 countByEnumeratingWithState:&v109 objects:v127 count:16];
              if (v55) {
                continue;
              }
              break;
            }
            int v58 = 1;
          }
          else
          {
            int v58 = 1;
          }
LABEL_63:
          uint64_t v6 = v98;

          if (!v58) {
            goto LABEL_76;
          }
          uint64_t v24 = v107;
          if (v106)
          {
            uint64_t v66 = KmlSignpostLogger();
            if (os_signpost_enabled(v66))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v66, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpPakeRequest", "getX", buf, 2u);
            }

            uint64_t v67 = sub_100337A38(*(void **)(v105 + 16), v13, *(void **)(v105 + 24), v106, v102, v101, v100, v98);
            uint64_t v68 = KmlSignpostLogger();
            if (os_signpost_enabled(v68))
            {
              *(_WORD *)buf = 0;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v68, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpPakeRequest", "getX", buf, 2u);
            }

            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 403, @"KmlCommandHandler: CurvePointX = %@", v69, v70, v71, v72, (uint64_t)v67);
            if (!v67)
            {
              if (a3)
              {
                id v77 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
                NSErrorUserInfoKey v121 = NSLocalizedDescriptionKey;
                uint64_t v6 = v98;
                uint64_t v78 = +[NSString stringWithUTF8String:KmlErrorString(18)];
                uint64_t v122 = v78;
                uint64_t v79 = +[NSDictionary dictionaryWithObjects:&v122 forKeys:&v121 count:1];
                *a3 = +[NSError errorWithDomain:v77 code:18 userInfo:v79];
              }
              KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 409, @"KmlCommandHandler: CurvePointX is nil. Password is incorrect", v73, v74, v75, v76, v96);
            }
            KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 412, @"KmlCommandHandler: response status = 0x9000", v73, v74, v75, v76, v96);
            id v80 = +[NSMutableArray array];
            id v81 = sub_100315D20((uint64_t)KmlTlv, 80, v67);
            [v80 addObject:v81];

            long long v89 = sub_1003018B0(*(unsigned __int16 **)(v105 + 56), v82, v83, v84, v85, v86, v87, v88);
            if (v89) {
              [v80 addObject:v89];
            }
            sub_100312A1C(0x100452000, 144, v80);
            id v3 = (id)objc_claimAutoreleasedReturnValue();

LABEL_76:
            id v43 = v106;
            uint64_t v24 = v107;
            goto LABEL_81;
          }
        }
        if (a3)
        {
          long long v90 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v123 = NSLocalizedDescriptionKey;
          long long v91 = +[NSString stringWithUTF8String:KmlErrorString(20)];
          id v124 = v91;
          long long v92 = +[NSDictionary dictionaryWithObjects:&v124 forKeys:&v123 count:1];
          *a3 = +[NSError errorWithDomain:v90 code:20 userInfo:v92];

          uint64_t v24 = v107;
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 396, @"KmlCommandHandler: did not receive salt.", v32, v33, v34, v35, v95);
      }
      else
      {
        if (a3)
        {
          long long v47 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v129 = NSLocalizedDescriptionKey;
          uint64_t v48 = +[NSString stringWithUTF8String:KmlErrorString(215)];
          id v130 = v48;
          long long v49 = +[NSDictionary dictionaryWithObjects:&v130 forKeys:&v129 count:1];
          *a3 = +[NSError errorWithDomain:v47 code:215 userInfo:v49];

          uint64_t v24 = v107;
        }
        [*(id *)(v105 + 56) ourPreferredKmlVersion];
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 348, @"Version mismatch. Vehicle supported version: %@, our expected version 0x%02X", v50, v51, v52, v53, (uint64_t)v12);
      }
    }
    else
    {
      if (a3)
      {
        id v44 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v131 = NSLocalizedDescriptionKey;
        uint64_t v45 = +[NSString stringWithUTF8String:KmlErrorString(215)];
        uint64_t v132 = v45;
        id v46 = +[NSDictionary dictionaryWithObjects:&v132 forKeys:&v131 count:1];
        *a3 = +[NSError errorWithDomain:v44 code:215 userInfo:v46];

        uint64_t v24 = v107;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeRequestCommand:error:]", 334, @"Missing tags : 0x%02x or 0x%02x", v20, v21, v22, v23, 91);
    }
    sub_100312A1C(0x100452000, 34922, 0);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    id v43 = 0;
    goto LABEL_81;
  }
  id v3 = 0;
LABEL_82:

  return v3;
}

id sub_10031AA78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  uint64_t v6 = v5;
  if (!a1)
  {
    uint64_t v33 = 0;
    goto LABEL_28;
  }
  uint64_t v7 = sub_100315028(v5);
  uint64_t v8 = sub_100315960((uint64_t)KmlTlv, v7);

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v9 = v8;
  id v10 = [v9 countByEnumeratingWithState:&v40 objects:v46 count:16];
  if (!v10)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_16;
  }
  id v11 = v10;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = *(void *)v41;
  do
  {
    for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v41 != v14) {
        objc_enumerationMutation(v9);
      }
      uint64_t v16 = *(id **)(*((void *)&v40 + 1) + 8 * i);
      if (sub_10005D5A8((uint64_t)v16) == 82)
      {
        uint64_t v17 = sub_100315FB4(v16);
        uint64_t v18 = v13;
        uint64_t v13 = (void *)v17;
      }
      else
      {
        if (sub_10005D5A8((uint64_t)v16) != 87) {
          continue;
        }
        uint64_t v19 = sub_100315FB4(v16);
        uint64_t v18 = v12;
        uint64_t v12 = (void *)v19;
      }
    }
    id v11 = [v9 countByEnumeratingWithState:&v40 objects:v46 count:16];
  }
  while (v11);
LABEL_16:

  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeVerifyCommand:error:]", 435, @"KmlCommandHandler: CurvePointY: %@, remoteEvidence: %@", v20, v21, v22, v23, (uint64_t)v13);
  if (!v13 || !v12) {
    goto LABEL_24;
  }
  uint64_t v28 = KmlSignpostLogger();
  if (os_signpost_enabled(v28))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "OpPakeVerify", "evidence", buf, 2u);
  }

  uint64_t v29 = sub_10033796C(*(void **)(a1 + 16), v13, v12);
  uint64_t v30 = KmlSignpostLogger();
  if (os_signpost_enabled(v30))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "OpPakeVerify", "evidence", buf, 2u);
  }

  if (v29)
  {
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeVerifyCommand:error:]", 451, @"KmlCommandHandler: response status = 0x9000", v24, v25, v26, v27, v38);
    uint64_t v31 = sub_100315D20((uint64_t)KmlTlv, 88, v29);
    uint64_t v32 = +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v31, 0, v12);
    uint64_t v33 = sub_100312A1C(0x100452000, 144, v32);
  }
  else
  {
LABEL_24:
    if (a3)
    {
      uint64_t v34 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v44 = NSLocalizedDescriptionKey;
      uint64_t v35 = +[NSString stringWithUTF8String:KmlErrorString(5)];
      uint64_t v45 = v35;
      uint64_t v36 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
      *a3 = +[NSError errorWithDomain:v34 code:5 userInfo:v36];
    }
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handlePakeVerifyCommand:error:]", 447, @"KmlCommandHandler: evidence verification failed, response status = 0x6A88", v24, v25, v26, v27, v38);
    uint64_t v33 = sub_100312A1C(0x100452000, 34922, 0);
  }

LABEL_28:

  return v33;
}

id sub_10031AE94(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  if (!a1)
  {
    uint64_t v17 = 0;
    goto LABEL_19;
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 535, @"KmlCommandHandler:", v5, v6, v7, v8, v39);
  if (!*(unsigned char *)(a1 + 40))
  {
    if (sub_100315598((uint64_t)v9) == 128 && !sub_1003158F8((uint64_t)v9))
    {
      unsigned int v27 = sub_100315598((uint64_t)v9);
      sub_1003158F8((uint64_t)v9);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 550, @"Write data end: p1=%02x, p2=%02x", v28, v29, v30, v31, v27);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (sub_100315598((uint64_t)v9) || sub_1003158F8((uint64_t)v9))
    {
      uint64_t v18 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
      NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
      uint64_t v19 = +[NSString stringWithUTF8String:KmlErrorString(12)];
      long long v42 = v19;
      uint64_t v20 = +[NSDictionary dictionaryWithObjects:&v42 forKeys:&v41 count:1];
      id v21 = +[NSError errorWithDomain:v18 code:12 userInfo:v20];

      LODWORD(v18) = sub_100315598((uint64_t)v9);
      sub_1003158F8((uint64_t)v9);
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 555, @"Wrong P1 or P2, return code: 0x6B00. p1=%02x, p2=%02x", v22, v23, v24, v25, v18);
      __int16 v26 = 107;
      if (v21)
      {
        if (!a3) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
LABEL_15:
      uint64_t v32 = *(void *)(a1 + 32);
      uint64_t v33 = sub_100315028(v9);
      sub_10033B898(v32, v33);
      id v21 = (id)objc_claimAutoreleasedReturnValue();

      if (!v21) {
        goto LABEL_18;
      }
      KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 562, @"Received duplicated/invalid tag, return code: 0x6A80", v34, v35, v36, v37, v40);
      __int16 v26 = -32662;
      if (!a3) {
        goto LABEL_18;
      }
LABEL_17:
      id v21 = v21;
      *a3 = v21;
LABEL_18:
      uint64_t v17 = sub_100312A1C(0x100452000, v26, 0);

      goto LABEL_19;
    }
    __int16 v26 = 144;
    goto LABEL_15;
  }
  if (a3)
  {
    uint64_t v14 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
    NSErrorUserInfoKey v43 = NSLocalizedDescriptionKey;
    uint64_t v15 = +[NSString stringWithUTF8String:KmlErrorString(26)];
    NSErrorUserInfoKey v44 = v15;
    uint64_t v16 = +[NSDictionary dictionaryWithObjects:&v44 forKeys:&v43 count:1];
    *a3 = +[NSError errorWithDomain:v14 code:26 userInfo:v16];
  }
  KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleWriteDataCommand:error:]", 543, @"Command used out of sequence, return code: 0x6985. Got write data command while we expected OpControlFlow", v10, v11, v12, v13, v40);
  uint64_t v17 = sub_100312A1C(0x100452000, 34153, 0);
LABEL_19:

  return v17;
}

id sub_10031B224(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a2;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleGetDataCommand:error:]", 523, @"KmlCommandHandler:", v6, v7, v8, v9, v12);
    uint64_t v10 = sub_1002FB484(*(void *)(a1 + 88), v5, a3);
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_10031B2B0(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a2;
    KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleGetResponseCommand:error:]", 529, @"KmlCommandHandler:", v6, v7, v8, v9, v12);
    uint64_t v10 = sub_1002FB934(*(id **)(a1 + 88), v5, a3);
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

id sub_10031B33C(uint64_t a1, void *a2, void *a3)
{
  if (a1)
  {
    id v5 = a2;
    unsigned int v6 = sub_100315598((uint64_t)v5);
    unsigned int v7 = sub_1003158F8((uint64_t)v5);

    id v39 = 0;
    char v12 = sub_10031B780(a1, v6, v7, &v39, v8, v9, v10, v11);
    id v13 = v39;
    id v18 = v13;
    if ((v12 & 1) == 0)
    {
      KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 469, @"KmlCommandHandler: Invalid flow control: p1:%02x p2:%02x", v14, v15, v16, v17, v6);
      if (!v18)
      {
        id v21 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
        NSErrorUserInfoKey v44 = NSLocalizedDescriptionKey;
        uint64_t v22 = +[NSString stringWithUTF8String:KmlErrorString(14)];
        uint64_t v45 = v22;
        uint64_t v23 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
        id v18 = +[NSError errorWithDomain:v21 code:14 userInfo:v23];
      }
      unsigned int v20 = 107;
      if (!a3) {
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    if (v6 == 17)
    {
      uint64_t v24 = 2;
    }
    else
    {
      if (v6 != 16)
      {
        if (!v13)
        {
          uint64_t v25 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v40 = NSLocalizedDescriptionKey;
          __int16 v26 = +[NSString stringWithUTF8String:KmlErrorString(17)];
          NSErrorUserInfoKey v41 = v26;
          unsigned int v27 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];
          id v18 = +[NSError errorWithDomain:v25 code:17 userInfo:v27];
        }
        KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 507, @"KmlCommandHandler: Remote Reader sent abort message", v14, v15, v16, v17, v38);
        *(void *)(a1 + 80) = 3;
        *(unsigned char *)(a1 + 64) = v7;
LABEL_19:
        unsigned int v20 = 144;
        if (!a3) {
          goto LABEL_22;
        }
        goto LABEL_20;
      }
      if (v7 == 1)
      {
        uint64_t v19 = sub_10031C09C(a1);

        if (*(unsigned char *)(a1 + 40) && !v19)
        {
          id v18 = 0;
          *(void *)(a1 + 80) = 4;
          *(unsigned char *)(a1 + 40) = 0;
          unsigned int v20 = 144;
LABEL_22:
          KmlLogFunc2(OS_LOG_TYPE_INFO, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 516, @"KmlCommandHandler: response status = 0x%02x", v14, v15, v16, v17, __rev16(v20));
          uint64_t v28 = sub_100312A1C(0x100452000, v20, 0);

          goto LABEL_23;
        }
        if (*(unsigned char *)(a1 + 40))
        {
          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 491, @"KmlCommandHandler: key creation config is invalid", v14, v15, v16, v17, v38);
        }
        else
        {
          uint64_t v30 = +[NSString stringWithUTF8String:"com.apple.sesd.kml.pairing"];
          NSErrorUserInfoKey v42 = NSLocalizedDescriptionKey;
          uint64_t v31 = +[NSString stringWithUTF8String:KmlErrorString(12)];
          NSErrorUserInfoKey v43 = v31;
          uint64_t v32 = +[NSDictionary dictionaryWithObjects:&v43 forKeys:&v42 count:1];
          uint64_t v33 = +[NSError errorWithDomain:v30 code:12 userInfo:v32];

          KmlLogFunc2(OS_LOG_TYPE_ERROR, (uint64_t)"-[KmlCommandHandler handleOpControlFlowCommand:error:]", 489, @"KmlCommandHandler: missing end P1 P2", v34, v35, v36, v37, v38);
          uint64_t v19 = (void *)v33;
        }
        *(void *)(a1 + 80) = 1;
        unsigned int v20 = 32874;
        id v18 = v19;
        if (!a3) {
          goto LABEL_22;
        }
LABEL_20:
        if (v18)
        {
          id v18 = v18;
          *a3 = v18;
        }
        goto LABEL_22;
      }
      uint64_t v24 = 1;
    }
    *(void *)(a1 + 80) = v24;
    goto LABEL_19;
  }
  uint64_t v28 = 0;
LABEL_23:

  return v28;
}